/**
 * BatchService
 * A client for issuing REST requests to the Azure Batch service.
 *
 * The version of the OpenAPI document: 2018-03-01.6.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIJobManagerTask.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIJobManagerTask::OAIJobManagerTask(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIJobManagerTask::OAIJobManagerTask() {
    this->initializeModel();
}

OAIJobManagerTask::~OAIJobManagerTask() {}

void OAIJobManagerTask::initializeModel() {

    m_allow_low_priority_node_isSet = false;
    m_allow_low_priority_node_isValid = false;

    m_application_package_references_isSet = false;
    m_application_package_references_isValid = false;

    m_authentication_token_settings_isSet = false;
    m_authentication_token_settings_isValid = false;

    m_command_line_isSet = false;
    m_command_line_isValid = false;

    m_constraints_isSet = false;
    m_constraints_isValid = false;

    m_container_settings_isSet = false;
    m_container_settings_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_environment_settings_isSet = false;
    m_environment_settings_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_kill_job_on_completion_isSet = false;
    m_kill_job_on_completion_isValid = false;

    m_output_files_isSet = false;
    m_output_files_isValid = false;

    m_resource_files_isSet = false;
    m_resource_files_isValid = false;

    m_run_exclusive_isSet = false;
    m_run_exclusive_isValid = false;

    m_user_identity_isSet = false;
    m_user_identity_isValid = false;
}

void OAIJobManagerTask::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIJobManagerTask::fromJsonObject(QJsonObject json) {

    m_allow_low_priority_node_isValid = ::OpenAPI::fromJsonValue(m_allow_low_priority_node, json[QString("allowLowPriorityNode")]);
    m_allow_low_priority_node_isSet = !json[QString("allowLowPriorityNode")].isNull() && m_allow_low_priority_node_isValid;

    m_application_package_references_isValid = ::OpenAPI::fromJsonValue(m_application_package_references, json[QString("applicationPackageReferences")]);
    m_application_package_references_isSet = !json[QString("applicationPackageReferences")].isNull() && m_application_package_references_isValid;

    m_authentication_token_settings_isValid = ::OpenAPI::fromJsonValue(m_authentication_token_settings, json[QString("authenticationTokenSettings")]);
    m_authentication_token_settings_isSet = !json[QString("authenticationTokenSettings")].isNull() && m_authentication_token_settings_isValid;

    m_command_line_isValid = ::OpenAPI::fromJsonValue(m_command_line, json[QString("commandLine")]);
    m_command_line_isSet = !json[QString("commandLine")].isNull() && m_command_line_isValid;

    m_constraints_isValid = ::OpenAPI::fromJsonValue(m_constraints, json[QString("constraints")]);
    m_constraints_isSet = !json[QString("constraints")].isNull() && m_constraints_isValid;

    m_container_settings_isValid = ::OpenAPI::fromJsonValue(m_container_settings, json[QString("containerSettings")]);
    m_container_settings_isSet = !json[QString("containerSettings")].isNull() && m_container_settings_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_environment_settings_isValid = ::OpenAPI::fromJsonValue(m_environment_settings, json[QString("environmentSettings")]);
    m_environment_settings_isSet = !json[QString("environmentSettings")].isNull() && m_environment_settings_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_kill_job_on_completion_isValid = ::OpenAPI::fromJsonValue(m_kill_job_on_completion, json[QString("killJobOnCompletion")]);
    m_kill_job_on_completion_isSet = !json[QString("killJobOnCompletion")].isNull() && m_kill_job_on_completion_isValid;

    m_output_files_isValid = ::OpenAPI::fromJsonValue(m_output_files, json[QString("outputFiles")]);
    m_output_files_isSet = !json[QString("outputFiles")].isNull() && m_output_files_isValid;

    m_resource_files_isValid = ::OpenAPI::fromJsonValue(m_resource_files, json[QString("resourceFiles")]);
    m_resource_files_isSet = !json[QString("resourceFiles")].isNull() && m_resource_files_isValid;

    m_run_exclusive_isValid = ::OpenAPI::fromJsonValue(m_run_exclusive, json[QString("runExclusive")]);
    m_run_exclusive_isSet = !json[QString("runExclusive")].isNull() && m_run_exclusive_isValid;

    m_user_identity_isValid = ::OpenAPI::fromJsonValue(m_user_identity, json[QString("userIdentity")]);
    m_user_identity_isSet = !json[QString("userIdentity")].isNull() && m_user_identity_isValid;
}

QString OAIJobManagerTask::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIJobManagerTask::asJsonObject() const {
    QJsonObject obj;
    if (m_allow_low_priority_node_isSet) {
        obj.insert(QString("allowLowPriorityNode"), ::OpenAPI::toJsonValue(m_allow_low_priority_node));
    }
    if (m_application_package_references.size() > 0) {
        obj.insert(QString("applicationPackageReferences"), ::OpenAPI::toJsonValue(m_application_package_references));
    }
    if (m_authentication_token_settings.isSet()) {
        obj.insert(QString("authenticationTokenSettings"), ::OpenAPI::toJsonValue(m_authentication_token_settings));
    }
    if (m_command_line_isSet) {
        obj.insert(QString("commandLine"), ::OpenAPI::toJsonValue(m_command_line));
    }
    if (m_constraints.isSet()) {
        obj.insert(QString("constraints"), ::OpenAPI::toJsonValue(m_constraints));
    }
    if (m_container_settings.isSet()) {
        obj.insert(QString("containerSettings"), ::OpenAPI::toJsonValue(m_container_settings));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_environment_settings.size() > 0) {
        obj.insert(QString("environmentSettings"), ::OpenAPI::toJsonValue(m_environment_settings));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_kill_job_on_completion_isSet) {
        obj.insert(QString("killJobOnCompletion"), ::OpenAPI::toJsonValue(m_kill_job_on_completion));
    }
    if (m_output_files.size() > 0) {
        obj.insert(QString("outputFiles"), ::OpenAPI::toJsonValue(m_output_files));
    }
    if (m_resource_files.size() > 0) {
        obj.insert(QString("resourceFiles"), ::OpenAPI::toJsonValue(m_resource_files));
    }
    if (m_run_exclusive_isSet) {
        obj.insert(QString("runExclusive"), ::OpenAPI::toJsonValue(m_run_exclusive));
    }
    if (m_user_identity.isSet()) {
        obj.insert(QString("userIdentity"), ::OpenAPI::toJsonValue(m_user_identity));
    }
    return obj;
}

bool OAIJobManagerTask::isAllowLowPriorityNode() const {
    return m_allow_low_priority_node;
}
void OAIJobManagerTask::setAllowLowPriorityNode(const bool &allow_low_priority_node) {
    m_allow_low_priority_node = allow_low_priority_node;
    m_allow_low_priority_node_isSet = true;
}

bool OAIJobManagerTask::is_allow_low_priority_node_Set() const{
    return m_allow_low_priority_node_isSet;
}

bool OAIJobManagerTask::is_allow_low_priority_node_Valid() const{
    return m_allow_low_priority_node_isValid;
}

QList<OAIApplicationPackageReference> OAIJobManagerTask::getApplicationPackageReferences() const {
    return m_application_package_references;
}
void OAIJobManagerTask::setApplicationPackageReferences(const QList<OAIApplicationPackageReference> &application_package_references) {
    m_application_package_references = application_package_references;
    m_application_package_references_isSet = true;
}

bool OAIJobManagerTask::is_application_package_references_Set() const{
    return m_application_package_references_isSet;
}

bool OAIJobManagerTask::is_application_package_references_Valid() const{
    return m_application_package_references_isValid;
}

OAIAuthenticationTokenSettings OAIJobManagerTask::getAuthenticationTokenSettings() const {
    return m_authentication_token_settings;
}
void OAIJobManagerTask::setAuthenticationTokenSettings(const OAIAuthenticationTokenSettings &authentication_token_settings) {
    m_authentication_token_settings = authentication_token_settings;
    m_authentication_token_settings_isSet = true;
}

bool OAIJobManagerTask::is_authentication_token_settings_Set() const{
    return m_authentication_token_settings_isSet;
}

bool OAIJobManagerTask::is_authentication_token_settings_Valid() const{
    return m_authentication_token_settings_isValid;
}

QString OAIJobManagerTask::getCommandLine() const {
    return m_command_line;
}
void OAIJobManagerTask::setCommandLine(const QString &command_line) {
    m_command_line = command_line;
    m_command_line_isSet = true;
}

bool OAIJobManagerTask::is_command_line_Set() const{
    return m_command_line_isSet;
}

bool OAIJobManagerTask::is_command_line_Valid() const{
    return m_command_line_isValid;
}

OAITaskConstraints OAIJobManagerTask::getConstraints() const {
    return m_constraints;
}
void OAIJobManagerTask::setConstraints(const OAITaskConstraints &constraints) {
    m_constraints = constraints;
    m_constraints_isSet = true;
}

bool OAIJobManagerTask::is_constraints_Set() const{
    return m_constraints_isSet;
}

bool OAIJobManagerTask::is_constraints_Valid() const{
    return m_constraints_isValid;
}

OAITaskContainerSettings OAIJobManagerTask::getContainerSettings() const {
    return m_container_settings;
}
void OAIJobManagerTask::setContainerSettings(const OAITaskContainerSettings &container_settings) {
    m_container_settings = container_settings;
    m_container_settings_isSet = true;
}

bool OAIJobManagerTask::is_container_settings_Set() const{
    return m_container_settings_isSet;
}

bool OAIJobManagerTask::is_container_settings_Valid() const{
    return m_container_settings_isValid;
}

QString OAIJobManagerTask::getDisplayName() const {
    return m_display_name;
}
void OAIJobManagerTask::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIJobManagerTask::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIJobManagerTask::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QList<OAIEnvironmentSetting> OAIJobManagerTask::getEnvironmentSettings() const {
    return m_environment_settings;
}
void OAIJobManagerTask::setEnvironmentSettings(const QList<OAIEnvironmentSetting> &environment_settings) {
    m_environment_settings = environment_settings;
    m_environment_settings_isSet = true;
}

bool OAIJobManagerTask::is_environment_settings_Set() const{
    return m_environment_settings_isSet;
}

bool OAIJobManagerTask::is_environment_settings_Valid() const{
    return m_environment_settings_isValid;
}

QString OAIJobManagerTask::getId() const {
    return m_id;
}
void OAIJobManagerTask::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIJobManagerTask::is_id_Set() const{
    return m_id_isSet;
}

bool OAIJobManagerTask::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIJobManagerTask::isKillJobOnCompletion() const {
    return m_kill_job_on_completion;
}
void OAIJobManagerTask::setKillJobOnCompletion(const bool &kill_job_on_completion) {
    m_kill_job_on_completion = kill_job_on_completion;
    m_kill_job_on_completion_isSet = true;
}

bool OAIJobManagerTask::is_kill_job_on_completion_Set() const{
    return m_kill_job_on_completion_isSet;
}

bool OAIJobManagerTask::is_kill_job_on_completion_Valid() const{
    return m_kill_job_on_completion_isValid;
}

QList<OAIOutputFile> OAIJobManagerTask::getOutputFiles() const {
    return m_output_files;
}
void OAIJobManagerTask::setOutputFiles(const QList<OAIOutputFile> &output_files) {
    m_output_files = output_files;
    m_output_files_isSet = true;
}

bool OAIJobManagerTask::is_output_files_Set() const{
    return m_output_files_isSet;
}

bool OAIJobManagerTask::is_output_files_Valid() const{
    return m_output_files_isValid;
}

QList<OAIResourceFile> OAIJobManagerTask::getResourceFiles() const {
    return m_resource_files;
}
void OAIJobManagerTask::setResourceFiles(const QList<OAIResourceFile> &resource_files) {
    m_resource_files = resource_files;
    m_resource_files_isSet = true;
}

bool OAIJobManagerTask::is_resource_files_Set() const{
    return m_resource_files_isSet;
}

bool OAIJobManagerTask::is_resource_files_Valid() const{
    return m_resource_files_isValid;
}

bool OAIJobManagerTask::isRunExclusive() const {
    return m_run_exclusive;
}
void OAIJobManagerTask::setRunExclusive(const bool &run_exclusive) {
    m_run_exclusive = run_exclusive;
    m_run_exclusive_isSet = true;
}

bool OAIJobManagerTask::is_run_exclusive_Set() const{
    return m_run_exclusive_isSet;
}

bool OAIJobManagerTask::is_run_exclusive_Valid() const{
    return m_run_exclusive_isValid;
}

OAIUserIdentity OAIJobManagerTask::getUserIdentity() const {
    return m_user_identity;
}
void OAIJobManagerTask::setUserIdentity(const OAIUserIdentity &user_identity) {
    m_user_identity = user_identity;
    m_user_identity_isSet = true;
}

bool OAIJobManagerTask::is_user_identity_Set() const{
    return m_user_identity_isSet;
}

bool OAIJobManagerTask::is_user_identity_Valid() const{
    return m_user_identity_isValid;
}

bool OAIJobManagerTask::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allow_low_priority_node_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_application_package_references.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_authentication_token_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_command_line_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_constraints.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_container_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_environment_settings.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kill_job_on_completion_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_output_files.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_files.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_run_exclusive_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_identity.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIJobManagerTask::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_command_line_isValid && m_id_isValid && true;
}

} // namespace OpenAPI
