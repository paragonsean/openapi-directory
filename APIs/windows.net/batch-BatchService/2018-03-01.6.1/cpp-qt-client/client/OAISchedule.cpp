/**
 * BatchService
 * A client for issuing REST requests to the Azure Batch service.
 *
 * The version of the OpenAPI document: 2018-03-01.6.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISchedule.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISchedule::OAISchedule(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISchedule::OAISchedule() {
    this->initializeModel();
}

OAISchedule::~OAISchedule() {}

void OAISchedule::initializeModel() {

    m_do_not_run_after_isSet = false;
    m_do_not_run_after_isValid = false;

    m_do_not_run_until_isSet = false;
    m_do_not_run_until_isValid = false;

    m_recurrence_interval_isSet = false;
    m_recurrence_interval_isValid = false;

    m_start_window_isSet = false;
    m_start_window_isValid = false;
}

void OAISchedule::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISchedule::fromJsonObject(QJsonObject json) {

    m_do_not_run_after_isValid = ::OpenAPI::fromJsonValue(m_do_not_run_after, json[QString("doNotRunAfter")]);
    m_do_not_run_after_isSet = !json[QString("doNotRunAfter")].isNull() && m_do_not_run_after_isValid;

    m_do_not_run_until_isValid = ::OpenAPI::fromJsonValue(m_do_not_run_until, json[QString("doNotRunUntil")]);
    m_do_not_run_until_isSet = !json[QString("doNotRunUntil")].isNull() && m_do_not_run_until_isValid;

    m_recurrence_interval_isValid = ::OpenAPI::fromJsonValue(m_recurrence_interval, json[QString("recurrenceInterval")]);
    m_recurrence_interval_isSet = !json[QString("recurrenceInterval")].isNull() && m_recurrence_interval_isValid;

    m_start_window_isValid = ::OpenAPI::fromJsonValue(m_start_window, json[QString("startWindow")]);
    m_start_window_isSet = !json[QString("startWindow")].isNull() && m_start_window_isValid;
}

QString OAISchedule::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISchedule::asJsonObject() const {
    QJsonObject obj;
    if (m_do_not_run_after_isSet) {
        obj.insert(QString("doNotRunAfter"), ::OpenAPI::toJsonValue(m_do_not_run_after));
    }
    if (m_do_not_run_until_isSet) {
        obj.insert(QString("doNotRunUntil"), ::OpenAPI::toJsonValue(m_do_not_run_until));
    }
    if (m_recurrence_interval_isSet) {
        obj.insert(QString("recurrenceInterval"), ::OpenAPI::toJsonValue(m_recurrence_interval));
    }
    if (m_start_window_isSet) {
        obj.insert(QString("startWindow"), ::OpenAPI::toJsonValue(m_start_window));
    }
    return obj;
}

QDateTime OAISchedule::getDoNotRunAfter() const {
    return m_do_not_run_after;
}
void OAISchedule::setDoNotRunAfter(const QDateTime &do_not_run_after) {
    m_do_not_run_after = do_not_run_after;
    m_do_not_run_after_isSet = true;
}

bool OAISchedule::is_do_not_run_after_Set() const{
    return m_do_not_run_after_isSet;
}

bool OAISchedule::is_do_not_run_after_Valid() const{
    return m_do_not_run_after_isValid;
}

QDateTime OAISchedule::getDoNotRunUntil() const {
    return m_do_not_run_until;
}
void OAISchedule::setDoNotRunUntil(const QDateTime &do_not_run_until) {
    m_do_not_run_until = do_not_run_until;
    m_do_not_run_until_isSet = true;
}

bool OAISchedule::is_do_not_run_until_Set() const{
    return m_do_not_run_until_isSet;
}

bool OAISchedule::is_do_not_run_until_Valid() const{
    return m_do_not_run_until_isValid;
}

QString OAISchedule::getRecurrenceInterval() const {
    return m_recurrence_interval;
}
void OAISchedule::setRecurrenceInterval(const QString &recurrence_interval) {
    m_recurrence_interval = recurrence_interval;
    m_recurrence_interval_isSet = true;
}

bool OAISchedule::is_recurrence_interval_Set() const{
    return m_recurrence_interval_isSet;
}

bool OAISchedule::is_recurrence_interval_Valid() const{
    return m_recurrence_interval_isValid;
}

QString OAISchedule::getStartWindow() const {
    return m_start_window;
}
void OAISchedule::setStartWindow(const QString &start_window) {
    m_start_window = start_window;
    m_start_window_isSet = true;
}

bool OAISchedule::is_start_window_Set() const{
    return m_start_window_isSet;
}

bool OAISchedule::is_start_window_Valid() const{
    return m_start_window_isValid;
}

bool OAISchedule::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_do_not_run_after_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_do_not_run_until_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recurrence_interval_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_window_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISchedule::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
