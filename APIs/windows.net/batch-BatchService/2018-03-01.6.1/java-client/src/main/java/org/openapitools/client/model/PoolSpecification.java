/*
 * BatchService
 * A client for issuing REST requests to the Azure Batch service.
 *
 * The version of the OpenAPI document: 2018-03-01.6.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ApplicationPackageReference;
import org.openapitools.client.model.CertificateReference;
import org.openapitools.client.model.CloudServiceConfiguration;
import org.openapitools.client.model.MetadataItem;
import org.openapitools.client.model.NetworkConfiguration;
import org.openapitools.client.model.StartTask;
import org.openapitools.client.model.TaskSchedulingPolicy;
import org.openapitools.client.model.UserAccount;
import org.openapitools.client.model.VirtualMachineConfiguration;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PoolSpecification
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:58:45.183336-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PoolSpecification {
  public static final String SERIALIZED_NAME_APPLICATION_LICENSES = "applicationLicenses";
  @SerializedName(SERIALIZED_NAME_APPLICATION_LICENSES)
  private List<String> applicationLicenses = new ArrayList<>();

  public static final String SERIALIZED_NAME_APPLICATION_PACKAGE_REFERENCES = "applicationPackageReferences";
  @SerializedName(SERIALIZED_NAME_APPLICATION_PACKAGE_REFERENCES)
  private List<ApplicationPackageReference> applicationPackageReferences = new ArrayList<>();

  public static final String SERIALIZED_NAME_AUTO_SCALE_EVALUATION_INTERVAL = "autoScaleEvaluationInterval";
  @SerializedName(SERIALIZED_NAME_AUTO_SCALE_EVALUATION_INTERVAL)
  private String autoScaleEvaluationInterval;

  public static final String SERIALIZED_NAME_AUTO_SCALE_FORMULA = "autoScaleFormula";
  @SerializedName(SERIALIZED_NAME_AUTO_SCALE_FORMULA)
  private String autoScaleFormula;

  public static final String SERIALIZED_NAME_CERTIFICATE_REFERENCES = "certificateReferences";
  @SerializedName(SERIALIZED_NAME_CERTIFICATE_REFERENCES)
  private List<CertificateReference> certificateReferences = new ArrayList<>();

  public static final String SERIALIZED_NAME_CLOUD_SERVICE_CONFIGURATION = "cloudServiceConfiguration";
  @SerializedName(SERIALIZED_NAME_CLOUD_SERVICE_CONFIGURATION)
  private CloudServiceConfiguration cloudServiceConfiguration;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_ENABLE_AUTO_SCALE = "enableAutoScale";
  @SerializedName(SERIALIZED_NAME_ENABLE_AUTO_SCALE)
  private Boolean enableAutoScale;

  public static final String SERIALIZED_NAME_ENABLE_INTER_NODE_COMMUNICATION = "enableInterNodeCommunication";
  @SerializedName(SERIALIZED_NAME_ENABLE_INTER_NODE_COMMUNICATION)
  private Boolean enableInterNodeCommunication;

  public static final String SERIALIZED_NAME_MAX_TASKS_PER_NODE = "maxTasksPerNode";
  @SerializedName(SERIALIZED_NAME_MAX_TASKS_PER_NODE)
  private Integer maxTasksPerNode;

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private List<MetadataItem> metadata = new ArrayList<>();

  public static final String SERIALIZED_NAME_NETWORK_CONFIGURATION = "networkConfiguration";
  @SerializedName(SERIALIZED_NAME_NETWORK_CONFIGURATION)
  private NetworkConfiguration networkConfiguration;

  public static final String SERIALIZED_NAME_RESIZE_TIMEOUT = "resizeTimeout";
  @SerializedName(SERIALIZED_NAME_RESIZE_TIMEOUT)
  private String resizeTimeout;

  public static final String SERIALIZED_NAME_START_TASK = "startTask";
  @SerializedName(SERIALIZED_NAME_START_TASK)
  private StartTask startTask;

  public static final String SERIALIZED_NAME_TARGET_DEDICATED_NODES = "targetDedicatedNodes";
  @SerializedName(SERIALIZED_NAME_TARGET_DEDICATED_NODES)
  private Integer targetDedicatedNodes;

  public static final String SERIALIZED_NAME_TARGET_LOW_PRIORITY_NODES = "targetLowPriorityNodes";
  @SerializedName(SERIALIZED_NAME_TARGET_LOW_PRIORITY_NODES)
  private Integer targetLowPriorityNodes;

  public static final String SERIALIZED_NAME_TASK_SCHEDULING_POLICY = "taskSchedulingPolicy";
  @SerializedName(SERIALIZED_NAME_TASK_SCHEDULING_POLICY)
  private TaskSchedulingPolicy taskSchedulingPolicy;

  public static final String SERIALIZED_NAME_USER_ACCOUNTS = "userAccounts";
  @SerializedName(SERIALIZED_NAME_USER_ACCOUNTS)
  private List<UserAccount> userAccounts = new ArrayList<>();

  public static final String SERIALIZED_NAME_VIRTUAL_MACHINE_CONFIGURATION = "virtualMachineConfiguration";
  @SerializedName(SERIALIZED_NAME_VIRTUAL_MACHINE_CONFIGURATION)
  private VirtualMachineConfiguration virtualMachineConfiguration;

  public static final String SERIALIZED_NAME_VM_SIZE = "vmSize";
  @SerializedName(SERIALIZED_NAME_VM_SIZE)
  private String vmSize;

  public PoolSpecification() {
  }

  public PoolSpecification applicationLicenses(List<String> applicationLicenses) {
    this.applicationLicenses = applicationLicenses;
    return this;
  }

  public PoolSpecification addApplicationLicensesItem(String applicationLicensesItem) {
    if (this.applicationLicenses == null) {
      this.applicationLicenses = new ArrayList<>();
    }
    this.applicationLicenses.add(applicationLicensesItem);
    return this;
  }

  /**
   * The list of application licenses must be a subset of available Batch service application licenses. If a license is requested which is not supported, pool creation will fail.
   * @return applicationLicenses
   */
  @javax.annotation.Nullable
  public List<String> getApplicationLicenses() {
    return applicationLicenses;
  }

  public void setApplicationLicenses(List<String> applicationLicenses) {
    this.applicationLicenses = applicationLicenses;
  }


  public PoolSpecification applicationPackageReferences(List<ApplicationPackageReference> applicationPackageReferences) {
    this.applicationPackageReferences = applicationPackageReferences;
    return this;
  }

  public PoolSpecification addApplicationPackageReferencesItem(ApplicationPackageReference applicationPackageReferencesItem) {
    if (this.applicationPackageReferences == null) {
      this.applicationPackageReferences = new ArrayList<>();
    }
    this.applicationPackageReferences.add(applicationPackageReferencesItem);
    return this;
  }

  /**
   * Get applicationPackageReferences
   * @return applicationPackageReferences
   */
  @javax.annotation.Nullable
  public List<ApplicationPackageReference> getApplicationPackageReferences() {
    return applicationPackageReferences;
  }

  public void setApplicationPackageReferences(List<ApplicationPackageReference> applicationPackageReferences) {
    this.applicationPackageReferences = applicationPackageReferences;
  }


  public PoolSpecification autoScaleEvaluationInterval(String autoScaleEvaluationInterval) {
    this.autoScaleEvaluationInterval = autoScaleEvaluationInterval;
    return this;
  }

  /**
   * The default value is 15 minutes. The minimum and maximum value are 5 minutes and 168 hours respectively. If you specify a value less than 5 minutes or greater than 168 hours, the Batch service rejects the request with an invalid property value error; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request).
   * @return autoScaleEvaluationInterval
   */
  @javax.annotation.Nullable
  public String getAutoScaleEvaluationInterval() {
    return autoScaleEvaluationInterval;
  }

  public void setAutoScaleEvaluationInterval(String autoScaleEvaluationInterval) {
    this.autoScaleEvaluationInterval = autoScaleEvaluationInterval;
  }


  public PoolSpecification autoScaleFormula(String autoScaleFormula) {
    this.autoScaleFormula = autoScaleFormula;
    return this;
  }

  /**
   * This property must not be specified if enableAutoScale is set to false. It is required if enableAutoScale is set to true. The formula is checked for validity before the pool is created. If the formula is not valid, the Batch service rejects the request with detailed error information.
   * @return autoScaleFormula
   */
  @javax.annotation.Nullable
  public String getAutoScaleFormula() {
    return autoScaleFormula;
  }

  public void setAutoScaleFormula(String autoScaleFormula) {
    this.autoScaleFormula = autoScaleFormula;
  }


  public PoolSpecification certificateReferences(List<CertificateReference> certificateReferences) {
    this.certificateReferences = certificateReferences;
    return this;
  }

  public PoolSpecification addCertificateReferencesItem(CertificateReference certificateReferencesItem) {
    if (this.certificateReferences == null) {
      this.certificateReferences = new ArrayList<>();
    }
    this.certificateReferences.add(certificateReferencesItem);
    return this;
  }

  /**
   * For Windows compute nodes, the Batch service installs the certificates to the specified certificate store and location. For Linux compute nodes, the certificates are stored in a directory inside the task working directory and an environment variable AZ_BATCH_CERTIFICATES_DIR is supplied to the task to query for this location. For certificates with visibility of &#39;remoteUser&#39;, a &#39;certs&#39; directory is created in the user&#39;s home directory (e.g., /home/{user-name}/certs) and certificates are placed in that directory.
   * @return certificateReferences
   */
  @javax.annotation.Nullable
  public List<CertificateReference> getCertificateReferences() {
    return certificateReferences;
  }

  public void setCertificateReferences(List<CertificateReference> certificateReferences) {
    this.certificateReferences = certificateReferences;
  }


  public PoolSpecification cloudServiceConfiguration(CloudServiceConfiguration cloudServiceConfiguration) {
    this.cloudServiceConfiguration = cloudServiceConfiguration;
    return this;
  }

  /**
   * Get cloudServiceConfiguration
   * @return cloudServiceConfiguration
   */
  @javax.annotation.Nullable
  public CloudServiceConfiguration getCloudServiceConfiguration() {
    return cloudServiceConfiguration;
  }

  public void setCloudServiceConfiguration(CloudServiceConfiguration cloudServiceConfiguration) {
    this.cloudServiceConfiguration = cloudServiceConfiguration;
  }


  public PoolSpecification displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * The display name need not be unique and can contain any Unicode characters up to a maximum length of 1024.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public PoolSpecification enableAutoScale(Boolean enableAutoScale) {
    this.enableAutoScale = enableAutoScale;
    return this;
  }

  /**
   * If false, at least one of targetDedicateNodes and targetLowPriorityNodes must be specified. If true, the autoScaleFormula element is required. The pool automatically resizes according to the formula. The default value is false.
   * @return enableAutoScale
   */
  @javax.annotation.Nullable
  public Boolean getEnableAutoScale() {
    return enableAutoScale;
  }

  public void setEnableAutoScale(Boolean enableAutoScale) {
    this.enableAutoScale = enableAutoScale;
  }


  public PoolSpecification enableInterNodeCommunication(Boolean enableInterNodeCommunication) {
    this.enableInterNodeCommunication = enableInterNodeCommunication;
    return this;
  }

  /**
   * Enabling inter-node communication limits the maximum size of the pool due to deployment restrictions on the nodes of the pool. This may result in the pool not reaching its desired size. The default value is false.
   * @return enableInterNodeCommunication
   */
  @javax.annotation.Nullable
  public Boolean getEnableInterNodeCommunication() {
    return enableInterNodeCommunication;
  }

  public void setEnableInterNodeCommunication(Boolean enableInterNodeCommunication) {
    this.enableInterNodeCommunication = enableInterNodeCommunication;
  }


  public PoolSpecification maxTasksPerNode(Integer maxTasksPerNode) {
    this.maxTasksPerNode = maxTasksPerNode;
    return this;
  }

  /**
   * The default value is 1. The maximum value of this setting depends on the size of the compute nodes in the pool (the vmSize setting).
   * @return maxTasksPerNode
   */
  @javax.annotation.Nullable
  public Integer getMaxTasksPerNode() {
    return maxTasksPerNode;
  }

  public void setMaxTasksPerNode(Integer maxTasksPerNode) {
    this.maxTasksPerNode = maxTasksPerNode;
  }


  public PoolSpecification metadata(List<MetadataItem> metadata) {
    this.metadata = metadata;
    return this;
  }

  public PoolSpecification addMetadataItem(MetadataItem metadataItem) {
    if (this.metadata == null) {
      this.metadata = new ArrayList<>();
    }
    this.metadata.add(metadataItem);
    return this;
  }

  /**
   * The Batch service does not assign any meaning to metadata; it is solely for the use of user code.
   * @return metadata
   */
  @javax.annotation.Nullable
  public List<MetadataItem> getMetadata() {
    return metadata;
  }

  public void setMetadata(List<MetadataItem> metadata) {
    this.metadata = metadata;
  }


  public PoolSpecification networkConfiguration(NetworkConfiguration networkConfiguration) {
    this.networkConfiguration = networkConfiguration;
    return this;
  }

  /**
   * Get networkConfiguration
   * @return networkConfiguration
   */
  @javax.annotation.Nullable
  public NetworkConfiguration getNetworkConfiguration() {
    return networkConfiguration;
  }

  public void setNetworkConfiguration(NetworkConfiguration networkConfiguration) {
    this.networkConfiguration = networkConfiguration;
  }


  public PoolSpecification resizeTimeout(String resizeTimeout) {
    this.resizeTimeout = resizeTimeout;
    return this;
  }

  /**
   * This timeout applies only to manual scaling; it has no effect when enableAutoScale is set to true. The default value is 15 minutes. The minimum value is 5 minutes. If you specify a value less than 5 minutes, the Batch service rejects the request with an error; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request).
   * @return resizeTimeout
   */
  @javax.annotation.Nullable
  public String getResizeTimeout() {
    return resizeTimeout;
  }

  public void setResizeTimeout(String resizeTimeout) {
    this.resizeTimeout = resizeTimeout;
  }


  public PoolSpecification startTask(StartTask startTask) {
    this.startTask = startTask;
    return this;
  }

  /**
   * Get startTask
   * @return startTask
   */
  @javax.annotation.Nullable
  public StartTask getStartTask() {
    return startTask;
  }

  public void setStartTask(StartTask startTask) {
    this.startTask = startTask;
  }


  public PoolSpecification targetDedicatedNodes(Integer targetDedicatedNodes) {
    this.targetDedicatedNodes = targetDedicatedNodes;
    return this;
  }

  /**
   * This property must not be specified if enableAutoScale is set to true. If enableAutoScale is set to false, then you must set either targetDedicatedNodes, targetLowPriorityNodes, or both.
   * @return targetDedicatedNodes
   */
  @javax.annotation.Nullable
  public Integer getTargetDedicatedNodes() {
    return targetDedicatedNodes;
  }

  public void setTargetDedicatedNodes(Integer targetDedicatedNodes) {
    this.targetDedicatedNodes = targetDedicatedNodes;
  }


  public PoolSpecification targetLowPriorityNodes(Integer targetLowPriorityNodes) {
    this.targetLowPriorityNodes = targetLowPriorityNodes;
    return this;
  }

  /**
   * This property must not be specified if enableAutoScale is set to true. If enableAutoScale is set to false, then you must set either targetDedicatedNodes, targetLowPriorityNodes, or both.
   * @return targetLowPriorityNodes
   */
  @javax.annotation.Nullable
  public Integer getTargetLowPriorityNodes() {
    return targetLowPriorityNodes;
  }

  public void setTargetLowPriorityNodes(Integer targetLowPriorityNodes) {
    this.targetLowPriorityNodes = targetLowPriorityNodes;
  }


  public PoolSpecification taskSchedulingPolicy(TaskSchedulingPolicy taskSchedulingPolicy) {
    this.taskSchedulingPolicy = taskSchedulingPolicy;
    return this;
  }

  /**
   * Get taskSchedulingPolicy
   * @return taskSchedulingPolicy
   */
  @javax.annotation.Nullable
  public TaskSchedulingPolicy getTaskSchedulingPolicy() {
    return taskSchedulingPolicy;
  }

  public void setTaskSchedulingPolicy(TaskSchedulingPolicy taskSchedulingPolicy) {
    this.taskSchedulingPolicy = taskSchedulingPolicy;
  }


  public PoolSpecification userAccounts(List<UserAccount> userAccounts) {
    this.userAccounts = userAccounts;
    return this;
  }

  public PoolSpecification addUserAccountsItem(UserAccount userAccountsItem) {
    if (this.userAccounts == null) {
      this.userAccounts = new ArrayList<>();
    }
    this.userAccounts.add(userAccountsItem);
    return this;
  }

  /**
   * Get userAccounts
   * @return userAccounts
   */
  @javax.annotation.Nullable
  public List<UserAccount> getUserAccounts() {
    return userAccounts;
  }

  public void setUserAccounts(List<UserAccount> userAccounts) {
    this.userAccounts = userAccounts;
  }


  public PoolSpecification virtualMachineConfiguration(VirtualMachineConfiguration virtualMachineConfiguration) {
    this.virtualMachineConfiguration = virtualMachineConfiguration;
    return this;
  }

  /**
   * Get virtualMachineConfiguration
   * @return virtualMachineConfiguration
   */
  @javax.annotation.Nullable
  public VirtualMachineConfiguration getVirtualMachineConfiguration() {
    return virtualMachineConfiguration;
  }

  public void setVirtualMachineConfiguration(VirtualMachineConfiguration virtualMachineConfiguration) {
    this.virtualMachineConfiguration = virtualMachineConfiguration;
  }


  public PoolSpecification vmSize(String vmSize) {
    this.vmSize = vmSize;
    return this;
  }

  /**
   * For information about available sizes of virtual machines for Cloud Services pools (pools created with cloudServiceConfiguration), see Sizes for Cloud Services (https://azure.microsoft.com/documentation/articles/cloud-services-sizes-specs/). Batch supports all Cloud Services VM sizes except ExtraSmall, A1V2 and A2V2. For information about available VM sizes for pools using images from the Virtual Machines Marketplace (pools created with virtualMachineConfiguration) see Sizes for Virtual Machines (Linux) (https://azure.microsoft.com/documentation/articles/virtual-machines-linux-sizes/) or Sizes for Virtual Machines (Windows) (https://azure.microsoft.com/documentation/articles/virtual-machines-windows-sizes/). Batch supports all Azure VM sizes except STANDARD_A0 and those with premium storage (STANDARD_GS, STANDARD_DS, and STANDARD_DSV2 series).
   * @return vmSize
   */
  @javax.annotation.Nonnull
  public String getVmSize() {
    return vmSize;
  }

  public void setVmSize(String vmSize) {
    this.vmSize = vmSize;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PoolSpecification poolSpecification = (PoolSpecification) o;
    return Objects.equals(this.applicationLicenses, poolSpecification.applicationLicenses) &&
        Objects.equals(this.applicationPackageReferences, poolSpecification.applicationPackageReferences) &&
        Objects.equals(this.autoScaleEvaluationInterval, poolSpecification.autoScaleEvaluationInterval) &&
        Objects.equals(this.autoScaleFormula, poolSpecification.autoScaleFormula) &&
        Objects.equals(this.certificateReferences, poolSpecification.certificateReferences) &&
        Objects.equals(this.cloudServiceConfiguration, poolSpecification.cloudServiceConfiguration) &&
        Objects.equals(this.displayName, poolSpecification.displayName) &&
        Objects.equals(this.enableAutoScale, poolSpecification.enableAutoScale) &&
        Objects.equals(this.enableInterNodeCommunication, poolSpecification.enableInterNodeCommunication) &&
        Objects.equals(this.maxTasksPerNode, poolSpecification.maxTasksPerNode) &&
        Objects.equals(this.metadata, poolSpecification.metadata) &&
        Objects.equals(this.networkConfiguration, poolSpecification.networkConfiguration) &&
        Objects.equals(this.resizeTimeout, poolSpecification.resizeTimeout) &&
        Objects.equals(this.startTask, poolSpecification.startTask) &&
        Objects.equals(this.targetDedicatedNodes, poolSpecification.targetDedicatedNodes) &&
        Objects.equals(this.targetLowPriorityNodes, poolSpecification.targetLowPriorityNodes) &&
        Objects.equals(this.taskSchedulingPolicy, poolSpecification.taskSchedulingPolicy) &&
        Objects.equals(this.userAccounts, poolSpecification.userAccounts) &&
        Objects.equals(this.virtualMachineConfiguration, poolSpecification.virtualMachineConfiguration) &&
        Objects.equals(this.vmSize, poolSpecification.vmSize);
  }

  @Override
  public int hashCode() {
    return Objects.hash(applicationLicenses, applicationPackageReferences, autoScaleEvaluationInterval, autoScaleFormula, certificateReferences, cloudServiceConfiguration, displayName, enableAutoScale, enableInterNodeCommunication, maxTasksPerNode, metadata, networkConfiguration, resizeTimeout, startTask, targetDedicatedNodes, targetLowPriorityNodes, taskSchedulingPolicy, userAccounts, virtualMachineConfiguration, vmSize);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PoolSpecification {\n");
    sb.append("    applicationLicenses: ").append(toIndentedString(applicationLicenses)).append("\n");
    sb.append("    applicationPackageReferences: ").append(toIndentedString(applicationPackageReferences)).append("\n");
    sb.append("    autoScaleEvaluationInterval: ").append(toIndentedString(autoScaleEvaluationInterval)).append("\n");
    sb.append("    autoScaleFormula: ").append(toIndentedString(autoScaleFormula)).append("\n");
    sb.append("    certificateReferences: ").append(toIndentedString(certificateReferences)).append("\n");
    sb.append("    cloudServiceConfiguration: ").append(toIndentedString(cloudServiceConfiguration)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    enableAutoScale: ").append(toIndentedString(enableAutoScale)).append("\n");
    sb.append("    enableInterNodeCommunication: ").append(toIndentedString(enableInterNodeCommunication)).append("\n");
    sb.append("    maxTasksPerNode: ").append(toIndentedString(maxTasksPerNode)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    networkConfiguration: ").append(toIndentedString(networkConfiguration)).append("\n");
    sb.append("    resizeTimeout: ").append(toIndentedString(resizeTimeout)).append("\n");
    sb.append("    startTask: ").append(toIndentedString(startTask)).append("\n");
    sb.append("    targetDedicatedNodes: ").append(toIndentedString(targetDedicatedNodes)).append("\n");
    sb.append("    targetLowPriorityNodes: ").append(toIndentedString(targetLowPriorityNodes)).append("\n");
    sb.append("    taskSchedulingPolicy: ").append(toIndentedString(taskSchedulingPolicy)).append("\n");
    sb.append("    userAccounts: ").append(toIndentedString(userAccounts)).append("\n");
    sb.append("    virtualMachineConfiguration: ").append(toIndentedString(virtualMachineConfiguration)).append("\n");
    sb.append("    vmSize: ").append(toIndentedString(vmSize)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("applicationLicenses");
    openapiFields.add("applicationPackageReferences");
    openapiFields.add("autoScaleEvaluationInterval");
    openapiFields.add("autoScaleFormula");
    openapiFields.add("certificateReferences");
    openapiFields.add("cloudServiceConfiguration");
    openapiFields.add("displayName");
    openapiFields.add("enableAutoScale");
    openapiFields.add("enableInterNodeCommunication");
    openapiFields.add("maxTasksPerNode");
    openapiFields.add("metadata");
    openapiFields.add("networkConfiguration");
    openapiFields.add("resizeTimeout");
    openapiFields.add("startTask");
    openapiFields.add("targetDedicatedNodes");
    openapiFields.add("targetLowPriorityNodes");
    openapiFields.add("taskSchedulingPolicy");
    openapiFields.add("userAccounts");
    openapiFields.add("virtualMachineConfiguration");
    openapiFields.add("vmSize");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("vmSize");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PoolSpecification
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PoolSpecification.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PoolSpecification is not found in the empty JSON string", PoolSpecification.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PoolSpecification.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PoolSpecification` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PoolSpecification.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("applicationLicenses") != null && !jsonObj.get("applicationLicenses").isJsonNull() && !jsonObj.get("applicationLicenses").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `applicationLicenses` to be an array in the JSON string but got `%s`", jsonObj.get("applicationLicenses").toString()));
      }
      if (jsonObj.get("applicationPackageReferences") != null && !jsonObj.get("applicationPackageReferences").isJsonNull()) {
        JsonArray jsonArrayapplicationPackageReferences = jsonObj.getAsJsonArray("applicationPackageReferences");
        if (jsonArrayapplicationPackageReferences != null) {
          // ensure the json data is an array
          if (!jsonObj.get("applicationPackageReferences").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `applicationPackageReferences` to be an array in the JSON string but got `%s`", jsonObj.get("applicationPackageReferences").toString()));
          }

          // validate the optional field `applicationPackageReferences` (array)
          for (int i = 0; i < jsonArrayapplicationPackageReferences.size(); i++) {
            ApplicationPackageReference.validateJsonElement(jsonArrayapplicationPackageReferences.get(i));
          };
        }
      }
      if ((jsonObj.get("autoScaleEvaluationInterval") != null && !jsonObj.get("autoScaleEvaluationInterval").isJsonNull()) && !jsonObj.get("autoScaleEvaluationInterval").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `autoScaleEvaluationInterval` to be a primitive type in the JSON string but got `%s`", jsonObj.get("autoScaleEvaluationInterval").toString()));
      }
      if ((jsonObj.get("autoScaleFormula") != null && !jsonObj.get("autoScaleFormula").isJsonNull()) && !jsonObj.get("autoScaleFormula").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `autoScaleFormula` to be a primitive type in the JSON string but got `%s`", jsonObj.get("autoScaleFormula").toString()));
      }
      if (jsonObj.get("certificateReferences") != null && !jsonObj.get("certificateReferences").isJsonNull()) {
        JsonArray jsonArraycertificateReferences = jsonObj.getAsJsonArray("certificateReferences");
        if (jsonArraycertificateReferences != null) {
          // ensure the json data is an array
          if (!jsonObj.get("certificateReferences").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `certificateReferences` to be an array in the JSON string but got `%s`", jsonObj.get("certificateReferences").toString()));
          }

          // validate the optional field `certificateReferences` (array)
          for (int i = 0; i < jsonArraycertificateReferences.size(); i++) {
            CertificateReference.validateJsonElement(jsonArraycertificateReferences.get(i));
          };
        }
      }
      // validate the optional field `cloudServiceConfiguration`
      if (jsonObj.get("cloudServiceConfiguration") != null && !jsonObj.get("cloudServiceConfiguration").isJsonNull()) {
        CloudServiceConfiguration.validateJsonElement(jsonObj.get("cloudServiceConfiguration"));
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if (jsonObj.get("metadata") != null && !jsonObj.get("metadata").isJsonNull()) {
        JsonArray jsonArraymetadata = jsonObj.getAsJsonArray("metadata");
        if (jsonArraymetadata != null) {
          // ensure the json data is an array
          if (!jsonObj.get("metadata").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `metadata` to be an array in the JSON string but got `%s`", jsonObj.get("metadata").toString()));
          }

          // validate the optional field `metadata` (array)
          for (int i = 0; i < jsonArraymetadata.size(); i++) {
            MetadataItem.validateJsonElement(jsonArraymetadata.get(i));
          };
        }
      }
      // validate the optional field `networkConfiguration`
      if (jsonObj.get("networkConfiguration") != null && !jsonObj.get("networkConfiguration").isJsonNull()) {
        NetworkConfiguration.validateJsonElement(jsonObj.get("networkConfiguration"));
      }
      if ((jsonObj.get("resizeTimeout") != null && !jsonObj.get("resizeTimeout").isJsonNull()) && !jsonObj.get("resizeTimeout").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resizeTimeout` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resizeTimeout").toString()));
      }
      // validate the optional field `startTask`
      if (jsonObj.get("startTask") != null && !jsonObj.get("startTask").isJsonNull()) {
        StartTask.validateJsonElement(jsonObj.get("startTask"));
      }
      // validate the optional field `taskSchedulingPolicy`
      if (jsonObj.get("taskSchedulingPolicy") != null && !jsonObj.get("taskSchedulingPolicy").isJsonNull()) {
        TaskSchedulingPolicy.validateJsonElement(jsonObj.get("taskSchedulingPolicy"));
      }
      if (jsonObj.get("userAccounts") != null && !jsonObj.get("userAccounts").isJsonNull()) {
        JsonArray jsonArrayuserAccounts = jsonObj.getAsJsonArray("userAccounts");
        if (jsonArrayuserAccounts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("userAccounts").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `userAccounts` to be an array in the JSON string but got `%s`", jsonObj.get("userAccounts").toString()));
          }

          // validate the optional field `userAccounts` (array)
          for (int i = 0; i < jsonArrayuserAccounts.size(); i++) {
            UserAccount.validateJsonElement(jsonArrayuserAccounts.get(i));
          };
        }
      }
      // validate the optional field `virtualMachineConfiguration`
      if (jsonObj.get("virtualMachineConfiguration") != null && !jsonObj.get("virtualMachineConfiguration").isJsonNull()) {
        VirtualMachineConfiguration.validateJsonElement(jsonObj.get("virtualMachineConfiguration"));
      }
      if (!jsonObj.get("vmSize").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vmSize` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vmSize").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PoolSpecification.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PoolSpecification' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PoolSpecification> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PoolSpecification.class));

       return (TypeAdapter<T>) new TypeAdapter<PoolSpecification>() {
           @Override
           public void write(JsonWriter out, PoolSpecification value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PoolSpecification read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PoolSpecification given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PoolSpecification
   * @throws IOException if the JSON string is invalid with respect to PoolSpecification
   */
  public static PoolSpecification fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PoolSpecification.class);
  }

  /**
   * Convert an instance of PoolSpecification to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

