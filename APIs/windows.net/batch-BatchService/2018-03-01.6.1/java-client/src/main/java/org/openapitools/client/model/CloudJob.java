/*
 * BatchService
 * A client for issuing REST requests to the Azure Batch service.
 *
 * The version of the OpenAPI document: 2018-03-01.6.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.EnvironmentSetting;
import org.openapitools.client.model.JobConstraints;
import org.openapitools.client.model.JobExecutionInformation;
import org.openapitools.client.model.JobManagerTask;
import org.openapitools.client.model.JobPreparationTask;
import org.openapitools.client.model.JobReleaseTask;
import org.openapitools.client.model.JobState;
import org.openapitools.client.model.JobStatistics;
import org.openapitools.client.model.MetadataItem;
import org.openapitools.client.model.OnAllTasksComplete;
import org.openapitools.client.model.OnTaskFailure;
import org.openapitools.client.model.PoolInformation;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CloudJob
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:58:45.183336-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CloudJob {
  public static final String SERIALIZED_NAME_COMMON_ENVIRONMENT_SETTINGS = "commonEnvironmentSettings";
  @SerializedName(SERIALIZED_NAME_COMMON_ENVIRONMENT_SETTINGS)
  private List<EnvironmentSetting> commonEnvironmentSettings = new ArrayList<>();

  public static final String SERIALIZED_NAME_CONSTRAINTS = "constraints";
  @SerializedName(SERIALIZED_NAME_CONSTRAINTS)
  private JobConstraints constraints;

  public static final String SERIALIZED_NAME_CREATION_TIME = "creationTime";
  @SerializedName(SERIALIZED_NAME_CREATION_TIME)
  private OffsetDateTime creationTime;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_E_TAG = "eTag";
  @SerializedName(SERIALIZED_NAME_E_TAG)
  private String eTag;

  public static final String SERIALIZED_NAME_EXECUTION_INFO = "executionInfo";
  @SerializedName(SERIALIZED_NAME_EXECUTION_INFO)
  private JobExecutionInformation executionInfo;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_JOB_MANAGER_TASK = "jobManagerTask";
  @SerializedName(SERIALIZED_NAME_JOB_MANAGER_TASK)
  private JobManagerTask jobManagerTask;

  public static final String SERIALIZED_NAME_JOB_PREPARATION_TASK = "jobPreparationTask";
  @SerializedName(SERIALIZED_NAME_JOB_PREPARATION_TASK)
  private JobPreparationTask jobPreparationTask;

  public static final String SERIALIZED_NAME_JOB_RELEASE_TASK = "jobReleaseTask";
  @SerializedName(SERIALIZED_NAME_JOB_RELEASE_TASK)
  private JobReleaseTask jobReleaseTask;

  public static final String SERIALIZED_NAME_LAST_MODIFIED = "lastModified";
  @SerializedName(SERIALIZED_NAME_LAST_MODIFIED)
  private OffsetDateTime lastModified;

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private List<MetadataItem> metadata = new ArrayList<>();

  public static final String SERIALIZED_NAME_ON_ALL_TASKS_COMPLETE = "onAllTasksComplete";
  @SerializedName(SERIALIZED_NAME_ON_ALL_TASKS_COMPLETE)
  private OnAllTasksComplete onAllTasksComplete;

  public static final String SERIALIZED_NAME_ON_TASK_FAILURE = "onTaskFailure";
  @SerializedName(SERIALIZED_NAME_ON_TASK_FAILURE)
  private OnTaskFailure onTaskFailure;

  public static final String SERIALIZED_NAME_POOL_INFO = "poolInfo";
  @SerializedName(SERIALIZED_NAME_POOL_INFO)
  private PoolInformation poolInfo;

  public static final String SERIALIZED_NAME_PREVIOUS_STATE = "previousState";
  @SerializedName(SERIALIZED_NAME_PREVIOUS_STATE)
  private JobState previousState;

  public static final String SERIALIZED_NAME_PREVIOUS_STATE_TRANSITION_TIME = "previousStateTransitionTime";
  @SerializedName(SERIALIZED_NAME_PREVIOUS_STATE_TRANSITION_TIME)
  private OffsetDateTime previousStateTransitionTime;

  public static final String SERIALIZED_NAME_PRIORITY = "priority";
  @SerializedName(SERIALIZED_NAME_PRIORITY)
  private Integer priority;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private JobState state;

  public static final String SERIALIZED_NAME_STATE_TRANSITION_TIME = "stateTransitionTime";
  @SerializedName(SERIALIZED_NAME_STATE_TRANSITION_TIME)
  private OffsetDateTime stateTransitionTime;

  public static final String SERIALIZED_NAME_STATS = "stats";
  @SerializedName(SERIALIZED_NAME_STATS)
  private JobStatistics stats;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public static final String SERIALIZED_NAME_USES_TASK_DEPENDENCIES = "usesTaskDependencies";
  @SerializedName(SERIALIZED_NAME_USES_TASK_DEPENDENCIES)
  private Boolean usesTaskDependencies;

  public CloudJob() {
  }

  public CloudJob commonEnvironmentSettings(List<EnvironmentSetting> commonEnvironmentSettings) {
    this.commonEnvironmentSettings = commonEnvironmentSettings;
    return this;
  }

  public CloudJob addCommonEnvironmentSettingsItem(EnvironmentSetting commonEnvironmentSettingsItem) {
    if (this.commonEnvironmentSettings == null) {
      this.commonEnvironmentSettings = new ArrayList<>();
    }
    this.commonEnvironmentSettings.add(commonEnvironmentSettingsItem);
    return this;
  }

  /**
   * Individual tasks can override an environment setting specified here by specifying the same setting name with a different value.
   * @return commonEnvironmentSettings
   */
  @javax.annotation.Nullable
  public List<EnvironmentSetting> getCommonEnvironmentSettings() {
    return commonEnvironmentSettings;
  }

  public void setCommonEnvironmentSettings(List<EnvironmentSetting> commonEnvironmentSettings) {
    this.commonEnvironmentSettings = commonEnvironmentSettings;
  }


  public CloudJob constraints(JobConstraints constraints) {
    this.constraints = constraints;
    return this;
  }

  /**
   * Get constraints
   * @return constraints
   */
  @javax.annotation.Nullable
  public JobConstraints getConstraints() {
    return constraints;
  }

  public void setConstraints(JobConstraints constraints) {
    this.constraints = constraints;
  }


  public CloudJob creationTime(OffsetDateTime creationTime) {
    this.creationTime = creationTime;
    return this;
  }

  /**
   * Get creationTime
   * @return creationTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreationTime() {
    return creationTime;
  }

  public void setCreationTime(OffsetDateTime creationTime) {
    this.creationTime = creationTime;
  }


  public CloudJob displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * Get displayName
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public CloudJob eTag(String eTag) {
    this.eTag = eTag;
    return this;
  }

  /**
   * This is an opaque string. You can use it to detect whether the job has changed between requests. In particular, you can be pass the ETag when updating a job to specify that your changes should take effect only if nobody else has modified the job in the meantime.
   * @return eTag
   */
  @javax.annotation.Nullable
  public String geteTag() {
    return eTag;
  }

  public void seteTag(String eTag) {
    this.eTag = eTag;
  }


  public CloudJob executionInfo(JobExecutionInformation executionInfo) {
    this.executionInfo = executionInfo;
    return this;
  }

  /**
   * Get executionInfo
   * @return executionInfo
   */
  @javax.annotation.Nullable
  public JobExecutionInformation getExecutionInfo() {
    return executionInfo;
  }

  public void setExecutionInfo(JobExecutionInformation executionInfo) {
    this.executionInfo = executionInfo;
  }


  public CloudJob id(String id) {
    this.id = id;
    return this;
  }

  /**
   * The ID is case-preserving and case-insensitive (that is, you may not have two IDs within an account that differ only by case).
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public CloudJob jobManagerTask(JobManagerTask jobManagerTask) {
    this.jobManagerTask = jobManagerTask;
    return this;
  }

  /**
   * Get jobManagerTask
   * @return jobManagerTask
   */
  @javax.annotation.Nullable
  public JobManagerTask getJobManagerTask() {
    return jobManagerTask;
  }

  public void setJobManagerTask(JobManagerTask jobManagerTask) {
    this.jobManagerTask = jobManagerTask;
  }


  public CloudJob jobPreparationTask(JobPreparationTask jobPreparationTask) {
    this.jobPreparationTask = jobPreparationTask;
    return this;
  }

  /**
   * Get jobPreparationTask
   * @return jobPreparationTask
   */
  @javax.annotation.Nullable
  public JobPreparationTask getJobPreparationTask() {
    return jobPreparationTask;
  }

  public void setJobPreparationTask(JobPreparationTask jobPreparationTask) {
    this.jobPreparationTask = jobPreparationTask;
  }


  public CloudJob jobReleaseTask(JobReleaseTask jobReleaseTask) {
    this.jobReleaseTask = jobReleaseTask;
    return this;
  }

  /**
   * Get jobReleaseTask
   * @return jobReleaseTask
   */
  @javax.annotation.Nullable
  public JobReleaseTask getJobReleaseTask() {
    return jobReleaseTask;
  }

  public void setJobReleaseTask(JobReleaseTask jobReleaseTask) {
    this.jobReleaseTask = jobReleaseTask;
  }


  public CloudJob lastModified(OffsetDateTime lastModified) {
    this.lastModified = lastModified;
    return this;
  }

  /**
   * This is the last time at which the job level data, such as the job state or priority, changed. It does not factor in task-level changes such as adding new tasks or tasks changing state.
   * @return lastModified
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastModified() {
    return lastModified;
  }

  public void setLastModified(OffsetDateTime lastModified) {
    this.lastModified = lastModified;
  }


  public CloudJob metadata(List<MetadataItem> metadata) {
    this.metadata = metadata;
    return this;
  }

  public CloudJob addMetadataItem(MetadataItem metadataItem) {
    if (this.metadata == null) {
      this.metadata = new ArrayList<>();
    }
    this.metadata.add(metadataItem);
    return this;
  }

  /**
   * The Batch service does not assign any meaning to metadata; it is solely for the use of user code.
   * @return metadata
   */
  @javax.annotation.Nullable
  public List<MetadataItem> getMetadata() {
    return metadata;
  }

  public void setMetadata(List<MetadataItem> metadata) {
    this.metadata = metadata;
  }


  public CloudJob onAllTasksComplete(OnAllTasksComplete onAllTasksComplete) {
    this.onAllTasksComplete = onAllTasksComplete;
    return this;
  }

  /**
   * Get onAllTasksComplete
   * @return onAllTasksComplete
   */
  @javax.annotation.Nullable
  public OnAllTasksComplete getOnAllTasksComplete() {
    return onAllTasksComplete;
  }

  public void setOnAllTasksComplete(OnAllTasksComplete onAllTasksComplete) {
    this.onAllTasksComplete = onAllTasksComplete;
  }


  public CloudJob onTaskFailure(OnTaskFailure onTaskFailure) {
    this.onTaskFailure = onTaskFailure;
    return this;
  }

  /**
   * Get onTaskFailure
   * @return onTaskFailure
   */
  @javax.annotation.Nullable
  public OnTaskFailure getOnTaskFailure() {
    return onTaskFailure;
  }

  public void setOnTaskFailure(OnTaskFailure onTaskFailure) {
    this.onTaskFailure = onTaskFailure;
  }


  public CloudJob poolInfo(PoolInformation poolInfo) {
    this.poolInfo = poolInfo;
    return this;
  }

  /**
   * Get poolInfo
   * @return poolInfo
   */
  @javax.annotation.Nullable
  public PoolInformation getPoolInfo() {
    return poolInfo;
  }

  public void setPoolInfo(PoolInformation poolInfo) {
    this.poolInfo = poolInfo;
  }


  public CloudJob previousState(JobState previousState) {
    this.previousState = previousState;
    return this;
  }

  /**
   * Get previousState
   * @return previousState
   */
  @javax.annotation.Nullable
  public JobState getPreviousState() {
    return previousState;
  }

  public void setPreviousState(JobState previousState) {
    this.previousState = previousState;
  }


  public CloudJob previousStateTransitionTime(OffsetDateTime previousStateTransitionTime) {
    this.previousStateTransitionTime = previousStateTransitionTime;
    return this;
  }

  /**
   * This property is not set if the job is in its initial Active state.
   * @return previousStateTransitionTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getPreviousStateTransitionTime() {
    return previousStateTransitionTime;
  }

  public void setPreviousStateTransitionTime(OffsetDateTime previousStateTransitionTime) {
    this.previousStateTransitionTime = previousStateTransitionTime;
  }


  public CloudJob priority(Integer priority) {
    this.priority = priority;
    return this;
  }

  /**
   * Priority values can range from -1000 to 1000, with -1000 being the lowest priority and 1000 being the highest priority. The default value is 0.
   * @return priority
   */
  @javax.annotation.Nullable
  public Integer getPriority() {
    return priority;
  }

  public void setPriority(Integer priority) {
    this.priority = priority;
  }


  public CloudJob state(JobState state) {
    this.state = state;
    return this;
  }

  /**
   * Get state
   * @return state
   */
  @javax.annotation.Nullable
  public JobState getState() {
    return state;
  }

  public void setState(JobState state) {
    this.state = state;
  }


  public CloudJob stateTransitionTime(OffsetDateTime stateTransitionTime) {
    this.stateTransitionTime = stateTransitionTime;
    return this;
  }

  /**
   * Get stateTransitionTime
   * @return stateTransitionTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStateTransitionTime() {
    return stateTransitionTime;
  }

  public void setStateTransitionTime(OffsetDateTime stateTransitionTime) {
    this.stateTransitionTime = stateTransitionTime;
  }


  public CloudJob stats(JobStatistics stats) {
    this.stats = stats;
    return this;
  }

  /**
   * Get stats
   * @return stats
   */
  @javax.annotation.Nullable
  public JobStatistics getStats() {
    return stats;
  }

  public void setStats(JobStatistics stats) {
    this.stats = stats;
  }


  public CloudJob url(String url) {
    this.url = url;
    return this;
  }

  /**
   * Get url
   * @return url
   */
  @javax.annotation.Nullable
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }


  public CloudJob usesTaskDependencies(Boolean usesTaskDependencies) {
    this.usesTaskDependencies = usesTaskDependencies;
    return this;
  }

  /**
   * Get usesTaskDependencies
   * @return usesTaskDependencies
   */
  @javax.annotation.Nullable
  public Boolean getUsesTaskDependencies() {
    return usesTaskDependencies;
  }

  public void setUsesTaskDependencies(Boolean usesTaskDependencies) {
    this.usesTaskDependencies = usesTaskDependencies;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CloudJob cloudJob = (CloudJob) o;
    return Objects.equals(this.commonEnvironmentSettings, cloudJob.commonEnvironmentSettings) &&
        Objects.equals(this.constraints, cloudJob.constraints) &&
        Objects.equals(this.creationTime, cloudJob.creationTime) &&
        Objects.equals(this.displayName, cloudJob.displayName) &&
        Objects.equals(this.eTag, cloudJob.eTag) &&
        Objects.equals(this.executionInfo, cloudJob.executionInfo) &&
        Objects.equals(this.id, cloudJob.id) &&
        Objects.equals(this.jobManagerTask, cloudJob.jobManagerTask) &&
        Objects.equals(this.jobPreparationTask, cloudJob.jobPreparationTask) &&
        Objects.equals(this.jobReleaseTask, cloudJob.jobReleaseTask) &&
        Objects.equals(this.lastModified, cloudJob.lastModified) &&
        Objects.equals(this.metadata, cloudJob.metadata) &&
        Objects.equals(this.onAllTasksComplete, cloudJob.onAllTasksComplete) &&
        Objects.equals(this.onTaskFailure, cloudJob.onTaskFailure) &&
        Objects.equals(this.poolInfo, cloudJob.poolInfo) &&
        Objects.equals(this.previousState, cloudJob.previousState) &&
        Objects.equals(this.previousStateTransitionTime, cloudJob.previousStateTransitionTime) &&
        Objects.equals(this.priority, cloudJob.priority) &&
        Objects.equals(this.state, cloudJob.state) &&
        Objects.equals(this.stateTransitionTime, cloudJob.stateTransitionTime) &&
        Objects.equals(this.stats, cloudJob.stats) &&
        Objects.equals(this.url, cloudJob.url) &&
        Objects.equals(this.usesTaskDependencies, cloudJob.usesTaskDependencies);
  }

  @Override
  public int hashCode() {
    return Objects.hash(commonEnvironmentSettings, constraints, creationTime, displayName, eTag, executionInfo, id, jobManagerTask, jobPreparationTask, jobReleaseTask, lastModified, metadata, onAllTasksComplete, onTaskFailure, poolInfo, previousState, previousStateTransitionTime, priority, state, stateTransitionTime, stats, url, usesTaskDependencies);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CloudJob {\n");
    sb.append("    commonEnvironmentSettings: ").append(toIndentedString(commonEnvironmentSettings)).append("\n");
    sb.append("    constraints: ").append(toIndentedString(constraints)).append("\n");
    sb.append("    creationTime: ").append(toIndentedString(creationTime)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    eTag: ").append(toIndentedString(eTag)).append("\n");
    sb.append("    executionInfo: ").append(toIndentedString(executionInfo)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    jobManagerTask: ").append(toIndentedString(jobManagerTask)).append("\n");
    sb.append("    jobPreparationTask: ").append(toIndentedString(jobPreparationTask)).append("\n");
    sb.append("    jobReleaseTask: ").append(toIndentedString(jobReleaseTask)).append("\n");
    sb.append("    lastModified: ").append(toIndentedString(lastModified)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    onAllTasksComplete: ").append(toIndentedString(onAllTasksComplete)).append("\n");
    sb.append("    onTaskFailure: ").append(toIndentedString(onTaskFailure)).append("\n");
    sb.append("    poolInfo: ").append(toIndentedString(poolInfo)).append("\n");
    sb.append("    previousState: ").append(toIndentedString(previousState)).append("\n");
    sb.append("    previousStateTransitionTime: ").append(toIndentedString(previousStateTransitionTime)).append("\n");
    sb.append("    priority: ").append(toIndentedString(priority)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    stateTransitionTime: ").append(toIndentedString(stateTransitionTime)).append("\n");
    sb.append("    stats: ").append(toIndentedString(stats)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    usesTaskDependencies: ").append(toIndentedString(usesTaskDependencies)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("commonEnvironmentSettings");
    openapiFields.add("constraints");
    openapiFields.add("creationTime");
    openapiFields.add("displayName");
    openapiFields.add("eTag");
    openapiFields.add("executionInfo");
    openapiFields.add("id");
    openapiFields.add("jobManagerTask");
    openapiFields.add("jobPreparationTask");
    openapiFields.add("jobReleaseTask");
    openapiFields.add("lastModified");
    openapiFields.add("metadata");
    openapiFields.add("onAllTasksComplete");
    openapiFields.add("onTaskFailure");
    openapiFields.add("poolInfo");
    openapiFields.add("previousState");
    openapiFields.add("previousStateTransitionTime");
    openapiFields.add("priority");
    openapiFields.add("state");
    openapiFields.add("stateTransitionTime");
    openapiFields.add("stats");
    openapiFields.add("url");
    openapiFields.add("usesTaskDependencies");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CloudJob
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CloudJob.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CloudJob is not found in the empty JSON string", CloudJob.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CloudJob.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CloudJob` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("commonEnvironmentSettings") != null && !jsonObj.get("commonEnvironmentSettings").isJsonNull()) {
        JsonArray jsonArraycommonEnvironmentSettings = jsonObj.getAsJsonArray("commonEnvironmentSettings");
        if (jsonArraycommonEnvironmentSettings != null) {
          // ensure the json data is an array
          if (!jsonObj.get("commonEnvironmentSettings").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `commonEnvironmentSettings` to be an array in the JSON string but got `%s`", jsonObj.get("commonEnvironmentSettings").toString()));
          }

          // validate the optional field `commonEnvironmentSettings` (array)
          for (int i = 0; i < jsonArraycommonEnvironmentSettings.size(); i++) {
            EnvironmentSetting.validateJsonElement(jsonArraycommonEnvironmentSettings.get(i));
          };
        }
      }
      // validate the optional field `constraints`
      if (jsonObj.get("constraints") != null && !jsonObj.get("constraints").isJsonNull()) {
        JobConstraints.validateJsonElement(jsonObj.get("constraints"));
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if ((jsonObj.get("eTag") != null && !jsonObj.get("eTag").isJsonNull()) && !jsonObj.get("eTag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `eTag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("eTag").toString()));
      }
      // validate the optional field `executionInfo`
      if (jsonObj.get("executionInfo") != null && !jsonObj.get("executionInfo").isJsonNull()) {
        JobExecutionInformation.validateJsonElement(jsonObj.get("executionInfo"));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // validate the optional field `jobManagerTask`
      if (jsonObj.get("jobManagerTask") != null && !jsonObj.get("jobManagerTask").isJsonNull()) {
        JobManagerTask.validateJsonElement(jsonObj.get("jobManagerTask"));
      }
      // validate the optional field `jobPreparationTask`
      if (jsonObj.get("jobPreparationTask") != null && !jsonObj.get("jobPreparationTask").isJsonNull()) {
        JobPreparationTask.validateJsonElement(jsonObj.get("jobPreparationTask"));
      }
      // validate the optional field `jobReleaseTask`
      if (jsonObj.get("jobReleaseTask") != null && !jsonObj.get("jobReleaseTask").isJsonNull()) {
        JobReleaseTask.validateJsonElement(jsonObj.get("jobReleaseTask"));
      }
      if (jsonObj.get("metadata") != null && !jsonObj.get("metadata").isJsonNull()) {
        JsonArray jsonArraymetadata = jsonObj.getAsJsonArray("metadata");
        if (jsonArraymetadata != null) {
          // ensure the json data is an array
          if (!jsonObj.get("metadata").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `metadata` to be an array in the JSON string but got `%s`", jsonObj.get("metadata").toString()));
          }

          // validate the optional field `metadata` (array)
          for (int i = 0; i < jsonArraymetadata.size(); i++) {
            MetadataItem.validateJsonElement(jsonArraymetadata.get(i));
          };
        }
      }
      // validate the optional field `onAllTasksComplete`
      if (jsonObj.get("onAllTasksComplete") != null && !jsonObj.get("onAllTasksComplete").isJsonNull()) {
        OnAllTasksComplete.validateJsonElement(jsonObj.get("onAllTasksComplete"));
      }
      // validate the optional field `onTaskFailure`
      if (jsonObj.get("onTaskFailure") != null && !jsonObj.get("onTaskFailure").isJsonNull()) {
        OnTaskFailure.validateJsonElement(jsonObj.get("onTaskFailure"));
      }
      // validate the optional field `poolInfo`
      if (jsonObj.get("poolInfo") != null && !jsonObj.get("poolInfo").isJsonNull()) {
        PoolInformation.validateJsonElement(jsonObj.get("poolInfo"));
      }
      // validate the optional field `previousState`
      if (jsonObj.get("previousState") != null && !jsonObj.get("previousState").isJsonNull()) {
        JobState.validateJsonElement(jsonObj.get("previousState"));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        JobState.validateJsonElement(jsonObj.get("state"));
      }
      // validate the optional field `stats`
      if (jsonObj.get("stats") != null && !jsonObj.get("stats").isJsonNull()) {
        JobStatistics.validateJsonElement(jsonObj.get("stats"));
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CloudJob.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CloudJob' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CloudJob> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CloudJob.class));

       return (TypeAdapter<T>) new TypeAdapter<CloudJob>() {
           @Override
           public void write(JsonWriter out, CloudJob value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CloudJob read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CloudJob given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CloudJob
   * @throws IOException if the JSON string is invalid with respect to CloudJob
   */
  public static CloudJob fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CloudJob.class);
  }

  /**
   * Convert an instance of CloudJob to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

