# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TaskCounts(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, active: int=None, completed: int=None, failed: int=None, running: int=None, succeeded: int=None, validation_status: str=None):
        """TaskCounts - a model defined in OpenAPI

        :param active: The active of this TaskCounts.
        :param completed: The completed of this TaskCounts.
        :param failed: The failed of this TaskCounts.
        :param running: The running of this TaskCounts.
        :param succeeded: The succeeded of this TaskCounts.
        :param validation_status: The validation_status of this TaskCounts.
        """
        self.openapi_types = {
            'active': int,
            'completed': int,
            'failed': int,
            'running': int,
            'succeeded': int,
            'validation_status': str
        }

        self.attribute_map = {
            'active': 'active',
            'completed': 'completed',
            'failed': 'failed',
            'running': 'running',
            'succeeded': 'succeeded',
            'validation_status': 'validationStatus'
        }

        self._active = active
        self._completed = completed
        self._failed = failed
        self._running = running
        self._succeeded = succeeded
        self._validation_status = validation_status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TaskCounts':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TaskCounts of this TaskCounts.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def active(self):
        """Gets the active of this TaskCounts.


        :return: The active of this TaskCounts.
        :rtype: int
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this TaskCounts.


        :param active: The active of this TaskCounts.
        :type active: int
        """
        if active is None:
            raise ValueError("Invalid value for `active`, must not be `None`")

        self._active = active

    @property
    def completed(self):
        """Gets the completed of this TaskCounts.


        :return: The completed of this TaskCounts.
        :rtype: int
        """
        return self._completed

    @completed.setter
    def completed(self, completed):
        """Sets the completed of this TaskCounts.


        :param completed: The completed of this TaskCounts.
        :type completed: int
        """
        if completed is None:
            raise ValueError("Invalid value for `completed`, must not be `None`")

        self._completed = completed

    @property
    def failed(self):
        """Gets the failed of this TaskCounts.


        :return: The failed of this TaskCounts.
        :rtype: int
        """
        return self._failed

    @failed.setter
    def failed(self, failed):
        """Sets the failed of this TaskCounts.


        :param failed: The failed of this TaskCounts.
        :type failed: int
        """
        if failed is None:
            raise ValueError("Invalid value for `failed`, must not be `None`")

        self._failed = failed

    @property
    def running(self):
        """Gets the running of this TaskCounts.


        :return: The running of this TaskCounts.
        :rtype: int
        """
        return self._running

    @running.setter
    def running(self, running):
        """Sets the running of this TaskCounts.


        :param running: The running of this TaskCounts.
        :type running: int
        """
        if running is None:
            raise ValueError("Invalid value for `running`, must not be `None`")

        self._running = running

    @property
    def succeeded(self):
        """Gets the succeeded of this TaskCounts.


        :return: The succeeded of this TaskCounts.
        :rtype: int
        """
        return self._succeeded

    @succeeded.setter
    def succeeded(self, succeeded):
        """Sets the succeeded of this TaskCounts.


        :param succeeded: The succeeded of this TaskCounts.
        :type succeeded: int
        """
        if succeeded is None:
            raise ValueError("Invalid value for `succeeded`, must not be `None`")

        self._succeeded = succeeded

    @property
    def validation_status(self):
        """Gets the validation_status of this TaskCounts.


        :return: The validation_status of this TaskCounts.
        :rtype: str
        """
        return self._validation_status

    @validation_status.setter
    def validation_status(self, validation_status):
        """Sets the validation_status of this TaskCounts.


        :param validation_status: The validation_status of this TaskCounts.
        :type validation_status: str
        """
        allowed_values = ["validated", "unvalidated"]  # noqa: E501
        if validation_status not in allowed_values:
            raise ValueError(
                "Invalid value for `validation_status` ({0}), must be one of {1}"
                .format(validation_status, allowed_values)
            )

        self._validation_status = validation_status
