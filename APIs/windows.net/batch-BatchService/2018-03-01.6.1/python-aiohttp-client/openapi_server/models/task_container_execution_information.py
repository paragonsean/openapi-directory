# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TaskContainerExecutionInformation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, container_id: str=None, error: str=None, state: str=None):
        """TaskContainerExecutionInformation - a model defined in OpenAPI

        :param container_id: The container_id of this TaskContainerExecutionInformation.
        :param error: The error of this TaskContainerExecutionInformation.
        :param state: The state of this TaskContainerExecutionInformation.
        """
        self.openapi_types = {
            'container_id': str,
            'error': str,
            'state': str
        }

        self.attribute_map = {
            'container_id': 'containerId',
            'error': 'error',
            'state': 'state'
        }

        self._container_id = container_id
        self._error = error
        self._state = state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TaskContainerExecutionInformation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TaskContainerExecutionInformation of this TaskContainerExecutionInformation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def container_id(self):
        """Gets the container_id of this TaskContainerExecutionInformation.


        :return: The container_id of this TaskContainerExecutionInformation.
        :rtype: str
        """
        return self._container_id

    @container_id.setter
    def container_id(self, container_id):
        """Sets the container_id of this TaskContainerExecutionInformation.


        :param container_id: The container_id of this TaskContainerExecutionInformation.
        :type container_id: str
        """

        self._container_id = container_id

    @property
    def error(self):
        """Gets the error of this TaskContainerExecutionInformation.

        This is the detailed error string from the Docker service, if available. It is equivalent to the error field returned by \"docker inspect\".

        :return: The error of this TaskContainerExecutionInformation.
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this TaskContainerExecutionInformation.

        This is the detailed error string from the Docker service, if available. It is equivalent to the error field returned by \"docker inspect\".

        :param error: The error of this TaskContainerExecutionInformation.
        :type error: str
        """

        self._error = error

    @property
    def state(self):
        """Gets the state of this TaskContainerExecutionInformation.

        This is the state of the container according to the Docker service. It is equivalent to the status field returned by \"docker inspect\".

        :return: The state of this TaskContainerExecutionInformation.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this TaskContainerExecutionInformation.

        This is the state of the container according to the Docker service. It is equivalent to the status field returned by \"docker inspect\".

        :param state: The state of this TaskContainerExecutionInformation.
        :type state: str
        """

        self._state = state
