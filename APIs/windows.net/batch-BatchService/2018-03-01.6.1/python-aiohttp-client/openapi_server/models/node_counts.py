# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class NodeCounts(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, creating: int=None, idle: int=None, leaving_pool: int=None, offline: int=None, preempted: int=None, rebooting: int=None, reimaging: int=None, running: int=None, start_task_failed: int=None, starting: int=None, total: int=None, unknown: int=None, unusable: int=None, waiting_for_start_task: int=None):
        """NodeCounts - a model defined in OpenAPI

        :param creating: The creating of this NodeCounts.
        :param idle: The idle of this NodeCounts.
        :param leaving_pool: The leaving_pool of this NodeCounts.
        :param offline: The offline of this NodeCounts.
        :param preempted: The preempted of this NodeCounts.
        :param rebooting: The rebooting of this NodeCounts.
        :param reimaging: The reimaging of this NodeCounts.
        :param running: The running of this NodeCounts.
        :param start_task_failed: The start_task_failed of this NodeCounts.
        :param starting: The starting of this NodeCounts.
        :param total: The total of this NodeCounts.
        :param unknown: The unknown of this NodeCounts.
        :param unusable: The unusable of this NodeCounts.
        :param waiting_for_start_task: The waiting_for_start_task of this NodeCounts.
        """
        self.openapi_types = {
            'creating': int,
            'idle': int,
            'leaving_pool': int,
            'offline': int,
            'preempted': int,
            'rebooting': int,
            'reimaging': int,
            'running': int,
            'start_task_failed': int,
            'starting': int,
            'total': int,
            'unknown': int,
            'unusable': int,
            'waiting_for_start_task': int
        }

        self.attribute_map = {
            'creating': 'creating',
            'idle': 'idle',
            'leaving_pool': 'leavingPool',
            'offline': 'offline',
            'preempted': 'preempted',
            'rebooting': 'rebooting',
            'reimaging': 'reimaging',
            'running': 'running',
            'start_task_failed': 'startTaskFailed',
            'starting': 'starting',
            'total': 'total',
            'unknown': 'unknown',
            'unusable': 'unusable',
            'waiting_for_start_task': 'waitingForStartTask'
        }

        self._creating = creating
        self._idle = idle
        self._leaving_pool = leaving_pool
        self._offline = offline
        self._preempted = preempted
        self._rebooting = rebooting
        self._reimaging = reimaging
        self._running = running
        self._start_task_failed = start_task_failed
        self._starting = starting
        self._total = total
        self._unknown = unknown
        self._unusable = unusable
        self._waiting_for_start_task = waiting_for_start_task

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NodeCounts':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NodeCounts of this NodeCounts.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def creating(self):
        """Gets the creating of this NodeCounts.


        :return: The creating of this NodeCounts.
        :rtype: int
        """
        return self._creating

    @creating.setter
    def creating(self, creating):
        """Sets the creating of this NodeCounts.


        :param creating: The creating of this NodeCounts.
        :type creating: int
        """
        if creating is None:
            raise ValueError("Invalid value for `creating`, must not be `None`")

        self._creating = creating

    @property
    def idle(self):
        """Gets the idle of this NodeCounts.


        :return: The idle of this NodeCounts.
        :rtype: int
        """
        return self._idle

    @idle.setter
    def idle(self, idle):
        """Sets the idle of this NodeCounts.


        :param idle: The idle of this NodeCounts.
        :type idle: int
        """
        if idle is None:
            raise ValueError("Invalid value for `idle`, must not be `None`")

        self._idle = idle

    @property
    def leaving_pool(self):
        """Gets the leaving_pool of this NodeCounts.


        :return: The leaving_pool of this NodeCounts.
        :rtype: int
        """
        return self._leaving_pool

    @leaving_pool.setter
    def leaving_pool(self, leaving_pool):
        """Sets the leaving_pool of this NodeCounts.


        :param leaving_pool: The leaving_pool of this NodeCounts.
        :type leaving_pool: int
        """
        if leaving_pool is None:
            raise ValueError("Invalid value for `leaving_pool`, must not be `None`")

        self._leaving_pool = leaving_pool

    @property
    def offline(self):
        """Gets the offline of this NodeCounts.


        :return: The offline of this NodeCounts.
        :rtype: int
        """
        return self._offline

    @offline.setter
    def offline(self, offline):
        """Sets the offline of this NodeCounts.


        :param offline: The offline of this NodeCounts.
        :type offline: int
        """
        if offline is None:
            raise ValueError("Invalid value for `offline`, must not be `None`")

        self._offline = offline

    @property
    def preempted(self):
        """Gets the preempted of this NodeCounts.


        :return: The preempted of this NodeCounts.
        :rtype: int
        """
        return self._preempted

    @preempted.setter
    def preempted(self, preempted):
        """Sets the preempted of this NodeCounts.


        :param preempted: The preempted of this NodeCounts.
        :type preempted: int
        """
        if preempted is None:
            raise ValueError("Invalid value for `preempted`, must not be `None`")

        self._preempted = preempted

    @property
    def rebooting(self):
        """Gets the rebooting of this NodeCounts.


        :return: The rebooting of this NodeCounts.
        :rtype: int
        """
        return self._rebooting

    @rebooting.setter
    def rebooting(self, rebooting):
        """Sets the rebooting of this NodeCounts.


        :param rebooting: The rebooting of this NodeCounts.
        :type rebooting: int
        """
        if rebooting is None:
            raise ValueError("Invalid value for `rebooting`, must not be `None`")

        self._rebooting = rebooting

    @property
    def reimaging(self):
        """Gets the reimaging of this NodeCounts.


        :return: The reimaging of this NodeCounts.
        :rtype: int
        """
        return self._reimaging

    @reimaging.setter
    def reimaging(self, reimaging):
        """Sets the reimaging of this NodeCounts.


        :param reimaging: The reimaging of this NodeCounts.
        :type reimaging: int
        """
        if reimaging is None:
            raise ValueError("Invalid value for `reimaging`, must not be `None`")

        self._reimaging = reimaging

    @property
    def running(self):
        """Gets the running of this NodeCounts.


        :return: The running of this NodeCounts.
        :rtype: int
        """
        return self._running

    @running.setter
    def running(self, running):
        """Sets the running of this NodeCounts.


        :param running: The running of this NodeCounts.
        :type running: int
        """
        if running is None:
            raise ValueError("Invalid value for `running`, must not be `None`")

        self._running = running

    @property
    def start_task_failed(self):
        """Gets the start_task_failed of this NodeCounts.


        :return: The start_task_failed of this NodeCounts.
        :rtype: int
        """
        return self._start_task_failed

    @start_task_failed.setter
    def start_task_failed(self, start_task_failed):
        """Sets the start_task_failed of this NodeCounts.


        :param start_task_failed: The start_task_failed of this NodeCounts.
        :type start_task_failed: int
        """
        if start_task_failed is None:
            raise ValueError("Invalid value for `start_task_failed`, must not be `None`")

        self._start_task_failed = start_task_failed

    @property
    def starting(self):
        """Gets the starting of this NodeCounts.


        :return: The starting of this NodeCounts.
        :rtype: int
        """
        return self._starting

    @starting.setter
    def starting(self, starting):
        """Sets the starting of this NodeCounts.


        :param starting: The starting of this NodeCounts.
        :type starting: int
        """
        if starting is None:
            raise ValueError("Invalid value for `starting`, must not be `None`")

        self._starting = starting

    @property
    def total(self):
        """Gets the total of this NodeCounts.


        :return: The total of this NodeCounts.
        :rtype: int
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this NodeCounts.


        :param total: The total of this NodeCounts.
        :type total: int
        """
        if total is None:
            raise ValueError("Invalid value for `total`, must not be `None`")

        self._total = total

    @property
    def unknown(self):
        """Gets the unknown of this NodeCounts.


        :return: The unknown of this NodeCounts.
        :rtype: int
        """
        return self._unknown

    @unknown.setter
    def unknown(self, unknown):
        """Sets the unknown of this NodeCounts.


        :param unknown: The unknown of this NodeCounts.
        :type unknown: int
        """
        if unknown is None:
            raise ValueError("Invalid value for `unknown`, must not be `None`")

        self._unknown = unknown

    @property
    def unusable(self):
        """Gets the unusable of this NodeCounts.


        :return: The unusable of this NodeCounts.
        :rtype: int
        """
        return self._unusable

    @unusable.setter
    def unusable(self, unusable):
        """Sets the unusable of this NodeCounts.


        :param unusable: The unusable of this NodeCounts.
        :type unusable: int
        """
        if unusable is None:
            raise ValueError("Invalid value for `unusable`, must not be `None`")

        self._unusable = unusable

    @property
    def waiting_for_start_task(self):
        """Gets the waiting_for_start_task of this NodeCounts.


        :return: The waiting_for_start_task of this NodeCounts.
        :rtype: int
        """
        return self._waiting_for_start_task

    @waiting_for_start_task.setter
    def waiting_for_start_task(self, waiting_for_start_task):
        """Sets the waiting_for_start_task of this NodeCounts.


        :param waiting_for_start_task: The waiting_for_start_task of this NodeCounts.
        :type waiting_for_start_task: int
        """
        if waiting_for_start_task is None:
            raise ValueError("Invalid value for `waiting_for_start_task`, must not be `None`")

        self._waiting_for_start_task = waiting_for_start_task
