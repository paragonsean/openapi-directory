# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class JobConstraints(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, max_task_retry_count: int=None, max_wall_clock_time: str=None):
        """JobConstraints - a model defined in OpenAPI

        :param max_task_retry_count: The max_task_retry_count of this JobConstraints.
        :param max_wall_clock_time: The max_wall_clock_time of this JobConstraints.
        """
        self.openapi_types = {
            'max_task_retry_count': int,
            'max_wall_clock_time': str
        }

        self.attribute_map = {
            'max_task_retry_count': 'maxTaskRetryCount',
            'max_wall_clock_time': 'maxWallClockTime'
        }

        self._max_task_retry_count = max_task_retry_count
        self._max_wall_clock_time = max_wall_clock_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'JobConstraints':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The JobConstraints of this JobConstraints.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def max_task_retry_count(self):
        """Gets the max_task_retry_count of this JobConstraints.

        Note that this value specifically controls the number of retries. The Batch service will try each task once, and may then retry up to this limit. For example, if the maximum retry count is 3, Batch tries a task up to 4 times (one initial try and 3 retries). If the maximum retry count is 0, the Batch service does not retry tasks. If the maximum retry count is -1, the Batch service retries tasks without limit. The default value is 0 (no retries).

        :return: The max_task_retry_count of this JobConstraints.
        :rtype: int
        """
        return self._max_task_retry_count

    @max_task_retry_count.setter
    def max_task_retry_count(self, max_task_retry_count):
        """Sets the max_task_retry_count of this JobConstraints.

        Note that this value specifically controls the number of retries. The Batch service will try each task once, and may then retry up to this limit. For example, if the maximum retry count is 3, Batch tries a task up to 4 times (one initial try and 3 retries). If the maximum retry count is 0, the Batch service does not retry tasks. If the maximum retry count is -1, the Batch service retries tasks without limit. The default value is 0 (no retries).

        :param max_task_retry_count: The max_task_retry_count of this JobConstraints.
        :type max_task_retry_count: int
        """

        self._max_task_retry_count = max_task_retry_count

    @property
    def max_wall_clock_time(self):
        """Gets the max_wall_clock_time of this JobConstraints.

        If the job does not complete within the time limit, the Batch service terminates it and any tasks that are still running. In this case, the termination reason will be MaxWallClockTimeExpiry. If this property is not specified, there is no time limit on how long the job may run.

        :return: The max_wall_clock_time of this JobConstraints.
        :rtype: str
        """
        return self._max_wall_clock_time

    @max_wall_clock_time.setter
    def max_wall_clock_time(self, max_wall_clock_time):
        """Sets the max_wall_clock_time of this JobConstraints.

        If the job does not complete within the time limit, the Batch service terminates it and any tasks that are still running. In this case, the termination reason will be MaxWallClockTimeExpiry. If this property is not specified, there is no time limit on how long the job may run.

        :param max_wall_clock_time: The max_wall_clock_time of this JobConstraints.
        :type max_wall_clock_time: str
        """

        self._max_wall_clock_time = max_wall_clock_time
