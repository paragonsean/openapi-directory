/**
 * BatchService
 * A client for issuing REST requests to the Azure Batch service.
 *
 * The version of the OpenAPI document: 2018-03-01.6.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import TaskExecutionInformation from './TaskExecutionInformation';
import TaskState from './TaskState';

/**
 * The TaskInformation model module.
 * @module model/TaskInformation
 * @version 2018-03-01.6.1
 */
class TaskInformation {
    /**
     * Constructs a new <code>TaskInformation</code>.
     * @alias module:model/TaskInformation
     * @param taskState {module:model/TaskState} 
     */
    constructor(taskState) { 
        
        TaskInformation.initialize(this, taskState);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, taskState) { 
        obj['taskState'] = taskState;
    }

    /**
     * Constructs a <code>TaskInformation</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TaskInformation} obj Optional instance to populate.
     * @return {module:model/TaskInformation} The populated <code>TaskInformation</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TaskInformation();

            if (data.hasOwnProperty('executionInfo')) {
                obj['executionInfo'] = TaskExecutionInformation.constructFromObject(data['executionInfo']);
            }
            if (data.hasOwnProperty('jobId')) {
                obj['jobId'] = ApiClient.convertToType(data['jobId'], 'String');
            }
            if (data.hasOwnProperty('subtaskId')) {
                obj['subtaskId'] = ApiClient.convertToType(data['subtaskId'], 'Number');
            }
            if (data.hasOwnProperty('taskId')) {
                obj['taskId'] = ApiClient.convertToType(data['taskId'], 'String');
            }
            if (data.hasOwnProperty('taskState')) {
                obj['taskState'] = TaskState.constructFromObject(data['taskState']);
            }
            if (data.hasOwnProperty('taskUrl')) {
                obj['taskUrl'] = ApiClient.convertToType(data['taskUrl'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TaskInformation</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TaskInformation</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of TaskInformation.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `executionInfo`
        if (data['executionInfo']) { // data not null
          TaskExecutionInformation.validateJSON(data['executionInfo']);
        }
        // ensure the json data is a string
        if (data['jobId'] && !(typeof data['jobId'] === 'string' || data['jobId'] instanceof String)) {
            throw new Error("Expected the field `jobId` to be a primitive type in the JSON string but got " + data['jobId']);
        }
        // ensure the json data is a string
        if (data['taskId'] && !(typeof data['taskId'] === 'string' || data['taskId'] instanceof String)) {
            throw new Error("Expected the field `taskId` to be a primitive type in the JSON string but got " + data['taskId']);
        }
        // ensure the json data is a string
        if (data['taskUrl'] && !(typeof data['taskUrl'] === 'string' || data['taskUrl'] instanceof String)) {
            throw new Error("Expected the field `taskUrl` to be a primitive type in the JSON string but got " + data['taskUrl']);
        }

        return true;
    }


}

TaskInformation.RequiredProperties = ["taskState"];

/**
 * @member {module:model/TaskExecutionInformation} executionInfo
 */
TaskInformation.prototype['executionInfo'] = undefined;

/**
 * @member {String} jobId
 */
TaskInformation.prototype['jobId'] = undefined;

/**
 * @member {Number} subtaskId
 */
TaskInformation.prototype['subtaskId'] = undefined;

/**
 * @member {String} taskId
 */
TaskInformation.prototype['taskId'] = undefined;

/**
 * @member {module:model/TaskState} taskState
 */
TaskInformation.prototype['taskState'] = undefined;

/**
 * @member {String} taskUrl
 */
TaskInformation.prototype['taskUrl'] = undefined;






export default TaskInformation;

