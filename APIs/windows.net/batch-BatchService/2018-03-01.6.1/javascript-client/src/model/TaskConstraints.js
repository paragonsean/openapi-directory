/**
 * BatchService
 * A client for issuing REST requests to the Azure Batch service.
 *
 * The version of the OpenAPI document: 2018-03-01.6.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The TaskConstraints model module.
 * @module model/TaskConstraints
 * @version 2018-03-01.6.1
 */
class TaskConstraints {
    /**
     * Constructs a new <code>TaskConstraints</code>.
     * @alias module:model/TaskConstraints
     */
    constructor() { 
        
        TaskConstraints.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TaskConstraints</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TaskConstraints} obj Optional instance to populate.
     * @return {module:model/TaskConstraints} The populated <code>TaskConstraints</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TaskConstraints();

            if (data.hasOwnProperty('maxTaskRetryCount')) {
                obj['maxTaskRetryCount'] = ApiClient.convertToType(data['maxTaskRetryCount'], 'Number');
            }
            if (data.hasOwnProperty('maxWallClockTime')) {
                obj['maxWallClockTime'] = ApiClient.convertToType(data['maxWallClockTime'], 'String');
            }
            if (data.hasOwnProperty('retentionTime')) {
                obj['retentionTime'] = ApiClient.convertToType(data['retentionTime'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TaskConstraints</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TaskConstraints</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['maxWallClockTime'] && !(typeof data['maxWallClockTime'] === 'string' || data['maxWallClockTime'] instanceof String)) {
            throw new Error("Expected the field `maxWallClockTime` to be a primitive type in the JSON string but got " + data['maxWallClockTime']);
        }
        // ensure the json data is a string
        if (data['retentionTime'] && !(typeof data['retentionTime'] === 'string' || data['retentionTime'] instanceof String)) {
            throw new Error("Expected the field `retentionTime` to be a primitive type in the JSON string but got " + data['retentionTime']);
        }

        return true;
    }


}



/**
 * Note that this value specifically controls the number of retries for the task executable due to a nonzero exit code. The Batch service will try the task once, and may then retry up to this limit. For example, if the maximum retry count is 3, Batch tries the task up to 4 times (one initial try and 3 retries). If the maximum retry count is 0, the Batch service does not retry the task after the first attempt. If the maximum retry count is -1, the Batch service retries the task without limit. Resource files and application packages are only downloaded again if the task is retried on a new compute node.
 * @member {Number} maxTaskRetryCount
 */
TaskConstraints.prototype['maxTaskRetryCount'] = undefined;

/**
 * If this is not specified, there is no time limit on how long the task may run.
 * @member {String} maxWallClockTime
 */
TaskConstraints.prototype['maxWallClockTime'] = undefined;

/**
 * The default is infinite, i.e. the task directory will be retained until the compute node is removed or reimaged.
 * @member {String} retentionTime
 */
TaskConstraints.prototype['retentionTime'] = undefined;






export default TaskConstraints;

