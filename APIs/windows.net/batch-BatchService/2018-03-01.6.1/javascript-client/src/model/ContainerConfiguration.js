/**
 * BatchService
 * A client for issuing REST requests to the Azure Batch service.
 *
 * The version of the OpenAPI document: 2018-03-01.6.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ContainerRegistry from './ContainerRegistry';

/**
 * The ContainerConfiguration model module.
 * @module model/ContainerConfiguration
 * @version 2018-03-01.6.1
 */
class ContainerConfiguration {
    /**
     * Constructs a new <code>ContainerConfiguration</code>.
     * @alias module:model/ContainerConfiguration
     * @param type {module:model/ContainerConfiguration.TypeEnum} 
     */
    constructor(type) { 
        
        ContainerConfiguration.initialize(this, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, type) { 
        obj['type'] = type;
    }

    /**
     * Constructs a <code>ContainerConfiguration</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ContainerConfiguration} obj Optional instance to populate.
     * @return {module:model/ContainerConfiguration} The populated <code>ContainerConfiguration</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ContainerConfiguration();

            if (data.hasOwnProperty('containerImageNames')) {
                obj['containerImageNames'] = ApiClient.convertToType(data['containerImageNames'], ['String']);
            }
            if (data.hasOwnProperty('containerRegistries')) {
                obj['containerRegistries'] = ApiClient.convertToType(data['containerRegistries'], [ContainerRegistry]);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ContainerConfiguration</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ContainerConfiguration</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ContainerConfiguration.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['containerImageNames'])) {
            throw new Error("Expected the field `containerImageNames` to be an array in the JSON data but got " + data['containerImageNames']);
        }
        if (data['containerRegistries']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['containerRegistries'])) {
                throw new Error("Expected the field `containerRegistries` to be an array in the JSON data but got " + data['containerRegistries']);
            }
            // validate the optional field `containerRegistries` (array)
            for (const item of data['containerRegistries']) {
                ContainerRegistry.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

ContainerConfiguration.RequiredProperties = ["type"];

/**
 * This is the full image reference, as would be specified to \"docker pull\". An image will be sourced from the default Docker registry unless the image is fully qualified with an alternative registry.
 * @member {Array.<String>} containerImageNames
 */
ContainerConfiguration.prototype['containerImageNames'] = undefined;

/**
 * If any images must be downloaded from a private registry which requires credentials, then those credentials must be provided here.
 * @member {Array.<module:model/ContainerRegistry>} containerRegistries
 */
ContainerConfiguration.prototype['containerRegistries'] = undefined;

/**
 * @member {module:model/ContainerConfiguration.TypeEnum} type
 */
ContainerConfiguration.prototype['type'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
ContainerConfiguration['TypeEnum'] = {

    /**
     * value: "docker"
     * @const
     */
    "docker": "docker"
};



export default ContainerConfiguration;

