/**
 * BatchService
 * A client for issuing REST requests to the Azure Batch service.
 *
 * The version of the OpenAPI document: 2018-03-01.6.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ApplicationPackageReference model module.
 * @module model/ApplicationPackageReference
 * @version 2018-03-01.6.1
 */
class ApplicationPackageReference {
    /**
     * Constructs a new <code>ApplicationPackageReference</code>.
     * @alias module:model/ApplicationPackageReference
     * @param applicationId {String} 
     */
    constructor(applicationId) { 
        
        ApplicationPackageReference.initialize(this, applicationId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, applicationId) { 
        obj['applicationId'] = applicationId;
    }

    /**
     * Constructs a <code>ApplicationPackageReference</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ApplicationPackageReference} obj Optional instance to populate.
     * @return {module:model/ApplicationPackageReference} The populated <code>ApplicationPackageReference</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ApplicationPackageReference();

            if (data.hasOwnProperty('applicationId')) {
                obj['applicationId'] = ApiClient.convertToType(data['applicationId'], 'String');
            }
            if (data.hasOwnProperty('version')) {
                obj['version'] = ApiClient.convertToType(data['version'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ApplicationPackageReference</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ApplicationPackageReference</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ApplicationPackageReference.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['applicationId'] && !(typeof data['applicationId'] === 'string' || data['applicationId'] instanceof String)) {
            throw new Error("Expected the field `applicationId` to be a primitive type in the JSON string but got " + data['applicationId']);
        }
        // ensure the json data is a string
        if (data['version'] && !(typeof data['version'] === 'string' || data['version'] instanceof String)) {
            throw new Error("Expected the field `version` to be a primitive type in the JSON string but got " + data['version']);
        }

        return true;
    }


}

ApplicationPackageReference.RequiredProperties = ["applicationId"];

/**
 * @member {String} applicationId
 */
ApplicationPackageReference.prototype['applicationId'] = undefined;

/**
 * If this is omitted on a pool, and no default version is specified for this application, the request fails with the error code InvalidApplicationPackageReferences and HTTP status code 409. If this is omitted on a task, and no default version is specified for this application, the task fails with a pre-processing error.
 * @member {String} version
 */
ApplicationPackageReference.prototype['version'] = undefined;






export default ApplicationPackageReference;

