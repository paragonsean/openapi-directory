/*
 * BatchService
 * A client for issuing REST requests to the Azure Batch service.
 *
 * The version of the OpenAPI document: 2017-01-01.4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PoolEnableAutoScaleParameter
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:59:14.789524-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PoolEnableAutoScaleParameter {
  public static final String SERIALIZED_NAME_AUTO_SCALE_EVALUATION_INTERVAL = "autoScaleEvaluationInterval";
  @SerializedName(SERIALIZED_NAME_AUTO_SCALE_EVALUATION_INTERVAL)
  private String autoScaleEvaluationInterval;

  public static final String SERIALIZED_NAME_AUTO_SCALE_FORMULA = "autoScaleFormula";
  @SerializedName(SERIALIZED_NAME_AUTO_SCALE_FORMULA)
  private String autoScaleFormula;

  public PoolEnableAutoScaleParameter() {
  }

  public PoolEnableAutoScaleParameter autoScaleEvaluationInterval(String autoScaleEvaluationInterval) {
    this.autoScaleEvaluationInterval = autoScaleEvaluationInterval;
    return this;
  }

  /**
   * The default value is 15 minutes. The minimum and maximum value are 5 minutes and 168 hours respectively. If you specify a value less than 5 minutes or greater than 168 hours, the Batch service rejects the request with an invalid property value error; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request). If you specify a new interval, then the existing autoscale evaluation schedule will be stopped and a new autoscale evaluation schedule will be started, with its starting time being the time when this request was issued.
   * @return autoScaleEvaluationInterval
   */
  @javax.annotation.Nullable
  public String getAutoScaleEvaluationInterval() {
    return autoScaleEvaluationInterval;
  }

  public void setAutoScaleEvaluationInterval(String autoScaleEvaluationInterval) {
    this.autoScaleEvaluationInterval = autoScaleEvaluationInterval;
  }


  public PoolEnableAutoScaleParameter autoScaleFormula(String autoScaleFormula) {
    this.autoScaleFormula = autoScaleFormula;
    return this;
  }

  /**
   * The formula is checked for validity before it is applied to the pool. If the formula is not valid, the Batch service rejects the request with detailed error information. For more information about specifying this formula, see Automatically scale compute nodes in an Azure Batch pool (https://azure.microsoft.com/en-us/documentation/articles/batch-automatic-scaling).
   * @return autoScaleFormula
   */
  @javax.annotation.Nullable
  public String getAutoScaleFormula() {
    return autoScaleFormula;
  }

  public void setAutoScaleFormula(String autoScaleFormula) {
    this.autoScaleFormula = autoScaleFormula;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PoolEnableAutoScaleParameter poolEnableAutoScaleParameter = (PoolEnableAutoScaleParameter) o;
    return Objects.equals(this.autoScaleEvaluationInterval, poolEnableAutoScaleParameter.autoScaleEvaluationInterval) &&
        Objects.equals(this.autoScaleFormula, poolEnableAutoScaleParameter.autoScaleFormula);
  }

  @Override
  public int hashCode() {
    return Objects.hash(autoScaleEvaluationInterval, autoScaleFormula);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PoolEnableAutoScaleParameter {\n");
    sb.append("    autoScaleEvaluationInterval: ").append(toIndentedString(autoScaleEvaluationInterval)).append("\n");
    sb.append("    autoScaleFormula: ").append(toIndentedString(autoScaleFormula)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("autoScaleEvaluationInterval");
    openapiFields.add("autoScaleFormula");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PoolEnableAutoScaleParameter
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PoolEnableAutoScaleParameter.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PoolEnableAutoScaleParameter is not found in the empty JSON string", PoolEnableAutoScaleParameter.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PoolEnableAutoScaleParameter.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PoolEnableAutoScaleParameter` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("autoScaleEvaluationInterval") != null && !jsonObj.get("autoScaleEvaluationInterval").isJsonNull()) && !jsonObj.get("autoScaleEvaluationInterval").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `autoScaleEvaluationInterval` to be a primitive type in the JSON string but got `%s`", jsonObj.get("autoScaleEvaluationInterval").toString()));
      }
      if ((jsonObj.get("autoScaleFormula") != null && !jsonObj.get("autoScaleFormula").isJsonNull()) && !jsonObj.get("autoScaleFormula").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `autoScaleFormula` to be a primitive type in the JSON string but got `%s`", jsonObj.get("autoScaleFormula").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PoolEnableAutoScaleParameter.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PoolEnableAutoScaleParameter' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PoolEnableAutoScaleParameter> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PoolEnableAutoScaleParameter.class));

       return (TypeAdapter<T>) new TypeAdapter<PoolEnableAutoScaleParameter>() {
           @Override
           public void write(JsonWriter out, PoolEnableAutoScaleParameter value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PoolEnableAutoScaleParameter read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PoolEnableAutoScaleParameter given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PoolEnableAutoScaleParameter
   * @throws IOException if the JSON string is invalid with respect to PoolEnableAutoScaleParameter
   */
  public static PoolEnableAutoScaleParameter fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PoolEnableAutoScaleParameter.class);
  }

  /**
   * Convert an instance of PoolEnableAutoScaleParameter to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

