/*
 * BatchService
 * A client for issuing REST requests to the Azure Batch service.
 *
 * The version of the OpenAPI document: 2017-01-01.4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.BatchError;
import org.openapitools.client.model.ComputeNode;
import org.openapitools.client.model.ComputeNodeGetRemoteLoginSettingsResult;
import org.openapitools.client.model.ComputeNodeListResult;
import org.openapitools.client.model.ComputeNodeUser;
import java.io.File;
import org.openapitools.client.model.NodeDisableSchedulingParameter;
import org.openapitools.client.model.NodeRebootParameter;
import org.openapitools.client.model.NodeReimageParameter;
import org.openapitools.client.model.NodeRemoveParameter;
import org.openapitools.client.model.NodeUpdateUserParameter;
import java.util.UUID;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ComputeNodesApi
 */
@Disabled
public class ComputeNodesApiTest {

    private final ComputeNodesApi api = new ComputeNodesApi();

    /**
     * Adds a user account to the specified compute node.
     *
     * You can add a user account to a node only when it is in the idle or running state.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void computeNodeAddUserTest() throws ApiException {
        String poolId = null;
        String nodeId = null;
        String apiVersion = null;
        ComputeNodeUser user = null;
        Integer timeout = null;
        UUID clientRequestId = null;
        Boolean returnClientRequestId = null;
        String ocpDate = null;
        api.computeNodeAddUser(poolId, nodeId, apiVersion, user, timeout, clientRequestId, returnClientRequestId, ocpDate);
        // TODO: test validations
    }

    /**
     * Deletes a user account from the specified compute node.
     *
     * You can delete a user account to a node only when it is in the idle or running state.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void computeNodeDeleteUserTest() throws ApiException {
        String poolId = null;
        String nodeId = null;
        String userName = null;
        String apiVersion = null;
        Integer timeout = null;
        UUID clientRequestId = null;
        Boolean returnClientRequestId = null;
        String ocpDate = null;
        api.computeNodeDeleteUser(poolId, nodeId, userName, apiVersion, timeout, clientRequestId, returnClientRequestId, ocpDate);
        // TODO: test validations
    }

    /**
     * Disables task scheduling on the specified compute node.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void computeNodeDisableSchedulingTest() throws ApiException {
        String poolId = null;
        String nodeId = null;
        String apiVersion = null;
        Integer timeout = null;
        UUID clientRequestId = null;
        Boolean returnClientRequestId = null;
        String ocpDate = null;
        NodeDisableSchedulingParameter nodeDisableSchedulingParameter = null;
        api.computeNodeDisableScheduling(poolId, nodeId, apiVersion, timeout, clientRequestId, returnClientRequestId, ocpDate, nodeDisableSchedulingParameter);
        // TODO: test validations
    }

    /**
     * Enables task scheduling on the specified compute node.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void computeNodeEnableSchedulingTest() throws ApiException {
        String poolId = null;
        String nodeId = null;
        String apiVersion = null;
        Integer timeout = null;
        UUID clientRequestId = null;
        Boolean returnClientRequestId = null;
        String ocpDate = null;
        api.computeNodeEnableScheduling(poolId, nodeId, apiVersion, timeout, clientRequestId, returnClientRequestId, ocpDate);
        // TODO: test validations
    }

    /**
     * Gets information about the specified compute node.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void computeNodeGetTest() throws ApiException {
        String poolId = null;
        String nodeId = null;
        String apiVersion = null;
        String $select = null;
        Integer timeout = null;
        UUID clientRequestId = null;
        Boolean returnClientRequestId = null;
        String ocpDate = null;
        ComputeNode response = api.computeNodeGet(poolId, nodeId, apiVersion, $select, timeout, clientRequestId, returnClientRequestId, ocpDate);
        // TODO: test validations
    }

    /**
     * Gets the Remote Desktop Protocol file for the specified compute node.
     *
     * Before you can access a node by using the RDP file, you must create a user account on the node. This API can only be invoked on pools created with the cloud service configuration property.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void computeNodeGetRemoteDesktopTest() throws ApiException {
        String poolId = null;
        String nodeId = null;
        String apiVersion = null;
        Integer timeout = null;
        UUID clientRequestId = null;
        Boolean returnClientRequestId = null;
        String ocpDate = null;
        File response = api.computeNodeGetRemoteDesktop(poolId, nodeId, apiVersion, timeout, clientRequestId, returnClientRequestId, ocpDate);
        // TODO: test validations
    }

    /**
     * Gets the settings required for remote login to a compute node.
     *
     * Before you can remotely login to a node using the remote login settings, you must create a user account on the node. This API can be invoked only on pools created with the virtual machine configuration property.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void computeNodeGetRemoteLoginSettingsTest() throws ApiException {
        String poolId = null;
        String nodeId = null;
        String apiVersion = null;
        Integer timeout = null;
        UUID clientRequestId = null;
        Boolean returnClientRequestId = null;
        String ocpDate = null;
        ComputeNodeGetRemoteLoginSettingsResult response = api.computeNodeGetRemoteLoginSettings(poolId, nodeId, apiVersion, timeout, clientRequestId, returnClientRequestId, ocpDate);
        // TODO: test validations
    }

    /**
     * Lists the compute nodes in the specified pool.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void computeNodeListTest() throws ApiException {
        String poolId = null;
        String apiVersion = null;
        String $filter = null;
        String $select = null;
        Integer maxresults = null;
        Integer timeout = null;
        UUID clientRequestId = null;
        Boolean returnClientRequestId = null;
        String ocpDate = null;
        ComputeNodeListResult response = api.computeNodeList(poolId, apiVersion, $filter, $select, maxresults, timeout, clientRequestId, returnClientRequestId, ocpDate);
        // TODO: test validations
    }

    /**
     * Restarts the specified compute node.
     *
     * You can restart a node only if it is in an idle or running state.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void computeNodeRebootTest() throws ApiException {
        String poolId = null;
        String nodeId = null;
        String apiVersion = null;
        Integer timeout = null;
        UUID clientRequestId = null;
        Boolean returnClientRequestId = null;
        String ocpDate = null;
        NodeRebootParameter nodeRebootParameter = null;
        api.computeNodeReboot(poolId, nodeId, apiVersion, timeout, clientRequestId, returnClientRequestId, ocpDate, nodeRebootParameter);
        // TODO: test validations
    }

    /**
     * Reinstalls the operating system on the specified compute node.
     *
     * You can reinstall the operating system on a node only if it is in an idle or running state. This API can be invoked only on pools created with the cloud service configuration property.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void computeNodeReimageTest() throws ApiException {
        String poolId = null;
        String nodeId = null;
        String apiVersion = null;
        Integer timeout = null;
        UUID clientRequestId = null;
        Boolean returnClientRequestId = null;
        String ocpDate = null;
        NodeReimageParameter nodeReimageParameter = null;
        api.computeNodeReimage(poolId, nodeId, apiVersion, timeout, clientRequestId, returnClientRequestId, ocpDate, nodeReimageParameter);
        // TODO: test validations
    }

    /**
     * Updates the password or expiration time of a user account on the specified compute node.
     *
     * This operation replaces of all the updatable properties of the account. For example, if the expiryTime element is not specified, the current value is replaced with the default value, not left unmodified. You can update a user account on a node only when it is in the idle or running state.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void computeNodeUpdateUserTest() throws ApiException {
        String poolId = null;
        String nodeId = null;
        String userName = null;
        String apiVersion = null;
        NodeUpdateUserParameter nodeUpdateUserParameter = null;
        Integer timeout = null;
        UUID clientRequestId = null;
        Boolean returnClientRequestId = null;
        String ocpDate = null;
        api.computeNodeUpdateUser(poolId, nodeId, userName, apiVersion, nodeUpdateUserParameter, timeout, clientRequestId, returnClientRequestId, ocpDate);
        // TODO: test validations
    }

    /**
     * Removes compute nodes from the specified pool.
     *
     * This operation can only run when the allocation state of the pool is steady. When this operation runs, the allocation state changes from steady to resizing.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void poolRemoveNodesTest() throws ApiException {
        String poolId = null;
        String apiVersion = null;
        NodeRemoveParameter nodeRemoveParameter = null;
        Integer timeout = null;
        UUID clientRequestId = null;
        Boolean returnClientRequestId = null;
        String ocpDate = null;
        String ifMatch = null;
        String ifNoneMatch = null;
        String ifModifiedSince = null;
        String ifUnmodifiedSince = null;
        api.poolRemoveNodes(poolId, apiVersion, nodeRemoveParameter, timeout, clientRequestId, returnClientRequestId, ocpDate, ifMatch, ifNoneMatch, ifModifiedSince, ifUnmodifiedSince);
        // TODO: test validations
    }

}
