/**
 * BatchService
 * A client for issuing REST requests to the Azure Batch service.
 *
 * The version of the OpenAPI document: 2017-01-01.4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The OSDisk model module.
 * @module model/OSDisk
 * @version 2017-01-01.4.0
 */
class OSDisk {
    /**
     * Constructs a new <code>OSDisk</code>.
     * @alias module:model/OSDisk
     * @param imageUris {Array.<String>} All the VHDs must be identical and must reside in an Azure Storage account within the same subscription and same region as the Batch account. For best performance, it is recommended that each VHD resides in a separate Azure Storage account. Each VHD can serve up to 20 Windows compute nodes or 40 Linux compute nodes. You must supply enough VHD URIs to satisfy the 'targetDedicated' property of the pool. If you do not supply enough VHD URIs, the pool will partially allocate compute nodes, and a resize error will occur.
     */
    constructor(imageUris) { 
        
        OSDisk.initialize(this, imageUris);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, imageUris) { 
        obj['imageUris'] = imageUris;
    }

    /**
     * Constructs a <code>OSDisk</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/OSDisk} obj Optional instance to populate.
     * @return {module:model/OSDisk} The populated <code>OSDisk</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new OSDisk();

            if (data.hasOwnProperty('caching')) {
                obj['caching'] = ApiClient.convertToType(data['caching'], 'String');
            }
            if (data.hasOwnProperty('imageUris')) {
                obj['imageUris'] = ApiClient.convertToType(data['imageUris'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>OSDisk</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>OSDisk</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of OSDisk.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['caching'] && !(typeof data['caching'] === 'string' || data['caching'] instanceof String)) {
            throw new Error("Expected the field `caching` to be a primitive type in the JSON string but got " + data['caching']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['imageUris'])) {
            throw new Error("Expected the field `imageUris` to be an array in the JSON data but got " + data['imageUris']);
        }

        return true;
    }


}

OSDisk.RequiredProperties = ["imageUris"];

/**
 * none - The caching mode for the disk is not enabled. readOnly - The caching mode for the disk is read only. readWrite - The caching mode for the disk is read and write. The default value for caching is none. For information about the caching options see: https://blogs.msdn.microsoft.com/windowsazurestorage/2012/06/27/exploring-windows-azure-drives-disks-and-images/.
 * @member {module:model/OSDisk.CachingEnum} caching
 */
OSDisk.prototype['caching'] = undefined;

/**
 * All the VHDs must be identical and must reside in an Azure Storage account within the same subscription and same region as the Batch account. For best performance, it is recommended that each VHD resides in a separate Azure Storage account. Each VHD can serve up to 20 Windows compute nodes or 40 Linux compute nodes. You must supply enough VHD URIs to satisfy the 'targetDedicated' property of the pool. If you do not supply enough VHD URIs, the pool will partially allocate compute nodes, and a resize error will occur.
 * @member {Array.<String>} imageUris
 */
OSDisk.prototype['imageUris'] = undefined;





/**
 * Allowed values for the <code>caching</code> property.
 * @enum {String}
 * @readonly
 */
OSDisk['CachingEnum'] = {

    /**
     * value: "none"
     * @const
     */
    "none": "none",

    /**
     * value: "readOnly"
     * @const
     */
    "readOnly": "readOnly",

    /**
     * value: "readWrite"
     * @const
     */
    "readWrite": "readWrite"
};



export default OSDisk;

