/**
 * BatchService
 * A client for issuing REST requests to the Azure Batch service.
 *
 * The version of the OpenAPI document: 2017-01-01.4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ResourceFile model module.
 * @module model/ResourceFile
 * @version 2017-01-01.4.0
 */
class ResourceFile {
    /**
     * Constructs a new <code>ResourceFile</code>.
     * @alias module:model/ResourceFile
     * @param blobSource {String} This URL must be readable using anonymous access; that is, the Batch service does not present any credentials when downloading the blob. There are two ways to get such a URL for a blob in Azure storage: include a Shared Access Signature (SAS) granting read permissions on the blob, or set the ACL for the blob or its container to allow public access.
     * @param filePath {String} 
     */
    constructor(blobSource, filePath) { 
        
        ResourceFile.initialize(this, blobSource, filePath);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, blobSource, filePath) { 
        obj['blobSource'] = blobSource;
        obj['filePath'] = filePath;
    }

    /**
     * Constructs a <code>ResourceFile</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ResourceFile} obj Optional instance to populate.
     * @return {module:model/ResourceFile} The populated <code>ResourceFile</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ResourceFile();

            if (data.hasOwnProperty('blobSource')) {
                obj['blobSource'] = ApiClient.convertToType(data['blobSource'], 'String');
            }
            if (data.hasOwnProperty('fileMode')) {
                obj['fileMode'] = ApiClient.convertToType(data['fileMode'], 'String');
            }
            if (data.hasOwnProperty('filePath')) {
                obj['filePath'] = ApiClient.convertToType(data['filePath'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ResourceFile</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ResourceFile</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ResourceFile.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['blobSource'] && !(typeof data['blobSource'] === 'string' || data['blobSource'] instanceof String)) {
            throw new Error("Expected the field `blobSource` to be a primitive type in the JSON string but got " + data['blobSource']);
        }
        // ensure the json data is a string
        if (data['fileMode'] && !(typeof data['fileMode'] === 'string' || data['fileMode'] instanceof String)) {
            throw new Error("Expected the field `fileMode` to be a primitive type in the JSON string but got " + data['fileMode']);
        }
        // ensure the json data is a string
        if (data['filePath'] && !(typeof data['filePath'] === 'string' || data['filePath'] instanceof String)) {
            throw new Error("Expected the field `filePath` to be a primitive type in the JSON string but got " + data['filePath']);
        }

        return true;
    }


}

ResourceFile.RequiredProperties = ["blobSource", "filePath"];

/**
 * This URL must be readable using anonymous access; that is, the Batch service does not present any credentials when downloading the blob. There are two ways to get such a URL for a blob in Azure storage: include a Shared Access Signature (SAS) granting read permissions on the blob, or set the ACL for the blob or its container to allow public access.
 * @member {String} blobSource
 */
ResourceFile.prototype['blobSource'] = undefined;

/**
 * This property applies only to files being downloaded to Linux compute nodes. It will be ignored if it is specified for a resourceFile which will be downloaded to a Windows node. If this property is not specified for a Linux node, then a default value of 0770 is applied to the file.
 * @member {String} fileMode
 */
ResourceFile.prototype['fileMode'] = undefined;

/**
 * @member {String} filePath
 */
ResourceFile.prototype['filePath'] = undefined;






export default ResourceFile;

