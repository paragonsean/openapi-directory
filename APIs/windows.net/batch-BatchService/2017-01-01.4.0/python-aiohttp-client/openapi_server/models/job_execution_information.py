# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.job_scheduling_error import JobSchedulingError
from openapi_server import util


class JobExecutionInformation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, end_time: datetime=None, pool_id: str=None, scheduling_error: JobSchedulingError=None, start_time: datetime=None, terminate_reason: str=None):
        """JobExecutionInformation - a model defined in OpenAPI

        :param end_time: The end_time of this JobExecutionInformation.
        :param pool_id: The pool_id of this JobExecutionInformation.
        :param scheduling_error: The scheduling_error of this JobExecutionInformation.
        :param start_time: The start_time of this JobExecutionInformation.
        :param terminate_reason: The terminate_reason of this JobExecutionInformation.
        """
        self.openapi_types = {
            'end_time': datetime,
            'pool_id': str,
            'scheduling_error': JobSchedulingError,
            'start_time': datetime,
            'terminate_reason': str
        }

        self.attribute_map = {
            'end_time': 'endTime',
            'pool_id': 'poolId',
            'scheduling_error': 'schedulingError',
            'start_time': 'startTime',
            'terminate_reason': 'terminateReason'
        }

        self._end_time = end_time
        self._pool_id = pool_id
        self._scheduling_error = scheduling_error
        self._start_time = start_time
        self._terminate_reason = terminate_reason

    @classmethod
    def from_dict(cls, dikt: dict) -> 'JobExecutionInformation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The JobExecutionInformation of this JobExecutionInformation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def end_time(self):
        """Gets the end_time of this JobExecutionInformation.

        This property is set only if the job is in the completed state.

        :return: The end_time of this JobExecutionInformation.
        :rtype: datetime
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this JobExecutionInformation.

        This property is set only if the job is in the completed state.

        :param end_time: The end_time of this JobExecutionInformation.
        :type end_time: datetime
        """

        self._end_time = end_time

    @property
    def pool_id(self):
        """Gets the pool_id of this JobExecutionInformation.

        This element contains the actual pool where the job is assigned. When you get job details from the service, they also contain a poolInfo element, which contains the pool configuration data from when the job was added or updated. That poolInfo element may also contain a poolId element. If it does, the two IDs are the same. If it does not, it means the job ran on an auto pool, and this property contains the id of that auto pool.

        :return: The pool_id of this JobExecutionInformation.
        :rtype: str
        """
        return self._pool_id

    @pool_id.setter
    def pool_id(self, pool_id):
        """Sets the pool_id of this JobExecutionInformation.

        This element contains the actual pool where the job is assigned. When you get job details from the service, they also contain a poolInfo element, which contains the pool configuration data from when the job was added or updated. That poolInfo element may also contain a poolId element. If it does, the two IDs are the same. If it does not, it means the job ran on an auto pool, and this property contains the id of that auto pool.

        :param pool_id: The pool_id of this JobExecutionInformation.
        :type pool_id: str
        """

        self._pool_id = pool_id

    @property
    def scheduling_error(self):
        """Gets the scheduling_error of this JobExecutionInformation.


        :return: The scheduling_error of this JobExecutionInformation.
        :rtype: JobSchedulingError
        """
        return self._scheduling_error

    @scheduling_error.setter
    def scheduling_error(self, scheduling_error):
        """Sets the scheduling_error of this JobExecutionInformation.


        :param scheduling_error: The scheduling_error of this JobExecutionInformation.
        :type scheduling_error: JobSchedulingError
        """

        self._scheduling_error = scheduling_error

    @property
    def start_time(self):
        """Gets the start_time of this JobExecutionInformation.

        This is the time at which the job was created.

        :return: The start_time of this JobExecutionInformation.
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this JobExecutionInformation.

        This is the time at which the job was created.

        :param start_time: The start_time of this JobExecutionInformation.
        :type start_time: datetime
        """
        if start_time is None:
            raise ValueError("Invalid value for `start_time`, must not be `None`")

        self._start_time = start_time

    @property
    def terminate_reason(self):
        """Gets the terminate_reason of this JobExecutionInformation.

        This property is set only if the job is in the completed state. If the Batch service terminates the job, it sets the reason as follows: JMComplete - the Job Manager task completed, and killJobOnCompletion was set to true. MaxWallClockTimeExpiry - the job reached its maxWallClockTime constraint. TerminateJobSchedule - the job ran as part of a schedule, and the schedule terminated. AllTasksComplete - the job's onAllTasksComplete attribute is set to terminateJob, and all tasks in the job are complete. TaskFailed - the job's onTaskFailure attribute is set to performExitOptionsJobAction, and a task in the job failed with an exit condition that specified a jobAction of terminateJob. Any other string is a user-defined reason specified in a call to the 'Terminate a job' operation.

        :return: The terminate_reason of this JobExecutionInformation.
        :rtype: str
        """
        return self._terminate_reason

    @terminate_reason.setter
    def terminate_reason(self, terminate_reason):
        """Sets the terminate_reason of this JobExecutionInformation.

        This property is set only if the job is in the completed state. If the Batch service terminates the job, it sets the reason as follows: JMComplete - the Job Manager task completed, and killJobOnCompletion was set to true. MaxWallClockTimeExpiry - the job reached its maxWallClockTime constraint. TerminateJobSchedule - the job ran as part of a schedule, and the schedule terminated. AllTasksComplete - the job's onAllTasksComplete attribute is set to terminateJob, and all tasks in the job are complete. TaskFailed - the job's onTaskFailure attribute is set to performExitOptionsJobAction, and a task in the job failed with an exit condition that specified a jobAction of terminateJob. Any other string is a user-defined reason specified in a call to the 'Terminate a job' operation.

        :param terminate_reason: The terminate_reason of this JobExecutionInformation.
        :type terminate_reason: str
        """

        self._terminate_reason = terminate_reason
