# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.task_scheduling_error import TaskSchedulingError
from openapi_server import util


class JobReleaseTaskExecutionInformation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, end_time: datetime=None, exit_code: int=None, scheduling_error: TaskSchedulingError=None, start_time: datetime=None, state: str=None, task_root_directory: str=None, task_root_directory_url: str=None):
        """JobReleaseTaskExecutionInformation - a model defined in OpenAPI

        :param end_time: The end_time of this JobReleaseTaskExecutionInformation.
        :param exit_code: The exit_code of this JobReleaseTaskExecutionInformation.
        :param scheduling_error: The scheduling_error of this JobReleaseTaskExecutionInformation.
        :param start_time: The start_time of this JobReleaseTaskExecutionInformation.
        :param state: The state of this JobReleaseTaskExecutionInformation.
        :param task_root_directory: The task_root_directory of this JobReleaseTaskExecutionInformation.
        :param task_root_directory_url: The task_root_directory_url of this JobReleaseTaskExecutionInformation.
        """
        self.openapi_types = {
            'end_time': datetime,
            'exit_code': int,
            'scheduling_error': TaskSchedulingError,
            'start_time': datetime,
            'state': str,
            'task_root_directory': str,
            'task_root_directory_url': str
        }

        self.attribute_map = {
            'end_time': 'endTime',
            'exit_code': 'exitCode',
            'scheduling_error': 'schedulingError',
            'start_time': 'startTime',
            'state': 'state',
            'task_root_directory': 'taskRootDirectory',
            'task_root_directory_url': 'taskRootDirectoryUrl'
        }

        self._end_time = end_time
        self._exit_code = exit_code
        self._scheduling_error = scheduling_error
        self._start_time = start_time
        self._state = state
        self._task_root_directory = task_root_directory
        self._task_root_directory_url = task_root_directory_url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'JobReleaseTaskExecutionInformation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The JobReleaseTaskExecutionInformation of this JobReleaseTaskExecutionInformation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def end_time(self):
        """Gets the end_time of this JobReleaseTaskExecutionInformation.

        This property is set only if the task is in the Completed state.

        :return: The end_time of this JobReleaseTaskExecutionInformation.
        :rtype: datetime
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this JobReleaseTaskExecutionInformation.

        This property is set only if the task is in the Completed state.

        :param end_time: The end_time of this JobReleaseTaskExecutionInformation.
        :type end_time: datetime
        """

        self._end_time = end_time

    @property
    def exit_code(self):
        """Gets the exit_code of this JobReleaseTaskExecutionInformation.

        This parameter is returned only if the task is in the completed state. The exit code for a process reflects the specific convention implemented by the application developer for that process. If you use the exit code value to make decisions in your code, be sure that you know the exit code convention used by the application process. Note that the exit code may also be generated by the compute node operating system, such as when a process is forcibly terminated.

        :return: The exit_code of this JobReleaseTaskExecutionInformation.
        :rtype: int
        """
        return self._exit_code

    @exit_code.setter
    def exit_code(self, exit_code):
        """Sets the exit_code of this JobReleaseTaskExecutionInformation.

        This parameter is returned only if the task is in the completed state. The exit code for a process reflects the specific convention implemented by the application developer for that process. If you use the exit code value to make decisions in your code, be sure that you know the exit code convention used by the application process. Note that the exit code may also be generated by the compute node operating system, such as when a process is forcibly terminated.

        :param exit_code: The exit_code of this JobReleaseTaskExecutionInformation.
        :type exit_code: int
        """

        self._exit_code = exit_code

    @property
    def scheduling_error(self):
        """Gets the scheduling_error of this JobReleaseTaskExecutionInformation.


        :return: The scheduling_error of this JobReleaseTaskExecutionInformation.
        :rtype: TaskSchedulingError
        """
        return self._scheduling_error

    @scheduling_error.setter
    def scheduling_error(self, scheduling_error):
        """Sets the scheduling_error of this JobReleaseTaskExecutionInformation.


        :param scheduling_error: The scheduling_error of this JobReleaseTaskExecutionInformation.
        :type scheduling_error: TaskSchedulingError
        """

        self._scheduling_error = scheduling_error

    @property
    def start_time(self):
        """Gets the start_time of this JobReleaseTaskExecutionInformation.


        :return: The start_time of this JobReleaseTaskExecutionInformation.
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this JobReleaseTaskExecutionInformation.


        :param start_time: The start_time of this JobReleaseTaskExecutionInformation.
        :type start_time: datetime
        """
        if start_time is None:
            raise ValueError("Invalid value for `start_time`, must not be `None`")

        self._start_time = start_time

    @property
    def state(self):
        """Gets the state of this JobReleaseTaskExecutionInformation.

        running - the task is currently running (including retrying). completed - the task has exited, or the Batch service was unable to start the task due to scheduling errors.

        :return: The state of this JobReleaseTaskExecutionInformation.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this JobReleaseTaskExecutionInformation.

        running - the task is currently running (including retrying). completed - the task has exited, or the Batch service was unable to start the task due to scheduling errors.

        :param state: The state of this JobReleaseTaskExecutionInformation.
        :type state: str
        """
        allowed_values = ["running", "completed"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def task_root_directory(self):
        """Gets the task_root_directory of this JobReleaseTaskExecutionInformation.


        :return: The task_root_directory of this JobReleaseTaskExecutionInformation.
        :rtype: str
        """
        return self._task_root_directory

    @task_root_directory.setter
    def task_root_directory(self, task_root_directory):
        """Sets the task_root_directory of this JobReleaseTaskExecutionInformation.


        :param task_root_directory: The task_root_directory of this JobReleaseTaskExecutionInformation.
        :type task_root_directory: str
        """

        self._task_root_directory = task_root_directory

    @property
    def task_root_directory_url(self):
        """Gets the task_root_directory_url of this JobReleaseTaskExecutionInformation.


        :return: The task_root_directory_url of this JobReleaseTaskExecutionInformation.
        :rtype: str
        """
        return self._task_root_directory_url

    @task_root_directory_url.setter
    def task_root_directory_url(self, task_root_directory_url):
        """Sets the task_root_directory_url of this JobReleaseTaskExecutionInformation.


        :param task_root_directory_url: The task_root_directory_url of this JobReleaseTaskExecutionInformation.
        :type task_root_directory_url: str
        """

        self._task_root_directory_url = task_root_directory_url
