# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.affinity_information import AffinityInformation
from openapi_server.models.application_package_reference import ApplicationPackageReference
from openapi_server.models.authentication_token_settings import AuthenticationTokenSettings
from openapi_server.models.environment_setting import EnvironmentSetting
from openapi_server.models.exit_conditions import ExitConditions
from openapi_server.models.multi_instance_settings import MultiInstanceSettings
from openapi_server.models.resource_file import ResourceFile
from openapi_server.models.task_constraints import TaskConstraints
from openapi_server.models.task_dependencies import TaskDependencies
from openapi_server.models.user_identity import UserIdentity
from openapi_server import util


class TaskAddParameter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, affinity_info: AffinityInformation=None, application_package_references: List[ApplicationPackageReference]=None, authentication_token_settings: AuthenticationTokenSettings=None, command_line: str=None, constraints: TaskConstraints=None, depends_on: TaskDependencies=None, display_name: str=None, environment_settings: List[EnvironmentSetting]=None, exit_conditions: ExitConditions=None, id: str=None, multi_instance_settings: MultiInstanceSettings=None, resource_files: List[ResourceFile]=None, user_identity: UserIdentity=None):
        """TaskAddParameter - a model defined in OpenAPI

        :param affinity_info: The affinity_info of this TaskAddParameter.
        :param application_package_references: The application_package_references of this TaskAddParameter.
        :param authentication_token_settings: The authentication_token_settings of this TaskAddParameter.
        :param command_line: The command_line of this TaskAddParameter.
        :param constraints: The constraints of this TaskAddParameter.
        :param depends_on: The depends_on of this TaskAddParameter.
        :param display_name: The display_name of this TaskAddParameter.
        :param environment_settings: The environment_settings of this TaskAddParameter.
        :param exit_conditions: The exit_conditions of this TaskAddParameter.
        :param id: The id of this TaskAddParameter.
        :param multi_instance_settings: The multi_instance_settings of this TaskAddParameter.
        :param resource_files: The resource_files of this TaskAddParameter.
        :param user_identity: The user_identity of this TaskAddParameter.
        """
        self.openapi_types = {
            'affinity_info': AffinityInformation,
            'application_package_references': List[ApplicationPackageReference],
            'authentication_token_settings': AuthenticationTokenSettings,
            'command_line': str,
            'constraints': TaskConstraints,
            'depends_on': TaskDependencies,
            'display_name': str,
            'environment_settings': List[EnvironmentSetting],
            'exit_conditions': ExitConditions,
            'id': str,
            'multi_instance_settings': MultiInstanceSettings,
            'resource_files': List[ResourceFile],
            'user_identity': UserIdentity
        }

        self.attribute_map = {
            'affinity_info': 'affinityInfo',
            'application_package_references': 'applicationPackageReferences',
            'authentication_token_settings': 'authenticationTokenSettings',
            'command_line': 'commandLine',
            'constraints': 'constraints',
            'depends_on': 'dependsOn',
            'display_name': 'displayName',
            'environment_settings': 'environmentSettings',
            'exit_conditions': 'exitConditions',
            'id': 'id',
            'multi_instance_settings': 'multiInstanceSettings',
            'resource_files': 'resourceFiles',
            'user_identity': 'userIdentity'
        }

        self._affinity_info = affinity_info
        self._application_package_references = application_package_references
        self._authentication_token_settings = authentication_token_settings
        self._command_line = command_line
        self._constraints = constraints
        self._depends_on = depends_on
        self._display_name = display_name
        self._environment_settings = environment_settings
        self._exit_conditions = exit_conditions
        self._id = id
        self._multi_instance_settings = multi_instance_settings
        self._resource_files = resource_files
        self._user_identity = user_identity

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TaskAddParameter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TaskAddParameter of this TaskAddParameter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def affinity_info(self):
        """Gets the affinity_info of this TaskAddParameter.


        :return: The affinity_info of this TaskAddParameter.
        :rtype: AffinityInformation
        """
        return self._affinity_info

    @affinity_info.setter
    def affinity_info(self, affinity_info):
        """Sets the affinity_info of this TaskAddParameter.


        :param affinity_info: The affinity_info of this TaskAddParameter.
        :type affinity_info: AffinityInformation
        """

        self._affinity_info = affinity_info

    @property
    def application_package_references(self):
        """Gets the application_package_references of this TaskAddParameter.


        :return: The application_package_references of this TaskAddParameter.
        :rtype: List[ApplicationPackageReference]
        """
        return self._application_package_references

    @application_package_references.setter
    def application_package_references(self, application_package_references):
        """Sets the application_package_references of this TaskAddParameter.


        :param application_package_references: The application_package_references of this TaskAddParameter.
        :type application_package_references: List[ApplicationPackageReference]
        """

        self._application_package_references = application_package_references

    @property
    def authentication_token_settings(self):
        """Gets the authentication_token_settings of this TaskAddParameter.


        :return: The authentication_token_settings of this TaskAddParameter.
        :rtype: AuthenticationTokenSettings
        """
        return self._authentication_token_settings

    @authentication_token_settings.setter
    def authentication_token_settings(self, authentication_token_settings):
        """Sets the authentication_token_settings of this TaskAddParameter.


        :param authentication_token_settings: The authentication_token_settings of this TaskAddParameter.
        :type authentication_token_settings: AuthenticationTokenSettings
        """

        self._authentication_token_settings = authentication_token_settings

    @property
    def command_line(self):
        """Gets the command_line of this TaskAddParameter.

        For multi-instance tasks, the command line is executed as the primary task, after the primary task and all subtasks have finished executing the coordination command line. The command line does not run under a shell, and therefore cannot take advantage of shell features such as environment variable expansion. If you want to take advantage of such features, you should invoke the shell in the command line, for example using \"cmd /c MyCommand\" in Windows or \"/bin/sh -c MyCommand\" in Linux.

        :return: The command_line of this TaskAddParameter.
        :rtype: str
        """
        return self._command_line

    @command_line.setter
    def command_line(self, command_line):
        """Sets the command_line of this TaskAddParameter.

        For multi-instance tasks, the command line is executed as the primary task, after the primary task and all subtasks have finished executing the coordination command line. The command line does not run under a shell, and therefore cannot take advantage of shell features such as environment variable expansion. If you want to take advantage of such features, you should invoke the shell in the command line, for example using \"cmd /c MyCommand\" in Windows or \"/bin/sh -c MyCommand\" in Linux.

        :param command_line: The command_line of this TaskAddParameter.
        :type command_line: str
        """
        if command_line is None:
            raise ValueError("Invalid value for `command_line`, must not be `None`")

        self._command_line = command_line

    @property
    def constraints(self):
        """Gets the constraints of this TaskAddParameter.


        :return: The constraints of this TaskAddParameter.
        :rtype: TaskConstraints
        """
        return self._constraints

    @constraints.setter
    def constraints(self, constraints):
        """Sets the constraints of this TaskAddParameter.


        :param constraints: The constraints of this TaskAddParameter.
        :type constraints: TaskConstraints
        """

        self._constraints = constraints

    @property
    def depends_on(self):
        """Gets the depends_on of this TaskAddParameter.


        :return: The depends_on of this TaskAddParameter.
        :rtype: TaskDependencies
        """
        return self._depends_on

    @depends_on.setter
    def depends_on(self, depends_on):
        """Sets the depends_on of this TaskAddParameter.


        :param depends_on: The depends_on of this TaskAddParameter.
        :type depends_on: TaskDependencies
        """

        self._depends_on = depends_on

    @property
    def display_name(self):
        """Gets the display_name of this TaskAddParameter.

        The display name need not be unique and can contain any Unicode characters up to a maximum length of 1024.

        :return: The display_name of this TaskAddParameter.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this TaskAddParameter.

        The display name need not be unique and can contain any Unicode characters up to a maximum length of 1024.

        :param display_name: The display_name of this TaskAddParameter.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def environment_settings(self):
        """Gets the environment_settings of this TaskAddParameter.


        :return: The environment_settings of this TaskAddParameter.
        :rtype: List[EnvironmentSetting]
        """
        return self._environment_settings

    @environment_settings.setter
    def environment_settings(self, environment_settings):
        """Sets the environment_settings of this TaskAddParameter.


        :param environment_settings: The environment_settings of this TaskAddParameter.
        :type environment_settings: List[EnvironmentSetting]
        """

        self._environment_settings = environment_settings

    @property
    def exit_conditions(self):
        """Gets the exit_conditions of this TaskAddParameter.


        :return: The exit_conditions of this TaskAddParameter.
        :rtype: ExitConditions
        """
        return self._exit_conditions

    @exit_conditions.setter
    def exit_conditions(self, exit_conditions):
        """Sets the exit_conditions of this TaskAddParameter.


        :param exit_conditions: The exit_conditions of this TaskAddParameter.
        :type exit_conditions: ExitConditions
        """

        self._exit_conditions = exit_conditions

    @property
    def id(self):
        """Gets the id of this TaskAddParameter.

        The ID can contain any combination of alphanumeric characters including hyphens and underscores, and cannot contain more than 64 characters. The ID is case-preserving and case-insensitive (that is, you may not have two IDs within a job that differ only by case).

        :return: The id of this TaskAddParameter.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TaskAddParameter.

        The ID can contain any combination of alphanumeric characters including hyphens and underscores, and cannot contain more than 64 characters. The ID is case-preserving and case-insensitive (that is, you may not have two IDs within a job that differ only by case).

        :param id: The id of this TaskAddParameter.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def multi_instance_settings(self):
        """Gets the multi_instance_settings of this TaskAddParameter.


        :return: The multi_instance_settings of this TaskAddParameter.
        :rtype: MultiInstanceSettings
        """
        return self._multi_instance_settings

    @multi_instance_settings.setter
    def multi_instance_settings(self, multi_instance_settings):
        """Sets the multi_instance_settings of this TaskAddParameter.


        :param multi_instance_settings: The multi_instance_settings of this TaskAddParameter.
        :type multi_instance_settings: MultiInstanceSettings
        """

        self._multi_instance_settings = multi_instance_settings

    @property
    def resource_files(self):
        """Gets the resource_files of this TaskAddParameter.

        For multi-instance tasks, the resource files will only be downloaded to the compute node on which the primary task is executed.

        :return: The resource_files of this TaskAddParameter.
        :rtype: List[ResourceFile]
        """
        return self._resource_files

    @resource_files.setter
    def resource_files(self, resource_files):
        """Sets the resource_files of this TaskAddParameter.

        For multi-instance tasks, the resource files will only be downloaded to the compute node on which the primary task is executed.

        :param resource_files: The resource_files of this TaskAddParameter.
        :type resource_files: List[ResourceFile]
        """

        self._resource_files = resource_files

    @property
    def user_identity(self):
        """Gets the user_identity of this TaskAddParameter.


        :return: The user_identity of this TaskAddParameter.
        :rtype: UserIdentity
        """
        return self._user_identity

    @user_identity.setter
    def user_identity(self, user_identity):
        """Sets the user_identity of this TaskAddParameter.


        :param user_identity: The user_identity of this TaskAddParameter.
        :type user_identity: UserIdentity
        """

        self._user_identity = user_identity
