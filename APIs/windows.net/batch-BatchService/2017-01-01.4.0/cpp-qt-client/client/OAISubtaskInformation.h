/**
 * BatchService
 * A client for issuing REST requests to the Azure Batch service.
 *
 * The version of the OpenAPI document: 2017-01-01.4.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAISubtaskInformation.h
 *
 * 
 */

#ifndef OAISubtaskInformation_H
#define OAISubtaskInformation_H

#include <QJsonObject>

#include "OAIComputeNodeInformation.h"
#include "OAISubtaskState.h"
#include "OAITaskSchedulingError.h"
#include <QDateTime>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIComputeNodeInformation;
class OAITaskSchedulingError;

class OAISubtaskInformation : public OAIObject {
public:
    OAISubtaskInformation();
    OAISubtaskInformation(QString json);
    ~OAISubtaskInformation() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QDateTime getEndTime() const;
    void setEndTime(const QDateTime &end_time);
    bool is_end_time_Set() const;
    bool is_end_time_Valid() const;

    qint32 getExitCode() const;
    void setExitCode(const qint32 &exit_code);
    bool is_exit_code_Set() const;
    bool is_exit_code_Valid() const;

    qint32 getId() const;
    void setId(const qint32 &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    OAIComputeNodeInformation getNodeInfo() const;
    void setNodeInfo(const OAIComputeNodeInformation &node_info);
    bool is_node_info_Set() const;
    bool is_node_info_Valid() const;

    OAISubtaskState getPreviousState() const;
    void setPreviousState(const OAISubtaskState &previous_state);
    bool is_previous_state_Set() const;
    bool is_previous_state_Valid() const;

    QDateTime getPreviousStateTransitionTime() const;
    void setPreviousStateTransitionTime(const QDateTime &previous_state_transition_time);
    bool is_previous_state_transition_time_Set() const;
    bool is_previous_state_transition_time_Valid() const;

    OAITaskSchedulingError getSchedulingError() const;
    void setSchedulingError(const OAITaskSchedulingError &scheduling_error);
    bool is_scheduling_error_Set() const;
    bool is_scheduling_error_Valid() const;

    QDateTime getStartTime() const;
    void setStartTime(const QDateTime &start_time);
    bool is_start_time_Set() const;
    bool is_start_time_Valid() const;

    OAISubtaskState getState() const;
    void setState(const OAISubtaskState &state);
    bool is_state_Set() const;
    bool is_state_Valid() const;

    QDateTime getStateTransitionTime() const;
    void setStateTransitionTime(const QDateTime &state_transition_time);
    bool is_state_transition_time_Set() const;
    bool is_state_transition_time_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QDateTime m_end_time;
    bool m_end_time_isSet;
    bool m_end_time_isValid;

    qint32 m_exit_code;
    bool m_exit_code_isSet;
    bool m_exit_code_isValid;

    qint32 m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    OAIComputeNodeInformation m_node_info;
    bool m_node_info_isSet;
    bool m_node_info_isValid;

    OAISubtaskState m_previous_state;
    bool m_previous_state_isSet;
    bool m_previous_state_isValid;

    QDateTime m_previous_state_transition_time;
    bool m_previous_state_transition_time_isSet;
    bool m_previous_state_transition_time_isValid;

    OAITaskSchedulingError m_scheduling_error;
    bool m_scheduling_error_isSet;
    bool m_scheduling_error_isValid;

    QDateTime m_start_time;
    bool m_start_time_isSet;
    bool m_start_time_isValid;

    OAISubtaskState m_state;
    bool m_state_isSet;
    bool m_state_isValid;

    QDateTime m_state_transition_time;
    bool m_state_transition_time_isSet;
    bool m_state_transition_time_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAISubtaskInformation)

#endif // OAISubtaskInformation_H
