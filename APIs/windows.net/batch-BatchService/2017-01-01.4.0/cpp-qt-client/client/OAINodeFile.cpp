/**
 * BatchService
 * A client for issuing REST requests to the Azure Batch service.
 *
 * The version of the OpenAPI document: 2017-01-01.4.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINodeFile.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINodeFile::OAINodeFile(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINodeFile::OAINodeFile() {
    this->initializeModel();
}

OAINodeFile::~OAINodeFile() {}

void OAINodeFile::initializeModel() {

    m_is_directory_isSet = false;
    m_is_directory_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_properties_isSet = false;
    m_properties_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAINodeFile::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINodeFile::fromJsonObject(QJsonObject json) {

    m_is_directory_isValid = ::OpenAPI::fromJsonValue(m_is_directory, json[QString("isDirectory")]);
    m_is_directory_isSet = !json[QString("isDirectory")].isNull() && m_is_directory_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_properties_isValid = ::OpenAPI::fromJsonValue(m_properties, json[QString("properties")]);
    m_properties_isSet = !json[QString("properties")].isNull() && m_properties_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAINodeFile::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINodeFile::asJsonObject() const {
    QJsonObject obj;
    if (m_is_directory_isSet) {
        obj.insert(QString("isDirectory"), ::OpenAPI::toJsonValue(m_is_directory));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_properties.isSet()) {
        obj.insert(QString("properties"), ::OpenAPI::toJsonValue(m_properties));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

bool OAINodeFile::isIsDirectory() const {
    return m_is_directory;
}
void OAINodeFile::setIsDirectory(const bool &is_directory) {
    m_is_directory = is_directory;
    m_is_directory_isSet = true;
}

bool OAINodeFile::is_is_directory_Set() const{
    return m_is_directory_isSet;
}

bool OAINodeFile::is_is_directory_Valid() const{
    return m_is_directory_isValid;
}

QString OAINodeFile::getName() const {
    return m_name;
}
void OAINodeFile::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAINodeFile::is_name_Set() const{
    return m_name_isSet;
}

bool OAINodeFile::is_name_Valid() const{
    return m_name_isValid;
}

OAIFileProperties OAINodeFile::getProperties() const {
    return m_properties;
}
void OAINodeFile::setProperties(const OAIFileProperties &properties) {
    m_properties = properties;
    m_properties_isSet = true;
}

bool OAINodeFile::is_properties_Set() const{
    return m_properties_isSet;
}

bool OAINodeFile::is_properties_Valid() const{
    return m_properties_isValid;
}

QString OAINodeFile::getUrl() const {
    return m_url;
}
void OAINodeFile::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAINodeFile::is_url_Set() const{
    return m_url_isSet;
}

bool OAINodeFile::is_url_Valid() const{
    return m_url_isValid;
}

bool OAINodeFile::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_is_directory_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINodeFile::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
