/**
 * BatchService
 * A client for issuing REST requests to the Azure Batch service.
 *
 * The version of the OpenAPI document: 2017-01-01.4.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISubtaskInformation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISubtaskInformation::OAISubtaskInformation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISubtaskInformation::OAISubtaskInformation() {
    this->initializeModel();
}

OAISubtaskInformation::~OAISubtaskInformation() {}

void OAISubtaskInformation::initializeModel() {

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_exit_code_isSet = false;
    m_exit_code_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_node_info_isSet = false;
    m_node_info_isValid = false;

    m_previous_state_isSet = false;
    m_previous_state_isValid = false;

    m_previous_state_transition_time_isSet = false;
    m_previous_state_transition_time_isValid = false;

    m_scheduling_error_isSet = false;
    m_scheduling_error_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_state_transition_time_isSet = false;
    m_state_transition_time_isValid = false;
}

void OAISubtaskInformation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISubtaskInformation::fromJsonObject(QJsonObject json) {

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("endTime")]);
    m_end_time_isSet = !json[QString("endTime")].isNull() && m_end_time_isValid;

    m_exit_code_isValid = ::OpenAPI::fromJsonValue(m_exit_code, json[QString("exitCode")]);
    m_exit_code_isSet = !json[QString("exitCode")].isNull() && m_exit_code_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_node_info_isValid = ::OpenAPI::fromJsonValue(m_node_info, json[QString("nodeInfo")]);
    m_node_info_isSet = !json[QString("nodeInfo")].isNull() && m_node_info_isValid;

    m_previous_state_isValid = ::OpenAPI::fromJsonValue(m_previous_state, json[QString("previousState")]);
    m_previous_state_isSet = !json[QString("previousState")].isNull() && m_previous_state_isValid;

    m_previous_state_transition_time_isValid = ::OpenAPI::fromJsonValue(m_previous_state_transition_time, json[QString("previousStateTransitionTime")]);
    m_previous_state_transition_time_isSet = !json[QString("previousStateTransitionTime")].isNull() && m_previous_state_transition_time_isValid;

    m_scheduling_error_isValid = ::OpenAPI::fromJsonValue(m_scheduling_error, json[QString("schedulingError")]);
    m_scheduling_error_isSet = !json[QString("schedulingError")].isNull() && m_scheduling_error_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("startTime")]);
    m_start_time_isSet = !json[QString("startTime")].isNull() && m_start_time_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_state_transition_time_isValid = ::OpenAPI::fromJsonValue(m_state_transition_time, json[QString("stateTransitionTime")]);
    m_state_transition_time_isSet = !json[QString("stateTransitionTime")].isNull() && m_state_transition_time_isValid;
}

QString OAISubtaskInformation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISubtaskInformation::asJsonObject() const {
    QJsonObject obj;
    if (m_end_time_isSet) {
        obj.insert(QString("endTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_exit_code_isSet) {
        obj.insert(QString("exitCode"), ::OpenAPI::toJsonValue(m_exit_code));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_node_info.isSet()) {
        obj.insert(QString("nodeInfo"), ::OpenAPI::toJsonValue(m_node_info));
    }
    if (m_previous_state.isSet()) {
        obj.insert(QString("previousState"), ::OpenAPI::toJsonValue(m_previous_state));
    }
    if (m_previous_state_transition_time_isSet) {
        obj.insert(QString("previousStateTransitionTime"), ::OpenAPI::toJsonValue(m_previous_state_transition_time));
    }
    if (m_scheduling_error.isSet()) {
        obj.insert(QString("schedulingError"), ::OpenAPI::toJsonValue(m_scheduling_error));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("startTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_state.isSet()) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_state_transition_time_isSet) {
        obj.insert(QString("stateTransitionTime"), ::OpenAPI::toJsonValue(m_state_transition_time));
    }
    return obj;
}

QDateTime OAISubtaskInformation::getEndTime() const {
    return m_end_time;
}
void OAISubtaskInformation::setEndTime(const QDateTime &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAISubtaskInformation::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAISubtaskInformation::is_end_time_Valid() const{
    return m_end_time_isValid;
}

qint32 OAISubtaskInformation::getExitCode() const {
    return m_exit_code;
}
void OAISubtaskInformation::setExitCode(const qint32 &exit_code) {
    m_exit_code = exit_code;
    m_exit_code_isSet = true;
}

bool OAISubtaskInformation::is_exit_code_Set() const{
    return m_exit_code_isSet;
}

bool OAISubtaskInformation::is_exit_code_Valid() const{
    return m_exit_code_isValid;
}

qint32 OAISubtaskInformation::getId() const {
    return m_id;
}
void OAISubtaskInformation::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAISubtaskInformation::is_id_Set() const{
    return m_id_isSet;
}

bool OAISubtaskInformation::is_id_Valid() const{
    return m_id_isValid;
}

OAIComputeNodeInformation OAISubtaskInformation::getNodeInfo() const {
    return m_node_info;
}
void OAISubtaskInformation::setNodeInfo(const OAIComputeNodeInformation &node_info) {
    m_node_info = node_info;
    m_node_info_isSet = true;
}

bool OAISubtaskInformation::is_node_info_Set() const{
    return m_node_info_isSet;
}

bool OAISubtaskInformation::is_node_info_Valid() const{
    return m_node_info_isValid;
}

OAISubtaskState OAISubtaskInformation::getPreviousState() const {
    return m_previous_state;
}
void OAISubtaskInformation::setPreviousState(const OAISubtaskState &previous_state) {
    m_previous_state = previous_state;
    m_previous_state_isSet = true;
}

bool OAISubtaskInformation::is_previous_state_Set() const{
    return m_previous_state_isSet;
}

bool OAISubtaskInformation::is_previous_state_Valid() const{
    return m_previous_state_isValid;
}

QDateTime OAISubtaskInformation::getPreviousStateTransitionTime() const {
    return m_previous_state_transition_time;
}
void OAISubtaskInformation::setPreviousStateTransitionTime(const QDateTime &previous_state_transition_time) {
    m_previous_state_transition_time = previous_state_transition_time;
    m_previous_state_transition_time_isSet = true;
}

bool OAISubtaskInformation::is_previous_state_transition_time_Set() const{
    return m_previous_state_transition_time_isSet;
}

bool OAISubtaskInformation::is_previous_state_transition_time_Valid() const{
    return m_previous_state_transition_time_isValid;
}

OAITaskSchedulingError OAISubtaskInformation::getSchedulingError() const {
    return m_scheduling_error;
}
void OAISubtaskInformation::setSchedulingError(const OAITaskSchedulingError &scheduling_error) {
    m_scheduling_error = scheduling_error;
    m_scheduling_error_isSet = true;
}

bool OAISubtaskInformation::is_scheduling_error_Set() const{
    return m_scheduling_error_isSet;
}

bool OAISubtaskInformation::is_scheduling_error_Valid() const{
    return m_scheduling_error_isValid;
}

QDateTime OAISubtaskInformation::getStartTime() const {
    return m_start_time;
}
void OAISubtaskInformation::setStartTime(const QDateTime &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAISubtaskInformation::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAISubtaskInformation::is_start_time_Valid() const{
    return m_start_time_isValid;
}

OAISubtaskState OAISubtaskInformation::getState() const {
    return m_state;
}
void OAISubtaskInformation::setState(const OAISubtaskState &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAISubtaskInformation::is_state_Set() const{
    return m_state_isSet;
}

bool OAISubtaskInformation::is_state_Valid() const{
    return m_state_isValid;
}

QDateTime OAISubtaskInformation::getStateTransitionTime() const {
    return m_state_transition_time;
}
void OAISubtaskInformation::setStateTransitionTime(const QDateTime &state_transition_time) {
    m_state_transition_time = state_transition_time;
    m_state_transition_time_isSet = true;
}

bool OAISubtaskInformation::is_state_transition_time_Set() const{
    return m_state_transition_time_isSet;
}

bool OAISubtaskInformation::is_state_transition_time_Valid() const{
    return m_state_transition_time_isValid;
}

bool OAISubtaskInformation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_exit_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_previous_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_previous_state_transition_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scheduling_error.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_transition_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISubtaskInformation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
