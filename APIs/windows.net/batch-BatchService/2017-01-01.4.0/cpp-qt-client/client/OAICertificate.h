/**
 * BatchService
 * A client for issuing REST requests to the Azure Batch service.
 *
 * The version of the OpenAPI document: 2017-01-01.4.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICertificate.h
 *
 * A certificate that can be installed on compute nodes and can be used to authenticate operations on the machine.
 */

#ifndef OAICertificate_H
#define OAICertificate_H

#include <QJsonObject>

#include "OAICertificateState.h"
#include "OAIDeleteCertificateError.h"
#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIDeleteCertificateError;

class OAICertificate : public OAIObject {
public:
    OAICertificate();
    OAICertificate(QString json);
    ~OAICertificate() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIDeleteCertificateError getDeleteCertificateError() const;
    void setDeleteCertificateError(const OAIDeleteCertificateError &delete_certificate_error);
    bool is_delete_certificate_error_Set() const;
    bool is_delete_certificate_error_Valid() const;

    OAICertificateState getPreviousState() const;
    void setPreviousState(const OAICertificateState &previous_state);
    bool is_previous_state_Set() const;
    bool is_previous_state_Valid() const;

    QDateTime getPreviousStateTransitionTime() const;
    void setPreviousStateTransitionTime(const QDateTime &previous_state_transition_time);
    bool is_previous_state_transition_time_Set() const;
    bool is_previous_state_transition_time_Valid() const;

    QString getPublicData() const;
    void setPublicData(const QString &public_data);
    bool is_public_data_Set() const;
    bool is_public_data_Valid() const;

    OAICertificateState getState() const;
    void setState(const OAICertificateState &state);
    bool is_state_Set() const;
    bool is_state_Valid() const;

    QDateTime getStateTransitionTime() const;
    void setStateTransitionTime(const QDateTime &state_transition_time);
    bool is_state_transition_time_Set() const;
    bool is_state_transition_time_Valid() const;

    QString getThumbprint() const;
    void setThumbprint(const QString &thumbprint);
    bool is_thumbprint_Set() const;
    bool is_thumbprint_Valid() const;

    QString getThumbprintAlgorithm() const;
    void setThumbprintAlgorithm(const QString &thumbprint_algorithm);
    bool is_thumbprint_algorithm_Set() const;
    bool is_thumbprint_algorithm_Valid() const;

    QString getUrl() const;
    void setUrl(const QString &url);
    bool is_url_Set() const;
    bool is_url_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIDeleteCertificateError m_delete_certificate_error;
    bool m_delete_certificate_error_isSet;
    bool m_delete_certificate_error_isValid;

    OAICertificateState m_previous_state;
    bool m_previous_state_isSet;
    bool m_previous_state_isValid;

    QDateTime m_previous_state_transition_time;
    bool m_previous_state_transition_time_isSet;
    bool m_previous_state_transition_time_isValid;

    QString m_public_data;
    bool m_public_data_isSet;
    bool m_public_data_isValid;

    OAICertificateState m_state;
    bool m_state_isSet;
    bool m_state_isValid;

    QDateTime m_state_transition_time;
    bool m_state_transition_time_isSet;
    bool m_state_transition_time_isValid;

    QString m_thumbprint;
    bool m_thumbprint_isSet;
    bool m_thumbprint_isValid;

    QString m_thumbprint_algorithm;
    bool m_thumbprint_algorithm_isSet;
    bool m_thumbprint_algorithm_isValid;

    QString m_url;
    bool m_url_isSet;
    bool m_url_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICertificate)

#endif // OAICertificate_H
