/**
 * BatchService
 * A client for issuing REST requests to the Azure Batch service.
 *
 * The version of the OpenAPI document: 2017-01-01.4.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAITaskExecutionInformation.h
 *
 * 
 */

#ifndef OAITaskExecutionInformation_H
#define OAITaskExecutionInformation_H

#include <QJsonObject>

#include "OAITaskSchedulingError.h"
#include <QDateTime>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAITaskSchedulingError;

class OAITaskExecutionInformation : public OAIObject {
public:
    OAITaskExecutionInformation();
    OAITaskExecutionInformation(QString json);
    ~OAITaskExecutionInformation() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QDateTime getEndTime() const;
    void setEndTime(const QDateTime &end_time);
    bool is_end_time_Set() const;
    bool is_end_time_Valid() const;

    qint32 getExitCode() const;
    void setExitCode(const qint32 &exit_code);
    bool is_exit_code_Set() const;
    bool is_exit_code_Valid() const;

    QDateTime getLastRequeueTime() const;
    void setLastRequeueTime(const QDateTime &last_requeue_time);
    bool is_last_requeue_time_Set() const;
    bool is_last_requeue_time_Valid() const;

    QDateTime getLastRetryTime() const;
    void setLastRetryTime(const QDateTime &last_retry_time);
    bool is_last_retry_time_Set() const;
    bool is_last_retry_time_Valid() const;

    qint32 getRequeueCount() const;
    void setRequeueCount(const qint32 &requeue_count);
    bool is_requeue_count_Set() const;
    bool is_requeue_count_Valid() const;

    qint32 getRetryCount() const;
    void setRetryCount(const qint32 &retry_count);
    bool is_retry_count_Set() const;
    bool is_retry_count_Valid() const;

    OAITaskSchedulingError getSchedulingError() const;
    void setSchedulingError(const OAITaskSchedulingError &scheduling_error);
    bool is_scheduling_error_Set() const;
    bool is_scheduling_error_Valid() const;

    QDateTime getStartTime() const;
    void setStartTime(const QDateTime &start_time);
    bool is_start_time_Set() const;
    bool is_start_time_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QDateTime m_end_time;
    bool m_end_time_isSet;
    bool m_end_time_isValid;

    qint32 m_exit_code;
    bool m_exit_code_isSet;
    bool m_exit_code_isValid;

    QDateTime m_last_requeue_time;
    bool m_last_requeue_time_isSet;
    bool m_last_requeue_time_isValid;

    QDateTime m_last_retry_time;
    bool m_last_retry_time_isSet;
    bool m_last_retry_time_isValid;

    qint32 m_requeue_count;
    bool m_requeue_count_isSet;
    bool m_requeue_count_isValid;

    qint32 m_retry_count;
    bool m_retry_count_isSet;
    bool m_retry_count_isValid;

    OAITaskSchedulingError m_scheduling_error;
    bool m_scheduling_error_isSet;
    bool m_scheduling_error_isValid;

    QDateTime m_start_time;
    bool m_start_time_isSet;
    bool m_start_time_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAITaskExecutionInformation)

#endif // OAITaskExecutionInformation_H
