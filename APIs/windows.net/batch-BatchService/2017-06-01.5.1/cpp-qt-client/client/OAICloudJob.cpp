/**
 * BatchService
 * A client for issuing REST requests to the Azure Batch service.
 *
 * The version of the OpenAPI document: 2017-06-01.5.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICloudJob.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICloudJob::OAICloudJob(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICloudJob::OAICloudJob() {
    this->initializeModel();
}

OAICloudJob::~OAICloudJob() {}

void OAICloudJob::initializeModel() {

    m_common_environment_settings_isSet = false;
    m_common_environment_settings_isValid = false;

    m_constraints_isSet = false;
    m_constraints_isValid = false;

    m_creation_time_isSet = false;
    m_creation_time_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_e_tag_isSet = false;
    m_e_tag_isValid = false;

    m_execution_info_isSet = false;
    m_execution_info_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_job_manager_task_isSet = false;
    m_job_manager_task_isValid = false;

    m_job_preparation_task_isSet = false;
    m_job_preparation_task_isValid = false;

    m_job_release_task_isSet = false;
    m_job_release_task_isValid = false;

    m_last_modified_isSet = false;
    m_last_modified_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_on_all_tasks_complete_isSet = false;
    m_on_all_tasks_complete_isValid = false;

    m_on_task_failure_isSet = false;
    m_on_task_failure_isValid = false;

    m_pool_info_isSet = false;
    m_pool_info_isValid = false;

    m_previous_state_isSet = false;
    m_previous_state_isValid = false;

    m_previous_state_transition_time_isSet = false;
    m_previous_state_transition_time_isValid = false;

    m_priority_isSet = false;
    m_priority_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_state_transition_time_isSet = false;
    m_state_transition_time_isValid = false;

    m_stats_isSet = false;
    m_stats_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_uses_task_dependencies_isSet = false;
    m_uses_task_dependencies_isValid = false;
}

void OAICloudJob::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICloudJob::fromJsonObject(QJsonObject json) {

    m_common_environment_settings_isValid = ::OpenAPI::fromJsonValue(m_common_environment_settings, json[QString("commonEnvironmentSettings")]);
    m_common_environment_settings_isSet = !json[QString("commonEnvironmentSettings")].isNull() && m_common_environment_settings_isValid;

    m_constraints_isValid = ::OpenAPI::fromJsonValue(m_constraints, json[QString("constraints")]);
    m_constraints_isSet = !json[QString("constraints")].isNull() && m_constraints_isValid;

    m_creation_time_isValid = ::OpenAPI::fromJsonValue(m_creation_time, json[QString("creationTime")]);
    m_creation_time_isSet = !json[QString("creationTime")].isNull() && m_creation_time_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_e_tag_isValid = ::OpenAPI::fromJsonValue(m_e_tag, json[QString("eTag")]);
    m_e_tag_isSet = !json[QString("eTag")].isNull() && m_e_tag_isValid;

    m_execution_info_isValid = ::OpenAPI::fromJsonValue(m_execution_info, json[QString("executionInfo")]);
    m_execution_info_isSet = !json[QString("executionInfo")].isNull() && m_execution_info_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_job_manager_task_isValid = ::OpenAPI::fromJsonValue(m_job_manager_task, json[QString("jobManagerTask")]);
    m_job_manager_task_isSet = !json[QString("jobManagerTask")].isNull() && m_job_manager_task_isValid;

    m_job_preparation_task_isValid = ::OpenAPI::fromJsonValue(m_job_preparation_task, json[QString("jobPreparationTask")]);
    m_job_preparation_task_isSet = !json[QString("jobPreparationTask")].isNull() && m_job_preparation_task_isValid;

    m_job_release_task_isValid = ::OpenAPI::fromJsonValue(m_job_release_task, json[QString("jobReleaseTask")]);
    m_job_release_task_isSet = !json[QString("jobReleaseTask")].isNull() && m_job_release_task_isValid;

    m_last_modified_isValid = ::OpenAPI::fromJsonValue(m_last_modified, json[QString("lastModified")]);
    m_last_modified_isSet = !json[QString("lastModified")].isNull() && m_last_modified_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_on_all_tasks_complete_isValid = ::OpenAPI::fromJsonValue(m_on_all_tasks_complete, json[QString("onAllTasksComplete")]);
    m_on_all_tasks_complete_isSet = !json[QString("onAllTasksComplete")].isNull() && m_on_all_tasks_complete_isValid;

    m_on_task_failure_isValid = ::OpenAPI::fromJsonValue(m_on_task_failure, json[QString("onTaskFailure")]);
    m_on_task_failure_isSet = !json[QString("onTaskFailure")].isNull() && m_on_task_failure_isValid;

    m_pool_info_isValid = ::OpenAPI::fromJsonValue(m_pool_info, json[QString("poolInfo")]);
    m_pool_info_isSet = !json[QString("poolInfo")].isNull() && m_pool_info_isValid;

    m_previous_state_isValid = ::OpenAPI::fromJsonValue(m_previous_state, json[QString("previousState")]);
    m_previous_state_isSet = !json[QString("previousState")].isNull() && m_previous_state_isValid;

    m_previous_state_transition_time_isValid = ::OpenAPI::fromJsonValue(m_previous_state_transition_time, json[QString("previousStateTransitionTime")]);
    m_previous_state_transition_time_isSet = !json[QString("previousStateTransitionTime")].isNull() && m_previous_state_transition_time_isValid;

    m_priority_isValid = ::OpenAPI::fromJsonValue(m_priority, json[QString("priority")]);
    m_priority_isSet = !json[QString("priority")].isNull() && m_priority_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_state_transition_time_isValid = ::OpenAPI::fromJsonValue(m_state_transition_time, json[QString("stateTransitionTime")]);
    m_state_transition_time_isSet = !json[QString("stateTransitionTime")].isNull() && m_state_transition_time_isValid;

    m_stats_isValid = ::OpenAPI::fromJsonValue(m_stats, json[QString("stats")]);
    m_stats_isSet = !json[QString("stats")].isNull() && m_stats_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_uses_task_dependencies_isValid = ::OpenAPI::fromJsonValue(m_uses_task_dependencies, json[QString("usesTaskDependencies")]);
    m_uses_task_dependencies_isSet = !json[QString("usesTaskDependencies")].isNull() && m_uses_task_dependencies_isValid;
}

QString OAICloudJob::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICloudJob::asJsonObject() const {
    QJsonObject obj;
    if (m_common_environment_settings.size() > 0) {
        obj.insert(QString("commonEnvironmentSettings"), ::OpenAPI::toJsonValue(m_common_environment_settings));
    }
    if (m_constraints.isSet()) {
        obj.insert(QString("constraints"), ::OpenAPI::toJsonValue(m_constraints));
    }
    if (m_creation_time_isSet) {
        obj.insert(QString("creationTime"), ::OpenAPI::toJsonValue(m_creation_time));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_e_tag_isSet) {
        obj.insert(QString("eTag"), ::OpenAPI::toJsonValue(m_e_tag));
    }
    if (m_execution_info.isSet()) {
        obj.insert(QString("executionInfo"), ::OpenAPI::toJsonValue(m_execution_info));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_job_manager_task.isSet()) {
        obj.insert(QString("jobManagerTask"), ::OpenAPI::toJsonValue(m_job_manager_task));
    }
    if (m_job_preparation_task.isSet()) {
        obj.insert(QString("jobPreparationTask"), ::OpenAPI::toJsonValue(m_job_preparation_task));
    }
    if (m_job_release_task.isSet()) {
        obj.insert(QString("jobReleaseTask"), ::OpenAPI::toJsonValue(m_job_release_task));
    }
    if (m_last_modified_isSet) {
        obj.insert(QString("lastModified"), ::OpenAPI::toJsonValue(m_last_modified));
    }
    if (m_metadata.size() > 0) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_on_all_tasks_complete.isSet()) {
        obj.insert(QString("onAllTasksComplete"), ::OpenAPI::toJsonValue(m_on_all_tasks_complete));
    }
    if (m_on_task_failure.isSet()) {
        obj.insert(QString("onTaskFailure"), ::OpenAPI::toJsonValue(m_on_task_failure));
    }
    if (m_pool_info.isSet()) {
        obj.insert(QString("poolInfo"), ::OpenAPI::toJsonValue(m_pool_info));
    }
    if (m_previous_state.isSet()) {
        obj.insert(QString("previousState"), ::OpenAPI::toJsonValue(m_previous_state));
    }
    if (m_previous_state_transition_time_isSet) {
        obj.insert(QString("previousStateTransitionTime"), ::OpenAPI::toJsonValue(m_previous_state_transition_time));
    }
    if (m_priority_isSet) {
        obj.insert(QString("priority"), ::OpenAPI::toJsonValue(m_priority));
    }
    if (m_state.isSet()) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_state_transition_time_isSet) {
        obj.insert(QString("stateTransitionTime"), ::OpenAPI::toJsonValue(m_state_transition_time));
    }
    if (m_stats.isSet()) {
        obj.insert(QString("stats"), ::OpenAPI::toJsonValue(m_stats));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_uses_task_dependencies_isSet) {
        obj.insert(QString("usesTaskDependencies"), ::OpenAPI::toJsonValue(m_uses_task_dependencies));
    }
    return obj;
}

QList<OAIEnvironmentSetting> OAICloudJob::getCommonEnvironmentSettings() const {
    return m_common_environment_settings;
}
void OAICloudJob::setCommonEnvironmentSettings(const QList<OAIEnvironmentSetting> &common_environment_settings) {
    m_common_environment_settings = common_environment_settings;
    m_common_environment_settings_isSet = true;
}

bool OAICloudJob::is_common_environment_settings_Set() const{
    return m_common_environment_settings_isSet;
}

bool OAICloudJob::is_common_environment_settings_Valid() const{
    return m_common_environment_settings_isValid;
}

OAIJobConstraints OAICloudJob::getConstraints() const {
    return m_constraints;
}
void OAICloudJob::setConstraints(const OAIJobConstraints &constraints) {
    m_constraints = constraints;
    m_constraints_isSet = true;
}

bool OAICloudJob::is_constraints_Set() const{
    return m_constraints_isSet;
}

bool OAICloudJob::is_constraints_Valid() const{
    return m_constraints_isValid;
}

QDateTime OAICloudJob::getCreationTime() const {
    return m_creation_time;
}
void OAICloudJob::setCreationTime(const QDateTime &creation_time) {
    m_creation_time = creation_time;
    m_creation_time_isSet = true;
}

bool OAICloudJob::is_creation_time_Set() const{
    return m_creation_time_isSet;
}

bool OAICloudJob::is_creation_time_Valid() const{
    return m_creation_time_isValid;
}

QString OAICloudJob::getDisplayName() const {
    return m_display_name;
}
void OAICloudJob::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAICloudJob::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAICloudJob::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAICloudJob::getETag() const {
    return m_e_tag;
}
void OAICloudJob::setETag(const QString &e_tag) {
    m_e_tag = e_tag;
    m_e_tag_isSet = true;
}

bool OAICloudJob::is_e_tag_Set() const{
    return m_e_tag_isSet;
}

bool OAICloudJob::is_e_tag_Valid() const{
    return m_e_tag_isValid;
}

OAIJobExecutionInformation OAICloudJob::getExecutionInfo() const {
    return m_execution_info;
}
void OAICloudJob::setExecutionInfo(const OAIJobExecutionInformation &execution_info) {
    m_execution_info = execution_info;
    m_execution_info_isSet = true;
}

bool OAICloudJob::is_execution_info_Set() const{
    return m_execution_info_isSet;
}

bool OAICloudJob::is_execution_info_Valid() const{
    return m_execution_info_isValid;
}

QString OAICloudJob::getId() const {
    return m_id;
}
void OAICloudJob::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAICloudJob::is_id_Set() const{
    return m_id_isSet;
}

bool OAICloudJob::is_id_Valid() const{
    return m_id_isValid;
}

OAIJobManagerTask OAICloudJob::getJobManagerTask() const {
    return m_job_manager_task;
}
void OAICloudJob::setJobManagerTask(const OAIJobManagerTask &job_manager_task) {
    m_job_manager_task = job_manager_task;
    m_job_manager_task_isSet = true;
}

bool OAICloudJob::is_job_manager_task_Set() const{
    return m_job_manager_task_isSet;
}

bool OAICloudJob::is_job_manager_task_Valid() const{
    return m_job_manager_task_isValid;
}

OAIJobPreparationTask OAICloudJob::getJobPreparationTask() const {
    return m_job_preparation_task;
}
void OAICloudJob::setJobPreparationTask(const OAIJobPreparationTask &job_preparation_task) {
    m_job_preparation_task = job_preparation_task;
    m_job_preparation_task_isSet = true;
}

bool OAICloudJob::is_job_preparation_task_Set() const{
    return m_job_preparation_task_isSet;
}

bool OAICloudJob::is_job_preparation_task_Valid() const{
    return m_job_preparation_task_isValid;
}

OAIJobReleaseTask OAICloudJob::getJobReleaseTask() const {
    return m_job_release_task;
}
void OAICloudJob::setJobReleaseTask(const OAIJobReleaseTask &job_release_task) {
    m_job_release_task = job_release_task;
    m_job_release_task_isSet = true;
}

bool OAICloudJob::is_job_release_task_Set() const{
    return m_job_release_task_isSet;
}

bool OAICloudJob::is_job_release_task_Valid() const{
    return m_job_release_task_isValid;
}

QDateTime OAICloudJob::getLastModified() const {
    return m_last_modified;
}
void OAICloudJob::setLastModified(const QDateTime &last_modified) {
    m_last_modified = last_modified;
    m_last_modified_isSet = true;
}

bool OAICloudJob::is_last_modified_Set() const{
    return m_last_modified_isSet;
}

bool OAICloudJob::is_last_modified_Valid() const{
    return m_last_modified_isValid;
}

QList<OAIMetadataItem> OAICloudJob::getMetadata() const {
    return m_metadata;
}
void OAICloudJob::setMetadata(const QList<OAIMetadataItem> &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAICloudJob::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAICloudJob::is_metadata_Valid() const{
    return m_metadata_isValid;
}

OAIOnAllTasksComplete OAICloudJob::getOnAllTasksComplete() const {
    return m_on_all_tasks_complete;
}
void OAICloudJob::setOnAllTasksComplete(const OAIOnAllTasksComplete &on_all_tasks_complete) {
    m_on_all_tasks_complete = on_all_tasks_complete;
    m_on_all_tasks_complete_isSet = true;
}

bool OAICloudJob::is_on_all_tasks_complete_Set() const{
    return m_on_all_tasks_complete_isSet;
}

bool OAICloudJob::is_on_all_tasks_complete_Valid() const{
    return m_on_all_tasks_complete_isValid;
}

OAIOnTaskFailure OAICloudJob::getOnTaskFailure() const {
    return m_on_task_failure;
}
void OAICloudJob::setOnTaskFailure(const OAIOnTaskFailure &on_task_failure) {
    m_on_task_failure = on_task_failure;
    m_on_task_failure_isSet = true;
}

bool OAICloudJob::is_on_task_failure_Set() const{
    return m_on_task_failure_isSet;
}

bool OAICloudJob::is_on_task_failure_Valid() const{
    return m_on_task_failure_isValid;
}

OAIPoolInformation OAICloudJob::getPoolInfo() const {
    return m_pool_info;
}
void OAICloudJob::setPoolInfo(const OAIPoolInformation &pool_info) {
    m_pool_info = pool_info;
    m_pool_info_isSet = true;
}

bool OAICloudJob::is_pool_info_Set() const{
    return m_pool_info_isSet;
}

bool OAICloudJob::is_pool_info_Valid() const{
    return m_pool_info_isValid;
}

OAIJobState OAICloudJob::getPreviousState() const {
    return m_previous_state;
}
void OAICloudJob::setPreviousState(const OAIJobState &previous_state) {
    m_previous_state = previous_state;
    m_previous_state_isSet = true;
}

bool OAICloudJob::is_previous_state_Set() const{
    return m_previous_state_isSet;
}

bool OAICloudJob::is_previous_state_Valid() const{
    return m_previous_state_isValid;
}

QDateTime OAICloudJob::getPreviousStateTransitionTime() const {
    return m_previous_state_transition_time;
}
void OAICloudJob::setPreviousStateTransitionTime(const QDateTime &previous_state_transition_time) {
    m_previous_state_transition_time = previous_state_transition_time;
    m_previous_state_transition_time_isSet = true;
}

bool OAICloudJob::is_previous_state_transition_time_Set() const{
    return m_previous_state_transition_time_isSet;
}

bool OAICloudJob::is_previous_state_transition_time_Valid() const{
    return m_previous_state_transition_time_isValid;
}

qint32 OAICloudJob::getPriority() const {
    return m_priority;
}
void OAICloudJob::setPriority(const qint32 &priority) {
    m_priority = priority;
    m_priority_isSet = true;
}

bool OAICloudJob::is_priority_Set() const{
    return m_priority_isSet;
}

bool OAICloudJob::is_priority_Valid() const{
    return m_priority_isValid;
}

OAIJobState OAICloudJob::getState() const {
    return m_state;
}
void OAICloudJob::setState(const OAIJobState &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAICloudJob::is_state_Set() const{
    return m_state_isSet;
}

bool OAICloudJob::is_state_Valid() const{
    return m_state_isValid;
}

QDateTime OAICloudJob::getStateTransitionTime() const {
    return m_state_transition_time;
}
void OAICloudJob::setStateTransitionTime(const QDateTime &state_transition_time) {
    m_state_transition_time = state_transition_time;
    m_state_transition_time_isSet = true;
}

bool OAICloudJob::is_state_transition_time_Set() const{
    return m_state_transition_time_isSet;
}

bool OAICloudJob::is_state_transition_time_Valid() const{
    return m_state_transition_time_isValid;
}

OAIJobStatistics OAICloudJob::getStats() const {
    return m_stats;
}
void OAICloudJob::setStats(const OAIJobStatistics &stats) {
    m_stats = stats;
    m_stats_isSet = true;
}

bool OAICloudJob::is_stats_Set() const{
    return m_stats_isSet;
}

bool OAICloudJob::is_stats_Valid() const{
    return m_stats_isValid;
}

QString OAICloudJob::getUrl() const {
    return m_url;
}
void OAICloudJob::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAICloudJob::is_url_Set() const{
    return m_url_isSet;
}

bool OAICloudJob::is_url_Valid() const{
    return m_url_isValid;
}

bool OAICloudJob::isUsesTaskDependencies() const {
    return m_uses_task_dependencies;
}
void OAICloudJob::setUsesTaskDependencies(const bool &uses_task_dependencies) {
    m_uses_task_dependencies = uses_task_dependencies;
    m_uses_task_dependencies_isSet = true;
}

bool OAICloudJob::is_uses_task_dependencies_Set() const{
    return m_uses_task_dependencies_isSet;
}

bool OAICloudJob::is_uses_task_dependencies_Valid() const{
    return m_uses_task_dependencies_isValid;
}

bool OAICloudJob::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_common_environment_settings.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_constraints.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_e_tag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_execution_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_manager_task.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_preparation_task.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_release_task.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_on_all_tasks_complete.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_on_task_failure.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_pool_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_previous_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_previous_state_transition_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_priority_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_transition_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stats.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uses_task_dependencies_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICloudJob::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
