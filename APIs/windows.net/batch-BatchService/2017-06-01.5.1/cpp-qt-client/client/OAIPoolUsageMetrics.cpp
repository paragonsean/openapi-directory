/**
 * BatchService
 * A client for issuing REST requests to the Azure Batch service.
 *
 * The version of the OpenAPI document: 2017-06-01.5.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPoolUsageMetrics.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPoolUsageMetrics::OAIPoolUsageMetrics(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPoolUsageMetrics::OAIPoolUsageMetrics() {
    this->initializeModel();
}

OAIPoolUsageMetrics::~OAIPoolUsageMetrics() {}

void OAIPoolUsageMetrics::initializeModel() {

    m_data_egress_gi_b_isSet = false;
    m_data_egress_gi_b_isValid = false;

    m_data_ingress_gi_b_isSet = false;
    m_data_ingress_gi_b_isValid = false;

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_pool_id_isSet = false;
    m_pool_id_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_total_core_hours_isSet = false;
    m_total_core_hours_isValid = false;

    m_vm_size_isSet = false;
    m_vm_size_isValid = false;
}

void OAIPoolUsageMetrics::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPoolUsageMetrics::fromJsonObject(QJsonObject json) {

    m_data_egress_gi_b_isValid = ::OpenAPI::fromJsonValue(m_data_egress_gi_b, json[QString("dataEgressGiB")]);
    m_data_egress_gi_b_isSet = !json[QString("dataEgressGiB")].isNull() && m_data_egress_gi_b_isValid;

    m_data_ingress_gi_b_isValid = ::OpenAPI::fromJsonValue(m_data_ingress_gi_b, json[QString("dataIngressGiB")]);
    m_data_ingress_gi_b_isSet = !json[QString("dataIngressGiB")].isNull() && m_data_ingress_gi_b_isValid;

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("endTime")]);
    m_end_time_isSet = !json[QString("endTime")].isNull() && m_end_time_isValid;

    m_pool_id_isValid = ::OpenAPI::fromJsonValue(m_pool_id, json[QString("poolId")]);
    m_pool_id_isSet = !json[QString("poolId")].isNull() && m_pool_id_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("startTime")]);
    m_start_time_isSet = !json[QString("startTime")].isNull() && m_start_time_isValid;

    m_total_core_hours_isValid = ::OpenAPI::fromJsonValue(m_total_core_hours, json[QString("totalCoreHours")]);
    m_total_core_hours_isSet = !json[QString("totalCoreHours")].isNull() && m_total_core_hours_isValid;

    m_vm_size_isValid = ::OpenAPI::fromJsonValue(m_vm_size, json[QString("vmSize")]);
    m_vm_size_isSet = !json[QString("vmSize")].isNull() && m_vm_size_isValid;
}

QString OAIPoolUsageMetrics::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPoolUsageMetrics::asJsonObject() const {
    QJsonObject obj;
    if (m_data_egress_gi_b_isSet) {
        obj.insert(QString("dataEgressGiB"), ::OpenAPI::toJsonValue(m_data_egress_gi_b));
    }
    if (m_data_ingress_gi_b_isSet) {
        obj.insert(QString("dataIngressGiB"), ::OpenAPI::toJsonValue(m_data_ingress_gi_b));
    }
    if (m_end_time_isSet) {
        obj.insert(QString("endTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_pool_id_isSet) {
        obj.insert(QString("poolId"), ::OpenAPI::toJsonValue(m_pool_id));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("startTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_total_core_hours_isSet) {
        obj.insert(QString("totalCoreHours"), ::OpenAPI::toJsonValue(m_total_core_hours));
    }
    if (m_vm_size_isSet) {
        obj.insert(QString("vmSize"), ::OpenAPI::toJsonValue(m_vm_size));
    }
    return obj;
}

double OAIPoolUsageMetrics::getDataEgressGiB() const {
    return m_data_egress_gi_b;
}
void OAIPoolUsageMetrics::setDataEgressGiB(const double &data_egress_gi_b) {
    m_data_egress_gi_b = data_egress_gi_b;
    m_data_egress_gi_b_isSet = true;
}

bool OAIPoolUsageMetrics::is_data_egress_gi_b_Set() const{
    return m_data_egress_gi_b_isSet;
}

bool OAIPoolUsageMetrics::is_data_egress_gi_b_Valid() const{
    return m_data_egress_gi_b_isValid;
}

double OAIPoolUsageMetrics::getDataIngressGiB() const {
    return m_data_ingress_gi_b;
}
void OAIPoolUsageMetrics::setDataIngressGiB(const double &data_ingress_gi_b) {
    m_data_ingress_gi_b = data_ingress_gi_b;
    m_data_ingress_gi_b_isSet = true;
}

bool OAIPoolUsageMetrics::is_data_ingress_gi_b_Set() const{
    return m_data_ingress_gi_b_isSet;
}

bool OAIPoolUsageMetrics::is_data_ingress_gi_b_Valid() const{
    return m_data_ingress_gi_b_isValid;
}

QDateTime OAIPoolUsageMetrics::getEndTime() const {
    return m_end_time;
}
void OAIPoolUsageMetrics::setEndTime(const QDateTime &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAIPoolUsageMetrics::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAIPoolUsageMetrics::is_end_time_Valid() const{
    return m_end_time_isValid;
}

QString OAIPoolUsageMetrics::getPoolId() const {
    return m_pool_id;
}
void OAIPoolUsageMetrics::setPoolId(const QString &pool_id) {
    m_pool_id = pool_id;
    m_pool_id_isSet = true;
}

bool OAIPoolUsageMetrics::is_pool_id_Set() const{
    return m_pool_id_isSet;
}

bool OAIPoolUsageMetrics::is_pool_id_Valid() const{
    return m_pool_id_isValid;
}

QDateTime OAIPoolUsageMetrics::getStartTime() const {
    return m_start_time;
}
void OAIPoolUsageMetrics::setStartTime(const QDateTime &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIPoolUsageMetrics::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIPoolUsageMetrics::is_start_time_Valid() const{
    return m_start_time_isValid;
}

double OAIPoolUsageMetrics::getTotalCoreHours() const {
    return m_total_core_hours;
}
void OAIPoolUsageMetrics::setTotalCoreHours(const double &total_core_hours) {
    m_total_core_hours = total_core_hours;
    m_total_core_hours_isSet = true;
}

bool OAIPoolUsageMetrics::is_total_core_hours_Set() const{
    return m_total_core_hours_isSet;
}

bool OAIPoolUsageMetrics::is_total_core_hours_Valid() const{
    return m_total_core_hours_isValid;
}

QString OAIPoolUsageMetrics::getVmSize() const {
    return m_vm_size;
}
void OAIPoolUsageMetrics::setVmSize(const QString &vm_size) {
    m_vm_size = vm_size;
    m_vm_size_isSet = true;
}

bool OAIPoolUsageMetrics::is_vm_size_Set() const{
    return m_vm_size_isSet;
}

bool OAIPoolUsageMetrics::is_vm_size_Valid() const{
    return m_vm_size_isValid;
}

bool OAIPoolUsageMetrics::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data_egress_gi_b_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_ingress_gi_b_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pool_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_core_hours_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vm_size_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPoolUsageMetrics::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_data_egress_gi_b_isValid && m_data_ingress_gi_b_isValid && m_end_time_isValid && m_pool_id_isValid && m_start_time_isValid && m_total_core_hours_isValid && m_vm_size_isValid && true;
}

} // namespace OpenAPI
