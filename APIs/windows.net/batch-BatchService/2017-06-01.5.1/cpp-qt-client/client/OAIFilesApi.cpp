/**
 * BatchService
 * A client for issuing REST requests to the Azure Batch service.
 *
 * The version of the OpenAPI document: 2017-06-01.5.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFilesApi.h"
#include "OAIServerConfiguration.h"
#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAIFilesApi::OAIFilesApi(const int timeOut)
    : _timeOut(timeOut),
      _manager(nullptr),
      _isResponseCompressionEnabled(false),
      _isRequestCompressionEnabled(false) {
    initializeServerConfigs();
}

OAIFilesApi::~OAIFilesApi() {
}

void OAIFilesApi::initializeServerConfigs() {
    //Default server
    QList<OAIServerConfiguration> defaultConf = QList<OAIServerConfiguration>();
    //varying endpoint server
    defaultConf.append(OAIServerConfiguration(
    QUrl("https://batch.core.windows.net/"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("fileDeleteFromComputeNode", defaultConf);
    _serverIndices.insert("fileDeleteFromComputeNode", 0);
    _serverConfigs.insert("fileDeleteFromTask", defaultConf);
    _serverIndices.insert("fileDeleteFromTask", 0);
    _serverConfigs.insert("fileGetFromComputeNode", defaultConf);
    _serverIndices.insert("fileGetFromComputeNode", 0);
    _serverConfigs.insert("fileGetFromTask", defaultConf);
    _serverIndices.insert("fileGetFromTask", 0);
    _serverConfigs.insert("fileGetPropertiesFromComputeNode", defaultConf);
    _serverIndices.insert("fileGetPropertiesFromComputeNode", 0);
    _serverConfigs.insert("fileGetPropertiesFromTask", defaultConf);
    _serverIndices.insert("fileGetPropertiesFromTask", 0);
    _serverConfigs.insert("fileListFromComputeNode", defaultConf);
    _serverIndices.insert("fileListFromComputeNode", 0);
    _serverConfigs.insert("fileListFromTask", defaultConf);
    _serverIndices.insert("fileListFromTask", 0);
}

/**
* returns 0 on success and -1, -2 or -3 on failure.
* -1 when the variable does not exist and -2 if the value is not defined in the enum and -3 if the operation or server index is not found
*/
int OAIFilesApi::setDefaultServerValue(int serverIndex, const QString &operation, const QString &variable, const QString &value) {
    auto it = _serverConfigs.find(operation);
    if (it != _serverConfigs.end() && serverIndex < it.value().size()) {
      return _serverConfigs[operation][serverIndex].setDefaultValue(variable,value);
    }
    return -3;
}
void OAIFilesApi::setServerIndex(const QString &operation, int serverIndex) {
    if (_serverIndices.contains(operation) && serverIndex < _serverConfigs.find(operation).value().size()) {
        _serverIndices[operation] = serverIndex;
    }
}

void OAIFilesApi::setApiKey(const QString &apiKeyName, const QString &apiKey) {
    _apiKeys.insert(apiKeyName, apiKey);
}

void OAIFilesApi::setBearerToken(const QString &token) {
    _bearerToken = token;
}

void OAIFilesApi::setUsername(const QString &username) {
    _username = username;
}

void OAIFilesApi::setPassword(const QString &password) {
    _password = password;
}


void OAIFilesApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAIFilesApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAIFilesApi::setNetworkAccessManager(QNetworkAccessManager* manager) {
    _manager = manager;
}

/**
    * Appends a new ServerConfiguration to the config map for a specific operation.
    * @param operation The id to the target operation.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    * returns the index of the new server config on success and -1 if the operation is not found
    */
int OAIFilesApi::addServerConfiguration(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    if (_serverConfigs.contains(operation)) {
        _serverConfigs[operation].append(OAIServerConfiguration(
                    url,
                    description,
                    variables));
        return _serverConfigs[operation].size()-1;
    } else {
        return -1;
    }
}

/**
    * Appends a new ServerConfiguration to the config map for a all operations and sets the index to that server.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIFilesApi::setNewServerForAllOperations(const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    for (auto keyIt = _serverIndices.keyBegin(); keyIt != _serverIndices.keyEnd(); keyIt++) {
        setServerIndex(*keyIt, addServerConfiguration(*keyIt, url, description, variables));
    }
}

/**
    * Appends a new ServerConfiguration to the config map for an operations and sets the index to that server.
    * @param URL A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIFilesApi::setNewServer(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    setServerIndex(operation, addServerConfiguration(operation, url, description, variables));
}

void OAIFilesApi::addHeaders(const QString &key, const QString &value) {
    _defaultHeaders.insert(key, value);
}

void OAIFilesApi::enableRequestCompression() {
    _isRequestCompressionEnabled = true;
}

void OAIFilesApi::enableResponseCompression() {
    _isResponseCompressionEnabled = true;
}

void OAIFilesApi::abortRequests() {
    Q_EMIT abortRequestsSignal();
}

QString OAIFilesApi::getParamStylePrefix(const QString &style) {
    if (style == "matrix") {
        return ";";
    } else if (style == "label") {
        return ".";
    } else if (style == "form") {
        return "&";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "&";
    } else if (style == "pipeDelimited") {
        return "&";
    } else {
        return "none";
    }
}

QString OAIFilesApi::getParamStyleSuffix(const QString &style) {
    if (style == "matrix") {
        return "=";
    } else if (style == "label") {
        return "";
    } else if (style == "form") {
        return "=";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "=";
    } else if (style == "pipeDelimited") {
        return "=";
    } else {
        return "none";
    }
}

QString OAIFilesApi::getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode) {

    if (style == "matrix") {
        return (isExplode) ? ";" + name + "=" : ",";

    } else if (style == "label") {
        return (isExplode) ? "." : ",";

    } else if (style == "form") {
        return (isExplode) ? "&" + name + "=" : ",";

    } else if (style == "simple") {
        return ",";
    } else if (style == "spaceDelimited") {
        return (isExplode) ? "&" + name + "=" : " ";

    } else if (style == "pipeDelimited") {
        return (isExplode) ? "&" + name + "=" : "|";

    } else if (style == "deepObject") {
        return (isExplode) ? "&" : "none";

    } else {
        return "none";
    }
}

void OAIFilesApi::fileDeleteFromComputeNode(const QString &pool_id, const QString &node_id, const QString &file_path, const QString &api_version, const ::OpenAPI::OptionalParam<bool> &recursive, const ::OpenAPI::OptionalParam<qint32> &timeout, const ::OpenAPI::OptionalParam<QString> &client_request_id, const ::OpenAPI::OptionalParam<bool> &return_client_request_id, const ::OpenAPI::OptionalParam<QString> &ocp_date) {
    QString fullPath = QString(_serverConfigs["fileDeleteFromComputeNode"][_serverIndices.value("fileDeleteFromComputeNode")].URL()+"/pools/{poolId}/nodes/{nodeId}/files/{filePath}");
    
    
    {
        QString pool_idPathParam("{");
        pool_idPathParam.append("poolId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "poolId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"poolId"+pathSuffix : pathPrefix;
        fullPath.replace(pool_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(pool_id)));
    }
    
    {
        QString node_idPathParam("{");
        node_idPathParam.append("nodeId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "nodeId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"nodeId"+pathSuffix : pathPrefix;
        fullPath.replace(node_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(node_id)));
    }
    
    {
        QString file_pathPathParam("{");
        file_pathPathParam.append("filePath").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "filePath", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"filePath"+pathSuffix : pathPrefix;
        fullPath.replace(file_pathPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(file_path)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (recursive.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "recursive", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("recursive")).append(querySuffix).append(QUrl::toPercentEncoding(recursive.stringValue()));
    }
    if (timeout.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "timeout", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("timeout")).append(querySuffix).append(QUrl::toPercentEncoding(timeout.stringValue()));
    }
    
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "api-version", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("api-version")).append(querySuffix).append(QUrl::toPercentEncoding(api_version));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    if (client_request_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(client_request_id.value()).isEmpty()) {
            input.headers.insert("client-request-id", ::OpenAPI::toStringValue(client_request_id.value()));
        }
        }
    if (return_client_request_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(return_client_request_id.value()).isEmpty()) {
            input.headers.insert("return-client-request-id", ::OpenAPI::toStringValue(return_client_request_id.value()));
        }
        }
    if (ocp_date.hasValue())
    {
        if (!::OpenAPI::toStringValue(ocp_date.value()).isEmpty()) {
            input.headers.insert("ocp-date", ::OpenAPI::toStringValue(ocp_date.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIFilesApi::fileDeleteFromComputeNodeCallback);
    connect(this, &OAIFilesApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIFilesApi::fileDeleteFromComputeNodeCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT fileDeleteFromComputeNodeSignal();
        Q_EMIT fileDeleteFromComputeNodeSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT fileDeleteFromComputeNodeSignalE(error_type, error_str);
        Q_EMIT fileDeleteFromComputeNodeSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT fileDeleteFromComputeNodeSignalError(error_type, error_str);
        Q_EMIT fileDeleteFromComputeNodeSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIFilesApi::fileDeleteFromTask(const QString &job_id, const QString &task_id, const QString &file_path, const QString &api_version, const ::OpenAPI::OptionalParam<bool> &recursive, const ::OpenAPI::OptionalParam<qint32> &timeout, const ::OpenAPI::OptionalParam<QString> &client_request_id, const ::OpenAPI::OptionalParam<bool> &return_client_request_id, const ::OpenAPI::OptionalParam<QString> &ocp_date) {
    QString fullPath = QString(_serverConfigs["fileDeleteFromTask"][_serverIndices.value("fileDeleteFromTask")].URL()+"/jobs/{jobId}/tasks/{taskId}/files/{filePath}");
    
    
    {
        QString job_idPathParam("{");
        job_idPathParam.append("jobId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "jobId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"jobId"+pathSuffix : pathPrefix;
        fullPath.replace(job_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(job_id)));
    }
    
    {
        QString task_idPathParam("{");
        task_idPathParam.append("taskId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "taskId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"taskId"+pathSuffix : pathPrefix;
        fullPath.replace(task_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(task_id)));
    }
    
    {
        QString file_pathPathParam("{");
        file_pathPathParam.append("filePath").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "filePath", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"filePath"+pathSuffix : pathPrefix;
        fullPath.replace(file_pathPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(file_path)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (recursive.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "recursive", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("recursive")).append(querySuffix).append(QUrl::toPercentEncoding(recursive.stringValue()));
    }
    if (timeout.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "timeout", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("timeout")).append(querySuffix).append(QUrl::toPercentEncoding(timeout.stringValue()));
    }
    
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "api-version", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("api-version")).append(querySuffix).append(QUrl::toPercentEncoding(api_version));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    if (client_request_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(client_request_id.value()).isEmpty()) {
            input.headers.insert("client-request-id", ::OpenAPI::toStringValue(client_request_id.value()));
        }
        }
    if (return_client_request_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(return_client_request_id.value()).isEmpty()) {
            input.headers.insert("return-client-request-id", ::OpenAPI::toStringValue(return_client_request_id.value()));
        }
        }
    if (ocp_date.hasValue())
    {
        if (!::OpenAPI::toStringValue(ocp_date.value()).isEmpty()) {
            input.headers.insert("ocp-date", ::OpenAPI::toStringValue(ocp_date.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIFilesApi::fileDeleteFromTaskCallback);
    connect(this, &OAIFilesApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIFilesApi::fileDeleteFromTaskCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT fileDeleteFromTaskSignal();
        Q_EMIT fileDeleteFromTaskSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT fileDeleteFromTaskSignalE(error_type, error_str);
        Q_EMIT fileDeleteFromTaskSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT fileDeleteFromTaskSignalError(error_type, error_str);
        Q_EMIT fileDeleteFromTaskSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIFilesApi::fileGetFromComputeNode(const QString &pool_id, const QString &node_id, const QString &file_path, const QString &api_version, const ::OpenAPI::OptionalParam<qint32> &timeout, const ::OpenAPI::OptionalParam<QString> &client_request_id, const ::OpenAPI::OptionalParam<bool> &return_client_request_id, const ::OpenAPI::OptionalParam<QString> &ocp_date, const ::OpenAPI::OptionalParam<QString> &ocp_range, const ::OpenAPI::OptionalParam<QString> &if_modified_since, const ::OpenAPI::OptionalParam<QString> &if_unmodified_since) {
    QString fullPath = QString(_serverConfigs["fileGetFromComputeNode"][_serverIndices.value("fileGetFromComputeNode")].URL()+"/pools/{poolId}/nodes/{nodeId}/files/{filePath}");
    
    
    {
        QString pool_idPathParam("{");
        pool_idPathParam.append("poolId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "poolId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"poolId"+pathSuffix : pathPrefix;
        fullPath.replace(pool_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(pool_id)));
    }
    
    {
        QString node_idPathParam("{");
        node_idPathParam.append("nodeId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "nodeId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"nodeId"+pathSuffix : pathPrefix;
        fullPath.replace(node_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(node_id)));
    }
    
    {
        QString file_pathPathParam("{");
        file_pathPathParam.append("filePath").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "filePath", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"filePath"+pathSuffix : pathPrefix;
        fullPath.replace(file_pathPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(file_path)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (timeout.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "timeout", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("timeout")).append(querySuffix).append(QUrl::toPercentEncoding(timeout.stringValue()));
    }
    
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "api-version", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("api-version")).append(querySuffix).append(QUrl::toPercentEncoding(api_version));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (client_request_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(client_request_id.value()).isEmpty()) {
            input.headers.insert("client-request-id", ::OpenAPI::toStringValue(client_request_id.value()));
        }
        }
    if (return_client_request_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(return_client_request_id.value()).isEmpty()) {
            input.headers.insert("return-client-request-id", ::OpenAPI::toStringValue(return_client_request_id.value()));
        }
        }
    if (ocp_date.hasValue())
    {
        if (!::OpenAPI::toStringValue(ocp_date.value()).isEmpty()) {
            input.headers.insert("ocp-date", ::OpenAPI::toStringValue(ocp_date.value()));
        }
        }
    if (ocp_range.hasValue())
    {
        if (!::OpenAPI::toStringValue(ocp_range.value()).isEmpty()) {
            input.headers.insert("ocp-range", ::OpenAPI::toStringValue(ocp_range.value()));
        }
        }
    if (if_modified_since.hasValue())
    {
        if (!::OpenAPI::toStringValue(if_modified_since.value()).isEmpty()) {
            input.headers.insert("If-Modified-Since", ::OpenAPI::toStringValue(if_modified_since.value()));
        }
        }
    if (if_unmodified_since.hasValue())
    {
        if (!::OpenAPI::toStringValue(if_unmodified_since.value()).isEmpty()) {
            input.headers.insert("If-Unmodified-Since", ::OpenAPI::toStringValue(if_unmodified_since.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIFilesApi::fileGetFromComputeNodeCallback);
    connect(this, &OAIFilesApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIFilesApi::fileGetFromComputeNodeCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIHttpFileElement output = worker->getHttpFileElement();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT fileGetFromComputeNodeSignal(output);
        Q_EMIT fileGetFromComputeNodeSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT fileGetFromComputeNodeSignalE(output, error_type, error_str);
        Q_EMIT fileGetFromComputeNodeSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT fileGetFromComputeNodeSignalError(output, error_type, error_str);
        Q_EMIT fileGetFromComputeNodeSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIFilesApi::fileGetFromTask(const QString &job_id, const QString &task_id, const QString &file_path, const QString &api_version, const ::OpenAPI::OptionalParam<qint32> &timeout, const ::OpenAPI::OptionalParam<QString> &client_request_id, const ::OpenAPI::OptionalParam<bool> &return_client_request_id, const ::OpenAPI::OptionalParam<QString> &ocp_date, const ::OpenAPI::OptionalParam<QString> &ocp_range, const ::OpenAPI::OptionalParam<QString> &if_modified_since, const ::OpenAPI::OptionalParam<QString> &if_unmodified_since) {
    QString fullPath = QString(_serverConfigs["fileGetFromTask"][_serverIndices.value("fileGetFromTask")].URL()+"/jobs/{jobId}/tasks/{taskId}/files/{filePath}");
    
    
    {
        QString job_idPathParam("{");
        job_idPathParam.append("jobId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "jobId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"jobId"+pathSuffix : pathPrefix;
        fullPath.replace(job_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(job_id)));
    }
    
    {
        QString task_idPathParam("{");
        task_idPathParam.append("taskId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "taskId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"taskId"+pathSuffix : pathPrefix;
        fullPath.replace(task_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(task_id)));
    }
    
    {
        QString file_pathPathParam("{");
        file_pathPathParam.append("filePath").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "filePath", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"filePath"+pathSuffix : pathPrefix;
        fullPath.replace(file_pathPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(file_path)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (timeout.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "timeout", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("timeout")).append(querySuffix).append(QUrl::toPercentEncoding(timeout.stringValue()));
    }
    
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "api-version", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("api-version")).append(querySuffix).append(QUrl::toPercentEncoding(api_version));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (client_request_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(client_request_id.value()).isEmpty()) {
            input.headers.insert("client-request-id", ::OpenAPI::toStringValue(client_request_id.value()));
        }
        }
    if (return_client_request_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(return_client_request_id.value()).isEmpty()) {
            input.headers.insert("return-client-request-id", ::OpenAPI::toStringValue(return_client_request_id.value()));
        }
        }
    if (ocp_date.hasValue())
    {
        if (!::OpenAPI::toStringValue(ocp_date.value()).isEmpty()) {
            input.headers.insert("ocp-date", ::OpenAPI::toStringValue(ocp_date.value()));
        }
        }
    if (ocp_range.hasValue())
    {
        if (!::OpenAPI::toStringValue(ocp_range.value()).isEmpty()) {
            input.headers.insert("ocp-range", ::OpenAPI::toStringValue(ocp_range.value()));
        }
        }
    if (if_modified_since.hasValue())
    {
        if (!::OpenAPI::toStringValue(if_modified_since.value()).isEmpty()) {
            input.headers.insert("If-Modified-Since", ::OpenAPI::toStringValue(if_modified_since.value()));
        }
        }
    if (if_unmodified_since.hasValue())
    {
        if (!::OpenAPI::toStringValue(if_unmodified_since.value()).isEmpty()) {
            input.headers.insert("If-Unmodified-Since", ::OpenAPI::toStringValue(if_unmodified_since.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIFilesApi::fileGetFromTaskCallback);
    connect(this, &OAIFilesApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIFilesApi::fileGetFromTaskCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIHttpFileElement output = worker->getHttpFileElement();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT fileGetFromTaskSignal(output);
        Q_EMIT fileGetFromTaskSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT fileGetFromTaskSignalE(output, error_type, error_str);
        Q_EMIT fileGetFromTaskSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT fileGetFromTaskSignalError(output, error_type, error_str);
        Q_EMIT fileGetFromTaskSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIFilesApi::fileGetPropertiesFromComputeNode(const QString &pool_id, const QString &node_id, const QString &file_path, const QString &api_version, const ::OpenAPI::OptionalParam<qint32> &timeout, const ::OpenAPI::OptionalParam<QString> &client_request_id, const ::OpenAPI::OptionalParam<bool> &return_client_request_id, const ::OpenAPI::OptionalParam<QString> &ocp_date, const ::OpenAPI::OptionalParam<QString> &if_modified_since, const ::OpenAPI::OptionalParam<QString> &if_unmodified_since) {
    QString fullPath = QString(_serverConfigs["fileGetPropertiesFromComputeNode"][_serverIndices.value("fileGetPropertiesFromComputeNode")].URL()+"/pools/{poolId}/nodes/{nodeId}/files/{filePath}");
    
    
    {
        QString pool_idPathParam("{");
        pool_idPathParam.append("poolId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "poolId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"poolId"+pathSuffix : pathPrefix;
        fullPath.replace(pool_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(pool_id)));
    }
    
    {
        QString node_idPathParam("{");
        node_idPathParam.append("nodeId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "nodeId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"nodeId"+pathSuffix : pathPrefix;
        fullPath.replace(node_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(node_id)));
    }
    
    {
        QString file_pathPathParam("{");
        file_pathPathParam.append("filePath").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "filePath", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"filePath"+pathSuffix : pathPrefix;
        fullPath.replace(file_pathPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(file_path)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (timeout.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "timeout", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("timeout")).append(querySuffix).append(QUrl::toPercentEncoding(timeout.stringValue()));
    }
    
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "api-version", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("api-version")).append(querySuffix).append(QUrl::toPercentEncoding(api_version));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "HEAD");


    if (client_request_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(client_request_id.value()).isEmpty()) {
            input.headers.insert("client-request-id", ::OpenAPI::toStringValue(client_request_id.value()));
        }
        }
    if (return_client_request_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(return_client_request_id.value()).isEmpty()) {
            input.headers.insert("return-client-request-id", ::OpenAPI::toStringValue(return_client_request_id.value()));
        }
        }
    if (ocp_date.hasValue())
    {
        if (!::OpenAPI::toStringValue(ocp_date.value()).isEmpty()) {
            input.headers.insert("ocp-date", ::OpenAPI::toStringValue(ocp_date.value()));
        }
        }
    if (if_modified_since.hasValue())
    {
        if (!::OpenAPI::toStringValue(if_modified_since.value()).isEmpty()) {
            input.headers.insert("If-Modified-Since", ::OpenAPI::toStringValue(if_modified_since.value()));
        }
        }
    if (if_unmodified_since.hasValue())
    {
        if (!::OpenAPI::toStringValue(if_unmodified_since.value()).isEmpty()) {
            input.headers.insert("If-Unmodified-Since", ::OpenAPI::toStringValue(if_unmodified_since.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIFilesApi::fileGetPropertiesFromComputeNodeCallback);
    connect(this, &OAIFilesApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIFilesApi::fileGetPropertiesFromComputeNodeCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT fileGetPropertiesFromComputeNodeSignal();
        Q_EMIT fileGetPropertiesFromComputeNodeSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT fileGetPropertiesFromComputeNodeSignalE(error_type, error_str);
        Q_EMIT fileGetPropertiesFromComputeNodeSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT fileGetPropertiesFromComputeNodeSignalError(error_type, error_str);
        Q_EMIT fileGetPropertiesFromComputeNodeSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIFilesApi::fileGetPropertiesFromTask(const QString &job_id, const QString &task_id, const QString &file_path, const QString &api_version, const ::OpenAPI::OptionalParam<qint32> &timeout, const ::OpenAPI::OptionalParam<QString> &client_request_id, const ::OpenAPI::OptionalParam<bool> &return_client_request_id, const ::OpenAPI::OptionalParam<QString> &ocp_date, const ::OpenAPI::OptionalParam<QString> &if_modified_since, const ::OpenAPI::OptionalParam<QString> &if_unmodified_since) {
    QString fullPath = QString(_serverConfigs["fileGetPropertiesFromTask"][_serverIndices.value("fileGetPropertiesFromTask")].URL()+"/jobs/{jobId}/tasks/{taskId}/files/{filePath}");
    
    
    {
        QString job_idPathParam("{");
        job_idPathParam.append("jobId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "jobId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"jobId"+pathSuffix : pathPrefix;
        fullPath.replace(job_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(job_id)));
    }
    
    {
        QString task_idPathParam("{");
        task_idPathParam.append("taskId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "taskId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"taskId"+pathSuffix : pathPrefix;
        fullPath.replace(task_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(task_id)));
    }
    
    {
        QString file_pathPathParam("{");
        file_pathPathParam.append("filePath").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "filePath", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"filePath"+pathSuffix : pathPrefix;
        fullPath.replace(file_pathPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(file_path)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (timeout.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "timeout", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("timeout")).append(querySuffix).append(QUrl::toPercentEncoding(timeout.stringValue()));
    }
    
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "api-version", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("api-version")).append(querySuffix).append(QUrl::toPercentEncoding(api_version));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "HEAD");


    if (client_request_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(client_request_id.value()).isEmpty()) {
            input.headers.insert("client-request-id", ::OpenAPI::toStringValue(client_request_id.value()));
        }
        }
    if (return_client_request_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(return_client_request_id.value()).isEmpty()) {
            input.headers.insert("return-client-request-id", ::OpenAPI::toStringValue(return_client_request_id.value()));
        }
        }
    if (ocp_date.hasValue())
    {
        if (!::OpenAPI::toStringValue(ocp_date.value()).isEmpty()) {
            input.headers.insert("ocp-date", ::OpenAPI::toStringValue(ocp_date.value()));
        }
        }
    if (if_modified_since.hasValue())
    {
        if (!::OpenAPI::toStringValue(if_modified_since.value()).isEmpty()) {
            input.headers.insert("If-Modified-Since", ::OpenAPI::toStringValue(if_modified_since.value()));
        }
        }
    if (if_unmodified_since.hasValue())
    {
        if (!::OpenAPI::toStringValue(if_unmodified_since.value()).isEmpty()) {
            input.headers.insert("If-Unmodified-Since", ::OpenAPI::toStringValue(if_unmodified_since.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIFilesApi::fileGetPropertiesFromTaskCallback);
    connect(this, &OAIFilesApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIFilesApi::fileGetPropertiesFromTaskCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT fileGetPropertiesFromTaskSignal();
        Q_EMIT fileGetPropertiesFromTaskSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT fileGetPropertiesFromTaskSignalE(error_type, error_str);
        Q_EMIT fileGetPropertiesFromTaskSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT fileGetPropertiesFromTaskSignalError(error_type, error_str);
        Q_EMIT fileGetPropertiesFromTaskSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIFilesApi::fileListFromComputeNode(const QString &pool_id, const QString &node_id, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &filter, const ::OpenAPI::OptionalParam<bool> &recursive, const ::OpenAPI::OptionalParam<qint32> &maxresults, const ::OpenAPI::OptionalParam<qint32> &timeout, const ::OpenAPI::OptionalParam<QString> &client_request_id, const ::OpenAPI::OptionalParam<bool> &return_client_request_id, const ::OpenAPI::OptionalParam<QString> &ocp_date) {
    QString fullPath = QString(_serverConfigs["fileListFromComputeNode"][_serverIndices.value("fileListFromComputeNode")].URL()+"/pools/{poolId}/nodes/{nodeId}/files");
    
    
    {
        QString pool_idPathParam("{");
        pool_idPathParam.append("poolId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "poolId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"poolId"+pathSuffix : pathPrefix;
        fullPath.replace(pool_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(pool_id)));
    }
    
    {
        QString node_idPathParam("{");
        node_idPathParam.append("nodeId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "nodeId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"nodeId"+pathSuffix : pathPrefix;
        fullPath.replace(node_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(node_id)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (filter.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "$filter", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("$filter")).append(querySuffix).append(QUrl::toPercentEncoding(filter.stringValue()));
    }
    if (recursive.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "recursive", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("recursive")).append(querySuffix).append(QUrl::toPercentEncoding(recursive.stringValue()));
    }
    if (maxresults.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "maxresults", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("maxresults")).append(querySuffix).append(QUrl::toPercentEncoding(maxresults.stringValue()));
    }
    if (timeout.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "timeout", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("timeout")).append(querySuffix).append(QUrl::toPercentEncoding(timeout.stringValue()));
    }
    
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "api-version", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("api-version")).append(querySuffix).append(QUrl::toPercentEncoding(api_version));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (client_request_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(client_request_id.value()).isEmpty()) {
            input.headers.insert("client-request-id", ::OpenAPI::toStringValue(client_request_id.value()));
        }
        }
    if (return_client_request_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(return_client_request_id.value()).isEmpty()) {
            input.headers.insert("return-client-request-id", ::OpenAPI::toStringValue(return_client_request_id.value()));
        }
        }
    if (ocp_date.hasValue())
    {
        if (!::OpenAPI::toStringValue(ocp_date.value()).isEmpty()) {
            input.headers.insert("ocp-date", ::OpenAPI::toStringValue(ocp_date.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIFilesApi::fileListFromComputeNodeCallback);
    connect(this, &OAIFilesApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIFilesApi::fileListFromComputeNodeCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAINodeFileListResult output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT fileListFromComputeNodeSignal(output);
        Q_EMIT fileListFromComputeNodeSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT fileListFromComputeNodeSignalE(output, error_type, error_str);
        Q_EMIT fileListFromComputeNodeSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT fileListFromComputeNodeSignalError(output, error_type, error_str);
        Q_EMIT fileListFromComputeNodeSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIFilesApi::fileListFromTask(const QString &job_id, const QString &task_id, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &filter, const ::OpenAPI::OptionalParam<bool> &recursive, const ::OpenAPI::OptionalParam<qint32> &maxresults, const ::OpenAPI::OptionalParam<qint32> &timeout, const ::OpenAPI::OptionalParam<QString> &client_request_id, const ::OpenAPI::OptionalParam<bool> &return_client_request_id, const ::OpenAPI::OptionalParam<QString> &ocp_date) {
    QString fullPath = QString(_serverConfigs["fileListFromTask"][_serverIndices.value("fileListFromTask")].URL()+"/jobs/{jobId}/tasks/{taskId}/files");
    
    
    {
        QString job_idPathParam("{");
        job_idPathParam.append("jobId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "jobId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"jobId"+pathSuffix : pathPrefix;
        fullPath.replace(job_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(job_id)));
    }
    
    {
        QString task_idPathParam("{");
        task_idPathParam.append("taskId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "taskId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"taskId"+pathSuffix : pathPrefix;
        fullPath.replace(task_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(task_id)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (filter.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "$filter", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("$filter")).append(querySuffix).append(QUrl::toPercentEncoding(filter.stringValue()));
    }
    if (recursive.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "recursive", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("recursive")).append(querySuffix).append(QUrl::toPercentEncoding(recursive.stringValue()));
    }
    if (maxresults.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "maxresults", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("maxresults")).append(querySuffix).append(QUrl::toPercentEncoding(maxresults.stringValue()));
    }
    if (timeout.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "timeout", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("timeout")).append(querySuffix).append(QUrl::toPercentEncoding(timeout.stringValue()));
    }
    
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "api-version", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("api-version")).append(querySuffix).append(QUrl::toPercentEncoding(api_version));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (client_request_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(client_request_id.value()).isEmpty()) {
            input.headers.insert("client-request-id", ::OpenAPI::toStringValue(client_request_id.value()));
        }
        }
    if (return_client_request_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(return_client_request_id.value()).isEmpty()) {
            input.headers.insert("return-client-request-id", ::OpenAPI::toStringValue(return_client_request_id.value()));
        }
        }
    if (ocp_date.hasValue())
    {
        if (!::OpenAPI::toStringValue(ocp_date.value()).isEmpty()) {
            input.headers.insert("ocp-date", ::OpenAPI::toStringValue(ocp_date.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIFilesApi::fileListFromTaskCallback);
    connect(this, &OAIFilesApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIFilesApi::fileListFromTaskCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAINodeFileListResult output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT fileListFromTaskSignal(output);
        Q_EMIT fileListFromTaskSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT fileListFromTaskSignalE(output, error_type, error_str);
        Q_EMIT fileListFromTaskSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT fileListFromTaskSignalError(output, error_type, error_str);
        Q_EMIT fileListFromTaskSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIFilesApi::tokenAvailable(){

    oauthToken token;
    switch (_OauthMethod) {
    case 1: //implicit flow
        token = _implicitFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _implicitFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 2: //authorization flow
        token = _authFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _authFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 3: //client credentials flow
        token = _credentialFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 4: //resource owner password flow
        token = _passwordFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    default:
        qDebug() << "No Oauth method set!";
        break;
    }
}
} // namespace OpenAPI
