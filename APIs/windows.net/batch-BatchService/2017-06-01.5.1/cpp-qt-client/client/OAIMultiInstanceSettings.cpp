/**
 * BatchService
 * A client for issuing REST requests to the Azure Batch service.
 *
 * The version of the OpenAPI document: 2017-06-01.5.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMultiInstanceSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMultiInstanceSettings::OAIMultiInstanceSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMultiInstanceSettings::OAIMultiInstanceSettings() {
    this->initializeModel();
}

OAIMultiInstanceSettings::~OAIMultiInstanceSettings() {}

void OAIMultiInstanceSettings::initializeModel() {

    m_common_resource_files_isSet = false;
    m_common_resource_files_isValid = false;

    m_coordination_command_line_isSet = false;
    m_coordination_command_line_isValid = false;

    m_number_of_instances_isSet = false;
    m_number_of_instances_isValid = false;
}

void OAIMultiInstanceSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMultiInstanceSettings::fromJsonObject(QJsonObject json) {

    m_common_resource_files_isValid = ::OpenAPI::fromJsonValue(m_common_resource_files, json[QString("commonResourceFiles")]);
    m_common_resource_files_isSet = !json[QString("commonResourceFiles")].isNull() && m_common_resource_files_isValid;

    m_coordination_command_line_isValid = ::OpenAPI::fromJsonValue(m_coordination_command_line, json[QString("coordinationCommandLine")]);
    m_coordination_command_line_isSet = !json[QString("coordinationCommandLine")].isNull() && m_coordination_command_line_isValid;

    m_number_of_instances_isValid = ::OpenAPI::fromJsonValue(m_number_of_instances, json[QString("numberOfInstances")]);
    m_number_of_instances_isSet = !json[QString("numberOfInstances")].isNull() && m_number_of_instances_isValid;
}

QString OAIMultiInstanceSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMultiInstanceSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_common_resource_files.size() > 0) {
        obj.insert(QString("commonResourceFiles"), ::OpenAPI::toJsonValue(m_common_resource_files));
    }
    if (m_coordination_command_line_isSet) {
        obj.insert(QString("coordinationCommandLine"), ::OpenAPI::toJsonValue(m_coordination_command_line));
    }
    if (m_number_of_instances_isSet) {
        obj.insert(QString("numberOfInstances"), ::OpenAPI::toJsonValue(m_number_of_instances));
    }
    return obj;
}

QList<OAIResourceFile> OAIMultiInstanceSettings::getCommonResourceFiles() const {
    return m_common_resource_files;
}
void OAIMultiInstanceSettings::setCommonResourceFiles(const QList<OAIResourceFile> &common_resource_files) {
    m_common_resource_files = common_resource_files;
    m_common_resource_files_isSet = true;
}

bool OAIMultiInstanceSettings::is_common_resource_files_Set() const{
    return m_common_resource_files_isSet;
}

bool OAIMultiInstanceSettings::is_common_resource_files_Valid() const{
    return m_common_resource_files_isValid;
}

QString OAIMultiInstanceSettings::getCoordinationCommandLine() const {
    return m_coordination_command_line;
}
void OAIMultiInstanceSettings::setCoordinationCommandLine(const QString &coordination_command_line) {
    m_coordination_command_line = coordination_command_line;
    m_coordination_command_line_isSet = true;
}

bool OAIMultiInstanceSettings::is_coordination_command_line_Set() const{
    return m_coordination_command_line_isSet;
}

bool OAIMultiInstanceSettings::is_coordination_command_line_Valid() const{
    return m_coordination_command_line_isValid;
}

qint32 OAIMultiInstanceSettings::getNumberOfInstances() const {
    return m_number_of_instances;
}
void OAIMultiInstanceSettings::setNumberOfInstances(const qint32 &number_of_instances) {
    m_number_of_instances = number_of_instances;
    m_number_of_instances_isSet = true;
}

bool OAIMultiInstanceSettings::is_number_of_instances_Set() const{
    return m_number_of_instances_isSet;
}

bool OAIMultiInstanceSettings::is_number_of_instances_Valid() const{
    return m_number_of_instances_isValid;
}

bool OAIMultiInstanceSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_common_resource_files.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_coordination_command_line_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_of_instances_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMultiInstanceSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_number_of_instances_isValid && true;
}

} // namespace OpenAPI
