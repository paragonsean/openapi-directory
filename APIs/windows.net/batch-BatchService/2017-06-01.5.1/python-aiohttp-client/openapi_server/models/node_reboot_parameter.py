# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class NodeRebootParameter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, node_reboot_option: str=None):
        """NodeRebootParameter - a model defined in OpenAPI

        :param node_reboot_option: The node_reboot_option of this NodeRebootParameter.
        """
        self.openapi_types = {
            'node_reboot_option': str
        }

        self.attribute_map = {
            'node_reboot_option': 'nodeRebootOption'
        }

        self._node_reboot_option = node_reboot_option

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NodeRebootParameter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NodeRebootParameter of this NodeRebootParameter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def node_reboot_option(self):
        """Gets the node_reboot_option of this NodeRebootParameter.

        Values are:   requeue - Terminate running task processes and requeue the tasks. The tasks will run again when a node is available. Restart the node as soon as tasks have been terminated.  terminate - Terminate running tasks. The tasks will not run again. Restart the node as soon as tasks have been terminated.  taskcompletion - Allow currently running tasks to complete. Schedule no new tasks while waiting. Restart the node when all tasks have completed.  retaineddata - Allow currently running tasks to complete, then wait for all task data retention periods to expire. Schedule no new tasks while waiting. Restart the node when all task retention periods have expired.   The default value is requeue.

        :return: The node_reboot_option of this NodeRebootParameter.
        :rtype: str
        """
        return self._node_reboot_option

    @node_reboot_option.setter
    def node_reboot_option(self, node_reboot_option):
        """Sets the node_reboot_option of this NodeRebootParameter.

        Values are:   requeue - Terminate running task processes and requeue the tasks. The tasks will run again when a node is available. Restart the node as soon as tasks have been terminated.  terminate - Terminate running tasks. The tasks will not run again. Restart the node as soon as tasks have been terminated.  taskcompletion - Allow currently running tasks to complete. Schedule no new tasks while waiting. Restart the node when all tasks have completed.  retaineddata - Allow currently running tasks to complete, then wait for all task data retention periods to expire. Schedule no new tasks while waiting. Restart the node when all task retention periods have expired.   The default value is requeue.

        :param node_reboot_option: The node_reboot_option of this NodeRebootParameter.
        :type node_reboot_option: str
        """
        allowed_values = ["requeue", "terminate", "taskCompletion", "retainedData"]  # noqa: E501
        if node_reboot_option not in allowed_values:
            raise ValueError(
                "Invalid value for `node_reboot_option` ({0}), must be one of {1}"
                .format(node_reboot_option, allowed_values)
            )

        self._node_reboot_option = node_reboot_option
