# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class OSDisk(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, caching: str=None, image_uris: List[str]=None):
        """OSDisk - a model defined in OpenAPI

        :param caching: The caching of this OSDisk.
        :param image_uris: The image_uris of this OSDisk.
        """
        self.openapi_types = {
            'caching': str,
            'image_uris': List[str]
        }

        self.attribute_map = {
            'caching': 'caching',
            'image_uris': 'imageUris'
        }

        self._caching = caching
        self._image_uris = image_uris

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OSDisk':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OSDisk of this OSDisk.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def caching(self):
        """Gets the caching of this OSDisk.

        Values are:   none - The caching mode for the disk is not enabled.  readOnly - The caching mode for the disk is read only.  readWrite - The caching mode for the disk is read and write.   The default value for caching is none. For information about the caching options see: https://blogs.msdn.microsoft.com/windowsazurestorage/2012/06/27/exploring-windows-azure-drives-disks-and-images/.

        :return: The caching of this OSDisk.
        :rtype: str
        """
        return self._caching

    @caching.setter
    def caching(self, caching):
        """Sets the caching of this OSDisk.

        Values are:   none - The caching mode for the disk is not enabled.  readOnly - The caching mode for the disk is read only.  readWrite - The caching mode for the disk is read and write.   The default value for caching is none. For information about the caching options see: https://blogs.msdn.microsoft.com/windowsazurestorage/2012/06/27/exploring-windows-azure-drives-disks-and-images/.

        :param caching: The caching of this OSDisk.
        :type caching: str
        """
        allowed_values = ["none", "readOnly", "readWrite"]  # noqa: E501
        if caching not in allowed_values:
            raise ValueError(
                "Invalid value for `caching` ({0}), must be one of {1}"
                .format(caching, allowed_values)
            )

        self._caching = caching

    @property
    def image_uris(self):
        """Gets the image_uris of this OSDisk.

        All the VHDs must be identical and must reside in an Azure Storage account within the same subscription and same region as the Batch account. For best performance, it is recommended that each VHD resides in a separate Azure Storage account. Each VHD can serve up to 20 Windows compute nodes or 40 Linux compute nodes. You must supply enough VHD URIs to satisfy the 'targetDedicated' property of the pool. If you do not supply enough VHD URIs, the pool will partially allocate compute nodes, and a resize error will occur.

        :return: The image_uris of this OSDisk.
        :rtype: List[str]
        """
        return self._image_uris

    @image_uris.setter
    def image_uris(self, image_uris):
        """Sets the image_uris of this OSDisk.

        All the VHDs must be identical and must reside in an Azure Storage account within the same subscription and same region as the Batch account. For best performance, it is recommended that each VHD resides in a separate Azure Storage account. Each VHD can serve up to 20 Windows compute nodes or 40 Linux compute nodes. You must supply enough VHD URIs to satisfy the 'targetDedicated' property of the pool. If you do not supply enough VHD URIs, the pool will partially allocate compute nodes, and a resize error will occur.

        :param image_uris: The image_uris of this OSDisk.
        :type image_uris: List[str]
        """
        if image_uris is None:
            raise ValueError("Invalid value for `image_uris`, must not be `None`")

        self._image_uris = image_uris
