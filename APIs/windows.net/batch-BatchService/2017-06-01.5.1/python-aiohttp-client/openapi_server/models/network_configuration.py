# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.pool_endpoint_configuration import PoolEndpointConfiguration
from openapi_server import util


class NetworkConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, endpoint_configuration: PoolEndpointConfiguration=None, subnet_id: str=None):
        """NetworkConfiguration - a model defined in OpenAPI

        :param endpoint_configuration: The endpoint_configuration of this NetworkConfiguration.
        :param subnet_id: The subnet_id of this NetworkConfiguration.
        """
        self.openapi_types = {
            'endpoint_configuration': PoolEndpointConfiguration,
            'subnet_id': str
        }

        self.attribute_map = {
            'endpoint_configuration': 'endpointConfiguration',
            'subnet_id': 'subnetId'
        }

        self._endpoint_configuration = endpoint_configuration
        self._subnet_id = subnet_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NetworkConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NetworkConfiguration of this NetworkConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def endpoint_configuration(self):
        """Gets the endpoint_configuration of this NetworkConfiguration.


        :return: The endpoint_configuration of this NetworkConfiguration.
        :rtype: PoolEndpointConfiguration
        """
        return self._endpoint_configuration

    @endpoint_configuration.setter
    def endpoint_configuration(self, endpoint_configuration):
        """Sets the endpoint_configuration of this NetworkConfiguration.


        :param endpoint_configuration: The endpoint_configuration of this NetworkConfiguration.
        :type endpoint_configuration: PoolEndpointConfiguration
        """

        self._endpoint_configuration = endpoint_configuration

    @property
    def subnet_id(self):
        """Gets the subnet_id of this NetworkConfiguration.

        The virtual network must be in the same region and subscription as the Azure Batch account. The specified subnet should have enough free IP addresses to accommodate the number of nodes in the pool. If the subnet doesn't have enough free IP addresses, the pool will partially allocate compute nodes, and a resize error will occur. The 'MicrosoftAzureBatch' service principal must have the 'Classic Virtual Machine Contributor' Role-Based Access Control (RBAC) role for the specified VNet. The specified subnet must allow communication from the Azure Batch service to be able to schedule tasks on the compute nodes. This can be verified by checking if the specified VNet has any associated Network Security Groups (NSG). If communication to the compute nodes in the specified subnet is denied by an NSG, then the Batch service will set the state of the compute nodes to unusable. For pools created via virtualMachineConfiguration the Batch account must have poolAllocationMode userSubscription in order to use a VNet. If the specified VNet has any associated Network Security Groups (NSG), then a few reserved system ports must be enabled for inbound communication. For pools created with a virtual machine configuration, enable ports 29876 and 29877, as well as port 22 for Linux and port 3389 for Windows. For pools created with a cloud service configuration, enable ports 10100, 20100, and 30100. Also enable outbound connections to Azure Storage on port 443. For more details see: https://docs.microsoft.com/en-us/azure/batch/batch-api-basics#virtual-network-vnet-and-firewall-configuration

        :return: The subnet_id of this NetworkConfiguration.
        :rtype: str
        """
        return self._subnet_id

    @subnet_id.setter
    def subnet_id(self, subnet_id):
        """Sets the subnet_id of this NetworkConfiguration.

        The virtual network must be in the same region and subscription as the Azure Batch account. The specified subnet should have enough free IP addresses to accommodate the number of nodes in the pool. If the subnet doesn't have enough free IP addresses, the pool will partially allocate compute nodes, and a resize error will occur. The 'MicrosoftAzureBatch' service principal must have the 'Classic Virtual Machine Contributor' Role-Based Access Control (RBAC) role for the specified VNet. The specified subnet must allow communication from the Azure Batch service to be able to schedule tasks on the compute nodes. This can be verified by checking if the specified VNet has any associated Network Security Groups (NSG). If communication to the compute nodes in the specified subnet is denied by an NSG, then the Batch service will set the state of the compute nodes to unusable. For pools created via virtualMachineConfiguration the Batch account must have poolAllocationMode userSubscription in order to use a VNet. If the specified VNet has any associated Network Security Groups (NSG), then a few reserved system ports must be enabled for inbound communication. For pools created with a virtual machine configuration, enable ports 29876 and 29877, as well as port 22 for Linux and port 3389 for Windows. For pools created with a cloud service configuration, enable ports 10100, 20100, and 30100. Also enable outbound connections to Azure Storage on port 443. For more details see: https://docs.microsoft.com/en-us/azure/batch/batch-api-basics#virtual-network-vnet-and-firewall-configuration

        :param subnet_id: The subnet_id of this NetworkConfiguration.
        :type subnet_id: str
        """

        self._subnet_id = subnet_id
