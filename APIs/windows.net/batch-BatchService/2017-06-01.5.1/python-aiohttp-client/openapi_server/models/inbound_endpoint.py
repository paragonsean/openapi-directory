# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class InboundEndpoint(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, backend_port: int=None, frontend_port: int=None, name: str=None, protocol: str=None, public_fqdn: str=None, public_ip_address: str=None):
        """InboundEndpoint - a model defined in OpenAPI

        :param backend_port: The backend_port of this InboundEndpoint.
        :param frontend_port: The frontend_port of this InboundEndpoint.
        :param name: The name of this InboundEndpoint.
        :param protocol: The protocol of this InboundEndpoint.
        :param public_fqdn: The public_fqdn of this InboundEndpoint.
        :param public_ip_address: The public_ip_address of this InboundEndpoint.
        """
        self.openapi_types = {
            'backend_port': int,
            'frontend_port': int,
            'name': str,
            'protocol': str,
            'public_fqdn': str,
            'public_ip_address': str
        }

        self.attribute_map = {
            'backend_port': 'backendPort',
            'frontend_port': 'frontendPort',
            'name': 'name',
            'protocol': 'protocol',
            'public_fqdn': 'publicFQDN',
            'public_ip_address': 'publicIPAddress'
        }

        self._backend_port = backend_port
        self._frontend_port = frontend_port
        self._name = name
        self._protocol = protocol
        self._public_fqdn = public_fqdn
        self._public_ip_address = public_ip_address

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InboundEndpoint':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InboundEndpoint of this InboundEndpoint.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def backend_port(self):
        """Gets the backend_port of this InboundEndpoint.


        :return: The backend_port of this InboundEndpoint.
        :rtype: int
        """
        return self._backend_port

    @backend_port.setter
    def backend_port(self, backend_port):
        """Sets the backend_port of this InboundEndpoint.


        :param backend_port: The backend_port of this InboundEndpoint.
        :type backend_port: int
        """
        if backend_port is None:
            raise ValueError("Invalid value for `backend_port`, must not be `None`")

        self._backend_port = backend_port

    @property
    def frontend_port(self):
        """Gets the frontend_port of this InboundEndpoint.


        :return: The frontend_port of this InboundEndpoint.
        :rtype: int
        """
        return self._frontend_port

    @frontend_port.setter
    def frontend_port(self, frontend_port):
        """Sets the frontend_port of this InboundEndpoint.


        :param frontend_port: The frontend_port of this InboundEndpoint.
        :type frontend_port: int
        """
        if frontend_port is None:
            raise ValueError("Invalid value for `frontend_port`, must not be `None`")

        self._frontend_port = frontend_port

    @property
    def name(self):
        """Gets the name of this InboundEndpoint.


        :return: The name of this InboundEndpoint.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this InboundEndpoint.


        :param name: The name of this InboundEndpoint.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def protocol(self):
        """Gets the protocol of this InboundEndpoint.


        :return: The protocol of this InboundEndpoint.
        :rtype: str
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this InboundEndpoint.


        :param protocol: The protocol of this InboundEndpoint.
        :type protocol: str
        """
        allowed_values = ["tcp", "udp"]  # noqa: E501
        if protocol not in allowed_values:
            raise ValueError(
                "Invalid value for `protocol` ({0}), must be one of {1}"
                .format(protocol, allowed_values)
            )

        self._protocol = protocol

    @property
    def public_fqdn(self):
        """Gets the public_fqdn of this InboundEndpoint.


        :return: The public_fqdn of this InboundEndpoint.
        :rtype: str
        """
        return self._public_fqdn

    @public_fqdn.setter
    def public_fqdn(self, public_fqdn):
        """Sets the public_fqdn of this InboundEndpoint.


        :param public_fqdn: The public_fqdn of this InboundEndpoint.
        :type public_fqdn: str
        """
        if public_fqdn is None:
            raise ValueError("Invalid value for `public_fqdn`, must not be `None`")

        self._public_fqdn = public_fqdn

    @property
    def public_ip_address(self):
        """Gets the public_ip_address of this InboundEndpoint.


        :return: The public_ip_address of this InboundEndpoint.
        :rtype: str
        """
        return self._public_ip_address

    @public_ip_address.setter
    def public_ip_address(self, public_ip_address):
        """Sets the public_ip_address of this InboundEndpoint.


        :param public_ip_address: The public_ip_address of this InboundEndpoint.
        :type public_ip_address: str
        """
        if public_ip_address is None:
            raise ValueError("Invalid value for `public_ip_address`, must not be `None`")

        self._public_ip_address = public_ip_address
