# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ResourceFile(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, blob_source: str=None, file_mode: str=None, file_path: str=None):
        """ResourceFile - a model defined in OpenAPI

        :param blob_source: The blob_source of this ResourceFile.
        :param file_mode: The file_mode of this ResourceFile.
        :param file_path: The file_path of this ResourceFile.
        """
        self.openapi_types = {
            'blob_source': str,
            'file_mode': str,
            'file_path': str
        }

        self.attribute_map = {
            'blob_source': 'blobSource',
            'file_mode': 'fileMode',
            'file_path': 'filePath'
        }

        self._blob_source = blob_source
        self._file_mode = file_mode
        self._file_path = file_path

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ResourceFile':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ResourceFile of this ResourceFile.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def blob_source(self):
        """Gets the blob_source of this ResourceFile.

        This URL must be readable using anonymous access; that is, the Batch service does not present any credentials when downloading the blob. There are two ways to get such a URL for a blob in Azure storage: include a Shared Access Signature (SAS) granting read permissions on the blob, or set the ACL for the blob or its container to allow public access.

        :return: The blob_source of this ResourceFile.
        :rtype: str
        """
        return self._blob_source

    @blob_source.setter
    def blob_source(self, blob_source):
        """Sets the blob_source of this ResourceFile.

        This URL must be readable using anonymous access; that is, the Batch service does not present any credentials when downloading the blob. There are two ways to get such a URL for a blob in Azure storage: include a Shared Access Signature (SAS) granting read permissions on the blob, or set the ACL for the blob or its container to allow public access.

        :param blob_source: The blob_source of this ResourceFile.
        :type blob_source: str
        """
        if blob_source is None:
            raise ValueError("Invalid value for `blob_source`, must not be `None`")

        self._blob_source = blob_source

    @property
    def file_mode(self):
        """Gets the file_mode of this ResourceFile.

        This property applies only to files being downloaded to Linux compute nodes. It will be ignored if it is specified for a resourceFile which will be downloaded to a Windows node. If this property is not specified for a Linux node, then a default value of 0770 is applied to the file.

        :return: The file_mode of this ResourceFile.
        :rtype: str
        """
        return self._file_mode

    @file_mode.setter
    def file_mode(self, file_mode):
        """Sets the file_mode of this ResourceFile.

        This property applies only to files being downloaded to Linux compute nodes. It will be ignored if it is specified for a resourceFile which will be downloaded to a Windows node. If this property is not specified for a Linux node, then a default value of 0770 is applied to the file.

        :param file_mode: The file_mode of this ResourceFile.
        :type file_mode: str
        """

        self._file_mode = file_mode

    @property
    def file_path(self):
        """Gets the file_path of this ResourceFile.


        :return: The file_path of this ResourceFile.
        :rtype: str
        """
        return self._file_path

    @file_path.setter
    def file_path(self, file_path):
        """Sets the file_path of this ResourceFile.


        :param file_path: The file_path of this ResourceFile.
        :type file_path: str
        """
        if file_path is None:
            raise ValueError("Invalid value for `file_path`, must not be `None`")

        self._file_path = file_path
