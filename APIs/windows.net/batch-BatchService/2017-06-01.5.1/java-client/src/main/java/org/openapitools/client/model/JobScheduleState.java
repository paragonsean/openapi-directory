/*
 * BatchService
 * A client for issuing REST requests to the Azure Batch service.
 *
 * The version of the OpenAPI document: 2017-06-01.5.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.JsonElement;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * Values are:   active - The job schedule is active and will create jobs as per its schedule.  disabled - The user has disabled the schedule. The scheduler will not initiate any new jobs will on this schedule, but any existing active job will continue to run.  terminating - The schedule has no more work to do, or has been explicitly terminated by the user, but the termination operation is still in progress. The scheduler will not initiate any new jobs for this schedule, nor is any existing job active.  completed - The schedule has terminated, either by reaching its end time or by the user terminating it explicitly.  deleting - The user has requested that the schedule be deleted, but the delete operation is still in progress. The scheduler will not initiate any new jobs for this schedule, and will delete any existing jobs and tasks under the schedule, including any active job. The schedule will be deleted when all jobs and tasks under the schedule have been deleted.
 */
@JsonAdapter(JobScheduleState.Adapter.class)
public enum JobScheduleState {
  
  ACTIVE("active"),
  
  COMPLETED("completed"),
  
  DISABLED("disabled"),
  
  TERMINATING("terminating"),
  
  DELETING("deleting");

  private String value;

  JobScheduleState(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static JobScheduleState fromValue(String value) {
    for (JobScheduleState b : JobScheduleState.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<JobScheduleState> {
    @Override
    public void write(final JsonWriter jsonWriter, final JobScheduleState enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public JobScheduleState read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return JobScheduleState.fromValue(value);
    }
  }

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    String value = jsonElement.getAsString();
    JobScheduleState.fromValue(value);
  }
}

