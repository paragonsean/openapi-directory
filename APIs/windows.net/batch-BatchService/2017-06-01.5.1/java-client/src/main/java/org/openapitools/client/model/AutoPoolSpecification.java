/*
 * BatchService
 * A client for issuing REST requests to the Azure Batch service.
 *
 * The version of the OpenAPI document: 2017-06-01.5.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.PoolSpecification;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AutoPoolSpecification
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:59:11.127296-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AutoPoolSpecification {
  public static final String SERIALIZED_NAME_AUTO_POOL_ID_PREFIX = "autoPoolIdPrefix";
  @SerializedName(SERIALIZED_NAME_AUTO_POOL_ID_PREFIX)
  private String autoPoolIdPrefix;

  public static final String SERIALIZED_NAME_KEEP_ALIVE = "keepAlive";
  @SerializedName(SERIALIZED_NAME_KEEP_ALIVE)
  private Boolean keepAlive;

  public static final String SERIALIZED_NAME_POOL = "pool";
  @SerializedName(SERIALIZED_NAME_POOL)
  private PoolSpecification pool;

  /**
   * When the pool lifetime is jobSchedule the pool exists for the lifetime of the job schedule. The Batch Service creates the pool when it creates the first job on the schedule. You may apply this option only to job schedules, not to jobs. When the pool lifetime is job the pool exists for the lifetime of the job to which it is dedicated. The Batch service creates the pool when it creates the job. If the &#39;job&#39; option is applied to a job schedule, the Batch service creates a new auto pool for every job created on the schedule.
   */
  @JsonAdapter(PoolLifetimeOptionEnum.Adapter.class)
  public enum PoolLifetimeOptionEnum {
    JOB_SCHEDULE("jobSchedule"),
    
    JOB("job");

    private String value;

    PoolLifetimeOptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PoolLifetimeOptionEnum fromValue(String value) {
      for (PoolLifetimeOptionEnum b : PoolLifetimeOptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PoolLifetimeOptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PoolLifetimeOptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PoolLifetimeOptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PoolLifetimeOptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PoolLifetimeOptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_POOL_LIFETIME_OPTION = "poolLifetimeOption";
  @SerializedName(SERIALIZED_NAME_POOL_LIFETIME_OPTION)
  private PoolLifetimeOptionEnum poolLifetimeOption;

  public AutoPoolSpecification() {
  }

  public AutoPoolSpecification autoPoolIdPrefix(String autoPoolIdPrefix) {
    this.autoPoolIdPrefix = autoPoolIdPrefix;
    return this;
  }

  /**
   * The Batch service assigns each auto pool a unique identifier on creation. To distinguish between pools created for different purposes, you can specify this element to add a prefix to the ID that is assigned. The prefix can be up to 20 characters long.
   * @return autoPoolIdPrefix
   */
  @javax.annotation.Nullable
  public String getAutoPoolIdPrefix() {
    return autoPoolIdPrefix;
  }

  public void setAutoPoolIdPrefix(String autoPoolIdPrefix) {
    this.autoPoolIdPrefix = autoPoolIdPrefix;
  }


  public AutoPoolSpecification keepAlive(Boolean keepAlive) {
    this.keepAlive = keepAlive;
    return this;
  }

  /**
   * If false, the Batch service deletes the pool once its lifetime (as determined by the poolLifetimeOption setting) expires; that is, when the job or job schedule completes. If true, the Batch service does not delete the pool automatically. It is up to the user to delete auto pools created with this option.
   * @return keepAlive
   */
  @javax.annotation.Nullable
  public Boolean getKeepAlive() {
    return keepAlive;
  }

  public void setKeepAlive(Boolean keepAlive) {
    this.keepAlive = keepAlive;
  }


  public AutoPoolSpecification pool(PoolSpecification pool) {
    this.pool = pool;
    return this;
  }

  /**
   * Get pool
   * @return pool
   */
  @javax.annotation.Nullable
  public PoolSpecification getPool() {
    return pool;
  }

  public void setPool(PoolSpecification pool) {
    this.pool = pool;
  }


  public AutoPoolSpecification poolLifetimeOption(PoolLifetimeOptionEnum poolLifetimeOption) {
    this.poolLifetimeOption = poolLifetimeOption;
    return this;
  }

  /**
   * When the pool lifetime is jobSchedule the pool exists for the lifetime of the job schedule. The Batch Service creates the pool when it creates the first job on the schedule. You may apply this option only to job schedules, not to jobs. When the pool lifetime is job the pool exists for the lifetime of the job to which it is dedicated. The Batch service creates the pool when it creates the job. If the &#39;job&#39; option is applied to a job schedule, the Batch service creates a new auto pool for every job created on the schedule.
   * @return poolLifetimeOption
   */
  @javax.annotation.Nonnull
  public PoolLifetimeOptionEnum getPoolLifetimeOption() {
    return poolLifetimeOption;
  }

  public void setPoolLifetimeOption(PoolLifetimeOptionEnum poolLifetimeOption) {
    this.poolLifetimeOption = poolLifetimeOption;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AutoPoolSpecification autoPoolSpecification = (AutoPoolSpecification) o;
    return Objects.equals(this.autoPoolIdPrefix, autoPoolSpecification.autoPoolIdPrefix) &&
        Objects.equals(this.keepAlive, autoPoolSpecification.keepAlive) &&
        Objects.equals(this.pool, autoPoolSpecification.pool) &&
        Objects.equals(this.poolLifetimeOption, autoPoolSpecification.poolLifetimeOption);
  }

  @Override
  public int hashCode() {
    return Objects.hash(autoPoolIdPrefix, keepAlive, pool, poolLifetimeOption);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AutoPoolSpecification {\n");
    sb.append("    autoPoolIdPrefix: ").append(toIndentedString(autoPoolIdPrefix)).append("\n");
    sb.append("    keepAlive: ").append(toIndentedString(keepAlive)).append("\n");
    sb.append("    pool: ").append(toIndentedString(pool)).append("\n");
    sb.append("    poolLifetimeOption: ").append(toIndentedString(poolLifetimeOption)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("autoPoolIdPrefix");
    openapiFields.add("keepAlive");
    openapiFields.add("pool");
    openapiFields.add("poolLifetimeOption");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("poolLifetimeOption");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AutoPoolSpecification
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AutoPoolSpecification.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AutoPoolSpecification is not found in the empty JSON string", AutoPoolSpecification.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AutoPoolSpecification.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AutoPoolSpecification` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AutoPoolSpecification.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("autoPoolIdPrefix") != null && !jsonObj.get("autoPoolIdPrefix").isJsonNull()) && !jsonObj.get("autoPoolIdPrefix").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `autoPoolIdPrefix` to be a primitive type in the JSON string but got `%s`", jsonObj.get("autoPoolIdPrefix").toString()));
      }
      // validate the optional field `pool`
      if (jsonObj.get("pool") != null && !jsonObj.get("pool").isJsonNull()) {
        PoolSpecification.validateJsonElement(jsonObj.get("pool"));
      }
      if (!jsonObj.get("poolLifetimeOption").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `poolLifetimeOption` to be a primitive type in the JSON string but got `%s`", jsonObj.get("poolLifetimeOption").toString()));
      }
      // validate the required field `poolLifetimeOption`
      PoolLifetimeOptionEnum.validateJsonElement(jsonObj.get("poolLifetimeOption"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AutoPoolSpecification.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AutoPoolSpecification' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AutoPoolSpecification> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AutoPoolSpecification.class));

       return (TypeAdapter<T>) new TypeAdapter<AutoPoolSpecification>() {
           @Override
           public void write(JsonWriter out, AutoPoolSpecification value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AutoPoolSpecification read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AutoPoolSpecification given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AutoPoolSpecification
   * @throws IOException if the JSON string is invalid with respect to AutoPoolSpecification
   */
  public static AutoPoolSpecification fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AutoPoolSpecification.class);
  }

  /**
   * Convert an instance of AutoPoolSpecification to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

