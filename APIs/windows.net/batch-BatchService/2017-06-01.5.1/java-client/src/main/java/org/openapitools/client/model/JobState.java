/*
 * BatchService
 * A client for issuing REST requests to the Azure Batch service.
 *
 * The version of the OpenAPI document: 2017-06-01.5.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.JsonElement;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * Values are:   active - the job is available to have tasks scheduled.  disabling - a user has requested that the job be disabled, but the disable operation is still in progress (for example, waiting for tasks to terminate).  disabled - a user has disabled the job. No tasks are running, and no new tasks will be scheduled.  enabling - a user has requested that the job be enabled, but the enable operation is still in progress.  terminating - the job is about to complete, either because a Job Manager task has completed or because the user has terminated the job, but the terminate operation is still in progress (for example, because Job Release tasks are running).  completed - all tasks have terminated, and the system will not accept any more tasks or any further changes to the job.  deleting - a user has requested that the job be deleted, but the delete operation is still in progress (for example, because the system is still terminating running tasks).
 */
@JsonAdapter(JobState.Adapter.class)
public enum JobState {
  
  ACTIVE("active"),
  
  DISABLING("disabling"),
  
  DISABLED("disabled"),
  
  ENABLING("enabling"),
  
  TERMINATING("terminating"),
  
  COMPLETED("completed"),
  
  DELETING("deleting");

  private String value;

  JobState(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static JobState fromValue(String value) {
    for (JobState b : JobState.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<JobState> {
    @Override
    public void write(final JsonWriter jsonWriter, final JobState enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public JobState read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return JobState.fromValue(value);
    }
  }

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    String value = jsonElement.getAsString();
    JobState.fromValue(value);
  }
}

