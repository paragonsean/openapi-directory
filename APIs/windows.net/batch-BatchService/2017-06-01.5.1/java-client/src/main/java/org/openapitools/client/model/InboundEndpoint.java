/*
 * BatchService
 * A client for issuing REST requests to the Azure Batch service.
 *
 * The version of the OpenAPI document: 2017-06-01.5.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * InboundEndpoint
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:59:11.127296-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class InboundEndpoint {
  public static final String SERIALIZED_NAME_BACKEND_PORT = "backendPort";
  @SerializedName(SERIALIZED_NAME_BACKEND_PORT)
  private Integer backendPort;

  public static final String SERIALIZED_NAME_FRONTEND_PORT = "frontendPort";
  @SerializedName(SERIALIZED_NAME_FRONTEND_PORT)
  private Integer frontendPort;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  /**
   * Gets or Sets protocol
   */
  @JsonAdapter(ProtocolEnum.Adapter.class)
  public enum ProtocolEnum {
    TCP("tcp"),
    
    UDP("udp");

    private String value;

    ProtocolEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ProtocolEnum fromValue(String value) {
      for (ProtocolEnum b : ProtocolEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ProtocolEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProtocolEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProtocolEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ProtocolEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ProtocolEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PROTOCOL = "protocol";
  @SerializedName(SERIALIZED_NAME_PROTOCOL)
  private ProtocolEnum protocol;

  public static final String SERIALIZED_NAME_PUBLIC_F_Q_D_N = "publicFQDN";
  @SerializedName(SERIALIZED_NAME_PUBLIC_F_Q_D_N)
  private String publicFQDN;

  public static final String SERIALIZED_NAME_PUBLIC_I_P_ADDRESS = "publicIPAddress";
  @SerializedName(SERIALIZED_NAME_PUBLIC_I_P_ADDRESS)
  private String publicIPAddress;

  public InboundEndpoint() {
  }

  public InboundEndpoint backendPort(Integer backendPort) {
    this.backendPort = backendPort;
    return this;
  }

  /**
   * Get backendPort
   * @return backendPort
   */
  @javax.annotation.Nonnull
  public Integer getBackendPort() {
    return backendPort;
  }

  public void setBackendPort(Integer backendPort) {
    this.backendPort = backendPort;
  }


  public InboundEndpoint frontendPort(Integer frontendPort) {
    this.frontendPort = frontendPort;
    return this;
  }

  /**
   * Get frontendPort
   * @return frontendPort
   */
  @javax.annotation.Nonnull
  public Integer getFrontendPort() {
    return frontendPort;
  }

  public void setFrontendPort(Integer frontendPort) {
    this.frontendPort = frontendPort;
  }


  public InboundEndpoint name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public InboundEndpoint protocol(ProtocolEnum protocol) {
    this.protocol = protocol;
    return this;
  }

  /**
   * Get protocol
   * @return protocol
   */
  @javax.annotation.Nonnull
  public ProtocolEnum getProtocol() {
    return protocol;
  }

  public void setProtocol(ProtocolEnum protocol) {
    this.protocol = protocol;
  }


  public InboundEndpoint publicFQDN(String publicFQDN) {
    this.publicFQDN = publicFQDN;
    return this;
  }

  /**
   * Get publicFQDN
   * @return publicFQDN
   */
  @javax.annotation.Nonnull
  public String getPublicFQDN() {
    return publicFQDN;
  }

  public void setPublicFQDN(String publicFQDN) {
    this.publicFQDN = publicFQDN;
  }


  public InboundEndpoint publicIPAddress(String publicIPAddress) {
    this.publicIPAddress = publicIPAddress;
    return this;
  }

  /**
   * Get publicIPAddress
   * @return publicIPAddress
   */
  @javax.annotation.Nonnull
  public String getPublicIPAddress() {
    return publicIPAddress;
  }

  public void setPublicIPAddress(String publicIPAddress) {
    this.publicIPAddress = publicIPAddress;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InboundEndpoint inboundEndpoint = (InboundEndpoint) o;
    return Objects.equals(this.backendPort, inboundEndpoint.backendPort) &&
        Objects.equals(this.frontendPort, inboundEndpoint.frontendPort) &&
        Objects.equals(this.name, inboundEndpoint.name) &&
        Objects.equals(this.protocol, inboundEndpoint.protocol) &&
        Objects.equals(this.publicFQDN, inboundEndpoint.publicFQDN) &&
        Objects.equals(this.publicIPAddress, inboundEndpoint.publicIPAddress);
  }

  @Override
  public int hashCode() {
    return Objects.hash(backendPort, frontendPort, name, protocol, publicFQDN, publicIPAddress);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InboundEndpoint {\n");
    sb.append("    backendPort: ").append(toIndentedString(backendPort)).append("\n");
    sb.append("    frontendPort: ").append(toIndentedString(frontendPort)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    protocol: ").append(toIndentedString(protocol)).append("\n");
    sb.append("    publicFQDN: ").append(toIndentedString(publicFQDN)).append("\n");
    sb.append("    publicIPAddress: ").append(toIndentedString(publicIPAddress)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("backendPort");
    openapiFields.add("frontendPort");
    openapiFields.add("name");
    openapiFields.add("protocol");
    openapiFields.add("publicFQDN");
    openapiFields.add("publicIPAddress");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("backendPort");
    openapiRequiredFields.add("frontendPort");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("protocol");
    openapiRequiredFields.add("publicFQDN");
    openapiRequiredFields.add("publicIPAddress");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to InboundEndpoint
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!InboundEndpoint.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InboundEndpoint is not found in the empty JSON string", InboundEndpoint.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!InboundEndpoint.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InboundEndpoint` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : InboundEndpoint.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("protocol").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `protocol` to be a primitive type in the JSON string but got `%s`", jsonObj.get("protocol").toString()));
      }
      // validate the required field `protocol`
      ProtocolEnum.validateJsonElement(jsonObj.get("protocol"));
      if (!jsonObj.get("publicFQDN").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `publicFQDN` to be a primitive type in the JSON string but got `%s`", jsonObj.get("publicFQDN").toString()));
      }
      if (!jsonObj.get("publicIPAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `publicIPAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("publicIPAddress").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InboundEndpoint.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InboundEndpoint' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InboundEndpoint> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InboundEndpoint.class));

       return (TypeAdapter<T>) new TypeAdapter<InboundEndpoint>() {
           @Override
           public void write(JsonWriter out, InboundEndpoint value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InboundEndpoint read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of InboundEndpoint given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of InboundEndpoint
   * @throws IOException if the JSON string is invalid with respect to InboundEndpoint
   */
  public static InboundEndpoint fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InboundEndpoint.class);
  }

  /**
   * Convert an instance of InboundEndpoint to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

