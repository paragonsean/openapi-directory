/*
 * BatchService
 * A client for issuing REST requests to the Azure Batch service.
 *
 * The version of the OpenAPI document: 2017-06-01.5.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * OSDisk
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:59:11.127296-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class OSDisk {
  /**
   * Values are:   none - The caching mode for the disk is not enabled.  readOnly - The caching mode for the disk is read only.  readWrite - The caching mode for the disk is read and write.   The default value for caching is none. For information about the caching options see: https://blogs.msdn.microsoft.com/windowsazurestorage/2012/06/27/exploring-windows-azure-drives-disks-and-images/.
   */
  @JsonAdapter(CachingEnum.Adapter.class)
  public enum CachingEnum {
    NONE("none"),
    
    READ_ONLY("readOnly"),
    
    READ_WRITE("readWrite");

    private String value;

    CachingEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CachingEnum fromValue(String value) {
      for (CachingEnum b : CachingEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CachingEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CachingEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CachingEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CachingEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CachingEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CACHING = "caching";
  @SerializedName(SERIALIZED_NAME_CACHING)
  private CachingEnum caching;

  public static final String SERIALIZED_NAME_IMAGE_URIS = "imageUris";
  @SerializedName(SERIALIZED_NAME_IMAGE_URIS)
  private List<String> imageUris = new ArrayList<>();

  public OSDisk() {
  }

  public OSDisk caching(CachingEnum caching) {
    this.caching = caching;
    return this;
  }

  /**
   * Values are:   none - The caching mode for the disk is not enabled.  readOnly - The caching mode for the disk is read only.  readWrite - The caching mode for the disk is read and write.   The default value for caching is none. For information about the caching options see: https://blogs.msdn.microsoft.com/windowsazurestorage/2012/06/27/exploring-windows-azure-drives-disks-and-images/.
   * @return caching
   */
  @javax.annotation.Nullable
  public CachingEnum getCaching() {
    return caching;
  }

  public void setCaching(CachingEnum caching) {
    this.caching = caching;
  }


  public OSDisk imageUris(List<String> imageUris) {
    this.imageUris = imageUris;
    return this;
  }

  public OSDisk addImageUrisItem(String imageUrisItem) {
    if (this.imageUris == null) {
      this.imageUris = new ArrayList<>();
    }
    this.imageUris.add(imageUrisItem);
    return this;
  }

  /**
   * All the VHDs must be identical and must reside in an Azure Storage account within the same subscription and same region as the Batch account. For best performance, it is recommended that each VHD resides in a separate Azure Storage account. Each VHD can serve up to 20 Windows compute nodes or 40 Linux compute nodes. You must supply enough VHD URIs to satisfy the &#39;targetDedicated&#39; property of the pool. If you do not supply enough VHD URIs, the pool will partially allocate compute nodes, and a resize error will occur.
   * @return imageUris
   */
  @javax.annotation.Nonnull
  public List<String> getImageUris() {
    return imageUris;
  }

  public void setImageUris(List<String> imageUris) {
    this.imageUris = imageUris;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OSDisk osDisk = (OSDisk) o;
    return Objects.equals(this.caching, osDisk.caching) &&
        Objects.equals(this.imageUris, osDisk.imageUris);
  }

  @Override
  public int hashCode() {
    return Objects.hash(caching, imageUris);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OSDisk {\n");
    sb.append("    caching: ").append(toIndentedString(caching)).append("\n");
    sb.append("    imageUris: ").append(toIndentedString(imageUris)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("caching");
    openapiFields.add("imageUris");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("imageUris");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OSDisk
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OSDisk.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OSDisk is not found in the empty JSON string", OSDisk.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OSDisk.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OSDisk` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : OSDisk.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("caching") != null && !jsonObj.get("caching").isJsonNull()) && !jsonObj.get("caching").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `caching` to be a primitive type in the JSON string but got `%s`", jsonObj.get("caching").toString()));
      }
      // validate the optional field `caching`
      if (jsonObj.get("caching") != null && !jsonObj.get("caching").isJsonNull()) {
        CachingEnum.validateJsonElement(jsonObj.get("caching"));
      }
      // ensure the required json array is present
      if (jsonObj.get("imageUris") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("imageUris").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `imageUris` to be an array in the JSON string but got `%s`", jsonObj.get("imageUris").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OSDisk.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OSDisk' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OSDisk> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OSDisk.class));

       return (TypeAdapter<T>) new TypeAdapter<OSDisk>() {
           @Override
           public void write(JsonWriter out, OSDisk value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OSDisk read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OSDisk given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OSDisk
   * @throws IOException if the JSON string is invalid with respect to OSDisk
   */
  public static OSDisk fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OSDisk.class);
  }

  /**
   * Convert an instance of OSDisk to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

