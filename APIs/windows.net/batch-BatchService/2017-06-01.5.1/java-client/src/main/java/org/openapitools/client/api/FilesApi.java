/*
 * BatchService
 * A client for issuing REST requests to the Azure Batch service.
 *
 * The version of the OpenAPI document: 2017-06-01.5.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.BatchError;
import java.io.File;
import org.openapitools.client.model.NodeFileListResult;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class FilesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public FilesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public FilesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for fileDeleteFromComputeNode
     * @param poolId The ID of the pool that contains the compute node. (required)
     * @param nodeId The ID of the compute node from which you want to delete the file. (required)
     * @param filePath The path to the file or directory that you want to delete. (required)
     * @param apiVersion Client API Version. (required)
     * @param recursive Whether to delete children of a directory. If the filePath parameter represents a directory instead of a file, you can set recursive to true to delete the directory and all of the files and subdirectories in it. If recursive is false then the directory must be empty or deletion will fail. (optional)
     * @param timeout The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. (optional, default to 30)
     * @param clientRequestId The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. (optional)
     * @param returnClientRequestId Whether the server should return the client-request-id in the response. (optional, default to false)
     * @param ocpDate The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request to the Batch service was successful. </td><td>  * client-request-id - The client-request-id provided by the client during the request. This will be returned only if the return-client-request-id parameter was set to true. <br>  * request-id - A unique identifier for the request that was made to the Batch service. If a request is consistently failing and you have verified that the request is properly formulated, you may use this value to report the error to Microsoft. In your report, include the value of this request ID, the approximate time that the request was made, the Batch account against which the request was made, and the region that account resides in. <br>  </td></tr>
        <tr><td> 0 </td><td> The error from the Batch service. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fileDeleteFromComputeNodeCall(String poolId, String nodeId, String filePath, String apiVersion, Boolean recursive, Integer timeout, UUID clientRequestId, Boolean returnClientRequestId, String ocpDate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pools/{poolId}/nodes/{nodeId}/files/{filePath}"
            .replace("{" + "poolId" + "}", localVarApiClient.escapeString(poolId.toString()))
            .replace("{" + "nodeId" + "}", localVarApiClient.escapeString(nodeId.toString()))
            .replace("{" + "filePath" + "}", localVarApiClient.escapeString(filePath.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (recursive != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("recursive", recursive));
        }

        if (timeout != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeout", timeout));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (clientRequestId != null) {
            localVarHeaderParams.put("client-request-id", localVarApiClient.parameterToString(clientRequestId));
        }

        if (returnClientRequestId != null) {
            localVarHeaderParams.put("return-client-request-id", localVarApiClient.parameterToString(returnClientRequestId));
        }

        if (ocpDate != null) {
            localVarHeaderParams.put("ocp-date", localVarApiClient.parameterToString(ocpDate));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fileDeleteFromComputeNodeValidateBeforeCall(String poolId, String nodeId, String filePath, String apiVersion, Boolean recursive, Integer timeout, UUID clientRequestId, Boolean returnClientRequestId, String ocpDate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'poolId' is set
        if (poolId == null) {
            throw new ApiException("Missing the required parameter 'poolId' when calling fileDeleteFromComputeNode(Async)");
        }

        // verify the required parameter 'nodeId' is set
        if (nodeId == null) {
            throw new ApiException("Missing the required parameter 'nodeId' when calling fileDeleteFromComputeNode(Async)");
        }

        // verify the required parameter 'filePath' is set
        if (filePath == null) {
            throw new ApiException("Missing the required parameter 'filePath' when calling fileDeleteFromComputeNode(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling fileDeleteFromComputeNode(Async)");
        }

        return fileDeleteFromComputeNodeCall(poolId, nodeId, filePath, apiVersion, recursive, timeout, clientRequestId, returnClientRequestId, ocpDate, _callback);

    }

    /**
     * Deletes the specified file from the compute node.
     * 
     * @param poolId The ID of the pool that contains the compute node. (required)
     * @param nodeId The ID of the compute node from which you want to delete the file. (required)
     * @param filePath The path to the file or directory that you want to delete. (required)
     * @param apiVersion Client API Version. (required)
     * @param recursive Whether to delete children of a directory. If the filePath parameter represents a directory instead of a file, you can set recursive to true to delete the directory and all of the files and subdirectories in it. If recursive is false then the directory must be empty or deletion will fail. (optional)
     * @param timeout The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. (optional, default to 30)
     * @param clientRequestId The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. (optional)
     * @param returnClientRequestId Whether the server should return the client-request-id in the response. (optional, default to false)
     * @param ocpDate The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request to the Batch service was successful. </td><td>  * client-request-id - The client-request-id provided by the client during the request. This will be returned only if the return-client-request-id parameter was set to true. <br>  * request-id - A unique identifier for the request that was made to the Batch service. If a request is consistently failing and you have verified that the request is properly formulated, you may use this value to report the error to Microsoft. In your report, include the value of this request ID, the approximate time that the request was made, the Batch account against which the request was made, and the region that account resides in. <br>  </td></tr>
        <tr><td> 0 </td><td> The error from the Batch service. </td><td>  -  </td></tr>
     </table>
     */
    public void fileDeleteFromComputeNode(String poolId, String nodeId, String filePath, String apiVersion, Boolean recursive, Integer timeout, UUID clientRequestId, Boolean returnClientRequestId, String ocpDate) throws ApiException {
        fileDeleteFromComputeNodeWithHttpInfo(poolId, nodeId, filePath, apiVersion, recursive, timeout, clientRequestId, returnClientRequestId, ocpDate);
    }

    /**
     * Deletes the specified file from the compute node.
     * 
     * @param poolId The ID of the pool that contains the compute node. (required)
     * @param nodeId The ID of the compute node from which you want to delete the file. (required)
     * @param filePath The path to the file or directory that you want to delete. (required)
     * @param apiVersion Client API Version. (required)
     * @param recursive Whether to delete children of a directory. If the filePath parameter represents a directory instead of a file, you can set recursive to true to delete the directory and all of the files and subdirectories in it. If recursive is false then the directory must be empty or deletion will fail. (optional)
     * @param timeout The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. (optional, default to 30)
     * @param clientRequestId The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. (optional)
     * @param returnClientRequestId Whether the server should return the client-request-id in the response. (optional, default to false)
     * @param ocpDate The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request to the Batch service was successful. </td><td>  * client-request-id - The client-request-id provided by the client during the request. This will be returned only if the return-client-request-id parameter was set to true. <br>  * request-id - A unique identifier for the request that was made to the Batch service. If a request is consistently failing and you have verified that the request is properly formulated, you may use this value to report the error to Microsoft. In your report, include the value of this request ID, the approximate time that the request was made, the Batch account against which the request was made, and the region that account resides in. <br>  </td></tr>
        <tr><td> 0 </td><td> The error from the Batch service. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> fileDeleteFromComputeNodeWithHttpInfo(String poolId, String nodeId, String filePath, String apiVersion, Boolean recursive, Integer timeout, UUID clientRequestId, Boolean returnClientRequestId, String ocpDate) throws ApiException {
        okhttp3.Call localVarCall = fileDeleteFromComputeNodeValidateBeforeCall(poolId, nodeId, filePath, apiVersion, recursive, timeout, clientRequestId, returnClientRequestId, ocpDate, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Deletes the specified file from the compute node. (asynchronously)
     * 
     * @param poolId The ID of the pool that contains the compute node. (required)
     * @param nodeId The ID of the compute node from which you want to delete the file. (required)
     * @param filePath The path to the file or directory that you want to delete. (required)
     * @param apiVersion Client API Version. (required)
     * @param recursive Whether to delete children of a directory. If the filePath parameter represents a directory instead of a file, you can set recursive to true to delete the directory and all of the files and subdirectories in it. If recursive is false then the directory must be empty or deletion will fail. (optional)
     * @param timeout The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. (optional, default to 30)
     * @param clientRequestId The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. (optional)
     * @param returnClientRequestId Whether the server should return the client-request-id in the response. (optional, default to false)
     * @param ocpDate The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request to the Batch service was successful. </td><td>  * client-request-id - The client-request-id provided by the client during the request. This will be returned only if the return-client-request-id parameter was set to true. <br>  * request-id - A unique identifier for the request that was made to the Batch service. If a request is consistently failing and you have verified that the request is properly formulated, you may use this value to report the error to Microsoft. In your report, include the value of this request ID, the approximate time that the request was made, the Batch account against which the request was made, and the region that account resides in. <br>  </td></tr>
        <tr><td> 0 </td><td> The error from the Batch service. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fileDeleteFromComputeNodeAsync(String poolId, String nodeId, String filePath, String apiVersion, Boolean recursive, Integer timeout, UUID clientRequestId, Boolean returnClientRequestId, String ocpDate, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = fileDeleteFromComputeNodeValidateBeforeCall(poolId, nodeId, filePath, apiVersion, recursive, timeout, clientRequestId, returnClientRequestId, ocpDate, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for fileDeleteFromTask
     * @param jobId The ID of the job that contains the task. (required)
     * @param taskId The ID of the task whose file you want to delete. (required)
     * @param filePath The path to the task file or directory that you want to delete. (required)
     * @param apiVersion Client API Version. (required)
     * @param recursive Whether to delete children of a directory. If the filePath parameter represents a directory instead of a file, you can set recursive to true to delete the directory and all of the files and subdirectories in it. If recursive is false then the directory must be empty or deletion will fail. (optional)
     * @param timeout The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. (optional, default to 30)
     * @param clientRequestId The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. (optional)
     * @param returnClientRequestId Whether the server should return the client-request-id in the response. (optional, default to false)
     * @param ocpDate The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request to the Batch service was successful. </td><td>  * client-request-id - The client-request-id provided by the client during the request. This will be returned only if the return-client-request-id parameter was set to true. <br>  * request-id - A unique identifier for the request that was made to the Batch service. If a request is consistently failing and you have verified that the request is properly formulated, you may use this value to report the error to Microsoft. In your report, include the value of this request ID, the approximate time that the request was made, the Batch account against which the request was made, and the region that account resides in. <br>  </td></tr>
        <tr><td> 0 </td><td> The error from the Batch service. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fileDeleteFromTaskCall(String jobId, String taskId, String filePath, String apiVersion, Boolean recursive, Integer timeout, UUID clientRequestId, Boolean returnClientRequestId, String ocpDate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/jobs/{jobId}/tasks/{taskId}/files/{filePath}"
            .replace("{" + "jobId" + "}", localVarApiClient.escapeString(jobId.toString()))
            .replace("{" + "taskId" + "}", localVarApiClient.escapeString(taskId.toString()))
            .replace("{" + "filePath" + "}", localVarApiClient.escapeString(filePath.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (recursive != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("recursive", recursive));
        }

        if (timeout != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeout", timeout));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (clientRequestId != null) {
            localVarHeaderParams.put("client-request-id", localVarApiClient.parameterToString(clientRequestId));
        }

        if (returnClientRequestId != null) {
            localVarHeaderParams.put("return-client-request-id", localVarApiClient.parameterToString(returnClientRequestId));
        }

        if (ocpDate != null) {
            localVarHeaderParams.put("ocp-date", localVarApiClient.parameterToString(ocpDate));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fileDeleteFromTaskValidateBeforeCall(String jobId, String taskId, String filePath, String apiVersion, Boolean recursive, Integer timeout, UUID clientRequestId, Boolean returnClientRequestId, String ocpDate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'jobId' is set
        if (jobId == null) {
            throw new ApiException("Missing the required parameter 'jobId' when calling fileDeleteFromTask(Async)");
        }

        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling fileDeleteFromTask(Async)");
        }

        // verify the required parameter 'filePath' is set
        if (filePath == null) {
            throw new ApiException("Missing the required parameter 'filePath' when calling fileDeleteFromTask(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling fileDeleteFromTask(Async)");
        }

        return fileDeleteFromTaskCall(jobId, taskId, filePath, apiVersion, recursive, timeout, clientRequestId, returnClientRequestId, ocpDate, _callback);

    }

    /**
     * Deletes the specified task file from the compute node where the task ran.
     * 
     * @param jobId The ID of the job that contains the task. (required)
     * @param taskId The ID of the task whose file you want to delete. (required)
     * @param filePath The path to the task file or directory that you want to delete. (required)
     * @param apiVersion Client API Version. (required)
     * @param recursive Whether to delete children of a directory. If the filePath parameter represents a directory instead of a file, you can set recursive to true to delete the directory and all of the files and subdirectories in it. If recursive is false then the directory must be empty or deletion will fail. (optional)
     * @param timeout The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. (optional, default to 30)
     * @param clientRequestId The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. (optional)
     * @param returnClientRequestId Whether the server should return the client-request-id in the response. (optional, default to false)
     * @param ocpDate The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request to the Batch service was successful. </td><td>  * client-request-id - The client-request-id provided by the client during the request. This will be returned only if the return-client-request-id parameter was set to true. <br>  * request-id - A unique identifier for the request that was made to the Batch service. If a request is consistently failing and you have verified that the request is properly formulated, you may use this value to report the error to Microsoft. In your report, include the value of this request ID, the approximate time that the request was made, the Batch account against which the request was made, and the region that account resides in. <br>  </td></tr>
        <tr><td> 0 </td><td> The error from the Batch service. </td><td>  -  </td></tr>
     </table>
     */
    public void fileDeleteFromTask(String jobId, String taskId, String filePath, String apiVersion, Boolean recursive, Integer timeout, UUID clientRequestId, Boolean returnClientRequestId, String ocpDate) throws ApiException {
        fileDeleteFromTaskWithHttpInfo(jobId, taskId, filePath, apiVersion, recursive, timeout, clientRequestId, returnClientRequestId, ocpDate);
    }

    /**
     * Deletes the specified task file from the compute node where the task ran.
     * 
     * @param jobId The ID of the job that contains the task. (required)
     * @param taskId The ID of the task whose file you want to delete. (required)
     * @param filePath The path to the task file or directory that you want to delete. (required)
     * @param apiVersion Client API Version. (required)
     * @param recursive Whether to delete children of a directory. If the filePath parameter represents a directory instead of a file, you can set recursive to true to delete the directory and all of the files and subdirectories in it. If recursive is false then the directory must be empty or deletion will fail. (optional)
     * @param timeout The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. (optional, default to 30)
     * @param clientRequestId The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. (optional)
     * @param returnClientRequestId Whether the server should return the client-request-id in the response. (optional, default to false)
     * @param ocpDate The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request to the Batch service was successful. </td><td>  * client-request-id - The client-request-id provided by the client during the request. This will be returned only if the return-client-request-id parameter was set to true. <br>  * request-id - A unique identifier for the request that was made to the Batch service. If a request is consistently failing and you have verified that the request is properly formulated, you may use this value to report the error to Microsoft. In your report, include the value of this request ID, the approximate time that the request was made, the Batch account against which the request was made, and the region that account resides in. <br>  </td></tr>
        <tr><td> 0 </td><td> The error from the Batch service. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> fileDeleteFromTaskWithHttpInfo(String jobId, String taskId, String filePath, String apiVersion, Boolean recursive, Integer timeout, UUID clientRequestId, Boolean returnClientRequestId, String ocpDate) throws ApiException {
        okhttp3.Call localVarCall = fileDeleteFromTaskValidateBeforeCall(jobId, taskId, filePath, apiVersion, recursive, timeout, clientRequestId, returnClientRequestId, ocpDate, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Deletes the specified task file from the compute node where the task ran. (asynchronously)
     * 
     * @param jobId The ID of the job that contains the task. (required)
     * @param taskId The ID of the task whose file you want to delete. (required)
     * @param filePath The path to the task file or directory that you want to delete. (required)
     * @param apiVersion Client API Version. (required)
     * @param recursive Whether to delete children of a directory. If the filePath parameter represents a directory instead of a file, you can set recursive to true to delete the directory and all of the files and subdirectories in it. If recursive is false then the directory must be empty or deletion will fail. (optional)
     * @param timeout The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. (optional, default to 30)
     * @param clientRequestId The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. (optional)
     * @param returnClientRequestId Whether the server should return the client-request-id in the response. (optional, default to false)
     * @param ocpDate The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request to the Batch service was successful. </td><td>  * client-request-id - The client-request-id provided by the client during the request. This will be returned only if the return-client-request-id parameter was set to true. <br>  * request-id - A unique identifier for the request that was made to the Batch service. If a request is consistently failing and you have verified that the request is properly formulated, you may use this value to report the error to Microsoft. In your report, include the value of this request ID, the approximate time that the request was made, the Batch account against which the request was made, and the region that account resides in. <br>  </td></tr>
        <tr><td> 0 </td><td> The error from the Batch service. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fileDeleteFromTaskAsync(String jobId, String taskId, String filePath, String apiVersion, Boolean recursive, Integer timeout, UUID clientRequestId, Boolean returnClientRequestId, String ocpDate, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = fileDeleteFromTaskValidateBeforeCall(jobId, taskId, filePath, apiVersion, recursive, timeout, clientRequestId, returnClientRequestId, ocpDate, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for fileGetFromComputeNode
     * @param poolId The ID of the pool that contains the compute node. (required)
     * @param nodeId The ID of the compute node that contains the file. (required)
     * @param filePath The path to the compute node file that you want to get the content of. (required)
     * @param apiVersion Client API Version. (required)
     * @param timeout The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. (optional, default to 30)
     * @param clientRequestId The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. (optional)
     * @param returnClientRequestId Whether the server should return the client-request-id in the response. (optional, default to false)
     * @param ocpDate The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly. (optional)
     * @param ocpRange The byte range to be retrieved. The default is to retrieve the entire file. The format is bytes&#x3D;startRange-endRange. (optional)
     * @param ifModifiedSince A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time. (optional)
     * @param ifUnmodifiedSince A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The file content. </td><td>  * ocp-batch-file-mode - The file mode attribute in octal format. <br>  * ETag - The ETag HTTP response header. This is an opaque string. You can use it to detect whether the resource has changed between requests. In particular, you can pass the ETag to one of the If-Modified-Since, If-Unmodified-Since, If-Match or If-None-Match headers. <br>  * client-request-id - The client-request-id provided by the client during the request. This will be returned only if the return-client-request-id parameter was set to true. <br>  * ocp-batch-file-isdirectory - Whether the object represents a directory. <br>  * ocp-batch-file-url - The URL of the file. <br>  * Last-Modified - The time at which the resource was last modified. <br>  * Content-Length - The length of the file. <br>  * request-id - A unique identifier for the request that was made to the Batch service. If a request is consistently failing and you have verified that the request is properly formulated, you may use this value to report the error to Microsoft. In your report, include the value of this request ID, the approximate time that the request was made, the Batch account against which the request was made, and the region that account resides in. <br>  * ocp-creation-time - The file creation time. <br>  * Content-Type - The content type of the file. <br>  </td></tr>
        <tr><td> 0 </td><td> The error from the Batch service. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fileGetFromComputeNodeCall(String poolId, String nodeId, String filePath, String apiVersion, Integer timeout, UUID clientRequestId, Boolean returnClientRequestId, String ocpDate, String ocpRange, String ifModifiedSince, String ifUnmodifiedSince, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pools/{poolId}/nodes/{nodeId}/files/{filePath}"
            .replace("{" + "poolId" + "}", localVarApiClient.escapeString(poolId.toString()))
            .replace("{" + "nodeId" + "}", localVarApiClient.escapeString(nodeId.toString()))
            .replace("{" + "filePath" + "}", localVarApiClient.escapeString(filePath.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (timeout != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeout", timeout));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (clientRequestId != null) {
            localVarHeaderParams.put("client-request-id", localVarApiClient.parameterToString(clientRequestId));
        }

        if (returnClientRequestId != null) {
            localVarHeaderParams.put("return-client-request-id", localVarApiClient.parameterToString(returnClientRequestId));
        }

        if (ocpDate != null) {
            localVarHeaderParams.put("ocp-date", localVarApiClient.parameterToString(ocpDate));
        }

        if (ocpRange != null) {
            localVarHeaderParams.put("ocp-range", localVarApiClient.parameterToString(ocpRange));
        }

        if (ifModifiedSince != null) {
            localVarHeaderParams.put("If-Modified-Since", localVarApiClient.parameterToString(ifModifiedSince));
        }

        if (ifUnmodifiedSince != null) {
            localVarHeaderParams.put("If-Unmodified-Since", localVarApiClient.parameterToString(ifUnmodifiedSince));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fileGetFromComputeNodeValidateBeforeCall(String poolId, String nodeId, String filePath, String apiVersion, Integer timeout, UUID clientRequestId, Boolean returnClientRequestId, String ocpDate, String ocpRange, String ifModifiedSince, String ifUnmodifiedSince, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'poolId' is set
        if (poolId == null) {
            throw new ApiException("Missing the required parameter 'poolId' when calling fileGetFromComputeNode(Async)");
        }

        // verify the required parameter 'nodeId' is set
        if (nodeId == null) {
            throw new ApiException("Missing the required parameter 'nodeId' when calling fileGetFromComputeNode(Async)");
        }

        // verify the required parameter 'filePath' is set
        if (filePath == null) {
            throw new ApiException("Missing the required parameter 'filePath' when calling fileGetFromComputeNode(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling fileGetFromComputeNode(Async)");
        }

        return fileGetFromComputeNodeCall(poolId, nodeId, filePath, apiVersion, timeout, clientRequestId, returnClientRequestId, ocpDate, ocpRange, ifModifiedSince, ifUnmodifiedSince, _callback);

    }

    /**
     * 
     * Returns the content of the specified compute node file.
     * @param poolId The ID of the pool that contains the compute node. (required)
     * @param nodeId The ID of the compute node that contains the file. (required)
     * @param filePath The path to the compute node file that you want to get the content of. (required)
     * @param apiVersion Client API Version. (required)
     * @param timeout The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. (optional, default to 30)
     * @param clientRequestId The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. (optional)
     * @param returnClientRequestId Whether the server should return the client-request-id in the response. (optional, default to false)
     * @param ocpDate The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly. (optional)
     * @param ocpRange The byte range to be retrieved. The default is to retrieve the entire file. The format is bytes&#x3D;startRange-endRange. (optional)
     * @param ifModifiedSince A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time. (optional)
     * @param ifUnmodifiedSince A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time. (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The file content. </td><td>  * ocp-batch-file-mode - The file mode attribute in octal format. <br>  * ETag - The ETag HTTP response header. This is an opaque string. You can use it to detect whether the resource has changed between requests. In particular, you can pass the ETag to one of the If-Modified-Since, If-Unmodified-Since, If-Match or If-None-Match headers. <br>  * client-request-id - The client-request-id provided by the client during the request. This will be returned only if the return-client-request-id parameter was set to true. <br>  * ocp-batch-file-isdirectory - Whether the object represents a directory. <br>  * ocp-batch-file-url - The URL of the file. <br>  * Last-Modified - The time at which the resource was last modified. <br>  * Content-Length - The length of the file. <br>  * request-id - A unique identifier for the request that was made to the Batch service. If a request is consistently failing and you have verified that the request is properly formulated, you may use this value to report the error to Microsoft. In your report, include the value of this request ID, the approximate time that the request was made, the Batch account against which the request was made, and the region that account resides in. <br>  * ocp-creation-time - The file creation time. <br>  * Content-Type - The content type of the file. <br>  </td></tr>
        <tr><td> 0 </td><td> The error from the Batch service. </td><td>  -  </td></tr>
     </table>
     */
    public File fileGetFromComputeNode(String poolId, String nodeId, String filePath, String apiVersion, Integer timeout, UUID clientRequestId, Boolean returnClientRequestId, String ocpDate, String ocpRange, String ifModifiedSince, String ifUnmodifiedSince) throws ApiException {
        ApiResponse<File> localVarResp = fileGetFromComputeNodeWithHttpInfo(poolId, nodeId, filePath, apiVersion, timeout, clientRequestId, returnClientRequestId, ocpDate, ocpRange, ifModifiedSince, ifUnmodifiedSince);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns the content of the specified compute node file.
     * @param poolId The ID of the pool that contains the compute node. (required)
     * @param nodeId The ID of the compute node that contains the file. (required)
     * @param filePath The path to the compute node file that you want to get the content of. (required)
     * @param apiVersion Client API Version. (required)
     * @param timeout The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. (optional, default to 30)
     * @param clientRequestId The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. (optional)
     * @param returnClientRequestId Whether the server should return the client-request-id in the response. (optional, default to false)
     * @param ocpDate The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly. (optional)
     * @param ocpRange The byte range to be retrieved. The default is to retrieve the entire file. The format is bytes&#x3D;startRange-endRange. (optional)
     * @param ifModifiedSince A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time. (optional)
     * @param ifUnmodifiedSince A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time. (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The file content. </td><td>  * ocp-batch-file-mode - The file mode attribute in octal format. <br>  * ETag - The ETag HTTP response header. This is an opaque string. You can use it to detect whether the resource has changed between requests. In particular, you can pass the ETag to one of the If-Modified-Since, If-Unmodified-Since, If-Match or If-None-Match headers. <br>  * client-request-id - The client-request-id provided by the client during the request. This will be returned only if the return-client-request-id parameter was set to true. <br>  * ocp-batch-file-isdirectory - Whether the object represents a directory. <br>  * ocp-batch-file-url - The URL of the file. <br>  * Last-Modified - The time at which the resource was last modified. <br>  * Content-Length - The length of the file. <br>  * request-id - A unique identifier for the request that was made to the Batch service. If a request is consistently failing and you have verified that the request is properly formulated, you may use this value to report the error to Microsoft. In your report, include the value of this request ID, the approximate time that the request was made, the Batch account against which the request was made, and the region that account resides in. <br>  * ocp-creation-time - The file creation time. <br>  * Content-Type - The content type of the file. <br>  </td></tr>
        <tr><td> 0 </td><td> The error from the Batch service. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> fileGetFromComputeNodeWithHttpInfo(String poolId, String nodeId, String filePath, String apiVersion, Integer timeout, UUID clientRequestId, Boolean returnClientRequestId, String ocpDate, String ocpRange, String ifModifiedSince, String ifUnmodifiedSince) throws ApiException {
        okhttp3.Call localVarCall = fileGetFromComputeNodeValidateBeforeCall(poolId, nodeId, filePath, apiVersion, timeout, clientRequestId, returnClientRequestId, ocpDate, ocpRange, ifModifiedSince, ifUnmodifiedSince, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns the content of the specified compute node file.
     * @param poolId The ID of the pool that contains the compute node. (required)
     * @param nodeId The ID of the compute node that contains the file. (required)
     * @param filePath The path to the compute node file that you want to get the content of. (required)
     * @param apiVersion Client API Version. (required)
     * @param timeout The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. (optional, default to 30)
     * @param clientRequestId The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. (optional)
     * @param returnClientRequestId Whether the server should return the client-request-id in the response. (optional, default to false)
     * @param ocpDate The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly. (optional)
     * @param ocpRange The byte range to be retrieved. The default is to retrieve the entire file. The format is bytes&#x3D;startRange-endRange. (optional)
     * @param ifModifiedSince A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time. (optional)
     * @param ifUnmodifiedSince A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The file content. </td><td>  * ocp-batch-file-mode - The file mode attribute in octal format. <br>  * ETag - The ETag HTTP response header. This is an opaque string. You can use it to detect whether the resource has changed between requests. In particular, you can pass the ETag to one of the If-Modified-Since, If-Unmodified-Since, If-Match or If-None-Match headers. <br>  * client-request-id - The client-request-id provided by the client during the request. This will be returned only if the return-client-request-id parameter was set to true. <br>  * ocp-batch-file-isdirectory - Whether the object represents a directory. <br>  * ocp-batch-file-url - The URL of the file. <br>  * Last-Modified - The time at which the resource was last modified. <br>  * Content-Length - The length of the file. <br>  * request-id - A unique identifier for the request that was made to the Batch service. If a request is consistently failing and you have verified that the request is properly formulated, you may use this value to report the error to Microsoft. In your report, include the value of this request ID, the approximate time that the request was made, the Batch account against which the request was made, and the region that account resides in. <br>  * ocp-creation-time - The file creation time. <br>  * Content-Type - The content type of the file. <br>  </td></tr>
        <tr><td> 0 </td><td> The error from the Batch service. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fileGetFromComputeNodeAsync(String poolId, String nodeId, String filePath, String apiVersion, Integer timeout, UUID clientRequestId, Boolean returnClientRequestId, String ocpDate, String ocpRange, String ifModifiedSince, String ifUnmodifiedSince, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = fileGetFromComputeNodeValidateBeforeCall(poolId, nodeId, filePath, apiVersion, timeout, clientRequestId, returnClientRequestId, ocpDate, ocpRange, ifModifiedSince, ifUnmodifiedSince, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fileGetFromTask
     * @param jobId The ID of the job that contains the task. (required)
     * @param taskId The ID of the task whose file you want to retrieve. (required)
     * @param filePath The path to the task file that you want to get the content of. (required)
     * @param apiVersion Client API Version. (required)
     * @param timeout The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. (optional, default to 30)
     * @param clientRequestId The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. (optional)
     * @param returnClientRequestId Whether the server should return the client-request-id in the response. (optional, default to false)
     * @param ocpDate The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly. (optional)
     * @param ocpRange The byte range to be retrieved. The default is to retrieve the entire file. The format is bytes&#x3D;startRange-endRange. (optional)
     * @param ifModifiedSince A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time. (optional)
     * @param ifUnmodifiedSince A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A response containing the file content. </td><td>  * ocp-batch-file-mode - The file mode attribute in octal format. <br>  * ETag - The ETag HTTP response header. This is an opaque string. You can use it to detect whether the resource has changed between requests. In particular, you can pass the ETag to one of the If-Modified-Since, If-Unmodified-Since, If-Match or If-None-Match headers. <br>  * client-request-id - The client-request-id provided by the client during the request. This will be returned only if the return-client-request-id parameter was set to true. <br>  * ocp-batch-file-isdirectory - Whether the object represents a directory. <br>  * ocp-batch-file-url - The URL of the file. <br>  * Last-Modified - The time at which the resource was last modified. <br>  * Content-Length - The length of the file. <br>  * request-id - A unique identifier for the request that was made to the Batch service. If a request is consistently failing and you have verified that the request is properly formulated, you may use this value to report the error to Microsoft. In your report, include the value of this request ID, the approximate time that the request was made, the Batch account against which the request was made, and the region that account resides in. <br>  * ocp-creation-time - The file creation time. <br>  * Content-Type - The content type of the file. <br>  </td></tr>
        <tr><td> 0 </td><td> The error from the Batch service. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fileGetFromTaskCall(String jobId, String taskId, String filePath, String apiVersion, Integer timeout, UUID clientRequestId, Boolean returnClientRequestId, String ocpDate, String ocpRange, String ifModifiedSince, String ifUnmodifiedSince, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/jobs/{jobId}/tasks/{taskId}/files/{filePath}"
            .replace("{" + "jobId" + "}", localVarApiClient.escapeString(jobId.toString()))
            .replace("{" + "taskId" + "}", localVarApiClient.escapeString(taskId.toString()))
            .replace("{" + "filePath" + "}", localVarApiClient.escapeString(filePath.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (timeout != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeout", timeout));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (clientRequestId != null) {
            localVarHeaderParams.put("client-request-id", localVarApiClient.parameterToString(clientRequestId));
        }

        if (returnClientRequestId != null) {
            localVarHeaderParams.put("return-client-request-id", localVarApiClient.parameterToString(returnClientRequestId));
        }

        if (ocpDate != null) {
            localVarHeaderParams.put("ocp-date", localVarApiClient.parameterToString(ocpDate));
        }

        if (ocpRange != null) {
            localVarHeaderParams.put("ocp-range", localVarApiClient.parameterToString(ocpRange));
        }

        if (ifModifiedSince != null) {
            localVarHeaderParams.put("If-Modified-Since", localVarApiClient.parameterToString(ifModifiedSince));
        }

        if (ifUnmodifiedSince != null) {
            localVarHeaderParams.put("If-Unmodified-Since", localVarApiClient.parameterToString(ifUnmodifiedSince));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fileGetFromTaskValidateBeforeCall(String jobId, String taskId, String filePath, String apiVersion, Integer timeout, UUID clientRequestId, Boolean returnClientRequestId, String ocpDate, String ocpRange, String ifModifiedSince, String ifUnmodifiedSince, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'jobId' is set
        if (jobId == null) {
            throw new ApiException("Missing the required parameter 'jobId' when calling fileGetFromTask(Async)");
        }

        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling fileGetFromTask(Async)");
        }

        // verify the required parameter 'filePath' is set
        if (filePath == null) {
            throw new ApiException("Missing the required parameter 'filePath' when calling fileGetFromTask(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling fileGetFromTask(Async)");
        }

        return fileGetFromTaskCall(jobId, taskId, filePath, apiVersion, timeout, clientRequestId, returnClientRequestId, ocpDate, ocpRange, ifModifiedSince, ifUnmodifiedSince, _callback);

    }

    /**
     * 
     * Returns the content of the specified task file.
     * @param jobId The ID of the job that contains the task. (required)
     * @param taskId The ID of the task whose file you want to retrieve. (required)
     * @param filePath The path to the task file that you want to get the content of. (required)
     * @param apiVersion Client API Version. (required)
     * @param timeout The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. (optional, default to 30)
     * @param clientRequestId The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. (optional)
     * @param returnClientRequestId Whether the server should return the client-request-id in the response. (optional, default to false)
     * @param ocpDate The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly. (optional)
     * @param ocpRange The byte range to be retrieved. The default is to retrieve the entire file. The format is bytes&#x3D;startRange-endRange. (optional)
     * @param ifModifiedSince A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time. (optional)
     * @param ifUnmodifiedSince A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time. (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A response containing the file content. </td><td>  * ocp-batch-file-mode - The file mode attribute in octal format. <br>  * ETag - The ETag HTTP response header. This is an opaque string. You can use it to detect whether the resource has changed between requests. In particular, you can pass the ETag to one of the If-Modified-Since, If-Unmodified-Since, If-Match or If-None-Match headers. <br>  * client-request-id - The client-request-id provided by the client during the request. This will be returned only if the return-client-request-id parameter was set to true. <br>  * ocp-batch-file-isdirectory - Whether the object represents a directory. <br>  * ocp-batch-file-url - The URL of the file. <br>  * Last-Modified - The time at which the resource was last modified. <br>  * Content-Length - The length of the file. <br>  * request-id - A unique identifier for the request that was made to the Batch service. If a request is consistently failing and you have verified that the request is properly formulated, you may use this value to report the error to Microsoft. In your report, include the value of this request ID, the approximate time that the request was made, the Batch account against which the request was made, and the region that account resides in. <br>  * ocp-creation-time - The file creation time. <br>  * Content-Type - The content type of the file. <br>  </td></tr>
        <tr><td> 0 </td><td> The error from the Batch service. </td><td>  -  </td></tr>
     </table>
     */
    public File fileGetFromTask(String jobId, String taskId, String filePath, String apiVersion, Integer timeout, UUID clientRequestId, Boolean returnClientRequestId, String ocpDate, String ocpRange, String ifModifiedSince, String ifUnmodifiedSince) throws ApiException {
        ApiResponse<File> localVarResp = fileGetFromTaskWithHttpInfo(jobId, taskId, filePath, apiVersion, timeout, clientRequestId, returnClientRequestId, ocpDate, ocpRange, ifModifiedSince, ifUnmodifiedSince);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns the content of the specified task file.
     * @param jobId The ID of the job that contains the task. (required)
     * @param taskId The ID of the task whose file you want to retrieve. (required)
     * @param filePath The path to the task file that you want to get the content of. (required)
     * @param apiVersion Client API Version. (required)
     * @param timeout The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. (optional, default to 30)
     * @param clientRequestId The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. (optional)
     * @param returnClientRequestId Whether the server should return the client-request-id in the response. (optional, default to false)
     * @param ocpDate The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly. (optional)
     * @param ocpRange The byte range to be retrieved. The default is to retrieve the entire file. The format is bytes&#x3D;startRange-endRange. (optional)
     * @param ifModifiedSince A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time. (optional)
     * @param ifUnmodifiedSince A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time. (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A response containing the file content. </td><td>  * ocp-batch-file-mode - The file mode attribute in octal format. <br>  * ETag - The ETag HTTP response header. This is an opaque string. You can use it to detect whether the resource has changed between requests. In particular, you can pass the ETag to one of the If-Modified-Since, If-Unmodified-Since, If-Match or If-None-Match headers. <br>  * client-request-id - The client-request-id provided by the client during the request. This will be returned only if the return-client-request-id parameter was set to true. <br>  * ocp-batch-file-isdirectory - Whether the object represents a directory. <br>  * ocp-batch-file-url - The URL of the file. <br>  * Last-Modified - The time at which the resource was last modified. <br>  * Content-Length - The length of the file. <br>  * request-id - A unique identifier for the request that was made to the Batch service. If a request is consistently failing and you have verified that the request is properly formulated, you may use this value to report the error to Microsoft. In your report, include the value of this request ID, the approximate time that the request was made, the Batch account against which the request was made, and the region that account resides in. <br>  * ocp-creation-time - The file creation time. <br>  * Content-Type - The content type of the file. <br>  </td></tr>
        <tr><td> 0 </td><td> The error from the Batch service. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> fileGetFromTaskWithHttpInfo(String jobId, String taskId, String filePath, String apiVersion, Integer timeout, UUID clientRequestId, Boolean returnClientRequestId, String ocpDate, String ocpRange, String ifModifiedSince, String ifUnmodifiedSince) throws ApiException {
        okhttp3.Call localVarCall = fileGetFromTaskValidateBeforeCall(jobId, taskId, filePath, apiVersion, timeout, clientRequestId, returnClientRequestId, ocpDate, ocpRange, ifModifiedSince, ifUnmodifiedSince, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns the content of the specified task file.
     * @param jobId The ID of the job that contains the task. (required)
     * @param taskId The ID of the task whose file you want to retrieve. (required)
     * @param filePath The path to the task file that you want to get the content of. (required)
     * @param apiVersion Client API Version. (required)
     * @param timeout The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. (optional, default to 30)
     * @param clientRequestId The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. (optional)
     * @param returnClientRequestId Whether the server should return the client-request-id in the response. (optional, default to false)
     * @param ocpDate The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly. (optional)
     * @param ocpRange The byte range to be retrieved. The default is to retrieve the entire file. The format is bytes&#x3D;startRange-endRange. (optional)
     * @param ifModifiedSince A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time. (optional)
     * @param ifUnmodifiedSince A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A response containing the file content. </td><td>  * ocp-batch-file-mode - The file mode attribute in octal format. <br>  * ETag - The ETag HTTP response header. This is an opaque string. You can use it to detect whether the resource has changed between requests. In particular, you can pass the ETag to one of the If-Modified-Since, If-Unmodified-Since, If-Match or If-None-Match headers. <br>  * client-request-id - The client-request-id provided by the client during the request. This will be returned only if the return-client-request-id parameter was set to true. <br>  * ocp-batch-file-isdirectory - Whether the object represents a directory. <br>  * ocp-batch-file-url - The URL of the file. <br>  * Last-Modified - The time at which the resource was last modified. <br>  * Content-Length - The length of the file. <br>  * request-id - A unique identifier for the request that was made to the Batch service. If a request is consistently failing and you have verified that the request is properly formulated, you may use this value to report the error to Microsoft. In your report, include the value of this request ID, the approximate time that the request was made, the Batch account against which the request was made, and the region that account resides in. <br>  * ocp-creation-time - The file creation time. <br>  * Content-Type - The content type of the file. <br>  </td></tr>
        <tr><td> 0 </td><td> The error from the Batch service. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fileGetFromTaskAsync(String jobId, String taskId, String filePath, String apiVersion, Integer timeout, UUID clientRequestId, Boolean returnClientRequestId, String ocpDate, String ocpRange, String ifModifiedSince, String ifUnmodifiedSince, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = fileGetFromTaskValidateBeforeCall(jobId, taskId, filePath, apiVersion, timeout, clientRequestId, returnClientRequestId, ocpDate, ocpRange, ifModifiedSince, ifUnmodifiedSince, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fileGetPropertiesFromComputeNode
     * @param poolId The ID of the pool that contains the compute node. (required)
     * @param nodeId The ID of the compute node that contains the file. (required)
     * @param filePath The path to the compute node file that you want to get the properties of. (required)
     * @param apiVersion Client API Version. (required)
     * @param timeout The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. (optional, default to 30)
     * @param clientRequestId The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. (optional)
     * @param returnClientRequestId Whether the server should return the client-request-id in the response. (optional, default to false)
     * @param ocpDate The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly. (optional)
     * @param ifModifiedSince A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time. (optional)
     * @param ifUnmodifiedSince A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A response containing the file properties. </td><td>  * ocp-batch-file-mode - The file mode attribute in octal format. <br>  * ETag - The ETag HTTP response header. This is an opaque string. You can use it to detect whether the resource has changed between requests. In particular, you can pass the ETag to one of the If-Modified-Since, If-Unmodified-Since, If-Match or If-None-Match headers. <br>  * client-request-id - The client-request-id provided by the client during the request. This will be returned only if the return-client-request-id parameter was set to true. <br>  * ocp-batch-file-isdirectory - Whether the object represents a directory. <br>  * ocp-batch-file-url - The URL of the file. <br>  * Last-Modified - The time at which the resource was last modified. <br>  * Content-Length - The length of the file. <br>  * request-id - A unique identifier for the request that was made to the Batch service. If a request is consistently failing and you have verified that the request is properly formulated, you may use this value to report the error to Microsoft. In your report, include the value of this request ID, the approximate time that the request was made, the Batch account against which the request was made, and the region that account resides in. <br>  * ocp-creation-time - The file creation time. <br>  * Content-Type - The content type of the file. <br>  </td></tr>
        <tr><td> 0 </td><td> The error from the Batch service. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fileGetPropertiesFromComputeNodeCall(String poolId, String nodeId, String filePath, String apiVersion, Integer timeout, UUID clientRequestId, Boolean returnClientRequestId, String ocpDate, String ifModifiedSince, String ifUnmodifiedSince, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pools/{poolId}/nodes/{nodeId}/files/{filePath}"
            .replace("{" + "poolId" + "}", localVarApiClient.escapeString(poolId.toString()))
            .replace("{" + "nodeId" + "}", localVarApiClient.escapeString(nodeId.toString()))
            .replace("{" + "filePath" + "}", localVarApiClient.escapeString(filePath.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (timeout != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeout", timeout));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (clientRequestId != null) {
            localVarHeaderParams.put("client-request-id", localVarApiClient.parameterToString(clientRequestId));
        }

        if (returnClientRequestId != null) {
            localVarHeaderParams.put("return-client-request-id", localVarApiClient.parameterToString(returnClientRequestId));
        }

        if (ocpDate != null) {
            localVarHeaderParams.put("ocp-date", localVarApiClient.parameterToString(ocpDate));
        }

        if (ifModifiedSince != null) {
            localVarHeaderParams.put("If-Modified-Since", localVarApiClient.parameterToString(ifModifiedSince));
        }

        if (ifUnmodifiedSince != null) {
            localVarHeaderParams.put("If-Unmodified-Since", localVarApiClient.parameterToString(ifUnmodifiedSince));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "HEAD", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fileGetPropertiesFromComputeNodeValidateBeforeCall(String poolId, String nodeId, String filePath, String apiVersion, Integer timeout, UUID clientRequestId, Boolean returnClientRequestId, String ocpDate, String ifModifiedSince, String ifUnmodifiedSince, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'poolId' is set
        if (poolId == null) {
            throw new ApiException("Missing the required parameter 'poolId' when calling fileGetPropertiesFromComputeNode(Async)");
        }

        // verify the required parameter 'nodeId' is set
        if (nodeId == null) {
            throw new ApiException("Missing the required parameter 'nodeId' when calling fileGetPropertiesFromComputeNode(Async)");
        }

        // verify the required parameter 'filePath' is set
        if (filePath == null) {
            throw new ApiException("Missing the required parameter 'filePath' when calling fileGetPropertiesFromComputeNode(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling fileGetPropertiesFromComputeNode(Async)");
        }

        return fileGetPropertiesFromComputeNodeCall(poolId, nodeId, filePath, apiVersion, timeout, clientRequestId, returnClientRequestId, ocpDate, ifModifiedSince, ifUnmodifiedSince, _callback);

    }

    /**
     * 
     * Gets the properties of the specified compute node file.
     * @param poolId The ID of the pool that contains the compute node. (required)
     * @param nodeId The ID of the compute node that contains the file. (required)
     * @param filePath The path to the compute node file that you want to get the properties of. (required)
     * @param apiVersion Client API Version. (required)
     * @param timeout The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. (optional, default to 30)
     * @param clientRequestId The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. (optional)
     * @param returnClientRequestId Whether the server should return the client-request-id in the response. (optional, default to false)
     * @param ocpDate The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly. (optional)
     * @param ifModifiedSince A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time. (optional)
     * @param ifUnmodifiedSince A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A response containing the file properties. </td><td>  * ocp-batch-file-mode - The file mode attribute in octal format. <br>  * ETag - The ETag HTTP response header. This is an opaque string. You can use it to detect whether the resource has changed between requests. In particular, you can pass the ETag to one of the If-Modified-Since, If-Unmodified-Since, If-Match or If-None-Match headers. <br>  * client-request-id - The client-request-id provided by the client during the request. This will be returned only if the return-client-request-id parameter was set to true. <br>  * ocp-batch-file-isdirectory - Whether the object represents a directory. <br>  * ocp-batch-file-url - The URL of the file. <br>  * Last-Modified - The time at which the resource was last modified. <br>  * Content-Length - The length of the file. <br>  * request-id - A unique identifier for the request that was made to the Batch service. If a request is consistently failing and you have verified that the request is properly formulated, you may use this value to report the error to Microsoft. In your report, include the value of this request ID, the approximate time that the request was made, the Batch account against which the request was made, and the region that account resides in. <br>  * ocp-creation-time - The file creation time. <br>  * Content-Type - The content type of the file. <br>  </td></tr>
        <tr><td> 0 </td><td> The error from the Batch service. </td><td>  -  </td></tr>
     </table>
     */
    public void fileGetPropertiesFromComputeNode(String poolId, String nodeId, String filePath, String apiVersion, Integer timeout, UUID clientRequestId, Boolean returnClientRequestId, String ocpDate, String ifModifiedSince, String ifUnmodifiedSince) throws ApiException {
        fileGetPropertiesFromComputeNodeWithHttpInfo(poolId, nodeId, filePath, apiVersion, timeout, clientRequestId, returnClientRequestId, ocpDate, ifModifiedSince, ifUnmodifiedSince);
    }

    /**
     * 
     * Gets the properties of the specified compute node file.
     * @param poolId The ID of the pool that contains the compute node. (required)
     * @param nodeId The ID of the compute node that contains the file. (required)
     * @param filePath The path to the compute node file that you want to get the properties of. (required)
     * @param apiVersion Client API Version. (required)
     * @param timeout The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. (optional, default to 30)
     * @param clientRequestId The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. (optional)
     * @param returnClientRequestId Whether the server should return the client-request-id in the response. (optional, default to false)
     * @param ocpDate The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly. (optional)
     * @param ifModifiedSince A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time. (optional)
     * @param ifUnmodifiedSince A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A response containing the file properties. </td><td>  * ocp-batch-file-mode - The file mode attribute in octal format. <br>  * ETag - The ETag HTTP response header. This is an opaque string. You can use it to detect whether the resource has changed between requests. In particular, you can pass the ETag to one of the If-Modified-Since, If-Unmodified-Since, If-Match or If-None-Match headers. <br>  * client-request-id - The client-request-id provided by the client during the request. This will be returned only if the return-client-request-id parameter was set to true. <br>  * ocp-batch-file-isdirectory - Whether the object represents a directory. <br>  * ocp-batch-file-url - The URL of the file. <br>  * Last-Modified - The time at which the resource was last modified. <br>  * Content-Length - The length of the file. <br>  * request-id - A unique identifier for the request that was made to the Batch service. If a request is consistently failing and you have verified that the request is properly formulated, you may use this value to report the error to Microsoft. In your report, include the value of this request ID, the approximate time that the request was made, the Batch account against which the request was made, and the region that account resides in. <br>  * ocp-creation-time - The file creation time. <br>  * Content-Type - The content type of the file. <br>  </td></tr>
        <tr><td> 0 </td><td> The error from the Batch service. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> fileGetPropertiesFromComputeNodeWithHttpInfo(String poolId, String nodeId, String filePath, String apiVersion, Integer timeout, UUID clientRequestId, Boolean returnClientRequestId, String ocpDate, String ifModifiedSince, String ifUnmodifiedSince) throws ApiException {
        okhttp3.Call localVarCall = fileGetPropertiesFromComputeNodeValidateBeforeCall(poolId, nodeId, filePath, apiVersion, timeout, clientRequestId, returnClientRequestId, ocpDate, ifModifiedSince, ifUnmodifiedSince, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Gets the properties of the specified compute node file.
     * @param poolId The ID of the pool that contains the compute node. (required)
     * @param nodeId The ID of the compute node that contains the file. (required)
     * @param filePath The path to the compute node file that you want to get the properties of. (required)
     * @param apiVersion Client API Version. (required)
     * @param timeout The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. (optional, default to 30)
     * @param clientRequestId The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. (optional)
     * @param returnClientRequestId Whether the server should return the client-request-id in the response. (optional, default to false)
     * @param ocpDate The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly. (optional)
     * @param ifModifiedSince A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time. (optional)
     * @param ifUnmodifiedSince A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A response containing the file properties. </td><td>  * ocp-batch-file-mode - The file mode attribute in octal format. <br>  * ETag - The ETag HTTP response header. This is an opaque string. You can use it to detect whether the resource has changed between requests. In particular, you can pass the ETag to one of the If-Modified-Since, If-Unmodified-Since, If-Match or If-None-Match headers. <br>  * client-request-id - The client-request-id provided by the client during the request. This will be returned only if the return-client-request-id parameter was set to true. <br>  * ocp-batch-file-isdirectory - Whether the object represents a directory. <br>  * ocp-batch-file-url - The URL of the file. <br>  * Last-Modified - The time at which the resource was last modified. <br>  * Content-Length - The length of the file. <br>  * request-id - A unique identifier for the request that was made to the Batch service. If a request is consistently failing and you have verified that the request is properly formulated, you may use this value to report the error to Microsoft. In your report, include the value of this request ID, the approximate time that the request was made, the Batch account against which the request was made, and the region that account resides in. <br>  * ocp-creation-time - The file creation time. <br>  * Content-Type - The content type of the file. <br>  </td></tr>
        <tr><td> 0 </td><td> The error from the Batch service. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fileGetPropertiesFromComputeNodeAsync(String poolId, String nodeId, String filePath, String apiVersion, Integer timeout, UUID clientRequestId, Boolean returnClientRequestId, String ocpDate, String ifModifiedSince, String ifUnmodifiedSince, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = fileGetPropertiesFromComputeNodeValidateBeforeCall(poolId, nodeId, filePath, apiVersion, timeout, clientRequestId, returnClientRequestId, ocpDate, ifModifiedSince, ifUnmodifiedSince, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for fileGetPropertiesFromTask
     * @param jobId The ID of the job that contains the task. (required)
     * @param taskId The ID of the task whose file you want to get the properties of. (required)
     * @param filePath The path to the task file that you want to get the properties of. (required)
     * @param apiVersion Client API Version. (required)
     * @param timeout The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. (optional, default to 30)
     * @param clientRequestId The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. (optional)
     * @param returnClientRequestId Whether the server should return the client-request-id in the response. (optional, default to false)
     * @param ocpDate The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly. (optional)
     * @param ifModifiedSince A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time. (optional)
     * @param ifUnmodifiedSince A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A response containing the file properties. </td><td>  * ocp-batch-file-mode - The file mode attribute in octal format. <br>  * ETag - The ETag HTTP response header. This is an opaque string. You can use it to detect whether the resource has changed between requests. In particular, you can pass the ETag to one of the If-Modified-Since, If-Unmodified-Since, If-Match or If-None-Match headers. <br>  * client-request-id - The client-request-id provided by the client during the request. This will be returned only if the return-client-request-id parameter was set to true. <br>  * ocp-batch-file-isdirectory - Whether the object represents a directory. <br>  * ocp-batch-file-url - The URL of the file. <br>  * Last-Modified - The time at which the resource was last modified. <br>  * Content-Length - The length of the file. <br>  * request-id - A unique identifier for the request that was made to the Batch service. If a request is consistently failing and you have verified that the request is properly formulated, you may use this value to report the error to Microsoft. In your report, include the value of this request ID, the approximate time that the request was made, the Batch account against which the request was made, and the region that account resides in. <br>  * ocp-creation-time - The file creation time. <br>  * Content-Type - The content type of the file. <br>  </td></tr>
        <tr><td> 0 </td><td> The error from the Batch service. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fileGetPropertiesFromTaskCall(String jobId, String taskId, String filePath, String apiVersion, Integer timeout, UUID clientRequestId, Boolean returnClientRequestId, String ocpDate, String ifModifiedSince, String ifUnmodifiedSince, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/jobs/{jobId}/tasks/{taskId}/files/{filePath}"
            .replace("{" + "jobId" + "}", localVarApiClient.escapeString(jobId.toString()))
            .replace("{" + "taskId" + "}", localVarApiClient.escapeString(taskId.toString()))
            .replace("{" + "filePath" + "}", localVarApiClient.escapeString(filePath.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (timeout != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeout", timeout));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (clientRequestId != null) {
            localVarHeaderParams.put("client-request-id", localVarApiClient.parameterToString(clientRequestId));
        }

        if (returnClientRequestId != null) {
            localVarHeaderParams.put("return-client-request-id", localVarApiClient.parameterToString(returnClientRequestId));
        }

        if (ocpDate != null) {
            localVarHeaderParams.put("ocp-date", localVarApiClient.parameterToString(ocpDate));
        }

        if (ifModifiedSince != null) {
            localVarHeaderParams.put("If-Modified-Since", localVarApiClient.parameterToString(ifModifiedSince));
        }

        if (ifUnmodifiedSince != null) {
            localVarHeaderParams.put("If-Unmodified-Since", localVarApiClient.parameterToString(ifUnmodifiedSince));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "HEAD", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fileGetPropertiesFromTaskValidateBeforeCall(String jobId, String taskId, String filePath, String apiVersion, Integer timeout, UUID clientRequestId, Boolean returnClientRequestId, String ocpDate, String ifModifiedSince, String ifUnmodifiedSince, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'jobId' is set
        if (jobId == null) {
            throw new ApiException("Missing the required parameter 'jobId' when calling fileGetPropertiesFromTask(Async)");
        }

        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling fileGetPropertiesFromTask(Async)");
        }

        // verify the required parameter 'filePath' is set
        if (filePath == null) {
            throw new ApiException("Missing the required parameter 'filePath' when calling fileGetPropertiesFromTask(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling fileGetPropertiesFromTask(Async)");
        }

        return fileGetPropertiesFromTaskCall(jobId, taskId, filePath, apiVersion, timeout, clientRequestId, returnClientRequestId, ocpDate, ifModifiedSince, ifUnmodifiedSince, _callback);

    }

    /**
     * 
     * Gets the properties of the specified task file.
     * @param jobId The ID of the job that contains the task. (required)
     * @param taskId The ID of the task whose file you want to get the properties of. (required)
     * @param filePath The path to the task file that you want to get the properties of. (required)
     * @param apiVersion Client API Version. (required)
     * @param timeout The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. (optional, default to 30)
     * @param clientRequestId The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. (optional)
     * @param returnClientRequestId Whether the server should return the client-request-id in the response. (optional, default to false)
     * @param ocpDate The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly. (optional)
     * @param ifModifiedSince A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time. (optional)
     * @param ifUnmodifiedSince A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A response containing the file properties. </td><td>  * ocp-batch-file-mode - The file mode attribute in octal format. <br>  * ETag - The ETag HTTP response header. This is an opaque string. You can use it to detect whether the resource has changed between requests. In particular, you can pass the ETag to one of the If-Modified-Since, If-Unmodified-Since, If-Match or If-None-Match headers. <br>  * client-request-id - The client-request-id provided by the client during the request. This will be returned only if the return-client-request-id parameter was set to true. <br>  * ocp-batch-file-isdirectory - Whether the object represents a directory. <br>  * ocp-batch-file-url - The URL of the file. <br>  * Last-Modified - The time at which the resource was last modified. <br>  * Content-Length - The length of the file. <br>  * request-id - A unique identifier for the request that was made to the Batch service. If a request is consistently failing and you have verified that the request is properly formulated, you may use this value to report the error to Microsoft. In your report, include the value of this request ID, the approximate time that the request was made, the Batch account against which the request was made, and the region that account resides in. <br>  * ocp-creation-time - The file creation time. <br>  * Content-Type - The content type of the file. <br>  </td></tr>
        <tr><td> 0 </td><td> The error from the Batch service. </td><td>  -  </td></tr>
     </table>
     */
    public void fileGetPropertiesFromTask(String jobId, String taskId, String filePath, String apiVersion, Integer timeout, UUID clientRequestId, Boolean returnClientRequestId, String ocpDate, String ifModifiedSince, String ifUnmodifiedSince) throws ApiException {
        fileGetPropertiesFromTaskWithHttpInfo(jobId, taskId, filePath, apiVersion, timeout, clientRequestId, returnClientRequestId, ocpDate, ifModifiedSince, ifUnmodifiedSince);
    }

    /**
     * 
     * Gets the properties of the specified task file.
     * @param jobId The ID of the job that contains the task. (required)
     * @param taskId The ID of the task whose file you want to get the properties of. (required)
     * @param filePath The path to the task file that you want to get the properties of. (required)
     * @param apiVersion Client API Version. (required)
     * @param timeout The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. (optional, default to 30)
     * @param clientRequestId The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. (optional)
     * @param returnClientRequestId Whether the server should return the client-request-id in the response. (optional, default to false)
     * @param ocpDate The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly. (optional)
     * @param ifModifiedSince A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time. (optional)
     * @param ifUnmodifiedSince A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A response containing the file properties. </td><td>  * ocp-batch-file-mode - The file mode attribute in octal format. <br>  * ETag - The ETag HTTP response header. This is an opaque string. You can use it to detect whether the resource has changed between requests. In particular, you can pass the ETag to one of the If-Modified-Since, If-Unmodified-Since, If-Match or If-None-Match headers. <br>  * client-request-id - The client-request-id provided by the client during the request. This will be returned only if the return-client-request-id parameter was set to true. <br>  * ocp-batch-file-isdirectory - Whether the object represents a directory. <br>  * ocp-batch-file-url - The URL of the file. <br>  * Last-Modified - The time at which the resource was last modified. <br>  * Content-Length - The length of the file. <br>  * request-id - A unique identifier for the request that was made to the Batch service. If a request is consistently failing and you have verified that the request is properly formulated, you may use this value to report the error to Microsoft. In your report, include the value of this request ID, the approximate time that the request was made, the Batch account against which the request was made, and the region that account resides in. <br>  * ocp-creation-time - The file creation time. <br>  * Content-Type - The content type of the file. <br>  </td></tr>
        <tr><td> 0 </td><td> The error from the Batch service. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> fileGetPropertiesFromTaskWithHttpInfo(String jobId, String taskId, String filePath, String apiVersion, Integer timeout, UUID clientRequestId, Boolean returnClientRequestId, String ocpDate, String ifModifiedSince, String ifUnmodifiedSince) throws ApiException {
        okhttp3.Call localVarCall = fileGetPropertiesFromTaskValidateBeforeCall(jobId, taskId, filePath, apiVersion, timeout, clientRequestId, returnClientRequestId, ocpDate, ifModifiedSince, ifUnmodifiedSince, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Gets the properties of the specified task file.
     * @param jobId The ID of the job that contains the task. (required)
     * @param taskId The ID of the task whose file you want to get the properties of. (required)
     * @param filePath The path to the task file that you want to get the properties of. (required)
     * @param apiVersion Client API Version. (required)
     * @param timeout The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. (optional, default to 30)
     * @param clientRequestId The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. (optional)
     * @param returnClientRequestId Whether the server should return the client-request-id in the response. (optional, default to false)
     * @param ocpDate The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly. (optional)
     * @param ifModifiedSince A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time. (optional)
     * @param ifUnmodifiedSince A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A response containing the file properties. </td><td>  * ocp-batch-file-mode - The file mode attribute in octal format. <br>  * ETag - The ETag HTTP response header. This is an opaque string. You can use it to detect whether the resource has changed between requests. In particular, you can pass the ETag to one of the If-Modified-Since, If-Unmodified-Since, If-Match or If-None-Match headers. <br>  * client-request-id - The client-request-id provided by the client during the request. This will be returned only if the return-client-request-id parameter was set to true. <br>  * ocp-batch-file-isdirectory - Whether the object represents a directory. <br>  * ocp-batch-file-url - The URL of the file. <br>  * Last-Modified - The time at which the resource was last modified. <br>  * Content-Length - The length of the file. <br>  * request-id - A unique identifier for the request that was made to the Batch service. If a request is consistently failing and you have verified that the request is properly formulated, you may use this value to report the error to Microsoft. In your report, include the value of this request ID, the approximate time that the request was made, the Batch account against which the request was made, and the region that account resides in. <br>  * ocp-creation-time - The file creation time. <br>  * Content-Type - The content type of the file. <br>  </td></tr>
        <tr><td> 0 </td><td> The error from the Batch service. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fileGetPropertiesFromTaskAsync(String jobId, String taskId, String filePath, String apiVersion, Integer timeout, UUID clientRequestId, Boolean returnClientRequestId, String ocpDate, String ifModifiedSince, String ifUnmodifiedSince, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = fileGetPropertiesFromTaskValidateBeforeCall(jobId, taskId, filePath, apiVersion, timeout, clientRequestId, returnClientRequestId, ocpDate, ifModifiedSince, ifUnmodifiedSince, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for fileListFromComputeNode
     * @param poolId The ID of the pool that contains the compute node. (required)
     * @param nodeId The ID of the compute node whose files you want to list. (required)
     * @param apiVersion Client API Version. (required)
     * @param $filter An OData $filter clause. (optional)
     * @param recursive Whether to list children of a directory. (optional)
     * @param maxresults The maximum number of items to return in the response. A maximum of 1000 files can be returned. (optional, default to 1000)
     * @param timeout The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. (optional, default to 30)
     * @param clientRequestId The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. (optional)
     * @param returnClientRequestId Whether the server should return the client-request-id in the response. (optional, default to false)
     * @param ocpDate The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A response containing the list of files. </td><td>  * ETag - The ETag HTTP response header. This is an opaque string. You can use it to detect whether the resource has changed between requests. In particular, you can pass the ETag to one of the If-Modified-Since, If-Unmodified-Since, If-Match or If-None-Match headers. <br>  * client-request-id - The client-request-id provided by the client during the request. This will be returned only if the return-client-request-id parameter was set to true. <br>  * Last-Modified - The time at which the resource was last modified. <br>  * request-id - A unique identifier for the request that was made to the Batch service. If a request is consistently failing and you have verified that the request is properly formulated, you may use this value to report the error to Microsoft. In your report, include the value of this request ID, the approximate time that the request was made, the Batch account against which the request was made, and the region that account resides in. <br>  </td></tr>
        <tr><td> 0 </td><td> The error from the Batch service. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fileListFromComputeNodeCall(String poolId, String nodeId, String apiVersion, String $filter, Boolean recursive, Integer maxresults, Integer timeout, UUID clientRequestId, Boolean returnClientRequestId, String ocpDate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pools/{poolId}/nodes/{nodeId}/files"
            .replace("{" + "poolId" + "}", localVarApiClient.escapeString(poolId.toString()))
            .replace("{" + "nodeId" + "}", localVarApiClient.escapeString(nodeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        if (recursive != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("recursive", recursive));
        }

        if (maxresults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxresults", maxresults));
        }

        if (timeout != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeout", timeout));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (clientRequestId != null) {
            localVarHeaderParams.put("client-request-id", localVarApiClient.parameterToString(clientRequestId));
        }

        if (returnClientRequestId != null) {
            localVarHeaderParams.put("return-client-request-id", localVarApiClient.parameterToString(returnClientRequestId));
        }

        if (ocpDate != null) {
            localVarHeaderParams.put("ocp-date", localVarApiClient.parameterToString(ocpDate));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fileListFromComputeNodeValidateBeforeCall(String poolId, String nodeId, String apiVersion, String $filter, Boolean recursive, Integer maxresults, Integer timeout, UUID clientRequestId, Boolean returnClientRequestId, String ocpDate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'poolId' is set
        if (poolId == null) {
            throw new ApiException("Missing the required parameter 'poolId' when calling fileListFromComputeNode(Async)");
        }

        // verify the required parameter 'nodeId' is set
        if (nodeId == null) {
            throw new ApiException("Missing the required parameter 'nodeId' when calling fileListFromComputeNode(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling fileListFromComputeNode(Async)");
        }

        return fileListFromComputeNodeCall(poolId, nodeId, apiVersion, $filter, recursive, maxresults, timeout, clientRequestId, returnClientRequestId, ocpDate, _callback);

    }

    /**
     * Lists all of the files in task directories on the specified compute node.
     * 
     * @param poolId The ID of the pool that contains the compute node. (required)
     * @param nodeId The ID of the compute node whose files you want to list. (required)
     * @param apiVersion Client API Version. (required)
     * @param $filter An OData $filter clause. (optional)
     * @param recursive Whether to list children of a directory. (optional)
     * @param maxresults The maximum number of items to return in the response. A maximum of 1000 files can be returned. (optional, default to 1000)
     * @param timeout The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. (optional, default to 30)
     * @param clientRequestId The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. (optional)
     * @param returnClientRequestId Whether the server should return the client-request-id in the response. (optional, default to false)
     * @param ocpDate The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly. (optional)
     * @return NodeFileListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A response containing the list of files. </td><td>  * ETag - The ETag HTTP response header. This is an opaque string. You can use it to detect whether the resource has changed between requests. In particular, you can pass the ETag to one of the If-Modified-Since, If-Unmodified-Since, If-Match or If-None-Match headers. <br>  * client-request-id - The client-request-id provided by the client during the request. This will be returned only if the return-client-request-id parameter was set to true. <br>  * Last-Modified - The time at which the resource was last modified. <br>  * request-id - A unique identifier for the request that was made to the Batch service. If a request is consistently failing and you have verified that the request is properly formulated, you may use this value to report the error to Microsoft. In your report, include the value of this request ID, the approximate time that the request was made, the Batch account against which the request was made, and the region that account resides in. <br>  </td></tr>
        <tr><td> 0 </td><td> The error from the Batch service. </td><td>  -  </td></tr>
     </table>
     */
    public NodeFileListResult fileListFromComputeNode(String poolId, String nodeId, String apiVersion, String $filter, Boolean recursive, Integer maxresults, Integer timeout, UUID clientRequestId, Boolean returnClientRequestId, String ocpDate) throws ApiException {
        ApiResponse<NodeFileListResult> localVarResp = fileListFromComputeNodeWithHttpInfo(poolId, nodeId, apiVersion, $filter, recursive, maxresults, timeout, clientRequestId, returnClientRequestId, ocpDate);
        return localVarResp.getData();
    }

    /**
     * Lists all of the files in task directories on the specified compute node.
     * 
     * @param poolId The ID of the pool that contains the compute node. (required)
     * @param nodeId The ID of the compute node whose files you want to list. (required)
     * @param apiVersion Client API Version. (required)
     * @param $filter An OData $filter clause. (optional)
     * @param recursive Whether to list children of a directory. (optional)
     * @param maxresults The maximum number of items to return in the response. A maximum of 1000 files can be returned. (optional, default to 1000)
     * @param timeout The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. (optional, default to 30)
     * @param clientRequestId The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. (optional)
     * @param returnClientRequestId Whether the server should return the client-request-id in the response. (optional, default to false)
     * @param ocpDate The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly. (optional)
     * @return ApiResponse&lt;NodeFileListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A response containing the list of files. </td><td>  * ETag - The ETag HTTP response header. This is an opaque string. You can use it to detect whether the resource has changed between requests. In particular, you can pass the ETag to one of the If-Modified-Since, If-Unmodified-Since, If-Match or If-None-Match headers. <br>  * client-request-id - The client-request-id provided by the client during the request. This will be returned only if the return-client-request-id parameter was set to true. <br>  * Last-Modified - The time at which the resource was last modified. <br>  * request-id - A unique identifier for the request that was made to the Batch service. If a request is consistently failing and you have verified that the request is properly formulated, you may use this value to report the error to Microsoft. In your report, include the value of this request ID, the approximate time that the request was made, the Batch account against which the request was made, and the region that account resides in. <br>  </td></tr>
        <tr><td> 0 </td><td> The error from the Batch service. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NodeFileListResult> fileListFromComputeNodeWithHttpInfo(String poolId, String nodeId, String apiVersion, String $filter, Boolean recursive, Integer maxresults, Integer timeout, UUID clientRequestId, Boolean returnClientRequestId, String ocpDate) throws ApiException {
        okhttp3.Call localVarCall = fileListFromComputeNodeValidateBeforeCall(poolId, nodeId, apiVersion, $filter, recursive, maxresults, timeout, clientRequestId, returnClientRequestId, ocpDate, null);
        Type localVarReturnType = new TypeToken<NodeFileListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Lists all of the files in task directories on the specified compute node. (asynchronously)
     * 
     * @param poolId The ID of the pool that contains the compute node. (required)
     * @param nodeId The ID of the compute node whose files you want to list. (required)
     * @param apiVersion Client API Version. (required)
     * @param $filter An OData $filter clause. (optional)
     * @param recursive Whether to list children of a directory. (optional)
     * @param maxresults The maximum number of items to return in the response. A maximum of 1000 files can be returned. (optional, default to 1000)
     * @param timeout The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. (optional, default to 30)
     * @param clientRequestId The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. (optional)
     * @param returnClientRequestId Whether the server should return the client-request-id in the response. (optional, default to false)
     * @param ocpDate The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A response containing the list of files. </td><td>  * ETag - The ETag HTTP response header. This is an opaque string. You can use it to detect whether the resource has changed between requests. In particular, you can pass the ETag to one of the If-Modified-Since, If-Unmodified-Since, If-Match or If-None-Match headers. <br>  * client-request-id - The client-request-id provided by the client during the request. This will be returned only if the return-client-request-id parameter was set to true. <br>  * Last-Modified - The time at which the resource was last modified. <br>  * request-id - A unique identifier for the request that was made to the Batch service. If a request is consistently failing and you have verified that the request is properly formulated, you may use this value to report the error to Microsoft. In your report, include the value of this request ID, the approximate time that the request was made, the Batch account against which the request was made, and the region that account resides in. <br>  </td></tr>
        <tr><td> 0 </td><td> The error from the Batch service. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fileListFromComputeNodeAsync(String poolId, String nodeId, String apiVersion, String $filter, Boolean recursive, Integer maxresults, Integer timeout, UUID clientRequestId, Boolean returnClientRequestId, String ocpDate, final ApiCallback<NodeFileListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = fileListFromComputeNodeValidateBeforeCall(poolId, nodeId, apiVersion, $filter, recursive, maxresults, timeout, clientRequestId, returnClientRequestId, ocpDate, _callback);
        Type localVarReturnType = new TypeToken<NodeFileListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fileListFromTask
     * @param jobId The ID of the job that contains the task. (required)
     * @param taskId The ID of the task whose files you want to list. (required)
     * @param apiVersion Client API Version. (required)
     * @param $filter An OData $filter clause. (optional)
     * @param recursive Whether to list children of the task directory. This parameter can be used in combination with the filter parameter to list specific type of files. (optional)
     * @param maxresults The maximum number of items to return in the response. A maximum of 1000 files can be returned. (optional, default to 1000)
     * @param timeout The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. (optional, default to 30)
     * @param clientRequestId The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. (optional)
     * @param returnClientRequestId Whether the server should return the client-request-id in the response. (optional, default to false)
     * @param ocpDate The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A response containing the list of files. </td><td>  * ETag - The ETag HTTP response header. This is an opaque string. You can use it to detect whether the resource has changed between requests. In particular, you can pass the ETag to one of the If-Modified-Since, If-Unmodified-Since, If-Match or If-None-Match headers. <br>  * client-request-id - The client-request-id provided by the client during the request. This will be returned only if the return-client-request-id parameter was set to true. <br>  * Last-Modified - The time at which the resource was last modified. <br>  * request-id - A unique identifier for the request that was made to the Batch service. If a request is consistently failing and you have verified that the request is properly formulated, you may use this value to report the error to Microsoft. In your report, include the value of this request ID, the approximate time that the request was made, the Batch account against which the request was made, and the region that account resides in. <br>  </td></tr>
        <tr><td> 0 </td><td> The error from the Batch service. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fileListFromTaskCall(String jobId, String taskId, String apiVersion, String $filter, Boolean recursive, Integer maxresults, Integer timeout, UUID clientRequestId, Boolean returnClientRequestId, String ocpDate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/jobs/{jobId}/tasks/{taskId}/files"
            .replace("{" + "jobId" + "}", localVarApiClient.escapeString(jobId.toString()))
            .replace("{" + "taskId" + "}", localVarApiClient.escapeString(taskId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        if (recursive != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("recursive", recursive));
        }

        if (maxresults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxresults", maxresults));
        }

        if (timeout != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeout", timeout));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (clientRequestId != null) {
            localVarHeaderParams.put("client-request-id", localVarApiClient.parameterToString(clientRequestId));
        }

        if (returnClientRequestId != null) {
            localVarHeaderParams.put("return-client-request-id", localVarApiClient.parameterToString(returnClientRequestId));
        }

        if (ocpDate != null) {
            localVarHeaderParams.put("ocp-date", localVarApiClient.parameterToString(ocpDate));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fileListFromTaskValidateBeforeCall(String jobId, String taskId, String apiVersion, String $filter, Boolean recursive, Integer maxresults, Integer timeout, UUID clientRequestId, Boolean returnClientRequestId, String ocpDate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'jobId' is set
        if (jobId == null) {
            throw new ApiException("Missing the required parameter 'jobId' when calling fileListFromTask(Async)");
        }

        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling fileListFromTask(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling fileListFromTask(Async)");
        }

        return fileListFromTaskCall(jobId, taskId, apiVersion, $filter, recursive, maxresults, timeout, clientRequestId, returnClientRequestId, ocpDate, _callback);

    }

    /**
     * Lists the files in a task&#39;s directory on its compute node.
     * 
     * @param jobId The ID of the job that contains the task. (required)
     * @param taskId The ID of the task whose files you want to list. (required)
     * @param apiVersion Client API Version. (required)
     * @param $filter An OData $filter clause. (optional)
     * @param recursive Whether to list children of the task directory. This parameter can be used in combination with the filter parameter to list specific type of files. (optional)
     * @param maxresults The maximum number of items to return in the response. A maximum of 1000 files can be returned. (optional, default to 1000)
     * @param timeout The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. (optional, default to 30)
     * @param clientRequestId The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. (optional)
     * @param returnClientRequestId Whether the server should return the client-request-id in the response. (optional, default to false)
     * @param ocpDate The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly. (optional)
     * @return NodeFileListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A response containing the list of files. </td><td>  * ETag - The ETag HTTP response header. This is an opaque string. You can use it to detect whether the resource has changed between requests. In particular, you can pass the ETag to one of the If-Modified-Since, If-Unmodified-Since, If-Match or If-None-Match headers. <br>  * client-request-id - The client-request-id provided by the client during the request. This will be returned only if the return-client-request-id parameter was set to true. <br>  * Last-Modified - The time at which the resource was last modified. <br>  * request-id - A unique identifier for the request that was made to the Batch service. If a request is consistently failing and you have verified that the request is properly formulated, you may use this value to report the error to Microsoft. In your report, include the value of this request ID, the approximate time that the request was made, the Batch account against which the request was made, and the region that account resides in. <br>  </td></tr>
        <tr><td> 0 </td><td> The error from the Batch service. </td><td>  -  </td></tr>
     </table>
     */
    public NodeFileListResult fileListFromTask(String jobId, String taskId, String apiVersion, String $filter, Boolean recursive, Integer maxresults, Integer timeout, UUID clientRequestId, Boolean returnClientRequestId, String ocpDate) throws ApiException {
        ApiResponse<NodeFileListResult> localVarResp = fileListFromTaskWithHttpInfo(jobId, taskId, apiVersion, $filter, recursive, maxresults, timeout, clientRequestId, returnClientRequestId, ocpDate);
        return localVarResp.getData();
    }

    /**
     * Lists the files in a task&#39;s directory on its compute node.
     * 
     * @param jobId The ID of the job that contains the task. (required)
     * @param taskId The ID of the task whose files you want to list. (required)
     * @param apiVersion Client API Version. (required)
     * @param $filter An OData $filter clause. (optional)
     * @param recursive Whether to list children of the task directory. This parameter can be used in combination with the filter parameter to list specific type of files. (optional)
     * @param maxresults The maximum number of items to return in the response. A maximum of 1000 files can be returned. (optional, default to 1000)
     * @param timeout The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. (optional, default to 30)
     * @param clientRequestId The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. (optional)
     * @param returnClientRequestId Whether the server should return the client-request-id in the response. (optional, default to false)
     * @param ocpDate The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly. (optional)
     * @return ApiResponse&lt;NodeFileListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A response containing the list of files. </td><td>  * ETag - The ETag HTTP response header. This is an opaque string. You can use it to detect whether the resource has changed between requests. In particular, you can pass the ETag to one of the If-Modified-Since, If-Unmodified-Since, If-Match or If-None-Match headers. <br>  * client-request-id - The client-request-id provided by the client during the request. This will be returned only if the return-client-request-id parameter was set to true. <br>  * Last-Modified - The time at which the resource was last modified. <br>  * request-id - A unique identifier for the request that was made to the Batch service. If a request is consistently failing and you have verified that the request is properly formulated, you may use this value to report the error to Microsoft. In your report, include the value of this request ID, the approximate time that the request was made, the Batch account against which the request was made, and the region that account resides in. <br>  </td></tr>
        <tr><td> 0 </td><td> The error from the Batch service. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NodeFileListResult> fileListFromTaskWithHttpInfo(String jobId, String taskId, String apiVersion, String $filter, Boolean recursive, Integer maxresults, Integer timeout, UUID clientRequestId, Boolean returnClientRequestId, String ocpDate) throws ApiException {
        okhttp3.Call localVarCall = fileListFromTaskValidateBeforeCall(jobId, taskId, apiVersion, $filter, recursive, maxresults, timeout, clientRequestId, returnClientRequestId, ocpDate, null);
        Type localVarReturnType = new TypeToken<NodeFileListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Lists the files in a task&#39;s directory on its compute node. (asynchronously)
     * 
     * @param jobId The ID of the job that contains the task. (required)
     * @param taskId The ID of the task whose files you want to list. (required)
     * @param apiVersion Client API Version. (required)
     * @param $filter An OData $filter clause. (optional)
     * @param recursive Whether to list children of the task directory. This parameter can be used in combination with the filter parameter to list specific type of files. (optional)
     * @param maxresults The maximum number of items to return in the response. A maximum of 1000 files can be returned. (optional, default to 1000)
     * @param timeout The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. (optional, default to 30)
     * @param clientRequestId The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. (optional)
     * @param returnClientRequestId Whether the server should return the client-request-id in the response. (optional, default to false)
     * @param ocpDate The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A response containing the list of files. </td><td>  * ETag - The ETag HTTP response header. This is an opaque string. You can use it to detect whether the resource has changed between requests. In particular, you can pass the ETag to one of the If-Modified-Since, If-Unmodified-Since, If-Match or If-None-Match headers. <br>  * client-request-id - The client-request-id provided by the client during the request. This will be returned only if the return-client-request-id parameter was set to true. <br>  * Last-Modified - The time at which the resource was last modified. <br>  * request-id - A unique identifier for the request that was made to the Batch service. If a request is consistently failing and you have verified that the request is properly formulated, you may use this value to report the error to Microsoft. In your report, include the value of this request ID, the approximate time that the request was made, the Batch account against which the request was made, and the region that account resides in. <br>  </td></tr>
        <tr><td> 0 </td><td> The error from the Batch service. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fileListFromTaskAsync(String jobId, String taskId, String apiVersion, String $filter, Boolean recursive, Integer maxresults, Integer timeout, UUID clientRequestId, Boolean returnClientRequestId, String ocpDate, final ApiCallback<NodeFileListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = fileListFromTaskValidateBeforeCall(jobId, taskId, apiVersion, $filter, recursive, maxresults, timeout, clientRequestId, returnClientRequestId, ocpDate, _callback);
        Type localVarReturnType = new TypeToken<NodeFileListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
