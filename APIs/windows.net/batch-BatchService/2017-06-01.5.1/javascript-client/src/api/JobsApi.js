/**
 * BatchService
 * A client for issuing REST requests to the Azure Batch service.
 *
 * The version of the OpenAPI document: 2017-06-01.5.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BatchError from '../model/BatchError';
import CloudJob from '../model/CloudJob';
import CloudJobListPreparationAndReleaseTaskStatusResult from '../model/CloudJobListPreparationAndReleaseTaskStatusResult';
import CloudJobListResult from '../model/CloudJobListResult';
import JobAddParameter from '../model/JobAddParameter';
import JobDisableParameter from '../model/JobDisableParameter';
import JobPatchParameter from '../model/JobPatchParameter';
import JobStatistics from '../model/JobStatistics';
import JobTerminateParameter from '../model/JobTerminateParameter';
import JobUpdateParameter from '../model/JobUpdateParameter';
import TaskCounts from '../model/TaskCounts';

/**
* Jobs service.
* @module api/JobsApi
* @version 2017-06-01.5.1
*/
export default class JobsApi {

    /**
    * Constructs a new JobsApi. 
    * @alias module:api/JobsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the jobAdd operation.
     * @callback module:api/JobsApi~jobAddCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds a job to the specified account.
     * The Batch service supports two ways to control the work done as part of a job. In the first approach, the user specifies a Job Manager task. The Batch service launches this task when it is ready to start the job. The Job Manager task controls all other tasks that run under this job, by using the Task APIs. In the second approach, the user directly controls the execution of tasks under an active job, by using the Task APIs. Also note: when naming jobs, avoid including sensitive information such as user names or secret project names. This information may appear in telemetry logs accessible to Microsoft Support engineers.
     * @param {String} apiVersion Client API Version.
     * @param {module:model/JobAddParameter} job The job to be added.
     * @param {Object} opts Optional parameters
     * @param {Number} [timeout = 30)] The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
     * @param {String} [clientRequestId] The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
     * @param {Boolean} [returnClientRequestId = false)] Whether the server should return the client-request-id in the response.
     * @param {String} [ocpDate] The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.
     * @param {module:api/JobsApi~jobAddCallback} callback The callback function, accepting three arguments: error, data, response
     */
    jobAdd(apiVersion, job, opts, callback) {
      opts = opts || {};
      let postBody = job;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling jobAdd");
      }
      // verify the required parameter 'job' is set
      if (job === undefined || job === null) {
        throw new Error("Missing the required parameter 'job' when calling jobAdd");
      }

      let pathParams = {
      };
      let queryParams = {
        'timeout': opts['timeout'],
        'api-version': apiVersion
      };
      let headerParams = {
        'client-request-id': opts['clientRequestId'],
        'return-client-request-id': opts['returnClientRequestId'],
        'ocp-date': opts['ocpDate']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json; odata=minimalmetadata'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/jobs', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the jobDelete operation.
     * @callback module:api/JobsApi~jobDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a job.
     * Deleting a job also deletes all tasks that are part of that job, and all job statistics. This also overrides the retention period for task data; that is, if the job contains tasks which are still retained on compute nodes, the Batch services deletes those tasks' working directories and all their contents.  When a Delete Job request is received, the Batch service sets the job to the deleting state. All update operations on a job that is in deleting state will fail with status code 409 (Conflict), with additional information indicating that the job is being deleted.
     * @param {String} jobId The ID of the job to delete.
     * @param {String} apiVersion Client API Version.
     * @param {Object} opts Optional parameters
     * @param {Number} [timeout = 30)] The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
     * @param {String} [clientRequestId] The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
     * @param {Boolean} [returnClientRequestId = false)] Whether the server should return the client-request-id in the response.
     * @param {String} [ocpDate] The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.
     * @param {String} [ifMatch] An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client.
     * @param {String} [ifNoneMatch] An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.
     * @param {String} [ifModifiedSince] A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.
     * @param {String} [ifUnmodifiedSince] A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.
     * @param {module:api/JobsApi~jobDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    jobDelete(jobId, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling jobDelete");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling jobDelete");
      }

      let pathParams = {
        'jobId': jobId
      };
      let queryParams = {
        'timeout': opts['timeout'],
        'api-version': apiVersion
      };
      let headerParams = {
        'client-request-id': opts['clientRequestId'],
        'return-client-request-id': opts['returnClientRequestId'],
        'ocp-date': opts['ocpDate'],
        'If-Match': opts['ifMatch'],
        'If-None-Match': opts['ifNoneMatch'],
        'If-Modified-Since': opts['ifModifiedSince'],
        'If-Unmodified-Since': opts['ifUnmodifiedSince']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/jobs/{jobId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the jobDisable operation.
     * @callback module:api/JobsApi~jobDisableCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Disables the specified job, preventing new tasks from running.
     * The Batch Service immediately moves the job to the disabling state. Batch then uses the disableTasks parameter to determine what to do with the currently running tasks of the job. The job remains in the disabling state until the disable operation is completed and all tasks have been dealt with according to the disableTasks option; the job then moves to the disabled state. No new tasks are started under the job until it moves back to active state. If you try to disable a job that is in any state other than active, disabling, or disabled, the request fails with status code 409.
     * @param {String} jobId The ID of the job to disable.
     * @param {String} apiVersion Client API Version.
     * @param {module:model/JobDisableParameter} jobDisableParameter The parameters for the request.
     * @param {Object} opts Optional parameters
     * @param {Number} [timeout = 30)] The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
     * @param {String} [clientRequestId] The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
     * @param {Boolean} [returnClientRequestId = false)] Whether the server should return the client-request-id in the response.
     * @param {String} [ocpDate] The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.
     * @param {String} [ifMatch] An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client.
     * @param {String} [ifNoneMatch] An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.
     * @param {String} [ifModifiedSince] A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.
     * @param {String} [ifUnmodifiedSince] A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.
     * @param {module:api/JobsApi~jobDisableCallback} callback The callback function, accepting three arguments: error, data, response
     */
    jobDisable(jobId, apiVersion, jobDisableParameter, opts, callback) {
      opts = opts || {};
      let postBody = jobDisableParameter;
      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling jobDisable");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling jobDisable");
      }
      // verify the required parameter 'jobDisableParameter' is set
      if (jobDisableParameter === undefined || jobDisableParameter === null) {
        throw new Error("Missing the required parameter 'jobDisableParameter' when calling jobDisable");
      }

      let pathParams = {
        'jobId': jobId
      };
      let queryParams = {
        'timeout': opts['timeout'],
        'api-version': apiVersion
      };
      let headerParams = {
        'client-request-id': opts['clientRequestId'],
        'return-client-request-id': opts['returnClientRequestId'],
        'ocp-date': opts['ocpDate'],
        'If-Match': opts['ifMatch'],
        'If-None-Match': opts['ifNoneMatch'],
        'If-Modified-Since': opts['ifModifiedSince'],
        'If-Unmodified-Since': opts['ifUnmodifiedSince']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json; odata=minimalmetadata'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/jobs/{jobId}/disable', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the jobEnable operation.
     * @callback module:api/JobsApi~jobEnableCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Enables the specified job, allowing new tasks to run.
     * When you call this API, the Batch service sets a disabled job to the enabling state. After the this operation is completed, the job moves to the active state, and scheduling of new tasks under the job resumes. The Batch service does not allow a task to remain in the active state for more than 7 days. Therefore, if you enable a job containing active tasks which were added more than 7 days ago, those tasks will not run.
     * @param {String} jobId The ID of the job to enable.
     * @param {String} apiVersion Client API Version.
     * @param {Object} opts Optional parameters
     * @param {Number} [timeout = 30)] The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
     * @param {String} [clientRequestId] The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
     * @param {Boolean} [returnClientRequestId = false)] Whether the server should return the client-request-id in the response.
     * @param {String} [ocpDate] The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.
     * @param {String} [ifMatch] An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client.
     * @param {String} [ifNoneMatch] An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.
     * @param {String} [ifModifiedSince] A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.
     * @param {String} [ifUnmodifiedSince] A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.
     * @param {module:api/JobsApi~jobEnableCallback} callback The callback function, accepting three arguments: error, data, response
     */
    jobEnable(jobId, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling jobEnable");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling jobEnable");
      }

      let pathParams = {
        'jobId': jobId
      };
      let queryParams = {
        'timeout': opts['timeout'],
        'api-version': apiVersion
      };
      let headerParams = {
        'client-request-id': opts['clientRequestId'],
        'return-client-request-id': opts['returnClientRequestId'],
        'ocp-date': opts['ocpDate'],
        'If-Match': opts['ifMatch'],
        'If-None-Match': opts['ifNoneMatch'],
        'If-Modified-Since': opts['ifModifiedSince'],
        'If-Unmodified-Since': opts['ifUnmodifiedSince']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/jobs/{jobId}/enable', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the jobGet operation.
     * @callback module:api/JobsApi~jobGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CloudJob} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets information about the specified job.
     * @param {String} jobId The ID of the job.
     * @param {String} apiVersion Client API Version.
     * @param {Object} opts Optional parameters
     * @param {String} [select] An OData $select clause.
     * @param {String} [expand] An OData $expand clause.
     * @param {Number} [timeout = 30)] The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
     * @param {String} [clientRequestId] The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
     * @param {Boolean} [returnClientRequestId = false)] Whether the server should return the client-request-id in the response.
     * @param {String} [ocpDate] The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.
     * @param {String} [ifMatch] An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client.
     * @param {String} [ifNoneMatch] An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.
     * @param {String} [ifModifiedSince] A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.
     * @param {String} [ifUnmodifiedSince] A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.
     * @param {module:api/JobsApi~jobGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CloudJob}
     */
    jobGet(jobId, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling jobGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling jobGet");
      }

      let pathParams = {
        'jobId': jobId
      };
      let queryParams = {
        '$select': opts['select'],
        '$expand': opts['expand'],
        'timeout': opts['timeout'],
        'api-version': apiVersion
      };
      let headerParams = {
        'client-request-id': opts['clientRequestId'],
        'return-client-request-id': opts['returnClientRequestId'],
        'ocp-date': opts['ocpDate'],
        'If-Match': opts['ifMatch'],
        'If-None-Match': opts['ifNoneMatch'],
        'If-Modified-Since': opts['ifModifiedSince'],
        'If-Unmodified-Since': opts['ifUnmodifiedSince']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CloudJob;
      return this.apiClient.callApi(
        '/jobs/{jobId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the jobGetAllLifetimeStatistics operation.
     * @callback module:api/JobsApi~jobGetAllLifetimeStatisticsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JobStatistics} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets lifetime summary statistics for all of the jobs in the specified account.
     * Statistics are aggregated across all jobs that have ever existed in the account, from account creation to the last update time of the statistics.
     * @param {String} apiVersion Client API Version.
     * @param {Object} opts Optional parameters
     * @param {Number} [timeout = 30)] The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
     * @param {String} [clientRequestId] The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
     * @param {Boolean} [returnClientRequestId = false)] Whether the server should return the client-request-id in the response.
     * @param {String} [ocpDate] The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.
     * @param {module:api/JobsApi~jobGetAllLifetimeStatisticsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/JobStatistics}
     */
    jobGetAllLifetimeStatistics(apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling jobGetAllLifetimeStatistics");
      }

      let pathParams = {
      };
      let queryParams = {
        'timeout': opts['timeout'],
        'api-version': apiVersion
      };
      let headerParams = {
        'client-request-id': opts['clientRequestId'],
        'return-client-request-id': opts['returnClientRequestId'],
        'ocp-date': opts['ocpDate']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = JobStatistics;
      return this.apiClient.callApi(
        '/lifetimejobstats', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the jobGetTaskCounts operation.
     * @callback module:api/JobsApi~jobGetTaskCountsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TaskCounts} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the task counts for the specified job.
     * Task counts provide a count of the tasks by active, running or completed task state, and a count of tasks which succeeded or failed. Tasks in the preparing state are counted as running. If the validationStatus is unvalidated, then the Batch service has not been able to check state counts against the task states as reported in the List Tasks API. The validationStatus may be unvalidated if the job contains more than 200,000 tasks.
     * @param {String} jobId The ID of the job.
     * @param {String} apiVersion Client API Version.
     * @param {Object} opts Optional parameters
     * @param {Number} [timeout = 30)] The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
     * @param {String} [clientRequestId] The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
     * @param {Boolean} [returnClientRequestId = false)] Whether the server should return the client-request-id in the response.
     * @param {String} [ocpDate] The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.
     * @param {module:api/JobsApi~jobGetTaskCountsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TaskCounts}
     */
    jobGetTaskCounts(jobId, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling jobGetTaskCounts");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling jobGetTaskCounts");
      }

      let pathParams = {
        'jobId': jobId
      };
      let queryParams = {
        'timeout': opts['timeout'],
        'api-version': apiVersion
      };
      let headerParams = {
        'client-request-id': opts['clientRequestId'],
        'return-client-request-id': opts['returnClientRequestId'],
        'ocp-date': opts['ocpDate']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TaskCounts;
      return this.apiClient.callApi(
        '/jobs/{jobId}/taskcounts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the jobList operation.
     * @callback module:api/JobsApi~jobListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CloudJobListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all of the jobs in the specified account.
     * @param {String} apiVersion Client API Version.
     * @param {Object} opts Optional parameters
     * @param {String} [filter] An OData $filter clause.
     * @param {String} [select] An OData $select clause.
     * @param {String} [expand] An OData $expand clause.
     * @param {Number} [maxresults = 1000)] The maximum number of items to return in the response. A maximum of 1000 jobs can be returned.
     * @param {Number} [timeout = 30)] The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
     * @param {String} [clientRequestId] The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
     * @param {Boolean} [returnClientRequestId = false)] Whether the server should return the client-request-id in the response.
     * @param {String} [ocpDate] The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.
     * @param {module:api/JobsApi~jobListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CloudJobListResult}
     */
    jobList(apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling jobList");
      }

      let pathParams = {
      };
      let queryParams = {
        '$filter': opts['filter'],
        '$select': opts['select'],
        '$expand': opts['expand'],
        'maxresults': opts['maxresults'],
        'timeout': opts['timeout'],
        'api-version': apiVersion
      };
      let headerParams = {
        'client-request-id': opts['clientRequestId'],
        'return-client-request-id': opts['returnClientRequestId'],
        'ocp-date': opts['ocpDate']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CloudJobListResult;
      return this.apiClient.callApi(
        '/jobs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the jobListFromJobSchedule operation.
     * @callback module:api/JobsApi~jobListFromJobScheduleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CloudJobListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the jobs that have been created under the specified job schedule.
     * @param {String} jobScheduleId The ID of the job schedule from which you want to get a list of jobs.
     * @param {String} apiVersion Client API Version.
     * @param {Object} opts Optional parameters
     * @param {String} [filter] An OData $filter clause.
     * @param {String} [select] An OData $select clause.
     * @param {String} [expand] An OData $expand clause.
     * @param {Number} [maxresults = 1000)] The maximum number of items to return in the response. A maximum of 1000 jobs can be returned.
     * @param {Number} [timeout = 30)] The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
     * @param {String} [clientRequestId] The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
     * @param {Boolean} [returnClientRequestId = false)] Whether the server should return the client-request-id in the response.
     * @param {String} [ocpDate] The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.
     * @param {module:api/JobsApi~jobListFromJobScheduleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CloudJobListResult}
     */
    jobListFromJobSchedule(jobScheduleId, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'jobScheduleId' is set
      if (jobScheduleId === undefined || jobScheduleId === null) {
        throw new Error("Missing the required parameter 'jobScheduleId' when calling jobListFromJobSchedule");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling jobListFromJobSchedule");
      }

      let pathParams = {
        'jobScheduleId': jobScheduleId
      };
      let queryParams = {
        '$filter': opts['filter'],
        '$select': opts['select'],
        '$expand': opts['expand'],
        'maxresults': opts['maxresults'],
        'timeout': opts['timeout'],
        'api-version': apiVersion
      };
      let headerParams = {
        'client-request-id': opts['clientRequestId'],
        'return-client-request-id': opts['returnClientRequestId'],
        'ocp-date': opts['ocpDate']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CloudJobListResult;
      return this.apiClient.callApi(
        '/jobschedules/{jobScheduleId}/jobs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the jobListPreparationAndReleaseTaskStatus operation.
     * @callback module:api/JobsApi~jobListPreparationAndReleaseTaskStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CloudJobListPreparationAndReleaseTaskStatusResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the execution status of the Job Preparation and Job Release task for the specified job across the compute nodes where the job has run.
     * This API returns the Job Preparation and Job Release task status on all compute nodes that have run the Job Preparation or Job Release task. This includes nodes which have since been removed from the pool. If this API is invoked on a job which has no Job Preparation or Job Release task, the Batch service returns HTTP status code 409 (Conflict) with an error code of JobPreparationTaskNotSpecified.
     * @param {String} jobId The ID of the job.
     * @param {String} apiVersion Client API Version.
     * @param {Object} opts Optional parameters
     * @param {String} [filter] An OData $filter clause. To get the status of the Job Preparation and Job Release tasks on a specific compute node, use \"nodeId eq '{desired-node-id}'\"
     * @param {String} [select] An OData $select clause.
     * @param {Number} [maxresults = 1000)] The maximum number of items to return in the response. A maximum of 1000 tasks can be returned.
     * @param {Number} [timeout = 30)] The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
     * @param {String} [clientRequestId] The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
     * @param {Boolean} [returnClientRequestId = false)] Whether the server should return the client-request-id in the response.
     * @param {String} [ocpDate] The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.
     * @param {module:api/JobsApi~jobListPreparationAndReleaseTaskStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CloudJobListPreparationAndReleaseTaskStatusResult}
     */
    jobListPreparationAndReleaseTaskStatus(jobId, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling jobListPreparationAndReleaseTaskStatus");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling jobListPreparationAndReleaseTaskStatus");
      }

      let pathParams = {
        'jobId': jobId
      };
      let queryParams = {
        '$filter': opts['filter'],
        '$select': opts['select'],
        'maxresults': opts['maxresults'],
        'timeout': opts['timeout'],
        'api-version': apiVersion
      };
      let headerParams = {
        'client-request-id': opts['clientRequestId'],
        'return-client-request-id': opts['returnClientRequestId'],
        'ocp-date': opts['ocpDate']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CloudJobListPreparationAndReleaseTaskStatusResult;
      return this.apiClient.callApi(
        '/jobs/{jobId}/jobpreparationandreleasetaskstatus', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the jobPatch operation.
     * @callback module:api/JobsApi~jobPatchCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the properties of the specified job.
     * This replaces only the job properties specified in the request. For example, if the job has constraints, and a request does not specify the constraints element, then the job keeps the existing constraints.
     * @param {String} jobId The ID of the job whose properties you want to update.
     * @param {String} apiVersion Client API Version.
     * @param {module:model/JobPatchParameter} jobPatchParameter The parameters for the request.
     * @param {Object} opts Optional parameters
     * @param {Number} [timeout = 30)] The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
     * @param {String} [clientRequestId] The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
     * @param {Boolean} [returnClientRequestId = false)] Whether the server should return the client-request-id in the response.
     * @param {String} [ocpDate] The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.
     * @param {String} [ifMatch] An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client.
     * @param {String} [ifNoneMatch] An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.
     * @param {String} [ifModifiedSince] A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.
     * @param {String} [ifUnmodifiedSince] A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.
     * @param {module:api/JobsApi~jobPatchCallback} callback The callback function, accepting three arguments: error, data, response
     */
    jobPatch(jobId, apiVersion, jobPatchParameter, opts, callback) {
      opts = opts || {};
      let postBody = jobPatchParameter;
      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling jobPatch");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling jobPatch");
      }
      // verify the required parameter 'jobPatchParameter' is set
      if (jobPatchParameter === undefined || jobPatchParameter === null) {
        throw new Error("Missing the required parameter 'jobPatchParameter' when calling jobPatch");
      }

      let pathParams = {
        'jobId': jobId
      };
      let queryParams = {
        'timeout': opts['timeout'],
        'api-version': apiVersion
      };
      let headerParams = {
        'client-request-id': opts['clientRequestId'],
        'return-client-request-id': opts['returnClientRequestId'],
        'ocp-date': opts['ocpDate'],
        'If-Match': opts['ifMatch'],
        'If-None-Match': opts['ifNoneMatch'],
        'If-Modified-Since': opts['ifModifiedSince'],
        'If-Unmodified-Since': opts['ifUnmodifiedSince']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json; odata=minimalmetadata'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/jobs/{jobId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the jobTerminate operation.
     * @callback module:api/JobsApi~jobTerminateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Terminates the specified job, marking it as completed.
     * When a Terminate Job request is received, the Batch service sets the job to the terminating state. The Batch service then terminates any active or running tasks associated with the job, and runs any required Job Release tasks. The job then moves into the completed state.
     * @param {String} jobId The ID of the job to terminate.
     * @param {String} apiVersion Client API Version.
     * @param {Object} opts Optional parameters
     * @param {Number} [timeout = 30)] The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
     * @param {String} [clientRequestId] The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
     * @param {Boolean} [returnClientRequestId = false)] Whether the server should return the client-request-id in the response.
     * @param {String} [ocpDate] The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.
     * @param {String} [ifMatch] An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client.
     * @param {String} [ifNoneMatch] An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.
     * @param {String} [ifModifiedSince] A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.
     * @param {String} [ifUnmodifiedSince] A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.
     * @param {module:model/JobTerminateParameter} [jobTerminateParameter] The parameters for the request.
     * @param {module:api/JobsApi~jobTerminateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    jobTerminate(jobId, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = opts['jobTerminateParameter'];
      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling jobTerminate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling jobTerminate");
      }

      let pathParams = {
        'jobId': jobId
      };
      let queryParams = {
        'timeout': opts['timeout'],
        'api-version': apiVersion
      };
      let headerParams = {
        'client-request-id': opts['clientRequestId'],
        'return-client-request-id': opts['returnClientRequestId'],
        'ocp-date': opts['ocpDate'],
        'If-Match': opts['ifMatch'],
        'If-None-Match': opts['ifNoneMatch'],
        'If-Modified-Since': opts['ifModifiedSince'],
        'If-Unmodified-Since': opts['ifUnmodifiedSince']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json; odata=minimalmetadata'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/jobs/{jobId}/terminate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the jobUpdate operation.
     * @callback module:api/JobsApi~jobUpdateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the properties of the specified job.
     * This fully replaces all the updatable properties of the job. For example, if the job has constraints associated with it and if constraints is not specified with this request, then the Batch service will remove the existing constraints.
     * @param {String} jobId The ID of the job whose properties you want to update.
     * @param {String} apiVersion Client API Version.
     * @param {module:model/JobUpdateParameter} jobUpdateParameter The parameters for the request.
     * @param {Object} opts Optional parameters
     * @param {Number} [timeout = 30)] The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
     * @param {String} [clientRequestId] The caller-generated request identity, in the form of a GUID with no decoration such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
     * @param {Boolean} [returnClientRequestId = false)] Whether the server should return the client-request-id in the response.
     * @param {String} [ocpDate] The time the request was issued. Client libraries typically set this to the current system clock time; set it explicitly if you are calling the REST API directly.
     * @param {String} [ifMatch] An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service exactly matches the value specified by the client.
     * @param {String} [ifNoneMatch] An ETag value associated with the version of the resource known to the client. The operation will be performed only if the resource's current ETag on the service does not match the value specified by the client.
     * @param {String} [ifModifiedSince] A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has been modified since the specified time.
     * @param {String} [ifUnmodifiedSince] A timestamp indicating the last modified time of the resource known to the client. The operation will be performed only if the resource on the service has not been modified since the specified time.
     * @param {module:api/JobsApi~jobUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    jobUpdate(jobId, apiVersion, jobUpdateParameter, opts, callback) {
      opts = opts || {};
      let postBody = jobUpdateParameter;
      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling jobUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling jobUpdate");
      }
      // verify the required parameter 'jobUpdateParameter' is set
      if (jobUpdateParameter === undefined || jobUpdateParameter === null) {
        throw new Error("Missing the required parameter 'jobUpdateParameter' when calling jobUpdate");
      }

      let pathParams = {
        'jobId': jobId
      };
      let queryParams = {
        'timeout': opts['timeout'],
        'api-version': apiVersion
      };
      let headerParams = {
        'client-request-id': opts['clientRequestId'],
        'return-client-request-id': opts['returnClientRequestId'],
        'ocp-date': opts['ocpDate'],
        'If-Match': opts['ifMatch'],
        'If-None-Match': opts['ifNoneMatch'],
        'If-Modified-Since': opts['ifModifiedSince'],
        'If-Unmodified-Since': opts['ifUnmodifiedSince']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json; odata=minimalmetadata'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/jobs/{jobId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
