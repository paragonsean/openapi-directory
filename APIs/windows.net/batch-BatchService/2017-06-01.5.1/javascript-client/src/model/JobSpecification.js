/**
 * BatchService
 * A client for issuing REST requests to the Azure Batch service.
 *
 * The version of the OpenAPI document: 2017-06-01.5.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EnvironmentSetting from './EnvironmentSetting';
import JobConstraints from './JobConstraints';
import JobManagerTask from './JobManagerTask';
import JobPreparationTask from './JobPreparationTask';
import JobReleaseTask from './JobReleaseTask';
import MetadataItem from './MetadataItem';
import OnAllTasksComplete from './OnAllTasksComplete';
import OnTaskFailure from './OnTaskFailure';
import PoolInformation from './PoolInformation';

/**
 * The JobSpecification model module.
 * @module model/JobSpecification
 * @version 2017-06-01.5.1
 */
class JobSpecification {
    /**
     * Constructs a new <code>JobSpecification</code>.
     * @alias module:model/JobSpecification
     * @param poolInfo {module:model/PoolInformation} 
     */
    constructor(poolInfo) { 
        
        JobSpecification.initialize(this, poolInfo);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, poolInfo) { 
        obj['poolInfo'] = poolInfo;
    }

    /**
     * Constructs a <code>JobSpecification</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/JobSpecification} obj Optional instance to populate.
     * @return {module:model/JobSpecification} The populated <code>JobSpecification</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new JobSpecification();

            if (data.hasOwnProperty('commonEnvironmentSettings')) {
                obj['commonEnvironmentSettings'] = ApiClient.convertToType(data['commonEnvironmentSettings'], [EnvironmentSetting]);
            }
            if (data.hasOwnProperty('constraints')) {
                obj['constraints'] = JobConstraints.constructFromObject(data['constraints']);
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('jobManagerTask')) {
                obj['jobManagerTask'] = JobManagerTask.constructFromObject(data['jobManagerTask']);
            }
            if (data.hasOwnProperty('jobPreparationTask')) {
                obj['jobPreparationTask'] = JobPreparationTask.constructFromObject(data['jobPreparationTask']);
            }
            if (data.hasOwnProperty('jobReleaseTask')) {
                obj['jobReleaseTask'] = JobReleaseTask.constructFromObject(data['jobReleaseTask']);
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = ApiClient.convertToType(data['metadata'], [MetadataItem]);
            }
            if (data.hasOwnProperty('onAllTasksComplete')) {
                obj['onAllTasksComplete'] = OnAllTasksComplete.constructFromObject(data['onAllTasksComplete']);
            }
            if (data.hasOwnProperty('onTaskFailure')) {
                obj['onTaskFailure'] = OnTaskFailure.constructFromObject(data['onTaskFailure']);
            }
            if (data.hasOwnProperty('poolInfo')) {
                obj['poolInfo'] = PoolInformation.constructFromObject(data['poolInfo']);
            }
            if (data.hasOwnProperty('priority')) {
                obj['priority'] = ApiClient.convertToType(data['priority'], 'Number');
            }
            if (data.hasOwnProperty('usesTaskDependencies')) {
                obj['usesTaskDependencies'] = ApiClient.convertToType(data['usesTaskDependencies'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>JobSpecification</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>JobSpecification</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of JobSpecification.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['commonEnvironmentSettings']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['commonEnvironmentSettings'])) {
                throw new Error("Expected the field `commonEnvironmentSettings` to be an array in the JSON data but got " + data['commonEnvironmentSettings']);
            }
            // validate the optional field `commonEnvironmentSettings` (array)
            for (const item of data['commonEnvironmentSettings']) {
                EnvironmentSetting.validateJSON(item);
            };
        }
        // validate the optional field `constraints`
        if (data['constraints']) { // data not null
          JobConstraints.validateJSON(data['constraints']);
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // validate the optional field `jobManagerTask`
        if (data['jobManagerTask']) { // data not null
          JobManagerTask.validateJSON(data['jobManagerTask']);
        }
        // validate the optional field `jobPreparationTask`
        if (data['jobPreparationTask']) { // data not null
          JobPreparationTask.validateJSON(data['jobPreparationTask']);
        }
        // validate the optional field `jobReleaseTask`
        if (data['jobReleaseTask']) { // data not null
          JobReleaseTask.validateJSON(data['jobReleaseTask']);
        }
        if (data['metadata']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['metadata'])) {
                throw new Error("Expected the field `metadata` to be an array in the JSON data but got " + data['metadata']);
            }
            // validate the optional field `metadata` (array)
            for (const item of data['metadata']) {
                MetadataItem.validateJSON(item);
            };
        }
        // validate the optional field `poolInfo`
        if (data['poolInfo']) { // data not null
          PoolInformation.validateJSON(data['poolInfo']);
        }

        return true;
    }


}

JobSpecification.RequiredProperties = ["poolInfo"];

/**
 * Individual tasks can override an environment setting specified here by specifying the same setting name with a different value.
 * @member {Array.<module:model/EnvironmentSetting>} commonEnvironmentSettings
 */
JobSpecification.prototype['commonEnvironmentSettings'] = undefined;

/**
 * @member {module:model/JobConstraints} constraints
 */
JobSpecification.prototype['constraints'] = undefined;

/**
 * The name need not be unique and can contain any Unicode characters up to a maximum length of 1024.
 * @member {String} displayName
 */
JobSpecification.prototype['displayName'] = undefined;

/**
 * @member {module:model/JobManagerTask} jobManagerTask
 */
JobSpecification.prototype['jobManagerTask'] = undefined;

/**
 * @member {module:model/JobPreparationTask} jobPreparationTask
 */
JobSpecification.prototype['jobPreparationTask'] = undefined;

/**
 * @member {module:model/JobReleaseTask} jobReleaseTask
 */
JobSpecification.prototype['jobReleaseTask'] = undefined;

/**
 * The Batch service does not assign any meaning to metadata; it is solely for the use of user code.
 * @member {Array.<module:model/MetadataItem>} metadata
 */
JobSpecification.prototype['metadata'] = undefined;

/**
 * @member {module:model/OnAllTasksComplete} onAllTasksComplete
 */
JobSpecification.prototype['onAllTasksComplete'] = undefined;

/**
 * @member {module:model/OnTaskFailure} onTaskFailure
 */
JobSpecification.prototype['onTaskFailure'] = undefined;

/**
 * @member {module:model/PoolInformation} poolInfo
 */
JobSpecification.prototype['poolInfo'] = undefined;

/**
 * Priority values can range from -1000 to 1000, with -1000 being the lowest priority and 1000 being the highest priority. The default value is 0. This priority is used as the default for all jobs under the job schedule. You can update a job's priority after it has been created using by using the update job API.
 * @member {Number} priority
 */
JobSpecification.prototype['priority'] = undefined;

/**
 * @member {Boolean} usesTaskDependencies
 */
JobSpecification.prototype['usesTaskDependencies'] = undefined;






export default JobSpecification;

