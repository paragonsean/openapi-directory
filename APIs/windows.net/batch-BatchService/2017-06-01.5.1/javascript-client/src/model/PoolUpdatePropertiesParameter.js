/**
 * BatchService
 * A client for issuing REST requests to the Azure Batch service.
 *
 * The version of the OpenAPI document: 2017-06-01.5.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ApplicationPackageReference from './ApplicationPackageReference';
import CertificateReference from './CertificateReference';
import MetadataItem from './MetadataItem';
import StartTask from './StartTask';

/**
 * The PoolUpdatePropertiesParameter model module.
 * @module model/PoolUpdatePropertiesParameter
 * @version 2017-06-01.5.1
 */
class PoolUpdatePropertiesParameter {
    /**
     * Constructs a new <code>PoolUpdatePropertiesParameter</code>.
     * @alias module:model/PoolUpdatePropertiesParameter
     * @param applicationPackageReferences {Array.<module:model/ApplicationPackageReference>} The list replaces any existing application package references on the pool. Changes to application package references affect all new compute nodes joining the pool, but do not affect compute nodes that are already in the pool until they are rebooted or reimaged. If omitted, or if you specify an empty collection, any existing application packages references are removed from the pool.
     * @param certificateReferences {Array.<module:model/CertificateReference>} This list replaces any existing certificate references configured on the pool. If you specify an empty collection, any existing certificate references are removed from the pool. For Windows compute nodes, the Batch service installs the certificates to the specified certificate store and location. For Linux compute nodes, the certificates are stored in a directory inside the task working directory and an environment variable AZ_BATCH_CERTIFICATES_DIR is supplied to the task to query for this location. For certificates with visibility of 'remoteUser', a 'certs' directory is created in the user's home directory (e.g., /home/{user-name}/certs) and certificates are placed in that directory.
     * @param metadata {Array.<module:model/MetadataItem>} This list replaces any existing metadata configured on the pool. If omitted, or if you specify an empty collection, any existing metadata is removed from the pool.
     */
    constructor(applicationPackageReferences, certificateReferences, metadata) { 
        
        PoolUpdatePropertiesParameter.initialize(this, applicationPackageReferences, certificateReferences, metadata);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, applicationPackageReferences, certificateReferences, metadata) { 
        obj['applicationPackageReferences'] = applicationPackageReferences;
        obj['certificateReferences'] = certificateReferences;
        obj['metadata'] = metadata;
    }

    /**
     * Constructs a <code>PoolUpdatePropertiesParameter</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PoolUpdatePropertiesParameter} obj Optional instance to populate.
     * @return {module:model/PoolUpdatePropertiesParameter} The populated <code>PoolUpdatePropertiesParameter</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PoolUpdatePropertiesParameter();

            if (data.hasOwnProperty('applicationPackageReferences')) {
                obj['applicationPackageReferences'] = ApiClient.convertToType(data['applicationPackageReferences'], [ApplicationPackageReference]);
            }
            if (data.hasOwnProperty('certificateReferences')) {
                obj['certificateReferences'] = ApiClient.convertToType(data['certificateReferences'], [CertificateReference]);
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = ApiClient.convertToType(data['metadata'], [MetadataItem]);
            }
            if (data.hasOwnProperty('startTask')) {
                obj['startTask'] = StartTask.constructFromObject(data['startTask']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PoolUpdatePropertiesParameter</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PoolUpdatePropertiesParameter</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PoolUpdatePropertiesParameter.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['applicationPackageReferences']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['applicationPackageReferences'])) {
                throw new Error("Expected the field `applicationPackageReferences` to be an array in the JSON data but got " + data['applicationPackageReferences']);
            }
            // validate the optional field `applicationPackageReferences` (array)
            for (const item of data['applicationPackageReferences']) {
                ApplicationPackageReference.validateJSON(item);
            };
        }
        if (data['certificateReferences']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['certificateReferences'])) {
                throw new Error("Expected the field `certificateReferences` to be an array in the JSON data but got " + data['certificateReferences']);
            }
            // validate the optional field `certificateReferences` (array)
            for (const item of data['certificateReferences']) {
                CertificateReference.validateJSON(item);
            };
        }
        if (data['metadata']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['metadata'])) {
                throw new Error("Expected the field `metadata` to be an array in the JSON data but got " + data['metadata']);
            }
            // validate the optional field `metadata` (array)
            for (const item of data['metadata']) {
                MetadataItem.validateJSON(item);
            };
        }
        // validate the optional field `startTask`
        if (data['startTask']) { // data not null
          StartTask.validateJSON(data['startTask']);
        }

        return true;
    }


}

PoolUpdatePropertiesParameter.RequiredProperties = ["applicationPackageReferences", "certificateReferences", "metadata"];

/**
 * The list replaces any existing application package references on the pool. Changes to application package references affect all new compute nodes joining the pool, but do not affect compute nodes that are already in the pool until they are rebooted or reimaged. If omitted, or if you specify an empty collection, any existing application packages references are removed from the pool.
 * @member {Array.<module:model/ApplicationPackageReference>} applicationPackageReferences
 */
PoolUpdatePropertiesParameter.prototype['applicationPackageReferences'] = undefined;

/**
 * This list replaces any existing certificate references configured on the pool. If you specify an empty collection, any existing certificate references are removed from the pool. For Windows compute nodes, the Batch service installs the certificates to the specified certificate store and location. For Linux compute nodes, the certificates are stored in a directory inside the task working directory and an environment variable AZ_BATCH_CERTIFICATES_DIR is supplied to the task to query for this location. For certificates with visibility of 'remoteUser', a 'certs' directory is created in the user's home directory (e.g., /home/{user-name}/certs) and certificates are placed in that directory.
 * @member {Array.<module:model/CertificateReference>} certificateReferences
 */
PoolUpdatePropertiesParameter.prototype['certificateReferences'] = undefined;

/**
 * This list replaces any existing metadata configured on the pool. If omitted, or if you specify an empty collection, any existing metadata is removed from the pool.
 * @member {Array.<module:model/MetadataItem>} metadata
 */
PoolUpdatePropertiesParameter.prototype['metadata'] = undefined;

/**
 * @member {module:model/StartTask} startTask
 */
PoolUpdatePropertiesParameter.prototype['startTask'] = undefined;






export default PoolUpdatePropertiesParameter;

