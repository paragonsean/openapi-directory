/**
 * BatchService
 * A client for issuing REST requests to the Azure Batch service.
 *
 * The version of the OpenAPI document: 2017-06-01.5.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CertificateAddParameter model module.
 * @module model/CertificateAddParameter
 * @version 2017-06-01.5.1
 */
class CertificateAddParameter {
    /**
     * Constructs a new <code>CertificateAddParameter</code>.
     * @alias module:model/CertificateAddParameter
     * @param data {String} 
     * @param thumbprint {String} 
     * @param thumbprintAlgorithm {String} 
     */
    constructor(data, thumbprint, thumbprintAlgorithm) { 
        
        CertificateAddParameter.initialize(this, data, thumbprint, thumbprintAlgorithm);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, data, thumbprint, thumbprintAlgorithm) { 
        obj['data'] = data;
        obj['thumbprint'] = thumbprint;
        obj['thumbprintAlgorithm'] = thumbprintAlgorithm;
    }

    /**
     * Constructs a <code>CertificateAddParameter</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CertificateAddParameter} obj Optional instance to populate.
     * @return {module:model/CertificateAddParameter} The populated <code>CertificateAddParameter</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CertificateAddParameter();

            if (data.hasOwnProperty('certificateFormat')) {
                obj['certificateFormat'] = ApiClient.convertToType(data['certificateFormat'], 'String');
            }
            if (data.hasOwnProperty('data')) {
                obj['data'] = ApiClient.convertToType(data['data'], 'String');
            }
            if (data.hasOwnProperty('password')) {
                obj['password'] = ApiClient.convertToType(data['password'], 'String');
            }
            if (data.hasOwnProperty('thumbprint')) {
                obj['thumbprint'] = ApiClient.convertToType(data['thumbprint'], 'String');
            }
            if (data.hasOwnProperty('thumbprintAlgorithm')) {
                obj['thumbprintAlgorithm'] = ApiClient.convertToType(data['thumbprintAlgorithm'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CertificateAddParameter</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CertificateAddParameter</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CertificateAddParameter.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['certificateFormat'] && !(typeof data['certificateFormat'] === 'string' || data['certificateFormat'] instanceof String)) {
            throw new Error("Expected the field `certificateFormat` to be a primitive type in the JSON string but got " + data['certificateFormat']);
        }
        // ensure the json data is a string
        if (data['data'] && !(typeof data['data'] === 'string' || data['data'] instanceof String)) {
            throw new Error("Expected the field `data` to be a primitive type in the JSON string but got " + data['data']);
        }
        // ensure the json data is a string
        if (data['password'] && !(typeof data['password'] === 'string' || data['password'] instanceof String)) {
            throw new Error("Expected the field `password` to be a primitive type in the JSON string but got " + data['password']);
        }
        // ensure the json data is a string
        if (data['thumbprint'] && !(typeof data['thumbprint'] === 'string' || data['thumbprint'] instanceof String)) {
            throw new Error("Expected the field `thumbprint` to be a primitive type in the JSON string but got " + data['thumbprint']);
        }
        // ensure the json data is a string
        if (data['thumbprintAlgorithm'] && !(typeof data['thumbprintAlgorithm'] === 'string' || data['thumbprintAlgorithm'] instanceof String)) {
            throw new Error("Expected the field `thumbprintAlgorithm` to be a primitive type in the JSON string but got " + data['thumbprintAlgorithm']);
        }

        return true;
    }


}

CertificateAddParameter.RequiredProperties = ["data", "thumbprint", "thumbprintAlgorithm"];

/**
 * @member {module:model/CertificateAddParameter.CertificateFormatEnum} certificateFormat
 */
CertificateAddParameter.prototype['certificateFormat'] = undefined;

/**
 * @member {String} data
 */
CertificateAddParameter.prototype['data'] = undefined;

/**
 * This is required if the certificate format is pfx. It should be omitted if the certificate format is cer.
 * @member {String} password
 */
CertificateAddParameter.prototype['password'] = undefined;

/**
 * @member {String} thumbprint
 */
CertificateAddParameter.prototype['thumbprint'] = undefined;

/**
 * @member {String} thumbprintAlgorithm
 */
CertificateAddParameter.prototype['thumbprintAlgorithm'] = undefined;





/**
 * Allowed values for the <code>certificateFormat</code> property.
 * @enum {String}
 * @readonly
 */
CertificateAddParameter['CertificateFormatEnum'] = {

    /**
     * value: "pfx"
     * @const
     */
    "pfx": "pfx",

    /**
     * value: "cer"
     * @const
     */
    "cer": "cer"
};



export default CertificateAddParameter;

