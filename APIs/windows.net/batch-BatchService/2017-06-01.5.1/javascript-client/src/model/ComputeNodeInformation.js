/**
 * BatchService
 * A client for issuing REST requests to the Azure Batch service.
 *
 * The version of the OpenAPI document: 2017-06-01.5.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ComputeNodeInformation model module.
 * @module model/ComputeNodeInformation
 * @version 2017-06-01.5.1
 */
class ComputeNodeInformation {
    /**
     * Constructs a new <code>ComputeNodeInformation</code>.
     * @alias module:model/ComputeNodeInformation
     */
    constructor() { 
        
        ComputeNodeInformation.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ComputeNodeInformation</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ComputeNodeInformation} obj Optional instance to populate.
     * @return {module:model/ComputeNodeInformation} The populated <code>ComputeNodeInformation</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ComputeNodeInformation();

            if (data.hasOwnProperty('affinityId')) {
                obj['affinityId'] = ApiClient.convertToType(data['affinityId'], 'String');
            }
            if (data.hasOwnProperty('nodeId')) {
                obj['nodeId'] = ApiClient.convertToType(data['nodeId'], 'String');
            }
            if (data.hasOwnProperty('nodeUrl')) {
                obj['nodeUrl'] = ApiClient.convertToType(data['nodeUrl'], 'String');
            }
            if (data.hasOwnProperty('poolId')) {
                obj['poolId'] = ApiClient.convertToType(data['poolId'], 'String');
            }
            if (data.hasOwnProperty('taskRootDirectory')) {
                obj['taskRootDirectory'] = ApiClient.convertToType(data['taskRootDirectory'], 'String');
            }
            if (data.hasOwnProperty('taskRootDirectoryUrl')) {
                obj['taskRootDirectoryUrl'] = ApiClient.convertToType(data['taskRootDirectoryUrl'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ComputeNodeInformation</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ComputeNodeInformation</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['affinityId'] && !(typeof data['affinityId'] === 'string' || data['affinityId'] instanceof String)) {
            throw new Error("Expected the field `affinityId` to be a primitive type in the JSON string but got " + data['affinityId']);
        }
        // ensure the json data is a string
        if (data['nodeId'] && !(typeof data['nodeId'] === 'string' || data['nodeId'] instanceof String)) {
            throw new Error("Expected the field `nodeId` to be a primitive type in the JSON string but got " + data['nodeId']);
        }
        // ensure the json data is a string
        if (data['nodeUrl'] && !(typeof data['nodeUrl'] === 'string' || data['nodeUrl'] instanceof String)) {
            throw new Error("Expected the field `nodeUrl` to be a primitive type in the JSON string but got " + data['nodeUrl']);
        }
        // ensure the json data is a string
        if (data['poolId'] && !(typeof data['poolId'] === 'string' || data['poolId'] instanceof String)) {
            throw new Error("Expected the field `poolId` to be a primitive type in the JSON string but got " + data['poolId']);
        }
        // ensure the json data is a string
        if (data['taskRootDirectory'] && !(typeof data['taskRootDirectory'] === 'string' || data['taskRootDirectory'] instanceof String)) {
            throw new Error("Expected the field `taskRootDirectory` to be a primitive type in the JSON string but got " + data['taskRootDirectory']);
        }
        // ensure the json data is a string
        if (data['taskRootDirectoryUrl'] && !(typeof data['taskRootDirectoryUrl'] === 'string' || data['taskRootDirectoryUrl'] instanceof String)) {
            throw new Error("Expected the field `taskRootDirectoryUrl` to be a primitive type in the JSON string but got " + data['taskRootDirectoryUrl']);
        }

        return true;
    }


}



/**
 * @member {String} affinityId
 */
ComputeNodeInformation.prototype['affinityId'] = undefined;

/**
 * @member {String} nodeId
 */
ComputeNodeInformation.prototype['nodeId'] = undefined;

/**
 * @member {String} nodeUrl
 */
ComputeNodeInformation.prototype['nodeUrl'] = undefined;

/**
 * @member {String} poolId
 */
ComputeNodeInformation.prototype['poolId'] = undefined;

/**
 * @member {String} taskRootDirectory
 */
ComputeNodeInformation.prototype['taskRootDirectory'] = undefined;

/**
 * @member {String} taskRootDirectoryUrl
 */
ComputeNodeInformation.prototype['taskRootDirectoryUrl'] = undefined;






export default ComputeNodeInformation;

