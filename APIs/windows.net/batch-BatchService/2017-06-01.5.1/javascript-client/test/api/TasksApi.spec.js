/**
 * BatchService
 * A client for issuing REST requests to the Azure Batch service.
 *
 * The version of the OpenAPI document: 2017-06-01.5.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.BatchService);
  }
}(this, function(expect, BatchService) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new BatchService.TasksApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('TasksApi', function() {
    describe('taskAdd', function() {
      it('should call taskAdd successfully', function(done) {
        //uncomment below and update the code to test taskAdd
        //instance.taskAdd(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('taskAddCollection', function() {
      it('should call taskAddCollection successfully', function(done) {
        //uncomment below and update the code to test taskAddCollection
        //instance.taskAddCollection(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('taskDelete', function() {
      it('should call taskDelete successfully', function(done) {
        //uncomment below and update the code to test taskDelete
        //instance.taskDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('taskGet', function() {
      it('should call taskGet successfully', function(done) {
        //uncomment below and update the code to test taskGet
        //instance.taskGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('taskList', function() {
      it('should call taskList successfully', function(done) {
        //uncomment below and update the code to test taskList
        //instance.taskList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('taskListSubtasks', function() {
      it('should call taskListSubtasks successfully', function(done) {
        //uncomment below and update the code to test taskListSubtasks
        //instance.taskListSubtasks(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('taskReactivate', function() {
      it('should call taskReactivate successfully', function(done) {
        //uncomment below and update the code to test taskReactivate
        //instance.taskReactivate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('taskTerminate', function() {
      it('should call taskTerminate successfully', function(done) {
        //uncomment below and update the code to test taskTerminate
        //instance.taskTerminate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('taskUpdate', function() {
      it('should call taskUpdate successfully', function(done) {
        //uncomment below and update the code to test taskUpdate
        //instance.taskUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
