# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.resource_file import ResourceFile
from openapi_server import util


class MultiInstanceSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, common_resource_files: List[ResourceFile]=None, coordination_command_line: str=None, number_of_instances: int=None):
        """MultiInstanceSettings - a model defined in OpenAPI

        :param common_resource_files: The common_resource_files of this MultiInstanceSettings.
        :param coordination_command_line: The coordination_command_line of this MultiInstanceSettings.
        :param number_of_instances: The number_of_instances of this MultiInstanceSettings.
        """
        self.openapi_types = {
            'common_resource_files': List[ResourceFile],
            'coordination_command_line': str,
            'number_of_instances': int
        }

        self.attribute_map = {
            'common_resource_files': 'commonResourceFiles',
            'coordination_command_line': 'coordinationCommandLine',
            'number_of_instances': 'numberOfInstances'
        }

        self._common_resource_files = common_resource_files
        self._coordination_command_line = coordination_command_line
        self._number_of_instances = number_of_instances

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MultiInstanceSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MultiInstanceSettings of this MultiInstanceSettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def common_resource_files(self):
        """Gets the common_resource_files of this MultiInstanceSettings.

        The difference between common resource files and task resource files is that common resource files are downloaded for all subtasks including the primary, whereas task resource files are downloaded only for the primary. Also note that these resource files are not downloaded to the task working directory, but instead are downloaded to the task root directory (one directory above the working directory).

        :return: The common_resource_files of this MultiInstanceSettings.
        :rtype: List[ResourceFile]
        """
        return self._common_resource_files

    @common_resource_files.setter
    def common_resource_files(self, common_resource_files):
        """Sets the common_resource_files of this MultiInstanceSettings.

        The difference between common resource files and task resource files is that common resource files are downloaded for all subtasks including the primary, whereas task resource files are downloaded only for the primary. Also note that these resource files are not downloaded to the task working directory, but instead are downloaded to the task root directory (one directory above the working directory).

        :param common_resource_files: The common_resource_files of this MultiInstanceSettings.
        :type common_resource_files: List[ResourceFile]
        """

        self._common_resource_files = common_resource_files

    @property
    def coordination_command_line(self):
        """Gets the coordination_command_line of this MultiInstanceSettings.

        A typical coordination command line launches a background service and verifies that the service is ready to process inter-node messages.

        :return: The coordination_command_line of this MultiInstanceSettings.
        :rtype: str
        """
        return self._coordination_command_line

    @coordination_command_line.setter
    def coordination_command_line(self, coordination_command_line):
        """Sets the coordination_command_line of this MultiInstanceSettings.

        A typical coordination command line launches a background service and verifies that the service is ready to process inter-node messages.

        :param coordination_command_line: The coordination_command_line of this MultiInstanceSettings.
        :type coordination_command_line: str
        """
        if coordination_command_line is None:
            raise ValueError("Invalid value for `coordination_command_line`, must not be `None`")

        self._coordination_command_line = coordination_command_line

    @property
    def number_of_instances(self):
        """Gets the number_of_instances of this MultiInstanceSettings.

        If omitted, the default is 1.

        :return: The number_of_instances of this MultiInstanceSettings.
        :rtype: int
        """
        return self._number_of_instances

    @number_of_instances.setter
    def number_of_instances(self, number_of_instances):
        """Sets the number_of_instances of this MultiInstanceSettings.

        If omitted, the default is 1.

        :param number_of_instances: The number_of_instances of this MultiInstanceSettings.
        :type number_of_instances: int
        """

        self._number_of_instances = number_of_instances
