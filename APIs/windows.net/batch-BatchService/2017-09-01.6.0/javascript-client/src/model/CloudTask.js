/**
 * BatchService
 * A client for issuing REST requests to the Azure Batch service.
 *
 * The version of the OpenAPI document: 2017-09-01.6.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AffinityInformation from './AffinityInformation';
import ApplicationPackageReference from './ApplicationPackageReference';
import AuthenticationTokenSettings from './AuthenticationTokenSettings';
import ComputeNodeInformation from './ComputeNodeInformation';
import EnvironmentSetting from './EnvironmentSetting';
import ExitConditions from './ExitConditions';
import MultiInstanceSettings from './MultiInstanceSettings';
import OutputFile from './OutputFile';
import ResourceFile from './ResourceFile';
import TaskConstraints from './TaskConstraints';
import TaskContainerSettings from './TaskContainerSettings';
import TaskDependencies from './TaskDependencies';
import TaskExecutionInformation from './TaskExecutionInformation';
import TaskState from './TaskState';
import TaskStatistics from './TaskStatistics';
import UserIdentity from './UserIdentity';

/**
 * The CloudTask model module.
 * @module model/CloudTask
 * @version 2017-09-01.6.0
 */
class CloudTask {
    /**
     * Constructs a new <code>CloudTask</code>.
     * @alias module:model/CloudTask
     */
    constructor() { 
        
        CloudTask.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CloudTask</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CloudTask} obj Optional instance to populate.
     * @return {module:model/CloudTask} The populated <code>CloudTask</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CloudTask();

            if (data.hasOwnProperty('affinityInfo')) {
                obj['affinityInfo'] = AffinityInformation.constructFromObject(data['affinityInfo']);
            }
            if (data.hasOwnProperty('applicationPackageReferences')) {
                obj['applicationPackageReferences'] = ApiClient.convertToType(data['applicationPackageReferences'], [ApplicationPackageReference]);
            }
            if (data.hasOwnProperty('authenticationTokenSettings')) {
                obj['authenticationTokenSettings'] = AuthenticationTokenSettings.constructFromObject(data['authenticationTokenSettings']);
            }
            if (data.hasOwnProperty('commandLine')) {
                obj['commandLine'] = ApiClient.convertToType(data['commandLine'], 'String');
            }
            if (data.hasOwnProperty('constraints')) {
                obj['constraints'] = TaskConstraints.constructFromObject(data['constraints']);
            }
            if (data.hasOwnProperty('containerSettings')) {
                obj['containerSettings'] = TaskContainerSettings.constructFromObject(data['containerSettings']);
            }
            if (data.hasOwnProperty('creationTime')) {
                obj['creationTime'] = ApiClient.convertToType(data['creationTime'], 'Date');
            }
            if (data.hasOwnProperty('dependsOn')) {
                obj['dependsOn'] = TaskDependencies.constructFromObject(data['dependsOn']);
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('eTag')) {
                obj['eTag'] = ApiClient.convertToType(data['eTag'], 'String');
            }
            if (data.hasOwnProperty('environmentSettings')) {
                obj['environmentSettings'] = ApiClient.convertToType(data['environmentSettings'], [EnvironmentSetting]);
            }
            if (data.hasOwnProperty('executionInfo')) {
                obj['executionInfo'] = TaskExecutionInformation.constructFromObject(data['executionInfo']);
            }
            if (data.hasOwnProperty('exitConditions')) {
                obj['exitConditions'] = ExitConditions.constructFromObject(data['exitConditions']);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('lastModified')) {
                obj['lastModified'] = ApiClient.convertToType(data['lastModified'], 'Date');
            }
            if (data.hasOwnProperty('multiInstanceSettings')) {
                obj['multiInstanceSettings'] = MultiInstanceSettings.constructFromObject(data['multiInstanceSettings']);
            }
            if (data.hasOwnProperty('nodeInfo')) {
                obj['nodeInfo'] = ComputeNodeInformation.constructFromObject(data['nodeInfo']);
            }
            if (data.hasOwnProperty('outputFiles')) {
                obj['outputFiles'] = ApiClient.convertToType(data['outputFiles'], [OutputFile]);
            }
            if (data.hasOwnProperty('previousState')) {
                obj['previousState'] = TaskState.constructFromObject(data['previousState']);
            }
            if (data.hasOwnProperty('previousStateTransitionTime')) {
                obj['previousStateTransitionTime'] = ApiClient.convertToType(data['previousStateTransitionTime'], 'Date');
            }
            if (data.hasOwnProperty('resourceFiles')) {
                obj['resourceFiles'] = ApiClient.convertToType(data['resourceFiles'], [ResourceFile]);
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = TaskState.constructFromObject(data['state']);
            }
            if (data.hasOwnProperty('stateTransitionTime')) {
                obj['stateTransitionTime'] = ApiClient.convertToType(data['stateTransitionTime'], 'Date');
            }
            if (data.hasOwnProperty('stats')) {
                obj['stats'] = TaskStatistics.constructFromObject(data['stats']);
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
            if (data.hasOwnProperty('userIdentity')) {
                obj['userIdentity'] = UserIdentity.constructFromObject(data['userIdentity']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CloudTask</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CloudTask</code>.
     */
    static validateJSON(data) {
        // validate the optional field `affinityInfo`
        if (data['affinityInfo']) { // data not null
          AffinityInformation.validateJSON(data['affinityInfo']);
        }
        if (data['applicationPackageReferences']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['applicationPackageReferences'])) {
                throw new Error("Expected the field `applicationPackageReferences` to be an array in the JSON data but got " + data['applicationPackageReferences']);
            }
            // validate the optional field `applicationPackageReferences` (array)
            for (const item of data['applicationPackageReferences']) {
                ApplicationPackageReference.validateJSON(item);
            };
        }
        // validate the optional field `authenticationTokenSettings`
        if (data['authenticationTokenSettings']) { // data not null
          AuthenticationTokenSettings.validateJSON(data['authenticationTokenSettings']);
        }
        // ensure the json data is a string
        if (data['commandLine'] && !(typeof data['commandLine'] === 'string' || data['commandLine'] instanceof String)) {
            throw new Error("Expected the field `commandLine` to be a primitive type in the JSON string but got " + data['commandLine']);
        }
        // validate the optional field `constraints`
        if (data['constraints']) { // data not null
          TaskConstraints.validateJSON(data['constraints']);
        }
        // validate the optional field `containerSettings`
        if (data['containerSettings']) { // data not null
          TaskContainerSettings.validateJSON(data['containerSettings']);
        }
        // validate the optional field `dependsOn`
        if (data['dependsOn']) { // data not null
          TaskDependencies.validateJSON(data['dependsOn']);
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // ensure the json data is a string
        if (data['eTag'] && !(typeof data['eTag'] === 'string' || data['eTag'] instanceof String)) {
            throw new Error("Expected the field `eTag` to be a primitive type in the JSON string but got " + data['eTag']);
        }
        if (data['environmentSettings']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['environmentSettings'])) {
                throw new Error("Expected the field `environmentSettings` to be an array in the JSON data but got " + data['environmentSettings']);
            }
            // validate the optional field `environmentSettings` (array)
            for (const item of data['environmentSettings']) {
                EnvironmentSetting.validateJSON(item);
            };
        }
        // validate the optional field `executionInfo`
        if (data['executionInfo']) { // data not null
          TaskExecutionInformation.validateJSON(data['executionInfo']);
        }
        // validate the optional field `exitConditions`
        if (data['exitConditions']) { // data not null
          ExitConditions.validateJSON(data['exitConditions']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // validate the optional field `multiInstanceSettings`
        if (data['multiInstanceSettings']) { // data not null
          MultiInstanceSettings.validateJSON(data['multiInstanceSettings']);
        }
        // validate the optional field `nodeInfo`
        if (data['nodeInfo']) { // data not null
          ComputeNodeInformation.validateJSON(data['nodeInfo']);
        }
        if (data['outputFiles']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['outputFiles'])) {
                throw new Error("Expected the field `outputFiles` to be an array in the JSON data but got " + data['outputFiles']);
            }
            // validate the optional field `outputFiles` (array)
            for (const item of data['outputFiles']) {
                OutputFile.validateJSON(item);
            };
        }
        if (data['resourceFiles']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['resourceFiles'])) {
                throw new Error("Expected the field `resourceFiles` to be an array in the JSON data but got " + data['resourceFiles']);
            }
            // validate the optional field `resourceFiles` (array)
            for (const item of data['resourceFiles']) {
                ResourceFile.validateJSON(item);
            };
        }
        // validate the optional field `stats`
        if (data['stats']) { // data not null
          TaskStatistics.validateJSON(data['stats']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }
        // validate the optional field `userIdentity`
        if (data['userIdentity']) { // data not null
          UserIdentity.validateJSON(data['userIdentity']);
        }

        return true;
    }


}



/**
 * @member {module:model/AffinityInformation} affinityInfo
 */
CloudTask.prototype['affinityInfo'] = undefined;

/**
 * Application packages are downloaded and deployed to a shared directory, not the task working directory. Therefore, if a referenced package is already on the compute node, and is up to date, then it is not re-downloaded; the existing copy on the compute node is used. If a referenced application package cannot be installed, for example because the package has been deleted or because download failed, the task fails.
 * @member {Array.<module:model/ApplicationPackageReference>} applicationPackageReferences
 */
CloudTask.prototype['applicationPackageReferences'] = undefined;

/**
 * @member {module:model/AuthenticationTokenSettings} authenticationTokenSettings
 */
CloudTask.prototype['authenticationTokenSettings'] = undefined;

/**
 * For multi-instance tasks, the command line is executed as the primary task, after the primary task and all subtasks have finished executing the coordination command line. The command line does not run under a shell, and therefore cannot take advantage of shell features such as environment variable expansion. If you want to take advantage of such features, you should invoke the shell in the command line, for example using \"cmd /c MyCommand\" in Windows or \"/bin/sh -c MyCommand\" in Linux.
 * @member {String} commandLine
 */
CloudTask.prototype['commandLine'] = undefined;

/**
 * @member {module:model/TaskConstraints} constraints
 */
CloudTask.prototype['constraints'] = undefined;

/**
 * @member {module:model/TaskContainerSettings} containerSettings
 */
CloudTask.prototype['containerSettings'] = undefined;

/**
 * @member {Date} creationTime
 */
CloudTask.prototype['creationTime'] = undefined;

/**
 * @member {module:model/TaskDependencies} dependsOn
 */
CloudTask.prototype['dependsOn'] = undefined;

/**
 * The display name need not be unique and can contain any Unicode characters up to a maximum length of 1024.
 * @member {String} displayName
 */
CloudTask.prototype['displayName'] = undefined;

/**
 * This is an opaque string. You can use it to detect whether the task has changed between requests. In particular, you can be pass the ETag when updating a task to specify that your changes should take effect only if nobody else has modified the task in the meantime.
 * @member {String} eTag
 */
CloudTask.prototype['eTag'] = undefined;

/**
 * @member {Array.<module:model/EnvironmentSetting>} environmentSettings
 */
CloudTask.prototype['environmentSettings'] = undefined;

/**
 * @member {module:model/TaskExecutionInformation} executionInfo
 */
CloudTask.prototype['executionInfo'] = undefined;

/**
 * @member {module:model/ExitConditions} exitConditions
 */
CloudTask.prototype['exitConditions'] = undefined;

/**
 * The ID can contain any combination of alphanumeric characters including hyphens and underscores, and cannot contain more than 64 characters.
 * @member {String} id
 */
CloudTask.prototype['id'] = undefined;

/**
 * @member {Date} lastModified
 */
CloudTask.prototype['lastModified'] = undefined;

/**
 * @member {module:model/MultiInstanceSettings} multiInstanceSettings
 */
CloudTask.prototype['multiInstanceSettings'] = undefined;

/**
 * @member {module:model/ComputeNodeInformation} nodeInfo
 */
CloudTask.prototype['nodeInfo'] = undefined;

/**
 * For multi-instance tasks, the files will only be uploaded from the compute node on which the primary task is executed.
 * @member {Array.<module:model/OutputFile>} outputFiles
 */
CloudTask.prototype['outputFiles'] = undefined;

/**
 * @member {module:model/TaskState} previousState
 */
CloudTask.prototype['previousState'] = undefined;

/**
 * This property is not set if the task is in its initial Active state.
 * @member {Date} previousStateTransitionTime
 */
CloudTask.prototype['previousStateTransitionTime'] = undefined;

/**
 * For multi-instance tasks, the resource files will only be downloaded to the compute node on which the primary task is executed.
 * @member {Array.<module:model/ResourceFile>} resourceFiles
 */
CloudTask.prototype['resourceFiles'] = undefined;

/**
 * @member {module:model/TaskState} state
 */
CloudTask.prototype['state'] = undefined;

/**
 * @member {Date} stateTransitionTime
 */
CloudTask.prototype['stateTransitionTime'] = undefined;

/**
 * @member {module:model/TaskStatistics} stats
 */
CloudTask.prototype['stats'] = undefined;

/**
 * @member {String} url
 */
CloudTask.prototype['url'] = undefined;

/**
 * @member {module:model/UserIdentity} userIdentity
 */
CloudTask.prototype['userIdentity'] = undefined;






export default CloudTask;

