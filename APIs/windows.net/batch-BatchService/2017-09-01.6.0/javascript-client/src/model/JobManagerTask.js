/**
 * BatchService
 * A client for issuing REST requests to the Azure Batch service.
 *
 * The version of the OpenAPI document: 2017-09-01.6.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ApplicationPackageReference from './ApplicationPackageReference';
import AuthenticationTokenSettings from './AuthenticationTokenSettings';
import EnvironmentSetting from './EnvironmentSetting';
import OutputFile from './OutputFile';
import ResourceFile from './ResourceFile';
import TaskConstraints from './TaskConstraints';
import TaskContainerSettings from './TaskContainerSettings';
import UserIdentity from './UserIdentity';

/**
 * The JobManagerTask model module.
 * @module model/JobManagerTask
 * @version 2017-09-01.6.0
 */
class JobManagerTask {
    /**
     * Constructs a new <code>JobManagerTask</code>.
     * The Job Manager task is automatically started when the job is created. The Batch service tries to schedule the Job Manager task before any other tasks in the job. When shrinking a pool, the Batch service tries to preserve compute nodes where Job Manager tasks are running for as long as possible (that is, nodes running &#39;normal&#39; tasks are removed before nodes running Job Manager tasks). When a Job Manager task fails and needs to be restarted, the system tries to schedule it at the highest priority. If there are no idle nodes available, the system may terminate one of the running tasks in the pool and return it to the queue in order to make room for the Job Manager task to restart. Note that a Job Manager task in one job does not have priority over tasks in other jobs. Across jobs, only job level priorities are observed. For example, if a Job Manager in a priority 0 job needs to be restarted, it will not displace tasks of a priority 1 job.
     * @alias module:model/JobManagerTask
     * @param commandLine {String} The command line does not run under a shell, and therefore cannot take advantage of shell features such as environment variable expansion. If you want to take advantage of such features, you should invoke the shell in the command line, for example using \"cmd /c MyCommand\" in Windows or \"/bin/sh -c MyCommand\" in Linux.
     * @param id {String} The ID can contain any combination of alphanumeric characters including hyphens and underscores and cannot contain more than 64 characters.
     */
    constructor(commandLine, id) { 
        
        JobManagerTask.initialize(this, commandLine, id);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, commandLine, id) { 
        obj['commandLine'] = commandLine;
        obj['id'] = id;
    }

    /**
     * Constructs a <code>JobManagerTask</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/JobManagerTask} obj Optional instance to populate.
     * @return {module:model/JobManagerTask} The populated <code>JobManagerTask</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new JobManagerTask();

            if (data.hasOwnProperty('allowLowPriorityNode')) {
                obj['allowLowPriorityNode'] = ApiClient.convertToType(data['allowLowPriorityNode'], 'Boolean');
            }
            if (data.hasOwnProperty('applicationPackageReferences')) {
                obj['applicationPackageReferences'] = ApiClient.convertToType(data['applicationPackageReferences'], [ApplicationPackageReference]);
            }
            if (data.hasOwnProperty('authenticationTokenSettings')) {
                obj['authenticationTokenSettings'] = AuthenticationTokenSettings.constructFromObject(data['authenticationTokenSettings']);
            }
            if (data.hasOwnProperty('commandLine')) {
                obj['commandLine'] = ApiClient.convertToType(data['commandLine'], 'String');
            }
            if (data.hasOwnProperty('constraints')) {
                obj['constraints'] = TaskConstraints.constructFromObject(data['constraints']);
            }
            if (data.hasOwnProperty('containerSettings')) {
                obj['containerSettings'] = TaskContainerSettings.constructFromObject(data['containerSettings']);
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('environmentSettings')) {
                obj['environmentSettings'] = ApiClient.convertToType(data['environmentSettings'], [EnvironmentSetting]);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('killJobOnCompletion')) {
                obj['killJobOnCompletion'] = ApiClient.convertToType(data['killJobOnCompletion'], 'Boolean');
            }
            if (data.hasOwnProperty('outputFiles')) {
                obj['outputFiles'] = ApiClient.convertToType(data['outputFiles'], [OutputFile]);
            }
            if (data.hasOwnProperty('resourceFiles')) {
                obj['resourceFiles'] = ApiClient.convertToType(data['resourceFiles'], [ResourceFile]);
            }
            if (data.hasOwnProperty('runExclusive')) {
                obj['runExclusive'] = ApiClient.convertToType(data['runExclusive'], 'Boolean');
            }
            if (data.hasOwnProperty('userIdentity')) {
                obj['userIdentity'] = UserIdentity.constructFromObject(data['userIdentity']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>JobManagerTask</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>JobManagerTask</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of JobManagerTask.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['applicationPackageReferences']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['applicationPackageReferences'])) {
                throw new Error("Expected the field `applicationPackageReferences` to be an array in the JSON data but got " + data['applicationPackageReferences']);
            }
            // validate the optional field `applicationPackageReferences` (array)
            for (const item of data['applicationPackageReferences']) {
                ApplicationPackageReference.validateJSON(item);
            };
        }
        // validate the optional field `authenticationTokenSettings`
        if (data['authenticationTokenSettings']) { // data not null
          AuthenticationTokenSettings.validateJSON(data['authenticationTokenSettings']);
        }
        // ensure the json data is a string
        if (data['commandLine'] && !(typeof data['commandLine'] === 'string' || data['commandLine'] instanceof String)) {
            throw new Error("Expected the field `commandLine` to be a primitive type in the JSON string but got " + data['commandLine']);
        }
        // validate the optional field `constraints`
        if (data['constraints']) { // data not null
          TaskConstraints.validateJSON(data['constraints']);
        }
        // validate the optional field `containerSettings`
        if (data['containerSettings']) { // data not null
          TaskContainerSettings.validateJSON(data['containerSettings']);
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        if (data['environmentSettings']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['environmentSettings'])) {
                throw new Error("Expected the field `environmentSettings` to be an array in the JSON data but got " + data['environmentSettings']);
            }
            // validate the optional field `environmentSettings` (array)
            for (const item of data['environmentSettings']) {
                EnvironmentSetting.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        if (data['outputFiles']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['outputFiles'])) {
                throw new Error("Expected the field `outputFiles` to be an array in the JSON data but got " + data['outputFiles']);
            }
            // validate the optional field `outputFiles` (array)
            for (const item of data['outputFiles']) {
                OutputFile.validateJSON(item);
            };
        }
        if (data['resourceFiles']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['resourceFiles'])) {
                throw new Error("Expected the field `resourceFiles` to be an array in the JSON data but got " + data['resourceFiles']);
            }
            // validate the optional field `resourceFiles` (array)
            for (const item of data['resourceFiles']) {
                ResourceFile.validateJSON(item);
            };
        }
        // validate the optional field `userIdentity`
        if (data['userIdentity']) { // data not null
          UserIdentity.validateJSON(data['userIdentity']);
        }

        return true;
    }


}

JobManagerTask.RequiredProperties = ["commandLine", "id"];

/**
 * The default value is false.
 * @member {Boolean} allowLowPriorityNode
 */
JobManagerTask.prototype['allowLowPriorityNode'] = undefined;

/**
 * Application packages are downloaded and deployed to a shared directory, not the task working directory. Therefore, if a referenced package is already on the compute node, and is up to date, then it is not re-downloaded; the existing copy on the compute node is used. If a referenced application package cannot be installed, for example because the package has been deleted or because download failed, the task fails.
 * @member {Array.<module:model/ApplicationPackageReference>} applicationPackageReferences
 */
JobManagerTask.prototype['applicationPackageReferences'] = undefined;

/**
 * @member {module:model/AuthenticationTokenSettings} authenticationTokenSettings
 */
JobManagerTask.prototype['authenticationTokenSettings'] = undefined;

/**
 * The command line does not run under a shell, and therefore cannot take advantage of shell features such as environment variable expansion. If you want to take advantage of such features, you should invoke the shell in the command line, for example using \"cmd /c MyCommand\" in Windows or \"/bin/sh -c MyCommand\" in Linux.
 * @member {String} commandLine
 */
JobManagerTask.prototype['commandLine'] = undefined;

/**
 * @member {module:model/TaskConstraints} constraints
 */
JobManagerTask.prototype['constraints'] = undefined;

/**
 * @member {module:model/TaskContainerSettings} containerSettings
 */
JobManagerTask.prototype['containerSettings'] = undefined;

/**
 * It need not be unique and can contain any Unicode characters up to a maximum length of 1024.
 * @member {String} displayName
 */
JobManagerTask.prototype['displayName'] = undefined;

/**
 * @member {Array.<module:model/EnvironmentSetting>} environmentSettings
 */
JobManagerTask.prototype['environmentSettings'] = undefined;

/**
 * The ID can contain any combination of alphanumeric characters including hyphens and underscores and cannot contain more than 64 characters.
 * @member {String} id
 */
JobManagerTask.prototype['id'] = undefined;

/**
 * If true, when the Job Manager task completes, the Batch service marks the job as complete. If any tasks are still running at this time (other than Job Release), those tasks are terminated. If false, the completion of the Job Manager task does not affect the job status. In this case, you should either use the onAllTasksComplete attribute to terminate the job, or have a client or user terminate the job explicitly. An example of this is if the Job Manager creates a set of tasks but then takes no further role in their execution. The default value is true. If you are using the onAllTasksComplete and onTaskFailure attributes to control job lifetime, and using the Job Manager task only to create the tasks for the job (not to monitor progress), then it is important to set killJobOnCompletion to false.
 * @member {Boolean} killJobOnCompletion
 */
JobManagerTask.prototype['killJobOnCompletion'] = undefined;

/**
 * For multi-instance tasks, the files will only be uploaded from the compute node on which the primary task is executed.
 * @member {Array.<module:model/OutputFile>} outputFiles
 */
JobManagerTask.prototype['outputFiles'] = undefined;

/**
 * Files listed under this element are located in the task's working directory.
 * @member {Array.<module:model/ResourceFile>} resourceFiles
 */
JobManagerTask.prototype['resourceFiles'] = undefined;

/**
 * If true, no other tasks will run on the same compute node for as long as the Job Manager is running. If false, other tasks can run simultaneously with the Job Manager on a compute node. The Job Manager task counts normally against the node's concurrent task limit, so this is only relevant if the node allows multiple concurrent tasks. The default value is true.
 * @member {Boolean} runExclusive
 */
JobManagerTask.prototype['runExclusive'] = undefined;

/**
 * @member {module:model/UserIdentity} userIdentity
 */
JobManagerTask.prototype['userIdentity'] = undefined;






export default JobManagerTask;

