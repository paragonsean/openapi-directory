/**
 * BatchService
 * A client for issuing REST requests to the Azure Batch service.
 *
 * The version of the OpenAPI document: 2017-09-01.6.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The TaskCounts model module.
 * @module model/TaskCounts
 * @version 2017-09-01.6.0
 */
class TaskCounts {
    /**
     * Constructs a new <code>TaskCounts</code>.
     * @alias module:model/TaskCounts
     * @param active {Number} 
     * @param completed {Number} 
     * @param failed {Number} 
     * @param running {Number} 
     * @param succeeded {Number} 
     * @param validationStatus {module:model/TaskCounts.ValidationStatusEnum} 
     */
    constructor(active, completed, failed, running, succeeded, validationStatus) { 
        
        TaskCounts.initialize(this, active, completed, failed, running, succeeded, validationStatus);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, active, completed, failed, running, succeeded, validationStatus) { 
        obj['active'] = active;
        obj['completed'] = completed;
        obj['failed'] = failed;
        obj['running'] = running;
        obj['succeeded'] = succeeded;
        obj['validationStatus'] = validationStatus;
    }

    /**
     * Constructs a <code>TaskCounts</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TaskCounts} obj Optional instance to populate.
     * @return {module:model/TaskCounts} The populated <code>TaskCounts</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TaskCounts();

            if (data.hasOwnProperty('active')) {
                obj['active'] = ApiClient.convertToType(data['active'], 'Number');
            }
            if (data.hasOwnProperty('completed')) {
                obj['completed'] = ApiClient.convertToType(data['completed'], 'Number');
            }
            if (data.hasOwnProperty('failed')) {
                obj['failed'] = ApiClient.convertToType(data['failed'], 'Number');
            }
            if (data.hasOwnProperty('running')) {
                obj['running'] = ApiClient.convertToType(data['running'], 'Number');
            }
            if (data.hasOwnProperty('succeeded')) {
                obj['succeeded'] = ApiClient.convertToType(data['succeeded'], 'Number');
            }
            if (data.hasOwnProperty('validationStatus')) {
                obj['validationStatus'] = ApiClient.convertToType(data['validationStatus'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TaskCounts</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TaskCounts</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of TaskCounts.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['validationStatus'] && !(typeof data['validationStatus'] === 'string' || data['validationStatus'] instanceof String)) {
            throw new Error("Expected the field `validationStatus` to be a primitive type in the JSON string but got " + data['validationStatus']);
        }

        return true;
    }


}

TaskCounts.RequiredProperties = ["active", "completed", "failed", "running", "succeeded", "validationStatus"];

/**
 * @member {Number} active
 */
TaskCounts.prototype['active'] = undefined;

/**
 * @member {Number} completed
 */
TaskCounts.prototype['completed'] = undefined;

/**
 * @member {Number} failed
 */
TaskCounts.prototype['failed'] = undefined;

/**
 * @member {Number} running
 */
TaskCounts.prototype['running'] = undefined;

/**
 * @member {Number} succeeded
 */
TaskCounts.prototype['succeeded'] = undefined;

/**
 * @member {module:model/TaskCounts.ValidationStatusEnum} validationStatus
 */
TaskCounts.prototype['validationStatus'] = undefined;





/**
 * Allowed values for the <code>validationStatus</code> property.
 * @enum {String}
 * @readonly
 */
TaskCounts['ValidationStatusEnum'] = {

    /**
     * value: "validated"
     * @const
     */
    "validated": "validated",

    /**
     * value: "unvalidated"
     * @const
     */
    "unvalidated": "unvalidated"
};



export default TaskCounts;

