/**
 * BatchService
 * A client for issuing REST requests to the Azure Batch service.
 *
 * The version of the OpenAPI document: 2017-09-01.6.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EnvironmentSetting from './EnvironmentSetting';
import ResourceFile from './ResourceFile';
import TaskContainerSettings from './TaskContainerSettings';
import UserIdentity from './UserIdentity';

/**
 * The StartTask model module.
 * @module model/StartTask
 * @version 2017-09-01.6.0
 */
class StartTask {
    /**
     * Constructs a new <code>StartTask</code>.
     * @alias module:model/StartTask
     * @param commandLine {String} The command line does not run under a shell, and therefore cannot take advantage of shell features such as environment variable expansion. If you want to take advantage of such features, you should invoke the shell in the command line, for example using \"cmd /c MyCommand\" in Windows or \"/bin/sh -c MyCommand\" in Linux.
     */
    constructor(commandLine) { 
        
        StartTask.initialize(this, commandLine);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, commandLine) { 
        obj['commandLine'] = commandLine;
    }

    /**
     * Constructs a <code>StartTask</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/StartTask} obj Optional instance to populate.
     * @return {module:model/StartTask} The populated <code>StartTask</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new StartTask();

            if (data.hasOwnProperty('commandLine')) {
                obj['commandLine'] = ApiClient.convertToType(data['commandLine'], 'String');
            }
            if (data.hasOwnProperty('containerSettings')) {
                obj['containerSettings'] = TaskContainerSettings.constructFromObject(data['containerSettings']);
            }
            if (data.hasOwnProperty('environmentSettings')) {
                obj['environmentSettings'] = ApiClient.convertToType(data['environmentSettings'], [EnvironmentSetting]);
            }
            if (data.hasOwnProperty('maxTaskRetryCount')) {
                obj['maxTaskRetryCount'] = ApiClient.convertToType(data['maxTaskRetryCount'], 'Number');
            }
            if (data.hasOwnProperty('resourceFiles')) {
                obj['resourceFiles'] = ApiClient.convertToType(data['resourceFiles'], [ResourceFile]);
            }
            if (data.hasOwnProperty('userIdentity')) {
                obj['userIdentity'] = UserIdentity.constructFromObject(data['userIdentity']);
            }
            if (data.hasOwnProperty('waitForSuccess')) {
                obj['waitForSuccess'] = ApiClient.convertToType(data['waitForSuccess'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>StartTask</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>StartTask</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of StartTask.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['commandLine'] && !(typeof data['commandLine'] === 'string' || data['commandLine'] instanceof String)) {
            throw new Error("Expected the field `commandLine` to be a primitive type in the JSON string but got " + data['commandLine']);
        }
        // validate the optional field `containerSettings`
        if (data['containerSettings']) { // data not null
          TaskContainerSettings.validateJSON(data['containerSettings']);
        }
        if (data['environmentSettings']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['environmentSettings'])) {
                throw new Error("Expected the field `environmentSettings` to be an array in the JSON data but got " + data['environmentSettings']);
            }
            // validate the optional field `environmentSettings` (array)
            for (const item of data['environmentSettings']) {
                EnvironmentSetting.validateJSON(item);
            };
        }
        if (data['resourceFiles']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['resourceFiles'])) {
                throw new Error("Expected the field `resourceFiles` to be an array in the JSON data but got " + data['resourceFiles']);
            }
            // validate the optional field `resourceFiles` (array)
            for (const item of data['resourceFiles']) {
                ResourceFile.validateJSON(item);
            };
        }
        // validate the optional field `userIdentity`
        if (data['userIdentity']) { // data not null
          UserIdentity.validateJSON(data['userIdentity']);
        }

        return true;
    }


}

StartTask.RequiredProperties = ["commandLine"];

/**
 * The command line does not run under a shell, and therefore cannot take advantage of shell features such as environment variable expansion. If you want to take advantage of such features, you should invoke the shell in the command line, for example using \"cmd /c MyCommand\" in Windows or \"/bin/sh -c MyCommand\" in Linux.
 * @member {String} commandLine
 */
StartTask.prototype['commandLine'] = undefined;

/**
 * @member {module:model/TaskContainerSettings} containerSettings
 */
StartTask.prototype['containerSettings'] = undefined;

/**
 * @member {Array.<module:model/EnvironmentSetting>} environmentSettings
 */
StartTask.prototype['environmentSettings'] = undefined;

/**
 * The Batch service retries a task if its exit code is nonzero. Note that this value specifically controls the number of retries. The Batch service will try the task once, and may then retry up to this limit. For example, if the maximum retry count is 3, Batch tries the task up to 4 times (one initial try and 3 retries). If the maximum retry count is 0, the Batch service does not retry the task. If the maximum retry count is -1, the Batch service retries the task without limit.
 * @member {Number} maxTaskRetryCount
 */
StartTask.prototype['maxTaskRetryCount'] = undefined;

/**
 * Files listed under this element are located in the task's working directory.
 * @member {Array.<module:model/ResourceFile>} resourceFiles
 */
StartTask.prototype['resourceFiles'] = undefined;

/**
 * @member {module:model/UserIdentity} userIdentity
 */
StartTask.prototype['userIdentity'] = undefined;

/**
 * If true and the start task fails on a compute node, the Batch service retries the start task up to its maximum retry count (maxTaskRetryCount). If the task has still not completed successfully after all retries, then the Batch service marks the compute node unusable, and will not schedule tasks to it. This condition can be detected via the node state and failure info details. If false, the Batch service will not wait for the start task to complete. In this case, other tasks can start executing on the compute node while the start task is still running; and even if the start task fails, new tasks will continue to be scheduled on the node. The default is false.
 * @member {Boolean} waitForSuccess
 */
StartTask.prototype['waitForSuccess'] = undefined;






export default StartTask;

