/**
 * BatchService
 * A client for issuing REST requests to the Azure Batch service.
 *
 * The version of the OpenAPI document: 2017-09-01.6.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CertificateState from './CertificateState';
import DeleteCertificateError from './DeleteCertificateError';

/**
 * The Certificate model module.
 * @module model/Certificate
 * @version 2017-09-01.6.0
 */
class Certificate {
    /**
     * Constructs a new <code>Certificate</code>.
     * A certificate that can be installed on compute nodes and can be used to authenticate operations on the machine.
     * @alias module:model/Certificate
     */
    constructor() { 
        
        Certificate.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Certificate</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Certificate} obj Optional instance to populate.
     * @return {module:model/Certificate} The populated <code>Certificate</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Certificate();

            if (data.hasOwnProperty('deleteCertificateError')) {
                obj['deleteCertificateError'] = DeleteCertificateError.constructFromObject(data['deleteCertificateError']);
            }
            if (data.hasOwnProperty('previousState')) {
                obj['previousState'] = CertificateState.constructFromObject(data['previousState']);
            }
            if (data.hasOwnProperty('previousStateTransitionTime')) {
                obj['previousStateTransitionTime'] = ApiClient.convertToType(data['previousStateTransitionTime'], 'Date');
            }
            if (data.hasOwnProperty('publicData')) {
                obj['publicData'] = ApiClient.convertToType(data['publicData'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = CertificateState.constructFromObject(data['state']);
            }
            if (data.hasOwnProperty('stateTransitionTime')) {
                obj['stateTransitionTime'] = ApiClient.convertToType(data['stateTransitionTime'], 'Date');
            }
            if (data.hasOwnProperty('thumbprint')) {
                obj['thumbprint'] = ApiClient.convertToType(data['thumbprint'], 'String');
            }
            if (data.hasOwnProperty('thumbprintAlgorithm')) {
                obj['thumbprintAlgorithm'] = ApiClient.convertToType(data['thumbprintAlgorithm'], 'String');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Certificate</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Certificate</code>.
     */
    static validateJSON(data) {
        // validate the optional field `deleteCertificateError`
        if (data['deleteCertificateError']) { // data not null
          DeleteCertificateError.validateJSON(data['deleteCertificateError']);
        }
        // ensure the json data is a string
        if (data['publicData'] && !(typeof data['publicData'] === 'string' || data['publicData'] instanceof String)) {
            throw new Error("Expected the field `publicData` to be a primitive type in the JSON string but got " + data['publicData']);
        }
        // ensure the json data is a string
        if (data['thumbprint'] && !(typeof data['thumbprint'] === 'string' || data['thumbprint'] instanceof String)) {
            throw new Error("Expected the field `thumbprint` to be a primitive type in the JSON string but got " + data['thumbprint']);
        }
        // ensure the json data is a string
        if (data['thumbprintAlgorithm'] && !(typeof data['thumbprintAlgorithm'] === 'string' || data['thumbprintAlgorithm'] instanceof String)) {
            throw new Error("Expected the field `thumbprintAlgorithm` to be a primitive type in the JSON string but got " + data['thumbprintAlgorithm']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }

        return true;
    }


}



/**
 * @member {module:model/DeleteCertificateError} deleteCertificateError
 */
Certificate.prototype['deleteCertificateError'] = undefined;

/**
 * @member {module:model/CertificateState} previousState
 */
Certificate.prototype['previousState'] = undefined;

/**
 * This property is not set if the certificate is in its initial Active state.
 * @member {Date} previousStateTransitionTime
 */
Certificate.prototype['previousStateTransitionTime'] = undefined;

/**
 * @member {String} publicData
 */
Certificate.prototype['publicData'] = undefined;

/**
 * @member {module:model/CertificateState} state
 */
Certificate.prototype['state'] = undefined;

/**
 * @member {Date} stateTransitionTime
 */
Certificate.prototype['stateTransitionTime'] = undefined;

/**
 * @member {String} thumbprint
 */
Certificate.prototype['thumbprint'] = undefined;

/**
 * @member {String} thumbprintAlgorithm
 */
Certificate.prototype['thumbprintAlgorithm'] = undefined;

/**
 * @member {String} url
 */
Certificate.prototype['url'] = undefined;






export default Certificate;

