/**
 * BatchService
 * A client for issuing REST requests to the Azure Batch service.
 *
 * The version of the OpenAPI document: 2017-09-01.6.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITaskContainerSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITaskContainerSettings::OAITaskContainerSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITaskContainerSettings::OAITaskContainerSettings() {
    this->initializeModel();
}

OAITaskContainerSettings::~OAITaskContainerSettings() {}

void OAITaskContainerSettings::initializeModel() {

    m_container_run_options_isSet = false;
    m_container_run_options_isValid = false;

    m_image_name_isSet = false;
    m_image_name_isValid = false;

    m_registry_isSet = false;
    m_registry_isValid = false;
}

void OAITaskContainerSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITaskContainerSettings::fromJsonObject(QJsonObject json) {

    m_container_run_options_isValid = ::OpenAPI::fromJsonValue(m_container_run_options, json[QString("containerRunOptions")]);
    m_container_run_options_isSet = !json[QString("containerRunOptions")].isNull() && m_container_run_options_isValid;

    m_image_name_isValid = ::OpenAPI::fromJsonValue(m_image_name, json[QString("imageName")]);
    m_image_name_isSet = !json[QString("imageName")].isNull() && m_image_name_isValid;

    m_registry_isValid = ::OpenAPI::fromJsonValue(m_registry, json[QString("registry")]);
    m_registry_isSet = !json[QString("registry")].isNull() && m_registry_isValid;
}

QString OAITaskContainerSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITaskContainerSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_container_run_options_isSet) {
        obj.insert(QString("containerRunOptions"), ::OpenAPI::toJsonValue(m_container_run_options));
    }
    if (m_image_name_isSet) {
        obj.insert(QString("imageName"), ::OpenAPI::toJsonValue(m_image_name));
    }
    if (m_registry.isSet()) {
        obj.insert(QString("registry"), ::OpenAPI::toJsonValue(m_registry));
    }
    return obj;
}

QString OAITaskContainerSettings::getContainerRunOptions() const {
    return m_container_run_options;
}
void OAITaskContainerSettings::setContainerRunOptions(const QString &container_run_options) {
    m_container_run_options = container_run_options;
    m_container_run_options_isSet = true;
}

bool OAITaskContainerSettings::is_container_run_options_Set() const{
    return m_container_run_options_isSet;
}

bool OAITaskContainerSettings::is_container_run_options_Valid() const{
    return m_container_run_options_isValid;
}

QString OAITaskContainerSettings::getImageName() const {
    return m_image_name;
}
void OAITaskContainerSettings::setImageName(const QString &image_name) {
    m_image_name = image_name;
    m_image_name_isSet = true;
}

bool OAITaskContainerSettings::is_image_name_Set() const{
    return m_image_name_isSet;
}

bool OAITaskContainerSettings::is_image_name_Valid() const{
    return m_image_name_isValid;
}

OAIContainerRegistry OAITaskContainerSettings::getRegistry() const {
    return m_registry;
}
void OAITaskContainerSettings::setRegistry(const OAIContainerRegistry &registry) {
    m_registry = registry;
    m_registry_isSet = true;
}

bool OAITaskContainerSettings::is_registry_Set() const{
    return m_registry_isSet;
}

bool OAITaskContainerSettings::is_registry_Valid() const{
    return m_registry_isValid;
}

bool OAITaskContainerSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_container_run_options_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_registry.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITaskContainerSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_image_name_isValid && true;
}

} // namespace OpenAPI
