/**
 * BatchService
 * A client for issuing REST requests to the Azure Batch service.
 *
 * The version of the OpenAPI document: 2017-09-01.6.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAICertificatesApi_H
#define OAI_OAICertificatesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBatchError.h"
#include "OAICertificate.h"
#include "OAICertificateAddParameter.h"
#include "OAICertificateListResult.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAICertificatesApi : public QObject {
    Q_OBJECT

public:
    OAICertificatesApi(const int timeOut = 0);
    ~OAICertificatesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  certificate OAICertificateAddParameter [required]
    * @param[in]  timeout qint32 [optional]
    * @param[in]  client_request_id QString [optional]
    * @param[in]  return_client_request_id bool [optional]
    * @param[in]  ocp_date QString [optional]
    */
    virtual void certificateAdd(const QString &api_version, const OAICertificateAddParameter &certificate, const ::OpenAPI::OptionalParam<qint32> &timeout = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &client_request_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &return_client_request_id = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &ocp_date = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  thumbprint_algorithm QString [required]
    * @param[in]  thumbprint QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  timeout qint32 [optional]
    * @param[in]  client_request_id QString [optional]
    * @param[in]  return_client_request_id bool [optional]
    * @param[in]  ocp_date QString [optional]
    */
    virtual void certificateCancelDeletion(const QString &thumbprint_algorithm, const QString &thumbprint, const QString &api_version, const ::OpenAPI::OptionalParam<qint32> &timeout = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &client_request_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &return_client_request_id = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &ocp_date = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  thumbprint_algorithm QString [required]
    * @param[in]  thumbprint QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  timeout qint32 [optional]
    * @param[in]  client_request_id QString [optional]
    * @param[in]  return_client_request_id bool [optional]
    * @param[in]  ocp_date QString [optional]
    */
    virtual void certificateDelete(const QString &thumbprint_algorithm, const QString &thumbprint, const QString &api_version, const ::OpenAPI::OptionalParam<qint32> &timeout = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &client_request_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &return_client_request_id = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &ocp_date = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  thumbprint_algorithm QString [required]
    * @param[in]  thumbprint QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  select QString [optional]
    * @param[in]  timeout qint32 [optional]
    * @param[in]  client_request_id QString [optional]
    * @param[in]  return_client_request_id bool [optional]
    * @param[in]  ocp_date QString [optional]
    */
    virtual void certificateGet(const QString &thumbprint_algorithm, const QString &thumbprint, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &select = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &timeout = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &client_request_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &return_client_request_id = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &ocp_date = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  filter QString [optional]
    * @param[in]  select QString [optional]
    * @param[in]  maxresults qint32 [optional]
    * @param[in]  timeout qint32 [optional]
    * @param[in]  client_request_id QString [optional]
    * @param[in]  return_client_request_id bool [optional]
    * @param[in]  ocp_date QString [optional]
    */
    virtual void certificateList(const QString &api_version, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &select = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &maxresults = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &timeout = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &client_request_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &return_client_request_id = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &ocp_date = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void certificateAddCallback(OAIHttpRequestWorker *worker);
    void certificateCancelDeletionCallback(OAIHttpRequestWorker *worker);
    void certificateDeleteCallback(OAIHttpRequestWorker *worker);
    void certificateGetCallback(OAIHttpRequestWorker *worker);
    void certificateListCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void certificateAddSignal();
    void certificateCancelDeletionSignal();
    void certificateDeleteSignal();
    void certificateGetSignal(OAICertificate summary);
    void certificateListSignal(OAICertificateListResult summary);


    void certificateAddSignalFull(OAIHttpRequestWorker *worker);
    void certificateCancelDeletionSignalFull(OAIHttpRequestWorker *worker);
    void certificateDeleteSignalFull(OAIHttpRequestWorker *worker);
    void certificateGetSignalFull(OAIHttpRequestWorker *worker, OAICertificate summary);
    void certificateListSignalFull(OAIHttpRequestWorker *worker, OAICertificateListResult summary);

    Q_DECL_DEPRECATED_X("Use certificateAddSignalError() instead")
    void certificateAddSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void certificateAddSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use certificateCancelDeletionSignalError() instead")
    void certificateCancelDeletionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void certificateCancelDeletionSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use certificateDeleteSignalError() instead")
    void certificateDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void certificateDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use certificateGetSignalError() instead")
    void certificateGetSignalE(OAICertificate summary, QNetworkReply::NetworkError error_type, QString error_str);
    void certificateGetSignalError(OAICertificate summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use certificateListSignalError() instead")
    void certificateListSignalE(OAICertificateListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void certificateListSignalError(OAICertificateListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use certificateAddSignalErrorFull() instead")
    void certificateAddSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void certificateAddSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use certificateCancelDeletionSignalErrorFull() instead")
    void certificateCancelDeletionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void certificateCancelDeletionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use certificateDeleteSignalErrorFull() instead")
    void certificateDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void certificateDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use certificateGetSignalErrorFull() instead")
    void certificateGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void certificateGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use certificateListSignalErrorFull() instead")
    void certificateListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void certificateListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
