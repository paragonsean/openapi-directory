/**
 * BatchService
 * A client for issuing REST requests to the Azure Batch service.
 *
 * The version of the OpenAPI document: 2017-09-01.6.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITaskAddParameter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITaskAddParameter::OAITaskAddParameter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITaskAddParameter::OAITaskAddParameter() {
    this->initializeModel();
}

OAITaskAddParameter::~OAITaskAddParameter() {}

void OAITaskAddParameter::initializeModel() {

    m_affinity_info_isSet = false;
    m_affinity_info_isValid = false;

    m_application_package_references_isSet = false;
    m_application_package_references_isValid = false;

    m_authentication_token_settings_isSet = false;
    m_authentication_token_settings_isValid = false;

    m_command_line_isSet = false;
    m_command_line_isValid = false;

    m_constraints_isSet = false;
    m_constraints_isValid = false;

    m_container_settings_isSet = false;
    m_container_settings_isValid = false;

    m_depends_on_isSet = false;
    m_depends_on_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_environment_settings_isSet = false;
    m_environment_settings_isValid = false;

    m_exit_conditions_isSet = false;
    m_exit_conditions_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_multi_instance_settings_isSet = false;
    m_multi_instance_settings_isValid = false;

    m_output_files_isSet = false;
    m_output_files_isValid = false;

    m_resource_files_isSet = false;
    m_resource_files_isValid = false;

    m_user_identity_isSet = false;
    m_user_identity_isValid = false;
}

void OAITaskAddParameter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITaskAddParameter::fromJsonObject(QJsonObject json) {

    m_affinity_info_isValid = ::OpenAPI::fromJsonValue(m_affinity_info, json[QString("affinityInfo")]);
    m_affinity_info_isSet = !json[QString("affinityInfo")].isNull() && m_affinity_info_isValid;

    m_application_package_references_isValid = ::OpenAPI::fromJsonValue(m_application_package_references, json[QString("applicationPackageReferences")]);
    m_application_package_references_isSet = !json[QString("applicationPackageReferences")].isNull() && m_application_package_references_isValid;

    m_authentication_token_settings_isValid = ::OpenAPI::fromJsonValue(m_authentication_token_settings, json[QString("authenticationTokenSettings")]);
    m_authentication_token_settings_isSet = !json[QString("authenticationTokenSettings")].isNull() && m_authentication_token_settings_isValid;

    m_command_line_isValid = ::OpenAPI::fromJsonValue(m_command_line, json[QString("commandLine")]);
    m_command_line_isSet = !json[QString("commandLine")].isNull() && m_command_line_isValid;

    m_constraints_isValid = ::OpenAPI::fromJsonValue(m_constraints, json[QString("constraints")]);
    m_constraints_isSet = !json[QString("constraints")].isNull() && m_constraints_isValid;

    m_container_settings_isValid = ::OpenAPI::fromJsonValue(m_container_settings, json[QString("containerSettings")]);
    m_container_settings_isSet = !json[QString("containerSettings")].isNull() && m_container_settings_isValid;

    m_depends_on_isValid = ::OpenAPI::fromJsonValue(m_depends_on, json[QString("dependsOn")]);
    m_depends_on_isSet = !json[QString("dependsOn")].isNull() && m_depends_on_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_environment_settings_isValid = ::OpenAPI::fromJsonValue(m_environment_settings, json[QString("environmentSettings")]);
    m_environment_settings_isSet = !json[QString("environmentSettings")].isNull() && m_environment_settings_isValid;

    m_exit_conditions_isValid = ::OpenAPI::fromJsonValue(m_exit_conditions, json[QString("exitConditions")]);
    m_exit_conditions_isSet = !json[QString("exitConditions")].isNull() && m_exit_conditions_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_multi_instance_settings_isValid = ::OpenAPI::fromJsonValue(m_multi_instance_settings, json[QString("multiInstanceSettings")]);
    m_multi_instance_settings_isSet = !json[QString("multiInstanceSettings")].isNull() && m_multi_instance_settings_isValid;

    m_output_files_isValid = ::OpenAPI::fromJsonValue(m_output_files, json[QString("outputFiles")]);
    m_output_files_isSet = !json[QString("outputFiles")].isNull() && m_output_files_isValid;

    m_resource_files_isValid = ::OpenAPI::fromJsonValue(m_resource_files, json[QString("resourceFiles")]);
    m_resource_files_isSet = !json[QString("resourceFiles")].isNull() && m_resource_files_isValid;

    m_user_identity_isValid = ::OpenAPI::fromJsonValue(m_user_identity, json[QString("userIdentity")]);
    m_user_identity_isSet = !json[QString("userIdentity")].isNull() && m_user_identity_isValid;
}

QString OAITaskAddParameter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITaskAddParameter::asJsonObject() const {
    QJsonObject obj;
    if (m_affinity_info.isSet()) {
        obj.insert(QString("affinityInfo"), ::OpenAPI::toJsonValue(m_affinity_info));
    }
    if (m_application_package_references.size() > 0) {
        obj.insert(QString("applicationPackageReferences"), ::OpenAPI::toJsonValue(m_application_package_references));
    }
    if (m_authentication_token_settings.isSet()) {
        obj.insert(QString("authenticationTokenSettings"), ::OpenAPI::toJsonValue(m_authentication_token_settings));
    }
    if (m_command_line_isSet) {
        obj.insert(QString("commandLine"), ::OpenAPI::toJsonValue(m_command_line));
    }
    if (m_constraints.isSet()) {
        obj.insert(QString("constraints"), ::OpenAPI::toJsonValue(m_constraints));
    }
    if (m_container_settings.isSet()) {
        obj.insert(QString("containerSettings"), ::OpenAPI::toJsonValue(m_container_settings));
    }
    if (m_depends_on.isSet()) {
        obj.insert(QString("dependsOn"), ::OpenAPI::toJsonValue(m_depends_on));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_environment_settings.size() > 0) {
        obj.insert(QString("environmentSettings"), ::OpenAPI::toJsonValue(m_environment_settings));
    }
    if (m_exit_conditions.isSet()) {
        obj.insert(QString("exitConditions"), ::OpenAPI::toJsonValue(m_exit_conditions));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_multi_instance_settings.isSet()) {
        obj.insert(QString("multiInstanceSettings"), ::OpenAPI::toJsonValue(m_multi_instance_settings));
    }
    if (m_output_files.size() > 0) {
        obj.insert(QString("outputFiles"), ::OpenAPI::toJsonValue(m_output_files));
    }
    if (m_resource_files.size() > 0) {
        obj.insert(QString("resourceFiles"), ::OpenAPI::toJsonValue(m_resource_files));
    }
    if (m_user_identity.isSet()) {
        obj.insert(QString("userIdentity"), ::OpenAPI::toJsonValue(m_user_identity));
    }
    return obj;
}

OAIAffinityInformation OAITaskAddParameter::getAffinityInfo() const {
    return m_affinity_info;
}
void OAITaskAddParameter::setAffinityInfo(const OAIAffinityInformation &affinity_info) {
    m_affinity_info = affinity_info;
    m_affinity_info_isSet = true;
}

bool OAITaskAddParameter::is_affinity_info_Set() const{
    return m_affinity_info_isSet;
}

bool OAITaskAddParameter::is_affinity_info_Valid() const{
    return m_affinity_info_isValid;
}

QList<OAIApplicationPackageReference> OAITaskAddParameter::getApplicationPackageReferences() const {
    return m_application_package_references;
}
void OAITaskAddParameter::setApplicationPackageReferences(const QList<OAIApplicationPackageReference> &application_package_references) {
    m_application_package_references = application_package_references;
    m_application_package_references_isSet = true;
}

bool OAITaskAddParameter::is_application_package_references_Set() const{
    return m_application_package_references_isSet;
}

bool OAITaskAddParameter::is_application_package_references_Valid() const{
    return m_application_package_references_isValid;
}

OAIAuthenticationTokenSettings OAITaskAddParameter::getAuthenticationTokenSettings() const {
    return m_authentication_token_settings;
}
void OAITaskAddParameter::setAuthenticationTokenSettings(const OAIAuthenticationTokenSettings &authentication_token_settings) {
    m_authentication_token_settings = authentication_token_settings;
    m_authentication_token_settings_isSet = true;
}

bool OAITaskAddParameter::is_authentication_token_settings_Set() const{
    return m_authentication_token_settings_isSet;
}

bool OAITaskAddParameter::is_authentication_token_settings_Valid() const{
    return m_authentication_token_settings_isValid;
}

QString OAITaskAddParameter::getCommandLine() const {
    return m_command_line;
}
void OAITaskAddParameter::setCommandLine(const QString &command_line) {
    m_command_line = command_line;
    m_command_line_isSet = true;
}

bool OAITaskAddParameter::is_command_line_Set() const{
    return m_command_line_isSet;
}

bool OAITaskAddParameter::is_command_line_Valid() const{
    return m_command_line_isValid;
}

OAITaskConstraints OAITaskAddParameter::getConstraints() const {
    return m_constraints;
}
void OAITaskAddParameter::setConstraints(const OAITaskConstraints &constraints) {
    m_constraints = constraints;
    m_constraints_isSet = true;
}

bool OAITaskAddParameter::is_constraints_Set() const{
    return m_constraints_isSet;
}

bool OAITaskAddParameter::is_constraints_Valid() const{
    return m_constraints_isValid;
}

OAITaskContainerSettings OAITaskAddParameter::getContainerSettings() const {
    return m_container_settings;
}
void OAITaskAddParameter::setContainerSettings(const OAITaskContainerSettings &container_settings) {
    m_container_settings = container_settings;
    m_container_settings_isSet = true;
}

bool OAITaskAddParameter::is_container_settings_Set() const{
    return m_container_settings_isSet;
}

bool OAITaskAddParameter::is_container_settings_Valid() const{
    return m_container_settings_isValid;
}

OAITaskDependencies OAITaskAddParameter::getDependsOn() const {
    return m_depends_on;
}
void OAITaskAddParameter::setDependsOn(const OAITaskDependencies &depends_on) {
    m_depends_on = depends_on;
    m_depends_on_isSet = true;
}

bool OAITaskAddParameter::is_depends_on_Set() const{
    return m_depends_on_isSet;
}

bool OAITaskAddParameter::is_depends_on_Valid() const{
    return m_depends_on_isValid;
}

QString OAITaskAddParameter::getDisplayName() const {
    return m_display_name;
}
void OAITaskAddParameter::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAITaskAddParameter::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAITaskAddParameter::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QList<OAIEnvironmentSetting> OAITaskAddParameter::getEnvironmentSettings() const {
    return m_environment_settings;
}
void OAITaskAddParameter::setEnvironmentSettings(const QList<OAIEnvironmentSetting> &environment_settings) {
    m_environment_settings = environment_settings;
    m_environment_settings_isSet = true;
}

bool OAITaskAddParameter::is_environment_settings_Set() const{
    return m_environment_settings_isSet;
}

bool OAITaskAddParameter::is_environment_settings_Valid() const{
    return m_environment_settings_isValid;
}

OAIExitConditions OAITaskAddParameter::getExitConditions() const {
    return m_exit_conditions;
}
void OAITaskAddParameter::setExitConditions(const OAIExitConditions &exit_conditions) {
    m_exit_conditions = exit_conditions;
    m_exit_conditions_isSet = true;
}

bool OAITaskAddParameter::is_exit_conditions_Set() const{
    return m_exit_conditions_isSet;
}

bool OAITaskAddParameter::is_exit_conditions_Valid() const{
    return m_exit_conditions_isValid;
}

QString OAITaskAddParameter::getId() const {
    return m_id;
}
void OAITaskAddParameter::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAITaskAddParameter::is_id_Set() const{
    return m_id_isSet;
}

bool OAITaskAddParameter::is_id_Valid() const{
    return m_id_isValid;
}

OAIMultiInstanceSettings OAITaskAddParameter::getMultiInstanceSettings() const {
    return m_multi_instance_settings;
}
void OAITaskAddParameter::setMultiInstanceSettings(const OAIMultiInstanceSettings &multi_instance_settings) {
    m_multi_instance_settings = multi_instance_settings;
    m_multi_instance_settings_isSet = true;
}

bool OAITaskAddParameter::is_multi_instance_settings_Set() const{
    return m_multi_instance_settings_isSet;
}

bool OAITaskAddParameter::is_multi_instance_settings_Valid() const{
    return m_multi_instance_settings_isValid;
}

QList<OAIOutputFile> OAITaskAddParameter::getOutputFiles() const {
    return m_output_files;
}
void OAITaskAddParameter::setOutputFiles(const QList<OAIOutputFile> &output_files) {
    m_output_files = output_files;
    m_output_files_isSet = true;
}

bool OAITaskAddParameter::is_output_files_Set() const{
    return m_output_files_isSet;
}

bool OAITaskAddParameter::is_output_files_Valid() const{
    return m_output_files_isValid;
}

QList<OAIResourceFile> OAITaskAddParameter::getResourceFiles() const {
    return m_resource_files;
}
void OAITaskAddParameter::setResourceFiles(const QList<OAIResourceFile> &resource_files) {
    m_resource_files = resource_files;
    m_resource_files_isSet = true;
}

bool OAITaskAddParameter::is_resource_files_Set() const{
    return m_resource_files_isSet;
}

bool OAITaskAddParameter::is_resource_files_Valid() const{
    return m_resource_files_isValid;
}

OAIUserIdentity OAITaskAddParameter::getUserIdentity() const {
    return m_user_identity;
}
void OAITaskAddParameter::setUserIdentity(const OAIUserIdentity &user_identity) {
    m_user_identity = user_identity;
    m_user_identity_isSet = true;
}

bool OAITaskAddParameter::is_user_identity_Set() const{
    return m_user_identity_isSet;
}

bool OAITaskAddParameter::is_user_identity_Valid() const{
    return m_user_identity_isValid;
}

bool OAITaskAddParameter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_affinity_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_application_package_references.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_authentication_token_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_command_line_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_constraints.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_container_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_depends_on.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_environment_settings.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_exit_conditions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_multi_instance_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_output_files.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_files.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_identity.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITaskAddParameter::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_command_line_isValid && m_id_isValid && true;
}

} // namespace OpenAPI
