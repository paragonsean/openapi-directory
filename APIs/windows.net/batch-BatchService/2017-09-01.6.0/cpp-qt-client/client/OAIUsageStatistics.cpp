/**
 * BatchService
 * A client for issuing REST requests to the Azure Batch service.
 *
 * The version of the OpenAPI document: 2017-09-01.6.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUsageStatistics.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUsageStatistics::OAIUsageStatistics(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUsageStatistics::OAIUsageStatistics() {
    this->initializeModel();
}

OAIUsageStatistics::~OAIUsageStatistics() {}

void OAIUsageStatistics::initializeModel() {

    m_dedicated_core_time_isSet = false;
    m_dedicated_core_time_isValid = false;

    m_last_update_time_isSet = false;
    m_last_update_time_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;
}

void OAIUsageStatistics::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUsageStatistics::fromJsonObject(QJsonObject json) {

    m_dedicated_core_time_isValid = ::OpenAPI::fromJsonValue(m_dedicated_core_time, json[QString("dedicatedCoreTime")]);
    m_dedicated_core_time_isSet = !json[QString("dedicatedCoreTime")].isNull() && m_dedicated_core_time_isValid;

    m_last_update_time_isValid = ::OpenAPI::fromJsonValue(m_last_update_time, json[QString("lastUpdateTime")]);
    m_last_update_time_isSet = !json[QString("lastUpdateTime")].isNull() && m_last_update_time_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("startTime")]);
    m_start_time_isSet = !json[QString("startTime")].isNull() && m_start_time_isValid;
}

QString OAIUsageStatistics::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUsageStatistics::asJsonObject() const {
    QJsonObject obj;
    if (m_dedicated_core_time_isSet) {
        obj.insert(QString("dedicatedCoreTime"), ::OpenAPI::toJsonValue(m_dedicated_core_time));
    }
    if (m_last_update_time_isSet) {
        obj.insert(QString("lastUpdateTime"), ::OpenAPI::toJsonValue(m_last_update_time));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("startTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    return obj;
}

QString OAIUsageStatistics::getDedicatedCoreTime() const {
    return m_dedicated_core_time;
}
void OAIUsageStatistics::setDedicatedCoreTime(const QString &dedicated_core_time) {
    m_dedicated_core_time = dedicated_core_time;
    m_dedicated_core_time_isSet = true;
}

bool OAIUsageStatistics::is_dedicated_core_time_Set() const{
    return m_dedicated_core_time_isSet;
}

bool OAIUsageStatistics::is_dedicated_core_time_Valid() const{
    return m_dedicated_core_time_isValid;
}

QDateTime OAIUsageStatistics::getLastUpdateTime() const {
    return m_last_update_time;
}
void OAIUsageStatistics::setLastUpdateTime(const QDateTime &last_update_time) {
    m_last_update_time = last_update_time;
    m_last_update_time_isSet = true;
}

bool OAIUsageStatistics::is_last_update_time_Set() const{
    return m_last_update_time_isSet;
}

bool OAIUsageStatistics::is_last_update_time_Valid() const{
    return m_last_update_time_isValid;
}

QDateTime OAIUsageStatistics::getStartTime() const {
    return m_start_time;
}
void OAIUsageStatistics::setStartTime(const QDateTime &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIUsageStatistics::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIUsageStatistics::is_start_time_Valid() const{
    return m_start_time_isValid;
}

bool OAIUsageStatistics::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_dedicated_core_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUsageStatistics::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_dedicated_core_time_isValid && m_last_update_time_isValid && m_start_time_isValid && true;
}

} // namespace OpenAPI
