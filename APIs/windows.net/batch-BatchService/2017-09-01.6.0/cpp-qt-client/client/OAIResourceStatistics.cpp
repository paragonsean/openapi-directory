/**
 * BatchService
 * A client for issuing REST requests to the Azure Batch service.
 *
 * The version of the OpenAPI document: 2017-09-01.6.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIResourceStatistics.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIResourceStatistics::OAIResourceStatistics(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIResourceStatistics::OAIResourceStatistics() {
    this->initializeModel();
}

OAIResourceStatistics::~OAIResourceStatistics() {}

void OAIResourceStatistics::initializeModel() {

    m_avg_cpu_percentage_isSet = false;
    m_avg_cpu_percentage_isValid = false;

    m_avg_disk_gi_b_isSet = false;
    m_avg_disk_gi_b_isValid = false;

    m_avg_memory_gi_b_isSet = false;
    m_avg_memory_gi_b_isValid = false;

    m_disk_read_gi_b_isSet = false;
    m_disk_read_gi_b_isValid = false;

    m_disk_read_i_ops_isSet = false;
    m_disk_read_i_ops_isValid = false;

    m_disk_write_gi_b_isSet = false;
    m_disk_write_gi_b_isValid = false;

    m_disk_write_i_ops_isSet = false;
    m_disk_write_i_ops_isValid = false;

    m_last_update_time_isSet = false;
    m_last_update_time_isValid = false;

    m_network_read_gi_b_isSet = false;
    m_network_read_gi_b_isValid = false;

    m_network_write_gi_b_isSet = false;
    m_network_write_gi_b_isValid = false;

    m_peak_disk_gi_b_isSet = false;
    m_peak_disk_gi_b_isValid = false;

    m_peak_memory_gi_b_isSet = false;
    m_peak_memory_gi_b_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;
}

void OAIResourceStatistics::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIResourceStatistics::fromJsonObject(QJsonObject json) {

    m_avg_cpu_percentage_isValid = ::OpenAPI::fromJsonValue(m_avg_cpu_percentage, json[QString("avgCPUPercentage")]);
    m_avg_cpu_percentage_isSet = !json[QString("avgCPUPercentage")].isNull() && m_avg_cpu_percentage_isValid;

    m_avg_disk_gi_b_isValid = ::OpenAPI::fromJsonValue(m_avg_disk_gi_b, json[QString("avgDiskGiB")]);
    m_avg_disk_gi_b_isSet = !json[QString("avgDiskGiB")].isNull() && m_avg_disk_gi_b_isValid;

    m_avg_memory_gi_b_isValid = ::OpenAPI::fromJsonValue(m_avg_memory_gi_b, json[QString("avgMemoryGiB")]);
    m_avg_memory_gi_b_isSet = !json[QString("avgMemoryGiB")].isNull() && m_avg_memory_gi_b_isValid;

    m_disk_read_gi_b_isValid = ::OpenAPI::fromJsonValue(m_disk_read_gi_b, json[QString("diskReadGiB")]);
    m_disk_read_gi_b_isSet = !json[QString("diskReadGiB")].isNull() && m_disk_read_gi_b_isValid;

    m_disk_read_i_ops_isValid = ::OpenAPI::fromJsonValue(m_disk_read_i_ops, json[QString("diskReadIOps")]);
    m_disk_read_i_ops_isSet = !json[QString("diskReadIOps")].isNull() && m_disk_read_i_ops_isValid;

    m_disk_write_gi_b_isValid = ::OpenAPI::fromJsonValue(m_disk_write_gi_b, json[QString("diskWriteGiB")]);
    m_disk_write_gi_b_isSet = !json[QString("diskWriteGiB")].isNull() && m_disk_write_gi_b_isValid;

    m_disk_write_i_ops_isValid = ::OpenAPI::fromJsonValue(m_disk_write_i_ops, json[QString("diskWriteIOps")]);
    m_disk_write_i_ops_isSet = !json[QString("diskWriteIOps")].isNull() && m_disk_write_i_ops_isValid;

    m_last_update_time_isValid = ::OpenAPI::fromJsonValue(m_last_update_time, json[QString("lastUpdateTime")]);
    m_last_update_time_isSet = !json[QString("lastUpdateTime")].isNull() && m_last_update_time_isValid;

    m_network_read_gi_b_isValid = ::OpenAPI::fromJsonValue(m_network_read_gi_b, json[QString("networkReadGiB")]);
    m_network_read_gi_b_isSet = !json[QString("networkReadGiB")].isNull() && m_network_read_gi_b_isValid;

    m_network_write_gi_b_isValid = ::OpenAPI::fromJsonValue(m_network_write_gi_b, json[QString("networkWriteGiB")]);
    m_network_write_gi_b_isSet = !json[QString("networkWriteGiB")].isNull() && m_network_write_gi_b_isValid;

    m_peak_disk_gi_b_isValid = ::OpenAPI::fromJsonValue(m_peak_disk_gi_b, json[QString("peakDiskGiB")]);
    m_peak_disk_gi_b_isSet = !json[QString("peakDiskGiB")].isNull() && m_peak_disk_gi_b_isValid;

    m_peak_memory_gi_b_isValid = ::OpenAPI::fromJsonValue(m_peak_memory_gi_b, json[QString("peakMemoryGiB")]);
    m_peak_memory_gi_b_isSet = !json[QString("peakMemoryGiB")].isNull() && m_peak_memory_gi_b_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("startTime")]);
    m_start_time_isSet = !json[QString("startTime")].isNull() && m_start_time_isValid;
}

QString OAIResourceStatistics::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIResourceStatistics::asJsonObject() const {
    QJsonObject obj;
    if (m_avg_cpu_percentage_isSet) {
        obj.insert(QString("avgCPUPercentage"), ::OpenAPI::toJsonValue(m_avg_cpu_percentage));
    }
    if (m_avg_disk_gi_b_isSet) {
        obj.insert(QString("avgDiskGiB"), ::OpenAPI::toJsonValue(m_avg_disk_gi_b));
    }
    if (m_avg_memory_gi_b_isSet) {
        obj.insert(QString("avgMemoryGiB"), ::OpenAPI::toJsonValue(m_avg_memory_gi_b));
    }
    if (m_disk_read_gi_b_isSet) {
        obj.insert(QString("diskReadGiB"), ::OpenAPI::toJsonValue(m_disk_read_gi_b));
    }
    if (m_disk_read_i_ops_isSet) {
        obj.insert(QString("diskReadIOps"), ::OpenAPI::toJsonValue(m_disk_read_i_ops));
    }
    if (m_disk_write_gi_b_isSet) {
        obj.insert(QString("diskWriteGiB"), ::OpenAPI::toJsonValue(m_disk_write_gi_b));
    }
    if (m_disk_write_i_ops_isSet) {
        obj.insert(QString("diskWriteIOps"), ::OpenAPI::toJsonValue(m_disk_write_i_ops));
    }
    if (m_last_update_time_isSet) {
        obj.insert(QString("lastUpdateTime"), ::OpenAPI::toJsonValue(m_last_update_time));
    }
    if (m_network_read_gi_b_isSet) {
        obj.insert(QString("networkReadGiB"), ::OpenAPI::toJsonValue(m_network_read_gi_b));
    }
    if (m_network_write_gi_b_isSet) {
        obj.insert(QString("networkWriteGiB"), ::OpenAPI::toJsonValue(m_network_write_gi_b));
    }
    if (m_peak_disk_gi_b_isSet) {
        obj.insert(QString("peakDiskGiB"), ::OpenAPI::toJsonValue(m_peak_disk_gi_b));
    }
    if (m_peak_memory_gi_b_isSet) {
        obj.insert(QString("peakMemoryGiB"), ::OpenAPI::toJsonValue(m_peak_memory_gi_b));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("startTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    return obj;
}

double OAIResourceStatistics::getAvgCpuPercentage() const {
    return m_avg_cpu_percentage;
}
void OAIResourceStatistics::setAvgCpuPercentage(const double &avg_cpu_percentage) {
    m_avg_cpu_percentage = avg_cpu_percentage;
    m_avg_cpu_percentage_isSet = true;
}

bool OAIResourceStatistics::is_avg_cpu_percentage_Set() const{
    return m_avg_cpu_percentage_isSet;
}

bool OAIResourceStatistics::is_avg_cpu_percentage_Valid() const{
    return m_avg_cpu_percentage_isValid;
}

double OAIResourceStatistics::getAvgDiskGiB() const {
    return m_avg_disk_gi_b;
}
void OAIResourceStatistics::setAvgDiskGiB(const double &avg_disk_gi_b) {
    m_avg_disk_gi_b = avg_disk_gi_b;
    m_avg_disk_gi_b_isSet = true;
}

bool OAIResourceStatistics::is_avg_disk_gi_b_Set() const{
    return m_avg_disk_gi_b_isSet;
}

bool OAIResourceStatistics::is_avg_disk_gi_b_Valid() const{
    return m_avg_disk_gi_b_isValid;
}

double OAIResourceStatistics::getAvgMemoryGiB() const {
    return m_avg_memory_gi_b;
}
void OAIResourceStatistics::setAvgMemoryGiB(const double &avg_memory_gi_b) {
    m_avg_memory_gi_b = avg_memory_gi_b;
    m_avg_memory_gi_b_isSet = true;
}

bool OAIResourceStatistics::is_avg_memory_gi_b_Set() const{
    return m_avg_memory_gi_b_isSet;
}

bool OAIResourceStatistics::is_avg_memory_gi_b_Valid() const{
    return m_avg_memory_gi_b_isValid;
}

double OAIResourceStatistics::getDiskReadGiB() const {
    return m_disk_read_gi_b;
}
void OAIResourceStatistics::setDiskReadGiB(const double &disk_read_gi_b) {
    m_disk_read_gi_b = disk_read_gi_b;
    m_disk_read_gi_b_isSet = true;
}

bool OAIResourceStatistics::is_disk_read_gi_b_Set() const{
    return m_disk_read_gi_b_isSet;
}

bool OAIResourceStatistics::is_disk_read_gi_b_Valid() const{
    return m_disk_read_gi_b_isValid;
}

qint64 OAIResourceStatistics::getDiskReadIOps() const {
    return m_disk_read_i_ops;
}
void OAIResourceStatistics::setDiskReadIOps(const qint64 &disk_read_i_ops) {
    m_disk_read_i_ops = disk_read_i_ops;
    m_disk_read_i_ops_isSet = true;
}

bool OAIResourceStatistics::is_disk_read_i_ops_Set() const{
    return m_disk_read_i_ops_isSet;
}

bool OAIResourceStatistics::is_disk_read_i_ops_Valid() const{
    return m_disk_read_i_ops_isValid;
}

double OAIResourceStatistics::getDiskWriteGiB() const {
    return m_disk_write_gi_b;
}
void OAIResourceStatistics::setDiskWriteGiB(const double &disk_write_gi_b) {
    m_disk_write_gi_b = disk_write_gi_b;
    m_disk_write_gi_b_isSet = true;
}

bool OAIResourceStatistics::is_disk_write_gi_b_Set() const{
    return m_disk_write_gi_b_isSet;
}

bool OAIResourceStatistics::is_disk_write_gi_b_Valid() const{
    return m_disk_write_gi_b_isValid;
}

qint64 OAIResourceStatistics::getDiskWriteIOps() const {
    return m_disk_write_i_ops;
}
void OAIResourceStatistics::setDiskWriteIOps(const qint64 &disk_write_i_ops) {
    m_disk_write_i_ops = disk_write_i_ops;
    m_disk_write_i_ops_isSet = true;
}

bool OAIResourceStatistics::is_disk_write_i_ops_Set() const{
    return m_disk_write_i_ops_isSet;
}

bool OAIResourceStatistics::is_disk_write_i_ops_Valid() const{
    return m_disk_write_i_ops_isValid;
}

QDateTime OAIResourceStatistics::getLastUpdateTime() const {
    return m_last_update_time;
}
void OAIResourceStatistics::setLastUpdateTime(const QDateTime &last_update_time) {
    m_last_update_time = last_update_time;
    m_last_update_time_isSet = true;
}

bool OAIResourceStatistics::is_last_update_time_Set() const{
    return m_last_update_time_isSet;
}

bool OAIResourceStatistics::is_last_update_time_Valid() const{
    return m_last_update_time_isValid;
}

double OAIResourceStatistics::getNetworkReadGiB() const {
    return m_network_read_gi_b;
}
void OAIResourceStatistics::setNetworkReadGiB(const double &network_read_gi_b) {
    m_network_read_gi_b = network_read_gi_b;
    m_network_read_gi_b_isSet = true;
}

bool OAIResourceStatistics::is_network_read_gi_b_Set() const{
    return m_network_read_gi_b_isSet;
}

bool OAIResourceStatistics::is_network_read_gi_b_Valid() const{
    return m_network_read_gi_b_isValid;
}

double OAIResourceStatistics::getNetworkWriteGiB() const {
    return m_network_write_gi_b;
}
void OAIResourceStatistics::setNetworkWriteGiB(const double &network_write_gi_b) {
    m_network_write_gi_b = network_write_gi_b;
    m_network_write_gi_b_isSet = true;
}

bool OAIResourceStatistics::is_network_write_gi_b_Set() const{
    return m_network_write_gi_b_isSet;
}

bool OAIResourceStatistics::is_network_write_gi_b_Valid() const{
    return m_network_write_gi_b_isValid;
}

double OAIResourceStatistics::getPeakDiskGiB() const {
    return m_peak_disk_gi_b;
}
void OAIResourceStatistics::setPeakDiskGiB(const double &peak_disk_gi_b) {
    m_peak_disk_gi_b = peak_disk_gi_b;
    m_peak_disk_gi_b_isSet = true;
}

bool OAIResourceStatistics::is_peak_disk_gi_b_Set() const{
    return m_peak_disk_gi_b_isSet;
}

bool OAIResourceStatistics::is_peak_disk_gi_b_Valid() const{
    return m_peak_disk_gi_b_isValid;
}

double OAIResourceStatistics::getPeakMemoryGiB() const {
    return m_peak_memory_gi_b;
}
void OAIResourceStatistics::setPeakMemoryGiB(const double &peak_memory_gi_b) {
    m_peak_memory_gi_b = peak_memory_gi_b;
    m_peak_memory_gi_b_isSet = true;
}

bool OAIResourceStatistics::is_peak_memory_gi_b_Set() const{
    return m_peak_memory_gi_b_isSet;
}

bool OAIResourceStatistics::is_peak_memory_gi_b_Valid() const{
    return m_peak_memory_gi_b_isValid;
}

QDateTime OAIResourceStatistics::getStartTime() const {
    return m_start_time;
}
void OAIResourceStatistics::setStartTime(const QDateTime &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIResourceStatistics::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIResourceStatistics::is_start_time_Valid() const{
    return m_start_time_isValid;
}

bool OAIResourceStatistics::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_avg_cpu_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_avg_disk_gi_b_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_avg_memory_gi_b_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disk_read_gi_b_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disk_read_i_ops_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disk_write_gi_b_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disk_write_i_ops_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_read_gi_b_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_write_gi_b_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_peak_disk_gi_b_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_peak_memory_gi_b_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIResourceStatistics::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_avg_cpu_percentage_isValid && m_avg_disk_gi_b_isValid && m_avg_memory_gi_b_isValid && m_disk_read_gi_b_isValid && m_disk_read_i_ops_isValid && m_disk_write_gi_b_isValid && m_disk_write_i_ops_isValid && m_last_update_time_isValid && m_network_read_gi_b_isValid && m_network_write_gi_b_isValid && m_peak_disk_gi_b_isValid && m_peak_memory_gi_b_isValid && m_start_time_isValid && true;
}

} // namespace OpenAPI
