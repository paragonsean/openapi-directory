/**
 * BatchService
 * A client for issuing REST requests to the Azure Batch service.
 *
 * The version of the OpenAPI document: 2017-09-01.6.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIJobReleaseTask.h
 *
 * The Job Release task runs when the job ends, because of one of the following: The user calls the Terminate Job API, or the Delete Job API while the job is still active, the job&#39;s maximum wall clock time constraint is reached, and the job is still active, or the job&#39;s Job Manager task completed, and the job is configured to terminate when the Job Manager completes. The Job Release task runs on each compute node where tasks of the job have run and the Job Preparation task ran and completed. If you reimage a compute node after it has run the Job Preparation task, and the job ends without any further tasks of the job running on that compute node (and hence the Job Preparation task does not re-run), then the Job Release task does not run on that node. If a compute node reboots while the Job Release task is still running, the Job Release task runs again when the compute node starts up. The job is not marked as complete until all Job Release tasks have completed. The Job Release task runs in the background. It does not occupy a scheduling slot; that is, it does not count towards the maxTasksPerNode limit specified on the pool.
 */

#ifndef OAIJobReleaseTask_H
#define OAIJobReleaseTask_H

#include <QJsonObject>

#include "OAIEnvironmentSetting.h"
#include "OAIResourceFile.h"
#include "OAITaskContainerSettings.h"
#include "OAIUserIdentity.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAITaskContainerSettings;
class OAIEnvironmentSetting;
class OAIResourceFile;
class OAIUserIdentity;

class OAIJobReleaseTask : public OAIObject {
public:
    OAIJobReleaseTask();
    OAIJobReleaseTask(QString json);
    ~OAIJobReleaseTask() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getCommandLine() const;
    void setCommandLine(const QString &command_line);
    bool is_command_line_Set() const;
    bool is_command_line_Valid() const;

    OAITaskContainerSettings getContainerSettings() const;
    void setContainerSettings(const OAITaskContainerSettings &container_settings);
    bool is_container_settings_Set() const;
    bool is_container_settings_Valid() const;

    QList<OAIEnvironmentSetting> getEnvironmentSettings() const;
    void setEnvironmentSettings(const QList<OAIEnvironmentSetting> &environment_settings);
    bool is_environment_settings_Set() const;
    bool is_environment_settings_Valid() const;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QString getMaxWallClockTime() const;
    void setMaxWallClockTime(const QString &max_wall_clock_time);
    bool is_max_wall_clock_time_Set() const;
    bool is_max_wall_clock_time_Valid() const;

    QList<OAIResourceFile> getResourceFiles() const;
    void setResourceFiles(const QList<OAIResourceFile> &resource_files);
    bool is_resource_files_Set() const;
    bool is_resource_files_Valid() const;

    QString getRetentionTime() const;
    void setRetentionTime(const QString &retention_time);
    bool is_retention_time_Set() const;
    bool is_retention_time_Valid() const;

    OAIUserIdentity getUserIdentity() const;
    void setUserIdentity(const OAIUserIdentity &user_identity);
    bool is_user_identity_Set() const;
    bool is_user_identity_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_command_line;
    bool m_command_line_isSet;
    bool m_command_line_isValid;

    OAITaskContainerSettings m_container_settings;
    bool m_container_settings_isSet;
    bool m_container_settings_isValid;

    QList<OAIEnvironmentSetting> m_environment_settings;
    bool m_environment_settings_isSet;
    bool m_environment_settings_isValid;

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    QString m_max_wall_clock_time;
    bool m_max_wall_clock_time_isSet;
    bool m_max_wall_clock_time_isValid;

    QList<OAIResourceFile> m_resource_files;
    bool m_resource_files_isSet;
    bool m_resource_files_isValid;

    QString m_retention_time;
    bool m_retention_time_isSet;
    bool m_retention_time_isValid;

    OAIUserIdentity m_user_identity;
    bool m_user_identity_isSet;
    bool m_user_identity_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIJobReleaseTask)

#endif // OAIJobReleaseTask_H
