/*
 * BatchService
 * A client for issuing REST requests to the Azure Batch service.
 *
 * The version of the OpenAPI document: 2017-09-01.6.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.TaskContainerExecutionInformation;
import org.openapitools.client.model.TaskExecutionResult;
import org.openapitools.client.model.TaskFailureInformation;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * TaskExecutionInformation
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:58:41.987830-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TaskExecutionInformation {
  public static final String SERIALIZED_NAME_CONTAINER_INFO = "containerInfo";
  @SerializedName(SERIALIZED_NAME_CONTAINER_INFO)
  private TaskContainerExecutionInformation containerInfo;

  public static final String SERIALIZED_NAME_END_TIME = "endTime";
  @SerializedName(SERIALIZED_NAME_END_TIME)
  private OffsetDateTime endTime;

  public static final String SERIALIZED_NAME_EXIT_CODE = "exitCode";
  @SerializedName(SERIALIZED_NAME_EXIT_CODE)
  private Integer exitCode;

  public static final String SERIALIZED_NAME_FAILURE_INFO = "failureInfo";
  @SerializedName(SERIALIZED_NAME_FAILURE_INFO)
  private TaskFailureInformation failureInfo;

  public static final String SERIALIZED_NAME_LAST_REQUEUE_TIME = "lastRequeueTime";
  @SerializedName(SERIALIZED_NAME_LAST_REQUEUE_TIME)
  private OffsetDateTime lastRequeueTime;

  public static final String SERIALIZED_NAME_LAST_RETRY_TIME = "lastRetryTime";
  @SerializedName(SERIALIZED_NAME_LAST_RETRY_TIME)
  private OffsetDateTime lastRetryTime;

  public static final String SERIALIZED_NAME_REQUEUE_COUNT = "requeueCount";
  @SerializedName(SERIALIZED_NAME_REQUEUE_COUNT)
  private Integer requeueCount;

  public static final String SERIALIZED_NAME_RESULT = "result";
  @SerializedName(SERIALIZED_NAME_RESULT)
  private TaskExecutionResult result;

  public static final String SERIALIZED_NAME_RETRY_COUNT = "retryCount";
  @SerializedName(SERIALIZED_NAME_RETRY_COUNT)
  private Integer retryCount;

  public static final String SERIALIZED_NAME_START_TIME = "startTime";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private OffsetDateTime startTime;

  public TaskExecutionInformation() {
  }

  public TaskExecutionInformation containerInfo(TaskContainerExecutionInformation containerInfo) {
    this.containerInfo = containerInfo;
    return this;
  }

  /**
   * Get containerInfo
   * @return containerInfo
   */
  @javax.annotation.Nullable
  public TaskContainerExecutionInformation getContainerInfo() {
    return containerInfo;
  }

  public void setContainerInfo(TaskContainerExecutionInformation containerInfo) {
    this.containerInfo = containerInfo;
  }


  public TaskExecutionInformation endTime(OffsetDateTime endTime) {
    this.endTime = endTime;
    return this;
  }

  /**
   * This property is set only if the task is in the Completed state.
   * @return endTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getEndTime() {
    return endTime;
  }

  public void setEndTime(OffsetDateTime endTime) {
    this.endTime = endTime;
  }


  public TaskExecutionInformation exitCode(Integer exitCode) {
    this.exitCode = exitCode;
    return this;
  }

  /**
   * This property is set only if the task is in the completed state. In general, the exit code for a process reflects the specific convention implemented by the application developer for that process. If you use the exit code value to make decisions in your code, be sure that you know the exit code convention used by the application process. However, if the Batch service terminates the task (due to timeout, or user termination via the API) you may see an operating system-defined exit code.
   * @return exitCode
   */
  @javax.annotation.Nullable
  public Integer getExitCode() {
    return exitCode;
  }

  public void setExitCode(Integer exitCode) {
    this.exitCode = exitCode;
  }


  public TaskExecutionInformation failureInfo(TaskFailureInformation failureInfo) {
    this.failureInfo = failureInfo;
    return this;
  }

  /**
   * Get failureInfo
   * @return failureInfo
   */
  @javax.annotation.Nullable
  public TaskFailureInformation getFailureInfo() {
    return failureInfo;
  }

  public void setFailureInfo(TaskFailureInformation failureInfo) {
    this.failureInfo = failureInfo;
  }


  public TaskExecutionInformation lastRequeueTime(OffsetDateTime lastRequeueTime) {
    this.lastRequeueTime = lastRequeueTime;
    return this;
  }

  /**
   * This property is set only if the requeueCount is nonzero.
   * @return lastRequeueTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastRequeueTime() {
    return lastRequeueTime;
  }

  public void setLastRequeueTime(OffsetDateTime lastRequeueTime) {
    this.lastRequeueTime = lastRequeueTime;
  }


  public TaskExecutionInformation lastRetryTime(OffsetDateTime lastRetryTime) {
    this.lastRetryTime = lastRetryTime;
    return this;
  }

  /**
   * This element is present only if the task was retried (i.e. retryCount is nonzero). If present, this is typically the same as startTime, but may be different if the task has been restarted for reasons other than retry; for example, if the compute node was rebooted during a retry, then the startTime is updated but the lastRetryTime is not.
   * @return lastRetryTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastRetryTime() {
    return lastRetryTime;
  }

  public void setLastRetryTime(OffsetDateTime lastRetryTime) {
    this.lastRetryTime = lastRetryTime;
  }


  public TaskExecutionInformation requeueCount(Integer requeueCount) {
    this.requeueCount = requeueCount;
    return this;
  }

  /**
   * When the user removes nodes from a pool (by resizing/shrinking the pool) or when the job is being disabled, the user can specify that running tasks on the nodes be requeued for execution. This count tracks how many times the task has been requeued for these reasons.
   * @return requeueCount
   */
  @javax.annotation.Nonnull
  public Integer getRequeueCount() {
    return requeueCount;
  }

  public void setRequeueCount(Integer requeueCount) {
    this.requeueCount = requeueCount;
  }


  public TaskExecutionInformation result(TaskExecutionResult result) {
    this.result = result;
    return this;
  }

  /**
   * Get result
   * @return result
   */
  @javax.annotation.Nullable
  public TaskExecutionResult getResult() {
    return result;
  }

  public void setResult(TaskExecutionResult result) {
    this.result = result;
  }


  public TaskExecutionInformation retryCount(Integer retryCount) {
    this.retryCount = retryCount;
    return this;
  }

  /**
   * Task application failures (non-zero exit code) are retried, pre-processing errors (the task could not be run) and file upload errors are not retried. The Batch service will retry the task up to the limit specified by the constraints.
   * @return retryCount
   */
  @javax.annotation.Nonnull
  public Integer getRetryCount() {
    return retryCount;
  }

  public void setRetryCount(Integer retryCount) {
    this.retryCount = retryCount;
  }


  public TaskExecutionInformation startTime(OffsetDateTime startTime) {
    this.startTime = startTime;
    return this;
  }

  /**
   * &#39;Running&#39; corresponds to the running state, so if the task specifies resource files or application packages, then the start time reflects the time at which the task started downloading or deploying these. If the task has been restarted or retried, this is the most recent time at which the task started running. This property is present only for tasks that are in the running or completed state.
   * @return startTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStartTime() {
    return startTime;
  }

  public void setStartTime(OffsetDateTime startTime) {
    this.startTime = startTime;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TaskExecutionInformation taskExecutionInformation = (TaskExecutionInformation) o;
    return Objects.equals(this.containerInfo, taskExecutionInformation.containerInfo) &&
        Objects.equals(this.endTime, taskExecutionInformation.endTime) &&
        Objects.equals(this.exitCode, taskExecutionInformation.exitCode) &&
        Objects.equals(this.failureInfo, taskExecutionInformation.failureInfo) &&
        Objects.equals(this.lastRequeueTime, taskExecutionInformation.lastRequeueTime) &&
        Objects.equals(this.lastRetryTime, taskExecutionInformation.lastRetryTime) &&
        Objects.equals(this.requeueCount, taskExecutionInformation.requeueCount) &&
        Objects.equals(this.result, taskExecutionInformation.result) &&
        Objects.equals(this.retryCount, taskExecutionInformation.retryCount) &&
        Objects.equals(this.startTime, taskExecutionInformation.startTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(containerInfo, endTime, exitCode, failureInfo, lastRequeueTime, lastRetryTime, requeueCount, result, retryCount, startTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TaskExecutionInformation {\n");
    sb.append("    containerInfo: ").append(toIndentedString(containerInfo)).append("\n");
    sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
    sb.append("    exitCode: ").append(toIndentedString(exitCode)).append("\n");
    sb.append("    failureInfo: ").append(toIndentedString(failureInfo)).append("\n");
    sb.append("    lastRequeueTime: ").append(toIndentedString(lastRequeueTime)).append("\n");
    sb.append("    lastRetryTime: ").append(toIndentedString(lastRetryTime)).append("\n");
    sb.append("    requeueCount: ").append(toIndentedString(requeueCount)).append("\n");
    sb.append("    result: ").append(toIndentedString(result)).append("\n");
    sb.append("    retryCount: ").append(toIndentedString(retryCount)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("containerInfo");
    openapiFields.add("endTime");
    openapiFields.add("exitCode");
    openapiFields.add("failureInfo");
    openapiFields.add("lastRequeueTime");
    openapiFields.add("lastRetryTime");
    openapiFields.add("requeueCount");
    openapiFields.add("result");
    openapiFields.add("retryCount");
    openapiFields.add("startTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("requeueCount");
    openapiRequiredFields.add("retryCount");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TaskExecutionInformation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TaskExecutionInformation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TaskExecutionInformation is not found in the empty JSON string", TaskExecutionInformation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TaskExecutionInformation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TaskExecutionInformation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TaskExecutionInformation.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `containerInfo`
      if (jsonObj.get("containerInfo") != null && !jsonObj.get("containerInfo").isJsonNull()) {
        TaskContainerExecutionInformation.validateJsonElement(jsonObj.get("containerInfo"));
      }
      // validate the optional field `failureInfo`
      if (jsonObj.get("failureInfo") != null && !jsonObj.get("failureInfo").isJsonNull()) {
        TaskFailureInformation.validateJsonElement(jsonObj.get("failureInfo"));
      }
      // validate the optional field `result`
      if (jsonObj.get("result") != null && !jsonObj.get("result").isJsonNull()) {
        TaskExecutionResult.validateJsonElement(jsonObj.get("result"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TaskExecutionInformation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TaskExecutionInformation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TaskExecutionInformation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TaskExecutionInformation.class));

       return (TypeAdapter<T>) new TypeAdapter<TaskExecutionInformation>() {
           @Override
           public void write(JsonWriter out, TaskExecutionInformation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TaskExecutionInformation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TaskExecutionInformation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TaskExecutionInformation
   * @throws IOException if the JSON string is invalid with respect to TaskExecutionInformation
   */
  public static TaskExecutionInformation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TaskExecutionInformation.class);
  }

  /**
   * Convert an instance of TaskExecutionInformation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

