/*
 * BatchService
 * A client for issuing REST requests to the Azure Batch service.
 *
 * The version of the OpenAPI document: 2017-09-01.6.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ApplicationPackageReference;
import org.openapitools.client.model.AuthenticationTokenSettings;
import org.openapitools.client.model.EnvironmentSetting;
import org.openapitools.client.model.OutputFile;
import org.openapitools.client.model.ResourceFile;
import org.openapitools.client.model.TaskConstraints;
import org.openapitools.client.model.TaskContainerSettings;
import org.openapitools.client.model.UserIdentity;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The Job Manager task is automatically started when the job is created. The Batch service tries to schedule the Job Manager task before any other tasks in the job. When shrinking a pool, the Batch service tries to preserve compute nodes where Job Manager tasks are running for as long as possible (that is, nodes running &#39;normal&#39; tasks are removed before nodes running Job Manager tasks). When a Job Manager task fails and needs to be restarted, the system tries to schedule it at the highest priority. If there are no idle nodes available, the system may terminate one of the running tasks in the pool and return it to the queue in order to make room for the Job Manager task to restart. Note that a Job Manager task in one job does not have priority over tasks in other jobs. Across jobs, only job level priorities are observed. For example, if a Job Manager in a priority 0 job needs to be restarted, it will not displace tasks of a priority 1 job.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:58:41.987830-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class JobManagerTask {
  public static final String SERIALIZED_NAME_ALLOW_LOW_PRIORITY_NODE = "allowLowPriorityNode";
  @SerializedName(SERIALIZED_NAME_ALLOW_LOW_PRIORITY_NODE)
  private Boolean allowLowPriorityNode;

  public static final String SERIALIZED_NAME_APPLICATION_PACKAGE_REFERENCES = "applicationPackageReferences";
  @SerializedName(SERIALIZED_NAME_APPLICATION_PACKAGE_REFERENCES)
  private List<ApplicationPackageReference> applicationPackageReferences = new ArrayList<>();

  public static final String SERIALIZED_NAME_AUTHENTICATION_TOKEN_SETTINGS = "authenticationTokenSettings";
  @SerializedName(SERIALIZED_NAME_AUTHENTICATION_TOKEN_SETTINGS)
  private AuthenticationTokenSettings authenticationTokenSettings;

  public static final String SERIALIZED_NAME_COMMAND_LINE = "commandLine";
  @SerializedName(SERIALIZED_NAME_COMMAND_LINE)
  private String commandLine;

  public static final String SERIALIZED_NAME_CONSTRAINTS = "constraints";
  @SerializedName(SERIALIZED_NAME_CONSTRAINTS)
  private TaskConstraints constraints;

  public static final String SERIALIZED_NAME_CONTAINER_SETTINGS = "containerSettings";
  @SerializedName(SERIALIZED_NAME_CONTAINER_SETTINGS)
  private TaskContainerSettings containerSettings;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_ENVIRONMENT_SETTINGS = "environmentSettings";
  @SerializedName(SERIALIZED_NAME_ENVIRONMENT_SETTINGS)
  private List<EnvironmentSetting> environmentSettings = new ArrayList<>();

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_KILL_JOB_ON_COMPLETION = "killJobOnCompletion";
  @SerializedName(SERIALIZED_NAME_KILL_JOB_ON_COMPLETION)
  private Boolean killJobOnCompletion;

  public static final String SERIALIZED_NAME_OUTPUT_FILES = "outputFiles";
  @SerializedName(SERIALIZED_NAME_OUTPUT_FILES)
  private List<OutputFile> outputFiles = new ArrayList<>();

  public static final String SERIALIZED_NAME_RESOURCE_FILES = "resourceFiles";
  @SerializedName(SERIALIZED_NAME_RESOURCE_FILES)
  private List<ResourceFile> resourceFiles = new ArrayList<>();

  public static final String SERIALIZED_NAME_RUN_EXCLUSIVE = "runExclusive";
  @SerializedName(SERIALIZED_NAME_RUN_EXCLUSIVE)
  private Boolean runExclusive;

  public static final String SERIALIZED_NAME_USER_IDENTITY = "userIdentity";
  @SerializedName(SERIALIZED_NAME_USER_IDENTITY)
  private UserIdentity userIdentity;

  public JobManagerTask() {
  }

  public JobManagerTask allowLowPriorityNode(Boolean allowLowPriorityNode) {
    this.allowLowPriorityNode = allowLowPriorityNode;
    return this;
  }

  /**
   * The default value is false.
   * @return allowLowPriorityNode
   */
  @javax.annotation.Nullable
  public Boolean getAllowLowPriorityNode() {
    return allowLowPriorityNode;
  }

  public void setAllowLowPriorityNode(Boolean allowLowPriorityNode) {
    this.allowLowPriorityNode = allowLowPriorityNode;
  }


  public JobManagerTask applicationPackageReferences(List<ApplicationPackageReference> applicationPackageReferences) {
    this.applicationPackageReferences = applicationPackageReferences;
    return this;
  }

  public JobManagerTask addApplicationPackageReferencesItem(ApplicationPackageReference applicationPackageReferencesItem) {
    if (this.applicationPackageReferences == null) {
      this.applicationPackageReferences = new ArrayList<>();
    }
    this.applicationPackageReferences.add(applicationPackageReferencesItem);
    return this;
  }

  /**
   * Application packages are downloaded and deployed to a shared directory, not the task working directory. Therefore, if a referenced package is already on the compute node, and is up to date, then it is not re-downloaded; the existing copy on the compute node is used. If a referenced application package cannot be installed, for example because the package has been deleted or because download failed, the task fails.
   * @return applicationPackageReferences
   */
  @javax.annotation.Nullable
  public List<ApplicationPackageReference> getApplicationPackageReferences() {
    return applicationPackageReferences;
  }

  public void setApplicationPackageReferences(List<ApplicationPackageReference> applicationPackageReferences) {
    this.applicationPackageReferences = applicationPackageReferences;
  }


  public JobManagerTask authenticationTokenSettings(AuthenticationTokenSettings authenticationTokenSettings) {
    this.authenticationTokenSettings = authenticationTokenSettings;
    return this;
  }

  /**
   * Get authenticationTokenSettings
   * @return authenticationTokenSettings
   */
  @javax.annotation.Nullable
  public AuthenticationTokenSettings getAuthenticationTokenSettings() {
    return authenticationTokenSettings;
  }

  public void setAuthenticationTokenSettings(AuthenticationTokenSettings authenticationTokenSettings) {
    this.authenticationTokenSettings = authenticationTokenSettings;
  }


  public JobManagerTask commandLine(String commandLine) {
    this.commandLine = commandLine;
    return this;
  }

  /**
   * The command line does not run under a shell, and therefore cannot take advantage of shell features such as environment variable expansion. If you want to take advantage of such features, you should invoke the shell in the command line, for example using \&quot;cmd /c MyCommand\&quot; in Windows or \&quot;/bin/sh -c MyCommand\&quot; in Linux.
   * @return commandLine
   */
  @javax.annotation.Nonnull
  public String getCommandLine() {
    return commandLine;
  }

  public void setCommandLine(String commandLine) {
    this.commandLine = commandLine;
  }


  public JobManagerTask constraints(TaskConstraints constraints) {
    this.constraints = constraints;
    return this;
  }

  /**
   * Get constraints
   * @return constraints
   */
  @javax.annotation.Nullable
  public TaskConstraints getConstraints() {
    return constraints;
  }

  public void setConstraints(TaskConstraints constraints) {
    this.constraints = constraints;
  }


  public JobManagerTask containerSettings(TaskContainerSettings containerSettings) {
    this.containerSettings = containerSettings;
    return this;
  }

  /**
   * Get containerSettings
   * @return containerSettings
   */
  @javax.annotation.Nullable
  public TaskContainerSettings getContainerSettings() {
    return containerSettings;
  }

  public void setContainerSettings(TaskContainerSettings containerSettings) {
    this.containerSettings = containerSettings;
  }


  public JobManagerTask displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * It need not be unique and can contain any Unicode characters up to a maximum length of 1024.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public JobManagerTask environmentSettings(List<EnvironmentSetting> environmentSettings) {
    this.environmentSettings = environmentSettings;
    return this;
  }

  public JobManagerTask addEnvironmentSettingsItem(EnvironmentSetting environmentSettingsItem) {
    if (this.environmentSettings == null) {
      this.environmentSettings = new ArrayList<>();
    }
    this.environmentSettings.add(environmentSettingsItem);
    return this;
  }

  /**
   * Get environmentSettings
   * @return environmentSettings
   */
  @javax.annotation.Nullable
  public List<EnvironmentSetting> getEnvironmentSettings() {
    return environmentSettings;
  }

  public void setEnvironmentSettings(List<EnvironmentSetting> environmentSettings) {
    this.environmentSettings = environmentSettings;
  }


  public JobManagerTask id(String id) {
    this.id = id;
    return this;
  }

  /**
   * The ID can contain any combination of alphanumeric characters including hyphens and underscores and cannot contain more than 64 characters.
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public JobManagerTask killJobOnCompletion(Boolean killJobOnCompletion) {
    this.killJobOnCompletion = killJobOnCompletion;
    return this;
  }

  /**
   * If true, when the Job Manager task completes, the Batch service marks the job as complete. If any tasks are still running at this time (other than Job Release), those tasks are terminated. If false, the completion of the Job Manager task does not affect the job status. In this case, you should either use the onAllTasksComplete attribute to terminate the job, or have a client or user terminate the job explicitly. An example of this is if the Job Manager creates a set of tasks but then takes no further role in their execution. The default value is true. If you are using the onAllTasksComplete and onTaskFailure attributes to control job lifetime, and using the Job Manager task only to create the tasks for the job (not to monitor progress), then it is important to set killJobOnCompletion to false.
   * @return killJobOnCompletion
   */
  @javax.annotation.Nullable
  public Boolean getKillJobOnCompletion() {
    return killJobOnCompletion;
  }

  public void setKillJobOnCompletion(Boolean killJobOnCompletion) {
    this.killJobOnCompletion = killJobOnCompletion;
  }


  public JobManagerTask outputFiles(List<OutputFile> outputFiles) {
    this.outputFiles = outputFiles;
    return this;
  }

  public JobManagerTask addOutputFilesItem(OutputFile outputFilesItem) {
    if (this.outputFiles == null) {
      this.outputFiles = new ArrayList<>();
    }
    this.outputFiles.add(outputFilesItem);
    return this;
  }

  /**
   * For multi-instance tasks, the files will only be uploaded from the compute node on which the primary task is executed.
   * @return outputFiles
   */
  @javax.annotation.Nullable
  public List<OutputFile> getOutputFiles() {
    return outputFiles;
  }

  public void setOutputFiles(List<OutputFile> outputFiles) {
    this.outputFiles = outputFiles;
  }


  public JobManagerTask resourceFiles(List<ResourceFile> resourceFiles) {
    this.resourceFiles = resourceFiles;
    return this;
  }

  public JobManagerTask addResourceFilesItem(ResourceFile resourceFilesItem) {
    if (this.resourceFiles == null) {
      this.resourceFiles = new ArrayList<>();
    }
    this.resourceFiles.add(resourceFilesItem);
    return this;
  }

  /**
   * Files listed under this element are located in the task&#39;s working directory.
   * @return resourceFiles
   */
  @javax.annotation.Nullable
  public List<ResourceFile> getResourceFiles() {
    return resourceFiles;
  }

  public void setResourceFiles(List<ResourceFile> resourceFiles) {
    this.resourceFiles = resourceFiles;
  }


  public JobManagerTask runExclusive(Boolean runExclusive) {
    this.runExclusive = runExclusive;
    return this;
  }

  /**
   * If true, no other tasks will run on the same compute node for as long as the Job Manager is running. If false, other tasks can run simultaneously with the Job Manager on a compute node. The Job Manager task counts normally against the node&#39;s concurrent task limit, so this is only relevant if the node allows multiple concurrent tasks. The default value is true.
   * @return runExclusive
   */
  @javax.annotation.Nullable
  public Boolean getRunExclusive() {
    return runExclusive;
  }

  public void setRunExclusive(Boolean runExclusive) {
    this.runExclusive = runExclusive;
  }


  public JobManagerTask userIdentity(UserIdentity userIdentity) {
    this.userIdentity = userIdentity;
    return this;
  }

  /**
   * Get userIdentity
   * @return userIdentity
   */
  @javax.annotation.Nullable
  public UserIdentity getUserIdentity() {
    return userIdentity;
  }

  public void setUserIdentity(UserIdentity userIdentity) {
    this.userIdentity = userIdentity;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    JobManagerTask jobManagerTask = (JobManagerTask) o;
    return Objects.equals(this.allowLowPriorityNode, jobManagerTask.allowLowPriorityNode) &&
        Objects.equals(this.applicationPackageReferences, jobManagerTask.applicationPackageReferences) &&
        Objects.equals(this.authenticationTokenSettings, jobManagerTask.authenticationTokenSettings) &&
        Objects.equals(this.commandLine, jobManagerTask.commandLine) &&
        Objects.equals(this.constraints, jobManagerTask.constraints) &&
        Objects.equals(this.containerSettings, jobManagerTask.containerSettings) &&
        Objects.equals(this.displayName, jobManagerTask.displayName) &&
        Objects.equals(this.environmentSettings, jobManagerTask.environmentSettings) &&
        Objects.equals(this.id, jobManagerTask.id) &&
        Objects.equals(this.killJobOnCompletion, jobManagerTask.killJobOnCompletion) &&
        Objects.equals(this.outputFiles, jobManagerTask.outputFiles) &&
        Objects.equals(this.resourceFiles, jobManagerTask.resourceFiles) &&
        Objects.equals(this.runExclusive, jobManagerTask.runExclusive) &&
        Objects.equals(this.userIdentity, jobManagerTask.userIdentity);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allowLowPriorityNode, applicationPackageReferences, authenticationTokenSettings, commandLine, constraints, containerSettings, displayName, environmentSettings, id, killJobOnCompletion, outputFiles, resourceFiles, runExclusive, userIdentity);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class JobManagerTask {\n");
    sb.append("    allowLowPriorityNode: ").append(toIndentedString(allowLowPriorityNode)).append("\n");
    sb.append("    applicationPackageReferences: ").append(toIndentedString(applicationPackageReferences)).append("\n");
    sb.append("    authenticationTokenSettings: ").append(toIndentedString(authenticationTokenSettings)).append("\n");
    sb.append("    commandLine: ").append(toIndentedString(commandLine)).append("\n");
    sb.append("    constraints: ").append(toIndentedString(constraints)).append("\n");
    sb.append("    containerSettings: ").append(toIndentedString(containerSettings)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    environmentSettings: ").append(toIndentedString(environmentSettings)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    killJobOnCompletion: ").append(toIndentedString(killJobOnCompletion)).append("\n");
    sb.append("    outputFiles: ").append(toIndentedString(outputFiles)).append("\n");
    sb.append("    resourceFiles: ").append(toIndentedString(resourceFiles)).append("\n");
    sb.append("    runExclusive: ").append(toIndentedString(runExclusive)).append("\n");
    sb.append("    userIdentity: ").append(toIndentedString(userIdentity)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allowLowPriorityNode");
    openapiFields.add("applicationPackageReferences");
    openapiFields.add("authenticationTokenSettings");
    openapiFields.add("commandLine");
    openapiFields.add("constraints");
    openapiFields.add("containerSettings");
    openapiFields.add("displayName");
    openapiFields.add("environmentSettings");
    openapiFields.add("id");
    openapiFields.add("killJobOnCompletion");
    openapiFields.add("outputFiles");
    openapiFields.add("resourceFiles");
    openapiFields.add("runExclusive");
    openapiFields.add("userIdentity");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("commandLine");
    openapiRequiredFields.add("id");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to JobManagerTask
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!JobManagerTask.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in JobManagerTask is not found in the empty JSON string", JobManagerTask.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!JobManagerTask.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `JobManagerTask` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : JobManagerTask.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("applicationPackageReferences") != null && !jsonObj.get("applicationPackageReferences").isJsonNull()) {
        JsonArray jsonArrayapplicationPackageReferences = jsonObj.getAsJsonArray("applicationPackageReferences");
        if (jsonArrayapplicationPackageReferences != null) {
          // ensure the json data is an array
          if (!jsonObj.get("applicationPackageReferences").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `applicationPackageReferences` to be an array in the JSON string but got `%s`", jsonObj.get("applicationPackageReferences").toString()));
          }

          // validate the optional field `applicationPackageReferences` (array)
          for (int i = 0; i < jsonArrayapplicationPackageReferences.size(); i++) {
            ApplicationPackageReference.validateJsonElement(jsonArrayapplicationPackageReferences.get(i));
          };
        }
      }
      // validate the optional field `authenticationTokenSettings`
      if (jsonObj.get("authenticationTokenSettings") != null && !jsonObj.get("authenticationTokenSettings").isJsonNull()) {
        AuthenticationTokenSettings.validateJsonElement(jsonObj.get("authenticationTokenSettings"));
      }
      if (!jsonObj.get("commandLine").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `commandLine` to be a primitive type in the JSON string but got `%s`", jsonObj.get("commandLine").toString()));
      }
      // validate the optional field `constraints`
      if (jsonObj.get("constraints") != null && !jsonObj.get("constraints").isJsonNull()) {
        TaskConstraints.validateJsonElement(jsonObj.get("constraints"));
      }
      // validate the optional field `containerSettings`
      if (jsonObj.get("containerSettings") != null && !jsonObj.get("containerSettings").isJsonNull()) {
        TaskContainerSettings.validateJsonElement(jsonObj.get("containerSettings"));
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if (jsonObj.get("environmentSettings") != null && !jsonObj.get("environmentSettings").isJsonNull()) {
        JsonArray jsonArrayenvironmentSettings = jsonObj.getAsJsonArray("environmentSettings");
        if (jsonArrayenvironmentSettings != null) {
          // ensure the json data is an array
          if (!jsonObj.get("environmentSettings").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `environmentSettings` to be an array in the JSON string but got `%s`", jsonObj.get("environmentSettings").toString()));
          }

          // validate the optional field `environmentSettings` (array)
          for (int i = 0; i < jsonArrayenvironmentSettings.size(); i++) {
            EnvironmentSetting.validateJsonElement(jsonArrayenvironmentSettings.get(i));
          };
        }
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (jsonObj.get("outputFiles") != null && !jsonObj.get("outputFiles").isJsonNull()) {
        JsonArray jsonArrayoutputFiles = jsonObj.getAsJsonArray("outputFiles");
        if (jsonArrayoutputFiles != null) {
          // ensure the json data is an array
          if (!jsonObj.get("outputFiles").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `outputFiles` to be an array in the JSON string but got `%s`", jsonObj.get("outputFiles").toString()));
          }

          // validate the optional field `outputFiles` (array)
          for (int i = 0; i < jsonArrayoutputFiles.size(); i++) {
            OutputFile.validateJsonElement(jsonArrayoutputFiles.get(i));
          };
        }
      }
      if (jsonObj.get("resourceFiles") != null && !jsonObj.get("resourceFiles").isJsonNull()) {
        JsonArray jsonArrayresourceFiles = jsonObj.getAsJsonArray("resourceFiles");
        if (jsonArrayresourceFiles != null) {
          // ensure the json data is an array
          if (!jsonObj.get("resourceFiles").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `resourceFiles` to be an array in the JSON string but got `%s`", jsonObj.get("resourceFiles").toString()));
          }

          // validate the optional field `resourceFiles` (array)
          for (int i = 0; i < jsonArrayresourceFiles.size(); i++) {
            ResourceFile.validateJsonElement(jsonArrayresourceFiles.get(i));
          };
        }
      }
      // validate the optional field `userIdentity`
      if (jsonObj.get("userIdentity") != null && !jsonObj.get("userIdentity").isJsonNull()) {
        UserIdentity.validateJsonElement(jsonObj.get("userIdentity"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!JobManagerTask.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'JobManagerTask' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<JobManagerTask> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(JobManagerTask.class));

       return (TypeAdapter<T>) new TypeAdapter<JobManagerTask>() {
           @Override
           public void write(JsonWriter out, JobManagerTask value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public JobManagerTask read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of JobManagerTask given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of JobManagerTask
   * @throws IOException if the JSON string is invalid with respect to JobManagerTask
   */
  public static JobManagerTask fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, JobManagerTask.class);
  }

  /**
   * Convert an instance of JobManagerTask to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

