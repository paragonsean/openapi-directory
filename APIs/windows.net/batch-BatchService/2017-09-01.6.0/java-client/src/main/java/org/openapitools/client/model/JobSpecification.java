/*
 * BatchService
 * A client for issuing REST requests to the Azure Batch service.
 *
 * The version of the OpenAPI document: 2017-09-01.6.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.EnvironmentSetting;
import org.openapitools.client.model.JobConstraints;
import org.openapitools.client.model.JobManagerTask;
import org.openapitools.client.model.JobPreparationTask;
import org.openapitools.client.model.JobReleaseTask;
import org.openapitools.client.model.MetadataItem;
import org.openapitools.client.model.OnAllTasksComplete;
import org.openapitools.client.model.OnTaskFailure;
import org.openapitools.client.model.PoolInformation;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * JobSpecification
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:58:41.987830-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class JobSpecification {
  public static final String SERIALIZED_NAME_COMMON_ENVIRONMENT_SETTINGS = "commonEnvironmentSettings";
  @SerializedName(SERIALIZED_NAME_COMMON_ENVIRONMENT_SETTINGS)
  private List<EnvironmentSetting> commonEnvironmentSettings = new ArrayList<>();

  public static final String SERIALIZED_NAME_CONSTRAINTS = "constraints";
  @SerializedName(SERIALIZED_NAME_CONSTRAINTS)
  private JobConstraints constraints;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_JOB_MANAGER_TASK = "jobManagerTask";
  @SerializedName(SERIALIZED_NAME_JOB_MANAGER_TASK)
  private JobManagerTask jobManagerTask;

  public static final String SERIALIZED_NAME_JOB_PREPARATION_TASK = "jobPreparationTask";
  @SerializedName(SERIALIZED_NAME_JOB_PREPARATION_TASK)
  private JobPreparationTask jobPreparationTask;

  public static final String SERIALIZED_NAME_JOB_RELEASE_TASK = "jobReleaseTask";
  @SerializedName(SERIALIZED_NAME_JOB_RELEASE_TASK)
  private JobReleaseTask jobReleaseTask;

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private List<MetadataItem> metadata = new ArrayList<>();

  public static final String SERIALIZED_NAME_ON_ALL_TASKS_COMPLETE = "onAllTasksComplete";
  @SerializedName(SERIALIZED_NAME_ON_ALL_TASKS_COMPLETE)
  private OnAllTasksComplete onAllTasksComplete;

  public static final String SERIALIZED_NAME_ON_TASK_FAILURE = "onTaskFailure";
  @SerializedName(SERIALIZED_NAME_ON_TASK_FAILURE)
  private OnTaskFailure onTaskFailure;

  public static final String SERIALIZED_NAME_POOL_INFO = "poolInfo";
  @SerializedName(SERIALIZED_NAME_POOL_INFO)
  private PoolInformation poolInfo;

  public static final String SERIALIZED_NAME_PRIORITY = "priority";
  @SerializedName(SERIALIZED_NAME_PRIORITY)
  private Integer priority;

  public static final String SERIALIZED_NAME_USES_TASK_DEPENDENCIES = "usesTaskDependencies";
  @SerializedName(SERIALIZED_NAME_USES_TASK_DEPENDENCIES)
  private Boolean usesTaskDependencies;

  public JobSpecification() {
  }

  public JobSpecification commonEnvironmentSettings(List<EnvironmentSetting> commonEnvironmentSettings) {
    this.commonEnvironmentSettings = commonEnvironmentSettings;
    return this;
  }

  public JobSpecification addCommonEnvironmentSettingsItem(EnvironmentSetting commonEnvironmentSettingsItem) {
    if (this.commonEnvironmentSettings == null) {
      this.commonEnvironmentSettings = new ArrayList<>();
    }
    this.commonEnvironmentSettings.add(commonEnvironmentSettingsItem);
    return this;
  }

  /**
   * Individual tasks can override an environment setting specified here by specifying the same setting name with a different value.
   * @return commonEnvironmentSettings
   */
  @javax.annotation.Nullable
  public List<EnvironmentSetting> getCommonEnvironmentSettings() {
    return commonEnvironmentSettings;
  }

  public void setCommonEnvironmentSettings(List<EnvironmentSetting> commonEnvironmentSettings) {
    this.commonEnvironmentSettings = commonEnvironmentSettings;
  }


  public JobSpecification constraints(JobConstraints constraints) {
    this.constraints = constraints;
    return this;
  }

  /**
   * Get constraints
   * @return constraints
   */
  @javax.annotation.Nullable
  public JobConstraints getConstraints() {
    return constraints;
  }

  public void setConstraints(JobConstraints constraints) {
    this.constraints = constraints;
  }


  public JobSpecification displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * The name need not be unique and can contain any Unicode characters up to a maximum length of 1024.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public JobSpecification jobManagerTask(JobManagerTask jobManagerTask) {
    this.jobManagerTask = jobManagerTask;
    return this;
  }

  /**
   * Get jobManagerTask
   * @return jobManagerTask
   */
  @javax.annotation.Nullable
  public JobManagerTask getJobManagerTask() {
    return jobManagerTask;
  }

  public void setJobManagerTask(JobManagerTask jobManagerTask) {
    this.jobManagerTask = jobManagerTask;
  }


  public JobSpecification jobPreparationTask(JobPreparationTask jobPreparationTask) {
    this.jobPreparationTask = jobPreparationTask;
    return this;
  }

  /**
   * Get jobPreparationTask
   * @return jobPreparationTask
   */
  @javax.annotation.Nullable
  public JobPreparationTask getJobPreparationTask() {
    return jobPreparationTask;
  }

  public void setJobPreparationTask(JobPreparationTask jobPreparationTask) {
    this.jobPreparationTask = jobPreparationTask;
  }


  public JobSpecification jobReleaseTask(JobReleaseTask jobReleaseTask) {
    this.jobReleaseTask = jobReleaseTask;
    return this;
  }

  /**
   * Get jobReleaseTask
   * @return jobReleaseTask
   */
  @javax.annotation.Nullable
  public JobReleaseTask getJobReleaseTask() {
    return jobReleaseTask;
  }

  public void setJobReleaseTask(JobReleaseTask jobReleaseTask) {
    this.jobReleaseTask = jobReleaseTask;
  }


  public JobSpecification metadata(List<MetadataItem> metadata) {
    this.metadata = metadata;
    return this;
  }

  public JobSpecification addMetadataItem(MetadataItem metadataItem) {
    if (this.metadata == null) {
      this.metadata = new ArrayList<>();
    }
    this.metadata.add(metadataItem);
    return this;
  }

  /**
   * The Batch service does not assign any meaning to metadata; it is solely for the use of user code.
   * @return metadata
   */
  @javax.annotation.Nullable
  public List<MetadataItem> getMetadata() {
    return metadata;
  }

  public void setMetadata(List<MetadataItem> metadata) {
    this.metadata = metadata;
  }


  public JobSpecification onAllTasksComplete(OnAllTasksComplete onAllTasksComplete) {
    this.onAllTasksComplete = onAllTasksComplete;
    return this;
  }

  /**
   * Get onAllTasksComplete
   * @return onAllTasksComplete
   */
  @javax.annotation.Nullable
  public OnAllTasksComplete getOnAllTasksComplete() {
    return onAllTasksComplete;
  }

  public void setOnAllTasksComplete(OnAllTasksComplete onAllTasksComplete) {
    this.onAllTasksComplete = onAllTasksComplete;
  }


  public JobSpecification onTaskFailure(OnTaskFailure onTaskFailure) {
    this.onTaskFailure = onTaskFailure;
    return this;
  }

  /**
   * Get onTaskFailure
   * @return onTaskFailure
   */
  @javax.annotation.Nullable
  public OnTaskFailure getOnTaskFailure() {
    return onTaskFailure;
  }

  public void setOnTaskFailure(OnTaskFailure onTaskFailure) {
    this.onTaskFailure = onTaskFailure;
  }


  public JobSpecification poolInfo(PoolInformation poolInfo) {
    this.poolInfo = poolInfo;
    return this;
  }

  /**
   * Get poolInfo
   * @return poolInfo
   */
  @javax.annotation.Nonnull
  public PoolInformation getPoolInfo() {
    return poolInfo;
  }

  public void setPoolInfo(PoolInformation poolInfo) {
    this.poolInfo = poolInfo;
  }


  public JobSpecification priority(Integer priority) {
    this.priority = priority;
    return this;
  }

  /**
   * Priority values can range from -1000 to 1000, with -1000 being the lowest priority and 1000 being the highest priority. The default value is 0. This priority is used as the default for all jobs under the job schedule. You can update a job&#39;s priority after it has been created using by using the update job API.
   * @return priority
   */
  @javax.annotation.Nullable
  public Integer getPriority() {
    return priority;
  }

  public void setPriority(Integer priority) {
    this.priority = priority;
  }


  public JobSpecification usesTaskDependencies(Boolean usesTaskDependencies) {
    this.usesTaskDependencies = usesTaskDependencies;
    return this;
  }

  /**
   * Get usesTaskDependencies
   * @return usesTaskDependencies
   */
  @javax.annotation.Nullable
  public Boolean getUsesTaskDependencies() {
    return usesTaskDependencies;
  }

  public void setUsesTaskDependencies(Boolean usesTaskDependencies) {
    this.usesTaskDependencies = usesTaskDependencies;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    JobSpecification jobSpecification = (JobSpecification) o;
    return Objects.equals(this.commonEnvironmentSettings, jobSpecification.commonEnvironmentSettings) &&
        Objects.equals(this.constraints, jobSpecification.constraints) &&
        Objects.equals(this.displayName, jobSpecification.displayName) &&
        Objects.equals(this.jobManagerTask, jobSpecification.jobManagerTask) &&
        Objects.equals(this.jobPreparationTask, jobSpecification.jobPreparationTask) &&
        Objects.equals(this.jobReleaseTask, jobSpecification.jobReleaseTask) &&
        Objects.equals(this.metadata, jobSpecification.metadata) &&
        Objects.equals(this.onAllTasksComplete, jobSpecification.onAllTasksComplete) &&
        Objects.equals(this.onTaskFailure, jobSpecification.onTaskFailure) &&
        Objects.equals(this.poolInfo, jobSpecification.poolInfo) &&
        Objects.equals(this.priority, jobSpecification.priority) &&
        Objects.equals(this.usesTaskDependencies, jobSpecification.usesTaskDependencies);
  }

  @Override
  public int hashCode() {
    return Objects.hash(commonEnvironmentSettings, constraints, displayName, jobManagerTask, jobPreparationTask, jobReleaseTask, metadata, onAllTasksComplete, onTaskFailure, poolInfo, priority, usesTaskDependencies);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class JobSpecification {\n");
    sb.append("    commonEnvironmentSettings: ").append(toIndentedString(commonEnvironmentSettings)).append("\n");
    sb.append("    constraints: ").append(toIndentedString(constraints)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    jobManagerTask: ").append(toIndentedString(jobManagerTask)).append("\n");
    sb.append("    jobPreparationTask: ").append(toIndentedString(jobPreparationTask)).append("\n");
    sb.append("    jobReleaseTask: ").append(toIndentedString(jobReleaseTask)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    onAllTasksComplete: ").append(toIndentedString(onAllTasksComplete)).append("\n");
    sb.append("    onTaskFailure: ").append(toIndentedString(onTaskFailure)).append("\n");
    sb.append("    poolInfo: ").append(toIndentedString(poolInfo)).append("\n");
    sb.append("    priority: ").append(toIndentedString(priority)).append("\n");
    sb.append("    usesTaskDependencies: ").append(toIndentedString(usesTaskDependencies)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("commonEnvironmentSettings");
    openapiFields.add("constraints");
    openapiFields.add("displayName");
    openapiFields.add("jobManagerTask");
    openapiFields.add("jobPreparationTask");
    openapiFields.add("jobReleaseTask");
    openapiFields.add("metadata");
    openapiFields.add("onAllTasksComplete");
    openapiFields.add("onTaskFailure");
    openapiFields.add("poolInfo");
    openapiFields.add("priority");
    openapiFields.add("usesTaskDependencies");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("poolInfo");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to JobSpecification
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!JobSpecification.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in JobSpecification is not found in the empty JSON string", JobSpecification.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!JobSpecification.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `JobSpecification` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : JobSpecification.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("commonEnvironmentSettings") != null && !jsonObj.get("commonEnvironmentSettings").isJsonNull()) {
        JsonArray jsonArraycommonEnvironmentSettings = jsonObj.getAsJsonArray("commonEnvironmentSettings");
        if (jsonArraycommonEnvironmentSettings != null) {
          // ensure the json data is an array
          if (!jsonObj.get("commonEnvironmentSettings").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `commonEnvironmentSettings` to be an array in the JSON string but got `%s`", jsonObj.get("commonEnvironmentSettings").toString()));
          }

          // validate the optional field `commonEnvironmentSettings` (array)
          for (int i = 0; i < jsonArraycommonEnvironmentSettings.size(); i++) {
            EnvironmentSetting.validateJsonElement(jsonArraycommonEnvironmentSettings.get(i));
          };
        }
      }
      // validate the optional field `constraints`
      if (jsonObj.get("constraints") != null && !jsonObj.get("constraints").isJsonNull()) {
        JobConstraints.validateJsonElement(jsonObj.get("constraints"));
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      // validate the optional field `jobManagerTask`
      if (jsonObj.get("jobManagerTask") != null && !jsonObj.get("jobManagerTask").isJsonNull()) {
        JobManagerTask.validateJsonElement(jsonObj.get("jobManagerTask"));
      }
      // validate the optional field `jobPreparationTask`
      if (jsonObj.get("jobPreparationTask") != null && !jsonObj.get("jobPreparationTask").isJsonNull()) {
        JobPreparationTask.validateJsonElement(jsonObj.get("jobPreparationTask"));
      }
      // validate the optional field `jobReleaseTask`
      if (jsonObj.get("jobReleaseTask") != null && !jsonObj.get("jobReleaseTask").isJsonNull()) {
        JobReleaseTask.validateJsonElement(jsonObj.get("jobReleaseTask"));
      }
      if (jsonObj.get("metadata") != null && !jsonObj.get("metadata").isJsonNull()) {
        JsonArray jsonArraymetadata = jsonObj.getAsJsonArray("metadata");
        if (jsonArraymetadata != null) {
          // ensure the json data is an array
          if (!jsonObj.get("metadata").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `metadata` to be an array in the JSON string but got `%s`", jsonObj.get("metadata").toString()));
          }

          // validate the optional field `metadata` (array)
          for (int i = 0; i < jsonArraymetadata.size(); i++) {
            MetadataItem.validateJsonElement(jsonArraymetadata.get(i));
          };
        }
      }
      // validate the optional field `onAllTasksComplete`
      if (jsonObj.get("onAllTasksComplete") != null && !jsonObj.get("onAllTasksComplete").isJsonNull()) {
        OnAllTasksComplete.validateJsonElement(jsonObj.get("onAllTasksComplete"));
      }
      // validate the optional field `onTaskFailure`
      if (jsonObj.get("onTaskFailure") != null && !jsonObj.get("onTaskFailure").isJsonNull()) {
        OnTaskFailure.validateJsonElement(jsonObj.get("onTaskFailure"));
      }
      // validate the required field `poolInfo`
      PoolInformation.validateJsonElement(jsonObj.get("poolInfo"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!JobSpecification.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'JobSpecification' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<JobSpecification> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(JobSpecification.class));

       return (TypeAdapter<T>) new TypeAdapter<JobSpecification>() {
           @Override
           public void write(JsonWriter out, JobSpecification value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public JobSpecification read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of JobSpecification given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of JobSpecification
   * @throws IOException if the JSON string is invalid with respect to JobSpecification
   */
  public static JobSpecification fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, JobSpecification.class);
  }

  /**
   * Convert an instance of JobSpecification to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

