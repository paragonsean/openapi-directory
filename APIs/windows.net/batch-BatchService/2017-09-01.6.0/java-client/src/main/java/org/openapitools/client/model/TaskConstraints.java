/*
 * BatchService
 * A client for issuing REST requests to the Azure Batch service.
 *
 * The version of the OpenAPI document: 2017-09-01.6.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * TaskConstraints
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:58:41.987830-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TaskConstraints {
  public static final String SERIALIZED_NAME_MAX_TASK_RETRY_COUNT = "maxTaskRetryCount";
  @SerializedName(SERIALIZED_NAME_MAX_TASK_RETRY_COUNT)
  private Integer maxTaskRetryCount;

  public static final String SERIALIZED_NAME_MAX_WALL_CLOCK_TIME = "maxWallClockTime";
  @SerializedName(SERIALIZED_NAME_MAX_WALL_CLOCK_TIME)
  private String maxWallClockTime;

  public static final String SERIALIZED_NAME_RETENTION_TIME = "retentionTime";
  @SerializedName(SERIALIZED_NAME_RETENTION_TIME)
  private String retentionTime;

  public TaskConstraints() {
  }

  public TaskConstraints maxTaskRetryCount(Integer maxTaskRetryCount) {
    this.maxTaskRetryCount = maxTaskRetryCount;
    return this;
  }

  /**
   * Note that this value specifically controls the number of retries. The Batch service will try the task once, and may then retry up to this limit. For example, if the maximum retry count is 3, Batch tries the task up to 4 times (one initial try and 3 retries). If the maximum retry count is 0, the Batch service does not retry the task. If the maximum retry count is -1, the Batch service retries the task without limit.
   * @return maxTaskRetryCount
   */
  @javax.annotation.Nullable
  public Integer getMaxTaskRetryCount() {
    return maxTaskRetryCount;
  }

  public void setMaxTaskRetryCount(Integer maxTaskRetryCount) {
    this.maxTaskRetryCount = maxTaskRetryCount;
  }


  public TaskConstraints maxWallClockTime(String maxWallClockTime) {
    this.maxWallClockTime = maxWallClockTime;
    return this;
  }

  /**
   * If this is not specified, there is no time limit on how long the task may run.
   * @return maxWallClockTime
   */
  @javax.annotation.Nullable
  public String getMaxWallClockTime() {
    return maxWallClockTime;
  }

  public void setMaxWallClockTime(String maxWallClockTime) {
    this.maxWallClockTime = maxWallClockTime;
  }


  public TaskConstraints retentionTime(String retentionTime) {
    this.retentionTime = retentionTime;
    return this;
  }

  /**
   * The default is infinite, i.e. the task directory will be retained until the compute node is removed or reimaged.
   * @return retentionTime
   */
  @javax.annotation.Nullable
  public String getRetentionTime() {
    return retentionTime;
  }

  public void setRetentionTime(String retentionTime) {
    this.retentionTime = retentionTime;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TaskConstraints taskConstraints = (TaskConstraints) o;
    return Objects.equals(this.maxTaskRetryCount, taskConstraints.maxTaskRetryCount) &&
        Objects.equals(this.maxWallClockTime, taskConstraints.maxWallClockTime) &&
        Objects.equals(this.retentionTime, taskConstraints.retentionTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(maxTaskRetryCount, maxWallClockTime, retentionTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TaskConstraints {\n");
    sb.append("    maxTaskRetryCount: ").append(toIndentedString(maxTaskRetryCount)).append("\n");
    sb.append("    maxWallClockTime: ").append(toIndentedString(maxWallClockTime)).append("\n");
    sb.append("    retentionTime: ").append(toIndentedString(retentionTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("maxTaskRetryCount");
    openapiFields.add("maxWallClockTime");
    openapiFields.add("retentionTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TaskConstraints
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TaskConstraints.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TaskConstraints is not found in the empty JSON string", TaskConstraints.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TaskConstraints.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TaskConstraints` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("maxWallClockTime") != null && !jsonObj.get("maxWallClockTime").isJsonNull()) && !jsonObj.get("maxWallClockTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `maxWallClockTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("maxWallClockTime").toString()));
      }
      if ((jsonObj.get("retentionTime") != null && !jsonObj.get("retentionTime").isJsonNull()) && !jsonObj.get("retentionTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `retentionTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("retentionTime").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TaskConstraints.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TaskConstraints' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TaskConstraints> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TaskConstraints.class));

       return (TypeAdapter<T>) new TypeAdapter<TaskConstraints>() {
           @Override
           public void write(JsonWriter out, TaskConstraints value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TaskConstraints read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TaskConstraints given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TaskConstraints
   * @throws IOException if the JSON string is invalid with respect to TaskConstraints
   */
  public static TaskConstraints fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TaskConstraints.class);
  }

  /**
   * Convert an instance of TaskConstraints to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

