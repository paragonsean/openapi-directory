/*
 * BatchService
 * A client for issuing REST requests to the Azure Batch service.
 *
 * The version of the OpenAPI document: 2016-07-01.3.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.BatchError;
import java.io.File;
import org.openapitools.client.model.NodeFileListResult;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for FilesApi
 */
@Disabled
public class FilesApiTest {

    private final FilesApi api = new FilesApi();

    /**
     * Deletes the specified task file from the compute node.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void fileDeleteFromComputeNodeTest() throws ApiException {
        String poolId = null;
        String nodeId = null;
        String fileName = null;
        String apiVersion = null;
        Boolean recursive = null;
        Integer timeout = null;
        String clientRequestId = null;
        Boolean returnClientRequestId = null;
        String ocpDate = null;
        api.fileDeleteFromComputeNode(poolId, nodeId, fileName, apiVersion, recursive, timeout, clientRequestId, returnClientRequestId, ocpDate);
        // TODO: test validations
    }

    /**
     * Deletes the specified task file from the compute node where the task ran.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void fileDeleteFromTaskTest() throws ApiException {
        String jobId = null;
        String taskId = null;
        String fileName = null;
        String apiVersion = null;
        Boolean recursive = null;
        Integer timeout = null;
        String clientRequestId = null;
        Boolean returnClientRequestId = null;
        String ocpDate = null;
        api.fileDeleteFromTask(jobId, taskId, fileName, apiVersion, recursive, timeout, clientRequestId, returnClientRequestId, ocpDate);
        // TODO: test validations
    }

    /**
     * Returns the content of the specified task file.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void fileGetFromComputeNodeTest() throws ApiException {
        String poolId = null;
        String nodeId = null;
        String fileName = null;
        String apiVersion = null;
        Integer timeout = null;
        String clientRequestId = null;
        Boolean returnClientRequestId = null;
        String ocpDate = null;
        String ocpRange = null;
        String ifModifiedSince = null;
        String ifUnmodifiedSince = null;
        File response = api.fileGetFromComputeNode(poolId, nodeId, fileName, apiVersion, timeout, clientRequestId, returnClientRequestId, ocpDate, ocpRange, ifModifiedSince, ifUnmodifiedSince);
        // TODO: test validations
    }

    /**
     * Returns the content of the specified task file.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void fileGetFromTaskTest() throws ApiException {
        String jobId = null;
        String taskId = null;
        String fileName = null;
        String apiVersion = null;
        Integer timeout = null;
        String clientRequestId = null;
        Boolean returnClientRequestId = null;
        String ocpDate = null;
        String ocpRange = null;
        String ifModifiedSince = null;
        String ifUnmodifiedSince = null;
        File response = api.fileGetFromTask(jobId, taskId, fileName, apiVersion, timeout, clientRequestId, returnClientRequestId, ocpDate, ocpRange, ifModifiedSince, ifUnmodifiedSince);
        // TODO: test validations
    }

    /**
     * Gets the properties of the specified compute node file.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void fileGetNodeFilePropertiesFromComputeNodeTest() throws ApiException {
        String poolId = null;
        String nodeId = null;
        String fileName = null;
        String apiVersion = null;
        Integer timeout = null;
        String clientRequestId = null;
        Boolean returnClientRequestId = null;
        String ocpDate = null;
        String ifModifiedSince = null;
        String ifUnmodifiedSince = null;
        api.fileGetNodeFilePropertiesFromComputeNode(poolId, nodeId, fileName, apiVersion, timeout, clientRequestId, returnClientRequestId, ocpDate, ifModifiedSince, ifUnmodifiedSince);
        // TODO: test validations
    }

    /**
     * Gets the properties of the specified task file.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void fileGetNodeFilePropertiesFromTaskTest() throws ApiException {
        String jobId = null;
        String taskId = null;
        String fileName = null;
        String apiVersion = null;
        Integer timeout = null;
        String clientRequestId = null;
        Boolean returnClientRequestId = null;
        String ocpDate = null;
        String ifModifiedSince = null;
        String ifUnmodifiedSince = null;
        api.fileGetNodeFilePropertiesFromTask(jobId, taskId, fileName, apiVersion, timeout, clientRequestId, returnClientRequestId, ocpDate, ifModifiedSince, ifUnmodifiedSince);
        // TODO: test validations
    }

    /**
     * Lists all of the files in task directories on the specified compute node.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void fileListFromComputeNodeTest() throws ApiException {
        String poolId = null;
        String nodeId = null;
        String apiVersion = null;
        String $filter = null;
        Boolean recursive = null;
        Integer maxresults = null;
        Integer timeout = null;
        String clientRequestId = null;
        Boolean returnClientRequestId = null;
        String ocpDate = null;
        NodeFileListResult response = api.fileListFromComputeNode(poolId, nodeId, apiVersion, $filter, recursive, maxresults, timeout, clientRequestId, returnClientRequestId, ocpDate);
        // TODO: test validations
    }

    /**
     * Lists the files in a task&#39;s directory on its compute node.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void fileListFromTaskTest() throws ApiException {
        String jobId = null;
        String taskId = null;
        String apiVersion = null;
        String $filter = null;
        Boolean recursive = null;
        Integer maxresults = null;
        Integer timeout = null;
        String clientRequestId = null;
        Boolean returnClientRequestId = null;
        String ocpDate = null;
        NodeFileListResult response = api.fileListFromTask(jobId, taskId, apiVersion, $filter, recursive, maxresults, timeout, clientRequestId, returnClientRequestId, ocpDate);
        // TODO: test validations
    }

}
