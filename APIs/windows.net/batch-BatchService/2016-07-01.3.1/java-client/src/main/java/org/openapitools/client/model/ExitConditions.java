/*
 * BatchService
 * A client for issuing REST requests to the Azure Batch service.
 *
 * The version of the OpenAPI document: 2016-07-01.3.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ExitCodeMapping;
import org.openapitools.client.model.ExitCodeRangeMapping;
import org.openapitools.client.model.ExitOptions;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ExitConditions
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:59:00.212826-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ExitConditions {
  public static final String SERIALIZED_NAME_DEFAULT = "default";
  @SerializedName(SERIALIZED_NAME_DEFAULT)
  private ExitOptions _default;

  public static final String SERIALIZED_NAME_EXIT_CODE_RANGES = "exitCodeRanges";
  @SerializedName(SERIALIZED_NAME_EXIT_CODE_RANGES)
  private List<ExitCodeRangeMapping> exitCodeRanges = new ArrayList<>();

  public static final String SERIALIZED_NAME_EXIT_CODES = "exitCodes";
  @SerializedName(SERIALIZED_NAME_EXIT_CODES)
  private List<ExitCodeMapping> exitCodes = new ArrayList<>();

  public static final String SERIALIZED_NAME_SCHEDULING_ERROR = "schedulingError";
  @SerializedName(SERIALIZED_NAME_SCHEDULING_ERROR)
  private ExitOptions schedulingError;

  public ExitConditions() {
  }

  public ExitConditions _default(ExitOptions _default) {
    this._default = _default;
    return this;
  }

  /**
   * Get _default
   * @return _default
   */
  @javax.annotation.Nullable
  public ExitOptions getDefault() {
    return _default;
  }

  public void setDefault(ExitOptions _default) {
    this._default = _default;
  }


  public ExitConditions exitCodeRanges(List<ExitCodeRangeMapping> exitCodeRanges) {
    this.exitCodeRanges = exitCodeRanges;
    return this;
  }

  public ExitConditions addExitCodeRangesItem(ExitCodeRangeMapping exitCodeRangesItem) {
    if (this.exitCodeRanges == null) {
      this.exitCodeRanges = new ArrayList<>();
    }
    this.exitCodeRanges.add(exitCodeRangesItem);
    return this;
  }

  /**
   * Get exitCodeRanges
   * @return exitCodeRanges
   */
  @javax.annotation.Nullable
  public List<ExitCodeRangeMapping> getExitCodeRanges() {
    return exitCodeRanges;
  }

  public void setExitCodeRanges(List<ExitCodeRangeMapping> exitCodeRanges) {
    this.exitCodeRanges = exitCodeRanges;
  }


  public ExitConditions exitCodes(List<ExitCodeMapping> exitCodes) {
    this.exitCodes = exitCodes;
    return this;
  }

  public ExitConditions addExitCodesItem(ExitCodeMapping exitCodesItem) {
    if (this.exitCodes == null) {
      this.exitCodes = new ArrayList<>();
    }
    this.exitCodes.add(exitCodesItem);
    return this;
  }

  /**
   * Get exitCodes
   * @return exitCodes
   */
  @javax.annotation.Nullable
  public List<ExitCodeMapping> getExitCodes() {
    return exitCodes;
  }

  public void setExitCodes(List<ExitCodeMapping> exitCodes) {
    this.exitCodes = exitCodes;
  }


  public ExitConditions schedulingError(ExitOptions schedulingError) {
    this.schedulingError = schedulingError;
    return this;
  }

  /**
   * Get schedulingError
   * @return schedulingError
   */
  @javax.annotation.Nullable
  public ExitOptions getSchedulingError() {
    return schedulingError;
  }

  public void setSchedulingError(ExitOptions schedulingError) {
    this.schedulingError = schedulingError;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExitConditions exitConditions = (ExitConditions) o;
    return Objects.equals(this._default, exitConditions._default) &&
        Objects.equals(this.exitCodeRanges, exitConditions.exitCodeRanges) &&
        Objects.equals(this.exitCodes, exitConditions.exitCodes) &&
        Objects.equals(this.schedulingError, exitConditions.schedulingError);
  }

  @Override
  public int hashCode() {
    return Objects.hash(_default, exitCodeRanges, exitCodes, schedulingError);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExitConditions {\n");
    sb.append("    _default: ").append(toIndentedString(_default)).append("\n");
    sb.append("    exitCodeRanges: ").append(toIndentedString(exitCodeRanges)).append("\n");
    sb.append("    exitCodes: ").append(toIndentedString(exitCodes)).append("\n");
    sb.append("    schedulingError: ").append(toIndentedString(schedulingError)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("default");
    openapiFields.add("exitCodeRanges");
    openapiFields.add("exitCodes");
    openapiFields.add("schedulingError");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ExitConditions
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ExitConditions.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ExitConditions is not found in the empty JSON string", ExitConditions.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ExitConditions.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ExitConditions` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `default`
      if (jsonObj.get("default") != null && !jsonObj.get("default").isJsonNull()) {
        ExitOptions.validateJsonElement(jsonObj.get("default"));
      }
      if (jsonObj.get("exitCodeRanges") != null && !jsonObj.get("exitCodeRanges").isJsonNull()) {
        JsonArray jsonArrayexitCodeRanges = jsonObj.getAsJsonArray("exitCodeRanges");
        if (jsonArrayexitCodeRanges != null) {
          // ensure the json data is an array
          if (!jsonObj.get("exitCodeRanges").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `exitCodeRanges` to be an array in the JSON string but got `%s`", jsonObj.get("exitCodeRanges").toString()));
          }

          // validate the optional field `exitCodeRanges` (array)
          for (int i = 0; i < jsonArrayexitCodeRanges.size(); i++) {
            ExitCodeRangeMapping.validateJsonElement(jsonArrayexitCodeRanges.get(i));
          };
        }
      }
      if (jsonObj.get("exitCodes") != null && !jsonObj.get("exitCodes").isJsonNull()) {
        JsonArray jsonArrayexitCodes = jsonObj.getAsJsonArray("exitCodes");
        if (jsonArrayexitCodes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("exitCodes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `exitCodes` to be an array in the JSON string but got `%s`", jsonObj.get("exitCodes").toString()));
          }

          // validate the optional field `exitCodes` (array)
          for (int i = 0; i < jsonArrayexitCodes.size(); i++) {
            ExitCodeMapping.validateJsonElement(jsonArrayexitCodes.get(i));
          };
        }
      }
      // validate the optional field `schedulingError`
      if (jsonObj.get("schedulingError") != null && !jsonObj.get("schedulingError").isJsonNull()) {
        ExitOptions.validateJsonElement(jsonObj.get("schedulingError"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ExitConditions.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ExitConditions' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ExitConditions> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ExitConditions.class));

       return (TypeAdapter<T>) new TypeAdapter<ExitConditions>() {
           @Override
           public void write(JsonWriter out, ExitConditions value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ExitConditions read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ExitConditions given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ExitConditions
   * @throws IOException if the JSON string is invalid with respect to ExitConditions
   */
  public static ExitConditions fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ExitConditions.class);
  }

  /**
   * Convert an instance of ExitConditions to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

