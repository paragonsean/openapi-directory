/*
 * BatchService
 * A client for issuing REST requests to the Azure Batch service.
 *
 * The version of the OpenAPI document: 2016-07-01.3.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.DeleteCertificateError;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A certificate that can be installed on compute nodes and can be used to authenticate operations on the machine.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:59:00.212826-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Certificate {
  public static final String SERIALIZED_NAME_DELETE_CERTIFICATE_ERROR = "deleteCertificateError";
  @SerializedName(SERIALIZED_NAME_DELETE_CERTIFICATE_ERROR)
  private DeleteCertificateError deleteCertificateError;

  /**
   * This property is not set if the certificate is in its initial Active state.
   */
  @JsonAdapter(PreviousStateEnum.Adapter.class)
  public enum PreviousStateEnum {
    ACTIVE("active"),
    
    DELETING("deleting"),
    
    DELETEFAILED("deletefailed");

    private String value;

    PreviousStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PreviousStateEnum fromValue(String value) {
      for (PreviousStateEnum b : PreviousStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PreviousStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PreviousStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PreviousStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PreviousStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PreviousStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PREVIOUS_STATE = "previousState";
  @SerializedName(SERIALIZED_NAME_PREVIOUS_STATE)
  private PreviousStateEnum previousState;

  public static final String SERIALIZED_NAME_PREVIOUS_STATE_TRANSITION_TIME = "previousStateTransitionTime";
  @SerializedName(SERIALIZED_NAME_PREVIOUS_STATE_TRANSITION_TIME)
  private OffsetDateTime previousStateTransitionTime;

  public static final String SERIALIZED_NAME_PUBLIC_DATA = "publicData";
  @SerializedName(SERIALIZED_NAME_PUBLIC_DATA)
  private String publicData;

  /**
   * Gets or Sets state
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    ACTIVE("active"),
    
    DELETING("deleting"),
    
    DELETEFAILED("deletefailed");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public static final String SERIALIZED_NAME_STATE_TRANSITION_TIME = "stateTransitionTime";
  @SerializedName(SERIALIZED_NAME_STATE_TRANSITION_TIME)
  private OffsetDateTime stateTransitionTime;

  public static final String SERIALIZED_NAME_THUMBPRINT = "thumbprint";
  @SerializedName(SERIALIZED_NAME_THUMBPRINT)
  private String thumbprint;

  public static final String SERIALIZED_NAME_THUMBPRINT_ALGORITHM = "thumbprintAlgorithm";
  @SerializedName(SERIALIZED_NAME_THUMBPRINT_ALGORITHM)
  private String thumbprintAlgorithm;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public Certificate() {
  }

  public Certificate deleteCertificateError(DeleteCertificateError deleteCertificateError) {
    this.deleteCertificateError = deleteCertificateError;
    return this;
  }

  /**
   * Get deleteCertificateError
   * @return deleteCertificateError
   */
  @javax.annotation.Nullable
  public DeleteCertificateError getDeleteCertificateError() {
    return deleteCertificateError;
  }

  public void setDeleteCertificateError(DeleteCertificateError deleteCertificateError) {
    this.deleteCertificateError = deleteCertificateError;
  }


  public Certificate previousState(PreviousStateEnum previousState) {
    this.previousState = previousState;
    return this;
  }

  /**
   * This property is not set if the certificate is in its initial Active state.
   * @return previousState
   */
  @javax.annotation.Nullable
  public PreviousStateEnum getPreviousState() {
    return previousState;
  }

  public void setPreviousState(PreviousStateEnum previousState) {
    this.previousState = previousState;
  }


  public Certificate previousStateTransitionTime(OffsetDateTime previousStateTransitionTime) {
    this.previousStateTransitionTime = previousStateTransitionTime;
    return this;
  }

  /**
   * This property is not set if the certificate is in its initial Active state.
   * @return previousStateTransitionTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getPreviousStateTransitionTime() {
    return previousStateTransitionTime;
  }

  public void setPreviousStateTransitionTime(OffsetDateTime previousStateTransitionTime) {
    this.previousStateTransitionTime = previousStateTransitionTime;
  }


  public Certificate publicData(String publicData) {
    this.publicData = publicData;
    return this;
  }

  /**
   * Get publicData
   * @return publicData
   */
  @javax.annotation.Nullable
  public String getPublicData() {
    return publicData;
  }

  public void setPublicData(String publicData) {
    this.publicData = publicData;
  }


  public Certificate state(StateEnum state) {
    this.state = state;
    return this;
  }

  /**
   * Get state
   * @return state
   */
  @javax.annotation.Nullable
  public StateEnum getState() {
    return state;
  }

  public void setState(StateEnum state) {
    this.state = state;
  }


  public Certificate stateTransitionTime(OffsetDateTime stateTransitionTime) {
    this.stateTransitionTime = stateTransitionTime;
    return this;
  }

  /**
   * Get stateTransitionTime
   * @return stateTransitionTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStateTransitionTime() {
    return stateTransitionTime;
  }

  public void setStateTransitionTime(OffsetDateTime stateTransitionTime) {
    this.stateTransitionTime = stateTransitionTime;
  }


  public Certificate thumbprint(String thumbprint) {
    this.thumbprint = thumbprint;
    return this;
  }

  /**
   * Get thumbprint
   * @return thumbprint
   */
  @javax.annotation.Nullable
  public String getThumbprint() {
    return thumbprint;
  }

  public void setThumbprint(String thumbprint) {
    this.thumbprint = thumbprint;
  }


  public Certificate thumbprintAlgorithm(String thumbprintAlgorithm) {
    this.thumbprintAlgorithm = thumbprintAlgorithm;
    return this;
  }

  /**
   * Get thumbprintAlgorithm
   * @return thumbprintAlgorithm
   */
  @javax.annotation.Nullable
  public String getThumbprintAlgorithm() {
    return thumbprintAlgorithm;
  }

  public void setThumbprintAlgorithm(String thumbprintAlgorithm) {
    this.thumbprintAlgorithm = thumbprintAlgorithm;
  }


  public Certificate url(String url) {
    this.url = url;
    return this;
  }

  /**
   * Get url
   * @return url
   */
  @javax.annotation.Nullable
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Certificate certificate = (Certificate) o;
    return Objects.equals(this.deleteCertificateError, certificate.deleteCertificateError) &&
        Objects.equals(this.previousState, certificate.previousState) &&
        Objects.equals(this.previousStateTransitionTime, certificate.previousStateTransitionTime) &&
        Objects.equals(this.publicData, certificate.publicData) &&
        Objects.equals(this.state, certificate.state) &&
        Objects.equals(this.stateTransitionTime, certificate.stateTransitionTime) &&
        Objects.equals(this.thumbprint, certificate.thumbprint) &&
        Objects.equals(this.thumbprintAlgorithm, certificate.thumbprintAlgorithm) &&
        Objects.equals(this.url, certificate.url);
  }

  @Override
  public int hashCode() {
    return Objects.hash(deleteCertificateError, previousState, previousStateTransitionTime, publicData, state, stateTransitionTime, thumbprint, thumbprintAlgorithm, url);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Certificate {\n");
    sb.append("    deleteCertificateError: ").append(toIndentedString(deleteCertificateError)).append("\n");
    sb.append("    previousState: ").append(toIndentedString(previousState)).append("\n");
    sb.append("    previousStateTransitionTime: ").append(toIndentedString(previousStateTransitionTime)).append("\n");
    sb.append("    publicData: ").append(toIndentedString(publicData)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    stateTransitionTime: ").append(toIndentedString(stateTransitionTime)).append("\n");
    sb.append("    thumbprint: ").append(toIndentedString(thumbprint)).append("\n");
    sb.append("    thumbprintAlgorithm: ").append(toIndentedString(thumbprintAlgorithm)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("deleteCertificateError");
    openapiFields.add("previousState");
    openapiFields.add("previousStateTransitionTime");
    openapiFields.add("publicData");
    openapiFields.add("state");
    openapiFields.add("stateTransitionTime");
    openapiFields.add("thumbprint");
    openapiFields.add("thumbprintAlgorithm");
    openapiFields.add("url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Certificate
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Certificate.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Certificate is not found in the empty JSON string", Certificate.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Certificate.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Certificate` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `deleteCertificateError`
      if (jsonObj.get("deleteCertificateError") != null && !jsonObj.get("deleteCertificateError").isJsonNull()) {
        DeleteCertificateError.validateJsonElement(jsonObj.get("deleteCertificateError"));
      }
      if ((jsonObj.get("previousState") != null && !jsonObj.get("previousState").isJsonNull()) && !jsonObj.get("previousState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `previousState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("previousState").toString()));
      }
      // validate the optional field `previousState`
      if (jsonObj.get("previousState") != null && !jsonObj.get("previousState").isJsonNull()) {
        PreviousStateEnum.validateJsonElement(jsonObj.get("previousState"));
      }
      if ((jsonObj.get("publicData") != null && !jsonObj.get("publicData").isJsonNull()) && !jsonObj.get("publicData").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `publicData` to be a primitive type in the JSON string but got `%s`", jsonObj.get("publicData").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        StateEnum.validateJsonElement(jsonObj.get("state"));
      }
      if ((jsonObj.get("thumbprint") != null && !jsonObj.get("thumbprint").isJsonNull()) && !jsonObj.get("thumbprint").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `thumbprint` to be a primitive type in the JSON string but got `%s`", jsonObj.get("thumbprint").toString()));
      }
      if ((jsonObj.get("thumbprintAlgorithm") != null && !jsonObj.get("thumbprintAlgorithm").isJsonNull()) && !jsonObj.get("thumbprintAlgorithm").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `thumbprintAlgorithm` to be a primitive type in the JSON string but got `%s`", jsonObj.get("thumbprintAlgorithm").toString()));
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Certificate.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Certificate' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Certificate> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Certificate.class));

       return (TypeAdapter<T>) new TypeAdapter<Certificate>() {
           @Override
           public void write(JsonWriter out, Certificate value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Certificate read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Certificate given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Certificate
   * @throws IOException if the JSON string is invalid with respect to Certificate
   */
  public static Certificate fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Certificate.class);
  }

  /**
   * Convert an instance of Certificate to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

