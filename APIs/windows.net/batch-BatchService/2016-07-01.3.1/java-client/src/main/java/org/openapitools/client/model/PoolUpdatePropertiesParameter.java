/*
 * BatchService
 * A client for issuing REST requests to the Azure Batch service.
 *
 * The version of the OpenAPI document: 2016-07-01.3.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ApplicationPackageReference;
import org.openapitools.client.model.CertificateReference;
import org.openapitools.client.model.MetadataItem;
import org.openapitools.client.model.StartTask;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PoolUpdatePropertiesParameter
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:59:00.212826-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PoolUpdatePropertiesParameter {
  public static final String SERIALIZED_NAME_APPLICATION_PACKAGE_REFERENCES = "applicationPackageReferences";
  @SerializedName(SERIALIZED_NAME_APPLICATION_PACKAGE_REFERENCES)
  private List<ApplicationPackageReference> applicationPackageReferences = new ArrayList<>();

  public static final String SERIALIZED_NAME_CERTIFICATE_REFERENCES = "certificateReferences";
  @SerializedName(SERIALIZED_NAME_CERTIFICATE_REFERENCES)
  private List<CertificateReference> certificateReferences = new ArrayList<>();

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private List<MetadataItem> metadata = new ArrayList<>();

  public static final String SERIALIZED_NAME_START_TASK = "startTask";
  @SerializedName(SERIALIZED_NAME_START_TASK)
  private StartTask startTask;

  public PoolUpdatePropertiesParameter() {
  }

  public PoolUpdatePropertiesParameter applicationPackageReferences(List<ApplicationPackageReference> applicationPackageReferences) {
    this.applicationPackageReferences = applicationPackageReferences;
    return this;
  }

  public PoolUpdatePropertiesParameter addApplicationPackageReferencesItem(ApplicationPackageReference applicationPackageReferencesItem) {
    if (this.applicationPackageReferences == null) {
      this.applicationPackageReferences = new ArrayList<>();
    }
    this.applicationPackageReferences.add(applicationPackageReferencesItem);
    return this;
  }

  /**
   * Changes to application package references affect all new compute nodes joining the pool, but do not affect compute nodes that are already in the pool until they are rebooted or reimaged. The list replaces any existing application package references. If omitted, or if you specify an empty collection, any existing application packages references are removed from the pool.
   * @return applicationPackageReferences
   */
  @javax.annotation.Nonnull
  public List<ApplicationPackageReference> getApplicationPackageReferences() {
    return applicationPackageReferences;
  }

  public void setApplicationPackageReferences(List<ApplicationPackageReference> applicationPackageReferences) {
    this.applicationPackageReferences = applicationPackageReferences;
  }


  public PoolUpdatePropertiesParameter certificateReferences(List<CertificateReference> certificateReferences) {
    this.certificateReferences = certificateReferences;
    return this;
  }

  public PoolUpdatePropertiesParameter addCertificateReferencesItem(CertificateReference certificateReferencesItem) {
    if (this.certificateReferences == null) {
      this.certificateReferences = new ArrayList<>();
    }
    this.certificateReferences.add(certificateReferencesItem);
    return this;
  }

  /**
   * If you specify an empty collection, any existing certificate references are removed from the pool. For Windows compute nodes, the Batch service installs the certificates to the specified certificate store and location. For Linux compute nodes, the certificates are stored in a directory inside the task working directory and an environment variable AZ_BATCH_CERTIFICATES_DIR is supplied to the task to query for this location. For certificates with visibility of remoteuser, a certs directory is created in the user&#39;s home directory (e.g., /home/&lt;user-name&gt;/certs) where certificates are placed.
   * @return certificateReferences
   */
  @javax.annotation.Nonnull
  public List<CertificateReference> getCertificateReferences() {
    return certificateReferences;
  }

  public void setCertificateReferences(List<CertificateReference> certificateReferences) {
    this.certificateReferences = certificateReferences;
  }


  public PoolUpdatePropertiesParameter metadata(List<MetadataItem> metadata) {
    this.metadata = metadata;
    return this;
  }

  public PoolUpdatePropertiesParameter addMetadataItem(MetadataItem metadataItem) {
    if (this.metadata == null) {
      this.metadata = new ArrayList<>();
    }
    this.metadata.add(metadataItem);
    return this;
  }

  /**
   * This list replaces any existing metadata configured on the pool. If omitted, or if you specify an empty collection, any existing metadata is removed from the pool.
   * @return metadata
   */
  @javax.annotation.Nonnull
  public List<MetadataItem> getMetadata() {
    return metadata;
  }

  public void setMetadata(List<MetadataItem> metadata) {
    this.metadata = metadata;
  }


  public PoolUpdatePropertiesParameter startTask(StartTask startTask) {
    this.startTask = startTask;
    return this;
  }

  /**
   * Get startTask
   * @return startTask
   */
  @javax.annotation.Nullable
  public StartTask getStartTask() {
    return startTask;
  }

  public void setStartTask(StartTask startTask) {
    this.startTask = startTask;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PoolUpdatePropertiesParameter poolUpdatePropertiesParameter = (PoolUpdatePropertiesParameter) o;
    return Objects.equals(this.applicationPackageReferences, poolUpdatePropertiesParameter.applicationPackageReferences) &&
        Objects.equals(this.certificateReferences, poolUpdatePropertiesParameter.certificateReferences) &&
        Objects.equals(this.metadata, poolUpdatePropertiesParameter.metadata) &&
        Objects.equals(this.startTask, poolUpdatePropertiesParameter.startTask);
  }

  @Override
  public int hashCode() {
    return Objects.hash(applicationPackageReferences, certificateReferences, metadata, startTask);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PoolUpdatePropertiesParameter {\n");
    sb.append("    applicationPackageReferences: ").append(toIndentedString(applicationPackageReferences)).append("\n");
    sb.append("    certificateReferences: ").append(toIndentedString(certificateReferences)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    startTask: ").append(toIndentedString(startTask)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("applicationPackageReferences");
    openapiFields.add("certificateReferences");
    openapiFields.add("metadata");
    openapiFields.add("startTask");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("applicationPackageReferences");
    openapiRequiredFields.add("certificateReferences");
    openapiRequiredFields.add("metadata");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PoolUpdatePropertiesParameter
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PoolUpdatePropertiesParameter.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PoolUpdatePropertiesParameter is not found in the empty JSON string", PoolUpdatePropertiesParameter.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PoolUpdatePropertiesParameter.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PoolUpdatePropertiesParameter` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PoolUpdatePropertiesParameter.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the json data is an array
      if (!jsonObj.get("applicationPackageReferences").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `applicationPackageReferences` to be an array in the JSON string but got `%s`", jsonObj.get("applicationPackageReferences").toString()));
      }

      JsonArray jsonArrayapplicationPackageReferences = jsonObj.getAsJsonArray("applicationPackageReferences");
      // validate the required field `applicationPackageReferences` (array)
      for (int i = 0; i < jsonArrayapplicationPackageReferences.size(); i++) {
        ApplicationPackageReference.validateJsonElement(jsonArrayapplicationPackageReferences.get(i));
      };
      // ensure the json data is an array
      if (!jsonObj.get("certificateReferences").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `certificateReferences` to be an array in the JSON string but got `%s`", jsonObj.get("certificateReferences").toString()));
      }

      JsonArray jsonArraycertificateReferences = jsonObj.getAsJsonArray("certificateReferences");
      // validate the required field `certificateReferences` (array)
      for (int i = 0; i < jsonArraycertificateReferences.size(); i++) {
        CertificateReference.validateJsonElement(jsonArraycertificateReferences.get(i));
      };
      // ensure the json data is an array
      if (!jsonObj.get("metadata").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `metadata` to be an array in the JSON string but got `%s`", jsonObj.get("metadata").toString()));
      }

      JsonArray jsonArraymetadata = jsonObj.getAsJsonArray("metadata");
      // validate the required field `metadata` (array)
      for (int i = 0; i < jsonArraymetadata.size(); i++) {
        MetadataItem.validateJsonElement(jsonArraymetadata.get(i));
      };
      // validate the optional field `startTask`
      if (jsonObj.get("startTask") != null && !jsonObj.get("startTask").isJsonNull()) {
        StartTask.validateJsonElement(jsonObj.get("startTask"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PoolUpdatePropertiesParameter.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PoolUpdatePropertiesParameter' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PoolUpdatePropertiesParameter> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PoolUpdatePropertiesParameter.class));

       return (TypeAdapter<T>) new TypeAdapter<PoolUpdatePropertiesParameter>() {
           @Override
           public void write(JsonWriter out, PoolUpdatePropertiesParameter value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PoolUpdatePropertiesParameter read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PoolUpdatePropertiesParameter given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PoolUpdatePropertiesParameter
   * @throws IOException if the JSON string is invalid with respect to PoolUpdatePropertiesParameter
   */
  public static PoolUpdatePropertiesParameter fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PoolUpdatePropertiesParameter.class);
  }

  /**
   * Convert an instance of PoolUpdatePropertiesParameter to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

