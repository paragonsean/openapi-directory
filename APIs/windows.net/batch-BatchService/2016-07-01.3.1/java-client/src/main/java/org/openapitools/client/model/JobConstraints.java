/*
 * BatchService
 * A client for issuing REST requests to the Azure Batch service.
 *
 * The version of the OpenAPI document: 2016-07-01.3.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * JobConstraints
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:59:00.212826-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class JobConstraints {
  public static final String SERIALIZED_NAME_MAX_TASK_RETRY_COUNT = "maxTaskRetryCount";
  @SerializedName(SERIALIZED_NAME_MAX_TASK_RETRY_COUNT)
  private Integer maxTaskRetryCount;

  public static final String SERIALIZED_NAME_MAX_WALL_CLOCK_TIME = "maxWallClockTime";
  @SerializedName(SERIALIZED_NAME_MAX_WALL_CLOCK_TIME)
  private String maxWallClockTime;

  public JobConstraints() {
  }

  public JobConstraints maxTaskRetryCount(Integer maxTaskRetryCount) {
    this.maxTaskRetryCount = maxTaskRetryCount;
    return this;
  }

  /**
   * Note that this value specifically controls the number of retries. The Batch service will try each task once, and may then retry up to this limit. For example, if the maximum retry count is 3, Batch tries a task up to 4 times (one initial try and 3 retries). If the maximum retry count is 0, the Batch service does not retry tasks. If the maximum retry count is -1, the Batch service retries tasks without limit. The default value is 0 (no retries).
   * @return maxTaskRetryCount
   */
  @javax.annotation.Nullable
  public Integer getMaxTaskRetryCount() {
    return maxTaskRetryCount;
  }

  public void setMaxTaskRetryCount(Integer maxTaskRetryCount) {
    this.maxTaskRetryCount = maxTaskRetryCount;
  }


  public JobConstraints maxWallClockTime(String maxWallClockTime) {
    this.maxWallClockTime = maxWallClockTime;
    return this;
  }

  /**
   * If the job does not complete within the time limit, the Batch service terminates it and any tasks that are still running. In this case, the termination reason will be MaxWallClockTimeExpiry. If this property is not specified, there is no time limit on how long the job may run.
   * @return maxWallClockTime
   */
  @javax.annotation.Nullable
  public String getMaxWallClockTime() {
    return maxWallClockTime;
  }

  public void setMaxWallClockTime(String maxWallClockTime) {
    this.maxWallClockTime = maxWallClockTime;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    JobConstraints jobConstraints = (JobConstraints) o;
    return Objects.equals(this.maxTaskRetryCount, jobConstraints.maxTaskRetryCount) &&
        Objects.equals(this.maxWallClockTime, jobConstraints.maxWallClockTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(maxTaskRetryCount, maxWallClockTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class JobConstraints {\n");
    sb.append("    maxTaskRetryCount: ").append(toIndentedString(maxTaskRetryCount)).append("\n");
    sb.append("    maxWallClockTime: ").append(toIndentedString(maxWallClockTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("maxTaskRetryCount");
    openapiFields.add("maxWallClockTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to JobConstraints
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!JobConstraints.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in JobConstraints is not found in the empty JSON string", JobConstraints.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!JobConstraints.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `JobConstraints` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("maxWallClockTime") != null && !jsonObj.get("maxWallClockTime").isJsonNull()) && !jsonObj.get("maxWallClockTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `maxWallClockTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("maxWallClockTime").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!JobConstraints.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'JobConstraints' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<JobConstraints> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(JobConstraints.class));

       return (TypeAdapter<T>) new TypeAdapter<JobConstraints>() {
           @Override
           public void write(JsonWriter out, JobConstraints value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public JobConstraints read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of JobConstraints given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of JobConstraints
   * @throws IOException if the JSON string is invalid with respect to JobConstraints
   */
  public static JobConstraints fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, JobConstraints.class);
  }

  /**
   * Convert an instance of JobConstraints to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

