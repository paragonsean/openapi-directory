# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.image_reference import ImageReference
from openapi_server import util


class NodeAgentSku(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, os_type: str=None, verified_image_references: List[ImageReference]=None):
        """NodeAgentSku - a model defined in OpenAPI

        :param id: The id of this NodeAgentSku.
        :param os_type: The os_type of this NodeAgentSku.
        :param verified_image_references: The verified_image_references of this NodeAgentSku.
        """
        self.openapi_types = {
            'id': str,
            'os_type': str,
            'verified_image_references': List[ImageReference]
        }

        self.attribute_map = {
            'id': 'id',
            'os_type': 'osType',
            'verified_image_references': 'verifiedImageReferences'
        }

        self._id = id
        self._os_type = os_type
        self._verified_image_references = verified_image_references

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NodeAgentSku':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NodeAgentSku of this NodeAgentSku.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this NodeAgentSku.


        :return: The id of this NodeAgentSku.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this NodeAgentSku.


        :param id: The id of this NodeAgentSku.
        :type id: str
        """

        self._id = id

    @property
    def os_type(self):
        """Gets the os_type of this NodeAgentSku.


        :return: The os_type of this NodeAgentSku.
        :rtype: str
        """
        return self._os_type

    @os_type.setter
    def os_type(self, os_type):
        """Sets the os_type of this NodeAgentSku.


        :param os_type: The os_type of this NodeAgentSku.
        :type os_type: str
        """
        allowed_values = ["linux", "windows", "unmapped"]  # noqa: E501
        if os_type not in allowed_values:
            raise ValueError(
                "Invalid value for `os_type` ({0}), must be one of {1}"
                .format(os_type, allowed_values)
            )

        self._os_type = os_type

    @property
    def verified_image_references(self):
        """Gets the verified_image_references of this NodeAgentSku.

        This collection is not exhaustive (the node agent may be compatible with other images).

        :return: The verified_image_references of this NodeAgentSku.
        :rtype: List[ImageReference]
        """
        return self._verified_image_references

    @verified_image_references.setter
    def verified_image_references(self, verified_image_references):
        """Sets the verified_image_references of this NodeAgentSku.

        This collection is not exhaustive (the node agent may be compatible with other images).

        :param verified_image_references: The verified_image_references of this NodeAgentSku.
        :type verified_image_references: List[ImageReference]
        """

        self._verified_image_references = verified_image_references
