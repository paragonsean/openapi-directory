# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.affinity_information import AffinityInformation
from openapi_server.models.application_package_reference import ApplicationPackageReference
from openapi_server.models.compute_node_information import ComputeNodeInformation
from openapi_server.models.environment_setting import EnvironmentSetting
from openapi_server.models.exit_conditions import ExitConditions
from openapi_server.models.multi_instance_settings import MultiInstanceSettings
from openapi_server.models.resource_file import ResourceFile
from openapi_server.models.task_constraints import TaskConstraints
from openapi_server.models.task_dependencies import TaskDependencies
from openapi_server.models.task_execution_information import TaskExecutionInformation
from openapi_server.models.task_statistics import TaskStatistics
from openapi_server import util


class CloudTask(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, affinity_info: AffinityInformation=None, application_package_references: List[ApplicationPackageReference]=None, command_line: str=None, constraints: TaskConstraints=None, creation_time: datetime=None, depends_on: TaskDependencies=None, display_name: str=None, e_tag: str=None, environment_settings: List[EnvironmentSetting]=None, execution_info: TaskExecutionInformation=None, exit_conditions: ExitConditions=None, id: str=None, last_modified: datetime=None, multi_instance_settings: MultiInstanceSettings=None, node_info: ComputeNodeInformation=None, previous_state: str=None, previous_state_transition_time: datetime=None, resource_files: List[ResourceFile]=None, run_elevated: bool=None, state: str=None, state_transition_time: datetime=None, stats: TaskStatistics=None, url: str=None):
        """CloudTask - a model defined in OpenAPI

        :param affinity_info: The affinity_info of this CloudTask.
        :param application_package_references: The application_package_references of this CloudTask.
        :param command_line: The command_line of this CloudTask.
        :param constraints: The constraints of this CloudTask.
        :param creation_time: The creation_time of this CloudTask.
        :param depends_on: The depends_on of this CloudTask.
        :param display_name: The display_name of this CloudTask.
        :param e_tag: The e_tag of this CloudTask.
        :param environment_settings: The environment_settings of this CloudTask.
        :param execution_info: The execution_info of this CloudTask.
        :param exit_conditions: The exit_conditions of this CloudTask.
        :param id: The id of this CloudTask.
        :param last_modified: The last_modified of this CloudTask.
        :param multi_instance_settings: The multi_instance_settings of this CloudTask.
        :param node_info: The node_info of this CloudTask.
        :param previous_state: The previous_state of this CloudTask.
        :param previous_state_transition_time: The previous_state_transition_time of this CloudTask.
        :param resource_files: The resource_files of this CloudTask.
        :param run_elevated: The run_elevated of this CloudTask.
        :param state: The state of this CloudTask.
        :param state_transition_time: The state_transition_time of this CloudTask.
        :param stats: The stats of this CloudTask.
        :param url: The url of this CloudTask.
        """
        self.openapi_types = {
            'affinity_info': AffinityInformation,
            'application_package_references': List[ApplicationPackageReference],
            'command_line': str,
            'constraints': TaskConstraints,
            'creation_time': datetime,
            'depends_on': TaskDependencies,
            'display_name': str,
            'e_tag': str,
            'environment_settings': List[EnvironmentSetting],
            'execution_info': TaskExecutionInformation,
            'exit_conditions': ExitConditions,
            'id': str,
            'last_modified': datetime,
            'multi_instance_settings': MultiInstanceSettings,
            'node_info': ComputeNodeInformation,
            'previous_state': str,
            'previous_state_transition_time': datetime,
            'resource_files': List[ResourceFile],
            'run_elevated': bool,
            'state': str,
            'state_transition_time': datetime,
            'stats': TaskStatistics,
            'url': str
        }

        self.attribute_map = {
            'affinity_info': 'affinityInfo',
            'application_package_references': 'applicationPackageReferences',
            'command_line': 'commandLine',
            'constraints': 'constraints',
            'creation_time': 'creationTime',
            'depends_on': 'dependsOn',
            'display_name': 'displayName',
            'e_tag': 'eTag',
            'environment_settings': 'environmentSettings',
            'execution_info': 'executionInfo',
            'exit_conditions': 'exitConditions',
            'id': 'id',
            'last_modified': 'lastModified',
            'multi_instance_settings': 'multiInstanceSettings',
            'node_info': 'nodeInfo',
            'previous_state': 'previousState',
            'previous_state_transition_time': 'previousStateTransitionTime',
            'resource_files': 'resourceFiles',
            'run_elevated': 'runElevated',
            'state': 'state',
            'state_transition_time': 'stateTransitionTime',
            'stats': 'stats',
            'url': 'url'
        }

        self._affinity_info = affinity_info
        self._application_package_references = application_package_references
        self._command_line = command_line
        self._constraints = constraints
        self._creation_time = creation_time
        self._depends_on = depends_on
        self._display_name = display_name
        self._e_tag = e_tag
        self._environment_settings = environment_settings
        self._execution_info = execution_info
        self._exit_conditions = exit_conditions
        self._id = id
        self._last_modified = last_modified
        self._multi_instance_settings = multi_instance_settings
        self._node_info = node_info
        self._previous_state = previous_state
        self._previous_state_transition_time = previous_state_transition_time
        self._resource_files = resource_files
        self._run_elevated = run_elevated
        self._state = state
        self._state_transition_time = state_transition_time
        self._stats = stats
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CloudTask':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CloudTask of this CloudTask.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def affinity_info(self):
        """Gets the affinity_info of this CloudTask.


        :return: The affinity_info of this CloudTask.
        :rtype: AffinityInformation
        """
        return self._affinity_info

    @affinity_info.setter
    def affinity_info(self, affinity_info):
        """Sets the affinity_info of this CloudTask.


        :param affinity_info: The affinity_info of this CloudTask.
        :type affinity_info: AffinityInformation
        """

        self._affinity_info = affinity_info

    @property
    def application_package_references(self):
        """Gets the application_package_references of this CloudTask.


        :return: The application_package_references of this CloudTask.
        :rtype: List[ApplicationPackageReference]
        """
        return self._application_package_references

    @application_package_references.setter
    def application_package_references(self, application_package_references):
        """Sets the application_package_references of this CloudTask.


        :param application_package_references: The application_package_references of this CloudTask.
        :type application_package_references: List[ApplicationPackageReference]
        """

        self._application_package_references = application_package_references

    @property
    def command_line(self):
        """Gets the command_line of this CloudTask.

        For multi-instance tasks, the command line is executed as the primary task, after the primary task and all subtasks have finished executing the coordination command line. The command line does not run under a shell, and therefore cannot take advantage of shell features such as environment variable expansion. If you want to take advantage of such features, you should invoke the shell in the command line, for example using \"cmd /c MyCommand\" in Windows or \"/bin/sh -c MyCommand\" in Linux.

        :return: The command_line of this CloudTask.
        :rtype: str
        """
        return self._command_line

    @command_line.setter
    def command_line(self, command_line):
        """Sets the command_line of this CloudTask.

        For multi-instance tasks, the command line is executed as the primary task, after the primary task and all subtasks have finished executing the coordination command line. The command line does not run under a shell, and therefore cannot take advantage of shell features such as environment variable expansion. If you want to take advantage of such features, you should invoke the shell in the command line, for example using \"cmd /c MyCommand\" in Windows or \"/bin/sh -c MyCommand\" in Linux.

        :param command_line: The command_line of this CloudTask.
        :type command_line: str
        """

        self._command_line = command_line

    @property
    def constraints(self):
        """Gets the constraints of this CloudTask.


        :return: The constraints of this CloudTask.
        :rtype: TaskConstraints
        """
        return self._constraints

    @constraints.setter
    def constraints(self, constraints):
        """Sets the constraints of this CloudTask.


        :param constraints: The constraints of this CloudTask.
        :type constraints: TaskConstraints
        """

        self._constraints = constraints

    @property
    def creation_time(self):
        """Gets the creation_time of this CloudTask.


        :return: The creation_time of this CloudTask.
        :rtype: datetime
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this CloudTask.


        :param creation_time: The creation_time of this CloudTask.
        :type creation_time: datetime
        """

        self._creation_time = creation_time

    @property
    def depends_on(self):
        """Gets the depends_on of this CloudTask.


        :return: The depends_on of this CloudTask.
        :rtype: TaskDependencies
        """
        return self._depends_on

    @depends_on.setter
    def depends_on(self, depends_on):
        """Sets the depends_on of this CloudTask.


        :param depends_on: The depends_on of this CloudTask.
        :type depends_on: TaskDependencies
        """

        self._depends_on = depends_on

    @property
    def display_name(self):
        """Gets the display_name of this CloudTask.

        The display name need not be unique and can contain any Unicode characters up to a maximum length of 1024.

        :return: The display_name of this CloudTask.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this CloudTask.

        The display name need not be unique and can contain any Unicode characters up to a maximum length of 1024.

        :param display_name: The display_name of this CloudTask.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def e_tag(self):
        """Gets the e_tag of this CloudTask.

        This is an opaque string. You can use it to detect whether the task has changed between requests. In particular, you can be pass the ETag when updating a task to specify that your changes should take effect only if nobody else has modified the task in the meantime.

        :return: The e_tag of this CloudTask.
        :rtype: str
        """
        return self._e_tag

    @e_tag.setter
    def e_tag(self, e_tag):
        """Sets the e_tag of this CloudTask.

        This is an opaque string. You can use it to detect whether the task has changed between requests. In particular, you can be pass the ETag when updating a task to specify that your changes should take effect only if nobody else has modified the task in the meantime.

        :param e_tag: The e_tag of this CloudTask.
        :type e_tag: str
        """

        self._e_tag = e_tag

    @property
    def environment_settings(self):
        """Gets the environment_settings of this CloudTask.


        :return: The environment_settings of this CloudTask.
        :rtype: List[EnvironmentSetting]
        """
        return self._environment_settings

    @environment_settings.setter
    def environment_settings(self, environment_settings):
        """Sets the environment_settings of this CloudTask.


        :param environment_settings: The environment_settings of this CloudTask.
        :type environment_settings: List[EnvironmentSetting]
        """

        self._environment_settings = environment_settings

    @property
    def execution_info(self):
        """Gets the execution_info of this CloudTask.


        :return: The execution_info of this CloudTask.
        :rtype: TaskExecutionInformation
        """
        return self._execution_info

    @execution_info.setter
    def execution_info(self, execution_info):
        """Sets the execution_info of this CloudTask.


        :param execution_info: The execution_info of this CloudTask.
        :type execution_info: TaskExecutionInformation
        """

        self._execution_info = execution_info

    @property
    def exit_conditions(self):
        """Gets the exit_conditions of this CloudTask.


        :return: The exit_conditions of this CloudTask.
        :rtype: ExitConditions
        """
        return self._exit_conditions

    @exit_conditions.setter
    def exit_conditions(self, exit_conditions):
        """Sets the exit_conditions of this CloudTask.


        :param exit_conditions: The exit_conditions of this CloudTask.
        :type exit_conditions: ExitConditions
        """

        self._exit_conditions = exit_conditions

    @property
    def id(self):
        """Gets the id of this CloudTask.

        The ID can contain any combination of alphanumeric characters including hyphens and underscores, and cannot contain more than 64 characters.

        :return: The id of this CloudTask.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CloudTask.

        The ID can contain any combination of alphanumeric characters including hyphens and underscores, and cannot contain more than 64 characters.

        :param id: The id of this CloudTask.
        :type id: str
        """

        self._id = id

    @property
    def last_modified(self):
        """Gets the last_modified of this CloudTask.


        :return: The last_modified of this CloudTask.
        :rtype: datetime
        """
        return self._last_modified

    @last_modified.setter
    def last_modified(self, last_modified):
        """Sets the last_modified of this CloudTask.


        :param last_modified: The last_modified of this CloudTask.
        :type last_modified: datetime
        """

        self._last_modified = last_modified

    @property
    def multi_instance_settings(self):
        """Gets the multi_instance_settings of this CloudTask.


        :return: The multi_instance_settings of this CloudTask.
        :rtype: MultiInstanceSettings
        """
        return self._multi_instance_settings

    @multi_instance_settings.setter
    def multi_instance_settings(self, multi_instance_settings):
        """Sets the multi_instance_settings of this CloudTask.


        :param multi_instance_settings: The multi_instance_settings of this CloudTask.
        :type multi_instance_settings: MultiInstanceSettings
        """

        self._multi_instance_settings = multi_instance_settings

    @property
    def node_info(self):
        """Gets the node_info of this CloudTask.


        :return: The node_info of this CloudTask.
        :rtype: ComputeNodeInformation
        """
        return self._node_info

    @node_info.setter
    def node_info(self, node_info):
        """Sets the node_info of this CloudTask.


        :param node_info: The node_info of this CloudTask.
        :type node_info: ComputeNodeInformation
        """

        self._node_info = node_info

    @property
    def previous_state(self):
        """Gets the previous_state of this CloudTask.

        This property is not set if the task is in its initial Active state.

        :return: The previous_state of this CloudTask.
        :rtype: str
        """
        return self._previous_state

    @previous_state.setter
    def previous_state(self, previous_state):
        """Sets the previous_state of this CloudTask.

        This property is not set if the task is in its initial Active state.

        :param previous_state: The previous_state of this CloudTask.
        :type previous_state: str
        """
        allowed_values = ["active", "preparing", "running", "completed"]  # noqa: E501
        if previous_state not in allowed_values:
            raise ValueError(
                "Invalid value for `previous_state` ({0}), must be one of {1}"
                .format(previous_state, allowed_values)
            )

        self._previous_state = previous_state

    @property
    def previous_state_transition_time(self):
        """Gets the previous_state_transition_time of this CloudTask.

        This property is not set if the task is in its initial Active state.

        :return: The previous_state_transition_time of this CloudTask.
        :rtype: datetime
        """
        return self._previous_state_transition_time

    @previous_state_transition_time.setter
    def previous_state_transition_time(self, previous_state_transition_time):
        """Sets the previous_state_transition_time of this CloudTask.

        This property is not set if the task is in its initial Active state.

        :param previous_state_transition_time: The previous_state_transition_time of this CloudTask.
        :type previous_state_transition_time: datetime
        """

        self._previous_state_transition_time = previous_state_transition_time

    @property
    def resource_files(self):
        """Gets the resource_files of this CloudTask.

        For multi-instance tasks, the resource files will only be downloaded to the compute node on which the primary task is executed.

        :return: The resource_files of this CloudTask.
        :rtype: List[ResourceFile]
        """
        return self._resource_files

    @resource_files.setter
    def resource_files(self, resource_files):
        """Sets the resource_files of this CloudTask.

        For multi-instance tasks, the resource files will only be downloaded to the compute node on which the primary task is executed.

        :param resource_files: The resource_files of this CloudTask.
        :type resource_files: List[ResourceFile]
        """

        self._resource_files = resource_files

    @property
    def run_elevated(self):
        """Gets the run_elevated of this CloudTask.


        :return: The run_elevated of this CloudTask.
        :rtype: bool
        """
        return self._run_elevated

    @run_elevated.setter
    def run_elevated(self, run_elevated):
        """Sets the run_elevated of this CloudTask.


        :param run_elevated: The run_elevated of this CloudTask.
        :type run_elevated: bool
        """

        self._run_elevated = run_elevated

    @property
    def state(self):
        """Gets the state of this CloudTask.


        :return: The state of this CloudTask.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this CloudTask.


        :param state: The state of this CloudTask.
        :type state: str
        """
        allowed_values = ["active", "preparing", "running", "completed"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def state_transition_time(self):
        """Gets the state_transition_time of this CloudTask.


        :return: The state_transition_time of this CloudTask.
        :rtype: datetime
        """
        return self._state_transition_time

    @state_transition_time.setter
    def state_transition_time(self, state_transition_time):
        """Sets the state_transition_time of this CloudTask.


        :param state_transition_time: The state_transition_time of this CloudTask.
        :type state_transition_time: datetime
        """

        self._state_transition_time = state_transition_time

    @property
    def stats(self):
        """Gets the stats of this CloudTask.


        :return: The stats of this CloudTask.
        :rtype: TaskStatistics
        """
        return self._stats

    @stats.setter
    def stats(self, stats):
        """Sets the stats of this CloudTask.


        :param stats: The stats of this CloudTask.
        :type stats: TaskStatistics
        """

        self._stats = stats

    @property
    def url(self):
        """Gets the url of this CloudTask.


        :return: The url of this CloudTask.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this CloudTask.


        :param url: The url of this CloudTask.
        :type url: str
        """

        self._url = url
