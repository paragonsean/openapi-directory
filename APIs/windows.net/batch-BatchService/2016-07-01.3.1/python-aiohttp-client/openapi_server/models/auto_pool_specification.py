# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.pool_specification import PoolSpecification
from openapi_server import util


class AutoPoolSpecification(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, auto_pool_id_prefix: str=None, keep_alive: bool=None, pool: PoolSpecification=None, pool_lifetime_option: str=None):
        """AutoPoolSpecification - a model defined in OpenAPI

        :param auto_pool_id_prefix: The auto_pool_id_prefix of this AutoPoolSpecification.
        :param keep_alive: The keep_alive of this AutoPoolSpecification.
        :param pool: The pool of this AutoPoolSpecification.
        :param pool_lifetime_option: The pool_lifetime_option of this AutoPoolSpecification.
        """
        self.openapi_types = {
            'auto_pool_id_prefix': str,
            'keep_alive': bool,
            'pool': PoolSpecification,
            'pool_lifetime_option': str
        }

        self.attribute_map = {
            'auto_pool_id_prefix': 'autoPoolIdPrefix',
            'keep_alive': 'keepAlive',
            'pool': 'pool',
            'pool_lifetime_option': 'poolLifetimeOption'
        }

        self._auto_pool_id_prefix = auto_pool_id_prefix
        self._keep_alive = keep_alive
        self._pool = pool
        self._pool_lifetime_option = pool_lifetime_option

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AutoPoolSpecification':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AutoPoolSpecification of this AutoPoolSpecification.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def auto_pool_id_prefix(self):
        """Gets the auto_pool_id_prefix of this AutoPoolSpecification.

        The Batch service assigns each auto pool a unique identifier on creation. To distinguish between pools created for different purposes, you can specify this element to add a prefix to the id that is assigned. The prefix can be up to 20 characters long.

        :return: The auto_pool_id_prefix of this AutoPoolSpecification.
        :rtype: str
        """
        return self._auto_pool_id_prefix

    @auto_pool_id_prefix.setter
    def auto_pool_id_prefix(self, auto_pool_id_prefix):
        """Sets the auto_pool_id_prefix of this AutoPoolSpecification.

        The Batch service assigns each auto pool a unique identifier on creation. To distinguish between pools created for different purposes, you can specify this element to add a prefix to the id that is assigned. The prefix can be up to 20 characters long.

        :param auto_pool_id_prefix: The auto_pool_id_prefix of this AutoPoolSpecification.
        :type auto_pool_id_prefix: str
        """

        self._auto_pool_id_prefix = auto_pool_id_prefix

    @property
    def keep_alive(self):
        """Gets the keep_alive of this AutoPoolSpecification.

        If false, the Batch service deletes the pool once its lifetime (as determined by the poolLifetimeOption setting) expires; that is, when the job or job schedule completes. If true, the Batch service does not delete the pool automatically. It is up to the user to delete auto pools created with this option.

        :return: The keep_alive of this AutoPoolSpecification.
        :rtype: bool
        """
        return self._keep_alive

    @keep_alive.setter
    def keep_alive(self, keep_alive):
        """Sets the keep_alive of this AutoPoolSpecification.

        If false, the Batch service deletes the pool once its lifetime (as determined by the poolLifetimeOption setting) expires; that is, when the job or job schedule completes. If true, the Batch service does not delete the pool automatically. It is up to the user to delete auto pools created with this option.

        :param keep_alive: The keep_alive of this AutoPoolSpecification.
        :type keep_alive: bool
        """

        self._keep_alive = keep_alive

    @property
    def pool(self):
        """Gets the pool of this AutoPoolSpecification.


        :return: The pool of this AutoPoolSpecification.
        :rtype: PoolSpecification
        """
        return self._pool

    @pool.setter
    def pool(self, pool):
        """Sets the pool of this AutoPoolSpecification.


        :param pool: The pool of this AutoPoolSpecification.
        :type pool: PoolSpecification
        """

        self._pool = pool

    @property
    def pool_lifetime_option(self):
        """Gets the pool_lifetime_option of this AutoPoolSpecification.

        When the pool lifetime scope is jobschedule level, the Batch service keeps track of the last autopool created for the jobschedule, and deletes that pool when the jobschedule completes. Batch will also delete this pool if the user updates the auto pool specification in a way that changes this lifetime.

        :return: The pool_lifetime_option of this AutoPoolSpecification.
        :rtype: str
        """
        return self._pool_lifetime_option

    @pool_lifetime_option.setter
    def pool_lifetime_option(self, pool_lifetime_option):
        """Sets the pool_lifetime_option of this AutoPoolSpecification.

        When the pool lifetime scope is jobschedule level, the Batch service keeps track of the last autopool created for the jobschedule, and deletes that pool when the jobschedule completes. Batch will also delete this pool if the user updates the auto pool specification in a way that changes this lifetime.

        :param pool_lifetime_option: The pool_lifetime_option of this AutoPoolSpecification.
        :type pool_lifetime_option: str
        """
        allowed_values = ["jobschedule", "job", "unmapped"]  # noqa: E501
        if pool_lifetime_option not in allowed_values:
            raise ValueError(
                "Invalid value for `pool_lifetime_option` ({0}), must be one of {1}"
                .format(pool_lifetime_option, allowed_values)
            )

        self._pool_lifetime_option = pool_lifetime_option
