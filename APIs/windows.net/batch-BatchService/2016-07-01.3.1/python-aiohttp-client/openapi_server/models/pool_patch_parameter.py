# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.application_package_reference import ApplicationPackageReference
from openapi_server.models.certificate_reference import CertificateReference
from openapi_server.models.metadata_item import MetadataItem
from openapi_server.models.start_task import StartTask
from openapi_server import util


class PoolPatchParameter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, application_package_references: List[ApplicationPackageReference]=None, certificate_references: List[CertificateReference]=None, metadata: List[MetadataItem]=None, start_task: StartTask=None):
        """PoolPatchParameter - a model defined in OpenAPI

        :param application_package_references: The application_package_references of this PoolPatchParameter.
        :param certificate_references: The certificate_references of this PoolPatchParameter.
        :param metadata: The metadata of this PoolPatchParameter.
        :param start_task: The start_task of this PoolPatchParameter.
        """
        self.openapi_types = {
            'application_package_references': List[ApplicationPackageReference],
            'certificate_references': List[CertificateReference],
            'metadata': List[MetadataItem],
            'start_task': StartTask
        }

        self.attribute_map = {
            'application_package_references': 'applicationPackageReferences',
            'certificate_references': 'certificateReferences',
            'metadata': 'metadata',
            'start_task': 'startTask'
        }

        self._application_package_references = application_package_references
        self._certificate_references = certificate_references
        self._metadata = metadata
        self._start_task = start_task

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PoolPatchParameter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PoolPatchParameter of this PoolPatchParameter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def application_package_references(self):
        """Gets the application_package_references of this PoolPatchParameter.

        Changes to application package references affect all new compute nodes joining the pool, but do not affect compute nodes that are already in the pool until they are rebooted or reimaged. If this element is present, it replaces any existing application package references. If you specify an empty collection, then all application package references are removed from the pool. If omitted, any existing application package references are left unchanged.

        :return: The application_package_references of this PoolPatchParameter.
        :rtype: List[ApplicationPackageReference]
        """
        return self._application_package_references

    @application_package_references.setter
    def application_package_references(self, application_package_references):
        """Sets the application_package_references of this PoolPatchParameter.

        Changes to application package references affect all new compute nodes joining the pool, but do not affect compute nodes that are already in the pool until they are rebooted or reimaged. If this element is present, it replaces any existing application package references. If you specify an empty collection, then all application package references are removed from the pool. If omitted, any existing application package references are left unchanged.

        :param application_package_references: The application_package_references of this PoolPatchParameter.
        :type application_package_references: List[ApplicationPackageReference]
        """

        self._application_package_references = application_package_references

    @property
    def certificate_references(self):
        """Gets the certificate_references of this PoolPatchParameter.

        If omitted, any existing certificate references are left unchanged. For Windows compute nodes, the Batch service installs the certificates to the specified certificate store and location. For Linux compute nodes, the certificates are stored in a directory inside the task working directory and an environment variable AZ_BATCH_CERTIFICATES_DIR is supplied to the task to query for this location. For certificates with visibility of remoteuser, a certs directory is created in the user's home directory (e.g., /home/<user-name>/certs) where certificates are placed.

        :return: The certificate_references of this PoolPatchParameter.
        :rtype: List[CertificateReference]
        """
        return self._certificate_references

    @certificate_references.setter
    def certificate_references(self, certificate_references):
        """Sets the certificate_references of this PoolPatchParameter.

        If omitted, any existing certificate references are left unchanged. For Windows compute nodes, the Batch service installs the certificates to the specified certificate store and location. For Linux compute nodes, the certificates are stored in a directory inside the task working directory and an environment variable AZ_BATCH_CERTIFICATES_DIR is supplied to the task to query for this location. For certificates with visibility of remoteuser, a certs directory is created in the user's home directory (e.g., /home/<user-name>/certs) where certificates are placed.

        :param certificate_references: The certificate_references of this PoolPatchParameter.
        :type certificate_references: List[CertificateReference]
        """

        self._certificate_references = certificate_references

    @property
    def metadata(self):
        """Gets the metadata of this PoolPatchParameter.

        If this element is present, it replaces any existing metadata configured on the pool. If you specify an empty collection, any metadata is removed from the pool. If omitted, any existing metadata is left unchanged.

        :return: The metadata of this PoolPatchParameter.
        :rtype: List[MetadataItem]
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this PoolPatchParameter.

        If this element is present, it replaces any existing metadata configured on the pool. If you specify an empty collection, any metadata is removed from the pool. If omitted, any existing metadata is left unchanged.

        :param metadata: The metadata of this PoolPatchParameter.
        :type metadata: List[MetadataItem]
        """

        self._metadata = metadata

    @property
    def start_task(self):
        """Gets the start_task of this PoolPatchParameter.


        :return: The start_task of this PoolPatchParameter.
        :rtype: StartTask
        """
        return self._start_task

    @start_task.setter
    def start_task(self, start_task):
        """Sets the start_task of this PoolPatchParameter.


        :param start_task: The start_task of this PoolPatchParameter.
        :type start_task: StartTask
        """

        self._start_task = start_task
