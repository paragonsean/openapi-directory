# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.application_package_reference import ApplicationPackageReference
from openapi_server.models.auto_scale_run import AutoScaleRun
from openapi_server.models.certificate_reference import CertificateReference
from openapi_server.models.cloud_service_configuration import CloudServiceConfiguration
from openapi_server.models.metadata_item import MetadataItem
from openapi_server.models.network_configuration import NetworkConfiguration
from openapi_server.models.pool_statistics import PoolStatistics
from openapi_server.models.resize_error import ResizeError
from openapi_server.models.start_task import StartTask
from openapi_server.models.task_scheduling_policy import TaskSchedulingPolicy
from openapi_server.models.virtual_machine_configuration import VirtualMachineConfiguration
from openapi_server import util


class CloudPool(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allocation_state: str=None, allocation_state_transition_time: datetime=None, application_package_references: List[ApplicationPackageReference]=None, auto_scale_evaluation_interval: str=None, auto_scale_formula: str=None, auto_scale_run: AutoScaleRun=None, certificate_references: List[CertificateReference]=None, cloud_service_configuration: CloudServiceConfiguration=None, creation_time: datetime=None, current_dedicated: int=None, display_name: str=None, e_tag: str=None, enable_auto_scale: bool=None, enable_inter_node_communication: bool=None, id: str=None, last_modified: datetime=None, max_tasks_per_node: int=None, metadata: List[MetadataItem]=None, network_configuration: NetworkConfiguration=None, resize_error: ResizeError=None, resize_timeout: str=None, start_task: StartTask=None, state: str=None, state_transition_time: datetime=None, stats: PoolStatistics=None, target_dedicated: int=None, task_scheduling_policy: TaskSchedulingPolicy=None, url: str=None, virtual_machine_configuration: VirtualMachineConfiguration=None, vm_size: str=None):
        """CloudPool - a model defined in OpenAPI

        :param allocation_state: The allocation_state of this CloudPool.
        :param allocation_state_transition_time: The allocation_state_transition_time of this CloudPool.
        :param application_package_references: The application_package_references of this CloudPool.
        :param auto_scale_evaluation_interval: The auto_scale_evaluation_interval of this CloudPool.
        :param auto_scale_formula: The auto_scale_formula of this CloudPool.
        :param auto_scale_run: The auto_scale_run of this CloudPool.
        :param certificate_references: The certificate_references of this CloudPool.
        :param cloud_service_configuration: The cloud_service_configuration of this CloudPool.
        :param creation_time: The creation_time of this CloudPool.
        :param current_dedicated: The current_dedicated of this CloudPool.
        :param display_name: The display_name of this CloudPool.
        :param e_tag: The e_tag of this CloudPool.
        :param enable_auto_scale: The enable_auto_scale of this CloudPool.
        :param enable_inter_node_communication: The enable_inter_node_communication of this CloudPool.
        :param id: The id of this CloudPool.
        :param last_modified: The last_modified of this CloudPool.
        :param max_tasks_per_node: The max_tasks_per_node of this CloudPool.
        :param metadata: The metadata of this CloudPool.
        :param network_configuration: The network_configuration of this CloudPool.
        :param resize_error: The resize_error of this CloudPool.
        :param resize_timeout: The resize_timeout of this CloudPool.
        :param start_task: The start_task of this CloudPool.
        :param state: The state of this CloudPool.
        :param state_transition_time: The state_transition_time of this CloudPool.
        :param stats: The stats of this CloudPool.
        :param target_dedicated: The target_dedicated of this CloudPool.
        :param task_scheduling_policy: The task_scheduling_policy of this CloudPool.
        :param url: The url of this CloudPool.
        :param virtual_machine_configuration: The virtual_machine_configuration of this CloudPool.
        :param vm_size: The vm_size of this CloudPool.
        """
        self.openapi_types = {
            'allocation_state': str,
            'allocation_state_transition_time': datetime,
            'application_package_references': List[ApplicationPackageReference],
            'auto_scale_evaluation_interval': str,
            'auto_scale_formula': str,
            'auto_scale_run': AutoScaleRun,
            'certificate_references': List[CertificateReference],
            'cloud_service_configuration': CloudServiceConfiguration,
            'creation_time': datetime,
            'current_dedicated': int,
            'display_name': str,
            'e_tag': str,
            'enable_auto_scale': bool,
            'enable_inter_node_communication': bool,
            'id': str,
            'last_modified': datetime,
            'max_tasks_per_node': int,
            'metadata': List[MetadataItem],
            'network_configuration': NetworkConfiguration,
            'resize_error': ResizeError,
            'resize_timeout': str,
            'start_task': StartTask,
            'state': str,
            'state_transition_time': datetime,
            'stats': PoolStatistics,
            'target_dedicated': int,
            'task_scheduling_policy': TaskSchedulingPolicy,
            'url': str,
            'virtual_machine_configuration': VirtualMachineConfiguration,
            'vm_size': str
        }

        self.attribute_map = {
            'allocation_state': 'allocationState',
            'allocation_state_transition_time': 'allocationStateTransitionTime',
            'application_package_references': 'applicationPackageReferences',
            'auto_scale_evaluation_interval': 'autoScaleEvaluationInterval',
            'auto_scale_formula': 'autoScaleFormula',
            'auto_scale_run': 'autoScaleRun',
            'certificate_references': 'certificateReferences',
            'cloud_service_configuration': 'cloudServiceConfiguration',
            'creation_time': 'creationTime',
            'current_dedicated': 'currentDedicated',
            'display_name': 'displayName',
            'e_tag': 'eTag',
            'enable_auto_scale': 'enableAutoScale',
            'enable_inter_node_communication': 'enableInterNodeCommunication',
            'id': 'id',
            'last_modified': 'lastModified',
            'max_tasks_per_node': 'maxTasksPerNode',
            'metadata': 'metadata',
            'network_configuration': 'networkConfiguration',
            'resize_error': 'resizeError',
            'resize_timeout': 'resizeTimeout',
            'start_task': 'startTask',
            'state': 'state',
            'state_transition_time': 'stateTransitionTime',
            'stats': 'stats',
            'target_dedicated': 'targetDedicated',
            'task_scheduling_policy': 'taskSchedulingPolicy',
            'url': 'url',
            'virtual_machine_configuration': 'virtualMachineConfiguration',
            'vm_size': 'vmSize'
        }

        self._allocation_state = allocation_state
        self._allocation_state_transition_time = allocation_state_transition_time
        self._application_package_references = application_package_references
        self._auto_scale_evaluation_interval = auto_scale_evaluation_interval
        self._auto_scale_formula = auto_scale_formula
        self._auto_scale_run = auto_scale_run
        self._certificate_references = certificate_references
        self._cloud_service_configuration = cloud_service_configuration
        self._creation_time = creation_time
        self._current_dedicated = current_dedicated
        self._display_name = display_name
        self._e_tag = e_tag
        self._enable_auto_scale = enable_auto_scale
        self._enable_inter_node_communication = enable_inter_node_communication
        self._id = id
        self._last_modified = last_modified
        self._max_tasks_per_node = max_tasks_per_node
        self._metadata = metadata
        self._network_configuration = network_configuration
        self._resize_error = resize_error
        self._resize_timeout = resize_timeout
        self._start_task = start_task
        self._state = state
        self._state_transition_time = state_transition_time
        self._stats = stats
        self._target_dedicated = target_dedicated
        self._task_scheduling_policy = task_scheduling_policy
        self._url = url
        self._virtual_machine_configuration = virtual_machine_configuration
        self._vm_size = vm_size

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CloudPool':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CloudPool of this CloudPool.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allocation_state(self):
        """Gets the allocation_state of this CloudPool.

        Possible values are: steady â€“ The pool is not resizing. There are no changes to the number of nodes in the pool in progress. A pool enters this state when it is created and when no operations are being performed on the pool to change the number of dedicated nodes. resizing - The pool is resizing; that is, compute nodes are being added to or removed from the pool. stopping - The pool was resizing, but the user has requested that the resize be stopped, but the stop request has not yet been completed.

        :return: The allocation_state of this CloudPool.
        :rtype: str
        """
        return self._allocation_state

    @allocation_state.setter
    def allocation_state(self, allocation_state):
        """Sets the allocation_state of this CloudPool.

        Possible values are: steady â€“ The pool is not resizing. There are no changes to the number of nodes in the pool in progress. A pool enters this state when it is created and when no operations are being performed on the pool to change the number of dedicated nodes. resizing - The pool is resizing; that is, compute nodes are being added to or removed from the pool. stopping - The pool was resizing, but the user has requested that the resize be stopped, but the stop request has not yet been completed.

        :param allocation_state: The allocation_state of this CloudPool.
        :type allocation_state: str
        """
        allowed_values = ["steady", "resizing", "stopping"]  # noqa: E501
        if allocation_state not in allowed_values:
            raise ValueError(
                "Invalid value for `allocation_state` ({0}), must be one of {1}"
                .format(allocation_state, allowed_values)
            )

        self._allocation_state = allocation_state

    @property
    def allocation_state_transition_time(self):
        """Gets the allocation_state_transition_time of this CloudPool.


        :return: The allocation_state_transition_time of this CloudPool.
        :rtype: datetime
        """
        return self._allocation_state_transition_time

    @allocation_state_transition_time.setter
    def allocation_state_transition_time(self, allocation_state_transition_time):
        """Sets the allocation_state_transition_time of this CloudPool.


        :param allocation_state_transition_time: The allocation_state_transition_time of this CloudPool.
        :type allocation_state_transition_time: datetime
        """

        self._allocation_state_transition_time = allocation_state_transition_time

    @property
    def application_package_references(self):
        """Gets the application_package_references of this CloudPool.


        :return: The application_package_references of this CloudPool.
        :rtype: List[ApplicationPackageReference]
        """
        return self._application_package_references

    @application_package_references.setter
    def application_package_references(self, application_package_references):
        """Sets the application_package_references of this CloudPool.


        :param application_package_references: The application_package_references of this CloudPool.
        :type application_package_references: List[ApplicationPackageReference]
        """

        self._application_package_references = application_package_references

    @property
    def auto_scale_evaluation_interval(self):
        """Gets the auto_scale_evaluation_interval of this CloudPool.

        This property is set only if the pool automatically scales, i.e. enableAutoScale is true.

        :return: The auto_scale_evaluation_interval of this CloudPool.
        :rtype: str
        """
        return self._auto_scale_evaluation_interval

    @auto_scale_evaluation_interval.setter
    def auto_scale_evaluation_interval(self, auto_scale_evaluation_interval):
        """Sets the auto_scale_evaluation_interval of this CloudPool.

        This property is set only if the pool automatically scales, i.e. enableAutoScale is true.

        :param auto_scale_evaluation_interval: The auto_scale_evaluation_interval of this CloudPool.
        :type auto_scale_evaluation_interval: str
        """

        self._auto_scale_evaluation_interval = auto_scale_evaluation_interval

    @property
    def auto_scale_formula(self):
        """Gets the auto_scale_formula of this CloudPool.

        This property is set only if the pool automatically scales, i.e. enableAutoScale is true.

        :return: The auto_scale_formula of this CloudPool.
        :rtype: str
        """
        return self._auto_scale_formula

    @auto_scale_formula.setter
    def auto_scale_formula(self, auto_scale_formula):
        """Sets the auto_scale_formula of this CloudPool.

        This property is set only if the pool automatically scales, i.e. enableAutoScale is true.

        :param auto_scale_formula: The auto_scale_formula of this CloudPool.
        :type auto_scale_formula: str
        """

        self._auto_scale_formula = auto_scale_formula

    @property
    def auto_scale_run(self):
        """Gets the auto_scale_run of this CloudPool.


        :return: The auto_scale_run of this CloudPool.
        :rtype: AutoScaleRun
        """
        return self._auto_scale_run

    @auto_scale_run.setter
    def auto_scale_run(self, auto_scale_run):
        """Sets the auto_scale_run of this CloudPool.


        :param auto_scale_run: The auto_scale_run of this CloudPool.
        :type auto_scale_run: AutoScaleRun
        """

        self._auto_scale_run = auto_scale_run

    @property
    def certificate_references(self):
        """Gets the certificate_references of this CloudPool.

        For Windows compute nodes, the Batch service installs the certificates to the specified certificate store and location. For Linux compute nodes, the certificates are stored in a directory inside the task working directory and an environment variable AZ_BATCH_CERTIFICATES_DIR is supplied to the task to query for this location. For certificates with visibility of remoteuser, a certs directory is created in the user's home directory (e.g., /home/<user-name>/certs) where certificates are placed.

        :return: The certificate_references of this CloudPool.
        :rtype: List[CertificateReference]
        """
        return self._certificate_references

    @certificate_references.setter
    def certificate_references(self, certificate_references):
        """Sets the certificate_references of this CloudPool.

        For Windows compute nodes, the Batch service installs the certificates to the specified certificate store and location. For Linux compute nodes, the certificates are stored in a directory inside the task working directory and an environment variable AZ_BATCH_CERTIFICATES_DIR is supplied to the task to query for this location. For certificates with visibility of remoteuser, a certs directory is created in the user's home directory (e.g., /home/<user-name>/certs) where certificates are placed.

        :param certificate_references: The certificate_references of this CloudPool.
        :type certificate_references: List[CertificateReference]
        """

        self._certificate_references = certificate_references

    @property
    def cloud_service_configuration(self):
        """Gets the cloud_service_configuration of this CloudPool.


        :return: The cloud_service_configuration of this CloudPool.
        :rtype: CloudServiceConfiguration
        """
        return self._cloud_service_configuration

    @cloud_service_configuration.setter
    def cloud_service_configuration(self, cloud_service_configuration):
        """Sets the cloud_service_configuration of this CloudPool.


        :param cloud_service_configuration: The cloud_service_configuration of this CloudPool.
        :type cloud_service_configuration: CloudServiceConfiguration
        """

        self._cloud_service_configuration = cloud_service_configuration

    @property
    def creation_time(self):
        """Gets the creation_time of this CloudPool.


        :return: The creation_time of this CloudPool.
        :rtype: datetime
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this CloudPool.


        :param creation_time: The creation_time of this CloudPool.
        :type creation_time: datetime
        """

        self._creation_time = creation_time

    @property
    def current_dedicated(self):
        """Gets the current_dedicated of this CloudPool.


        :return: The current_dedicated of this CloudPool.
        :rtype: int
        """
        return self._current_dedicated

    @current_dedicated.setter
    def current_dedicated(self, current_dedicated):
        """Sets the current_dedicated of this CloudPool.


        :param current_dedicated: The current_dedicated of this CloudPool.
        :type current_dedicated: int
        """

        self._current_dedicated = current_dedicated

    @property
    def display_name(self):
        """Gets the display_name of this CloudPool.

        The display name need not be unique and can contain any Unicode characters up to a maximum length of 1024.

        :return: The display_name of this CloudPool.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this CloudPool.

        The display name need not be unique and can contain any Unicode characters up to a maximum length of 1024.

        :param display_name: The display_name of this CloudPool.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def e_tag(self):
        """Gets the e_tag of this CloudPool.

        This is an opaque string. You can use it to detect whether the pool has changed between requests. In particular, you can be pass the ETag when updating a pool to specify that your changes should take effect only if nobody else has modified the pool in the meantime.

        :return: The e_tag of this CloudPool.
        :rtype: str
        """
        return self._e_tag

    @e_tag.setter
    def e_tag(self, e_tag):
        """Sets the e_tag of this CloudPool.

        This is an opaque string. You can use it to detect whether the pool has changed between requests. In particular, you can be pass the ETag when updating a pool to specify that your changes should take effect only if nobody else has modified the pool in the meantime.

        :param e_tag: The e_tag of this CloudPool.
        :type e_tag: str
        """

        self._e_tag = e_tag

    @property
    def enable_auto_scale(self):
        """Gets the enable_auto_scale of this CloudPool.

        If true, the autoScaleFormula property must be set. If false, the targetDedicated property must be set.

        :return: The enable_auto_scale of this CloudPool.
        :rtype: bool
        """
        return self._enable_auto_scale

    @enable_auto_scale.setter
    def enable_auto_scale(self, enable_auto_scale):
        """Sets the enable_auto_scale of this CloudPool.

        If true, the autoScaleFormula property must be set. If false, the targetDedicated property must be set.

        :param enable_auto_scale: The enable_auto_scale of this CloudPool.
        :type enable_auto_scale: bool
        """

        self._enable_auto_scale = enable_auto_scale

    @property
    def enable_inter_node_communication(self):
        """Gets the enable_inter_node_communication of this CloudPool.

        This imposes restrictions on which nodes can be assigned to the pool. Specifying this value can reduce the chance of the requested number of nodes to be allocated in the pool.

        :return: The enable_inter_node_communication of this CloudPool.
        :rtype: bool
        """
        return self._enable_inter_node_communication

    @enable_inter_node_communication.setter
    def enable_inter_node_communication(self, enable_inter_node_communication):
        """Sets the enable_inter_node_communication of this CloudPool.

        This imposes restrictions on which nodes can be assigned to the pool. Specifying this value can reduce the chance of the requested number of nodes to be allocated in the pool.

        :param enable_inter_node_communication: The enable_inter_node_communication of this CloudPool.
        :type enable_inter_node_communication: bool
        """

        self._enable_inter_node_communication = enable_inter_node_communication

    @property
    def id(self):
        """Gets the id of this CloudPool.

        The ID can contain any combination of alphanumeric characters including hyphens and underscores, and cannot contain more than 64 characters. It is common to use a GUID for the id.

        :return: The id of this CloudPool.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CloudPool.

        The ID can contain any combination of alphanumeric characters including hyphens and underscores, and cannot contain more than 64 characters. It is common to use a GUID for the id.

        :param id: The id of this CloudPool.
        :type id: str
        """

        self._id = id

    @property
    def last_modified(self):
        """Gets the last_modified of this CloudPool.

        This is the last time at which the pool level data, such as the targetDedicated or enableAutoscale settings, changed. It does not factor in node-level changes such as a compute node changing state.

        :return: The last_modified of this CloudPool.
        :rtype: datetime
        """
        return self._last_modified

    @last_modified.setter
    def last_modified(self, last_modified):
        """Sets the last_modified of this CloudPool.

        This is the last time at which the pool level data, such as the targetDedicated or enableAutoscale settings, changed. It does not factor in node-level changes such as a compute node changing state.

        :param last_modified: The last_modified of this CloudPool.
        :type last_modified: datetime
        """

        self._last_modified = last_modified

    @property
    def max_tasks_per_node(self):
        """Gets the max_tasks_per_node of this CloudPool.


        :return: The max_tasks_per_node of this CloudPool.
        :rtype: int
        """
        return self._max_tasks_per_node

    @max_tasks_per_node.setter
    def max_tasks_per_node(self, max_tasks_per_node):
        """Sets the max_tasks_per_node of this CloudPool.


        :param max_tasks_per_node: The max_tasks_per_node of this CloudPool.
        :type max_tasks_per_node: int
        """

        self._max_tasks_per_node = max_tasks_per_node

    @property
    def metadata(self):
        """Gets the metadata of this CloudPool.


        :return: The metadata of this CloudPool.
        :rtype: List[MetadataItem]
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this CloudPool.


        :param metadata: The metadata of this CloudPool.
        :type metadata: List[MetadataItem]
        """

        self._metadata = metadata

    @property
    def network_configuration(self):
        """Gets the network_configuration of this CloudPool.


        :return: The network_configuration of this CloudPool.
        :rtype: NetworkConfiguration
        """
        return self._network_configuration

    @network_configuration.setter
    def network_configuration(self, network_configuration):
        """Sets the network_configuration of this CloudPool.


        :param network_configuration: The network_configuration of this CloudPool.
        :type network_configuration: NetworkConfiguration
        """

        self._network_configuration = network_configuration

    @property
    def resize_error(self):
        """Gets the resize_error of this CloudPool.


        :return: The resize_error of this CloudPool.
        :rtype: ResizeError
        """
        return self._resize_error

    @resize_error.setter
    def resize_error(self, resize_error):
        """Sets the resize_error of this CloudPool.


        :param resize_error: The resize_error of this CloudPool.
        :type resize_error: ResizeError
        """

        self._resize_error = resize_error

    @property
    def resize_timeout(self):
        """Gets the resize_timeout of this CloudPool.

        This is the timeout for the most recent resize operation. (The initial sizing when the pool is created counts as a resize.) The default value is 15 minutes.

        :return: The resize_timeout of this CloudPool.
        :rtype: str
        """
        return self._resize_timeout

    @resize_timeout.setter
    def resize_timeout(self, resize_timeout):
        """Sets the resize_timeout of this CloudPool.

        This is the timeout for the most recent resize operation. (The initial sizing when the pool is created counts as a resize.) The default value is 15 minutes.

        :param resize_timeout: The resize_timeout of this CloudPool.
        :type resize_timeout: str
        """

        self._resize_timeout = resize_timeout

    @property
    def start_task(self):
        """Gets the start_task of this CloudPool.


        :return: The start_task of this CloudPool.
        :rtype: StartTask
        """
        return self._start_task

    @start_task.setter
    def start_task(self, start_task):
        """Sets the start_task of this CloudPool.


        :param start_task: The start_task of this CloudPool.
        :type start_task: StartTask
        """

        self._start_task = start_task

    @property
    def state(self):
        """Gets the state of this CloudPool.

        Possible values are: active â€“ The pool is available to run tasks subject to the availability of compute nodes. deleting â€“ The user has requested that the pool be deleted, but the delete operation has not yet completed. upgrading â€“ The user has requested that the operating system of the pool's nodes be upgraded, but the upgrade operation has not yet completed (that is, some nodes in the pool have not yet been upgraded). While upgrading, the pool may be able to run tasks (with reduced capacity) but this is not guaranteed.

        :return: The state of this CloudPool.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this CloudPool.

        Possible values are: active â€“ The pool is available to run tasks subject to the availability of compute nodes. deleting â€“ The user has requested that the pool be deleted, but the delete operation has not yet completed. upgrading â€“ The user has requested that the operating system of the pool's nodes be upgraded, but the upgrade operation has not yet completed (that is, some nodes in the pool have not yet been upgraded). While upgrading, the pool may be able to run tasks (with reduced capacity) but this is not guaranteed.

        :param state: The state of this CloudPool.
        :type state: str
        """
        allowed_values = ["active", "deleting", "upgrading"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def state_transition_time(self):
        """Gets the state_transition_time of this CloudPool.


        :return: The state_transition_time of this CloudPool.
        :rtype: datetime
        """
        return self._state_transition_time

    @state_transition_time.setter
    def state_transition_time(self, state_transition_time):
        """Sets the state_transition_time of this CloudPool.


        :param state_transition_time: The state_transition_time of this CloudPool.
        :type state_transition_time: datetime
        """

        self._state_transition_time = state_transition_time

    @property
    def stats(self):
        """Gets the stats of this CloudPool.


        :return: The stats of this CloudPool.
        :rtype: PoolStatistics
        """
        return self._stats

    @stats.setter
    def stats(self, stats):
        """Sets the stats of this CloudPool.


        :param stats: The stats of this CloudPool.
        :type stats: PoolStatistics
        """

        self._stats = stats

    @property
    def target_dedicated(self):
        """Gets the target_dedicated of this CloudPool.

        This property is not set if enableAutoScale is true. It is required if enableAutoScale is false.

        :return: The target_dedicated of this CloudPool.
        :rtype: int
        """
        return self._target_dedicated

    @target_dedicated.setter
    def target_dedicated(self, target_dedicated):
        """Sets the target_dedicated of this CloudPool.

        This property is not set if enableAutoScale is true. It is required if enableAutoScale is false.

        :param target_dedicated: The target_dedicated of this CloudPool.
        :type target_dedicated: int
        """

        self._target_dedicated = target_dedicated

    @property
    def task_scheduling_policy(self):
        """Gets the task_scheduling_policy of this CloudPool.


        :return: The task_scheduling_policy of this CloudPool.
        :rtype: TaskSchedulingPolicy
        """
        return self._task_scheduling_policy

    @task_scheduling_policy.setter
    def task_scheduling_policy(self, task_scheduling_policy):
        """Sets the task_scheduling_policy of this CloudPool.


        :param task_scheduling_policy: The task_scheduling_policy of this CloudPool.
        :type task_scheduling_policy: TaskSchedulingPolicy
        """

        self._task_scheduling_policy = task_scheduling_policy

    @property
    def url(self):
        """Gets the url of this CloudPool.


        :return: The url of this CloudPool.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this CloudPool.


        :param url: The url of this CloudPool.
        :type url: str
        """

        self._url = url

    @property
    def virtual_machine_configuration(self):
        """Gets the virtual_machine_configuration of this CloudPool.


        :return: The virtual_machine_configuration of this CloudPool.
        :rtype: VirtualMachineConfiguration
        """
        return self._virtual_machine_configuration

    @virtual_machine_configuration.setter
    def virtual_machine_configuration(self, virtual_machine_configuration):
        """Sets the virtual_machine_configuration of this CloudPool.


        :param virtual_machine_configuration: The virtual_machine_configuration of this CloudPool.
        :type virtual_machine_configuration: VirtualMachineConfiguration
        """

        self._virtual_machine_configuration = virtual_machine_configuration

    @property
    def vm_size(self):
        """Gets the vm_size of this CloudPool.

        For information about available sizes of virtual machines for Cloud Services pools (pools created with cloudServiceConfiguration), see Sizes for Cloud Services (http://azure.microsoft.com/documentation/articles/cloud-services-sizes-specs/). Batch supports all Cloud Services VM sizes except ExtraSmall. For information about available VM sizes for pools using images from the Virtual Machines Marketplace (pools created with virtualMachineConfiguration) see Sizes for Virtual Machines (Linux) (https://azure.microsoft.com/documentation/articles/virtual-machines-linux-sizes/) or Sizes for Virtual Machines (Windows) (https://azure.microsoft.com/documentation/articles/virtual-machines-windows-sizes/). Batch supports all Azure VM sizes except STANDARD_A0 and those with premium storage (STANDARD_GS, STANDARD_DS, and STANDARD_DSV2 series).

        :return: The vm_size of this CloudPool.
        :rtype: str
        """
        return self._vm_size

    @vm_size.setter
    def vm_size(self, vm_size):
        """Sets the vm_size of this CloudPool.

        For information about available sizes of virtual machines for Cloud Services pools (pools created with cloudServiceConfiguration), see Sizes for Cloud Services (http://azure.microsoft.com/documentation/articles/cloud-services-sizes-specs/). Batch supports all Cloud Services VM sizes except ExtraSmall. For information about available VM sizes for pools using images from the Virtual Machines Marketplace (pools created with virtualMachineConfiguration) see Sizes for Virtual Machines (Linux) (https://azure.microsoft.com/documentation/articles/virtual-machines-linux-sizes/) or Sizes for Virtual Machines (Windows) (https://azure.microsoft.com/documentation/articles/virtual-machines-windows-sizes/). Batch supports all Azure VM sizes except STANDARD_A0 and those with premium storage (STANDARD_GS, STANDARD_DS, and STANDARD_DSV2 series).

        :param vm_size: The vm_size of this CloudPool.
        :type vm_size: str
        """

        self._vm_size = vm_size
