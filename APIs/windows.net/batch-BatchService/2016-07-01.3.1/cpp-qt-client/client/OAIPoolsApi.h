/**
 * BatchService
 * A client for issuing REST requests to the Azure Batch service.
 *
 * The version of the OpenAPI document: 2016-07-01.3.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIPoolsApi_H
#define OAI_OAIPoolsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAutoScaleRun.h"
#include "OAIBatchError.h"
#include "OAICloudPool.h"
#include "OAICloudPoolListResult.h"
#include "OAIPoolAddParameter.h"
#include "OAIPoolEnableAutoScaleParameter.h"
#include "OAIPoolEvaluateAutoScaleParameter.h"
#include "OAIPoolListPoolUsageMetricsResult.h"
#include "OAIPoolPatchParameter.h"
#include "OAIPoolResizeParameter.h"
#include "OAIPoolStatistics.h"
#include "OAIPoolUpdatePropertiesParameter.h"
#include "OAIPoolUpgradeOSParameter.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIPoolsApi : public QObject {
    Q_OBJECT

public:
    OAIPoolsApi(const int timeOut = 0);
    ~OAIPoolsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  pool OAIPoolAddParameter [required]
    * @param[in]  timeout qint32 [optional]
    * @param[in]  client_request_id QString [optional]
    * @param[in]  return_client_request_id bool [optional]
    * @param[in]  ocp_date QString [optional]
    */
    virtual void poolAdd(const QString &api_version, const OAIPoolAddParameter &pool, const ::OpenAPI::OptionalParam<qint32> &timeout = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &client_request_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &return_client_request_id = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &ocp_date = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  pool_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  timeout qint32 [optional]
    * @param[in]  client_request_id QString [optional]
    * @param[in]  return_client_request_id bool [optional]
    * @param[in]  ocp_date QString [optional]
    * @param[in]  if_match QString [optional]
    * @param[in]  if_none_match QString [optional]
    * @param[in]  if_modified_since QString [optional]
    * @param[in]  if_unmodified_since QString [optional]
    */
    virtual void poolDelete(const QString &pool_id, const QString &api_version, const ::OpenAPI::OptionalParam<qint32> &timeout = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &client_request_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &return_client_request_id = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &ocp_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_match = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_modified_since = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_unmodified_since = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  pool_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  timeout qint32 [optional]
    * @param[in]  client_request_id QString [optional]
    * @param[in]  return_client_request_id bool [optional]
    * @param[in]  ocp_date QString [optional]
    */
    virtual void poolDisableAutoScale(const QString &pool_id, const QString &api_version, const ::OpenAPI::OptionalParam<qint32> &timeout = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &client_request_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &return_client_request_id = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &ocp_date = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  pool_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  pool_enable_auto_scale_parameter OAIPoolEnableAutoScaleParameter [required]
    * @param[in]  timeout qint32 [optional]
    * @param[in]  client_request_id QString [optional]
    * @param[in]  return_client_request_id bool [optional]
    * @param[in]  ocp_date QString [optional]
    * @param[in]  if_match QString [optional]
    * @param[in]  if_none_match QString [optional]
    * @param[in]  if_modified_since QString [optional]
    * @param[in]  if_unmodified_since QString [optional]
    */
    virtual void poolEnableAutoScale(const QString &pool_id, const QString &api_version, const OAIPoolEnableAutoScaleParameter &pool_enable_auto_scale_parameter, const ::OpenAPI::OptionalParam<qint32> &timeout = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &client_request_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &return_client_request_id = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &ocp_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_match = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_modified_since = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_unmodified_since = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  pool_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  pool_evaluate_auto_scale_parameter OAIPoolEvaluateAutoScaleParameter [required]
    * @param[in]  timeout qint32 [optional]
    * @param[in]  client_request_id QString [optional]
    * @param[in]  return_client_request_id bool [optional]
    * @param[in]  ocp_date QString [optional]
    */
    virtual void poolEvaluateAutoScale(const QString &pool_id, const QString &api_version, const OAIPoolEvaluateAutoScaleParameter &pool_evaluate_auto_scale_parameter, const ::OpenAPI::OptionalParam<qint32> &timeout = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &client_request_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &return_client_request_id = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &ocp_date = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  pool_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  timeout qint32 [optional]
    * @param[in]  client_request_id QString [optional]
    * @param[in]  return_client_request_id bool [optional]
    * @param[in]  ocp_date QString [optional]
    * @param[in]  if_match QString [optional]
    * @param[in]  if_none_match QString [optional]
    * @param[in]  if_modified_since QString [optional]
    * @param[in]  if_unmodified_since QString [optional]
    */
    virtual void poolExists(const QString &pool_id, const QString &api_version, const ::OpenAPI::OptionalParam<qint32> &timeout = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &client_request_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &return_client_request_id = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &ocp_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_match = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_modified_since = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_unmodified_since = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  pool_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  select QString [optional]
    * @param[in]  expand QString [optional]
    * @param[in]  timeout qint32 [optional]
    * @param[in]  client_request_id QString [optional]
    * @param[in]  return_client_request_id bool [optional]
    * @param[in]  ocp_date QString [optional]
    * @param[in]  if_match QString [optional]
    * @param[in]  if_none_match QString [optional]
    * @param[in]  if_modified_since QString [optional]
    * @param[in]  if_unmodified_since QString [optional]
    */
    virtual void poolGet(const QString &pool_id, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &select = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &timeout = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &client_request_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &return_client_request_id = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &ocp_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_match = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_modified_since = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_unmodified_since = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  timeout qint32 [optional]
    * @param[in]  client_request_id QString [optional]
    * @param[in]  return_client_request_id bool [optional]
    * @param[in]  ocp_date QString [optional]
    */
    virtual void poolGetAllPoolsLifetimeStatistics(const QString &api_version, const ::OpenAPI::OptionalParam<qint32> &timeout = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &client_request_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &return_client_request_id = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &ocp_date = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  filter QString [optional]
    * @param[in]  select QString [optional]
    * @param[in]  expand QString [optional]
    * @param[in]  maxresults qint32 [optional]
    * @param[in]  timeout qint32 [optional]
    * @param[in]  client_request_id QString [optional]
    * @param[in]  return_client_request_id bool [optional]
    * @param[in]  ocp_date QString [optional]
    */
    virtual void poolList(const QString &api_version, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &select = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &maxresults = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &timeout = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &client_request_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &return_client_request_id = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &ocp_date = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  starttime QDateTime [optional]
    * @param[in]  endtime QDateTime [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  maxresults qint32 [optional]
    * @param[in]  timeout qint32 [optional]
    * @param[in]  client_request_id QString [optional]
    * @param[in]  return_client_request_id bool [optional]
    * @param[in]  ocp_date QString [optional]
    */
    virtual void poolListPoolUsageMetrics(const QString &api_version, const ::OpenAPI::OptionalParam<QDateTime> &starttime = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &endtime = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &maxresults = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &timeout = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &client_request_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &return_client_request_id = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &ocp_date = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  pool_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  pool_patch_parameter OAIPoolPatchParameter [required]
    * @param[in]  timeout qint32 [optional]
    * @param[in]  client_request_id QString [optional]
    * @param[in]  return_client_request_id bool [optional]
    * @param[in]  ocp_date QString [optional]
    * @param[in]  if_match QString [optional]
    * @param[in]  if_none_match QString [optional]
    * @param[in]  if_modified_since QString [optional]
    * @param[in]  if_unmodified_since QString [optional]
    */
    virtual void poolPatch(const QString &pool_id, const QString &api_version, const OAIPoolPatchParameter &pool_patch_parameter, const ::OpenAPI::OptionalParam<qint32> &timeout = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &client_request_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &return_client_request_id = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &ocp_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_match = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_modified_since = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_unmodified_since = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  pool_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  pool_resize_parameter OAIPoolResizeParameter [required]
    * @param[in]  timeout qint32 [optional]
    * @param[in]  client_request_id QString [optional]
    * @param[in]  return_client_request_id bool [optional]
    * @param[in]  ocp_date QString [optional]
    * @param[in]  if_match QString [optional]
    * @param[in]  if_none_match QString [optional]
    * @param[in]  if_modified_since QString [optional]
    * @param[in]  if_unmodified_since QString [optional]
    */
    virtual void poolResize(const QString &pool_id, const QString &api_version, const OAIPoolResizeParameter &pool_resize_parameter, const ::OpenAPI::OptionalParam<qint32> &timeout = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &client_request_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &return_client_request_id = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &ocp_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_match = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_modified_since = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_unmodified_since = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  pool_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  timeout qint32 [optional]
    * @param[in]  client_request_id QString [optional]
    * @param[in]  return_client_request_id bool [optional]
    * @param[in]  ocp_date QString [optional]
    * @param[in]  if_match QString [optional]
    * @param[in]  if_none_match QString [optional]
    * @param[in]  if_modified_since QString [optional]
    * @param[in]  if_unmodified_since QString [optional]
    */
    virtual void poolStopResize(const QString &pool_id, const QString &api_version, const ::OpenAPI::OptionalParam<qint32> &timeout = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &client_request_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &return_client_request_id = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &ocp_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_match = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_modified_since = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_unmodified_since = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  pool_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  pool_update_properties_parameter OAIPoolUpdatePropertiesParameter [required]
    * @param[in]  timeout qint32 [optional]
    * @param[in]  client_request_id QString [optional]
    * @param[in]  return_client_request_id bool [optional]
    * @param[in]  ocp_date QString [optional]
    */
    virtual void poolUpdateProperties(const QString &pool_id, const QString &api_version, const OAIPoolUpdatePropertiesParameter &pool_update_properties_parameter, const ::OpenAPI::OptionalParam<qint32> &timeout = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &client_request_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &return_client_request_id = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &ocp_date = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  pool_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  pool_upgrade_os_parameter OAIPoolUpgradeOSParameter [required]
    * @param[in]  timeout qint32 [optional]
    * @param[in]  client_request_id QString [optional]
    * @param[in]  return_client_request_id bool [optional]
    * @param[in]  ocp_date QString [optional]
    * @param[in]  if_match QString [optional]
    * @param[in]  if_none_match QString [optional]
    * @param[in]  if_modified_since QString [optional]
    * @param[in]  if_unmodified_since QString [optional]
    */
    virtual void poolUpgradeOS(const QString &pool_id, const QString &api_version, const OAIPoolUpgradeOSParameter &pool_upgrade_os_parameter, const ::OpenAPI::OptionalParam<qint32> &timeout = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &client_request_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &return_client_request_id = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &ocp_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_match = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_modified_since = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_unmodified_since = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void poolAddCallback(OAIHttpRequestWorker *worker);
    void poolDeleteCallback(OAIHttpRequestWorker *worker);
    void poolDisableAutoScaleCallback(OAIHttpRequestWorker *worker);
    void poolEnableAutoScaleCallback(OAIHttpRequestWorker *worker);
    void poolEvaluateAutoScaleCallback(OAIHttpRequestWorker *worker);
    void poolExistsCallback(OAIHttpRequestWorker *worker);
    void poolGetCallback(OAIHttpRequestWorker *worker);
    void poolGetAllPoolsLifetimeStatisticsCallback(OAIHttpRequestWorker *worker);
    void poolListCallback(OAIHttpRequestWorker *worker);
    void poolListPoolUsageMetricsCallback(OAIHttpRequestWorker *worker);
    void poolPatchCallback(OAIHttpRequestWorker *worker);
    void poolResizeCallback(OAIHttpRequestWorker *worker);
    void poolStopResizeCallback(OAIHttpRequestWorker *worker);
    void poolUpdatePropertiesCallback(OAIHttpRequestWorker *worker);
    void poolUpgradeOSCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void poolAddSignal();
    void poolDeleteSignal();
    void poolDisableAutoScaleSignal();
    void poolEnableAutoScaleSignal();
    void poolEvaluateAutoScaleSignal(OAIAutoScaleRun summary);
    void poolExistsSignal();
    void poolGetSignal(OAICloudPool summary);
    void poolGetAllPoolsLifetimeStatisticsSignal(OAIPoolStatistics summary);
    void poolListSignal(OAICloudPoolListResult summary);
    void poolListPoolUsageMetricsSignal(OAIPoolListPoolUsageMetricsResult summary);
    void poolPatchSignal();
    void poolResizeSignal();
    void poolStopResizeSignal();
    void poolUpdatePropertiesSignal();
    void poolUpgradeOSSignal();


    void poolAddSignalFull(OAIHttpRequestWorker *worker);
    void poolDeleteSignalFull(OAIHttpRequestWorker *worker);
    void poolDisableAutoScaleSignalFull(OAIHttpRequestWorker *worker);
    void poolEnableAutoScaleSignalFull(OAIHttpRequestWorker *worker);
    void poolEvaluateAutoScaleSignalFull(OAIHttpRequestWorker *worker, OAIAutoScaleRun summary);
    void poolExistsSignalFull(OAIHttpRequestWorker *worker);
    void poolGetSignalFull(OAIHttpRequestWorker *worker, OAICloudPool summary);
    void poolGetAllPoolsLifetimeStatisticsSignalFull(OAIHttpRequestWorker *worker, OAIPoolStatistics summary);
    void poolListSignalFull(OAIHttpRequestWorker *worker, OAICloudPoolListResult summary);
    void poolListPoolUsageMetricsSignalFull(OAIHttpRequestWorker *worker, OAIPoolListPoolUsageMetricsResult summary);
    void poolPatchSignalFull(OAIHttpRequestWorker *worker);
    void poolResizeSignalFull(OAIHttpRequestWorker *worker);
    void poolStopResizeSignalFull(OAIHttpRequestWorker *worker);
    void poolUpdatePropertiesSignalFull(OAIHttpRequestWorker *worker);
    void poolUpgradeOSSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use poolAddSignalError() instead")
    void poolAddSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void poolAddSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use poolDeleteSignalError() instead")
    void poolDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void poolDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use poolDisableAutoScaleSignalError() instead")
    void poolDisableAutoScaleSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void poolDisableAutoScaleSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use poolEnableAutoScaleSignalError() instead")
    void poolEnableAutoScaleSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void poolEnableAutoScaleSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use poolEvaluateAutoScaleSignalError() instead")
    void poolEvaluateAutoScaleSignalE(OAIAutoScaleRun summary, QNetworkReply::NetworkError error_type, QString error_str);
    void poolEvaluateAutoScaleSignalError(OAIAutoScaleRun summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use poolExistsSignalError() instead")
    void poolExistsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void poolExistsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use poolGetSignalError() instead")
    void poolGetSignalE(OAICloudPool summary, QNetworkReply::NetworkError error_type, QString error_str);
    void poolGetSignalError(OAICloudPool summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use poolGetAllPoolsLifetimeStatisticsSignalError() instead")
    void poolGetAllPoolsLifetimeStatisticsSignalE(OAIPoolStatistics summary, QNetworkReply::NetworkError error_type, QString error_str);
    void poolGetAllPoolsLifetimeStatisticsSignalError(OAIPoolStatistics summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use poolListSignalError() instead")
    void poolListSignalE(OAICloudPoolListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void poolListSignalError(OAICloudPoolListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use poolListPoolUsageMetricsSignalError() instead")
    void poolListPoolUsageMetricsSignalE(OAIPoolListPoolUsageMetricsResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void poolListPoolUsageMetricsSignalError(OAIPoolListPoolUsageMetricsResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use poolPatchSignalError() instead")
    void poolPatchSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void poolPatchSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use poolResizeSignalError() instead")
    void poolResizeSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void poolResizeSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use poolStopResizeSignalError() instead")
    void poolStopResizeSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void poolStopResizeSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use poolUpdatePropertiesSignalError() instead")
    void poolUpdatePropertiesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void poolUpdatePropertiesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use poolUpgradeOSSignalError() instead")
    void poolUpgradeOSSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void poolUpgradeOSSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use poolAddSignalErrorFull() instead")
    void poolAddSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void poolAddSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use poolDeleteSignalErrorFull() instead")
    void poolDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void poolDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use poolDisableAutoScaleSignalErrorFull() instead")
    void poolDisableAutoScaleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void poolDisableAutoScaleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use poolEnableAutoScaleSignalErrorFull() instead")
    void poolEnableAutoScaleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void poolEnableAutoScaleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use poolEvaluateAutoScaleSignalErrorFull() instead")
    void poolEvaluateAutoScaleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void poolEvaluateAutoScaleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use poolExistsSignalErrorFull() instead")
    void poolExistsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void poolExistsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use poolGetSignalErrorFull() instead")
    void poolGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void poolGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use poolGetAllPoolsLifetimeStatisticsSignalErrorFull() instead")
    void poolGetAllPoolsLifetimeStatisticsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void poolGetAllPoolsLifetimeStatisticsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use poolListSignalErrorFull() instead")
    void poolListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void poolListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use poolListPoolUsageMetricsSignalErrorFull() instead")
    void poolListPoolUsageMetricsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void poolListPoolUsageMetricsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use poolPatchSignalErrorFull() instead")
    void poolPatchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void poolPatchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use poolResizeSignalErrorFull() instead")
    void poolResizeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void poolResizeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use poolStopResizeSignalErrorFull() instead")
    void poolStopResizeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void poolStopResizeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use poolUpdatePropertiesSignalErrorFull() instead")
    void poolUpdatePropertiesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void poolUpdatePropertiesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use poolUpgradeOSSignalErrorFull() instead")
    void poolUpgradeOSSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void poolUpgradeOSSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
