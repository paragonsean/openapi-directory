/**
 * BatchService
 * A client for issuing REST requests to the Azure Batch service.
 *
 * The version of the OpenAPI document: 2016-07-01.3.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPoolInformation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPoolInformation::OAIPoolInformation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPoolInformation::OAIPoolInformation() {
    this->initializeModel();
}

OAIPoolInformation::~OAIPoolInformation() {}

void OAIPoolInformation::initializeModel() {

    m_auto_pool_specification_isSet = false;
    m_auto_pool_specification_isValid = false;

    m_pool_id_isSet = false;
    m_pool_id_isValid = false;
}

void OAIPoolInformation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPoolInformation::fromJsonObject(QJsonObject json) {

    m_auto_pool_specification_isValid = ::OpenAPI::fromJsonValue(m_auto_pool_specification, json[QString("autoPoolSpecification")]);
    m_auto_pool_specification_isSet = !json[QString("autoPoolSpecification")].isNull() && m_auto_pool_specification_isValid;

    m_pool_id_isValid = ::OpenAPI::fromJsonValue(m_pool_id, json[QString("poolId")]);
    m_pool_id_isSet = !json[QString("poolId")].isNull() && m_pool_id_isValid;
}

QString OAIPoolInformation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPoolInformation::asJsonObject() const {
    QJsonObject obj;
    if (m_auto_pool_specification.isSet()) {
        obj.insert(QString("autoPoolSpecification"), ::OpenAPI::toJsonValue(m_auto_pool_specification));
    }
    if (m_pool_id_isSet) {
        obj.insert(QString("poolId"), ::OpenAPI::toJsonValue(m_pool_id));
    }
    return obj;
}

OAIAutoPoolSpecification OAIPoolInformation::getAutoPoolSpecification() const {
    return m_auto_pool_specification;
}
void OAIPoolInformation::setAutoPoolSpecification(const OAIAutoPoolSpecification &auto_pool_specification) {
    m_auto_pool_specification = auto_pool_specification;
    m_auto_pool_specification_isSet = true;
}

bool OAIPoolInformation::is_auto_pool_specification_Set() const{
    return m_auto_pool_specification_isSet;
}

bool OAIPoolInformation::is_auto_pool_specification_Valid() const{
    return m_auto_pool_specification_isValid;
}

QString OAIPoolInformation::getPoolId() const {
    return m_pool_id;
}
void OAIPoolInformation::setPoolId(const QString &pool_id) {
    m_pool_id = pool_id;
    m_pool_id_isSet = true;
}

bool OAIPoolInformation::is_pool_id_Set() const{
    return m_pool_id_isSet;
}

bool OAIPoolInformation::is_pool_id_Valid() const{
    return m_pool_id_isValid;
}

bool OAIPoolInformation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_auto_pool_specification.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_pool_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPoolInformation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
