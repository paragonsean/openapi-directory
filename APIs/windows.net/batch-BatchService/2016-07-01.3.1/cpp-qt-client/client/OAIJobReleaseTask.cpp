/**
 * BatchService
 * A client for issuing REST requests to the Azure Batch service.
 *
 * The version of the OpenAPI document: 2016-07-01.3.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIJobReleaseTask.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIJobReleaseTask::OAIJobReleaseTask(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIJobReleaseTask::OAIJobReleaseTask() {
    this->initializeModel();
}

OAIJobReleaseTask::~OAIJobReleaseTask() {}

void OAIJobReleaseTask::initializeModel() {

    m_command_line_isSet = false;
    m_command_line_isValid = false;

    m_environment_settings_isSet = false;
    m_environment_settings_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_max_wall_clock_time_isSet = false;
    m_max_wall_clock_time_isValid = false;

    m_resource_files_isSet = false;
    m_resource_files_isValid = false;

    m_retention_time_isSet = false;
    m_retention_time_isValid = false;

    m_run_elevated_isSet = false;
    m_run_elevated_isValid = false;
}

void OAIJobReleaseTask::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIJobReleaseTask::fromJsonObject(QJsonObject json) {

    m_command_line_isValid = ::OpenAPI::fromJsonValue(m_command_line, json[QString("commandLine")]);
    m_command_line_isSet = !json[QString("commandLine")].isNull() && m_command_line_isValid;

    m_environment_settings_isValid = ::OpenAPI::fromJsonValue(m_environment_settings, json[QString("environmentSettings")]);
    m_environment_settings_isSet = !json[QString("environmentSettings")].isNull() && m_environment_settings_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_max_wall_clock_time_isValid = ::OpenAPI::fromJsonValue(m_max_wall_clock_time, json[QString("maxWallClockTime")]);
    m_max_wall_clock_time_isSet = !json[QString("maxWallClockTime")].isNull() && m_max_wall_clock_time_isValid;

    m_resource_files_isValid = ::OpenAPI::fromJsonValue(m_resource_files, json[QString("resourceFiles")]);
    m_resource_files_isSet = !json[QString("resourceFiles")].isNull() && m_resource_files_isValid;

    m_retention_time_isValid = ::OpenAPI::fromJsonValue(m_retention_time, json[QString("retentionTime")]);
    m_retention_time_isSet = !json[QString("retentionTime")].isNull() && m_retention_time_isValid;

    m_run_elevated_isValid = ::OpenAPI::fromJsonValue(m_run_elevated, json[QString("runElevated")]);
    m_run_elevated_isSet = !json[QString("runElevated")].isNull() && m_run_elevated_isValid;
}

QString OAIJobReleaseTask::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIJobReleaseTask::asJsonObject() const {
    QJsonObject obj;
    if (m_command_line_isSet) {
        obj.insert(QString("commandLine"), ::OpenAPI::toJsonValue(m_command_line));
    }
    if (m_environment_settings.size() > 0) {
        obj.insert(QString("environmentSettings"), ::OpenAPI::toJsonValue(m_environment_settings));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_max_wall_clock_time_isSet) {
        obj.insert(QString("maxWallClockTime"), ::OpenAPI::toJsonValue(m_max_wall_clock_time));
    }
    if (m_resource_files.size() > 0) {
        obj.insert(QString("resourceFiles"), ::OpenAPI::toJsonValue(m_resource_files));
    }
    if (m_retention_time_isSet) {
        obj.insert(QString("retentionTime"), ::OpenAPI::toJsonValue(m_retention_time));
    }
    if (m_run_elevated_isSet) {
        obj.insert(QString("runElevated"), ::OpenAPI::toJsonValue(m_run_elevated));
    }
    return obj;
}

QString OAIJobReleaseTask::getCommandLine() const {
    return m_command_line;
}
void OAIJobReleaseTask::setCommandLine(const QString &command_line) {
    m_command_line = command_line;
    m_command_line_isSet = true;
}

bool OAIJobReleaseTask::is_command_line_Set() const{
    return m_command_line_isSet;
}

bool OAIJobReleaseTask::is_command_line_Valid() const{
    return m_command_line_isValid;
}

QList<OAIEnvironmentSetting> OAIJobReleaseTask::getEnvironmentSettings() const {
    return m_environment_settings;
}
void OAIJobReleaseTask::setEnvironmentSettings(const QList<OAIEnvironmentSetting> &environment_settings) {
    m_environment_settings = environment_settings;
    m_environment_settings_isSet = true;
}

bool OAIJobReleaseTask::is_environment_settings_Set() const{
    return m_environment_settings_isSet;
}

bool OAIJobReleaseTask::is_environment_settings_Valid() const{
    return m_environment_settings_isValid;
}

QString OAIJobReleaseTask::getId() const {
    return m_id;
}
void OAIJobReleaseTask::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIJobReleaseTask::is_id_Set() const{
    return m_id_isSet;
}

bool OAIJobReleaseTask::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIJobReleaseTask::getMaxWallClockTime() const {
    return m_max_wall_clock_time;
}
void OAIJobReleaseTask::setMaxWallClockTime(const QString &max_wall_clock_time) {
    m_max_wall_clock_time = max_wall_clock_time;
    m_max_wall_clock_time_isSet = true;
}

bool OAIJobReleaseTask::is_max_wall_clock_time_Set() const{
    return m_max_wall_clock_time_isSet;
}

bool OAIJobReleaseTask::is_max_wall_clock_time_Valid() const{
    return m_max_wall_clock_time_isValid;
}

QList<OAIResourceFile> OAIJobReleaseTask::getResourceFiles() const {
    return m_resource_files;
}
void OAIJobReleaseTask::setResourceFiles(const QList<OAIResourceFile> &resource_files) {
    m_resource_files = resource_files;
    m_resource_files_isSet = true;
}

bool OAIJobReleaseTask::is_resource_files_Set() const{
    return m_resource_files_isSet;
}

bool OAIJobReleaseTask::is_resource_files_Valid() const{
    return m_resource_files_isValid;
}

QString OAIJobReleaseTask::getRetentionTime() const {
    return m_retention_time;
}
void OAIJobReleaseTask::setRetentionTime(const QString &retention_time) {
    m_retention_time = retention_time;
    m_retention_time_isSet = true;
}

bool OAIJobReleaseTask::is_retention_time_Set() const{
    return m_retention_time_isSet;
}

bool OAIJobReleaseTask::is_retention_time_Valid() const{
    return m_retention_time_isValid;
}

bool OAIJobReleaseTask::isRunElevated() const {
    return m_run_elevated;
}
void OAIJobReleaseTask::setRunElevated(const bool &run_elevated) {
    m_run_elevated = run_elevated;
    m_run_elevated_isSet = true;
}

bool OAIJobReleaseTask::is_run_elevated_Set() const{
    return m_run_elevated_isSet;
}

bool OAIJobReleaseTask::is_run_elevated_Valid() const{
    return m_run_elevated_isValid;
}

bool OAIJobReleaseTask::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_command_line_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_environment_settings.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_wall_clock_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_files.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_retention_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_run_elevated_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIJobReleaseTask::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_command_line_isValid && true;
}

} // namespace OpenAPI
