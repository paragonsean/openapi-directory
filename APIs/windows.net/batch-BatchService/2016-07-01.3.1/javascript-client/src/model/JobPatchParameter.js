/**
 * BatchService
 * A client for issuing REST requests to the Azure Batch service.
 *
 * The version of the OpenAPI document: 2016-07-01.3.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import JobConstraints from './JobConstraints';
import MetadataItem from './MetadataItem';
import PoolInformation from './PoolInformation';

/**
 * The JobPatchParameter model module.
 * @module model/JobPatchParameter
 * @version 2016-07-01.3.1
 */
class JobPatchParameter {
    /**
     * Constructs a new <code>JobPatchParameter</code>.
     * @alias module:model/JobPatchParameter
     */
    constructor() { 
        
        JobPatchParameter.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>JobPatchParameter</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/JobPatchParameter} obj Optional instance to populate.
     * @return {module:model/JobPatchParameter} The populated <code>JobPatchParameter</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new JobPatchParameter();

            if (data.hasOwnProperty('constraints')) {
                obj['constraints'] = JobConstraints.constructFromObject(data['constraints']);
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = ApiClient.convertToType(data['metadata'], [MetadataItem]);
            }
            if (data.hasOwnProperty('onAllTasksComplete')) {
                obj['onAllTasksComplete'] = ApiClient.convertToType(data['onAllTasksComplete'], 'String');
            }
            if (data.hasOwnProperty('poolInfo')) {
                obj['poolInfo'] = PoolInformation.constructFromObject(data['poolInfo']);
            }
            if (data.hasOwnProperty('priority')) {
                obj['priority'] = ApiClient.convertToType(data['priority'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>JobPatchParameter</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>JobPatchParameter</code>.
     */
    static validateJSON(data) {
        // validate the optional field `constraints`
        if (data['constraints']) { // data not null
          JobConstraints.validateJSON(data['constraints']);
        }
        if (data['metadata']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['metadata'])) {
                throw new Error("Expected the field `metadata` to be an array in the JSON data but got " + data['metadata']);
            }
            // validate the optional field `metadata` (array)
            for (const item of data['metadata']) {
                MetadataItem.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['onAllTasksComplete'] && !(typeof data['onAllTasksComplete'] === 'string' || data['onAllTasksComplete'] instanceof String)) {
            throw new Error("Expected the field `onAllTasksComplete` to be a primitive type in the JSON string but got " + data['onAllTasksComplete']);
        }
        // validate the optional field `poolInfo`
        if (data['poolInfo']) { // data not null
          PoolInformation.validateJSON(data['poolInfo']);
        }

        return true;
    }


}



/**
 * @member {module:model/JobConstraints} constraints
 */
JobPatchParameter.prototype['constraints'] = undefined;

/**
 * If omitted, the existing job metadata is left unchanged.
 * @member {Array.<module:model/MetadataItem>} metadata
 */
JobPatchParameter.prototype['metadata'] = undefined;

/**
 * If omitted, the completion behavior is left unchanged. You may not change the value from terminateJob to noAction â€“ that is, once you have engaged automatic job termination, you cannot turn it off again. If you try to do this, the request fails with an 'invalid property value' error response; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request).
 * @member {module:model/JobPatchParameter.OnAllTasksCompleteEnum} onAllTasksComplete
 */
JobPatchParameter.prototype['onAllTasksComplete'] = undefined;

/**
 * @member {module:model/PoolInformation} poolInfo
 */
JobPatchParameter.prototype['poolInfo'] = undefined;

/**
 * Priority values can range from -1000 to 1000, with -1000 being the lowest priority and 1000 being the highest priority. If omitted, the priority of the job is left unchanged.
 * @member {Number} priority
 */
JobPatchParameter.prototype['priority'] = undefined;





/**
 * Allowed values for the <code>onAllTasksComplete</code> property.
 * @enum {String}
 * @readonly
 */
JobPatchParameter['OnAllTasksCompleteEnum'] = {

    /**
     * value: "noAction"
     * @const
     */
    "noAction": "noAction",

    /**
     * value: "terminateJob"
     * @const
     */
    "terminateJob": "terminateJob"
};



export default JobPatchParameter;

