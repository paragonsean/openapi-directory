/**
 * BatchService
 * A client for issuing REST requests to the Azure Batch service.
 *
 * The version of the OpenAPI document: 2016-07-01.3.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CertificateReference from './CertificateReference';
import ComputeNodeError from './ComputeNodeError';
import StartTask from './StartTask';
import StartTaskInformation from './StartTaskInformation';
import TaskInformation from './TaskInformation';

/**
 * The ComputeNode model module.
 * @module model/ComputeNode
 * @version 2016-07-01.3.1
 */
class ComputeNode {
    /**
     * Constructs a new <code>ComputeNode</code>.
     * @alias module:model/ComputeNode
     */
    constructor() { 
        
        ComputeNode.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ComputeNode</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ComputeNode} obj Optional instance to populate.
     * @return {module:model/ComputeNode} The populated <code>ComputeNode</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ComputeNode();

            if (data.hasOwnProperty('affinityId')) {
                obj['affinityId'] = ApiClient.convertToType(data['affinityId'], 'String');
            }
            if (data.hasOwnProperty('allocationTime')) {
                obj['allocationTime'] = ApiClient.convertToType(data['allocationTime'], 'Date');
            }
            if (data.hasOwnProperty('certificateReferences')) {
                obj['certificateReferences'] = ApiClient.convertToType(data['certificateReferences'], [CertificateReference]);
            }
            if (data.hasOwnProperty('errors')) {
                obj['errors'] = ApiClient.convertToType(data['errors'], [ComputeNodeError]);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('ipAddress')) {
                obj['ipAddress'] = ApiClient.convertToType(data['ipAddress'], 'String');
            }
            if (data.hasOwnProperty('lastBootTime')) {
                obj['lastBootTime'] = ApiClient.convertToType(data['lastBootTime'], 'Date');
            }
            if (data.hasOwnProperty('recentTasks')) {
                obj['recentTasks'] = ApiClient.convertToType(data['recentTasks'], [TaskInformation]);
            }
            if (data.hasOwnProperty('runningTasksCount')) {
                obj['runningTasksCount'] = ApiClient.convertToType(data['runningTasksCount'], 'Number');
            }
            if (data.hasOwnProperty('schedulingState')) {
                obj['schedulingState'] = ApiClient.convertToType(data['schedulingState'], 'String');
            }
            if (data.hasOwnProperty('startTask')) {
                obj['startTask'] = StartTask.constructFromObject(data['startTask']);
            }
            if (data.hasOwnProperty('startTaskInfo')) {
                obj['startTaskInfo'] = StartTaskInformation.constructFromObject(data['startTaskInfo']);
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('stateTransitionTime')) {
                obj['stateTransitionTime'] = ApiClient.convertToType(data['stateTransitionTime'], 'Date');
            }
            if (data.hasOwnProperty('totalTasksRun')) {
                obj['totalTasksRun'] = ApiClient.convertToType(data['totalTasksRun'], 'Number');
            }
            if (data.hasOwnProperty('totalTasksSucceeded')) {
                obj['totalTasksSucceeded'] = ApiClient.convertToType(data['totalTasksSucceeded'], 'Number');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
            if (data.hasOwnProperty('vmSize')) {
                obj['vmSize'] = ApiClient.convertToType(data['vmSize'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ComputeNode</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ComputeNode</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['affinityId'] && !(typeof data['affinityId'] === 'string' || data['affinityId'] instanceof String)) {
            throw new Error("Expected the field `affinityId` to be a primitive type in the JSON string but got " + data['affinityId']);
        }
        if (data['certificateReferences']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['certificateReferences'])) {
                throw new Error("Expected the field `certificateReferences` to be an array in the JSON data but got " + data['certificateReferences']);
            }
            // validate the optional field `certificateReferences` (array)
            for (const item of data['certificateReferences']) {
                CertificateReference.validateJSON(item);
            };
        }
        if (data['errors']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['errors'])) {
                throw new Error("Expected the field `errors` to be an array in the JSON data but got " + data['errors']);
            }
            // validate the optional field `errors` (array)
            for (const item of data['errors']) {
                ComputeNodeError.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['ipAddress'] && !(typeof data['ipAddress'] === 'string' || data['ipAddress'] instanceof String)) {
            throw new Error("Expected the field `ipAddress` to be a primitive type in the JSON string but got " + data['ipAddress']);
        }
        if (data['recentTasks']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['recentTasks'])) {
                throw new Error("Expected the field `recentTasks` to be an array in the JSON data but got " + data['recentTasks']);
            }
            // validate the optional field `recentTasks` (array)
            for (const item of data['recentTasks']) {
                TaskInformation.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['schedulingState'] && !(typeof data['schedulingState'] === 'string' || data['schedulingState'] instanceof String)) {
            throw new Error("Expected the field `schedulingState` to be a primitive type in the JSON string but got " + data['schedulingState']);
        }
        // validate the optional field `startTask`
        if (data['startTask']) { // data not null
          StartTask.validateJSON(data['startTask']);
        }
        // validate the optional field `startTaskInfo`
        if (data['startTaskInfo']) { // data not null
          StartTaskInformation.validateJSON(data['startTaskInfo']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }
        // ensure the json data is a string
        if (data['vmSize'] && !(typeof data['vmSize'] === 'string' || data['vmSize'] instanceof String)) {
            throw new Error("Expected the field `vmSize` to be a primitive type in the JSON string but got " + data['vmSize']);
        }

        return true;
    }


}



/**
 * @member {String} affinityId
 */
ComputeNode.prototype['affinityId'] = undefined;

/**
 * @member {Date} allocationTime
 */
ComputeNode.prototype['allocationTime'] = undefined;

/**
 * For Windows compute nodes, the Batch service installs the certificates to the specified certificate store and location. For Linux compute nodes, the certificates are stored in a directory inside the task working directory and an environment variable AZ_BATCH_CERTIFICATES_DIR is supplied to the task to query for this location. For certificates with visibility of remoteuser, a certs directory is created in the user's home directory (e.g., /home/<user-name>/certs) where certificates are placed.
 * @member {Array.<module:model/CertificateReference>} certificateReferences
 */
ComputeNode.prototype['certificateReferences'] = undefined;

/**
 * @member {Array.<module:model/ComputeNodeError>} errors
 */
ComputeNode.prototype['errors'] = undefined;

/**
 * Every node that is added to a pool is assigned a unique ID. Whenever a node is removed from a pool, all of its local files are deleted, and the ID is reclaimed and could be reused for new nodes.
 * @member {String} id
 */
ComputeNode.prototype['id'] = undefined;

/**
 * Every node that is added to a pool is assigned a unique IP address. Whenever a node is removed from a pool, all of its local files are deleted, and the IP address is reclaimed and could be reused for new nodes.
 * @member {String} ipAddress
 */
ComputeNode.prototype['ipAddress'] = undefined;

/**
 * This property may not be present if the node state is unusable.
 * @member {Date} lastBootTime
 */
ComputeNode.prototype['lastBootTime'] = undefined;

/**
 * @member {Array.<module:model/TaskInformation>} recentTasks
 */
ComputeNode.prototype['recentTasks'] = undefined;

/**
 * @member {Number} runningTasksCount
 */
ComputeNode.prototype['runningTasksCount'] = undefined;

/**
 * Possible values are: enabled – Tasks can be scheduled on the node. disabled – No new tasks will be scheduled on the node. Tasks already running on the node may still run to completion. All nodes start with scheduling enabled.
 * @member {module:model/ComputeNode.SchedulingStateEnum} schedulingState
 */
ComputeNode.prototype['schedulingState'] = undefined;

/**
 * @member {module:model/StartTask} startTask
 */
ComputeNode.prototype['startTask'] = undefined;

/**
 * @member {module:model/StartTaskInformation} startTaskInfo
 */
ComputeNode.prototype['startTaskInfo'] = undefined;

/**
 * @member {module:model/ComputeNode.StateEnum} state
 */
ComputeNode.prototype['state'] = undefined;

/**
 * @member {Date} stateTransitionTime
 */
ComputeNode.prototype['stateTransitionTime'] = undefined;

/**
 * @member {Number} totalTasksRun
 */
ComputeNode.prototype['totalTasksRun'] = undefined;

/**
 * @member {Number} totalTasksSucceeded
 */
ComputeNode.prototype['totalTasksSucceeded'] = undefined;

/**
 * @member {String} url
 */
ComputeNode.prototype['url'] = undefined;

/**
 * For information about available sizes of virtual machines for Cloud Services pools (pools created with cloudServiceConfiguration), see Sizes for Cloud Services (http://azure.microsoft.com/documentation/articles/cloud-services-sizes-specs/). Batch supports all Cloud Services VM sizes except ExtraSmall. For information about available VM sizes for pools using images from the Virtual Machines Marketplace (pools created with virtualMachineConfiguration) see Sizes for Virtual Machines (Linux) (https://azure.microsoft.com/documentation/articles/virtual-machines-linux-sizes/) or Sizes for Virtual Machines (Windows) (https://azure.microsoft.com/documentation/articles/virtual-machines-windows-sizes/). Batch supports all Azure VM sizes except STANDARD_A0 and those with premium storage (STANDARD_GS, STANDARD_DS, and STANDARD_DSV2 series).
 * @member {String} vmSize
 */
ComputeNode.prototype['vmSize'] = undefined;





/**
 * Allowed values for the <code>schedulingState</code> property.
 * @enum {String}
 * @readonly
 */
ComputeNode['SchedulingStateEnum'] = {

    /**
     * value: "enabled"
     * @const
     */
    "enabled": "enabled",

    /**
     * value: "disabled"
     * @const
     */
    "disabled": "disabled"
};


/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
ComputeNode['StateEnum'] = {

    /**
     * value: "idle"
     * @const
     */
    "idle": "idle",

    /**
     * value: "rebooting"
     * @const
     */
    "rebooting": "rebooting",

    /**
     * value: "reimaging"
     * @const
     */
    "reimaging": "reimaging",

    /**
     * value: "running"
     * @const
     */
    "running": "running",

    /**
     * value: "unusable"
     * @const
     */
    "unusable": "unusable",

    /**
     * value: "creating"
     * @const
     */
    "creating": "creating",

    /**
     * value: "starting"
     * @const
     */
    "starting": "starting",

    /**
     * value: "waitingforstarttask"
     * @const
     */
    "waitingforstarttask": "waitingforstarttask",

    /**
     * value: "starttaskfailed"
     * @const
     */
    "starttaskfailed": "starttaskfailed",

    /**
     * value: "unknown"
     * @const
     */
    "unknown": "unknown",

    /**
     * value: "leavingpool"
     * @const
     */
    "leavingpool": "leavingpool",

    /**
     * value: "offline"
     * @const
     */
    "offline": "offline"
};



export default ComputeNode;

