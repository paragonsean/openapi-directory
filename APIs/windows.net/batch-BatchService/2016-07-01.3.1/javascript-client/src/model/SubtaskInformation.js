/**
 * BatchService
 * A client for issuing REST requests to the Azure Batch service.
 *
 * The version of the OpenAPI document: 2016-07-01.3.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ComputeNodeInformation from './ComputeNodeInformation';
import TaskSchedulingError from './TaskSchedulingError';

/**
 * The SubtaskInformation model module.
 * @module model/SubtaskInformation
 * @version 2016-07-01.3.1
 */
class SubtaskInformation {
    /**
     * Constructs a new <code>SubtaskInformation</code>.
     * @alias module:model/SubtaskInformation
     */
    constructor() { 
        
        SubtaskInformation.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SubtaskInformation</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SubtaskInformation} obj Optional instance to populate.
     * @return {module:model/SubtaskInformation} The populated <code>SubtaskInformation</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SubtaskInformation();

            if (data.hasOwnProperty('endTime')) {
                obj['endTime'] = ApiClient.convertToType(data['endTime'], 'Date');
            }
            if (data.hasOwnProperty('exitCode')) {
                obj['exitCode'] = ApiClient.convertToType(data['exitCode'], 'Number');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('nodeInfo')) {
                obj['nodeInfo'] = ComputeNodeInformation.constructFromObject(data['nodeInfo']);
            }
            if (data.hasOwnProperty('previousState')) {
                obj['previousState'] = ApiClient.convertToType(data['previousState'], 'String');
            }
            if (data.hasOwnProperty('previousStateTransitionTime')) {
                obj['previousStateTransitionTime'] = ApiClient.convertToType(data['previousStateTransitionTime'], 'Date');
            }
            if (data.hasOwnProperty('schedulingError')) {
                obj['schedulingError'] = TaskSchedulingError.constructFromObject(data['schedulingError']);
            }
            if (data.hasOwnProperty('startTime')) {
                obj['startTime'] = ApiClient.convertToType(data['startTime'], 'Date');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('stateTransitionTime')) {
                obj['stateTransitionTime'] = ApiClient.convertToType(data['stateTransitionTime'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SubtaskInformation</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SubtaskInformation</code>.
     */
    static validateJSON(data) {
        // validate the optional field `nodeInfo`
        if (data['nodeInfo']) { // data not null
          ComputeNodeInformation.validateJSON(data['nodeInfo']);
        }
        // ensure the json data is a string
        if (data['previousState'] && !(typeof data['previousState'] === 'string' || data['previousState'] instanceof String)) {
            throw new Error("Expected the field `previousState` to be a primitive type in the JSON string but got " + data['previousState']);
        }
        // validate the optional field `schedulingError`
        if (data['schedulingError']) { // data not null
          TaskSchedulingError.validateJSON(data['schedulingError']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }

        return true;
    }


}



/**
 * This property is set only if the subtask is in the Completed state.
 * @member {Date} endTime
 */
SubtaskInformation.prototype['endTime'] = undefined;

/**
 * This property is set only if the subtask is in the completed state. In general, the exit code for a process reflects the specific convention implemented by the application developer for that process. If you use the exit code value to make decisions in your code, be sure that you know the exit code convention used by the application process. However, if the Batch service terminates the subtask (due to timeout, or user termination via the API) you may see an operating system-defined exit code.
 * @member {Number} exitCode
 */
SubtaskInformation.prototype['exitCode'] = undefined;

/**
 * @member {Number} id
 */
SubtaskInformation.prototype['id'] = undefined;

/**
 * @member {module:model/ComputeNodeInformation} nodeInfo
 */
SubtaskInformation.prototype['nodeInfo'] = undefined;

/**
 * This property is not set if the subtask is in its initial running state.
 * @member {module:model/SubtaskInformation.PreviousStateEnum} previousState
 */
SubtaskInformation.prototype['previousState'] = undefined;

/**
 * This property is not set if the subtask is in its initial running state.
 * @member {Date} previousStateTransitionTime
 */
SubtaskInformation.prototype['previousStateTransitionTime'] = undefined;

/**
 * @member {module:model/TaskSchedulingError} schedulingError
 */
SubtaskInformation.prototype['schedulingError'] = undefined;

/**
 * @member {Date} startTime
 */
SubtaskInformation.prototype['startTime'] = undefined;

/**
 * @member {module:model/SubtaskInformation.StateEnum} state
 */
SubtaskInformation.prototype['state'] = undefined;

/**
 * @member {Date} stateTransitionTime
 */
SubtaskInformation.prototype['stateTransitionTime'] = undefined;





/**
 * Allowed values for the <code>previousState</code> property.
 * @enum {String}
 * @readonly
 */
SubtaskInformation['PreviousStateEnum'] = {

    /**
     * value: "active"
     * @const
     */
    "active": "active",

    /**
     * value: "preparing"
     * @const
     */
    "preparing": "preparing",

    /**
     * value: "running"
     * @const
     */
    "running": "running",

    /**
     * value: "completed"
     * @const
     */
    "completed": "completed"
};


/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
SubtaskInformation['StateEnum'] = {

    /**
     * value: "active"
     * @const
     */
    "active": "active",

    /**
     * value: "preparing"
     * @const
     */
    "preparing": "preparing",

    /**
     * value: "running"
     * @const
     */
    "running": "running",

    /**
     * value: "completed"
     * @const
     */
    "completed": "completed"
};



export default SubtaskInformation;

