/**
 * BatchService
 * A client for issuing REST requests to the Azure Batch service.
 *
 * The version of the OpenAPI document: 2016-07-01.3.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EnvironmentSetting from './EnvironmentSetting';
import ResourceFile from './ResourceFile';
import TaskConstraints from './TaskConstraints';

/**
 * The JobPreparationTask model module.
 * @module model/JobPreparationTask
 * @version 2016-07-01.3.1
 */
class JobPreparationTask {
    /**
     * Constructs a new <code>JobPreparationTask</code>.
     * @alias module:model/JobPreparationTask
     * @param commandLine {String} The command line does not run under a shell, and therefore cannot take advantage of shell features such as environment variable expansion. If you want to take advantage of such features, you should invoke the shell in the command line, for example using \"cmd /c MyCommand\" in Windows or \"/bin/sh -c MyCommand\" in Linux.
     */
    constructor(commandLine) { 
        
        JobPreparationTask.initialize(this, commandLine);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, commandLine) { 
        obj['commandLine'] = commandLine;
    }

    /**
     * Constructs a <code>JobPreparationTask</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/JobPreparationTask} obj Optional instance to populate.
     * @return {module:model/JobPreparationTask} The populated <code>JobPreparationTask</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new JobPreparationTask();

            if (data.hasOwnProperty('commandLine')) {
                obj['commandLine'] = ApiClient.convertToType(data['commandLine'], 'String');
            }
            if (data.hasOwnProperty('constraints')) {
                obj['constraints'] = TaskConstraints.constructFromObject(data['constraints']);
            }
            if (data.hasOwnProperty('environmentSettings')) {
                obj['environmentSettings'] = ApiClient.convertToType(data['environmentSettings'], [EnvironmentSetting]);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('rerunOnNodeRebootAfterSuccess')) {
                obj['rerunOnNodeRebootAfterSuccess'] = ApiClient.convertToType(data['rerunOnNodeRebootAfterSuccess'], 'Boolean');
            }
            if (data.hasOwnProperty('resourceFiles')) {
                obj['resourceFiles'] = ApiClient.convertToType(data['resourceFiles'], [ResourceFile]);
            }
            if (data.hasOwnProperty('runElevated')) {
                obj['runElevated'] = ApiClient.convertToType(data['runElevated'], 'Boolean');
            }
            if (data.hasOwnProperty('waitForSuccess')) {
                obj['waitForSuccess'] = ApiClient.convertToType(data['waitForSuccess'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>JobPreparationTask</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>JobPreparationTask</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of JobPreparationTask.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['commandLine'] && !(typeof data['commandLine'] === 'string' || data['commandLine'] instanceof String)) {
            throw new Error("Expected the field `commandLine` to be a primitive type in the JSON string but got " + data['commandLine']);
        }
        // validate the optional field `constraints`
        if (data['constraints']) { // data not null
          TaskConstraints.validateJSON(data['constraints']);
        }
        if (data['environmentSettings']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['environmentSettings'])) {
                throw new Error("Expected the field `environmentSettings` to be an array in the JSON data but got " + data['environmentSettings']);
            }
            // validate the optional field `environmentSettings` (array)
            for (const item of data['environmentSettings']) {
                EnvironmentSetting.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        if (data['resourceFiles']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['resourceFiles'])) {
                throw new Error("Expected the field `resourceFiles` to be an array in the JSON data but got " + data['resourceFiles']);
            }
            // validate the optional field `resourceFiles` (array)
            for (const item of data['resourceFiles']) {
                ResourceFile.validateJSON(item);
            };
        }

        return true;
    }


}

JobPreparationTask.RequiredProperties = ["commandLine"];

/**
 * The command line does not run under a shell, and therefore cannot take advantage of shell features such as environment variable expansion. If you want to take advantage of such features, you should invoke the shell in the command line, for example using \"cmd /c MyCommand\" in Windows or \"/bin/sh -c MyCommand\" in Linux.
 * @member {String} commandLine
 */
JobPreparationTask.prototype['commandLine'] = undefined;

/**
 * @member {module:model/TaskConstraints} constraints
 */
JobPreparationTask.prototype['constraints'] = undefined;

/**
 * @member {Array.<module:model/EnvironmentSetting>} environmentSettings
 */
JobPreparationTask.prototype['environmentSettings'] = undefined;

/**
 * The ID can contain any combination of alphanumeric characters including hyphens and underscores and cannot contain more than 64 characters. If you do not specify this property, the Batch service assigns a default value of 'jobpreparation'. No other task in the job can have the same id as the Job Preparation task. If you try to submit a task with the same id, the Batch service rejects the request with error code TaskIdSameAsJobPreparationTask; if you are calling the REST API directly, the HTTP status code is 409 (Conflict).
 * @member {String} id
 */
JobPreparationTask.prototype['id'] = undefined;

/**
 * The Job Preparation task is always rerun if a compute node is reimaged, or if the Job Preparation task did not complete (e.g. because the reboot occurred while the task was running). Therefore, you should always write a Job Preparation task to be idempotent and to behave correctly if run multiple times. The default value is true.
 * @member {Boolean} rerunOnNodeRebootAfterSuccess
 */
JobPreparationTask.prototype['rerunOnNodeRebootAfterSuccess'] = undefined;

/**
 * Files listed under this element are located in the task's working directory.
 * @member {Array.<module:model/ResourceFile>} resourceFiles
 */
JobPreparationTask.prototype['resourceFiles'] = undefined;

/**
 * @member {Boolean} runElevated
 */
JobPreparationTask.prototype['runElevated'] = undefined;

/**
 * If true and the Job Preparation task fails on a compute node, the Batch service retries the Job Preparation task up to its maximum retry count (as specified in the constraints element). If the task has still not completed successfully after all retries, then the Batch service will not schedule tasks of the job to the compute node. The compute node remains active and eligible to run tasks of other jobs. If false, the Batch service will not wait for the Job Preparation task to complete. In this case, other tasks of the job can start executing on the compute node while the Job Preparation task is still running; and even if the Job Preparation task fails, new tasks will continue to be scheduled on the node. The default value is true.
 * @member {Boolean} waitForSuccess
 */
JobPreparationTask.prototype['waitForSuccess'] = undefined;






export default JobPreparationTask;

