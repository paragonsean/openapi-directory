/**
 * BatchService
 * A client for issuing REST requests to the Azure Batch service.
 *
 * The version of the OpenAPI document: 2016-07-01.3.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import TaskSchedulingError from './TaskSchedulingError';

/**
 * The JobReleaseTaskExecutionInformation model module.
 * @module model/JobReleaseTaskExecutionInformation
 * @version 2016-07-01.3.1
 */
class JobReleaseTaskExecutionInformation {
    /**
     * Constructs a new <code>JobReleaseTaskExecutionInformation</code>.
     * @alias module:model/JobReleaseTaskExecutionInformation
     * @param startTime {Date} 
     * @param state {module:model/JobReleaseTaskExecutionInformation.StateEnum} Possible values are: running – the task is currently running (including retrying). completed – the task has exited, or the Batch service was unable to start the task due to scheduling errors.
     */
    constructor(startTime, state) { 
        
        JobReleaseTaskExecutionInformation.initialize(this, startTime, state);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, startTime, state) { 
        obj['startTime'] = startTime;
        obj['state'] = state;
    }

    /**
     * Constructs a <code>JobReleaseTaskExecutionInformation</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/JobReleaseTaskExecutionInformation} obj Optional instance to populate.
     * @return {module:model/JobReleaseTaskExecutionInformation} The populated <code>JobReleaseTaskExecutionInformation</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new JobReleaseTaskExecutionInformation();

            if (data.hasOwnProperty('endTime')) {
                obj['endTime'] = ApiClient.convertToType(data['endTime'], 'Date');
            }
            if (data.hasOwnProperty('exitCode')) {
                obj['exitCode'] = ApiClient.convertToType(data['exitCode'], 'Number');
            }
            if (data.hasOwnProperty('schedulingError')) {
                obj['schedulingError'] = TaskSchedulingError.constructFromObject(data['schedulingError']);
            }
            if (data.hasOwnProperty('startTime')) {
                obj['startTime'] = ApiClient.convertToType(data['startTime'], 'Date');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('taskRootDirectory')) {
                obj['taskRootDirectory'] = ApiClient.convertToType(data['taskRootDirectory'], 'String');
            }
            if (data.hasOwnProperty('taskRootDirectoryUrl')) {
                obj['taskRootDirectoryUrl'] = ApiClient.convertToType(data['taskRootDirectoryUrl'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>JobReleaseTaskExecutionInformation</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>JobReleaseTaskExecutionInformation</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of JobReleaseTaskExecutionInformation.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `schedulingError`
        if (data['schedulingError']) { // data not null
          TaskSchedulingError.validateJSON(data['schedulingError']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // ensure the json data is a string
        if (data['taskRootDirectory'] && !(typeof data['taskRootDirectory'] === 'string' || data['taskRootDirectory'] instanceof String)) {
            throw new Error("Expected the field `taskRootDirectory` to be a primitive type in the JSON string but got " + data['taskRootDirectory']);
        }
        // ensure the json data is a string
        if (data['taskRootDirectoryUrl'] && !(typeof data['taskRootDirectoryUrl'] === 'string' || data['taskRootDirectoryUrl'] instanceof String)) {
            throw new Error("Expected the field `taskRootDirectoryUrl` to be a primitive type in the JSON string but got " + data['taskRootDirectoryUrl']);
        }

        return true;
    }


}

JobReleaseTaskExecutionInformation.RequiredProperties = ["startTime", "state"];

/**
 * This property is set only if the task is in the Completed state.
 * @member {Date} endTime
 */
JobReleaseTaskExecutionInformation.prototype['endTime'] = undefined;

/**
 * This parameter is returned only if the task is in the completed state. The exit code for a process reflects the specific convention implemented by the application developer for that process. If you use the exit code value to make decisions in your code, be sure that you know the exit code convention used by the application process. Note that the exit code may also be generated by the compute node operating system, such as when a process is forcibly terminated.
 * @member {Number} exitCode
 */
JobReleaseTaskExecutionInformation.prototype['exitCode'] = undefined;

/**
 * @member {module:model/TaskSchedulingError} schedulingError
 */
JobReleaseTaskExecutionInformation.prototype['schedulingError'] = undefined;

/**
 * @member {Date} startTime
 */
JobReleaseTaskExecutionInformation.prototype['startTime'] = undefined;

/**
 * Possible values are: running – the task is currently running (including retrying). completed – the task has exited, or the Batch service was unable to start the task due to scheduling errors.
 * @member {module:model/JobReleaseTaskExecutionInformation.StateEnum} state
 */
JobReleaseTaskExecutionInformation.prototype['state'] = undefined;

/**
 * @member {String} taskRootDirectory
 */
JobReleaseTaskExecutionInformation.prototype['taskRootDirectory'] = undefined;

/**
 * @member {String} taskRootDirectoryUrl
 */
JobReleaseTaskExecutionInformation.prototype['taskRootDirectoryUrl'] = undefined;





/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
JobReleaseTaskExecutionInformation['StateEnum'] = {

    /**
     * value: "running"
     * @const
     */
    "running": "running",

    /**
     * value: "completed"
     * @const
     */
    "completed": "completed"
};



export default JobReleaseTaskExecutionInformation;

