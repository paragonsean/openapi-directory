# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.name_value_pair import NameValuePair
from openapi_server import util


class TaskSchedulingError(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, category: str=None, code: str=None, details: List[NameValuePair]=None, message: str=None):
        """TaskSchedulingError - a model defined in OpenAPI

        :param category: The category of this TaskSchedulingError.
        :param code: The code of this TaskSchedulingError.
        :param details: The details of this TaskSchedulingError.
        :param message: The message of this TaskSchedulingError.
        """
        self.openapi_types = {
            'category': str,
            'code': str,
            'details': List[NameValuePair],
            'message': str
        }

        self.attribute_map = {
            'category': 'category',
            'code': 'code',
            'details': 'details',
            'message': 'message'
        }

        self._category = category
        self._code = code
        self._details = details
        self._message = message

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TaskSchedulingError':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TaskSchedulingError of this TaskSchedulingError.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def category(self):
        """Gets the category of this TaskSchedulingError.

        Gets or sets the category of the task scheduling error.

        :return: The category of this TaskSchedulingError.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this TaskSchedulingError.

        Gets or sets the category of the task scheduling error.

        :param category: The category of this TaskSchedulingError.
        :type category: str
        """
        allowed_values = ["usererror", "servererror", "unmapped"]  # noqa: E501
        if category not in allowed_values:
            raise ValueError(
                "Invalid value for `category` ({0}), must be one of {1}"
                .format(category, allowed_values)
            )

        self._category = category

    @property
    def code(self):
        """Gets the code of this TaskSchedulingError.

        Gets or sets an identifier for the task scheduling error.  Codes are invariant and are intended to be consumed programmatically.

        :return: The code of this TaskSchedulingError.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this TaskSchedulingError.

        Gets or sets an identifier for the task scheduling error.  Codes are invariant and are intended to be consumed programmatically.

        :param code: The code of this TaskSchedulingError.
        :type code: str
        """

        self._code = code

    @property
    def details(self):
        """Gets the details of this TaskSchedulingError.

        Gets or sets the list of additional error details related to the scheduling error.

        :return: The details of this TaskSchedulingError.
        :rtype: List[NameValuePair]
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this TaskSchedulingError.

        Gets or sets the list of additional error details related to the scheduling error.

        :param details: The details of this TaskSchedulingError.
        :type details: List[NameValuePair]
        """

        self._details = details

    @property
    def message(self):
        """Gets the message of this TaskSchedulingError.

        Gets or sets a message describing the task scheduling error, intended to be suitable for display in a user interface.

        :return: The message of this TaskSchedulingError.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this TaskSchedulingError.

        Gets or sets a message describing the task scheduling error, intended to be suitable for display in a user interface.

        :param message: The message of this TaskSchedulingError.
        :type message: str
        """

        self._message = message
