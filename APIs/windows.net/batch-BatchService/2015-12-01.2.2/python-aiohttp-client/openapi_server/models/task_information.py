# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.task_execution_information import TaskExecutionInformation
from openapi_server import util


class TaskInformation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, execution_info: TaskExecutionInformation=None, job_id: str=None, subtask_id: int=None, task_id: str=None, task_state: str=None, task_url: str=None):
        """TaskInformation - a model defined in OpenAPI

        :param execution_info: The execution_info of this TaskInformation.
        :param job_id: The job_id of this TaskInformation.
        :param subtask_id: The subtask_id of this TaskInformation.
        :param task_id: The task_id of this TaskInformation.
        :param task_state: The task_state of this TaskInformation.
        :param task_url: The task_url of this TaskInformation.
        """
        self.openapi_types = {
            'execution_info': TaskExecutionInformation,
            'job_id': str,
            'subtask_id': int,
            'task_id': str,
            'task_state': str,
            'task_url': str
        }

        self.attribute_map = {
            'execution_info': 'executionInfo',
            'job_id': 'jobId',
            'subtask_id': 'subtaskId',
            'task_id': 'taskId',
            'task_state': 'taskState',
            'task_url': 'taskUrl'
        }

        self._execution_info = execution_info
        self._job_id = job_id
        self._subtask_id = subtask_id
        self._task_id = task_id
        self._task_state = task_state
        self._task_url = task_url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TaskInformation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TaskInformation of this TaskInformation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def execution_info(self):
        """Gets the execution_info of this TaskInformation.


        :return: The execution_info of this TaskInformation.
        :rtype: TaskExecutionInformation
        """
        return self._execution_info

    @execution_info.setter
    def execution_info(self, execution_info):
        """Sets the execution_info of this TaskInformation.


        :param execution_info: The execution_info of this TaskInformation.
        :type execution_info: TaskExecutionInformation
        """

        self._execution_info = execution_info

    @property
    def job_id(self):
        """Gets the job_id of this TaskInformation.

        Gets or sets the id of the job to which the task belongs.

        :return: The job_id of this TaskInformation.
        :rtype: str
        """
        return self._job_id

    @job_id.setter
    def job_id(self, job_id):
        """Sets the job_id of this TaskInformation.

        Gets or sets the id of the job to which the task belongs.

        :param job_id: The job_id of this TaskInformation.
        :type job_id: str
        """

        self._job_id = job_id

    @property
    def subtask_id(self):
        """Gets the subtask_id of this TaskInformation.

        Gets or sets the id of the subtask if the task is a multi-instance task.

        :return: The subtask_id of this TaskInformation.
        :rtype: int
        """
        return self._subtask_id

    @subtask_id.setter
    def subtask_id(self, subtask_id):
        """Sets the subtask_id of this TaskInformation.

        Gets or sets the id of the subtask if the task is a multi-instance task.

        :param subtask_id: The subtask_id of this TaskInformation.
        :type subtask_id: int
        """

        self._subtask_id = subtask_id

    @property
    def task_id(self):
        """Gets the task_id of this TaskInformation.

        Gets or sets the id of the task.

        :return: The task_id of this TaskInformation.
        :rtype: str
        """
        return self._task_id

    @task_id.setter
    def task_id(self, task_id):
        """Sets the task_id of this TaskInformation.

        Gets or sets the id of the task.

        :param task_id: The task_id of this TaskInformation.
        :type task_id: str
        """

        self._task_id = task_id

    @property
    def task_state(self):
        """Gets the task_state of this TaskInformation.

        Gets or sets the current state of the task.

        :return: The task_state of this TaskInformation.
        :rtype: str
        """
        return self._task_state

    @task_state.setter
    def task_state(self, task_state):
        """Sets the task_state of this TaskInformation.

        Gets or sets the current state of the task.

        :param task_state: The task_state of this TaskInformation.
        :type task_state: str
        """
        allowed_values = ["active", "preparing", "running", "completed"]  # noqa: E501
        if task_state not in allowed_values:
            raise ValueError(
                "Invalid value for `task_state` ({0}), must be one of {1}"
                .format(task_state, allowed_values)
            )

        self._task_state = task_state

    @property
    def task_url(self):
        """Gets the task_url of this TaskInformation.

        Gets or sets the URL of the task.

        :return: The task_url of this TaskInformation.
        :rtype: str
        """
        return self._task_url

    @task_url.setter
    def task_url(self, task_url):
        """Sets the task_url of this TaskInformation.

        Gets or sets the URL of the task.

        :param task_url: The task_url of this TaskInformation.
        :type task_url: str
        """

        self._task_url = task_url
