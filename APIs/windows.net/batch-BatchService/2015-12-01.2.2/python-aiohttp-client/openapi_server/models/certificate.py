# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.delete_certificate_error import DeleteCertificateError
from openapi_server import util


class Certificate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, delete_certificate_error: DeleteCertificateError=None, previous_state: str=None, previous_state_transition_time: datetime=None, public_data: str=None, state: str=None, state_transition_time: datetime=None, thumbprint: str=None, thumbprint_algorithm: str=None, url: str=None):
        """Certificate - a model defined in OpenAPI

        :param delete_certificate_error: The delete_certificate_error of this Certificate.
        :param previous_state: The previous_state of this Certificate.
        :param previous_state_transition_time: The previous_state_transition_time of this Certificate.
        :param public_data: The public_data of this Certificate.
        :param state: The state of this Certificate.
        :param state_transition_time: The state_transition_time of this Certificate.
        :param thumbprint: The thumbprint of this Certificate.
        :param thumbprint_algorithm: The thumbprint_algorithm of this Certificate.
        :param url: The url of this Certificate.
        """
        self.openapi_types = {
            'delete_certificate_error': DeleteCertificateError,
            'previous_state': str,
            'previous_state_transition_time': datetime,
            'public_data': str,
            'state': str,
            'state_transition_time': datetime,
            'thumbprint': str,
            'thumbprint_algorithm': str,
            'url': str
        }

        self.attribute_map = {
            'delete_certificate_error': 'deleteCertificateError',
            'previous_state': 'previousState',
            'previous_state_transition_time': 'previousStateTransitionTime',
            'public_data': 'publicData',
            'state': 'state',
            'state_transition_time': 'stateTransitionTime',
            'thumbprint': 'thumbprint',
            'thumbprint_algorithm': 'thumbprintAlgorithm',
            'url': 'url'
        }

        self._delete_certificate_error = delete_certificate_error
        self._previous_state = previous_state
        self._previous_state_transition_time = previous_state_transition_time
        self._public_data = public_data
        self._state = state
        self._state_transition_time = state_transition_time
        self._thumbprint = thumbprint
        self._thumbprint_algorithm = thumbprint_algorithm
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Certificate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Certificate of this Certificate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def delete_certificate_error(self):
        """Gets the delete_certificate_error of this Certificate.


        :return: The delete_certificate_error of this Certificate.
        :rtype: DeleteCertificateError
        """
        return self._delete_certificate_error

    @delete_certificate_error.setter
    def delete_certificate_error(self, delete_certificate_error):
        """Sets the delete_certificate_error of this Certificate.


        :param delete_certificate_error: The delete_certificate_error of this Certificate.
        :type delete_certificate_error: DeleteCertificateError
        """

        self._delete_certificate_error = delete_certificate_error

    @property
    def previous_state(self):
        """Gets the previous_state of this Certificate.

        Gets or sets the previous state of the certificate. This property is not set if the certificate is in its initial Active state.

        :return: The previous_state of this Certificate.
        :rtype: str
        """
        return self._previous_state

    @previous_state.setter
    def previous_state(self, previous_state):
        """Sets the previous_state of this Certificate.

        Gets or sets the previous state of the certificate. This property is not set if the certificate is in its initial Active state.

        :param previous_state: The previous_state of this Certificate.
        :type previous_state: str
        """
        allowed_values = ["active", "deleting", "deletefailed"]  # noqa: E501
        if previous_state not in allowed_values:
            raise ValueError(
                "Invalid value for `previous_state` ({0}), must be one of {1}"
                .format(previous_state, allowed_values)
            )

        self._previous_state = previous_state

    @property
    def previous_state_transition_time(self):
        """Gets the previous_state_transition_time of this Certificate.

        Gets or sets the time at which the certificate entered its previous state.  This property is not set if the certificate is in its initial Active state.

        :return: The previous_state_transition_time of this Certificate.
        :rtype: datetime
        """
        return self._previous_state_transition_time

    @previous_state_transition_time.setter
    def previous_state_transition_time(self, previous_state_transition_time):
        """Sets the previous_state_transition_time of this Certificate.

        Gets or sets the time at which the certificate entered its previous state.  This property is not set if the certificate is in its initial Active state.

        :param previous_state_transition_time: The previous_state_transition_time of this Certificate.
        :type previous_state_transition_time: datetime
        """

        self._previous_state_transition_time = previous_state_transition_time

    @property
    def public_data(self):
        """Gets the public_data of this Certificate.

        Gets or sets the public part of the certificate as a base-64 encoded .cer file.

        :return: The public_data of this Certificate.
        :rtype: str
        """
        return self._public_data

    @public_data.setter
    def public_data(self, public_data):
        """Sets the public_data of this Certificate.

        Gets or sets the public part of the certificate as a base-64 encoded .cer file.

        :param public_data: The public_data of this Certificate.
        :type public_data: str
        """

        self._public_data = public_data

    @property
    def state(self):
        """Gets the state of this Certificate.

        Gets or sets the current state of the certificate.

        :return: The state of this Certificate.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Certificate.

        Gets or sets the current state of the certificate.

        :param state: The state of this Certificate.
        :type state: str
        """
        allowed_values = ["active", "deleting", "deletefailed"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def state_transition_time(self):
        """Gets the state_transition_time of this Certificate.

        Gets or sets the time at which the certificate entered its current state.

        :return: The state_transition_time of this Certificate.
        :rtype: datetime
        """
        return self._state_transition_time

    @state_transition_time.setter
    def state_transition_time(self, state_transition_time):
        """Sets the state_transition_time of this Certificate.

        Gets or sets the time at which the certificate entered its current state.

        :param state_transition_time: The state_transition_time of this Certificate.
        :type state_transition_time: datetime
        """

        self._state_transition_time = state_transition_time

    @property
    def thumbprint(self):
        """Gets the thumbprint of this Certificate.

        Get or sets the X.509 thumbprint of the certificate. This is a sequence of up to 40 hex digits (it may include spaces but these are removed).

        :return: The thumbprint of this Certificate.
        :rtype: str
        """
        return self._thumbprint

    @thumbprint.setter
    def thumbprint(self, thumbprint):
        """Sets the thumbprint of this Certificate.

        Get or sets the X.509 thumbprint of the certificate. This is a sequence of up to 40 hex digits (it may include spaces but these are removed).

        :param thumbprint: The thumbprint of this Certificate.
        :type thumbprint: str
        """

        self._thumbprint = thumbprint

    @property
    def thumbprint_algorithm(self):
        """Gets the thumbprint_algorithm of this Certificate.

        Gets or sets the algorithm used to derive the thumbprint. This must be sha1.

        :return: The thumbprint_algorithm of this Certificate.
        :rtype: str
        """
        return self._thumbprint_algorithm

    @thumbprint_algorithm.setter
    def thumbprint_algorithm(self, thumbprint_algorithm):
        """Sets the thumbprint_algorithm of this Certificate.

        Gets or sets the algorithm used to derive the thumbprint. This must be sha1.

        :param thumbprint_algorithm: The thumbprint_algorithm of this Certificate.
        :type thumbprint_algorithm: str
        """

        self._thumbprint_algorithm = thumbprint_algorithm

    @property
    def url(self):
        """Gets the url of this Certificate.

        Gets or sets the URL of the certificate.

        :return: The url of this Certificate.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Certificate.

        Gets or sets the URL of the certificate.

        :param url: The url of this Certificate.
        :type url: str
        """

        self._url = url
