# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ComputeNodeUser(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, expiry_time: datetime=None, is_admin: bool=None, name: str=None, password: str=None):
        """ComputeNodeUser - a model defined in OpenAPI

        :param expiry_time: The expiry_time of this ComputeNodeUser.
        :param is_admin: The is_admin of this ComputeNodeUser.
        :param name: The name of this ComputeNodeUser.
        :param password: The password of this ComputeNodeUser.
        """
        self.openapi_types = {
            'expiry_time': datetime,
            'is_admin': bool,
            'name': str,
            'password': str
        }

        self.attribute_map = {
            'expiry_time': 'expiryTime',
            'is_admin': 'isAdmin',
            'name': 'name',
            'password': 'password'
        }

        self._expiry_time = expiry_time
        self._is_admin = is_admin
        self._name = name
        self._password = password

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ComputeNodeUser':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ComputeNodeUser of this ComputeNodeUser.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def expiry_time(self):
        """Gets the expiry_time of this ComputeNodeUser.

        Gets or sets the time at which the account should expire. If omitted, the default is 1 day from the current time.

        :return: The expiry_time of this ComputeNodeUser.
        :rtype: datetime
        """
        return self._expiry_time

    @expiry_time.setter
    def expiry_time(self, expiry_time):
        """Sets the expiry_time of this ComputeNodeUser.

        Gets or sets the time at which the account should expire. If omitted, the default is 1 day from the current time.

        :param expiry_time: The expiry_time of this ComputeNodeUser.
        :type expiry_time: datetime
        """

        self._expiry_time = expiry_time

    @property
    def is_admin(self):
        """Gets the is_admin of this ComputeNodeUser.

        Gets or sets whether the account should be an administrator on the compute node.

        :return: The is_admin of this ComputeNodeUser.
        :rtype: bool
        """
        return self._is_admin

    @is_admin.setter
    def is_admin(self, is_admin):
        """Sets the is_admin of this ComputeNodeUser.

        Gets or sets whether the account should be an administrator on the compute node.

        :param is_admin: The is_admin of this ComputeNodeUser.
        :type is_admin: bool
        """

        self._is_admin = is_admin

    @property
    def name(self):
        """Gets the name of this ComputeNodeUser.

        Gets or sets the user name of the account.

        :return: The name of this ComputeNodeUser.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ComputeNodeUser.

        Gets or sets the user name of the account.

        :param name: The name of this ComputeNodeUser.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def password(self):
        """Gets the password of this ComputeNodeUser.

        Gets or sets the password of the account.

        :return: The password of this ComputeNodeUser.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this ComputeNodeUser.

        Gets or sets the password of the account.

        :param password: The password of this ComputeNodeUser.
        :type password: str
        """
        if password is None:
            raise ValueError("Invalid value for `password`, must not be `None`")

        self._password = password
