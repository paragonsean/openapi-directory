# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.resource_file import ResourceFile
from openapi_server import util


class MultiInstanceSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, common_resource_files: List[ResourceFile]=None, coordination_command_line: str=None, number_of_instances: int=None):
        """MultiInstanceSettings - a model defined in OpenAPI

        :param common_resource_files: The common_resource_files of this MultiInstanceSettings.
        :param coordination_command_line: The coordination_command_line of this MultiInstanceSettings.
        :param number_of_instances: The number_of_instances of this MultiInstanceSettings.
        """
        self.openapi_types = {
            'common_resource_files': List[ResourceFile],
            'coordination_command_line': str,
            'number_of_instances': int
        }

        self.attribute_map = {
            'common_resource_files': 'commonResourceFiles',
            'coordination_command_line': 'coordinationCommandLine',
            'number_of_instances': 'numberOfInstances'
        }

        self._common_resource_files = common_resource_files
        self._coordination_command_line = coordination_command_line
        self._number_of_instances = number_of_instances

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MultiInstanceSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MultiInstanceSettings of this MultiInstanceSettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def common_resource_files(self):
        """Gets the common_resource_files of this MultiInstanceSettings.

        Gets or sets a list of files that Batch will download on all subtasks.

        :return: The common_resource_files of this MultiInstanceSettings.
        :rtype: List[ResourceFile]
        """
        return self._common_resource_files

    @common_resource_files.setter
    def common_resource_files(self, common_resource_files):
        """Sets the common_resource_files of this MultiInstanceSettings.

        Gets or sets a list of files that Batch will download on all subtasks.

        :param common_resource_files: The common_resource_files of this MultiInstanceSettings.
        :type common_resource_files: List[ResourceFile]
        """

        self._common_resource_files = common_resource_files

    @property
    def coordination_command_line(self):
        """Gets the coordination_command_line of this MultiInstanceSettings.

        Gets or sets the command to be run on the compute node instances to setup coordination among the subtasks.

        :return: The coordination_command_line of this MultiInstanceSettings.
        :rtype: str
        """
        return self._coordination_command_line

    @coordination_command_line.setter
    def coordination_command_line(self, coordination_command_line):
        """Sets the coordination_command_line of this MultiInstanceSettings.

        Gets or sets the command to be run on the compute node instances to setup coordination among the subtasks.

        :param coordination_command_line: The coordination_command_line of this MultiInstanceSettings.
        :type coordination_command_line: str
        """

        self._coordination_command_line = coordination_command_line

    @property
    def number_of_instances(self):
        """Gets the number_of_instances of this MultiInstanceSettings.

        Gets or sets the number of compute node instances used for multi-instance task.

        :return: The number_of_instances of this MultiInstanceSettings.
        :rtype: int
        """
        return self._number_of_instances

    @number_of_instances.setter
    def number_of_instances(self, number_of_instances):
        """Sets the number_of_instances of this MultiInstanceSettings.

        Gets or sets the number of compute node instances used for multi-instance task.

        :param number_of_instances: The number_of_instances of this MultiInstanceSettings.
        :type number_of_instances: int
        """
        if number_of_instances is None:
            raise ValueError("Invalid value for `number_of_instances`, must not be `None`")

        self._number_of_instances = number_of_instances
