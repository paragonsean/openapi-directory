# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class JobScheduleStatistics(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, kernel_cpu_time: str=None, last_update_time: datetime=None, num_failed_tasks: int=None, num_succeeded_tasks: int=None, num_task_retries: int=None, read_iogi_b: float=None, read_i_ops: int=None, start_time: datetime=None, url: str=None, user_cpu_time: str=None, wait_time: str=None, wall_clock_time: str=None, write_iogi_b: float=None, write_i_ops: int=None):
        """JobScheduleStatistics - a model defined in OpenAPI

        :param kernel_cpu_time: The kernel_cpu_time of this JobScheduleStatistics.
        :param last_update_time: The last_update_time of this JobScheduleStatistics.
        :param num_failed_tasks: The num_failed_tasks of this JobScheduleStatistics.
        :param num_succeeded_tasks: The num_succeeded_tasks of this JobScheduleStatistics.
        :param num_task_retries: The num_task_retries of this JobScheduleStatistics.
        :param read_iogi_b: The read_iogi_b of this JobScheduleStatistics.
        :param read_i_ops: The read_i_ops of this JobScheduleStatistics.
        :param start_time: The start_time of this JobScheduleStatistics.
        :param url: The url of this JobScheduleStatistics.
        :param user_cpu_time: The user_cpu_time of this JobScheduleStatistics.
        :param wait_time: The wait_time of this JobScheduleStatistics.
        :param wall_clock_time: The wall_clock_time of this JobScheduleStatistics.
        :param write_iogi_b: The write_iogi_b of this JobScheduleStatistics.
        :param write_i_ops: The write_i_ops of this JobScheduleStatistics.
        """
        self.openapi_types = {
            'kernel_cpu_time': str,
            'last_update_time': datetime,
            'num_failed_tasks': int,
            'num_succeeded_tasks': int,
            'num_task_retries': int,
            'read_iogi_b': float,
            'read_i_ops': int,
            'start_time': datetime,
            'url': str,
            'user_cpu_time': str,
            'wait_time': str,
            'wall_clock_time': str,
            'write_iogi_b': float,
            'write_i_ops': int
        }

        self.attribute_map = {
            'kernel_cpu_time': 'kernelCPUTime',
            'last_update_time': 'lastUpdateTime',
            'num_failed_tasks': 'numFailedTasks',
            'num_succeeded_tasks': 'numSucceededTasks',
            'num_task_retries': 'numTaskRetries',
            'read_iogi_b': 'readIOGiB',
            'read_i_ops': 'readIOps',
            'start_time': 'startTime',
            'url': 'url',
            'user_cpu_time': 'userCPUTime',
            'wait_time': 'waitTime',
            'wall_clock_time': 'wallClockTime',
            'write_iogi_b': 'writeIOGiB',
            'write_i_ops': 'writeIOps'
        }

        self._kernel_cpu_time = kernel_cpu_time
        self._last_update_time = last_update_time
        self._num_failed_tasks = num_failed_tasks
        self._num_succeeded_tasks = num_succeeded_tasks
        self._num_task_retries = num_task_retries
        self._read_iogi_b = read_iogi_b
        self._read_i_ops = read_i_ops
        self._start_time = start_time
        self._url = url
        self._user_cpu_time = user_cpu_time
        self._wait_time = wait_time
        self._wall_clock_time = wall_clock_time
        self._write_iogi_b = write_iogi_b
        self._write_i_ops = write_i_ops

    @classmethod
    def from_dict(cls, dikt: dict) -> 'JobScheduleStatistics':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The JobScheduleStatistics of this JobScheduleStatistics.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def kernel_cpu_time(self):
        """Gets the kernel_cpu_time of this JobScheduleStatistics.

        Gets or sets the total kernel mode CPU time (summed across all cores and all compute nodes) consumed by all the tasks in all the jobs created under the schedule.

        :return: The kernel_cpu_time of this JobScheduleStatistics.
        :rtype: str
        """
        return self._kernel_cpu_time

    @kernel_cpu_time.setter
    def kernel_cpu_time(self, kernel_cpu_time):
        """Sets the kernel_cpu_time of this JobScheduleStatistics.

        Gets or sets the total kernel mode CPU time (summed across all cores and all compute nodes) consumed by all the tasks in all the jobs created under the schedule.

        :param kernel_cpu_time: The kernel_cpu_time of this JobScheduleStatistics.
        :type kernel_cpu_time: str
        """
        if kernel_cpu_time is None:
            raise ValueError("Invalid value for `kernel_cpu_time`, must not be `None`")

        self._kernel_cpu_time = kernel_cpu_time

    @property
    def last_update_time(self):
        """Gets the last_update_time of this JobScheduleStatistics.

        Gets or sets the time at which the statistics were last updated. All statistics are limited to the range between startTime and lastUpdateTime.

        :return: The last_update_time of this JobScheduleStatistics.
        :rtype: datetime
        """
        return self._last_update_time

    @last_update_time.setter
    def last_update_time(self, last_update_time):
        """Sets the last_update_time of this JobScheduleStatistics.

        Gets or sets the time at which the statistics were last updated. All statistics are limited to the range between startTime and lastUpdateTime.

        :param last_update_time: The last_update_time of this JobScheduleStatistics.
        :type last_update_time: datetime
        """
        if last_update_time is None:
            raise ValueError("Invalid value for `last_update_time`, must not be `None`")

        self._last_update_time = last_update_time

    @property
    def num_failed_tasks(self):
        """Gets the num_failed_tasks of this JobScheduleStatistics.

        Gets or sets the total number of tasks that failed during the given time range in jobs created under the schedule. A task fails if it exhausts its maximum retry count without returning exit code 0.

        :return: The num_failed_tasks of this JobScheduleStatistics.
        :rtype: int
        """
        return self._num_failed_tasks

    @num_failed_tasks.setter
    def num_failed_tasks(self, num_failed_tasks):
        """Sets the num_failed_tasks of this JobScheduleStatistics.

        Gets or sets the total number of tasks that failed during the given time range in jobs created under the schedule. A task fails if it exhausts its maximum retry count without returning exit code 0.

        :param num_failed_tasks: The num_failed_tasks of this JobScheduleStatistics.
        :type num_failed_tasks: int
        """
        if num_failed_tasks is None:
            raise ValueError("Invalid value for `num_failed_tasks`, must not be `None`")

        self._num_failed_tasks = num_failed_tasks

    @property
    def num_succeeded_tasks(self):
        """Gets the num_succeeded_tasks of this JobScheduleStatistics.

        Gets or sets the total number of tasks successfully completed during the given time range in jobs created under the schedule.  A task completes successfully if it returns exit code 0.

        :return: The num_succeeded_tasks of this JobScheduleStatistics.
        :rtype: int
        """
        return self._num_succeeded_tasks

    @num_succeeded_tasks.setter
    def num_succeeded_tasks(self, num_succeeded_tasks):
        """Sets the num_succeeded_tasks of this JobScheduleStatistics.

        Gets or sets the total number of tasks successfully completed during the given time range in jobs created under the schedule.  A task completes successfully if it returns exit code 0.

        :param num_succeeded_tasks: The num_succeeded_tasks of this JobScheduleStatistics.
        :type num_succeeded_tasks: int
        """
        if num_succeeded_tasks is None:
            raise ValueError("Invalid value for `num_succeeded_tasks`, must not be `None`")

        self._num_succeeded_tasks = num_succeeded_tasks

    @property
    def num_task_retries(self):
        """Gets the num_task_retries of this JobScheduleStatistics.

        Gets or sets the total number of retries during the given time range on all the tasks in jobs created under the schedule.

        :return: The num_task_retries of this JobScheduleStatistics.
        :rtype: int
        """
        return self._num_task_retries

    @num_task_retries.setter
    def num_task_retries(self, num_task_retries):
        """Sets the num_task_retries of this JobScheduleStatistics.

        Gets or sets the total number of retries during the given time range on all the tasks in jobs created under the schedule.

        :param num_task_retries: The num_task_retries of this JobScheduleStatistics.
        :type num_task_retries: int
        """
        if num_task_retries is None:
            raise ValueError("Invalid value for `num_task_retries`, must not be `None`")

        self._num_task_retries = num_task_retries

    @property
    def read_iogi_b(self):
        """Gets the read_iogi_b of this JobScheduleStatistics.

        Gets or sets the total amount of data in GiB of I/O read by all the tasks in all the jobs created under the schedule.

        :return: The read_iogi_b of this JobScheduleStatistics.
        :rtype: float
        """
        return self._read_iogi_b

    @read_iogi_b.setter
    def read_iogi_b(self, read_iogi_b):
        """Sets the read_iogi_b of this JobScheduleStatistics.

        Gets or sets the total amount of data in GiB of I/O read by all the tasks in all the jobs created under the schedule.

        :param read_iogi_b: The read_iogi_b of this JobScheduleStatistics.
        :type read_iogi_b: float
        """
        if read_iogi_b is None:
            raise ValueError("Invalid value for `read_iogi_b`, must not be `None`")

        self._read_iogi_b = read_iogi_b

    @property
    def read_i_ops(self):
        """Gets the read_i_ops of this JobScheduleStatistics.

        Gets or sets the total number of I/O read operations performed by all the tasks in all the jobs created under the schedule.

        :return: The read_i_ops of this JobScheduleStatistics.
        :rtype: int
        """
        return self._read_i_ops

    @read_i_ops.setter
    def read_i_ops(self, read_i_ops):
        """Sets the read_i_ops of this JobScheduleStatistics.

        Gets or sets the total number of I/O read operations performed by all the tasks in all the jobs created under the schedule.

        :param read_i_ops: The read_i_ops of this JobScheduleStatistics.
        :type read_i_ops: int
        """
        if read_i_ops is None:
            raise ValueError("Invalid value for `read_i_ops`, must not be `None`")

        self._read_i_ops = read_i_ops

    @property
    def start_time(self):
        """Gets the start_time of this JobScheduleStatistics.

        Gets or sets the start time of the time range covered by the statistics.

        :return: The start_time of this JobScheduleStatistics.
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this JobScheduleStatistics.

        Gets or sets the start time of the time range covered by the statistics.

        :param start_time: The start_time of this JobScheduleStatistics.
        :type start_time: datetime
        """
        if start_time is None:
            raise ValueError("Invalid value for `start_time`, must not be `None`")

        self._start_time = start_time

    @property
    def url(self):
        """Gets the url of this JobScheduleStatistics.

        Gets or sets the URL for the statistics.

        :return: The url of this JobScheduleStatistics.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this JobScheduleStatistics.

        Gets or sets the URL for the statistics.

        :param url: The url of this JobScheduleStatistics.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")

        self._url = url

    @property
    def user_cpu_time(self):
        """Gets the user_cpu_time of this JobScheduleStatistics.

        Gets or sets the total user mode CPU time (summed across all cores and all compute nodes) consumed by all the tasks in all the jobs created under the schedule.

        :return: The user_cpu_time of this JobScheduleStatistics.
        :rtype: str
        """
        return self._user_cpu_time

    @user_cpu_time.setter
    def user_cpu_time(self, user_cpu_time):
        """Sets the user_cpu_time of this JobScheduleStatistics.

        Gets or sets the total user mode CPU time (summed across all cores and all compute nodes) consumed by all the tasks in all the jobs created under the schedule.

        :param user_cpu_time: The user_cpu_time of this JobScheduleStatistics.
        :type user_cpu_time: str
        """
        if user_cpu_time is None:
            raise ValueError("Invalid value for `user_cpu_time`, must not be `None`")

        self._user_cpu_time = user_cpu_time

    @property
    def wait_time(self):
        """Gets the wait_time of this JobScheduleStatistics.

        Gets or sets the total wait time of all the tasks in jobs created under the schedule.

        :return: The wait_time of this JobScheduleStatistics.
        :rtype: str
        """
        return self._wait_time

    @wait_time.setter
    def wait_time(self, wait_time):
        """Sets the wait_time of this JobScheduleStatistics.

        Gets or sets the total wait time of all the tasks in jobs created under the schedule.

        :param wait_time: The wait_time of this JobScheduleStatistics.
        :type wait_time: str
        """
        if wait_time is None:
            raise ValueError("Invalid value for `wait_time`, must not be `None`")

        self._wait_time = wait_time

    @property
    def wall_clock_time(self):
        """Gets the wall_clock_time of this JobScheduleStatistics.

        Gets or sets the total wall clock time of all the tasks in all the jobs created under the schedule.

        :return: The wall_clock_time of this JobScheduleStatistics.
        :rtype: str
        """
        return self._wall_clock_time

    @wall_clock_time.setter
    def wall_clock_time(self, wall_clock_time):
        """Sets the wall_clock_time of this JobScheduleStatistics.

        Gets or sets the total wall clock time of all the tasks in all the jobs created under the schedule.

        :param wall_clock_time: The wall_clock_time of this JobScheduleStatistics.
        :type wall_clock_time: str
        """
        if wall_clock_time is None:
            raise ValueError("Invalid value for `wall_clock_time`, must not be `None`")

        self._wall_clock_time = wall_clock_time

    @property
    def write_iogi_b(self):
        """Gets the write_iogi_b of this JobScheduleStatistics.

        Gets or sets the total amount of data in GiB of I/O written by all the tasks in all the jobs created under the schedule.

        :return: The write_iogi_b of this JobScheduleStatistics.
        :rtype: float
        """
        return self._write_iogi_b

    @write_iogi_b.setter
    def write_iogi_b(self, write_iogi_b):
        """Sets the write_iogi_b of this JobScheduleStatistics.

        Gets or sets the total amount of data in GiB of I/O written by all the tasks in all the jobs created under the schedule.

        :param write_iogi_b: The write_iogi_b of this JobScheduleStatistics.
        :type write_iogi_b: float
        """
        if write_iogi_b is None:
            raise ValueError("Invalid value for `write_iogi_b`, must not be `None`")

        self._write_iogi_b = write_iogi_b

    @property
    def write_i_ops(self):
        """Gets the write_i_ops of this JobScheduleStatistics.

        Gets or sets the total number of I/O write operations performed by all the tasks in all the jobs created under the schedule.

        :return: The write_i_ops of this JobScheduleStatistics.
        :rtype: int
        """
        return self._write_i_ops

    @write_i_ops.setter
    def write_i_ops(self, write_i_ops):
        """Sets the write_i_ops of this JobScheduleStatistics.

        Gets or sets the total number of I/O write operations performed by all the tasks in all the jobs created under the schedule.

        :param write_i_ops: The write_i_ops of this JobScheduleStatistics.
        :type write_i_ops: int
        """
        if write_i_ops is None:
            raise ValueError("Invalid value for `write_i_ops`, must not be `None`")

        self._write_i_ops = write_i_ops
