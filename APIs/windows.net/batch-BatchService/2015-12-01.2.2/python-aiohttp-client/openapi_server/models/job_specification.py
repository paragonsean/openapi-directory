# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.environment_setting import EnvironmentSetting
from openapi_server.models.job_constraints import JobConstraints
from openapi_server.models.job_manager_task import JobManagerTask
from openapi_server.models.job_preparation_task import JobPreparationTask
from openapi_server.models.job_release_task import JobReleaseTask
from openapi_server.models.metadata_item import MetadataItem
from openapi_server.models.pool_information import PoolInformation
from openapi_server import util


class JobSpecification(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, common_environment_settings: List[EnvironmentSetting]=None, constraints: JobConstraints=None, display_name: str=None, job_manager_task: JobManagerTask=None, job_preparation_task: JobPreparationTask=None, job_release_task: JobReleaseTask=None, metadata: List[MetadataItem]=None, pool_info: PoolInformation=None, priority: int=None, uses_task_dependencies: bool=None):
        """JobSpecification - a model defined in OpenAPI

        :param common_environment_settings: The common_environment_settings of this JobSpecification.
        :param constraints: The constraints of this JobSpecification.
        :param display_name: The display_name of this JobSpecification.
        :param job_manager_task: The job_manager_task of this JobSpecification.
        :param job_preparation_task: The job_preparation_task of this JobSpecification.
        :param job_release_task: The job_release_task of this JobSpecification.
        :param metadata: The metadata of this JobSpecification.
        :param pool_info: The pool_info of this JobSpecification.
        :param priority: The priority of this JobSpecification.
        :param uses_task_dependencies: The uses_task_dependencies of this JobSpecification.
        """
        self.openapi_types = {
            'common_environment_settings': List[EnvironmentSetting],
            'constraints': JobConstraints,
            'display_name': str,
            'job_manager_task': JobManagerTask,
            'job_preparation_task': JobPreparationTask,
            'job_release_task': JobReleaseTask,
            'metadata': List[MetadataItem],
            'pool_info': PoolInformation,
            'priority': int,
            'uses_task_dependencies': bool
        }

        self.attribute_map = {
            'common_environment_settings': 'commonEnvironmentSettings',
            'constraints': 'constraints',
            'display_name': 'displayName',
            'job_manager_task': 'jobManagerTask',
            'job_preparation_task': 'jobPreparationTask',
            'job_release_task': 'jobReleaseTask',
            'metadata': 'metadata',
            'pool_info': 'poolInfo',
            'priority': 'priority',
            'uses_task_dependencies': 'usesTaskDependencies'
        }

        self._common_environment_settings = common_environment_settings
        self._constraints = constraints
        self._display_name = display_name
        self._job_manager_task = job_manager_task
        self._job_preparation_task = job_preparation_task
        self._job_release_task = job_release_task
        self._metadata = metadata
        self._pool_info = pool_info
        self._priority = priority
        self._uses_task_dependencies = uses_task_dependencies

    @classmethod
    def from_dict(cls, dikt: dict) -> 'JobSpecification':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The JobSpecification of this JobSpecification.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def common_environment_settings(self):
        """Gets the common_environment_settings of this JobSpecification.

        Gets or sets a list of common environment variable settings.  These environment variables are set for all tasks in jobs created under this schedule (including the Job Manager, Job Preparation and Job Release tasks).

        :return: The common_environment_settings of this JobSpecification.
        :rtype: List[EnvironmentSetting]
        """
        return self._common_environment_settings

    @common_environment_settings.setter
    def common_environment_settings(self, common_environment_settings):
        """Sets the common_environment_settings of this JobSpecification.

        Gets or sets a list of common environment variable settings.  These environment variables are set for all tasks in jobs created under this schedule (including the Job Manager, Job Preparation and Job Release tasks).

        :param common_environment_settings: The common_environment_settings of this JobSpecification.
        :type common_environment_settings: List[EnvironmentSetting]
        """

        self._common_environment_settings = common_environment_settings

    @property
    def constraints(self):
        """Gets the constraints of this JobSpecification.


        :return: The constraints of this JobSpecification.
        :rtype: JobConstraints
        """
        return self._constraints

    @constraints.setter
    def constraints(self, constraints):
        """Sets the constraints of this JobSpecification.


        :param constraints: The constraints of this JobSpecification.
        :type constraints: JobConstraints
        """

        self._constraints = constraints

    @property
    def display_name(self):
        """Gets the display_name of this JobSpecification.

        Gets or sets the display name for jobs created under this schedule. It need not be unique and can contain any Unicode characters up to a maximum length of 1024.

        :return: The display_name of this JobSpecification.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this JobSpecification.

        Gets or sets the display name for jobs created under this schedule. It need not be unique and can contain any Unicode characters up to a maximum length of 1024.

        :param display_name: The display_name of this JobSpecification.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def job_manager_task(self):
        """Gets the job_manager_task of this JobSpecification.


        :return: The job_manager_task of this JobSpecification.
        :rtype: JobManagerTask
        """
        return self._job_manager_task

    @job_manager_task.setter
    def job_manager_task(self, job_manager_task):
        """Sets the job_manager_task of this JobSpecification.


        :param job_manager_task: The job_manager_task of this JobSpecification.
        :type job_manager_task: JobManagerTask
        """

        self._job_manager_task = job_manager_task

    @property
    def job_preparation_task(self):
        """Gets the job_preparation_task of this JobSpecification.


        :return: The job_preparation_task of this JobSpecification.
        :rtype: JobPreparationTask
        """
        return self._job_preparation_task

    @job_preparation_task.setter
    def job_preparation_task(self, job_preparation_task):
        """Sets the job_preparation_task of this JobSpecification.


        :param job_preparation_task: The job_preparation_task of this JobSpecification.
        :type job_preparation_task: JobPreparationTask
        """

        self._job_preparation_task = job_preparation_task

    @property
    def job_release_task(self):
        """Gets the job_release_task of this JobSpecification.


        :return: The job_release_task of this JobSpecification.
        :rtype: JobReleaseTask
        """
        return self._job_release_task

    @job_release_task.setter
    def job_release_task(self, job_release_task):
        """Sets the job_release_task of this JobSpecification.


        :param job_release_task: The job_release_task of this JobSpecification.
        :type job_release_task: JobReleaseTask
        """

        self._job_release_task = job_release_task

    @property
    def metadata(self):
        """Gets the metadata of this JobSpecification.

        Gets or sets a list of name-value pairs associated with each job created under this schedule as metadata.

        :return: The metadata of this JobSpecification.
        :rtype: List[MetadataItem]
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this JobSpecification.

        Gets or sets a list of name-value pairs associated with each job created under this schedule as metadata.

        :param metadata: The metadata of this JobSpecification.
        :type metadata: List[MetadataItem]
        """

        self._metadata = metadata

    @property
    def pool_info(self):
        """Gets the pool_info of this JobSpecification.


        :return: The pool_info of this JobSpecification.
        :rtype: PoolInformation
        """
        return self._pool_info

    @pool_info.setter
    def pool_info(self, pool_info):
        """Sets the pool_info of this JobSpecification.


        :param pool_info: The pool_info of this JobSpecification.
        :type pool_info: PoolInformation
        """

        self._pool_info = pool_info

    @property
    def priority(self):
        """Gets the priority of this JobSpecification.

        Gets or sets the priority of jobs created under this schedule. Priority values can range from -1000 to 1000, with -1000 being the lowest priority and 1000 being the highest priority. The default value is 0.

        :return: The priority of this JobSpecification.
        :rtype: int
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this JobSpecification.

        Gets or sets the priority of jobs created under this schedule. Priority values can range from -1000 to 1000, with -1000 being the lowest priority and 1000 being the highest priority. The default value is 0.

        :param priority: The priority of this JobSpecification.
        :type priority: int
        """

        self._priority = priority

    @property
    def uses_task_dependencies(self):
        """Gets the uses_task_dependencies of this JobSpecification.

        Gets or sets the flag that determines if this job will use tasks with dependencies.

        :return: The uses_task_dependencies of this JobSpecification.
        :rtype: bool
        """
        return self._uses_task_dependencies

    @uses_task_dependencies.setter
    def uses_task_dependencies(self, uses_task_dependencies):
        """Sets the uses_task_dependencies of this JobSpecification.

        Gets or sets the flag that determines if this job will use tasks with dependencies.

        :param uses_task_dependencies: The uses_task_dependencies of this JobSpecification.
        :type uses_task_dependencies: bool
        """

        self._uses_task_dependencies = uses_task_dependencies
