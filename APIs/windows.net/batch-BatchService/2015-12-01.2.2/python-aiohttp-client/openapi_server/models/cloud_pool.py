# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.application_package_reference import ApplicationPackageReference
from openapi_server.models.auto_scale_run import AutoScaleRun
from openapi_server.models.certificate_reference import CertificateReference
from openapi_server.models.metadata_item import MetadataItem
from openapi_server.models.pool_statistics import PoolStatistics
from openapi_server.models.resize_error import ResizeError
from openapi_server.models.start_task import StartTask
from openapi_server.models.task_scheduling_policy import TaskSchedulingPolicy
from openapi_server import util


class CloudPool(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allocation_state: str=None, allocation_state_transition_time: datetime=None, application_package_references: List[ApplicationPackageReference]=None, auto_scale_evaluation_interval: str=None, auto_scale_formula: str=None, auto_scale_run: AutoScaleRun=None, certificate_references: List[CertificateReference]=None, creation_time: datetime=None, current_dedicated: int=None, current_os_version: str=None, display_name: str=None, e_tag: str=None, enable_auto_scale: bool=None, enable_inter_node_communication: bool=None, id: str=None, last_modified: datetime=None, max_tasks_per_node: int=None, metadata: List[MetadataItem]=None, os_family: str=None, resize_error: ResizeError=None, resize_timeout: str=None, start_task: StartTask=None, state: str=None, state_transition_time: datetime=None, stats: PoolStatistics=None, target_dedicated: int=None, target_os_version: str=None, task_scheduling_policy: TaskSchedulingPolicy=None, url: str=None, vm_size: str=None):
        """CloudPool - a model defined in OpenAPI

        :param allocation_state: The allocation_state of this CloudPool.
        :param allocation_state_transition_time: The allocation_state_transition_time of this CloudPool.
        :param application_package_references: The application_package_references of this CloudPool.
        :param auto_scale_evaluation_interval: The auto_scale_evaluation_interval of this CloudPool.
        :param auto_scale_formula: The auto_scale_formula of this CloudPool.
        :param auto_scale_run: The auto_scale_run of this CloudPool.
        :param certificate_references: The certificate_references of this CloudPool.
        :param creation_time: The creation_time of this CloudPool.
        :param current_dedicated: The current_dedicated of this CloudPool.
        :param current_os_version: The current_os_version of this CloudPool.
        :param display_name: The display_name of this CloudPool.
        :param e_tag: The e_tag of this CloudPool.
        :param enable_auto_scale: The enable_auto_scale of this CloudPool.
        :param enable_inter_node_communication: The enable_inter_node_communication of this CloudPool.
        :param id: The id of this CloudPool.
        :param last_modified: The last_modified of this CloudPool.
        :param max_tasks_per_node: The max_tasks_per_node of this CloudPool.
        :param metadata: The metadata of this CloudPool.
        :param os_family: The os_family of this CloudPool.
        :param resize_error: The resize_error of this CloudPool.
        :param resize_timeout: The resize_timeout of this CloudPool.
        :param start_task: The start_task of this CloudPool.
        :param state: The state of this CloudPool.
        :param state_transition_time: The state_transition_time of this CloudPool.
        :param stats: The stats of this CloudPool.
        :param target_dedicated: The target_dedicated of this CloudPool.
        :param target_os_version: The target_os_version of this CloudPool.
        :param task_scheduling_policy: The task_scheduling_policy of this CloudPool.
        :param url: The url of this CloudPool.
        :param vm_size: The vm_size of this CloudPool.
        """
        self.openapi_types = {
            'allocation_state': str,
            'allocation_state_transition_time': datetime,
            'application_package_references': List[ApplicationPackageReference],
            'auto_scale_evaluation_interval': str,
            'auto_scale_formula': str,
            'auto_scale_run': AutoScaleRun,
            'certificate_references': List[CertificateReference],
            'creation_time': datetime,
            'current_dedicated': int,
            'current_os_version': str,
            'display_name': str,
            'e_tag': str,
            'enable_auto_scale': bool,
            'enable_inter_node_communication': bool,
            'id': str,
            'last_modified': datetime,
            'max_tasks_per_node': int,
            'metadata': List[MetadataItem],
            'os_family': str,
            'resize_error': ResizeError,
            'resize_timeout': str,
            'start_task': StartTask,
            'state': str,
            'state_transition_time': datetime,
            'stats': PoolStatistics,
            'target_dedicated': int,
            'target_os_version': str,
            'task_scheduling_policy': TaskSchedulingPolicy,
            'url': str,
            'vm_size': str
        }

        self.attribute_map = {
            'allocation_state': 'allocationState',
            'allocation_state_transition_time': 'allocationStateTransitionTime',
            'application_package_references': 'applicationPackageReferences',
            'auto_scale_evaluation_interval': 'autoScaleEvaluationInterval',
            'auto_scale_formula': 'autoScaleFormula',
            'auto_scale_run': 'autoScaleRun',
            'certificate_references': 'certificateReferences',
            'creation_time': 'creationTime',
            'current_dedicated': 'currentDedicated',
            'current_os_version': 'currentOSVersion',
            'display_name': 'displayName',
            'e_tag': 'eTag',
            'enable_auto_scale': 'enableAutoScale',
            'enable_inter_node_communication': 'enableInterNodeCommunication',
            'id': 'id',
            'last_modified': 'lastModified',
            'max_tasks_per_node': 'maxTasksPerNode',
            'metadata': 'metadata',
            'os_family': 'osFamily',
            'resize_error': 'resizeError',
            'resize_timeout': 'resizeTimeout',
            'start_task': 'startTask',
            'state': 'state',
            'state_transition_time': 'stateTransitionTime',
            'stats': 'stats',
            'target_dedicated': 'targetDedicated',
            'target_os_version': 'targetOSVersion',
            'task_scheduling_policy': 'taskSchedulingPolicy',
            'url': 'url',
            'vm_size': 'vmSize'
        }

        self._allocation_state = allocation_state
        self._allocation_state_transition_time = allocation_state_transition_time
        self._application_package_references = application_package_references
        self._auto_scale_evaluation_interval = auto_scale_evaluation_interval
        self._auto_scale_formula = auto_scale_formula
        self._auto_scale_run = auto_scale_run
        self._certificate_references = certificate_references
        self._creation_time = creation_time
        self._current_dedicated = current_dedicated
        self._current_os_version = current_os_version
        self._display_name = display_name
        self._e_tag = e_tag
        self._enable_auto_scale = enable_auto_scale
        self._enable_inter_node_communication = enable_inter_node_communication
        self._id = id
        self._last_modified = last_modified
        self._max_tasks_per_node = max_tasks_per_node
        self._metadata = metadata
        self._os_family = os_family
        self._resize_error = resize_error
        self._resize_timeout = resize_timeout
        self._start_task = start_task
        self._state = state
        self._state_transition_time = state_transition_time
        self._stats = stats
        self._target_dedicated = target_dedicated
        self._target_os_version = target_os_version
        self._task_scheduling_policy = task_scheduling_policy
        self._url = url
        self._vm_size = vm_size

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CloudPool':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CloudPool of this CloudPool.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allocation_state(self):
        """Gets the allocation_state of this CloudPool.

        Gets or sets whether the pool is resizing.

        :return: The allocation_state of this CloudPool.
        :rtype: str
        """
        return self._allocation_state

    @allocation_state.setter
    def allocation_state(self, allocation_state):
        """Sets the allocation_state of this CloudPool.

        Gets or sets whether the pool is resizing.

        :param allocation_state: The allocation_state of this CloudPool.
        :type allocation_state: str
        """
        allowed_values = ["steady", "resizing", "stopping"]  # noqa: E501
        if allocation_state not in allowed_values:
            raise ValueError(
                "Invalid value for `allocation_state` ({0}), must be one of {1}"
                .format(allocation_state, allowed_values)
            )

        self._allocation_state = allocation_state

    @property
    def allocation_state_transition_time(self):
        """Gets the allocation_state_transition_time of this CloudPool.

        Gets or sets the time at which the pool entered its current allocation state.

        :return: The allocation_state_transition_time of this CloudPool.
        :rtype: datetime
        """
        return self._allocation_state_transition_time

    @allocation_state_transition_time.setter
    def allocation_state_transition_time(self, allocation_state_transition_time):
        """Sets the allocation_state_transition_time of this CloudPool.

        Gets or sets the time at which the pool entered its current allocation state.

        :param allocation_state_transition_time: The allocation_state_transition_time of this CloudPool.
        :type allocation_state_transition_time: datetime
        """

        self._allocation_state_transition_time = allocation_state_transition_time

    @property
    def application_package_references(self):
        """Gets the application_package_references of this CloudPool.

        Gets or sets the list of application packages to be installed on each compute node in the pool.

        :return: The application_package_references of this CloudPool.
        :rtype: List[ApplicationPackageReference]
        """
        return self._application_package_references

    @application_package_references.setter
    def application_package_references(self, application_package_references):
        """Sets the application_package_references of this CloudPool.

        Gets or sets the list of application packages to be installed on each compute node in the pool.

        :param application_package_references: The application_package_references of this CloudPool.
        :type application_package_references: List[ApplicationPackageReference]
        """

        self._application_package_references = application_package_references

    @property
    def auto_scale_evaluation_interval(self):
        """Gets the auto_scale_evaluation_interval of this CloudPool.

        Gets or sets a time interval for the desired AutoScale evaluation period in the pool.

        :return: The auto_scale_evaluation_interval of this CloudPool.
        :rtype: str
        """
        return self._auto_scale_evaluation_interval

    @auto_scale_evaluation_interval.setter
    def auto_scale_evaluation_interval(self, auto_scale_evaluation_interval):
        """Sets the auto_scale_evaluation_interval of this CloudPool.

        Gets or sets a time interval for the desired AutoScale evaluation period in the pool.

        :param auto_scale_evaluation_interval: The auto_scale_evaluation_interval of this CloudPool.
        :type auto_scale_evaluation_interval: str
        """

        self._auto_scale_evaluation_interval = auto_scale_evaluation_interval

    @property
    def auto_scale_formula(self):
        """Gets the auto_scale_formula of this CloudPool.

        Gets or sets a formula for the desired number of compute nodes in the pool.

        :return: The auto_scale_formula of this CloudPool.
        :rtype: str
        """
        return self._auto_scale_formula

    @auto_scale_formula.setter
    def auto_scale_formula(self, auto_scale_formula):
        """Sets the auto_scale_formula of this CloudPool.

        Gets or sets a formula for the desired number of compute nodes in the pool.

        :param auto_scale_formula: The auto_scale_formula of this CloudPool.
        :type auto_scale_formula: str
        """

        self._auto_scale_formula = auto_scale_formula

    @property
    def auto_scale_run(self):
        """Gets the auto_scale_run of this CloudPool.


        :return: The auto_scale_run of this CloudPool.
        :rtype: AutoScaleRun
        """
        return self._auto_scale_run

    @auto_scale_run.setter
    def auto_scale_run(self, auto_scale_run):
        """Sets the auto_scale_run of this CloudPool.


        :param auto_scale_run: The auto_scale_run of this CloudPool.
        :type auto_scale_run: AutoScaleRun
        """

        self._auto_scale_run = auto_scale_run

    @property
    def certificate_references(self):
        """Gets the certificate_references of this CloudPool.

        Gets or sets the list of certificates to be installed on each compute node in the pool.

        :return: The certificate_references of this CloudPool.
        :rtype: List[CertificateReference]
        """
        return self._certificate_references

    @certificate_references.setter
    def certificate_references(self, certificate_references):
        """Sets the certificate_references of this CloudPool.

        Gets or sets the list of certificates to be installed on each compute node in the pool.

        :param certificate_references: The certificate_references of this CloudPool.
        :type certificate_references: List[CertificateReference]
        """

        self._certificate_references = certificate_references

    @property
    def creation_time(self):
        """Gets the creation_time of this CloudPool.

        Gets or sets the creation time of the pool.

        :return: The creation_time of this CloudPool.
        :rtype: datetime
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this CloudPool.

        Gets or sets the creation time of the pool.

        :param creation_time: The creation_time of this CloudPool.
        :type creation_time: datetime
        """

        self._creation_time = creation_time

    @property
    def current_dedicated(self):
        """Gets the current_dedicated of this CloudPool.

        Gets or sets the number of compute nodes currently in the pool.

        :return: The current_dedicated of this CloudPool.
        :rtype: int
        """
        return self._current_dedicated

    @current_dedicated.setter
    def current_dedicated(self, current_dedicated):
        """Sets the current_dedicated of this CloudPool.

        Gets or sets the number of compute nodes currently in the pool.

        :param current_dedicated: The current_dedicated of this CloudPool.
        :type current_dedicated: int
        """

        self._current_dedicated = current_dedicated

    @property
    def current_os_version(self):
        """Gets the current_os_version of this CloudPool.

        Gets or sets the Azure Guest OS Version currently installed on the virtual machines in the pool. This may differ from TargetOSVersion if the pool state is Upgrading.

        :return: The current_os_version of this CloudPool.
        :rtype: str
        """
        return self._current_os_version

    @current_os_version.setter
    def current_os_version(self, current_os_version):
        """Sets the current_os_version of this CloudPool.

        Gets or sets the Azure Guest OS Version currently installed on the virtual machines in the pool. This may differ from TargetOSVersion if the pool state is Upgrading.

        :param current_os_version: The current_os_version of this CloudPool.
        :type current_os_version: str
        """

        self._current_os_version = current_os_version

    @property
    def display_name(self):
        """Gets the display_name of this CloudPool.

        Gets or sets the display name for the pool.

        :return: The display_name of this CloudPool.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this CloudPool.

        Gets or sets the display name for the pool.

        :param display_name: The display_name of this CloudPool.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def e_tag(self):
        """Gets the e_tag of this CloudPool.

        Gets or sets the ETag of the pool.

        :return: The e_tag of this CloudPool.
        :rtype: str
        """
        return self._e_tag

    @e_tag.setter
    def e_tag(self, e_tag):
        """Sets the e_tag of this CloudPool.

        Gets or sets the ETag of the pool.

        :param e_tag: The e_tag of this CloudPool.
        :type e_tag: str
        """

        self._e_tag = e_tag

    @property
    def enable_auto_scale(self):
        """Gets the enable_auto_scale of this CloudPool.

        Gets or sets whether the pool size should automatically adjust over time. If true, the AutoScaleFormula property must be set. If false, the TargetDedicated property must be set.

        :return: The enable_auto_scale of this CloudPool.
        :rtype: bool
        """
        return self._enable_auto_scale

    @enable_auto_scale.setter
    def enable_auto_scale(self, enable_auto_scale):
        """Sets the enable_auto_scale of this CloudPool.

        Gets or sets whether the pool size should automatically adjust over time. If true, the AutoScaleFormula property must be set. If false, the TargetDedicated property must be set.

        :param enable_auto_scale: The enable_auto_scale of this CloudPool.
        :type enable_auto_scale: bool
        """

        self._enable_auto_scale = enable_auto_scale

    @property
    def enable_inter_node_communication(self):
        """Gets the enable_inter_node_communication of this CloudPool.

        Gets or sets whether the pool permits direct communication between nodes.

        :return: The enable_inter_node_communication of this CloudPool.
        :rtype: bool
        """
        return self._enable_inter_node_communication

    @enable_inter_node_communication.setter
    def enable_inter_node_communication(self, enable_inter_node_communication):
        """Sets the enable_inter_node_communication of this CloudPool.

        Gets or sets whether the pool permits direct communication between nodes.

        :param enable_inter_node_communication: The enable_inter_node_communication of this CloudPool.
        :type enable_inter_node_communication: bool
        """

        self._enable_inter_node_communication = enable_inter_node_communication

    @property
    def id(self):
        """Gets the id of this CloudPool.

        Gets or sets a string that uniquely identifies the pool within the account. The id can contain any combination of alphanumeric characters including hyphens and underscores, and cannot contain more than 64 characters.

        :return: The id of this CloudPool.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CloudPool.

        Gets or sets a string that uniquely identifies the pool within the account. The id can contain any combination of alphanumeric characters including hyphens and underscores, and cannot contain more than 64 characters.

        :param id: The id of this CloudPool.
        :type id: str
        """

        self._id = id

    @property
    def last_modified(self):
        """Gets the last_modified of this CloudPool.

        Gets or sets the last modified time of the pool.

        :return: The last_modified of this CloudPool.
        :rtype: datetime
        """
        return self._last_modified

    @last_modified.setter
    def last_modified(self, last_modified):
        """Sets the last_modified of this CloudPool.

        Gets or sets the last modified time of the pool.

        :param last_modified: The last_modified of this CloudPool.
        :type last_modified: datetime
        """

        self._last_modified = last_modified

    @property
    def max_tasks_per_node(self):
        """Gets the max_tasks_per_node of this CloudPool.

        Gets or sets the maximum number of tasks that can run concurrently on a single compute node in the pool.

        :return: The max_tasks_per_node of this CloudPool.
        :rtype: int
        """
        return self._max_tasks_per_node

    @max_tasks_per_node.setter
    def max_tasks_per_node(self, max_tasks_per_node):
        """Sets the max_tasks_per_node of this CloudPool.

        Gets or sets the maximum number of tasks that can run concurrently on a single compute node in the pool.

        :param max_tasks_per_node: The max_tasks_per_node of this CloudPool.
        :type max_tasks_per_node: int
        """

        self._max_tasks_per_node = max_tasks_per_node

    @property
    def metadata(self):
        """Gets the metadata of this CloudPool.

        Gets or sets a list of name-value pairs associated with the pool as metadata.

        :return: The metadata of this CloudPool.
        :rtype: List[MetadataItem]
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this CloudPool.

        Gets or sets a list of name-value pairs associated with the pool as metadata.

        :param metadata: The metadata of this CloudPool.
        :type metadata: List[MetadataItem]
        """

        self._metadata = metadata

    @property
    def os_family(self):
        """Gets the os_family of this CloudPool.

        Gets or sets the Azure Guest OS family to be installed on the virtual machines in the pool.

        :return: The os_family of this CloudPool.
        :rtype: str
        """
        return self._os_family

    @os_family.setter
    def os_family(self, os_family):
        """Sets the os_family of this CloudPool.

        Gets or sets the Azure Guest OS family to be installed on the virtual machines in the pool.

        :param os_family: The os_family of this CloudPool.
        :type os_family: str
        """

        self._os_family = os_family

    @property
    def resize_error(self):
        """Gets the resize_error of this CloudPool.


        :return: The resize_error of this CloudPool.
        :rtype: ResizeError
        """
        return self._resize_error

    @resize_error.setter
    def resize_error(self, resize_error):
        """Sets the resize_error of this CloudPool.


        :param resize_error: The resize_error of this CloudPool.
        :type resize_error: ResizeError
        """

        self._resize_error = resize_error

    @property
    def resize_timeout(self):
        """Gets the resize_timeout of this CloudPool.

        Gets or sets the timeout for allocation of compute nodes to the pool. In a Get Pool operation, this is the timeout for the most recent resize operation. The default value is 10 minutes.

        :return: The resize_timeout of this CloudPool.
        :rtype: str
        """
        return self._resize_timeout

    @resize_timeout.setter
    def resize_timeout(self, resize_timeout):
        """Sets the resize_timeout of this CloudPool.

        Gets or sets the timeout for allocation of compute nodes to the pool. In a Get Pool operation, this is the timeout for the most recent resize operation. The default value is 10 minutes.

        :param resize_timeout: The resize_timeout of this CloudPool.
        :type resize_timeout: str
        """

        self._resize_timeout = resize_timeout

    @property
    def start_task(self):
        """Gets the start_task of this CloudPool.


        :return: The start_task of this CloudPool.
        :rtype: StartTask
        """
        return self._start_task

    @start_task.setter
    def start_task(self, start_task):
        """Sets the start_task of this CloudPool.


        :param start_task: The start_task of this CloudPool.
        :type start_task: StartTask
        """

        self._start_task = start_task

    @property
    def state(self):
        """Gets the state of this CloudPool.

        Gets or sets the current state of the pool.

        :return: The state of this CloudPool.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this CloudPool.

        Gets or sets the current state of the pool.

        :param state: The state of this CloudPool.
        :type state: str
        """
        allowed_values = ["active", "deleting", "upgrading"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def state_transition_time(self):
        """Gets the state_transition_time of this CloudPool.

        Gets or sets the time at which the pool entered its current state.

        :return: The state_transition_time of this CloudPool.
        :rtype: datetime
        """
        return self._state_transition_time

    @state_transition_time.setter
    def state_transition_time(self, state_transition_time):
        """Sets the state_transition_time of this CloudPool.

        Gets or sets the time at which the pool entered its current state.

        :param state_transition_time: The state_transition_time of this CloudPool.
        :type state_transition_time: datetime
        """

        self._state_transition_time = state_transition_time

    @property
    def stats(self):
        """Gets the stats of this CloudPool.


        :return: The stats of this CloudPool.
        :rtype: PoolStatistics
        """
        return self._stats

    @stats.setter
    def stats(self, stats):
        """Sets the stats of this CloudPool.


        :param stats: The stats of this CloudPool.
        :type stats: PoolStatistics
        """

        self._stats = stats

    @property
    def target_dedicated(self):
        """Gets the target_dedicated of this CloudPool.

        Gets or sets the desired number of compute nodes in the pool. This property must have the default value if EnableAutoScale is true. It is required if EnableAutoScale is false.

        :return: The target_dedicated of this CloudPool.
        :rtype: int
        """
        return self._target_dedicated

    @target_dedicated.setter
    def target_dedicated(self, target_dedicated):
        """Sets the target_dedicated of this CloudPool.

        Gets or sets the desired number of compute nodes in the pool. This property must have the default value if EnableAutoScale is true. It is required if EnableAutoScale is false.

        :param target_dedicated: The target_dedicated of this CloudPool.
        :type target_dedicated: int
        """

        self._target_dedicated = target_dedicated

    @property
    def target_os_version(self):
        """Gets the target_os_version of this CloudPool.

        Gets or sets the Azure Guest OS version to be installed on the virtual machines in the pool. The default value is * which specifies the latest operating system version for the specified family.

        :return: The target_os_version of this CloudPool.
        :rtype: str
        """
        return self._target_os_version

    @target_os_version.setter
    def target_os_version(self, target_os_version):
        """Sets the target_os_version of this CloudPool.

        Gets or sets the Azure Guest OS version to be installed on the virtual machines in the pool. The default value is * which specifies the latest operating system version for the specified family.

        :param target_os_version: The target_os_version of this CloudPool.
        :type target_os_version: str
        """

        self._target_os_version = target_os_version

    @property
    def task_scheduling_policy(self):
        """Gets the task_scheduling_policy of this CloudPool.


        :return: The task_scheduling_policy of this CloudPool.
        :rtype: TaskSchedulingPolicy
        """
        return self._task_scheduling_policy

    @task_scheduling_policy.setter
    def task_scheduling_policy(self, task_scheduling_policy):
        """Sets the task_scheduling_policy of this CloudPool.


        :param task_scheduling_policy: The task_scheduling_policy of this CloudPool.
        :type task_scheduling_policy: TaskSchedulingPolicy
        """

        self._task_scheduling_policy = task_scheduling_policy

    @property
    def url(self):
        """Gets the url of this CloudPool.

        Gets or sets the URL of the pool.

        :return: The url of this CloudPool.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this CloudPool.

        Gets or sets the URL of the pool.

        :param url: The url of this CloudPool.
        :type url: str
        """

        self._url = url

    @property
    def vm_size(self):
        """Gets the vm_size of this CloudPool.

        Gets or sets the size of virtual machines in the pool.  All VMs in a pool are the same size.

        :return: The vm_size of this CloudPool.
        :rtype: str
        """
        return self._vm_size

    @vm_size.setter
    def vm_size(self, vm_size):
        """Sets the vm_size of this CloudPool.

        Gets or sets the size of virtual machines in the pool.  All VMs in a pool are the same size.

        :param vm_size: The vm_size of this CloudPool.
        :type vm_size: str
        """

        self._vm_size = vm_size
