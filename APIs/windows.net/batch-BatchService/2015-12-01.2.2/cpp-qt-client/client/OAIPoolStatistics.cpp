/**
 * BatchService
 * A client for issuing REST requests to the Azure Batch service.
 *
 * The version of the OpenAPI document: 2015-12-01.2.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPoolStatistics.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPoolStatistics::OAIPoolStatistics(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPoolStatistics::OAIPoolStatistics() {
    this->initializeModel();
}

OAIPoolStatistics::~OAIPoolStatistics() {}

void OAIPoolStatistics::initializeModel() {

    m_last_update_time_isSet = false;
    m_last_update_time_isValid = false;

    m_resource_stats_isSet = false;
    m_resource_stats_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_usage_stats_isSet = false;
    m_usage_stats_isValid = false;
}

void OAIPoolStatistics::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPoolStatistics::fromJsonObject(QJsonObject json) {

    m_last_update_time_isValid = ::OpenAPI::fromJsonValue(m_last_update_time, json[QString("lastUpdateTime")]);
    m_last_update_time_isSet = !json[QString("lastUpdateTime")].isNull() && m_last_update_time_isValid;

    m_resource_stats_isValid = ::OpenAPI::fromJsonValue(m_resource_stats, json[QString("resourceStats")]);
    m_resource_stats_isSet = !json[QString("resourceStats")].isNull() && m_resource_stats_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("startTime")]);
    m_start_time_isSet = !json[QString("startTime")].isNull() && m_start_time_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_usage_stats_isValid = ::OpenAPI::fromJsonValue(m_usage_stats, json[QString("usageStats")]);
    m_usage_stats_isSet = !json[QString("usageStats")].isNull() && m_usage_stats_isValid;
}

QString OAIPoolStatistics::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPoolStatistics::asJsonObject() const {
    QJsonObject obj;
    if (m_last_update_time_isSet) {
        obj.insert(QString("lastUpdateTime"), ::OpenAPI::toJsonValue(m_last_update_time));
    }
    if (m_resource_stats.isSet()) {
        obj.insert(QString("resourceStats"), ::OpenAPI::toJsonValue(m_resource_stats));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("startTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_usage_stats.isSet()) {
        obj.insert(QString("usageStats"), ::OpenAPI::toJsonValue(m_usage_stats));
    }
    return obj;
}

QDateTime OAIPoolStatistics::getLastUpdateTime() const {
    return m_last_update_time;
}
void OAIPoolStatistics::setLastUpdateTime(const QDateTime &last_update_time) {
    m_last_update_time = last_update_time;
    m_last_update_time_isSet = true;
}

bool OAIPoolStatistics::is_last_update_time_Set() const{
    return m_last_update_time_isSet;
}

bool OAIPoolStatistics::is_last_update_time_Valid() const{
    return m_last_update_time_isValid;
}

OAIResourceStatistics OAIPoolStatistics::getResourceStats() const {
    return m_resource_stats;
}
void OAIPoolStatistics::setResourceStats(const OAIResourceStatistics &resource_stats) {
    m_resource_stats = resource_stats;
    m_resource_stats_isSet = true;
}

bool OAIPoolStatistics::is_resource_stats_Set() const{
    return m_resource_stats_isSet;
}

bool OAIPoolStatistics::is_resource_stats_Valid() const{
    return m_resource_stats_isValid;
}

QDateTime OAIPoolStatistics::getStartTime() const {
    return m_start_time;
}
void OAIPoolStatistics::setStartTime(const QDateTime &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIPoolStatistics::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIPoolStatistics::is_start_time_Valid() const{
    return m_start_time_isValid;
}

QString OAIPoolStatistics::getUrl() const {
    return m_url;
}
void OAIPoolStatistics::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIPoolStatistics::is_url_Set() const{
    return m_url_isSet;
}

bool OAIPoolStatistics::is_url_Valid() const{
    return m_url_isValid;
}

OAIUsageStatistics OAIPoolStatistics::getUsageStats() const {
    return m_usage_stats;
}
void OAIPoolStatistics::setUsageStats(const OAIUsageStatistics &usage_stats) {
    m_usage_stats = usage_stats;
    m_usage_stats_isSet = true;
}

bool OAIPoolStatistics::is_usage_stats_Set() const{
    return m_usage_stats_isSet;
}

bool OAIPoolStatistics::is_usage_stats_Valid() const{
    return m_usage_stats_isValid;
}

bool OAIPoolStatistics::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_last_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_stats.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_usage_stats.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPoolStatistics::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_last_update_time_isValid && m_start_time_isValid && m_url_isValid && true;
}

} // namespace OpenAPI
