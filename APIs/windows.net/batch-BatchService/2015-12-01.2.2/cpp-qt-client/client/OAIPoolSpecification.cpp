/**
 * BatchService
 * A client for issuing REST requests to the Azure Batch service.
 *
 * The version of the OpenAPI document: 2015-12-01.2.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPoolSpecification.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPoolSpecification::OAIPoolSpecification(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPoolSpecification::OAIPoolSpecification() {
    this->initializeModel();
}

OAIPoolSpecification::~OAIPoolSpecification() {}

void OAIPoolSpecification::initializeModel() {

    m_application_package_references_isSet = false;
    m_application_package_references_isValid = false;

    m_auto_scale_evaluation_interval_isSet = false;
    m_auto_scale_evaluation_interval_isValid = false;

    m_auto_scale_formula_isSet = false;
    m_auto_scale_formula_isValid = false;

    m_certificate_references_isSet = false;
    m_certificate_references_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_enable_auto_scale_isSet = false;
    m_enable_auto_scale_isValid = false;

    m_enable_inter_node_communication_isSet = false;
    m_enable_inter_node_communication_isValid = false;

    m_max_tasks_per_node_isSet = false;
    m_max_tasks_per_node_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_os_family_isSet = false;
    m_os_family_isValid = false;

    m_resize_timeout_isSet = false;
    m_resize_timeout_isValid = false;

    m_start_task_isSet = false;
    m_start_task_isValid = false;

    m_target_dedicated_isSet = false;
    m_target_dedicated_isValid = false;

    m_target_os_version_isSet = false;
    m_target_os_version_isValid = false;

    m_task_scheduling_policy_isSet = false;
    m_task_scheduling_policy_isValid = false;

    m_vm_size_isSet = false;
    m_vm_size_isValid = false;
}

void OAIPoolSpecification::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPoolSpecification::fromJsonObject(QJsonObject json) {

    m_application_package_references_isValid = ::OpenAPI::fromJsonValue(m_application_package_references, json[QString("applicationPackageReferences")]);
    m_application_package_references_isSet = !json[QString("applicationPackageReferences")].isNull() && m_application_package_references_isValid;

    m_auto_scale_evaluation_interval_isValid = ::OpenAPI::fromJsonValue(m_auto_scale_evaluation_interval, json[QString("autoScaleEvaluationInterval")]);
    m_auto_scale_evaluation_interval_isSet = !json[QString("autoScaleEvaluationInterval")].isNull() && m_auto_scale_evaluation_interval_isValid;

    m_auto_scale_formula_isValid = ::OpenAPI::fromJsonValue(m_auto_scale_formula, json[QString("autoScaleFormula")]);
    m_auto_scale_formula_isSet = !json[QString("autoScaleFormula")].isNull() && m_auto_scale_formula_isValid;

    m_certificate_references_isValid = ::OpenAPI::fromJsonValue(m_certificate_references, json[QString("certificateReferences")]);
    m_certificate_references_isSet = !json[QString("certificateReferences")].isNull() && m_certificate_references_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_enable_auto_scale_isValid = ::OpenAPI::fromJsonValue(m_enable_auto_scale, json[QString("enableAutoScale")]);
    m_enable_auto_scale_isSet = !json[QString("enableAutoScale")].isNull() && m_enable_auto_scale_isValid;

    m_enable_inter_node_communication_isValid = ::OpenAPI::fromJsonValue(m_enable_inter_node_communication, json[QString("enableInterNodeCommunication")]);
    m_enable_inter_node_communication_isSet = !json[QString("enableInterNodeCommunication")].isNull() && m_enable_inter_node_communication_isValid;

    m_max_tasks_per_node_isValid = ::OpenAPI::fromJsonValue(m_max_tasks_per_node, json[QString("maxTasksPerNode")]);
    m_max_tasks_per_node_isSet = !json[QString("maxTasksPerNode")].isNull() && m_max_tasks_per_node_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_os_family_isValid = ::OpenAPI::fromJsonValue(m_os_family, json[QString("osFamily")]);
    m_os_family_isSet = !json[QString("osFamily")].isNull() && m_os_family_isValid;

    m_resize_timeout_isValid = ::OpenAPI::fromJsonValue(m_resize_timeout, json[QString("resizeTimeout")]);
    m_resize_timeout_isSet = !json[QString("resizeTimeout")].isNull() && m_resize_timeout_isValid;

    m_start_task_isValid = ::OpenAPI::fromJsonValue(m_start_task, json[QString("startTask")]);
    m_start_task_isSet = !json[QString("startTask")].isNull() && m_start_task_isValid;

    m_target_dedicated_isValid = ::OpenAPI::fromJsonValue(m_target_dedicated, json[QString("targetDedicated")]);
    m_target_dedicated_isSet = !json[QString("targetDedicated")].isNull() && m_target_dedicated_isValid;

    m_target_os_version_isValid = ::OpenAPI::fromJsonValue(m_target_os_version, json[QString("targetOSVersion")]);
    m_target_os_version_isSet = !json[QString("targetOSVersion")].isNull() && m_target_os_version_isValid;

    m_task_scheduling_policy_isValid = ::OpenAPI::fromJsonValue(m_task_scheduling_policy, json[QString("taskSchedulingPolicy")]);
    m_task_scheduling_policy_isSet = !json[QString("taskSchedulingPolicy")].isNull() && m_task_scheduling_policy_isValid;

    m_vm_size_isValid = ::OpenAPI::fromJsonValue(m_vm_size, json[QString("vmSize")]);
    m_vm_size_isSet = !json[QString("vmSize")].isNull() && m_vm_size_isValid;
}

QString OAIPoolSpecification::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPoolSpecification::asJsonObject() const {
    QJsonObject obj;
    if (m_application_package_references.size() > 0) {
        obj.insert(QString("applicationPackageReferences"), ::OpenAPI::toJsonValue(m_application_package_references));
    }
    if (m_auto_scale_evaluation_interval_isSet) {
        obj.insert(QString("autoScaleEvaluationInterval"), ::OpenAPI::toJsonValue(m_auto_scale_evaluation_interval));
    }
    if (m_auto_scale_formula_isSet) {
        obj.insert(QString("autoScaleFormula"), ::OpenAPI::toJsonValue(m_auto_scale_formula));
    }
    if (m_certificate_references.size() > 0) {
        obj.insert(QString("certificateReferences"), ::OpenAPI::toJsonValue(m_certificate_references));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_enable_auto_scale_isSet) {
        obj.insert(QString("enableAutoScale"), ::OpenAPI::toJsonValue(m_enable_auto_scale));
    }
    if (m_enable_inter_node_communication_isSet) {
        obj.insert(QString("enableInterNodeCommunication"), ::OpenAPI::toJsonValue(m_enable_inter_node_communication));
    }
    if (m_max_tasks_per_node_isSet) {
        obj.insert(QString("maxTasksPerNode"), ::OpenAPI::toJsonValue(m_max_tasks_per_node));
    }
    if (m_metadata.size() > 0) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_os_family_isSet) {
        obj.insert(QString("osFamily"), ::OpenAPI::toJsonValue(m_os_family));
    }
    if (m_resize_timeout_isSet) {
        obj.insert(QString("resizeTimeout"), ::OpenAPI::toJsonValue(m_resize_timeout));
    }
    if (m_start_task.isSet()) {
        obj.insert(QString("startTask"), ::OpenAPI::toJsonValue(m_start_task));
    }
    if (m_target_dedicated_isSet) {
        obj.insert(QString("targetDedicated"), ::OpenAPI::toJsonValue(m_target_dedicated));
    }
    if (m_target_os_version_isSet) {
        obj.insert(QString("targetOSVersion"), ::OpenAPI::toJsonValue(m_target_os_version));
    }
    if (m_task_scheduling_policy.isSet()) {
        obj.insert(QString("taskSchedulingPolicy"), ::OpenAPI::toJsonValue(m_task_scheduling_policy));
    }
    if (m_vm_size_isSet) {
        obj.insert(QString("vmSize"), ::OpenAPI::toJsonValue(m_vm_size));
    }
    return obj;
}

QList<OAIApplicationPackageReference> OAIPoolSpecification::getApplicationPackageReferences() const {
    return m_application_package_references;
}
void OAIPoolSpecification::setApplicationPackageReferences(const QList<OAIApplicationPackageReference> &application_package_references) {
    m_application_package_references = application_package_references;
    m_application_package_references_isSet = true;
}

bool OAIPoolSpecification::is_application_package_references_Set() const{
    return m_application_package_references_isSet;
}

bool OAIPoolSpecification::is_application_package_references_Valid() const{
    return m_application_package_references_isValid;
}

QString OAIPoolSpecification::getAutoScaleEvaluationInterval() const {
    return m_auto_scale_evaluation_interval;
}
void OAIPoolSpecification::setAutoScaleEvaluationInterval(const QString &auto_scale_evaluation_interval) {
    m_auto_scale_evaluation_interval = auto_scale_evaluation_interval;
    m_auto_scale_evaluation_interval_isSet = true;
}

bool OAIPoolSpecification::is_auto_scale_evaluation_interval_Set() const{
    return m_auto_scale_evaluation_interval_isSet;
}

bool OAIPoolSpecification::is_auto_scale_evaluation_interval_Valid() const{
    return m_auto_scale_evaluation_interval_isValid;
}

QString OAIPoolSpecification::getAutoScaleFormula() const {
    return m_auto_scale_formula;
}
void OAIPoolSpecification::setAutoScaleFormula(const QString &auto_scale_formula) {
    m_auto_scale_formula = auto_scale_formula;
    m_auto_scale_formula_isSet = true;
}

bool OAIPoolSpecification::is_auto_scale_formula_Set() const{
    return m_auto_scale_formula_isSet;
}

bool OAIPoolSpecification::is_auto_scale_formula_Valid() const{
    return m_auto_scale_formula_isValid;
}

QList<OAICertificateReference> OAIPoolSpecification::getCertificateReferences() const {
    return m_certificate_references;
}
void OAIPoolSpecification::setCertificateReferences(const QList<OAICertificateReference> &certificate_references) {
    m_certificate_references = certificate_references;
    m_certificate_references_isSet = true;
}

bool OAIPoolSpecification::is_certificate_references_Set() const{
    return m_certificate_references_isSet;
}

bool OAIPoolSpecification::is_certificate_references_Valid() const{
    return m_certificate_references_isValid;
}

QString OAIPoolSpecification::getDisplayName() const {
    return m_display_name;
}
void OAIPoolSpecification::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIPoolSpecification::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIPoolSpecification::is_display_name_Valid() const{
    return m_display_name_isValid;
}

bool OAIPoolSpecification::isEnableAutoScale() const {
    return m_enable_auto_scale;
}
void OAIPoolSpecification::setEnableAutoScale(const bool &enable_auto_scale) {
    m_enable_auto_scale = enable_auto_scale;
    m_enable_auto_scale_isSet = true;
}

bool OAIPoolSpecification::is_enable_auto_scale_Set() const{
    return m_enable_auto_scale_isSet;
}

bool OAIPoolSpecification::is_enable_auto_scale_Valid() const{
    return m_enable_auto_scale_isValid;
}

bool OAIPoolSpecification::isEnableInterNodeCommunication() const {
    return m_enable_inter_node_communication;
}
void OAIPoolSpecification::setEnableInterNodeCommunication(const bool &enable_inter_node_communication) {
    m_enable_inter_node_communication = enable_inter_node_communication;
    m_enable_inter_node_communication_isSet = true;
}

bool OAIPoolSpecification::is_enable_inter_node_communication_Set() const{
    return m_enable_inter_node_communication_isSet;
}

bool OAIPoolSpecification::is_enable_inter_node_communication_Valid() const{
    return m_enable_inter_node_communication_isValid;
}

qint32 OAIPoolSpecification::getMaxTasksPerNode() const {
    return m_max_tasks_per_node;
}
void OAIPoolSpecification::setMaxTasksPerNode(const qint32 &max_tasks_per_node) {
    m_max_tasks_per_node = max_tasks_per_node;
    m_max_tasks_per_node_isSet = true;
}

bool OAIPoolSpecification::is_max_tasks_per_node_Set() const{
    return m_max_tasks_per_node_isSet;
}

bool OAIPoolSpecification::is_max_tasks_per_node_Valid() const{
    return m_max_tasks_per_node_isValid;
}

QList<OAIMetadataItem> OAIPoolSpecification::getMetadata() const {
    return m_metadata;
}
void OAIPoolSpecification::setMetadata(const QList<OAIMetadataItem> &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIPoolSpecification::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIPoolSpecification::is_metadata_Valid() const{
    return m_metadata_isValid;
}

QString OAIPoolSpecification::getOsFamily() const {
    return m_os_family;
}
void OAIPoolSpecification::setOsFamily(const QString &os_family) {
    m_os_family = os_family;
    m_os_family_isSet = true;
}

bool OAIPoolSpecification::is_os_family_Set() const{
    return m_os_family_isSet;
}

bool OAIPoolSpecification::is_os_family_Valid() const{
    return m_os_family_isValid;
}

QString OAIPoolSpecification::getResizeTimeout() const {
    return m_resize_timeout;
}
void OAIPoolSpecification::setResizeTimeout(const QString &resize_timeout) {
    m_resize_timeout = resize_timeout;
    m_resize_timeout_isSet = true;
}

bool OAIPoolSpecification::is_resize_timeout_Set() const{
    return m_resize_timeout_isSet;
}

bool OAIPoolSpecification::is_resize_timeout_Valid() const{
    return m_resize_timeout_isValid;
}

OAIStartTask OAIPoolSpecification::getStartTask() const {
    return m_start_task;
}
void OAIPoolSpecification::setStartTask(const OAIStartTask &start_task) {
    m_start_task = start_task;
    m_start_task_isSet = true;
}

bool OAIPoolSpecification::is_start_task_Set() const{
    return m_start_task_isSet;
}

bool OAIPoolSpecification::is_start_task_Valid() const{
    return m_start_task_isValid;
}

qint32 OAIPoolSpecification::getTargetDedicated() const {
    return m_target_dedicated;
}
void OAIPoolSpecification::setTargetDedicated(const qint32 &target_dedicated) {
    m_target_dedicated = target_dedicated;
    m_target_dedicated_isSet = true;
}

bool OAIPoolSpecification::is_target_dedicated_Set() const{
    return m_target_dedicated_isSet;
}

bool OAIPoolSpecification::is_target_dedicated_Valid() const{
    return m_target_dedicated_isValid;
}

QString OAIPoolSpecification::getTargetOsVersion() const {
    return m_target_os_version;
}
void OAIPoolSpecification::setTargetOsVersion(const QString &target_os_version) {
    m_target_os_version = target_os_version;
    m_target_os_version_isSet = true;
}

bool OAIPoolSpecification::is_target_os_version_Set() const{
    return m_target_os_version_isSet;
}

bool OAIPoolSpecification::is_target_os_version_Valid() const{
    return m_target_os_version_isValid;
}

OAITaskSchedulingPolicy OAIPoolSpecification::getTaskSchedulingPolicy() const {
    return m_task_scheduling_policy;
}
void OAIPoolSpecification::setTaskSchedulingPolicy(const OAITaskSchedulingPolicy &task_scheduling_policy) {
    m_task_scheduling_policy = task_scheduling_policy;
    m_task_scheduling_policy_isSet = true;
}

bool OAIPoolSpecification::is_task_scheduling_policy_Set() const{
    return m_task_scheduling_policy_isSet;
}

bool OAIPoolSpecification::is_task_scheduling_policy_Valid() const{
    return m_task_scheduling_policy_isValid;
}

QString OAIPoolSpecification::getVmSize() const {
    return m_vm_size;
}
void OAIPoolSpecification::setVmSize(const QString &vm_size) {
    m_vm_size = vm_size;
    m_vm_size_isSet = true;
}

bool OAIPoolSpecification::is_vm_size_Set() const{
    return m_vm_size_isSet;
}

bool OAIPoolSpecification::is_vm_size_Valid() const{
    return m_vm_size_isValid;
}

bool OAIPoolSpecification::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_application_package_references.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_scale_evaluation_interval_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_scale_formula_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_certificate_references.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_auto_scale_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_inter_node_communication_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_tasks_per_node_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_os_family_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resize_timeout_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_task.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_dedicated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_os_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_task_scheduling_policy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vm_size_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPoolSpecification::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
