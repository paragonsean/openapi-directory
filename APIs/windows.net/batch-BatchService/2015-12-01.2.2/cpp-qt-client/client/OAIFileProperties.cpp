/**
 * BatchService
 * A client for issuing REST requests to the Azure Batch service.
 *
 * The version of the OpenAPI document: 2015-12-01.2.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFileProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFileProperties::OAIFileProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFileProperties::OAIFileProperties() {
    this->initializeModel();
}

OAIFileProperties::~OAIFileProperties() {}

void OAIFileProperties::initializeModel() {

    m_content_length_isSet = false;
    m_content_length_isValid = false;

    m_content_type_isSet = false;
    m_content_type_isValid = false;

    m_creation_time_isSet = false;
    m_creation_time_isValid = false;

    m_last_modified_isSet = false;
    m_last_modified_isValid = false;
}

void OAIFileProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFileProperties::fromJsonObject(QJsonObject json) {

    m_content_length_isValid = ::OpenAPI::fromJsonValue(m_content_length, json[QString("contentLength")]);
    m_content_length_isSet = !json[QString("contentLength")].isNull() && m_content_length_isValid;

    m_content_type_isValid = ::OpenAPI::fromJsonValue(m_content_type, json[QString("contentType")]);
    m_content_type_isSet = !json[QString("contentType")].isNull() && m_content_type_isValid;

    m_creation_time_isValid = ::OpenAPI::fromJsonValue(m_creation_time, json[QString("creationTime")]);
    m_creation_time_isSet = !json[QString("creationTime")].isNull() && m_creation_time_isValid;

    m_last_modified_isValid = ::OpenAPI::fromJsonValue(m_last_modified, json[QString("lastModified")]);
    m_last_modified_isSet = !json[QString("lastModified")].isNull() && m_last_modified_isValid;
}

QString OAIFileProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFileProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_content_length_isSet) {
        obj.insert(QString("contentLength"), ::OpenAPI::toJsonValue(m_content_length));
    }
    if (m_content_type_isSet) {
        obj.insert(QString("contentType"), ::OpenAPI::toJsonValue(m_content_type));
    }
    if (m_creation_time_isSet) {
        obj.insert(QString("creationTime"), ::OpenAPI::toJsonValue(m_creation_time));
    }
    if (m_last_modified_isSet) {
        obj.insert(QString("lastModified"), ::OpenAPI::toJsonValue(m_last_modified));
    }
    return obj;
}

qint64 OAIFileProperties::getContentLength() const {
    return m_content_length;
}
void OAIFileProperties::setContentLength(const qint64 &content_length) {
    m_content_length = content_length;
    m_content_length_isSet = true;
}

bool OAIFileProperties::is_content_length_Set() const{
    return m_content_length_isSet;
}

bool OAIFileProperties::is_content_length_Valid() const{
    return m_content_length_isValid;
}

QString OAIFileProperties::getContentType() const {
    return m_content_type;
}
void OAIFileProperties::setContentType(const QString &content_type) {
    m_content_type = content_type;
    m_content_type_isSet = true;
}

bool OAIFileProperties::is_content_type_Set() const{
    return m_content_type_isSet;
}

bool OAIFileProperties::is_content_type_Valid() const{
    return m_content_type_isValid;
}

QDateTime OAIFileProperties::getCreationTime() const {
    return m_creation_time;
}
void OAIFileProperties::setCreationTime(const QDateTime &creation_time) {
    m_creation_time = creation_time;
    m_creation_time_isSet = true;
}

bool OAIFileProperties::is_creation_time_Set() const{
    return m_creation_time_isSet;
}

bool OAIFileProperties::is_creation_time_Valid() const{
    return m_creation_time_isValid;
}

QDateTime OAIFileProperties::getLastModified() const {
    return m_last_modified;
}
void OAIFileProperties::setLastModified(const QDateTime &last_modified) {
    m_last_modified = last_modified;
    m_last_modified_isSet = true;
}

bool OAIFileProperties::is_last_modified_Set() const{
    return m_last_modified_isSet;
}

bool OAIFileProperties::is_last_modified_Valid() const{
    return m_last_modified_isValid;
}

bool OAIFileProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_content_length_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFileProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_content_length_isValid && m_last_modified_isValid && true;
}

} // namespace OpenAPI
