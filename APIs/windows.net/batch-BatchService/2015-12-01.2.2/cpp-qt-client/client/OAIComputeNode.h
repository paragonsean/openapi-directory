/**
 * BatchService
 * A client for issuing REST requests to the Azure Batch service.
 *
 * The version of the OpenAPI document: 2015-12-01.2.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIComputeNode.h
 *
 * A compute node in the Batch service.
 */

#ifndef OAIComputeNode_H
#define OAIComputeNode_H

#include <QJsonObject>

#include "OAICertificateReference.h"
#include "OAIComputeNodeError.h"
#include "OAIStartTask.h"
#include "OAIStartTaskInformation.h"
#include "OAITaskInformation.h"
#include <QDateTime>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAICertificateReference;
class OAIComputeNodeError;
class OAITaskInformation;
class OAIStartTask;
class OAIStartTaskInformation;

class OAIComputeNode : public OAIObject {
public:
    OAIComputeNode();
    OAIComputeNode(QString json);
    ~OAIComputeNode() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAffinityId() const;
    void setAffinityId(const QString &affinity_id);
    bool is_affinity_id_Set() const;
    bool is_affinity_id_Valid() const;

    QDateTime getAllocationTime() const;
    void setAllocationTime(const QDateTime &allocation_time);
    bool is_allocation_time_Set() const;
    bool is_allocation_time_Valid() const;

    QList<OAICertificateReference> getCertificateReferences() const;
    void setCertificateReferences(const QList<OAICertificateReference> &certificate_references);
    bool is_certificate_references_Set() const;
    bool is_certificate_references_Valid() const;

    QList<OAIComputeNodeError> getErrors() const;
    void setErrors(const QList<OAIComputeNodeError> &errors);
    bool is_errors_Set() const;
    bool is_errors_Valid() const;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QString getIpAddress() const;
    void setIpAddress(const QString &ip_address);
    bool is_ip_address_Set() const;
    bool is_ip_address_Valid() const;

    QDateTime getLastBootTime() const;
    void setLastBootTime(const QDateTime &last_boot_time);
    bool is_last_boot_time_Set() const;
    bool is_last_boot_time_Valid() const;

    QList<OAITaskInformation> getRecentTasks() const;
    void setRecentTasks(const QList<OAITaskInformation> &recent_tasks);
    bool is_recent_tasks_Set() const;
    bool is_recent_tasks_Valid() const;

    QString getSchedulingState() const;
    void setSchedulingState(const QString &scheduling_state);
    bool is_scheduling_state_Set() const;
    bool is_scheduling_state_Valid() const;

    OAIStartTask getStartTask() const;
    void setStartTask(const OAIStartTask &start_task);
    bool is_start_task_Set() const;
    bool is_start_task_Valid() const;

    OAIStartTaskInformation getStartTaskInfo() const;
    void setStartTaskInfo(const OAIStartTaskInformation &start_task_info);
    bool is_start_task_info_Set() const;
    bool is_start_task_info_Valid() const;

    QString getState() const;
    void setState(const QString &state);
    bool is_state_Set() const;
    bool is_state_Valid() const;

    QDateTime getStateTransitionTime() const;
    void setStateTransitionTime(const QDateTime &state_transition_time);
    bool is_state_transition_time_Set() const;
    bool is_state_transition_time_Valid() const;

    qint32 getTotalTasksRun() const;
    void setTotalTasksRun(const qint32 &total_tasks_run);
    bool is_total_tasks_run_Set() const;
    bool is_total_tasks_run_Valid() const;

    QString getUrl() const;
    void setUrl(const QString &url);
    bool is_url_Set() const;
    bool is_url_Valid() const;

    QString getVmSize() const;
    void setVmSize(const QString &vm_size);
    bool is_vm_size_Set() const;
    bool is_vm_size_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_affinity_id;
    bool m_affinity_id_isSet;
    bool m_affinity_id_isValid;

    QDateTime m_allocation_time;
    bool m_allocation_time_isSet;
    bool m_allocation_time_isValid;

    QList<OAICertificateReference> m_certificate_references;
    bool m_certificate_references_isSet;
    bool m_certificate_references_isValid;

    QList<OAIComputeNodeError> m_errors;
    bool m_errors_isSet;
    bool m_errors_isValid;

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    QString m_ip_address;
    bool m_ip_address_isSet;
    bool m_ip_address_isValid;

    QDateTime m_last_boot_time;
    bool m_last_boot_time_isSet;
    bool m_last_boot_time_isValid;

    QList<OAITaskInformation> m_recent_tasks;
    bool m_recent_tasks_isSet;
    bool m_recent_tasks_isValid;

    QString m_scheduling_state;
    bool m_scheduling_state_isSet;
    bool m_scheduling_state_isValid;

    OAIStartTask m_start_task;
    bool m_start_task_isSet;
    bool m_start_task_isValid;

    OAIStartTaskInformation m_start_task_info;
    bool m_start_task_info_isSet;
    bool m_start_task_info_isValid;

    QString m_state;
    bool m_state_isSet;
    bool m_state_isValid;

    QDateTime m_state_transition_time;
    bool m_state_transition_time_isSet;
    bool m_state_transition_time_isValid;

    qint32 m_total_tasks_run;
    bool m_total_tasks_run_isSet;
    bool m_total_tasks_run_isValid;

    QString m_url;
    bool m_url_isSet;
    bool m_url_isValid;

    QString m_vm_size;
    bool m_vm_size_isSet;
    bool m_vm_size_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIComputeNode)

#endif // OAIComputeNode_H
