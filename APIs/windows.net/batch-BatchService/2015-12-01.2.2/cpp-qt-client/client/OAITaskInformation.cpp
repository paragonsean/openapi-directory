/**
 * BatchService
 * A client for issuing REST requests to the Azure Batch service.
 *
 * The version of the OpenAPI document: 2015-12-01.2.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITaskInformation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITaskInformation::OAITaskInformation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITaskInformation::OAITaskInformation() {
    this->initializeModel();
}

OAITaskInformation::~OAITaskInformation() {}

void OAITaskInformation::initializeModel() {

    m_execution_info_isSet = false;
    m_execution_info_isValid = false;

    m_job_id_isSet = false;
    m_job_id_isValid = false;

    m_subtask_id_isSet = false;
    m_subtask_id_isValid = false;

    m_task_id_isSet = false;
    m_task_id_isValid = false;

    m_task_state_isSet = false;
    m_task_state_isValid = false;

    m_task_url_isSet = false;
    m_task_url_isValid = false;
}

void OAITaskInformation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITaskInformation::fromJsonObject(QJsonObject json) {

    m_execution_info_isValid = ::OpenAPI::fromJsonValue(m_execution_info, json[QString("executionInfo")]);
    m_execution_info_isSet = !json[QString("executionInfo")].isNull() && m_execution_info_isValid;

    m_job_id_isValid = ::OpenAPI::fromJsonValue(m_job_id, json[QString("jobId")]);
    m_job_id_isSet = !json[QString("jobId")].isNull() && m_job_id_isValid;

    m_subtask_id_isValid = ::OpenAPI::fromJsonValue(m_subtask_id, json[QString("subtaskId")]);
    m_subtask_id_isSet = !json[QString("subtaskId")].isNull() && m_subtask_id_isValid;

    m_task_id_isValid = ::OpenAPI::fromJsonValue(m_task_id, json[QString("taskId")]);
    m_task_id_isSet = !json[QString("taskId")].isNull() && m_task_id_isValid;

    m_task_state_isValid = ::OpenAPI::fromJsonValue(m_task_state, json[QString("taskState")]);
    m_task_state_isSet = !json[QString("taskState")].isNull() && m_task_state_isValid;

    m_task_url_isValid = ::OpenAPI::fromJsonValue(m_task_url, json[QString("taskUrl")]);
    m_task_url_isSet = !json[QString("taskUrl")].isNull() && m_task_url_isValid;
}

QString OAITaskInformation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITaskInformation::asJsonObject() const {
    QJsonObject obj;
    if (m_execution_info.isSet()) {
        obj.insert(QString("executionInfo"), ::OpenAPI::toJsonValue(m_execution_info));
    }
    if (m_job_id_isSet) {
        obj.insert(QString("jobId"), ::OpenAPI::toJsonValue(m_job_id));
    }
    if (m_subtask_id_isSet) {
        obj.insert(QString("subtaskId"), ::OpenAPI::toJsonValue(m_subtask_id));
    }
    if (m_task_id_isSet) {
        obj.insert(QString("taskId"), ::OpenAPI::toJsonValue(m_task_id));
    }
    if (m_task_state_isSet) {
        obj.insert(QString("taskState"), ::OpenAPI::toJsonValue(m_task_state));
    }
    if (m_task_url_isSet) {
        obj.insert(QString("taskUrl"), ::OpenAPI::toJsonValue(m_task_url));
    }
    return obj;
}

OAITaskExecutionInformation OAITaskInformation::getExecutionInfo() const {
    return m_execution_info;
}
void OAITaskInformation::setExecutionInfo(const OAITaskExecutionInformation &execution_info) {
    m_execution_info = execution_info;
    m_execution_info_isSet = true;
}

bool OAITaskInformation::is_execution_info_Set() const{
    return m_execution_info_isSet;
}

bool OAITaskInformation::is_execution_info_Valid() const{
    return m_execution_info_isValid;
}

QString OAITaskInformation::getJobId() const {
    return m_job_id;
}
void OAITaskInformation::setJobId(const QString &job_id) {
    m_job_id = job_id;
    m_job_id_isSet = true;
}

bool OAITaskInformation::is_job_id_Set() const{
    return m_job_id_isSet;
}

bool OAITaskInformation::is_job_id_Valid() const{
    return m_job_id_isValid;
}

qint32 OAITaskInformation::getSubtaskId() const {
    return m_subtask_id;
}
void OAITaskInformation::setSubtaskId(const qint32 &subtask_id) {
    m_subtask_id = subtask_id;
    m_subtask_id_isSet = true;
}

bool OAITaskInformation::is_subtask_id_Set() const{
    return m_subtask_id_isSet;
}

bool OAITaskInformation::is_subtask_id_Valid() const{
    return m_subtask_id_isValid;
}

QString OAITaskInformation::getTaskId() const {
    return m_task_id;
}
void OAITaskInformation::setTaskId(const QString &task_id) {
    m_task_id = task_id;
    m_task_id_isSet = true;
}

bool OAITaskInformation::is_task_id_Set() const{
    return m_task_id_isSet;
}

bool OAITaskInformation::is_task_id_Valid() const{
    return m_task_id_isValid;
}

QString OAITaskInformation::getTaskState() const {
    return m_task_state;
}
void OAITaskInformation::setTaskState(const QString &task_state) {
    m_task_state = task_state;
    m_task_state_isSet = true;
}

bool OAITaskInformation::is_task_state_Set() const{
    return m_task_state_isSet;
}

bool OAITaskInformation::is_task_state_Valid() const{
    return m_task_state_isValid;
}

QString OAITaskInformation::getTaskUrl() const {
    return m_task_url;
}
void OAITaskInformation::setTaskUrl(const QString &task_url) {
    m_task_url = task_url;
    m_task_url_isSet = true;
}

bool OAITaskInformation::is_task_url_Set() const{
    return m_task_url_isSet;
}

bool OAITaskInformation::is_task_url_Valid() const{
    return m_task_url_isValid;
}

bool OAITaskInformation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_execution_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subtask_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_task_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_task_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_task_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITaskInformation::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_task_state_isValid && true;
}

} // namespace OpenAPI
