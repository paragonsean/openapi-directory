/**
 * BatchService
 * A client for issuing REST requests to the Azure Batch service.
 *
 * The version of the OpenAPI document: 2015-12-01.2.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIPoolSpecification.h
 *
 * Specification for creating a new pool.
 */

#ifndef OAIPoolSpecification_H
#define OAIPoolSpecification_H

#include <QJsonObject>

#include "OAIApplicationPackageReference.h"
#include "OAICertificateReference.h"
#include "OAIMetadataItem.h"
#include "OAIStartTask.h"
#include "OAITaskSchedulingPolicy.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIApplicationPackageReference;
class OAICertificateReference;
class OAIMetadataItem;
class OAIStartTask;
class OAITaskSchedulingPolicy;

class OAIPoolSpecification : public OAIObject {
public:
    OAIPoolSpecification();
    OAIPoolSpecification(QString json);
    ~OAIPoolSpecification() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<OAIApplicationPackageReference> getApplicationPackageReferences() const;
    void setApplicationPackageReferences(const QList<OAIApplicationPackageReference> &application_package_references);
    bool is_application_package_references_Set() const;
    bool is_application_package_references_Valid() const;

    QString getAutoScaleEvaluationInterval() const;
    void setAutoScaleEvaluationInterval(const QString &auto_scale_evaluation_interval);
    bool is_auto_scale_evaluation_interval_Set() const;
    bool is_auto_scale_evaluation_interval_Valid() const;

    QString getAutoScaleFormula() const;
    void setAutoScaleFormula(const QString &auto_scale_formula);
    bool is_auto_scale_formula_Set() const;
    bool is_auto_scale_formula_Valid() const;

    QList<OAICertificateReference> getCertificateReferences() const;
    void setCertificateReferences(const QList<OAICertificateReference> &certificate_references);
    bool is_certificate_references_Set() const;
    bool is_certificate_references_Valid() const;

    QString getDisplayName() const;
    void setDisplayName(const QString &display_name);
    bool is_display_name_Set() const;
    bool is_display_name_Valid() const;

    bool isEnableAutoScale() const;
    void setEnableAutoScale(const bool &enable_auto_scale);
    bool is_enable_auto_scale_Set() const;
    bool is_enable_auto_scale_Valid() const;

    bool isEnableInterNodeCommunication() const;
    void setEnableInterNodeCommunication(const bool &enable_inter_node_communication);
    bool is_enable_inter_node_communication_Set() const;
    bool is_enable_inter_node_communication_Valid() const;

    qint32 getMaxTasksPerNode() const;
    void setMaxTasksPerNode(const qint32 &max_tasks_per_node);
    bool is_max_tasks_per_node_Set() const;
    bool is_max_tasks_per_node_Valid() const;

    QList<OAIMetadataItem> getMetadata() const;
    void setMetadata(const QList<OAIMetadataItem> &metadata);
    bool is_metadata_Set() const;
    bool is_metadata_Valid() const;

    QString getOsFamily() const;
    void setOsFamily(const QString &os_family);
    bool is_os_family_Set() const;
    bool is_os_family_Valid() const;

    QString getResizeTimeout() const;
    void setResizeTimeout(const QString &resize_timeout);
    bool is_resize_timeout_Set() const;
    bool is_resize_timeout_Valid() const;

    OAIStartTask getStartTask() const;
    void setStartTask(const OAIStartTask &start_task);
    bool is_start_task_Set() const;
    bool is_start_task_Valid() const;

    qint32 getTargetDedicated() const;
    void setTargetDedicated(const qint32 &target_dedicated);
    bool is_target_dedicated_Set() const;
    bool is_target_dedicated_Valid() const;

    QString getTargetOsVersion() const;
    void setTargetOsVersion(const QString &target_os_version);
    bool is_target_os_version_Set() const;
    bool is_target_os_version_Valid() const;

    OAITaskSchedulingPolicy getTaskSchedulingPolicy() const;
    void setTaskSchedulingPolicy(const OAITaskSchedulingPolicy &task_scheduling_policy);
    bool is_task_scheduling_policy_Set() const;
    bool is_task_scheduling_policy_Valid() const;

    QString getVmSize() const;
    void setVmSize(const QString &vm_size);
    bool is_vm_size_Set() const;
    bool is_vm_size_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<OAIApplicationPackageReference> m_application_package_references;
    bool m_application_package_references_isSet;
    bool m_application_package_references_isValid;

    QString m_auto_scale_evaluation_interval;
    bool m_auto_scale_evaluation_interval_isSet;
    bool m_auto_scale_evaluation_interval_isValid;

    QString m_auto_scale_formula;
    bool m_auto_scale_formula_isSet;
    bool m_auto_scale_formula_isValid;

    QList<OAICertificateReference> m_certificate_references;
    bool m_certificate_references_isSet;
    bool m_certificate_references_isValid;

    QString m_display_name;
    bool m_display_name_isSet;
    bool m_display_name_isValid;

    bool m_enable_auto_scale;
    bool m_enable_auto_scale_isSet;
    bool m_enable_auto_scale_isValid;

    bool m_enable_inter_node_communication;
    bool m_enable_inter_node_communication_isSet;
    bool m_enable_inter_node_communication_isValid;

    qint32 m_max_tasks_per_node;
    bool m_max_tasks_per_node_isSet;
    bool m_max_tasks_per_node_isValid;

    QList<OAIMetadataItem> m_metadata;
    bool m_metadata_isSet;
    bool m_metadata_isValid;

    QString m_os_family;
    bool m_os_family_isSet;
    bool m_os_family_isValid;

    QString m_resize_timeout;
    bool m_resize_timeout_isSet;
    bool m_resize_timeout_isValid;

    OAIStartTask m_start_task;
    bool m_start_task_isSet;
    bool m_start_task_isValid;

    qint32 m_target_dedicated;
    bool m_target_dedicated_isSet;
    bool m_target_dedicated_isValid;

    QString m_target_os_version;
    bool m_target_os_version_isSet;
    bool m_target_os_version_isValid;

    OAITaskSchedulingPolicy m_task_scheduling_policy;
    bool m_task_scheduling_policy_isSet;
    bool m_task_scheduling_policy_isValid;

    QString m_vm_size;
    bool m_vm_size_isSet;
    bool m_vm_size_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIPoolSpecification)

#endif // OAIPoolSpecification_H
