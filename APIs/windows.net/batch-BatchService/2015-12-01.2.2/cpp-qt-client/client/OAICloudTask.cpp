/**
 * BatchService
 * A client for issuing REST requests to the Azure Batch service.
 *
 * The version of the OpenAPI document: 2015-12-01.2.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICloudTask.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICloudTask::OAICloudTask(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICloudTask::OAICloudTask() {
    this->initializeModel();
}

OAICloudTask::~OAICloudTask() {}

void OAICloudTask::initializeModel() {

    m_affinity_info_isSet = false;
    m_affinity_info_isValid = false;

    m_command_line_isSet = false;
    m_command_line_isValid = false;

    m_constraints_isSet = false;
    m_constraints_isValid = false;

    m_creation_time_isSet = false;
    m_creation_time_isValid = false;

    m_depends_on_isSet = false;
    m_depends_on_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_e_tag_isSet = false;
    m_e_tag_isValid = false;

    m_environment_settings_isSet = false;
    m_environment_settings_isValid = false;

    m_execution_info_isSet = false;
    m_execution_info_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_last_modified_isSet = false;
    m_last_modified_isValid = false;

    m_multi_instance_settings_isSet = false;
    m_multi_instance_settings_isValid = false;

    m_node_info_isSet = false;
    m_node_info_isValid = false;

    m_previous_state_isSet = false;
    m_previous_state_isValid = false;

    m_previous_state_transition_time_isSet = false;
    m_previous_state_transition_time_isValid = false;

    m_resource_files_isSet = false;
    m_resource_files_isValid = false;

    m_run_elevated_isSet = false;
    m_run_elevated_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_state_transition_time_isSet = false;
    m_state_transition_time_isValid = false;

    m_stats_isSet = false;
    m_stats_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAICloudTask::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICloudTask::fromJsonObject(QJsonObject json) {

    m_affinity_info_isValid = ::OpenAPI::fromJsonValue(m_affinity_info, json[QString("affinityInfo")]);
    m_affinity_info_isSet = !json[QString("affinityInfo")].isNull() && m_affinity_info_isValid;

    m_command_line_isValid = ::OpenAPI::fromJsonValue(m_command_line, json[QString("commandLine")]);
    m_command_line_isSet = !json[QString("commandLine")].isNull() && m_command_line_isValid;

    m_constraints_isValid = ::OpenAPI::fromJsonValue(m_constraints, json[QString("constraints")]);
    m_constraints_isSet = !json[QString("constraints")].isNull() && m_constraints_isValid;

    m_creation_time_isValid = ::OpenAPI::fromJsonValue(m_creation_time, json[QString("creationTime")]);
    m_creation_time_isSet = !json[QString("creationTime")].isNull() && m_creation_time_isValid;

    m_depends_on_isValid = ::OpenAPI::fromJsonValue(m_depends_on, json[QString("dependsOn")]);
    m_depends_on_isSet = !json[QString("dependsOn")].isNull() && m_depends_on_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_e_tag_isValid = ::OpenAPI::fromJsonValue(m_e_tag, json[QString("eTag")]);
    m_e_tag_isSet = !json[QString("eTag")].isNull() && m_e_tag_isValid;

    m_environment_settings_isValid = ::OpenAPI::fromJsonValue(m_environment_settings, json[QString("environmentSettings")]);
    m_environment_settings_isSet = !json[QString("environmentSettings")].isNull() && m_environment_settings_isValid;

    m_execution_info_isValid = ::OpenAPI::fromJsonValue(m_execution_info, json[QString("executionInfo")]);
    m_execution_info_isSet = !json[QString("executionInfo")].isNull() && m_execution_info_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_last_modified_isValid = ::OpenAPI::fromJsonValue(m_last_modified, json[QString("lastModified")]);
    m_last_modified_isSet = !json[QString("lastModified")].isNull() && m_last_modified_isValid;

    m_multi_instance_settings_isValid = ::OpenAPI::fromJsonValue(m_multi_instance_settings, json[QString("multiInstanceSettings")]);
    m_multi_instance_settings_isSet = !json[QString("multiInstanceSettings")].isNull() && m_multi_instance_settings_isValid;

    m_node_info_isValid = ::OpenAPI::fromJsonValue(m_node_info, json[QString("nodeInfo")]);
    m_node_info_isSet = !json[QString("nodeInfo")].isNull() && m_node_info_isValid;

    m_previous_state_isValid = ::OpenAPI::fromJsonValue(m_previous_state, json[QString("previousState")]);
    m_previous_state_isSet = !json[QString("previousState")].isNull() && m_previous_state_isValid;

    m_previous_state_transition_time_isValid = ::OpenAPI::fromJsonValue(m_previous_state_transition_time, json[QString("previousStateTransitionTime")]);
    m_previous_state_transition_time_isSet = !json[QString("previousStateTransitionTime")].isNull() && m_previous_state_transition_time_isValid;

    m_resource_files_isValid = ::OpenAPI::fromJsonValue(m_resource_files, json[QString("resourceFiles")]);
    m_resource_files_isSet = !json[QString("resourceFiles")].isNull() && m_resource_files_isValid;

    m_run_elevated_isValid = ::OpenAPI::fromJsonValue(m_run_elevated, json[QString("runElevated")]);
    m_run_elevated_isSet = !json[QString("runElevated")].isNull() && m_run_elevated_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_state_transition_time_isValid = ::OpenAPI::fromJsonValue(m_state_transition_time, json[QString("stateTransitionTime")]);
    m_state_transition_time_isSet = !json[QString("stateTransitionTime")].isNull() && m_state_transition_time_isValid;

    m_stats_isValid = ::OpenAPI::fromJsonValue(m_stats, json[QString("stats")]);
    m_stats_isSet = !json[QString("stats")].isNull() && m_stats_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAICloudTask::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICloudTask::asJsonObject() const {
    QJsonObject obj;
    if (m_affinity_info.isSet()) {
        obj.insert(QString("affinityInfo"), ::OpenAPI::toJsonValue(m_affinity_info));
    }
    if (m_command_line_isSet) {
        obj.insert(QString("commandLine"), ::OpenAPI::toJsonValue(m_command_line));
    }
    if (m_constraints.isSet()) {
        obj.insert(QString("constraints"), ::OpenAPI::toJsonValue(m_constraints));
    }
    if (m_creation_time_isSet) {
        obj.insert(QString("creationTime"), ::OpenAPI::toJsonValue(m_creation_time));
    }
    if (m_depends_on.isSet()) {
        obj.insert(QString("dependsOn"), ::OpenAPI::toJsonValue(m_depends_on));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_e_tag_isSet) {
        obj.insert(QString("eTag"), ::OpenAPI::toJsonValue(m_e_tag));
    }
    if (m_environment_settings.size() > 0) {
        obj.insert(QString("environmentSettings"), ::OpenAPI::toJsonValue(m_environment_settings));
    }
    if (m_execution_info.isSet()) {
        obj.insert(QString("executionInfo"), ::OpenAPI::toJsonValue(m_execution_info));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_last_modified_isSet) {
        obj.insert(QString("lastModified"), ::OpenAPI::toJsonValue(m_last_modified));
    }
    if (m_multi_instance_settings.isSet()) {
        obj.insert(QString("multiInstanceSettings"), ::OpenAPI::toJsonValue(m_multi_instance_settings));
    }
    if (m_node_info.isSet()) {
        obj.insert(QString("nodeInfo"), ::OpenAPI::toJsonValue(m_node_info));
    }
    if (m_previous_state_isSet) {
        obj.insert(QString("previousState"), ::OpenAPI::toJsonValue(m_previous_state));
    }
    if (m_previous_state_transition_time_isSet) {
        obj.insert(QString("previousStateTransitionTime"), ::OpenAPI::toJsonValue(m_previous_state_transition_time));
    }
    if (m_resource_files.size() > 0) {
        obj.insert(QString("resourceFiles"), ::OpenAPI::toJsonValue(m_resource_files));
    }
    if (m_run_elevated_isSet) {
        obj.insert(QString("runElevated"), ::OpenAPI::toJsonValue(m_run_elevated));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_state_transition_time_isSet) {
        obj.insert(QString("stateTransitionTime"), ::OpenAPI::toJsonValue(m_state_transition_time));
    }
    if (m_stats.isSet()) {
        obj.insert(QString("stats"), ::OpenAPI::toJsonValue(m_stats));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

OAIAffinityInformation OAICloudTask::getAffinityInfo() const {
    return m_affinity_info;
}
void OAICloudTask::setAffinityInfo(const OAIAffinityInformation &affinity_info) {
    m_affinity_info = affinity_info;
    m_affinity_info_isSet = true;
}

bool OAICloudTask::is_affinity_info_Set() const{
    return m_affinity_info_isSet;
}

bool OAICloudTask::is_affinity_info_Valid() const{
    return m_affinity_info_isValid;
}

QString OAICloudTask::getCommandLine() const {
    return m_command_line;
}
void OAICloudTask::setCommandLine(const QString &command_line) {
    m_command_line = command_line;
    m_command_line_isSet = true;
}

bool OAICloudTask::is_command_line_Set() const{
    return m_command_line_isSet;
}

bool OAICloudTask::is_command_line_Valid() const{
    return m_command_line_isValid;
}

OAITaskConstraints OAICloudTask::getConstraints() const {
    return m_constraints;
}
void OAICloudTask::setConstraints(const OAITaskConstraints &constraints) {
    m_constraints = constraints;
    m_constraints_isSet = true;
}

bool OAICloudTask::is_constraints_Set() const{
    return m_constraints_isSet;
}

bool OAICloudTask::is_constraints_Valid() const{
    return m_constraints_isValid;
}

QDateTime OAICloudTask::getCreationTime() const {
    return m_creation_time;
}
void OAICloudTask::setCreationTime(const QDateTime &creation_time) {
    m_creation_time = creation_time;
    m_creation_time_isSet = true;
}

bool OAICloudTask::is_creation_time_Set() const{
    return m_creation_time_isSet;
}

bool OAICloudTask::is_creation_time_Valid() const{
    return m_creation_time_isValid;
}

OAITaskDependencies OAICloudTask::getDependsOn() const {
    return m_depends_on;
}
void OAICloudTask::setDependsOn(const OAITaskDependencies &depends_on) {
    m_depends_on = depends_on;
    m_depends_on_isSet = true;
}

bool OAICloudTask::is_depends_on_Set() const{
    return m_depends_on_isSet;
}

bool OAICloudTask::is_depends_on_Valid() const{
    return m_depends_on_isValid;
}

QString OAICloudTask::getDisplayName() const {
    return m_display_name;
}
void OAICloudTask::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAICloudTask::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAICloudTask::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAICloudTask::getETag() const {
    return m_e_tag;
}
void OAICloudTask::setETag(const QString &e_tag) {
    m_e_tag = e_tag;
    m_e_tag_isSet = true;
}

bool OAICloudTask::is_e_tag_Set() const{
    return m_e_tag_isSet;
}

bool OAICloudTask::is_e_tag_Valid() const{
    return m_e_tag_isValid;
}

QList<OAIEnvironmentSetting> OAICloudTask::getEnvironmentSettings() const {
    return m_environment_settings;
}
void OAICloudTask::setEnvironmentSettings(const QList<OAIEnvironmentSetting> &environment_settings) {
    m_environment_settings = environment_settings;
    m_environment_settings_isSet = true;
}

bool OAICloudTask::is_environment_settings_Set() const{
    return m_environment_settings_isSet;
}

bool OAICloudTask::is_environment_settings_Valid() const{
    return m_environment_settings_isValid;
}

OAITaskExecutionInformation OAICloudTask::getExecutionInfo() const {
    return m_execution_info;
}
void OAICloudTask::setExecutionInfo(const OAITaskExecutionInformation &execution_info) {
    m_execution_info = execution_info;
    m_execution_info_isSet = true;
}

bool OAICloudTask::is_execution_info_Set() const{
    return m_execution_info_isSet;
}

bool OAICloudTask::is_execution_info_Valid() const{
    return m_execution_info_isValid;
}

QString OAICloudTask::getId() const {
    return m_id;
}
void OAICloudTask::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAICloudTask::is_id_Set() const{
    return m_id_isSet;
}

bool OAICloudTask::is_id_Valid() const{
    return m_id_isValid;
}

QDateTime OAICloudTask::getLastModified() const {
    return m_last_modified;
}
void OAICloudTask::setLastModified(const QDateTime &last_modified) {
    m_last_modified = last_modified;
    m_last_modified_isSet = true;
}

bool OAICloudTask::is_last_modified_Set() const{
    return m_last_modified_isSet;
}

bool OAICloudTask::is_last_modified_Valid() const{
    return m_last_modified_isValid;
}

OAIMultiInstanceSettings OAICloudTask::getMultiInstanceSettings() const {
    return m_multi_instance_settings;
}
void OAICloudTask::setMultiInstanceSettings(const OAIMultiInstanceSettings &multi_instance_settings) {
    m_multi_instance_settings = multi_instance_settings;
    m_multi_instance_settings_isSet = true;
}

bool OAICloudTask::is_multi_instance_settings_Set() const{
    return m_multi_instance_settings_isSet;
}

bool OAICloudTask::is_multi_instance_settings_Valid() const{
    return m_multi_instance_settings_isValid;
}

OAIComputeNodeInformation OAICloudTask::getNodeInfo() const {
    return m_node_info;
}
void OAICloudTask::setNodeInfo(const OAIComputeNodeInformation &node_info) {
    m_node_info = node_info;
    m_node_info_isSet = true;
}

bool OAICloudTask::is_node_info_Set() const{
    return m_node_info_isSet;
}

bool OAICloudTask::is_node_info_Valid() const{
    return m_node_info_isValid;
}

QString OAICloudTask::getPreviousState() const {
    return m_previous_state;
}
void OAICloudTask::setPreviousState(const QString &previous_state) {
    m_previous_state = previous_state;
    m_previous_state_isSet = true;
}

bool OAICloudTask::is_previous_state_Set() const{
    return m_previous_state_isSet;
}

bool OAICloudTask::is_previous_state_Valid() const{
    return m_previous_state_isValid;
}

QDateTime OAICloudTask::getPreviousStateTransitionTime() const {
    return m_previous_state_transition_time;
}
void OAICloudTask::setPreviousStateTransitionTime(const QDateTime &previous_state_transition_time) {
    m_previous_state_transition_time = previous_state_transition_time;
    m_previous_state_transition_time_isSet = true;
}

bool OAICloudTask::is_previous_state_transition_time_Set() const{
    return m_previous_state_transition_time_isSet;
}

bool OAICloudTask::is_previous_state_transition_time_Valid() const{
    return m_previous_state_transition_time_isValid;
}

QList<OAIResourceFile> OAICloudTask::getResourceFiles() const {
    return m_resource_files;
}
void OAICloudTask::setResourceFiles(const QList<OAIResourceFile> &resource_files) {
    m_resource_files = resource_files;
    m_resource_files_isSet = true;
}

bool OAICloudTask::is_resource_files_Set() const{
    return m_resource_files_isSet;
}

bool OAICloudTask::is_resource_files_Valid() const{
    return m_resource_files_isValid;
}

bool OAICloudTask::isRunElevated() const {
    return m_run_elevated;
}
void OAICloudTask::setRunElevated(const bool &run_elevated) {
    m_run_elevated = run_elevated;
    m_run_elevated_isSet = true;
}

bool OAICloudTask::is_run_elevated_Set() const{
    return m_run_elevated_isSet;
}

bool OAICloudTask::is_run_elevated_Valid() const{
    return m_run_elevated_isValid;
}

QString OAICloudTask::getState() const {
    return m_state;
}
void OAICloudTask::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAICloudTask::is_state_Set() const{
    return m_state_isSet;
}

bool OAICloudTask::is_state_Valid() const{
    return m_state_isValid;
}

QDateTime OAICloudTask::getStateTransitionTime() const {
    return m_state_transition_time;
}
void OAICloudTask::setStateTransitionTime(const QDateTime &state_transition_time) {
    m_state_transition_time = state_transition_time;
    m_state_transition_time_isSet = true;
}

bool OAICloudTask::is_state_transition_time_Set() const{
    return m_state_transition_time_isSet;
}

bool OAICloudTask::is_state_transition_time_Valid() const{
    return m_state_transition_time_isValid;
}

OAITaskStatistics OAICloudTask::getStats() const {
    return m_stats;
}
void OAICloudTask::setStats(const OAITaskStatistics &stats) {
    m_stats = stats;
    m_stats_isSet = true;
}

bool OAICloudTask::is_stats_Set() const{
    return m_stats_isSet;
}

bool OAICloudTask::is_stats_Valid() const{
    return m_stats_isValid;
}

QString OAICloudTask::getUrl() const {
    return m_url;
}
void OAICloudTask::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAICloudTask::is_url_Set() const{
    return m_url_isSet;
}

bool OAICloudTask::is_url_Valid() const{
    return m_url_isValid;
}

bool OAICloudTask::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_affinity_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_command_line_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_constraints.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_depends_on.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_e_tag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_environment_settings.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_execution_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_multi_instance_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_previous_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_previous_state_transition_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_files.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_run_elevated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_transition_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stats.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICloudTask::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
