/**
 * BatchService
 * A client for issuing REST requests to the Azure Batch service.
 *
 * The version of the OpenAPI document: 2015-12-01.2.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ApplicationPackageReference from './ApplicationPackageReference';
import CertificateReference from './CertificateReference';
import MetadataItem from './MetadataItem';
import StartTask from './StartTask';

/**
 * The PoolPatchParameter model module.
 * @module model/PoolPatchParameter
 * @version 2015-12-01.2.2
 */
class PoolPatchParameter {
    /**
     * Constructs a new <code>PoolPatchParameter</code>.
     * Parameters for a CloudPoolOperations.Patch request.
     * @alias module:model/PoolPatchParameter
     */
    constructor() { 
        
        PoolPatchParameter.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PoolPatchParameter</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PoolPatchParameter} obj Optional instance to populate.
     * @return {module:model/PoolPatchParameter} The populated <code>PoolPatchParameter</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PoolPatchParameter();

            if (data.hasOwnProperty('applicationPackageReferences')) {
                obj['applicationPackageReferences'] = ApiClient.convertToType(data['applicationPackageReferences'], [ApplicationPackageReference]);
            }
            if (data.hasOwnProperty('certificateReferences')) {
                obj['certificateReferences'] = ApiClient.convertToType(data['certificateReferences'], [CertificateReference]);
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = ApiClient.convertToType(data['metadata'], [MetadataItem]);
            }
            if (data.hasOwnProperty('startTask')) {
                obj['startTask'] = StartTask.constructFromObject(data['startTask']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PoolPatchParameter</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PoolPatchParameter</code>.
     */
    static validateJSON(data) {
        if (data['applicationPackageReferences']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['applicationPackageReferences'])) {
                throw new Error("Expected the field `applicationPackageReferences` to be an array in the JSON data but got " + data['applicationPackageReferences']);
            }
            // validate the optional field `applicationPackageReferences` (array)
            for (const item of data['applicationPackageReferences']) {
                ApplicationPackageReference.validateJSON(item);
            };
        }
        if (data['certificateReferences']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['certificateReferences'])) {
                throw new Error("Expected the field `certificateReferences` to be an array in the JSON data but got " + data['certificateReferences']);
            }
            // validate the optional field `certificateReferences` (array)
            for (const item of data['certificateReferences']) {
                CertificateReference.validateJSON(item);
            };
        }
        if (data['metadata']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['metadata'])) {
                throw new Error("Expected the field `metadata` to be an array in the JSON data but got " + data['metadata']);
            }
            // validate the optional field `metadata` (array)
            for (const item of data['metadata']) {
                MetadataItem.validateJSON(item);
            };
        }
        // validate the optional field `startTask`
        if (data['startTask']) { // data not null
          StartTask.validateJSON(data['startTask']);
        }

        return true;
    }


}



/**
 * Sets a list of application packages to be installed on each compute node in the pool. If omitted, any existing application package references are left unchanged.
 * @member {Array.<module:model/ApplicationPackageReference>} applicationPackageReferences
 */
PoolPatchParameter.prototype['applicationPackageReferences'] = undefined;

/**
 * Sets a list of certificates to be installed on each compute node in the pool. If omitted, any existing certificate references are left unchanged.
 * @member {Array.<module:model/CertificateReference>} certificateReferences
 */
PoolPatchParameter.prototype['certificateReferences'] = undefined;

/**
 * Sets a list of name-value pairs associated with the pool as metadata. If omitted, any existing metadata is left unchanged.
 * @member {Array.<module:model/MetadataItem>} metadata
 */
PoolPatchParameter.prototype['metadata'] = undefined;

/**
 * @member {module:model/StartTask} startTask
 */
PoolPatchParameter.prototype['startTask'] = undefined;






export default PoolPatchParameter;

