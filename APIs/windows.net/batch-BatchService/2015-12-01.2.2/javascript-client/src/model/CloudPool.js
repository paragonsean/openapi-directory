/**
 * BatchService
 * A client for issuing REST requests to the Azure Batch service.
 *
 * The version of the OpenAPI document: 2015-12-01.2.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ApplicationPackageReference from './ApplicationPackageReference';
import AutoScaleRun from './AutoScaleRun';
import CertificateReference from './CertificateReference';
import MetadataItem from './MetadataItem';
import PoolStatistics from './PoolStatistics';
import ResizeError from './ResizeError';
import StartTask from './StartTask';
import TaskSchedulingPolicy from './TaskSchedulingPolicy';

/**
 * The CloudPool model module.
 * @module model/CloudPool
 * @version 2015-12-01.2.2
 */
class CloudPool {
    /**
     * Constructs a new <code>CloudPool</code>.
     * A pool in the Azure Batch service.
     * @alias module:model/CloudPool
     */
    constructor() { 
        
        CloudPool.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CloudPool</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CloudPool} obj Optional instance to populate.
     * @return {module:model/CloudPool} The populated <code>CloudPool</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CloudPool();

            if (data.hasOwnProperty('allocationState')) {
                obj['allocationState'] = ApiClient.convertToType(data['allocationState'], 'String');
            }
            if (data.hasOwnProperty('allocationStateTransitionTime')) {
                obj['allocationStateTransitionTime'] = ApiClient.convertToType(data['allocationStateTransitionTime'], 'Date');
            }
            if (data.hasOwnProperty('applicationPackageReferences')) {
                obj['applicationPackageReferences'] = ApiClient.convertToType(data['applicationPackageReferences'], [ApplicationPackageReference]);
            }
            if (data.hasOwnProperty('autoScaleEvaluationInterval')) {
                obj['autoScaleEvaluationInterval'] = ApiClient.convertToType(data['autoScaleEvaluationInterval'], 'String');
            }
            if (data.hasOwnProperty('autoScaleFormula')) {
                obj['autoScaleFormula'] = ApiClient.convertToType(data['autoScaleFormula'], 'String');
            }
            if (data.hasOwnProperty('autoScaleRun')) {
                obj['autoScaleRun'] = AutoScaleRun.constructFromObject(data['autoScaleRun']);
            }
            if (data.hasOwnProperty('certificateReferences')) {
                obj['certificateReferences'] = ApiClient.convertToType(data['certificateReferences'], [CertificateReference]);
            }
            if (data.hasOwnProperty('creationTime')) {
                obj['creationTime'] = ApiClient.convertToType(data['creationTime'], 'Date');
            }
            if (data.hasOwnProperty('currentDedicated')) {
                obj['currentDedicated'] = ApiClient.convertToType(data['currentDedicated'], 'Number');
            }
            if (data.hasOwnProperty('currentOSVersion')) {
                obj['currentOSVersion'] = ApiClient.convertToType(data['currentOSVersion'], 'String');
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('eTag')) {
                obj['eTag'] = ApiClient.convertToType(data['eTag'], 'String');
            }
            if (data.hasOwnProperty('enableAutoScale')) {
                obj['enableAutoScale'] = ApiClient.convertToType(data['enableAutoScale'], 'Boolean');
            }
            if (data.hasOwnProperty('enableInterNodeCommunication')) {
                obj['enableInterNodeCommunication'] = ApiClient.convertToType(data['enableInterNodeCommunication'], 'Boolean');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('lastModified')) {
                obj['lastModified'] = ApiClient.convertToType(data['lastModified'], 'Date');
            }
            if (data.hasOwnProperty('maxTasksPerNode')) {
                obj['maxTasksPerNode'] = ApiClient.convertToType(data['maxTasksPerNode'], 'Number');
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = ApiClient.convertToType(data['metadata'], [MetadataItem]);
            }
            if (data.hasOwnProperty('osFamily')) {
                obj['osFamily'] = ApiClient.convertToType(data['osFamily'], 'String');
            }
            if (data.hasOwnProperty('resizeError')) {
                obj['resizeError'] = ResizeError.constructFromObject(data['resizeError']);
            }
            if (data.hasOwnProperty('resizeTimeout')) {
                obj['resizeTimeout'] = ApiClient.convertToType(data['resizeTimeout'], 'String');
            }
            if (data.hasOwnProperty('startTask')) {
                obj['startTask'] = StartTask.constructFromObject(data['startTask']);
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('stateTransitionTime')) {
                obj['stateTransitionTime'] = ApiClient.convertToType(data['stateTransitionTime'], 'Date');
            }
            if (data.hasOwnProperty('stats')) {
                obj['stats'] = PoolStatistics.constructFromObject(data['stats']);
            }
            if (data.hasOwnProperty('targetDedicated')) {
                obj['targetDedicated'] = ApiClient.convertToType(data['targetDedicated'], 'Number');
            }
            if (data.hasOwnProperty('targetOSVersion')) {
                obj['targetOSVersion'] = ApiClient.convertToType(data['targetOSVersion'], 'String');
            }
            if (data.hasOwnProperty('taskSchedulingPolicy')) {
                obj['taskSchedulingPolicy'] = TaskSchedulingPolicy.constructFromObject(data['taskSchedulingPolicy']);
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
            if (data.hasOwnProperty('vmSize')) {
                obj['vmSize'] = ApiClient.convertToType(data['vmSize'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CloudPool</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CloudPool</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['allocationState'] && !(typeof data['allocationState'] === 'string' || data['allocationState'] instanceof String)) {
            throw new Error("Expected the field `allocationState` to be a primitive type in the JSON string but got " + data['allocationState']);
        }
        if (data['applicationPackageReferences']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['applicationPackageReferences'])) {
                throw new Error("Expected the field `applicationPackageReferences` to be an array in the JSON data but got " + data['applicationPackageReferences']);
            }
            // validate the optional field `applicationPackageReferences` (array)
            for (const item of data['applicationPackageReferences']) {
                ApplicationPackageReference.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['autoScaleEvaluationInterval'] && !(typeof data['autoScaleEvaluationInterval'] === 'string' || data['autoScaleEvaluationInterval'] instanceof String)) {
            throw new Error("Expected the field `autoScaleEvaluationInterval` to be a primitive type in the JSON string but got " + data['autoScaleEvaluationInterval']);
        }
        // ensure the json data is a string
        if (data['autoScaleFormula'] && !(typeof data['autoScaleFormula'] === 'string' || data['autoScaleFormula'] instanceof String)) {
            throw new Error("Expected the field `autoScaleFormula` to be a primitive type in the JSON string but got " + data['autoScaleFormula']);
        }
        // validate the optional field `autoScaleRun`
        if (data['autoScaleRun']) { // data not null
          AutoScaleRun.validateJSON(data['autoScaleRun']);
        }
        if (data['certificateReferences']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['certificateReferences'])) {
                throw new Error("Expected the field `certificateReferences` to be an array in the JSON data but got " + data['certificateReferences']);
            }
            // validate the optional field `certificateReferences` (array)
            for (const item of data['certificateReferences']) {
                CertificateReference.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['currentOSVersion'] && !(typeof data['currentOSVersion'] === 'string' || data['currentOSVersion'] instanceof String)) {
            throw new Error("Expected the field `currentOSVersion` to be a primitive type in the JSON string but got " + data['currentOSVersion']);
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // ensure the json data is a string
        if (data['eTag'] && !(typeof data['eTag'] === 'string' || data['eTag'] instanceof String)) {
            throw new Error("Expected the field `eTag` to be a primitive type in the JSON string but got " + data['eTag']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        if (data['metadata']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['metadata'])) {
                throw new Error("Expected the field `metadata` to be an array in the JSON data but got " + data['metadata']);
            }
            // validate the optional field `metadata` (array)
            for (const item of data['metadata']) {
                MetadataItem.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['osFamily'] && !(typeof data['osFamily'] === 'string' || data['osFamily'] instanceof String)) {
            throw new Error("Expected the field `osFamily` to be a primitive type in the JSON string but got " + data['osFamily']);
        }
        // validate the optional field `resizeError`
        if (data['resizeError']) { // data not null
          ResizeError.validateJSON(data['resizeError']);
        }
        // ensure the json data is a string
        if (data['resizeTimeout'] && !(typeof data['resizeTimeout'] === 'string' || data['resizeTimeout'] instanceof String)) {
            throw new Error("Expected the field `resizeTimeout` to be a primitive type in the JSON string but got " + data['resizeTimeout']);
        }
        // validate the optional field `startTask`
        if (data['startTask']) { // data not null
          StartTask.validateJSON(data['startTask']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // validate the optional field `stats`
        if (data['stats']) { // data not null
          PoolStatistics.validateJSON(data['stats']);
        }
        // ensure the json data is a string
        if (data['targetOSVersion'] && !(typeof data['targetOSVersion'] === 'string' || data['targetOSVersion'] instanceof String)) {
            throw new Error("Expected the field `targetOSVersion` to be a primitive type in the JSON string but got " + data['targetOSVersion']);
        }
        // validate the optional field `taskSchedulingPolicy`
        if (data['taskSchedulingPolicy']) { // data not null
          TaskSchedulingPolicy.validateJSON(data['taskSchedulingPolicy']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }
        // ensure the json data is a string
        if (data['vmSize'] && !(typeof data['vmSize'] === 'string' || data['vmSize'] instanceof String)) {
            throw new Error("Expected the field `vmSize` to be a primitive type in the JSON string but got " + data['vmSize']);
        }

        return true;
    }


}



/**
 * Gets or sets whether the pool is resizing.
 * @member {module:model/CloudPool.AllocationStateEnum} allocationState
 */
CloudPool.prototype['allocationState'] = undefined;

/**
 * Gets or sets the time at which the pool entered its current allocation state.
 * @member {Date} allocationStateTransitionTime
 */
CloudPool.prototype['allocationStateTransitionTime'] = undefined;

/**
 * Gets or sets the list of application packages to be installed on each compute node in the pool.
 * @member {Array.<module:model/ApplicationPackageReference>} applicationPackageReferences
 */
CloudPool.prototype['applicationPackageReferences'] = undefined;

/**
 * Gets or sets a time interval for the desired AutoScale evaluation period in the pool.
 * @member {String} autoScaleEvaluationInterval
 */
CloudPool.prototype['autoScaleEvaluationInterval'] = undefined;

/**
 * Gets or sets a formula for the desired number of compute nodes in the pool.
 * @member {String} autoScaleFormula
 */
CloudPool.prototype['autoScaleFormula'] = undefined;

/**
 * @member {module:model/AutoScaleRun} autoScaleRun
 */
CloudPool.prototype['autoScaleRun'] = undefined;

/**
 * Gets or sets the list of certificates to be installed on each compute node in the pool.
 * @member {Array.<module:model/CertificateReference>} certificateReferences
 */
CloudPool.prototype['certificateReferences'] = undefined;

/**
 * Gets or sets the creation time of the pool.
 * @member {Date} creationTime
 */
CloudPool.prototype['creationTime'] = undefined;

/**
 * Gets or sets the number of compute nodes currently in the pool.
 * @member {Number} currentDedicated
 */
CloudPool.prototype['currentDedicated'] = undefined;

/**
 * Gets or sets the Azure Guest OS Version currently installed on the virtual machines in the pool. This may differ from TargetOSVersion if the pool state is Upgrading.
 * @member {String} currentOSVersion
 */
CloudPool.prototype['currentOSVersion'] = undefined;

/**
 * Gets or sets the display name for the pool.
 * @member {String} displayName
 */
CloudPool.prototype['displayName'] = undefined;

/**
 * Gets or sets the ETag of the pool.
 * @member {String} eTag
 */
CloudPool.prototype['eTag'] = undefined;

/**
 * Gets or sets whether the pool size should automatically adjust over time. If true, the AutoScaleFormula property must be set. If false, the TargetDedicated property must be set.
 * @member {Boolean} enableAutoScale
 */
CloudPool.prototype['enableAutoScale'] = undefined;

/**
 * Gets or sets whether the pool permits direct communication between nodes.
 * @member {Boolean} enableInterNodeCommunication
 */
CloudPool.prototype['enableInterNodeCommunication'] = undefined;

/**
 * Gets or sets a string that uniquely identifies the pool within the account. The id can contain any combination of alphanumeric characters including hyphens and underscores, and cannot contain more than 64 characters.
 * @member {String} id
 */
CloudPool.prototype['id'] = undefined;

/**
 * Gets or sets the last modified time of the pool.
 * @member {Date} lastModified
 */
CloudPool.prototype['lastModified'] = undefined;

/**
 * Gets or sets the maximum number of tasks that can run concurrently on a single compute node in the pool.
 * @member {Number} maxTasksPerNode
 */
CloudPool.prototype['maxTasksPerNode'] = undefined;

/**
 * Gets or sets a list of name-value pairs associated with the pool as metadata.
 * @member {Array.<module:model/MetadataItem>} metadata
 */
CloudPool.prototype['metadata'] = undefined;

/**
 * Gets or sets the Azure Guest OS family to be installed on the virtual machines in the pool.
 * @member {String} osFamily
 */
CloudPool.prototype['osFamily'] = undefined;

/**
 * @member {module:model/ResizeError} resizeError
 */
CloudPool.prototype['resizeError'] = undefined;

/**
 * Gets or sets the timeout for allocation of compute nodes to the pool. In a Get Pool operation, this is the timeout for the most recent resize operation. The default value is 10 minutes.
 * @member {String} resizeTimeout
 */
CloudPool.prototype['resizeTimeout'] = undefined;

/**
 * @member {module:model/StartTask} startTask
 */
CloudPool.prototype['startTask'] = undefined;

/**
 * Gets or sets the current state of the pool.
 * @member {module:model/CloudPool.StateEnum} state
 */
CloudPool.prototype['state'] = undefined;

/**
 * Gets or sets the time at which the pool entered its current state.
 * @member {Date} stateTransitionTime
 */
CloudPool.prototype['stateTransitionTime'] = undefined;

/**
 * @member {module:model/PoolStatistics} stats
 */
CloudPool.prototype['stats'] = undefined;

/**
 * Gets or sets the desired number of compute nodes in the pool. This property must have the default value if EnableAutoScale is true. It is required if EnableAutoScale is false.
 * @member {Number} targetDedicated
 */
CloudPool.prototype['targetDedicated'] = undefined;

/**
 * Gets or sets the Azure Guest OS version to be installed on the virtual machines in the pool. The default value is * which specifies the latest operating system version for the specified family.
 * @member {String} targetOSVersion
 */
CloudPool.prototype['targetOSVersion'] = undefined;

/**
 * @member {module:model/TaskSchedulingPolicy} taskSchedulingPolicy
 */
CloudPool.prototype['taskSchedulingPolicy'] = undefined;

/**
 * Gets or sets the URL of the pool.
 * @member {String} url
 */
CloudPool.prototype['url'] = undefined;

/**
 * Gets or sets the size of virtual machines in the pool.  All VMs in a pool are the same size.
 * @member {String} vmSize
 */
CloudPool.prototype['vmSize'] = undefined;





/**
 * Allowed values for the <code>allocationState</code> property.
 * @enum {String}
 * @readonly
 */
CloudPool['AllocationStateEnum'] = {

    /**
     * value: "steady"
     * @const
     */
    "steady": "steady",

    /**
     * value: "resizing"
     * @const
     */
    "resizing": "resizing",

    /**
     * value: "stopping"
     * @const
     */
    "stopping": "stopping"
};


/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
CloudPool['StateEnum'] = {

    /**
     * value: "active"
     * @const
     */
    "active": "active",

    /**
     * value: "deleting"
     * @const
     */
    "deleting": "deleting",

    /**
     * value: "upgrading"
     * @const
     */
    "upgrading": "upgrading"
};



export default CloudPool;

