/**
 * BatchService
 * A client for issuing REST requests to the Azure Batch service.
 *
 * The version of the OpenAPI document: 2015-12-01.2.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ApplicationPackageReference from './ApplicationPackageReference';
import CertificateReference from './CertificateReference';
import MetadataItem from './MetadataItem';
import StartTask from './StartTask';
import TaskSchedulingPolicy from './TaskSchedulingPolicy';

/**
 * The PoolAddParameter model module.
 * @module model/PoolAddParameter
 * @version 2015-12-01.2.2
 */
class PoolAddParameter {
    /**
     * Constructs a new <code>PoolAddParameter</code>.
     * A pool in the Azure Batch service to add.
     * @alias module:model/PoolAddParameter
     * @param id {String} Gets or sets a string that uniquely identifies the pool within the account. The id can contain any combination of alphanumeric characters including hyphens and underscores, and cannot contain more than 64 characters.
     * @param osFamily {String} Gets or sets the Azure Guest OS family to be installed on the virtual machines in the pool.
     * @param vmSize {String} Gets or sets the size of virtual machines in the pool.  All VMs in a pool are the same size.
     */
    constructor(id, osFamily, vmSize) { 
        
        PoolAddParameter.initialize(this, id, osFamily, vmSize);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, osFamily, vmSize) { 
        obj['id'] = id;
        obj['osFamily'] = osFamily;
        obj['vmSize'] = vmSize;
    }

    /**
     * Constructs a <code>PoolAddParameter</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PoolAddParameter} obj Optional instance to populate.
     * @return {module:model/PoolAddParameter} The populated <code>PoolAddParameter</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PoolAddParameter();

            if (data.hasOwnProperty('applicationPackageReferences')) {
                obj['applicationPackageReferences'] = ApiClient.convertToType(data['applicationPackageReferences'], [ApplicationPackageReference]);
            }
            if (data.hasOwnProperty('autoScaleEvaluationInterval')) {
                obj['autoScaleEvaluationInterval'] = ApiClient.convertToType(data['autoScaleEvaluationInterval'], 'String');
            }
            if (data.hasOwnProperty('autoScaleFormula')) {
                obj['autoScaleFormula'] = ApiClient.convertToType(data['autoScaleFormula'], 'String');
            }
            if (data.hasOwnProperty('certificateReferences')) {
                obj['certificateReferences'] = ApiClient.convertToType(data['certificateReferences'], [CertificateReference]);
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('enableAutoScale')) {
                obj['enableAutoScale'] = ApiClient.convertToType(data['enableAutoScale'], 'Boolean');
            }
            if (data.hasOwnProperty('enableInterNodeCommunication')) {
                obj['enableInterNodeCommunication'] = ApiClient.convertToType(data['enableInterNodeCommunication'], 'Boolean');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('maxTasksPerNode')) {
                obj['maxTasksPerNode'] = ApiClient.convertToType(data['maxTasksPerNode'], 'Number');
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = ApiClient.convertToType(data['metadata'], [MetadataItem]);
            }
            if (data.hasOwnProperty('osFamily')) {
                obj['osFamily'] = ApiClient.convertToType(data['osFamily'], 'String');
            }
            if (data.hasOwnProperty('resizeTimeout')) {
                obj['resizeTimeout'] = ApiClient.convertToType(data['resizeTimeout'], 'String');
            }
            if (data.hasOwnProperty('startTask')) {
                obj['startTask'] = StartTask.constructFromObject(data['startTask']);
            }
            if (data.hasOwnProperty('targetDedicated')) {
                obj['targetDedicated'] = ApiClient.convertToType(data['targetDedicated'], 'Number');
            }
            if (data.hasOwnProperty('targetOSVersion')) {
                obj['targetOSVersion'] = ApiClient.convertToType(data['targetOSVersion'], 'String');
            }
            if (data.hasOwnProperty('taskSchedulingPolicy')) {
                obj['taskSchedulingPolicy'] = TaskSchedulingPolicy.constructFromObject(data['taskSchedulingPolicy']);
            }
            if (data.hasOwnProperty('vmSize')) {
                obj['vmSize'] = ApiClient.convertToType(data['vmSize'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PoolAddParameter</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PoolAddParameter</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PoolAddParameter.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['applicationPackageReferences']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['applicationPackageReferences'])) {
                throw new Error("Expected the field `applicationPackageReferences` to be an array in the JSON data but got " + data['applicationPackageReferences']);
            }
            // validate the optional field `applicationPackageReferences` (array)
            for (const item of data['applicationPackageReferences']) {
                ApplicationPackageReference.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['autoScaleEvaluationInterval'] && !(typeof data['autoScaleEvaluationInterval'] === 'string' || data['autoScaleEvaluationInterval'] instanceof String)) {
            throw new Error("Expected the field `autoScaleEvaluationInterval` to be a primitive type in the JSON string but got " + data['autoScaleEvaluationInterval']);
        }
        // ensure the json data is a string
        if (data['autoScaleFormula'] && !(typeof data['autoScaleFormula'] === 'string' || data['autoScaleFormula'] instanceof String)) {
            throw new Error("Expected the field `autoScaleFormula` to be a primitive type in the JSON string but got " + data['autoScaleFormula']);
        }
        if (data['certificateReferences']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['certificateReferences'])) {
                throw new Error("Expected the field `certificateReferences` to be an array in the JSON data but got " + data['certificateReferences']);
            }
            // validate the optional field `certificateReferences` (array)
            for (const item of data['certificateReferences']) {
                CertificateReference.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        if (data['metadata']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['metadata'])) {
                throw new Error("Expected the field `metadata` to be an array in the JSON data but got " + data['metadata']);
            }
            // validate the optional field `metadata` (array)
            for (const item of data['metadata']) {
                MetadataItem.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['osFamily'] && !(typeof data['osFamily'] === 'string' || data['osFamily'] instanceof String)) {
            throw new Error("Expected the field `osFamily` to be a primitive type in the JSON string but got " + data['osFamily']);
        }
        // ensure the json data is a string
        if (data['resizeTimeout'] && !(typeof data['resizeTimeout'] === 'string' || data['resizeTimeout'] instanceof String)) {
            throw new Error("Expected the field `resizeTimeout` to be a primitive type in the JSON string but got " + data['resizeTimeout']);
        }
        // validate the optional field `startTask`
        if (data['startTask']) { // data not null
          StartTask.validateJSON(data['startTask']);
        }
        // ensure the json data is a string
        if (data['targetOSVersion'] && !(typeof data['targetOSVersion'] === 'string' || data['targetOSVersion'] instanceof String)) {
            throw new Error("Expected the field `targetOSVersion` to be a primitive type in the JSON string but got " + data['targetOSVersion']);
        }
        // validate the optional field `taskSchedulingPolicy`
        if (data['taskSchedulingPolicy']) { // data not null
          TaskSchedulingPolicy.validateJSON(data['taskSchedulingPolicy']);
        }
        // ensure the json data is a string
        if (data['vmSize'] && !(typeof data['vmSize'] === 'string' || data['vmSize'] instanceof String)) {
            throw new Error("Expected the field `vmSize` to be a primitive type in the JSON string but got " + data['vmSize']);
        }

        return true;
    }


}

PoolAddParameter.RequiredProperties = ["id", "osFamily", "vmSize"];

/**
 * Gets or sets the list of application packages to be installed on each compute node in the pool.
 * @member {Array.<module:model/ApplicationPackageReference>} applicationPackageReferences
 */
PoolAddParameter.prototype['applicationPackageReferences'] = undefined;

/**
 * Gets or sets a time interval for the desired autoscale evaluation period in the pool.
 * @member {String} autoScaleEvaluationInterval
 */
PoolAddParameter.prototype['autoScaleEvaluationInterval'] = undefined;

/**
 * Gets or sets a formula for the desired number of compute nodes in the pool.
 * @member {String} autoScaleFormula
 */
PoolAddParameter.prototype['autoScaleFormula'] = undefined;

/**
 * Gets or sets the list of certificates to be installed on each compute node in the pool.
 * @member {Array.<module:model/CertificateReference>} certificateReferences
 */
PoolAddParameter.prototype['certificateReferences'] = undefined;

/**
 * Gets or sets the display name for the pool.
 * @member {String} displayName
 */
PoolAddParameter.prototype['displayName'] = undefined;

/**
 * Gets or sets whether the pool size should automatically adjust over time. If true, the AutoScaleFormula property must be set. If false, the TargetDedicated property must be set.
 * @member {Boolean} enableAutoScale
 */
PoolAddParameter.prototype['enableAutoScale'] = undefined;

/**
 * Gets or sets whether the pool permits direct communication between nodes.
 * @member {Boolean} enableInterNodeCommunication
 */
PoolAddParameter.prototype['enableInterNodeCommunication'] = undefined;

/**
 * Gets or sets a string that uniquely identifies the pool within the account. The id can contain any combination of alphanumeric characters including hyphens and underscores, and cannot contain more than 64 characters.
 * @member {String} id
 */
PoolAddParameter.prototype['id'] = undefined;

/**
 * Gets or sets the maximum number of tasks that can run concurrently on a single compute node in the pool.
 * @member {Number} maxTasksPerNode
 */
PoolAddParameter.prototype['maxTasksPerNode'] = undefined;

/**
 * Gets or sets a list of name-value pairs associated with the pool as metadata.
 * @member {Array.<module:model/MetadataItem>} metadata
 */
PoolAddParameter.prototype['metadata'] = undefined;

/**
 * Gets or sets the Azure Guest OS family to be installed on the virtual machines in the pool.
 * @member {String} osFamily
 */
PoolAddParameter.prototype['osFamily'] = undefined;

/**
 * Gets or sets the timeout for allocation of compute nodes to the pool. In a Get Pool operation, this is the timeout for the most recent resize operation. The default value is 10 minutes.
 * @member {String} resizeTimeout
 */
PoolAddParameter.prototype['resizeTimeout'] = undefined;

/**
 * @member {module:model/StartTask} startTask
 */
PoolAddParameter.prototype['startTask'] = undefined;

/**
 * Gets or sets the desired number of compute nodes in the pool. This property must have the default value if EnableAutoScale is true. It is required if EnableAutoScale is false.
 * @member {Number} targetDedicated
 */
PoolAddParameter.prototype['targetDedicated'] = undefined;

/**
 * Gets or sets the Azure Guest OS version to be installed on the virtual machines in the pool. The default value is * which specifies the latest operating system version for the specified family.
 * @member {String} targetOSVersion
 */
PoolAddParameter.prototype['targetOSVersion'] = undefined;

/**
 * @member {module:model/TaskSchedulingPolicy} taskSchedulingPolicy
 */
PoolAddParameter.prototype['taskSchedulingPolicy'] = undefined;

/**
 * Gets or sets the size of virtual machines in the pool.  All VMs in a pool are the same size.
 * @member {String} vmSize
 */
PoolAddParameter.prototype['vmSize'] = undefined;






export default PoolAddParameter;

