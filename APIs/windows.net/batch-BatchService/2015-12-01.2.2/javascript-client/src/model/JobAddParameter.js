/**
 * BatchService
 * A client for issuing REST requests to the Azure Batch service.
 *
 * The version of the OpenAPI document: 2015-12-01.2.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EnvironmentSetting from './EnvironmentSetting';
import JobConstraints from './JobConstraints';
import JobManagerTask from './JobManagerTask';
import JobPreparationTask from './JobPreparationTask';
import JobReleaseTask from './JobReleaseTask';
import MetadataItem from './MetadataItem';
import PoolInformation from './PoolInformation';

/**
 * The JobAddParameter model module.
 * @module model/JobAddParameter
 * @version 2015-12-01.2.2
 */
class JobAddParameter {
    /**
     * Constructs a new <code>JobAddParameter</code>.
     * An Azure Batch job to add.
     * @alias module:model/JobAddParameter
     * @param id {String} Gets or sets a string that uniquely identifies the job within the account. The id can contain any combination of alphanumeric characters including hyphens and underscores, and cannot contain more than 64 characters. It is common to use a GUID for the id.
     * @param poolInfo {module:model/PoolInformation} 
     */
    constructor(id, poolInfo) { 
        
        JobAddParameter.initialize(this, id, poolInfo);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, poolInfo) { 
        obj['id'] = id;
        obj['poolInfo'] = poolInfo;
    }

    /**
     * Constructs a <code>JobAddParameter</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/JobAddParameter} obj Optional instance to populate.
     * @return {module:model/JobAddParameter} The populated <code>JobAddParameter</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new JobAddParameter();

            if (data.hasOwnProperty('commonEnvironmentSettings')) {
                obj['commonEnvironmentSettings'] = ApiClient.convertToType(data['commonEnvironmentSettings'], [EnvironmentSetting]);
            }
            if (data.hasOwnProperty('constraints')) {
                obj['constraints'] = JobConstraints.constructFromObject(data['constraints']);
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('jobManagerTask')) {
                obj['jobManagerTask'] = JobManagerTask.constructFromObject(data['jobManagerTask']);
            }
            if (data.hasOwnProperty('jobPreparationTask')) {
                obj['jobPreparationTask'] = JobPreparationTask.constructFromObject(data['jobPreparationTask']);
            }
            if (data.hasOwnProperty('jobReleaseTask')) {
                obj['jobReleaseTask'] = JobReleaseTask.constructFromObject(data['jobReleaseTask']);
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = ApiClient.convertToType(data['metadata'], [MetadataItem]);
            }
            if (data.hasOwnProperty('poolInfo')) {
                obj['poolInfo'] = PoolInformation.constructFromObject(data['poolInfo']);
            }
            if (data.hasOwnProperty('priority')) {
                obj['priority'] = ApiClient.convertToType(data['priority'], 'Number');
            }
            if (data.hasOwnProperty('usesTaskDependencies')) {
                obj['usesTaskDependencies'] = ApiClient.convertToType(data['usesTaskDependencies'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>JobAddParameter</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>JobAddParameter</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of JobAddParameter.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['commonEnvironmentSettings']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['commonEnvironmentSettings'])) {
                throw new Error("Expected the field `commonEnvironmentSettings` to be an array in the JSON data but got " + data['commonEnvironmentSettings']);
            }
            // validate the optional field `commonEnvironmentSettings` (array)
            for (const item of data['commonEnvironmentSettings']) {
                EnvironmentSetting.validateJSON(item);
            };
        }
        // validate the optional field `constraints`
        if (data['constraints']) { // data not null
          JobConstraints.validateJSON(data['constraints']);
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // validate the optional field `jobManagerTask`
        if (data['jobManagerTask']) { // data not null
          JobManagerTask.validateJSON(data['jobManagerTask']);
        }
        // validate the optional field `jobPreparationTask`
        if (data['jobPreparationTask']) { // data not null
          JobPreparationTask.validateJSON(data['jobPreparationTask']);
        }
        // validate the optional field `jobReleaseTask`
        if (data['jobReleaseTask']) { // data not null
          JobReleaseTask.validateJSON(data['jobReleaseTask']);
        }
        if (data['metadata']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['metadata'])) {
                throw new Error("Expected the field `metadata` to be an array in the JSON data but got " + data['metadata']);
            }
            // validate the optional field `metadata` (array)
            for (const item of data['metadata']) {
                MetadataItem.validateJSON(item);
            };
        }
        // validate the optional field `poolInfo`
        if (data['poolInfo']) { // data not null
          PoolInformation.validateJSON(data['poolInfo']);
        }

        return true;
    }


}

JobAddParameter.RequiredProperties = ["id", "poolInfo"];

/**
 * Gets or sets the list of common environment variable settings.  These environment variables are set for all tasks in the job (including the Job Manager, Job Preparation and Job Release tasks).
 * @member {Array.<module:model/EnvironmentSetting>} commonEnvironmentSettings
 */
JobAddParameter.prototype['commonEnvironmentSettings'] = undefined;

/**
 * @member {module:model/JobConstraints} constraints
 */
JobAddParameter.prototype['constraints'] = undefined;

/**
 * Gets or sets the display name for the job.
 * @member {String} displayName
 */
JobAddParameter.prototype['displayName'] = undefined;

/**
 * Gets or sets a string that uniquely identifies the job within the account. The id can contain any combination of alphanumeric characters including hyphens and underscores, and cannot contain more than 64 characters. It is common to use a GUID for the id.
 * @member {String} id
 */
JobAddParameter.prototype['id'] = undefined;

/**
 * @member {module:model/JobManagerTask} jobManagerTask
 */
JobAddParameter.prototype['jobManagerTask'] = undefined;

/**
 * @member {module:model/JobPreparationTask} jobPreparationTask
 */
JobAddParameter.prototype['jobPreparationTask'] = undefined;

/**
 * @member {module:model/JobReleaseTask} jobReleaseTask
 */
JobAddParameter.prototype['jobReleaseTask'] = undefined;

/**
 * Gets or sets a list of name-value pairs associated with the job as metadata.
 * @member {Array.<module:model/MetadataItem>} metadata
 */
JobAddParameter.prototype['metadata'] = undefined;

/**
 * @member {module:model/PoolInformation} poolInfo
 */
JobAddParameter.prototype['poolInfo'] = undefined;

/**
 * Gets or sets the priority of the job. Priority values can range from -1000 to 1000, with -1000 being the lowest priority and 1000 being the highest priority. The default value is 0.
 * @member {Number} priority
 */
JobAddParameter.prototype['priority'] = undefined;

/**
 * Gets or sets the flag that determines if this job will use tasks with dependencies.
 * @member {Boolean} usesTaskDependencies
 */
JobAddParameter.prototype['usesTaskDependencies'] = undefined;






export default JobAddParameter;

