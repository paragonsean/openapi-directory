/**
 * BatchService
 * A client for issuing REST requests to the Azure Batch service.
 *
 * The version of the OpenAPI document: 2015-12-01.2.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EnvironmentSetting from './EnvironmentSetting';
import ResourceFile from './ResourceFile';
import TaskConstraints from './TaskConstraints';

/**
 * The JobPreparationTask model module.
 * @module model/JobPreparationTask
 * @version 2015-12-01.2.2
 */
class JobPreparationTask {
    /**
     * Constructs a new <code>JobPreparationTask</code>.
     * A Job Preparation task to run before any tasks of the job on any given compute node.
     * @alias module:model/JobPreparationTask
     */
    constructor() { 
        
        JobPreparationTask.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>JobPreparationTask</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/JobPreparationTask} obj Optional instance to populate.
     * @return {module:model/JobPreparationTask} The populated <code>JobPreparationTask</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new JobPreparationTask();

            if (data.hasOwnProperty('commandLine')) {
                obj['commandLine'] = ApiClient.convertToType(data['commandLine'], 'String');
            }
            if (data.hasOwnProperty('constraints')) {
                obj['constraints'] = TaskConstraints.constructFromObject(data['constraints']);
            }
            if (data.hasOwnProperty('environmentSettings')) {
                obj['environmentSettings'] = ApiClient.convertToType(data['environmentSettings'], [EnvironmentSetting]);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('rerunOnNodeRebootAfterSuccess')) {
                obj['rerunOnNodeRebootAfterSuccess'] = ApiClient.convertToType(data['rerunOnNodeRebootAfterSuccess'], 'Boolean');
            }
            if (data.hasOwnProperty('resourceFiles')) {
                obj['resourceFiles'] = ApiClient.convertToType(data['resourceFiles'], [ResourceFile]);
            }
            if (data.hasOwnProperty('runElevated')) {
                obj['runElevated'] = ApiClient.convertToType(data['runElevated'], 'Boolean');
            }
            if (data.hasOwnProperty('waitForSuccess')) {
                obj['waitForSuccess'] = ApiClient.convertToType(data['waitForSuccess'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>JobPreparationTask</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>JobPreparationTask</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['commandLine'] && !(typeof data['commandLine'] === 'string' || data['commandLine'] instanceof String)) {
            throw new Error("Expected the field `commandLine` to be a primitive type in the JSON string but got " + data['commandLine']);
        }
        // validate the optional field `constraints`
        if (data['constraints']) { // data not null
          TaskConstraints.validateJSON(data['constraints']);
        }
        if (data['environmentSettings']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['environmentSettings'])) {
                throw new Error("Expected the field `environmentSettings` to be an array in the JSON data but got " + data['environmentSettings']);
            }
            // validate the optional field `environmentSettings` (array)
            for (const item of data['environmentSettings']) {
                EnvironmentSetting.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        if (data['resourceFiles']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['resourceFiles'])) {
                throw new Error("Expected the field `resourceFiles` to be an array in the JSON data but got " + data['resourceFiles']);
            }
            // validate the optional field `resourceFiles` (array)
            for (const item of data['resourceFiles']) {
                ResourceFile.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Gets or sets the command line of the Job Preparation task.
 * @member {String} commandLine
 */
JobPreparationTask.prototype['commandLine'] = undefined;

/**
 * @member {module:model/TaskConstraints} constraints
 */
JobPreparationTask.prototype['constraints'] = undefined;

/**
 * Gets or sets a list of environment variable settings for the Job Preparation task.
 * @member {Array.<module:model/EnvironmentSetting>} environmentSettings
 */
JobPreparationTask.prototype['environmentSettings'] = undefined;

/**
 * Gets or sets a string that uniquely identifies the job preparation task within the job. The id can contain any combination of alphanumeric characters including hyphens and underscores and cannot contain more than 64 characters.
 * @member {String} id
 */
JobPreparationTask.prototype['id'] = undefined;

/**
 * Gets or sets whether the Batch service should rerun the Job Preparation task after a compute node reboots. The default value is true.
 * @member {Boolean} rerunOnNodeRebootAfterSuccess
 */
JobPreparationTask.prototype['rerunOnNodeRebootAfterSuccess'] = undefined;

/**
 * Gets or sets a list of files that Batch will download to the compute node before running the command line.
 * @member {Array.<module:model/ResourceFile>} resourceFiles
 */
JobPreparationTask.prototype['resourceFiles'] = undefined;

/**
 * Gets or sets whether to run the Job Preparation task in elevated mode. The default value is false.
 * @member {Boolean} runElevated
 */
JobPreparationTask.prototype['runElevated'] = undefined;

/**
 * Gets or sets whether the Batch Service should wait for the Job Preparation task to complete successfully before scheduling any other tasks of the job on the compute node.
 * @member {Boolean} waitForSuccess
 */
JobPreparationTask.prototype['waitForSuccess'] = undefined;






export default JobPreparationTask;

