/**
 * BatchService
 * A client for issuing REST requests to the Azure Batch service.
 *
 * The version of the OpenAPI document: 2015-12-01.2.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PoolSpecification from './PoolSpecification';

/**
 * The AutoPoolSpecification model module.
 * @module model/AutoPoolSpecification
 * @version 2015-12-01.2.2
 */
class AutoPoolSpecification {
    /**
     * Constructs a new <code>AutoPoolSpecification</code>.
     * Specifies characteristics for a temporary &#39;auto pool&#39;. The Batch service will create this auto pool, run all the tasks for the job on it, and will delete the pool once the job has completed.
     * @alias module:model/AutoPoolSpecification
     * @param poolLifetimeOption {module:model/AutoPoolSpecification.PoolLifetimeOptionEnum} Gets or sets the minimum lifetime of created auto pools, and how multiple jobs on a schedule are assigned to pools.
     */
    constructor(poolLifetimeOption) { 
        
        AutoPoolSpecification.initialize(this, poolLifetimeOption);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, poolLifetimeOption) { 
        obj['poolLifetimeOption'] = poolLifetimeOption;
    }

    /**
     * Constructs a <code>AutoPoolSpecification</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AutoPoolSpecification} obj Optional instance to populate.
     * @return {module:model/AutoPoolSpecification} The populated <code>AutoPoolSpecification</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AutoPoolSpecification();

            if (data.hasOwnProperty('autoPoolIdPrefix')) {
                obj['autoPoolIdPrefix'] = ApiClient.convertToType(data['autoPoolIdPrefix'], 'String');
            }
            if (data.hasOwnProperty('keepAlive')) {
                obj['keepAlive'] = ApiClient.convertToType(data['keepAlive'], 'Boolean');
            }
            if (data.hasOwnProperty('pool')) {
                obj['pool'] = PoolSpecification.constructFromObject(data['pool']);
            }
            if (data.hasOwnProperty('poolLifetimeOption')) {
                obj['poolLifetimeOption'] = ApiClient.convertToType(data['poolLifetimeOption'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AutoPoolSpecification</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AutoPoolSpecification</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of AutoPoolSpecification.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['autoPoolIdPrefix'] && !(typeof data['autoPoolIdPrefix'] === 'string' || data['autoPoolIdPrefix'] instanceof String)) {
            throw new Error("Expected the field `autoPoolIdPrefix` to be a primitive type in the JSON string but got " + data['autoPoolIdPrefix']);
        }
        // validate the optional field `pool`
        if (data['pool']) { // data not null
          PoolSpecification.validateJSON(data['pool']);
        }
        // ensure the json data is a string
        if (data['poolLifetimeOption'] && !(typeof data['poolLifetimeOption'] === 'string' || data['poolLifetimeOption'] instanceof String)) {
            throw new Error("Expected the field `poolLifetimeOption` to be a primitive type in the JSON string but got " + data['poolLifetimeOption']);
        }

        return true;
    }


}

AutoPoolSpecification.RequiredProperties = ["poolLifetimeOption"];

/**
 * Gets or sets a prefix to be added to the unique identifier when a pool is automatically created. The prefix can be up to 20 characters long.
 * @member {String} autoPoolIdPrefix
 */
AutoPoolSpecification.prototype['autoPoolIdPrefix'] = undefined;

/**
 * Gets or sets whether to keep an auto pool alive after its lifetime expires.
 * @member {Boolean} keepAlive
 */
AutoPoolSpecification.prototype['keepAlive'] = undefined;

/**
 * @member {module:model/PoolSpecification} pool
 */
AutoPoolSpecification.prototype['pool'] = undefined;

/**
 * Gets or sets the minimum lifetime of created auto pools, and how multiple jobs on a schedule are assigned to pools.
 * @member {module:model/AutoPoolSpecification.PoolLifetimeOptionEnum} poolLifetimeOption
 */
AutoPoolSpecification.prototype['poolLifetimeOption'] = undefined;





/**
 * Allowed values for the <code>poolLifetimeOption</code> property.
 * @enum {String}
 * @readonly
 */
AutoPoolSpecification['PoolLifetimeOptionEnum'] = {

    /**
     * value: "jobschedule"
     * @const
     */
    "jobschedule": "jobschedule",

    /**
     * value: "job"
     * @const
     */
    "job": "job",

    /**
     * value: "unmapped"
     * @const
     */
    "unmapped": "unmapped"
};



export default AutoPoolSpecification;

