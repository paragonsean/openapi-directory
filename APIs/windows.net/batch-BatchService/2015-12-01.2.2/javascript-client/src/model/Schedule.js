/**
 * BatchService
 * A client for issuing REST requests to the Azure Batch service.
 *
 * The version of the OpenAPI document: 2015-12-01.2.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Schedule model module.
 * @module model/Schedule
 * @version 2015-12-01.2.2
 */
class Schedule {
    /**
     * Constructs a new <code>Schedule</code>.
     * The schedule according to which jobs will be created
     * @alias module:model/Schedule
     */
    constructor() { 
        
        Schedule.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Schedule</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Schedule} obj Optional instance to populate.
     * @return {module:model/Schedule} The populated <code>Schedule</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Schedule();

            if (data.hasOwnProperty('doNotRunAfter')) {
                obj['doNotRunAfter'] = ApiClient.convertToType(data['doNotRunAfter'], 'Date');
            }
            if (data.hasOwnProperty('doNotRunUntil')) {
                obj['doNotRunUntil'] = ApiClient.convertToType(data['doNotRunUntil'], 'Date');
            }
            if (data.hasOwnProperty('recurrenceInterval')) {
                obj['recurrenceInterval'] = ApiClient.convertToType(data['recurrenceInterval'], 'String');
            }
            if (data.hasOwnProperty('startWindow')) {
                obj['startWindow'] = ApiClient.convertToType(data['startWindow'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Schedule</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Schedule</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['recurrenceInterval'] && !(typeof data['recurrenceInterval'] === 'string' || data['recurrenceInterval'] instanceof String)) {
            throw new Error("Expected the field `recurrenceInterval` to be a primitive type in the JSON string but got " + data['recurrenceInterval']);
        }
        // ensure the json data is a string
        if (data['startWindow'] && !(typeof data['startWindow'] === 'string' || data['startWindow'] instanceof String)) {
            throw new Error("Expected the field `startWindow` to be a primitive type in the JSON string but got " + data['startWindow']);
        }

        return true;
    }


}



/**
 * Gets or sets a time after which no job will be created under this job schedule.  The schedule will move to the completed state as soon as this deadline is past and there is no active job under this job schedule.
 * @member {Date} doNotRunAfter
 */
Schedule.prototype['doNotRunAfter'] = undefined;

/**
 * Gets or sets the earliest time at which any job may be created under this job schedule. If you do not specify a doNotRunUntil time, the schedule becomes ready to create jobs immediately.
 * @member {Date} doNotRunUntil
 */
Schedule.prototype['doNotRunUntil'] = undefined;

/**
 * Gets or sets the time interval between the start times of two successive jobs under the job schedule. A job schedule can have at most one active job under it at any given time.
 * @member {String} recurrenceInterval
 */
Schedule.prototype['recurrenceInterval'] = undefined;

/**
 * Gets or sets the time interval, starting from the time at which the schedule indicates a job should be created, within which a job must be created.  If a job is not created within the startWindow interval, then the 'opportunity' is lost; no job will be created until the next recurrence of the schedule.
 * @member {String} startWindow
 */
Schedule.prototype['startWindow'] = undefined;






export default Schedule;

