/**
 * BatchService
 * A client for issuing REST requests to the Azure Batch service.
 *
 * The version of the OpenAPI document: 2015-12-01.2.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BatchError from '../model/BatchError';
import CloudTask from '../model/CloudTask';
import CloudTaskListResult from '../model/CloudTaskListResult';
import CloudTaskListSubtasksResult from '../model/CloudTaskListSubtasksResult';
import TaskAddParameter from '../model/TaskAddParameter';
import TaskUpdateParameter from '../model/TaskUpdateParameter';

/**
* Tasks service.
* @module api/TasksApi
* @version 2015-12-01.2.2
*/
export default class TasksApi {

    /**
    * Constructs a new TasksApi. 
    * @alias module:api/TasksApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the taskAdd operation.
     * @callback module:api/TasksApi~taskAddCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds a task to the specified job.
     * @param {String} jobId The id of the job to which the task is to be added.
     * @param {String} apiVersion Client API Version.
     * @param {module:model/TaskAddParameter} taskAddParameter Specifies the task to be added.
     * @param {Object} opts Optional parameters
     * @param {Number} [timeout = 30)] Sets the maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
     * @param {String} [clientRequestId] Caller generated request identity, in the form of a GUID with no decoration such as curly braces e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
     * @param {Boolean} [returnClientRequestId] Specifies if the server should return the client-request-id identifier in the response.
     * @param {String} [ocpDate] The time the request was issued. If not specified, this header will be automatically populated with the current system clock time.
     * @param {module:api/TasksApi~taskAddCallback} callback The callback function, accepting three arguments: error, data, response
     */
    taskAdd(jobId, apiVersion, taskAddParameter, opts, callback) {
      opts = opts || {};
      let postBody = taskAddParameter;
      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling taskAdd");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling taskAdd");
      }
      // verify the required parameter 'taskAddParameter' is set
      if (taskAddParameter === undefined || taskAddParameter === null) {
        throw new Error("Missing the required parameter 'taskAddParameter' when calling taskAdd");
      }

      let pathParams = {
        'jobId': jobId
      };
      let queryParams = {
        'timeout': opts['timeout'],
        'api-version': apiVersion
      };
      let headerParams = {
        'client-request-id': opts['clientRequestId'],
        'return-client-request-id': opts['returnClientRequestId'],
        'ocp-date': opts['ocpDate']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json; odata=minimalmetadata'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/jobs/{jobId}/tasks', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the taskDelete operation.
     * @callback module:api/TasksApi~taskDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a task from the specified job.
     * @param {String} jobId The id of the job from which to delete the task.
     * @param {String} taskId The id of the task to delete.
     * @param {String} apiVersion Client API Version.
     * @param {Object} opts Optional parameters
     * @param {Number} [timeout = 30)] Sets the maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
     * @param {String} [clientRequestId] Caller generated request identity, in the form of a GUID with no decoration such as curly braces e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
     * @param {Boolean} [returnClientRequestId] Specifies if the server should return the client-request-id identifier in the response.
     * @param {String} [ocpDate] The time the request was issued. If not specified, this header will be automatically populated with the current system clock time.
     * @param {String} [ifMatch] An ETag is specified. Specify this header to perform the operation only if the resource's ETag is an exact match as specified.
     * @param {String} [ifNoneMatch] An ETag is specified. Specify this header to perform the operation only if the resource's ETag does not match the specified ETag.
     * @param {String} [ifModifiedSince] Specify this header to perform the operation only if the resource has been modified since the specified date/time.
     * @param {String} [ifUnmodifiedSince] Specify this header to perform the operation only if the resource has not been modified since the specified date/time.
     * @param {module:api/TasksApi~taskDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    taskDelete(jobId, taskId, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling taskDelete");
      }
      // verify the required parameter 'taskId' is set
      if (taskId === undefined || taskId === null) {
        throw new Error("Missing the required parameter 'taskId' when calling taskDelete");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling taskDelete");
      }

      let pathParams = {
        'jobId': jobId,
        'taskId': taskId
      };
      let queryParams = {
        'timeout': opts['timeout'],
        'api-version': apiVersion
      };
      let headerParams = {
        'client-request-id': opts['clientRequestId'],
        'return-client-request-id': opts['returnClientRequestId'],
        'ocp-date': opts['ocpDate'],
        'If-Match': opts['ifMatch'],
        'If-None-Match': opts['ifNoneMatch'],
        'If-Modified-Since': opts['ifModifiedSince'],
        'If-Unmodified-Since': opts['ifUnmodifiedSince']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/jobs/{jobId}/tasks/{taskId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the taskGet operation.
     * @callback module:api/TasksApi~taskGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CloudTask} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets information about the specified task.
     * @param {String} jobId The id of the job that contains the task.
     * @param {String} taskId The id of the task to get information about.
     * @param {String} apiVersion Client API Version.
     * @param {Object} opts Optional parameters
     * @param {String} [select] Sets an OData $select clause.
     * @param {String} [expand] Sets an OData $expand clause.
     * @param {Number} [timeout = 30)] Sets the maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
     * @param {String} [clientRequestId] Caller generated request identity, in the form of a GUID with no decoration such as curly braces e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
     * @param {Boolean} [returnClientRequestId] Specifies if the server should return the client-request-id identifier in the response.
     * @param {String} [ocpDate] The time the request was issued. If not specified, this header will be automatically populated with the current system clock time.
     * @param {String} [ifMatch] An ETag is specified. Specify this header to perform the operation only if the resource's ETag is an exact match as specified.
     * @param {String} [ifNoneMatch] An ETag is specified. Specify this header to perform the operation only if the resource's ETag does not match the specified ETag.
     * @param {String} [ifModifiedSince] Specify this header to perform the operation only if the resource has been modified since the specified date/time.
     * @param {String} [ifUnmodifiedSince] Specify this header to perform the operation only if the resource has not been modified since the specified date/time.
     * @param {module:api/TasksApi~taskGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CloudTask}
     */
    taskGet(jobId, taskId, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling taskGet");
      }
      // verify the required parameter 'taskId' is set
      if (taskId === undefined || taskId === null) {
        throw new Error("Missing the required parameter 'taskId' when calling taskGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling taskGet");
      }

      let pathParams = {
        'jobId': jobId,
        'taskId': taskId
      };
      let queryParams = {
        '$select': opts['select'],
        '$expand': opts['expand'],
        'timeout': opts['timeout'],
        'api-version': apiVersion
      };
      let headerParams = {
        'client-request-id': opts['clientRequestId'],
        'return-client-request-id': opts['returnClientRequestId'],
        'ocp-date': opts['ocpDate'],
        'If-Match': opts['ifMatch'],
        'If-None-Match': opts['ifNoneMatch'],
        'If-Modified-Since': opts['ifModifiedSince'],
        'If-Unmodified-Since': opts['ifUnmodifiedSince']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CloudTask;
      return this.apiClient.callApi(
        '/jobs/{jobId}/tasks/{taskId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the taskList operation.
     * @callback module:api/TasksApi~taskListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CloudTaskListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all of the tasks that are associated with the specified job.
     * @param {String} jobId The id of the job.
     * @param {String} apiVersion Client API Version.
     * @param {Object} opts Optional parameters
     * @param {String} [filter] Sets an OData $filter clause.
     * @param {String} [select] Sets an OData $select clause.
     * @param {String} [expand] Sets an OData $expand clause.
     * @param {Number} [maxresults] Sets the maximum number of items to return in the response.
     * @param {Number} [timeout = 30)] Sets the maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
     * @param {String} [clientRequestId] Caller generated request identity, in the form of a GUID with no decoration such as curly braces e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
     * @param {Boolean} [returnClientRequestId] Specifies if the server should return the client-request-id identifier in the response.
     * @param {String} [ocpDate] The time the request was issued. If not specified, this header will be automatically populated with the current system clock time.
     * @param {module:api/TasksApi~taskListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CloudTaskListResult}
     */
    taskList(jobId, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling taskList");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling taskList");
      }

      let pathParams = {
        'jobId': jobId
      };
      let queryParams = {
        '$filter': opts['filter'],
        '$select': opts['select'],
        '$expand': opts['expand'],
        'maxresults': opts['maxresults'],
        'timeout': opts['timeout'],
        'api-version': apiVersion
      };
      let headerParams = {
        'client-request-id': opts['clientRequestId'],
        'return-client-request-id': opts['returnClientRequestId'],
        'ocp-date': opts['ocpDate']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CloudTaskListResult;
      return this.apiClient.callApi(
        '/jobs/{jobId}/tasks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the taskListSubtasks operation.
     * @callback module:api/TasksApi~taskListSubtasksCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CloudTaskListSubtasksResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all of the subtasks that are associated with the specified multi-instance task.
     * @param {String} jobId The id of the job.
     * @param {String} taskId The id of the task.
     * @param {String} apiVersion Client API Version.
     * @param {Object} opts Optional parameters
     * @param {String} [select] Sets an OData $select clause.
     * @param {Number} [timeout = 30)] Sets the maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
     * @param {String} [clientRequestId] Caller generated request identity, in the form of a GUID with no decoration such as curly braces e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
     * @param {Boolean} [returnClientRequestId] Specifies if the server should return the client-request-id identifier in the response.
     * @param {String} [ocpDate] The time the request was issued. If not specified, this header will be automatically populated with the current system clock time.
     * @param {module:api/TasksApi~taskListSubtasksCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CloudTaskListSubtasksResult}
     */
    taskListSubtasks(jobId, taskId, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling taskListSubtasks");
      }
      // verify the required parameter 'taskId' is set
      if (taskId === undefined || taskId === null) {
        throw new Error("Missing the required parameter 'taskId' when calling taskListSubtasks");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling taskListSubtasks");
      }

      let pathParams = {
        'jobId': jobId,
        'taskId': taskId
      };
      let queryParams = {
        '$select': opts['select'],
        'timeout': opts['timeout'],
        'api-version': apiVersion
      };
      let headerParams = {
        'client-request-id': opts['clientRequestId'],
        'return-client-request-id': opts['returnClientRequestId'],
        'ocp-date': opts['ocpDate']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CloudTaskListSubtasksResult;
      return this.apiClient.callApi(
        '/jobs/{jobId}/tasks/{taskId}/subtasksinfo', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the taskTerminate operation.
     * @callback module:api/TasksApi~taskTerminateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Terminates the specified task.
     * @param {String} jobId The id of the job containing the task.
     * @param {String} taskId The id of the task to terminate.
     * @param {String} apiVersion Client API Version.
     * @param {Object} opts Optional parameters
     * @param {Number} [timeout = 30)] Sets the maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
     * @param {String} [clientRequestId] Caller generated request identity, in the form of a GUID with no decoration such as curly braces e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
     * @param {Boolean} [returnClientRequestId] Specifies if the server should return the client-request-id identifier in the response.
     * @param {String} [ocpDate] The time the request was issued. If not specified, this header will be automatically populated with the current system clock time.
     * @param {String} [ifMatch] An ETag is specified. Specify this header to perform the operation only if the resource's ETag is an exact match as specified.
     * @param {String} [ifNoneMatch] An ETag is specified. Specify this header to perform the operation only if the resource's ETag does not match the specified ETag.
     * @param {String} [ifModifiedSince] Specify this header to perform the operation only if the resource has been modified since the specified date/time.
     * @param {String} [ifUnmodifiedSince] Specify this header to perform the operation only if the resource has not been modified since the specified date/time.
     * @param {module:api/TasksApi~taskTerminateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    taskTerminate(jobId, taskId, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling taskTerminate");
      }
      // verify the required parameter 'taskId' is set
      if (taskId === undefined || taskId === null) {
        throw new Error("Missing the required parameter 'taskId' when calling taskTerminate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling taskTerminate");
      }

      let pathParams = {
        'jobId': jobId,
        'taskId': taskId
      };
      let queryParams = {
        'timeout': opts['timeout'],
        'api-version': apiVersion
      };
      let headerParams = {
        'client-request-id': opts['clientRequestId'],
        'return-client-request-id': opts['returnClientRequestId'],
        'ocp-date': opts['ocpDate'],
        'If-Match': opts['ifMatch'],
        'If-None-Match': opts['ifNoneMatch'],
        'If-Modified-Since': opts['ifModifiedSince'],
        'If-Unmodified-Since': opts['ifUnmodifiedSince']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/jobs/{jobId}/tasks/{taskId}/terminate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the taskUpdate operation.
     * @callback module:api/TasksApi~taskUpdateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the properties of the specified task.
     * @param {String} jobId The id of the job containing the task.
     * @param {String} taskId The id of the task to update.
     * @param {String} apiVersion Client API Version.
     * @param {module:model/TaskUpdateParameter} taskUpdateParameter The parameters for the request.
     * @param {Object} opts Optional parameters
     * @param {Number} [timeout = 30)] Sets the maximum time that the server can spend processing the request, in seconds. The default is 30 seconds.
     * @param {String} [clientRequestId] Caller generated request identity, in the form of a GUID with no decoration such as curly braces e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
     * @param {Boolean} [returnClientRequestId] Specifies if the server should return the client-request-id identifier in the response.
     * @param {String} [ocpDate] The time the request was issued. If not specified, this header will be automatically populated with the current system clock time.
     * @param {String} [ifMatch] An ETag is specified. Specify this header to perform the operation only if the resource's ETag is an exact match as specified.
     * @param {String} [ifNoneMatch] An ETag is specified. Specify this header to perform the operation only if the resource's ETag does not match the specified ETag.
     * @param {String} [ifModifiedSince] Specify this header to perform the operation only if the resource has been modified since the specified date/time.
     * @param {String} [ifUnmodifiedSince] Specify this header to perform the operation only if the resource has not been modified since the specified date/time.
     * @param {module:api/TasksApi~taskUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    taskUpdate(jobId, taskId, apiVersion, taskUpdateParameter, opts, callback) {
      opts = opts || {};
      let postBody = taskUpdateParameter;
      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling taskUpdate");
      }
      // verify the required parameter 'taskId' is set
      if (taskId === undefined || taskId === null) {
        throw new Error("Missing the required parameter 'taskId' when calling taskUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling taskUpdate");
      }
      // verify the required parameter 'taskUpdateParameter' is set
      if (taskUpdateParameter === undefined || taskUpdateParameter === null) {
        throw new Error("Missing the required parameter 'taskUpdateParameter' when calling taskUpdate");
      }

      let pathParams = {
        'jobId': jobId,
        'taskId': taskId
      };
      let queryParams = {
        'timeout': opts['timeout'],
        'api-version': apiVersion
      };
      let headerParams = {
        'client-request-id': opts['clientRequestId'],
        'return-client-request-id': opts['returnClientRequestId'],
        'ocp-date': opts['ocpDate'],
        'If-Match': opts['ifMatch'],
        'If-None-Match': opts['ifNoneMatch'],
        'If-Modified-Since': opts['ifModifiedSince'],
        'If-Unmodified-Since': opts['ifUnmodifiedSince']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json; odata=minimalmetadata'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/jobs/{jobId}/tasks/{taskId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
