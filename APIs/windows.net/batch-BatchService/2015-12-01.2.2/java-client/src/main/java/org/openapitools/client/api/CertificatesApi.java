/*
 * BatchService
 * A client for issuing REST requests to the Azure Batch service.
 *
 * The version of the OpenAPI document: 2015-12-01.2.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.BatchError;
import org.openapitools.client.model.Certificate;
import org.openapitools.client.model.CertificateAddParameter;
import org.openapitools.client.model.CertificateListResult;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CertificatesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CertificatesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CertificatesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for certificateAdd
     * @param apiVersion Client API Version. (required)
     * @param certificateAddParameter Specifies the certificate to be added. (required)
     * @param timeout Sets the maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. (optional, default to 30)
     * @param clientRequestId Caller generated request identity, in the form of a GUID with no decoration such as curly braces e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. (optional)
     * @param returnClientRequestId Specifies if the server should return the client-request-id identifier in the response. (optional)
     * @param ocpDate The time the request was issued. If not specified, this header will be automatically populated with the current system clock time. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Initial response </td><td>  * DataServiceId - Gets the OData id of the resource to which the request applied. <br>  * ETag - Gets the content of the ETag HTTP response header. <br>  * Last-Modified - Gets the content of the Last-Modified HTTP response header. <br>  * client-request-id - Gets the ClientRequestId provided by the client during the request, if present and requested to be returned. <br>  * request-id - Gets the value that uniquely identifies a request. <br>  </td></tr>
        <tr><td> 0 </td><td> Error from the Batch service </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call certificateAddCall(String apiVersion, CertificateAddParameter certificateAddParameter, Integer timeout, String clientRequestId, Boolean returnClientRequestId, String ocpDate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = certificateAddParameter;

        // create path and map variables
        String localVarPath = "/certificates";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (timeout != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeout", timeout));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (clientRequestId != null) {
            localVarHeaderParams.put("client-request-id", localVarApiClient.parameterToString(clientRequestId));
        }

        if (returnClientRequestId != null) {
            localVarHeaderParams.put("return-client-request-id", localVarApiClient.parameterToString(returnClientRequestId));
        }

        if (ocpDate != null) {
            localVarHeaderParams.put("ocp-date", localVarApiClient.parameterToString(ocpDate));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json; odata=minimalmetadata"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call certificateAddValidateBeforeCall(String apiVersion, CertificateAddParameter certificateAddParameter, Integer timeout, String clientRequestId, Boolean returnClientRequestId, String ocpDate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling certificateAdd(Async)");
        }

        // verify the required parameter 'certificateAddParameter' is set
        if (certificateAddParameter == null) {
            throw new ApiException("Missing the required parameter 'certificateAddParameter' when calling certificateAdd(Async)");
        }

        return certificateAddCall(apiVersion, certificateAddParameter, timeout, clientRequestId, returnClientRequestId, ocpDate, _callback);

    }

    /**
     * 
     * Adds a certificate to the specified account.
     * @param apiVersion Client API Version. (required)
     * @param certificateAddParameter Specifies the certificate to be added. (required)
     * @param timeout Sets the maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. (optional, default to 30)
     * @param clientRequestId Caller generated request identity, in the form of a GUID with no decoration such as curly braces e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. (optional)
     * @param returnClientRequestId Specifies if the server should return the client-request-id identifier in the response. (optional)
     * @param ocpDate The time the request was issued. If not specified, this header will be automatically populated with the current system clock time. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Initial response </td><td>  * DataServiceId - Gets the OData id of the resource to which the request applied. <br>  * ETag - Gets the content of the ETag HTTP response header. <br>  * Last-Modified - Gets the content of the Last-Modified HTTP response header. <br>  * client-request-id - Gets the ClientRequestId provided by the client during the request, if present and requested to be returned. <br>  * request-id - Gets the value that uniquely identifies a request. <br>  </td></tr>
        <tr><td> 0 </td><td> Error from the Batch service </td><td>  -  </td></tr>
     </table>
     */
    public void certificateAdd(String apiVersion, CertificateAddParameter certificateAddParameter, Integer timeout, String clientRequestId, Boolean returnClientRequestId, String ocpDate) throws ApiException {
        certificateAddWithHttpInfo(apiVersion, certificateAddParameter, timeout, clientRequestId, returnClientRequestId, ocpDate);
    }

    /**
     * 
     * Adds a certificate to the specified account.
     * @param apiVersion Client API Version. (required)
     * @param certificateAddParameter Specifies the certificate to be added. (required)
     * @param timeout Sets the maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. (optional, default to 30)
     * @param clientRequestId Caller generated request identity, in the form of a GUID with no decoration such as curly braces e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. (optional)
     * @param returnClientRequestId Specifies if the server should return the client-request-id identifier in the response. (optional)
     * @param ocpDate The time the request was issued. If not specified, this header will be automatically populated with the current system clock time. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Initial response </td><td>  * DataServiceId - Gets the OData id of the resource to which the request applied. <br>  * ETag - Gets the content of the ETag HTTP response header. <br>  * Last-Modified - Gets the content of the Last-Modified HTTP response header. <br>  * client-request-id - Gets the ClientRequestId provided by the client during the request, if present and requested to be returned. <br>  * request-id - Gets the value that uniquely identifies a request. <br>  </td></tr>
        <tr><td> 0 </td><td> Error from the Batch service </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> certificateAddWithHttpInfo(String apiVersion, CertificateAddParameter certificateAddParameter, Integer timeout, String clientRequestId, Boolean returnClientRequestId, String ocpDate) throws ApiException {
        okhttp3.Call localVarCall = certificateAddValidateBeforeCall(apiVersion, certificateAddParameter, timeout, clientRequestId, returnClientRequestId, ocpDate, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Adds a certificate to the specified account.
     * @param apiVersion Client API Version. (required)
     * @param certificateAddParameter Specifies the certificate to be added. (required)
     * @param timeout Sets the maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. (optional, default to 30)
     * @param clientRequestId Caller generated request identity, in the form of a GUID with no decoration such as curly braces e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. (optional)
     * @param returnClientRequestId Specifies if the server should return the client-request-id identifier in the response. (optional)
     * @param ocpDate The time the request was issued. If not specified, this header will be automatically populated with the current system clock time. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Initial response </td><td>  * DataServiceId - Gets the OData id of the resource to which the request applied. <br>  * ETag - Gets the content of the ETag HTTP response header. <br>  * Last-Modified - Gets the content of the Last-Modified HTTP response header. <br>  * client-request-id - Gets the ClientRequestId provided by the client during the request, if present and requested to be returned. <br>  * request-id - Gets the value that uniquely identifies a request. <br>  </td></tr>
        <tr><td> 0 </td><td> Error from the Batch service </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call certificateAddAsync(String apiVersion, CertificateAddParameter certificateAddParameter, Integer timeout, String clientRequestId, Boolean returnClientRequestId, String ocpDate, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = certificateAddValidateBeforeCall(apiVersion, certificateAddParameter, timeout, clientRequestId, returnClientRequestId, ocpDate, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for certificateCancelDeletion
     * @param thumbprintAlgorithm The algorithm used to derive the thumbprint parameter. This must be sha1. (required)
     * @param thumbprint The thumbprint of the certificate being deleted. (required)
     * @param apiVersion Client API Version. (required)
     * @param timeout Sets the maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. (optional, default to 30)
     * @param clientRequestId Caller generated request identity, in the form of a GUID with no decoration such as curly braces e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. (optional)
     * @param returnClientRequestId Specifies if the server should return the client-request-id identifier in the response. (optional)
     * @param ocpDate The time the request was issued. If not specified, this header will be automatically populated with the current system clock time. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  * DataServiceId - Gets the OData id of the resource to which the request applied. <br>  * ETag - Gets the content of the ETag HTTP response header. <br>  * Last-Modified - Gets the content of the Last-Modified HTTP response header. <br>  * client-request-id - Gets the ClientRequestId provided by the client during the request, if present and requested to be returned. <br>  * request-id - Gets the value that uniquely identifies a request. <br>  </td></tr>
        <tr><td> 0 </td><td> Error from the Batch service </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call certificateCancelDeletionCall(String thumbprintAlgorithm, String thumbprint, String apiVersion, Integer timeout, String clientRequestId, Boolean returnClientRequestId, String ocpDate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/certificates(thumbprintAlgorithm={thumbprintAlgorithm},thumbprint={thumbprint})/canceldelete"
            .replace("{" + "thumbprintAlgorithm" + "}", localVarApiClient.escapeString(thumbprintAlgorithm.toString()))
            .replace("{" + "thumbprint" + "}", localVarApiClient.escapeString(thumbprint.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (timeout != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeout", timeout));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (clientRequestId != null) {
            localVarHeaderParams.put("client-request-id", localVarApiClient.parameterToString(clientRequestId));
        }

        if (returnClientRequestId != null) {
            localVarHeaderParams.put("return-client-request-id", localVarApiClient.parameterToString(returnClientRequestId));
        }

        if (ocpDate != null) {
            localVarHeaderParams.put("ocp-date", localVarApiClient.parameterToString(ocpDate));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call certificateCancelDeletionValidateBeforeCall(String thumbprintAlgorithm, String thumbprint, String apiVersion, Integer timeout, String clientRequestId, Boolean returnClientRequestId, String ocpDate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'thumbprintAlgorithm' is set
        if (thumbprintAlgorithm == null) {
            throw new ApiException("Missing the required parameter 'thumbprintAlgorithm' when calling certificateCancelDeletion(Async)");
        }

        // verify the required parameter 'thumbprint' is set
        if (thumbprint == null) {
            throw new ApiException("Missing the required parameter 'thumbprint' when calling certificateCancelDeletion(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling certificateCancelDeletion(Async)");
        }

        return certificateCancelDeletionCall(thumbprintAlgorithm, thumbprint, apiVersion, timeout, clientRequestId, returnClientRequestId, ocpDate, _callback);

    }

    /**
     * 
     * Cancels a failed deletion of a certificate from the specified account.
     * @param thumbprintAlgorithm The algorithm used to derive the thumbprint parameter. This must be sha1. (required)
     * @param thumbprint The thumbprint of the certificate being deleted. (required)
     * @param apiVersion Client API Version. (required)
     * @param timeout Sets the maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. (optional, default to 30)
     * @param clientRequestId Caller generated request identity, in the form of a GUID with no decoration such as curly braces e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. (optional)
     * @param returnClientRequestId Specifies if the server should return the client-request-id identifier in the response. (optional)
     * @param ocpDate The time the request was issued. If not specified, this header will be automatically populated with the current system clock time. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  * DataServiceId - Gets the OData id of the resource to which the request applied. <br>  * ETag - Gets the content of the ETag HTTP response header. <br>  * Last-Modified - Gets the content of the Last-Modified HTTP response header. <br>  * client-request-id - Gets the ClientRequestId provided by the client during the request, if present and requested to be returned. <br>  * request-id - Gets the value that uniquely identifies a request. <br>  </td></tr>
        <tr><td> 0 </td><td> Error from the Batch service </td><td>  -  </td></tr>
     </table>
     */
    public void certificateCancelDeletion(String thumbprintAlgorithm, String thumbprint, String apiVersion, Integer timeout, String clientRequestId, Boolean returnClientRequestId, String ocpDate) throws ApiException {
        certificateCancelDeletionWithHttpInfo(thumbprintAlgorithm, thumbprint, apiVersion, timeout, clientRequestId, returnClientRequestId, ocpDate);
    }

    /**
     * 
     * Cancels a failed deletion of a certificate from the specified account.
     * @param thumbprintAlgorithm The algorithm used to derive the thumbprint parameter. This must be sha1. (required)
     * @param thumbprint The thumbprint of the certificate being deleted. (required)
     * @param apiVersion Client API Version. (required)
     * @param timeout Sets the maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. (optional, default to 30)
     * @param clientRequestId Caller generated request identity, in the form of a GUID with no decoration such as curly braces e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. (optional)
     * @param returnClientRequestId Specifies if the server should return the client-request-id identifier in the response. (optional)
     * @param ocpDate The time the request was issued. If not specified, this header will be automatically populated with the current system clock time. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  * DataServiceId - Gets the OData id of the resource to which the request applied. <br>  * ETag - Gets the content of the ETag HTTP response header. <br>  * Last-Modified - Gets the content of the Last-Modified HTTP response header. <br>  * client-request-id - Gets the ClientRequestId provided by the client during the request, if present and requested to be returned. <br>  * request-id - Gets the value that uniquely identifies a request. <br>  </td></tr>
        <tr><td> 0 </td><td> Error from the Batch service </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> certificateCancelDeletionWithHttpInfo(String thumbprintAlgorithm, String thumbprint, String apiVersion, Integer timeout, String clientRequestId, Boolean returnClientRequestId, String ocpDate) throws ApiException {
        okhttp3.Call localVarCall = certificateCancelDeletionValidateBeforeCall(thumbprintAlgorithm, thumbprint, apiVersion, timeout, clientRequestId, returnClientRequestId, ocpDate, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Cancels a failed deletion of a certificate from the specified account.
     * @param thumbprintAlgorithm The algorithm used to derive the thumbprint parameter. This must be sha1. (required)
     * @param thumbprint The thumbprint of the certificate being deleted. (required)
     * @param apiVersion Client API Version. (required)
     * @param timeout Sets the maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. (optional, default to 30)
     * @param clientRequestId Caller generated request identity, in the form of a GUID with no decoration such as curly braces e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. (optional)
     * @param returnClientRequestId Specifies if the server should return the client-request-id identifier in the response. (optional)
     * @param ocpDate The time the request was issued. If not specified, this header will be automatically populated with the current system clock time. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  * DataServiceId - Gets the OData id of the resource to which the request applied. <br>  * ETag - Gets the content of the ETag HTTP response header. <br>  * Last-Modified - Gets the content of the Last-Modified HTTP response header. <br>  * client-request-id - Gets the ClientRequestId provided by the client during the request, if present and requested to be returned. <br>  * request-id - Gets the value that uniquely identifies a request. <br>  </td></tr>
        <tr><td> 0 </td><td> Error from the Batch service </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call certificateCancelDeletionAsync(String thumbprintAlgorithm, String thumbprint, String apiVersion, Integer timeout, String clientRequestId, Boolean returnClientRequestId, String ocpDate, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = certificateCancelDeletionValidateBeforeCall(thumbprintAlgorithm, thumbprint, apiVersion, timeout, clientRequestId, returnClientRequestId, ocpDate, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for certificateDelete
     * @param thumbprintAlgorithm The algorithm used to derive the thumbprint parameter. This must be sha1. (required)
     * @param thumbprint The thumbprint of the certificate to be deleted. (required)
     * @param apiVersion Client API Version. (required)
     * @param timeout Sets the maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. (optional, default to 30)
     * @param clientRequestId Caller generated request identity, in the form of a GUID with no decoration such as curly braces e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. (optional)
     * @param returnClientRequestId Specifies if the server should return the client-request-id identifier in the response. (optional)
     * @param ocpDate The time the request was issued. If not specified, this header will be automatically populated with the current system clock time. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td>  </td><td>  * ETag - Gets the content of the ETag HTTP response header. <br>  * Last-Modified - Gets the content of the Last-Modified HTTP response header. <br>  * client-request-id - Gets the ClientRequestId provided by the client during the request, if present and requested to be returned. <br>  * request-id - Gets the value that uniquely identifies a request. <br>  </td></tr>
        <tr><td> 0 </td><td> Error from the Batch service </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call certificateDeleteCall(String thumbprintAlgorithm, String thumbprint, String apiVersion, Integer timeout, String clientRequestId, Boolean returnClientRequestId, String ocpDate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/certificates(thumbprintAlgorithm={thumbprintAlgorithm},thumbprint={thumbprint})"
            .replace("{" + "thumbprintAlgorithm" + "}", localVarApiClient.escapeString(thumbprintAlgorithm.toString()))
            .replace("{" + "thumbprint" + "}", localVarApiClient.escapeString(thumbprint.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (timeout != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeout", timeout));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (clientRequestId != null) {
            localVarHeaderParams.put("client-request-id", localVarApiClient.parameterToString(clientRequestId));
        }

        if (returnClientRequestId != null) {
            localVarHeaderParams.put("return-client-request-id", localVarApiClient.parameterToString(returnClientRequestId));
        }

        if (ocpDate != null) {
            localVarHeaderParams.put("ocp-date", localVarApiClient.parameterToString(ocpDate));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call certificateDeleteValidateBeforeCall(String thumbprintAlgorithm, String thumbprint, String apiVersion, Integer timeout, String clientRequestId, Boolean returnClientRequestId, String ocpDate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'thumbprintAlgorithm' is set
        if (thumbprintAlgorithm == null) {
            throw new ApiException("Missing the required parameter 'thumbprintAlgorithm' when calling certificateDelete(Async)");
        }

        // verify the required parameter 'thumbprint' is set
        if (thumbprint == null) {
            throw new ApiException("Missing the required parameter 'thumbprint' when calling certificateDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling certificateDelete(Async)");
        }

        return certificateDeleteCall(thumbprintAlgorithm, thumbprint, apiVersion, timeout, clientRequestId, returnClientRequestId, ocpDate, _callback);

    }

    /**
     * 
     * Deletes a certificate from the specified account.
     * @param thumbprintAlgorithm The algorithm used to derive the thumbprint parameter. This must be sha1. (required)
     * @param thumbprint The thumbprint of the certificate to be deleted. (required)
     * @param apiVersion Client API Version. (required)
     * @param timeout Sets the maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. (optional, default to 30)
     * @param clientRequestId Caller generated request identity, in the form of a GUID with no decoration such as curly braces e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. (optional)
     * @param returnClientRequestId Specifies if the server should return the client-request-id identifier in the response. (optional)
     * @param ocpDate The time the request was issued. If not specified, this header will be automatically populated with the current system clock time. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td>  </td><td>  * ETag - Gets the content of the ETag HTTP response header. <br>  * Last-Modified - Gets the content of the Last-Modified HTTP response header. <br>  * client-request-id - Gets the ClientRequestId provided by the client during the request, if present and requested to be returned. <br>  * request-id - Gets the value that uniquely identifies a request. <br>  </td></tr>
        <tr><td> 0 </td><td> Error from the Batch service </td><td>  -  </td></tr>
     </table>
     */
    public void certificateDelete(String thumbprintAlgorithm, String thumbprint, String apiVersion, Integer timeout, String clientRequestId, Boolean returnClientRequestId, String ocpDate) throws ApiException {
        certificateDeleteWithHttpInfo(thumbprintAlgorithm, thumbprint, apiVersion, timeout, clientRequestId, returnClientRequestId, ocpDate);
    }

    /**
     * 
     * Deletes a certificate from the specified account.
     * @param thumbprintAlgorithm The algorithm used to derive the thumbprint parameter. This must be sha1. (required)
     * @param thumbprint The thumbprint of the certificate to be deleted. (required)
     * @param apiVersion Client API Version. (required)
     * @param timeout Sets the maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. (optional, default to 30)
     * @param clientRequestId Caller generated request identity, in the form of a GUID with no decoration such as curly braces e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. (optional)
     * @param returnClientRequestId Specifies if the server should return the client-request-id identifier in the response. (optional)
     * @param ocpDate The time the request was issued. If not specified, this header will be automatically populated with the current system clock time. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td>  </td><td>  * ETag - Gets the content of the ETag HTTP response header. <br>  * Last-Modified - Gets the content of the Last-Modified HTTP response header. <br>  * client-request-id - Gets the ClientRequestId provided by the client during the request, if present and requested to be returned. <br>  * request-id - Gets the value that uniquely identifies a request. <br>  </td></tr>
        <tr><td> 0 </td><td> Error from the Batch service </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> certificateDeleteWithHttpInfo(String thumbprintAlgorithm, String thumbprint, String apiVersion, Integer timeout, String clientRequestId, Boolean returnClientRequestId, String ocpDate) throws ApiException {
        okhttp3.Call localVarCall = certificateDeleteValidateBeforeCall(thumbprintAlgorithm, thumbprint, apiVersion, timeout, clientRequestId, returnClientRequestId, ocpDate, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes a certificate from the specified account.
     * @param thumbprintAlgorithm The algorithm used to derive the thumbprint parameter. This must be sha1. (required)
     * @param thumbprint The thumbprint of the certificate to be deleted. (required)
     * @param apiVersion Client API Version. (required)
     * @param timeout Sets the maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. (optional, default to 30)
     * @param clientRequestId Caller generated request identity, in the form of a GUID with no decoration such as curly braces e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. (optional)
     * @param returnClientRequestId Specifies if the server should return the client-request-id identifier in the response. (optional)
     * @param ocpDate The time the request was issued. If not specified, this header will be automatically populated with the current system clock time. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td>  </td><td>  * ETag - Gets the content of the ETag HTTP response header. <br>  * Last-Modified - Gets the content of the Last-Modified HTTP response header. <br>  * client-request-id - Gets the ClientRequestId provided by the client during the request, if present and requested to be returned. <br>  * request-id - Gets the value that uniquely identifies a request. <br>  </td></tr>
        <tr><td> 0 </td><td> Error from the Batch service </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call certificateDeleteAsync(String thumbprintAlgorithm, String thumbprint, String apiVersion, Integer timeout, String clientRequestId, Boolean returnClientRequestId, String ocpDate, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = certificateDeleteValidateBeforeCall(thumbprintAlgorithm, thumbprint, apiVersion, timeout, clientRequestId, returnClientRequestId, ocpDate, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for certificateGet
     * @param thumbprintAlgorithm The algorithm used to derive the thumbprint parameter. This must be sha1. (required)
     * @param thumbprint The thumbprint of the certificate to get. (required)
     * @param apiVersion Client API Version. (required)
     * @param $select Sets an OData $select clause. (optional)
     * @param timeout Sets the maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. (optional, default to 30)
     * @param clientRequestId Caller generated request identity, in the form of a GUID with no decoration such as curly braces e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. (optional)
     * @param returnClientRequestId Specifies if the server should return the client-request-id identifier in the response. (optional)
     * @param ocpDate The time the request was issued. If not specified, this header will be automatically populated with the current system clock time. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * ETag - Gets the content of the ETag HTTP response header. <br>  * Last-Modified - Gets the content of the Last-Modified HTTP response header. <br>  * client-request-id - Gets the ClientRequestId provided by the client during the request, if present and requested to be returned. <br>  * request-id - Gets the value that uniquely identifies a request. <br>  </td></tr>
        <tr><td> 0 </td><td> Error from the Batch service </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call certificateGetCall(String thumbprintAlgorithm, String thumbprint, String apiVersion, String $select, Integer timeout, String clientRequestId, Boolean returnClientRequestId, String ocpDate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/certificates(thumbprintAlgorithm={thumbprintAlgorithm},thumbprint={thumbprint})"
            .replace("{" + "thumbprintAlgorithm" + "}", localVarApiClient.escapeString(thumbprintAlgorithm.toString()))
            .replace("{" + "thumbprint" + "}", localVarApiClient.escapeString(thumbprint.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if ($select != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$select", $select));
        }

        if (timeout != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeout", timeout));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (clientRequestId != null) {
            localVarHeaderParams.put("client-request-id", localVarApiClient.parameterToString(clientRequestId));
        }

        if (returnClientRequestId != null) {
            localVarHeaderParams.put("return-client-request-id", localVarApiClient.parameterToString(returnClientRequestId));
        }

        if (ocpDate != null) {
            localVarHeaderParams.put("ocp-date", localVarApiClient.parameterToString(ocpDate));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call certificateGetValidateBeforeCall(String thumbprintAlgorithm, String thumbprint, String apiVersion, String $select, Integer timeout, String clientRequestId, Boolean returnClientRequestId, String ocpDate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'thumbprintAlgorithm' is set
        if (thumbprintAlgorithm == null) {
            throw new ApiException("Missing the required parameter 'thumbprintAlgorithm' when calling certificateGet(Async)");
        }

        // verify the required parameter 'thumbprint' is set
        if (thumbprint == null) {
            throw new ApiException("Missing the required parameter 'thumbprint' when calling certificateGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling certificateGet(Async)");
        }

        return certificateGetCall(thumbprintAlgorithm, thumbprint, apiVersion, $select, timeout, clientRequestId, returnClientRequestId, ocpDate, _callback);

    }

    /**
     * 
     * Gets information about the specified certificate.
     * @param thumbprintAlgorithm The algorithm used to derive the thumbprint parameter. This must be sha1. (required)
     * @param thumbprint The thumbprint of the certificate to get. (required)
     * @param apiVersion Client API Version. (required)
     * @param $select Sets an OData $select clause. (optional)
     * @param timeout Sets the maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. (optional, default to 30)
     * @param clientRequestId Caller generated request identity, in the form of a GUID with no decoration such as curly braces e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. (optional)
     * @param returnClientRequestId Specifies if the server should return the client-request-id identifier in the response. (optional)
     * @param ocpDate The time the request was issued. If not specified, this header will be automatically populated with the current system clock time. (optional)
     * @return Certificate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * ETag - Gets the content of the ETag HTTP response header. <br>  * Last-Modified - Gets the content of the Last-Modified HTTP response header. <br>  * client-request-id - Gets the ClientRequestId provided by the client during the request, if present and requested to be returned. <br>  * request-id - Gets the value that uniquely identifies a request. <br>  </td></tr>
        <tr><td> 0 </td><td> Error from the Batch service </td><td>  -  </td></tr>
     </table>
     */
    public Certificate certificateGet(String thumbprintAlgorithm, String thumbprint, String apiVersion, String $select, Integer timeout, String clientRequestId, Boolean returnClientRequestId, String ocpDate) throws ApiException {
        ApiResponse<Certificate> localVarResp = certificateGetWithHttpInfo(thumbprintAlgorithm, thumbprint, apiVersion, $select, timeout, clientRequestId, returnClientRequestId, ocpDate);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets information about the specified certificate.
     * @param thumbprintAlgorithm The algorithm used to derive the thumbprint parameter. This must be sha1. (required)
     * @param thumbprint The thumbprint of the certificate to get. (required)
     * @param apiVersion Client API Version. (required)
     * @param $select Sets an OData $select clause. (optional)
     * @param timeout Sets the maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. (optional, default to 30)
     * @param clientRequestId Caller generated request identity, in the form of a GUID with no decoration such as curly braces e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. (optional)
     * @param returnClientRequestId Specifies if the server should return the client-request-id identifier in the response. (optional)
     * @param ocpDate The time the request was issued. If not specified, this header will be automatically populated with the current system clock time. (optional)
     * @return ApiResponse&lt;Certificate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * ETag - Gets the content of the ETag HTTP response header. <br>  * Last-Modified - Gets the content of the Last-Modified HTTP response header. <br>  * client-request-id - Gets the ClientRequestId provided by the client during the request, if present and requested to be returned. <br>  * request-id - Gets the value that uniquely identifies a request. <br>  </td></tr>
        <tr><td> 0 </td><td> Error from the Batch service </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Certificate> certificateGetWithHttpInfo(String thumbprintAlgorithm, String thumbprint, String apiVersion, String $select, Integer timeout, String clientRequestId, Boolean returnClientRequestId, String ocpDate) throws ApiException {
        okhttp3.Call localVarCall = certificateGetValidateBeforeCall(thumbprintAlgorithm, thumbprint, apiVersion, $select, timeout, clientRequestId, returnClientRequestId, ocpDate, null);
        Type localVarReturnType = new TypeToken<Certificate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets information about the specified certificate.
     * @param thumbprintAlgorithm The algorithm used to derive the thumbprint parameter. This must be sha1. (required)
     * @param thumbprint The thumbprint of the certificate to get. (required)
     * @param apiVersion Client API Version. (required)
     * @param $select Sets an OData $select clause. (optional)
     * @param timeout Sets the maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. (optional, default to 30)
     * @param clientRequestId Caller generated request identity, in the form of a GUID with no decoration such as curly braces e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. (optional)
     * @param returnClientRequestId Specifies if the server should return the client-request-id identifier in the response. (optional)
     * @param ocpDate The time the request was issued. If not specified, this header will be automatically populated with the current system clock time. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  * ETag - Gets the content of the ETag HTTP response header. <br>  * Last-Modified - Gets the content of the Last-Modified HTTP response header. <br>  * client-request-id - Gets the ClientRequestId provided by the client during the request, if present and requested to be returned. <br>  * request-id - Gets the value that uniquely identifies a request. <br>  </td></tr>
        <tr><td> 0 </td><td> Error from the Batch service </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call certificateGetAsync(String thumbprintAlgorithm, String thumbprint, String apiVersion, String $select, Integer timeout, String clientRequestId, Boolean returnClientRequestId, String ocpDate, final ApiCallback<Certificate> _callback) throws ApiException {

        okhttp3.Call localVarCall = certificateGetValidateBeforeCall(thumbprintAlgorithm, thumbprint, apiVersion, $select, timeout, clientRequestId, returnClientRequestId, ocpDate, _callback);
        Type localVarReturnType = new TypeToken<Certificate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for certificateList
     * @param apiVersion Client API Version. (required)
     * @param $filter Sets an OData $filter clause. (optional)
     * @param $select Sets an OData $select clause. (optional)
     * @param maxresults Sets the maximum number of items to return in the response. (optional)
     * @param timeout Sets the maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. (optional, default to 30)
     * @param clientRequestId Caller generated request identity, in the form of a GUID with no decoration such as curly braces e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. (optional)
     * @param returnClientRequestId Specifies if the server should return the client-request-id identifier in the response. (optional)
     * @param ocpDate The time the request was issued. If not specified, this header will be automatically populated with the current system clock time. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Gets the list of certificates. </td><td>  * ETag - Gets the content of the ETag HTTP response header. <br>  * Last-Modified - Gets the content of the Last-Modified HTTP response header. <br>  * client-request-id - Gets the ClientRequestId provided by the client during the request, if present and requested to be returned. <br>  * request-id - Gets the value that uniquely identifies a request. <br>  </td></tr>
        <tr><td> 0 </td><td> Error from the Batch service </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call certificateListCall(String apiVersion, String $filter, String $select, Integer maxresults, Integer timeout, String clientRequestId, Boolean returnClientRequestId, String ocpDate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/certificates";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        if ($select != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$select", $select));
        }

        if (maxresults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxresults", maxresults));
        }

        if (timeout != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeout", timeout));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (clientRequestId != null) {
            localVarHeaderParams.put("client-request-id", localVarApiClient.parameterToString(clientRequestId));
        }

        if (returnClientRequestId != null) {
            localVarHeaderParams.put("return-client-request-id", localVarApiClient.parameterToString(returnClientRequestId));
        }

        if (ocpDate != null) {
            localVarHeaderParams.put("ocp-date", localVarApiClient.parameterToString(ocpDate));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call certificateListValidateBeforeCall(String apiVersion, String $filter, String $select, Integer maxresults, Integer timeout, String clientRequestId, Boolean returnClientRequestId, String ocpDate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling certificateList(Async)");
        }

        return certificateListCall(apiVersion, $filter, $select, maxresults, timeout, clientRequestId, returnClientRequestId, ocpDate, _callback);

    }

    /**
     * 
     * Lists all of the certificates that have been added to the specified account.
     * @param apiVersion Client API Version. (required)
     * @param $filter Sets an OData $filter clause. (optional)
     * @param $select Sets an OData $select clause. (optional)
     * @param maxresults Sets the maximum number of items to return in the response. (optional)
     * @param timeout Sets the maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. (optional, default to 30)
     * @param clientRequestId Caller generated request identity, in the form of a GUID with no decoration such as curly braces e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. (optional)
     * @param returnClientRequestId Specifies if the server should return the client-request-id identifier in the response. (optional)
     * @param ocpDate The time the request was issued. If not specified, this header will be automatically populated with the current system clock time. (optional)
     * @return CertificateListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Gets the list of certificates. </td><td>  * ETag - Gets the content of the ETag HTTP response header. <br>  * Last-Modified - Gets the content of the Last-Modified HTTP response header. <br>  * client-request-id - Gets the ClientRequestId provided by the client during the request, if present and requested to be returned. <br>  * request-id - Gets the value that uniquely identifies a request. <br>  </td></tr>
        <tr><td> 0 </td><td> Error from the Batch service </td><td>  -  </td></tr>
     </table>
     */
    public CertificateListResult certificateList(String apiVersion, String $filter, String $select, Integer maxresults, Integer timeout, String clientRequestId, Boolean returnClientRequestId, String ocpDate) throws ApiException {
        ApiResponse<CertificateListResult> localVarResp = certificateListWithHttpInfo(apiVersion, $filter, $select, maxresults, timeout, clientRequestId, returnClientRequestId, ocpDate);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists all of the certificates that have been added to the specified account.
     * @param apiVersion Client API Version. (required)
     * @param $filter Sets an OData $filter clause. (optional)
     * @param $select Sets an OData $select clause. (optional)
     * @param maxresults Sets the maximum number of items to return in the response. (optional)
     * @param timeout Sets the maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. (optional, default to 30)
     * @param clientRequestId Caller generated request identity, in the form of a GUID with no decoration such as curly braces e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. (optional)
     * @param returnClientRequestId Specifies if the server should return the client-request-id identifier in the response. (optional)
     * @param ocpDate The time the request was issued. If not specified, this header will be automatically populated with the current system clock time. (optional)
     * @return ApiResponse&lt;CertificateListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Gets the list of certificates. </td><td>  * ETag - Gets the content of the ETag HTTP response header. <br>  * Last-Modified - Gets the content of the Last-Modified HTTP response header. <br>  * client-request-id - Gets the ClientRequestId provided by the client during the request, if present and requested to be returned. <br>  * request-id - Gets the value that uniquely identifies a request. <br>  </td></tr>
        <tr><td> 0 </td><td> Error from the Batch service </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CertificateListResult> certificateListWithHttpInfo(String apiVersion, String $filter, String $select, Integer maxresults, Integer timeout, String clientRequestId, Boolean returnClientRequestId, String ocpDate) throws ApiException {
        okhttp3.Call localVarCall = certificateListValidateBeforeCall(apiVersion, $filter, $select, maxresults, timeout, clientRequestId, returnClientRequestId, ocpDate, null);
        Type localVarReturnType = new TypeToken<CertificateListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists all of the certificates that have been added to the specified account.
     * @param apiVersion Client API Version. (required)
     * @param $filter Sets an OData $filter clause. (optional)
     * @param $select Sets an OData $select clause. (optional)
     * @param maxresults Sets the maximum number of items to return in the response. (optional)
     * @param timeout Sets the maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. (optional, default to 30)
     * @param clientRequestId Caller generated request identity, in the form of a GUID with no decoration such as curly braces e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0. (optional)
     * @param returnClientRequestId Specifies if the server should return the client-request-id identifier in the response. (optional)
     * @param ocpDate The time the request was issued. If not specified, this header will be automatically populated with the current system clock time. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Gets the list of certificates. </td><td>  * ETag - Gets the content of the ETag HTTP response header. <br>  * Last-Modified - Gets the content of the Last-Modified HTTP response header. <br>  * client-request-id - Gets the ClientRequestId provided by the client during the request, if present and requested to be returned. <br>  * request-id - Gets the value that uniquely identifies a request. <br>  </td></tr>
        <tr><td> 0 </td><td> Error from the Batch service </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call certificateListAsync(String apiVersion, String $filter, String $select, Integer maxresults, Integer timeout, String clientRequestId, Boolean returnClientRequestId, String ocpDate, final ApiCallback<CertificateListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = certificateListValidateBeforeCall(apiVersion, $filter, $select, maxresults, timeout, clientRequestId, returnClientRequestId, ocpDate, _callback);
        Type localVarReturnType = new TypeToken<CertificateListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
