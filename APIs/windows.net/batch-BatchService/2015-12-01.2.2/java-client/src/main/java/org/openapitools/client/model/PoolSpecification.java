/*
 * BatchService
 * A client for issuing REST requests to the Azure Batch service.
 *
 * The version of the OpenAPI document: 2015-12-01.2.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ApplicationPackageReference;
import org.openapitools.client.model.CertificateReference;
import org.openapitools.client.model.MetadataItem;
import org.openapitools.client.model.StartTask;
import org.openapitools.client.model.TaskSchedulingPolicy;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Specification for creating a new pool.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:58:37.228398-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PoolSpecification {
  public static final String SERIALIZED_NAME_APPLICATION_PACKAGE_REFERENCES = "applicationPackageReferences";
  @SerializedName(SERIALIZED_NAME_APPLICATION_PACKAGE_REFERENCES)
  private List<ApplicationPackageReference> applicationPackageReferences = new ArrayList<>();

  public static final String SERIALIZED_NAME_AUTO_SCALE_EVALUATION_INTERVAL = "autoScaleEvaluationInterval";
  @SerializedName(SERIALIZED_NAME_AUTO_SCALE_EVALUATION_INTERVAL)
  private String autoScaleEvaluationInterval;

  public static final String SERIALIZED_NAME_AUTO_SCALE_FORMULA = "autoScaleFormula";
  @SerializedName(SERIALIZED_NAME_AUTO_SCALE_FORMULA)
  private String autoScaleFormula;

  public static final String SERIALIZED_NAME_CERTIFICATE_REFERENCES = "certificateReferences";
  @SerializedName(SERIALIZED_NAME_CERTIFICATE_REFERENCES)
  private List<CertificateReference> certificateReferences = new ArrayList<>();

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_ENABLE_AUTO_SCALE = "enableAutoScale";
  @SerializedName(SERIALIZED_NAME_ENABLE_AUTO_SCALE)
  private Boolean enableAutoScale;

  public static final String SERIALIZED_NAME_ENABLE_INTER_NODE_COMMUNICATION = "enableInterNodeCommunication";
  @SerializedName(SERIALIZED_NAME_ENABLE_INTER_NODE_COMMUNICATION)
  private Boolean enableInterNodeCommunication;

  public static final String SERIALIZED_NAME_MAX_TASKS_PER_NODE = "maxTasksPerNode";
  @SerializedName(SERIALIZED_NAME_MAX_TASKS_PER_NODE)
  private Integer maxTasksPerNode;

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private List<MetadataItem> metadata = new ArrayList<>();

  public static final String SERIALIZED_NAME_OS_FAMILY = "osFamily";
  @SerializedName(SERIALIZED_NAME_OS_FAMILY)
  private String osFamily;

  public static final String SERIALIZED_NAME_RESIZE_TIMEOUT = "resizeTimeout";
  @SerializedName(SERIALIZED_NAME_RESIZE_TIMEOUT)
  private String resizeTimeout;

  public static final String SERIALIZED_NAME_START_TASK = "startTask";
  @SerializedName(SERIALIZED_NAME_START_TASK)
  private StartTask startTask;

  public static final String SERIALIZED_NAME_TARGET_DEDICATED = "targetDedicated";
  @SerializedName(SERIALIZED_NAME_TARGET_DEDICATED)
  private Integer targetDedicated;

  public static final String SERIALIZED_NAME_TARGET_O_S_VERSION = "targetOSVersion";
  @SerializedName(SERIALIZED_NAME_TARGET_O_S_VERSION)
  private String targetOSVersion;

  public static final String SERIALIZED_NAME_TASK_SCHEDULING_POLICY = "taskSchedulingPolicy";
  @SerializedName(SERIALIZED_NAME_TASK_SCHEDULING_POLICY)
  private TaskSchedulingPolicy taskSchedulingPolicy;

  public static final String SERIALIZED_NAME_VM_SIZE = "vmSize";
  @SerializedName(SERIALIZED_NAME_VM_SIZE)
  private String vmSize;

  public PoolSpecification() {
  }

  public PoolSpecification applicationPackageReferences(List<ApplicationPackageReference> applicationPackageReferences) {
    this.applicationPackageReferences = applicationPackageReferences;
    return this;
  }

  public PoolSpecification addApplicationPackageReferencesItem(ApplicationPackageReference applicationPackageReferencesItem) {
    if (this.applicationPackageReferences == null) {
      this.applicationPackageReferences = new ArrayList<>();
    }
    this.applicationPackageReferences.add(applicationPackageReferencesItem);
    return this;
  }

  /**
   * Gets or sets the list of application packages to be installed on each compute node in the pool.
   * @return applicationPackageReferences
   */
  @javax.annotation.Nullable
  public List<ApplicationPackageReference> getApplicationPackageReferences() {
    return applicationPackageReferences;
  }

  public void setApplicationPackageReferences(List<ApplicationPackageReference> applicationPackageReferences) {
    this.applicationPackageReferences = applicationPackageReferences;
  }


  public PoolSpecification autoScaleEvaluationInterval(String autoScaleEvaluationInterval) {
    this.autoScaleEvaluationInterval = autoScaleEvaluationInterval;
    return this;
  }

  /**
   * Gets or sets a time interval for the desired AutoScale evaluation period in the pool.
   * @return autoScaleEvaluationInterval
   */
  @javax.annotation.Nullable
  public String getAutoScaleEvaluationInterval() {
    return autoScaleEvaluationInterval;
  }

  public void setAutoScaleEvaluationInterval(String autoScaleEvaluationInterval) {
    this.autoScaleEvaluationInterval = autoScaleEvaluationInterval;
  }


  public PoolSpecification autoScaleFormula(String autoScaleFormula) {
    this.autoScaleFormula = autoScaleFormula;
    return this;
  }

  /**
   * Gets or sets the formula for the desired number of compute nodes in the pool.
   * @return autoScaleFormula
   */
  @javax.annotation.Nullable
  public String getAutoScaleFormula() {
    return autoScaleFormula;
  }

  public void setAutoScaleFormula(String autoScaleFormula) {
    this.autoScaleFormula = autoScaleFormula;
  }


  public PoolSpecification certificateReferences(List<CertificateReference> certificateReferences) {
    this.certificateReferences = certificateReferences;
    return this;
  }

  public PoolSpecification addCertificateReferencesItem(CertificateReference certificateReferencesItem) {
    if (this.certificateReferences == null) {
      this.certificateReferences = new ArrayList<>();
    }
    this.certificateReferences.add(certificateReferencesItem);
    return this;
  }

  /**
   * Gets or sets a list of certificates to be installed on each compute node in the pool.
   * @return certificateReferences
   */
  @javax.annotation.Nullable
  public List<CertificateReference> getCertificateReferences() {
    return certificateReferences;
  }

  public void setCertificateReferences(List<CertificateReference> certificateReferences) {
    this.certificateReferences = certificateReferences;
  }


  public PoolSpecification displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * Gets or sets the display name for the pool.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public PoolSpecification enableAutoScale(Boolean enableAutoScale) {
    this.enableAutoScale = enableAutoScale;
    return this;
  }

  /**
   * Gets or sets whether the pool size should automatically adjust over time.
   * @return enableAutoScale
   */
  @javax.annotation.Nullable
  public Boolean getEnableAutoScale() {
    return enableAutoScale;
  }

  public void setEnableAutoScale(Boolean enableAutoScale) {
    this.enableAutoScale = enableAutoScale;
  }


  public PoolSpecification enableInterNodeCommunication(Boolean enableInterNodeCommunication) {
    this.enableInterNodeCommunication = enableInterNodeCommunication;
    return this;
  }

  /**
   * Gets or sets whether the pool permits direct communication between nodes.
   * @return enableInterNodeCommunication
   */
  @javax.annotation.Nullable
  public Boolean getEnableInterNodeCommunication() {
    return enableInterNodeCommunication;
  }

  public void setEnableInterNodeCommunication(Boolean enableInterNodeCommunication) {
    this.enableInterNodeCommunication = enableInterNodeCommunication;
  }


  public PoolSpecification maxTasksPerNode(Integer maxTasksPerNode) {
    this.maxTasksPerNode = maxTasksPerNode;
    return this;
  }

  /**
   * Gets or sets the maximum number of tasks that can run concurrently on a single compute node in the pool.
   * @return maxTasksPerNode
   */
  @javax.annotation.Nullable
  public Integer getMaxTasksPerNode() {
    return maxTasksPerNode;
  }

  public void setMaxTasksPerNode(Integer maxTasksPerNode) {
    this.maxTasksPerNode = maxTasksPerNode;
  }


  public PoolSpecification metadata(List<MetadataItem> metadata) {
    this.metadata = metadata;
    return this;
  }

  public PoolSpecification addMetadataItem(MetadataItem metadataItem) {
    if (this.metadata == null) {
      this.metadata = new ArrayList<>();
    }
    this.metadata.add(metadataItem);
    return this;
  }

  /**
   * Gets or sets a list of name-value pairs associated with the pool as metadata.
   * @return metadata
   */
  @javax.annotation.Nullable
  public List<MetadataItem> getMetadata() {
    return metadata;
  }

  public void setMetadata(List<MetadataItem> metadata) {
    this.metadata = metadata;
  }


  public PoolSpecification osFamily(String osFamily) {
    this.osFamily = osFamily;
    return this;
  }

  /**
   * Gets or sets the Azure Guest OS family to be installed on the virtual machines in the pool.
   * @return osFamily
   */
  @javax.annotation.Nullable
  public String getOsFamily() {
    return osFamily;
  }

  public void setOsFamily(String osFamily) {
    this.osFamily = osFamily;
  }


  public PoolSpecification resizeTimeout(String resizeTimeout) {
    this.resizeTimeout = resizeTimeout;
    return this;
  }

  /**
   * Gets or sets the timeout for allocation of compute nodes to the pool.
   * @return resizeTimeout
   */
  @javax.annotation.Nullable
  public String getResizeTimeout() {
    return resizeTimeout;
  }

  public void setResizeTimeout(String resizeTimeout) {
    this.resizeTimeout = resizeTimeout;
  }


  public PoolSpecification startTask(StartTask startTask) {
    this.startTask = startTask;
    return this;
  }

  /**
   * Get startTask
   * @return startTask
   */
  @javax.annotation.Nullable
  public StartTask getStartTask() {
    return startTask;
  }

  public void setStartTask(StartTask startTask) {
    this.startTask = startTask;
  }


  public PoolSpecification targetDedicated(Integer targetDedicated) {
    this.targetDedicated = targetDedicated;
    return this;
  }

  /**
   * Gets or sets the desired number of compute nodes in the pool.
   * @return targetDedicated
   */
  @javax.annotation.Nullable
  public Integer getTargetDedicated() {
    return targetDedicated;
  }

  public void setTargetDedicated(Integer targetDedicated) {
    this.targetDedicated = targetDedicated;
  }


  public PoolSpecification targetOSVersion(String targetOSVersion) {
    this.targetOSVersion = targetOSVersion;
    return this;
  }

  /**
   * Gets or sets the Azure Guest OS version to be installed on the virtual machines in the pool.
   * @return targetOSVersion
   */
  @javax.annotation.Nullable
  public String getTargetOSVersion() {
    return targetOSVersion;
  }

  public void setTargetOSVersion(String targetOSVersion) {
    this.targetOSVersion = targetOSVersion;
  }


  public PoolSpecification taskSchedulingPolicy(TaskSchedulingPolicy taskSchedulingPolicy) {
    this.taskSchedulingPolicy = taskSchedulingPolicy;
    return this;
  }

  /**
   * Get taskSchedulingPolicy
   * @return taskSchedulingPolicy
   */
  @javax.annotation.Nullable
  public TaskSchedulingPolicy getTaskSchedulingPolicy() {
    return taskSchedulingPolicy;
  }

  public void setTaskSchedulingPolicy(TaskSchedulingPolicy taskSchedulingPolicy) {
    this.taskSchedulingPolicy = taskSchedulingPolicy;
  }


  public PoolSpecification vmSize(String vmSize) {
    this.vmSize = vmSize;
    return this;
  }

  /**
   * Gets or sets the size of the virtual machines in the pool. All VMs in a pool are the same size.
   * @return vmSize
   */
  @javax.annotation.Nullable
  public String getVmSize() {
    return vmSize;
  }

  public void setVmSize(String vmSize) {
    this.vmSize = vmSize;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PoolSpecification poolSpecification = (PoolSpecification) o;
    return Objects.equals(this.applicationPackageReferences, poolSpecification.applicationPackageReferences) &&
        Objects.equals(this.autoScaleEvaluationInterval, poolSpecification.autoScaleEvaluationInterval) &&
        Objects.equals(this.autoScaleFormula, poolSpecification.autoScaleFormula) &&
        Objects.equals(this.certificateReferences, poolSpecification.certificateReferences) &&
        Objects.equals(this.displayName, poolSpecification.displayName) &&
        Objects.equals(this.enableAutoScale, poolSpecification.enableAutoScale) &&
        Objects.equals(this.enableInterNodeCommunication, poolSpecification.enableInterNodeCommunication) &&
        Objects.equals(this.maxTasksPerNode, poolSpecification.maxTasksPerNode) &&
        Objects.equals(this.metadata, poolSpecification.metadata) &&
        Objects.equals(this.osFamily, poolSpecification.osFamily) &&
        Objects.equals(this.resizeTimeout, poolSpecification.resizeTimeout) &&
        Objects.equals(this.startTask, poolSpecification.startTask) &&
        Objects.equals(this.targetDedicated, poolSpecification.targetDedicated) &&
        Objects.equals(this.targetOSVersion, poolSpecification.targetOSVersion) &&
        Objects.equals(this.taskSchedulingPolicy, poolSpecification.taskSchedulingPolicy) &&
        Objects.equals(this.vmSize, poolSpecification.vmSize);
  }

  @Override
  public int hashCode() {
    return Objects.hash(applicationPackageReferences, autoScaleEvaluationInterval, autoScaleFormula, certificateReferences, displayName, enableAutoScale, enableInterNodeCommunication, maxTasksPerNode, metadata, osFamily, resizeTimeout, startTask, targetDedicated, targetOSVersion, taskSchedulingPolicy, vmSize);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PoolSpecification {\n");
    sb.append("    applicationPackageReferences: ").append(toIndentedString(applicationPackageReferences)).append("\n");
    sb.append("    autoScaleEvaluationInterval: ").append(toIndentedString(autoScaleEvaluationInterval)).append("\n");
    sb.append("    autoScaleFormula: ").append(toIndentedString(autoScaleFormula)).append("\n");
    sb.append("    certificateReferences: ").append(toIndentedString(certificateReferences)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    enableAutoScale: ").append(toIndentedString(enableAutoScale)).append("\n");
    sb.append("    enableInterNodeCommunication: ").append(toIndentedString(enableInterNodeCommunication)).append("\n");
    sb.append("    maxTasksPerNode: ").append(toIndentedString(maxTasksPerNode)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    osFamily: ").append(toIndentedString(osFamily)).append("\n");
    sb.append("    resizeTimeout: ").append(toIndentedString(resizeTimeout)).append("\n");
    sb.append("    startTask: ").append(toIndentedString(startTask)).append("\n");
    sb.append("    targetDedicated: ").append(toIndentedString(targetDedicated)).append("\n");
    sb.append("    targetOSVersion: ").append(toIndentedString(targetOSVersion)).append("\n");
    sb.append("    taskSchedulingPolicy: ").append(toIndentedString(taskSchedulingPolicy)).append("\n");
    sb.append("    vmSize: ").append(toIndentedString(vmSize)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("applicationPackageReferences");
    openapiFields.add("autoScaleEvaluationInterval");
    openapiFields.add("autoScaleFormula");
    openapiFields.add("certificateReferences");
    openapiFields.add("displayName");
    openapiFields.add("enableAutoScale");
    openapiFields.add("enableInterNodeCommunication");
    openapiFields.add("maxTasksPerNode");
    openapiFields.add("metadata");
    openapiFields.add("osFamily");
    openapiFields.add("resizeTimeout");
    openapiFields.add("startTask");
    openapiFields.add("targetDedicated");
    openapiFields.add("targetOSVersion");
    openapiFields.add("taskSchedulingPolicy");
    openapiFields.add("vmSize");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PoolSpecification
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PoolSpecification.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PoolSpecification is not found in the empty JSON string", PoolSpecification.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PoolSpecification.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PoolSpecification` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("applicationPackageReferences") != null && !jsonObj.get("applicationPackageReferences").isJsonNull()) {
        JsonArray jsonArrayapplicationPackageReferences = jsonObj.getAsJsonArray("applicationPackageReferences");
        if (jsonArrayapplicationPackageReferences != null) {
          // ensure the json data is an array
          if (!jsonObj.get("applicationPackageReferences").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `applicationPackageReferences` to be an array in the JSON string but got `%s`", jsonObj.get("applicationPackageReferences").toString()));
          }

          // validate the optional field `applicationPackageReferences` (array)
          for (int i = 0; i < jsonArrayapplicationPackageReferences.size(); i++) {
            ApplicationPackageReference.validateJsonElement(jsonArrayapplicationPackageReferences.get(i));
          };
        }
      }
      if ((jsonObj.get("autoScaleEvaluationInterval") != null && !jsonObj.get("autoScaleEvaluationInterval").isJsonNull()) && !jsonObj.get("autoScaleEvaluationInterval").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `autoScaleEvaluationInterval` to be a primitive type in the JSON string but got `%s`", jsonObj.get("autoScaleEvaluationInterval").toString()));
      }
      if ((jsonObj.get("autoScaleFormula") != null && !jsonObj.get("autoScaleFormula").isJsonNull()) && !jsonObj.get("autoScaleFormula").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `autoScaleFormula` to be a primitive type in the JSON string but got `%s`", jsonObj.get("autoScaleFormula").toString()));
      }
      if (jsonObj.get("certificateReferences") != null && !jsonObj.get("certificateReferences").isJsonNull()) {
        JsonArray jsonArraycertificateReferences = jsonObj.getAsJsonArray("certificateReferences");
        if (jsonArraycertificateReferences != null) {
          // ensure the json data is an array
          if (!jsonObj.get("certificateReferences").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `certificateReferences` to be an array in the JSON string but got `%s`", jsonObj.get("certificateReferences").toString()));
          }

          // validate the optional field `certificateReferences` (array)
          for (int i = 0; i < jsonArraycertificateReferences.size(); i++) {
            CertificateReference.validateJsonElement(jsonArraycertificateReferences.get(i));
          };
        }
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if (jsonObj.get("metadata") != null && !jsonObj.get("metadata").isJsonNull()) {
        JsonArray jsonArraymetadata = jsonObj.getAsJsonArray("metadata");
        if (jsonArraymetadata != null) {
          // ensure the json data is an array
          if (!jsonObj.get("metadata").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `metadata` to be an array in the JSON string but got `%s`", jsonObj.get("metadata").toString()));
          }

          // validate the optional field `metadata` (array)
          for (int i = 0; i < jsonArraymetadata.size(); i++) {
            MetadataItem.validateJsonElement(jsonArraymetadata.get(i));
          };
        }
      }
      if ((jsonObj.get("osFamily") != null && !jsonObj.get("osFamily").isJsonNull()) && !jsonObj.get("osFamily").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `osFamily` to be a primitive type in the JSON string but got `%s`", jsonObj.get("osFamily").toString()));
      }
      if ((jsonObj.get("resizeTimeout") != null && !jsonObj.get("resizeTimeout").isJsonNull()) && !jsonObj.get("resizeTimeout").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resizeTimeout` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resizeTimeout").toString()));
      }
      // validate the optional field `startTask`
      if (jsonObj.get("startTask") != null && !jsonObj.get("startTask").isJsonNull()) {
        StartTask.validateJsonElement(jsonObj.get("startTask"));
      }
      if ((jsonObj.get("targetOSVersion") != null && !jsonObj.get("targetOSVersion").isJsonNull()) && !jsonObj.get("targetOSVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `targetOSVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("targetOSVersion").toString()));
      }
      // validate the optional field `taskSchedulingPolicy`
      if (jsonObj.get("taskSchedulingPolicy") != null && !jsonObj.get("taskSchedulingPolicy").isJsonNull()) {
        TaskSchedulingPolicy.validateJsonElement(jsonObj.get("taskSchedulingPolicy"));
      }
      if ((jsonObj.get("vmSize") != null && !jsonObj.get("vmSize").isJsonNull()) && !jsonObj.get("vmSize").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vmSize` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vmSize").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PoolSpecification.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PoolSpecification' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PoolSpecification> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PoolSpecification.class));

       return (TypeAdapter<T>) new TypeAdapter<PoolSpecification>() {
           @Override
           public void write(JsonWriter out, PoolSpecification value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PoolSpecification read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PoolSpecification given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PoolSpecification
   * @throws IOException if the JSON string is invalid with respect to PoolSpecification
   */
  public static PoolSpecification fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PoolSpecification.class);
  }

  /**
   * Convert an instance of PoolSpecification to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

