/*
 * BatchService
 * A client for issuing REST requests to the Azure Batch service.
 *
 * The version of the OpenAPI document: 2015-12-01.2.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Usage metrics for a pool across an aggregation interval.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:58:37.228398-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PoolUsageMetrics {
  public static final String SERIALIZED_NAME_DATA_EGRESS_GI_B = "dataEgressGiB";
  @SerializedName(SERIALIZED_NAME_DATA_EGRESS_GI_B)
  private Double dataEgressGiB;

  public static final String SERIALIZED_NAME_DATA_INGRESS_GI_B = "dataIngressGiB";
  @SerializedName(SERIALIZED_NAME_DATA_INGRESS_GI_B)
  private Double dataIngressGiB;

  public static final String SERIALIZED_NAME_END_TIME = "endTime";
  @SerializedName(SERIALIZED_NAME_END_TIME)
  private OffsetDateTime endTime;

  public static final String SERIALIZED_NAME_POOL_ID = "poolId";
  @SerializedName(SERIALIZED_NAME_POOL_ID)
  private String poolId;

  public static final String SERIALIZED_NAME_START_TIME = "startTime";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private OffsetDateTime startTime;

  public static final String SERIALIZED_NAME_TOTAL_CORE_HOURS = "totalCoreHours";
  @SerializedName(SERIALIZED_NAME_TOTAL_CORE_HOURS)
  private Double totalCoreHours;

  public static final String SERIALIZED_NAME_VM_SIZE = "vmSize";
  @SerializedName(SERIALIZED_NAME_VM_SIZE)
  private String vmSize;

  public PoolUsageMetrics() {
  }

  public PoolUsageMetrics dataEgressGiB(Double dataEgressGiB) {
    this.dataEgressGiB = dataEgressGiB;
    return this;
  }

  /**
   * Gets or sets the cross data center network egress in GiB from the pool during this interval.
   * @return dataEgressGiB
   */
  @javax.annotation.Nonnull
  public Double getDataEgressGiB() {
    return dataEgressGiB;
  }

  public void setDataEgressGiB(Double dataEgressGiB) {
    this.dataEgressGiB = dataEgressGiB;
  }


  public PoolUsageMetrics dataIngressGiB(Double dataIngressGiB) {
    this.dataIngressGiB = dataIngressGiB;
    return this;
  }

  /**
   * Gets or sets the cross data center network ingress in GiB to the pool during this interval.
   * @return dataIngressGiB
   */
  @javax.annotation.Nonnull
  public Double getDataIngressGiB() {
    return dataIngressGiB;
  }

  public void setDataIngressGiB(Double dataIngressGiB) {
    this.dataIngressGiB = dataIngressGiB;
  }


  public PoolUsageMetrics endTime(OffsetDateTime endTime) {
    this.endTime = endTime;
    return this;
  }

  /**
   * Gets or sets the end time of the aggregation interval.
   * @return endTime
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getEndTime() {
    return endTime;
  }

  public void setEndTime(OffsetDateTime endTime) {
    this.endTime = endTime;
  }


  public PoolUsageMetrics poolId(String poolId) {
    this.poolId = poolId;
    return this;
  }

  /**
   * Gets or sets the id of the pool whose metrics are being aggregated.
   * @return poolId
   */
  @javax.annotation.Nonnull
  public String getPoolId() {
    return poolId;
  }

  public void setPoolId(String poolId) {
    this.poolId = poolId;
  }


  public PoolUsageMetrics startTime(OffsetDateTime startTime) {
    this.startTime = startTime;
    return this;
  }

  /**
   * Gets or sets the start time of the aggregation interval.
   * @return startTime
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getStartTime() {
    return startTime;
  }

  public void setStartTime(OffsetDateTime startTime) {
    this.startTime = startTime;
  }


  public PoolUsageMetrics totalCoreHours(Double totalCoreHours) {
    this.totalCoreHours = totalCoreHours;
    return this;
  }

  /**
   * Gets or sets the total core hours used in the pool during this aggregation interval.
   * @return totalCoreHours
   */
  @javax.annotation.Nonnull
  public Double getTotalCoreHours() {
    return totalCoreHours;
  }

  public void setTotalCoreHours(Double totalCoreHours) {
    this.totalCoreHours = totalCoreHours;
  }


  public PoolUsageMetrics vmSize(String vmSize) {
    this.vmSize = vmSize;
    return this;
  }

  /**
   * Gets or sets the size of virtual machines in the pool.  All VMs in a pool are the same size.
   * @return vmSize
   */
  @javax.annotation.Nonnull
  public String getVmSize() {
    return vmSize;
  }

  public void setVmSize(String vmSize) {
    this.vmSize = vmSize;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PoolUsageMetrics poolUsageMetrics = (PoolUsageMetrics) o;
    return Objects.equals(this.dataEgressGiB, poolUsageMetrics.dataEgressGiB) &&
        Objects.equals(this.dataIngressGiB, poolUsageMetrics.dataIngressGiB) &&
        Objects.equals(this.endTime, poolUsageMetrics.endTime) &&
        Objects.equals(this.poolId, poolUsageMetrics.poolId) &&
        Objects.equals(this.startTime, poolUsageMetrics.startTime) &&
        Objects.equals(this.totalCoreHours, poolUsageMetrics.totalCoreHours) &&
        Objects.equals(this.vmSize, poolUsageMetrics.vmSize);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dataEgressGiB, dataIngressGiB, endTime, poolId, startTime, totalCoreHours, vmSize);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PoolUsageMetrics {\n");
    sb.append("    dataEgressGiB: ").append(toIndentedString(dataEgressGiB)).append("\n");
    sb.append("    dataIngressGiB: ").append(toIndentedString(dataIngressGiB)).append("\n");
    sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
    sb.append("    poolId: ").append(toIndentedString(poolId)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    totalCoreHours: ").append(toIndentedString(totalCoreHours)).append("\n");
    sb.append("    vmSize: ").append(toIndentedString(vmSize)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dataEgressGiB");
    openapiFields.add("dataIngressGiB");
    openapiFields.add("endTime");
    openapiFields.add("poolId");
    openapiFields.add("startTime");
    openapiFields.add("totalCoreHours");
    openapiFields.add("vmSize");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("dataEgressGiB");
    openapiRequiredFields.add("dataIngressGiB");
    openapiRequiredFields.add("endTime");
    openapiRequiredFields.add("poolId");
    openapiRequiredFields.add("startTime");
    openapiRequiredFields.add("totalCoreHours");
    openapiRequiredFields.add("vmSize");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PoolUsageMetrics
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PoolUsageMetrics.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PoolUsageMetrics is not found in the empty JSON string", PoolUsageMetrics.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PoolUsageMetrics.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PoolUsageMetrics` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PoolUsageMetrics.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("poolId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `poolId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("poolId").toString()));
      }
      if (!jsonObj.get("vmSize").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vmSize` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vmSize").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PoolUsageMetrics.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PoolUsageMetrics' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PoolUsageMetrics> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PoolUsageMetrics.class));

       return (TypeAdapter<T>) new TypeAdapter<PoolUsageMetrics>() {
           @Override
           public void write(JsonWriter out, PoolUsageMetrics value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PoolUsageMetrics read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PoolUsageMetrics given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PoolUsageMetrics
   * @throws IOException if the JSON string is invalid with respect to PoolUsageMetrics
   */
  public static PoolUsageMetrics fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PoolUsageMetrics.class);
  }

  /**
   * Convert an instance of PoolUsageMetrics to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

