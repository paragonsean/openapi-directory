/*
 * BatchService
 * A client for issuing REST requests to the Azure Batch service.
 *
 * The version of the OpenAPI document: 2015-12-01.2.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.EnvironmentSetting;
import org.openapitools.client.model.ResourceFile;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A Job Release task to run on job completion on any compute node where the job has run.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:58:37.228398-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class JobReleaseTask {
  public static final String SERIALIZED_NAME_COMMAND_LINE = "commandLine";
  @SerializedName(SERIALIZED_NAME_COMMAND_LINE)
  private String commandLine;

  public static final String SERIALIZED_NAME_ENVIRONMENT_SETTINGS = "environmentSettings";
  @SerializedName(SERIALIZED_NAME_ENVIRONMENT_SETTINGS)
  private List<EnvironmentSetting> environmentSettings = new ArrayList<>();

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_MAX_WALL_CLOCK_TIME = "maxWallClockTime";
  @SerializedName(SERIALIZED_NAME_MAX_WALL_CLOCK_TIME)
  private String maxWallClockTime;

  public static final String SERIALIZED_NAME_RESOURCE_FILES = "resourceFiles";
  @SerializedName(SERIALIZED_NAME_RESOURCE_FILES)
  private List<ResourceFile> resourceFiles = new ArrayList<>();

  public static final String SERIALIZED_NAME_RETENTION_TIME = "retentionTime";
  @SerializedName(SERIALIZED_NAME_RETENTION_TIME)
  private String retentionTime;

  public static final String SERIALIZED_NAME_RUN_ELEVATED = "runElevated";
  @SerializedName(SERIALIZED_NAME_RUN_ELEVATED)
  private Boolean runElevated;

  public JobReleaseTask() {
  }

  public JobReleaseTask commandLine(String commandLine) {
    this.commandLine = commandLine;
    return this;
  }

  /**
   * Gets or sets the command line of the Job Release task.
   * @return commandLine
   */
  @javax.annotation.Nullable
  public String getCommandLine() {
    return commandLine;
  }

  public void setCommandLine(String commandLine) {
    this.commandLine = commandLine;
  }


  public JobReleaseTask environmentSettings(List<EnvironmentSetting> environmentSettings) {
    this.environmentSettings = environmentSettings;
    return this;
  }

  public JobReleaseTask addEnvironmentSettingsItem(EnvironmentSetting environmentSettingsItem) {
    if (this.environmentSettings == null) {
      this.environmentSettings = new ArrayList<>();
    }
    this.environmentSettings.add(environmentSettingsItem);
    return this;
  }

  /**
   * Gets or sets a list of environment variable settings for the Job Release task.
   * @return environmentSettings
   */
  @javax.annotation.Nullable
  public List<EnvironmentSetting> getEnvironmentSettings() {
    return environmentSettings;
  }

  public void setEnvironmentSettings(List<EnvironmentSetting> environmentSettings) {
    this.environmentSettings = environmentSettings;
  }


  public JobReleaseTask id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Gets or sets a string that uniquely identifies the Job Release task within the job. The id can contain any combination of alphanumeric characters including hyphens and underscores and cannot contain more than 64 characters.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public JobReleaseTask maxWallClockTime(String maxWallClockTime) {
    this.maxWallClockTime = maxWallClockTime;
    return this;
  }

  /**
   * Gets or sets the maximum elapsed time that the Job Release task may run on a given compute node, measured from the time the task starts. If the task does not complete within the time limit, the Batch service terminates it. The default value is 15 minutes.
   * @return maxWallClockTime
   */
  @javax.annotation.Nullable
  public String getMaxWallClockTime() {
    return maxWallClockTime;
  }

  public void setMaxWallClockTime(String maxWallClockTime) {
    this.maxWallClockTime = maxWallClockTime;
  }


  public JobReleaseTask resourceFiles(List<ResourceFile> resourceFiles) {
    this.resourceFiles = resourceFiles;
    return this;
  }

  public JobReleaseTask addResourceFilesItem(ResourceFile resourceFilesItem) {
    if (this.resourceFiles == null) {
      this.resourceFiles = new ArrayList<>();
    }
    this.resourceFiles.add(resourceFilesItem);
    return this;
  }

  /**
   * Gets or sets a list of files that Batch will download to the compute node before running the command line.
   * @return resourceFiles
   */
  @javax.annotation.Nullable
  public List<ResourceFile> getResourceFiles() {
    return resourceFiles;
  }

  public void setResourceFiles(List<ResourceFile> resourceFiles) {
    this.resourceFiles = resourceFiles;
  }


  public JobReleaseTask retentionTime(String retentionTime) {
    this.retentionTime = retentionTime;
    return this;
  }

  /**
   * Gets or sets the minimum time to retain the working directory for the Job Release task on the compute node.  After this time, the Batch service may delete the working directory and all its contents. The default is infinite.
   * @return retentionTime
   */
  @javax.annotation.Nullable
  public String getRetentionTime() {
    return retentionTime;
  }

  public void setRetentionTime(String retentionTime) {
    this.retentionTime = retentionTime;
  }


  public JobReleaseTask runElevated(Boolean runElevated) {
    this.runElevated = runElevated;
    return this;
  }

  /**
   * Gets or sets whether to run the Job Release task in elevated mode. The default value is false.
   * @return runElevated
   */
  @javax.annotation.Nullable
  public Boolean getRunElevated() {
    return runElevated;
  }

  public void setRunElevated(Boolean runElevated) {
    this.runElevated = runElevated;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    JobReleaseTask jobReleaseTask = (JobReleaseTask) o;
    return Objects.equals(this.commandLine, jobReleaseTask.commandLine) &&
        Objects.equals(this.environmentSettings, jobReleaseTask.environmentSettings) &&
        Objects.equals(this.id, jobReleaseTask.id) &&
        Objects.equals(this.maxWallClockTime, jobReleaseTask.maxWallClockTime) &&
        Objects.equals(this.resourceFiles, jobReleaseTask.resourceFiles) &&
        Objects.equals(this.retentionTime, jobReleaseTask.retentionTime) &&
        Objects.equals(this.runElevated, jobReleaseTask.runElevated);
  }

  @Override
  public int hashCode() {
    return Objects.hash(commandLine, environmentSettings, id, maxWallClockTime, resourceFiles, retentionTime, runElevated);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class JobReleaseTask {\n");
    sb.append("    commandLine: ").append(toIndentedString(commandLine)).append("\n");
    sb.append("    environmentSettings: ").append(toIndentedString(environmentSettings)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    maxWallClockTime: ").append(toIndentedString(maxWallClockTime)).append("\n");
    sb.append("    resourceFiles: ").append(toIndentedString(resourceFiles)).append("\n");
    sb.append("    retentionTime: ").append(toIndentedString(retentionTime)).append("\n");
    sb.append("    runElevated: ").append(toIndentedString(runElevated)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("commandLine");
    openapiFields.add("environmentSettings");
    openapiFields.add("id");
    openapiFields.add("maxWallClockTime");
    openapiFields.add("resourceFiles");
    openapiFields.add("retentionTime");
    openapiFields.add("runElevated");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to JobReleaseTask
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!JobReleaseTask.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in JobReleaseTask is not found in the empty JSON string", JobReleaseTask.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!JobReleaseTask.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `JobReleaseTask` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("commandLine") != null && !jsonObj.get("commandLine").isJsonNull()) && !jsonObj.get("commandLine").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `commandLine` to be a primitive type in the JSON string but got `%s`", jsonObj.get("commandLine").toString()));
      }
      if (jsonObj.get("environmentSettings") != null && !jsonObj.get("environmentSettings").isJsonNull()) {
        JsonArray jsonArrayenvironmentSettings = jsonObj.getAsJsonArray("environmentSettings");
        if (jsonArrayenvironmentSettings != null) {
          // ensure the json data is an array
          if (!jsonObj.get("environmentSettings").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `environmentSettings` to be an array in the JSON string but got `%s`", jsonObj.get("environmentSettings").toString()));
          }

          // validate the optional field `environmentSettings` (array)
          for (int i = 0; i < jsonArrayenvironmentSettings.size(); i++) {
            EnvironmentSetting.validateJsonElement(jsonArrayenvironmentSettings.get(i));
          };
        }
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("maxWallClockTime") != null && !jsonObj.get("maxWallClockTime").isJsonNull()) && !jsonObj.get("maxWallClockTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `maxWallClockTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("maxWallClockTime").toString()));
      }
      if (jsonObj.get("resourceFiles") != null && !jsonObj.get("resourceFiles").isJsonNull()) {
        JsonArray jsonArrayresourceFiles = jsonObj.getAsJsonArray("resourceFiles");
        if (jsonArrayresourceFiles != null) {
          // ensure the json data is an array
          if (!jsonObj.get("resourceFiles").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `resourceFiles` to be an array in the JSON string but got `%s`", jsonObj.get("resourceFiles").toString()));
          }

          // validate the optional field `resourceFiles` (array)
          for (int i = 0; i < jsonArrayresourceFiles.size(); i++) {
            ResourceFile.validateJsonElement(jsonArrayresourceFiles.get(i));
          };
        }
      }
      if ((jsonObj.get("retentionTime") != null && !jsonObj.get("retentionTime").isJsonNull()) && !jsonObj.get("retentionTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `retentionTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("retentionTime").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!JobReleaseTask.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'JobReleaseTask' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<JobReleaseTask> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(JobReleaseTask.class));

       return (TypeAdapter<T>) new TypeAdapter<JobReleaseTask>() {
           @Override
           public void write(JsonWriter out, JobReleaseTask value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public JobReleaseTask read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of JobReleaseTask given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of JobReleaseTask
   * @throws IOException if the JSON string is invalid with respect to JobReleaseTask
   */
  public static JobReleaseTask fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, JobReleaseTask.class);
  }

  /**
   * Convert an instance of JobReleaseTask to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

