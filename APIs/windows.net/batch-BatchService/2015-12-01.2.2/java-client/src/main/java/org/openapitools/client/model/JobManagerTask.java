/*
 * BatchService
 * A client for issuing REST requests to the Azure Batch service.
 *
 * The version of the OpenAPI document: 2015-12-01.2.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.EnvironmentSetting;
import org.openapitools.client.model.ResourceFile;
import org.openapitools.client.model.TaskConstraints;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Specifies details of a Job Manager task.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:58:37.228398-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class JobManagerTask {
  public static final String SERIALIZED_NAME_COMMAND_LINE = "commandLine";
  @SerializedName(SERIALIZED_NAME_COMMAND_LINE)
  private String commandLine;

  public static final String SERIALIZED_NAME_CONSTRAINTS = "constraints";
  @SerializedName(SERIALIZED_NAME_CONSTRAINTS)
  private TaskConstraints constraints;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_ENVIRONMENT_SETTINGS = "environmentSettings";
  @SerializedName(SERIALIZED_NAME_ENVIRONMENT_SETTINGS)
  private List<EnvironmentSetting> environmentSettings = new ArrayList<>();

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_KILL_JOB_ON_COMPLETION = "killJobOnCompletion";
  @SerializedName(SERIALIZED_NAME_KILL_JOB_ON_COMPLETION)
  private Boolean killJobOnCompletion;

  public static final String SERIALIZED_NAME_RESOURCE_FILES = "resourceFiles";
  @SerializedName(SERIALIZED_NAME_RESOURCE_FILES)
  private List<ResourceFile> resourceFiles = new ArrayList<>();

  public static final String SERIALIZED_NAME_RUN_ELEVATED = "runElevated";
  @SerializedName(SERIALIZED_NAME_RUN_ELEVATED)
  private Boolean runElevated;

  public static final String SERIALIZED_NAME_RUN_EXCLUSIVE = "runExclusive";
  @SerializedName(SERIALIZED_NAME_RUN_EXCLUSIVE)
  private Boolean runExclusive;

  public JobManagerTask() {
  }

  public JobManagerTask commandLine(String commandLine) {
    this.commandLine = commandLine;
    return this;
  }

  /**
   * Gets or sets the command line of the Job Manager task.
   * @return commandLine
   */
  @javax.annotation.Nullable
  public String getCommandLine() {
    return commandLine;
  }

  public void setCommandLine(String commandLine) {
    this.commandLine = commandLine;
  }


  public JobManagerTask constraints(TaskConstraints constraints) {
    this.constraints = constraints;
    return this;
  }

  /**
   * Get constraints
   * @return constraints
   */
  @javax.annotation.Nullable
  public TaskConstraints getConstraints() {
    return constraints;
  }

  public void setConstraints(TaskConstraints constraints) {
    this.constraints = constraints;
  }


  public JobManagerTask displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * Gets or sets the display name of the Job Manager task.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public JobManagerTask environmentSettings(List<EnvironmentSetting> environmentSettings) {
    this.environmentSettings = environmentSettings;
    return this;
  }

  public JobManagerTask addEnvironmentSettingsItem(EnvironmentSetting environmentSettingsItem) {
    if (this.environmentSettings == null) {
      this.environmentSettings = new ArrayList<>();
    }
    this.environmentSettings.add(environmentSettingsItem);
    return this;
  }

  /**
   * Gets or sets a list of environment variable settings for the Job Manager task.
   * @return environmentSettings
   */
  @javax.annotation.Nullable
  public List<EnvironmentSetting> getEnvironmentSettings() {
    return environmentSettings;
  }

  public void setEnvironmentSettings(List<EnvironmentSetting> environmentSettings) {
    this.environmentSettings = environmentSettings;
  }


  public JobManagerTask id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Gets or sets a string that uniquely identifies the Job Manager task. A GUID is recommended.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public JobManagerTask killJobOnCompletion(Boolean killJobOnCompletion) {
    this.killJobOnCompletion = killJobOnCompletion;
    return this;
  }

  /**
   * Gets or sets whether completion of the Job Manager task signifies completion of the entire job.
   * @return killJobOnCompletion
   */
  @javax.annotation.Nullable
  public Boolean getKillJobOnCompletion() {
    return killJobOnCompletion;
  }

  public void setKillJobOnCompletion(Boolean killJobOnCompletion) {
    this.killJobOnCompletion = killJobOnCompletion;
  }


  public JobManagerTask resourceFiles(List<ResourceFile> resourceFiles) {
    this.resourceFiles = resourceFiles;
    return this;
  }

  public JobManagerTask addResourceFilesItem(ResourceFile resourceFilesItem) {
    if (this.resourceFiles == null) {
      this.resourceFiles = new ArrayList<>();
    }
    this.resourceFiles.add(resourceFilesItem);
    return this;
  }

  /**
   * Gets or sets a list of files that Batch will download to the compute node before running the command line.
   * @return resourceFiles
   */
  @javax.annotation.Nullable
  public List<ResourceFile> getResourceFiles() {
    return resourceFiles;
  }

  public void setResourceFiles(List<ResourceFile> resourceFiles) {
    this.resourceFiles = resourceFiles;
  }


  public JobManagerTask runElevated(Boolean runElevated) {
    this.runElevated = runElevated;
    return this;
  }

  /**
   * Gets or sets whether to run the Job Manager task in elevated mode. The default value is false.
   * @return runElevated
   */
  @javax.annotation.Nullable
  public Boolean getRunElevated() {
    return runElevated;
  }

  public void setRunElevated(Boolean runElevated) {
    this.runElevated = runElevated;
  }


  public JobManagerTask runExclusive(Boolean runExclusive) {
    this.runExclusive = runExclusive;
    return this;
  }

  /**
   * Gets or sets whether the Job Manager task requires exclusive use of the compute node where it runs.
   * @return runExclusive
   */
  @javax.annotation.Nullable
  public Boolean getRunExclusive() {
    return runExclusive;
  }

  public void setRunExclusive(Boolean runExclusive) {
    this.runExclusive = runExclusive;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    JobManagerTask jobManagerTask = (JobManagerTask) o;
    return Objects.equals(this.commandLine, jobManagerTask.commandLine) &&
        Objects.equals(this.constraints, jobManagerTask.constraints) &&
        Objects.equals(this.displayName, jobManagerTask.displayName) &&
        Objects.equals(this.environmentSettings, jobManagerTask.environmentSettings) &&
        Objects.equals(this.id, jobManagerTask.id) &&
        Objects.equals(this.killJobOnCompletion, jobManagerTask.killJobOnCompletion) &&
        Objects.equals(this.resourceFiles, jobManagerTask.resourceFiles) &&
        Objects.equals(this.runElevated, jobManagerTask.runElevated) &&
        Objects.equals(this.runExclusive, jobManagerTask.runExclusive);
  }

  @Override
  public int hashCode() {
    return Objects.hash(commandLine, constraints, displayName, environmentSettings, id, killJobOnCompletion, resourceFiles, runElevated, runExclusive);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class JobManagerTask {\n");
    sb.append("    commandLine: ").append(toIndentedString(commandLine)).append("\n");
    sb.append("    constraints: ").append(toIndentedString(constraints)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    environmentSettings: ").append(toIndentedString(environmentSettings)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    killJobOnCompletion: ").append(toIndentedString(killJobOnCompletion)).append("\n");
    sb.append("    resourceFiles: ").append(toIndentedString(resourceFiles)).append("\n");
    sb.append("    runElevated: ").append(toIndentedString(runElevated)).append("\n");
    sb.append("    runExclusive: ").append(toIndentedString(runExclusive)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("commandLine");
    openapiFields.add("constraints");
    openapiFields.add("displayName");
    openapiFields.add("environmentSettings");
    openapiFields.add("id");
    openapiFields.add("killJobOnCompletion");
    openapiFields.add("resourceFiles");
    openapiFields.add("runElevated");
    openapiFields.add("runExclusive");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to JobManagerTask
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!JobManagerTask.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in JobManagerTask is not found in the empty JSON string", JobManagerTask.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!JobManagerTask.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `JobManagerTask` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("commandLine") != null && !jsonObj.get("commandLine").isJsonNull()) && !jsonObj.get("commandLine").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `commandLine` to be a primitive type in the JSON string but got `%s`", jsonObj.get("commandLine").toString()));
      }
      // validate the optional field `constraints`
      if (jsonObj.get("constraints") != null && !jsonObj.get("constraints").isJsonNull()) {
        TaskConstraints.validateJsonElement(jsonObj.get("constraints"));
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if (jsonObj.get("environmentSettings") != null && !jsonObj.get("environmentSettings").isJsonNull()) {
        JsonArray jsonArrayenvironmentSettings = jsonObj.getAsJsonArray("environmentSettings");
        if (jsonArrayenvironmentSettings != null) {
          // ensure the json data is an array
          if (!jsonObj.get("environmentSettings").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `environmentSettings` to be an array in the JSON string but got `%s`", jsonObj.get("environmentSettings").toString()));
          }

          // validate the optional field `environmentSettings` (array)
          for (int i = 0; i < jsonArrayenvironmentSettings.size(); i++) {
            EnvironmentSetting.validateJsonElement(jsonArrayenvironmentSettings.get(i));
          };
        }
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (jsonObj.get("resourceFiles") != null && !jsonObj.get("resourceFiles").isJsonNull()) {
        JsonArray jsonArrayresourceFiles = jsonObj.getAsJsonArray("resourceFiles");
        if (jsonArrayresourceFiles != null) {
          // ensure the json data is an array
          if (!jsonObj.get("resourceFiles").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `resourceFiles` to be an array in the JSON string but got `%s`", jsonObj.get("resourceFiles").toString()));
          }

          // validate the optional field `resourceFiles` (array)
          for (int i = 0; i < jsonArrayresourceFiles.size(); i++) {
            ResourceFile.validateJsonElement(jsonArrayresourceFiles.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!JobManagerTask.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'JobManagerTask' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<JobManagerTask> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(JobManagerTask.class));

       return (TypeAdapter<T>) new TypeAdapter<JobManagerTask>() {
           @Override
           public void write(JsonWriter out, JobManagerTask value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public JobManagerTask read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of JobManagerTask given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of JobManagerTask
   * @throws IOException if the JSON string is invalid with respect to JobManagerTask
   */
  public static JobManagerTask fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, JobManagerTask.class);
  }

  /**
   * Convert an instance of JobManagerTask to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

