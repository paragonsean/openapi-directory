/*
 * setlist.fm API
 * <p> The setlist.fm API has been designed to give you easy access to setlist data in order to build fancy websites and other applications. Before starting to use the API, be sure to ... <ol> <li>... understand how setlist.fm works (the <a href=\"https://www.setlist.fm/faq\">FAQ</a> and the <a href=\"https://www.setlist.fm/guidelines\">Guidelines</a> are a good starting point),</li> <li>... read this documentation carefully and</li> <li>... <a href=\"https://www.setlist.fm/settings/api\">apply for an API key</a> (link for logged in users only) - if you're no registered user yet, then <a href=\"https://www.setlist.fm/signup\">register first</a> (it's free).</li> </ol> </p> <p> If this documentation isn't enough or if you've got other things you'd like to tell us about the API, visit the <a href=\"https://www.setlist.fm/forum/setlistfm/setlistfm-api\">API Forum</a>. </p> <p> Note that the setlist.fm API is, according to the <a href=\"https://www.setlist.fm/help/api-terms\">API terms of service</a>, only free for non-commercial projects. If you're interested in using the API for commercial purposes, <a href=\"https://www.setlist.fm/contact\">contact us</a>. </p>  <h2>About this Service</h2> <p> This service provides methods to get both setlists and components of setlists such as artists, cities, countries or venues. </p>  <h2>Supported Content Types</h2> <p> The REST service currently supports XML (default) and JSON content. </p> <p> To receive a JSON response, set the <code>Accept</code> <a href=\"https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.1\">header</a> to <em>application/json</em>. </p>  <h2>Internationalization</h2> <p> <small>(Please note that this is an experimental feature and does not work for all cities!)</small> </p> <p> Most of the featured methods honor the <code>Accept-Language</code> <a href=\"https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.4\">header</a>. This header is used for localizing cities and countries. The default language is English (en), but you can provide any of the languages Spanish (es), French (fr), German (de), Portuguese (pt), Turkish (tr), Italian (it) or Polish (pl). </p> <p> E.g. if you search a setlist for a concert that took place in Vienna and you pass &quot;de&quot; as header, you'll get <em>&quot;Wien, &Ouml;sterreich&quot;</em> instead of <em>&quot;Vienna, Austria&quot;</em>.<br/> This also works if you use a different language than the country's native language. </p> <p> E.g. for a concert in New York, you'll get <em>&quot;Nueva York, Estados Unidos&quot;</em> instead of <em>&quot;New York, United States&quot;</em> if you pass &quot;es&quot; as language. </p>  <h2>API Keys</h2>  API keys (<a href=\"https://www.setlist.fm/settings/api\">application form</a>) must be included in the request with the <code>x-api-key</code> header.  <h2>Version History</h2> <table class=\"table table-bordered table-versions\"> <thead> <tr> <th>Version</th> <th>Docs</th> <th>End of Service</th> </tr> </thead> <tbody> <tr> <td><strong>1.0</strong></td> <td><a href=\"/docs/1.0\">Docs</a></td> <td>-</li> </tr> <tr> <td><strong>0.1</strong></td> <td></td> <td>December 31, 2017</li> </tr> </tbody> </table>
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.JsonSetlists;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class Class10SearchSetlistsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public Class10SearchSetlistsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public Class10SearchSetlistsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for resource10SearchSetlistsGetSetlistsGET
     * @param artistMbid the artist&#39;s Musicbrainz Identifier (mbid) (optional)
     * @param artistName the artist&#39;s name (optional)
     * @param artistTmid the artist&#39;s Ticketmaster Identifier (tmid) (optional)
     * @param cityId the city&#39;s geoId (optional)
     * @param cityName the name of the city (optional)
     * @param countryCode the country code (optional)
     * @param date the date of the event (format dd-MM-yyyy) (optional)
     * @param lastFm the event&#39;s Last.fm Event ID (deprecated) (optional)
     * @param lastUpdated the date and time (UTC) when this setlist was last updated (format yyyyMMddHHmmss) - either edited or reverted. search will return setlists that were updated on or after this date (optional)
     * @param p the number of the result page (optional, default to 1)
     * @param state the state (optional)
     * @param stateCode the state code (optional)
     * @param tourName  (optional)
     * @param venueId the venue id (optional)
     * @param venueName the name of the venue (optional)
     * @param year the year of the event (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resource10SearchSetlistsGetSetlistsGETCall(String artistMbid, String artistName, Integer artistTmid, String cityId, String cityName, String countryCode, String date, Integer lastFm, String lastUpdated, Integer p, String state, String stateCode, String tourName, String venueId, String venueName, String year, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1.0/search/setlists";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (artistMbid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("artistMbid", artistMbid));
        }

        if (artistName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("artistName", artistName));
        }

        if (artistTmid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("artistTmid", artistTmid));
        }

        if (cityId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cityId", cityId));
        }

        if (cityName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cityName", cityName));
        }

        if (countryCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("countryCode", countryCode));
        }

        if (date != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date", date));
        }

        if (lastFm != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lastFm", lastFm));
        }

        if (lastUpdated != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lastUpdated", lastUpdated));
        }

        if (p != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("p", p));
        }

        if (state != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("state", state));
        }

        if (stateCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("stateCode", stateCode));
        }

        if (tourName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tourName", tourName));
        }

        if (venueId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("venueId", venueId));
        }

        if (venueName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("venueName", venueName));
        }

        if (year != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("year", year));
        }

        final String[] localVarAccepts = {
            "application/xml",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call resource10SearchSetlistsGetSetlistsGETValidateBeforeCall(String artistMbid, String artistName, Integer artistTmid, String cityId, String cityName, String countryCode, String date, Integer lastFm, String lastUpdated, Integer p, String state, String stateCode, String tourName, String venueId, String venueName, String year, final ApiCallback _callback) throws ApiException {
        return resource10SearchSetlistsGetSetlistsGETCall(artistMbid, artistName, artistTmid, cityId, cityName, countryCode, date, lastFm, lastUpdated, p, state, stateCode, tourName, venueId, venueName, year, _callback);

    }

    /**
     * Search for setlists.
     * Search for setlists.
     * @param artistMbid the artist&#39;s Musicbrainz Identifier (mbid) (optional)
     * @param artistName the artist&#39;s name (optional)
     * @param artistTmid the artist&#39;s Ticketmaster Identifier (tmid) (optional)
     * @param cityId the city&#39;s geoId (optional)
     * @param cityName the name of the city (optional)
     * @param countryCode the country code (optional)
     * @param date the date of the event (format dd-MM-yyyy) (optional)
     * @param lastFm the event&#39;s Last.fm Event ID (deprecated) (optional)
     * @param lastUpdated the date and time (UTC) when this setlist was last updated (format yyyyMMddHHmmss) - either edited or reverted. search will return setlists that were updated on or after this date (optional)
     * @param p the number of the result page (optional, default to 1)
     * @param state the state (optional)
     * @param stateCode the state code (optional)
     * @param tourName  (optional)
     * @param venueId the venue id (optional)
     * @param venueName the name of the venue (optional)
     * @param year the year of the event (optional)
     * @return JsonSetlists
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public JsonSetlists resource10SearchSetlistsGetSetlistsGET(String artistMbid, String artistName, Integer artistTmid, String cityId, String cityName, String countryCode, String date, Integer lastFm, String lastUpdated, Integer p, String state, String stateCode, String tourName, String venueId, String venueName, String year) throws ApiException {
        ApiResponse<JsonSetlists> localVarResp = resource10SearchSetlistsGetSetlistsGETWithHttpInfo(artistMbid, artistName, artistTmid, cityId, cityName, countryCode, date, lastFm, lastUpdated, p, state, stateCode, tourName, venueId, venueName, year);
        return localVarResp.getData();
    }

    /**
     * Search for setlists.
     * Search for setlists.
     * @param artistMbid the artist&#39;s Musicbrainz Identifier (mbid) (optional)
     * @param artistName the artist&#39;s name (optional)
     * @param artistTmid the artist&#39;s Ticketmaster Identifier (tmid) (optional)
     * @param cityId the city&#39;s geoId (optional)
     * @param cityName the name of the city (optional)
     * @param countryCode the country code (optional)
     * @param date the date of the event (format dd-MM-yyyy) (optional)
     * @param lastFm the event&#39;s Last.fm Event ID (deprecated) (optional)
     * @param lastUpdated the date and time (UTC) when this setlist was last updated (format yyyyMMddHHmmss) - either edited or reverted. search will return setlists that were updated on or after this date (optional)
     * @param p the number of the result page (optional, default to 1)
     * @param state the state (optional)
     * @param stateCode the state code (optional)
     * @param tourName  (optional)
     * @param venueId the venue id (optional)
     * @param venueName the name of the venue (optional)
     * @param year the year of the event (optional)
     * @return ApiResponse&lt;JsonSetlists&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JsonSetlists> resource10SearchSetlistsGetSetlistsGETWithHttpInfo(String artistMbid, String artistName, Integer artistTmid, String cityId, String cityName, String countryCode, String date, Integer lastFm, String lastUpdated, Integer p, String state, String stateCode, String tourName, String venueId, String venueName, String year) throws ApiException {
        okhttp3.Call localVarCall = resource10SearchSetlistsGetSetlistsGETValidateBeforeCall(artistMbid, artistName, artistTmid, cityId, cityName, countryCode, date, lastFm, lastUpdated, p, state, stateCode, tourName, venueId, venueName, year, null);
        Type localVarReturnType = new TypeToken<JsonSetlists>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search for setlists. (asynchronously)
     * Search for setlists.
     * @param artistMbid the artist&#39;s Musicbrainz Identifier (mbid) (optional)
     * @param artistName the artist&#39;s name (optional)
     * @param artistTmid the artist&#39;s Ticketmaster Identifier (tmid) (optional)
     * @param cityId the city&#39;s geoId (optional)
     * @param cityName the name of the city (optional)
     * @param countryCode the country code (optional)
     * @param date the date of the event (format dd-MM-yyyy) (optional)
     * @param lastFm the event&#39;s Last.fm Event ID (deprecated) (optional)
     * @param lastUpdated the date and time (UTC) when this setlist was last updated (format yyyyMMddHHmmss) - either edited or reverted. search will return setlists that were updated on or after this date (optional)
     * @param p the number of the result page (optional, default to 1)
     * @param state the state (optional)
     * @param stateCode the state code (optional)
     * @param tourName  (optional)
     * @param venueId the venue id (optional)
     * @param venueName the name of the venue (optional)
     * @param year the year of the event (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resource10SearchSetlistsGetSetlistsGETAsync(String artistMbid, String artistName, Integer artistTmid, String cityId, String cityName, String countryCode, String date, Integer lastFm, String lastUpdated, Integer p, String state, String stateCode, String tourName, String venueId, String venueName, String year, final ApiCallback<JsonSetlists> _callback) throws ApiException {

        okhttp3.Call localVarCall = resource10SearchSetlistsGetSetlistsGETValidateBeforeCall(artistMbid, artistName, artistTmid, cityId, cityName, countryCode, date, lastFm, lastUpdated, p, state, stateCode, tourName, venueId, venueName, year, _callback);
        Type localVarReturnType = new TypeToken<JsonSetlists>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
