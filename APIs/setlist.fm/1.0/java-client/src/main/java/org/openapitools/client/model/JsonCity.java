/*
 * setlist.fm API
 * <p> The setlist.fm API has been designed to give you easy access to setlist data in order to build fancy websites and other applications. Before starting to use the API, be sure to ... <ol> <li>... understand how setlist.fm works (the <a href=\"https://www.setlist.fm/faq\">FAQ</a> and the <a href=\"https://www.setlist.fm/guidelines\">Guidelines</a> are a good starting point),</li> <li>... read this documentation carefully and</li> <li>... <a href=\"https://www.setlist.fm/settings/api\">apply for an API key</a> (link for logged in users only) - if you're no registered user yet, then <a href=\"https://www.setlist.fm/signup\">register first</a> (it's free).</li> </ol> </p> <p> If this documentation isn't enough or if you've got other things you'd like to tell us about the API, visit the <a href=\"https://www.setlist.fm/forum/setlistfm/setlistfm-api\">API Forum</a>. </p> <p> Note that the setlist.fm API is, according to the <a href=\"https://www.setlist.fm/help/api-terms\">API terms of service</a>, only free for non-commercial projects. If you're interested in using the API for commercial purposes, <a href=\"https://www.setlist.fm/contact\">contact us</a>. </p>  <h2>About this Service</h2> <p> This service provides methods to get both setlists and components of setlists such as artists, cities, countries or venues. </p>  <h2>Supported Content Types</h2> <p> The REST service currently supports XML (default) and JSON content. </p> <p> To receive a JSON response, set the <code>Accept</code> <a href=\"https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.1\">header</a> to <em>application/json</em>. </p>  <h2>Internationalization</h2> <p> <small>(Please note that this is an experimental feature and does not work for all cities!)</small> </p> <p> Most of the featured methods honor the <code>Accept-Language</code> <a href=\"https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.4\">header</a>. This header is used for localizing cities and countries. The default language is English (en), but you can provide any of the languages Spanish (es), French (fr), German (de), Portuguese (pt), Turkish (tr), Italian (it) or Polish (pl). </p> <p> E.g. if you search a setlist for a concert that took place in Vienna and you pass &quot;de&quot; as header, you'll get <em>&quot;Wien, &Ouml;sterreich&quot;</em> instead of <em>&quot;Vienna, Austria&quot;</em>.<br/> This also works if you use a different language than the country's native language. </p> <p> E.g. for a concert in New York, you'll get <em>&quot;Nueva York, Estados Unidos&quot;</em> instead of <em>&quot;New York, United States&quot;</em> if you pass &quot;es&quot; as language. </p>  <h2>API Keys</h2>  API keys (<a href=\"https://www.setlist.fm/settings/api\">application form</a>) must be included in the request with the <code>x-api-key</code> header.  <h2>Version History</h2> <table class=\"table table-bordered table-versions\"> <thead> <tr> <th>Version</th> <th>Docs</th> <th>End of Service</th> </tr> </thead> <tbody> <tr> <td><strong>1.0</strong></td> <td><a href=\"/docs/1.0\">Docs</a></td> <td>-</li> </tr> <tr> <td><strong>0.1</strong></td> <td></td> <td>December 31, 2017</li> </tr> </tbody> </table>
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.JsonCoords;
import org.openapitools.client.model.JsonCountry;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * This class represents a city where Venues are located. Most of the original city data was taken from &lt;a href&#x3D;\&quot;http://geonames.org/\&quot;&gt;Geonames.org&lt;/a&gt;.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:22:10.607870-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class JsonCity {
  public static final String SERIALIZED_NAME_COORDS = "coords";
  @SerializedName(SERIALIZED_NAME_COORDS)
  private JsonCoords coords;

  public static final String SERIALIZED_NAME_COUNTRY = "country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  private JsonCountry country;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private String state;

  public static final String SERIALIZED_NAME_STATE_CODE = "stateCode";
  @SerializedName(SERIALIZED_NAME_STATE_CODE)
  private String stateCode;

  public JsonCity() {
  }

  public JsonCity coords(JsonCoords coords) {
    this.coords = coords;
    return this;
  }

  /**
   * Get coords
   * @return coords
   */
  @javax.annotation.Nullable
  public JsonCoords getCoords() {
    return coords;
  }

  public void setCoords(JsonCoords coords) {
    this.coords = coords;
  }


  public JsonCity country(JsonCountry country) {
    this.country = country;
    return this;
  }

  /**
   * Get country
   * @return country
   */
  @javax.annotation.Nullable
  public JsonCountry getCountry() {
    return country;
  }

  public void setCountry(JsonCountry country) {
    this.country = country;
  }


  public JsonCity id(String id) {
    this.id = id;
    return this;
  }

  /**
   * unique identifier
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public JsonCity name(String name) {
    this.name = name;
    return this;
  }

  /**
   * the city&#39;s name, depending on the language valid values are e.g. &lt;em&gt;&amp;quot;M&amp;uuml;chen&amp;quot;&lt;/em&gt; or &lt;em&gt;Munich&lt;/em&gt;
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public JsonCity state(String state) {
    this.state = state;
    return this;
  }

  /**
   * The name of city&#39;s state, e.g. &lt;em&gt;&amp;quot;Bavaria&amp;quot;&lt;/em&gt; or &lt;em&gt;&amp;quot;Florida&amp;quot;&lt;/em&gt;
   * @return state
   */
  @javax.annotation.Nullable
  public String getState() {
    return state;
  }

  public void setState(String state) {
    this.state = state;
  }


  public JsonCity stateCode(String stateCode) {
    this.stateCode = stateCode;
    return this;
  }

  /**
   * The code of the city&#39;s state. For most countries this is a two-digit numeric code, with which the state can be identified uniquely in the specific Country. The code can also be a String for other cities. Valid examples are &lt;em&gt;&amp;quot;CA&amp;quot;&lt;/em&gt; or &lt;em&gt;&amp;quot;02&amp;quot;&lt;/em&gt;  which in turn get uniquely identifiable when combined with the state&#39;s country:  &lt;em&gt;&amp;quot;US.CA&amp;quot;&lt;/em&gt; for California, United States or &lt;em&gt;&amp;quot;DE.02&amp;quot;&lt;/em&gt; for Bavaria, Germany  For a complete list of available states (that aren&#39;t necessarily used in this database) is available in &lt;a href&#x3D; \&quot;http://download.geonames.org/export/dump/admin1CodesASCII.txt\&quot;&gt;a textfile on geonames.org&lt;/a&gt;.  Note that this code is only unique combined with the city&#39;s Country. The code alone is &lt;strong&gt;not&lt;/strong&gt; unique.
   * @return stateCode
   */
  @javax.annotation.Nullable
  public String getStateCode() {
    return stateCode;
  }

  public void setStateCode(String stateCode) {
    this.stateCode = stateCode;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    JsonCity jsonCity = (JsonCity) o;
    return Objects.equals(this.coords, jsonCity.coords) &&
        Objects.equals(this.country, jsonCity.country) &&
        Objects.equals(this.id, jsonCity.id) &&
        Objects.equals(this.name, jsonCity.name) &&
        Objects.equals(this.state, jsonCity.state) &&
        Objects.equals(this.stateCode, jsonCity.stateCode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(coords, country, id, name, state, stateCode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class JsonCity {\n");
    sb.append("    coords: ").append(toIndentedString(coords)).append("\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    stateCode: ").append(toIndentedString(stateCode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("coords");
    openapiFields.add("country");
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("state");
    openapiFields.add("stateCode");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to JsonCity
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!JsonCity.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in JsonCity is not found in the empty JSON string", JsonCity.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!JsonCity.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `JsonCity` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `coords`
      if (jsonObj.get("coords") != null && !jsonObj.get("coords").isJsonNull()) {
        JsonCoords.validateJsonElement(jsonObj.get("coords"));
      }
      // validate the optional field `country`
      if (jsonObj.get("country") != null && !jsonObj.get("country").isJsonNull()) {
        JsonCountry.validateJsonElement(jsonObj.get("country"));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      if ((jsonObj.get("stateCode") != null && !jsonObj.get("stateCode").isJsonNull()) && !jsonObj.get("stateCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stateCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stateCode").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!JsonCity.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'JsonCity' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<JsonCity> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(JsonCity.class));

       return (TypeAdapter<T>) new TypeAdapter<JsonCity>() {
           @Override
           public void write(JsonWriter out, JsonCity value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public JsonCity read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of JsonCity given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of JsonCity
   * @throws IOException if the JSON string is invalid with respect to JsonCity
   */
  public static JsonCity fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, JsonCity.class);
  }

  /**
   * Convert an instance of JsonCity to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

