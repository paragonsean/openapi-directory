/*
 * setlist.fm API
 * <p> The setlist.fm API has been designed to give you easy access to setlist data in order to build fancy websites and other applications. Before starting to use the API, be sure to ... <ol> <li>... understand how setlist.fm works (the <a href=\"https://www.setlist.fm/faq\">FAQ</a> and the <a href=\"https://www.setlist.fm/guidelines\">Guidelines</a> are a good starting point),</li> <li>... read this documentation carefully and</li> <li>... <a href=\"https://www.setlist.fm/settings/api\">apply for an API key</a> (link for logged in users only) - if you're no registered user yet, then <a href=\"https://www.setlist.fm/signup\">register first</a> (it's free).</li> </ol> </p> <p> If this documentation isn't enough or if you've got other things you'd like to tell us about the API, visit the <a href=\"https://www.setlist.fm/forum/setlistfm/setlistfm-api\">API Forum</a>. </p> <p> Note that the setlist.fm API is, according to the <a href=\"https://www.setlist.fm/help/api-terms\">API terms of service</a>, only free for non-commercial projects. If you're interested in using the API for commercial purposes, <a href=\"https://www.setlist.fm/contact\">contact us</a>. </p>  <h2>About this Service</h2> <p> This service provides methods to get both setlists and components of setlists such as artists, cities, countries or venues. </p>  <h2>Supported Content Types</h2> <p> The REST service currently supports XML (default) and JSON content. </p> <p> To receive a JSON response, set the <code>Accept</code> <a href=\"https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.1\">header</a> to <em>application/json</em>. </p>  <h2>Internationalization</h2> <p> <small>(Please note that this is an experimental feature and does not work for all cities!)</small> </p> <p> Most of the featured methods honor the <code>Accept-Language</code> <a href=\"https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.4\">header</a>. This header is used for localizing cities and countries. The default language is English (en), but you can provide any of the languages Spanish (es), French (fr), German (de), Portuguese (pt), Turkish (tr), Italian (it) or Polish (pl). </p> <p> E.g. if you search a setlist for a concert that took place in Vienna and you pass &quot;de&quot; as header, you'll get <em>&quot;Wien, &Ouml;sterreich&quot;</em> instead of <em>&quot;Vienna, Austria&quot;</em>.<br/> This also works if you use a different language than the country's native language. </p> <p> E.g. for a concert in New York, you'll get <em>&quot;Nueva York, Estados Unidos&quot;</em> instead of <em>&quot;New York, United States&quot;</em> if you pass &quot;es&quot; as language. </p>  <h2>API Keys</h2>  API keys (<a href=\"https://www.setlist.fm/settings/api\">application form</a>) must be included in the request with the <code>x-api-key</code> header.  <h2>Version History</h2> <table class=\"table table-bordered table-versions\"> <thead> <tr> <th>Version</th> <th>Docs</th> <th>End of Service</th> </tr> </thead> <tbody> <tr> <td><strong>1.0</strong></td> <td><a href=\"/docs/1.0\">Docs</a></td> <td>-</li> </tr> <tr> <td><strong>0.1</strong></td> <td></td> <td>December 31, 2017</li> </tr> </tbody> </table>
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * This class represents an artist. An artist is a musician or a group of musicians. Each artist has a definite &lt;a href&#x3D;\&quot;http://wiki.musicbrainz.org/MBID\&quot;&gt;Musicbrainz Identifier&lt;/a&gt; (MBID) with which the artist can be uniquely identified.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:22:10.607870-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class XmlNs0Artist {
  public static final String SERIALIZED_NAME_DISAMBIGUATION = "disambiguation";
  @SerializedName(SERIALIZED_NAME_DISAMBIGUATION)
  private String disambiguation;

  public static final String SERIALIZED_NAME_MBID = "mbid";
  @SerializedName(SERIALIZED_NAME_MBID)
  private String mbid;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_SORT_NAME = "sortName";
  @SerializedName(SERIALIZED_NAME_SORT_NAME)
  private String sortName;

  public static final String SERIALIZED_NAME_TMID = "tmid";
  @SerializedName(SERIALIZED_NAME_TMID)
  private BigDecimal tmid;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public XmlNs0Artist() {
  }

  public XmlNs0Artist disambiguation(String disambiguation) {
    this.disambiguation = disambiguation;
    return this;
  }

  /**
   * disambiguation to distinguish between artists with same names
   * @return disambiguation
   */
  @javax.annotation.Nullable
  public String getDisambiguation() {
    return disambiguation;
  }

  public void setDisambiguation(String disambiguation) {
    this.disambiguation = disambiguation;
  }


  public XmlNs0Artist mbid(String mbid) {
    this.mbid = mbid;
    return this;
  }

  /**
   * unique Musicbrainz Identifier (MBID), e.g. &lt;em&gt;&amp;quot;b10bbbfc-cf9e-42e0-be17-e2c3e1d2600d&amp;quot;&lt;/em&gt;
   * @return mbid
   */
  @javax.annotation.Nullable
  public String getMbid() {
    return mbid;
  }

  public void setMbid(String mbid) {
    this.mbid = mbid;
  }


  public XmlNs0Artist name(String name) {
    this.name = name;
    return this;
  }

  /**
   * the artist&#39;s name, e.g. &lt;em&gt;&amp;quot;The Beatles&amp;quot;&lt;/em&gt;
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public XmlNs0Artist sortName(String sortName) {
    this.sortName = sortName;
    return this;
  }

  /**
   * the artist&#39;s sort name, e.g. &lt;em&gt;&amp;quot;Beatles, The&amp;quot;&lt;/em&gt; or &lt;em&gt;&amp;quot;Springsteen, Bruce&amp;quot;&lt;/em&gt;
   * @return sortName
   */
  @javax.annotation.Nullable
  public String getSortName() {
    return sortName;
  }

  public void setSortName(String sortName) {
    this.sortName = sortName;
  }


  public XmlNs0Artist tmid(BigDecimal tmid) {
    this.tmid = tmid;
    return this;
  }

  /**
   * unique Ticket Master Identifier (TMID), e.g. &lt;em&gt;735610&lt;/em&gt;
   * @return tmid
   */
  @javax.annotation.Nullable
  public BigDecimal getTmid() {
    return tmid;
  }

  public void setTmid(BigDecimal tmid) {
    this.tmid = tmid;
  }


  public XmlNs0Artist url(String url) {
    this.url = url;
    return this;
  }

  /**
   * the attribution url
   * @return url
   */
  @javax.annotation.Nullable
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    XmlNs0Artist xmlNs0Artist = (XmlNs0Artist) o;
    return Objects.equals(this.disambiguation, xmlNs0Artist.disambiguation) &&
        Objects.equals(this.mbid, xmlNs0Artist.mbid) &&
        Objects.equals(this.name, xmlNs0Artist.name) &&
        Objects.equals(this.sortName, xmlNs0Artist.sortName) &&
        Objects.equals(this.tmid, xmlNs0Artist.tmid) &&
        Objects.equals(this.url, xmlNs0Artist.url);
  }

  @Override
  public int hashCode() {
    return Objects.hash(disambiguation, mbid, name, sortName, tmid, url);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class XmlNs0Artist {\n");
    sb.append("    disambiguation: ").append(toIndentedString(disambiguation)).append("\n");
    sb.append("    mbid: ").append(toIndentedString(mbid)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    sortName: ").append(toIndentedString(sortName)).append("\n");
    sb.append("    tmid: ").append(toIndentedString(tmid)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("disambiguation");
    openapiFields.add("mbid");
    openapiFields.add("name");
    openapiFields.add("sortName");
    openapiFields.add("tmid");
    openapiFields.add("url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to XmlNs0Artist
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!XmlNs0Artist.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in XmlNs0Artist is not found in the empty JSON string", XmlNs0Artist.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!XmlNs0Artist.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `XmlNs0Artist` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("disambiguation") != null && !jsonObj.get("disambiguation").isJsonNull()) && !jsonObj.get("disambiguation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `disambiguation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("disambiguation").toString()));
      }
      if ((jsonObj.get("mbid") != null && !jsonObj.get("mbid").isJsonNull()) && !jsonObj.get("mbid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mbid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mbid").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("sortName") != null && !jsonObj.get("sortName").isJsonNull()) && !jsonObj.get("sortName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sortName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sortName").toString()));
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!XmlNs0Artist.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'XmlNs0Artist' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<XmlNs0Artist> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(XmlNs0Artist.class));

       return (TypeAdapter<T>) new TypeAdapter<XmlNs0Artist>() {
           @Override
           public void write(JsonWriter out, XmlNs0Artist value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public XmlNs0Artist read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of XmlNs0Artist given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of XmlNs0Artist
   * @throws IOException if the JSON string is invalid with respect to XmlNs0Artist
   */
  public static XmlNs0Artist fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, XmlNs0Artist.class);
  }

  /**
   * Convert an instance of XmlNs0Artist to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

