/**
 * setlist.fm API
 * <p> The setlist.fm API has been designed to give you easy access to setlist data in order to build fancy websites and other applications. Before starting to use the API, be sure to ... <ol> <li>... understand how setlist.fm works (the <a href=\"https://www.setlist.fm/faq\">FAQ</a> and the <a href=\"https://www.setlist.fm/guidelines\">Guidelines</a> are a good starting point),</li> <li>... read this documentation carefully and</li> <li>... <a href=\"https://www.setlist.fm/settings/api\">apply for an API key</a> (link for logged in users only) - if you're no registered user yet, then <a href=\"https://www.setlist.fm/signup\">register first</a> (it's free).</li> </ol> </p> <p> If this documentation isn't enough or if you've got other things you'd like to tell us about the API, visit the <a href=\"https://www.setlist.fm/forum/setlistfm/setlistfm-api\">API Forum</a>. </p> <p> Note that the setlist.fm API is, according to the <a href=\"https://www.setlist.fm/help/api-terms\">API terms of service</a>, only free for non-commercial projects. If you're interested in using the API for commercial purposes, <a href=\"https://www.setlist.fm/contact\">contact us</a>. </p>  <h2>About this Service</h2> <p> This service provides methods to get both setlists and components of setlists such as artists, cities, countries or venues. </p>  <h2>Supported Content Types</h2> <p> The REST service currently supports XML (default) and JSON content. </p> <p> To receive a JSON response, set the <code>Accept</code> <a href=\"https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.1\">header</a> to <em>application/json</em>. </p>  <h2>Internationalization</h2> <p> <small>(Please note that this is an experimental feature and does not work for all cities!)</small> </p> <p> Most of the featured methods honor the <code>Accept-Language</code> <a href=\"https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.4\">header</a>. This header is used for localizing cities and countries. The default language is English (en), but you can provide any of the languages Spanish (es), French (fr), German (de), Portuguese (pt), Turkish (tr), Italian (it) or Polish (pl). </p> <p> E.g. if you search a setlist for a concert that took place in Vienna and you pass &quot;de&quot; as header, you'll get <em>&quot;Wien, &Ouml;sterreich&quot;</em> instead of <em>&quot;Vienna, Austria&quot;</em>.<br/> This also works if you use a different language than the country's native language. </p> <p> E.g. for a concert in New York, you'll get <em>&quot;Nueva York, Estados Unidos&quot;</em> instead of <em>&quot;New York, United States&quot;</em> if you pass &quot;es&quot; as language. </p>  <h2>API Keys</h2>  API keys (<a href=\"https://www.setlist.fm/settings/api\">application form</a>) must be included in the request with the <code>x-api-key</code> header.  <h2>Version History</h2> <table class=\"table table-bordered table-versions\"> <thead> <tr> <th>Version</th> <th>Docs</th> <th>End of Service</th> </tr> </thead> <tbody> <tr> <td><strong>1.0</strong></td> <td><a href=\"/docs/1.0\">Docs</a></td> <td>-</li> </tr> <tr> <td><strong>0.1</strong></td> <td></td> <td>December 31, 2017</li> </tr> </tbody> </table>
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import XmlNs0Coords from './XmlNs0Coords';
import XmlNs0Country from './XmlNs0Country';

/**
 * The XmlNs0City model module.
 * @module model/XmlNs0City
 * @version 1.0
 */
class XmlNs0City {
    /**
     * Constructs a new <code>XmlNs0City</code>.
     * This class represents a city where Venues are located. Most of the original city data was taken from &lt;a href&#x3D;\&quot;http://geonames.org/\&quot;&gt;Geonames.org&lt;/a&gt;.
     * @alias module:model/XmlNs0City
     */
    constructor() { 
        
        XmlNs0City.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>XmlNs0City</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/XmlNs0City} obj Optional instance to populate.
     * @return {module:model/XmlNs0City} The populated <code>XmlNs0City</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new XmlNs0City();

            if (data.hasOwnProperty('coords')) {
                obj['coords'] = XmlNs0Coords.constructFromObject(data['coords']);
            }
            if (data.hasOwnProperty('country')) {
                obj['country'] = XmlNs0Country.constructFromObject(data['country']);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('stateCode')) {
                obj['stateCode'] = ApiClient.convertToType(data['stateCode'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>XmlNs0City</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>XmlNs0City</code>.
     */
    static validateJSON(data) {
        // validate the optional field `coords`
        if (data['coords']) { // data not null
          XmlNs0Coords.validateJSON(data['coords']);
        }
        // validate the optional field `country`
        if (data['country']) { // data not null
          XmlNs0Country.validateJSON(data['country']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // ensure the json data is a string
        if (data['stateCode'] && !(typeof data['stateCode'] === 'string' || data['stateCode'] instanceof String)) {
            throw new Error("Expected the field `stateCode` to be a primitive type in the JSON string but got " + data['stateCode']);
        }

        return true;
    }


}



/**
 * @member {module:model/XmlNs0Coords} coords
 */
XmlNs0City.prototype['coords'] = undefined;

/**
 * @member {module:model/XmlNs0Country} country
 */
XmlNs0City.prototype['country'] = undefined;

/**
 * unique identifier
 * @member {String} id
 */
XmlNs0City.prototype['id'] = undefined;

/**
 * the city's name, depending on the language valid values are e.g. <em>&quot;M&uuml;chen&quot;</em> or <em>Munich</em>
 * @member {String} name
 */
XmlNs0City.prototype['name'] = undefined;

/**
 * The name of city's state, e.g. <em>&quot;Bavaria&quot;</em> or <em>&quot;Florida&quot;</em>
 * @member {String} state
 */
XmlNs0City.prototype['state'] = undefined;

/**
 * The code of the city's state. For most countries this is a two-digit numeric code, with which the state can be identified uniquely in the specific Country. The code can also be a String for other cities. Valid examples are <em>&quot;CA&quot;</em> or <em>&quot;02&quot;</em>  which in turn get uniquely identifiable when combined with the state's country:  <em>&quot;US.CA&quot;</em> for California, United States or <em>&quot;DE.02&quot;</em> for Bavaria, Germany  For a complete list of available states (that aren't necessarily used in this database) is available in <a href= \"http://download.geonames.org/export/dump/admin1CodesASCII.txt\">a textfile on geonames.org</a>.  Note that this code is only unique combined with the city's Country. The code alone is <strong>not</strong> unique.
 * @member {String} stateCode
 */
XmlNs0City.prototype['stateCode'] = undefined;






export default XmlNs0City;

