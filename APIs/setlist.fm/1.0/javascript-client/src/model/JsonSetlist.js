/**
 * setlist.fm API
 * <p> The setlist.fm API has been designed to give you easy access to setlist data in order to build fancy websites and other applications. Before starting to use the API, be sure to ... <ol> <li>... understand how setlist.fm works (the <a href=\"https://www.setlist.fm/faq\">FAQ</a> and the <a href=\"https://www.setlist.fm/guidelines\">Guidelines</a> are a good starting point),</li> <li>... read this documentation carefully and</li> <li>... <a href=\"https://www.setlist.fm/settings/api\">apply for an API key</a> (link for logged in users only) - if you're no registered user yet, then <a href=\"https://www.setlist.fm/signup\">register first</a> (it's free).</li> </ol> </p> <p> If this documentation isn't enough or if you've got other things you'd like to tell us about the API, visit the <a href=\"https://www.setlist.fm/forum/setlistfm/setlistfm-api\">API Forum</a>. </p> <p> Note that the setlist.fm API is, according to the <a href=\"https://www.setlist.fm/help/api-terms\">API terms of service</a>, only free for non-commercial projects. If you're interested in using the API for commercial purposes, <a href=\"https://www.setlist.fm/contact\">contact us</a>. </p>  <h2>About this Service</h2> <p> This service provides methods to get both setlists and components of setlists such as artists, cities, countries or venues. </p>  <h2>Supported Content Types</h2> <p> The REST service currently supports XML (default) and JSON content. </p> <p> To receive a JSON response, set the <code>Accept</code> <a href=\"https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.1\">header</a> to <em>application/json</em>. </p>  <h2>Internationalization</h2> <p> <small>(Please note that this is an experimental feature and does not work for all cities!)</small> </p> <p> Most of the featured methods honor the <code>Accept-Language</code> <a href=\"https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.4\">header</a>. This header is used for localizing cities and countries. The default language is English (en), but you can provide any of the languages Spanish (es), French (fr), German (de), Portuguese (pt), Turkish (tr), Italian (it) or Polish (pl). </p> <p> E.g. if you search a setlist for a concert that took place in Vienna and you pass &quot;de&quot; as header, you'll get <em>&quot;Wien, &Ouml;sterreich&quot;</em> instead of <em>&quot;Vienna, Austria&quot;</em>.<br/> This also works if you use a different language than the country's native language. </p> <p> E.g. for a concert in New York, you'll get <em>&quot;Nueva York, Estados Unidos&quot;</em> instead of <em>&quot;New York, United States&quot;</em> if you pass &quot;es&quot; as language. </p>  <h2>API Keys</h2>  API keys (<a href=\"https://www.setlist.fm/settings/api\">application form</a>) must be included in the request with the <code>x-api-key</code> header.  <h2>Version History</h2> <table class=\"table table-bordered table-versions\"> <thead> <tr> <th>Version</th> <th>Docs</th> <th>End of Service</th> </tr> </thead> <tbody> <tr> <td><strong>1.0</strong></td> <td><a href=\"/docs/1.0\">Docs</a></td> <td>-</li> </tr> <tr> <td><strong>0.1</strong></td> <td></td> <td>December 31, 2017</li> </tr> </tbody> </table>
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import JsonArtist from './JsonArtist';
import JsonSet from './JsonSet';
import JsonTour from './JsonTour';
import JsonVenue from './JsonVenue';

/**
 * The JsonSetlist model module.
 * @module model/JsonSetlist
 * @version 1.0
 */
class JsonSetlist {
    /**
     * Constructs a new <code>JsonSetlist</code>.
     * Setlists, that&#39;s what it&#39;s all about. So if you&#39;re trying to use this API without knowing what a setlist is then you&#39;re kinda wrong on this page ;-).  A setlist can be distinguished from other setlists by its unique id. But as &lt;a href&#x3D;\&quot;https://www.setlist.fm/\&quot;&gt;setlist.fm&lt;/a&gt; works the wiki way, there can be different versions of one setlist (each time a user updates a setlist a new version gets created). These different versions have a unique id on its own. So setlists can have the same id although they differ as far as the content is concerned - thus the best way to check if two setlists are the same is to compare their versionIds.
     * @alias module:model/JsonSetlist
     */
    constructor() { 
        
        JsonSetlist.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>JsonSetlist</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/JsonSetlist} obj Optional instance to populate.
     * @return {module:model/JsonSetlist} The populated <code>JsonSetlist</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new JsonSetlist();

            if (data.hasOwnProperty('artist')) {
                obj['artist'] = JsonArtist.constructFromObject(data['artist']);
            }
            if (data.hasOwnProperty('eventDate')) {
                obj['eventDate'] = ApiClient.convertToType(data['eventDate'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('info')) {
                obj['info'] = ApiClient.convertToType(data['info'], 'String');
            }
            if (data.hasOwnProperty('lastFmEventId')) {
                obj['lastFmEventId'] = ApiClient.convertToType(data['lastFmEventId'], 'Number');
            }
            if (data.hasOwnProperty('lastUpdated')) {
                obj['lastUpdated'] = ApiClient.convertToType(data['lastUpdated'], 'String');
            }
            if (data.hasOwnProperty('set')) {
                obj['set'] = ApiClient.convertToType(data['set'], [JsonSet]);
            }
            if (data.hasOwnProperty('tour')) {
                obj['tour'] = JsonTour.constructFromObject(data['tour']);
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
            if (data.hasOwnProperty('venue')) {
                obj['venue'] = JsonVenue.constructFromObject(data['venue']);
            }
            if (data.hasOwnProperty('versionId')) {
                obj['versionId'] = ApiClient.convertToType(data['versionId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>JsonSetlist</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>JsonSetlist</code>.
     */
    static validateJSON(data) {
        // validate the optional field `artist`
        if (data['artist']) { // data not null
          JsonArtist.validateJSON(data['artist']);
        }
        // ensure the json data is a string
        if (data['eventDate'] && !(typeof data['eventDate'] === 'string' || data['eventDate'] instanceof String)) {
            throw new Error("Expected the field `eventDate` to be a primitive type in the JSON string but got " + data['eventDate']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['info'] && !(typeof data['info'] === 'string' || data['info'] instanceof String)) {
            throw new Error("Expected the field `info` to be a primitive type in the JSON string but got " + data['info']);
        }
        // ensure the json data is a string
        if (data['lastUpdated'] && !(typeof data['lastUpdated'] === 'string' || data['lastUpdated'] instanceof String)) {
            throw new Error("Expected the field `lastUpdated` to be a primitive type in the JSON string but got " + data['lastUpdated']);
        }
        if (data['set']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['set'])) {
                throw new Error("Expected the field `set` to be an array in the JSON data but got " + data['set']);
            }
            // validate the optional field `set` (array)
            for (const item of data['set']) {
                JsonSet.validateJSON(item);
            };
        }
        // validate the optional field `tour`
        if (data['tour']) { // data not null
          JsonTour.validateJSON(data['tour']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }
        // validate the optional field `venue`
        if (data['venue']) { // data not null
          JsonVenue.validateJSON(data['venue']);
        }
        // ensure the json data is a string
        if (data['versionId'] && !(typeof data['versionId'] === 'string' || data['versionId'] instanceof String)) {
            throw new Error("Expected the field `versionId` to be a primitive type in the JSON string but got " + data['versionId']);
        }

        return true;
    }


}



/**
 * @member {module:model/JsonArtist} artist
 */
JsonSetlist.prototype['artist'] = undefined;

/**
 * date of the concert in the format &quot;dd-MM-yyyy&quot;
 * @member {String} eventDate
 */
JsonSetlist.prototype['eventDate'] = undefined;

/**
 * unique identifier
 * @member {String} id
 */
JsonSetlist.prototype['id'] = undefined;

/**
 * additional information on the concert - see the <a href=\"https://www.setlist.fm/guidelines\">setlist.fm guidelines</a> for a complete list of allowed content.
 * @member {String} info
 */
JsonSetlist.prototype['info'] = undefined;

/**
 * the id this event has on <a href=\"http://last.fm/\">last.fm</a> (deprecated)
 * @member {Number} lastFmEventId
 */
JsonSetlist.prototype['lastFmEventId'] = undefined;

/**
 * date, time and time zone of the last update to this setlist in the format &quot;yyyy-MM-dd'T'HH:mm:ss.SSSZZZZZ&quot;
 * @member {String} lastUpdated
 */
JsonSetlist.prototype['lastUpdated'] = undefined;

/**
 * all sets of this setlist
 * @member {Array.<module:model/JsonSet>} set
 */
JsonSetlist.prototype['set'] = undefined;

/**
 * @member {module:model/JsonTour} tour
 */
JsonSetlist.prototype['tour'] = undefined;

/**
 * the attribution url to which you have to link to wherever you use data from this setlist in your application
 * @member {String} url
 */
JsonSetlist.prototype['url'] = undefined;

/**
 * @member {module:model/JsonVenue} venue
 */
JsonSetlist.prototype['venue'] = undefined;

/**
 * unique identifier of the version
 * @member {String} versionId
 */
JsonSetlist.prototype['versionId'] = undefined;






export default JsonSetlist;

