/**
 * setlist.fm API
 * <p> The setlist.fm API has been designed to give you easy access to setlist data in order to build fancy websites and other applications. Before starting to use the API, be sure to ... <ol> <li>... understand how setlist.fm works (the <a href=\"https://www.setlist.fm/faq\">FAQ</a> and the <a href=\"https://www.setlist.fm/guidelines\">Guidelines</a> are a good starting point),</li> <li>... read this documentation carefully and</li> <li>... <a href=\"https://www.setlist.fm/settings/api\">apply for an API key</a> (link for logged in users only) - if you're no registered user yet, then <a href=\"https://www.setlist.fm/signup\">register first</a> (it's free).</li> </ol> </p> <p> If this documentation isn't enough or if you've got other things you'd like to tell us about the API, visit the <a href=\"https://www.setlist.fm/forum/setlistfm/setlistfm-api\">API Forum</a>. </p> <p> Note that the setlist.fm API is, according to the <a href=\"https://www.setlist.fm/help/api-terms\">API terms of service</a>, only free for non-commercial projects. If you're interested in using the API for commercial purposes, <a href=\"https://www.setlist.fm/contact\">contact us</a>. </p>  <h2>About this Service</h2> <p> This service provides methods to get both setlists and components of setlists such as artists, cities, countries or venues. </p>  <h2>Supported Content Types</h2> <p> The REST service currently supports XML (default) and JSON content. </p> <p> To receive a JSON response, set the <code>Accept</code> <a href=\"https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.1\">header</a> to <em>application/json</em>. </p>  <h2>Internationalization</h2> <p> <small>(Please note that this is an experimental feature and does not work for all cities!)</small> </p> <p> Most of the featured methods honor the <code>Accept-Language</code> <a href=\"https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.4\">header</a>. This header is used for localizing cities and countries. The default language is English (en), but you can provide any of the languages Spanish (es), French (fr), German (de), Portuguese (pt), Turkish (tr), Italian (it) or Polish (pl). </p> <p> E.g. if you search a setlist for a concert that took place in Vienna and you pass &quot;de&quot; as header, you'll get <em>&quot;Wien, &Ouml;sterreich&quot;</em> instead of <em>&quot;Vienna, Austria&quot;</em>.<br/> This also works if you use a different language than the country's native language. </p> <p> E.g. for a concert in New York, you'll get <em>&quot;Nueva York, Estados Unidos&quot;</em> instead of <em>&quot;New York, United States&quot;</em> if you pass &quot;es&quot; as language. </p>  <h2>API Keys</h2>  API keys (<a href=\"https://www.setlist.fm/settings/api\">application form</a>) must be included in the request with the <code>x-api-key</code> header.  <h2>Version History</h2> <table class=\"table table-bordered table-versions\"> <thead> <tr> <th>Version</th> <th>Docs</th> <th>End of Service</th> </tr> </thead> <tbody> <tr> <td><strong>1.0</strong></td> <td><a href=\"/docs/1.0\">Docs</a></td> <td>-</li> </tr> <tr> <td><strong>0.1</strong></td> <td></td> <td>December 31, 2017</li> </tr> </tbody> </table>
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIXml_ns0_artist.h
 *
 * This class represents an artist. An artist is a musician or a group of musicians. Each artist has a definite &lt;a href&#x3D;\&quot;http://wiki.musicbrainz.org/MBID\&quot;&gt;Musicbrainz Identifier&lt;/a&gt; (MBID) with which the artist can be uniquely identified.
 */

#ifndef OAIXml_ns0_artist_H
#define OAIXml_ns0_artist_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIXml_ns0_artist : public OAIObject {
public:
    OAIXml_ns0_artist();
    OAIXml_ns0_artist(QString json);
    ~OAIXml_ns0_artist() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getDisambiguation() const;
    void setDisambiguation(const QString &disambiguation);
    bool is_disambiguation_Set() const;
    bool is_disambiguation_Valid() const;

    QString getMbid() const;
    void setMbid(const QString &mbid);
    bool is_mbid_Set() const;
    bool is_mbid_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getSortName() const;
    void setSortName(const QString &sort_name);
    bool is_sort_name_Set() const;
    bool is_sort_name_Valid() const;

    double getTmid() const;
    void setTmid(const double &tmid);
    bool is_tmid_Set() const;
    bool is_tmid_Valid() const;

    QString getUrl() const;
    void setUrl(const QString &url);
    bool is_url_Set() const;
    bool is_url_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_disambiguation;
    bool m_disambiguation_isSet;
    bool m_disambiguation_isValid;

    QString m_mbid;
    bool m_mbid_isSet;
    bool m_mbid_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_sort_name;
    bool m_sort_name_isSet;
    bool m_sort_name_isValid;

    double m_tmid;
    bool m_tmid_isSet;
    bool m_tmid_isValid;

    QString m_url;
    bool m_url_isSet;
    bool m_url_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIXml_ns0_artist)

#endif // OAIXml_ns0_artist_H
