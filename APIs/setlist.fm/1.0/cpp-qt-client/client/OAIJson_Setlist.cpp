/**
 * setlist.fm API
 * <p> The setlist.fm API has been designed to give you easy access to setlist data in order to build fancy websites and other applications. Before starting to use the API, be sure to ... <ol> <li>... understand how setlist.fm works (the <a href=\"https://www.setlist.fm/faq\">FAQ</a> and the <a href=\"https://www.setlist.fm/guidelines\">Guidelines</a> are a good starting point),</li> <li>... read this documentation carefully and</li> <li>... <a href=\"https://www.setlist.fm/settings/api\">apply for an API key</a> (link for logged in users only) - if you're no registered user yet, then <a href=\"https://www.setlist.fm/signup\">register first</a> (it's free).</li> </ol> </p> <p> If this documentation isn't enough or if you've got other things you'd like to tell us about the API, visit the <a href=\"https://www.setlist.fm/forum/setlistfm/setlistfm-api\">API Forum</a>. </p> <p> Note that the setlist.fm API is, according to the <a href=\"https://www.setlist.fm/help/api-terms\">API terms of service</a>, only free for non-commercial projects. If you're interested in using the API for commercial purposes, <a href=\"https://www.setlist.fm/contact\">contact us</a>. </p>  <h2>About this Service</h2> <p> This service provides methods to get both setlists and components of setlists such as artists, cities, countries or venues. </p>  <h2>Supported Content Types</h2> <p> The REST service currently supports XML (default) and JSON content. </p> <p> To receive a JSON response, set the <code>Accept</code> <a href=\"https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.1\">header</a> to <em>application/json</em>. </p>  <h2>Internationalization</h2> <p> <small>(Please note that this is an experimental feature and does not work for all cities!)</small> </p> <p> Most of the featured methods honor the <code>Accept-Language</code> <a href=\"https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.4\">header</a>. This header is used for localizing cities and countries. The default language is English (en), but you can provide any of the languages Spanish (es), French (fr), German (de), Portuguese (pt), Turkish (tr), Italian (it) or Polish (pl). </p> <p> E.g. if you search a setlist for a concert that took place in Vienna and you pass &quot;de&quot; as header, you'll get <em>&quot;Wien, &Ouml;sterreich&quot;</em> instead of <em>&quot;Vienna, Austria&quot;</em>.<br/> This also works if you use a different language than the country's native language. </p> <p> E.g. for a concert in New York, you'll get <em>&quot;Nueva York, Estados Unidos&quot;</em> instead of <em>&quot;New York, United States&quot;</em> if you pass &quot;es&quot; as language. </p>  <h2>API Keys</h2>  API keys (<a href=\"https://www.setlist.fm/settings/api\">application form</a>) must be included in the request with the <code>x-api-key</code> header.  <h2>Version History</h2> <table class=\"table table-bordered table-versions\"> <thead> <tr> <th>Version</th> <th>Docs</th> <th>End of Service</th> </tr> </thead> <tbody> <tr> <td><strong>1.0</strong></td> <td><a href=\"/docs/1.0\">Docs</a></td> <td>-</li> </tr> <tr> <td><strong>0.1</strong></td> <td></td> <td>December 31, 2017</li> </tr> </tbody> </table>
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIJson_Setlist.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIJson_Setlist::OAIJson_Setlist(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIJson_Setlist::OAIJson_Setlist() {
    this->initializeModel();
}

OAIJson_Setlist::~OAIJson_Setlist() {}

void OAIJson_Setlist::initializeModel() {

    m_artist_isSet = false;
    m_artist_isValid = false;

    m_event_date_isSet = false;
    m_event_date_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_info_isSet = false;
    m_info_isValid = false;

    m_last_fm_event_id_isSet = false;
    m_last_fm_event_id_isValid = false;

    m_last_updated_isSet = false;
    m_last_updated_isValid = false;

    m_r_set_isSet = false;
    m_r_set_isValid = false;

    m_tour_isSet = false;
    m_tour_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_venue_isSet = false;
    m_venue_isValid = false;

    m_version_id_isSet = false;
    m_version_id_isValid = false;
}

void OAIJson_Setlist::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIJson_Setlist::fromJsonObject(QJsonObject json) {

    m_artist_isValid = ::OpenAPI::fromJsonValue(m_artist, json[QString("artist")]);
    m_artist_isSet = !json[QString("artist")].isNull() && m_artist_isValid;

    m_event_date_isValid = ::OpenAPI::fromJsonValue(m_event_date, json[QString("eventDate")]);
    m_event_date_isSet = !json[QString("eventDate")].isNull() && m_event_date_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_info_isValid = ::OpenAPI::fromJsonValue(m_info, json[QString("info")]);
    m_info_isSet = !json[QString("info")].isNull() && m_info_isValid;

    m_last_fm_event_id_isValid = ::OpenAPI::fromJsonValue(m_last_fm_event_id, json[QString("lastFmEventId")]);
    m_last_fm_event_id_isSet = !json[QString("lastFmEventId")].isNull() && m_last_fm_event_id_isValid;

    m_last_updated_isValid = ::OpenAPI::fromJsonValue(m_last_updated, json[QString("lastUpdated")]);
    m_last_updated_isSet = !json[QString("lastUpdated")].isNull() && m_last_updated_isValid;

    m_r_set_isValid = ::OpenAPI::fromJsonValue(m_r_set, json[QString("set")]);
    m_r_set_isSet = !json[QString("set")].isNull() && m_r_set_isValid;

    m_tour_isValid = ::OpenAPI::fromJsonValue(m_tour, json[QString("tour")]);
    m_tour_isSet = !json[QString("tour")].isNull() && m_tour_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_venue_isValid = ::OpenAPI::fromJsonValue(m_venue, json[QString("venue")]);
    m_venue_isSet = !json[QString("venue")].isNull() && m_venue_isValid;

    m_version_id_isValid = ::OpenAPI::fromJsonValue(m_version_id, json[QString("versionId")]);
    m_version_id_isSet = !json[QString("versionId")].isNull() && m_version_id_isValid;
}

QString OAIJson_Setlist::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIJson_Setlist::asJsonObject() const {
    QJsonObject obj;
    if (m_artist.isSet()) {
        obj.insert(QString("artist"), ::OpenAPI::toJsonValue(m_artist));
    }
    if (m_event_date_isSet) {
        obj.insert(QString("eventDate"), ::OpenAPI::toJsonValue(m_event_date));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_info_isSet) {
        obj.insert(QString("info"), ::OpenAPI::toJsonValue(m_info));
    }
    if (m_last_fm_event_id_isSet) {
        obj.insert(QString("lastFmEventId"), ::OpenAPI::toJsonValue(m_last_fm_event_id));
    }
    if (m_last_updated_isSet) {
        obj.insert(QString("lastUpdated"), ::OpenAPI::toJsonValue(m_last_updated));
    }
    if (m_r_set.size() > 0) {
        obj.insert(QString("set"), ::OpenAPI::toJsonValue(m_r_set));
    }
    if (m_tour.isSet()) {
        obj.insert(QString("tour"), ::OpenAPI::toJsonValue(m_tour));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_venue.isSet()) {
        obj.insert(QString("venue"), ::OpenAPI::toJsonValue(m_venue));
    }
    if (m_version_id_isSet) {
        obj.insert(QString("versionId"), ::OpenAPI::toJsonValue(m_version_id));
    }
    return obj;
}

OAIJson_Artist OAIJson_Setlist::getArtist() const {
    return m_artist;
}
void OAIJson_Setlist::setArtist(const OAIJson_Artist &artist) {
    m_artist = artist;
    m_artist_isSet = true;
}

bool OAIJson_Setlist::is_artist_Set() const{
    return m_artist_isSet;
}

bool OAIJson_Setlist::is_artist_Valid() const{
    return m_artist_isValid;
}

QString OAIJson_Setlist::getEventDate() const {
    return m_event_date;
}
void OAIJson_Setlist::setEventDate(const QString &event_date) {
    m_event_date = event_date;
    m_event_date_isSet = true;
}

bool OAIJson_Setlist::is_event_date_Set() const{
    return m_event_date_isSet;
}

bool OAIJson_Setlist::is_event_date_Valid() const{
    return m_event_date_isValid;
}

QString OAIJson_Setlist::getId() const {
    return m_id;
}
void OAIJson_Setlist::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIJson_Setlist::is_id_Set() const{
    return m_id_isSet;
}

bool OAIJson_Setlist::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIJson_Setlist::getInfo() const {
    return m_info;
}
void OAIJson_Setlist::setInfo(const QString &info) {
    m_info = info;
    m_info_isSet = true;
}

bool OAIJson_Setlist::is_info_Set() const{
    return m_info_isSet;
}

bool OAIJson_Setlist::is_info_Valid() const{
    return m_info_isValid;
}

double OAIJson_Setlist::getLastFmEventId() const {
    return m_last_fm_event_id;
}
void OAIJson_Setlist::setLastFmEventId(const double &last_fm_event_id) {
    m_last_fm_event_id = last_fm_event_id;
    m_last_fm_event_id_isSet = true;
}

bool OAIJson_Setlist::is_last_fm_event_id_Set() const{
    return m_last_fm_event_id_isSet;
}

bool OAIJson_Setlist::is_last_fm_event_id_Valid() const{
    return m_last_fm_event_id_isValid;
}

QString OAIJson_Setlist::getLastUpdated() const {
    return m_last_updated;
}
void OAIJson_Setlist::setLastUpdated(const QString &last_updated) {
    m_last_updated = last_updated;
    m_last_updated_isSet = true;
}

bool OAIJson_Setlist::is_last_updated_Set() const{
    return m_last_updated_isSet;
}

bool OAIJson_Setlist::is_last_updated_Valid() const{
    return m_last_updated_isValid;
}

QList<OAIJson_Set> OAIJson_Setlist::getRSet() const {
    return m_r_set;
}
void OAIJson_Setlist::setRSet(const QList<OAIJson_Set> &r_set) {
    m_r_set = r_set;
    m_r_set_isSet = true;
}

bool OAIJson_Setlist::is_r_set_Set() const{
    return m_r_set_isSet;
}

bool OAIJson_Setlist::is_r_set_Valid() const{
    return m_r_set_isValid;
}

OAIJson_Tour OAIJson_Setlist::getTour() const {
    return m_tour;
}
void OAIJson_Setlist::setTour(const OAIJson_Tour &tour) {
    m_tour = tour;
    m_tour_isSet = true;
}

bool OAIJson_Setlist::is_tour_Set() const{
    return m_tour_isSet;
}

bool OAIJson_Setlist::is_tour_Valid() const{
    return m_tour_isValid;
}

QString OAIJson_Setlist::getUrl() const {
    return m_url;
}
void OAIJson_Setlist::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIJson_Setlist::is_url_Set() const{
    return m_url_isSet;
}

bool OAIJson_Setlist::is_url_Valid() const{
    return m_url_isValid;
}

OAIJson_Venue OAIJson_Setlist::getVenue() const {
    return m_venue;
}
void OAIJson_Setlist::setVenue(const OAIJson_Venue &venue) {
    m_venue = venue;
    m_venue_isSet = true;
}

bool OAIJson_Setlist::is_venue_Set() const{
    return m_venue_isSet;
}

bool OAIJson_Setlist::is_venue_Valid() const{
    return m_venue_isValid;
}

QString OAIJson_Setlist::getVersionId() const {
    return m_version_id;
}
void OAIJson_Setlist::setVersionId(const QString &version_id) {
    m_version_id = version_id;
    m_version_id_isSet = true;
}

bool OAIJson_Setlist::is_version_id_Set() const{
    return m_version_id_isSet;
}

bool OAIJson_Setlist::is_version_id_Valid() const{
    return m_version_id_isValid;
}

bool OAIJson_Setlist::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_artist.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_info_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_fm_event_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_set.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_tour.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_venue.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIJson_Setlist::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
