/**
 * setlist.fm API
 * <p> The setlist.fm API has been designed to give you easy access to setlist data in order to build fancy websites and other applications. Before starting to use the API, be sure to ... <ol> <li>... understand how setlist.fm works (the <a href=\"https://www.setlist.fm/faq\">FAQ</a> and the <a href=\"https://www.setlist.fm/guidelines\">Guidelines</a> are a good starting point),</li> <li>... read this documentation carefully and</li> <li>... <a href=\"https://www.setlist.fm/settings/api\">apply for an API key</a> (link for logged in users only) - if you're no registered user yet, then <a href=\"https://www.setlist.fm/signup\">register first</a> (it's free).</li> </ol> </p> <p> If this documentation isn't enough or if you've got other things you'd like to tell us about the API, visit the <a href=\"https://www.setlist.fm/forum/setlistfm/setlistfm-api\">API Forum</a>. </p> <p> Note that the setlist.fm API is, according to the <a href=\"https://www.setlist.fm/help/api-terms\">API terms of service</a>, only free for non-commercial projects. If you're interested in using the API for commercial purposes, <a href=\"https://www.setlist.fm/contact\">contact us</a>. </p>  <h2>About this Service</h2> <p> This service provides methods to get both setlists and components of setlists such as artists, cities, countries or venues. </p>  <h2>Supported Content Types</h2> <p> The REST service currently supports XML (default) and JSON content. </p> <p> To receive a JSON response, set the <code>Accept</code> <a href=\"https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.1\">header</a> to <em>application/json</em>. </p>  <h2>Internationalization</h2> <p> <small>(Please note that this is an experimental feature and does not work for all cities!)</small> </p> <p> Most of the featured methods honor the <code>Accept-Language</code> <a href=\"https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.4\">header</a>. This header is used for localizing cities and countries. The default language is English (en), but you can provide any of the languages Spanish (es), French (fr), German (de), Portuguese (pt), Turkish (tr), Italian (it) or Polish (pl). </p> <p> E.g. if you search a setlist for a concert that took place in Vienna and you pass &quot;de&quot; as header, you'll get <em>&quot;Wien, &Ouml;sterreich&quot;</em> instead of <em>&quot;Vienna, Austria&quot;</em>.<br/> This also works if you use a different language than the country's native language. </p> <p> E.g. for a concert in New York, you'll get <em>&quot;Nueva York, Estados Unidos&quot;</em> instead of <em>&quot;New York, United States&quot;</em> if you pass &quot;es&quot; as language. </p>  <h2>API Keys</h2>  API keys (<a href=\"https://www.setlist.fm/settings/api\">application form</a>) must be included in the request with the <code>x-api-key</code> header.  <h2>Version History</h2> <table class=\"table table-bordered table-versions\"> <thead> <tr> <th>Version</th> <th>Docs</th> <th>End of Service</th> </tr> </thead> <tbody> <tr> <td><strong>1.0</strong></td> <td><a href=\"/docs/1.0\">Docs</a></td> <td>-</li> </tr> <tr> <td><strong>0.1</strong></td> <td></td> <td>December 31, 2017</li> </tr> </tbody> </table>
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIXml_ns0_user.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIXml_ns0_user::OAIXml_ns0_user(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIXml_ns0_user::OAIXml_ns0_user() {
    this->initializeModel();
}

OAIXml_ns0_user::~OAIXml_ns0_user() {}

void OAIXml_ns0_user::initializeModel() {

    m_about_isSet = false;
    m_about_isValid = false;

    m_flickr_isSet = false;
    m_flickr_isValid = false;

    m_fullname_isSet = false;
    m_fullname_isValid = false;

    m_last_fm_isSet = false;
    m_last_fm_isValid = false;

    m_my_space_isSet = false;
    m_my_space_isValid = false;

    m_twitter_isSet = false;
    m_twitter_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;

    m_website_isSet = false;
    m_website_isValid = false;
}

void OAIXml_ns0_user::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIXml_ns0_user::fromJsonObject(QJsonObject json) {

    m_about_isValid = ::OpenAPI::fromJsonValue(m_about, json[QString("about")]);
    m_about_isSet = !json[QString("about")].isNull() && m_about_isValid;

    m_flickr_isValid = ::OpenAPI::fromJsonValue(m_flickr, json[QString("flickr")]);
    m_flickr_isSet = !json[QString("flickr")].isNull() && m_flickr_isValid;

    m_fullname_isValid = ::OpenAPI::fromJsonValue(m_fullname, json[QString("fullname")]);
    m_fullname_isSet = !json[QString("fullname")].isNull() && m_fullname_isValid;

    m_last_fm_isValid = ::OpenAPI::fromJsonValue(m_last_fm, json[QString("lastFm")]);
    m_last_fm_isSet = !json[QString("lastFm")].isNull() && m_last_fm_isValid;

    m_my_space_isValid = ::OpenAPI::fromJsonValue(m_my_space, json[QString("mySpace")]);
    m_my_space_isSet = !json[QString("mySpace")].isNull() && m_my_space_isValid;

    m_twitter_isValid = ::OpenAPI::fromJsonValue(m_twitter, json[QString("twitter")]);
    m_twitter_isSet = !json[QString("twitter")].isNull() && m_twitter_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("userId")]);
    m_user_id_isSet = !json[QString("userId")].isNull() && m_user_id_isValid;

    m_website_isValid = ::OpenAPI::fromJsonValue(m_website, json[QString("website")]);
    m_website_isSet = !json[QString("website")].isNull() && m_website_isValid;
}

QString OAIXml_ns0_user::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIXml_ns0_user::asJsonObject() const {
    QJsonObject obj;
    if (m_about_isSet) {
        obj.insert(QString("about"), ::OpenAPI::toJsonValue(m_about));
    }
    if (m_flickr_isSet) {
        obj.insert(QString("flickr"), ::OpenAPI::toJsonValue(m_flickr));
    }
    if (m_fullname_isSet) {
        obj.insert(QString("fullname"), ::OpenAPI::toJsonValue(m_fullname));
    }
    if (m_last_fm_isSet) {
        obj.insert(QString("lastFm"), ::OpenAPI::toJsonValue(m_last_fm));
    }
    if (m_my_space_isSet) {
        obj.insert(QString("mySpace"), ::OpenAPI::toJsonValue(m_my_space));
    }
    if (m_twitter_isSet) {
        obj.insert(QString("twitter"), ::OpenAPI::toJsonValue(m_twitter));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("userId"), ::OpenAPI::toJsonValue(m_user_id));
    }
    if (m_website_isSet) {
        obj.insert(QString("website"), ::OpenAPI::toJsonValue(m_website));
    }
    return obj;
}

QString OAIXml_ns0_user::getAbout() const {
    return m_about;
}
void OAIXml_ns0_user::setAbout(const QString &about) {
    m_about = about;
    m_about_isSet = true;
}

bool OAIXml_ns0_user::is_about_Set() const{
    return m_about_isSet;
}

bool OAIXml_ns0_user::is_about_Valid() const{
    return m_about_isValid;
}

QString OAIXml_ns0_user::getFlickr() const {
    return m_flickr;
}
void OAIXml_ns0_user::setFlickr(const QString &flickr) {
    m_flickr = flickr;
    m_flickr_isSet = true;
}

bool OAIXml_ns0_user::is_flickr_Set() const{
    return m_flickr_isSet;
}

bool OAIXml_ns0_user::is_flickr_Valid() const{
    return m_flickr_isValid;
}

QString OAIXml_ns0_user::getFullname() const {
    return m_fullname;
}
void OAIXml_ns0_user::setFullname(const QString &fullname) {
    m_fullname = fullname;
    m_fullname_isSet = true;
}

bool OAIXml_ns0_user::is_fullname_Set() const{
    return m_fullname_isSet;
}

bool OAIXml_ns0_user::is_fullname_Valid() const{
    return m_fullname_isValid;
}

QString OAIXml_ns0_user::getLastFm() const {
    return m_last_fm;
}
void OAIXml_ns0_user::setLastFm(const QString &last_fm) {
    m_last_fm = last_fm;
    m_last_fm_isSet = true;
}

bool OAIXml_ns0_user::is_last_fm_Set() const{
    return m_last_fm_isSet;
}

bool OAIXml_ns0_user::is_last_fm_Valid() const{
    return m_last_fm_isValid;
}

QString OAIXml_ns0_user::getMySpace() const {
    return m_my_space;
}
void OAIXml_ns0_user::setMySpace(const QString &my_space) {
    m_my_space = my_space;
    m_my_space_isSet = true;
}

bool OAIXml_ns0_user::is_my_space_Set() const{
    return m_my_space_isSet;
}

bool OAIXml_ns0_user::is_my_space_Valid() const{
    return m_my_space_isValid;
}

QString OAIXml_ns0_user::getTwitter() const {
    return m_twitter;
}
void OAIXml_ns0_user::setTwitter(const QString &twitter) {
    m_twitter = twitter;
    m_twitter_isSet = true;
}

bool OAIXml_ns0_user::is_twitter_Set() const{
    return m_twitter_isSet;
}

bool OAIXml_ns0_user::is_twitter_Valid() const{
    return m_twitter_isValid;
}

QString OAIXml_ns0_user::getUrl() const {
    return m_url;
}
void OAIXml_ns0_user::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIXml_ns0_user::is_url_Set() const{
    return m_url_isSet;
}

bool OAIXml_ns0_user::is_url_Valid() const{
    return m_url_isValid;
}

QString OAIXml_ns0_user::getUserId() const {
    return m_user_id;
}
void OAIXml_ns0_user::setUserId(const QString &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAIXml_ns0_user::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAIXml_ns0_user::is_user_id_Valid() const{
    return m_user_id_isValid;
}

QString OAIXml_ns0_user::getWebsite() const {
    return m_website;
}
void OAIXml_ns0_user::setWebsite(const QString &website) {
    m_website = website;
    m_website_isSet = true;
}

bool OAIXml_ns0_user::is_website_Set() const{
    return m_website_isSet;
}

bool OAIXml_ns0_user::is_website_Valid() const{
    return m_website_isValid;
}

bool OAIXml_ns0_user::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_about_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_flickr_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fullname_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_fm_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_my_space_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_twitter_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_website_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIXml_ns0_user::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
