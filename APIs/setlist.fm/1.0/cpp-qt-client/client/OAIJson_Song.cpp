/**
 * setlist.fm API
 * <p> The setlist.fm API has been designed to give you easy access to setlist data in order to build fancy websites and other applications. Before starting to use the API, be sure to ... <ol> <li>... understand how setlist.fm works (the <a href=\"https://www.setlist.fm/faq\">FAQ</a> and the <a href=\"https://www.setlist.fm/guidelines\">Guidelines</a> are a good starting point),</li> <li>... read this documentation carefully and</li> <li>... <a href=\"https://www.setlist.fm/settings/api\">apply for an API key</a> (link for logged in users only) - if you're no registered user yet, then <a href=\"https://www.setlist.fm/signup\">register first</a> (it's free).</li> </ol> </p> <p> If this documentation isn't enough or if you've got other things you'd like to tell us about the API, visit the <a href=\"https://www.setlist.fm/forum/setlistfm/setlistfm-api\">API Forum</a>. </p> <p> Note that the setlist.fm API is, according to the <a href=\"https://www.setlist.fm/help/api-terms\">API terms of service</a>, only free for non-commercial projects. If you're interested in using the API for commercial purposes, <a href=\"https://www.setlist.fm/contact\">contact us</a>. </p>  <h2>About this Service</h2> <p> This service provides methods to get both setlists and components of setlists such as artists, cities, countries or venues. </p>  <h2>Supported Content Types</h2> <p> The REST service currently supports XML (default) and JSON content. </p> <p> To receive a JSON response, set the <code>Accept</code> <a href=\"https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.1\">header</a> to <em>application/json</em>. </p>  <h2>Internationalization</h2> <p> <small>(Please note that this is an experimental feature and does not work for all cities!)</small> </p> <p> Most of the featured methods honor the <code>Accept-Language</code> <a href=\"https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.4\">header</a>. This header is used for localizing cities and countries. The default language is English (en), but you can provide any of the languages Spanish (es), French (fr), German (de), Portuguese (pt), Turkish (tr), Italian (it) or Polish (pl). </p> <p> E.g. if you search a setlist for a concert that took place in Vienna and you pass &quot;de&quot; as header, you'll get <em>&quot;Wien, &Ouml;sterreich&quot;</em> instead of <em>&quot;Vienna, Austria&quot;</em>.<br/> This also works if you use a different language than the country's native language. </p> <p> E.g. for a concert in New York, you'll get <em>&quot;Nueva York, Estados Unidos&quot;</em> instead of <em>&quot;New York, United States&quot;</em> if you pass &quot;es&quot; as language. </p>  <h2>API Keys</h2>  API keys (<a href=\"https://www.setlist.fm/settings/api\">application form</a>) must be included in the request with the <code>x-api-key</code> header.  <h2>Version History</h2> <table class=\"table table-bordered table-versions\"> <thead> <tr> <th>Version</th> <th>Docs</th> <th>End of Service</th> </tr> </thead> <tbody> <tr> <td><strong>1.0</strong></td> <td><a href=\"/docs/1.0\">Docs</a></td> <td>-</li> </tr> <tr> <td><strong>0.1</strong></td> <td></td> <td>December 31, 2017</li> </tr> </tbody> </table>
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIJson_Song.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIJson_Song::OAIJson_Song(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIJson_Song::OAIJson_Song() {
    this->initializeModel();
}

OAIJson_Song::~OAIJson_Song() {}

void OAIJson_Song::initializeModel() {

    m_cover_isSet = false;
    m_cover_isValid = false;

    m_info_isSet = false;
    m_info_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_tape_isSet = false;
    m_tape_isValid = false;

    m_with_isSet = false;
    m_with_isValid = false;
}

void OAIJson_Song::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIJson_Song::fromJsonObject(QJsonObject json) {

    m_cover_isValid = ::OpenAPI::fromJsonValue(m_cover, json[QString("cover")]);
    m_cover_isSet = !json[QString("cover")].isNull() && m_cover_isValid;

    m_info_isValid = ::OpenAPI::fromJsonValue(m_info, json[QString("info")]);
    m_info_isSet = !json[QString("info")].isNull() && m_info_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_tape_isValid = ::OpenAPI::fromJsonValue(m_tape, json[QString("tape")]);
    m_tape_isSet = !json[QString("tape")].isNull() && m_tape_isValid;

    m_with_isValid = ::OpenAPI::fromJsonValue(m_with, json[QString("with")]);
    m_with_isSet = !json[QString("with")].isNull() && m_with_isValid;
}

QString OAIJson_Song::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIJson_Song::asJsonObject() const {
    QJsonObject obj;
    if (m_cover.isSet()) {
        obj.insert(QString("cover"), ::OpenAPI::toJsonValue(m_cover));
    }
    if (m_info_isSet) {
        obj.insert(QString("info"), ::OpenAPI::toJsonValue(m_info));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_tape_isSet) {
        obj.insert(QString("tape"), ::OpenAPI::toJsonValue(m_tape));
    }
    if (m_with.isSet()) {
        obj.insert(QString("with"), ::OpenAPI::toJsonValue(m_with));
    }
    return obj;
}

OAIJson_Artist OAIJson_Song::getCover() const {
    return m_cover;
}
void OAIJson_Song::setCover(const OAIJson_Artist &cover) {
    m_cover = cover;
    m_cover_isSet = true;
}

bool OAIJson_Song::is_cover_Set() const{
    return m_cover_isSet;
}

bool OAIJson_Song::is_cover_Valid() const{
    return m_cover_isValid;
}

QString OAIJson_Song::getInfo() const {
    return m_info;
}
void OAIJson_Song::setInfo(const QString &info) {
    m_info = info;
    m_info_isSet = true;
}

bool OAIJson_Song::is_info_Set() const{
    return m_info_isSet;
}

bool OAIJson_Song::is_info_Valid() const{
    return m_info_isValid;
}

QString OAIJson_Song::getName() const {
    return m_name;
}
void OAIJson_Song::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIJson_Song::is_name_Set() const{
    return m_name_isSet;
}

bool OAIJson_Song::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIJson_Song::isTape() const {
    return m_tape;
}
void OAIJson_Song::setTape(const bool &tape) {
    m_tape = tape;
    m_tape_isSet = true;
}

bool OAIJson_Song::is_tape_Set() const{
    return m_tape_isSet;
}

bool OAIJson_Song::is_tape_Valid() const{
    return m_tape_isValid;
}

OAIJson_Artist OAIJson_Song::getWith() const {
    return m_with;
}
void OAIJson_Song::setWith(const OAIJson_Artist &with) {
    m_with = with;
    m_with_isSet = true;
}

bool OAIJson_Song::is_with_Set() const{
    return m_with_isSet;
}

bool OAIJson_Song::is_with_Valid() const{
    return m_with_isValid;
}

bool OAIJson_Song::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cover.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_info_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tape_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_with.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIJson_Song::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
