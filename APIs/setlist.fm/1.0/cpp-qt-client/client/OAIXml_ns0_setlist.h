/**
 * setlist.fm API
 * <p> The setlist.fm API has been designed to give you easy access to setlist data in order to build fancy websites and other applications. Before starting to use the API, be sure to ... <ol> <li>... understand how setlist.fm works (the <a href=\"https://www.setlist.fm/faq\">FAQ</a> and the <a href=\"https://www.setlist.fm/guidelines\">Guidelines</a> are a good starting point),</li> <li>... read this documentation carefully and</li> <li>... <a href=\"https://www.setlist.fm/settings/api\">apply for an API key</a> (link for logged in users only) - if you're no registered user yet, then <a href=\"https://www.setlist.fm/signup\">register first</a> (it's free).</li> </ol> </p> <p> If this documentation isn't enough or if you've got other things you'd like to tell us about the API, visit the <a href=\"https://www.setlist.fm/forum/setlistfm/setlistfm-api\">API Forum</a>. </p> <p> Note that the setlist.fm API is, according to the <a href=\"https://www.setlist.fm/help/api-terms\">API terms of service</a>, only free for non-commercial projects. If you're interested in using the API for commercial purposes, <a href=\"https://www.setlist.fm/contact\">contact us</a>. </p>  <h2>About this Service</h2> <p> This service provides methods to get both setlists and components of setlists such as artists, cities, countries or venues. </p>  <h2>Supported Content Types</h2> <p> The REST service currently supports XML (default) and JSON content. </p> <p> To receive a JSON response, set the <code>Accept</code> <a href=\"https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.1\">header</a> to <em>application/json</em>. </p>  <h2>Internationalization</h2> <p> <small>(Please note that this is an experimental feature and does not work for all cities!)</small> </p> <p> Most of the featured methods honor the <code>Accept-Language</code> <a href=\"https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.4\">header</a>. This header is used for localizing cities and countries. The default language is English (en), but you can provide any of the languages Spanish (es), French (fr), German (de), Portuguese (pt), Turkish (tr), Italian (it) or Polish (pl). </p> <p> E.g. if you search a setlist for a concert that took place in Vienna and you pass &quot;de&quot; as header, you'll get <em>&quot;Wien, &Ouml;sterreich&quot;</em> instead of <em>&quot;Vienna, Austria&quot;</em>.<br/> This also works if you use a different language than the country's native language. </p> <p> E.g. for a concert in New York, you'll get <em>&quot;Nueva York, Estados Unidos&quot;</em> instead of <em>&quot;New York, United States&quot;</em> if you pass &quot;es&quot; as language. </p>  <h2>API Keys</h2>  API keys (<a href=\"https://www.setlist.fm/settings/api\">application form</a>) must be included in the request with the <code>x-api-key</code> header.  <h2>Version History</h2> <table class=\"table table-bordered table-versions\"> <thead> <tr> <th>Version</th> <th>Docs</th> <th>End of Service</th> </tr> </thead> <tbody> <tr> <td><strong>1.0</strong></td> <td><a href=\"/docs/1.0\">Docs</a></td> <td>-</li> </tr> <tr> <td><strong>0.1</strong></td> <td></td> <td>December 31, 2017</li> </tr> </tbody> </table>
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIXml_ns0_setlist.h
 *
 * Setlists, that&#39;s what it&#39;s all about. So if you&#39;re trying to use this API without knowing what a setlist is then you&#39;re kinda wrong on this page ;-).  A setlist can be distinguished from other setlists by its unique id. But as &lt;a href&#x3D;\&quot;https://www.setlist.fm/\&quot;&gt;setlist.fm&lt;/a&gt; works the wiki way, there can be different versions of one setlist (each time a user updates a setlist a new version gets created). These different versions have a unique id on its own. So setlists can have the same id although they differ as far as the content is concerned - thus the best way to check if two setlists are the same is to compare their versionIds.
 */

#ifndef OAIXml_ns0_setlist_H
#define OAIXml_ns0_setlist_H

#include <QJsonObject>

#include "OAIXml_ns0_artist.h"
#include "OAIXml_ns0_set.h"
#include "OAIXml_ns0_tour.h"
#include "OAIXml_ns0_venue.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIXml_ns0_artist;
class OAIXml_ns0_set;
class OAIXml_ns0_tour;
class OAIXml_ns0_venue;

class OAIXml_ns0_setlist : public OAIObject {
public:
    OAIXml_ns0_setlist();
    OAIXml_ns0_setlist(QString json);
    ~OAIXml_ns0_setlist() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIXml_ns0_artist getArtist() const;
    void setArtist(const OAIXml_ns0_artist &artist);
    bool is_artist_Set() const;
    bool is_artist_Valid() const;

    QString getEventDate() const;
    void setEventDate(const QString &event_date);
    bool is_event_date_Set() const;
    bool is_event_date_Valid() const;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QString getInfo() const;
    void setInfo(const QString &info);
    bool is_info_Set() const;
    bool is_info_Valid() const;

    double getLastFmEventId() const;
    void setLastFmEventId(const double &last_fm_event_id);
    bool is_last_fm_event_id_Set() const;
    bool is_last_fm_event_id_Valid() const;

    QString getLastUpdated() const;
    void setLastUpdated(const QString &last_updated);
    bool is_last_updated_Set() const;
    bool is_last_updated_Valid() const;

    OAIXml_ns0_set getRSet() const;
    void setRSet(const OAIXml_ns0_set &r_set);
    bool is_r_set_Set() const;
    bool is_r_set_Valid() const;

    OAIXml_ns0_tour getTour() const;
    void setTour(const OAIXml_ns0_tour &tour);
    bool is_tour_Set() const;
    bool is_tour_Valid() const;

    QString getUrl() const;
    void setUrl(const QString &url);
    bool is_url_Set() const;
    bool is_url_Valid() const;

    OAIXml_ns0_venue getVenue() const;
    void setVenue(const OAIXml_ns0_venue &venue);
    bool is_venue_Set() const;
    bool is_venue_Valid() const;

    QString getVersionId() const;
    void setVersionId(const QString &version_id);
    bool is_version_id_Set() const;
    bool is_version_id_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIXml_ns0_artist m_artist;
    bool m_artist_isSet;
    bool m_artist_isValid;

    QString m_event_date;
    bool m_event_date_isSet;
    bool m_event_date_isValid;

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    QString m_info;
    bool m_info_isSet;
    bool m_info_isValid;

    double m_last_fm_event_id;
    bool m_last_fm_event_id_isSet;
    bool m_last_fm_event_id_isValid;

    QString m_last_updated;
    bool m_last_updated_isSet;
    bool m_last_updated_isValid;

    OAIXml_ns0_set m_r_set;
    bool m_r_set_isSet;
    bool m_r_set_isValid;

    OAIXml_ns0_tour m_tour;
    bool m_tour_isSet;
    bool m_tour_isValid;

    QString m_url;
    bool m_url_isSet;
    bool m_url_isValid;

    OAIXml_ns0_venue m_venue;
    bool m_venue_isSet;
    bool m_venue_isValid;

    QString m_version_id;
    bool m_version_id_isSet;
    bool m_version_id_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIXml_ns0_setlist)

#endif // OAIXml_ns0_setlist_H
