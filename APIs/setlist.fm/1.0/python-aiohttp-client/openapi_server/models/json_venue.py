# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.json_city import JsonCity
from openapi_server import util


class JsonVenue(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, city: JsonCity=None, id: str=None, name: str=None, url: str=None):
        """JsonVenue - a model defined in OpenAPI

        :param city: The city of this JsonVenue.
        :param id: The id of this JsonVenue.
        :param name: The name of this JsonVenue.
        :param url: The url of this JsonVenue.
        """
        self.openapi_types = {
            'city': JsonCity,
            'id': str,
            'name': str,
            'url': str
        }

        self.attribute_map = {
            'city': 'city',
            'id': 'id',
            'name': 'name',
            'url': 'url'
        }

        self._city = city
        self._id = id
        self._name = name
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'JsonVenue':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The json_Venue of this JsonVenue.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def city(self):
        """Gets the city of this JsonVenue.


        :return: The city of this JsonVenue.
        :rtype: JsonCity
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this JsonVenue.


        :param city: The city of this JsonVenue.
        :type city: JsonCity
        """

        self._city = city

    @property
    def id(self):
        """Gets the id of this JsonVenue.

        unique identifier

        :return: The id of this JsonVenue.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this JsonVenue.

        unique identifier

        :param id: The id of this JsonVenue.
        :type id: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this JsonVenue.

        the name of the venue, usually without city and country. E.g. <em>&quot;Madison Square Garden&quot;</em> or <em>&quot;Royal Albert Hall&quot;</em>

        :return: The name of this JsonVenue.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this JsonVenue.

        the name of the venue, usually without city and country. E.g. <em>&quot;Madison Square Garden&quot;</em> or <em>&quot;Royal Albert Hall&quot;</em>

        :param name: The name of this JsonVenue.
        :type name: str
        """

        self._name = name

    @property
    def url(self):
        """Gets the url of this JsonVenue.

        the attribution url

        :return: The url of this JsonVenue.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this JsonVenue.

        the attribution url

        :param url: The url of this JsonVenue.
        :type url: str
        """

        self._url = url
