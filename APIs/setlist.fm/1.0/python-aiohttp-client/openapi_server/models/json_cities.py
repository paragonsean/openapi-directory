# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.json_city import JsonCity
from openapi_server import util


class JsonCities(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cities: List[JsonCity]=None, items_per_page: float=None, page: float=None, total: float=None):
        """JsonCities - a model defined in OpenAPI

        :param cities: The cities of this JsonCities.
        :param items_per_page: The items_per_page of this JsonCities.
        :param page: The page of this JsonCities.
        :param total: The total of this JsonCities.
        """
        self.openapi_types = {
            'cities': List[JsonCity],
            'items_per_page': float,
            'page': float,
            'total': float
        }

        self.attribute_map = {
            'cities': 'cities',
            'items_per_page': 'itemsPerPage',
            'page': 'page',
            'total': 'total'
        }

        self._cities = cities
        self._items_per_page = items_per_page
        self._page = page
        self._total = total

    @classmethod
    def from_dict(cls, dikt: dict) -> 'JsonCities':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The json_Cities of this JsonCities.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cities(self):
        """Gets the cities of this JsonCities.

        result list of cities

        :return: The cities of this JsonCities.
        :rtype: List[JsonCity]
        """
        return self._cities

    @cities.setter
    def cities(self, cities):
        """Sets the cities of this JsonCities.

        result list of cities

        :param cities: The cities of this JsonCities.
        :type cities: List[JsonCity]
        """

        self._cities = cities

    @property
    def items_per_page(self):
        """Gets the items_per_page of this JsonCities.

        the amount of items you get per page

        :return: The items_per_page of this JsonCities.
        :rtype: float
        """
        return self._items_per_page

    @items_per_page.setter
    def items_per_page(self, items_per_page):
        """Sets the items_per_page of this JsonCities.

        the amount of items you get per page

        :param items_per_page: The items_per_page of this JsonCities.
        :type items_per_page: float
        """

        self._items_per_page = items_per_page

    @property
    def page(self):
        """Gets the page of this JsonCities.

        the current page. starts at 1

        :return: The page of this JsonCities.
        :rtype: float
        """
        return self._page

    @page.setter
    def page(self, page):
        """Sets the page of this JsonCities.

        the current page. starts at 1

        :param page: The page of this JsonCities.
        :type page: float
        """

        self._page = page

    @property
    def total(self):
        """Gets the total of this JsonCities.

        the total amount of items matching the query

        :return: The total of this JsonCities.
        :rtype: float
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this JsonCities.

        the total amount of items matching the query

        :param total: The total of this JsonCities.
        :type total: float
        """

        self._total = total
