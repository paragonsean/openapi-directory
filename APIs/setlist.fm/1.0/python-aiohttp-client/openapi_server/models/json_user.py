# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class JsonUser(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, about: str=None, flickr: str=None, fullname: str=None, last_fm: str=None, my_space: str=None, twitter: str=None, url: str=None, user_id: str=None, website: str=None):
        """JsonUser - a model defined in OpenAPI

        :param about: The about of this JsonUser.
        :param flickr: The flickr of this JsonUser.
        :param fullname: The fullname of this JsonUser.
        :param last_fm: The last_fm of this JsonUser.
        :param my_space: The my_space of this JsonUser.
        :param twitter: The twitter of this JsonUser.
        :param url: The url of this JsonUser.
        :param user_id: The user_id of this JsonUser.
        :param website: The website of this JsonUser.
        """
        self.openapi_types = {
            'about': str,
            'flickr': str,
            'fullname': str,
            'last_fm': str,
            'my_space': str,
            'twitter': str,
            'url': str,
            'user_id': str,
            'website': str
        }

        self.attribute_map = {
            'about': 'about',
            'flickr': 'flickr',
            'fullname': 'fullname',
            'last_fm': 'lastFm',
            'my_space': 'mySpace',
            'twitter': 'twitter',
            'url': 'url',
            'user_id': 'userId',
            'website': 'website'
        }

        self._about = about
        self._flickr = flickr
        self._fullname = fullname
        self._last_fm = last_fm
        self._my_space = my_space
        self._twitter = twitter
        self._url = url
        self._user_id = user_id
        self._website = website

    @classmethod
    def from_dict(cls, dikt: dict) -> 'JsonUser':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The json_User of this JsonUser.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def about(self):
        """Gets the about of this JsonUser.

        never set (deprecated)

        :return: The about of this JsonUser.
        :rtype: str
        """
        return self._about

    @about.setter
    def about(self, about):
        """Sets the about of this JsonUser.

        never set (deprecated)

        :param about: The about of this JsonUser.
        :type about: str
        """

        self._about = about

    @property
    def flickr(self):
        """Gets the flickr of this JsonUser.

        never set (deprecated)

        :return: The flickr of this JsonUser.
        :rtype: str
        """
        return self._flickr

    @flickr.setter
    def flickr(self, flickr):
        """Sets the flickr of this JsonUser.

        never set (deprecated)

        :param flickr: The flickr of this JsonUser.
        :type flickr: str
        """

        self._flickr = flickr

    @property
    def fullname(self):
        """Gets the fullname of this JsonUser.

        never set (deprecated)

        :return: The fullname of this JsonUser.
        :rtype: str
        """
        return self._fullname

    @fullname.setter
    def fullname(self, fullname):
        """Sets the fullname of this JsonUser.

        never set (deprecated)

        :param fullname: The fullname of this JsonUser.
        :type fullname: str
        """

        self._fullname = fullname

    @property
    def last_fm(self):
        """Gets the last_fm of this JsonUser.

        never set (deprecated)

        :return: The last_fm of this JsonUser.
        :rtype: str
        """
        return self._last_fm

    @last_fm.setter
    def last_fm(self, last_fm):
        """Sets the last_fm of this JsonUser.

        never set (deprecated)

        :param last_fm: The last_fm of this JsonUser.
        :type last_fm: str
        """

        self._last_fm = last_fm

    @property
    def my_space(self):
        """Gets the my_space of this JsonUser.

        never set (deprecated)

        :return: The my_space of this JsonUser.
        :rtype: str
        """
        return self._my_space

    @my_space.setter
    def my_space(self, my_space):
        """Sets the my_space of this JsonUser.

        never set (deprecated)

        :param my_space: The my_space of this JsonUser.
        :type my_space: str
        """

        self._my_space = my_space

    @property
    def twitter(self):
        """Gets the twitter of this JsonUser.

        never set (deprecated)

        :return: The twitter of this JsonUser.
        :rtype: str
        """
        return self._twitter

    @twitter.setter
    def twitter(self, twitter):
        """Sets the twitter of this JsonUser.

        never set (deprecated)

        :param twitter: The twitter of this JsonUser.
        :type twitter: str
        """

        self._twitter = twitter

    @property
    def url(self):
        """Gets the url of this JsonUser.

        

        :return: The url of this JsonUser.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this JsonUser.

        

        :param url: The url of this JsonUser.
        :type url: str
        """

        self._url = url

    @property
    def user_id(self):
        """Gets the user_id of this JsonUser.

        

        :return: The user_id of this JsonUser.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this JsonUser.

        

        :param user_id: The user_id of this JsonUser.
        :type user_id: str
        """

        self._user_id = user_id

    @property
    def website(self):
        """Gets the website of this JsonUser.

        never set (deprecated)

        :return: The website of this JsonUser.
        :rtype: str
        """
        return self._website

    @website.setter
    def website(self, website):
        """Sets the website of this JsonUser.

        never set (deprecated)

        :param website: The website of this JsonUser.
        :type website: str
        """

        self._website = website
