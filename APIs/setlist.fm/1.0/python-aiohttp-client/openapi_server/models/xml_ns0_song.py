# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.xml_ns0_artist import XmlNs0Artist
from openapi_server import util


class XmlNs0Song(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cover: XmlNs0Artist=None, info: str=None, name: str=None, tape: bool=None, _with: XmlNs0Artist=None):
        """XmlNs0Song - a model defined in OpenAPI

        :param cover: The cover of this XmlNs0Song.
        :param info: The info of this XmlNs0Song.
        :param name: The name of this XmlNs0Song.
        :param tape: The tape of this XmlNs0Song.
        :param _with: The _with of this XmlNs0Song.
        """
        self.openapi_types = {
            'cover': XmlNs0Artist,
            'info': str,
            'name': str,
            'tape': bool,
            '_with': XmlNs0Artist
        }

        self.attribute_map = {
            'cover': 'cover',
            'info': 'info',
            'name': 'name',
            'tape': 'tape',
            '_with': 'with'
        }

        self._cover = cover
        self._info = info
        self._name = name
        self._tape = tape
        self.__with = _with

    @classmethod
    def from_dict(cls, dikt: dict) -> 'XmlNs0Song':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The xml_ns0_song of this XmlNs0Song.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cover(self):
        """Gets the cover of this XmlNs0Song.


        :return: The cover of this XmlNs0Song.
        :rtype: XmlNs0Artist
        """
        return self._cover

    @cover.setter
    def cover(self, cover):
        """Sets the cover of this XmlNs0Song.


        :param cover: The cover of this XmlNs0Song.
        :type cover: XmlNs0Artist
        """

        self._cover = cover

    @property
    def info(self):
        """Gets the info of this XmlNs0Song.

        Special incidents or additional information about the way the song was performed at this specific concert. See the <a href=\"https://www.setlist.fm/guidelines\">setlist.fm guidelines</a> for a complete list of allowed content.

        :return: The info of this XmlNs0Song.
        :rtype: str
        """
        return self._info

    @info.setter
    def info(self, info):
        """Sets the info of this XmlNs0Song.

        Special incidents or additional information about the way the song was performed at this specific concert. See the <a href=\"https://www.setlist.fm/guidelines\">setlist.fm guidelines</a> for a complete list of allowed content.

        :param info: The info of this XmlNs0Song.
        :type info: str
        """

        self._info = info

    @property
    def name(self):
        """Gets the name of this XmlNs0Song.

        The name of the song. E.g. <em>Yesterday</em> or <em>&quot;Wish You Were Here&quot;</em>

        :return: The name of this XmlNs0Song.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this XmlNs0Song.

        The name of the song. E.g. <em>Yesterday</em> or <em>&quot;Wish You Were Here&quot;</em>

        :param name: The name of this XmlNs0Song.
        :type name: str
        """

        self._name = name

    @property
    def tape(self):
        """Gets the tape of this XmlNs0Song.

        The song came from tape rather than being performed live. See the <a href=\"https://www.setlist.fm/guidelines#tape-songs\">tape section of the guidelines</a> for valid usage.

        :return: The tape of this XmlNs0Song.
        :rtype: bool
        """
        return self._tape

    @tape.setter
    def tape(self, tape):
        """Sets the tape of this XmlNs0Song.

        The song came from tape rather than being performed live. See the <a href=\"https://www.setlist.fm/guidelines#tape-songs\">tape section of the guidelines</a> for valid usage.

        :param tape: The tape of this XmlNs0Song.
        :type tape: bool
        """

        self._tape = tape

    @property
    def _with(self):
        """Gets the _with of this XmlNs0Song.


        :return: The _with of this XmlNs0Song.
        :rtype: XmlNs0Artist
        """
        return self.__with

    @_with.setter
    def _with(self, _with):
        """Sets the _with of this XmlNs0Song.


        :param _with: The _with of this XmlNs0Song.
        :type _with: XmlNs0Artist
        """

        self.__with = _with
