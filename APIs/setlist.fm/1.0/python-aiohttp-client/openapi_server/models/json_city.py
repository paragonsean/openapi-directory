# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.json_coords import JsonCoords
from openapi_server.models.json_country import JsonCountry
from openapi_server import util


class JsonCity(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, coords: JsonCoords=None, country: JsonCountry=None, id: str=None, name: str=None, state: str=None, state_code: str=None):
        """JsonCity - a model defined in OpenAPI

        :param coords: The coords of this JsonCity.
        :param country: The country of this JsonCity.
        :param id: The id of this JsonCity.
        :param name: The name of this JsonCity.
        :param state: The state of this JsonCity.
        :param state_code: The state_code of this JsonCity.
        """
        self.openapi_types = {
            'coords': JsonCoords,
            'country': JsonCountry,
            'id': str,
            'name': str,
            'state': str,
            'state_code': str
        }

        self.attribute_map = {
            'coords': 'coords',
            'country': 'country',
            'id': 'id',
            'name': 'name',
            'state': 'state',
            'state_code': 'stateCode'
        }

        self._coords = coords
        self._country = country
        self._id = id
        self._name = name
        self._state = state
        self._state_code = state_code

    @classmethod
    def from_dict(cls, dikt: dict) -> 'JsonCity':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The json_City of this JsonCity.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def coords(self):
        """Gets the coords of this JsonCity.


        :return: The coords of this JsonCity.
        :rtype: JsonCoords
        """
        return self._coords

    @coords.setter
    def coords(self, coords):
        """Sets the coords of this JsonCity.


        :param coords: The coords of this JsonCity.
        :type coords: JsonCoords
        """

        self._coords = coords

    @property
    def country(self):
        """Gets the country of this JsonCity.


        :return: The country of this JsonCity.
        :rtype: JsonCountry
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this JsonCity.


        :param country: The country of this JsonCity.
        :type country: JsonCountry
        """

        self._country = country

    @property
    def id(self):
        """Gets the id of this JsonCity.

        unique identifier

        :return: The id of this JsonCity.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this JsonCity.

        unique identifier

        :param id: The id of this JsonCity.
        :type id: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this JsonCity.

        the city's name, depending on the language valid values are e.g. <em>&quot;M&uuml;chen&quot;</em> or <em>Munich</em>

        :return: The name of this JsonCity.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this JsonCity.

        the city's name, depending on the language valid values are e.g. <em>&quot;M&uuml;chen&quot;</em> or <em>Munich</em>

        :param name: The name of this JsonCity.
        :type name: str
        """

        self._name = name

    @property
    def state(self):
        """Gets the state of this JsonCity.

        The name of city's state, e.g. <em>&quot;Bavaria&quot;</em> or <em>&quot;Florida&quot;</em>

        :return: The state of this JsonCity.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this JsonCity.

        The name of city's state, e.g. <em>&quot;Bavaria&quot;</em> or <em>&quot;Florida&quot;</em>

        :param state: The state of this JsonCity.
        :type state: str
        """

        self._state = state

    @property
    def state_code(self):
        """Gets the state_code of this JsonCity.

        The code of the city's state. For most countries this is a two-digit numeric code, with which the state can be identified uniquely in the specific Country. The code can also be a String for other cities. Valid examples are <em>&quot;CA&quot;</em> or <em>&quot;02&quot;</em>  which in turn get uniquely identifiable when combined with the state's country:  <em>&quot;US.CA&quot;</em> for California, United States or <em>&quot;DE.02&quot;</em> for Bavaria, Germany  For a complete list of available states (that aren't necessarily used in this database) is available in <a href= \"http://download.geonames.org/export/dump/admin1CodesASCII.txt\">a textfile on geonames.org</a>.  Note that this code is only unique combined with the city's Country. The code alone is <strong>not</strong> unique.

        :return: The state_code of this JsonCity.
        :rtype: str
        """
        return self._state_code

    @state_code.setter
    def state_code(self, state_code):
        """Sets the state_code of this JsonCity.

        The code of the city's state. For most countries this is a two-digit numeric code, with which the state can be identified uniquely in the specific Country. The code can also be a String for other cities. Valid examples are <em>&quot;CA&quot;</em> or <em>&quot;02&quot;</em>  which in turn get uniquely identifiable when combined with the state's country:  <em>&quot;US.CA&quot;</em> for California, United States or <em>&quot;DE.02&quot;</em> for Bavaria, Germany  For a complete list of available states (that aren't necessarily used in this database) is available in <a href= \"http://download.geonames.org/export/dump/admin1CodesASCII.txt\">a textfile on geonames.org</a>.  Note that this code is only unique combined with the city's Country. The code alone is <strong>not</strong> unique.

        :param state_code: The state_code of this JsonCity.
        :type state_code: str
        """

        self._state_code = state_code
