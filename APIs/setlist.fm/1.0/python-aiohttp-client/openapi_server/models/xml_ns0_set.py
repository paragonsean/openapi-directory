# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.xml_ns0_song import XmlNs0Song
from openapi_server import util


class XmlNs0Set(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, encore: float=None, name: str=None, song: XmlNs0Song=None):
        """XmlNs0Set - a model defined in OpenAPI

        :param encore: The encore of this XmlNs0Set.
        :param name: The name of this XmlNs0Set.
        :param song: The song of this XmlNs0Set.
        """
        self.openapi_types = {
            'encore': float,
            'name': str,
            'song': XmlNs0Song
        }

        self.attribute_map = {
            'encore': 'encore',
            'name': 'name',
            'song': 'song'
        }

        self._encore = encore
        self._name = name
        self._song = song

    @classmethod
    def from_dict(cls, dikt: dict) -> 'XmlNs0Set':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The xml_ns0_set of this XmlNs0Set.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def encore(self):
        """Gets the encore of this XmlNs0Set.

        if the set is an encore, this is the number of the encore, starting with 1 for the first encore, 2 for the second and so on.

        :return: The encore of this XmlNs0Set.
        :rtype: float
        """
        return self._encore

    @encore.setter
    def encore(self, encore):
        """Sets the encore of this XmlNs0Set.

        if the set is an encore, this is the number of the encore, starting with 1 for the first encore, 2 for the second and so on.

        :param encore: The encore of this XmlNs0Set.
        :type encore: float
        """

        self._encore = encore

    @property
    def name(self):
        """Gets the name of this XmlNs0Set.

        the description/name of the set. E.g. <em>&quot;Acoustic set&quot;</em> or <em>&quot;Paul McCartney solo&quot;</em>

        :return: The name of this XmlNs0Set.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this XmlNs0Set.

        the description/name of the set. E.g. <em>&quot;Acoustic set&quot;</em> or <em>&quot;Paul McCartney solo&quot;</em>

        :param name: The name of this XmlNs0Set.
        :type name: str
        """

        self._name = name

    @property
    def song(self):
        """Gets the song of this XmlNs0Set.


        :return: The song of this XmlNs0Set.
        :rtype: XmlNs0Song
        """
        return self._song

    @song.setter
    def song(self, song):
        """Sets the song of this XmlNs0Set.


        :param song: The song of this XmlNs0Set.
        :type song: XmlNs0Song
        """

        self._song = song
