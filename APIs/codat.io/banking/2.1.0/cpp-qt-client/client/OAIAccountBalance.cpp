/**
 * Banking API
 * Codat's Banking API allows you to access standardised data from over bank accounts via third party providers.  Standardize how you connect to your customersâ€™ bank accounts. Retrieve bank account and bank transaction data in the same way via our partnerships with Plaid and TrueLayer.  [Read more...](https://docs.codat.io/banking-api/overview)  [See our OpenAPI spec](https://github.com/codatio/oas) 
 *
 * The version of the OpenAPI document: 2.1.0
 * Contact: support@codat.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAccountBalance.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAccountBalance::OAIAccountBalance(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAccountBalance::OAIAccountBalance() {
    this->initializeModel();
}

OAIAccountBalance::~OAIAccountBalance() {}

void OAIAccountBalance::initializeModel() {

    m_modified_date_isSet = false;
    m_modified_date_isValid = false;

    m_source_modified_date_isSet = false;
    m_source_modified_date_isValid = false;

    m_account_id_isSet = false;
    m_account_id_isValid = false;

    m_balance_isSet = false;
    m_balance_isValid = false;

    m_date_isSet = false;
    m_date_isValid = false;
}

void OAIAccountBalance::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAccountBalance::fromJsonObject(QJsonObject json) {

    m_modified_date_isValid = ::OpenAPI::fromJsonValue(m_modified_date, json[QString("modifiedDate")]);
    m_modified_date_isSet = !json[QString("modifiedDate")].isNull() && m_modified_date_isValid;

    m_source_modified_date_isValid = ::OpenAPI::fromJsonValue(m_source_modified_date, json[QString("sourceModifiedDate")]);
    m_source_modified_date_isSet = !json[QString("sourceModifiedDate")].isNull() && m_source_modified_date_isValid;

    m_account_id_isValid = ::OpenAPI::fromJsonValue(m_account_id, json[QString("accountId")]);
    m_account_id_isSet = !json[QString("accountId")].isNull() && m_account_id_isValid;

    m_balance_isValid = ::OpenAPI::fromJsonValue(m_balance, json[QString("balance")]);
    m_balance_isSet = !json[QString("balance")].isNull() && m_balance_isValid;

    m_date_isValid = ::OpenAPI::fromJsonValue(m_date, json[QString("date")]);
    m_date_isSet = !json[QString("date")].isNull() && m_date_isValid;
}

QString OAIAccountBalance::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAccountBalance::asJsonObject() const {
    QJsonObject obj;
    if (m_modified_date_isSet) {
        obj.insert(QString("modifiedDate"), ::OpenAPI::toJsonValue(m_modified_date));
    }
    if (m_source_modified_date_isSet) {
        obj.insert(QString("sourceModifiedDate"), ::OpenAPI::toJsonValue(m_source_modified_date));
    }
    if (m_account_id_isSet) {
        obj.insert(QString("accountId"), ::OpenAPI::toJsonValue(m_account_id));
    }
    if (m_balance.isSet()) {
        obj.insert(QString("balance"), ::OpenAPI::toJsonValue(m_balance));
    }
    if (m_date_isSet) {
        obj.insert(QString("date"), ::OpenAPI::toJsonValue(m_date));
    }
    return obj;
}

QString OAIAccountBalance::getModifiedDate() const {
    return m_modified_date;
}
void OAIAccountBalance::setModifiedDate(const QString &modified_date) {
    m_modified_date = modified_date;
    m_modified_date_isSet = true;
}

bool OAIAccountBalance::is_modified_date_Set() const{
    return m_modified_date_isSet;
}

bool OAIAccountBalance::is_modified_date_Valid() const{
    return m_modified_date_isValid;
}

QString OAIAccountBalance::getSourceModifiedDate() const {
    return m_source_modified_date;
}
void OAIAccountBalance::setSourceModifiedDate(const QString &source_modified_date) {
    m_source_modified_date = source_modified_date;
    m_source_modified_date_isSet = true;
}

bool OAIAccountBalance::is_source_modified_date_Set() const{
    return m_source_modified_date_isSet;
}

bool OAIAccountBalance::is_source_modified_date_Valid() const{
    return m_source_modified_date_isValid;
}

QString OAIAccountBalance::getAccountId() const {
    return m_account_id;
}
void OAIAccountBalance::setAccountId(const QString &account_id) {
    m_account_id = account_id;
    m_account_id_isSet = true;
}

bool OAIAccountBalance::is_account_id_Set() const{
    return m_account_id_isSet;
}

bool OAIAccountBalance::is_account_id_Valid() const{
    return m_account_id_isValid;
}

OAIAccountBalanceAmounts OAIAccountBalance::getBalance() const {
    return m_balance;
}
void OAIAccountBalance::setBalance(const OAIAccountBalanceAmounts &balance) {
    m_balance = balance;
    m_balance_isSet = true;
}

bool OAIAccountBalance::is_balance_Set() const{
    return m_balance_isSet;
}

bool OAIAccountBalance::is_balance_Valid() const{
    return m_balance_isValid;
}

QString OAIAccountBalance::getDate() const {
    return m_date;
}
void OAIAccountBalance::setDate(const QString &date) {
    m_date = date;
    m_date_isSet = true;
}

bool OAIAccountBalance::is_date_Set() const{
    return m_date_isSet;
}

bool OAIAccountBalance::is_date_Valid() const{
    return m_date_isValid;
}

bool OAIAccountBalance::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_modified_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_modified_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_balance.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAccountBalance::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_account_id_isValid && m_balance_isValid && m_date_isValid && true;
}

} // namespace OpenAPI
