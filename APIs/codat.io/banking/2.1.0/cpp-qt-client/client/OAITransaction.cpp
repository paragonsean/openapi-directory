/**
 * Banking API
 * Codat's Banking API allows you to access standardised data from over bank accounts via third party providers.  Standardize how you connect to your customersâ€™ bank accounts. Retrieve bank account and bank transaction data in the same way via our partnerships with Plaid and TrueLayer.  [Read more...](https://docs.codat.io/banking-api/overview)  [See our OpenAPI spec](https://github.com/codatio/oas) 
 *
 * The version of the OpenAPI document: 2.1.0
 * Contact: support@codat.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITransaction.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITransaction::OAITransaction(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITransaction::OAITransaction() {
    this->initializeModel();
}

OAITransaction::~OAITransaction() {}

void OAITransaction::initializeModel() {

    m_modified_date_isSet = false;
    m_modified_date_isValid = false;

    m_source_modified_date_isSet = false;
    m_source_modified_date_isValid = false;

    m_account_id_isSet = false;
    m_account_id_isValid = false;

    m_amount_isSet = false;
    m_amount_isValid = false;

    m_authorized_date_isSet = false;
    m_authorized_date_isValid = false;

    m_code_isSet = false;
    m_code_isValid = false;

    m_currency_isSet = false;
    m_currency_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_merchant_name_isSet = false;
    m_merchant_name_isValid = false;

    m_posted_date_isSet = false;
    m_posted_date_isValid = false;

    m_transaction_category_ref_isSet = false;
    m_transaction_category_ref_isValid = false;
}

void OAITransaction::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITransaction::fromJsonObject(QJsonObject json) {

    m_modified_date_isValid = ::OpenAPI::fromJsonValue(m_modified_date, json[QString("modifiedDate")]);
    m_modified_date_isSet = !json[QString("modifiedDate")].isNull() && m_modified_date_isValid;

    m_source_modified_date_isValid = ::OpenAPI::fromJsonValue(m_source_modified_date, json[QString("sourceModifiedDate")]);
    m_source_modified_date_isSet = !json[QString("sourceModifiedDate")].isNull() && m_source_modified_date_isValid;

    m_account_id_isValid = ::OpenAPI::fromJsonValue(m_account_id, json[QString("accountId")]);
    m_account_id_isSet = !json[QString("accountId")].isNull() && m_account_id_isValid;

    m_amount_isValid = ::OpenAPI::fromJsonValue(m_amount, json[QString("amount")]);
    m_amount_isSet = !json[QString("amount")].isNull() && m_amount_isValid;

    m_authorized_date_isValid = ::OpenAPI::fromJsonValue(m_authorized_date, json[QString("authorizedDate")]);
    m_authorized_date_isSet = !json[QString("authorizedDate")].isNull() && m_authorized_date_isValid;

    m_code_isValid = ::OpenAPI::fromJsonValue(m_code, json[QString("code")]);
    m_code_isSet = !json[QString("code")].isNull() && m_code_isValid;

    m_currency_isValid = ::OpenAPI::fromJsonValue(m_currency, json[QString("currency")]);
    m_currency_isSet = !json[QString("currency")].isNull() && m_currency_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_merchant_name_isValid = ::OpenAPI::fromJsonValue(m_merchant_name, json[QString("merchantName")]);
    m_merchant_name_isSet = !json[QString("merchantName")].isNull() && m_merchant_name_isValid;

    m_posted_date_isValid = ::OpenAPI::fromJsonValue(m_posted_date, json[QString("postedDate")]);
    m_posted_date_isSet = !json[QString("postedDate")].isNull() && m_posted_date_isValid;

    m_transaction_category_ref_isValid = ::OpenAPI::fromJsonValue(m_transaction_category_ref, json[QString("transactionCategoryRef")]);
    m_transaction_category_ref_isSet = !json[QString("transactionCategoryRef")].isNull() && m_transaction_category_ref_isValid;
}

QString OAITransaction::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITransaction::asJsonObject() const {
    QJsonObject obj;
    if (m_modified_date_isSet) {
        obj.insert(QString("modifiedDate"), ::OpenAPI::toJsonValue(m_modified_date));
    }
    if (m_source_modified_date_isSet) {
        obj.insert(QString("sourceModifiedDate"), ::OpenAPI::toJsonValue(m_source_modified_date));
    }
    if (m_account_id_isSet) {
        obj.insert(QString("accountId"), ::OpenAPI::toJsonValue(m_account_id));
    }
    if (m_amount_isSet) {
        obj.insert(QString("amount"), ::OpenAPI::toJsonValue(m_amount));
    }
    if (m_authorized_date_isSet) {
        obj.insert(QString("authorizedDate"), ::OpenAPI::toJsonValue(m_authorized_date));
    }
    if (m_code.isSet()) {
        obj.insert(QString("code"), ::OpenAPI::toJsonValue(m_code));
    }
    if (m_currency_isSet) {
        obj.insert(QString("currency"), ::OpenAPI::toJsonValue(m_currency));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_merchant_name_isSet) {
        obj.insert(QString("merchantName"), ::OpenAPI::toJsonValue(m_merchant_name));
    }
    if (m_posted_date_isSet) {
        obj.insert(QString("postedDate"), ::OpenAPI::toJsonValue(m_posted_date));
    }
    if (m_transaction_category_ref.isSet()) {
        obj.insert(QString("transactionCategoryRef"), ::OpenAPI::toJsonValue(m_transaction_category_ref));
    }
    return obj;
}

QString OAITransaction::getModifiedDate() const {
    return m_modified_date;
}
void OAITransaction::setModifiedDate(const QString &modified_date) {
    m_modified_date = modified_date;
    m_modified_date_isSet = true;
}

bool OAITransaction::is_modified_date_Set() const{
    return m_modified_date_isSet;
}

bool OAITransaction::is_modified_date_Valid() const{
    return m_modified_date_isValid;
}

QString OAITransaction::getSourceModifiedDate() const {
    return m_source_modified_date;
}
void OAITransaction::setSourceModifiedDate(const QString &source_modified_date) {
    m_source_modified_date = source_modified_date;
    m_source_modified_date_isSet = true;
}

bool OAITransaction::is_source_modified_date_Set() const{
    return m_source_modified_date_isSet;
}

bool OAITransaction::is_source_modified_date_Valid() const{
    return m_source_modified_date_isValid;
}

QString OAITransaction::getAccountId() const {
    return m_account_id;
}
void OAITransaction::setAccountId(const QString &account_id) {
    m_account_id = account_id;
    m_account_id_isSet = true;
}

bool OAITransaction::is_account_id_Set() const{
    return m_account_id_isSet;
}

bool OAITransaction::is_account_id_Valid() const{
    return m_account_id_isValid;
}

double OAITransaction::getAmount() const {
    return m_amount;
}
void OAITransaction::setAmount(const double &amount) {
    m_amount = amount;
    m_amount_isSet = true;
}

bool OAITransaction::is_amount_Set() const{
    return m_amount_isSet;
}

bool OAITransaction::is_amount_Valid() const{
    return m_amount_isValid;
}

QString OAITransaction::getAuthorizedDate() const {
    return m_authorized_date;
}
void OAITransaction::setAuthorizedDate(const QString &authorized_date) {
    m_authorized_date = authorized_date;
    m_authorized_date_isSet = true;
}

bool OAITransaction::is_authorized_date_Set() const{
    return m_authorized_date_isSet;
}

bool OAITransaction::is_authorized_date_Valid() const{
    return m_authorized_date_isValid;
}

OAITransactionCode OAITransaction::getCode() const {
    return m_code;
}
void OAITransaction::setCode(const OAITransactionCode &code) {
    m_code = code;
    m_code_isSet = true;
}

bool OAITransaction::is_code_Set() const{
    return m_code_isSet;
}

bool OAITransaction::is_code_Valid() const{
    return m_code_isValid;
}

QString OAITransaction::getCurrency() const {
    return m_currency;
}
void OAITransaction::setCurrency(const QString &currency) {
    m_currency = currency;
    m_currency_isSet = true;
}

bool OAITransaction::is_currency_Set() const{
    return m_currency_isSet;
}

bool OAITransaction::is_currency_Valid() const{
    return m_currency_isValid;
}

QString OAITransaction::getDescription() const {
    return m_description;
}
void OAITransaction::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAITransaction::is_description_Set() const{
    return m_description_isSet;
}

bool OAITransaction::is_description_Valid() const{
    return m_description_isValid;
}

QString OAITransaction::getId() const {
    return m_id;
}
void OAITransaction::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAITransaction::is_id_Set() const{
    return m_id_isSet;
}

bool OAITransaction::is_id_Valid() const{
    return m_id_isValid;
}

QString OAITransaction::getMerchantName() const {
    return m_merchant_name;
}
void OAITransaction::setMerchantName(const QString &merchant_name) {
    m_merchant_name = merchant_name;
    m_merchant_name_isSet = true;
}

bool OAITransaction::is_merchant_name_Set() const{
    return m_merchant_name_isSet;
}

bool OAITransaction::is_merchant_name_Valid() const{
    return m_merchant_name_isValid;
}

QString OAITransaction::getPostedDate() const {
    return m_posted_date;
}
void OAITransaction::setPostedDate(const QString &posted_date) {
    m_posted_date = posted_date;
    m_posted_date_isSet = true;
}

bool OAITransaction::is_posted_date_Set() const{
    return m_posted_date_isSet;
}

bool OAITransaction::is_posted_date_Valid() const{
    return m_posted_date_isValid;
}

OAITransactionCategoryRef OAITransaction::getTransactionCategoryRef() const {
    return m_transaction_category_ref;
}
void OAITransaction::setTransactionCategoryRef(const OAITransactionCategoryRef &transaction_category_ref) {
    m_transaction_category_ref = transaction_category_ref;
    m_transaction_category_ref_isSet = true;
}

bool OAITransaction::is_transaction_category_ref_Set() const{
    return m_transaction_category_ref_isSet;
}

bool OAITransaction::is_transaction_category_ref_Valid() const{
    return m_transaction_category_ref_isValid;
}

bool OAITransaction::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_modified_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_modified_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_authorized_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_code.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_merchant_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_posted_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transaction_category_ref.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITransaction::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_account_id_isValid && m_currency_isValid && m_id_isValid && true;
}

} // namespace OpenAPI
