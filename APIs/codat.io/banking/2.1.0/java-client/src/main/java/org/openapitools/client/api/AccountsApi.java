/*
 * Banking API
 * Codat's Banking API allows you to access standardised data from over bank accounts via third party providers.  Standardize how you connect to your customersâ€™ bank accounts. Retrieve bank account and bank transaction data in the same way via our partnerships with Plaid and TrueLayer.  [Read more...](https://docs.codat.io/banking-api/overview)  [See our OpenAPI spec](https://github.com/codatio/oas) 
 *
 * The version of the OpenAPI document: 2.1.0
 * Contact: support@codat.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Accounts;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AccountsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AccountsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AccountsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for listAccounts
     * @param companyId  (required)
     * @param connectionId  (required)
     * @param page Page number. [Read more](https://docs.codat.io/using-the-api/paging). (required)
     * @param pageSize Number of records to return in a page. [Read more](https://docs.codat.io/using-the-api/paging). (optional, default to 100)
     * @param query Codat query string. [Read more](https://docs.codat.io/using-the-api/querying). (optional)
     * @param orderBy Field to order results by. [Read more](https://docs.codat.io/using-the-api/ordering-results). (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAccountsCall(UUID companyId, UUID connectionId, Integer page, Integer pageSize, String query, String orderBy, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/companies/{companyId}/connections/{connectionId}/data/banking-accounts"
            .replace("{" + "companyId" + "}", localVarApiClient.escapeString(companyId.toString()))
            .replace("{" + "connectionId" + "}", localVarApiClient.escapeString(connectionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (orderBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("orderBy", orderBy));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAccountsValidateBeforeCall(UUID companyId, UUID connectionId, Integer page, Integer pageSize, String query, String orderBy, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling listAccounts(Async)");
        }

        // verify the required parameter 'connectionId' is set
        if (connectionId == null) {
            throw new ApiException("Missing the required parameter 'connectionId' when calling listAccounts(Async)");
        }

        // verify the required parameter 'page' is set
        if (page == null) {
            throw new ApiException("Missing the required parameter 'page' when calling listAccounts(Async)");
        }

        return listAccountsCall(companyId, connectionId, page, pageSize, query, orderBy, _callback);

    }

    /**
     * List accounts
     * Gets a list of all bank accounts of the SMB, with rich data like balances, account numbers and institutions holdingthe accounts.
     * @param companyId  (required)
     * @param connectionId  (required)
     * @param page Page number. [Read more](https://docs.codat.io/using-the-api/paging). (required)
     * @param pageSize Number of records to return in a page. [Read more](https://docs.codat.io/using-the-api/paging). (optional, default to 100)
     * @param query Codat query string. [Read more](https://docs.codat.io/using-the-api/querying). (optional)
     * @param orderBy Field to order results by. [Read more](https://docs.codat.io/using-the-api/ordering-results). (optional)
     * @return Accounts
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public Accounts listAccounts(UUID companyId, UUID connectionId, Integer page, Integer pageSize, String query, String orderBy) throws ApiException {
        ApiResponse<Accounts> localVarResp = listAccountsWithHttpInfo(companyId, connectionId, page, pageSize, query, orderBy);
        return localVarResp.getData();
    }

    /**
     * List accounts
     * Gets a list of all bank accounts of the SMB, with rich data like balances, account numbers and institutions holdingthe accounts.
     * @param companyId  (required)
     * @param connectionId  (required)
     * @param page Page number. [Read more](https://docs.codat.io/using-the-api/paging). (required)
     * @param pageSize Number of records to return in a page. [Read more](https://docs.codat.io/using-the-api/paging). (optional, default to 100)
     * @param query Codat query string. [Read more](https://docs.codat.io/using-the-api/querying). (optional)
     * @param orderBy Field to order results by. [Read more](https://docs.codat.io/using-the-api/ordering-results). (optional)
     * @return ApiResponse&lt;Accounts&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Accounts> listAccountsWithHttpInfo(UUID companyId, UUID connectionId, Integer page, Integer pageSize, String query, String orderBy) throws ApiException {
        okhttp3.Call localVarCall = listAccountsValidateBeforeCall(companyId, connectionId, page, pageSize, query, orderBy, null);
        Type localVarReturnType = new TypeToken<Accounts>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List accounts (asynchronously)
     * Gets a list of all bank accounts of the SMB, with rich data like balances, account numbers and institutions holdingthe accounts.
     * @param companyId  (required)
     * @param connectionId  (required)
     * @param page Page number. [Read more](https://docs.codat.io/using-the-api/paging). (required)
     * @param pageSize Number of records to return in a page. [Read more](https://docs.codat.io/using-the-api/paging). (optional, default to 100)
     * @param query Codat query string. [Read more](https://docs.codat.io/using-the-api/querying). (optional)
     * @param orderBy Field to order results by. [Read more](https://docs.codat.io/using-the-api/ordering-results). (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAccountsAsync(UUID companyId, UUID connectionId, Integer page, Integer pageSize, String query, String orderBy, final ApiCallback<Accounts> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAccountsValidateBeforeCall(companyId, connectionId, page, pageSize, query, orderBy, _callback);
        Type localVarReturnType = new TypeToken<Accounts>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
