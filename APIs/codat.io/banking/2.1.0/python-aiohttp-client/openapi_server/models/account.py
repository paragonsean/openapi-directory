# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.account_balance_amounts import AccountBalanceAmounts
from openapi_server.models.account_identifiers import AccountIdentifiers
from openapi_server.models.account_institution import AccountInstitution
from openapi_server.models.account_type import AccountType
from openapi_server import util


class Account(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, modified_date: str=None, source_modified_date: str=None, balance: AccountBalanceAmounts=None, currency: str=None, holder: str=None, id: str=None, identifiers: AccountIdentifiers=None, informal_name: str=None, institution: AccountInstitution=None, name: str=None, type: AccountType=None):
        """Account - a model defined in OpenAPI

        :param modified_date: The modified_date of this Account.
        :param source_modified_date: The source_modified_date of this Account.
        :param balance: The balance of this Account.
        :param currency: The currency of this Account.
        :param holder: The holder of this Account.
        :param id: The id of this Account.
        :param identifiers: The identifiers of this Account.
        :param informal_name: The informal_name of this Account.
        :param institution: The institution of this Account.
        :param name: The name of this Account.
        :param type: The type of this Account.
        """
        self.openapi_types = {
            'modified_date': str,
            'source_modified_date': str,
            'balance': AccountBalanceAmounts,
            'currency': str,
            'holder': str,
            'id': str,
            'identifiers': AccountIdentifiers,
            'informal_name': str,
            'institution': AccountInstitution,
            'name': str,
            'type': AccountType
        }

        self.attribute_map = {
            'modified_date': 'modifiedDate',
            'source_modified_date': 'sourceModifiedDate',
            'balance': 'balance',
            'currency': 'currency',
            'holder': 'holder',
            'id': 'id',
            'identifiers': 'identifiers',
            'informal_name': 'informalName',
            'institution': 'institution',
            'name': 'name',
            'type': 'type'
        }

        self._modified_date = modified_date
        self._source_modified_date = source_modified_date
        self._balance = balance
        self._currency = currency
        self._holder = holder
        self._id = id
        self._identifiers = identifiers
        self._informal_name = informal_name
        self._institution = institution
        self._name = name
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Account':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Account of this Account.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def modified_date(self):
        """Gets the modified_date of this Account.

        In Codat's data model, dates and times are represented using the <a class=\"external\" href=\"https://en.wikipedia.org/wiki/ISO_8601\" target=\"_blank\">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:  ``` 2020-10-08T22:40:50Z 2021-01-01T00:00:00 ```    When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:  - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z` - Unqualified local time: `2021-11-15T01:00:00` - UTC time offsets: `2021-11-15T01:00:00-05:00`  > Time zones >  > Not all dates from Codat will contain information about time zones.   > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.

        :return: The modified_date of this Account.
        :rtype: str
        """
        return self._modified_date

    @modified_date.setter
    def modified_date(self, modified_date):
        """Sets the modified_date of this Account.

        In Codat's data model, dates and times are represented using the <a class=\"external\" href=\"https://en.wikipedia.org/wiki/ISO_8601\" target=\"_blank\">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:  ``` 2020-10-08T22:40:50Z 2021-01-01T00:00:00 ```    When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:  - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z` - Unqualified local time: `2021-11-15T01:00:00` - UTC time offsets: `2021-11-15T01:00:00-05:00`  > Time zones >  > Not all dates from Codat will contain information about time zones.   > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.

        :param modified_date: The modified_date of this Account.
        :type modified_date: str
        """

        self._modified_date = modified_date

    @property
    def source_modified_date(self):
        """Gets the source_modified_date of this Account.

        In Codat's data model, dates and times are represented using the <a class=\"external\" href=\"https://en.wikipedia.org/wiki/ISO_8601\" target=\"_blank\">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:  ``` 2020-10-08T22:40:50Z 2021-01-01T00:00:00 ```    When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:  - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z` - Unqualified local time: `2021-11-15T01:00:00` - UTC time offsets: `2021-11-15T01:00:00-05:00`  > Time zones >  > Not all dates from Codat will contain information about time zones.   > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.

        :return: The source_modified_date of this Account.
        :rtype: str
        """
        return self._source_modified_date

    @source_modified_date.setter
    def source_modified_date(self, source_modified_date):
        """Sets the source_modified_date of this Account.

        In Codat's data model, dates and times are represented using the <a class=\"external\" href=\"https://en.wikipedia.org/wiki/ISO_8601\" target=\"_blank\">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:  ``` 2020-10-08T22:40:50Z 2021-01-01T00:00:00 ```    When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:  - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z` - Unqualified local time: `2021-11-15T01:00:00` - UTC time offsets: `2021-11-15T01:00:00-05:00`  > Time zones >  > Not all dates from Codat will contain information about time zones.   > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.

        :param source_modified_date: The source_modified_date of this Account.
        :type source_modified_date: str
        """

        self._source_modified_date = source_modified_date

    @property
    def balance(self):
        """Gets the balance of this Account.

        An object containing bank balance data.

        :return: The balance of this Account.
        :rtype: AccountBalanceAmounts
        """
        return self._balance

    @balance.setter
    def balance(self, balance):
        """Sets the balance of this Account.

        An object containing bank balance data.

        :param balance: The balance of this Account.
        :type balance: AccountBalanceAmounts
        """
        if balance is None:
            raise ValueError("Invalid value for `balance`, must not be `None`")

        self._balance = balance

    @property
    def currency(self):
        """Gets the currency of this Account.

        The currency code for the account.

        :return: The currency of this Account.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this Account.

        The currency code for the account.

        :param currency: The currency of this Account.
        :type currency: str
        """
        if currency is None:
            raise ValueError("Invalid value for `currency`, must not be `None`")
        if currency is not None and len(currency) < 1:
            raise ValueError("Invalid value for `currency`, length must be greater than or equal to `1`")

        self._currency = currency

    @property
    def holder(self):
        """Gets the holder of this Account.

        The name of the person or company who holds the account.

        :return: The holder of this Account.
        :rtype: str
        """
        return self._holder

    @holder.setter
    def holder(self, holder):
        """Sets the holder of this Account.

        The name of the person or company who holds the account.

        :param holder: The holder of this Account.
        :type holder: str
        """

        self._holder = holder

    @property
    def id(self):
        """Gets the id of this Account.

        The ID of the account from the provider.

        :return: The id of this Account.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Account.

        The ID of the account from the provider.

        :param id: The id of this Account.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")
        if id is not None and len(id) < 1:
            raise ValueError("Invalid value for `id`, length must be greater than or equal to `1`")

        self._id = id

    @property
    def identifiers(self):
        """Gets the identifiers of this Account.


        :return: The identifiers of this Account.
        :rtype: AccountIdentifiers
        """
        return self._identifiers

    @identifiers.setter
    def identifiers(self, identifiers):
        """Sets the identifiers of this Account.


        :param identifiers: The identifiers of this Account.
        :type identifiers: AccountIdentifiers
        """
        if identifiers is None:
            raise ValueError("Invalid value for `identifiers`, must not be `None`")

        self._identifiers = identifiers

    @property
    def informal_name(self):
        """Gets the informal_name of this Account.

        The friendly name of the account, chosen by the holder. This may not have been set by the account holder and therefore is not always available.

        :return: The informal_name of this Account.
        :rtype: str
        """
        return self._informal_name

    @informal_name.setter
    def informal_name(self, informal_name):
        """Sets the informal_name of this Account.

        The friendly name of the account, chosen by the holder. This may not have been set by the account holder and therefore is not always available.

        :param informal_name: The informal_name of this Account.
        :type informal_name: str
        """

        self._informal_name = informal_name

    @property
    def institution(self):
        """Gets the institution of this Account.


        :return: The institution of this Account.
        :rtype: AccountInstitution
        """
        return self._institution

    @institution.setter
    def institution(self, institution):
        """Sets the institution of this Account.


        :param institution: The institution of this Account.
        :type institution: AccountInstitution
        """
        if institution is None:
            raise ValueError("Invalid value for `institution`, must not be `None`")

        self._institution = institution

    @property
    def name(self):
        """Gets the name of this Account.

        The name of the account according to the provider.

        :return: The name of this Account.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Account.

        The name of the account according to the provider.

        :param name: The name of this Account.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name

    @property
    def type(self):
        """Gets the type of this Account.


        :return: The type of this Account.
        :rtype: AccountType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Account.


        :param type: The type of this Account.
        :type type: AccountType
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type
