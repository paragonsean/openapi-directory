# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.transaction_category_ref import TransactionCategoryRef
from openapi_server.models.transaction_code import TransactionCode
from openapi_server import util


class Transaction(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, modified_date: str=None, source_modified_date: str=None, account_id: str=None, amount: float=None, authorized_date: str=None, code: TransactionCode=None, currency: str=None, description: str=None, id: str=None, merchant_name: str=None, posted_date: str=None, transaction_category_ref: TransactionCategoryRef=None):
        """Transaction - a model defined in OpenAPI

        :param modified_date: The modified_date of this Transaction.
        :param source_modified_date: The source_modified_date of this Transaction.
        :param account_id: The account_id of this Transaction.
        :param amount: The amount of this Transaction.
        :param authorized_date: The authorized_date of this Transaction.
        :param code: The code of this Transaction.
        :param currency: The currency of this Transaction.
        :param description: The description of this Transaction.
        :param id: The id of this Transaction.
        :param merchant_name: The merchant_name of this Transaction.
        :param posted_date: The posted_date of this Transaction.
        :param transaction_category_ref: The transaction_category_ref of this Transaction.
        """
        self.openapi_types = {
            'modified_date': str,
            'source_modified_date': str,
            'account_id': str,
            'amount': float,
            'authorized_date': str,
            'code': TransactionCode,
            'currency': str,
            'description': str,
            'id': str,
            'merchant_name': str,
            'posted_date': str,
            'transaction_category_ref': TransactionCategoryRef
        }

        self.attribute_map = {
            'modified_date': 'modifiedDate',
            'source_modified_date': 'sourceModifiedDate',
            'account_id': 'accountId',
            'amount': 'amount',
            'authorized_date': 'authorizedDate',
            'code': 'code',
            'currency': 'currency',
            'description': 'description',
            'id': 'id',
            'merchant_name': 'merchantName',
            'posted_date': 'postedDate',
            'transaction_category_ref': 'transactionCategoryRef'
        }

        self._modified_date = modified_date
        self._source_modified_date = source_modified_date
        self._account_id = account_id
        self._amount = amount
        self._authorized_date = authorized_date
        self._code = code
        self._currency = currency
        self._description = description
        self._id = id
        self._merchant_name = merchant_name
        self._posted_date = posted_date
        self._transaction_category_ref = transaction_category_ref

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Transaction':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Transaction of this Transaction.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def modified_date(self):
        """Gets the modified_date of this Transaction.

        In Codat's data model, dates and times are represented using the <a class=\"external\" href=\"https://en.wikipedia.org/wiki/ISO_8601\" target=\"_blank\">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:  ``` 2020-10-08T22:40:50Z 2021-01-01T00:00:00 ```    When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:  - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z` - Unqualified local time: `2021-11-15T01:00:00` - UTC time offsets: `2021-11-15T01:00:00-05:00`  > Time zones >  > Not all dates from Codat will contain information about time zones.   > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.

        :return: The modified_date of this Transaction.
        :rtype: str
        """
        return self._modified_date

    @modified_date.setter
    def modified_date(self, modified_date):
        """Sets the modified_date of this Transaction.

        In Codat's data model, dates and times are represented using the <a class=\"external\" href=\"https://en.wikipedia.org/wiki/ISO_8601\" target=\"_blank\">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:  ``` 2020-10-08T22:40:50Z 2021-01-01T00:00:00 ```    When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:  - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z` - Unqualified local time: `2021-11-15T01:00:00` - UTC time offsets: `2021-11-15T01:00:00-05:00`  > Time zones >  > Not all dates from Codat will contain information about time zones.   > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.

        :param modified_date: The modified_date of this Transaction.
        :type modified_date: str
        """

        self._modified_date = modified_date

    @property
    def source_modified_date(self):
        """Gets the source_modified_date of this Transaction.

        In Codat's data model, dates and times are represented using the <a class=\"external\" href=\"https://en.wikipedia.org/wiki/ISO_8601\" target=\"_blank\">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:  ``` 2020-10-08T22:40:50Z 2021-01-01T00:00:00 ```    When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:  - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z` - Unqualified local time: `2021-11-15T01:00:00` - UTC time offsets: `2021-11-15T01:00:00-05:00`  > Time zones >  > Not all dates from Codat will contain information about time zones.   > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.

        :return: The source_modified_date of this Transaction.
        :rtype: str
        """
        return self._source_modified_date

    @source_modified_date.setter
    def source_modified_date(self, source_modified_date):
        """Sets the source_modified_date of this Transaction.

        In Codat's data model, dates and times are represented using the <a class=\"external\" href=\"https://en.wikipedia.org/wiki/ISO_8601\" target=\"_blank\">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:  ``` 2020-10-08T22:40:50Z 2021-01-01T00:00:00 ```    When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:  - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z` - Unqualified local time: `2021-11-15T01:00:00` - UTC time offsets: `2021-11-15T01:00:00-05:00`  > Time zones >  > Not all dates from Codat will contain information about time zones.   > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.

        :param source_modified_date: The source_modified_date of this Transaction.
        :type source_modified_date: str
        """

        self._source_modified_date = source_modified_date

    @property
    def account_id(self):
        """Gets the account_id of this Transaction.

        The unique identifier of the bank account.

        :return: The account_id of this Transaction.
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this Transaction.

        The unique identifier of the bank account.

        :param account_id: The account_id of this Transaction.
        :type account_id: str
        """
        if account_id is None:
            raise ValueError("Invalid value for `account_id`, must not be `None`")
        if account_id is not None and len(account_id) < 1:
            raise ValueError("Invalid value for `account_id`, length must be greater than or equal to `1`")

        self._account_id = account_id

    @property
    def amount(self):
        """Gets the amount of this Transaction.

        The amount of the bank transaction.

        :return: The amount of this Transaction.
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this Transaction.

        The amount of the bank transaction.

        :param amount: The amount of this Transaction.
        :type amount: float
        """

        self._amount = amount

    @property
    def authorized_date(self):
        """Gets the authorized_date of this Transaction.

        In Codat's data model, dates and times are represented using the <a class=\"external\" href=\"https://en.wikipedia.org/wiki/ISO_8601\" target=\"_blank\">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:  ``` 2020-10-08T22:40:50Z 2021-01-01T00:00:00 ```    When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:  - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z` - Unqualified local time: `2021-11-15T01:00:00` - UTC time offsets: `2021-11-15T01:00:00-05:00`  > Time zones >  > Not all dates from Codat will contain information about time zones.   > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.

        :return: The authorized_date of this Transaction.
        :rtype: str
        """
        return self._authorized_date

    @authorized_date.setter
    def authorized_date(self, authorized_date):
        """Sets the authorized_date of this Transaction.

        In Codat's data model, dates and times are represented using the <a class=\"external\" href=\"https://en.wikipedia.org/wiki/ISO_8601\" target=\"_blank\">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:  ``` 2020-10-08T22:40:50Z 2021-01-01T00:00:00 ```    When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:  - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z` - Unqualified local time: `2021-11-15T01:00:00` - UTC time offsets: `2021-11-15T01:00:00-05:00`  > Time zones >  > Not all dates from Codat will contain information about time zones.   > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.

        :param authorized_date: The authorized_date of this Transaction.
        :type authorized_date: str
        """

        self._authorized_date = authorized_date

    @property
    def code(self):
        """Gets the code of this Transaction.


        :return: The code of this Transaction.
        :rtype: TransactionCode
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this Transaction.


        :param code: The code of this Transaction.
        :type code: TransactionCode
        """

        self._code = code

    @property
    def currency(self):
        """Gets the currency of this Transaction.

        The currency of the bank transaction.

        :return: The currency of this Transaction.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this Transaction.

        The currency of the bank transaction.

        :param currency: The currency of this Transaction.
        :type currency: str
        """
        if currency is None:
            raise ValueError("Invalid value for `currency`, must not be `None`")
        if currency is not None and len(currency) < 1:
            raise ValueError("Invalid value for `currency`, length must be greater than or equal to `1`")

        self._currency = currency

    @property
    def description(self):
        """Gets the description of this Transaction.

        The description of the bank transaction.

        :return: The description of this Transaction.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Transaction.

        The description of the bank transaction.

        :param description: The description of this Transaction.
        :type description: str
        """

        self._description = description

    @property
    def id(self):
        """Gets the id of this Transaction.

        The unique identifier of the bank transaction.

        :return: The id of this Transaction.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Transaction.

        The unique identifier of the bank transaction.

        :param id: The id of this Transaction.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")
        if id is not None and len(id) < 1:
            raise ValueError("Invalid value for `id`, length must be greater than or equal to `1`")

        self._id = id

    @property
    def merchant_name(self):
        """Gets the merchant_name of this Transaction.

        The name of the merchant.

        :return: The merchant_name of this Transaction.
        :rtype: str
        """
        return self._merchant_name

    @merchant_name.setter
    def merchant_name(self, merchant_name):
        """Sets the merchant_name of this Transaction.

        The name of the merchant.

        :param merchant_name: The merchant_name of this Transaction.
        :type merchant_name: str
        """

        self._merchant_name = merchant_name

    @property
    def posted_date(self):
        """Gets the posted_date of this Transaction.

        In Codat's data model, dates and times are represented using the <a class=\"external\" href=\"https://en.wikipedia.org/wiki/ISO_8601\" target=\"_blank\">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:  ``` 2020-10-08T22:40:50Z 2021-01-01T00:00:00 ```    When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:  - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z` - Unqualified local time: `2021-11-15T01:00:00` - UTC time offsets: `2021-11-15T01:00:00-05:00`  > Time zones >  > Not all dates from Codat will contain information about time zones.   > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.

        :return: The posted_date of this Transaction.
        :rtype: str
        """
        return self._posted_date

    @posted_date.setter
    def posted_date(self, posted_date):
        """Sets the posted_date of this Transaction.

        In Codat's data model, dates and times are represented using the <a class=\"external\" href=\"https://en.wikipedia.org/wiki/ISO_8601\" target=\"_blank\">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:  ``` 2020-10-08T22:40:50Z 2021-01-01T00:00:00 ```    When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:  - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z` - Unqualified local time: `2021-11-15T01:00:00` - UTC time offsets: `2021-11-15T01:00:00-05:00`  > Time zones >  > Not all dates from Codat will contain information about time zones.   > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.

        :param posted_date: The posted_date of this Transaction.
        :type posted_date: str
        """

        self._posted_date = posted_date

    @property
    def transaction_category_ref(self):
        """Gets the transaction_category_ref of this Transaction.


        :return: The transaction_category_ref of this Transaction.
        :rtype: TransactionCategoryRef
        """
        return self._transaction_category_ref

    @transaction_category_ref.setter
    def transaction_category_ref(self, transaction_category_ref):
        """Sets the transaction_category_ref of this Transaction.


        :param transaction_category_ref: The transaction_category_ref of this Transaction.
        :type transaction_category_ref: TransactionCategoryRef
        """

        self._transaction_category_ref = transaction_category_ref
