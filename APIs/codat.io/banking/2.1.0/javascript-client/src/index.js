/**
 * Banking API
 * Codat's Banking API allows you to access standardised data from over bank accounts via third party providers.  Standardize how you connect to your customers’ bank accounts. Retrieve bank account and bank transaction data in the same way via our partnerships with Plaid and TrueLayer.  [Read more...](https://docs.codat.io/banking-api/overview)  [See our OpenAPI spec](https://github.com/codatio/oas) 
 *
 * The version of the OpenAPI document: 2.1.0
 * Contact: support@codat.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from './ApiClient';
import Account from './model/Account';
import AccountBalance from './model/AccountBalance';
import Transaction from './model/Transaction';
import TransactionCategory from './model/TransactionCategory';
import AccountBalancesApi from './api/AccountBalancesApi';
import AccountsApi from './api/AccountsApi';
import TransactionCategoriesApi from './api/TransactionCategoriesApi';
import TransactionsApi from './api/TransactionsApi';


/**
* Codat&#39;s Banking API allows you to access standardised data from over bank accounts via third party providers.  Standardize how you connect to your customers’ bank accounts. Retrieve bank account and bank transaction data in the same way via our partnerships with Plaid and TrueLayer.  [Read more...](https://docs.codat.io/banking-api/overview)  [See our OpenAPI spec](https://github.com/codatio/oas) .<br>
* The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
* <p>
* An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
* <pre>
* var BankingApi = require('index'); // See note below*.
* var xxxSvc = new BankingApi.XxxApi(); // Allocate the API class we're going to use.
* var yyyModel = new BankingApi.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
* and put the application logic within the callback function.</em>
* </p>
* <p>
* A non-AMD browser application (discouraged) might do something like this:
* <pre>
* var xxxSvc = new BankingApi.XxxApi(); // Allocate the API class we're going to use.
* var yyy = new BankingApi.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* </p>
* @module index
* @version 2.1.0
*/
export {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient,

    /**
     * The Account model constructor.
     * @property {module:model/Account}
     */
    Account,

    /**
     * The AccountBalance model constructor.
     * @property {module:model/AccountBalance}
     */
    AccountBalance,

    /**
     * The Transaction model constructor.
     * @property {module:model/Transaction}
     */
    Transaction,

    /**
     * The TransactionCategory model constructor.
     * @property {module:model/TransactionCategory}
     */
    TransactionCategory,

    /**
    * The AccountBalancesApi service constructor.
    * @property {module:api/AccountBalancesApi}
    */
    AccountBalancesApi,

    /**
    * The AccountsApi service constructor.
    * @property {module:api/AccountsApi}
    */
    AccountsApi,

    /**
    * The TransactionCategoriesApi service constructor.
    * @property {module:api/TransactionCategoriesApi}
    */
    TransactionCategoriesApi,

    /**
    * The TransactionsApi service constructor.
    * @property {module:api/TransactionsApi}
    */
    TransactionsApi
};
