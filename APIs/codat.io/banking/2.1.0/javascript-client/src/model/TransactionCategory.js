/**
 * Banking API
 * Codat's Banking API allows you to access standardised data from over bank accounts via third party providers.  Standardize how you connect to your customersâ€™ bank accounts. Retrieve bank account and bank transaction data in the same way via our partnerships with Plaid and TrueLayer.  [Read more...](https://docs.codat.io/banking-api/overview)  [See our OpenAPI spec](https://github.com/codatio/oas) 
 *
 * The version of the OpenAPI document: 2.1.0
 * Contact: support@codat.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ModifiedDates from './ModifiedDates';
import TransactionCategoryStatus from './TransactionCategoryStatus';

/**
 * The TransactionCategory model module.
 * @module model/TransactionCategory
 * @version 2.1.0
 */
class TransactionCategory {
    /**
     * Constructs a new <code>TransactionCategory</code>.
     * The Banking Transaction Categories data type provides a list of hierarchical categories associated with a transaction for greater contextual meaning to transaction activity.  Responses are paged, so you should provide &#x60;page&#x60; and &#x60;pageSize&#x60; query parameters in your request.
     * @alias module:model/TransactionCategory
     * @implements module:model/ModifiedDates
     * @param id {String} The unique identifier of the bank transaction category.
     * @param name {String} The name of the bank transaction category.
     */
    constructor(id, name) { 
        
        TransactionCategory.initialize(this, id, name);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, name) { 
        obj['id'] = id;
        obj['name'] = name;
    }

    /**
     * Constructs a <code>TransactionCategory</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TransactionCategory} obj Optional instance to populate.
     * @return {module:model/TransactionCategory} The populated <code>TransactionCategory</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TransactionCategory();
            ModifiedDates.constructFromObject(data, obj);

            if (data.hasOwnProperty('modifiedDate')) {
                obj['modifiedDate'] = ApiClient.convertToType(data['modifiedDate'], 'String');
            }
            if (data.hasOwnProperty('sourceModifiedDate')) {
                obj['sourceModifiedDate'] = ApiClient.convertToType(data['sourceModifiedDate'], 'String');
            }
            if (data.hasOwnProperty('hasChildren')) {
                obj['hasChildren'] = ApiClient.convertToType(data['hasChildren'], 'Boolean');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('parentId')) {
                obj['parentId'] = ApiClient.convertToType(data['parentId'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = TransactionCategoryStatus.constructFromObject(data['status']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TransactionCategory</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TransactionCategory</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of TransactionCategory.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['modifiedDate'] && !(typeof data['modifiedDate'] === 'string' || data['modifiedDate'] instanceof String)) {
            throw new Error("Expected the field `modifiedDate` to be a primitive type in the JSON string but got " + data['modifiedDate']);
        }
        // ensure the json data is a string
        if (data['sourceModifiedDate'] && !(typeof data['sourceModifiedDate'] === 'string' || data['sourceModifiedDate'] instanceof String)) {
            throw new Error("Expected the field `sourceModifiedDate` to be a primitive type in the JSON string but got " + data['sourceModifiedDate']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['parentId'] && !(typeof data['parentId'] === 'string' || data['parentId'] instanceof String)) {
            throw new Error("Expected the field `parentId` to be a primitive type in the JSON string but got " + data['parentId']);
        }

        return true;
    }


}

TransactionCategory.RequiredProperties = ["id", "name"];

/**
 * In Codat's data model, dates and times are represented using the <a class=\"external\" href=\"https://en.wikipedia.org/wiki/ISO_8601\" target=\"_blank\">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:  ``` 2020-10-08T22:40:50Z 2021-01-01T00:00:00 ```    When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:  - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z` - Unqualified local time: `2021-11-15T01:00:00` - UTC time offsets: `2021-11-15T01:00:00-05:00`  > Time zones >  > Not all dates from Codat will contain information about time zones.   > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
 * @member {String} modifiedDate
 */
TransactionCategory.prototype['modifiedDate'] = undefined;

/**
 * In Codat's data model, dates and times are represented using the <a class=\"external\" href=\"https://en.wikipedia.org/wiki/ISO_8601\" target=\"_blank\">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:  ``` 2020-10-08T22:40:50Z 2021-01-01T00:00:00 ```    When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:  - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z` - Unqualified local time: `2021-11-15T01:00:00` - UTC time offsets: `2021-11-15T01:00:00-05:00`  > Time zones >  > Not all dates from Codat will contain information about time zones.   > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
 * @member {String} sourceModifiedDate
 */
TransactionCategory.prototype['sourceModifiedDate'] = undefined;

/**
 * A Boolean indicating whether there are other bank transaction categories beneath this one in the hierarchy.
 * @member {Boolean} hasChildren
 */
TransactionCategory.prototype['hasChildren'] = undefined;

/**
 * The unique identifier of the bank transaction category.
 * @member {String} id
 */
TransactionCategory.prototype['id'] = undefined;

/**
 * The name of the bank transaction category.
 * @member {String} name
 */
TransactionCategory.prototype['name'] = undefined;

/**
 * The unique identifier of the parent bank transaction category.
 * @member {String} parentId
 */
TransactionCategory.prototype['parentId'] = undefined;

/**
 * @member {module:model/TransactionCategoryStatus} status
 */
TransactionCategory.prototype['status'] = undefined;






export default TransactionCategory;

