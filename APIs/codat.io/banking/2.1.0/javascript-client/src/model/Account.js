/**
 * Banking API
 * Codat's Banking API allows you to access standardised data from over bank accounts via third party providers.  Standardize how you connect to your customersâ€™ bank accounts. Retrieve bank account and bank transaction data in the same way via our partnerships with Plaid and TrueLayer.  [Read more...](https://docs.codat.io/banking-api/overview)  [See our OpenAPI spec](https://github.com/codatio/oas) 
 *
 * The version of the OpenAPI document: 2.1.0
 * Contact: support@codat.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AccountBalanceAmounts from './AccountBalanceAmounts';
import AccountIdentifiers from './AccountIdentifiers';
import AccountInstitution from './AccountInstitution';
import AccountType from './AccountType';
import ModifiedDates from './ModifiedDates';

/**
 * The Account model module.
 * @module model/Account
 * @version 2.1.0
 */
class Account {
    /**
     * Constructs a new <code>Account</code>.
     * This data type provides a list of all the SMB&#39;s bank accounts, with rich data like balances, account numbers, and institutions holding the accounts.  Explore our [data coverage](https://knowledge.codat.io/supported-features/banking?view&#x3D;tab-by-data-type&amp;dataType&#x3D;banking-accounts).  Responses are paged, so you should provide &#x60;page&#x60; and &#x60;pageSize&#x60; query parameters in your request.
     * @alias module:model/Account
     * @implements module:model/ModifiedDates
     * @param balance {module:model/AccountBalanceAmounts} An object containing bank balance data.
     * @param currency {String} The currency code for the account.
     * @param id {String} The ID of the account from the provider.
     * @param identifiers {module:model/AccountIdentifiers} 
     * @param institution {module:model/AccountInstitution} 
     * @param name {String} The name of the account according to the provider.
     * @param type {module:model/AccountType} 
     */
    constructor(balance, currency, id, identifiers, institution, name, type) { 
        
        Account.initialize(this, balance, currency, id, identifiers, institution, name, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, balance, currency, id, identifiers, institution, name, type) { 
        obj['balance'] = balance;
        obj['currency'] = currency;
        obj['id'] = id;
        obj['identifiers'] = identifiers;
        obj['institution'] = institution;
        obj['name'] = name;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>Account</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Account} obj Optional instance to populate.
     * @return {module:model/Account} The populated <code>Account</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Account();
            ModifiedDates.constructFromObject(data, obj);

            if (data.hasOwnProperty('modifiedDate')) {
                obj['modifiedDate'] = ApiClient.convertToType(data['modifiedDate'], 'String');
            }
            if (data.hasOwnProperty('sourceModifiedDate')) {
                obj['sourceModifiedDate'] = ApiClient.convertToType(data['sourceModifiedDate'], 'String');
            }
            if (data.hasOwnProperty('balance')) {
                obj['balance'] = AccountBalanceAmounts.constructFromObject(data['balance']);
            }
            if (data.hasOwnProperty('currency')) {
                obj['currency'] = ApiClient.convertToType(data['currency'], 'String');
            }
            if (data.hasOwnProperty('holder')) {
                obj['holder'] = ApiClient.convertToType(data['holder'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('identifiers')) {
                obj['identifiers'] = AccountIdentifiers.constructFromObject(data['identifiers']);
            }
            if (data.hasOwnProperty('informalName')) {
                obj['informalName'] = ApiClient.convertToType(data['informalName'], 'String');
            }
            if (data.hasOwnProperty('institution')) {
                obj['institution'] = AccountInstitution.constructFromObject(data['institution']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = AccountType.constructFromObject(data['type']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Account</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Account</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Account.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['modifiedDate'] && !(typeof data['modifiedDate'] === 'string' || data['modifiedDate'] instanceof String)) {
            throw new Error("Expected the field `modifiedDate` to be a primitive type in the JSON string but got " + data['modifiedDate']);
        }
        // ensure the json data is a string
        if (data['sourceModifiedDate'] && !(typeof data['sourceModifiedDate'] === 'string' || data['sourceModifiedDate'] instanceof String)) {
            throw new Error("Expected the field `sourceModifiedDate` to be a primitive type in the JSON string but got " + data['sourceModifiedDate']);
        }
        // validate the optional field `balance`
        if (data['balance']) { // data not null
          AccountBalanceAmounts.validateJSON(data['balance']);
        }
        // ensure the json data is a string
        if (data['currency'] && !(typeof data['currency'] === 'string' || data['currency'] instanceof String)) {
            throw new Error("Expected the field `currency` to be a primitive type in the JSON string but got " + data['currency']);
        }
        // ensure the json data is a string
        if (data['holder'] && !(typeof data['holder'] === 'string' || data['holder'] instanceof String)) {
            throw new Error("Expected the field `holder` to be a primitive type in the JSON string but got " + data['holder']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // validate the optional field `identifiers`
        if (data['identifiers']) { // data not null
          AccountIdentifiers.validateJSON(data['identifiers']);
        }
        // ensure the json data is a string
        if (data['informalName'] && !(typeof data['informalName'] === 'string' || data['informalName'] instanceof String)) {
            throw new Error("Expected the field `informalName` to be a primitive type in the JSON string but got " + data['informalName']);
        }
        // validate the optional field `institution`
        if (data['institution']) { // data not null
          AccountInstitution.validateJSON(data['institution']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }

        return true;
    }


}

Account.RequiredProperties = ["balance", "currency", "id", "identifiers", "institution", "name", "type"];

/**
 * In Codat's data model, dates and times are represented using the <a class=\"external\" href=\"https://en.wikipedia.org/wiki/ISO_8601\" target=\"_blank\">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:  ``` 2020-10-08T22:40:50Z 2021-01-01T00:00:00 ```    When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:  - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z` - Unqualified local time: `2021-11-15T01:00:00` - UTC time offsets: `2021-11-15T01:00:00-05:00`  > Time zones >  > Not all dates from Codat will contain information about time zones.   > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
 * @member {String} modifiedDate
 */
Account.prototype['modifiedDate'] = undefined;

/**
 * In Codat's data model, dates and times are represented using the <a class=\"external\" href=\"https://en.wikipedia.org/wiki/ISO_8601\" target=\"_blank\">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:  ``` 2020-10-08T22:40:50Z 2021-01-01T00:00:00 ```    When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:  - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z` - Unqualified local time: `2021-11-15T01:00:00` - UTC time offsets: `2021-11-15T01:00:00-05:00`  > Time zones >  > Not all dates from Codat will contain information about time zones.   > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
 * @member {String} sourceModifiedDate
 */
Account.prototype['sourceModifiedDate'] = undefined;

/**
 * An object containing bank balance data.
 * @member {module:model/AccountBalanceAmounts} balance
 */
Account.prototype['balance'] = undefined;

/**
 * The currency code for the account.
 * @member {String} currency
 */
Account.prototype['currency'] = undefined;

/**
 * The name of the person or company who holds the account.
 * @member {String} holder
 */
Account.prototype['holder'] = undefined;

/**
 * The ID of the account from the provider.
 * @member {String} id
 */
Account.prototype['id'] = undefined;

/**
 * @member {module:model/AccountIdentifiers} identifiers
 */
Account.prototype['identifiers'] = undefined;

/**
 * The friendly name of the account, chosen by the holder. This may not have been set by the account holder and therefore is not always available.
 * @member {String} informalName
 */
Account.prototype['informalName'] = undefined;

/**
 * @member {module:model/AccountInstitution} institution
 */
Account.prototype['institution'] = undefined;

/**
 * The name of the account according to the provider.
 * @member {String} name
 */
Account.prototype['name'] = undefined;

/**
 * @member {module:model/AccountType} type
 */
Account.prototype['type'] = undefined;






export default Account;

