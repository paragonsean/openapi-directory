/**
 * Codat Expense API
 * The API for Sync for Expenses. Sync for Expenses is an API and a set of supporting tools. It has been built to enable corporate card and expense management platforms to provide high-quality integrations with multiple accounting platforms through a standardized API.  [Read more...](https://docs.codat.io/sync-for-expenses/overview)  [See our OpenAPI spec](https://github.com/codatio/oas)
 *
 * The version of the OpenAPI document: prealpha
 * Contact: expenses@codat.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDataConnection.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDataConnection::OAIDataConnection(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDataConnection::OAIDataConnection() {
    this->initializeModel();
}

OAIDataConnection::~OAIDataConnection() {}

void OAIDataConnection::initializeModel() {

    m_additional_properties_isSet = false;
    m_additional_properties_isValid = false;

    m_connection_info_isSet = false;
    m_connection_info_isValid = false;

    m_created_isSet = false;
    m_created_isValid = false;

    m_data_connection_errors_isSet = false;
    m_data_connection_errors_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_integration_id_isSet = false;
    m_integration_id_isValid = false;

    m_integration_key_isSet = false;
    m_integration_key_isValid = false;

    m_last_sync_isSet = false;
    m_last_sync_isValid = false;

    m_link_url_isSet = false;
    m_link_url_isValid = false;

    m_platform_name_isSet = false;
    m_platform_name_isValid = false;

    m_source_id_isSet = false;
    m_source_id_isValid = false;

    m_source_type_isSet = false;
    m_source_type_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIDataConnection::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDataConnection::fromJsonObject(QJsonObject json) {

    m_additional_properties_isValid = ::OpenAPI::fromJsonValue(m_additional_properties, json[QString("additionalProperties")]);
    m_additional_properties_isSet = !json[QString("additionalProperties")].isNull() && m_additional_properties_isValid;

    m_connection_info_isValid = ::OpenAPI::fromJsonValue(m_connection_info, json[QString("connectionInfo")]);
    m_connection_info_isSet = !json[QString("connectionInfo")].isNull() && m_connection_info_isValid;

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("created")]);
    m_created_isSet = !json[QString("created")].isNull() && m_created_isValid;

    m_data_connection_errors_isValid = ::OpenAPI::fromJsonValue(m_data_connection_errors, json[QString("dataConnectionErrors")]);
    m_data_connection_errors_isSet = !json[QString("dataConnectionErrors")].isNull() && m_data_connection_errors_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_integration_id_isValid = ::OpenAPI::fromJsonValue(m_integration_id, json[QString("integrationId")]);
    m_integration_id_isSet = !json[QString("integrationId")].isNull() && m_integration_id_isValid;

    m_integration_key_isValid = ::OpenAPI::fromJsonValue(m_integration_key, json[QString("integrationKey")]);
    m_integration_key_isSet = !json[QString("integrationKey")].isNull() && m_integration_key_isValid;

    m_last_sync_isValid = ::OpenAPI::fromJsonValue(m_last_sync, json[QString("lastSync")]);
    m_last_sync_isSet = !json[QString("lastSync")].isNull() && m_last_sync_isValid;

    m_link_url_isValid = ::OpenAPI::fromJsonValue(m_link_url, json[QString("linkUrl")]);
    m_link_url_isSet = !json[QString("linkUrl")].isNull() && m_link_url_isValid;

    m_platform_name_isValid = ::OpenAPI::fromJsonValue(m_platform_name, json[QString("platformName")]);
    m_platform_name_isSet = !json[QString("platformName")].isNull() && m_platform_name_isValid;

    m_source_id_isValid = ::OpenAPI::fromJsonValue(m_source_id, json[QString("sourceId")]);
    m_source_id_isSet = !json[QString("sourceId")].isNull() && m_source_id_isValid;

    m_source_type_isValid = ::OpenAPI::fromJsonValue(m_source_type, json[QString("sourceType")]);
    m_source_type_isSet = !json[QString("sourceType")].isNull() && m_source_type_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIDataConnection::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDataConnection::asJsonObject() const {
    QJsonObject obj;
    if (m_additional_properties_isSet) {
        obj.insert(QString("additionalProperties"), ::OpenAPI::toJsonValue(m_additional_properties));
    }
    if (m_connection_info.size() > 0) {
        obj.insert(QString("connectionInfo"), ::OpenAPI::toJsonValue(m_connection_info));
    }
    if (m_created_isSet) {
        obj.insert(QString("created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_data_connection_errors.size() > 0) {
        obj.insert(QString("dataConnectionErrors"), ::OpenAPI::toJsonValue(m_data_connection_errors));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_integration_id_isSet) {
        obj.insert(QString("integrationId"), ::OpenAPI::toJsonValue(m_integration_id));
    }
    if (m_integration_key_isSet) {
        obj.insert(QString("integrationKey"), ::OpenAPI::toJsonValue(m_integration_key));
    }
    if (m_last_sync_isSet) {
        obj.insert(QString("lastSync"), ::OpenAPI::toJsonValue(m_last_sync));
    }
    if (m_link_url_isSet) {
        obj.insert(QString("linkUrl"), ::OpenAPI::toJsonValue(m_link_url));
    }
    if (m_platform_name_isSet) {
        obj.insert(QString("platformName"), ::OpenAPI::toJsonValue(m_platform_name));
    }
    if (m_source_id_isSet) {
        obj.insert(QString("sourceId"), ::OpenAPI::toJsonValue(m_source_id));
    }
    if (m_source_type_isSet) {
        obj.insert(QString("sourceType"), ::OpenAPI::toJsonValue(m_source_type));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QJsonValue OAIDataConnection::getAdditionalProperties() const {
    return m_additional_properties;
}
void OAIDataConnection::setAdditionalProperties(const QJsonValue &additional_properties) {
    m_additional_properties = additional_properties;
    m_additional_properties_isSet = true;
}

bool OAIDataConnection::is_additional_properties_Set() const{
    return m_additional_properties_isSet;
}

bool OAIDataConnection::is_additional_properties_Valid() const{
    return m_additional_properties_isValid;
}

QMap<QString, QString> OAIDataConnection::getConnectionInfo() const {
    return m_connection_info;
}
void OAIDataConnection::setConnectionInfo(const QMap<QString, QString> &connection_info) {
    m_connection_info = connection_info;
    m_connection_info_isSet = true;
}

bool OAIDataConnection::is_connection_info_Set() const{
    return m_connection_info_isSet;
}

bool OAIDataConnection::is_connection_info_Valid() const{
    return m_connection_info_isValid;
}

QString OAIDataConnection::getCreated() const {
    return m_created;
}
void OAIDataConnection::setCreated(const QString &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAIDataConnection::is_created_Set() const{
    return m_created_isSet;
}

bool OAIDataConnection::is_created_Valid() const{
    return m_created_isValid;
}

QList<OAIDataConnectionError> OAIDataConnection::getDataConnectionErrors() const {
    return m_data_connection_errors;
}
void OAIDataConnection::setDataConnectionErrors(const QList<OAIDataConnectionError> &data_connection_errors) {
    m_data_connection_errors = data_connection_errors;
    m_data_connection_errors_isSet = true;
}

bool OAIDataConnection::is_data_connection_errors_Set() const{
    return m_data_connection_errors_isSet;
}

bool OAIDataConnection::is_data_connection_errors_Valid() const{
    return m_data_connection_errors_isValid;
}

QString OAIDataConnection::getId() const {
    return m_id;
}
void OAIDataConnection::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIDataConnection::is_id_Set() const{
    return m_id_isSet;
}

bool OAIDataConnection::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIDataConnection::getIntegrationId() const {
    return m_integration_id;
}
void OAIDataConnection::setIntegrationId(const QString &integration_id) {
    m_integration_id = integration_id;
    m_integration_id_isSet = true;
}

bool OAIDataConnection::is_integration_id_Set() const{
    return m_integration_id_isSet;
}

bool OAIDataConnection::is_integration_id_Valid() const{
    return m_integration_id_isValid;
}

QString OAIDataConnection::getIntegrationKey() const {
    return m_integration_key;
}
void OAIDataConnection::setIntegrationKey(const QString &integration_key) {
    m_integration_key = integration_key;
    m_integration_key_isSet = true;
}

bool OAIDataConnection::is_integration_key_Set() const{
    return m_integration_key_isSet;
}

bool OAIDataConnection::is_integration_key_Valid() const{
    return m_integration_key_isValid;
}

QString OAIDataConnection::getLastSync() const {
    return m_last_sync;
}
void OAIDataConnection::setLastSync(const QString &last_sync) {
    m_last_sync = last_sync;
    m_last_sync_isSet = true;
}

bool OAIDataConnection::is_last_sync_Set() const{
    return m_last_sync_isSet;
}

bool OAIDataConnection::is_last_sync_Valid() const{
    return m_last_sync_isValid;
}

QString OAIDataConnection::getLinkUrl() const {
    return m_link_url;
}
void OAIDataConnection::setLinkUrl(const QString &link_url) {
    m_link_url = link_url;
    m_link_url_isSet = true;
}

bool OAIDataConnection::is_link_url_Set() const{
    return m_link_url_isSet;
}

bool OAIDataConnection::is_link_url_Valid() const{
    return m_link_url_isValid;
}

QString OAIDataConnection::getPlatformName() const {
    return m_platform_name;
}
void OAIDataConnection::setPlatformName(const QString &platform_name) {
    m_platform_name = platform_name;
    m_platform_name_isSet = true;
}

bool OAIDataConnection::is_platform_name_Set() const{
    return m_platform_name_isSet;
}

bool OAIDataConnection::is_platform_name_Valid() const{
    return m_platform_name_isValid;
}

QString OAIDataConnection::getSourceId() const {
    return m_source_id;
}
void OAIDataConnection::setSourceId(const QString &source_id) {
    m_source_id = source_id;
    m_source_id_isSet = true;
}

bool OAIDataConnection::is_source_id_Set() const{
    return m_source_id_isSet;
}

bool OAIDataConnection::is_source_id_Valid() const{
    return m_source_id_isValid;
}

QString OAIDataConnection::getSourceType() const {
    return m_source_type;
}
void OAIDataConnection::setSourceType(const QString &source_type) {
    m_source_type = source_type;
    m_source_type_isSet = true;
}

bool OAIDataConnection::is_source_type_Set() const{
    return m_source_type_isSet;
}

bool OAIDataConnection::is_source_type_Valid() const{
    return m_source_type_isValid;
}

OAIDataConnectionStatus OAIDataConnection::getStatus() const {
    return m_status;
}
void OAIDataConnection::setStatus(const OAIDataConnectionStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIDataConnection::is_status_Set() const{
    return m_status_isSet;
}

bool OAIDataConnection::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIDataConnection::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_additional_properties_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_connection_info.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_connection_errors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_integration_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_integration_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_sync_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_link_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_platform_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDataConnection::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_created_isValid && m_id_isValid && m_integration_id_isValid && m_integration_key_isValid && m_link_url_isValid && m_platform_name_isValid && m_source_id_isValid && m_source_type_isValid && m_status_isValid && true;
}

} // namespace OpenAPI
