/**
 * Codat Expense API
 * The API for Sync for Expenses. Sync for Expenses is an API and a set of supporting tools. It has been built to enable corporate card and expense management platforms to provide high-quality integrations with multiple accounting platforms through a standardized API.  [Read more...](https://docs.codat.io/sync-for-expenses/overview)  [See our OpenAPI spec](https://github.com/codatio/oas)
 *
 * The version of the OpenAPI document: prealpha
 * Contact: expenses@codat.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIMappingOptions.h
 *
 * 
 */

#ifndef OAIMappingOptions_H
#define OAIMappingOptions_H

#include <QJsonObject>

#include "OAIAccountMappingInfo.h"
#include "OAITaxRateMappingInfo.h"
#include "OAITrackingCategoryMappingInfo.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIAccountMappingInfo;
class OAITaxRateMappingInfo;
class OAITrackingCategoryMappingInfo;

class OAIMappingOptions : public OAIObject {
public:
    OAIMappingOptions();
    OAIMappingOptions(QString json);
    ~OAIMappingOptions() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<OAIAccountMappingInfo> getAccounts() const;
    void setAccounts(const QList<OAIAccountMappingInfo> &accounts);
    bool is_accounts_Set() const;
    bool is_accounts_Valid() const;

    QString getExpenseProvider() const;
    void setExpenseProvider(const QString &expense_provider);
    bool is_expense_provider_Set() const;
    bool is_expense_provider_Valid() const;

    QList<OAITaxRateMappingInfo> getTaxRates() const;
    void setTaxRates(const QList<OAITaxRateMappingInfo> &tax_rates);
    bool is_tax_rates_Set() const;
    bool is_tax_rates_Valid() const;

    QList<OAITrackingCategoryMappingInfo> getTrackingCategories() const;
    void setTrackingCategories(const QList<OAITrackingCategoryMappingInfo> &tracking_categories);
    bool is_tracking_categories_Set() const;
    bool is_tracking_categories_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<OAIAccountMappingInfo> m_accounts;
    bool m_accounts_isSet;
    bool m_accounts_isValid;

    QString m_expense_provider;
    bool m_expense_provider_isSet;
    bool m_expense_provider_isValid;

    QList<OAITaxRateMappingInfo> m_tax_rates;
    bool m_tax_rates_isSet;
    bool m_tax_rates_isValid;

    QList<OAITrackingCategoryMappingInfo> m_tracking_categories;
    bool m_tracking_categories_isSet;
    bool m_tracking_categories_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIMappingOptions)

#endif // OAIMappingOptions_H
