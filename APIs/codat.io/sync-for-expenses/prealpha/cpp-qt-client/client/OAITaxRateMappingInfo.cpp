/**
 * Codat Expense API
 * The API for Sync for Expenses. Sync for Expenses is an API and a set of supporting tools. It has been built to enable corporate card and expense management platforms to provide high-quality integrations with multiple accounting platforms through a standardized API.  [Read more...](https://docs.codat.io/sync-for-expenses/overview)  [See our OpenAPI spec](https://github.com/codatio/oas)
 *
 * The version of the OpenAPI document: prealpha
 * Contact: expenses@codat.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITaxRateMappingInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITaxRateMappingInfo::OAITaxRateMappingInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITaxRateMappingInfo::OAITaxRateMappingInfo() {
    this->initializeModel();
}

OAITaxRateMappingInfo::~OAITaxRateMappingInfo() {}

void OAITaxRateMappingInfo::initializeModel() {

    m_code_isSet = false;
    m_code_isValid = false;

    m_effective_tax_rate_isSet = false;
    m_effective_tax_rate_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_total_tax_rate_isSet = false;
    m_total_tax_rate_isValid = false;

    m_valid_transaction_types_isSet = false;
    m_valid_transaction_types_isValid = false;
}

void OAITaxRateMappingInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITaxRateMappingInfo::fromJsonObject(QJsonObject json) {

    m_code_isValid = ::OpenAPI::fromJsonValue(m_code, json[QString("code")]);
    m_code_isSet = !json[QString("code")].isNull() && m_code_isValid;

    m_effective_tax_rate_isValid = ::OpenAPI::fromJsonValue(m_effective_tax_rate, json[QString("effectiveTaxRate")]);
    m_effective_tax_rate_isSet = !json[QString("effectiveTaxRate")].isNull() && m_effective_tax_rate_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_total_tax_rate_isValid = ::OpenAPI::fromJsonValue(m_total_tax_rate, json[QString("totalTaxRate")]);
    m_total_tax_rate_isSet = !json[QString("totalTaxRate")].isNull() && m_total_tax_rate_isValid;

    m_valid_transaction_types_isValid = ::OpenAPI::fromJsonValue(m_valid_transaction_types, json[QString("validTransactionTypes")]);
    m_valid_transaction_types_isSet = !json[QString("validTransactionTypes")].isNull() && m_valid_transaction_types_isValid;
}

QString OAITaxRateMappingInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITaxRateMappingInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_code_isSet) {
        obj.insert(QString("code"), ::OpenAPI::toJsonValue(m_code));
    }
    if (m_effective_tax_rate_isSet) {
        obj.insert(QString("effectiveTaxRate"), ::OpenAPI::toJsonValue(m_effective_tax_rate));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_total_tax_rate_isSet) {
        obj.insert(QString("totalTaxRate"), ::OpenAPI::toJsonValue(m_total_tax_rate));
    }
    if (m_valid_transaction_types.size() > 0) {
        obj.insert(QString("validTransactionTypes"), ::OpenAPI::toJsonValue(m_valid_transaction_types));
    }
    return obj;
}

QString OAITaxRateMappingInfo::getCode() const {
    return m_code;
}
void OAITaxRateMappingInfo::setCode(const QString &code) {
    m_code = code;
    m_code_isSet = true;
}

bool OAITaxRateMappingInfo::is_code_Set() const{
    return m_code_isSet;
}

bool OAITaxRateMappingInfo::is_code_Valid() const{
    return m_code_isValid;
}

double OAITaxRateMappingInfo::getEffectiveTaxRate() const {
    return m_effective_tax_rate;
}
void OAITaxRateMappingInfo::setEffectiveTaxRate(const double &effective_tax_rate) {
    m_effective_tax_rate = effective_tax_rate;
    m_effective_tax_rate_isSet = true;
}

bool OAITaxRateMappingInfo::is_effective_tax_rate_Set() const{
    return m_effective_tax_rate_isSet;
}

bool OAITaxRateMappingInfo::is_effective_tax_rate_Valid() const{
    return m_effective_tax_rate_isValid;
}

QString OAITaxRateMappingInfo::getId() const {
    return m_id;
}
void OAITaxRateMappingInfo::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAITaxRateMappingInfo::is_id_Set() const{
    return m_id_isSet;
}

bool OAITaxRateMappingInfo::is_id_Valid() const{
    return m_id_isValid;
}

QString OAITaxRateMappingInfo::getName() const {
    return m_name;
}
void OAITaxRateMappingInfo::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAITaxRateMappingInfo::is_name_Set() const{
    return m_name_isSet;
}

bool OAITaxRateMappingInfo::is_name_Valid() const{
    return m_name_isValid;
}

double OAITaxRateMappingInfo::getTotalTaxRate() const {
    return m_total_tax_rate;
}
void OAITaxRateMappingInfo::setTotalTaxRate(const double &total_tax_rate) {
    m_total_tax_rate = total_tax_rate;
    m_total_tax_rate_isSet = true;
}

bool OAITaxRateMappingInfo::is_total_tax_rate_Set() const{
    return m_total_tax_rate_isSet;
}

bool OAITaxRateMappingInfo::is_total_tax_rate_Valid() const{
    return m_total_tax_rate_isValid;
}

QList<QString> OAITaxRateMappingInfo::getValidTransactionTypes() const {
    return m_valid_transaction_types;
}
void OAITaxRateMappingInfo::setValidTransactionTypes(const QList<QString> &valid_transaction_types) {
    m_valid_transaction_types = valid_transaction_types;
    m_valid_transaction_types_isSet = true;
}

bool OAITaxRateMappingInfo::is_valid_transaction_types_Set() const{
    return m_valid_transaction_types_isSet;
}

bool OAITaxRateMappingInfo::is_valid_transaction_types_Valid() const{
    return m_valid_transaction_types_isValid;
}

bool OAITaxRateMappingInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_effective_tax_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_tax_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_valid_transaction_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITaxRateMappingInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
