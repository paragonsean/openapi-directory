/**
 * Codat Expense API
 * The API for Sync for Expenses. Sync for Expenses is an API and a set of supporting tools. It has been built to enable corporate card and expense management platforms to provide high-quality integrations with multiple accounting platforms through a standardized API.  [Read more...](https://docs.codat.io/sync-for-expenses/overview)  [See our OpenAPI spec](https://github.com/codatio/oas)
 *
 * The version of the OpenAPI document: prealpha
 * Contact: expenses@codat.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICodatErrorMessage_validation.h
 *
 * 
 */

#ifndef OAICodatErrorMessage_validation_H
#define OAICodatErrorMessage_validation_H

#include <QJsonObject>

#include "OAICodatErrorMessage_validation_errors_inner.h"
#include <QList>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAICodatErrorMessage_validation_errors_inner;

class OAICodatErrorMessage_validation : public OAIObject {
public:
    OAICodatErrorMessage_validation();
    OAICodatErrorMessage_validation(QString json);
    ~OAICodatErrorMessage_validation() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<OAICodatErrorMessage_validation_errors_inner> getErrors() const;
    void setErrors(const QList<OAICodatErrorMessage_validation_errors_inner> &errors);
    bool is_errors_Set() const;
    bool is_errors_Valid() const;

    bool isHasErrors() const;
    void setHasErrors(const bool &has_errors);
    bool is_has_errors_Set() const;
    bool is_has_errors_Valid() const;

    bool isHasInternals() const;
    void setHasInternals(const bool &has_internals);
    bool is_has_internals_Set() const;
    bool is_has_internals_Valid() const;

    bool isHasWarnings() const;
    void setHasWarnings(const bool &has_warnings);
    bool is_has_warnings_Set() const;
    bool is_has_warnings_Valid() const;

    QList<OAICodatErrorMessage_validation_errors_inner> getInternals() const;
    void setInternals(const QList<OAICodatErrorMessage_validation_errors_inner> &internals);
    bool is_internals_Set() const;
    bool is_internals_Valid() const;

    QList<OAICodatErrorMessage_validation_errors_inner> getWarnings() const;
    void setWarnings(const QList<OAICodatErrorMessage_validation_errors_inner> &warnings);
    bool is_warnings_Set() const;
    bool is_warnings_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<OAICodatErrorMessage_validation_errors_inner> m_errors;
    bool m_errors_isSet;
    bool m_errors_isValid;

    bool m_has_errors;
    bool m_has_errors_isSet;
    bool m_has_errors_isValid;

    bool m_has_internals;
    bool m_has_internals_isSet;
    bool m_has_internals_isValid;

    bool m_has_warnings;
    bool m_has_warnings_isSet;
    bool m_has_warnings_isValid;

    QList<OAICodatErrorMessage_validation_errors_inner> m_internals;
    bool m_internals_isSet;
    bool m_internals_isValid;

    QList<OAICodatErrorMessage_validation_errors_inner> m_warnings;
    bool m_warnings_isSet;
    bool m_warnings_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICodatErrorMessage_validation)

#endif // OAICodatErrorMessage_validation_H
