/**
 * Codat Expense API
 * The API for Sync for Expenses. Sync for Expenses is an API and a set of supporting tools. It has been built to enable corporate card and expense management platforms to provide high-quality integrations with multiple accounting platforms through a standardized API.  [Read more...](https://docs.codat.io/sync-for-expenses/overview)  [See our OpenAPI spec](https://github.com/codatio/oas)
 *
 * The version of the OpenAPI document: prealpha
 * Contact: expenses@codat.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICodatErrorMessage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICodatErrorMessage::OAICodatErrorMessage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICodatErrorMessage::OAICodatErrorMessage() {
    this->initializeModel();
}

OAICodatErrorMessage::~OAICodatErrorMessage() {}

void OAICodatErrorMessage::initializeModel() {

    m_can_be_retried_isSet = false;
    m_can_be_retried_isValid = false;

    m_correlation_id_isSet = false;
    m_correlation_id_isValid = false;

    m_detailed_error_code_isSet = false;
    m_detailed_error_code_isValid = false;

    m_error_isSet = false;
    m_error_isValid = false;

    m_inner_isSet = false;
    m_inner_isValid = false;

    m_service_isSet = false;
    m_service_isValid = false;

    m_status_code_isSet = false;
    m_status_code_isValid = false;

    m_validation_isSet = false;
    m_validation_isValid = false;
}

void OAICodatErrorMessage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICodatErrorMessage::fromJsonObject(QJsonObject json) {

    m_can_be_retried_isValid = ::OpenAPI::fromJsonValue(m_can_be_retried, json[QString("canBeRetried")]);
    m_can_be_retried_isSet = !json[QString("canBeRetried")].isNull() && m_can_be_retried_isValid;

    m_correlation_id_isValid = ::OpenAPI::fromJsonValue(m_correlation_id, json[QString("correlationId")]);
    m_correlation_id_isSet = !json[QString("correlationId")].isNull() && m_correlation_id_isValid;

    m_detailed_error_code_isValid = ::OpenAPI::fromJsonValue(m_detailed_error_code, json[QString("detailedErrorCode")]);
    m_detailed_error_code_isSet = !json[QString("detailedErrorCode")].isNull() && m_detailed_error_code_isValid;

    m_error_isValid = ::OpenAPI::fromJsonValue(m_error, json[QString("error")]);
    m_error_isSet = !json[QString("error")].isNull() && m_error_isValid;

    m_inner_isValid = ::OpenAPI::fromJsonValue(m_inner, json[QString("inner")]);
    m_inner_isSet = !json[QString("inner")].isNull() && m_inner_isValid;

    m_service_isValid = ::OpenAPI::fromJsonValue(m_service, json[QString("service")]);
    m_service_isSet = !json[QString("service")].isNull() && m_service_isValid;

    m_status_code_isValid = ::OpenAPI::fromJsonValue(m_status_code, json[QString("statusCode")]);
    m_status_code_isSet = !json[QString("statusCode")].isNull() && m_status_code_isValid;

    m_validation_isValid = ::OpenAPI::fromJsonValue(m_validation, json[QString("validation")]);
    m_validation_isSet = !json[QString("validation")].isNull() && m_validation_isValid;
}

QString OAICodatErrorMessage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICodatErrorMessage::asJsonObject() const {
    QJsonObject obj;
    if (m_can_be_retried_isSet) {
        obj.insert(QString("canBeRetried"), ::OpenAPI::toJsonValue(m_can_be_retried));
    }
    if (m_correlation_id_isSet) {
        obj.insert(QString("correlationId"), ::OpenAPI::toJsonValue(m_correlation_id));
    }
    if (m_detailed_error_code_isSet) {
        obj.insert(QString("detailedErrorCode"), ::OpenAPI::toJsonValue(m_detailed_error_code));
    }
    if (m_error_isSet) {
        obj.insert(QString("error"), ::OpenAPI::toJsonValue(m_error));
    }
    if (m_inner_isSet) {
        obj.insert(QString("inner"), ::OpenAPI::toJsonValue(m_inner));
    }
    if (m_service_isSet) {
        obj.insert(QString("service"), ::OpenAPI::toJsonValue(m_service));
    }
    if (m_status_code_isSet) {
        obj.insert(QString("statusCode"), ::OpenAPI::toJsonValue(m_status_code));
    }
    if (m_validation.isSet()) {
        obj.insert(QString("validation"), ::OpenAPI::toJsonValue(m_validation));
    }
    return obj;
}

QString OAICodatErrorMessage::getCanBeRetried() const {
    return m_can_be_retried;
}
void OAICodatErrorMessage::setCanBeRetried(const QString &can_be_retried) {
    m_can_be_retried = can_be_retried;
    m_can_be_retried_isSet = true;
}

bool OAICodatErrorMessage::is_can_be_retried_Set() const{
    return m_can_be_retried_isSet;
}

bool OAICodatErrorMessage::is_can_be_retried_Valid() const{
    return m_can_be_retried_isValid;
}

QString OAICodatErrorMessage::getCorrelationId() const {
    return m_correlation_id;
}
void OAICodatErrorMessage::setCorrelationId(const QString &correlation_id) {
    m_correlation_id = correlation_id;
    m_correlation_id_isSet = true;
}

bool OAICodatErrorMessage::is_correlation_id_Set() const{
    return m_correlation_id_isSet;
}

bool OAICodatErrorMessage::is_correlation_id_Valid() const{
    return m_correlation_id_isValid;
}

qint32 OAICodatErrorMessage::getDetailedErrorCode() const {
    return m_detailed_error_code;
}
void OAICodatErrorMessage::setDetailedErrorCode(const qint32 &detailed_error_code) {
    m_detailed_error_code = detailed_error_code;
    m_detailed_error_code_isSet = true;
}

bool OAICodatErrorMessage::is_detailed_error_code_Set() const{
    return m_detailed_error_code_isSet;
}

bool OAICodatErrorMessage::is_detailed_error_code_Valid() const{
    return m_detailed_error_code_isValid;
}

QString OAICodatErrorMessage::getError() const {
    return m_error;
}
void OAICodatErrorMessage::setError(const QString &error) {
    m_error = error;
    m_error_isSet = true;
}

bool OAICodatErrorMessage::is_error_Set() const{
    return m_error_isSet;
}

bool OAICodatErrorMessage::is_error_Valid() const{
    return m_error_isValid;
}

QString OAICodatErrorMessage::getInner() const {
    return m_inner;
}
void OAICodatErrorMessage::setInner(const QString &inner) {
    m_inner = inner;
    m_inner_isSet = true;
}

bool OAICodatErrorMessage::is_inner_Set() const{
    return m_inner_isSet;
}

bool OAICodatErrorMessage::is_inner_Valid() const{
    return m_inner_isValid;
}

QString OAICodatErrorMessage::getService() const {
    return m_service;
}
void OAICodatErrorMessage::setService(const QString &service) {
    m_service = service;
    m_service_isSet = true;
}

bool OAICodatErrorMessage::is_service_Set() const{
    return m_service_isSet;
}

bool OAICodatErrorMessage::is_service_Valid() const{
    return m_service_isValid;
}

qint32 OAICodatErrorMessage::getStatusCode() const {
    return m_status_code;
}
void OAICodatErrorMessage::setStatusCode(const qint32 &status_code) {
    m_status_code = status_code;
    m_status_code_isSet = true;
}

bool OAICodatErrorMessage::is_status_code_Set() const{
    return m_status_code_isSet;
}

bool OAICodatErrorMessage::is_status_code_Valid() const{
    return m_status_code_isValid;
}

OAICodatErrorMessage_validation OAICodatErrorMessage::getValidation() const {
    return m_validation;
}
void OAICodatErrorMessage::setValidation(const OAICodatErrorMessage_validation &validation) {
    m_validation = validation;
    m_validation_isSet = true;
}

bool OAICodatErrorMessage::is_validation_Set() const{
    return m_validation_isSet;
}

bool OAICodatErrorMessage::is_validation_Valid() const{
    return m_validation_isValid;
}

bool OAICodatErrorMessage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_can_be_retried_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_correlation_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_detailed_error_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inner_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_validation.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICodatErrorMessage::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
