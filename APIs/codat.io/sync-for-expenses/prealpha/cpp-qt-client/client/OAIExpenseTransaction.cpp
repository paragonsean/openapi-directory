/**
 * Codat Expense API
 * The API for Sync for Expenses. Sync for Expenses is an API and a set of supporting tools. It has been built to enable corporate card and expense management platforms to provide high-quality integrations with multiple accounting platforms through a standardized API.  [Read more...](https://docs.codat.io/sync-for-expenses/overview)  [See our OpenAPI spec](https://github.com/codatio/oas)
 *
 * The version of the OpenAPI document: prealpha
 * Contact: expenses@codat.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExpenseTransaction.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExpenseTransaction::OAIExpenseTransaction(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExpenseTransaction::OAIExpenseTransaction() {
    this->initializeModel();
}

OAIExpenseTransaction::~OAIExpenseTransaction() {}

void OAIExpenseTransaction::initializeModel() {

    m_currency_isSet = false;
    m_currency_isValid = false;

    m_currency_rate_isSet = false;
    m_currency_rate_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_issue_date_isSet = false;
    m_issue_date_isValid = false;

    m_lines_isSet = false;
    m_lines_isValid = false;

    m_merchant_name_isSet = false;
    m_merchant_name_isValid = false;

    m_notes_isSet = false;
    m_notes_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIExpenseTransaction::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExpenseTransaction::fromJsonObject(QJsonObject json) {

    m_currency_isValid = ::OpenAPI::fromJsonValue(m_currency, json[QString("currency")]);
    m_currency_isSet = !json[QString("currency")].isNull() && m_currency_isValid;

    m_currency_rate_isValid = ::OpenAPI::fromJsonValue(m_currency_rate, json[QString("currencyRate")]);
    m_currency_rate_isSet = !json[QString("currencyRate")].isNull() && m_currency_rate_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_issue_date_isValid = ::OpenAPI::fromJsonValue(m_issue_date, json[QString("issueDate")]);
    m_issue_date_isSet = !json[QString("issueDate")].isNull() && m_issue_date_isValid;

    m_lines_isValid = ::OpenAPI::fromJsonValue(m_lines, json[QString("lines")]);
    m_lines_isSet = !json[QString("lines")].isNull() && m_lines_isValid;

    m_merchant_name_isValid = ::OpenAPI::fromJsonValue(m_merchant_name, json[QString("merchantName")]);
    m_merchant_name_isSet = !json[QString("merchantName")].isNull() && m_merchant_name_isValid;

    m_notes_isValid = ::OpenAPI::fromJsonValue(m_notes, json[QString("notes")]);
    m_notes_isSet = !json[QString("notes")].isNull() && m_notes_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIExpenseTransaction::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExpenseTransaction::asJsonObject() const {
    QJsonObject obj;
    if (m_currency_isSet) {
        obj.insert(QString("currency"), ::OpenAPI::toJsonValue(m_currency));
    }
    if (m_currency_rate_isSet) {
        obj.insert(QString("currencyRate"), ::OpenAPI::toJsonValue(m_currency_rate));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_issue_date_isSet) {
        obj.insert(QString("issueDate"), ::OpenAPI::toJsonValue(m_issue_date));
    }
    if (m_lines.size() > 0) {
        obj.insert(QString("lines"), ::OpenAPI::toJsonValue(m_lines));
    }
    if (m_merchant_name_isSet) {
        obj.insert(QString("merchantName"), ::OpenAPI::toJsonValue(m_merchant_name));
    }
    if (m_notes_isSet) {
        obj.insert(QString("notes"), ::OpenAPI::toJsonValue(m_notes));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIExpenseTransaction::getCurrency() const {
    return m_currency;
}
void OAIExpenseTransaction::setCurrency(const QString &currency) {
    m_currency = currency;
    m_currency_isSet = true;
}

bool OAIExpenseTransaction::is_currency_Set() const{
    return m_currency_isSet;
}

bool OAIExpenseTransaction::is_currency_Valid() const{
    return m_currency_isValid;
}

double OAIExpenseTransaction::getCurrencyRate() const {
    return m_currency_rate;
}
void OAIExpenseTransaction::setCurrencyRate(const double &currency_rate) {
    m_currency_rate = currency_rate;
    m_currency_rate_isSet = true;
}

bool OAIExpenseTransaction::is_currency_rate_Set() const{
    return m_currency_rate_isSet;
}

bool OAIExpenseTransaction::is_currency_rate_Valid() const{
    return m_currency_rate_isValid;
}

QString OAIExpenseTransaction::getId() const {
    return m_id;
}
void OAIExpenseTransaction::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIExpenseTransaction::is_id_Set() const{
    return m_id_isSet;
}

bool OAIExpenseTransaction::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIExpenseTransaction::getIssueDate() const {
    return m_issue_date;
}
void OAIExpenseTransaction::setIssueDate(const QString &issue_date) {
    m_issue_date = issue_date;
    m_issue_date_isSet = true;
}

bool OAIExpenseTransaction::is_issue_date_Set() const{
    return m_issue_date_isSet;
}

bool OAIExpenseTransaction::is_issue_date_Valid() const{
    return m_issue_date_isValid;
}

QList<OAIExpenseTransactionLine> OAIExpenseTransaction::getLines() const {
    return m_lines;
}
void OAIExpenseTransaction::setLines(const QList<OAIExpenseTransactionLine> &lines) {
    m_lines = lines;
    m_lines_isSet = true;
}

bool OAIExpenseTransaction::is_lines_Set() const{
    return m_lines_isSet;
}

bool OAIExpenseTransaction::is_lines_Valid() const{
    return m_lines_isValid;
}

QString OAIExpenseTransaction::getMerchantName() const {
    return m_merchant_name;
}
void OAIExpenseTransaction::setMerchantName(const QString &merchant_name) {
    m_merchant_name = merchant_name;
    m_merchant_name_isSet = true;
}

bool OAIExpenseTransaction::is_merchant_name_Set() const{
    return m_merchant_name_isSet;
}

bool OAIExpenseTransaction::is_merchant_name_Valid() const{
    return m_merchant_name_isValid;
}

QString OAIExpenseTransaction::getNotes() const {
    return m_notes;
}
void OAIExpenseTransaction::setNotes(const QString &notes) {
    m_notes = notes;
    m_notes_isSet = true;
}

bool OAIExpenseTransaction::is_notes_Set() const{
    return m_notes_isSet;
}

bool OAIExpenseTransaction::is_notes_Valid() const{
    return m_notes_isValid;
}

QString OAIExpenseTransaction::getType() const {
    return m_type;
}
void OAIExpenseTransaction::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIExpenseTransaction::is_type_Set() const{
    return m_type_isSet;
}

bool OAIExpenseTransaction::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIExpenseTransaction::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_issue_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lines.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_merchant_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExpenseTransaction::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_currency_isValid && m_id_isValid && m_issue_date_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
