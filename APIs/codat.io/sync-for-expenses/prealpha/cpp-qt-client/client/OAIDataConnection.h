/**
 * Codat Expense API
 * The API for Sync for Expenses. Sync for Expenses is an API and a set of supporting tools. It has been built to enable corporate card and expense management platforms to provide high-quality integrations with multiple accounting platforms through a standardized API.  [Read more...](https://docs.codat.io/sync-for-expenses/overview)  [See our OpenAPI spec](https://github.com/codatio/oas)
 *
 * The version of the OpenAPI document: prealpha
 * Contact: expenses@codat.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDataConnection.h
 *
 * A connection represents the link between a &#x60;company&#x60; and a source of data.
 */

#ifndef OAIDataConnection_H
#define OAIDataConnection_H

#include <QJsonObject>

#include "OAIDataConnectionError.h"
#include "OAIDataConnectionStatus.h"
#include <QJsonValue>
#include <QList>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIDataConnectionError;

class OAIDataConnection : public OAIObject {
public:
    OAIDataConnection();
    OAIDataConnection(QString json);
    ~OAIDataConnection() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QJsonValue getAdditionalProperties() const;
    void setAdditionalProperties(const QJsonValue &additional_properties);
    bool is_additional_properties_Set() const;
    bool is_additional_properties_Valid() const;

    QMap<QString, QString> getConnectionInfo() const;
    void setConnectionInfo(const QMap<QString, QString> &connection_info);
    bool is_connection_info_Set() const;
    bool is_connection_info_Valid() const;

    QString getCreated() const;
    void setCreated(const QString &created);
    bool is_created_Set() const;
    bool is_created_Valid() const;

    QList<OAIDataConnectionError> getDataConnectionErrors() const;
    void setDataConnectionErrors(const QList<OAIDataConnectionError> &data_connection_errors);
    bool is_data_connection_errors_Set() const;
    bool is_data_connection_errors_Valid() const;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QString getIntegrationId() const;
    void setIntegrationId(const QString &integration_id);
    bool is_integration_id_Set() const;
    bool is_integration_id_Valid() const;

    QString getIntegrationKey() const;
    void setIntegrationKey(const QString &integration_key);
    bool is_integration_key_Set() const;
    bool is_integration_key_Valid() const;

    QString getLastSync() const;
    void setLastSync(const QString &last_sync);
    bool is_last_sync_Set() const;
    bool is_last_sync_Valid() const;

    QString getLinkUrl() const;
    void setLinkUrl(const QString &link_url);
    bool is_link_url_Set() const;
    bool is_link_url_Valid() const;

    QString getPlatformName() const;
    void setPlatformName(const QString &platform_name);
    bool is_platform_name_Set() const;
    bool is_platform_name_Valid() const;

    QString getSourceId() const;
    void setSourceId(const QString &source_id);
    bool is_source_id_Set() const;
    bool is_source_id_Valid() const;

    QString getSourceType() const;
    void setSourceType(const QString &source_type);
    bool is_source_type_Set() const;
    bool is_source_type_Valid() const;

    OAIDataConnectionStatus getStatus() const;
    void setStatus(const OAIDataConnectionStatus &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QJsonValue m_additional_properties;
    bool m_additional_properties_isSet;
    bool m_additional_properties_isValid;

    QMap<QString, QString> m_connection_info;
    bool m_connection_info_isSet;
    bool m_connection_info_isValid;

    QString m_created;
    bool m_created_isSet;
    bool m_created_isValid;

    QList<OAIDataConnectionError> m_data_connection_errors;
    bool m_data_connection_errors_isSet;
    bool m_data_connection_errors_isValid;

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    QString m_integration_id;
    bool m_integration_id_isSet;
    bool m_integration_id_isValid;

    QString m_integration_key;
    bool m_integration_key_isSet;
    bool m_integration_key_isValid;

    QString m_last_sync;
    bool m_last_sync_isSet;
    bool m_last_sync_isValid;

    QString m_link_url;
    bool m_link_url_isSet;
    bool m_link_url_isValid;

    QString m_platform_name;
    bool m_platform_name_isSet;
    bool m_platform_name_isValid;

    QString m_source_id;
    bool m_source_id_isSet;
    bool m_source_id_isValid;

    QString m_source_type;
    bool m_source_type_isSet;
    bool m_source_type_isValid;

    OAIDataConnectionStatus m_status;
    bool m_status_isSet;
    bool m_status_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDataConnection)

#endif // OAIDataConnection_H
