/**
 * Codat Expense API
 * The API for Sync for Expenses. Sync for Expenses is an API and a set of supporting tools. It has been built to enable corporate card and expense management platforms to provide high-quality integrations with multiple accounting platforms through a standardized API.  [Read more...](https://docs.codat.io/sync-for-expenses/overview)  [See our OpenAPI spec](https://github.com/codatio/oas)
 *
 * The version of the OpenAPI document: prealpha
 * Contact: expenses@codat.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAccountMappingInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAccountMappingInfo::OAIAccountMappingInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAccountMappingInfo::OAIAccountMappingInfo() {
    this->initializeModel();
}

OAIAccountMappingInfo::~OAIAccountMappingInfo() {}

void OAIAccountMappingInfo::initializeModel() {

    m_account_type_isSet = false;
    m_account_type_isValid = false;

    m_currency_isSet = false;
    m_currency_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_valid_transaction_types_isSet = false;
    m_valid_transaction_types_isValid = false;
}

void OAIAccountMappingInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAccountMappingInfo::fromJsonObject(QJsonObject json) {

    m_account_type_isValid = ::OpenAPI::fromJsonValue(m_account_type, json[QString("accountType")]);
    m_account_type_isSet = !json[QString("accountType")].isNull() && m_account_type_isValid;

    m_currency_isValid = ::OpenAPI::fromJsonValue(m_currency, json[QString("currency")]);
    m_currency_isSet = !json[QString("currency")].isNull() && m_currency_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_valid_transaction_types_isValid = ::OpenAPI::fromJsonValue(m_valid_transaction_types, json[QString("validTransactionTypes")]);
    m_valid_transaction_types_isSet = !json[QString("validTransactionTypes")].isNull() && m_valid_transaction_types_isValid;
}

QString OAIAccountMappingInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAccountMappingInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_account_type_isSet) {
        obj.insert(QString("accountType"), ::OpenAPI::toJsonValue(m_account_type));
    }
    if (m_currency_isSet) {
        obj.insert(QString("currency"), ::OpenAPI::toJsonValue(m_currency));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_valid_transaction_types.size() > 0) {
        obj.insert(QString("validTransactionTypes"), ::OpenAPI::toJsonValue(m_valid_transaction_types));
    }
    return obj;
}

QString OAIAccountMappingInfo::getAccountType() const {
    return m_account_type;
}
void OAIAccountMappingInfo::setAccountType(const QString &account_type) {
    m_account_type = account_type;
    m_account_type_isSet = true;
}

bool OAIAccountMappingInfo::is_account_type_Set() const{
    return m_account_type_isSet;
}

bool OAIAccountMappingInfo::is_account_type_Valid() const{
    return m_account_type_isValid;
}

QString OAIAccountMappingInfo::getCurrency() const {
    return m_currency;
}
void OAIAccountMappingInfo::setCurrency(const QString &currency) {
    m_currency = currency;
    m_currency_isSet = true;
}

bool OAIAccountMappingInfo::is_currency_Set() const{
    return m_currency_isSet;
}

bool OAIAccountMappingInfo::is_currency_Valid() const{
    return m_currency_isValid;
}

QString OAIAccountMappingInfo::getId() const {
    return m_id;
}
void OAIAccountMappingInfo::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIAccountMappingInfo::is_id_Set() const{
    return m_id_isSet;
}

bool OAIAccountMappingInfo::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIAccountMappingInfo::getName() const {
    return m_name;
}
void OAIAccountMappingInfo::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIAccountMappingInfo::is_name_Set() const{
    return m_name_isSet;
}

bool OAIAccountMappingInfo::is_name_Valid() const{
    return m_name_isValid;
}

QList<QString> OAIAccountMappingInfo::getValidTransactionTypes() const {
    return m_valid_transaction_types;
}
void OAIAccountMappingInfo::setValidTransactionTypes(const QList<QString> &valid_transaction_types) {
    m_valid_transaction_types = valid_transaction_types;
    m_valid_transaction_types_isSet = true;
}

bool OAIAccountMappingInfo::is_valid_transaction_types_Set() const{
    return m_valid_transaction_types_isSet;
}

bool OAIAccountMappingInfo::is_valid_transaction_types_Valid() const{
    return m_valid_transaction_types_isValid;
}

bool OAIAccountMappingInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_valid_transaction_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAccountMappingInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
