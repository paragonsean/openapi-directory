/**
 * Codat Expense API
 * The API for Sync for Expenses. Sync for Expenses is an API and a set of supporting tools. It has been built to enable corporate card and expense management platforms to provide high-quality integrations with multiple accounting platforms through a standardized API.  [Read more...](https://docs.codat.io/sync-for-expenses/overview)  [See our OpenAPI spec](https://github.com/codatio/oas)
 *
 * The version of the OpenAPI document: prealpha
 * Contact: expenses@codat.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICompanySyncStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICompanySyncStatus::OAICompanySyncStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICompanySyncStatus::OAICompanySyncStatus() {
    this->initializeModel();
}

OAICompanySyncStatus::~OAICompanySyncStatus() {}

void OAICompanySyncStatus::initializeModel() {

    m_company_id_isSet = false;
    m_company_id_isValid = false;

    m_data_pushed_isSet = false;
    m_data_pushed_isValid = false;

    m_error_message_isSet = false;
    m_error_message_isValid = false;

    m_sync_exception_message_isSet = false;
    m_sync_exception_message_isValid = false;

    m_sync_id_isSet = false;
    m_sync_id_isValid = false;

    m_sync_status_isSet = false;
    m_sync_status_isValid = false;

    m_sync_status_code_isSet = false;
    m_sync_status_code_isValid = false;

    m_sync_utc_isSet = false;
    m_sync_utc_isValid = false;
}

void OAICompanySyncStatus::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICompanySyncStatus::fromJsonObject(QJsonObject json) {

    m_company_id_isValid = ::OpenAPI::fromJsonValue(m_company_id, json[QString("companyId")]);
    m_company_id_isSet = !json[QString("companyId")].isNull() && m_company_id_isValid;

    m_data_pushed_isValid = ::OpenAPI::fromJsonValue(m_data_pushed, json[QString("dataPushed")]);
    m_data_pushed_isSet = !json[QString("dataPushed")].isNull() && m_data_pushed_isValid;

    m_error_message_isValid = ::OpenAPI::fromJsonValue(m_error_message, json[QString("errorMessage")]);
    m_error_message_isSet = !json[QString("errorMessage")].isNull() && m_error_message_isValid;

    m_sync_exception_message_isValid = ::OpenAPI::fromJsonValue(m_sync_exception_message, json[QString("syncExceptionMessage")]);
    m_sync_exception_message_isSet = !json[QString("syncExceptionMessage")].isNull() && m_sync_exception_message_isValid;

    m_sync_id_isValid = ::OpenAPI::fromJsonValue(m_sync_id, json[QString("syncId")]);
    m_sync_id_isSet = !json[QString("syncId")].isNull() && m_sync_id_isValid;

    m_sync_status_isValid = ::OpenAPI::fromJsonValue(m_sync_status, json[QString("syncStatus")]);
    m_sync_status_isSet = !json[QString("syncStatus")].isNull() && m_sync_status_isValid;

    m_sync_status_code_isValid = ::OpenAPI::fromJsonValue(m_sync_status_code, json[QString("syncStatusCode")]);
    m_sync_status_code_isSet = !json[QString("syncStatusCode")].isNull() && m_sync_status_code_isValid;

    m_sync_utc_isValid = ::OpenAPI::fromJsonValue(m_sync_utc, json[QString("syncUtc")]);
    m_sync_utc_isSet = !json[QString("syncUtc")].isNull() && m_sync_utc_isValid;
}

QString OAICompanySyncStatus::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICompanySyncStatus::asJsonObject() const {
    QJsonObject obj;
    if (m_company_id_isSet) {
        obj.insert(QString("companyId"), ::OpenAPI::toJsonValue(m_company_id));
    }
    if (m_data_pushed_isSet) {
        obj.insert(QString("dataPushed"), ::OpenAPI::toJsonValue(m_data_pushed));
    }
    if (m_error_message_isSet) {
        obj.insert(QString("errorMessage"), ::OpenAPI::toJsonValue(m_error_message));
    }
    if (m_sync_exception_message_isSet) {
        obj.insert(QString("syncExceptionMessage"), ::OpenAPI::toJsonValue(m_sync_exception_message));
    }
    if (m_sync_id_isSet) {
        obj.insert(QString("syncId"), ::OpenAPI::toJsonValue(m_sync_id));
    }
    if (m_sync_status_isSet) {
        obj.insert(QString("syncStatus"), ::OpenAPI::toJsonValue(m_sync_status));
    }
    if (m_sync_status_code_isSet) {
        obj.insert(QString("syncStatusCode"), ::OpenAPI::toJsonValue(m_sync_status_code));
    }
    if (m_sync_utc_isSet) {
        obj.insert(QString("syncUtc"), ::OpenAPI::toJsonValue(m_sync_utc));
    }
    return obj;
}

QString OAICompanySyncStatus::getCompanyId() const {
    return m_company_id;
}
void OAICompanySyncStatus::setCompanyId(const QString &company_id) {
    m_company_id = company_id;
    m_company_id_isSet = true;
}

bool OAICompanySyncStatus::is_company_id_Set() const{
    return m_company_id_isSet;
}

bool OAICompanySyncStatus::is_company_id_Valid() const{
    return m_company_id_isValid;
}

bool OAICompanySyncStatus::isDataPushed() const {
    return m_data_pushed;
}
void OAICompanySyncStatus::setDataPushed(const bool &data_pushed) {
    m_data_pushed = data_pushed;
    m_data_pushed_isSet = true;
}

bool OAICompanySyncStatus::is_data_pushed_Set() const{
    return m_data_pushed_isSet;
}

bool OAICompanySyncStatus::is_data_pushed_Valid() const{
    return m_data_pushed_isValid;
}

QString OAICompanySyncStatus::getErrorMessage() const {
    return m_error_message;
}
void OAICompanySyncStatus::setErrorMessage(const QString &error_message) {
    m_error_message = error_message;
    m_error_message_isSet = true;
}

bool OAICompanySyncStatus::is_error_message_Set() const{
    return m_error_message_isSet;
}

bool OAICompanySyncStatus::is_error_message_Valid() const{
    return m_error_message_isValid;
}

QString OAICompanySyncStatus::getSyncExceptionMessage() const {
    return m_sync_exception_message;
}
void OAICompanySyncStatus::setSyncExceptionMessage(const QString &sync_exception_message) {
    m_sync_exception_message = sync_exception_message;
    m_sync_exception_message_isSet = true;
}

bool OAICompanySyncStatus::is_sync_exception_message_Set() const{
    return m_sync_exception_message_isSet;
}

bool OAICompanySyncStatus::is_sync_exception_message_Valid() const{
    return m_sync_exception_message_isValid;
}

QString OAICompanySyncStatus::getSyncId() const {
    return m_sync_id;
}
void OAICompanySyncStatus::setSyncId(const QString &sync_id) {
    m_sync_id = sync_id;
    m_sync_id_isSet = true;
}

bool OAICompanySyncStatus::is_sync_id_Set() const{
    return m_sync_id_isSet;
}

bool OAICompanySyncStatus::is_sync_id_Valid() const{
    return m_sync_id_isValid;
}

QString OAICompanySyncStatus::getSyncStatus() const {
    return m_sync_status;
}
void OAICompanySyncStatus::setSyncStatus(const QString &sync_status) {
    m_sync_status = sync_status;
    m_sync_status_isSet = true;
}

bool OAICompanySyncStatus::is_sync_status_Set() const{
    return m_sync_status_isSet;
}

bool OAICompanySyncStatus::is_sync_status_Valid() const{
    return m_sync_status_isValid;
}

qint32 OAICompanySyncStatus::getSyncStatusCode() const {
    return m_sync_status_code;
}
void OAICompanySyncStatus::setSyncStatusCode(const qint32 &sync_status_code) {
    m_sync_status_code = sync_status_code;
    m_sync_status_code_isSet = true;
}

bool OAICompanySyncStatus::is_sync_status_code_Set() const{
    return m_sync_status_code_isSet;
}

bool OAICompanySyncStatus::is_sync_status_code_Valid() const{
    return m_sync_status_code_isValid;
}

QString OAICompanySyncStatus::getSyncUtc() const {
    return m_sync_utc;
}
void OAICompanySyncStatus::setSyncUtc(const QString &sync_utc) {
    m_sync_utc = sync_utc;
    m_sync_utc_isSet = true;
}

bool OAICompanySyncStatus::is_sync_utc_Set() const{
    return m_sync_utc_isSet;
}

bool OAICompanySyncStatus::is_sync_utc_Valid() const{
    return m_sync_utc_isValid;
}

bool OAICompanySyncStatus::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_company_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_pushed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sync_exception_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sync_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sync_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sync_status_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sync_utc_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICompanySyncStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
