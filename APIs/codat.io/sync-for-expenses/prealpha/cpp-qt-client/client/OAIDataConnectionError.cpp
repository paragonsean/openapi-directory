/**
 * Codat Expense API
 * The API for Sync for Expenses. Sync for Expenses is an API and a set of supporting tools. It has been built to enable corporate card and expense management platforms to provide high-quality integrations with multiple accounting platforms through a standardized API.  [Read more...](https://docs.codat.io/sync-for-expenses/overview)  [See our OpenAPI spec](https://github.com/codatio/oas)
 *
 * The version of the OpenAPI document: prealpha
 * Contact: expenses@codat.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDataConnectionError.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDataConnectionError::OAIDataConnectionError(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDataConnectionError::OAIDataConnectionError() {
    this->initializeModel();
}

OAIDataConnectionError::~OAIDataConnectionError() {}

void OAIDataConnectionError::initializeModel() {

    m_error_message_isSet = false;
    m_error_message_isValid = false;

    m_errored_on_utc_isSet = false;
    m_errored_on_utc_isValid = false;

    m_status_code_isSet = false;
    m_status_code_isValid = false;

    m_status_text_isSet = false;
    m_status_text_isValid = false;
}

void OAIDataConnectionError::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDataConnectionError::fromJsonObject(QJsonObject json) {

    m_error_message_isValid = ::OpenAPI::fromJsonValue(m_error_message, json[QString("errorMessage")]);
    m_error_message_isSet = !json[QString("errorMessage")].isNull() && m_error_message_isValid;

    m_errored_on_utc_isValid = ::OpenAPI::fromJsonValue(m_errored_on_utc, json[QString("erroredOnUtc")]);
    m_errored_on_utc_isSet = !json[QString("erroredOnUtc")].isNull() && m_errored_on_utc_isValid;

    m_status_code_isValid = ::OpenAPI::fromJsonValue(m_status_code, json[QString("statusCode")]);
    m_status_code_isSet = !json[QString("statusCode")].isNull() && m_status_code_isValid;

    m_status_text_isValid = ::OpenAPI::fromJsonValue(m_status_text, json[QString("statusText")]);
    m_status_text_isSet = !json[QString("statusText")].isNull() && m_status_text_isValid;
}

QString OAIDataConnectionError::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDataConnectionError::asJsonObject() const {
    QJsonObject obj;
    if (m_error_message_isSet) {
        obj.insert(QString("errorMessage"), ::OpenAPI::toJsonValue(m_error_message));
    }
    if (m_errored_on_utc_isSet) {
        obj.insert(QString("erroredOnUtc"), ::OpenAPI::toJsonValue(m_errored_on_utc));
    }
    if (m_status_code_isSet) {
        obj.insert(QString("statusCode"), ::OpenAPI::toJsonValue(m_status_code));
    }
    if (m_status_text_isSet) {
        obj.insert(QString("statusText"), ::OpenAPI::toJsonValue(m_status_text));
    }
    return obj;
}

QString OAIDataConnectionError::getErrorMessage() const {
    return m_error_message;
}
void OAIDataConnectionError::setErrorMessage(const QString &error_message) {
    m_error_message = error_message;
    m_error_message_isSet = true;
}

bool OAIDataConnectionError::is_error_message_Set() const{
    return m_error_message_isSet;
}

bool OAIDataConnectionError::is_error_message_Valid() const{
    return m_error_message_isValid;
}

QString OAIDataConnectionError::getErroredOnUtc() const {
    return m_errored_on_utc;
}
void OAIDataConnectionError::setErroredOnUtc(const QString &errored_on_utc) {
    m_errored_on_utc = errored_on_utc;
    m_errored_on_utc_isSet = true;
}

bool OAIDataConnectionError::is_errored_on_utc_Set() const{
    return m_errored_on_utc_isSet;
}

bool OAIDataConnectionError::is_errored_on_utc_Valid() const{
    return m_errored_on_utc_isValid;
}

QString OAIDataConnectionError::getStatusCode() const {
    return m_status_code;
}
void OAIDataConnectionError::setStatusCode(const QString &status_code) {
    m_status_code = status_code;
    m_status_code_isSet = true;
}

bool OAIDataConnectionError::is_status_code_Set() const{
    return m_status_code_isSet;
}

bool OAIDataConnectionError::is_status_code_Valid() const{
    return m_status_code_isValid;
}

QString OAIDataConnectionError::getStatusText() const {
    return m_status_text;
}
void OAIDataConnectionError::setStatusText(const QString &status_text) {
    m_status_text = status_text;
    m_status_text_isSet = true;
}

bool OAIDataConnectionError::is_status_text_Set() const{
    return m_status_text_isSet;
}

bool OAIDataConnectionError::is_status_text_Valid() const{
    return m_status_text_isValid;
}

bool OAIDataConnectionError::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_error_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_errored_on_utc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_text_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDataConnectionError::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
