/**
 * Codat Expense API
 * The API for Sync for Expenses. Sync for Expenses is an API and a set of supporting tools. It has been built to enable corporate card and expense management platforms to provide high-quality integrations with multiple accounting platforms through a standardized API.  [Read more...](https://docs.codat.io/sync-for-expenses/overview)  [See our OpenAPI spec](https://github.com/codatio/oas)
 *
 * The version of the OpenAPI document: prealpha
 * Contact: expenses@codat.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICodatErrorMessage.h
 *
 * 
 */

#ifndef OAICodatErrorMessage_H
#define OAICodatErrorMessage_H

#include <QJsonObject>

#include "OAICodatErrorMessage_validation.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAICodatErrorMessage_validation;

class OAICodatErrorMessage : public OAIObject {
public:
    OAICodatErrorMessage();
    OAICodatErrorMessage(QString json);
    ~OAICodatErrorMessage() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getCanBeRetried() const;
    void setCanBeRetried(const QString &can_be_retried);
    bool is_can_be_retried_Set() const;
    bool is_can_be_retried_Valid() const;

    QString getCorrelationId() const;
    void setCorrelationId(const QString &correlation_id);
    bool is_correlation_id_Set() const;
    bool is_correlation_id_Valid() const;

    qint32 getDetailedErrorCode() const;
    void setDetailedErrorCode(const qint32 &detailed_error_code);
    bool is_detailed_error_code_Set() const;
    bool is_detailed_error_code_Valid() const;

    QString getError() const;
    void setError(const QString &error);
    bool is_error_Set() const;
    bool is_error_Valid() const;

    QString getInner() const;
    void setInner(const QString &inner);
    bool is_inner_Set() const;
    bool is_inner_Valid() const;

    QString getService() const;
    void setService(const QString &service);
    bool is_service_Set() const;
    bool is_service_Valid() const;

    qint32 getStatusCode() const;
    void setStatusCode(const qint32 &status_code);
    bool is_status_code_Set() const;
    bool is_status_code_Valid() const;

    OAICodatErrorMessage_validation getValidation() const;
    void setValidation(const OAICodatErrorMessage_validation &validation);
    bool is_validation_Set() const;
    bool is_validation_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_can_be_retried;
    bool m_can_be_retried_isSet;
    bool m_can_be_retried_isValid;

    QString m_correlation_id;
    bool m_correlation_id_isSet;
    bool m_correlation_id_isValid;

    qint32 m_detailed_error_code;
    bool m_detailed_error_code_isSet;
    bool m_detailed_error_code_isValid;

    QString m_error;
    bool m_error_isSet;
    bool m_error_isValid;

    QString m_inner;
    bool m_inner_isSet;
    bool m_inner_isValid;

    QString m_service;
    bool m_service_isSet;
    bool m_service_isValid;

    qint32 m_status_code;
    bool m_status_code_isSet;
    bool m_status_code_isValid;

    OAICodatErrorMessage_validation m_validation;
    bool m_validation_isSet;
    bool m_validation_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICodatErrorMessage)

#endif // OAICodatErrorMessage_H
