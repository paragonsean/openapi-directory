/**
 * Codat Expense API
 * The API for Sync for Expenses. Sync for Expenses is an API and a set of supporting tools. It has been built to enable corporate card and expense management platforms to provide high-quality integrations with multiple accounting platforms through a standardized API.  [Read more...](https://docs.codat.io/sync-for-expenses/overview)  [See our OpenAPI spec](https://github.com/codatio/oas)
 *
 * The version of the OpenAPI document: prealpha
 * Contact: expenses@codat.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICodatErrorMessage_validation_errors_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICodatErrorMessage_validation_errors_inner::OAICodatErrorMessage_validation_errors_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICodatErrorMessage_validation_errors_inner::OAICodatErrorMessage_validation_errors_inner() {
    this->initializeModel();
}

OAICodatErrorMessage_validation_errors_inner::~OAICodatErrorMessage_validation_errors_inner() {}

void OAICodatErrorMessage_validation_errors_inner::initializeModel() {

    m_item_id_isSet = false;
    m_item_id_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_rule_id_isSet = false;
    m_rule_id_isValid = false;

    m_validator_name_isSet = false;
    m_validator_name_isValid = false;
}

void OAICodatErrorMessage_validation_errors_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICodatErrorMessage_validation_errors_inner::fromJsonObject(QJsonObject json) {

    m_item_id_isValid = ::OpenAPI::fromJsonValue(m_item_id, json[QString("itemId")]);
    m_item_id_isSet = !json[QString("itemId")].isNull() && m_item_id_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_rule_id_isValid = ::OpenAPI::fromJsonValue(m_rule_id, json[QString("ruleId")]);
    m_rule_id_isSet = !json[QString("ruleId")].isNull() && m_rule_id_isValid;

    m_validator_name_isValid = ::OpenAPI::fromJsonValue(m_validator_name, json[QString("validatorName")]);
    m_validator_name_isSet = !json[QString("validatorName")].isNull() && m_validator_name_isValid;
}

QString OAICodatErrorMessage_validation_errors_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICodatErrorMessage_validation_errors_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_item_id_isSet) {
        obj.insert(QString("itemId"), ::OpenAPI::toJsonValue(m_item_id));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_rule_id_isSet) {
        obj.insert(QString("ruleId"), ::OpenAPI::toJsonValue(m_rule_id));
    }
    if (m_validator_name_isSet) {
        obj.insert(QString("validatorName"), ::OpenAPI::toJsonValue(m_validator_name));
    }
    return obj;
}

QString OAICodatErrorMessage_validation_errors_inner::getItemId() const {
    return m_item_id;
}
void OAICodatErrorMessage_validation_errors_inner::setItemId(const QString &item_id) {
    m_item_id = item_id;
    m_item_id_isSet = true;
}

bool OAICodatErrorMessage_validation_errors_inner::is_item_id_Set() const{
    return m_item_id_isSet;
}

bool OAICodatErrorMessage_validation_errors_inner::is_item_id_Valid() const{
    return m_item_id_isValid;
}

QString OAICodatErrorMessage_validation_errors_inner::getMessage() const {
    return m_message;
}
void OAICodatErrorMessage_validation_errors_inner::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAICodatErrorMessage_validation_errors_inner::is_message_Set() const{
    return m_message_isSet;
}

bool OAICodatErrorMessage_validation_errors_inner::is_message_Valid() const{
    return m_message_isValid;
}

QString OAICodatErrorMessage_validation_errors_inner::getRuleId() const {
    return m_rule_id;
}
void OAICodatErrorMessage_validation_errors_inner::setRuleId(const QString &rule_id) {
    m_rule_id = rule_id;
    m_rule_id_isSet = true;
}

bool OAICodatErrorMessage_validation_errors_inner::is_rule_id_Set() const{
    return m_rule_id_isSet;
}

bool OAICodatErrorMessage_validation_errors_inner::is_rule_id_Valid() const{
    return m_rule_id_isValid;
}

QString OAICodatErrorMessage_validation_errors_inner::getValidatorName() const {
    return m_validator_name;
}
void OAICodatErrorMessage_validation_errors_inner::setValidatorName(const QString &validator_name) {
    m_validator_name = validator_name;
    m_validator_name_isSet = true;
}

bool OAICodatErrorMessage_validation_errors_inner::is_validator_name_Set() const{
    return m_validator_name_isSet;
}

bool OAICodatErrorMessage_validation_errors_inner::is_validator_name_Valid() const{
    return m_validator_name_isValid;
}

bool OAICodatErrorMessage_validation_errors_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_item_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rule_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_validator_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICodatErrorMessage_validation_errors_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
