/**
 * Codat Expense API
 * The API for Sync for Expenses. Sync for Expenses is an API and a set of supporting tools. It has been built to enable corporate card and expense management platforms to provide high-quality integrations with multiple accounting platforms through a standardized API.  [Read more...](https://docs.codat.io/sync-for-expenses/overview)  [See our OpenAPI spec](https://github.com/codatio/oas)
 *
 * The version of the OpenAPI document: prealpha
 * Contact: expenses@codat.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICodatErrorMessage_validation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICodatErrorMessage_validation::OAICodatErrorMessage_validation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICodatErrorMessage_validation::OAICodatErrorMessage_validation() {
    this->initializeModel();
}

OAICodatErrorMessage_validation::~OAICodatErrorMessage_validation() {}

void OAICodatErrorMessage_validation::initializeModel() {

    m_errors_isSet = false;
    m_errors_isValid = false;

    m_has_errors_isSet = false;
    m_has_errors_isValid = false;

    m_has_internals_isSet = false;
    m_has_internals_isValid = false;

    m_has_warnings_isSet = false;
    m_has_warnings_isValid = false;

    m_internals_isSet = false;
    m_internals_isValid = false;

    m_warnings_isSet = false;
    m_warnings_isValid = false;
}

void OAICodatErrorMessage_validation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICodatErrorMessage_validation::fromJsonObject(QJsonObject json) {

    m_errors_isValid = ::OpenAPI::fromJsonValue(m_errors, json[QString("errors")]);
    m_errors_isSet = !json[QString("errors")].isNull() && m_errors_isValid;

    m_has_errors_isValid = ::OpenAPI::fromJsonValue(m_has_errors, json[QString("hasErrors")]);
    m_has_errors_isSet = !json[QString("hasErrors")].isNull() && m_has_errors_isValid;

    m_has_internals_isValid = ::OpenAPI::fromJsonValue(m_has_internals, json[QString("hasInternals")]);
    m_has_internals_isSet = !json[QString("hasInternals")].isNull() && m_has_internals_isValid;

    m_has_warnings_isValid = ::OpenAPI::fromJsonValue(m_has_warnings, json[QString("hasWarnings")]);
    m_has_warnings_isSet = !json[QString("hasWarnings")].isNull() && m_has_warnings_isValid;

    m_internals_isValid = ::OpenAPI::fromJsonValue(m_internals, json[QString("internals")]);
    m_internals_isSet = !json[QString("internals")].isNull() && m_internals_isValid;

    m_warnings_isValid = ::OpenAPI::fromJsonValue(m_warnings, json[QString("warnings")]);
    m_warnings_isSet = !json[QString("warnings")].isNull() && m_warnings_isValid;
}

QString OAICodatErrorMessage_validation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICodatErrorMessage_validation::asJsonObject() const {
    QJsonObject obj;
    if (m_errors.size() > 0) {
        obj.insert(QString("errors"), ::OpenAPI::toJsonValue(m_errors));
    }
    if (m_has_errors_isSet) {
        obj.insert(QString("hasErrors"), ::OpenAPI::toJsonValue(m_has_errors));
    }
    if (m_has_internals_isSet) {
        obj.insert(QString("hasInternals"), ::OpenAPI::toJsonValue(m_has_internals));
    }
    if (m_has_warnings_isSet) {
        obj.insert(QString("hasWarnings"), ::OpenAPI::toJsonValue(m_has_warnings));
    }
    if (m_internals.size() > 0) {
        obj.insert(QString("internals"), ::OpenAPI::toJsonValue(m_internals));
    }
    if (m_warnings.size() > 0) {
        obj.insert(QString("warnings"), ::OpenAPI::toJsonValue(m_warnings));
    }
    return obj;
}

QList<OAICodatErrorMessage_validation_errors_inner> OAICodatErrorMessage_validation::getErrors() const {
    return m_errors;
}
void OAICodatErrorMessage_validation::setErrors(const QList<OAICodatErrorMessage_validation_errors_inner> &errors) {
    m_errors = errors;
    m_errors_isSet = true;
}

bool OAICodatErrorMessage_validation::is_errors_Set() const{
    return m_errors_isSet;
}

bool OAICodatErrorMessage_validation::is_errors_Valid() const{
    return m_errors_isValid;
}

bool OAICodatErrorMessage_validation::isHasErrors() const {
    return m_has_errors;
}
void OAICodatErrorMessage_validation::setHasErrors(const bool &has_errors) {
    m_has_errors = has_errors;
    m_has_errors_isSet = true;
}

bool OAICodatErrorMessage_validation::is_has_errors_Set() const{
    return m_has_errors_isSet;
}

bool OAICodatErrorMessage_validation::is_has_errors_Valid() const{
    return m_has_errors_isValid;
}

bool OAICodatErrorMessage_validation::isHasInternals() const {
    return m_has_internals;
}
void OAICodatErrorMessage_validation::setHasInternals(const bool &has_internals) {
    m_has_internals = has_internals;
    m_has_internals_isSet = true;
}

bool OAICodatErrorMessage_validation::is_has_internals_Set() const{
    return m_has_internals_isSet;
}

bool OAICodatErrorMessage_validation::is_has_internals_Valid() const{
    return m_has_internals_isValid;
}

bool OAICodatErrorMessage_validation::isHasWarnings() const {
    return m_has_warnings;
}
void OAICodatErrorMessage_validation::setHasWarnings(const bool &has_warnings) {
    m_has_warnings = has_warnings;
    m_has_warnings_isSet = true;
}

bool OAICodatErrorMessage_validation::is_has_warnings_Set() const{
    return m_has_warnings_isSet;
}

bool OAICodatErrorMessage_validation::is_has_warnings_Valid() const{
    return m_has_warnings_isValid;
}

QList<OAICodatErrorMessage_validation_errors_inner> OAICodatErrorMessage_validation::getInternals() const {
    return m_internals;
}
void OAICodatErrorMessage_validation::setInternals(const QList<OAICodatErrorMessage_validation_errors_inner> &internals) {
    m_internals = internals;
    m_internals_isSet = true;
}

bool OAICodatErrorMessage_validation::is_internals_Set() const{
    return m_internals_isSet;
}

bool OAICodatErrorMessage_validation::is_internals_Valid() const{
    return m_internals_isValid;
}

QList<OAICodatErrorMessage_validation_errors_inner> OAICodatErrorMessage_validation::getWarnings() const {
    return m_warnings;
}
void OAICodatErrorMessage_validation::setWarnings(const QList<OAICodatErrorMessage_validation_errors_inner> &warnings) {
    m_warnings = warnings;
    m_warnings_isSet = true;
}

bool OAICodatErrorMessage_validation::is_warnings_Set() const{
    return m_warnings_isSet;
}

bool OAICodatErrorMessage_validation::is_warnings_Valid() const{
    return m_warnings_isValid;
}

bool OAICodatErrorMessage_validation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_errors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_errors_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_internals_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_warnings_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_internals.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_warnings.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICodatErrorMessage_validation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
