/**
 * Codat Expense API
 * The API for Sync for Expenses. Sync for Expenses is an API and a set of supporting tools. It has been built to enable corporate card and expense management platforms to provide high-quality integrations with multiple accounting platforms through a standardized API.  [Read more...](https://docs.codat.io/sync-for-expenses/overview)  [See our OpenAPI spec](https://github.com/codatio/oas)
 *
 * The version of the OpenAPI document: prealpha
 * Contact: expenses@codat.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMappingOptions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMappingOptions::OAIMappingOptions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMappingOptions::OAIMappingOptions() {
    this->initializeModel();
}

OAIMappingOptions::~OAIMappingOptions() {}

void OAIMappingOptions::initializeModel() {

    m_accounts_isSet = false;
    m_accounts_isValid = false;

    m_expense_provider_isSet = false;
    m_expense_provider_isValid = false;

    m_tax_rates_isSet = false;
    m_tax_rates_isValid = false;

    m_tracking_categories_isSet = false;
    m_tracking_categories_isValid = false;
}

void OAIMappingOptions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMappingOptions::fromJsonObject(QJsonObject json) {

    m_accounts_isValid = ::OpenAPI::fromJsonValue(m_accounts, json[QString("accounts")]);
    m_accounts_isSet = !json[QString("accounts")].isNull() && m_accounts_isValid;

    m_expense_provider_isValid = ::OpenAPI::fromJsonValue(m_expense_provider, json[QString("expenseProvider")]);
    m_expense_provider_isSet = !json[QString("expenseProvider")].isNull() && m_expense_provider_isValid;

    m_tax_rates_isValid = ::OpenAPI::fromJsonValue(m_tax_rates, json[QString("taxRates")]);
    m_tax_rates_isSet = !json[QString("taxRates")].isNull() && m_tax_rates_isValid;

    m_tracking_categories_isValid = ::OpenAPI::fromJsonValue(m_tracking_categories, json[QString("trackingCategories")]);
    m_tracking_categories_isSet = !json[QString("trackingCategories")].isNull() && m_tracking_categories_isValid;
}

QString OAIMappingOptions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMappingOptions::asJsonObject() const {
    QJsonObject obj;
    if (m_accounts.size() > 0) {
        obj.insert(QString("accounts"), ::OpenAPI::toJsonValue(m_accounts));
    }
    if (m_expense_provider_isSet) {
        obj.insert(QString("expenseProvider"), ::OpenAPI::toJsonValue(m_expense_provider));
    }
    if (m_tax_rates.size() > 0) {
        obj.insert(QString("taxRates"), ::OpenAPI::toJsonValue(m_tax_rates));
    }
    if (m_tracking_categories.size() > 0) {
        obj.insert(QString("trackingCategories"), ::OpenAPI::toJsonValue(m_tracking_categories));
    }
    return obj;
}

QList<OAIAccountMappingInfo> OAIMappingOptions::getAccounts() const {
    return m_accounts;
}
void OAIMappingOptions::setAccounts(const QList<OAIAccountMappingInfo> &accounts) {
    m_accounts = accounts;
    m_accounts_isSet = true;
}

bool OAIMappingOptions::is_accounts_Set() const{
    return m_accounts_isSet;
}

bool OAIMappingOptions::is_accounts_Valid() const{
    return m_accounts_isValid;
}

QString OAIMappingOptions::getExpenseProvider() const {
    return m_expense_provider;
}
void OAIMappingOptions::setExpenseProvider(const QString &expense_provider) {
    m_expense_provider = expense_provider;
    m_expense_provider_isSet = true;
}

bool OAIMappingOptions::is_expense_provider_Set() const{
    return m_expense_provider_isSet;
}

bool OAIMappingOptions::is_expense_provider_Valid() const{
    return m_expense_provider_isValid;
}

QList<OAITaxRateMappingInfo> OAIMappingOptions::getTaxRates() const {
    return m_tax_rates;
}
void OAIMappingOptions::setTaxRates(const QList<OAITaxRateMappingInfo> &tax_rates) {
    m_tax_rates = tax_rates;
    m_tax_rates_isSet = true;
}

bool OAIMappingOptions::is_tax_rates_Set() const{
    return m_tax_rates_isSet;
}

bool OAIMappingOptions::is_tax_rates_Valid() const{
    return m_tax_rates_isValid;
}

QList<OAITrackingCategoryMappingInfo> OAIMappingOptions::getTrackingCategories() const {
    return m_tracking_categories;
}
void OAIMappingOptions::setTrackingCategories(const QList<OAITrackingCategoryMappingInfo> &tracking_categories) {
    m_tracking_categories = tracking_categories;
    m_tracking_categories_isSet = true;
}

bool OAIMappingOptions::is_tracking_categories_Set() const{
    return m_tracking_categories_isSet;
}

bool OAIMappingOptions::is_tracking_categories_Valid() const{
    return m_tracking_categories_isValid;
}

bool OAIMappingOptions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_accounts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_expense_provider_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_rates.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_tracking_categories.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMappingOptions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
