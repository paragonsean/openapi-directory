/**
 * Codat Expense API
 * The API for Sync for Expenses. Sync for Expenses is an API and a set of supporting tools. It has been built to enable corporate card and expense management platforms to provide high-quality integrations with multiple accounting platforms through a standardized API.  [Read more...](https://docs.codat.io/sync-for-expenses/overview)  [See our OpenAPI spec](https://github.com/codatio/oas)
 *
 * The version of the OpenAPI document: prealpha
 * Contact: expenses@codat.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITransactionMetadata.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITransactionMetadata::OAITransactionMetadata(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITransactionMetadata::OAITransactionMetadata() {
    this->initializeModel();
}

OAITransactionMetadata::~OAITransactionMetadata() {}

void OAITransactionMetadata::initializeModel() {

    m_integration_type_isSet = false;
    m_integration_type_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_transaction_id_isSet = false;
    m_transaction_id_isValid = false;
}

void OAITransactionMetadata::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITransactionMetadata::fromJsonObject(QJsonObject json) {

    m_integration_type_isValid = ::OpenAPI::fromJsonValue(m_integration_type, json[QString("integrationType")]);
    m_integration_type_isSet = !json[QString("integrationType")].isNull() && m_integration_type_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_transaction_id_isValid = ::OpenAPI::fromJsonValue(m_transaction_id, json[QString("transactionId")]);
    m_transaction_id_isSet = !json[QString("transactionId")].isNull() && m_transaction_id_isValid;
}

QString OAITransactionMetadata::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITransactionMetadata::asJsonObject() const {
    QJsonObject obj;
    if (m_integration_type.isSet()) {
        obj.insert(QString("integrationType"), ::OpenAPI::toJsonValue(m_integration_type));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_transaction_id_isSet) {
        obj.insert(QString("transactionId"), ::OpenAPI::toJsonValue(m_transaction_id));
    }
    return obj;
}

OAIIntegrationType OAITransactionMetadata::getIntegrationType() const {
    return m_integration_type;
}
void OAITransactionMetadata::setIntegrationType(const OAIIntegrationType &integration_type) {
    m_integration_type = integration_type;
    m_integration_type_isSet = true;
}

bool OAITransactionMetadata::is_integration_type_Set() const{
    return m_integration_type_isSet;
}

bool OAITransactionMetadata::is_integration_type_Valid() const{
    return m_integration_type_isValid;
}

QString OAITransactionMetadata::getMessage() const {
    return m_message;
}
void OAITransactionMetadata::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAITransactionMetadata::is_message_Set() const{
    return m_message_isSet;
}

bool OAITransactionMetadata::is_message_Valid() const{
    return m_message_isValid;
}

OAITransactionStatus OAITransactionMetadata::getStatus() const {
    return m_status;
}
void OAITransactionMetadata::setStatus(const OAITransactionStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAITransactionMetadata::is_status_Set() const{
    return m_status_isSet;
}

bool OAITransactionMetadata::is_status_Valid() const{
    return m_status_isValid;
}

QString OAITransactionMetadata::getTransactionId() const {
    return m_transaction_id;
}
void OAITransactionMetadata::setTransactionId(const QString &transaction_id) {
    m_transaction_id = transaction_id;
    m_transaction_id_isSet = true;
}

bool OAITransactionMetadata::is_transaction_id_Set() const{
    return m_transaction_id_isSet;
}

bool OAITransactionMetadata::is_transaction_id_Valid() const{
    return m_transaction_id_isValid;
}

bool OAITransactionMetadata::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_integration_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_transaction_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITransactionMetadata::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
