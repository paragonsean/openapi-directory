/**
 * Codat Expense API
 * The API for Sync for Expenses. Sync for Expenses is an API and a set of supporting tools. It has been built to enable corporate card and expense management platforms to provide high-quality integrations with multiple accounting platforms through a standardized API.  [Read more...](https://docs.codat.io/sync-for-expenses/overview)  [See our OpenAPI spec](https://github.com/codatio/oas)
 *
 * The version of the OpenAPI document: prealpha
 * Contact: expenses@codat.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICompanySyncStatus.h
 *
 * 
 */

#ifndef OAICompanySyncStatus_H
#define OAICompanySyncStatus_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAICompanySyncStatus : public OAIObject {
public:
    OAICompanySyncStatus();
    OAICompanySyncStatus(QString json);
    ~OAICompanySyncStatus() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getCompanyId() const;
    void setCompanyId(const QString &company_id);
    bool is_company_id_Set() const;
    bool is_company_id_Valid() const;

    bool isDataPushed() const;
    void setDataPushed(const bool &data_pushed);
    bool is_data_pushed_Set() const;
    bool is_data_pushed_Valid() const;

    QString getErrorMessage() const;
    void setErrorMessage(const QString &error_message);
    bool is_error_message_Set() const;
    bool is_error_message_Valid() const;

    QString getSyncExceptionMessage() const;
    void setSyncExceptionMessage(const QString &sync_exception_message);
    bool is_sync_exception_message_Set() const;
    bool is_sync_exception_message_Valid() const;

    QString getSyncId() const;
    void setSyncId(const QString &sync_id);
    bool is_sync_id_Set() const;
    bool is_sync_id_Valid() const;

    QString getSyncStatus() const;
    void setSyncStatus(const QString &sync_status);
    bool is_sync_status_Set() const;
    bool is_sync_status_Valid() const;

    qint32 getSyncStatusCode() const;
    void setSyncStatusCode(const qint32 &sync_status_code);
    bool is_sync_status_code_Set() const;
    bool is_sync_status_code_Valid() const;

    QString getSyncUtc() const;
    void setSyncUtc(const QString &sync_utc);
    bool is_sync_utc_Set() const;
    bool is_sync_utc_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_company_id;
    bool m_company_id_isSet;
    bool m_company_id_isValid;

    bool m_data_pushed;
    bool m_data_pushed_isSet;
    bool m_data_pushed_isValid;

    QString m_error_message;
    bool m_error_message_isSet;
    bool m_error_message_isValid;

    QString m_sync_exception_message;
    bool m_sync_exception_message_isSet;
    bool m_sync_exception_message_isValid;

    QString m_sync_id;
    bool m_sync_id_isSet;
    bool m_sync_id_isValid;

    QString m_sync_status;
    bool m_sync_status_isSet;
    bool m_sync_status_isValid;

    qint32 m_sync_status_code;
    bool m_sync_status_code_isSet;
    bool m_sync_status_code_isValid;

    QString m_sync_utc;
    bool m_sync_utc_isSet;
    bool m_sync_utc_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICompanySyncStatus)

#endif // OAICompanySyncStatus_H
