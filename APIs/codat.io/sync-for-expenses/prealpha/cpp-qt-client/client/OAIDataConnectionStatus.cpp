/**
 * Codat Expense API
 * The API for Sync for Expenses. Sync for Expenses is an API and a set of supporting tools. It has been built to enable corporate card and expense management platforms to provide high-quality integrations with multiple accounting platforms through a standardized API.  [Read more...](https://docs.codat.io/sync-for-expenses/overview)  [See our OpenAPI spec](https://github.com/codatio/oas)
 *
 * The version of the OpenAPI document: prealpha
 * Contact: expenses@codat.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDataConnectionStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDataConnectionStatus::OAIDataConnectionStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDataConnectionStatus::OAIDataConnectionStatus() {
    this->initializeModel();
}

OAIDataConnectionStatus::~OAIDataConnectionStatus() {}

void OAIDataConnectionStatus::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIDataConnectionStatus::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIDataConnectionStatus::fromJson(QString jsonString) {
    
    if ( jsonString.compare("PendingAuth", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataConnectionStatus::PENDINGAUTH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Linked", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataConnectionStatus::LINKED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Unlinked", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataConnectionStatus::UNLINKED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Deauthorized", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataConnectionStatus::DEAUTHORIZED;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIDataConnectionStatus::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIDataConnectionStatus::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIDataConnectionStatus::PENDINGAUTH:
            val = "PendingAuth";
            break;
        case eOAIDataConnectionStatus::LINKED:
            val = "Linked";
            break;
        case eOAIDataConnectionStatus::UNLINKED:
            val = "Unlinked";
            break;
        case eOAIDataConnectionStatus::DEAUTHORIZED:
            val = "Deauthorized";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIDataConnectionStatus::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIDataConnectionStatus::eOAIDataConnectionStatus OAIDataConnectionStatus::getValue() const {
    return m_value;
}

void OAIDataConnectionStatus::setValue(const OAIDataConnectionStatus::eOAIDataConnectionStatus& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIDataConnectionStatus::isSet() const {
    
    return m_value_isSet;
}

bool OAIDataConnectionStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
