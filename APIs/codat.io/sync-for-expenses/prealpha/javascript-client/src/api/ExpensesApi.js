/**
 * Codat Expense API
 * The API for Sync for Expenses. Sync for Expenses is an API and a set of supporting tools. It has been built to enable corporate card and expense management platforms to provide high-quality integrations with multiple accounting platforms through a standardized API.  [Read more...](https://docs.codat.io/sync-for-expenses/overview)  [See our OpenAPI spec](https://github.com/codatio/oas)
 *
 * The version of the OpenAPI document: prealpha
 * Contact: expenses@codat.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Attachment from '../model/Attachment';
import CreateExpenseRequest from '../model/CreateExpenseRequest';
import CreateExpenseResponse from '../model/CreateExpenseResponse';

/**
* Expenses service.
* @module api/ExpensesApi
* @version prealpha
*/
export default class ExpensesApi {

    /**
    * Constructs a new ExpensesApi. 
    * @alias module:api/ExpensesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createExpenseDataset operation.
     * @callback module:api/ExpensesApi~createExpenseDatasetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateExpenseResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create expense-transactions
     * Create an expense transaction
     * @param {String} companyId 
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateExpenseRequest} [createExpenseRequest] 
     * @param {module:api/ExpensesApi~createExpenseDatasetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateExpenseResponse}
     */
    createExpenseDataset(companyId, opts, callback) {
      opts = opts || {};
      let postBody = opts['createExpenseRequest'];
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling createExpenseDataset");
      }

      let pathParams = {
        'companyId': companyId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['auth_header'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateExpenseResponse;
      return this.apiClient.callApi(
        '/companies/{companyId}/sync/expenses/data/expense-transactions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uploadAttachment operation.
     * @callback module:api/ExpensesApi~uploadAttachmentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Attachment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Upload attachment
     * Creates an attachment in the accounting software against the given transactionId
     * @param {String} companyId 
     * @param {String} transactionId The unique identifier for your SMB's transaction.
     * @param {String} syncId Unique identifier for a sync.
     * @param {module:api/ExpensesApi~uploadAttachmentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Attachment}
     */
    uploadAttachment(companyId, transactionId, syncId, callback) {
      let postBody = null;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling uploadAttachment");
      }
      // verify the required parameter 'transactionId' is set
      if (transactionId === undefined || transactionId === null) {
        throw new Error("Missing the required parameter 'transactionId' when calling uploadAttachment");
      }
      // verify the required parameter 'syncId' is set
      if (syncId === undefined || syncId === null) {
        throw new Error("Missing the required parameter 'syncId' when calling uploadAttachment");
      }

      let pathParams = {
        'companyId': companyId,
        'transactionId': transactionId,
        'syncId': syncId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['auth_header'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = Attachment;
      return this.apiClient.callApi(
        '/companies/{companyId}/sync/expenses/syncs/{syncId}/transactions/{transactionId}/attachments', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
