/**
 * Codat Expense API
 * The API for Sync for Expenses. Sync for Expenses is an API and a set of supporting tools. It has been built to enable corporate card and expense management platforms to provide high-quality integrations with multiple accounting platforms through a standardized API.  [Read more...](https://docs.codat.io/sync-for-expenses/overview)  [See our OpenAPI spec](https://github.com/codatio/oas)
 *
 * The version of the OpenAPI document: prealpha
 * Contact: expenses@codat.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CodatErrorMessageValidationErrorsInner from './CodatErrorMessageValidationErrorsInner';

/**
 * The CodatErrorMessageValidation model module.
 * @module model/CodatErrorMessageValidation
 * @version prealpha
 */
class CodatErrorMessageValidation {
    /**
     * Constructs a new <code>CodatErrorMessageValidation</code>.
     * @alias module:model/CodatErrorMessageValidation
     */
    constructor() { 
        
        CodatErrorMessageValidation.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CodatErrorMessageValidation</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CodatErrorMessageValidation} obj Optional instance to populate.
     * @return {module:model/CodatErrorMessageValidation} The populated <code>CodatErrorMessageValidation</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CodatErrorMessageValidation();

            if (data.hasOwnProperty('errors')) {
                obj['errors'] = ApiClient.convertToType(data['errors'], [CodatErrorMessageValidationErrorsInner]);
            }
            if (data.hasOwnProperty('hasErrors')) {
                obj['hasErrors'] = ApiClient.convertToType(data['hasErrors'], 'Boolean');
            }
            if (data.hasOwnProperty('hasInternals')) {
                obj['hasInternals'] = ApiClient.convertToType(data['hasInternals'], 'Boolean');
            }
            if (data.hasOwnProperty('hasWarnings')) {
                obj['hasWarnings'] = ApiClient.convertToType(data['hasWarnings'], 'Boolean');
            }
            if (data.hasOwnProperty('internals')) {
                obj['internals'] = ApiClient.convertToType(data['internals'], [CodatErrorMessageValidationErrorsInner]);
            }
            if (data.hasOwnProperty('warnings')) {
                obj['warnings'] = ApiClient.convertToType(data['warnings'], [CodatErrorMessageValidationErrorsInner]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CodatErrorMessageValidation</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CodatErrorMessageValidation</code>.
     */
    static validateJSON(data) {
        if (data['errors']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['errors'])) {
                throw new Error("Expected the field `errors` to be an array in the JSON data but got " + data['errors']);
            }
            // validate the optional field `errors` (array)
            for (const item of data['errors']) {
                CodatErrorMessageValidationErrorsInner.validateJSON(item);
            };
        }
        if (data['internals']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['internals'])) {
                throw new Error("Expected the field `internals` to be an array in the JSON data but got " + data['internals']);
            }
            // validate the optional field `internals` (array)
            for (const item of data['internals']) {
                CodatErrorMessageValidationErrorsInner.validateJSON(item);
            };
        }
        if (data['warnings']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['warnings'])) {
                throw new Error("Expected the field `warnings` to be an array in the JSON data but got " + data['warnings']);
            }
            // validate the optional field `warnings` (array)
            for (const item of data['warnings']) {
                CodatErrorMessageValidationErrorsInner.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * @member {Array.<module:model/CodatErrorMessageValidationErrorsInner>} errors
 */
CodatErrorMessageValidation.prototype['errors'] = undefined;

/**
 * @member {Boolean} hasErrors
 */
CodatErrorMessageValidation.prototype['hasErrors'] = undefined;

/**
 * @member {Boolean} hasInternals
 */
CodatErrorMessageValidation.prototype['hasInternals'] = undefined;

/**
 * @member {Boolean} hasWarnings
 */
CodatErrorMessageValidation.prototype['hasWarnings'] = undefined;

/**
 * @member {Array.<module:model/CodatErrorMessageValidationErrorsInner>} internals
 */
CodatErrorMessageValidation.prototype['internals'] = undefined;

/**
 * @member {Array.<module:model/CodatErrorMessageValidationErrorsInner>} warnings
 */
CodatErrorMessageValidation.prototype['warnings'] = undefined;






export default CodatErrorMessageValidation;

