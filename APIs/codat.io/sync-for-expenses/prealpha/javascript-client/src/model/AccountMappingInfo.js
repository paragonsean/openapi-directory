/**
 * Codat Expense API
 * The API for Sync for Expenses. Sync for Expenses is an API and a set of supporting tools. It has been built to enable corporate card and expense management platforms to provide high-quality integrations with multiple accounting platforms through a standardized API.  [Read more...](https://docs.codat.io/sync-for-expenses/overview)  [See our OpenAPI spec](https://github.com/codatio/oas)
 *
 * The version of the OpenAPI document: prealpha
 * Contact: expenses@codat.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AccountMappingInfo model module.
 * @module model/AccountMappingInfo
 * @version prealpha
 */
class AccountMappingInfo {
    /**
     * Constructs a new <code>AccountMappingInfo</code>.
     * @alias module:model/AccountMappingInfo
     */
    constructor() { 
        
        AccountMappingInfo.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AccountMappingInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AccountMappingInfo} obj Optional instance to populate.
     * @return {module:model/AccountMappingInfo} The populated <code>AccountMappingInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AccountMappingInfo();

            if (data.hasOwnProperty('accountType')) {
                obj['accountType'] = ApiClient.convertToType(data['accountType'], 'String');
            }
            if (data.hasOwnProperty('currency')) {
                obj['currency'] = ApiClient.convertToType(data['currency'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('validTransactionTypes')) {
                obj['validTransactionTypes'] = ApiClient.convertToType(data['validTransactionTypes'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AccountMappingInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AccountMappingInfo</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['accountType'] && !(typeof data['accountType'] === 'string' || data['accountType'] instanceof String)) {
            throw new Error("Expected the field `accountType` to be a primitive type in the JSON string but got " + data['accountType']);
        }
        // ensure the json data is a string
        if (data['currency'] && !(typeof data['currency'] === 'string' || data['currency'] instanceof String)) {
            throw new Error("Expected the field `currency` to be a primitive type in the JSON string but got " + data['currency']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['validTransactionTypes'])) {
            throw new Error("Expected the field `validTransactionTypes` to be an array in the JSON data but got " + data['validTransactionTypes']);
        }

        return true;
    }


}



/**
 * Type of the account.
 * @member {module:model/AccountMappingInfo.AccountTypeEnum} accountType
 */
AccountMappingInfo.prototype['accountType'] = undefined;

/**
 * Currency of the account.
 * @member {String} currency
 */
AccountMappingInfo.prototype['currency'] = undefined;

/**
 * Unique identifier of account.
 * @member {String} id
 */
AccountMappingInfo.prototype['id'] = undefined;

/**
 * Name of the account as it appears in the companies accounting software.
 * @member {String} name
 */
AccountMappingInfo.prototype['name'] = undefined;

/**
 * Supported transaction types for the account.
 * @member {Array.<module:model/AccountMappingInfo.ValidTransactionTypesEnum>} validTransactionTypes
 */
AccountMappingInfo.prototype['validTransactionTypes'] = undefined;





/**
 * Allowed values for the <code>accountType</code> property.
 * @enum {String}
 * @readonly
 */
AccountMappingInfo['AccountTypeEnum'] = {

    /**
     * value: "Asset"
     * @const
     */
    "Asset": "Asset",

    /**
     * value: "Liability"
     * @const
     */
    "Liability": "Liability",

    /**
     * value: "Income"
     * @const
     */
    "Income": "Income",

    /**
     * value: "Expense"
     * @const
     */
    "Expense": "Expense",

    /**
     * value: "Equity"
     * @const
     */
    "Equity": "Equity"
};


/**
 * Allowed values for the <code>validTransactionTypes</code> property.
 * @enum {String}
 * @readonly
 */
AccountMappingInfo['ValidTransactionTypesEnum'] = {

    /**
     * value: "Payment"
     * @const
     */
    "Payment": "Payment",

    /**
     * value: "Refund"
     * @const
     */
    "Refund": "Refund",

    /**
     * value: "Reward"
     * @const
     */
    "Reward": "Reward",

    /**
     * value: "Chargeback"
     * @const
     */
    "Chargeback": "Chargeback",

    /**
     * value: "TransferIn"
     * @const
     */
    "TransferIn": "TransferIn",

    /**
     * value: "TransferOut"
     * @const
     */
    "TransferOut": "TransferOut",

    /**
     * value: "AdjustmentIn"
     * @const
     */
    "AdjustmentIn": "AdjustmentIn",

    /**
     * value: "AdjustmentOut"
     * @const
     */
    "AdjustmentOut": "AdjustmentOut"
};



export default AccountMappingInfo;

