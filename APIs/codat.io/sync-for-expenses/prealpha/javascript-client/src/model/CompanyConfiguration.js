/**
 * Codat Expense API
 * The API for Sync for Expenses. Sync for Expenses is an API and a set of supporting tools. It has been built to enable corporate card and expense management platforms to provide high-quality integrations with multiple accounting platforms through a standardized API.  [Read more...](https://docs.codat.io/sync-for-expenses/overview)  [See our OpenAPI spec](https://github.com/codatio/oas)
 *
 * The version of the OpenAPI document: prealpha
 * Contact: expenses@codat.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BankAccount from './BankAccount';
import Customer from './Customer';
import Supplier from './Supplier';

/**
 * The CompanyConfiguration model module.
 * @module model/CompanyConfiguration
 * @version prealpha
 */
class CompanyConfiguration {
    /**
     * Constructs a new <code>CompanyConfiguration</code>.
     * @alias module:model/CompanyConfiguration
     */
    constructor() { 
        
        CompanyConfiguration.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CompanyConfiguration</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CompanyConfiguration} obj Optional instance to populate.
     * @return {module:model/CompanyConfiguration} The populated <code>CompanyConfiguration</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CompanyConfiguration();

            if (data.hasOwnProperty('bankAccount')) {
                obj['bankAccount'] = BankAccount.constructFromObject(data['bankAccount']);
            }
            if (data.hasOwnProperty('customer')) {
                obj['customer'] = Customer.constructFromObject(data['customer']);
            }
            if (data.hasOwnProperty('supplier')) {
                obj['supplier'] = Supplier.constructFromObject(data['supplier']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CompanyConfiguration</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CompanyConfiguration</code>.
     */
    static validateJSON(data) {
        // validate the optional field `bankAccount`
        if (data['bankAccount']) { // data not null
          BankAccount.validateJSON(data['bankAccount']);
        }
        // validate the optional field `customer`
        if (data['customer']) { // data not null
          Customer.validateJSON(data['customer']);
        }
        // validate the optional field `supplier`
        if (data['supplier']) { // data not null
          Supplier.validateJSON(data['supplier']);
        }

        return true;
    }


}



/**
 * @member {module:model/BankAccount} bankAccount
 */
CompanyConfiguration.prototype['bankAccount'] = undefined;

/**
 * @member {module:model/Customer} customer
 */
CompanyConfiguration.prototype['customer'] = undefined;

/**
 * @member {module:model/Supplier} supplier
 */
CompanyConfiguration.prototype['supplier'] = undefined;






export default CompanyConfiguration;

