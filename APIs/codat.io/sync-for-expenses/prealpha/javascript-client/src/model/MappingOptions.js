/**
 * Codat Expense API
 * The API for Sync for Expenses. Sync for Expenses is an API and a set of supporting tools. It has been built to enable corporate card and expense management platforms to provide high-quality integrations with multiple accounting platforms through a standardized API.  [Read more...](https://docs.codat.io/sync-for-expenses/overview)  [See our OpenAPI spec](https://github.com/codatio/oas)
 *
 * The version of the OpenAPI document: prealpha
 * Contact: expenses@codat.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AccountMappingInfo from './AccountMappingInfo';
import TaxRateMappingInfo from './TaxRateMappingInfo';
import TrackingCategoryMappingInfo from './TrackingCategoryMappingInfo';

/**
 * The MappingOptions model module.
 * @module model/MappingOptions
 * @version prealpha
 */
class MappingOptions {
    /**
     * Constructs a new <code>MappingOptions</code>.
     * @alias module:model/MappingOptions
     */
    constructor() { 
        
        MappingOptions.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>MappingOptions</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MappingOptions} obj Optional instance to populate.
     * @return {module:model/MappingOptions} The populated <code>MappingOptions</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MappingOptions();

            if (data.hasOwnProperty('accounts')) {
                obj['accounts'] = ApiClient.convertToType(data['accounts'], [AccountMappingInfo]);
            }
            if (data.hasOwnProperty('expenseProvider')) {
                obj['expenseProvider'] = ApiClient.convertToType(data['expenseProvider'], 'String');
            }
            if (data.hasOwnProperty('taxRates')) {
                obj['taxRates'] = ApiClient.convertToType(data['taxRates'], [TaxRateMappingInfo]);
            }
            if (data.hasOwnProperty('trackingCategories')) {
                obj['trackingCategories'] = ApiClient.convertToType(data['trackingCategories'], [TrackingCategoryMappingInfo]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MappingOptions</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MappingOptions</code>.
     */
    static validateJSON(data) {
        if (data['accounts']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['accounts'])) {
                throw new Error("Expected the field `accounts` to be an array in the JSON data but got " + data['accounts']);
            }
            // validate the optional field `accounts` (array)
            for (const item of data['accounts']) {
                AccountMappingInfo.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['expenseProvider'] && !(typeof data['expenseProvider'] === 'string' || data['expenseProvider'] instanceof String)) {
            throw new Error("Expected the field `expenseProvider` to be a primitive type in the JSON string but got " + data['expenseProvider']);
        }
        if (data['taxRates']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['taxRates'])) {
                throw new Error("Expected the field `taxRates` to be an array in the JSON data but got " + data['taxRates']);
            }
            // validate the optional field `taxRates` (array)
            for (const item of data['taxRates']) {
                TaxRateMappingInfo.validateJSON(item);
            };
        }
        if (data['trackingCategories']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['trackingCategories'])) {
                throw new Error("Expected the field `trackingCategories` to be an array in the JSON data but got " + data['trackingCategories']);
            }
            // validate the optional field `trackingCategories` (array)
            for (const item of data['trackingCategories']) {
                TrackingCategoryMappingInfo.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Array of available accounts for mapping.
 * @member {Array.<module:model/AccountMappingInfo>} accounts
 */
MappingOptions.prototype['accounts'] = undefined;

/**
 * Name of the expense integration.
 * @member {String} expenseProvider
 */
MappingOptions.prototype['expenseProvider'] = undefined;

/**
 * Array of available tax rates for mapping.
 * @member {Array.<module:model/TaxRateMappingInfo>} taxRates
 */
MappingOptions.prototype['taxRates'] = undefined;

/**
 * Array of available tracking categories for mapping.
 * @member {Array.<module:model/TrackingCategoryMappingInfo>} trackingCategories
 */
MappingOptions.prototype['trackingCategories'] = undefined;






export default MappingOptions;

