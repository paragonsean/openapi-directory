/**
 * Codat Expense API
 * The API for Sync for Expenses. Sync for Expenses is an API and a set of supporting tools. It has been built to enable corporate card and expense management platforms to provide high-quality integrations with multiple accounting platforms through a standardized API.  [Read more...](https://docs.codat.io/sync-for-expenses/overview)  [See our OpenAPI spec](https://github.com/codatio/oas)
 *
 * The version of the OpenAPI document: prealpha
 * Contact: expenses@codat.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CompanySyncStatus model module.
 * @module model/CompanySyncStatus
 * @version prealpha
 */
class CompanySyncStatus {
    /**
     * Constructs a new <code>CompanySyncStatus</code>.
     * @alias module:model/CompanySyncStatus
     */
    constructor() { 
        
        CompanySyncStatus.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CompanySyncStatus</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CompanySyncStatus} obj Optional instance to populate.
     * @return {module:model/CompanySyncStatus} The populated <code>CompanySyncStatus</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CompanySyncStatus();

            if (data.hasOwnProperty('companyId')) {
                obj['companyId'] = ApiClient.convertToType(data['companyId'], 'String');
            }
            if (data.hasOwnProperty('dataPushed')) {
                obj['dataPushed'] = ApiClient.convertToType(data['dataPushed'], 'Boolean');
            }
            if (data.hasOwnProperty('errorMessage')) {
                obj['errorMessage'] = ApiClient.convertToType(data['errorMessage'], 'String');
            }
            if (data.hasOwnProperty('syncExceptionMessage')) {
                obj['syncExceptionMessage'] = ApiClient.convertToType(data['syncExceptionMessage'], 'String');
            }
            if (data.hasOwnProperty('syncId')) {
                obj['syncId'] = ApiClient.convertToType(data['syncId'], 'String');
            }
            if (data.hasOwnProperty('syncStatus')) {
                obj['syncStatus'] = ApiClient.convertToType(data['syncStatus'], 'String');
            }
            if (data.hasOwnProperty('syncStatusCode')) {
                obj['syncStatusCode'] = ApiClient.convertToType(data['syncStatusCode'], 'Number');
            }
            if (data.hasOwnProperty('syncUtc')) {
                obj['syncUtc'] = ApiClient.convertToType(data['syncUtc'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CompanySyncStatus</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CompanySyncStatus</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['companyId'] && !(typeof data['companyId'] === 'string' || data['companyId'] instanceof String)) {
            throw new Error("Expected the field `companyId` to be a primitive type in the JSON string but got " + data['companyId']);
        }
        // ensure the json data is a string
        if (data['errorMessage'] && !(typeof data['errorMessage'] === 'string' || data['errorMessage'] instanceof String)) {
            throw new Error("Expected the field `errorMessage` to be a primitive type in the JSON string but got " + data['errorMessage']);
        }
        // ensure the json data is a string
        if (data['syncExceptionMessage'] && !(typeof data['syncExceptionMessage'] === 'string' || data['syncExceptionMessage'] instanceof String)) {
            throw new Error("Expected the field `syncExceptionMessage` to be a primitive type in the JSON string but got " + data['syncExceptionMessage']);
        }
        // ensure the json data is a string
        if (data['syncId'] && !(typeof data['syncId'] === 'string' || data['syncId'] instanceof String)) {
            throw new Error("Expected the field `syncId` to be a primitive type in the JSON string but got " + data['syncId']);
        }
        // ensure the json data is a string
        if (data['syncStatus'] && !(typeof data['syncStatus'] === 'string' || data['syncStatus'] instanceof String)) {
            throw new Error("Expected the field `syncStatus` to be a primitive type in the JSON string but got " + data['syncStatus']);
        }
        // ensure the json data is a string
        if (data['syncUtc'] && !(typeof data['syncUtc'] === 'string' || data['syncUtc'] instanceof String)) {
            throw new Error("Expected the field `syncUtc` to be a primitive type in the JSON string but got " + data['syncUtc']);
        }

        return true;
    }


}



/**
 * Unique identifier for your SMB in Codat.
 * @member {String} companyId
 */
CompanySyncStatus.prototype['companyId'] = undefined;

/**
 * Boolean of whether the sync resulted in data being pushed.
 * @member {Boolean} dataPushed
 */
CompanySyncStatus.prototype['dataPushed'] = undefined;

/**
 * Error message of the sync.
 * @member {String} errorMessage
 */
CompanySyncStatus.prototype['errorMessage'] = undefined;

/**
 * Exception message of the sync.
 * @member {String} syncExceptionMessage
 */
CompanySyncStatus.prototype['syncExceptionMessage'] = undefined;

/**
 * Unique identifier of the sync.
 * @member {String} syncId
 */
CompanySyncStatus.prototype['syncId'] = undefined;

/**
 * Text status of the sync.
 * @member {String} syncStatus
 */
CompanySyncStatus.prototype['syncStatus'] = undefined;

/**
 * Status code of the sync.
 * @member {Number} syncStatusCode
 */
CompanySyncStatus.prototype['syncStatusCode'] = undefined;

/**
 * In Codat's data model, dates and times are represented using the <a class=\"external\" href=\"https://en.wikipedia.org/wiki/ISO_8601\" target=\"_blank\">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:  ``` 2020-10-08T22:40:50Z 2021-01-01T00:00:00 ```    When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:  - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z` - Unqualified local time: `2021-11-15T01:00:00` - UTC time offsets: `2021-11-15T01:00:00-05:00`  > Time zones >  > Not all dates from Codat will contain information about time zones.   > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
 * @member {String} syncUtc
 */
CompanySyncStatus.prototype['syncUtc'] = undefined;






export default CompanySyncStatus;

