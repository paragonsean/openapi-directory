/**
 * Codat Expense API
 * The API for Sync for Expenses. Sync for Expenses is an API and a set of supporting tools. It has been built to enable corporate card and expense management platforms to provide high-quality integrations with multiple accounting platforms through a standardized API.  [Read more...](https://docs.codat.io/sync-for-expenses/overview)  [See our OpenAPI spec](https://github.com/codatio/oas)
 *
 * The version of the OpenAPI document: prealpha
 * Contact: expenses@codat.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CodatErrorMessageValidation from './CodatErrorMessageValidation';

/**
 * The CodatErrorMessage model module.
 * @module model/CodatErrorMessage
 * @version prealpha
 */
class CodatErrorMessage {
    /**
     * Constructs a new <code>CodatErrorMessage</code>.
     * @alias module:model/CodatErrorMessage
     */
    constructor() { 
        
        CodatErrorMessage.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CodatErrorMessage</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CodatErrorMessage} obj Optional instance to populate.
     * @return {module:model/CodatErrorMessage} The populated <code>CodatErrorMessage</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CodatErrorMessage();

            if (data.hasOwnProperty('canBeRetried')) {
                obj['canBeRetried'] = ApiClient.convertToType(data['canBeRetried'], 'String');
            }
            if (data.hasOwnProperty('correlationId')) {
                obj['correlationId'] = ApiClient.convertToType(data['correlationId'], 'String');
            }
            if (data.hasOwnProperty('detailedErrorCode')) {
                obj['detailedErrorCode'] = ApiClient.convertToType(data['detailedErrorCode'], 'Number');
            }
            if (data.hasOwnProperty('error')) {
                obj['error'] = ApiClient.convertToType(data['error'], 'String');
            }
            if (data.hasOwnProperty('inner')) {
                obj['inner'] = ApiClient.convertToType(data['inner'], 'String');
            }
            if (data.hasOwnProperty('service')) {
                obj['service'] = ApiClient.convertToType(data['service'], 'String');
            }
            if (data.hasOwnProperty('statusCode')) {
                obj['statusCode'] = ApiClient.convertToType(data['statusCode'], 'Number');
            }
            if (data.hasOwnProperty('validation')) {
                obj['validation'] = CodatErrorMessageValidation.constructFromObject(data['validation']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CodatErrorMessage</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CodatErrorMessage</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['canBeRetried'] && !(typeof data['canBeRetried'] === 'string' || data['canBeRetried'] instanceof String)) {
            throw new Error("Expected the field `canBeRetried` to be a primitive type in the JSON string but got " + data['canBeRetried']);
        }
        // ensure the json data is a string
        if (data['correlationId'] && !(typeof data['correlationId'] === 'string' || data['correlationId'] instanceof String)) {
            throw new Error("Expected the field `correlationId` to be a primitive type in the JSON string but got " + data['correlationId']);
        }
        // ensure the json data is a string
        if (data['error'] && !(typeof data['error'] === 'string' || data['error'] instanceof String)) {
            throw new Error("Expected the field `error` to be a primitive type in the JSON string but got " + data['error']);
        }
        // ensure the json data is a string
        if (data['inner'] && !(typeof data['inner'] === 'string' || data['inner'] instanceof String)) {
            throw new Error("Expected the field `inner` to be a primitive type in the JSON string but got " + data['inner']);
        }
        // ensure the json data is a string
        if (data['service'] && !(typeof data['service'] === 'string' || data['service'] instanceof String)) {
            throw new Error("Expected the field `service` to be a primitive type in the JSON string but got " + data['service']);
        }
        // validate the optional field `validation`
        if (data['validation']) { // data not null
          CodatErrorMessageValidation.validateJSON(data['validation']);
        }

        return true;
    }


}



/**
 * @member {String} canBeRetried
 */
CodatErrorMessage.prototype['canBeRetried'] = undefined;

/**
 * @member {String} correlationId
 */
CodatErrorMessage.prototype['correlationId'] = undefined;

/**
 * @member {Number} detailedErrorCode
 */
CodatErrorMessage.prototype['detailedErrorCode'] = undefined;

/**
 * @member {String} error
 */
CodatErrorMessage.prototype['error'] = undefined;

/**
 * @member {String} inner
 */
CodatErrorMessage.prototype['inner'] = undefined;

/**
 * @member {String} service
 */
CodatErrorMessage.prototype['service'] = undefined;

/**
 * @member {Number} statusCode
 */
CodatErrorMessage.prototype['statusCode'] = undefined;

/**
 * @member {module:model/CodatErrorMessageValidation} validation
 */
CodatErrorMessage.prototype['validation'] = undefined;






export default CodatErrorMessage;

