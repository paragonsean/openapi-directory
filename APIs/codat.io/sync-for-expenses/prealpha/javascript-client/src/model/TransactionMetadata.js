/**
 * Codat Expense API
 * The API for Sync for Expenses. Sync for Expenses is an API and a set of supporting tools. It has been built to enable corporate card and expense management platforms to provide high-quality integrations with multiple accounting platforms through a standardized API.  [Read more...](https://docs.codat.io/sync-for-expenses/overview)  [See our OpenAPI spec](https://github.com/codatio/oas)
 *
 * The version of the OpenAPI document: prealpha
 * Contact: expenses@codat.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import IntegrationType from './IntegrationType';
import TransactionStatus from './TransactionStatus';

/**
 * The TransactionMetadata model module.
 * @module model/TransactionMetadata
 * @version prealpha
 */
class TransactionMetadata {
    /**
     * Constructs a new <code>TransactionMetadata</code>.
     * @alias module:model/TransactionMetadata
     */
    constructor() { 
        
        TransactionMetadata.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TransactionMetadata</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TransactionMetadata} obj Optional instance to populate.
     * @return {module:model/TransactionMetadata} The populated <code>TransactionMetadata</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TransactionMetadata();

            if (data.hasOwnProperty('integrationType')) {
                obj['integrationType'] = IntegrationType.constructFromObject(data['integrationType']);
            }
            if (data.hasOwnProperty('message')) {
                obj['message'] = ApiClient.convertToType(data['message'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = TransactionStatus.constructFromObject(data['status']);
            }
            if (data.hasOwnProperty('transactionId')) {
                obj['transactionId'] = ApiClient.convertToType(data['transactionId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TransactionMetadata</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TransactionMetadata</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['message'] && !(typeof data['message'] === 'string' || data['message'] instanceof String)) {
            throw new Error("Expected the field `message` to be a primitive type in the JSON string but got " + data['message']);
        }
        // ensure the json data is a string
        if (data['transactionId'] && !(typeof data['transactionId'] === 'string' || data['transactionId'] instanceof String)) {
            throw new Error("Expected the field `transactionId` to be a primitive type in the JSON string but got " + data['transactionId']);
        }

        return true;
    }


}



/**
 * @member {module:model/IntegrationType} integrationType
 */
TransactionMetadata.prototype['integrationType'] = undefined;

/**
 * Metadata such as validation errors or the resulting record created in the accounting software.
 * @member {String} message
 */
TransactionMetadata.prototype['message'] = undefined;

/**
 * @member {module:model/TransactionStatus} status
 */
TransactionMetadata.prototype['status'] = undefined;

/**
 * Your unique idenfier of the transaction.
 * @member {String} transactionId
 */
TransactionMetadata.prototype['transactionId'] = undefined;






export default TransactionMetadata;

