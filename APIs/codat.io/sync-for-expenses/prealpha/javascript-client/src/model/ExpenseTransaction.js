/**
 * Codat Expense API
 * The API for Sync for Expenses. Sync for Expenses is an API and a set of supporting tools. It has been built to enable corporate card and expense management platforms to provide high-quality integrations with multiple accounting platforms through a standardized API.  [Read more...](https://docs.codat.io/sync-for-expenses/overview)  [See our OpenAPI spec](https://github.com/codatio/oas)
 *
 * The version of the OpenAPI document: prealpha
 * Contact: expenses@codat.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ExpenseTransactionLine from './ExpenseTransactionLine';

/**
 * The ExpenseTransaction model module.
 * @module model/ExpenseTransaction
 * @version prealpha
 */
class ExpenseTransaction {
    /**
     * Constructs a new <code>ExpenseTransaction</code>.
     * @alias module:model/ExpenseTransaction
     * @param currency {String} Currency the transaction was recorded in.
     * @param id {String} Your unique idenfier for the transaction.
     * @param issueDate {String} In Codat's data model, dates and times are represented using the <a class=\"external\" href=\"https://en.wikipedia.org/wiki/ISO_8601\" target=\"_blank\">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:  ``` 2020-10-08T22:40:50Z 2021-01-01T00:00:00 ```    When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:  - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z` - Unqualified local time: `2021-11-15T01:00:00` - UTC time offsets: `2021-11-15T01:00:00-05:00`  > Time zones >  > Not all dates from Codat will contain information about time zones.   > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     * @param type {module:model/ExpenseTransaction.TypeEnum} The type of transaction.
     */
    constructor(currency, id, issueDate, type) { 
        
        ExpenseTransaction.initialize(this, currency, id, issueDate, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, currency, id, issueDate, type) { 
        obj['currency'] = currency;
        obj['id'] = id;
        obj['issueDate'] = issueDate;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>ExpenseTransaction</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ExpenseTransaction} obj Optional instance to populate.
     * @return {module:model/ExpenseTransaction} The populated <code>ExpenseTransaction</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ExpenseTransaction();

            if (data.hasOwnProperty('currency')) {
                obj['currency'] = ApiClient.convertToType(data['currency'], 'String');
            }
            if (data.hasOwnProperty('currencyRate')) {
                obj['currencyRate'] = ApiClient.convertToType(data['currencyRate'], 'Number');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('issueDate')) {
                obj['issueDate'] = ApiClient.convertToType(data['issueDate'], 'String');
            }
            if (data.hasOwnProperty('lines')) {
                obj['lines'] = ApiClient.convertToType(data['lines'], [ExpenseTransactionLine]);
            }
            if (data.hasOwnProperty('merchantName')) {
                obj['merchantName'] = ApiClient.convertToType(data['merchantName'], 'String');
            }
            if (data.hasOwnProperty('notes')) {
                obj['notes'] = ApiClient.convertToType(data['notes'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ExpenseTransaction</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ExpenseTransaction</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ExpenseTransaction.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['currency'] && !(typeof data['currency'] === 'string' || data['currency'] instanceof String)) {
            throw new Error("Expected the field `currency` to be a primitive type in the JSON string but got " + data['currency']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['issueDate'] && !(typeof data['issueDate'] === 'string' || data['issueDate'] instanceof String)) {
            throw new Error("Expected the field `issueDate` to be a primitive type in the JSON string but got " + data['issueDate']);
        }
        if (data['lines']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['lines'])) {
                throw new Error("Expected the field `lines` to be an array in the JSON data but got " + data['lines']);
            }
            // validate the optional field `lines` (array)
            for (const item of data['lines']) {
                ExpenseTransactionLine.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['merchantName'] && !(typeof data['merchantName'] === 'string' || data['merchantName'] instanceof String)) {
            throw new Error("Expected the field `merchantName` to be a primitive type in the JSON string but got " + data['merchantName']);
        }
        // ensure the json data is a string
        if (data['notes'] && !(typeof data['notes'] === 'string' || data['notes'] instanceof String)) {
            throw new Error("Expected the field `notes` to be a primitive type in the JSON string but got " + data['notes']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

ExpenseTransaction.RequiredProperties = ["currency", "id", "issueDate", "type"];

/**
 * Currency the transaction was recorded in.
 * @member {String} currency
 */
ExpenseTransaction.prototype['currency'] = undefined;

/**
 * Rate to convert the total amount of the payment into the base currency for the company at the time of the payment.  Currency rates in Codat are implemented as the multiple of foreign currency units to each base currency unit.    Where the currency rate is provided by the underlying accounting platform, it will be available from Codat with the same precision (up to a maximum of 9 decimal places).   For accounting platforms which do not provide an explicit currency rate, it is calculated as `baseCurrency / foreignCurrency` and will be returned to 9 decimal places.  ## Examples with base currency of GBP  | Foreign Currency | Foreign Amount | Currency Rate | Base Currency Amount (GBP) | | :--------------- | :------------- | :------------ | :------------------------- | | **USD**          | $20            | 0.781         | £15.62                     | | **EUR**          | €20            | 0.885         | £17.70                     | | **RUB**          | ₽20            | 0.011         | £0.22                      |  ## Examples with base currency of USD  | Foreign Currency | Foreign Amount | Currency Rate | Base Currency Amount (USD) | | :--------------- | :------------- | :------------ | :------------------------- | | **GBP**          | £20            | 1.277         | $25.54                     | | **EUR**          | €20            | 1.134         | $22.68                     | | **RUB**          | ₽20            | 0.015         | $0.30                      |
 * @member {Number} currencyRate
 */
ExpenseTransaction.prototype['currencyRate'] = undefined;

/**
 * Your unique idenfier for the transaction.
 * @member {String} id
 */
ExpenseTransaction.prototype['id'] = undefined;

/**
 * In Codat's data model, dates and times are represented using the <a class=\"external\" href=\"https://en.wikipedia.org/wiki/ISO_8601\" target=\"_blank\">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:  ``` 2020-10-08T22:40:50Z 2021-01-01T00:00:00 ```    When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:  - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z` - Unqualified local time: `2021-11-15T01:00:00` - UTC time offsets: `2021-11-15T01:00:00-05:00`  > Time zones >  > Not all dates from Codat will contain information about time zones.   > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
 * @member {String} issueDate
 */
ExpenseTransaction.prototype['issueDate'] = undefined;

/**
 * Array of transaction lines.
 * @member {Array.<module:model/ExpenseTransactionLine>} lines
 */
ExpenseTransaction.prototype['lines'] = undefined;

/**
 * Name of the merchant where the purchase took place
 * @member {String} merchantName
 */
ExpenseTransaction.prototype['merchantName'] = undefined;

/**
 * Any private, company notes about the transaction.
 * @member {String} notes
 */
ExpenseTransaction.prototype['notes'] = undefined;

/**
 * The type of transaction.
 * @member {module:model/ExpenseTransaction.TypeEnum} type
 */
ExpenseTransaction.prototype['type'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
ExpenseTransaction['TypeEnum'] = {

    /**
     * value: "Payment"
     * @const
     */
    "Payment": "Payment",

    /**
     * value: "Refund"
     * @const
     */
    "Refund": "Refund",

    /**
     * value: "Reward"
     * @const
     */
    "Reward": "Reward",

    /**
     * value: "Chargeback"
     * @const
     */
    "Chargeback": "Chargeback",

    /**
     * value: "TransferIn"
     * @const
     */
    "TransferIn": "TransferIn",

    /**
     * value: "TransferOut"
     * @const
     */
    "TransferOut": "TransferOut",

    /**
     * value: "AdjustmentIn"
     * @const
     */
    "AdjustmentIn": "AdjustmentIn",

    /**
     * value: "AdjustmentOut"
     * @const
     */
    "AdjustmentOut": "AdjustmentOut"
};



export default ExpenseTransaction;

