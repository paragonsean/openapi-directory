/**
 * Codat Expense API
 * The API for Sync for Expenses. Sync for Expenses is an API and a set of supporting tools. It has been built to enable corporate card and expense management platforms to provide high-quality integrations with multiple accounting platforms through a standardized API.  [Read more...](https://docs.codat.io/sync-for-expenses/overview)  [See our OpenAPI spec](https://github.com/codatio/oas)
 *
 * The version of the OpenAPI document: prealpha
 * Contact: expenses@codat.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from './ApiClient';
import AccountMappingInfo from './model/AccountMappingInfo';
import Attachment from './model/Attachment';
import CodatErrorMessage from './model/CodatErrorMessage';
import CodatErrorMessageValidation from './model/CodatErrorMessageValidation';
import CodatErrorMessageValidationErrorsInner from './model/CodatErrorMessageValidationErrorsInner';
import CompanyConfiguration from './model/CompanyConfiguration';
import CompanySyncStatus from './model/CompanySyncStatus';
import DataConnection from './model/DataConnection';
import DataConnectionError from './model/DataConnectionError';
import DataConnectionStatus from './model/DataConnectionStatus';
import ExpenseTransaction from './model/ExpenseTransaction';
import MappingOptions from './model/MappingOptions';
import PostSync from './model/PostSync';
import SyncInitiated from './model/SyncInitiated';
import TaxRateMappingInfo from './model/TaxRateMappingInfo';
import TrackingCategoryMappingInfo from './model/TrackingCategoryMappingInfo';
import TransactionMetadata from './model/TransactionMetadata';
import ConfigurationApi from './api/ConfigurationApi';
import ConnectionsApi from './api/ConnectionsApi';
import ExpensesApi from './api/ExpensesApi';
import MappingOptionsApi from './api/MappingOptionsApi';
import SyncApi from './api/SyncApi';
import SyncStatusApi from './api/SyncStatusApi';
import TransactionStatusApi from './api/TransactionStatusApi';


/**
* The API for Sync for Expenses. Sync for Expenses is an API and a set of supporting tools. It has been built to enable corporate card and expense management platforms to provide high-quality integrations with multiple accounting platforms through a standardized API.  [Read more...](https://docs.codat.io/sync-for-expenses/overview)  [See our OpenAPI spec](https://github.com/codatio/oas).<br>
* The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
* <p>
* An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
* <pre>
* var CodatExpenseApi = require('index'); // See note below*.
* var xxxSvc = new CodatExpenseApi.XxxApi(); // Allocate the API class we're going to use.
* var yyyModel = new CodatExpenseApi.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
* and put the application logic within the callback function.</em>
* </p>
* <p>
* A non-AMD browser application (discouraged) might do something like this:
* <pre>
* var xxxSvc = new CodatExpenseApi.XxxApi(); // Allocate the API class we're going to use.
* var yyy = new CodatExpenseApi.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* </p>
* @module index
* @version prealpha
*/
export {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient,

    /**
     * The AccountMappingInfo model constructor.
     * @property {module:model/AccountMappingInfo}
     */
    AccountMappingInfo,

    /**
     * The Attachment model constructor.
     * @property {module:model/Attachment}
     */
    Attachment,

    /**
     * The CodatErrorMessage model constructor.
     * @property {module:model/CodatErrorMessage}
     */
    CodatErrorMessage,

    /**
     * The CodatErrorMessageValidation model constructor.
     * @property {module:model/CodatErrorMessageValidation}
     */
    CodatErrorMessageValidation,

    /**
     * The CodatErrorMessageValidationErrorsInner model constructor.
     * @property {module:model/CodatErrorMessageValidationErrorsInner}
     */
    CodatErrorMessageValidationErrorsInner,

    /**
     * The CompanyConfiguration model constructor.
     * @property {module:model/CompanyConfiguration}
     */
    CompanyConfiguration,

    /**
     * The CompanySyncStatus model constructor.
     * @property {module:model/CompanySyncStatus}
     */
    CompanySyncStatus,

    /**
     * The DataConnection model constructor.
     * @property {module:model/DataConnection}
     */
    DataConnection,

    /**
     * The DataConnectionError model constructor.
     * @property {module:model/DataConnectionError}
     */
    DataConnectionError,

    /**
     * The DataConnectionStatus model constructor.
     * @property {module:model/DataConnectionStatus}
     */
    DataConnectionStatus,

    /**
     * The ExpenseTransaction model constructor.
     * @property {module:model/ExpenseTransaction}
     */
    ExpenseTransaction,

    /**
     * The MappingOptions model constructor.
     * @property {module:model/MappingOptions}
     */
    MappingOptions,

    /**
     * The PostSync model constructor.
     * @property {module:model/PostSync}
     */
    PostSync,

    /**
     * The SyncInitiated model constructor.
     * @property {module:model/SyncInitiated}
     */
    SyncInitiated,

    /**
     * The TaxRateMappingInfo model constructor.
     * @property {module:model/TaxRateMappingInfo}
     */
    TaxRateMappingInfo,

    /**
     * The TrackingCategoryMappingInfo model constructor.
     * @property {module:model/TrackingCategoryMappingInfo}
     */
    TrackingCategoryMappingInfo,

    /**
     * The TransactionMetadata model constructor.
     * @property {module:model/TransactionMetadata}
     */
    TransactionMetadata,

    /**
    * The ConfigurationApi service constructor.
    * @property {module:api/ConfigurationApi}
    */
    ConfigurationApi,

    /**
    * The ConnectionsApi service constructor.
    * @property {module:api/ConnectionsApi}
    */
    ConnectionsApi,

    /**
    * The ExpensesApi service constructor.
    * @property {module:api/ExpensesApi}
    */
    ExpensesApi,

    /**
    * The MappingOptionsApi service constructor.
    * @property {module:api/MappingOptionsApi}
    */
    MappingOptionsApi,

    /**
    * The SyncApi service constructor.
    * @property {module:api/SyncApi}
    */
    SyncApi,

    /**
    * The SyncStatusApi service constructor.
    * @property {module:api/SyncStatusApi}
    */
    SyncStatusApi,

    /**
    * The TransactionStatusApi service constructor.
    * @property {module:api/TransactionStatusApi}
    */
    TransactionStatusApi
};
