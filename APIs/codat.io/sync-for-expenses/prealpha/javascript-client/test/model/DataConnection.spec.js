/**
 * Codat Expense API
 * The API for Sync for Expenses. Sync for Expenses is an API and a set of supporting tools. It has been built to enable corporate card and expense management platforms to provide high-quality integrations with multiple accounting platforms through a standardized API.  [Read more...](https://docs.codat.io/sync-for-expenses/overview)  [See our OpenAPI spec](https://github.com/codatio/oas)
 *
 * The version of the OpenAPI document: prealpha
 * Contact: expenses@codat.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.CodatExpenseApi);
  }
}(this, function(expect, CodatExpenseApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new CodatExpenseApi.DataConnection();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DataConnection', function() {
    it('should create an instance of DataConnection', function() {
      // uncomment below and update the code to test DataConnection
      //var instance = new CodatExpenseApi.DataConnection();
      //expect(instance).to.be.a(CodatExpenseApi.DataConnection);
    });

    it('should have the property additionalProperties (base name: "additionalProperties")', function() {
      // uncomment below and update the code to test the property additionalProperties
      //var instance = new CodatExpenseApi.DataConnection();
      //expect(instance).to.be();
    });

    it('should have the property connectionInfo (base name: "connectionInfo")', function() {
      // uncomment below and update the code to test the property connectionInfo
      //var instance = new CodatExpenseApi.DataConnection();
      //expect(instance).to.be();
    });

    it('should have the property created (base name: "created")', function() {
      // uncomment below and update the code to test the property created
      //var instance = new CodatExpenseApi.DataConnection();
      //expect(instance).to.be();
    });

    it('should have the property dataConnectionErrors (base name: "dataConnectionErrors")', function() {
      // uncomment below and update the code to test the property dataConnectionErrors
      //var instance = new CodatExpenseApi.DataConnection();
      //expect(instance).to.be();
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new CodatExpenseApi.DataConnection();
      //expect(instance).to.be();
    });

    it('should have the property integrationId (base name: "integrationId")', function() {
      // uncomment below and update the code to test the property integrationId
      //var instance = new CodatExpenseApi.DataConnection();
      //expect(instance).to.be();
    });

    it('should have the property integrationKey (base name: "integrationKey")', function() {
      // uncomment below and update the code to test the property integrationKey
      //var instance = new CodatExpenseApi.DataConnection();
      //expect(instance).to.be();
    });

    it('should have the property lastSync (base name: "lastSync")', function() {
      // uncomment below and update the code to test the property lastSync
      //var instance = new CodatExpenseApi.DataConnection();
      //expect(instance).to.be();
    });

    it('should have the property linkUrl (base name: "linkUrl")', function() {
      // uncomment below and update the code to test the property linkUrl
      //var instance = new CodatExpenseApi.DataConnection();
      //expect(instance).to.be();
    });

    it('should have the property platformName (base name: "platformName")', function() {
      // uncomment below and update the code to test the property platformName
      //var instance = new CodatExpenseApi.DataConnection();
      //expect(instance).to.be();
    });

    it('should have the property sourceId (base name: "sourceId")', function() {
      // uncomment below and update the code to test the property sourceId
      //var instance = new CodatExpenseApi.DataConnection();
      //expect(instance).to.be();
    });

    it('should have the property sourceType (base name: "sourceType")', function() {
      // uncomment below and update the code to test the property sourceType
      //var instance = new CodatExpenseApi.DataConnection();
      //expect(instance).to.be();
    });

    it('should have the property status (base name: "status")', function() {
      // uncomment below and update the code to test the property status
      //var instance = new CodatExpenseApi.DataConnection();
      //expect(instance).to.be();
    });

  });

}));
