/*
 * Codat Expense API
 * The API for Sync for Expenses. Sync for Expenses is an API and a set of supporting tools. It has been built to enable corporate card and expense management platforms to provide high-quality integrations with multiple accounting platforms through a standardized API.  [Read more...](https://docs.codat.io/sync-for-expenses/overview)  [See our OpenAPI spec](https://github.com/codatio/oas)
 *
 * The version of the OpenAPI document: prealpha
 * Contact: expenses@codat.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AccountMappingInfo
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:17:50.797364-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AccountMappingInfo {
  /**
   * Type of the account.
   */
  @JsonAdapter(AccountTypeEnum.Adapter.class)
  public enum AccountTypeEnum {
    ASSET("Asset"),
    
    LIABILITY("Liability"),
    
    INCOME("Income"),
    
    EXPENSE("Expense"),
    
    EQUITY("Equity");

    private String value;

    AccountTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AccountTypeEnum fromValue(String value) {
      for (AccountTypeEnum b : AccountTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AccountTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AccountTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AccountTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AccountTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AccountTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ACCOUNT_TYPE = "accountType";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_TYPE)
  private AccountTypeEnum accountType;

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private String currency;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  /**
   * Gets or Sets validTransactionTypes
   */
  @JsonAdapter(ValidTransactionTypesEnum.Adapter.class)
  public enum ValidTransactionTypesEnum {
    PAYMENT("Payment"),
    
    REFUND("Refund"),
    
    REWARD("Reward"),
    
    CHARGEBACK("Chargeback"),
    
    TRANSFER_IN("TransferIn"),
    
    TRANSFER_OUT("TransferOut"),
    
    ADJUSTMENT_IN("AdjustmentIn"),
    
    ADJUSTMENT_OUT("AdjustmentOut");

    private String value;

    ValidTransactionTypesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ValidTransactionTypesEnum fromValue(String value) {
      for (ValidTransactionTypesEnum b : ValidTransactionTypesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ValidTransactionTypesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ValidTransactionTypesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ValidTransactionTypesEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ValidTransactionTypesEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ValidTransactionTypesEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_VALID_TRANSACTION_TYPES = "validTransactionTypes";
  @SerializedName(SERIALIZED_NAME_VALID_TRANSACTION_TYPES)
  private List<ValidTransactionTypesEnum> validTransactionTypes = new ArrayList<>();

  public AccountMappingInfo() {
  }

  public AccountMappingInfo accountType(AccountTypeEnum accountType) {
    this.accountType = accountType;
    return this;
  }

  /**
   * Type of the account.
   * @return accountType
   */
  @javax.annotation.Nullable
  public AccountTypeEnum getAccountType() {
    return accountType;
  }

  public void setAccountType(AccountTypeEnum accountType) {
    this.accountType = accountType;
  }


  public AccountMappingInfo currency(String currency) {
    this.currency = currency;
    return this;
  }

  /**
   * Currency of the account.
   * @return currency
   */
  @javax.annotation.Nullable
  public String getCurrency() {
    return currency;
  }

  public void setCurrency(String currency) {
    this.currency = currency;
  }


  public AccountMappingInfo id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Unique identifier of account.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public AccountMappingInfo name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Name of the account as it appears in the companies accounting software.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public AccountMappingInfo validTransactionTypes(List<ValidTransactionTypesEnum> validTransactionTypes) {
    this.validTransactionTypes = validTransactionTypes;
    return this;
  }

  public AccountMappingInfo addValidTransactionTypesItem(ValidTransactionTypesEnum validTransactionTypesItem) {
    if (this.validTransactionTypes == null) {
      this.validTransactionTypes = new ArrayList<>();
    }
    this.validTransactionTypes.add(validTransactionTypesItem);
    return this;
  }

  /**
   * Supported transaction types for the account.
   * @return validTransactionTypes
   */
  @javax.annotation.Nullable
  public List<ValidTransactionTypesEnum> getValidTransactionTypes() {
    return validTransactionTypes;
  }

  public void setValidTransactionTypes(List<ValidTransactionTypesEnum> validTransactionTypes) {
    this.validTransactionTypes = validTransactionTypes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AccountMappingInfo accountMappingInfo = (AccountMappingInfo) o;
    return Objects.equals(this.accountType, accountMappingInfo.accountType) &&
        Objects.equals(this.currency, accountMappingInfo.currency) &&
        Objects.equals(this.id, accountMappingInfo.id) &&
        Objects.equals(this.name, accountMappingInfo.name) &&
        Objects.equals(this.validTransactionTypes, accountMappingInfo.validTransactionTypes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountType, currency, id, name, validTransactionTypes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AccountMappingInfo {\n");
    sb.append("    accountType: ").append(toIndentedString(accountType)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    validTransactionTypes: ").append(toIndentedString(validTransactionTypes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accountType");
    openapiFields.add("currency");
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("validTransactionTypes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AccountMappingInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AccountMappingInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AccountMappingInfo is not found in the empty JSON string", AccountMappingInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AccountMappingInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AccountMappingInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("accountType") != null && !jsonObj.get("accountType").isJsonNull()) && !jsonObj.get("accountType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountType").toString()));
      }
      // validate the optional field `accountType`
      if (jsonObj.get("accountType") != null && !jsonObj.get("accountType").isJsonNull()) {
        AccountTypeEnum.validateJsonElement(jsonObj.get("accountType"));
      }
      if ((jsonObj.get("currency") != null && !jsonObj.get("currency").isJsonNull()) && !jsonObj.get("currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("validTransactionTypes") != null && !jsonObj.get("validTransactionTypes").isJsonNull() && !jsonObj.get("validTransactionTypes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `validTransactionTypes` to be an array in the JSON string but got `%s`", jsonObj.get("validTransactionTypes").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AccountMappingInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AccountMappingInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AccountMappingInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AccountMappingInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<AccountMappingInfo>() {
           @Override
           public void write(JsonWriter out, AccountMappingInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AccountMappingInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AccountMappingInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AccountMappingInfo
   * @throws IOException if the JSON string is invalid with respect to AccountMappingInfo
   */
  public static AccountMappingInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AccountMappingInfo.class);
  }

  /**
   * Convert an instance of AccountMappingInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

