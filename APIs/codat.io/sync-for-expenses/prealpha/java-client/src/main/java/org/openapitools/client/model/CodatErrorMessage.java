/*
 * Codat Expense API
 * The API for Sync for Expenses. Sync for Expenses is an API and a set of supporting tools. It has been built to enable corporate card and expense management platforms to provide high-quality integrations with multiple accounting platforms through a standardized API.  [Read more...](https://docs.codat.io/sync-for-expenses/overview)  [See our OpenAPI spec](https://github.com/codatio/oas)
 *
 * The version of the OpenAPI document: prealpha
 * Contact: expenses@codat.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.CodatErrorMessageValidation;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CodatErrorMessage
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:17:50.797364-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CodatErrorMessage {
  public static final String SERIALIZED_NAME_CAN_BE_RETRIED = "canBeRetried";
  @SerializedName(SERIALIZED_NAME_CAN_BE_RETRIED)
  private String canBeRetried;

  public static final String SERIALIZED_NAME_CORRELATION_ID = "correlationId";
  @SerializedName(SERIALIZED_NAME_CORRELATION_ID)
  private String correlationId;

  public static final String SERIALIZED_NAME_DETAILED_ERROR_CODE = "detailedErrorCode";
  @SerializedName(SERIALIZED_NAME_DETAILED_ERROR_CODE)
  private Integer detailedErrorCode;

  public static final String SERIALIZED_NAME_ERROR = "error";
  @SerializedName(SERIALIZED_NAME_ERROR)
  private String error;

  public static final String SERIALIZED_NAME_INNER = "inner";
  @SerializedName(SERIALIZED_NAME_INNER)
  private String inner;

  public static final String SERIALIZED_NAME_SERVICE = "service";
  @SerializedName(SERIALIZED_NAME_SERVICE)
  private String service;

  public static final String SERIALIZED_NAME_STATUS_CODE = "statusCode";
  @SerializedName(SERIALIZED_NAME_STATUS_CODE)
  private Integer statusCode;

  public static final String SERIALIZED_NAME_VALIDATION = "validation";
  @SerializedName(SERIALIZED_NAME_VALIDATION)
  private CodatErrorMessageValidation validation;

  public CodatErrorMessage() {
  }

  public CodatErrorMessage canBeRetried(String canBeRetried) {
    this.canBeRetried = canBeRetried;
    return this;
  }

  /**
   * Get canBeRetried
   * @return canBeRetried
   */
  @javax.annotation.Nullable
  public String getCanBeRetried() {
    return canBeRetried;
  }

  public void setCanBeRetried(String canBeRetried) {
    this.canBeRetried = canBeRetried;
  }


  public CodatErrorMessage correlationId(String correlationId) {
    this.correlationId = correlationId;
    return this;
  }

  /**
   * Get correlationId
   * @return correlationId
   */
  @javax.annotation.Nullable
  public String getCorrelationId() {
    return correlationId;
  }

  public void setCorrelationId(String correlationId) {
    this.correlationId = correlationId;
  }


  public CodatErrorMessage detailedErrorCode(Integer detailedErrorCode) {
    this.detailedErrorCode = detailedErrorCode;
    return this;
  }

  /**
   * Get detailedErrorCode
   * @return detailedErrorCode
   */
  @javax.annotation.Nullable
  public Integer getDetailedErrorCode() {
    return detailedErrorCode;
  }

  public void setDetailedErrorCode(Integer detailedErrorCode) {
    this.detailedErrorCode = detailedErrorCode;
  }


  public CodatErrorMessage error(String error) {
    this.error = error;
    return this;
  }

  /**
   * Get error
   * @return error
   */
  @javax.annotation.Nullable
  public String getError() {
    return error;
  }

  public void setError(String error) {
    this.error = error;
  }


  public CodatErrorMessage inner(String inner) {
    this.inner = inner;
    return this;
  }

  /**
   * Get inner
   * @return inner
   */
  @javax.annotation.Nullable
  public String getInner() {
    return inner;
  }

  public void setInner(String inner) {
    this.inner = inner;
  }


  public CodatErrorMessage service(String service) {
    this.service = service;
    return this;
  }

  /**
   * Get service
   * @return service
   */
  @javax.annotation.Nullable
  public String getService() {
    return service;
  }

  public void setService(String service) {
    this.service = service;
  }


  public CodatErrorMessage statusCode(Integer statusCode) {
    this.statusCode = statusCode;
    return this;
  }

  /**
   * Get statusCode
   * @return statusCode
   */
  @javax.annotation.Nullable
  public Integer getStatusCode() {
    return statusCode;
  }

  public void setStatusCode(Integer statusCode) {
    this.statusCode = statusCode;
  }


  public CodatErrorMessage validation(CodatErrorMessageValidation validation) {
    this.validation = validation;
    return this;
  }

  /**
   * Get validation
   * @return validation
   */
  @javax.annotation.Nullable
  public CodatErrorMessageValidation getValidation() {
    return validation;
  }

  public void setValidation(CodatErrorMessageValidation validation) {
    this.validation = validation;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CodatErrorMessage codatErrorMessage = (CodatErrorMessage) o;
    return Objects.equals(this.canBeRetried, codatErrorMessage.canBeRetried) &&
        Objects.equals(this.correlationId, codatErrorMessage.correlationId) &&
        Objects.equals(this.detailedErrorCode, codatErrorMessage.detailedErrorCode) &&
        Objects.equals(this.error, codatErrorMessage.error) &&
        Objects.equals(this.inner, codatErrorMessage.inner) &&
        Objects.equals(this.service, codatErrorMessage.service) &&
        Objects.equals(this.statusCode, codatErrorMessage.statusCode) &&
        Objects.equals(this.validation, codatErrorMessage.validation);
  }

  @Override
  public int hashCode() {
    return Objects.hash(canBeRetried, correlationId, detailedErrorCode, error, inner, service, statusCode, validation);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CodatErrorMessage {\n");
    sb.append("    canBeRetried: ").append(toIndentedString(canBeRetried)).append("\n");
    sb.append("    correlationId: ").append(toIndentedString(correlationId)).append("\n");
    sb.append("    detailedErrorCode: ").append(toIndentedString(detailedErrorCode)).append("\n");
    sb.append("    error: ").append(toIndentedString(error)).append("\n");
    sb.append("    inner: ").append(toIndentedString(inner)).append("\n");
    sb.append("    service: ").append(toIndentedString(service)).append("\n");
    sb.append("    statusCode: ").append(toIndentedString(statusCode)).append("\n");
    sb.append("    validation: ").append(toIndentedString(validation)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("canBeRetried");
    openapiFields.add("correlationId");
    openapiFields.add("detailedErrorCode");
    openapiFields.add("error");
    openapiFields.add("inner");
    openapiFields.add("service");
    openapiFields.add("statusCode");
    openapiFields.add("validation");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CodatErrorMessage
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CodatErrorMessage.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CodatErrorMessage is not found in the empty JSON string", CodatErrorMessage.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CodatErrorMessage.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CodatErrorMessage` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("canBeRetried") != null && !jsonObj.get("canBeRetried").isJsonNull()) && !jsonObj.get("canBeRetried").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `canBeRetried` to be a primitive type in the JSON string but got `%s`", jsonObj.get("canBeRetried").toString()));
      }
      if ((jsonObj.get("correlationId") != null && !jsonObj.get("correlationId").isJsonNull()) && !jsonObj.get("correlationId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `correlationId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("correlationId").toString()));
      }
      if ((jsonObj.get("error") != null && !jsonObj.get("error").isJsonNull()) && !jsonObj.get("error").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `error` to be a primitive type in the JSON string but got `%s`", jsonObj.get("error").toString()));
      }
      if ((jsonObj.get("inner") != null && !jsonObj.get("inner").isJsonNull()) && !jsonObj.get("inner").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `inner` to be a primitive type in the JSON string but got `%s`", jsonObj.get("inner").toString()));
      }
      if ((jsonObj.get("service") != null && !jsonObj.get("service").isJsonNull()) && !jsonObj.get("service").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `service` to be a primitive type in the JSON string but got `%s`", jsonObj.get("service").toString()));
      }
      // validate the optional field `validation`
      if (jsonObj.get("validation") != null && !jsonObj.get("validation").isJsonNull()) {
        CodatErrorMessageValidation.validateJsonElement(jsonObj.get("validation"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CodatErrorMessage.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CodatErrorMessage' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CodatErrorMessage> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CodatErrorMessage.class));

       return (TypeAdapter<T>) new TypeAdapter<CodatErrorMessage>() {
           @Override
           public void write(JsonWriter out, CodatErrorMessage value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CodatErrorMessage read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CodatErrorMessage given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CodatErrorMessage
   * @throws IOException if the JSON string is invalid with respect to CodatErrorMessage
   */
  public static CodatErrorMessage fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CodatErrorMessage.class);
  }

  /**
   * Convert an instance of CodatErrorMessage to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

