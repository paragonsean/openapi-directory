/*
 * Codat Expense API
 * The API for Sync for Expenses. Sync for Expenses is an API and a set of supporting tools. It has been built to enable corporate card and expense management platforms to provide high-quality integrations with multiple accounting platforms through a standardized API.  [Read more...](https://docs.codat.io/sync-for-expenses/overview)  [See our OpenAPI spec](https://github.com/codatio/oas)
 *
 * The version of the OpenAPI document: prealpha
 * Contact: expenses@codat.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.TransactionMetadata;
import org.openapitools.client.model.TransactionMetadataList;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TransactionStatusApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TransactionStatusApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TransactionStatusApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getSyncTransaction
     * @param companyId  (required)
     * @param syncId Unique identifier for a sync. (required)
     * @param transactionId The unique identifier for your SMB&#39;s transaction. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSyncTransactionCall(UUID companyId, UUID syncId, UUID transactionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/companies/{companyId}/sync/expenses/syncs/{syncId}/transactions/{transactionId}"
            .replace("{" + "companyId" + "}", localVarApiClient.escapeString(companyId.toString()))
            .replace("{" + "syncId" + "}", localVarApiClient.escapeString(syncId.toString()))
            .replace("{" + "transactionId" + "}", localVarApiClient.escapeString(transactionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSyncTransactionValidateBeforeCall(UUID companyId, UUID syncId, UUID transactionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling getSyncTransaction(Async)");
        }

        // verify the required parameter 'syncId' is set
        if (syncId == null) {
            throw new ApiException("Missing the required parameter 'syncId' when calling getSyncTransaction(Async)");
        }

        // verify the required parameter 'transactionId' is set
        if (transactionId == null) {
            throw new ApiException("Missing the required parameter 'transactionId' when calling getSyncTransaction(Async)");
        }

        return getSyncTransactionCall(companyId, syncId, transactionId, _callback);

    }

    /**
     * Get Sync Transaction
     * Gets the status of a transaction for a sync
     * @param companyId  (required)
     * @param syncId Unique identifier for a sync. (required)
     * @param transactionId The unique identifier for your SMB&#39;s transaction. (required)
     * @return List&lt;TransactionMetadata&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public List<TransactionMetadata> getSyncTransaction(UUID companyId, UUID syncId, UUID transactionId) throws ApiException {
        ApiResponse<List<TransactionMetadata>> localVarResp = getSyncTransactionWithHttpInfo(companyId, syncId, transactionId);
        return localVarResp.getData();
    }

    /**
     * Get Sync Transaction
     * Gets the status of a transaction for a sync
     * @param companyId  (required)
     * @param syncId Unique identifier for a sync. (required)
     * @param transactionId The unique identifier for your SMB&#39;s transaction. (required)
     * @return ApiResponse&lt;List&lt;TransactionMetadata&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<TransactionMetadata>> getSyncTransactionWithHttpInfo(UUID companyId, UUID syncId, UUID transactionId) throws ApiException {
        okhttp3.Call localVarCall = getSyncTransactionValidateBeforeCall(companyId, syncId, transactionId, null);
        Type localVarReturnType = new TypeToken<List<TransactionMetadata>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Sync Transaction (asynchronously)
     * Gets the status of a transaction for a sync
     * @param companyId  (required)
     * @param syncId Unique identifier for a sync. (required)
     * @param transactionId The unique identifier for your SMB&#39;s transaction. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSyncTransactionAsync(UUID companyId, UUID syncId, UUID transactionId, final ApiCallback<List<TransactionMetadata>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSyncTransactionValidateBeforeCall(companyId, syncId, transactionId, _callback);
        Type localVarReturnType = new TypeToken<List<TransactionMetadata>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listSyncTransactions
     * @param companyId  (required)
     * @param syncId Unique identifier for a sync. (required)
     * @param page Page number. [Read more](https://docs.codat.io/using-the-api/paging). (required)
     * @param pageSize Number of records to return in a page. [Read more](https://docs.codat.io/using-the-api/paging). (optional, default to 100)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listSyncTransactionsCall(UUID companyId, UUID syncId, Integer page, Integer pageSize, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/companies/{companyId}/sync/expenses/syncs/{syncId}/transactions"
            .replace("{" + "companyId" + "}", localVarApiClient.escapeString(companyId.toString()))
            .replace("{" + "syncId" + "}", localVarApiClient.escapeString(syncId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listSyncTransactionsValidateBeforeCall(UUID companyId, UUID syncId, Integer page, Integer pageSize, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling listSyncTransactions(Async)");
        }

        // verify the required parameter 'syncId' is set
        if (syncId == null) {
            throw new ApiException("Missing the required parameter 'syncId' when calling listSyncTransactions(Async)");
        }

        // verify the required parameter 'page' is set
        if (page == null) {
            throw new ApiException("Missing the required parameter 'page' when calling listSyncTransactions(Async)");
        }

        return listSyncTransactionsCall(companyId, syncId, page, pageSize, _callback);

    }

    /**
     * Get Sync transactions
     * Get&#39;s the transactions and status for a sync
     * @param companyId  (required)
     * @param syncId Unique identifier for a sync. (required)
     * @param page Page number. [Read more](https://docs.codat.io/using-the-api/paging). (required)
     * @param pageSize Number of records to return in a page. [Read more](https://docs.codat.io/using-the-api/paging). (optional, default to 100)
     * @return TransactionMetadataList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public TransactionMetadataList listSyncTransactions(UUID companyId, UUID syncId, Integer page, Integer pageSize) throws ApiException {
        ApiResponse<TransactionMetadataList> localVarResp = listSyncTransactionsWithHttpInfo(companyId, syncId, page, pageSize);
        return localVarResp.getData();
    }

    /**
     * Get Sync transactions
     * Get&#39;s the transactions and status for a sync
     * @param companyId  (required)
     * @param syncId Unique identifier for a sync. (required)
     * @param page Page number. [Read more](https://docs.codat.io/using-the-api/paging). (required)
     * @param pageSize Number of records to return in a page. [Read more](https://docs.codat.io/using-the-api/paging). (optional, default to 100)
     * @return ApiResponse&lt;TransactionMetadataList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TransactionMetadataList> listSyncTransactionsWithHttpInfo(UUID companyId, UUID syncId, Integer page, Integer pageSize) throws ApiException {
        okhttp3.Call localVarCall = listSyncTransactionsValidateBeforeCall(companyId, syncId, page, pageSize, null);
        Type localVarReturnType = new TypeToken<TransactionMetadataList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Sync transactions (asynchronously)
     * Get&#39;s the transactions and status for a sync
     * @param companyId  (required)
     * @param syncId Unique identifier for a sync. (required)
     * @param page Page number. [Read more](https://docs.codat.io/using-the-api/paging). (required)
     * @param pageSize Number of records to return in a page. [Read more](https://docs.codat.io/using-the-api/paging). (optional, default to 100)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listSyncTransactionsAsync(UUID companyId, UUID syncId, Integer page, Integer pageSize, final ApiCallback<TransactionMetadataList> _callback) throws ApiException {

        okhttp3.Call localVarCall = listSyncTransactionsValidateBeforeCall(companyId, syncId, page, pageSize, _callback);
        Type localVarReturnType = new TypeToken<TransactionMetadataList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
