/*
 * Codat Expense API
 * The API for Sync for Expenses. Sync for Expenses is an API and a set of supporting tools. It has been built to enable corporate card and expense management platforms to provide high-quality integrations with multiple accounting platforms through a standardized API.  [Read more...](https://docs.codat.io/sync-for-expenses/overview)  [See our OpenAPI spec](https://github.com/codatio/oas)
 *
 * The version of the OpenAPI document: prealpha
 * Contact: expenses@codat.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CodatErrorMessageValidationErrorsInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CodatErrorMessageValidation
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:17:50.797364-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CodatErrorMessageValidation {
  public static final String SERIALIZED_NAME_ERRORS = "errors";
  @SerializedName(SERIALIZED_NAME_ERRORS)
  private List<CodatErrorMessageValidationErrorsInner> errors = new ArrayList<>();

  public static final String SERIALIZED_NAME_HAS_ERRORS = "hasErrors";
  @SerializedName(SERIALIZED_NAME_HAS_ERRORS)
  private Boolean hasErrors;

  public static final String SERIALIZED_NAME_HAS_INTERNALS = "hasInternals";
  @SerializedName(SERIALIZED_NAME_HAS_INTERNALS)
  private Boolean hasInternals;

  public static final String SERIALIZED_NAME_HAS_WARNINGS = "hasWarnings";
  @SerializedName(SERIALIZED_NAME_HAS_WARNINGS)
  private Boolean hasWarnings;

  public static final String SERIALIZED_NAME_INTERNALS = "internals";
  @SerializedName(SERIALIZED_NAME_INTERNALS)
  private List<CodatErrorMessageValidationErrorsInner> internals = new ArrayList<>();

  public static final String SERIALIZED_NAME_WARNINGS = "warnings";
  @SerializedName(SERIALIZED_NAME_WARNINGS)
  private List<CodatErrorMessageValidationErrorsInner> warnings = new ArrayList<>();

  public CodatErrorMessageValidation() {
  }

  public CodatErrorMessageValidation errors(List<CodatErrorMessageValidationErrorsInner> errors) {
    this.errors = errors;
    return this;
  }

  public CodatErrorMessageValidation addErrorsItem(CodatErrorMessageValidationErrorsInner errorsItem) {
    if (this.errors == null) {
      this.errors = new ArrayList<>();
    }
    this.errors.add(errorsItem);
    return this;
  }

  /**
   * Get errors
   * @return errors
   */
  @javax.annotation.Nullable
  public List<CodatErrorMessageValidationErrorsInner> getErrors() {
    return errors;
  }

  public void setErrors(List<CodatErrorMessageValidationErrorsInner> errors) {
    this.errors = errors;
  }


  public CodatErrorMessageValidation hasErrors(Boolean hasErrors) {
    this.hasErrors = hasErrors;
    return this;
  }

  /**
   * Get hasErrors
   * @return hasErrors
   */
  @javax.annotation.Nullable
  public Boolean getHasErrors() {
    return hasErrors;
  }

  public void setHasErrors(Boolean hasErrors) {
    this.hasErrors = hasErrors;
  }


  public CodatErrorMessageValidation hasInternals(Boolean hasInternals) {
    this.hasInternals = hasInternals;
    return this;
  }

  /**
   * Get hasInternals
   * @return hasInternals
   */
  @javax.annotation.Nullable
  public Boolean getHasInternals() {
    return hasInternals;
  }

  public void setHasInternals(Boolean hasInternals) {
    this.hasInternals = hasInternals;
  }


  public CodatErrorMessageValidation hasWarnings(Boolean hasWarnings) {
    this.hasWarnings = hasWarnings;
    return this;
  }

  /**
   * Get hasWarnings
   * @return hasWarnings
   */
  @javax.annotation.Nullable
  public Boolean getHasWarnings() {
    return hasWarnings;
  }

  public void setHasWarnings(Boolean hasWarnings) {
    this.hasWarnings = hasWarnings;
  }


  public CodatErrorMessageValidation internals(List<CodatErrorMessageValidationErrorsInner> internals) {
    this.internals = internals;
    return this;
  }

  public CodatErrorMessageValidation addInternalsItem(CodatErrorMessageValidationErrorsInner internalsItem) {
    if (this.internals == null) {
      this.internals = new ArrayList<>();
    }
    this.internals.add(internalsItem);
    return this;
  }

  /**
   * Get internals
   * @return internals
   */
  @javax.annotation.Nullable
  public List<CodatErrorMessageValidationErrorsInner> getInternals() {
    return internals;
  }

  public void setInternals(List<CodatErrorMessageValidationErrorsInner> internals) {
    this.internals = internals;
  }


  public CodatErrorMessageValidation warnings(List<CodatErrorMessageValidationErrorsInner> warnings) {
    this.warnings = warnings;
    return this;
  }

  public CodatErrorMessageValidation addWarningsItem(CodatErrorMessageValidationErrorsInner warningsItem) {
    if (this.warnings == null) {
      this.warnings = new ArrayList<>();
    }
    this.warnings.add(warningsItem);
    return this;
  }

  /**
   * Get warnings
   * @return warnings
   */
  @javax.annotation.Nullable
  public List<CodatErrorMessageValidationErrorsInner> getWarnings() {
    return warnings;
  }

  public void setWarnings(List<CodatErrorMessageValidationErrorsInner> warnings) {
    this.warnings = warnings;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CodatErrorMessageValidation codatErrorMessageValidation = (CodatErrorMessageValidation) o;
    return Objects.equals(this.errors, codatErrorMessageValidation.errors) &&
        Objects.equals(this.hasErrors, codatErrorMessageValidation.hasErrors) &&
        Objects.equals(this.hasInternals, codatErrorMessageValidation.hasInternals) &&
        Objects.equals(this.hasWarnings, codatErrorMessageValidation.hasWarnings) &&
        Objects.equals(this.internals, codatErrorMessageValidation.internals) &&
        Objects.equals(this.warnings, codatErrorMessageValidation.warnings);
  }

  @Override
  public int hashCode() {
    return Objects.hash(errors, hasErrors, hasInternals, hasWarnings, internals, warnings);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CodatErrorMessageValidation {\n");
    sb.append("    errors: ").append(toIndentedString(errors)).append("\n");
    sb.append("    hasErrors: ").append(toIndentedString(hasErrors)).append("\n");
    sb.append("    hasInternals: ").append(toIndentedString(hasInternals)).append("\n");
    sb.append("    hasWarnings: ").append(toIndentedString(hasWarnings)).append("\n");
    sb.append("    internals: ").append(toIndentedString(internals)).append("\n");
    sb.append("    warnings: ").append(toIndentedString(warnings)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("errors");
    openapiFields.add("hasErrors");
    openapiFields.add("hasInternals");
    openapiFields.add("hasWarnings");
    openapiFields.add("internals");
    openapiFields.add("warnings");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CodatErrorMessageValidation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CodatErrorMessageValidation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CodatErrorMessageValidation is not found in the empty JSON string", CodatErrorMessageValidation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CodatErrorMessageValidation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CodatErrorMessageValidation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("errors") != null && !jsonObj.get("errors").isJsonNull()) {
        JsonArray jsonArrayerrors = jsonObj.getAsJsonArray("errors");
        if (jsonArrayerrors != null) {
          // ensure the json data is an array
          if (!jsonObj.get("errors").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `errors` to be an array in the JSON string but got `%s`", jsonObj.get("errors").toString()));
          }

          // validate the optional field `errors` (array)
          for (int i = 0; i < jsonArrayerrors.size(); i++) {
            CodatErrorMessageValidationErrorsInner.validateJsonElement(jsonArrayerrors.get(i));
          };
        }
      }
      if (jsonObj.get("internals") != null && !jsonObj.get("internals").isJsonNull()) {
        JsonArray jsonArrayinternals = jsonObj.getAsJsonArray("internals");
        if (jsonArrayinternals != null) {
          // ensure the json data is an array
          if (!jsonObj.get("internals").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `internals` to be an array in the JSON string but got `%s`", jsonObj.get("internals").toString()));
          }

          // validate the optional field `internals` (array)
          for (int i = 0; i < jsonArrayinternals.size(); i++) {
            CodatErrorMessageValidationErrorsInner.validateJsonElement(jsonArrayinternals.get(i));
          };
        }
      }
      if (jsonObj.get("warnings") != null && !jsonObj.get("warnings").isJsonNull()) {
        JsonArray jsonArraywarnings = jsonObj.getAsJsonArray("warnings");
        if (jsonArraywarnings != null) {
          // ensure the json data is an array
          if (!jsonObj.get("warnings").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `warnings` to be an array in the JSON string but got `%s`", jsonObj.get("warnings").toString()));
          }

          // validate the optional field `warnings` (array)
          for (int i = 0; i < jsonArraywarnings.size(); i++) {
            CodatErrorMessageValidationErrorsInner.validateJsonElement(jsonArraywarnings.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CodatErrorMessageValidation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CodatErrorMessageValidation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CodatErrorMessageValidation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CodatErrorMessageValidation.class));

       return (TypeAdapter<T>) new TypeAdapter<CodatErrorMessageValidation>() {
           @Override
           public void write(JsonWriter out, CodatErrorMessageValidation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CodatErrorMessageValidation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CodatErrorMessageValidation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CodatErrorMessageValidation
   * @throws IOException if the JSON string is invalid with respect to CodatErrorMessageValidation
   */
  public static CodatErrorMessageValidation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CodatErrorMessageValidation.class);
  }

  /**
   * Convert an instance of CodatErrorMessageValidation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

