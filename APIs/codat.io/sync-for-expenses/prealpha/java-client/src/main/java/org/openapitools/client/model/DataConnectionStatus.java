/*
 * Codat Expense API
 * The API for Sync for Expenses. Sync for Expenses is an API and a set of supporting tools. It has been built to enable corporate card and expense management platforms to provide high-quality integrations with multiple accounting platforms through a standardized API.  [Read more...](https://docs.codat.io/sync-for-expenses/overview)  [See our OpenAPI spec](https://github.com/codatio/oas)
 *
 * The version of the OpenAPI document: prealpha
 * Contact: expenses@codat.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.JsonElement;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * The current authorization status of the data connection.
 */
@JsonAdapter(DataConnectionStatus.Adapter.class)
public enum DataConnectionStatus {
  
  PENDING_AUTH("PendingAuth"),
  
  LINKED("Linked"),
  
  UNLINKED("Unlinked"),
  
  DEAUTHORIZED("Deauthorized");

  private String value;

  DataConnectionStatus(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static DataConnectionStatus fromValue(String value) {
    for (DataConnectionStatus b : DataConnectionStatus.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<DataConnectionStatus> {
    @Override
    public void write(final JsonWriter jsonWriter, final DataConnectionStatus enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public DataConnectionStatus read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return DataConnectionStatus.fromValue(value);
    }
  }

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    String value = jsonElement.getAsString();
    DataConnectionStatus.fromValue(value);
  }
}

