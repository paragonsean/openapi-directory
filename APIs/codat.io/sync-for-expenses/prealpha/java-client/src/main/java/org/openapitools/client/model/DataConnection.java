/*
 * Codat Expense API
 * The API for Sync for Expenses. Sync for Expenses is an API and a set of supporting tools. It has been built to enable corporate card and expense management platforms to provide high-quality integrations with multiple accounting platforms through a standardized API.  [Read more...](https://docs.codat.io/sync-for-expenses/overview)  [See our OpenAPI spec](https://github.com/codatio/oas)
 *
 * The version of the OpenAPI document: prealpha
 * Contact: expenses@codat.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.net.URI;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;
import org.openapitools.client.model.DataConnectionError;
import org.openapitools.client.model.DataConnectionStatus;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A connection represents the link between a &#x60;company&#x60; and a source of data.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:17:50.797364-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DataConnection {
  public static final String SERIALIZED_NAME_ADDITIONAL_PROPERTIES = "additionalProperties";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_PROPERTIES)
  private Object additionalProperties = null;

  public static final String SERIALIZED_NAME_CONNECTION_INFO = "connectionInfo";
  @SerializedName(SERIALIZED_NAME_CONNECTION_INFO)
  private Map<String, String> connectionInfo = new HashMap<>();

  public static final String SERIALIZED_NAME_CREATED = "created";
  @SerializedName(SERIALIZED_NAME_CREATED)
  private String created;

  public static final String SERIALIZED_NAME_DATA_CONNECTION_ERRORS = "dataConnectionErrors";
  @SerializedName(SERIALIZED_NAME_DATA_CONNECTION_ERRORS)
  private List<DataConnectionError> dataConnectionErrors = new ArrayList<>();

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private UUID id;

  public static final String SERIALIZED_NAME_INTEGRATION_ID = "integrationId";
  @SerializedName(SERIALIZED_NAME_INTEGRATION_ID)
  private UUID integrationId;

  public static final String SERIALIZED_NAME_INTEGRATION_KEY = "integrationKey";
  @SerializedName(SERIALIZED_NAME_INTEGRATION_KEY)
  private String integrationKey;

  public static final String SERIALIZED_NAME_LAST_SYNC = "lastSync";
  @SerializedName(SERIALIZED_NAME_LAST_SYNC)
  private String lastSync;

  public static final String SERIALIZED_NAME_LINK_URL = "linkUrl";
  @SerializedName(SERIALIZED_NAME_LINK_URL)
  private URI linkUrl;

  public static final String SERIALIZED_NAME_PLATFORM_NAME = "platformName";
  @SerializedName(SERIALIZED_NAME_PLATFORM_NAME)
  private String platformName;

  public static final String SERIALIZED_NAME_SOURCE_ID = "sourceId";
  @SerializedName(SERIALIZED_NAME_SOURCE_ID)
  private UUID sourceId;

  /**
   * The type of platform of the connection.
   */
  @JsonAdapter(SourceTypeEnum.Adapter.class)
  public enum SourceTypeEnum {
    ACCOUNTING("Accounting"),
    
    BANKING("Banking"),
    
    COMMERCE("Commerce"),
    
    OTHER("Other"),
    
    UNKNOWN("Unknown");

    private String value;

    SourceTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SourceTypeEnum fromValue(String value) {
      for (SourceTypeEnum b : SourceTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SourceTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SourceTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SourceTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SourceTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SourceTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SOURCE_TYPE = "sourceType";
  @SerializedName(SERIALIZED_NAME_SOURCE_TYPE)
  private SourceTypeEnum sourceType;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private DataConnectionStatus status;

  public DataConnection() {
  }

  public DataConnection additionalProperties(Object additionalProperties) {
    this.additionalProperties = additionalProperties;
    return this;
  }

  /**
   * Get additionalProperties
   * @return additionalProperties
   */
  @javax.annotation.Nullable
  public Object getAdditionalProperties() {
    return additionalProperties;
  }

  public void setAdditionalProperties(Object additionalProperties) {
    this.additionalProperties = additionalProperties;
  }


  public DataConnection connectionInfo(Map<String, String> connectionInfo) {
    this.connectionInfo = connectionInfo;
    return this;
  }

  public DataConnection putConnectionInfoItem(String key, String connectionInfoItem) {
    if (this.connectionInfo == null) {
      this.connectionInfo = new HashMap<>();
    }
    this.connectionInfo.put(key, connectionInfoItem);
    return this;
  }

  /**
   * Get connectionInfo
   * @return connectionInfo
   */
  @javax.annotation.Nullable
  public Map<String, String> getConnectionInfo() {
    return connectionInfo;
  }

  public void setConnectionInfo(Map<String, String> connectionInfo) {
    this.connectionInfo = connectionInfo;
  }


  public DataConnection created(String created) {
    this.created = created;
    return this;
  }

  /**
   * In Codat&#39;s data model, dates and times are represented using the &lt;a class&#x3D;\&quot;external\&quot; href&#x3D;\&quot;https://en.wikipedia.org/wiki/ISO_8601\&quot; target&#x3D;\&quot;_blank\&quot;&gt;ISO 8601 standard&lt;/a&gt;. Date and time fields are formatted as strings; for example:  &#x60;&#x60;&#x60; 2020-10-08T22:40:50Z 2021-01-01T00:00:00 &#x60;&#x60;&#x60;    When syncing data that contains &#x60;DateTime&#x60; fields from Codat, make sure you support the following cases when reading time information:  - Coordinated Universal Time (UTC): &#x60;2021-11-15T06:00:00Z&#x60; - Unqualified local time: &#x60;2021-11-15T01:00:00&#x60; - UTC time offsets: &#x60;2021-11-15T01:00:00-05:00&#x60;  &gt; Time zones &gt;  &gt; Not all dates from Codat will contain information about time zones.   &gt; Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
   * @return created
   */
  @javax.annotation.Nonnull
  public String getCreated() {
    return created;
  }

  public void setCreated(String created) {
    this.created = created;
  }


  public DataConnection dataConnectionErrors(List<DataConnectionError> dataConnectionErrors) {
    this.dataConnectionErrors = dataConnectionErrors;
    return this;
  }

  public DataConnection addDataConnectionErrorsItem(DataConnectionError dataConnectionErrorsItem) {
    if (this.dataConnectionErrors == null) {
      this.dataConnectionErrors = new ArrayList<>();
    }
    this.dataConnectionErrors.add(dataConnectionErrorsItem);
    return this;
  }

  /**
   * Get dataConnectionErrors
   * @return dataConnectionErrors
   */
  @javax.annotation.Nullable
  public List<DataConnectionError> getDataConnectionErrors() {
    return dataConnectionErrors;
  }

  public void setDataConnectionErrors(List<DataConnectionError> dataConnectionErrors) {
    this.dataConnectionErrors = dataConnectionErrors;
  }


  public DataConnection id(UUID id) {
    this.id = id;
    return this;
  }

  /**
   * Unique identifier for a company&#39;s data connection.
   * @return id
   */
  @javax.annotation.Nonnull
  public UUID getId() {
    return id;
  }

  public void setId(UUID id) {
    this.id = id;
  }


  public DataConnection integrationId(UUID integrationId) {
    this.integrationId = integrationId;
    return this;
  }

  /**
   * A Codat ID representing the integration.
   * @return integrationId
   */
  @javax.annotation.Nonnull
  public UUID getIntegrationId() {
    return integrationId;
  }

  public void setIntegrationId(UUID integrationId) {
    this.integrationId = integrationId;
  }


  public DataConnection integrationKey(String integrationKey) {
    this.integrationKey = integrationKey;
    return this;
  }

  /**
   * A unique four-character ID that identifies the platform of the company&#39;s data connection. This ensures continuity if the platform changes its name in the future.
   * @return integrationKey
   */
  @javax.annotation.Nonnull
  public String getIntegrationKey() {
    return integrationKey;
  }

  public void setIntegrationKey(String integrationKey) {
    this.integrationKey = integrationKey;
  }


  public DataConnection lastSync(String lastSync) {
    this.lastSync = lastSync;
    return this;
  }

  /**
   * In Codat&#39;s data model, dates and times are represented using the &lt;a class&#x3D;\&quot;external\&quot; href&#x3D;\&quot;https://en.wikipedia.org/wiki/ISO_8601\&quot; target&#x3D;\&quot;_blank\&quot;&gt;ISO 8601 standard&lt;/a&gt;. Date and time fields are formatted as strings; for example:  &#x60;&#x60;&#x60; 2020-10-08T22:40:50Z 2021-01-01T00:00:00 &#x60;&#x60;&#x60;    When syncing data that contains &#x60;DateTime&#x60; fields from Codat, make sure you support the following cases when reading time information:  - Coordinated Universal Time (UTC): &#x60;2021-11-15T06:00:00Z&#x60; - Unqualified local time: &#x60;2021-11-15T01:00:00&#x60; - UTC time offsets: &#x60;2021-11-15T01:00:00-05:00&#x60;  &gt; Time zones &gt;  &gt; Not all dates from Codat will contain information about time zones.   &gt; Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
   * @return lastSync
   */
  @javax.annotation.Nullable
  public String getLastSync() {
    return lastSync;
  }

  public void setLastSync(String lastSync) {
    this.lastSync = lastSync;
  }


  public DataConnection linkUrl(URI linkUrl) {
    this.linkUrl = linkUrl;
    return this;
  }

  /**
   * Get linkUrl
   * @return linkUrl
   */
  @javax.annotation.Nonnull
  public URI getLinkUrl() {
    return linkUrl;
  }

  public void setLinkUrl(URI linkUrl) {
    this.linkUrl = linkUrl;
  }


  public DataConnection platformName(String platformName) {
    this.platformName = platformName;
    return this;
  }

  /**
   * Get platformName
   * @return platformName
   */
  @javax.annotation.Nonnull
  public String getPlatformName() {
    return platformName;
  }

  public void setPlatformName(String platformName) {
    this.platformName = platformName;
  }


  public DataConnection sourceId(UUID sourceId) {
    this.sourceId = sourceId;
    return this;
  }

  /**
   * A source-specific ID used to distinguish between different sources originating from the same data connection. In general, a data connection is a single data source. However, for TrueLayer, &#x60;sourceId&#x60; is associated with a specific bank and has a many-to-one relationship with the &#x60;integrationId&#x60;.
   * @return sourceId
   */
  @javax.annotation.Nonnull
  public UUID getSourceId() {
    return sourceId;
  }

  public void setSourceId(UUID sourceId) {
    this.sourceId = sourceId;
  }


  public DataConnection sourceType(SourceTypeEnum sourceType) {
    this.sourceType = sourceType;
    return this;
  }

  /**
   * The type of platform of the connection.
   * @return sourceType
   */
  @javax.annotation.Nonnull
  public SourceTypeEnum getSourceType() {
    return sourceType;
  }

  public void setSourceType(SourceTypeEnum sourceType) {
    this.sourceType = sourceType;
  }


  public DataConnection status(DataConnectionStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nonnull
  public DataConnectionStatus getStatus() {
    return status;
  }

  public void setStatus(DataConnectionStatus status) {
    this.status = status;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DataConnection dataConnection = (DataConnection) o;
    return Objects.equals(this.additionalProperties, dataConnection.additionalProperties) &&
        Objects.equals(this.connectionInfo, dataConnection.connectionInfo) &&
        Objects.equals(this.created, dataConnection.created) &&
        Objects.equals(this.dataConnectionErrors, dataConnection.dataConnectionErrors) &&
        Objects.equals(this.id, dataConnection.id) &&
        Objects.equals(this.integrationId, dataConnection.integrationId) &&
        Objects.equals(this.integrationKey, dataConnection.integrationKey) &&
        Objects.equals(this.lastSync, dataConnection.lastSync) &&
        Objects.equals(this.linkUrl, dataConnection.linkUrl) &&
        Objects.equals(this.platformName, dataConnection.platformName) &&
        Objects.equals(this.sourceId, dataConnection.sourceId) &&
        Objects.equals(this.sourceType, dataConnection.sourceType) &&
        Objects.equals(this.status, dataConnection.status);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(additionalProperties, connectionInfo, created, dataConnectionErrors, id, integrationId, integrationKey, lastSync, linkUrl, platformName, sourceId, sourceType, status);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DataConnection {\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("    connectionInfo: ").append(toIndentedString(connectionInfo)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    dataConnectionErrors: ").append(toIndentedString(dataConnectionErrors)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    integrationId: ").append(toIndentedString(integrationId)).append("\n");
    sb.append("    integrationKey: ").append(toIndentedString(integrationKey)).append("\n");
    sb.append("    lastSync: ").append(toIndentedString(lastSync)).append("\n");
    sb.append("    linkUrl: ").append(toIndentedString(linkUrl)).append("\n");
    sb.append("    platformName: ").append(toIndentedString(platformName)).append("\n");
    sb.append("    sourceId: ").append(toIndentedString(sourceId)).append("\n");
    sb.append("    sourceType: ").append(toIndentedString(sourceType)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("additionalProperties");
    openapiFields.add("connectionInfo");
    openapiFields.add("created");
    openapiFields.add("dataConnectionErrors");
    openapiFields.add("id");
    openapiFields.add("integrationId");
    openapiFields.add("integrationKey");
    openapiFields.add("lastSync");
    openapiFields.add("linkUrl");
    openapiFields.add("platformName");
    openapiFields.add("sourceId");
    openapiFields.add("sourceType");
    openapiFields.add("status");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("created");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("integrationId");
    openapiRequiredFields.add("integrationKey");
    openapiRequiredFields.add("linkUrl");
    openapiRequiredFields.add("platformName");
    openapiRequiredFields.add("sourceId");
    openapiRequiredFields.add("sourceType");
    openapiRequiredFields.add("status");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DataConnection
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DataConnection.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DataConnection is not found in the empty JSON string", DataConnection.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DataConnection.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DataConnection` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DataConnection.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("created").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `created` to be a primitive type in the JSON string but got `%s`", jsonObj.get("created").toString()));
      }
      if (jsonObj.get("dataConnectionErrors") != null && !jsonObj.get("dataConnectionErrors").isJsonNull()) {
        JsonArray jsonArraydataConnectionErrors = jsonObj.getAsJsonArray("dataConnectionErrors");
        if (jsonArraydataConnectionErrors != null) {
          // ensure the json data is an array
          if (!jsonObj.get("dataConnectionErrors").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `dataConnectionErrors` to be an array in the JSON string but got `%s`", jsonObj.get("dataConnectionErrors").toString()));
          }

          // validate the optional field `dataConnectionErrors` (array)
          for (int i = 0; i < jsonArraydataConnectionErrors.size(); i++) {
            DataConnectionError.validateJsonElement(jsonArraydataConnectionErrors.get(i));
          };
        }
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("integrationId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `integrationId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("integrationId").toString()));
      }
      if (!jsonObj.get("integrationKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `integrationKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("integrationKey").toString()));
      }
      if ((jsonObj.get("lastSync") != null && !jsonObj.get("lastSync").isJsonNull()) && !jsonObj.get("lastSync").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastSync` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastSync").toString()));
      }
      if (!jsonObj.get("linkUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `linkUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("linkUrl").toString()));
      }
      if (!jsonObj.get("platformName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `platformName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("platformName").toString()));
      }
      if (!jsonObj.get("sourceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sourceId").toString()));
      }
      if (!jsonObj.get("sourceType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourceType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sourceType").toString()));
      }
      // validate the required field `sourceType`
      SourceTypeEnum.validateJsonElement(jsonObj.get("sourceType"));
      // validate the required field `status`
      DataConnectionStatus.validateJsonElement(jsonObj.get("status"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DataConnection.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DataConnection' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DataConnection> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DataConnection.class));

       return (TypeAdapter<T>) new TypeAdapter<DataConnection>() {
           @Override
           public void write(JsonWriter out, DataConnection value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DataConnection read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DataConnection given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DataConnection
   * @throws IOException if the JSON string is invalid with respect to DataConnection
   */
  public static DataConnection fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DataConnection.class);
  }

  /**
   * Convert an instance of DataConnection to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

