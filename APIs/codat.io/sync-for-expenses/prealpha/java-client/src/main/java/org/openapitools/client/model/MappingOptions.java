/*
 * Codat Expense API
 * The API for Sync for Expenses. Sync for Expenses is an API and a set of supporting tools. It has been built to enable corporate card and expense management platforms to provide high-quality integrations with multiple accounting platforms through a standardized API.  [Read more...](https://docs.codat.io/sync-for-expenses/overview)  [See our OpenAPI spec](https://github.com/codatio/oas)
 *
 * The version of the OpenAPI document: prealpha
 * Contact: expenses@codat.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AccountMappingInfo;
import org.openapitools.client.model.TaxRateMappingInfo;
import org.openapitools.client.model.TrackingCategoryMappingInfo;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * MappingOptions
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:17:50.797364-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MappingOptions {
  public static final String SERIALIZED_NAME_ACCOUNTS = "accounts";
  @SerializedName(SERIALIZED_NAME_ACCOUNTS)
  private List<AccountMappingInfo> accounts = new ArrayList<>();

  public static final String SERIALIZED_NAME_EXPENSE_PROVIDER = "expenseProvider";
  @SerializedName(SERIALIZED_NAME_EXPENSE_PROVIDER)
  private String expenseProvider;

  public static final String SERIALIZED_NAME_TAX_RATES = "taxRates";
  @SerializedName(SERIALIZED_NAME_TAX_RATES)
  private List<TaxRateMappingInfo> taxRates = new ArrayList<>();

  public static final String SERIALIZED_NAME_TRACKING_CATEGORIES = "trackingCategories";
  @SerializedName(SERIALIZED_NAME_TRACKING_CATEGORIES)
  private List<TrackingCategoryMappingInfo> trackingCategories = new ArrayList<>();

  public MappingOptions() {
  }

  public MappingOptions accounts(List<AccountMappingInfo> accounts) {
    this.accounts = accounts;
    return this;
  }

  public MappingOptions addAccountsItem(AccountMappingInfo accountsItem) {
    if (this.accounts == null) {
      this.accounts = new ArrayList<>();
    }
    this.accounts.add(accountsItem);
    return this;
  }

  /**
   * Array of available accounts for mapping.
   * @return accounts
   */
  @javax.annotation.Nullable
  public List<AccountMappingInfo> getAccounts() {
    return accounts;
  }

  public void setAccounts(List<AccountMappingInfo> accounts) {
    this.accounts = accounts;
  }


  public MappingOptions expenseProvider(String expenseProvider) {
    this.expenseProvider = expenseProvider;
    return this;
  }

  /**
   * Name of the expense integration.
   * @return expenseProvider
   */
  @javax.annotation.Nullable
  public String getExpenseProvider() {
    return expenseProvider;
  }

  public void setExpenseProvider(String expenseProvider) {
    this.expenseProvider = expenseProvider;
  }


  public MappingOptions taxRates(List<TaxRateMappingInfo> taxRates) {
    this.taxRates = taxRates;
    return this;
  }

  public MappingOptions addTaxRatesItem(TaxRateMappingInfo taxRatesItem) {
    if (this.taxRates == null) {
      this.taxRates = new ArrayList<>();
    }
    this.taxRates.add(taxRatesItem);
    return this;
  }

  /**
   * Array of available tax rates for mapping.
   * @return taxRates
   */
  @javax.annotation.Nullable
  public List<TaxRateMappingInfo> getTaxRates() {
    return taxRates;
  }

  public void setTaxRates(List<TaxRateMappingInfo> taxRates) {
    this.taxRates = taxRates;
  }


  public MappingOptions trackingCategories(List<TrackingCategoryMappingInfo> trackingCategories) {
    this.trackingCategories = trackingCategories;
    return this;
  }

  public MappingOptions addTrackingCategoriesItem(TrackingCategoryMappingInfo trackingCategoriesItem) {
    if (this.trackingCategories == null) {
      this.trackingCategories = new ArrayList<>();
    }
    this.trackingCategories.add(trackingCategoriesItem);
    return this;
  }

  /**
   * Array of available tracking categories for mapping.
   * @return trackingCategories
   */
  @javax.annotation.Nullable
  public List<TrackingCategoryMappingInfo> getTrackingCategories() {
    return trackingCategories;
  }

  public void setTrackingCategories(List<TrackingCategoryMappingInfo> trackingCategories) {
    this.trackingCategories = trackingCategories;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MappingOptions mappingOptions = (MappingOptions) o;
    return Objects.equals(this.accounts, mappingOptions.accounts) &&
        Objects.equals(this.expenseProvider, mappingOptions.expenseProvider) &&
        Objects.equals(this.taxRates, mappingOptions.taxRates) &&
        Objects.equals(this.trackingCategories, mappingOptions.trackingCategories);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accounts, expenseProvider, taxRates, trackingCategories);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MappingOptions {\n");
    sb.append("    accounts: ").append(toIndentedString(accounts)).append("\n");
    sb.append("    expenseProvider: ").append(toIndentedString(expenseProvider)).append("\n");
    sb.append("    taxRates: ").append(toIndentedString(taxRates)).append("\n");
    sb.append("    trackingCategories: ").append(toIndentedString(trackingCategories)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accounts");
    openapiFields.add("expenseProvider");
    openapiFields.add("taxRates");
    openapiFields.add("trackingCategories");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MappingOptions
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MappingOptions.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MappingOptions is not found in the empty JSON string", MappingOptions.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MappingOptions.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MappingOptions` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("accounts") != null && !jsonObj.get("accounts").isJsonNull()) {
        JsonArray jsonArrayaccounts = jsonObj.getAsJsonArray("accounts");
        if (jsonArrayaccounts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("accounts").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `accounts` to be an array in the JSON string but got `%s`", jsonObj.get("accounts").toString()));
          }

          // validate the optional field `accounts` (array)
          for (int i = 0; i < jsonArrayaccounts.size(); i++) {
            AccountMappingInfo.validateJsonElement(jsonArrayaccounts.get(i));
          };
        }
      }
      if ((jsonObj.get("expenseProvider") != null && !jsonObj.get("expenseProvider").isJsonNull()) && !jsonObj.get("expenseProvider").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expenseProvider` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expenseProvider").toString()));
      }
      if (jsonObj.get("taxRates") != null && !jsonObj.get("taxRates").isJsonNull()) {
        JsonArray jsonArraytaxRates = jsonObj.getAsJsonArray("taxRates");
        if (jsonArraytaxRates != null) {
          // ensure the json data is an array
          if (!jsonObj.get("taxRates").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `taxRates` to be an array in the JSON string but got `%s`", jsonObj.get("taxRates").toString()));
          }

          // validate the optional field `taxRates` (array)
          for (int i = 0; i < jsonArraytaxRates.size(); i++) {
            TaxRateMappingInfo.validateJsonElement(jsonArraytaxRates.get(i));
          };
        }
      }
      if (jsonObj.get("trackingCategories") != null && !jsonObj.get("trackingCategories").isJsonNull()) {
        JsonArray jsonArraytrackingCategories = jsonObj.getAsJsonArray("trackingCategories");
        if (jsonArraytrackingCategories != null) {
          // ensure the json data is an array
          if (!jsonObj.get("trackingCategories").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `trackingCategories` to be an array in the JSON string but got `%s`", jsonObj.get("trackingCategories").toString()));
          }

          // validate the optional field `trackingCategories` (array)
          for (int i = 0; i < jsonArraytrackingCategories.size(); i++) {
            TrackingCategoryMappingInfo.validateJsonElement(jsonArraytrackingCategories.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MappingOptions.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MappingOptions' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MappingOptions> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MappingOptions.class));

       return (TypeAdapter<T>) new TypeAdapter<MappingOptions>() {
           @Override
           public void write(JsonWriter out, MappingOptions value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MappingOptions read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MappingOptions given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MappingOptions
   * @throws IOException if the JSON string is invalid with respect to MappingOptions
   */
  public static MappingOptions fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MappingOptions.class);
  }

  /**
   * Convert an instance of MappingOptions to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

