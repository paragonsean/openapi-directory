/*
 * Codat Expense API
 * The API for Sync for Expenses. Sync for Expenses is an API and a set of supporting tools. It has been built to enable corporate card and expense management platforms to provide high-quality integrations with multiple accounting platforms through a standardized API.  [Read more...](https://docs.codat.io/sync-for-expenses/overview)  [See our OpenAPI spec](https://github.com/codatio/oas)
 *
 * The version of the OpenAPI document: prealpha
 * Contact: expenses@codat.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CompanySyncStatus
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:17:50.797364-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CompanySyncStatus {
  public static final String SERIALIZED_NAME_COMPANY_ID = "companyId";
  @SerializedName(SERIALIZED_NAME_COMPANY_ID)
  private String companyId;

  public static final String SERIALIZED_NAME_DATA_PUSHED = "dataPushed";
  @SerializedName(SERIALIZED_NAME_DATA_PUSHED)
  private Boolean dataPushed;

  public static final String SERIALIZED_NAME_ERROR_MESSAGE = "errorMessage";
  @SerializedName(SERIALIZED_NAME_ERROR_MESSAGE)
  private String errorMessage;

  public static final String SERIALIZED_NAME_SYNC_EXCEPTION_MESSAGE = "syncExceptionMessage";
  @SerializedName(SERIALIZED_NAME_SYNC_EXCEPTION_MESSAGE)
  private String syncExceptionMessage;

  public static final String SERIALIZED_NAME_SYNC_ID = "syncId";
  @SerializedName(SERIALIZED_NAME_SYNC_ID)
  private String syncId;

  public static final String SERIALIZED_NAME_SYNC_STATUS = "syncStatus";
  @SerializedName(SERIALIZED_NAME_SYNC_STATUS)
  private String syncStatus;

  public static final String SERIALIZED_NAME_SYNC_STATUS_CODE = "syncStatusCode";
  @SerializedName(SERIALIZED_NAME_SYNC_STATUS_CODE)
  private Integer syncStatusCode;

  public static final String SERIALIZED_NAME_SYNC_UTC = "syncUtc";
  @SerializedName(SERIALIZED_NAME_SYNC_UTC)
  private String syncUtc;

  public CompanySyncStatus() {
  }

  public CompanySyncStatus companyId(String companyId) {
    this.companyId = companyId;
    return this;
  }

  /**
   * Unique identifier for your SMB in Codat.
   * @return companyId
   */
  @javax.annotation.Nullable
  public String getCompanyId() {
    return companyId;
  }

  public void setCompanyId(String companyId) {
    this.companyId = companyId;
  }


  public CompanySyncStatus dataPushed(Boolean dataPushed) {
    this.dataPushed = dataPushed;
    return this;
  }

  /**
   * Boolean of whether the sync resulted in data being pushed.
   * @return dataPushed
   */
  @javax.annotation.Nullable
  public Boolean getDataPushed() {
    return dataPushed;
  }

  public void setDataPushed(Boolean dataPushed) {
    this.dataPushed = dataPushed;
  }


  public CompanySyncStatus errorMessage(String errorMessage) {
    this.errorMessage = errorMessage;
    return this;
  }

  /**
   * Error message of the sync.
   * @return errorMessage
   */
  @javax.annotation.Nullable
  public String getErrorMessage() {
    return errorMessage;
  }

  public void setErrorMessage(String errorMessage) {
    this.errorMessage = errorMessage;
  }


  public CompanySyncStatus syncExceptionMessage(String syncExceptionMessage) {
    this.syncExceptionMessage = syncExceptionMessage;
    return this;
  }

  /**
   * Exception message of the sync.
   * @return syncExceptionMessage
   */
  @javax.annotation.Nullable
  public String getSyncExceptionMessage() {
    return syncExceptionMessage;
  }

  public void setSyncExceptionMessage(String syncExceptionMessage) {
    this.syncExceptionMessage = syncExceptionMessage;
  }


  public CompanySyncStatus syncId(String syncId) {
    this.syncId = syncId;
    return this;
  }

  /**
   * Unique identifier of the sync.
   * @return syncId
   */
  @javax.annotation.Nullable
  public String getSyncId() {
    return syncId;
  }

  public void setSyncId(String syncId) {
    this.syncId = syncId;
  }


  public CompanySyncStatus syncStatus(String syncStatus) {
    this.syncStatus = syncStatus;
    return this;
  }

  /**
   * Text status of the sync.
   * @return syncStatus
   */
  @javax.annotation.Nullable
  public String getSyncStatus() {
    return syncStatus;
  }

  public void setSyncStatus(String syncStatus) {
    this.syncStatus = syncStatus;
  }


  public CompanySyncStatus syncStatusCode(Integer syncStatusCode) {
    this.syncStatusCode = syncStatusCode;
    return this;
  }

  /**
   * Status code of the sync.
   * @return syncStatusCode
   */
  @javax.annotation.Nullable
  public Integer getSyncStatusCode() {
    return syncStatusCode;
  }

  public void setSyncStatusCode(Integer syncStatusCode) {
    this.syncStatusCode = syncStatusCode;
  }


  public CompanySyncStatus syncUtc(String syncUtc) {
    this.syncUtc = syncUtc;
    return this;
  }

  /**
   * In Codat&#39;s data model, dates and times are represented using the &lt;a class&#x3D;\&quot;external\&quot; href&#x3D;\&quot;https://en.wikipedia.org/wiki/ISO_8601\&quot; target&#x3D;\&quot;_blank\&quot;&gt;ISO 8601 standard&lt;/a&gt;. Date and time fields are formatted as strings; for example:  &#x60;&#x60;&#x60; 2020-10-08T22:40:50Z 2021-01-01T00:00:00 &#x60;&#x60;&#x60;    When syncing data that contains &#x60;DateTime&#x60; fields from Codat, make sure you support the following cases when reading time information:  - Coordinated Universal Time (UTC): &#x60;2021-11-15T06:00:00Z&#x60; - Unqualified local time: &#x60;2021-11-15T01:00:00&#x60; - UTC time offsets: &#x60;2021-11-15T01:00:00-05:00&#x60;  &gt; Time zones &gt;  &gt; Not all dates from Codat will contain information about time zones.   &gt; Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
   * @return syncUtc
   */
  @javax.annotation.Nullable
  public String getSyncUtc() {
    return syncUtc;
  }

  public void setSyncUtc(String syncUtc) {
    this.syncUtc = syncUtc;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CompanySyncStatus companySyncStatus = (CompanySyncStatus) o;
    return Objects.equals(this.companyId, companySyncStatus.companyId) &&
        Objects.equals(this.dataPushed, companySyncStatus.dataPushed) &&
        Objects.equals(this.errorMessage, companySyncStatus.errorMessage) &&
        Objects.equals(this.syncExceptionMessage, companySyncStatus.syncExceptionMessage) &&
        Objects.equals(this.syncId, companySyncStatus.syncId) &&
        Objects.equals(this.syncStatus, companySyncStatus.syncStatus) &&
        Objects.equals(this.syncStatusCode, companySyncStatus.syncStatusCode) &&
        Objects.equals(this.syncUtc, companySyncStatus.syncUtc);
  }

  @Override
  public int hashCode() {
    return Objects.hash(companyId, dataPushed, errorMessage, syncExceptionMessage, syncId, syncStatus, syncStatusCode, syncUtc);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CompanySyncStatus {\n");
    sb.append("    companyId: ").append(toIndentedString(companyId)).append("\n");
    sb.append("    dataPushed: ").append(toIndentedString(dataPushed)).append("\n");
    sb.append("    errorMessage: ").append(toIndentedString(errorMessage)).append("\n");
    sb.append("    syncExceptionMessage: ").append(toIndentedString(syncExceptionMessage)).append("\n");
    sb.append("    syncId: ").append(toIndentedString(syncId)).append("\n");
    sb.append("    syncStatus: ").append(toIndentedString(syncStatus)).append("\n");
    sb.append("    syncStatusCode: ").append(toIndentedString(syncStatusCode)).append("\n");
    sb.append("    syncUtc: ").append(toIndentedString(syncUtc)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("companyId");
    openapiFields.add("dataPushed");
    openapiFields.add("errorMessage");
    openapiFields.add("syncExceptionMessage");
    openapiFields.add("syncId");
    openapiFields.add("syncStatus");
    openapiFields.add("syncStatusCode");
    openapiFields.add("syncUtc");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CompanySyncStatus
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CompanySyncStatus.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CompanySyncStatus is not found in the empty JSON string", CompanySyncStatus.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CompanySyncStatus.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CompanySyncStatus` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("companyId") != null && !jsonObj.get("companyId").isJsonNull()) && !jsonObj.get("companyId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `companyId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("companyId").toString()));
      }
      if ((jsonObj.get("errorMessage") != null && !jsonObj.get("errorMessage").isJsonNull()) && !jsonObj.get("errorMessage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `errorMessage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("errorMessage").toString()));
      }
      if ((jsonObj.get("syncExceptionMessage") != null && !jsonObj.get("syncExceptionMessage").isJsonNull()) && !jsonObj.get("syncExceptionMessage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `syncExceptionMessage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("syncExceptionMessage").toString()));
      }
      if ((jsonObj.get("syncId") != null && !jsonObj.get("syncId").isJsonNull()) && !jsonObj.get("syncId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `syncId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("syncId").toString()));
      }
      if ((jsonObj.get("syncStatus") != null && !jsonObj.get("syncStatus").isJsonNull()) && !jsonObj.get("syncStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `syncStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("syncStatus").toString()));
      }
      if ((jsonObj.get("syncUtc") != null && !jsonObj.get("syncUtc").isJsonNull()) && !jsonObj.get("syncUtc").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `syncUtc` to be a primitive type in the JSON string but got `%s`", jsonObj.get("syncUtc").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CompanySyncStatus.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CompanySyncStatus' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CompanySyncStatus> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CompanySyncStatus.class));

       return (TypeAdapter<T>) new TypeAdapter<CompanySyncStatus>() {
           @Override
           public void write(JsonWriter out, CompanySyncStatus value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CompanySyncStatus read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CompanySyncStatus given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CompanySyncStatus
   * @throws IOException if the JSON string is invalid with respect to CompanySyncStatus
   */
  public static CompanySyncStatus fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CompanySyncStatus.class);
  }

  /**
   * Convert an instance of CompanySyncStatus to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

