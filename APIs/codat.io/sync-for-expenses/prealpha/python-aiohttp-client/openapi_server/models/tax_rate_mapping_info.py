# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TaxRateMappingInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, code: str=None, effective_tax_rate: float=None, id: str=None, name: str=None, total_tax_rate: float=None, valid_transaction_types: List[str]=None):
        """TaxRateMappingInfo - a model defined in OpenAPI

        :param code: The code of this TaxRateMappingInfo.
        :param effective_tax_rate: The effective_tax_rate of this TaxRateMappingInfo.
        :param id: The id of this TaxRateMappingInfo.
        :param name: The name of this TaxRateMappingInfo.
        :param total_tax_rate: The total_tax_rate of this TaxRateMappingInfo.
        :param valid_transaction_types: The valid_transaction_types of this TaxRateMappingInfo.
        """
        self.openapi_types = {
            'code': str,
            'effective_tax_rate': float,
            'id': str,
            'name': str,
            'total_tax_rate': float,
            'valid_transaction_types': List[str]
        }

        self.attribute_map = {
            'code': 'code',
            'effective_tax_rate': 'effectiveTaxRate',
            'id': 'id',
            'name': 'name',
            'total_tax_rate': 'totalTaxRate',
            'valid_transaction_types': 'validTransactionTypes'
        }

        self._code = code
        self._effective_tax_rate = effective_tax_rate
        self._id = id
        self._name = name
        self._total_tax_rate = total_tax_rate
        self._valid_transaction_types = valid_transaction_types

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TaxRateMappingInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TaxRateMappingInfo of this TaxRateMappingInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def code(self):
        """Gets the code of this TaxRateMappingInfo.

        Code for the tax rate from the accounting platform.

        :return: The code of this TaxRateMappingInfo.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this TaxRateMappingInfo.

        Code for the tax rate from the accounting platform.

        :param code: The code of this TaxRateMappingInfo.
        :type code: str
        """

        self._code = code

    @property
    def effective_tax_rate(self):
        """Gets the effective_tax_rate of this TaxRateMappingInfo.

        Effective tax rate.

        :return: The effective_tax_rate of this TaxRateMappingInfo.
        :rtype: float
        """
        return self._effective_tax_rate

    @effective_tax_rate.setter
    def effective_tax_rate(self, effective_tax_rate):
        """Sets the effective_tax_rate of this TaxRateMappingInfo.

        Effective tax rate.

        :param effective_tax_rate: The effective_tax_rate of this TaxRateMappingInfo.
        :type effective_tax_rate: float
        """

        self._effective_tax_rate = effective_tax_rate

    @property
    def id(self):
        """Gets the id of this TaxRateMappingInfo.

        Unique identifier of tax rate.

        :return: The id of this TaxRateMappingInfo.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TaxRateMappingInfo.

        Unique identifier of tax rate.

        :param id: The id of this TaxRateMappingInfo.
        :type id: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this TaxRateMappingInfo.

        Name of the tax rate in the accounting platform.

        :return: The name of this TaxRateMappingInfo.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TaxRateMappingInfo.

        Name of the tax rate in the accounting platform.

        :param name: The name of this TaxRateMappingInfo.
        :type name: str
        """

        self._name = name

    @property
    def total_tax_rate(self):
        """Gets the total_tax_rate of this TaxRateMappingInfo.

        Total (not compounded) sum of the components of a tax rate.

        :return: The total_tax_rate of this TaxRateMappingInfo.
        :rtype: float
        """
        return self._total_tax_rate

    @total_tax_rate.setter
    def total_tax_rate(self, total_tax_rate):
        """Sets the total_tax_rate of this TaxRateMappingInfo.

        Total (not compounded) sum of the components of a tax rate.

        :param total_tax_rate: The total_tax_rate of this TaxRateMappingInfo.
        :type total_tax_rate: float
        """

        self._total_tax_rate = total_tax_rate

    @property
    def valid_transaction_types(self):
        """Gets the valid_transaction_types of this TaxRateMappingInfo.

        Supported transaction types for the account.

        :return: The valid_transaction_types of this TaxRateMappingInfo.
        :rtype: List[str]
        """
        return self._valid_transaction_types

    @valid_transaction_types.setter
    def valid_transaction_types(self, valid_transaction_types):
        """Sets the valid_transaction_types of this TaxRateMappingInfo.

        Supported transaction types for the account.

        :param valid_transaction_types: The valid_transaction_types of this TaxRateMappingInfo.
        :type valid_transaction_types: List[str]
        """
        allowed_values = ["Payment", "Refund", "Reward", "Chargeback", "TransferIn", "TransferOut", "AdjustmentIn", "AdjustmentOut"]  # noqa: E501
        if not set(valid_transaction_types).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `valid_transaction_types` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(valid_transaction_types) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._valid_transaction_types = valid_transaction_types
