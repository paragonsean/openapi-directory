# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DataConnectionError(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, error_message: str=None, errored_on_utc: str=None, status_code: str=None, status_text: str=None):
        """DataConnectionError - a model defined in OpenAPI

        :param error_message: The error_message of this DataConnectionError.
        :param errored_on_utc: The errored_on_utc of this DataConnectionError.
        :param status_code: The status_code of this DataConnectionError.
        :param status_text: The status_text of this DataConnectionError.
        """
        self.openapi_types = {
            'error_message': str,
            'errored_on_utc': str,
            'status_code': str,
            'status_text': str
        }

        self.attribute_map = {
            'error_message': 'errorMessage',
            'errored_on_utc': 'erroredOnUtc',
            'status_code': 'statusCode',
            'status_text': 'statusText'
        }

        self._error_message = error_message
        self._errored_on_utc = errored_on_utc
        self._status_code = status_code
        self._status_text = status_text

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DataConnectionError':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The dataConnectionError of this DataConnectionError.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def error_message(self):
        """Gets the error_message of this DataConnectionError.


        :return: The error_message of this DataConnectionError.
        :rtype: str
        """
        return self._error_message

    @error_message.setter
    def error_message(self, error_message):
        """Sets the error_message of this DataConnectionError.


        :param error_message: The error_message of this DataConnectionError.
        :type error_message: str
        """

        self._error_message = error_message

    @property
    def errored_on_utc(self):
        """Gets the errored_on_utc of this DataConnectionError.

        In Codat's data model, dates and times are represented using the <a class=\"external\" href=\"https://en.wikipedia.org/wiki/ISO_8601\" target=\"_blank\">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:  ``` 2020-10-08T22:40:50Z 2021-01-01T00:00:00 ```    When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:  - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z` - Unqualified local time: `2021-11-15T01:00:00` - UTC time offsets: `2021-11-15T01:00:00-05:00`  > Time zones >  > Not all dates from Codat will contain information about time zones.   > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.

        :return: The errored_on_utc of this DataConnectionError.
        :rtype: str
        """
        return self._errored_on_utc

    @errored_on_utc.setter
    def errored_on_utc(self, errored_on_utc):
        """Sets the errored_on_utc of this DataConnectionError.

        In Codat's data model, dates and times are represented using the <a class=\"external\" href=\"https://en.wikipedia.org/wiki/ISO_8601\" target=\"_blank\">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:  ``` 2020-10-08T22:40:50Z 2021-01-01T00:00:00 ```    When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:  - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z` - Unqualified local time: `2021-11-15T01:00:00` - UTC time offsets: `2021-11-15T01:00:00-05:00`  > Time zones >  > Not all dates from Codat will contain information about time zones.   > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.

        :param errored_on_utc: The errored_on_utc of this DataConnectionError.
        :type errored_on_utc: str
        """

        self._errored_on_utc = errored_on_utc

    @property
    def status_code(self):
        """Gets the status_code of this DataConnectionError.


        :return: The status_code of this DataConnectionError.
        :rtype: str
        """
        return self._status_code

    @status_code.setter
    def status_code(self, status_code):
        """Sets the status_code of this DataConnectionError.


        :param status_code: The status_code of this DataConnectionError.
        :type status_code: str
        """

        self._status_code = status_code

    @property
    def status_text(self):
        """Gets the status_text of this DataConnectionError.


        :return: The status_text of this DataConnectionError.
        :rtype: str
        """
        return self._status_text

    @status_text.setter
    def status_text(self, status_text):
        """Sets the status_text of this DataConnectionError.


        :param status_text: The status_text of this DataConnectionError.
        :type status_text: str
        """

        self._status_text = status_text
