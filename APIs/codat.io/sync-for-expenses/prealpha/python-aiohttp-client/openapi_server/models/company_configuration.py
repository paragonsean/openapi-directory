# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.bank_account import BankAccount
from openapi_server.models.customer import Customer
from openapi_server.models.supplier import Supplier
from openapi_server import util


class CompanyConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bank_account: BankAccount=None, customer: Customer=None, supplier: Supplier=None):
        """CompanyConfiguration - a model defined in OpenAPI

        :param bank_account: The bank_account of this CompanyConfiguration.
        :param customer: The customer of this CompanyConfiguration.
        :param supplier: The supplier of this CompanyConfiguration.
        """
        self.openapi_types = {
            'bank_account': BankAccount,
            'customer': Customer,
            'supplier': Supplier
        }

        self.attribute_map = {
            'bank_account': 'bankAccount',
            'customer': 'customer',
            'supplier': 'supplier'
        }

        self._bank_account = bank_account
        self._customer = customer
        self._supplier = supplier

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CompanyConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CompanyConfiguration of this CompanyConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bank_account(self):
        """Gets the bank_account of this CompanyConfiguration.


        :return: The bank_account of this CompanyConfiguration.
        :rtype: BankAccount
        """
        return self._bank_account

    @bank_account.setter
    def bank_account(self, bank_account):
        """Sets the bank_account of this CompanyConfiguration.


        :param bank_account: The bank_account of this CompanyConfiguration.
        :type bank_account: BankAccount
        """

        self._bank_account = bank_account

    @property
    def customer(self):
        """Gets the customer of this CompanyConfiguration.


        :return: The customer of this CompanyConfiguration.
        :rtype: Customer
        """
        return self._customer

    @customer.setter
    def customer(self, customer):
        """Sets the customer of this CompanyConfiguration.


        :param customer: The customer of this CompanyConfiguration.
        :type customer: Customer
        """

        self._customer = customer

    @property
    def supplier(self):
        """Gets the supplier of this CompanyConfiguration.


        :return: The supplier of this CompanyConfiguration.
        :rtype: Supplier
        """
        return self._supplier

    @supplier.setter
    def supplier(self, supplier):
        """Sets the supplier of this CompanyConfiguration.


        :param supplier: The supplier of this CompanyConfiguration.
        :type supplier: Supplier
        """

        self._supplier = supplier
