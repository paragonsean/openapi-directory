# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.data_connection_error import DataConnectionError
from openapi_server.models.data_connection_status import DataConnectionStatus
from openapi_server import util


class DataConnection(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, additional_properties: object=None, connection_info: Dict[str, str]=None, created: str=None, data_connection_errors: List[DataConnectionError]=None, id: str=None, integration_id: str=None, integration_key: str=None, last_sync: str=None, link_url: str=None, platform_name: str=None, source_id: str=None, source_type: str=None, status: DataConnectionStatus=None):
        """DataConnection - a model defined in OpenAPI

        :param additional_properties: The additional_properties of this DataConnection.
        :param connection_info: The connection_info of this DataConnection.
        :param created: The created of this DataConnection.
        :param data_connection_errors: The data_connection_errors of this DataConnection.
        :param id: The id of this DataConnection.
        :param integration_id: The integration_id of this DataConnection.
        :param integration_key: The integration_key of this DataConnection.
        :param last_sync: The last_sync of this DataConnection.
        :param link_url: The link_url of this DataConnection.
        :param platform_name: The platform_name of this DataConnection.
        :param source_id: The source_id of this DataConnection.
        :param source_type: The source_type of this DataConnection.
        :param status: The status of this DataConnection.
        """
        self.openapi_types = {
            'additional_properties': object,
            'connection_info': Dict[str, str],
            'created': str,
            'data_connection_errors': List[DataConnectionError],
            'id': str,
            'integration_id': str,
            'integration_key': str,
            'last_sync': str,
            'link_url': str,
            'platform_name': str,
            'source_id': str,
            'source_type': str,
            'status': DataConnectionStatus
        }

        self.attribute_map = {
            'additional_properties': 'additionalProperties',
            'connection_info': 'connectionInfo',
            'created': 'created',
            'data_connection_errors': 'dataConnectionErrors',
            'id': 'id',
            'integration_id': 'integrationId',
            'integration_key': 'integrationKey',
            'last_sync': 'lastSync',
            'link_url': 'linkUrl',
            'platform_name': 'platformName',
            'source_id': 'sourceId',
            'source_type': 'sourceType',
            'status': 'status'
        }

        self._additional_properties = additional_properties
        self._connection_info = connection_info
        self._created = created
        self._data_connection_errors = data_connection_errors
        self._id = id
        self._integration_id = integration_id
        self._integration_key = integration_key
        self._last_sync = last_sync
        self._link_url = link_url
        self._platform_name = platform_name
        self._source_id = source_id
        self._source_type = source_type
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DataConnection':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DataConnection of this DataConnection.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def additional_properties(self):
        """Gets the additional_properties of this DataConnection.


        :return: The additional_properties of this DataConnection.
        :rtype: object
        """
        return self._additional_properties

    @additional_properties.setter
    def additional_properties(self, additional_properties):
        """Sets the additional_properties of this DataConnection.


        :param additional_properties: The additional_properties of this DataConnection.
        :type additional_properties: object
        """

        self._additional_properties = additional_properties

    @property
    def connection_info(self):
        """Gets the connection_info of this DataConnection.


        :return: The connection_info of this DataConnection.
        :rtype: Dict[str, str]
        """
        return self._connection_info

    @connection_info.setter
    def connection_info(self, connection_info):
        """Sets the connection_info of this DataConnection.


        :param connection_info: The connection_info of this DataConnection.
        :type connection_info: Dict[str, str]
        """

        self._connection_info = connection_info

    @property
    def created(self):
        """Gets the created of this DataConnection.

        In Codat's data model, dates and times are represented using the <a class=\"external\" href=\"https://en.wikipedia.org/wiki/ISO_8601\" target=\"_blank\">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:  ``` 2020-10-08T22:40:50Z 2021-01-01T00:00:00 ```    When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:  - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z` - Unqualified local time: `2021-11-15T01:00:00` - UTC time offsets: `2021-11-15T01:00:00-05:00`  > Time zones >  > Not all dates from Codat will contain information about time zones.   > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.

        :return: The created of this DataConnection.
        :rtype: str
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this DataConnection.

        In Codat's data model, dates and times are represented using the <a class=\"external\" href=\"https://en.wikipedia.org/wiki/ISO_8601\" target=\"_blank\">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:  ``` 2020-10-08T22:40:50Z 2021-01-01T00:00:00 ```    When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:  - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z` - Unqualified local time: `2021-11-15T01:00:00` - UTC time offsets: `2021-11-15T01:00:00-05:00`  > Time zones >  > Not all dates from Codat will contain information about time zones.   > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.

        :param created: The created of this DataConnection.
        :type created: str
        """
        if created is None:
            raise ValueError("Invalid value for `created`, must not be `None`")

        self._created = created

    @property
    def data_connection_errors(self):
        """Gets the data_connection_errors of this DataConnection.


        :return: The data_connection_errors of this DataConnection.
        :rtype: List[DataConnectionError]
        """
        return self._data_connection_errors

    @data_connection_errors.setter
    def data_connection_errors(self, data_connection_errors):
        """Sets the data_connection_errors of this DataConnection.


        :param data_connection_errors: The data_connection_errors of this DataConnection.
        :type data_connection_errors: List[DataConnectionError]
        """

        self._data_connection_errors = data_connection_errors

    @property
    def id(self):
        """Gets the id of this DataConnection.

        Unique identifier for a company's data connection.

        :return: The id of this DataConnection.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DataConnection.

        Unique identifier for a company's data connection.

        :param id: The id of this DataConnection.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def integration_id(self):
        """Gets the integration_id of this DataConnection.

        A Codat ID representing the integration.

        :return: The integration_id of this DataConnection.
        :rtype: str
        """
        return self._integration_id

    @integration_id.setter
    def integration_id(self, integration_id):
        """Sets the integration_id of this DataConnection.

        A Codat ID representing the integration.

        :param integration_id: The integration_id of this DataConnection.
        :type integration_id: str
        """
        if integration_id is None:
            raise ValueError("Invalid value for `integration_id`, must not be `None`")

        self._integration_id = integration_id

    @property
    def integration_key(self):
        """Gets the integration_key of this DataConnection.

        A unique four-character ID that identifies the platform of the company's data connection. This ensures continuity if the platform changes its name in the future.

        :return: The integration_key of this DataConnection.
        :rtype: str
        """
        return self._integration_key

    @integration_key.setter
    def integration_key(self, integration_key):
        """Sets the integration_key of this DataConnection.

        A unique four-character ID that identifies the platform of the company's data connection. This ensures continuity if the platform changes its name in the future.

        :param integration_key: The integration_key of this DataConnection.
        :type integration_key: str
        """
        if integration_key is None:
            raise ValueError("Invalid value for `integration_key`, must not be `None`")

        self._integration_key = integration_key

    @property
    def last_sync(self):
        """Gets the last_sync of this DataConnection.

        In Codat's data model, dates and times are represented using the <a class=\"external\" href=\"https://en.wikipedia.org/wiki/ISO_8601\" target=\"_blank\">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:  ``` 2020-10-08T22:40:50Z 2021-01-01T00:00:00 ```    When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:  - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z` - Unqualified local time: `2021-11-15T01:00:00` - UTC time offsets: `2021-11-15T01:00:00-05:00`  > Time zones >  > Not all dates from Codat will contain information about time zones.   > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.

        :return: The last_sync of this DataConnection.
        :rtype: str
        """
        return self._last_sync

    @last_sync.setter
    def last_sync(self, last_sync):
        """Sets the last_sync of this DataConnection.

        In Codat's data model, dates and times are represented using the <a class=\"external\" href=\"https://en.wikipedia.org/wiki/ISO_8601\" target=\"_blank\">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:  ``` 2020-10-08T22:40:50Z 2021-01-01T00:00:00 ```    When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:  - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z` - Unqualified local time: `2021-11-15T01:00:00` - UTC time offsets: `2021-11-15T01:00:00-05:00`  > Time zones >  > Not all dates from Codat will contain information about time zones.   > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.

        :param last_sync: The last_sync of this DataConnection.
        :type last_sync: str
        """

        self._last_sync = last_sync

    @property
    def link_url(self):
        """Gets the link_url of this DataConnection.


        :return: The link_url of this DataConnection.
        :rtype: str
        """
        return self._link_url

    @link_url.setter
    def link_url(self, link_url):
        """Sets the link_url of this DataConnection.


        :param link_url: The link_url of this DataConnection.
        :type link_url: str
        """
        if link_url is None:
            raise ValueError("Invalid value for `link_url`, must not be `None`")

        self._link_url = link_url

    @property
    def platform_name(self):
        """Gets the platform_name of this DataConnection.


        :return: The platform_name of this DataConnection.
        :rtype: str
        """
        return self._platform_name

    @platform_name.setter
    def platform_name(self, platform_name):
        """Sets the platform_name of this DataConnection.


        :param platform_name: The platform_name of this DataConnection.
        :type platform_name: str
        """
        if platform_name is None:
            raise ValueError("Invalid value for `platform_name`, must not be `None`")

        self._platform_name = platform_name

    @property
    def source_id(self):
        """Gets the source_id of this DataConnection.

        A source-specific ID used to distinguish between different sources originating from the same data connection. In general, a data connection is a single data source. However, for TrueLayer, `sourceId` is associated with a specific bank and has a many-to-one relationship with the `integrationId`.

        :return: The source_id of this DataConnection.
        :rtype: str
        """
        return self._source_id

    @source_id.setter
    def source_id(self, source_id):
        """Sets the source_id of this DataConnection.

        A source-specific ID used to distinguish between different sources originating from the same data connection. In general, a data connection is a single data source. However, for TrueLayer, `sourceId` is associated with a specific bank and has a many-to-one relationship with the `integrationId`.

        :param source_id: The source_id of this DataConnection.
        :type source_id: str
        """
        if source_id is None:
            raise ValueError("Invalid value for `source_id`, must not be `None`")

        self._source_id = source_id

    @property
    def source_type(self):
        """Gets the source_type of this DataConnection.

        The type of platform of the connection.

        :return: The source_type of this DataConnection.
        :rtype: str
        """
        return self._source_type

    @source_type.setter
    def source_type(self, source_type):
        """Sets the source_type of this DataConnection.

        The type of platform of the connection.

        :param source_type: The source_type of this DataConnection.
        :type source_type: str
        """
        allowed_values = ["Accounting", "Banking", "Commerce", "Other", "Unknown"]  # noqa: E501
        if source_type not in allowed_values:
            raise ValueError(
                "Invalid value for `source_type` ({0}), must be one of {1}"
                .format(source_type, allowed_values)
            )

        self._source_type = source_type

    @property
    def status(self):
        """Gets the status of this DataConnection.


        :return: The status of this DataConnection.
        :rtype: DataConnectionStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this DataConnection.


        :param status: The status of this DataConnection.
        :type status: DataConnectionStatus
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status
