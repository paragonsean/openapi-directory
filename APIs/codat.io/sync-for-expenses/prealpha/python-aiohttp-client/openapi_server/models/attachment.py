# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Attachment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, company_id: str=None, id: str=None, transaction_id: str=None):
        """Attachment - a model defined in OpenAPI

        :param company_id: The company_id of this Attachment.
        :param id: The id of this Attachment.
        :param transaction_id: The transaction_id of this Attachment.
        """
        self.openapi_types = {
            'company_id': str,
            'id': str,
            'transaction_id': str
        }

        self.attribute_map = {
            'company_id': 'companyId',
            'id': 'id',
            'transaction_id': 'transactionId'
        }

        self._company_id = company_id
        self._id = id
        self._transaction_id = transaction_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Attachment':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Attachment of this Attachment.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def company_id(self):
        """Gets the company_id of this Attachment.

        Unique ID of company in Codat

        :return: The company_id of this Attachment.
        :rtype: str
        """
        return self._company_id

    @company_id.setter
    def company_id(self, company_id):
        """Sets the company_id of this Attachment.

        Unique ID of company in Codat

        :param company_id: The company_id of this Attachment.
        :type company_id: str
        """

        self._company_id = company_id

    @property
    def id(self):
        """Gets the id of this Attachment.

        Unique identifier of attachment

        :return: The id of this Attachment.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Attachment.

        Unique identifier of attachment

        :param id: The id of this Attachment.
        :type id: str
        """

        self._id = id

    @property
    def transaction_id(self):
        """Gets the transaction_id of this Attachment.

        Unique identifier of transaction

        :return: The transaction_id of this Attachment.
        :rtype: str
        """
        return self._transaction_id

    @transaction_id.setter
    def transaction_id(self, transaction_id):
        """Sets the transaction_id of this Attachment.

        Unique identifier of transaction

        :param transaction_id: The transaction_id of this Attachment.
        :type transaction_id: str
        """

        self._transaction_id = transaction_id
