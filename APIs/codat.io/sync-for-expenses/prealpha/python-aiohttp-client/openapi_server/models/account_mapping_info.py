# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AccountMappingInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_type: str=None, currency: str=None, id: str=None, name: str=None, valid_transaction_types: List[str]=None):
        """AccountMappingInfo - a model defined in OpenAPI

        :param account_type: The account_type of this AccountMappingInfo.
        :param currency: The currency of this AccountMappingInfo.
        :param id: The id of this AccountMappingInfo.
        :param name: The name of this AccountMappingInfo.
        :param valid_transaction_types: The valid_transaction_types of this AccountMappingInfo.
        """
        self.openapi_types = {
            'account_type': str,
            'currency': str,
            'id': str,
            'name': str,
            'valid_transaction_types': List[str]
        }

        self.attribute_map = {
            'account_type': 'accountType',
            'currency': 'currency',
            'id': 'id',
            'name': 'name',
            'valid_transaction_types': 'validTransactionTypes'
        }

        self._account_type = account_type
        self._currency = currency
        self._id = id
        self._name = name
        self._valid_transaction_types = valid_transaction_types

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AccountMappingInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AccountMappingInfo of this AccountMappingInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_type(self):
        """Gets the account_type of this AccountMappingInfo.

        Type of the account.

        :return: The account_type of this AccountMappingInfo.
        :rtype: str
        """
        return self._account_type

    @account_type.setter
    def account_type(self, account_type):
        """Sets the account_type of this AccountMappingInfo.

        Type of the account.

        :param account_type: The account_type of this AccountMappingInfo.
        :type account_type: str
        """
        allowed_values = ["Asset", "Liability", "Income", "Expense", "Equity"]  # noqa: E501
        if account_type not in allowed_values:
            raise ValueError(
                "Invalid value for `account_type` ({0}), must be one of {1}"
                .format(account_type, allowed_values)
            )

        self._account_type = account_type

    @property
    def currency(self):
        """Gets the currency of this AccountMappingInfo.

        Currency of the account.

        :return: The currency of this AccountMappingInfo.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this AccountMappingInfo.

        Currency of the account.

        :param currency: The currency of this AccountMappingInfo.
        :type currency: str
        """

        self._currency = currency

    @property
    def id(self):
        """Gets the id of this AccountMappingInfo.

        Unique identifier of account.

        :return: The id of this AccountMappingInfo.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AccountMappingInfo.

        Unique identifier of account.

        :param id: The id of this AccountMappingInfo.
        :type id: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this AccountMappingInfo.

        Name of the account as it appears in the companies accounting software.

        :return: The name of this AccountMappingInfo.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AccountMappingInfo.

        Name of the account as it appears in the companies accounting software.

        :param name: The name of this AccountMappingInfo.
        :type name: str
        """

        self._name = name

    @property
    def valid_transaction_types(self):
        """Gets the valid_transaction_types of this AccountMappingInfo.

        Supported transaction types for the account.

        :return: The valid_transaction_types of this AccountMappingInfo.
        :rtype: List[str]
        """
        return self._valid_transaction_types

    @valid_transaction_types.setter
    def valid_transaction_types(self, valid_transaction_types):
        """Sets the valid_transaction_types of this AccountMappingInfo.

        Supported transaction types for the account.

        :param valid_transaction_types: The valid_transaction_types of this AccountMappingInfo.
        :type valid_transaction_types: List[str]
        """
        allowed_values = ["Payment", "Refund", "Reward", "Chargeback", "TransferIn", "TransferOut", "AdjustmentIn", "AdjustmentOut"]  # noqa: E501
        if not set(valid_transaction_types).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `valid_transaction_types` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(valid_transaction_types) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._valid_transaction_types = valid_transaction_types
