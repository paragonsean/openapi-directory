# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CompanySyncStatus(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, company_id: str=None, data_pushed: bool=None, error_message: str=None, sync_exception_message: str=None, sync_id: str=None, sync_status: str=None, sync_status_code: int=None, sync_utc: str=None):
        """CompanySyncStatus - a model defined in OpenAPI

        :param company_id: The company_id of this CompanySyncStatus.
        :param data_pushed: The data_pushed of this CompanySyncStatus.
        :param error_message: The error_message of this CompanySyncStatus.
        :param sync_exception_message: The sync_exception_message of this CompanySyncStatus.
        :param sync_id: The sync_id of this CompanySyncStatus.
        :param sync_status: The sync_status of this CompanySyncStatus.
        :param sync_status_code: The sync_status_code of this CompanySyncStatus.
        :param sync_utc: The sync_utc of this CompanySyncStatus.
        """
        self.openapi_types = {
            'company_id': str,
            'data_pushed': bool,
            'error_message': str,
            'sync_exception_message': str,
            'sync_id': str,
            'sync_status': str,
            'sync_status_code': int,
            'sync_utc': str
        }

        self.attribute_map = {
            'company_id': 'companyId',
            'data_pushed': 'dataPushed',
            'error_message': 'errorMessage',
            'sync_exception_message': 'syncExceptionMessage',
            'sync_id': 'syncId',
            'sync_status': 'syncStatus',
            'sync_status_code': 'syncStatusCode',
            'sync_utc': 'syncUtc'
        }

        self._company_id = company_id
        self._data_pushed = data_pushed
        self._error_message = error_message
        self._sync_exception_message = sync_exception_message
        self._sync_id = sync_id
        self._sync_status = sync_status
        self._sync_status_code = sync_status_code
        self._sync_utc = sync_utc

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CompanySyncStatus':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CompanySyncStatus of this CompanySyncStatus.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def company_id(self):
        """Gets the company_id of this CompanySyncStatus.

        Unique identifier for your SMB in Codat.

        :return: The company_id of this CompanySyncStatus.
        :rtype: str
        """
        return self._company_id

    @company_id.setter
    def company_id(self, company_id):
        """Sets the company_id of this CompanySyncStatus.

        Unique identifier for your SMB in Codat.

        :param company_id: The company_id of this CompanySyncStatus.
        :type company_id: str
        """

        self._company_id = company_id

    @property
    def data_pushed(self):
        """Gets the data_pushed of this CompanySyncStatus.

        Boolean of whether the sync resulted in data being pushed.

        :return: The data_pushed of this CompanySyncStatus.
        :rtype: bool
        """
        return self._data_pushed

    @data_pushed.setter
    def data_pushed(self, data_pushed):
        """Sets the data_pushed of this CompanySyncStatus.

        Boolean of whether the sync resulted in data being pushed.

        :param data_pushed: The data_pushed of this CompanySyncStatus.
        :type data_pushed: bool
        """

        self._data_pushed = data_pushed

    @property
    def error_message(self):
        """Gets the error_message of this CompanySyncStatus.

        Error message of the sync.

        :return: The error_message of this CompanySyncStatus.
        :rtype: str
        """
        return self._error_message

    @error_message.setter
    def error_message(self, error_message):
        """Sets the error_message of this CompanySyncStatus.

        Error message of the sync.

        :param error_message: The error_message of this CompanySyncStatus.
        :type error_message: str
        """

        self._error_message = error_message

    @property
    def sync_exception_message(self):
        """Gets the sync_exception_message of this CompanySyncStatus.

        Exception message of the sync.

        :return: The sync_exception_message of this CompanySyncStatus.
        :rtype: str
        """
        return self._sync_exception_message

    @sync_exception_message.setter
    def sync_exception_message(self, sync_exception_message):
        """Sets the sync_exception_message of this CompanySyncStatus.

        Exception message of the sync.

        :param sync_exception_message: The sync_exception_message of this CompanySyncStatus.
        :type sync_exception_message: str
        """

        self._sync_exception_message = sync_exception_message

    @property
    def sync_id(self):
        """Gets the sync_id of this CompanySyncStatus.

        Unique identifier of the sync.

        :return: The sync_id of this CompanySyncStatus.
        :rtype: str
        """
        return self._sync_id

    @sync_id.setter
    def sync_id(self, sync_id):
        """Sets the sync_id of this CompanySyncStatus.

        Unique identifier of the sync.

        :param sync_id: The sync_id of this CompanySyncStatus.
        :type sync_id: str
        """

        self._sync_id = sync_id

    @property
    def sync_status(self):
        """Gets the sync_status of this CompanySyncStatus.

        Text status of the sync.

        :return: The sync_status of this CompanySyncStatus.
        :rtype: str
        """
        return self._sync_status

    @sync_status.setter
    def sync_status(self, sync_status):
        """Sets the sync_status of this CompanySyncStatus.

        Text status of the sync.

        :param sync_status: The sync_status of this CompanySyncStatus.
        :type sync_status: str
        """

        self._sync_status = sync_status

    @property
    def sync_status_code(self):
        """Gets the sync_status_code of this CompanySyncStatus.

        Status code of the sync.

        :return: The sync_status_code of this CompanySyncStatus.
        :rtype: int
        """
        return self._sync_status_code

    @sync_status_code.setter
    def sync_status_code(self, sync_status_code):
        """Sets the sync_status_code of this CompanySyncStatus.

        Status code of the sync.

        :param sync_status_code: The sync_status_code of this CompanySyncStatus.
        :type sync_status_code: int
        """

        self._sync_status_code = sync_status_code

    @property
    def sync_utc(self):
        """Gets the sync_utc of this CompanySyncStatus.

        In Codat's data model, dates and times are represented using the <a class=\"external\" href=\"https://en.wikipedia.org/wiki/ISO_8601\" target=\"_blank\">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:  ``` 2020-10-08T22:40:50Z 2021-01-01T00:00:00 ```    When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:  - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z` - Unqualified local time: `2021-11-15T01:00:00` - UTC time offsets: `2021-11-15T01:00:00-05:00`  > Time zones >  > Not all dates from Codat will contain information about time zones.   > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.

        :return: The sync_utc of this CompanySyncStatus.
        :rtype: str
        """
        return self._sync_utc

    @sync_utc.setter
    def sync_utc(self, sync_utc):
        """Sets the sync_utc of this CompanySyncStatus.

        In Codat's data model, dates and times are represented using the <a class=\"external\" href=\"https://en.wikipedia.org/wiki/ISO_8601\" target=\"_blank\">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:  ``` 2020-10-08T22:40:50Z 2021-01-01T00:00:00 ```    When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:  - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z` - Unqualified local time: `2021-11-15T01:00:00` - UTC time offsets: `2021-11-15T01:00:00-05:00`  > Time zones >  > Not all dates from Codat will contain information about time zones.   > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.

        :param sync_utc: The sync_utc of this CompanySyncStatus.
        :type sync_utc: str
        """

        self._sync_utc = sync_utc
