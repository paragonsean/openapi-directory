# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TrackingCategoryMappingInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, has_children: bool=None, id: str=None, modified_date: str=None, name: str=None, parent_id: str=None):
        """TrackingCategoryMappingInfo - a model defined in OpenAPI

        :param has_children: The has_children of this TrackingCategoryMappingInfo.
        :param id: The id of this TrackingCategoryMappingInfo.
        :param modified_date: The modified_date of this TrackingCategoryMappingInfo.
        :param name: The name of this TrackingCategoryMappingInfo.
        :param parent_id: The parent_id of this TrackingCategoryMappingInfo.
        """
        self.openapi_types = {
            'has_children': bool,
            'id': str,
            'modified_date': str,
            'name': str,
            'parent_id': str
        }

        self.attribute_map = {
            'has_children': 'hasChildren',
            'id': 'id',
            'modified_date': 'modifiedDate',
            'name': 'name',
            'parent_id': 'parentId'
        }

        self._has_children = has_children
        self._id = id
        self._modified_date = modified_date
        self._name = name
        self._parent_id = parent_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TrackingCategoryMappingInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TrackingCategoryMappingInfo of this TrackingCategoryMappingInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def has_children(self):
        """Gets the has_children of this TrackingCategoryMappingInfo.

        Boolean of whether the tracking category has child categories.

        :return: The has_children of this TrackingCategoryMappingInfo.
        :rtype: bool
        """
        return self._has_children

    @has_children.setter
    def has_children(self, has_children):
        """Sets the has_children of this TrackingCategoryMappingInfo.

        Boolean of whether the tracking category has child categories.

        :param has_children: The has_children of this TrackingCategoryMappingInfo.
        :type has_children: bool
        """

        self._has_children = has_children

    @property
    def id(self):
        """Gets the id of this TrackingCategoryMappingInfo.

        Unique identifier of the tracking category.

        :return: The id of this TrackingCategoryMappingInfo.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TrackingCategoryMappingInfo.

        Unique identifier of the tracking category.

        :param id: The id of this TrackingCategoryMappingInfo.
        :type id: str
        """

        self._id = id

    @property
    def modified_date(self):
        """Gets the modified_date of this TrackingCategoryMappingInfo.

        In Codat's data model, dates and times are represented using the <a class=\"external\" href=\"https://en.wikipedia.org/wiki/ISO_8601\" target=\"_blank\">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:  ``` 2020-10-08T22:40:50Z 2021-01-01T00:00:00 ```    When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:  - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z` - Unqualified local time: `2021-11-15T01:00:00` - UTC time offsets: `2021-11-15T01:00:00-05:00`  > Time zones >  > Not all dates from Codat will contain information about time zones.   > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.

        :return: The modified_date of this TrackingCategoryMappingInfo.
        :rtype: str
        """
        return self._modified_date

    @modified_date.setter
    def modified_date(self, modified_date):
        """Sets the modified_date of this TrackingCategoryMappingInfo.

        In Codat's data model, dates and times are represented using the <a class=\"external\" href=\"https://en.wikipedia.org/wiki/ISO_8601\" target=\"_blank\">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:  ``` 2020-10-08T22:40:50Z 2021-01-01T00:00:00 ```    When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:  - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z` - Unqualified local time: `2021-11-15T01:00:00` - UTC time offsets: `2021-11-15T01:00:00-05:00`  > Time zones >  > Not all dates from Codat will contain information about time zones.   > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.

        :param modified_date: The modified_date of this TrackingCategoryMappingInfo.
        :type modified_date: str
        """

        self._modified_date = modified_date

    @property
    def name(self):
        """Gets the name of this TrackingCategoryMappingInfo.

        Name of the tracking category as it appears in the accounting software.

        :return: The name of this TrackingCategoryMappingInfo.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TrackingCategoryMappingInfo.

        Name of the tracking category as it appears in the accounting software.

        :param name: The name of this TrackingCategoryMappingInfo.
        :type name: str
        """

        self._name = name

    @property
    def parent_id(self):
        """Gets the parent_id of this TrackingCategoryMappingInfo.

        ID of the parent tracking category

        :return: The parent_id of this TrackingCategoryMappingInfo.
        :rtype: str
        """
        return self._parent_id

    @parent_id.setter
    def parent_id(self, parent_id):
        """Sets the parent_id of this TrackingCategoryMappingInfo.

        ID of the parent tracking category

        :param parent_id: The parent_id of this TrackingCategoryMappingInfo.
        :type parent_id: str
        """

        self._parent_id = parent_id
