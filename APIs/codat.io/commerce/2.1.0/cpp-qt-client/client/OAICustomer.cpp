/**
 * Commerce API
 * Codat's Commerce API allows you to access standardised data from over 11 commerce and POS systems.  Standardize how you connect to your customersâ€™ payment, PoS, and eCommerce systems. Retrieve orders, payouts, payments, and product data in the same way for all the leading commerce platforms.  [Read more...](https://docs.codat.io/commerce-api/overview)  [See our OpenAPI spec](https://github.com/codatio/oas) 
 *
 * The version of the OpenAPI document: 2.1.0
 * Contact: support@codat.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICustomer.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICustomer::OAICustomer(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICustomer::OAICustomer() {
    this->initializeModel();
}

OAICustomer::~OAICustomer() {}

void OAICustomer::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_created_date_isSet = false;
    m_created_date_isValid = false;

    m_modified_date_isSet = false;
    m_modified_date_isValid = false;

    m_source_modified_date_isSet = false;
    m_source_modified_date_isValid = false;

    m_addresses_isSet = false;
    m_addresses_isValid = false;

    m_customer_name_isSet = false;
    m_customer_name_isValid = false;

    m_default_currency_isSet = false;
    m_default_currency_isValid = false;

    m_email_address_isSet = false;
    m_email_address_isValid = false;

    m_note_isSet = false;
    m_note_isValid = false;

    m_phone_isSet = false;
    m_phone_isValid = false;
}

void OAICustomer::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICustomer::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_created_date_isValid = ::OpenAPI::fromJsonValue(m_created_date, json[QString("createdDate")]);
    m_created_date_isSet = !json[QString("createdDate")].isNull() && m_created_date_isValid;

    m_modified_date_isValid = ::OpenAPI::fromJsonValue(m_modified_date, json[QString("modifiedDate")]);
    m_modified_date_isSet = !json[QString("modifiedDate")].isNull() && m_modified_date_isValid;

    m_source_modified_date_isValid = ::OpenAPI::fromJsonValue(m_source_modified_date, json[QString("sourceModifiedDate")]);
    m_source_modified_date_isSet = !json[QString("sourceModifiedDate")].isNull() && m_source_modified_date_isValid;

    m_addresses_isValid = ::OpenAPI::fromJsonValue(m_addresses, json[QString("addresses")]);
    m_addresses_isSet = !json[QString("addresses")].isNull() && m_addresses_isValid;

    m_customer_name_isValid = ::OpenAPI::fromJsonValue(m_customer_name, json[QString("customerName")]);
    m_customer_name_isSet = !json[QString("customerName")].isNull() && m_customer_name_isValid;

    m_default_currency_isValid = ::OpenAPI::fromJsonValue(m_default_currency, json[QString("defaultCurrency")]);
    m_default_currency_isSet = !json[QString("defaultCurrency")].isNull() && m_default_currency_isValid;

    m_email_address_isValid = ::OpenAPI::fromJsonValue(m_email_address, json[QString("emailAddress")]);
    m_email_address_isSet = !json[QString("emailAddress")].isNull() && m_email_address_isValid;

    m_note_isValid = ::OpenAPI::fromJsonValue(m_note, json[QString("note")]);
    m_note_isSet = !json[QString("note")].isNull() && m_note_isValid;

    m_phone_isValid = ::OpenAPI::fromJsonValue(m_phone, json[QString("phone")]);
    m_phone_isSet = !json[QString("phone")].isNull() && m_phone_isValid;
}

QString OAICustomer::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICustomer::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_created_date_isSet) {
        obj.insert(QString("createdDate"), ::OpenAPI::toJsonValue(m_created_date));
    }
    if (m_modified_date_isSet) {
        obj.insert(QString("modifiedDate"), ::OpenAPI::toJsonValue(m_modified_date));
    }
    if (m_source_modified_date_isSet) {
        obj.insert(QString("sourceModifiedDate"), ::OpenAPI::toJsonValue(m_source_modified_date));
    }
    if (m_addresses.size() > 0) {
        obj.insert(QString("addresses"), ::OpenAPI::toJsonValue(m_addresses));
    }
    if (m_customer_name_isSet) {
        obj.insert(QString("customerName"), ::OpenAPI::toJsonValue(m_customer_name));
    }
    if (m_default_currency.isSet()) {
        obj.insert(QString("defaultCurrency"), ::OpenAPI::toJsonValue(m_default_currency));
    }
    if (m_email_address_isSet) {
        obj.insert(QString("emailAddress"), ::OpenAPI::toJsonValue(m_email_address));
    }
    if (m_note_isSet) {
        obj.insert(QString("note"), ::OpenAPI::toJsonValue(m_note));
    }
    if (m_phone_isSet) {
        obj.insert(QString("phone"), ::OpenAPI::toJsonValue(m_phone));
    }
    return obj;
}

QString OAICustomer::getId() const {
    return m_id;
}
void OAICustomer::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAICustomer::is_id_Set() const{
    return m_id_isSet;
}

bool OAICustomer::is_id_Valid() const{
    return m_id_isValid;
}

QString OAICustomer::getCreatedDate() const {
    return m_created_date;
}
void OAICustomer::setCreatedDate(const QString &created_date) {
    m_created_date = created_date;
    m_created_date_isSet = true;
}

bool OAICustomer::is_created_date_Set() const{
    return m_created_date_isSet;
}

bool OAICustomer::is_created_date_Valid() const{
    return m_created_date_isValid;
}

QString OAICustomer::getModifiedDate() const {
    return m_modified_date;
}
void OAICustomer::setModifiedDate(const QString &modified_date) {
    m_modified_date = modified_date;
    m_modified_date_isSet = true;
}

bool OAICustomer::is_modified_date_Set() const{
    return m_modified_date_isSet;
}

bool OAICustomer::is_modified_date_Valid() const{
    return m_modified_date_isValid;
}

QString OAICustomer::getSourceModifiedDate() const {
    return m_source_modified_date;
}
void OAICustomer::setSourceModifiedDate(const QString &source_modified_date) {
    m_source_modified_date = source_modified_date;
    m_source_modified_date_isSet = true;
}

bool OAICustomer::is_source_modified_date_Set() const{
    return m_source_modified_date_isSet;
}

bool OAICustomer::is_source_modified_date_Valid() const{
    return m_source_modified_date_isValid;
}

QList<OAIAddress> OAICustomer::getAddresses() const {
    return m_addresses;
}
void OAICustomer::setAddresses(const QList<OAIAddress> &addresses) {
    m_addresses = addresses;
    m_addresses_isSet = true;
}

bool OAICustomer::is_addresses_Set() const{
    return m_addresses_isSet;
}

bool OAICustomer::is_addresses_Valid() const{
    return m_addresses_isValid;
}

QString OAICustomer::getCustomerName() const {
    return m_customer_name;
}
void OAICustomer::setCustomerName(const QString &customer_name) {
    m_customer_name = customer_name;
    m_customer_name_isSet = true;
}

bool OAICustomer::is_customer_name_Set() const{
    return m_customer_name_isSet;
}

bool OAICustomer::is_customer_name_Valid() const{
    return m_customer_name_isValid;
}

OAICustomer_allOf_defaultCurrency OAICustomer::getDefaultCurrency() const {
    return m_default_currency;
}
void OAICustomer::setDefaultCurrency(const OAICustomer_allOf_defaultCurrency &default_currency) {
    m_default_currency = default_currency;
    m_default_currency_isSet = true;
}

bool OAICustomer::is_default_currency_Set() const{
    return m_default_currency_isSet;
}

bool OAICustomer::is_default_currency_Valid() const{
    return m_default_currency_isValid;
}

QString OAICustomer::getEmailAddress() const {
    return m_email_address;
}
void OAICustomer::setEmailAddress(const QString &email_address) {
    m_email_address = email_address;
    m_email_address_isSet = true;
}

bool OAICustomer::is_email_address_Set() const{
    return m_email_address_isSet;
}

bool OAICustomer::is_email_address_Valid() const{
    return m_email_address_isValid;
}

QString OAICustomer::getNote() const {
    return m_note;
}
void OAICustomer::setNote(const QString &note) {
    m_note = note;
    m_note_isSet = true;
}

bool OAICustomer::is_note_Set() const{
    return m_note_isSet;
}

bool OAICustomer::is_note_Valid() const{
    return m_note_isValid;
}

QString OAICustomer::getPhone() const {
    return m_phone;
}
void OAICustomer::setPhone(const QString &phone) {
    m_phone = phone;
    m_phone_isSet = true;
}

bool OAICustomer::is_phone_Set() const{
    return m_phone_isSet;
}

bool OAICustomer::is_phone_Valid() const{
    return m_phone_isValid;
}

bool OAICustomer::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_modified_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_modified_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_addresses.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_currency.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_note_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phone_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICustomer::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && true;
}

} // namespace OpenAPI
