/**
 * Commerce API
 * Codat's Commerce API allows you to access standardised data from over 11 commerce and POS systems.  Standardize how you connect to your customersâ€™ payment, PoS, and eCommerce systems. Retrieve orders, payouts, payments, and product data in the same way for all the leading commerce platforms.  [Read more...](https://docs.codat.io/commerce-api/overview)  [See our OpenAPI spec](https://github.com/codatio/oas) 
 *
 * The version of the OpenAPI document: 2.1.0
 * Contact: support@codat.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITransaction.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITransaction::OAITransaction(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITransaction::OAITransaction() {
    this->initializeModel();
}

OAITransaction::~OAITransaction() {}

void OAITransaction::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_currency_isSet = false;
    m_currency_isValid = false;

    m_sub_type_isSet = false;
    m_sub_type_isValid = false;

    m_total_amount_isSet = false;
    m_total_amount_isValid = false;

    m_transaction_source_ref_isSet = false;
    m_transaction_source_ref_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_created_date_isSet = false;
    m_created_date_isValid = false;

    m_source_created_date_isSet = false;
    m_source_created_date_isValid = false;

    m_modified_date_isSet = false;
    m_modified_date_isValid = false;

    m_source_modified_date_isSet = false;
    m_source_modified_date_isValid = false;
}

void OAITransaction::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITransaction::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_currency_isValid = ::OpenAPI::fromJsonValue(m_currency, json[QString("currency")]);
    m_currency_isSet = !json[QString("currency")].isNull() && m_currency_isValid;

    m_sub_type_isValid = ::OpenAPI::fromJsonValue(m_sub_type, json[QString("subType")]);
    m_sub_type_isSet = !json[QString("subType")].isNull() && m_sub_type_isValid;

    m_total_amount_isValid = ::OpenAPI::fromJsonValue(m_total_amount, json[QString("totalAmount")]);
    m_total_amount_isSet = !json[QString("totalAmount")].isNull() && m_total_amount_isValid;

    m_transaction_source_ref_isValid = ::OpenAPI::fromJsonValue(m_transaction_source_ref, json[QString("transactionSourceRef")]);
    m_transaction_source_ref_isSet = !json[QString("transactionSourceRef")].isNull() && m_transaction_source_ref_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_created_date_isValid = ::OpenAPI::fromJsonValue(m_created_date, json[QString("createdDate")]);
    m_created_date_isSet = !json[QString("createdDate")].isNull() && m_created_date_isValid;

    m_source_created_date_isValid = ::OpenAPI::fromJsonValue(m_source_created_date, json[QString("sourceCreatedDate")]);
    m_source_created_date_isSet = !json[QString("sourceCreatedDate")].isNull() && m_source_created_date_isValid;

    m_modified_date_isValid = ::OpenAPI::fromJsonValue(m_modified_date, json[QString("modifiedDate")]);
    m_modified_date_isSet = !json[QString("modifiedDate")].isNull() && m_modified_date_isValid;

    m_source_modified_date_isValid = ::OpenAPI::fromJsonValue(m_source_modified_date, json[QString("sourceModifiedDate")]);
    m_source_modified_date_isSet = !json[QString("sourceModifiedDate")].isNull() && m_source_modified_date_isValid;
}

QString OAITransaction::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITransaction::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_currency_isSet) {
        obj.insert(QString("currency"), ::OpenAPI::toJsonValue(m_currency));
    }
    if (m_sub_type_isSet) {
        obj.insert(QString("subType"), ::OpenAPI::toJsonValue(m_sub_type));
    }
    if (m_total_amount_isSet) {
        obj.insert(QString("totalAmount"), ::OpenAPI::toJsonValue(m_total_amount));
    }
    if (m_transaction_source_ref.isSet()) {
        obj.insert(QString("transactionSourceRef"), ::OpenAPI::toJsonValue(m_transaction_source_ref));
    }
    if (m_type.isSet()) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_created_date_isSet) {
        obj.insert(QString("createdDate"), ::OpenAPI::toJsonValue(m_created_date));
    }
    if (m_source_created_date_isSet) {
        obj.insert(QString("sourceCreatedDate"), ::OpenAPI::toJsonValue(m_source_created_date));
    }
    if (m_modified_date_isSet) {
        obj.insert(QString("modifiedDate"), ::OpenAPI::toJsonValue(m_modified_date));
    }
    if (m_source_modified_date_isSet) {
        obj.insert(QString("sourceModifiedDate"), ::OpenAPI::toJsonValue(m_source_modified_date));
    }
    return obj;
}

QString OAITransaction::getId() const {
    return m_id;
}
void OAITransaction::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAITransaction::is_id_Set() const{
    return m_id_isSet;
}

bool OAITransaction::is_id_Valid() const{
    return m_id_isValid;
}

QString OAITransaction::getCurrency() const {
    return m_currency;
}
void OAITransaction::setCurrency(const QString &currency) {
    m_currency = currency;
    m_currency_isSet = true;
}

bool OAITransaction::is_currency_Set() const{
    return m_currency_isSet;
}

bool OAITransaction::is_currency_Valid() const{
    return m_currency_isValid;
}

QString OAITransaction::getSubType() const {
    return m_sub_type;
}
void OAITransaction::setSubType(const QString &sub_type) {
    m_sub_type = sub_type;
    m_sub_type_isSet = true;
}

bool OAITransaction::is_sub_type_Set() const{
    return m_sub_type_isSet;
}

bool OAITransaction::is_sub_type_Valid() const{
    return m_sub_type_isValid;
}

QString OAITransaction::getTotalAmount() const {
    return m_total_amount;
}
void OAITransaction::setTotalAmount(const QString &total_amount) {
    m_total_amount = total_amount;
    m_total_amount_isSet = true;
}

bool OAITransaction::is_total_amount_Set() const{
    return m_total_amount_isSet;
}

bool OAITransaction::is_total_amount_Valid() const{
    return m_total_amount_isValid;
}

OAITransactionSourceRef OAITransaction::getTransactionSourceRef() const {
    return m_transaction_source_ref;
}
void OAITransaction::setTransactionSourceRef(const OAITransactionSourceRef &transaction_source_ref) {
    m_transaction_source_ref = transaction_source_ref;
    m_transaction_source_ref_isSet = true;
}

bool OAITransaction::is_transaction_source_ref_Set() const{
    return m_transaction_source_ref_isSet;
}

bool OAITransaction::is_transaction_source_ref_Valid() const{
    return m_transaction_source_ref_isValid;
}

OAITransactionType OAITransaction::getType() const {
    return m_type;
}
void OAITransaction::setType(const OAITransactionType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAITransaction::is_type_Set() const{
    return m_type_isSet;
}

bool OAITransaction::is_type_Valid() const{
    return m_type_isValid;
}

QString OAITransaction::getCreatedDate() const {
    return m_created_date;
}
void OAITransaction::setCreatedDate(const QString &created_date) {
    m_created_date = created_date;
    m_created_date_isSet = true;
}

bool OAITransaction::is_created_date_Set() const{
    return m_created_date_isSet;
}

bool OAITransaction::is_created_date_Valid() const{
    return m_created_date_isValid;
}

QString OAITransaction::getSourceCreatedDate() const {
    return m_source_created_date;
}
void OAITransaction::setSourceCreatedDate(const QString &source_created_date) {
    m_source_created_date = source_created_date;
    m_source_created_date_isSet = true;
}

bool OAITransaction::is_source_created_date_Set() const{
    return m_source_created_date_isSet;
}

bool OAITransaction::is_source_created_date_Valid() const{
    return m_source_created_date_isValid;
}

QString OAITransaction::getModifiedDate() const {
    return m_modified_date;
}
void OAITransaction::setModifiedDate(const QString &modified_date) {
    m_modified_date = modified_date;
    m_modified_date_isSet = true;
}

bool OAITransaction::is_modified_date_Set() const{
    return m_modified_date_isSet;
}

bool OAITransaction::is_modified_date_Valid() const{
    return m_modified_date_isValid;
}

QString OAITransaction::getSourceModifiedDate() const {
    return m_source_modified_date;
}
void OAITransaction::setSourceModifiedDate(const QString &source_modified_date) {
    m_source_modified_date = source_modified_date;
    m_source_modified_date_isSet = true;
}

bool OAITransaction::is_source_modified_date_Set() const{
    return m_source_modified_date_isSet;
}

bool OAITransaction::is_source_modified_date_Valid() const{
    return m_source_modified_date_isValid;
}

bool OAITransaction::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sub_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transaction_source_ref.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_created_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_modified_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_modified_date_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITransaction::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && true;
}

} // namespace OpenAPI
