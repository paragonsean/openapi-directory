/**
 * Commerce API
 * Codat's Commerce API allows you to access standardised data from over 11 commerce and POS systems.  Standardize how you connect to your customersâ€™ payment, PoS, and eCommerce systems. Retrieve orders, payouts, payments, and product data in the same way for all the leading commerce platforms.  [Read more...](https://docs.codat.io/commerce-api/overview)  [See our OpenAPI spec](https://github.com/codatio/oas) 
 *
 * The version of the OpenAPI document: 2.1.0
 * Contact: support@codat.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOrder.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOrder::OAIOrder(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOrder::OAIOrder() {
    this->initializeModel();
}

OAIOrder::~OAIOrder() {}

void OAIOrder::initializeModel() {

    m_created_date_isSet = false;
    m_created_date_isValid = false;

    m_modified_date_isSet = false;
    m_modified_date_isValid = false;

    m_source_modified_date_isSet = false;
    m_source_modified_date_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_closed_date_isSet = false;
    m_closed_date_isValid = false;

    m_country_isSet = false;
    m_country_isValid = false;

    m_currency_isSet = false;
    m_currency_isValid = false;

    m_customer_ref_isSet = false;
    m_customer_ref_isValid = false;

    m_location_ref_isSet = false;
    m_location_ref_isValid = false;

    m_order_line_items_isSet = false;
    m_order_line_items_isValid = false;

    m_order_number_isSet = false;
    m_order_number_isValid = false;

    m_payments_isSet = false;
    m_payments_isValid = false;

    m_service_charges_isSet = false;
    m_service_charges_isValid = false;

    m_total_amount_isSet = false;
    m_total_amount_isValid = false;

    m_total_discount_isSet = false;
    m_total_discount_isValid = false;

    m_total_gratuity_isSet = false;
    m_total_gratuity_isValid = false;

    m_total_refund_isSet = false;
    m_total_refund_isValid = false;

    m_total_tax_amount_isSet = false;
    m_total_tax_amount_isValid = false;
}

void OAIOrder::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOrder::fromJsonObject(QJsonObject json) {

    m_created_date_isValid = ::OpenAPI::fromJsonValue(m_created_date, json[QString("createdDate")]);
    m_created_date_isSet = !json[QString("createdDate")].isNull() && m_created_date_isValid;

    m_modified_date_isValid = ::OpenAPI::fromJsonValue(m_modified_date, json[QString("modifiedDate")]);
    m_modified_date_isSet = !json[QString("modifiedDate")].isNull() && m_modified_date_isValid;

    m_source_modified_date_isValid = ::OpenAPI::fromJsonValue(m_source_modified_date, json[QString("sourceModifiedDate")]);
    m_source_modified_date_isSet = !json[QString("sourceModifiedDate")].isNull() && m_source_modified_date_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_closed_date_isValid = ::OpenAPI::fromJsonValue(m_closed_date, json[QString("closedDate")]);
    m_closed_date_isSet = !json[QString("closedDate")].isNull() && m_closed_date_isValid;

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("country")]);
    m_country_isSet = !json[QString("country")].isNull() && m_country_isValid;

    m_currency_isValid = ::OpenAPI::fromJsonValue(m_currency, json[QString("currency")]);
    m_currency_isSet = !json[QString("currency")].isNull() && m_currency_isValid;

    m_customer_ref_isValid = ::OpenAPI::fromJsonValue(m_customer_ref, json[QString("customerRef")]);
    m_customer_ref_isSet = !json[QString("customerRef")].isNull() && m_customer_ref_isValid;

    m_location_ref_isValid = ::OpenAPI::fromJsonValue(m_location_ref, json[QString("locationRef")]);
    m_location_ref_isSet = !json[QString("locationRef")].isNull() && m_location_ref_isValid;

    m_order_line_items_isValid = ::OpenAPI::fromJsonValue(m_order_line_items, json[QString("orderLineItems")]);
    m_order_line_items_isSet = !json[QString("orderLineItems")].isNull() && m_order_line_items_isValid;

    m_order_number_isValid = ::OpenAPI::fromJsonValue(m_order_number, json[QString("orderNumber")]);
    m_order_number_isSet = !json[QString("orderNumber")].isNull() && m_order_number_isValid;

    m_payments_isValid = ::OpenAPI::fromJsonValue(m_payments, json[QString("payments")]);
    m_payments_isSet = !json[QString("payments")].isNull() && m_payments_isValid;

    m_service_charges_isValid = ::OpenAPI::fromJsonValue(m_service_charges, json[QString("serviceCharges")]);
    m_service_charges_isSet = !json[QString("serviceCharges")].isNull() && m_service_charges_isValid;

    m_total_amount_isValid = ::OpenAPI::fromJsonValue(m_total_amount, json[QString("totalAmount")]);
    m_total_amount_isSet = !json[QString("totalAmount")].isNull() && m_total_amount_isValid;

    m_total_discount_isValid = ::OpenAPI::fromJsonValue(m_total_discount, json[QString("totalDiscount")]);
    m_total_discount_isSet = !json[QString("totalDiscount")].isNull() && m_total_discount_isValid;

    m_total_gratuity_isValid = ::OpenAPI::fromJsonValue(m_total_gratuity, json[QString("totalGratuity")]);
    m_total_gratuity_isSet = !json[QString("totalGratuity")].isNull() && m_total_gratuity_isValid;

    m_total_refund_isValid = ::OpenAPI::fromJsonValue(m_total_refund, json[QString("totalRefund")]);
    m_total_refund_isSet = !json[QString("totalRefund")].isNull() && m_total_refund_isValid;

    m_total_tax_amount_isValid = ::OpenAPI::fromJsonValue(m_total_tax_amount, json[QString("totalTaxAmount")]);
    m_total_tax_amount_isSet = !json[QString("totalTaxAmount")].isNull() && m_total_tax_amount_isValid;
}

QString OAIOrder::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOrder::asJsonObject() const {
    QJsonObject obj;
    if (m_created_date_isSet) {
        obj.insert(QString("createdDate"), ::OpenAPI::toJsonValue(m_created_date));
    }
    if (m_modified_date_isSet) {
        obj.insert(QString("modifiedDate"), ::OpenAPI::toJsonValue(m_modified_date));
    }
    if (m_source_modified_date_isSet) {
        obj.insert(QString("sourceModifiedDate"), ::OpenAPI::toJsonValue(m_source_modified_date));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_closed_date_isSet) {
        obj.insert(QString("closedDate"), ::OpenAPI::toJsonValue(m_closed_date));
    }
    if (m_country_isSet) {
        obj.insert(QString("country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_currency.isSet()) {
        obj.insert(QString("currency"), ::OpenAPI::toJsonValue(m_currency));
    }
    if (m_customer_ref.isSet()) {
        obj.insert(QString("customerRef"), ::OpenAPI::toJsonValue(m_customer_ref));
    }
    if (m_location_ref.isSet()) {
        obj.insert(QString("locationRef"), ::OpenAPI::toJsonValue(m_location_ref));
    }
    if (m_order_line_items.size() > 0) {
        obj.insert(QString("orderLineItems"), ::OpenAPI::toJsonValue(m_order_line_items));
    }
    if (m_order_number_isSet) {
        obj.insert(QString("orderNumber"), ::OpenAPI::toJsonValue(m_order_number));
    }
    if (m_payments.size() > 0) {
        obj.insert(QString("payments"), ::OpenAPI::toJsonValue(m_payments));
    }
    if (m_service_charges.size() > 0) {
        obj.insert(QString("serviceCharges"), ::OpenAPI::toJsonValue(m_service_charges));
    }
    if (m_total_amount_isSet) {
        obj.insert(QString("totalAmount"), ::OpenAPI::toJsonValue(m_total_amount));
    }
    if (m_total_discount_isSet) {
        obj.insert(QString("totalDiscount"), ::OpenAPI::toJsonValue(m_total_discount));
    }
    if (m_total_gratuity_isSet) {
        obj.insert(QString("totalGratuity"), ::OpenAPI::toJsonValue(m_total_gratuity));
    }
    if (m_total_refund_isSet) {
        obj.insert(QString("totalRefund"), ::OpenAPI::toJsonValue(m_total_refund));
    }
    if (m_total_tax_amount_isSet) {
        obj.insert(QString("totalTaxAmount"), ::OpenAPI::toJsonValue(m_total_tax_amount));
    }
    return obj;
}

QString OAIOrder::getCreatedDate() const {
    return m_created_date;
}
void OAIOrder::setCreatedDate(const QString &created_date) {
    m_created_date = created_date;
    m_created_date_isSet = true;
}

bool OAIOrder::is_created_date_Set() const{
    return m_created_date_isSet;
}

bool OAIOrder::is_created_date_Valid() const{
    return m_created_date_isValid;
}

QString OAIOrder::getModifiedDate() const {
    return m_modified_date;
}
void OAIOrder::setModifiedDate(const QString &modified_date) {
    m_modified_date = modified_date;
    m_modified_date_isSet = true;
}

bool OAIOrder::is_modified_date_Set() const{
    return m_modified_date_isSet;
}

bool OAIOrder::is_modified_date_Valid() const{
    return m_modified_date_isValid;
}

QString OAIOrder::getSourceModifiedDate() const {
    return m_source_modified_date;
}
void OAIOrder::setSourceModifiedDate(const QString &source_modified_date) {
    m_source_modified_date = source_modified_date;
    m_source_modified_date_isSet = true;
}

bool OAIOrder::is_source_modified_date_Set() const{
    return m_source_modified_date_isSet;
}

bool OAIOrder::is_source_modified_date_Valid() const{
    return m_source_modified_date_isValid;
}

QString OAIOrder::getId() const {
    return m_id;
}
void OAIOrder::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIOrder::is_id_Set() const{
    return m_id_isSet;
}

bool OAIOrder::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIOrder::getClosedDate() const {
    return m_closed_date;
}
void OAIOrder::setClosedDate(const QString &closed_date) {
    m_closed_date = closed_date;
    m_closed_date_isSet = true;
}

bool OAIOrder::is_closed_date_Set() const{
    return m_closed_date_isSet;
}

bool OAIOrder::is_closed_date_Valid() const{
    return m_closed_date_isValid;
}

QString OAIOrder::getCountry() const {
    return m_country;
}
void OAIOrder::setCountry(const QString &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAIOrder::is_country_Set() const{
    return m_country_isSet;
}

bool OAIOrder::is_country_Valid() const{
    return m_country_isValid;
}

OAIOrder_allOf_currency OAIOrder::getCurrency() const {
    return m_currency;
}
void OAIOrder::setCurrency(const OAIOrder_allOf_currency &currency) {
    m_currency = currency;
    m_currency_isSet = true;
}

bool OAIOrder::is_currency_Set() const{
    return m_currency_isSet;
}

bool OAIOrder::is_currency_Valid() const{
    return m_currency_isValid;
}

OAICustomerRef OAIOrder::getCustomerRef() const {
    return m_customer_ref;
}
void OAIOrder::setCustomerRef(const OAICustomerRef &customer_ref) {
    m_customer_ref = customer_ref;
    m_customer_ref_isSet = true;
}

bool OAIOrder::is_customer_ref_Set() const{
    return m_customer_ref_isSet;
}

bool OAIOrder::is_customer_ref_Valid() const{
    return m_customer_ref_isValid;
}

OAILocationRef OAIOrder::getLocationRef() const {
    return m_location_ref;
}
void OAIOrder::setLocationRef(const OAILocationRef &location_ref) {
    m_location_ref = location_ref;
    m_location_ref_isSet = true;
}

bool OAIOrder::is_location_ref_Set() const{
    return m_location_ref_isSet;
}

bool OAIOrder::is_location_ref_Valid() const{
    return m_location_ref_isValid;
}

QList<OAIOrderLineItem> OAIOrder::getOrderLineItems() const {
    return m_order_line_items;
}
void OAIOrder::setOrderLineItems(const QList<OAIOrderLineItem> &order_line_items) {
    m_order_line_items = order_line_items;
    m_order_line_items_isSet = true;
}

bool OAIOrder::is_order_line_items_Set() const{
    return m_order_line_items_isSet;
}

bool OAIOrder::is_order_line_items_Valid() const{
    return m_order_line_items_isValid;
}

QString OAIOrder::getOrderNumber() const {
    return m_order_number;
}
void OAIOrder::setOrderNumber(const QString &order_number) {
    m_order_number = order_number;
    m_order_number_isSet = true;
}

bool OAIOrder::is_order_number_Set() const{
    return m_order_number_isSet;
}

bool OAIOrder::is_order_number_Valid() const{
    return m_order_number_isValid;
}

QList<OAIPaymentRef> OAIOrder::getPayments() const {
    return m_payments;
}
void OAIOrder::setPayments(const QList<OAIPaymentRef> &payments) {
    m_payments = payments;
    m_payments_isSet = true;
}

bool OAIOrder::is_payments_Set() const{
    return m_payments_isSet;
}

bool OAIOrder::is_payments_Valid() const{
    return m_payments_isValid;
}

QList<OAIServiceCharge> OAIOrder::getServiceCharges() const {
    return m_service_charges;
}
void OAIOrder::setServiceCharges(const QList<OAIServiceCharge> &service_charges) {
    m_service_charges = service_charges;
    m_service_charges_isSet = true;
}

bool OAIOrder::is_service_charges_Set() const{
    return m_service_charges_isSet;
}

bool OAIOrder::is_service_charges_Valid() const{
    return m_service_charges_isValid;
}

QString OAIOrder::getTotalAmount() const {
    return m_total_amount;
}
void OAIOrder::setTotalAmount(const QString &total_amount) {
    m_total_amount = total_amount;
    m_total_amount_isSet = true;
}

bool OAIOrder::is_total_amount_Set() const{
    return m_total_amount_isSet;
}

bool OAIOrder::is_total_amount_Valid() const{
    return m_total_amount_isValid;
}

QString OAIOrder::getTotalDiscount() const {
    return m_total_discount;
}
void OAIOrder::setTotalDiscount(const QString &total_discount) {
    m_total_discount = total_discount;
    m_total_discount_isSet = true;
}

bool OAIOrder::is_total_discount_Set() const{
    return m_total_discount_isSet;
}

bool OAIOrder::is_total_discount_Valid() const{
    return m_total_discount_isValid;
}

QString OAIOrder::getTotalGratuity() const {
    return m_total_gratuity;
}
void OAIOrder::setTotalGratuity(const QString &total_gratuity) {
    m_total_gratuity = total_gratuity;
    m_total_gratuity_isSet = true;
}

bool OAIOrder::is_total_gratuity_Set() const{
    return m_total_gratuity_isSet;
}

bool OAIOrder::is_total_gratuity_Valid() const{
    return m_total_gratuity_isValid;
}

QString OAIOrder::getTotalRefund() const {
    return m_total_refund;
}
void OAIOrder::setTotalRefund(const QString &total_refund) {
    m_total_refund = total_refund;
    m_total_refund_isSet = true;
}

bool OAIOrder::is_total_refund_Set() const{
    return m_total_refund_isSet;
}

bool OAIOrder::is_total_refund_Valid() const{
    return m_total_refund_isValid;
}

QString OAIOrder::getTotalTaxAmount() const {
    return m_total_tax_amount;
}
void OAIOrder::setTotalTaxAmount(const QString &total_tax_amount) {
    m_total_tax_amount = total_tax_amount;
    m_total_tax_amount_isSet = true;
}

bool OAIOrder::is_total_tax_amount_Set() const{
    return m_total_tax_amount_isSet;
}

bool OAIOrder::is_total_tax_amount_Valid() const{
    return m_total_tax_amount_isValid;
}

bool OAIOrder::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_modified_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_modified_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_closed_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_ref.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_ref.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_line_items.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payments.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_charges.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_discount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_gratuity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_refund_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_tax_amount_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOrder::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && true;
}

} // namespace OpenAPI
