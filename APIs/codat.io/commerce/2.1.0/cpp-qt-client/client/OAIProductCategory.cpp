/**
 * Commerce API
 * Codat's Commerce API allows you to access standardised data from over 11 commerce and POS systems.  Standardize how you connect to your customersâ€™ payment, PoS, and eCommerce systems. Retrieve orders, payouts, payments, and product data in the same way for all the leading commerce platforms.  [Read more...](https://docs.codat.io/commerce-api/overview)  [See our OpenAPI spec](https://github.com/codatio/oas) 
 *
 * The version of the OpenAPI document: 2.1.0
 * Contact: support@codat.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProductCategory.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProductCategory::OAIProductCategory(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProductCategory::OAIProductCategory() {
    this->initializeModel();
}

OAIProductCategory::~OAIProductCategory() {}

void OAIProductCategory::initializeModel() {

    m_modified_date_isSet = false;
    m_modified_date_isValid = false;

    m_source_modified_date_isSet = false;
    m_source_modified_date_isValid = false;

    m_ancestor_refs_isSet = false;
    m_ancestor_refs_isValid = false;

    m_has_children_isSet = false;
    m_has_children_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;
}

void OAIProductCategory::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProductCategory::fromJsonObject(QJsonObject json) {

    m_modified_date_isValid = ::OpenAPI::fromJsonValue(m_modified_date, json[QString("modifiedDate")]);
    m_modified_date_isSet = !json[QString("modifiedDate")].isNull() && m_modified_date_isValid;

    m_source_modified_date_isValid = ::OpenAPI::fromJsonValue(m_source_modified_date, json[QString("sourceModifiedDate")]);
    m_source_modified_date_isSet = !json[QString("sourceModifiedDate")].isNull() && m_source_modified_date_isValid;

    m_ancestor_refs_isValid = ::OpenAPI::fromJsonValue(m_ancestor_refs, json[QString("ancestorRefs")]);
    m_ancestor_refs_isSet = !json[QString("ancestorRefs")].isNull() && m_ancestor_refs_isValid;

    m_has_children_isValid = ::OpenAPI::fromJsonValue(m_has_children, json[QString("hasChildren")]);
    m_has_children_isSet = !json[QString("hasChildren")].isNull() && m_has_children_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;
}

QString OAIProductCategory::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProductCategory::asJsonObject() const {
    QJsonObject obj;
    if (m_modified_date_isSet) {
        obj.insert(QString("modifiedDate"), ::OpenAPI::toJsonValue(m_modified_date));
    }
    if (m_source_modified_date_isSet) {
        obj.insert(QString("sourceModifiedDate"), ::OpenAPI::toJsonValue(m_source_modified_date));
    }
    if (m_ancestor_refs.size() > 0) {
        obj.insert(QString("ancestorRefs"), ::OpenAPI::toJsonValue(m_ancestor_refs));
    }
    if (m_has_children_isSet) {
        obj.insert(QString("hasChildren"), ::OpenAPI::toJsonValue(m_has_children));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    return obj;
}

QString OAIProductCategory::getModifiedDate() const {
    return m_modified_date;
}
void OAIProductCategory::setModifiedDate(const QString &modified_date) {
    m_modified_date = modified_date;
    m_modified_date_isSet = true;
}

bool OAIProductCategory::is_modified_date_Set() const{
    return m_modified_date_isSet;
}

bool OAIProductCategory::is_modified_date_Valid() const{
    return m_modified_date_isValid;
}

QString OAIProductCategory::getSourceModifiedDate() const {
    return m_source_modified_date;
}
void OAIProductCategory::setSourceModifiedDate(const QString &source_modified_date) {
    m_source_modified_date = source_modified_date;
    m_source_modified_date_isSet = true;
}

bool OAIProductCategory::is_source_modified_date_Set() const{
    return m_source_modified_date_isSet;
}

bool OAIProductCategory::is_source_modified_date_Valid() const{
    return m_source_modified_date_isValid;
}

QList<OAIRecordRef> OAIProductCategory::getAncestorRefs() const {
    return m_ancestor_refs;
}
void OAIProductCategory::setAncestorRefs(const QList<OAIRecordRef> &ancestor_refs) {
    m_ancestor_refs = ancestor_refs;
    m_ancestor_refs_isSet = true;
}

bool OAIProductCategory::is_ancestor_refs_Set() const{
    return m_ancestor_refs_isSet;
}

bool OAIProductCategory::is_ancestor_refs_Valid() const{
    return m_ancestor_refs_isValid;
}

bool OAIProductCategory::isHasChildren() const {
    return m_has_children;
}
void OAIProductCategory::setHasChildren(const bool &has_children) {
    m_has_children = has_children;
    m_has_children_isSet = true;
}

bool OAIProductCategory::is_has_children_Set() const{
    return m_has_children_isSet;
}

bool OAIProductCategory::is_has_children_Valid() const{
    return m_has_children_isValid;
}

QString OAIProductCategory::getId() const {
    return m_id;
}
void OAIProductCategory::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIProductCategory::is_id_Set() const{
    return m_id_isSet;
}

bool OAIProductCategory::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIProductCategory::getName() const {
    return m_name;
}
void OAIProductCategory::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIProductCategory::is_name_Set() const{
    return m_name_isSet;
}

bool OAIProductCategory::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIProductCategory::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_modified_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_modified_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ancestor_refs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_children_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProductCategory::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
