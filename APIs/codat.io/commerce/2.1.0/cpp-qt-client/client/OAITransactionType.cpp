/**
 * Commerce API
 * Codat's Commerce API allows you to access standardised data from over 11 commerce and POS systems.  Standardize how you connect to your customersâ€™ payment, PoS, and eCommerce systems. Retrieve orders, payouts, payments, and product data in the same way for all the leading commerce platforms.  [Read more...](https://docs.codat.io/commerce-api/overview)  [See our OpenAPI spec](https://github.com/codatio/oas) 
 *
 * The version of the OpenAPI document: 2.1.0
 * Contact: support@codat.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITransactionType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITransactionType::OAITransactionType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITransactionType::OAITransactionType() {
    this->initializeModel();
}

OAITransactionType::~OAITransactionType() {}

void OAITransactionType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAITransactionType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAITransactionType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("Payment", Qt::CaseInsensitive) == 0) {
        m_value = eOAITransactionType::PAYMENT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Refund", Qt::CaseInsensitive) == 0) {
        m_value = eOAITransactionType::REFUND;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Payout", Qt::CaseInsensitive) == 0) {
        m_value = eOAITransactionType::PAYOUT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FailedPayout", Qt::CaseInsensitive) == 0) {
        m_value = eOAITransactionType::FAILEDPAYOUT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Transfer", Qt::CaseInsensitive) == 0) {
        m_value = eOAITransactionType::TRANSFER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PaymentFee", Qt::CaseInsensitive) == 0) {
        m_value = eOAITransactionType::PAYMENTFEE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PaymentFeeRefund", Qt::CaseInsensitive) == 0) {
        m_value = eOAITransactionType::PAYMENTFEEREFUND;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Unknown", Qt::CaseInsensitive) == 0) {
        m_value = eOAITransactionType::UNKNOWN;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAITransactionType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAITransactionType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAITransactionType::PAYMENT:
            val = "Payment";
            break;
        case eOAITransactionType::REFUND:
            val = "Refund";
            break;
        case eOAITransactionType::PAYOUT:
            val = "Payout";
            break;
        case eOAITransactionType::FAILEDPAYOUT:
            val = "FailedPayout";
            break;
        case eOAITransactionType::TRANSFER:
            val = "Transfer";
            break;
        case eOAITransactionType::PAYMENTFEE:
            val = "PaymentFee";
            break;
        case eOAITransactionType::PAYMENTFEEREFUND:
            val = "PaymentFeeRefund";
            break;
        case eOAITransactionType::UNKNOWN:
            val = "Unknown";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAITransactionType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAITransactionType::eOAITransactionType OAITransactionType::getValue() const {
    return m_value;
}

void OAITransactionType::setValue(const OAITransactionType::eOAITransactionType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAITransactionType::isSet() const {
    
    return m_value_isSet;
}

bool OAITransactionType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
