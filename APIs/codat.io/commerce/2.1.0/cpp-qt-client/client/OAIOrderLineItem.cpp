/**
 * Commerce API
 * Codat's Commerce API allows you to access standardised data from over 11 commerce and POS systems.  Standardize how you connect to your customersâ€™ payment, PoS, and eCommerce systems. Retrieve orders, payouts, payments, and product data in the same way for all the leading commerce platforms.  [Read more...](https://docs.codat.io/commerce-api/overview)  [See our OpenAPI spec](https://github.com/codatio/oas) 
 *
 * The version of the OpenAPI document: 2.1.0
 * Contact: support@codat.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOrderLineItem.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOrderLineItem::OAIOrderLineItem(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOrderLineItem::OAIOrderLineItem() {
    this->initializeModel();
}

OAIOrderLineItem::~OAIOrderLineItem() {}

void OAIOrderLineItem::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_discount_allocations_isSet = false;
    m_discount_allocations_isValid = false;

    m_product_ref_isSet = false;
    m_product_ref_isValid = false;

    m_product_variant_ref_isSet = false;
    m_product_variant_ref_isValid = false;

    m_quantity_isSet = false;
    m_quantity_isValid = false;

    m_tax_percentage_isSet = false;
    m_tax_percentage_isValid = false;

    m_taxes_isSet = false;
    m_taxes_isValid = false;

    m_total_amount_isSet = false;
    m_total_amount_isValid = false;

    m_total_tax_amount_isSet = false;
    m_total_tax_amount_isValid = false;

    m_unit_price_isSet = false;
    m_unit_price_isValid = false;
}

void OAIOrderLineItem::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOrderLineItem::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_discount_allocations_isValid = ::OpenAPI::fromJsonValue(m_discount_allocations, json[QString("discountAllocations")]);
    m_discount_allocations_isSet = !json[QString("discountAllocations")].isNull() && m_discount_allocations_isValid;

    m_product_ref_isValid = ::OpenAPI::fromJsonValue(m_product_ref, json[QString("productRef")]);
    m_product_ref_isSet = !json[QString("productRef")].isNull() && m_product_ref_isValid;

    m_product_variant_ref_isValid = ::OpenAPI::fromJsonValue(m_product_variant_ref, json[QString("productVariantRef")]);
    m_product_variant_ref_isSet = !json[QString("productVariantRef")].isNull() && m_product_variant_ref_isValid;

    m_quantity_isValid = ::OpenAPI::fromJsonValue(m_quantity, json[QString("quantity")]);
    m_quantity_isSet = !json[QString("quantity")].isNull() && m_quantity_isValid;

    m_tax_percentage_isValid = ::OpenAPI::fromJsonValue(m_tax_percentage, json[QString("taxPercentage")]);
    m_tax_percentage_isSet = !json[QString("taxPercentage")].isNull() && m_tax_percentage_isValid;

    m_taxes_isValid = ::OpenAPI::fromJsonValue(m_taxes, json[QString("taxes")]);
    m_taxes_isSet = !json[QString("taxes")].isNull() && m_taxes_isValid;

    m_total_amount_isValid = ::OpenAPI::fromJsonValue(m_total_amount, json[QString("totalAmount")]);
    m_total_amount_isSet = !json[QString("totalAmount")].isNull() && m_total_amount_isValid;

    m_total_tax_amount_isValid = ::OpenAPI::fromJsonValue(m_total_tax_amount, json[QString("totalTaxAmount")]);
    m_total_tax_amount_isSet = !json[QString("totalTaxAmount")].isNull() && m_total_tax_amount_isValid;

    m_unit_price_isValid = ::OpenAPI::fromJsonValue(m_unit_price, json[QString("unitPrice")]);
    m_unit_price_isSet = !json[QString("unitPrice")].isNull() && m_unit_price_isValid;
}

QString OAIOrderLineItem::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOrderLineItem::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_discount_allocations.size() > 0) {
        obj.insert(QString("discountAllocations"), ::OpenAPI::toJsonValue(m_discount_allocations));
    }
    if (m_product_ref.isSet()) {
        obj.insert(QString("productRef"), ::OpenAPI::toJsonValue(m_product_ref));
    }
    if (m_product_variant_ref.isSet()) {
        obj.insert(QString("productVariantRef"), ::OpenAPI::toJsonValue(m_product_variant_ref));
    }
    if (m_quantity_isSet) {
        obj.insert(QString("quantity"), ::OpenAPI::toJsonValue(m_quantity));
    }
    if (m_tax_percentage_isSet) {
        obj.insert(QString("taxPercentage"), ::OpenAPI::toJsonValue(m_tax_percentage));
    }
    if (m_taxes.size() > 0) {
        obj.insert(QString("taxes"), ::OpenAPI::toJsonValue(m_taxes));
    }
    if (m_total_amount_isSet) {
        obj.insert(QString("totalAmount"), ::OpenAPI::toJsonValue(m_total_amount));
    }
    if (m_total_tax_amount_isSet) {
        obj.insert(QString("totalTaxAmount"), ::OpenAPI::toJsonValue(m_total_tax_amount));
    }
    if (m_unit_price_isSet) {
        obj.insert(QString("unitPrice"), ::OpenAPI::toJsonValue(m_unit_price));
    }
    return obj;
}

QString OAIOrderLineItem::getId() const {
    return m_id;
}
void OAIOrderLineItem::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIOrderLineItem::is_id_Set() const{
    return m_id_isSet;
}

bool OAIOrderLineItem::is_id_Valid() const{
    return m_id_isValid;
}

QList<OAIOrderDiscountAllocation> OAIOrderLineItem::getDiscountAllocations() const {
    return m_discount_allocations;
}
void OAIOrderLineItem::setDiscountAllocations(const QList<OAIOrderDiscountAllocation> &discount_allocations) {
    m_discount_allocations = discount_allocations;
    m_discount_allocations_isSet = true;
}

bool OAIOrderLineItem::is_discount_allocations_Set() const{
    return m_discount_allocations_isSet;
}

bool OAIOrderLineItem::is_discount_allocations_Valid() const{
    return m_discount_allocations_isValid;
}

OAIProductRef OAIOrderLineItem::getProductRef() const {
    return m_product_ref;
}
void OAIOrderLineItem::setProductRef(const OAIProductRef &product_ref) {
    m_product_ref = product_ref;
    m_product_ref_isSet = true;
}

bool OAIOrderLineItem::is_product_ref_Set() const{
    return m_product_ref_isSet;
}

bool OAIOrderLineItem::is_product_ref_Valid() const{
    return m_product_ref_isValid;
}

OAIProductVariantRef OAIOrderLineItem::getProductVariantRef() const {
    return m_product_variant_ref;
}
void OAIOrderLineItem::setProductVariantRef(const OAIProductVariantRef &product_variant_ref) {
    m_product_variant_ref = product_variant_ref;
    m_product_variant_ref_isSet = true;
}

bool OAIOrderLineItem::is_product_variant_ref_Set() const{
    return m_product_variant_ref_isSet;
}

bool OAIOrderLineItem::is_product_variant_ref_Valid() const{
    return m_product_variant_ref_isValid;
}

QString OAIOrderLineItem::getQuantity() const {
    return m_quantity;
}
void OAIOrderLineItem::setQuantity(const QString &quantity) {
    m_quantity = quantity;
    m_quantity_isSet = true;
}

bool OAIOrderLineItem::is_quantity_Set() const{
    return m_quantity_isSet;
}

bool OAIOrderLineItem::is_quantity_Valid() const{
    return m_quantity_isValid;
}

QString OAIOrderLineItem::getTaxPercentage() const {
    return m_tax_percentage;
}
void OAIOrderLineItem::setTaxPercentage(const QString &tax_percentage) {
    m_tax_percentage = tax_percentage;
    m_tax_percentage_isSet = true;
}

bool OAIOrderLineItem::is_tax_percentage_Set() const{
    return m_tax_percentage_isSet;
}

bool OAIOrderLineItem::is_tax_percentage_Valid() const{
    return m_tax_percentage_isValid;
}

QList<OAITaxComponentAllocation> OAIOrderLineItem::getTaxes() const {
    return m_taxes;
}
void OAIOrderLineItem::setTaxes(const QList<OAITaxComponentAllocation> &taxes) {
    m_taxes = taxes;
    m_taxes_isSet = true;
}

bool OAIOrderLineItem::is_taxes_Set() const{
    return m_taxes_isSet;
}

bool OAIOrderLineItem::is_taxes_Valid() const{
    return m_taxes_isValid;
}

QString OAIOrderLineItem::getTotalAmount() const {
    return m_total_amount;
}
void OAIOrderLineItem::setTotalAmount(const QString &total_amount) {
    m_total_amount = total_amount;
    m_total_amount_isSet = true;
}

bool OAIOrderLineItem::is_total_amount_Set() const{
    return m_total_amount_isSet;
}

bool OAIOrderLineItem::is_total_amount_Valid() const{
    return m_total_amount_isValid;
}

QString OAIOrderLineItem::getTotalTaxAmount() const {
    return m_total_tax_amount;
}
void OAIOrderLineItem::setTotalTaxAmount(const QString &total_tax_amount) {
    m_total_tax_amount = total_tax_amount;
    m_total_tax_amount_isSet = true;
}

bool OAIOrderLineItem::is_total_tax_amount_Set() const{
    return m_total_tax_amount_isSet;
}

bool OAIOrderLineItem::is_total_tax_amount_Valid() const{
    return m_total_tax_amount_isValid;
}

QString OAIOrderLineItem::getUnitPrice() const {
    return m_unit_price;
}
void OAIOrderLineItem::setUnitPrice(const QString &unit_price) {
    m_unit_price = unit_price;
    m_unit_price_isSet = true;
}

bool OAIOrderLineItem::is_unit_price_Set() const{
    return m_unit_price_isSet;
}

bool OAIOrderLineItem::is_unit_price_Valid() const{
    return m_unit_price_isValid;
}

bool OAIOrderLineItem::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_discount_allocations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_ref.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_variant_ref.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_taxes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_tax_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unit_price_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOrderLineItem::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && true;
}

} // namespace OpenAPI
