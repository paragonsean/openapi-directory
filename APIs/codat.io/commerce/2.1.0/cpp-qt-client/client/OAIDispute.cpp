/**
 * Commerce API
 * Codat's Commerce API allows you to access standardised data from over 11 commerce and POS systems.  Standardize how you connect to your customersâ€™ payment, PoS, and eCommerce systems. Retrieve orders, payouts, payments, and product data in the same way for all the leading commerce platforms.  [Read more...](https://docs.codat.io/commerce-api/overview)  [See our OpenAPI spec](https://github.com/codatio/oas) 
 *
 * The version of the OpenAPI document: 2.1.0
 * Contact: support@codat.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDispute.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDispute::OAIDispute(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDispute::OAIDispute() {
    this->initializeModel();
}

OAIDispute::~OAIDispute() {}

void OAIDispute::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_created_date_isSet = false;
    m_created_date_isValid = false;

    m_modified_date_isSet = false;
    m_modified_date_isValid = false;

    m_source_modified_date_isSet = false;
    m_source_modified_date_isValid = false;

    m_currency_isSet = false;
    m_currency_isValid = false;

    m_disputed_transactions_isSet = false;
    m_disputed_transactions_isValid = false;

    m_due_date_isSet = false;
    m_due_date_isValid = false;

    m_reason_isSet = false;
    m_reason_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_total_amount_isSet = false;
    m_total_amount_isValid = false;
}

void OAIDispute::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDispute::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_created_date_isValid = ::OpenAPI::fromJsonValue(m_created_date, json[QString("createdDate")]);
    m_created_date_isSet = !json[QString("createdDate")].isNull() && m_created_date_isValid;

    m_modified_date_isValid = ::OpenAPI::fromJsonValue(m_modified_date, json[QString("modifiedDate")]);
    m_modified_date_isSet = !json[QString("modifiedDate")].isNull() && m_modified_date_isValid;

    m_source_modified_date_isValid = ::OpenAPI::fromJsonValue(m_source_modified_date, json[QString("sourceModifiedDate")]);
    m_source_modified_date_isSet = !json[QString("sourceModifiedDate")].isNull() && m_source_modified_date_isValid;

    m_currency_isValid = ::OpenAPI::fromJsonValue(m_currency, json[QString("currency")]);
    m_currency_isSet = !json[QString("currency")].isNull() && m_currency_isValid;

    m_disputed_transactions_isValid = ::OpenAPI::fromJsonValue(m_disputed_transactions, json[QString("disputedTransactions")]);
    m_disputed_transactions_isSet = !json[QString("disputedTransactions")].isNull() && m_disputed_transactions_isValid;

    m_due_date_isValid = ::OpenAPI::fromJsonValue(m_due_date, json[QString("dueDate")]);
    m_due_date_isSet = !json[QString("dueDate")].isNull() && m_due_date_isValid;

    m_reason_isValid = ::OpenAPI::fromJsonValue(m_reason, json[QString("reason")]);
    m_reason_isSet = !json[QString("reason")].isNull() && m_reason_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_total_amount_isValid = ::OpenAPI::fromJsonValue(m_total_amount, json[QString("totalAmount")]);
    m_total_amount_isSet = !json[QString("totalAmount")].isNull() && m_total_amount_isValid;
}

QString OAIDispute::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDispute::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_created_date_isSet) {
        obj.insert(QString("createdDate"), ::OpenAPI::toJsonValue(m_created_date));
    }
    if (m_modified_date_isSet) {
        obj.insert(QString("modifiedDate"), ::OpenAPI::toJsonValue(m_modified_date));
    }
    if (m_source_modified_date_isSet) {
        obj.insert(QString("sourceModifiedDate"), ::OpenAPI::toJsonValue(m_source_modified_date));
    }
    if (m_currency_isSet) {
        obj.insert(QString("currency"), ::OpenAPI::toJsonValue(m_currency));
    }
    if (m_disputed_transactions.isSet()) {
        obj.insert(QString("disputedTransactions"), ::OpenAPI::toJsonValue(m_disputed_transactions));
    }
    if (m_due_date_isSet) {
        obj.insert(QString("dueDate"), ::OpenAPI::toJsonValue(m_due_date));
    }
    if (m_reason_isSet) {
        obj.insert(QString("reason"), ::OpenAPI::toJsonValue(m_reason));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_total_amount_isSet) {
        obj.insert(QString("totalAmount"), ::OpenAPI::toJsonValue(m_total_amount));
    }
    return obj;
}

QString OAIDispute::getId() const {
    return m_id;
}
void OAIDispute::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIDispute::is_id_Set() const{
    return m_id_isSet;
}

bool OAIDispute::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIDispute::getCreatedDate() const {
    return m_created_date;
}
void OAIDispute::setCreatedDate(const QString &created_date) {
    m_created_date = created_date;
    m_created_date_isSet = true;
}

bool OAIDispute::is_created_date_Set() const{
    return m_created_date_isSet;
}

bool OAIDispute::is_created_date_Valid() const{
    return m_created_date_isValid;
}

QString OAIDispute::getModifiedDate() const {
    return m_modified_date;
}
void OAIDispute::setModifiedDate(const QString &modified_date) {
    m_modified_date = modified_date;
    m_modified_date_isSet = true;
}

bool OAIDispute::is_modified_date_Set() const{
    return m_modified_date_isSet;
}

bool OAIDispute::is_modified_date_Valid() const{
    return m_modified_date_isValid;
}

QString OAIDispute::getSourceModifiedDate() const {
    return m_source_modified_date;
}
void OAIDispute::setSourceModifiedDate(const QString &source_modified_date) {
    m_source_modified_date = source_modified_date;
    m_source_modified_date_isSet = true;
}

bool OAIDispute::is_source_modified_date_Set() const{
    return m_source_modified_date_isSet;
}

bool OAIDispute::is_source_modified_date_Valid() const{
    return m_source_modified_date_isValid;
}

QString OAIDispute::getCurrency() const {
    return m_currency;
}
void OAIDispute::setCurrency(const QString &currency) {
    m_currency = currency;
    m_currency_isSet = true;
}

bool OAIDispute::is_currency_Set() const{
    return m_currency_isSet;
}

bool OAIDispute::is_currency_Valid() const{
    return m_currency_isValid;
}

OAITransactionSourceRef OAIDispute::getDisputedTransactions() const {
    return m_disputed_transactions;
}
void OAIDispute::setDisputedTransactions(const OAITransactionSourceRef &disputed_transactions) {
    m_disputed_transactions = disputed_transactions;
    m_disputed_transactions_isSet = true;
}

bool OAIDispute::is_disputed_transactions_Set() const{
    return m_disputed_transactions_isSet;
}

bool OAIDispute::is_disputed_transactions_Valid() const{
    return m_disputed_transactions_isValid;
}

QString OAIDispute::getDueDate() const {
    return m_due_date;
}
void OAIDispute::setDueDate(const QString &due_date) {
    m_due_date = due_date;
    m_due_date_isSet = true;
}

bool OAIDispute::is_due_date_Set() const{
    return m_due_date_isSet;
}

bool OAIDispute::is_due_date_Valid() const{
    return m_due_date_isValid;
}

QString OAIDispute::getReason() const {
    return m_reason;
}
void OAIDispute::setReason(const QString &reason) {
    m_reason = reason;
    m_reason_isSet = true;
}

bool OAIDispute::is_reason_Set() const{
    return m_reason_isSet;
}

bool OAIDispute::is_reason_Valid() const{
    return m_reason_isValid;
}

OAIDisputeStatus OAIDispute::getStatus() const {
    return m_status;
}
void OAIDispute::setStatus(const OAIDisputeStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIDispute::is_status_Set() const{
    return m_status_isSet;
}

bool OAIDispute::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIDispute::getTotalAmount() const {
    return m_total_amount;
}
void OAIDispute::setTotalAmount(const QString &total_amount) {
    m_total_amount = total_amount;
    m_total_amount_isSet = true;
}

bool OAIDispute::is_total_amount_Set() const{
    return m_total_amount_isSet;
}

bool OAIDispute::is_total_amount_Valid() const{
    return m_total_amount_isValid;
}

bool OAIDispute::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_modified_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_modified_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disputed_transactions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_due_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_amount_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDispute::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && m_currency_isValid && true;
}

} // namespace OpenAPI
