/**
 * Commerce API
 * Codat's Commerce API allows you to access standardised data from over 11 commerce and POS systems.  Standardize how you connect to your customersâ€™ payment, PoS, and eCommerce systems. Retrieve orders, payouts, payments, and product data in the same way for all the leading commerce platforms.  [Read more...](https://docs.codat.io/commerce-api/overview)  [See our OpenAPI spec](https://github.com/codatio/oas) 
 *
 * The version of the OpenAPI document: 2.1.0
 * Contact: support@codat.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPayment.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPayment::OAIPayment(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPayment::OAIPayment() {
    this->initializeModel();
}

OAIPayment::~OAIPayment() {}

void OAIPayment::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_created_date_isSet = false;
    m_created_date_isValid = false;

    m_modified_date_isSet = false;
    m_modified_date_isValid = false;

    m_source_modified_date_isSet = false;
    m_source_modified_date_isValid = false;

    m_amount_isSet = false;
    m_amount_isValid = false;

    m_currency_isSet = false;
    m_currency_isValid = false;

    m_due_date_isSet = false;
    m_due_date_isValid = false;

    m_payment_method_ref_isSet = false;
    m_payment_method_ref_isValid = false;

    m_payment_provider_isSet = false;
    m_payment_provider_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIPayment::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPayment::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_created_date_isValid = ::OpenAPI::fromJsonValue(m_created_date, json[QString("createdDate")]);
    m_created_date_isSet = !json[QString("createdDate")].isNull() && m_created_date_isValid;

    m_modified_date_isValid = ::OpenAPI::fromJsonValue(m_modified_date, json[QString("modifiedDate")]);
    m_modified_date_isSet = !json[QString("modifiedDate")].isNull() && m_modified_date_isValid;

    m_source_modified_date_isValid = ::OpenAPI::fromJsonValue(m_source_modified_date, json[QString("sourceModifiedDate")]);
    m_source_modified_date_isSet = !json[QString("sourceModifiedDate")].isNull() && m_source_modified_date_isValid;

    m_amount_isValid = ::OpenAPI::fromJsonValue(m_amount, json[QString("amount")]);
    m_amount_isSet = !json[QString("amount")].isNull() && m_amount_isValid;

    m_currency_isValid = ::OpenAPI::fromJsonValue(m_currency, json[QString("currency")]);
    m_currency_isSet = !json[QString("currency")].isNull() && m_currency_isValid;

    m_due_date_isValid = ::OpenAPI::fromJsonValue(m_due_date, json[QString("dueDate")]);
    m_due_date_isSet = !json[QString("dueDate")].isNull() && m_due_date_isValid;

    m_payment_method_ref_isValid = ::OpenAPI::fromJsonValue(m_payment_method_ref, json[QString("paymentMethodRef")]);
    m_payment_method_ref_isSet = !json[QString("paymentMethodRef")].isNull() && m_payment_method_ref_isValid;

    m_payment_provider_isValid = ::OpenAPI::fromJsonValue(m_payment_provider, json[QString("paymentProvider")]);
    m_payment_provider_isSet = !json[QString("paymentProvider")].isNull() && m_payment_provider_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIPayment::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPayment::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_created_date_isSet) {
        obj.insert(QString("createdDate"), ::OpenAPI::toJsonValue(m_created_date));
    }
    if (m_modified_date_isSet) {
        obj.insert(QString("modifiedDate"), ::OpenAPI::toJsonValue(m_modified_date));
    }
    if (m_source_modified_date_isSet) {
        obj.insert(QString("sourceModifiedDate"), ::OpenAPI::toJsonValue(m_source_modified_date));
    }
    if (m_amount_isSet) {
        obj.insert(QString("amount"), ::OpenAPI::toJsonValue(m_amount));
    }
    if (m_currency_isSet) {
        obj.insert(QString("currency"), ::OpenAPI::toJsonValue(m_currency));
    }
    if (m_due_date_isSet) {
        obj.insert(QString("dueDate"), ::OpenAPI::toJsonValue(m_due_date));
    }
    if (m_payment_method_ref.isSet()) {
        obj.insert(QString("paymentMethodRef"), ::OpenAPI::toJsonValue(m_payment_method_ref));
    }
    if (m_payment_provider_isSet) {
        obj.insert(QString("paymentProvider"), ::OpenAPI::toJsonValue(m_payment_provider));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QString OAIPayment::getId() const {
    return m_id;
}
void OAIPayment::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIPayment::is_id_Set() const{
    return m_id_isSet;
}

bool OAIPayment::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIPayment::getCreatedDate() const {
    return m_created_date;
}
void OAIPayment::setCreatedDate(const QString &created_date) {
    m_created_date = created_date;
    m_created_date_isSet = true;
}

bool OAIPayment::is_created_date_Set() const{
    return m_created_date_isSet;
}

bool OAIPayment::is_created_date_Valid() const{
    return m_created_date_isValid;
}

QString OAIPayment::getModifiedDate() const {
    return m_modified_date;
}
void OAIPayment::setModifiedDate(const QString &modified_date) {
    m_modified_date = modified_date;
    m_modified_date_isSet = true;
}

bool OAIPayment::is_modified_date_Set() const{
    return m_modified_date_isSet;
}

bool OAIPayment::is_modified_date_Valid() const{
    return m_modified_date_isValid;
}

QString OAIPayment::getSourceModifiedDate() const {
    return m_source_modified_date;
}
void OAIPayment::setSourceModifiedDate(const QString &source_modified_date) {
    m_source_modified_date = source_modified_date;
    m_source_modified_date_isSet = true;
}

bool OAIPayment::is_source_modified_date_Set() const{
    return m_source_modified_date_isSet;
}

bool OAIPayment::is_source_modified_date_Valid() const{
    return m_source_modified_date_isValid;
}

QString OAIPayment::getAmount() const {
    return m_amount;
}
void OAIPayment::setAmount(const QString &amount) {
    m_amount = amount;
    m_amount_isSet = true;
}

bool OAIPayment::is_amount_Set() const{
    return m_amount_isSet;
}

bool OAIPayment::is_amount_Valid() const{
    return m_amount_isValid;
}

QString OAIPayment::getCurrency() const {
    return m_currency;
}
void OAIPayment::setCurrency(const QString &currency) {
    m_currency = currency;
    m_currency_isSet = true;
}

bool OAIPayment::is_currency_Set() const{
    return m_currency_isSet;
}

bool OAIPayment::is_currency_Valid() const{
    return m_currency_isValid;
}

QString OAIPayment::getDueDate() const {
    return m_due_date;
}
void OAIPayment::setDueDate(const QString &due_date) {
    m_due_date = due_date;
    m_due_date_isSet = true;
}

bool OAIPayment::is_due_date_Set() const{
    return m_due_date_isSet;
}

bool OAIPayment::is_due_date_Valid() const{
    return m_due_date_isValid;
}

OAIPaymentMethodRef OAIPayment::getPaymentMethodRef() const {
    return m_payment_method_ref;
}
void OAIPayment::setPaymentMethodRef(const OAIPaymentMethodRef &payment_method_ref) {
    m_payment_method_ref = payment_method_ref;
    m_payment_method_ref_isSet = true;
}

bool OAIPayment::is_payment_method_ref_Set() const{
    return m_payment_method_ref_isSet;
}

bool OAIPayment::is_payment_method_ref_Valid() const{
    return m_payment_method_ref_isValid;
}

QString OAIPayment::getPaymentProvider() const {
    return m_payment_provider;
}
void OAIPayment::setPaymentProvider(const QString &payment_provider) {
    m_payment_provider = payment_provider;
    m_payment_provider_isSet = true;
}

bool OAIPayment::is_payment_provider_Set() const{
    return m_payment_provider_isSet;
}

bool OAIPayment::is_payment_provider_Valid() const{
    return m_payment_provider_isValid;
}

OAIPaymentStatus OAIPayment::getStatus() const {
    return m_status;
}
void OAIPayment::setStatus(const OAIPaymentStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIPayment::is_status_Set() const{
    return m_status_isSet;
}

bool OAIPayment::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIPayment::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_modified_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_modified_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_due_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_method_ref.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_provider_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPayment::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && true;
}

} // namespace OpenAPI
