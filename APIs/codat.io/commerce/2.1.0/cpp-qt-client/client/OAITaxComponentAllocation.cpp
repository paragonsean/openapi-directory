/**
 * Commerce API
 * Codat's Commerce API allows you to access standardised data from over 11 commerce and POS systems.  Standardize how you connect to your customersâ€™ payment, PoS, and eCommerce systems. Retrieve orders, payouts, payments, and product data in the same way for all the leading commerce platforms.  [Read more...](https://docs.codat.io/commerce-api/overview)  [See our OpenAPI spec](https://github.com/codatio/oas) 
 *
 * The version of the OpenAPI document: 2.1.0
 * Contact: support@codat.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITaxComponentAllocation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITaxComponentAllocation::OAITaxComponentAllocation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITaxComponentAllocation::OAITaxComponentAllocation() {
    this->initializeModel();
}

OAITaxComponentAllocation::~OAITaxComponentAllocation() {}

void OAITaxComponentAllocation::initializeModel() {

    m_rate_isSet = false;
    m_rate_isValid = false;

    m_tax_component_ref_isSet = false;
    m_tax_component_ref_isValid = false;
}

void OAITaxComponentAllocation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITaxComponentAllocation::fromJsonObject(QJsonObject json) {

    m_rate_isValid = ::OpenAPI::fromJsonValue(m_rate, json[QString("rate")]);
    m_rate_isSet = !json[QString("rate")].isNull() && m_rate_isValid;

    m_tax_component_ref_isValid = ::OpenAPI::fromJsonValue(m_tax_component_ref, json[QString("taxComponentRef")]);
    m_tax_component_ref_isSet = !json[QString("taxComponentRef")].isNull() && m_tax_component_ref_isValid;
}

QString OAITaxComponentAllocation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITaxComponentAllocation::asJsonObject() const {
    QJsonObject obj;
    if (m_rate_isSet) {
        obj.insert(QString("rate"), ::OpenAPI::toJsonValue(m_rate));
    }
    if (m_tax_component_ref.isSet()) {
        obj.insert(QString("taxComponentRef"), ::OpenAPI::toJsonValue(m_tax_component_ref));
    }
    return obj;
}

QString OAITaxComponentAllocation::getRate() const {
    return m_rate;
}
void OAITaxComponentAllocation::setRate(const QString &rate) {
    m_rate = rate;
    m_rate_isSet = true;
}

bool OAITaxComponentAllocation::is_rate_Set() const{
    return m_rate_isSet;
}

bool OAITaxComponentAllocation::is_rate_Valid() const{
    return m_rate_isValid;
}

OAITaxComponentRef OAITaxComponentAllocation::getTaxComponentRef() const {
    return m_tax_component_ref;
}
void OAITaxComponentAllocation::setTaxComponentRef(const OAITaxComponentRef &tax_component_ref) {
    m_tax_component_ref = tax_component_ref;
    m_tax_component_ref_isSet = true;
}

bool OAITaxComponentAllocation::is_tax_component_ref_Set() const{
    return m_tax_component_ref_isSet;
}

bool OAITaxComponentAllocation::is_tax_component_ref_Valid() const{
    return m_tax_component_ref_isValid;
}

bool OAITaxComponentAllocation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_component_ref.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITaxComponentAllocation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
