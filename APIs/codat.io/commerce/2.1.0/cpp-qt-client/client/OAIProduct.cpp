/**
 * Commerce API
 * Codat's Commerce API allows you to access standardised data from over 11 commerce and POS systems.  Standardize how you connect to your customersâ€™ payment, PoS, and eCommerce systems. Retrieve orders, payouts, payments, and product data in the same way for all the leading commerce platforms.  [Read more...](https://docs.codat.io/commerce-api/overview)  [See our OpenAPI spec](https://github.com/codatio/oas) 
 *
 * The version of the OpenAPI document: 2.1.0
 * Contact: support@codat.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProduct.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProduct::OAIProduct(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProduct::OAIProduct() {
    this->initializeModel();
}

OAIProduct::~OAIProduct() {}

void OAIProduct::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_categorization_isSet = false;
    m_categorization_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_is_gift_card_isSet = false;
    m_is_gift_card_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_variants_isSet = false;
    m_variants_isValid = false;
}

void OAIProduct::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProduct::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_categorization_isValid = ::OpenAPI::fromJsonValue(m_categorization, json[QString("categorization")]);
    m_categorization_isSet = !json[QString("categorization")].isNull() && m_categorization_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_is_gift_card_isValid = ::OpenAPI::fromJsonValue(m_is_gift_card, json[QString("isGiftCard")]);
    m_is_gift_card_isSet = !json[QString("isGiftCard")].isNull() && m_is_gift_card_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_variants_isValid = ::OpenAPI::fromJsonValue(m_variants, json[QString("variants")]);
    m_variants_isSet = !json[QString("variants")].isNull() && m_variants_isValid;
}

QString OAIProduct::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProduct::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_categorization_isSet) {
        obj.insert(QString("categorization"), ::OpenAPI::toJsonValue(m_categorization));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_is_gift_card_isSet) {
        obj.insert(QString("isGiftCard"), ::OpenAPI::toJsonValue(m_is_gift_card));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_variants.size() > 0) {
        obj.insert(QString("variants"), ::OpenAPI::toJsonValue(m_variants));
    }
    return obj;
}

QString OAIProduct::getId() const {
    return m_id;
}
void OAIProduct::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIProduct::is_id_Set() const{
    return m_id_isSet;
}

bool OAIProduct::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIProduct::getCategorization() const {
    return m_categorization;
}
void OAIProduct::setCategorization(const QString &categorization) {
    m_categorization = categorization;
    m_categorization_isSet = true;
}

bool OAIProduct::is_categorization_Set() const{
    return m_categorization_isSet;
}

bool OAIProduct::is_categorization_Valid() const{
    return m_categorization_isValid;
}

QString OAIProduct::getDescription() const {
    return m_description;
}
void OAIProduct::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIProduct::is_description_Set() const{
    return m_description_isSet;
}

bool OAIProduct::is_description_Valid() const{
    return m_description_isValid;
}

bool OAIProduct::isIsGiftCard() const {
    return m_is_gift_card;
}
void OAIProduct::setIsGiftCard(const bool &is_gift_card) {
    m_is_gift_card = is_gift_card;
    m_is_gift_card_isSet = true;
}

bool OAIProduct::is_is_gift_card_Set() const{
    return m_is_gift_card_isSet;
}

bool OAIProduct::is_is_gift_card_Valid() const{
    return m_is_gift_card_isValid;
}

QString OAIProduct::getName() const {
    return m_name;
}
void OAIProduct::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIProduct::is_name_Set() const{
    return m_name_isSet;
}

bool OAIProduct::is_name_Valid() const{
    return m_name_isValid;
}

QList<OAIProductVariant> OAIProduct::getVariants() const {
    return m_variants;
}
void OAIProduct::setVariants(const QList<OAIProductVariant> &variants) {
    m_variants = variants;
    m_variants_isSet = true;
}

bool OAIProduct::is_variants_Set() const{
    return m_variants_isSet;
}

bool OAIProduct::is_variants_Valid() const{
    return m_variants_isValid;
}

bool OAIProduct::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_categorization_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_gift_card_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_variants.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProduct::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && true;
}

} // namespace OpenAPI
