/**
 * Commerce API
 * Codat's Commerce API allows you to access standardised data from over 11 commerce and POS systems.  Standardize how you connect to your customersâ€™ payment, PoS, and eCommerce systems. Retrieve orders, payouts, payments, and product data in the same way for all the leading commerce platforms.  [Read more...](https://docs.codat.io/commerce-api/overview)  [See our OpenAPI spec](https://github.com/codatio/oas) 
 *
 * The version of the OpenAPI document: 2.1.0
 * Contact: support@codat.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIServiceCharge.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIServiceCharge::OAIServiceCharge(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIServiceCharge::OAIServiceCharge() {
    this->initializeModel();
}

OAIServiceCharge::~OAIServiceCharge() {}

void OAIServiceCharge::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_quantity_isSet = false;
    m_quantity_isValid = false;

    m_tax_amount_isSet = false;
    m_tax_amount_isValid = false;

    m_tax_percentage_isSet = false;
    m_tax_percentage_isValid = false;

    m_taxes_isSet = false;
    m_taxes_isValid = false;

    m_total_amount_isSet = false;
    m_total_amount_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIServiceCharge::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIServiceCharge::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_quantity_isValid = ::OpenAPI::fromJsonValue(m_quantity, json[QString("quantity")]);
    m_quantity_isSet = !json[QString("quantity")].isNull() && m_quantity_isValid;

    m_tax_amount_isValid = ::OpenAPI::fromJsonValue(m_tax_amount, json[QString("taxAmount")]);
    m_tax_amount_isSet = !json[QString("taxAmount")].isNull() && m_tax_amount_isValid;

    m_tax_percentage_isValid = ::OpenAPI::fromJsonValue(m_tax_percentage, json[QString("taxPercentage")]);
    m_tax_percentage_isSet = !json[QString("taxPercentage")].isNull() && m_tax_percentage_isValid;

    m_taxes_isValid = ::OpenAPI::fromJsonValue(m_taxes, json[QString("taxes")]);
    m_taxes_isSet = !json[QString("taxes")].isNull() && m_taxes_isValid;

    m_total_amount_isValid = ::OpenAPI::fromJsonValue(m_total_amount, json[QString("totalAmount")]);
    m_total_amount_isSet = !json[QString("totalAmount")].isNull() && m_total_amount_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIServiceCharge::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIServiceCharge::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_quantity_isSet) {
        obj.insert(QString("quantity"), ::OpenAPI::toJsonValue(m_quantity));
    }
    if (m_tax_amount_isSet) {
        obj.insert(QString("taxAmount"), ::OpenAPI::toJsonValue(m_tax_amount));
    }
    if (m_tax_percentage_isSet) {
        obj.insert(QString("taxPercentage"), ::OpenAPI::toJsonValue(m_tax_percentage));
    }
    if (m_taxes.size() > 0) {
        obj.insert(QString("taxes"), ::OpenAPI::toJsonValue(m_taxes));
    }
    if (m_total_amount_isSet) {
        obj.insert(QString("totalAmount"), ::OpenAPI::toJsonValue(m_total_amount));
    }
    if (m_type.isSet()) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIServiceCharge::getDescription() const {
    return m_description;
}
void OAIServiceCharge::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIServiceCharge::is_description_Set() const{
    return m_description_isSet;
}

bool OAIServiceCharge::is_description_Valid() const{
    return m_description_isValid;
}

qint32 OAIServiceCharge::getQuantity() const {
    return m_quantity;
}
void OAIServiceCharge::setQuantity(const qint32 &quantity) {
    m_quantity = quantity;
    m_quantity_isSet = true;
}

bool OAIServiceCharge::is_quantity_Set() const{
    return m_quantity_isSet;
}

bool OAIServiceCharge::is_quantity_Valid() const{
    return m_quantity_isValid;
}

QString OAIServiceCharge::getTaxAmount() const {
    return m_tax_amount;
}
void OAIServiceCharge::setTaxAmount(const QString &tax_amount) {
    m_tax_amount = tax_amount;
    m_tax_amount_isSet = true;
}

bool OAIServiceCharge::is_tax_amount_Set() const{
    return m_tax_amount_isSet;
}

bool OAIServiceCharge::is_tax_amount_Valid() const{
    return m_tax_amount_isValid;
}

QString OAIServiceCharge::getTaxPercentage() const {
    return m_tax_percentage;
}
void OAIServiceCharge::setTaxPercentage(const QString &tax_percentage) {
    m_tax_percentage = tax_percentage;
    m_tax_percentage_isSet = true;
}

bool OAIServiceCharge::is_tax_percentage_Set() const{
    return m_tax_percentage_isSet;
}

bool OAIServiceCharge::is_tax_percentage_Valid() const{
    return m_tax_percentage_isValid;
}

QList<OAITaxComponentAllocation> OAIServiceCharge::getTaxes() const {
    return m_taxes;
}
void OAIServiceCharge::setTaxes(const QList<OAITaxComponentAllocation> &taxes) {
    m_taxes = taxes;
    m_taxes_isSet = true;
}

bool OAIServiceCharge::is_taxes_Set() const{
    return m_taxes_isSet;
}

bool OAIServiceCharge::is_taxes_Valid() const{
    return m_taxes_isValid;
}

QString OAIServiceCharge::getTotalAmount() const {
    return m_total_amount;
}
void OAIServiceCharge::setTotalAmount(const QString &total_amount) {
    m_total_amount = total_amount;
    m_total_amount_isSet = true;
}

bool OAIServiceCharge::is_total_amount_Set() const{
    return m_total_amount_isSet;
}

bool OAIServiceCharge::is_total_amount_Valid() const{
    return m_total_amount_isValid;
}

OAIServiceChargeType OAIServiceCharge::getType() const {
    return m_type;
}
void OAIServiceCharge::setType(const OAIServiceChargeType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIServiceCharge::is_type_Set() const{
    return m_type_isSet;
}

bool OAIServiceCharge::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIServiceCharge::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_taxes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIServiceCharge::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
