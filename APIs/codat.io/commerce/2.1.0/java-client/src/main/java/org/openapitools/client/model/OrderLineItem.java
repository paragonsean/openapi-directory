/*
 * Commerce API
 * Codat's Commerce API allows you to access standardised data from over 11 commerce and POS systems.  Standardize how you connect to your customersâ€™ payment, PoS, and eCommerce systems. Retrieve orders, payouts, payments, and product data in the same way for all the leading commerce platforms.  [Read more...](https://docs.codat.io/commerce-api/overview)  [See our OpenAPI spec](https://github.com/codatio/oas) 
 *
 * The version of the OpenAPI document: 2.1.0
 * Contact: support@codat.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.OrderDiscountAllocation;
import org.openapitools.client.model.ProductRef;
import org.openapitools.client.model.ProductVariantRef;
import org.openapitools.client.model.TaxComponentAllocation;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * OrderLineItem
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:18:00.334932-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class OrderLineItem {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_DISCOUNT_ALLOCATIONS = "discountAllocations";
  @SerializedName(SERIALIZED_NAME_DISCOUNT_ALLOCATIONS)
  private List<OrderDiscountAllocation> discountAllocations = new ArrayList<>();

  public static final String SERIALIZED_NAME_PRODUCT_REF = "productRef";
  @SerializedName(SERIALIZED_NAME_PRODUCT_REF)
  private ProductRef productRef;

  public static final String SERIALIZED_NAME_PRODUCT_VARIANT_REF = "productVariantRef";
  @SerializedName(SERIALIZED_NAME_PRODUCT_VARIANT_REF)
  private ProductVariantRef productVariantRef;

  public static final String SERIALIZED_NAME_QUANTITY = "quantity";
  @SerializedName(SERIALIZED_NAME_QUANTITY)
  private String quantity;

  public static final String SERIALIZED_NAME_TAX_PERCENTAGE = "taxPercentage";
  @SerializedName(SERIALIZED_NAME_TAX_PERCENTAGE)
  private String taxPercentage;

  public static final String SERIALIZED_NAME_TAXES = "taxes";
  @SerializedName(SERIALIZED_NAME_TAXES)
  private List<TaxComponentAllocation> taxes = new ArrayList<>();

  public static final String SERIALIZED_NAME_TOTAL_AMOUNT = "totalAmount";
  @SerializedName(SERIALIZED_NAME_TOTAL_AMOUNT)
  private String totalAmount;

  public static final String SERIALIZED_NAME_TOTAL_TAX_AMOUNT = "totalTaxAmount";
  @SerializedName(SERIALIZED_NAME_TOTAL_TAX_AMOUNT)
  private String totalTaxAmount;

  public static final String SERIALIZED_NAME_UNIT_PRICE = "unitPrice";
  @SerializedName(SERIALIZED_NAME_UNIT_PRICE)
  private String unitPrice;

  public OrderLineItem() {
  }

  public OrderLineItem id(String id) {
    this.id = id;
    return this;
  }

  /**
   * A unique, persistent identifier for this record
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public OrderLineItem discountAllocations(List<OrderDiscountAllocation> discountAllocations) {
    this.discountAllocations = discountAllocations;
    return this;
  }

  public OrderLineItem addDiscountAllocationsItem(OrderDiscountAllocation discountAllocationsItem) {
    if (this.discountAllocations == null) {
      this.discountAllocations = new ArrayList<>();
    }
    this.discountAllocations.add(discountAllocationsItem);
    return this;
  }

  /**
   * Get discountAllocations
   * @return discountAllocations
   */
  @javax.annotation.Nullable
  public List<OrderDiscountAllocation> getDiscountAllocations() {
    return discountAllocations;
  }

  public void setDiscountAllocations(List<OrderDiscountAllocation> discountAllocations) {
    this.discountAllocations = discountAllocations;
  }


  public OrderLineItem productRef(ProductRef productRef) {
    this.productRef = productRef;
    return this;
  }

  /**
   * Get productRef
   * @return productRef
   */
  @javax.annotation.Nullable
  public ProductRef getProductRef() {
    return productRef;
  }

  public void setProductRef(ProductRef productRef) {
    this.productRef = productRef;
  }


  public OrderLineItem productVariantRef(ProductVariantRef productVariantRef) {
    this.productVariantRef = productVariantRef;
    return this;
  }

  /**
   * Get productVariantRef
   * @return productVariantRef
   */
  @javax.annotation.Nullable
  public ProductVariantRef getProductVariantRef() {
    return productVariantRef;
  }

  public void setProductVariantRef(ProductVariantRef productVariantRef) {
    this.productVariantRef = productVariantRef;
  }


  public OrderLineItem quantity(String quantity) {
    this.quantity = quantity;
    return this;
  }

  /**
   * Number of units of the product sold. For refunds, quantity is a negative value. 
   * @return quantity
   */
  @javax.annotation.Nullable
  public String getQuantity() {
    return quantity;
  }

  public void setQuantity(String quantity) {
    this.quantity = quantity;
  }


  public OrderLineItem taxPercentage(String taxPercentage) {
    this.taxPercentage = taxPercentage;
    return this;
  }

  /**
   * Percentage rate (from 0 to 100) of any sale tax applied to the unit amount.
   * @return taxPercentage
   */
  @javax.annotation.Nullable
  public String getTaxPercentage() {
    return taxPercentage;
  }

  public void setTaxPercentage(String taxPercentage) {
    this.taxPercentage = taxPercentage;
  }


  public OrderLineItem taxes(List<TaxComponentAllocation> taxes) {
    this.taxes = taxes;
    return this;
  }

  public OrderLineItem addTaxesItem(TaxComponentAllocation taxesItem) {
    if (this.taxes == null) {
      this.taxes = new ArrayList<>();
    }
    this.taxes.add(taxesItem);
    return this;
  }

  /**
   * Taxes breakdown as applied to order lines.
   * @return taxes
   */
  @javax.annotation.Nullable
  public List<TaxComponentAllocation> getTaxes() {
    return taxes;
  }

  public void setTaxes(List<TaxComponentAllocation> taxes) {
    this.taxes = taxes;
  }


  public OrderLineItem totalAmount(String totalAmount) {
    this.totalAmount = totalAmount;
    return this;
  }

  /**
   * Total price of the line item, including discounts, tax and minus any refunds.
   * @return totalAmount
   */
  @javax.annotation.Nullable
  public String getTotalAmount() {
    return totalAmount;
  }

  public void setTotalAmount(String totalAmount) {
    this.totalAmount = totalAmount;
  }


  public OrderLineItem totalTaxAmount(String totalTaxAmount) {
    this.totalTaxAmount = totalTaxAmount;
    return this;
  }

  /**
   * Total amount of tax applied to the line item.
   * @return totalTaxAmount
   */
  @javax.annotation.Nullable
  public String getTotalTaxAmount() {
    return totalTaxAmount;
  }

  public void setTotalTaxAmount(String totalTaxAmount) {
    this.totalTaxAmount = totalTaxAmount;
  }


  public OrderLineItem unitPrice(String unitPrice) {
    this.unitPrice = unitPrice;
    return this;
  }

  /**
   * Price per unit of goods or service.
   * @return unitPrice
   */
  @javax.annotation.Nullable
  public String getUnitPrice() {
    return unitPrice;
  }

  public void setUnitPrice(String unitPrice) {
    this.unitPrice = unitPrice;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OrderLineItem orderLineItem = (OrderLineItem) o;
    return Objects.equals(this.id, orderLineItem.id) &&
        Objects.equals(this.discountAllocations, orderLineItem.discountAllocations) &&
        Objects.equals(this.productRef, orderLineItem.productRef) &&
        Objects.equals(this.productVariantRef, orderLineItem.productVariantRef) &&
        Objects.equals(this.quantity, orderLineItem.quantity) &&
        Objects.equals(this.taxPercentage, orderLineItem.taxPercentage) &&
        Objects.equals(this.taxes, orderLineItem.taxes) &&
        Objects.equals(this.totalAmount, orderLineItem.totalAmount) &&
        Objects.equals(this.totalTaxAmount, orderLineItem.totalTaxAmount) &&
        Objects.equals(this.unitPrice, orderLineItem.unitPrice);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, discountAllocations, productRef, productVariantRef, quantity, taxPercentage, taxes, totalAmount, totalTaxAmount, unitPrice);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OrderLineItem {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    discountAllocations: ").append(toIndentedString(discountAllocations)).append("\n");
    sb.append("    productRef: ").append(toIndentedString(productRef)).append("\n");
    sb.append("    productVariantRef: ").append(toIndentedString(productVariantRef)).append("\n");
    sb.append("    quantity: ").append(toIndentedString(quantity)).append("\n");
    sb.append("    taxPercentage: ").append(toIndentedString(taxPercentage)).append("\n");
    sb.append("    taxes: ").append(toIndentedString(taxes)).append("\n");
    sb.append("    totalAmount: ").append(toIndentedString(totalAmount)).append("\n");
    sb.append("    totalTaxAmount: ").append(toIndentedString(totalTaxAmount)).append("\n");
    sb.append("    unitPrice: ").append(toIndentedString(unitPrice)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("discountAllocations");
    openapiFields.add("productRef");
    openapiFields.add("productVariantRef");
    openapiFields.add("quantity");
    openapiFields.add("taxPercentage");
    openapiFields.add("taxes");
    openapiFields.add("totalAmount");
    openapiFields.add("totalTaxAmount");
    openapiFields.add("unitPrice");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OrderLineItem
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OrderLineItem.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OrderLineItem is not found in the empty JSON string", OrderLineItem.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OrderLineItem.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OrderLineItem` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : OrderLineItem.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (jsonObj.get("discountAllocations") != null && !jsonObj.get("discountAllocations").isJsonNull()) {
        JsonArray jsonArraydiscountAllocations = jsonObj.getAsJsonArray("discountAllocations");
        if (jsonArraydiscountAllocations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("discountAllocations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `discountAllocations` to be an array in the JSON string but got `%s`", jsonObj.get("discountAllocations").toString()));
          }

          // validate the optional field `discountAllocations` (array)
          for (int i = 0; i < jsonArraydiscountAllocations.size(); i++) {
            OrderDiscountAllocation.validateJsonElement(jsonArraydiscountAllocations.get(i));
          };
        }
      }
      // validate the optional field `productRef`
      if (jsonObj.get("productRef") != null && !jsonObj.get("productRef").isJsonNull()) {
        ProductRef.validateJsonElement(jsonObj.get("productRef"));
      }
      // validate the optional field `productVariantRef`
      if (jsonObj.get("productVariantRef") != null && !jsonObj.get("productVariantRef").isJsonNull()) {
        ProductVariantRef.validateJsonElement(jsonObj.get("productVariantRef"));
      }
      if (jsonObj.get("taxes") != null && !jsonObj.get("taxes").isJsonNull()) {
        JsonArray jsonArraytaxes = jsonObj.getAsJsonArray("taxes");
        if (jsonArraytaxes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("taxes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `taxes` to be an array in the JSON string but got `%s`", jsonObj.get("taxes").toString()));
          }

          // validate the optional field `taxes` (array)
          for (int i = 0; i < jsonArraytaxes.size(); i++) {
            TaxComponentAllocation.validateJsonElement(jsonArraytaxes.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OrderLineItem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OrderLineItem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OrderLineItem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OrderLineItem.class));

       return (TypeAdapter<T>) new TypeAdapter<OrderLineItem>() {
           @Override
           public void write(JsonWriter out, OrderLineItem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OrderLineItem read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OrderLineItem given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OrderLineItem
   * @throws IOException if the JSON string is invalid with respect to OrderLineItem
   */
  public static OrderLineItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OrderLineItem.class);
  }

  /**
   * Convert an instance of OrderLineItem to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

