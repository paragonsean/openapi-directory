/*
 * Commerce API
 * Codat's Commerce API allows you to access standardised data from over 11 commerce and POS systems.  Standardize how you connect to your customers’ payment, PoS, and eCommerce systems. Retrieve orders, payouts, payments, and product data in the same way for all the leading commerce platforms.  [Read more...](https://docs.codat.io/commerce-api/overview)  [See our OpenAPI spec](https://github.com/codatio/oas) 
 *
 * The version of the OpenAPI document: 2.1.0
 * Contact: support@codat.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.JsonElement;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * The type of the platform transaction:   - &#x60;Unknown&#x60;   - &#x60;FailedPayout&#x60; — Failed transfer of funds from the seller&#39;s merchant account to their bank account.   - &#x60;Payment&#x60; — Credit and debit card payments.   - &#x60;PaymentFee&#x60; — Payment provider&#39;s fee on each card payment.   - &#x60;PaymentFeeRefund&#x60; — Payment provider&#39;s fee that has been refunded to the seller.   - &#x60;Payout&#x60; — Transfer of funds from the seller&#39;s merchant account to their bank account.   - &#x60;Refund&#x60; — Refunds to a customer&#39;s credit or debit card.   - &#x60;Transfer&#x60; — Secure transfer of funds to the seller&#39;s bank account.  
 */
@JsonAdapter(TransactionType.Adapter.class)
public enum TransactionType {
  
  PAYMENT("Payment"),
  
  REFUND("Refund"),
  
  PAYOUT("Payout"),
  
  FAILED_PAYOUT("FailedPayout"),
  
  TRANSFER("Transfer"),
  
  PAYMENT_FEE("PaymentFee"),
  
  PAYMENT_FEE_REFUND("PaymentFeeRefund"),
  
  UNKNOWN("Unknown");

  private String value;

  TransactionType(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static TransactionType fromValue(String value) {
    for (TransactionType b : TransactionType.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<TransactionType> {
    @Override
    public void write(final JsonWriter jsonWriter, final TransactionType enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public TransactionType read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return TransactionType.fromValue(value);
    }
  }

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    String value = jsonElement.getAsString();
    TransactionType.fromValue(value);
  }
}

