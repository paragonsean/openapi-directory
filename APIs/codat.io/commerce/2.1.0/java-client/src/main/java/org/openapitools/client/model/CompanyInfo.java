/*
 * Commerce API
 * Codat's Commerce API allows you to access standardised data from over 11 commerce and POS systems.  Standardize how you connect to your customersâ€™ payment, PoS, and eCommerce systems. Retrieve orders, payouts, payments, and product data in the same way for all the leading commerce platforms.  [Read more...](https://docs.codat.io/commerce-api/overview)  [See our OpenAPI spec](https://github.com/codatio/oas) 
 *
 * The version of the OpenAPI document: 2.1.0
 * Contact: support@codat.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.AccountBalance;
import org.openapitools.client.model.Address;
import org.openapitools.client.model.PhoneNumber;
import org.openapitools.client.model.Weblink;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * In the Codat system, company information includes standard commercial details about  a linked company, such as their address, phone number, and company registration.  Explore our [data coverage](https://knowledge.codat.io/supported-features/commerce?view&#x3D;tab-by-data-type&amp;dataType&#x3D;companyInfo) for this data type. 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:18:00.334932-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CompanyInfo {
  public static final String SERIALIZED_NAME_CREATED_DATE = "createdDate";
  @SerializedName(SERIALIZED_NAME_CREATED_DATE)
  private String createdDate;

  public static final String SERIALIZED_NAME_MODIFIED_DATE = "modifiedDate";
  @SerializedName(SERIALIZED_NAME_MODIFIED_DATE)
  private String modifiedDate;

  public static final String SERIALIZED_NAME_SOURCE_MODIFIED_DATE = "sourceModifiedDate";
  @SerializedName(SERIALIZED_NAME_SOURCE_MODIFIED_DATE)
  private String sourceModifiedDate;

  public static final String SERIALIZED_NAME_ACCOUNT_BALANCES = "accountBalances";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_BALANCES)
  private List<AccountBalance> accountBalances = new ArrayList<>();

  public static final String SERIALIZED_NAME_ADDRESSES = "addresses";
  @SerializedName(SERIALIZED_NAME_ADDRESSES)
  private List<Address> addresses = new ArrayList<>();

  public static final String SERIALIZED_NAME_BASE_CURRENCY = "baseCurrency";
  @SerializedName(SERIALIZED_NAME_BASE_CURRENCY)
  private String baseCurrency;

  public static final String SERIALIZED_NAME_COMMERCE_PLATFORM_REF = "commercePlatformRef";
  @SerializedName(SERIALIZED_NAME_COMMERCE_PLATFORM_REF)
  private String commercePlatformRef;

  public static final String SERIALIZED_NAME_COMPANY_LEGAL_NAME = "companyLegalName";
  @SerializedName(SERIALIZED_NAME_COMPANY_LEGAL_NAME)
  private String companyLegalName;

  public static final String SERIALIZED_NAME_COMPANY_NAME = "companyName";
  @SerializedName(SERIALIZED_NAME_COMPANY_NAME)
  private String companyName;

  public static final String SERIALIZED_NAME_PHONE_NUMBERS = "phoneNumbers";
  @SerializedName(SERIALIZED_NAME_PHONE_NUMBERS)
  private List<PhoneNumber> phoneNumbers = new ArrayList<>();

  public static final String SERIALIZED_NAME_REGISTRATION_NUMBER = "registrationNumber";
  @SerializedName(SERIALIZED_NAME_REGISTRATION_NUMBER)
  private String registrationNumber;

  public static final String SERIALIZED_NAME_SOURCE_URLS = "sourceUrls";
  @SerializedName(SERIALIZED_NAME_SOURCE_URLS)
  private Map<String, String> sourceUrls = new HashMap<>();

  public static final String SERIALIZED_NAME_WEB_LINKS = "webLinks";
  @SerializedName(SERIALIZED_NAME_WEB_LINKS)
  private List<Weblink> webLinks = new ArrayList<>();

  public CompanyInfo() {
  }

  public CompanyInfo createdDate(String createdDate) {
    this.createdDate = createdDate;
    return this;
  }

  /**
   * In Codat&#39;s data model, dates and times are represented using the &lt;a class&#x3D;\&quot;external\&quot; href&#x3D;\&quot;https://en.wikipedia.org/wiki/ISO_8601\&quot; target&#x3D;\&quot;_blank\&quot;&gt;ISO 8601 standard&lt;/a&gt;. Date and time fields are formatted as strings; for example:  &#x60;&#x60;&#x60; 2020-10-08T22:40:50Z 2021-01-01T00:00:00 &#x60;&#x60;&#x60;    When syncing data that contains &#x60;DateTime&#x60; fields from Codat, make sure you support the following cases when reading time information:  - Coordinated Universal Time (UTC): &#x60;2021-11-15T06:00:00Z&#x60; - Unqualified local time: &#x60;2021-11-15T01:00:00&#x60; - UTC time offsets: &#x60;2021-11-15T01:00:00-05:00&#x60;  &gt; Time zones &gt;  &gt; Not all dates from Codat will contain information about time zones.   &gt; Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
   * @return createdDate
   */
  @javax.annotation.Nullable
  public String getCreatedDate() {
    return createdDate;
  }

  public void setCreatedDate(String createdDate) {
    this.createdDate = createdDate;
  }


  public CompanyInfo modifiedDate(String modifiedDate) {
    this.modifiedDate = modifiedDate;
    return this;
  }

  /**
   * In Codat&#39;s data model, dates and times are represented using the &lt;a class&#x3D;\&quot;external\&quot; href&#x3D;\&quot;https://en.wikipedia.org/wiki/ISO_8601\&quot; target&#x3D;\&quot;_blank\&quot;&gt;ISO 8601 standard&lt;/a&gt;. Date and time fields are formatted as strings; for example:  &#x60;&#x60;&#x60; 2020-10-08T22:40:50Z 2021-01-01T00:00:00 &#x60;&#x60;&#x60;    When syncing data that contains &#x60;DateTime&#x60; fields from Codat, make sure you support the following cases when reading time information:  - Coordinated Universal Time (UTC): &#x60;2021-11-15T06:00:00Z&#x60; - Unqualified local time: &#x60;2021-11-15T01:00:00&#x60; - UTC time offsets: &#x60;2021-11-15T01:00:00-05:00&#x60;  &gt; Time zones &gt;  &gt; Not all dates from Codat will contain information about time zones.   &gt; Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
   * @return modifiedDate
   */
  @javax.annotation.Nullable
  public String getModifiedDate() {
    return modifiedDate;
  }

  public void setModifiedDate(String modifiedDate) {
    this.modifiedDate = modifiedDate;
  }


  public CompanyInfo sourceModifiedDate(String sourceModifiedDate) {
    this.sourceModifiedDate = sourceModifiedDate;
    return this;
  }

  /**
   * In Codat&#39;s data model, dates and times are represented using the &lt;a class&#x3D;\&quot;external\&quot; href&#x3D;\&quot;https://en.wikipedia.org/wiki/ISO_8601\&quot; target&#x3D;\&quot;_blank\&quot;&gt;ISO 8601 standard&lt;/a&gt;. Date and time fields are formatted as strings; for example:  &#x60;&#x60;&#x60; 2020-10-08T22:40:50Z 2021-01-01T00:00:00 &#x60;&#x60;&#x60;    When syncing data that contains &#x60;DateTime&#x60; fields from Codat, make sure you support the following cases when reading time information:  - Coordinated Universal Time (UTC): &#x60;2021-11-15T06:00:00Z&#x60; - Unqualified local time: &#x60;2021-11-15T01:00:00&#x60; - UTC time offsets: &#x60;2021-11-15T01:00:00-05:00&#x60;  &gt; Time zones &gt;  &gt; Not all dates from Codat will contain information about time zones.   &gt; Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
   * @return sourceModifiedDate
   */
  @javax.annotation.Nullable
  public String getSourceModifiedDate() {
    return sourceModifiedDate;
  }

  public void setSourceModifiedDate(String sourceModifiedDate) {
    this.sourceModifiedDate = sourceModifiedDate;
  }


  public CompanyInfo accountBalances(List<AccountBalance> accountBalances) {
    this.accountBalances = accountBalances;
    return this;
  }

  public CompanyInfo addAccountBalancesItem(AccountBalance accountBalancesItem) {
    if (this.accountBalances == null) {
      this.accountBalances = new ArrayList<>();
    }
    this.accountBalances.add(accountBalancesItem);
    return this;
  }

  /**
   * The available and current cash balances for the company&#39;s accounts
   * @return accountBalances
   */
  @javax.annotation.Nullable
  public List<AccountBalance> getAccountBalances() {
    return accountBalances;
  }

  public void setAccountBalances(List<AccountBalance> accountBalances) {
    this.accountBalances = accountBalances;
  }


  public CompanyInfo addresses(List<Address> addresses) {
    this.addresses = addresses;
    return this;
  }

  public CompanyInfo addAddressesItem(Address addressesItem) {
    if (this.addresses == null) {
      this.addresses = new ArrayList<>();
    }
    this.addresses.add(addressesItem);
    return this;
  }

  /**
   * Addresses associated with the company
   * @return addresses
   */
  @javax.annotation.Nullable
  public List<Address> getAddresses() {
    return addresses;
  }

  public void setAddresses(List<Address> addresses) {
    this.addresses = addresses;
  }


  public CompanyInfo baseCurrency(String baseCurrency) {
    this.baseCurrency = baseCurrency;
    return this;
  }

  /**
   * The currency data type in Codat is the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code, e.g. _GBP_.  ## Unknown currencies  In line with the ISO 4217 specification, the code _XXX_ is used when the data source does not return a currency for a transaction.   There are only a very small number of edge cases where this currency code is returned by the Codat system.
   * @return baseCurrency
   */
  @javax.annotation.Nullable
  public String getBaseCurrency() {
    return baseCurrency;
  }

  public void setBaseCurrency(String baseCurrency) {
    this.baseCurrency = baseCurrency;
  }


  public CompanyInfo commercePlatformRef(String commercePlatformRef) {
    this.commercePlatformRef = commercePlatformRef;
    return this;
  }

  /**
   * Identifier or reference for the company in the commerce platform
   * @return commercePlatformRef
   */
  @javax.annotation.Nullable
  public String getCommercePlatformRef() {
    return commercePlatformRef;
  }

  public void setCommercePlatformRef(String commercePlatformRef) {
    this.commercePlatformRef = commercePlatformRef;
  }


  public CompanyInfo companyLegalName(String companyLegalName) {
    this.companyLegalName = companyLegalName;
    return this;
  }

  /**
   * The full legal name of the company
   * @return companyLegalName
   */
  @javax.annotation.Nullable
  public String getCompanyLegalName() {
    return companyLegalName;
  }

  public void setCompanyLegalName(String companyLegalName) {
    this.companyLegalName = companyLegalName;
  }


  public CompanyInfo companyName(String companyName) {
    this.companyName = companyName;
    return this;
  }

  /**
   * The name of the company
   * @return companyName
   */
  @javax.annotation.Nullable
  public String getCompanyName() {
    return companyName;
  }

  public void setCompanyName(String companyName) {
    this.companyName = companyName;
  }


  public CompanyInfo phoneNumbers(List<PhoneNumber> phoneNumbers) {
    this.phoneNumbers = phoneNumbers;
    return this;
  }

  public CompanyInfo addPhoneNumbersItem(PhoneNumber phoneNumbersItem) {
    if (this.phoneNumbers == null) {
      this.phoneNumbers = new ArrayList<>();
    }
    this.phoneNumbers.add(phoneNumbersItem);
    return this;
  }

  /**
   * Phone numbers associated with the company
   * @return phoneNumbers
   */
  @javax.annotation.Nullable
  public List<PhoneNumber> getPhoneNumbers() {
    return phoneNumbers;
  }

  public void setPhoneNumbers(List<PhoneNumber> phoneNumbers) {
    this.phoneNumbers = phoneNumbers;
  }


  public CompanyInfo registrationNumber(String registrationNumber) {
    this.registrationNumber = registrationNumber;
    return this;
  }

  /**
   * The registration number of the company
   * @return registrationNumber
   */
  @javax.annotation.Nullable
  public String getRegistrationNumber() {
    return registrationNumber;
  }

  public void setRegistrationNumber(String registrationNumber) {
    this.registrationNumber = registrationNumber;
  }


  public CompanyInfo sourceUrls(Map<String, String> sourceUrls) {
    this.sourceUrls = sourceUrls;
    return this;
  }

  public CompanyInfo putSourceUrlsItem(String key, String sourceUrlsItem) {
    if (this.sourceUrls == null) {
      this.sourceUrls = new HashMap<>();
    }
    this.sourceUrls.put(key, sourceUrlsItem);
    return this;
  }

  /**
   * URL addresses for the originating system. For example, potential use cases include &#39;deeplinking&#39; to the originating system
   * @return sourceUrls
   */
  @javax.annotation.Nullable
  public Map<String, String> getSourceUrls() {
    return sourceUrls;
  }

  public void setSourceUrls(Map<String, String> sourceUrls) {
    this.sourceUrls = sourceUrls;
  }


  public CompanyInfo webLinks(List<Weblink> webLinks) {
    this.webLinks = webLinks;
    return this;
  }

  public CompanyInfo addWebLinksItem(Weblink webLinksItem) {
    if (this.webLinks == null) {
      this.webLinks = new ArrayList<>();
    }
    this.webLinks.add(webLinksItem);
    return this;
  }

  /**
   * Weblinks associated with the company
   * @return webLinks
   */
  @javax.annotation.Nullable
  public List<Weblink> getWebLinks() {
    return webLinks;
  }

  public void setWebLinks(List<Weblink> webLinks) {
    this.webLinks = webLinks;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CompanyInfo companyInfo = (CompanyInfo) o;
    return Objects.equals(this.createdDate, companyInfo.createdDate) &&
        Objects.equals(this.modifiedDate, companyInfo.modifiedDate) &&
        Objects.equals(this.sourceModifiedDate, companyInfo.sourceModifiedDate) &&
        Objects.equals(this.accountBalances, companyInfo.accountBalances) &&
        Objects.equals(this.addresses, companyInfo.addresses) &&
        Objects.equals(this.baseCurrency, companyInfo.baseCurrency) &&
        Objects.equals(this.commercePlatformRef, companyInfo.commercePlatformRef) &&
        Objects.equals(this.companyLegalName, companyInfo.companyLegalName) &&
        Objects.equals(this.companyName, companyInfo.companyName) &&
        Objects.equals(this.phoneNumbers, companyInfo.phoneNumbers) &&
        Objects.equals(this.registrationNumber, companyInfo.registrationNumber) &&
        Objects.equals(this.sourceUrls, companyInfo.sourceUrls) &&
        Objects.equals(this.webLinks, companyInfo.webLinks);
  }

  @Override
  public int hashCode() {
    return Objects.hash(createdDate, modifiedDate, sourceModifiedDate, accountBalances, addresses, baseCurrency, commercePlatformRef, companyLegalName, companyName, phoneNumbers, registrationNumber, sourceUrls, webLinks);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CompanyInfo {\n");
    sb.append("    createdDate: ").append(toIndentedString(createdDate)).append("\n");
    sb.append("    modifiedDate: ").append(toIndentedString(modifiedDate)).append("\n");
    sb.append("    sourceModifiedDate: ").append(toIndentedString(sourceModifiedDate)).append("\n");
    sb.append("    accountBalances: ").append(toIndentedString(accountBalances)).append("\n");
    sb.append("    addresses: ").append(toIndentedString(addresses)).append("\n");
    sb.append("    baseCurrency: ").append(toIndentedString(baseCurrency)).append("\n");
    sb.append("    commercePlatformRef: ").append(toIndentedString(commercePlatformRef)).append("\n");
    sb.append("    companyLegalName: ").append(toIndentedString(companyLegalName)).append("\n");
    sb.append("    companyName: ").append(toIndentedString(companyName)).append("\n");
    sb.append("    phoneNumbers: ").append(toIndentedString(phoneNumbers)).append("\n");
    sb.append("    registrationNumber: ").append(toIndentedString(registrationNumber)).append("\n");
    sb.append("    sourceUrls: ").append(toIndentedString(sourceUrls)).append("\n");
    sb.append("    webLinks: ").append(toIndentedString(webLinks)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("createdDate");
    openapiFields.add("modifiedDate");
    openapiFields.add("sourceModifiedDate");
    openapiFields.add("accountBalances");
    openapiFields.add("addresses");
    openapiFields.add("baseCurrency");
    openapiFields.add("commercePlatformRef");
    openapiFields.add("companyLegalName");
    openapiFields.add("companyName");
    openapiFields.add("phoneNumbers");
    openapiFields.add("registrationNumber");
    openapiFields.add("sourceUrls");
    openapiFields.add("webLinks");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CompanyInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CompanyInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CompanyInfo is not found in the empty JSON string", CompanyInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CompanyInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CompanyInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("createdDate") != null && !jsonObj.get("createdDate").isJsonNull()) && !jsonObj.get("createdDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createdDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createdDate").toString()));
      }
      if ((jsonObj.get("modifiedDate") != null && !jsonObj.get("modifiedDate").isJsonNull()) && !jsonObj.get("modifiedDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `modifiedDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("modifiedDate").toString()));
      }
      if ((jsonObj.get("sourceModifiedDate") != null && !jsonObj.get("sourceModifiedDate").isJsonNull()) && !jsonObj.get("sourceModifiedDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourceModifiedDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sourceModifiedDate").toString()));
      }
      if (jsonObj.get("accountBalances") != null && !jsonObj.get("accountBalances").isJsonNull()) {
        JsonArray jsonArrayaccountBalances = jsonObj.getAsJsonArray("accountBalances");
        if (jsonArrayaccountBalances != null) {
          // ensure the json data is an array
          if (!jsonObj.get("accountBalances").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `accountBalances` to be an array in the JSON string but got `%s`", jsonObj.get("accountBalances").toString()));
          }

          // validate the optional field `accountBalances` (array)
          for (int i = 0; i < jsonArrayaccountBalances.size(); i++) {
            AccountBalance.validateJsonElement(jsonArrayaccountBalances.get(i));
          };
        }
      }
      if (jsonObj.get("addresses") != null && !jsonObj.get("addresses").isJsonNull()) {
        JsonArray jsonArrayaddresses = jsonObj.getAsJsonArray("addresses");
        if (jsonArrayaddresses != null) {
          // ensure the json data is an array
          if (!jsonObj.get("addresses").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `addresses` to be an array in the JSON string but got `%s`", jsonObj.get("addresses").toString()));
          }

          // validate the optional field `addresses` (array)
          for (int i = 0; i < jsonArrayaddresses.size(); i++) {
            Address.validateJsonElement(jsonArrayaddresses.get(i));
          };
        }
      }
      if ((jsonObj.get("baseCurrency") != null && !jsonObj.get("baseCurrency").isJsonNull()) && !jsonObj.get("baseCurrency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `baseCurrency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("baseCurrency").toString()));
      }
      if ((jsonObj.get("commercePlatformRef") != null && !jsonObj.get("commercePlatformRef").isJsonNull()) && !jsonObj.get("commercePlatformRef").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `commercePlatformRef` to be a primitive type in the JSON string but got `%s`", jsonObj.get("commercePlatformRef").toString()));
      }
      if ((jsonObj.get("companyLegalName") != null && !jsonObj.get("companyLegalName").isJsonNull()) && !jsonObj.get("companyLegalName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `companyLegalName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("companyLegalName").toString()));
      }
      if ((jsonObj.get("companyName") != null && !jsonObj.get("companyName").isJsonNull()) && !jsonObj.get("companyName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `companyName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("companyName").toString()));
      }
      if (jsonObj.get("phoneNumbers") != null && !jsonObj.get("phoneNumbers").isJsonNull()) {
        JsonArray jsonArrayphoneNumbers = jsonObj.getAsJsonArray("phoneNumbers");
        if (jsonArrayphoneNumbers != null) {
          // ensure the json data is an array
          if (!jsonObj.get("phoneNumbers").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `phoneNumbers` to be an array in the JSON string but got `%s`", jsonObj.get("phoneNumbers").toString()));
          }

          // validate the optional field `phoneNumbers` (array)
          for (int i = 0; i < jsonArrayphoneNumbers.size(); i++) {
            PhoneNumber.validateJsonElement(jsonArrayphoneNumbers.get(i));
          };
        }
      }
      if ((jsonObj.get("registrationNumber") != null && !jsonObj.get("registrationNumber").isJsonNull()) && !jsonObj.get("registrationNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `registrationNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("registrationNumber").toString()));
      }
      if (jsonObj.get("webLinks") != null && !jsonObj.get("webLinks").isJsonNull()) {
        JsonArray jsonArraywebLinks = jsonObj.getAsJsonArray("webLinks");
        if (jsonArraywebLinks != null) {
          // ensure the json data is an array
          if (!jsonObj.get("webLinks").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `webLinks` to be an array in the JSON string but got `%s`", jsonObj.get("webLinks").toString()));
          }

          // validate the optional field `webLinks` (array)
          for (int i = 0; i < jsonArraywebLinks.size(); i++) {
            Weblink.validateJsonElement(jsonArraywebLinks.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CompanyInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CompanyInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CompanyInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CompanyInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<CompanyInfo>() {
           @Override
           public void write(JsonWriter out, CompanyInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CompanyInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CompanyInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CompanyInfo
   * @throws IOException if the JSON string is invalid with respect to CompanyInfo
   */
  public static CompanyInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CompanyInfo.class);
  }

  /**
   * Convert an instance of CompanyInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

