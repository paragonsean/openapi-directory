# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.address import Address
from openapi_server.models.customer_all_of_default_currency import CustomerAllOfDefaultCurrency
from openapi_server import util


class Customer(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, created_date: str=None, modified_date: str=None, source_modified_date: str=None, addresses: List[Address]=None, customer_name: str=None, default_currency: CustomerAllOfDefaultCurrency=None, email_address: str=None, note: str=None, phone: str=None):
        """Customer - a model defined in OpenAPI

        :param id: The id of this Customer.
        :param created_date: The created_date of this Customer.
        :param modified_date: The modified_date of this Customer.
        :param source_modified_date: The source_modified_date of this Customer.
        :param addresses: The addresses of this Customer.
        :param customer_name: The customer_name of this Customer.
        :param default_currency: The default_currency of this Customer.
        :param email_address: The email_address of this Customer.
        :param note: The note of this Customer.
        :param phone: The phone of this Customer.
        """
        self.openapi_types = {
            'id': str,
            'created_date': str,
            'modified_date': str,
            'source_modified_date': str,
            'addresses': List[Address],
            'customer_name': str,
            'default_currency': CustomerAllOfDefaultCurrency,
            'email_address': str,
            'note': str,
            'phone': str
        }

        self.attribute_map = {
            'id': 'id',
            'created_date': 'createdDate',
            'modified_date': 'modifiedDate',
            'source_modified_date': 'sourceModifiedDate',
            'addresses': 'addresses',
            'customer_name': 'customerName',
            'default_currency': 'defaultCurrency',
            'email_address': 'emailAddress',
            'note': 'note',
            'phone': 'phone'
        }

        self._id = id
        self._created_date = created_date
        self._modified_date = modified_date
        self._source_modified_date = source_modified_date
        self._addresses = addresses
        self._customer_name = customer_name
        self._default_currency = default_currency
        self._email_address = email_address
        self._note = note
        self._phone = phone

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Customer':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Customer of this Customer.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this Customer.

        A unique, persistent identifier for this record

        :return: The id of this Customer.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Customer.

        A unique, persistent identifier for this record

        :param id: The id of this Customer.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def created_date(self):
        """Gets the created_date of this Customer.

        In Codat's data model, dates and times are represented using the <a class=\"external\" href=\"https://en.wikipedia.org/wiki/ISO_8601\" target=\"_blank\">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:  ``` 2020-10-08T22:40:50Z 2021-01-01T00:00:00 ```    When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:  - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z` - Unqualified local time: `2021-11-15T01:00:00` - UTC time offsets: `2021-11-15T01:00:00-05:00`  > Time zones >  > Not all dates from Codat will contain information about time zones.   > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.

        :return: The created_date of this Customer.
        :rtype: str
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """Sets the created_date of this Customer.

        In Codat's data model, dates and times are represented using the <a class=\"external\" href=\"https://en.wikipedia.org/wiki/ISO_8601\" target=\"_blank\">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:  ``` 2020-10-08T22:40:50Z 2021-01-01T00:00:00 ```    When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:  - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z` - Unqualified local time: `2021-11-15T01:00:00` - UTC time offsets: `2021-11-15T01:00:00-05:00`  > Time zones >  > Not all dates from Codat will contain information about time zones.   > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.

        :param created_date: The created_date of this Customer.
        :type created_date: str
        """

        self._created_date = created_date

    @property
    def modified_date(self):
        """Gets the modified_date of this Customer.

        In Codat's data model, dates and times are represented using the <a class=\"external\" href=\"https://en.wikipedia.org/wiki/ISO_8601\" target=\"_blank\">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:  ``` 2020-10-08T22:40:50Z 2021-01-01T00:00:00 ```    When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:  - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z` - Unqualified local time: `2021-11-15T01:00:00` - UTC time offsets: `2021-11-15T01:00:00-05:00`  > Time zones >  > Not all dates from Codat will contain information about time zones.   > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.

        :return: The modified_date of this Customer.
        :rtype: str
        """
        return self._modified_date

    @modified_date.setter
    def modified_date(self, modified_date):
        """Sets the modified_date of this Customer.

        In Codat's data model, dates and times are represented using the <a class=\"external\" href=\"https://en.wikipedia.org/wiki/ISO_8601\" target=\"_blank\">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:  ``` 2020-10-08T22:40:50Z 2021-01-01T00:00:00 ```    When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:  - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z` - Unqualified local time: `2021-11-15T01:00:00` - UTC time offsets: `2021-11-15T01:00:00-05:00`  > Time zones >  > Not all dates from Codat will contain information about time zones.   > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.

        :param modified_date: The modified_date of this Customer.
        :type modified_date: str
        """

        self._modified_date = modified_date

    @property
    def source_modified_date(self):
        """Gets the source_modified_date of this Customer.

        In Codat's data model, dates and times are represented using the <a class=\"external\" href=\"https://en.wikipedia.org/wiki/ISO_8601\" target=\"_blank\">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:  ``` 2020-10-08T22:40:50Z 2021-01-01T00:00:00 ```    When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:  - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z` - Unqualified local time: `2021-11-15T01:00:00` - UTC time offsets: `2021-11-15T01:00:00-05:00`  > Time zones >  > Not all dates from Codat will contain information about time zones.   > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.

        :return: The source_modified_date of this Customer.
        :rtype: str
        """
        return self._source_modified_date

    @source_modified_date.setter
    def source_modified_date(self, source_modified_date):
        """Sets the source_modified_date of this Customer.

        In Codat's data model, dates and times are represented using the <a class=\"external\" href=\"https://en.wikipedia.org/wiki/ISO_8601\" target=\"_blank\">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:  ``` 2020-10-08T22:40:50Z 2021-01-01T00:00:00 ```    When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:  - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z` - Unqualified local time: `2021-11-15T01:00:00` - UTC time offsets: `2021-11-15T01:00:00-05:00`  > Time zones >  > Not all dates from Codat will contain information about time zones.   > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.

        :param source_modified_date: The source_modified_date of this Customer.
        :type source_modified_date: str
        """

        self._source_modified_date = source_modified_date

    @property
    def addresses(self):
        """Gets the addresses of this Customer.

        Addresses of the customer

        :return: The addresses of this Customer.
        :rtype: List[Address]
        """
        return self._addresses

    @addresses.setter
    def addresses(self, addresses):
        """Sets the addresses of this Customer.

        Addresses of the customer

        :param addresses: The addresses of this Customer.
        :type addresses: List[Address]
        """

        self._addresses = addresses

    @property
    def customer_name(self):
        """Gets the customer_name of this Customer.

        Name of the customer

        :return: The customer_name of this Customer.
        :rtype: str
        """
        return self._customer_name

    @customer_name.setter
    def customer_name(self, customer_name):
        """Sets the customer_name of this Customer.

        Name of the customer

        :param customer_name: The customer_name of this Customer.
        :type customer_name: str
        """

        self._customer_name = customer_name

    @property
    def default_currency(self):
        """Gets the default_currency of this Customer.


        :return: The default_currency of this Customer.
        :rtype: CustomerAllOfDefaultCurrency
        """
        return self._default_currency

    @default_currency.setter
    def default_currency(self, default_currency):
        """Sets the default_currency of this Customer.


        :param default_currency: The default_currency of this Customer.
        :type default_currency: CustomerAllOfDefaultCurrency
        """

        self._default_currency = default_currency

    @property
    def email_address(self):
        """Gets the email_address of this Customer.

        Email address of the customer

        :return: The email_address of this Customer.
        :rtype: str
        """
        return self._email_address

    @email_address.setter
    def email_address(self, email_address):
        """Sets the email_address of this Customer.

        Email address of the customer

        :param email_address: The email_address of this Customer.
        :type email_address: str
        """

        self._email_address = email_address

    @property
    def note(self):
        """Gets the note of this Customer.

        Any additional information about the customer

        :return: The note of this Customer.
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this Customer.

        Any additional information about the customer

        :param note: The note of this Customer.
        :type note: str
        """

        self._note = note

    @property
    def phone(self):
        """Gets the phone of this Customer.

        A phone number.

        :return: The phone of this Customer.
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this Customer.

        A phone number.

        :param phone: The phone of this Customer.
        :type phone: str
        """

        self._phone = phone
