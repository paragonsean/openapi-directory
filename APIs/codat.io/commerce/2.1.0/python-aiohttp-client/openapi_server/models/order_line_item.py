# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.order_discount_allocation import OrderDiscountAllocation
from openapi_server.models.product_ref import ProductRef
from openapi_server.models.product_variant_ref import ProductVariantRef
from openapi_server.models.tax_component_allocation import TaxComponentAllocation
from openapi_server import util


class OrderLineItem(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, discount_allocations: List[OrderDiscountAllocation]=None, product_ref: ProductRef=None, product_variant_ref: ProductVariantRef=None, quantity: str=None, tax_percentage: str=None, taxes: List[TaxComponentAllocation]=None, total_amount: str=None, total_tax_amount: str=None, unit_price: str=None):
        """OrderLineItem - a model defined in OpenAPI

        :param id: The id of this OrderLineItem.
        :param discount_allocations: The discount_allocations of this OrderLineItem.
        :param product_ref: The product_ref of this OrderLineItem.
        :param product_variant_ref: The product_variant_ref of this OrderLineItem.
        :param quantity: The quantity of this OrderLineItem.
        :param tax_percentage: The tax_percentage of this OrderLineItem.
        :param taxes: The taxes of this OrderLineItem.
        :param total_amount: The total_amount of this OrderLineItem.
        :param total_tax_amount: The total_tax_amount of this OrderLineItem.
        :param unit_price: The unit_price of this OrderLineItem.
        """
        self.openapi_types = {
            'id': str,
            'discount_allocations': List[OrderDiscountAllocation],
            'product_ref': ProductRef,
            'product_variant_ref': ProductVariantRef,
            'quantity': str,
            'tax_percentage': str,
            'taxes': List[TaxComponentAllocation],
            'total_amount': str,
            'total_tax_amount': str,
            'unit_price': str
        }

        self.attribute_map = {
            'id': 'id',
            'discount_allocations': 'discountAllocations',
            'product_ref': 'productRef',
            'product_variant_ref': 'productVariantRef',
            'quantity': 'quantity',
            'tax_percentage': 'taxPercentage',
            'taxes': 'taxes',
            'total_amount': 'totalAmount',
            'total_tax_amount': 'totalTaxAmount',
            'unit_price': 'unitPrice'
        }

        self._id = id
        self._discount_allocations = discount_allocations
        self._product_ref = product_ref
        self._product_variant_ref = product_variant_ref
        self._quantity = quantity
        self._tax_percentage = tax_percentage
        self._taxes = taxes
        self._total_amount = total_amount
        self._total_tax_amount = total_tax_amount
        self._unit_price = unit_price

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OrderLineItem':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The orderLineItem of this OrderLineItem.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this OrderLineItem.

        A unique, persistent identifier for this record

        :return: The id of this OrderLineItem.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this OrderLineItem.

        A unique, persistent identifier for this record

        :param id: The id of this OrderLineItem.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def discount_allocations(self):
        """Gets the discount_allocations of this OrderLineItem.


        :return: The discount_allocations of this OrderLineItem.
        :rtype: List[OrderDiscountAllocation]
        """
        return self._discount_allocations

    @discount_allocations.setter
    def discount_allocations(self, discount_allocations):
        """Sets the discount_allocations of this OrderLineItem.


        :param discount_allocations: The discount_allocations of this OrderLineItem.
        :type discount_allocations: List[OrderDiscountAllocation]
        """

        self._discount_allocations = discount_allocations

    @property
    def product_ref(self):
        """Gets the product_ref of this OrderLineItem.


        :return: The product_ref of this OrderLineItem.
        :rtype: ProductRef
        """
        return self._product_ref

    @product_ref.setter
    def product_ref(self, product_ref):
        """Sets the product_ref of this OrderLineItem.


        :param product_ref: The product_ref of this OrderLineItem.
        :type product_ref: ProductRef
        """

        self._product_ref = product_ref

    @property
    def product_variant_ref(self):
        """Gets the product_variant_ref of this OrderLineItem.


        :return: The product_variant_ref of this OrderLineItem.
        :rtype: ProductVariantRef
        """
        return self._product_variant_ref

    @product_variant_ref.setter
    def product_variant_ref(self, product_variant_ref):
        """Sets the product_variant_ref of this OrderLineItem.


        :param product_variant_ref: The product_variant_ref of this OrderLineItem.
        :type product_variant_ref: ProductVariantRef
        """

        self._product_variant_ref = product_variant_ref

    @property
    def quantity(self):
        """Gets the quantity of this OrderLineItem.

        Number of units of the product sold. For refunds, quantity is a negative value. 

        :return: The quantity of this OrderLineItem.
        :rtype: str
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this OrderLineItem.

        Number of units of the product sold. For refunds, quantity is a negative value. 

        :param quantity: The quantity of this OrderLineItem.
        :type quantity: str
        """

        self._quantity = quantity

    @property
    def tax_percentage(self):
        """Gets the tax_percentage of this OrderLineItem.

        Percentage rate (from 0 to 100) of any sale tax applied to the unit amount.

        :return: The tax_percentage of this OrderLineItem.
        :rtype: str
        """
        return self._tax_percentage

    @tax_percentage.setter
    def tax_percentage(self, tax_percentage):
        """Sets the tax_percentage of this OrderLineItem.

        Percentage rate (from 0 to 100) of any sale tax applied to the unit amount.

        :param tax_percentage: The tax_percentage of this OrderLineItem.
        :type tax_percentage: str
        """

        self._tax_percentage = tax_percentage

    @property
    def taxes(self):
        """Gets the taxes of this OrderLineItem.

        Taxes breakdown as applied to order lines.

        :return: The taxes of this OrderLineItem.
        :rtype: List[TaxComponentAllocation]
        """
        return self._taxes

    @taxes.setter
    def taxes(self, taxes):
        """Sets the taxes of this OrderLineItem.

        Taxes breakdown as applied to order lines.

        :param taxes: The taxes of this OrderLineItem.
        :type taxes: List[TaxComponentAllocation]
        """

        self._taxes = taxes

    @property
    def total_amount(self):
        """Gets the total_amount of this OrderLineItem.

        Total price of the line item, including discounts, tax and minus any refunds.

        :return: The total_amount of this OrderLineItem.
        :rtype: str
        """
        return self._total_amount

    @total_amount.setter
    def total_amount(self, total_amount):
        """Sets the total_amount of this OrderLineItem.

        Total price of the line item, including discounts, tax and minus any refunds.

        :param total_amount: The total_amount of this OrderLineItem.
        :type total_amount: str
        """

        self._total_amount = total_amount

    @property
    def total_tax_amount(self):
        """Gets the total_tax_amount of this OrderLineItem.

        Total amount of tax applied to the line item.

        :return: The total_tax_amount of this OrderLineItem.
        :rtype: str
        """
        return self._total_tax_amount

    @total_tax_amount.setter
    def total_tax_amount(self, total_tax_amount):
        """Sets the total_tax_amount of this OrderLineItem.

        Total amount of tax applied to the line item.

        :param total_tax_amount: The total_tax_amount of this OrderLineItem.
        :type total_tax_amount: str
        """

        self._total_tax_amount = total_tax_amount

    @property
    def unit_price(self):
        """Gets the unit_price of this OrderLineItem.

        Price per unit of goods or service.

        :return: The unit_price of this OrderLineItem.
        :rtype: str
        """
        return self._unit_price

    @unit_price.setter
    def unit_price(self, unit_price):
        """Sets the unit_price of this OrderLineItem.

        Price per unit of goods or service.

        :param unit_price: The unit_price of this OrderLineItem.
        :type unit_price: str
        """

        self._unit_price = unit_price
