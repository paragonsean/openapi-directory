# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.service_charge_type import ServiceChargeType
from openapi_server.models.tax_component_allocation import TaxComponentAllocation
from openapi_server import util


class ServiceCharge(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, quantity: int=None, tax_amount: str=None, tax_percentage: str=None, taxes: List[TaxComponentAllocation]=None, total_amount: str=None, type: ServiceChargeType=None):
        """ServiceCharge - a model defined in OpenAPI

        :param description: The description of this ServiceCharge.
        :param quantity: The quantity of this ServiceCharge.
        :param tax_amount: The tax_amount of this ServiceCharge.
        :param tax_percentage: The tax_percentage of this ServiceCharge.
        :param taxes: The taxes of this ServiceCharge.
        :param total_amount: The total_amount of this ServiceCharge.
        :param type: The type of this ServiceCharge.
        """
        self.openapi_types = {
            'description': str,
            'quantity': int,
            'tax_amount': str,
            'tax_percentage': str,
            'taxes': List[TaxComponentAllocation],
            'total_amount': str,
            'type': ServiceChargeType
        }

        self.attribute_map = {
            'description': 'description',
            'quantity': 'quantity',
            'tax_amount': 'taxAmount',
            'tax_percentage': 'taxPercentage',
            'taxes': 'taxes',
            'total_amount': 'totalAmount',
            'type': 'type'
        }

        self._description = description
        self._quantity = quantity
        self._tax_amount = tax_amount
        self._tax_percentage = tax_percentage
        self._taxes = taxes
        self._total_amount = total_amount
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ServiceCharge':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The serviceCharge of this ServiceCharge.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this ServiceCharge.

        Service charges for this order.

        :return: The description of this ServiceCharge.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ServiceCharge.

        Service charges for this order.

        :param description: The description of this ServiceCharge.
        :type description: str
        """

        self._description = description

    @property
    def quantity(self):
        """Gets the quantity of this ServiceCharge.

        The number of times the charge is charged.

        :return: The quantity of this ServiceCharge.
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this ServiceCharge.

        The number of times the charge is charged.

        :param quantity: The quantity of this ServiceCharge.
        :type quantity: int
        """

        self._quantity = quantity

    @property
    def tax_amount(self):
        """Gets the tax_amount of this ServiceCharge.

        Amount of the service charge that is tax.

        :return: The tax_amount of this ServiceCharge.
        :rtype: str
        """
        return self._tax_amount

    @tax_amount.setter
    def tax_amount(self, tax_amount):
        """Sets the tax_amount of this ServiceCharge.

        Amount of the service charge that is tax.

        :param tax_amount: The tax_amount of this ServiceCharge.
        :type tax_amount: str
        """

        self._tax_amount = tax_amount

    @property
    def tax_percentage(self):
        """Gets the tax_percentage of this ServiceCharge.

        Percentage rate (from 0 to 100) of any tax applied to the service charge.

        :return: The tax_percentage of this ServiceCharge.
        :rtype: str
        """
        return self._tax_percentage

    @tax_percentage.setter
    def tax_percentage(self, tax_percentage):
        """Sets the tax_percentage of this ServiceCharge.

        Percentage rate (from 0 to 100) of any tax applied to the service charge.

        :param tax_percentage: The tax_percentage of this ServiceCharge.
        :type tax_percentage: str
        """

        self._tax_percentage = tax_percentage

    @property
    def taxes(self):
        """Gets the taxes of this ServiceCharge.

        Taxes breakdown as applied to service charges.

        :return: The taxes of this ServiceCharge.
        :rtype: List[TaxComponentAllocation]
        """
        return self._taxes

    @taxes.setter
    def taxes(self, taxes):
        """Sets the taxes of this ServiceCharge.

        Taxes breakdown as applied to service charges.

        :param taxes: The taxes of this ServiceCharge.
        :type taxes: List[TaxComponentAllocation]
        """

        self._taxes = taxes

    @property
    def total_amount(self):
        """Gets the total_amount of this ServiceCharge.

        Total service charge, including taxes.

        :return: The total_amount of this ServiceCharge.
        :rtype: str
        """
        return self._total_amount

    @total_amount.setter
    def total_amount(self, total_amount):
        """Sets the total_amount of this ServiceCharge.

        Total service charge, including taxes.

        :param total_amount: The total_amount of this ServiceCharge.
        :type total_amount: str
        """

        self._total_amount = total_amount

    @property
    def type(self):
        """Gets the type of this ServiceCharge.


        :return: The type of this ServiceCharge.
        :rtype: ServiceChargeType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ServiceCharge.


        :param type: The type of this ServiceCharge.
        :type type: ServiceChargeType
        """

        self._type = type
