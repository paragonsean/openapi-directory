# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.product_variant import ProductVariant
from openapi_server import util


class Product(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, categorization: str=None, description: str=None, is_gift_card: bool=None, name: str=None, variants: List[ProductVariant]=None):
        """Product - a model defined in OpenAPI

        :param id: The id of this Product.
        :param categorization: The categorization of this Product.
        :param description: The description of this Product.
        :param is_gift_card: The is_gift_card of this Product.
        :param name: The name of this Product.
        :param variants: The variants of this Product.
        """
        self.openapi_types = {
            'id': str,
            'categorization': str,
            'description': str,
            'is_gift_card': bool,
            'name': str,
            'variants': List[ProductVariant]
        }

        self.attribute_map = {
            'id': 'id',
            'categorization': 'categorization',
            'description': 'description',
            'is_gift_card': 'isGiftCard',
            'name': 'name',
            'variants': 'variants'
        }

        self._id = id
        self._categorization = categorization
        self._description = description
        self._is_gift_card = is_gift_card
        self._name = name
        self._variants = variants

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Product':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Product of this Product.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this Product.

        A unique, persistent identifier for this record

        :return: The id of this Product.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Product.

        A unique, persistent identifier for this record

        :param id: The id of this Product.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def categorization(self):
        """Gets the categorization of this Product.

        Retail category that the product is assigned to

        :return: The categorization of this Product.
        :rtype: str
        """
        return self._categorization

    @categorization.setter
    def categorization(self, categorization):
        """Sets the categorization of this Product.

        Retail category that the product is assigned to

        :param categorization: The categorization of this Product.
        :type categorization: str
        """

        self._categorization = categorization

    @property
    def description(self):
        """Gets the description of this Product.

        Description of the product recorded in the commerce or point of sale platform.

        :return: The description of this Product.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Product.

        Description of the product recorded in the commerce or point of sale platform.

        :param description: The description of this Product.
        :type description: str
        """

        self._description = description

    @property
    def is_gift_card(self):
        """Gets the is_gift_card of this Product.

        Whether the product represents a gift card or voucher that can be redeemed in the commerce or POS platform 

        :return: The is_gift_card of this Product.
        :rtype: bool
        """
        return self._is_gift_card

    @is_gift_card.setter
    def is_gift_card(self, is_gift_card):
        """Sets the is_gift_card of this Product.

        Whether the product represents a gift card or voucher that can be redeemed in the commerce or POS platform 

        :param is_gift_card: The is_gift_card of this Product.
        :type is_gift_card: bool
        """

        self._is_gift_card = is_gift_card

    @property
    def name(self):
        """Gets the name of this Product.

        Name of the product in the commerce or POS system

        :return: The name of this Product.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Product.

        Name of the product in the commerce or POS system

        :param name: The name of this Product.
        :type name: str
        """

        self._name = name

    @property
    def variants(self):
        """Gets the variants of this Product.


        :return: The variants of this Product.
        :rtype: List[ProductVariant]
        """
        return self._variants

    @variants.setter
    def variants(self, variants):
        """Sets the variants of this Product.


        :param variants: The variants of this Product.
        :type variants: List[ProductVariant]
        """

        self._variants = variants
