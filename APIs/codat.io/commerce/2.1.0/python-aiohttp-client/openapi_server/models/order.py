# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.customer_ref import CustomerRef
from openapi_server.models.location_ref import LocationRef
from openapi_server.models.order_all_of_currency import OrderAllOfCurrency
from openapi_server.models.order_line_item import OrderLineItem
from openapi_server.models.payment_ref import PaymentRef
from openapi_server.models.service_charge import ServiceCharge
from openapi_server import util


class Order(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created_date: str=None, modified_date: str=None, source_modified_date: str=None, id: str=None, closed_date: str=None, country: str=None, currency: OrderAllOfCurrency=None, customer_ref: CustomerRef=None, location_ref: LocationRef=None, order_line_items: List[OrderLineItem]=None, order_number: str=None, payments: List[PaymentRef]=None, service_charges: List[ServiceCharge]=None, total_amount: str=None, total_discount: str=None, total_gratuity: str=None, total_refund: str=None, total_tax_amount: str=None):
        """Order - a model defined in OpenAPI

        :param created_date: The created_date of this Order.
        :param modified_date: The modified_date of this Order.
        :param source_modified_date: The source_modified_date of this Order.
        :param id: The id of this Order.
        :param closed_date: The closed_date of this Order.
        :param country: The country of this Order.
        :param currency: The currency of this Order.
        :param customer_ref: The customer_ref of this Order.
        :param location_ref: The location_ref of this Order.
        :param order_line_items: The order_line_items of this Order.
        :param order_number: The order_number of this Order.
        :param payments: The payments of this Order.
        :param service_charges: The service_charges of this Order.
        :param total_amount: The total_amount of this Order.
        :param total_discount: The total_discount of this Order.
        :param total_gratuity: The total_gratuity of this Order.
        :param total_refund: The total_refund of this Order.
        :param total_tax_amount: The total_tax_amount of this Order.
        """
        self.openapi_types = {
            'created_date': str,
            'modified_date': str,
            'source_modified_date': str,
            'id': str,
            'closed_date': str,
            'country': str,
            'currency': OrderAllOfCurrency,
            'customer_ref': CustomerRef,
            'location_ref': LocationRef,
            'order_line_items': List[OrderLineItem],
            'order_number': str,
            'payments': List[PaymentRef],
            'service_charges': List[ServiceCharge],
            'total_amount': str,
            'total_discount': str,
            'total_gratuity': str,
            'total_refund': str,
            'total_tax_amount': str
        }

        self.attribute_map = {
            'created_date': 'createdDate',
            'modified_date': 'modifiedDate',
            'source_modified_date': 'sourceModifiedDate',
            'id': 'id',
            'closed_date': 'closedDate',
            'country': 'country',
            'currency': 'currency',
            'customer_ref': 'customerRef',
            'location_ref': 'locationRef',
            'order_line_items': 'orderLineItems',
            'order_number': 'orderNumber',
            'payments': 'payments',
            'service_charges': 'serviceCharges',
            'total_amount': 'totalAmount',
            'total_discount': 'totalDiscount',
            'total_gratuity': 'totalGratuity',
            'total_refund': 'totalRefund',
            'total_tax_amount': 'totalTaxAmount'
        }

        self._created_date = created_date
        self._modified_date = modified_date
        self._source_modified_date = source_modified_date
        self._id = id
        self._closed_date = closed_date
        self._country = country
        self._currency = currency
        self._customer_ref = customer_ref
        self._location_ref = location_ref
        self._order_line_items = order_line_items
        self._order_number = order_number
        self._payments = payments
        self._service_charges = service_charges
        self._total_amount = total_amount
        self._total_discount = total_discount
        self._total_gratuity = total_gratuity
        self._total_refund = total_refund
        self._total_tax_amount = total_tax_amount

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Order':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Order of this Order.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created_date(self):
        """Gets the created_date of this Order.

        In Codat's data model, dates and times are represented using the <a class=\"external\" href=\"https://en.wikipedia.org/wiki/ISO_8601\" target=\"_blank\">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:  ``` 2020-10-08T22:40:50Z 2021-01-01T00:00:00 ```    When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:  - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z` - Unqualified local time: `2021-11-15T01:00:00` - UTC time offsets: `2021-11-15T01:00:00-05:00`  > Time zones >  > Not all dates from Codat will contain information about time zones.   > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.

        :return: The created_date of this Order.
        :rtype: str
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """Sets the created_date of this Order.

        In Codat's data model, dates and times are represented using the <a class=\"external\" href=\"https://en.wikipedia.org/wiki/ISO_8601\" target=\"_blank\">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:  ``` 2020-10-08T22:40:50Z 2021-01-01T00:00:00 ```    When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:  - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z` - Unqualified local time: `2021-11-15T01:00:00` - UTC time offsets: `2021-11-15T01:00:00-05:00`  > Time zones >  > Not all dates from Codat will contain information about time zones.   > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.

        :param created_date: The created_date of this Order.
        :type created_date: str
        """

        self._created_date = created_date

    @property
    def modified_date(self):
        """Gets the modified_date of this Order.

        In Codat's data model, dates and times are represented using the <a class=\"external\" href=\"https://en.wikipedia.org/wiki/ISO_8601\" target=\"_blank\">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:  ``` 2020-10-08T22:40:50Z 2021-01-01T00:00:00 ```    When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:  - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z` - Unqualified local time: `2021-11-15T01:00:00` - UTC time offsets: `2021-11-15T01:00:00-05:00`  > Time zones >  > Not all dates from Codat will contain information about time zones.   > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.

        :return: The modified_date of this Order.
        :rtype: str
        """
        return self._modified_date

    @modified_date.setter
    def modified_date(self, modified_date):
        """Sets the modified_date of this Order.

        In Codat's data model, dates and times are represented using the <a class=\"external\" href=\"https://en.wikipedia.org/wiki/ISO_8601\" target=\"_blank\">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:  ``` 2020-10-08T22:40:50Z 2021-01-01T00:00:00 ```    When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:  - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z` - Unqualified local time: `2021-11-15T01:00:00` - UTC time offsets: `2021-11-15T01:00:00-05:00`  > Time zones >  > Not all dates from Codat will contain information about time zones.   > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.

        :param modified_date: The modified_date of this Order.
        :type modified_date: str
        """

        self._modified_date = modified_date

    @property
    def source_modified_date(self):
        """Gets the source_modified_date of this Order.

        In Codat's data model, dates and times are represented using the <a class=\"external\" href=\"https://en.wikipedia.org/wiki/ISO_8601\" target=\"_blank\">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:  ``` 2020-10-08T22:40:50Z 2021-01-01T00:00:00 ```    When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:  - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z` - Unqualified local time: `2021-11-15T01:00:00` - UTC time offsets: `2021-11-15T01:00:00-05:00`  > Time zones >  > Not all dates from Codat will contain information about time zones.   > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.

        :return: The source_modified_date of this Order.
        :rtype: str
        """
        return self._source_modified_date

    @source_modified_date.setter
    def source_modified_date(self, source_modified_date):
        """Sets the source_modified_date of this Order.

        In Codat's data model, dates and times are represented using the <a class=\"external\" href=\"https://en.wikipedia.org/wiki/ISO_8601\" target=\"_blank\">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:  ``` 2020-10-08T22:40:50Z 2021-01-01T00:00:00 ```    When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:  - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z` - Unqualified local time: `2021-11-15T01:00:00` - UTC time offsets: `2021-11-15T01:00:00-05:00`  > Time zones >  > Not all dates from Codat will contain information about time zones.   > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.

        :param source_modified_date: The source_modified_date of this Order.
        :type source_modified_date: str
        """

        self._source_modified_date = source_modified_date

    @property
    def id(self):
        """Gets the id of this Order.

        A unique, persistent identifier for this record

        :return: The id of this Order.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Order.

        A unique, persistent identifier for this record

        :param id: The id of this Order.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def closed_date(self):
        """Gets the closed_date of this Order.

        In Codat's data model, dates and times are represented using the <a class=\"external\" href=\"https://en.wikipedia.org/wiki/ISO_8601\" target=\"_blank\">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:  ``` 2020-10-08T22:40:50Z 2021-01-01T00:00:00 ```    When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:  - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z` - Unqualified local time: `2021-11-15T01:00:00` - UTC time offsets: `2021-11-15T01:00:00-05:00`  > Time zones >  > Not all dates from Codat will contain information about time zones.   > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.

        :return: The closed_date of this Order.
        :rtype: str
        """
        return self._closed_date

    @closed_date.setter
    def closed_date(self, closed_date):
        """Sets the closed_date of this Order.

        In Codat's data model, dates and times are represented using the <a class=\"external\" href=\"https://en.wikipedia.org/wiki/ISO_8601\" target=\"_blank\">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:  ``` 2020-10-08T22:40:50Z 2021-01-01T00:00:00 ```    When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:  - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z` - Unqualified local time: `2021-11-15T01:00:00` - UTC time offsets: `2021-11-15T01:00:00-05:00`  > Time zones >  > Not all dates from Codat will contain information about time zones.   > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.

        :param closed_date: The closed_date of this Order.
        :type closed_date: str
        """

        self._closed_date = closed_date

    @property
    def country(self):
        """Gets the country of this Order.

        The Codat country property is returned as it was provided in the underlying platform by the company without any formatting on our part.  Depending on the platform the value of this property will either be an <a href=\"https://en.wikipedia.org/wiki/List_of_ISO_3166_country_codes\" target=\"_blank\">ISO 3166</a> code (2-alpha or 3-alpha) or free-form text returned as a string name in our model.   For POST operations against platforms that demand a specific format for the country code, we have documented accepted values in the [options](https://docs.codat.io/codat-api#/operations/get-companies-companyId-connections-connectionId-push) endpoint.

        :return: The country of this Order.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this Order.

        The Codat country property is returned as it was provided in the underlying platform by the company without any formatting on our part.  Depending on the platform the value of this property will either be an <a href=\"https://en.wikipedia.org/wiki/List_of_ISO_3166_country_codes\" target=\"_blank\">ISO 3166</a> code (2-alpha or 3-alpha) or free-form text returned as a string name in our model.   For POST operations against platforms that demand a specific format for the country code, we have documented accepted values in the [options](https://docs.codat.io/codat-api#/operations/get-companies-companyId-connections-connectionId-push) endpoint.

        :param country: The country of this Order.
        :type country: str
        """

        self._country = country

    @property
    def currency(self):
        """Gets the currency of this Order.


        :return: The currency of this Order.
        :rtype: OrderAllOfCurrency
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this Order.


        :param currency: The currency of this Order.
        :type currency: OrderAllOfCurrency
        """

        self._currency = currency

    @property
    def customer_ref(self):
        """Gets the customer_ref of this Order.


        :return: The customer_ref of this Order.
        :rtype: CustomerRef
        """
        return self._customer_ref

    @customer_ref.setter
    def customer_ref(self, customer_ref):
        """Sets the customer_ref of this Order.


        :param customer_ref: The customer_ref of this Order.
        :type customer_ref: CustomerRef
        """

        self._customer_ref = customer_ref

    @property
    def location_ref(self):
        """Gets the location_ref of this Order.


        :return: The location_ref of this Order.
        :rtype: LocationRef
        """
        return self._location_ref

    @location_ref.setter
    def location_ref(self, location_ref):
        """Sets the location_ref of this Order.


        :param location_ref: The location_ref of this Order.
        :type location_ref: LocationRef
        """

        self._location_ref = location_ref

    @property
    def order_line_items(self):
        """Gets the order_line_items of this Order.


        :return: The order_line_items of this Order.
        :rtype: List[OrderLineItem]
        """
        return self._order_line_items

    @order_line_items.setter
    def order_line_items(self, order_line_items):
        """Sets the order_line_items of this Order.


        :param order_line_items: The order_line_items of this Order.
        :type order_line_items: List[OrderLineItem]
        """

        self._order_line_items = order_line_items

    @property
    def order_number(self):
        """Gets the order_number of this Order.

        Friendly reference for the order in the commerce or point of sale platform.

        :return: The order_number of this Order.
        :rtype: str
        """
        return self._order_number

    @order_number.setter
    def order_number(self, order_number):
        """Sets the order_number of this Order.

        Friendly reference for the order in the commerce or point of sale platform.

        :param order_number: The order_number of this Order.
        :type order_number: str
        """

        self._order_number = order_number

    @property
    def payments(self):
        """Gets the payments of this Order.


        :return: The payments of this Order.
        :rtype: List[PaymentRef]
        """
        return self._payments

    @payments.setter
    def payments(self, payments):
        """Sets the payments of this Order.


        :param payments: The payments of this Order.
        :type payments: List[PaymentRef]
        """

        self._payments = payments

    @property
    def service_charges(self):
        """Gets the service_charges of this Order.


        :return: The service_charges of this Order.
        :rtype: List[ServiceCharge]
        """
        return self._service_charges

    @service_charges.setter
    def service_charges(self, service_charges):
        """Sets the service_charges of this Order.


        :param service_charges: The service_charges of this Order.
        :type service_charges: List[ServiceCharge]
        """

        self._service_charges = service_charges

    @property
    def total_amount(self):
        """Gets the total_amount of this Order.

        Total amount of the order, including tax, net of any discounts and refunds.

        :return: The total_amount of this Order.
        :rtype: str
        """
        return self._total_amount

    @total_amount.setter
    def total_amount(self, total_amount):
        """Sets the total_amount of this Order.

        Total amount of the order, including tax, net of any discounts and refunds.

        :param total_amount: The total_amount of this Order.
        :type total_amount: str
        """

        self._total_amount = total_amount

    @property
    def total_discount(self):
        """Gets the total_discount of this Order.

        Total amount of discount applied to the order.

        :return: The total_discount of this Order.
        :rtype: str
        """
        return self._total_discount

    @total_discount.setter
    def total_discount(self, total_discount):
        """Sets the total_discount of this Order.

        Total amount of discount applied to the order.

        :param total_discount: The total_discount of this Order.
        :type total_discount: str
        """

        self._total_discount = total_discount

    @property
    def total_gratuity(self):
        """Gets the total_gratuity of this Order.

        Extra amount added to a bill.

        :return: The total_gratuity of this Order.
        :rtype: str
        """
        return self._total_gratuity

    @total_gratuity.setter
    def total_gratuity(self, total_gratuity):
        """Sets the total_gratuity of this Order.

        Extra amount added to a bill.

        :param total_gratuity: The total_gratuity of this Order.
        :type total_gratuity: str
        """

        self._total_gratuity = total_gratuity

    @property
    def total_refund(self):
        """Gets the total_refund of this Order.

        Total amount refunded issued by a merchant on an order (always a negative value).

        :return: The total_refund of this Order.
        :rtype: str
        """
        return self._total_refund

    @total_refund.setter
    def total_refund(self, total_refund):
        """Sets the total_refund of this Order.

        Total amount refunded issued by a merchant on an order (always a negative value).

        :param total_refund: The total_refund of this Order.
        :type total_refund: str
        """

        self._total_refund = total_refund

    @property
    def total_tax_amount(self):
        """Gets the total_tax_amount of this Order.

        Total amount of tax applied to the order.

        :return: The total_tax_amount of this Order.
        :rtype: str
        """
        return self._total_tax_amount

    @total_tax_amount.setter
    def total_tax_amount(self, total_tax_amount):
        """Sets the total_tax_amount of this Order.

        Total amount of tax applied to the order.

        :param total_tax_amount: The total_tax_amount of this Order.
        :type total_tax_amount: str
        """

        self._total_tax_amount = total_tax_amount
