# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.account_balance import AccountBalance
from openapi_server.models.address import Address
from openapi_server.models.phone_number import PhoneNumber
from openapi_server.models.weblink import Weblink
from openapi_server import util


class CompanyInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created_date: str=None, modified_date: str=None, source_modified_date: str=None, account_balances: List[AccountBalance]=None, addresses: List[Address]=None, base_currency: str=None, commerce_platform_ref: str=None, company_legal_name: str=None, company_name: str=None, phone_numbers: List[PhoneNumber]=None, registration_number: str=None, source_urls: Dict[str, str]=None, web_links: List[Weblink]=None):
        """CompanyInfo - a model defined in OpenAPI

        :param created_date: The created_date of this CompanyInfo.
        :param modified_date: The modified_date of this CompanyInfo.
        :param source_modified_date: The source_modified_date of this CompanyInfo.
        :param account_balances: The account_balances of this CompanyInfo.
        :param addresses: The addresses of this CompanyInfo.
        :param base_currency: The base_currency of this CompanyInfo.
        :param commerce_platform_ref: The commerce_platform_ref of this CompanyInfo.
        :param company_legal_name: The company_legal_name of this CompanyInfo.
        :param company_name: The company_name of this CompanyInfo.
        :param phone_numbers: The phone_numbers of this CompanyInfo.
        :param registration_number: The registration_number of this CompanyInfo.
        :param source_urls: The source_urls of this CompanyInfo.
        :param web_links: The web_links of this CompanyInfo.
        """
        self.openapi_types = {
            'created_date': str,
            'modified_date': str,
            'source_modified_date': str,
            'account_balances': List[AccountBalance],
            'addresses': List[Address],
            'base_currency': str,
            'commerce_platform_ref': str,
            'company_legal_name': str,
            'company_name': str,
            'phone_numbers': List[PhoneNumber],
            'registration_number': str,
            'source_urls': Dict[str, str],
            'web_links': List[Weblink]
        }

        self.attribute_map = {
            'created_date': 'createdDate',
            'modified_date': 'modifiedDate',
            'source_modified_date': 'sourceModifiedDate',
            'account_balances': 'accountBalances',
            'addresses': 'addresses',
            'base_currency': 'baseCurrency',
            'commerce_platform_ref': 'commercePlatformRef',
            'company_legal_name': 'companyLegalName',
            'company_name': 'companyName',
            'phone_numbers': 'phoneNumbers',
            'registration_number': 'registrationNumber',
            'source_urls': 'sourceUrls',
            'web_links': 'webLinks'
        }

        self._created_date = created_date
        self._modified_date = modified_date
        self._source_modified_date = source_modified_date
        self._account_balances = account_balances
        self._addresses = addresses
        self._base_currency = base_currency
        self._commerce_platform_ref = commerce_platform_ref
        self._company_legal_name = company_legal_name
        self._company_name = company_name
        self._phone_numbers = phone_numbers
        self._registration_number = registration_number
        self._source_urls = source_urls
        self._web_links = web_links

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CompanyInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CompanyInfo of this CompanyInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created_date(self):
        """Gets the created_date of this CompanyInfo.

        In Codat's data model, dates and times are represented using the <a class=\"external\" href=\"https://en.wikipedia.org/wiki/ISO_8601\" target=\"_blank\">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:  ``` 2020-10-08T22:40:50Z 2021-01-01T00:00:00 ```    When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:  - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z` - Unqualified local time: `2021-11-15T01:00:00` - UTC time offsets: `2021-11-15T01:00:00-05:00`  > Time zones >  > Not all dates from Codat will contain information about time zones.   > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.

        :return: The created_date of this CompanyInfo.
        :rtype: str
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """Sets the created_date of this CompanyInfo.

        In Codat's data model, dates and times are represented using the <a class=\"external\" href=\"https://en.wikipedia.org/wiki/ISO_8601\" target=\"_blank\">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:  ``` 2020-10-08T22:40:50Z 2021-01-01T00:00:00 ```    When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:  - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z` - Unqualified local time: `2021-11-15T01:00:00` - UTC time offsets: `2021-11-15T01:00:00-05:00`  > Time zones >  > Not all dates from Codat will contain information about time zones.   > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.

        :param created_date: The created_date of this CompanyInfo.
        :type created_date: str
        """

        self._created_date = created_date

    @property
    def modified_date(self):
        """Gets the modified_date of this CompanyInfo.

        In Codat's data model, dates and times are represented using the <a class=\"external\" href=\"https://en.wikipedia.org/wiki/ISO_8601\" target=\"_blank\">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:  ``` 2020-10-08T22:40:50Z 2021-01-01T00:00:00 ```    When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:  - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z` - Unqualified local time: `2021-11-15T01:00:00` - UTC time offsets: `2021-11-15T01:00:00-05:00`  > Time zones >  > Not all dates from Codat will contain information about time zones.   > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.

        :return: The modified_date of this CompanyInfo.
        :rtype: str
        """
        return self._modified_date

    @modified_date.setter
    def modified_date(self, modified_date):
        """Sets the modified_date of this CompanyInfo.

        In Codat's data model, dates and times are represented using the <a class=\"external\" href=\"https://en.wikipedia.org/wiki/ISO_8601\" target=\"_blank\">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:  ``` 2020-10-08T22:40:50Z 2021-01-01T00:00:00 ```    When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:  - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z` - Unqualified local time: `2021-11-15T01:00:00` - UTC time offsets: `2021-11-15T01:00:00-05:00`  > Time zones >  > Not all dates from Codat will contain information about time zones.   > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.

        :param modified_date: The modified_date of this CompanyInfo.
        :type modified_date: str
        """

        self._modified_date = modified_date

    @property
    def source_modified_date(self):
        """Gets the source_modified_date of this CompanyInfo.

        In Codat's data model, dates and times are represented using the <a class=\"external\" href=\"https://en.wikipedia.org/wiki/ISO_8601\" target=\"_blank\">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:  ``` 2020-10-08T22:40:50Z 2021-01-01T00:00:00 ```    When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:  - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z` - Unqualified local time: `2021-11-15T01:00:00` - UTC time offsets: `2021-11-15T01:00:00-05:00`  > Time zones >  > Not all dates from Codat will contain information about time zones.   > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.

        :return: The source_modified_date of this CompanyInfo.
        :rtype: str
        """
        return self._source_modified_date

    @source_modified_date.setter
    def source_modified_date(self, source_modified_date):
        """Sets the source_modified_date of this CompanyInfo.

        In Codat's data model, dates and times are represented using the <a class=\"external\" href=\"https://en.wikipedia.org/wiki/ISO_8601\" target=\"_blank\">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:  ``` 2020-10-08T22:40:50Z 2021-01-01T00:00:00 ```    When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:  - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z` - Unqualified local time: `2021-11-15T01:00:00` - UTC time offsets: `2021-11-15T01:00:00-05:00`  > Time zones >  > Not all dates from Codat will contain information about time zones.   > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.

        :param source_modified_date: The source_modified_date of this CompanyInfo.
        :type source_modified_date: str
        """

        self._source_modified_date = source_modified_date

    @property
    def account_balances(self):
        """Gets the account_balances of this CompanyInfo.

        The available and current cash balances for the company's accounts

        :return: The account_balances of this CompanyInfo.
        :rtype: List[AccountBalance]
        """
        return self._account_balances

    @account_balances.setter
    def account_balances(self, account_balances):
        """Sets the account_balances of this CompanyInfo.

        The available and current cash balances for the company's accounts

        :param account_balances: The account_balances of this CompanyInfo.
        :type account_balances: List[AccountBalance]
        """

        self._account_balances = account_balances

    @property
    def addresses(self):
        """Gets the addresses of this CompanyInfo.

        Addresses associated with the company

        :return: The addresses of this CompanyInfo.
        :rtype: List[Address]
        """
        return self._addresses

    @addresses.setter
    def addresses(self, addresses):
        """Sets the addresses of this CompanyInfo.

        Addresses associated with the company

        :param addresses: The addresses of this CompanyInfo.
        :type addresses: List[Address]
        """

        self._addresses = addresses

    @property
    def base_currency(self):
        """Gets the base_currency of this CompanyInfo.

        The currency data type in Codat is the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code, e.g. _GBP_.  ## Unknown currencies  In line with the ISO 4217 specification, the code _XXX_ is used when the data source does not return a currency for a transaction.   There are only a very small number of edge cases where this currency code is returned by the Codat system.

        :return: The base_currency of this CompanyInfo.
        :rtype: str
        """
        return self._base_currency

    @base_currency.setter
    def base_currency(self, base_currency):
        """Sets the base_currency of this CompanyInfo.

        The currency data type in Codat is the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code, e.g. _GBP_.  ## Unknown currencies  In line with the ISO 4217 specification, the code _XXX_ is used when the data source does not return a currency for a transaction.   There are only a very small number of edge cases where this currency code is returned by the Codat system.

        :param base_currency: The base_currency of this CompanyInfo.
        :type base_currency: str
        """

        self._base_currency = base_currency

    @property
    def commerce_platform_ref(self):
        """Gets the commerce_platform_ref of this CompanyInfo.

        Identifier or reference for the company in the commerce platform

        :return: The commerce_platform_ref of this CompanyInfo.
        :rtype: str
        """
        return self._commerce_platform_ref

    @commerce_platform_ref.setter
    def commerce_platform_ref(self, commerce_platform_ref):
        """Sets the commerce_platform_ref of this CompanyInfo.

        Identifier or reference for the company in the commerce platform

        :param commerce_platform_ref: The commerce_platform_ref of this CompanyInfo.
        :type commerce_platform_ref: str
        """

        self._commerce_platform_ref = commerce_platform_ref

    @property
    def company_legal_name(self):
        """Gets the company_legal_name of this CompanyInfo.

        The full legal name of the company

        :return: The company_legal_name of this CompanyInfo.
        :rtype: str
        """
        return self._company_legal_name

    @company_legal_name.setter
    def company_legal_name(self, company_legal_name):
        """Sets the company_legal_name of this CompanyInfo.

        The full legal name of the company

        :param company_legal_name: The company_legal_name of this CompanyInfo.
        :type company_legal_name: str
        """

        self._company_legal_name = company_legal_name

    @property
    def company_name(self):
        """Gets the company_name of this CompanyInfo.

        The name of the company

        :return: The company_name of this CompanyInfo.
        :rtype: str
        """
        return self._company_name

    @company_name.setter
    def company_name(self, company_name):
        """Sets the company_name of this CompanyInfo.

        The name of the company

        :param company_name: The company_name of this CompanyInfo.
        :type company_name: str
        """

        self._company_name = company_name

    @property
    def phone_numbers(self):
        """Gets the phone_numbers of this CompanyInfo.

        Phone numbers associated with the company

        :return: The phone_numbers of this CompanyInfo.
        :rtype: List[PhoneNumber]
        """
        return self._phone_numbers

    @phone_numbers.setter
    def phone_numbers(self, phone_numbers):
        """Sets the phone_numbers of this CompanyInfo.

        Phone numbers associated with the company

        :param phone_numbers: The phone_numbers of this CompanyInfo.
        :type phone_numbers: List[PhoneNumber]
        """

        self._phone_numbers = phone_numbers

    @property
    def registration_number(self):
        """Gets the registration_number of this CompanyInfo.

        The registration number of the company

        :return: The registration_number of this CompanyInfo.
        :rtype: str
        """
        return self._registration_number

    @registration_number.setter
    def registration_number(self, registration_number):
        """Sets the registration_number of this CompanyInfo.

        The registration number of the company

        :param registration_number: The registration_number of this CompanyInfo.
        :type registration_number: str
        """

        self._registration_number = registration_number

    @property
    def source_urls(self):
        """Gets the source_urls of this CompanyInfo.

        URL addresses for the originating system. For example, potential use cases include 'deeplinking' to the originating system

        :return: The source_urls of this CompanyInfo.
        :rtype: Dict[str, str]
        """
        return self._source_urls

    @source_urls.setter
    def source_urls(self, source_urls):
        """Sets the source_urls of this CompanyInfo.

        URL addresses for the originating system. For example, potential use cases include 'deeplinking' to the originating system

        :param source_urls: The source_urls of this CompanyInfo.
        :type source_urls: Dict[str, str]
        """

        self._source_urls = source_urls

    @property
    def web_links(self):
        """Gets the web_links of this CompanyInfo.

        Weblinks associated with the company

        :return: The web_links of this CompanyInfo.
        :rtype: List[Weblink]
        """
        return self._web_links

    @web_links.setter
    def web_links(self, web_links):
        """Sets the web_links of this CompanyInfo.

        Weblinks associated with the company

        :param web_links: The web_links of this CompanyInfo.
        :type web_links: List[Weblink]
        """

        self._web_links = web_links
