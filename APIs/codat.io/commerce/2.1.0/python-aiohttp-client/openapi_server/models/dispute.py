# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.dispute_status import DisputeStatus
from openapi_server.models.transaction_source_ref import TransactionSourceRef
from openapi_server import util


class Dispute(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, created_date: str=None, modified_date: str=None, source_modified_date: str=None, currency: str=None, disputed_transactions: TransactionSourceRef=None, due_date: str=None, reason: str=None, status: DisputeStatus=None, total_amount: str=None):
        """Dispute - a model defined in OpenAPI

        :param id: The id of this Dispute.
        :param created_date: The created_date of this Dispute.
        :param modified_date: The modified_date of this Dispute.
        :param source_modified_date: The source_modified_date of this Dispute.
        :param currency: The currency of this Dispute.
        :param disputed_transactions: The disputed_transactions of this Dispute.
        :param due_date: The due_date of this Dispute.
        :param reason: The reason of this Dispute.
        :param status: The status of this Dispute.
        :param total_amount: The total_amount of this Dispute.
        """
        self.openapi_types = {
            'id': str,
            'created_date': str,
            'modified_date': str,
            'source_modified_date': str,
            'currency': str,
            'disputed_transactions': TransactionSourceRef,
            'due_date': str,
            'reason': str,
            'status': DisputeStatus,
            'total_amount': str
        }

        self.attribute_map = {
            'id': 'id',
            'created_date': 'createdDate',
            'modified_date': 'modifiedDate',
            'source_modified_date': 'sourceModifiedDate',
            'currency': 'currency',
            'disputed_transactions': 'disputedTransactions',
            'due_date': 'dueDate',
            'reason': 'reason',
            'status': 'status',
            'total_amount': 'totalAmount'
        }

        self._id = id
        self._created_date = created_date
        self._modified_date = modified_date
        self._source_modified_date = source_modified_date
        self._currency = currency
        self._disputed_transactions = disputed_transactions
        self._due_date = due_date
        self._reason = reason
        self._status = status
        self._total_amount = total_amount

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Dispute':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Dispute of this Dispute.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this Dispute.

        A unique, persistent identifier for this record

        :return: The id of this Dispute.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Dispute.

        A unique, persistent identifier for this record

        :param id: The id of this Dispute.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def created_date(self):
        """Gets the created_date of this Dispute.

        In Codat's data model, dates and times are represented using the <a class=\"external\" href=\"https://en.wikipedia.org/wiki/ISO_8601\" target=\"_blank\">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:  ``` 2020-10-08T22:40:50Z 2021-01-01T00:00:00 ```    When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:  - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z` - Unqualified local time: `2021-11-15T01:00:00` - UTC time offsets: `2021-11-15T01:00:00-05:00`  > Time zones >  > Not all dates from Codat will contain information about time zones.   > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.

        :return: The created_date of this Dispute.
        :rtype: str
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """Sets the created_date of this Dispute.

        In Codat's data model, dates and times are represented using the <a class=\"external\" href=\"https://en.wikipedia.org/wiki/ISO_8601\" target=\"_blank\">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:  ``` 2020-10-08T22:40:50Z 2021-01-01T00:00:00 ```    When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:  - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z` - Unqualified local time: `2021-11-15T01:00:00` - UTC time offsets: `2021-11-15T01:00:00-05:00`  > Time zones >  > Not all dates from Codat will contain information about time zones.   > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.

        :param created_date: The created_date of this Dispute.
        :type created_date: str
        """

        self._created_date = created_date

    @property
    def modified_date(self):
        """Gets the modified_date of this Dispute.

        In Codat's data model, dates and times are represented using the <a class=\"external\" href=\"https://en.wikipedia.org/wiki/ISO_8601\" target=\"_blank\">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:  ``` 2020-10-08T22:40:50Z 2021-01-01T00:00:00 ```    When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:  - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z` - Unqualified local time: `2021-11-15T01:00:00` - UTC time offsets: `2021-11-15T01:00:00-05:00`  > Time zones >  > Not all dates from Codat will contain information about time zones.   > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.

        :return: The modified_date of this Dispute.
        :rtype: str
        """
        return self._modified_date

    @modified_date.setter
    def modified_date(self, modified_date):
        """Sets the modified_date of this Dispute.

        In Codat's data model, dates and times are represented using the <a class=\"external\" href=\"https://en.wikipedia.org/wiki/ISO_8601\" target=\"_blank\">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:  ``` 2020-10-08T22:40:50Z 2021-01-01T00:00:00 ```    When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:  - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z` - Unqualified local time: `2021-11-15T01:00:00` - UTC time offsets: `2021-11-15T01:00:00-05:00`  > Time zones >  > Not all dates from Codat will contain information about time zones.   > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.

        :param modified_date: The modified_date of this Dispute.
        :type modified_date: str
        """

        self._modified_date = modified_date

    @property
    def source_modified_date(self):
        """Gets the source_modified_date of this Dispute.

        In Codat's data model, dates and times are represented using the <a class=\"external\" href=\"https://en.wikipedia.org/wiki/ISO_8601\" target=\"_blank\">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:  ``` 2020-10-08T22:40:50Z 2021-01-01T00:00:00 ```    When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:  - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z` - Unqualified local time: `2021-11-15T01:00:00` - UTC time offsets: `2021-11-15T01:00:00-05:00`  > Time zones >  > Not all dates from Codat will contain information about time zones.   > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.

        :return: The source_modified_date of this Dispute.
        :rtype: str
        """
        return self._source_modified_date

    @source_modified_date.setter
    def source_modified_date(self, source_modified_date):
        """Sets the source_modified_date of this Dispute.

        In Codat's data model, dates and times are represented using the <a class=\"external\" href=\"https://en.wikipedia.org/wiki/ISO_8601\" target=\"_blank\">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:  ``` 2020-10-08T22:40:50Z 2021-01-01T00:00:00 ```    When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:  - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z` - Unqualified local time: `2021-11-15T01:00:00` - UTC time offsets: `2021-11-15T01:00:00-05:00`  > Time zones >  > Not all dates from Codat will contain information about time zones.   > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.

        :param source_modified_date: The source_modified_date of this Dispute.
        :type source_modified_date: str
        """

        self._source_modified_date = source_modified_date

    @property
    def currency(self):
        """Gets the currency of this Dispute.

        The currency data type in Codat is the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code, e.g. _GBP_.  ## Unknown currencies  In line with the ISO 4217 specification, the code _XXX_ is used when the data source does not return a currency for a transaction.   There are only a very small number of edge cases where this currency code is returned by the Codat system.

        :return: The currency of this Dispute.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this Dispute.

        The currency data type in Codat is the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code, e.g. _GBP_.  ## Unknown currencies  In line with the ISO 4217 specification, the code _XXX_ is used when the data source does not return a currency for a transaction.   There are only a very small number of edge cases where this currency code is returned by the Codat system.

        :param currency: The currency of this Dispute.
        :type currency: str
        """
        if currency is None:
            raise ValueError("Invalid value for `currency`, must not be `None`")

        self._currency = currency

    @property
    def disputed_transactions(self):
        """Gets the disputed_transactions of this Dispute.

        Link to the source event which triggered this transaction.

        :return: The disputed_transactions of this Dispute.
        :rtype: TransactionSourceRef
        """
        return self._disputed_transactions

    @disputed_transactions.setter
    def disputed_transactions(self, disputed_transactions):
        """Sets the disputed_transactions of this Dispute.

        Link to the source event which triggered this transaction.

        :param disputed_transactions: The disputed_transactions of this Dispute.
        :type disputed_transactions: TransactionSourceRef
        """

        self._disputed_transactions = disputed_transactions

    @property
    def due_date(self):
        """Gets the due_date of this Dispute.

        In Codat's data model, dates and times are represented using the <a class=\"external\" href=\"https://en.wikipedia.org/wiki/ISO_8601\" target=\"_blank\">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:  ``` 2020-10-08T22:40:50Z 2021-01-01T00:00:00 ```    When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:  - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z` - Unqualified local time: `2021-11-15T01:00:00` - UTC time offsets: `2021-11-15T01:00:00-05:00`  > Time zones >  > Not all dates from Codat will contain information about time zones.   > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.

        :return: The due_date of this Dispute.
        :rtype: str
        """
        return self._due_date

    @due_date.setter
    def due_date(self, due_date):
        """Sets the due_date of this Dispute.

        In Codat's data model, dates and times are represented using the <a class=\"external\" href=\"https://en.wikipedia.org/wiki/ISO_8601\" target=\"_blank\">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:  ``` 2020-10-08T22:40:50Z 2021-01-01T00:00:00 ```    When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:  - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z` - Unqualified local time: `2021-11-15T01:00:00` - UTC time offsets: `2021-11-15T01:00:00-05:00`  > Time zones >  > Not all dates from Codat will contain information about time zones.   > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.

        :param due_date: The due_date of this Dispute.
        :type due_date: str
        """

        self._due_date = due_date

    @property
    def reason(self):
        """Gets the reason of this Dispute.

        Reason for the dispute

        :return: The reason of this Dispute.
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this Dispute.

        Reason for the dispute

        :param reason: The reason of this Dispute.
        :type reason: str
        """

        self._reason = reason

    @property
    def status(self):
        """Gets the status of this Dispute.


        :return: The status of this Dispute.
        :rtype: DisputeStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Dispute.


        :param status: The status of this Dispute.
        :type status: DisputeStatus
        """

        self._status = status

    @property
    def total_amount(self):
        """Gets the total_amount of this Dispute.

        Total transaction amount that is under dispute.

        :return: The total_amount of this Dispute.
        :rtype: str
        """
        return self._total_amount

    @total_amount.setter
    def total_amount(self, total_amount):
        """Sets the total_amount of this Dispute.

        Total transaction amount that is under dispute.

        :param total_amount: The total_amount of this Dispute.
        :type total_amount: str
        """

        self._total_amount = total_amount
