# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.record_ref import RecordRef
from openapi_server import util


class ProductCategory(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, modified_date: str=None, source_modified_date: str=None, ancestor_refs: List[RecordRef]=None, has_children: bool=None, id: str=None, name: str=None):
        """ProductCategory - a model defined in OpenAPI

        :param modified_date: The modified_date of this ProductCategory.
        :param source_modified_date: The source_modified_date of this ProductCategory.
        :param ancestor_refs: The ancestor_refs of this ProductCategory.
        :param has_children: The has_children of this ProductCategory.
        :param id: The id of this ProductCategory.
        :param name: The name of this ProductCategory.
        """
        self.openapi_types = {
            'modified_date': str,
            'source_modified_date': str,
            'ancestor_refs': List[RecordRef],
            'has_children': bool,
            'id': str,
            'name': str
        }

        self.attribute_map = {
            'modified_date': 'modifiedDate',
            'source_modified_date': 'sourceModifiedDate',
            'ancestor_refs': 'ancestorRefs',
            'has_children': 'hasChildren',
            'id': 'id',
            'name': 'name'
        }

        self._modified_date = modified_date
        self._source_modified_date = source_modified_date
        self._ancestor_refs = ancestor_refs
        self._has_children = has_children
        self._id = id
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProductCategory':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ProductCategory of this ProductCategory.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def modified_date(self):
        """Gets the modified_date of this ProductCategory.

        In Codat's data model, dates and times are represented using the <a class=\"external\" href=\"https://en.wikipedia.org/wiki/ISO_8601\" target=\"_blank\">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:  ``` 2020-10-08T22:40:50Z 2021-01-01T00:00:00 ```    When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:  - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z` - Unqualified local time: `2021-11-15T01:00:00` - UTC time offsets: `2021-11-15T01:00:00-05:00`  > Time zones >  > Not all dates from Codat will contain information about time zones.   > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.

        :return: The modified_date of this ProductCategory.
        :rtype: str
        """
        return self._modified_date

    @modified_date.setter
    def modified_date(self, modified_date):
        """Sets the modified_date of this ProductCategory.

        In Codat's data model, dates and times are represented using the <a class=\"external\" href=\"https://en.wikipedia.org/wiki/ISO_8601\" target=\"_blank\">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:  ``` 2020-10-08T22:40:50Z 2021-01-01T00:00:00 ```    When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:  - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z` - Unqualified local time: `2021-11-15T01:00:00` - UTC time offsets: `2021-11-15T01:00:00-05:00`  > Time zones >  > Not all dates from Codat will contain information about time zones.   > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.

        :param modified_date: The modified_date of this ProductCategory.
        :type modified_date: str
        """

        self._modified_date = modified_date

    @property
    def source_modified_date(self):
        """Gets the source_modified_date of this ProductCategory.

        In Codat's data model, dates and times are represented using the <a class=\"external\" href=\"https://en.wikipedia.org/wiki/ISO_8601\" target=\"_blank\">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:  ``` 2020-10-08T22:40:50Z 2021-01-01T00:00:00 ```    When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:  - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z` - Unqualified local time: `2021-11-15T01:00:00` - UTC time offsets: `2021-11-15T01:00:00-05:00`  > Time zones >  > Not all dates from Codat will contain information about time zones.   > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.

        :return: The source_modified_date of this ProductCategory.
        :rtype: str
        """
        return self._source_modified_date

    @source_modified_date.setter
    def source_modified_date(self, source_modified_date):
        """Sets the source_modified_date of this ProductCategory.

        In Codat's data model, dates and times are represented using the <a class=\"external\" href=\"https://en.wikipedia.org/wiki/ISO_8601\" target=\"_blank\">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:  ``` 2020-10-08T22:40:50Z 2021-01-01T00:00:00 ```    When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:  - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z` - Unqualified local time: `2021-11-15T01:00:00` - UTC time offsets: `2021-11-15T01:00:00-05:00`  > Time zones >  > Not all dates from Codat will contain information about time zones.   > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.

        :param source_modified_date: The source_modified_date of this ProductCategory.
        :type source_modified_date: str
        """

        self._source_modified_date = source_modified_date

    @property
    def ancestor_refs(self):
        """Gets the ancestor_refs of this ProductCategory.

        A collection of parent product categories implicitly ordered with the immediate parent last in the list.

        :return: The ancestor_refs of this ProductCategory.
        :rtype: List[RecordRef]
        """
        return self._ancestor_refs

    @ancestor_refs.setter
    def ancestor_refs(self, ancestor_refs):
        """Sets the ancestor_refs of this ProductCategory.

        A collection of parent product categories implicitly ordered with the immediate parent last in the list.

        :param ancestor_refs: The ancestor_refs of this ProductCategory.
        :type ancestor_refs: List[RecordRef]
        """

        self._ancestor_refs = ancestor_refs

    @property
    def has_children(self):
        """Gets the has_children of this ProductCategory.

        A boolean indicating whether there are other product categories beneath this one in the hierarchy.

        :return: The has_children of this ProductCategory.
        :rtype: bool
        """
        return self._has_children

    @has_children.setter
    def has_children(self, has_children):
        """Sets the has_children of this ProductCategory.

        A boolean indicating whether there are other product categories beneath this one in the hierarchy.

        :param has_children: The has_children of this ProductCategory.
        :type has_children: bool
        """

        self._has_children = has_children

    @property
    def id(self):
        """Gets the id of this ProductCategory.

        The unique identifier of the product category

        :return: The id of this ProductCategory.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ProductCategory.

        The unique identifier of the product category

        :param id: The id of this ProductCategory.
        :type id: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this ProductCategory.

        The name of the product category

        :return: The name of this ProductCategory.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ProductCategory.

        The name of the product category

        :param name: The name of this ProductCategory.
        :type name: str
        """

        self._name = name
