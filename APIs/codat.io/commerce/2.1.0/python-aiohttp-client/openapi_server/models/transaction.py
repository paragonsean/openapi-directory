# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.transaction_source_ref import TransactionSourceRef
from openapi_server.models.transaction_type import TransactionType
from openapi_server import util


class Transaction(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, currency: str=None, sub_type: str=None, total_amount: str=None, transaction_source_ref: TransactionSourceRef=None, type: TransactionType=None, created_date: str=None, source_created_date: str=None, modified_date: str=None, source_modified_date: str=None):
        """Transaction - a model defined in OpenAPI

        :param id: The id of this Transaction.
        :param currency: The currency of this Transaction.
        :param sub_type: The sub_type of this Transaction.
        :param total_amount: The total_amount of this Transaction.
        :param transaction_source_ref: The transaction_source_ref of this Transaction.
        :param type: The type of this Transaction.
        :param created_date: The created_date of this Transaction.
        :param source_created_date: The source_created_date of this Transaction.
        :param modified_date: The modified_date of this Transaction.
        :param source_modified_date: The source_modified_date of this Transaction.
        """
        self.openapi_types = {
            'id': str,
            'currency': str,
            'sub_type': str,
            'total_amount': str,
            'transaction_source_ref': TransactionSourceRef,
            'type': TransactionType,
            'created_date': str,
            'source_created_date': str,
            'modified_date': str,
            'source_modified_date': str
        }

        self.attribute_map = {
            'id': 'id',
            'currency': 'currency',
            'sub_type': 'subType',
            'total_amount': 'totalAmount',
            'transaction_source_ref': 'transactionSourceRef',
            'type': 'type',
            'created_date': 'createdDate',
            'source_created_date': 'sourceCreatedDate',
            'modified_date': 'modifiedDate',
            'source_modified_date': 'sourceModifiedDate'
        }

        self._id = id
        self._currency = currency
        self._sub_type = sub_type
        self._total_amount = total_amount
        self._transaction_source_ref = transaction_source_ref
        self._type = type
        self._created_date = created_date
        self._source_created_date = source_created_date
        self._modified_date = modified_date
        self._source_modified_date = source_modified_date

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Transaction':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Transaction of this Transaction.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this Transaction.

        A unique, persistent identifier for this record

        :return: The id of this Transaction.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Transaction.

        A unique, persistent identifier for this record

        :param id: The id of this Transaction.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def currency(self):
        """Gets the currency of this Transaction.

        The currency data type in Codat is the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code, e.g. _GBP_.  ## Unknown currencies  In line with the ISO 4217 specification, the code _XXX_ is used when the data source does not return a currency for a transaction.   There are only a very small number of edge cases where this currency code is returned by the Codat system.

        :return: The currency of this Transaction.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this Transaction.

        The currency data type in Codat is the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code, e.g. _GBP_.  ## Unknown currencies  In line with the ISO 4217 specification, the code _XXX_ is used when the data source does not return a currency for a transaction.   There are only a very small number of edge cases where this currency code is returned by the Codat system.

        :param currency: The currency of this Transaction.
        :type currency: str
        """

        self._currency = currency

    @property
    def sub_type(self):
        """Gets the sub_type of this Transaction.

        Non-standardised transaction type data from the commerce platform

        :return: The sub_type of this Transaction.
        :rtype: str
        """
        return self._sub_type

    @sub_type.setter
    def sub_type(self, sub_type):
        """Sets the sub_type of this Transaction.

        Non-standardised transaction type data from the commerce platform

        :param sub_type: The sub_type of this Transaction.
        :type sub_type: str
        """

        self._sub_type = sub_type

    @property
    def total_amount(self):
        """Gets the total_amount of this Transaction.

        The total transaction amount

        :return: The total_amount of this Transaction.
        :rtype: str
        """
        return self._total_amount

    @total_amount.setter
    def total_amount(self, total_amount):
        """Sets the total_amount of this Transaction.

        The total transaction amount

        :param total_amount: The total_amount of this Transaction.
        :type total_amount: str
        """

        self._total_amount = total_amount

    @property
    def transaction_source_ref(self):
        """Gets the transaction_source_ref of this Transaction.

        Link to the source event which triggered this transaction

        :return: The transaction_source_ref of this Transaction.
        :rtype: TransactionSourceRef
        """
        return self._transaction_source_ref

    @transaction_source_ref.setter
    def transaction_source_ref(self, transaction_source_ref):
        """Sets the transaction_source_ref of this Transaction.

        Link to the source event which triggered this transaction

        :param transaction_source_ref: The transaction_source_ref of this Transaction.
        :type transaction_source_ref: TransactionSourceRef
        """

        self._transaction_source_ref = transaction_source_ref

    @property
    def type(self):
        """Gets the type of this Transaction.


        :return: The type of this Transaction.
        :rtype: TransactionType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Transaction.


        :param type: The type of this Transaction.
        :type type: TransactionType
        """

        self._type = type

    @property
    def created_date(self):
        """Gets the created_date of this Transaction.

        In Codat's data model, dates and times are represented using the <a class=\"external\" href=\"https://en.wikipedia.org/wiki/ISO_8601\" target=\"_blank\">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:  ``` 2020-10-08T22:40:50Z 2021-01-01T00:00:00 ```    When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:  - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z` - Unqualified local time: `2021-11-15T01:00:00` - UTC time offsets: `2021-11-15T01:00:00-05:00`  > Time zones >  > Not all dates from Codat will contain information about time zones.   > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.

        :return: The created_date of this Transaction.
        :rtype: str
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """Sets the created_date of this Transaction.

        In Codat's data model, dates and times are represented using the <a class=\"external\" href=\"https://en.wikipedia.org/wiki/ISO_8601\" target=\"_blank\">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:  ``` 2020-10-08T22:40:50Z 2021-01-01T00:00:00 ```    When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:  - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z` - Unqualified local time: `2021-11-15T01:00:00` - UTC time offsets: `2021-11-15T01:00:00-05:00`  > Time zones >  > Not all dates from Codat will contain information about time zones.   > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.

        :param created_date: The created_date of this Transaction.
        :type created_date: str
        """

        self._created_date = created_date

    @property
    def source_created_date(self):
        """Gets the source_created_date of this Transaction.

        In Codat's data model, dates and times are represented using the <a class=\"external\" href=\"https://en.wikipedia.org/wiki/ISO_8601\" target=\"_blank\">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:  ``` 2020-10-08T22:40:50Z 2021-01-01T00:00:00 ```    When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:  - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z` - Unqualified local time: `2021-11-15T01:00:00` - UTC time offsets: `2021-11-15T01:00:00-05:00`  > Time zones >  > Not all dates from Codat will contain information about time zones.   > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.

        :return: The source_created_date of this Transaction.
        :rtype: str
        """
        return self._source_created_date

    @source_created_date.setter
    def source_created_date(self, source_created_date):
        """Sets the source_created_date of this Transaction.

        In Codat's data model, dates and times are represented using the <a class=\"external\" href=\"https://en.wikipedia.org/wiki/ISO_8601\" target=\"_blank\">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:  ``` 2020-10-08T22:40:50Z 2021-01-01T00:00:00 ```    When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:  - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z` - Unqualified local time: `2021-11-15T01:00:00` - UTC time offsets: `2021-11-15T01:00:00-05:00`  > Time zones >  > Not all dates from Codat will contain information about time zones.   > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.

        :param source_created_date: The source_created_date of this Transaction.
        :type source_created_date: str
        """

        self._source_created_date = source_created_date

    @property
    def modified_date(self):
        """Gets the modified_date of this Transaction.

        In Codat's data model, dates and times are represented using the <a class=\"external\" href=\"https://en.wikipedia.org/wiki/ISO_8601\" target=\"_blank\">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:  ``` 2020-10-08T22:40:50Z 2021-01-01T00:00:00 ```    When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:  - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z` - Unqualified local time: `2021-11-15T01:00:00` - UTC time offsets: `2021-11-15T01:00:00-05:00`  > Time zones >  > Not all dates from Codat will contain information about time zones.   > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.

        :return: The modified_date of this Transaction.
        :rtype: str
        """
        return self._modified_date

    @modified_date.setter
    def modified_date(self, modified_date):
        """Sets the modified_date of this Transaction.

        In Codat's data model, dates and times are represented using the <a class=\"external\" href=\"https://en.wikipedia.org/wiki/ISO_8601\" target=\"_blank\">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:  ``` 2020-10-08T22:40:50Z 2021-01-01T00:00:00 ```    When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:  - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z` - Unqualified local time: `2021-11-15T01:00:00` - UTC time offsets: `2021-11-15T01:00:00-05:00`  > Time zones >  > Not all dates from Codat will contain information about time zones.   > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.

        :param modified_date: The modified_date of this Transaction.
        :type modified_date: str
        """

        self._modified_date = modified_date

    @property
    def source_modified_date(self):
        """Gets the source_modified_date of this Transaction.

        In Codat's data model, dates and times are represented using the <a class=\"external\" href=\"https://en.wikipedia.org/wiki/ISO_8601\" target=\"_blank\">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:  ``` 2020-10-08T22:40:50Z 2021-01-01T00:00:00 ```    When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:  - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z` - Unqualified local time: `2021-11-15T01:00:00` - UTC time offsets: `2021-11-15T01:00:00-05:00`  > Time zones >  > Not all dates from Codat will contain information about time zones.   > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.

        :return: The source_modified_date of this Transaction.
        :rtype: str
        """
        return self._source_modified_date

    @source_modified_date.setter
    def source_modified_date(self, source_modified_date):
        """Sets the source_modified_date of this Transaction.

        In Codat's data model, dates and times are represented using the <a class=\"external\" href=\"https://en.wikipedia.org/wiki/ISO_8601\" target=\"_blank\">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:  ``` 2020-10-08T22:40:50Z 2021-01-01T00:00:00 ```    When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:  - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z` - Unqualified local time: `2021-11-15T01:00:00` - UTC time offsets: `2021-11-15T01:00:00-05:00`  > Time zones >  > Not all dates from Codat will contain information about time zones.   > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.

        :param source_modified_date: The source_modified_date of this Transaction.
        :type source_modified_date: str
        """

        self._source_modified_date = source_modified_date
