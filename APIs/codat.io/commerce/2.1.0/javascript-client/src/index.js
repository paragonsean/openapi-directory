/**
 * Commerce API
 * Codat's Commerce API allows you to access standardised data from over 11 commerce and POS systems.  Standardize how you connect to your customers’ payment, PoS, and eCommerce systems. Retrieve orders, payouts, payments, and product data in the same way for all the leading commerce platforms.  [Read more...](https://docs.codat.io/commerce-api/overview)  [See our OpenAPI spec](https://github.com/codatio/oas) 
 *
 * The version of the OpenAPI document: 2.1.0
 * Contact: support@codat.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from './ApiClient';
import AddressType from './model/AddressType';
import CompanyInfo from './model/CompanyInfo';
import Customer from './model/Customer';
import CustomerAllOfDefaultCurrency from './model/CustomerAllOfDefaultCurrency';
import CustomerRef from './model/CustomerRef';
import Dispute from './model/Dispute';
import LocationRef from './model/LocationRef';
import Locations from './model/Locations';
import Model0 from './model/Model0';
import Order from './model/Order';
import OrderAllOfCurrency from './model/OrderAllOfCurrency';
import OrderLineItem from './model/OrderLineItem';
import Payment from './model/Payment';
import PaymentMethod from './model/PaymentMethod';
import PaymentMethodRef from './model/PaymentMethodRef';
import PaymentMethodStatus from './model/PaymentMethodStatus';
import PhoneNumberType from './model/PhoneNumberType';
import Product from './model/Product';
import ProductCategory from './model/ProductCategory';
import ProductRef from './model/ProductRef';
import ProductVariantRef from './model/ProductVariantRef';
import ServiceCharge from './model/ServiceCharge';
import TaxComponent from './model/TaxComponent';
import TaxComponentAllocation from './model/TaxComponentAllocation';
import TaxComponentRef from './model/TaxComponentRef';
import Transaction from './model/Transaction';
import TransactionType from './model/TransactionType';
import Weblink from './model/Weblink';
import CompanyInfoApi from './api/CompanyInfoApi';
import CustomersApi from './api/CustomersApi';
import DisputesApi from './api/DisputesApi';
import LocationsApi from './api/LocationsApi';
import OrdersApi from './api/OrdersApi';
import PaymentsApi from './api/PaymentsApi';
import ProductsApi from './api/ProductsApi';
import TaxComponentsApi from './api/TaxComponentsApi';
import TransactionsApi from './api/TransactionsApi';


/**
* Codat&#39;s Commerce API allows you to access standardised data from over 11 commerce and POS systems.  Standardize how you connect to your customers’ payment, PoS, and eCommerce systems. Retrieve orders, payouts, payments, and product data in the same way for all the leading commerce platforms.  [Read more...](https://docs.codat.io/commerce-api/overview)  [See our OpenAPI spec](https://github.com/codatio/oas) .<br>
* The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
* <p>
* An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
* <pre>
* var CommerceApi = require('index'); // See note below*.
* var xxxSvc = new CommerceApi.XxxApi(); // Allocate the API class we're going to use.
* var yyyModel = new CommerceApi.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
* and put the application logic within the callback function.</em>
* </p>
* <p>
* A non-AMD browser application (discouraged) might do something like this:
* <pre>
* var xxxSvc = new CommerceApi.XxxApi(); // Allocate the API class we're going to use.
* var yyy = new CommerceApi.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* </p>
* @module index
* @version 2.1.0
*/
export {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient,

    /**
     * The AddressType model constructor.
     * @property {module:model/AddressType}
     */
    AddressType,

    /**
     * The CompanyInfo model constructor.
     * @property {module:model/CompanyInfo}
     */
    CompanyInfo,

    /**
     * The Customer model constructor.
     * @property {module:model/Customer}
     */
    Customer,

    /**
     * The CustomerAllOfDefaultCurrency model constructor.
     * @property {module:model/CustomerAllOfDefaultCurrency}
     */
    CustomerAllOfDefaultCurrency,

    /**
     * The CustomerRef model constructor.
     * @property {module:model/CustomerRef}
     */
    CustomerRef,

    /**
     * The Dispute model constructor.
     * @property {module:model/Dispute}
     */
    Dispute,

    /**
     * The LocationRef model constructor.
     * @property {module:model/LocationRef}
     */
    LocationRef,

    /**
     * The Locations model constructor.
     * @property {module:model/Locations}
     */
    Locations,

    /**
     * The Model0 model constructor.
     * @property {module:model/Model0}
     */
    Model0,

    /**
     * The Order model constructor.
     * @property {module:model/Order}
     */
    Order,

    /**
     * The OrderAllOfCurrency model constructor.
     * @property {module:model/OrderAllOfCurrency}
     */
    OrderAllOfCurrency,

    /**
     * The OrderLineItem model constructor.
     * @property {module:model/OrderLineItem}
     */
    OrderLineItem,

    /**
     * The Payment model constructor.
     * @property {module:model/Payment}
     */
    Payment,

    /**
     * The PaymentMethod model constructor.
     * @property {module:model/PaymentMethod}
     */
    PaymentMethod,

    /**
     * The PaymentMethodRef model constructor.
     * @property {module:model/PaymentMethodRef}
     */
    PaymentMethodRef,

    /**
     * The PaymentMethodStatus model constructor.
     * @property {module:model/PaymentMethodStatus}
     */
    PaymentMethodStatus,

    /**
     * The PhoneNumberType model constructor.
     * @property {module:model/PhoneNumberType}
     */
    PhoneNumberType,

    /**
     * The Product model constructor.
     * @property {module:model/Product}
     */
    Product,

    /**
     * The ProductCategory model constructor.
     * @property {module:model/ProductCategory}
     */
    ProductCategory,

    /**
     * The ProductRef model constructor.
     * @property {module:model/ProductRef}
     */
    ProductRef,

    /**
     * The ProductVariantRef model constructor.
     * @property {module:model/ProductVariantRef}
     */
    ProductVariantRef,

    /**
     * The ServiceCharge model constructor.
     * @property {module:model/ServiceCharge}
     */
    ServiceCharge,

    /**
     * The TaxComponent model constructor.
     * @property {module:model/TaxComponent}
     */
    TaxComponent,

    /**
     * The TaxComponentAllocation model constructor.
     * @property {module:model/TaxComponentAllocation}
     */
    TaxComponentAllocation,

    /**
     * The TaxComponentRef model constructor.
     * @property {module:model/TaxComponentRef}
     */
    TaxComponentRef,

    /**
     * The Transaction model constructor.
     * @property {module:model/Transaction}
     */
    Transaction,

    /**
     * The TransactionType model constructor.
     * @property {module:model/TransactionType}
     */
    TransactionType,

    /**
     * The Weblink model constructor.
     * @property {module:model/Weblink}
     */
    Weblink,

    /**
    * The CompanyInfoApi service constructor.
    * @property {module:api/CompanyInfoApi}
    */
    CompanyInfoApi,

    /**
    * The CustomersApi service constructor.
    * @property {module:api/CustomersApi}
    */
    CustomersApi,

    /**
    * The DisputesApi service constructor.
    * @property {module:api/DisputesApi}
    */
    DisputesApi,

    /**
    * The LocationsApi service constructor.
    * @property {module:api/LocationsApi}
    */
    LocationsApi,

    /**
    * The OrdersApi service constructor.
    * @property {module:api/OrdersApi}
    */
    OrdersApi,

    /**
    * The PaymentsApi service constructor.
    * @property {module:api/PaymentsApi}
    */
    PaymentsApi,

    /**
    * The ProductsApi service constructor.
    * @property {module:api/ProductsApi}
    */
    ProductsApi,

    /**
    * The TaxComponentsApi service constructor.
    * @property {module:api/TaxComponentsApi}
    */
    TaxComponentsApi,

    /**
    * The TransactionsApi service constructor.
    * @property {module:api/TransactionsApi}
    */
    TransactionsApi
};
