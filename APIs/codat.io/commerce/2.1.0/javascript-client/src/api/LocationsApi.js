/**
 * Commerce API
 * Codat's Commerce API allows you to access standardised data from over 11 commerce and POS systems.  Standardize how you connect to your customersâ€™ payment, PoS, and eCommerce systems. Retrieve orders, payouts, payments, and product data in the same way for all the leading commerce platforms.  [Read more...](https://docs.codat.io/commerce-api/overview)  [See our OpenAPI spec](https://github.com/codatio/oas) 
 *
 * The version of the OpenAPI document: 2.1.0
 * Contact: support@codat.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import LocationsResponse from '../model/LocationsResponse';

/**
* Locations service.
* @module api/LocationsApi
* @version 2.1.0
*/
export default class LocationsApi {

    /**
    * Constructs a new LocationsApi. 
    * @alias module:api/LocationsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the listLocations operation.
     * @callback module:api/LocationsApi~listLocationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LocationsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List locations
     * Retrieve a list of locations as seen in the commerce platform.  A `location` is a geographic place at which stocks of products may be held, or from where orders were placed.
     * @param {String} companyId 
     * @param {String} connectionId 
     * @param {module:api/LocationsApi~listLocationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LocationsResponse}
     */
    listLocations(companyId, connectionId, callback) {
      let postBody = null;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling listLocations");
      }
      // verify the required parameter 'connectionId' is set
      if (connectionId === undefined || connectionId === null) {
        throw new Error("Missing the required parameter 'connectionId' when calling listLocations");
      }

      let pathParams = {
        'companyId': companyId,
        'connectionId': connectionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['auth_header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LocationsResponse;
      return this.apiClient.callApi(
        '/companies/{companyId}/connections/{connectionId}/data/commerce-locations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
