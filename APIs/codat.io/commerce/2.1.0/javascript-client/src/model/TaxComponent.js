/**
 * Commerce API
 * Codat's Commerce API allows you to access standardised data from over 11 commerce and POS systems.  Standardize how you connect to your customersâ€™ payment, PoS, and eCommerce systems. Retrieve orders, payouts, payments, and product data in the same way for all the leading commerce platforms.  [Read more...](https://docs.codat.io/commerce-api/overview)  [See our OpenAPI spec](https://github.com/codatio/oas) 
 *
 * The version of the OpenAPI document: 2.1.0
 * Contact: support@codat.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Model0 from './Model0';
import ModifiedDates from './ModifiedDates';

/**
 * The TaxComponent model module.
 * @module model/TaxComponent
 * @version 2.1.0
 */
class TaxComponent {
    /**
     * Constructs a new <code>TaxComponent</code>.
     * The Tax Components endpoints return tax rates data from the commerce platform, including tax rate names and values. This is to support the mapping of tax rates from the commerce platform to those in the accounting platform.  Explore our [data coverage](https://knowledge.codat.io/supported-features/commerce?view&#x3D;tab-by-data-type&amp;dataType&#x3D;commerce-disputes) for this data type.
     * @alias module:model/TaxComponent
     * @implements module:model/Model0
     * @implements module:model/ModifiedDates
     * @param id {String} A unique, persistent identifier for this record
     */
    constructor(id) { 
        Model0.initialize(this, id);
        TaxComponent.initialize(this, id);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id) { 
        obj['id'] = id;
    }

    /**
     * Constructs a <code>TaxComponent</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TaxComponent} obj Optional instance to populate.
     * @return {module:model/TaxComponent} The populated <code>TaxComponent</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TaxComponent();
            Model0.constructFromObject(data, obj);
            ModifiedDates.constructFromObject(data, obj);

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('modifiedDate')) {
                obj['modifiedDate'] = ApiClient.convertToType(data['modifiedDate'], 'String');
            }
            if (data.hasOwnProperty('sourceModifiedDate')) {
                obj['sourceModifiedDate'] = ApiClient.convertToType(data['sourceModifiedDate'], 'String');
            }
            if (data.hasOwnProperty('isCompound')) {
                obj['isCompound'] = ApiClient.convertToType(data['isCompound'], 'Boolean');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('rate')) {
                obj['rate'] = ApiClient.convertToType(data['rate'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TaxComponent</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TaxComponent</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of TaxComponent.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['modifiedDate'] && !(typeof data['modifiedDate'] === 'string' || data['modifiedDate'] instanceof String)) {
            throw new Error("Expected the field `modifiedDate` to be a primitive type in the JSON string but got " + data['modifiedDate']);
        }
        // ensure the json data is a string
        if (data['sourceModifiedDate'] && !(typeof data['sourceModifiedDate'] === 'string' || data['sourceModifiedDate'] instanceof String)) {
            throw new Error("Expected the field `sourceModifiedDate` to be a primitive type in the JSON string but got " + data['sourceModifiedDate']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }

        return true;
    }


}

TaxComponent.RequiredProperties = ["id"];

/**
 * A unique, persistent identifier for this record
 * @member {String} id
 */
TaxComponent.prototype['id'] = undefined;

/**
 * In Codat's data model, dates and times are represented using the <a class=\"external\" href=\"https://en.wikipedia.org/wiki/ISO_8601\" target=\"_blank\">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:  ``` 2020-10-08T22:40:50Z 2021-01-01T00:00:00 ```    When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:  - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z` - Unqualified local time: `2021-11-15T01:00:00` - UTC time offsets: `2021-11-15T01:00:00-05:00`  > Time zones >  > Not all dates from Codat will contain information about time zones.   > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
 * @member {String} modifiedDate
 */
TaxComponent.prototype['modifiedDate'] = undefined;

/**
 * In Codat's data model, dates and times are represented using the <a class=\"external\" href=\"https://en.wikipedia.org/wiki/ISO_8601\" target=\"_blank\">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:  ``` 2020-10-08T22:40:50Z 2021-01-01T00:00:00 ```    When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:  - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z` - Unqualified local time: `2021-11-15T01:00:00` - UTC time offsets: `2021-11-15T01:00:00-05:00`  > Time zones >  > Not all dates from Codat will contain information about time zones.   > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
 * @member {String} sourceModifiedDate
 */
TaxComponent.prototype['sourceModifiedDate'] = undefined;

/**
 * The Boolean flag to indicate when a Tax Rate Component compounds on a sale.
 * @member {Boolean} isCompound
 */
TaxComponent.prototype['isCompound'] = undefined;

/**
 * Name of the Tax Rate Component in the source commerce platform.
 * @member {String} name
 */
TaxComponent.prototype['name'] = undefined;

/**
 * Rate of taxation represented as a fraction of the net price (typically in the range 0.00 - 1.00).
 * @member {Number} rate
 */
TaxComponent.prototype['rate'] = undefined;


// Implement Model0 interface:
/**
 * A unique, persistent identifier for this record
 * @member {String} id
 */
Model0.prototype['id'] = undefined;




export default TaxComponent;

