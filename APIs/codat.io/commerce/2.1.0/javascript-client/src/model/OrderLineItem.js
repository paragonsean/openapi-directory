/**
 * Commerce API
 * Codat's Commerce API allows you to access standardised data from over 11 commerce and POS systems.  Standardize how you connect to your customersâ€™ payment, PoS, and eCommerce systems. Retrieve orders, payouts, payments, and product data in the same way for all the leading commerce platforms.  [Read more...](https://docs.codat.io/commerce-api/overview)  [See our OpenAPI spec](https://github.com/codatio/oas) 
 *
 * The version of the OpenAPI document: 2.1.0
 * Contact: support@codat.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Model0 from './Model0';
import OrderDiscountAllocation from './OrderDiscountAllocation';
import ProductRef from './ProductRef';
import ProductVariantRef from './ProductVariantRef';
import TaxComponentAllocation from './TaxComponentAllocation';

/**
 * The OrderLineItem model module.
 * @module model/OrderLineItem
 * @version 2.1.0
 */
class OrderLineItem {
    /**
     * Constructs a new <code>OrderLineItem</code>.
     * @alias module:model/OrderLineItem
     * @implements module:model/Model0
     * @param id {String} A unique, persistent identifier for this record
     */
    constructor(id) { 
        Model0.initialize(this, id);
        OrderLineItem.initialize(this, id);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id) { 
        obj['id'] = id;
    }

    /**
     * Constructs a <code>OrderLineItem</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/OrderLineItem} obj Optional instance to populate.
     * @return {module:model/OrderLineItem} The populated <code>OrderLineItem</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new OrderLineItem();
            Model0.constructFromObject(data, obj);

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('discountAllocations')) {
                obj['discountAllocations'] = ApiClient.convertToType(data['discountAllocations'], [OrderDiscountAllocation]);
            }
            if (data.hasOwnProperty('productRef')) {
                obj['productRef'] = ProductRef.constructFromObject(data['productRef']);
            }
            if (data.hasOwnProperty('productVariantRef')) {
                obj['productVariantRef'] = ProductVariantRef.constructFromObject(data['productVariantRef']);
            }
            if (data.hasOwnProperty('quantity')) {
                obj['quantity'] = ApiClient.convertToType(data['quantity'], 'String');
            }
            if (data.hasOwnProperty('taxPercentage')) {
                obj['taxPercentage'] = ApiClient.convertToType(data['taxPercentage'], 'String');
            }
            if (data.hasOwnProperty('taxes')) {
                obj['taxes'] = ApiClient.convertToType(data['taxes'], [TaxComponentAllocation]);
            }
            if (data.hasOwnProperty('totalAmount')) {
                obj['totalAmount'] = ApiClient.convertToType(data['totalAmount'], 'String');
            }
            if (data.hasOwnProperty('totalTaxAmount')) {
                obj['totalTaxAmount'] = ApiClient.convertToType(data['totalTaxAmount'], 'String');
            }
            if (data.hasOwnProperty('unitPrice')) {
                obj['unitPrice'] = ApiClient.convertToType(data['unitPrice'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>OrderLineItem</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>OrderLineItem</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of OrderLineItem.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        if (data['discountAllocations']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['discountAllocations'])) {
                throw new Error("Expected the field `discountAllocations` to be an array in the JSON data but got " + data['discountAllocations']);
            }
            // validate the optional field `discountAllocations` (array)
            for (const item of data['discountAllocations']) {
                OrderDiscountAllocation.validateJSON(item);
            };
        }
        // validate the optional field `productRef`
        if (data['productRef']) { // data not null
          ProductRef.validateJSON(data['productRef']);
        }
        // validate the optional field `productVariantRef`
        if (data['productVariantRef']) { // data not null
          ProductVariantRef.validateJSON(data['productVariantRef']);
        }
        if (data['taxes']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['taxes'])) {
                throw new Error("Expected the field `taxes` to be an array in the JSON data but got " + data['taxes']);
            }
            // validate the optional field `taxes` (array)
            for (const item of data['taxes']) {
                TaxComponentAllocation.validateJSON(item);
            };
        }

        return true;
    }


}

OrderLineItem.RequiredProperties = ["id"];

/**
 * A unique, persistent identifier for this record
 * @member {String} id
 */
OrderLineItem.prototype['id'] = undefined;

/**
 * @member {Array.<module:model/OrderDiscountAllocation>} discountAllocations
 */
OrderLineItem.prototype['discountAllocations'] = undefined;

/**
 * @member {module:model/ProductRef} productRef
 */
OrderLineItem.prototype['productRef'] = undefined;

/**
 * @member {module:model/ProductVariantRef} productVariantRef
 */
OrderLineItem.prototype['productVariantRef'] = undefined;

/**
 * Number of units of the product sold. For refunds, quantity is a negative value. 
 * @member {String} quantity
 */
OrderLineItem.prototype['quantity'] = undefined;

/**
 * Percentage rate (from 0 to 100) of any sale tax applied to the unit amount.
 * @member {String} taxPercentage
 */
OrderLineItem.prototype['taxPercentage'] = undefined;

/**
 * Taxes breakdown as applied to order lines.
 * @member {Array.<module:model/TaxComponentAllocation>} taxes
 */
OrderLineItem.prototype['taxes'] = undefined;

/**
 * Total price of the line item, including discounts, tax and minus any refunds.
 * @member {String} totalAmount
 */
OrderLineItem.prototype['totalAmount'] = undefined;

/**
 * Total amount of tax applied to the line item.
 * @member {String} totalTaxAmount
 */
OrderLineItem.prototype['totalTaxAmount'] = undefined;

/**
 * Price per unit of goods or service.
 * @member {String} unitPrice
 */
OrderLineItem.prototype['unitPrice'] = undefined;


// Implement Model0 interface:
/**
 * A unique, persistent identifier for this record
 * @member {String} id
 */
Model0.prototype['id'] = undefined;




export default OrderLineItem;

