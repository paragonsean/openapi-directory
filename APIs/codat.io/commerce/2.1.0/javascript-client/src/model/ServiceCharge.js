/**
 * Commerce API
 * Codat's Commerce API allows you to access standardised data from over 11 commerce and POS systems.  Standardize how you connect to your customersâ€™ payment, PoS, and eCommerce systems. Retrieve orders, payouts, payments, and product data in the same way for all the leading commerce platforms.  [Read more...](https://docs.codat.io/commerce-api/overview)  [See our OpenAPI spec](https://github.com/codatio/oas) 
 *
 * The version of the OpenAPI document: 2.1.0
 * Contact: support@codat.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ServiceChargeType from './ServiceChargeType';
import TaxComponentAllocation from './TaxComponentAllocation';

/**
 * The ServiceCharge model module.
 * @module model/ServiceCharge
 * @version 2.1.0
 */
class ServiceCharge {
    /**
     * Constructs a new <code>ServiceCharge</code>.
     * @alias module:model/ServiceCharge
     */
    constructor() { 
        
        ServiceCharge.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ServiceCharge</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ServiceCharge} obj Optional instance to populate.
     * @return {module:model/ServiceCharge} The populated <code>ServiceCharge</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ServiceCharge();

            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('quantity')) {
                obj['quantity'] = ApiClient.convertToType(data['quantity'], 'Number');
            }
            if (data.hasOwnProperty('taxAmount')) {
                obj['taxAmount'] = ApiClient.convertToType(data['taxAmount'], 'String');
            }
            if (data.hasOwnProperty('taxPercentage')) {
                obj['taxPercentage'] = ApiClient.convertToType(data['taxPercentage'], 'String');
            }
            if (data.hasOwnProperty('taxes')) {
                obj['taxes'] = ApiClient.convertToType(data['taxes'], [TaxComponentAllocation]);
            }
            if (data.hasOwnProperty('totalAmount')) {
                obj['totalAmount'] = ApiClient.convertToType(data['totalAmount'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ServiceChargeType.constructFromObject(data['type']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ServiceCharge</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ServiceCharge</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        if (data['taxes']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['taxes'])) {
                throw new Error("Expected the field `taxes` to be an array in the JSON data but got " + data['taxes']);
            }
            // validate the optional field `taxes` (array)
            for (const item of data['taxes']) {
                TaxComponentAllocation.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Service charges for this order.
 * @member {String} description
 */
ServiceCharge.prototype['description'] = undefined;

/**
 * The number of times the charge is charged.
 * @member {Number} quantity
 */
ServiceCharge.prototype['quantity'] = undefined;

/**
 * Amount of the service charge that is tax.
 * @member {String} taxAmount
 */
ServiceCharge.prototype['taxAmount'] = undefined;

/**
 * Percentage rate (from 0 to 100) of any tax applied to the service charge.
 * @member {String} taxPercentage
 */
ServiceCharge.prototype['taxPercentage'] = undefined;

/**
 * Taxes breakdown as applied to service charges.
 * @member {Array.<module:model/TaxComponentAllocation>} taxes
 */
ServiceCharge.prototype['taxes'] = undefined;

/**
 * Total service charge, including taxes.
 * @member {String} totalAmount
 */
ServiceCharge.prototype['totalAmount'] = undefined;

/**
 * @member {module:model/ServiceChargeType} type
 */
ServiceCharge.prototype['type'] = undefined;






export default ServiceCharge;

