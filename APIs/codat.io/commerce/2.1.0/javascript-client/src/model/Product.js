/**
 * Commerce API
 * Codat's Commerce API allows you to access standardised data from over 11 commerce and POS systems.  Standardize how you connect to your customersâ€™ payment, PoS, and eCommerce systems. Retrieve orders, payouts, payments, and product data in the same way for all the leading commerce platforms.  [Read more...](https://docs.codat.io/commerce-api/overview)  [See our OpenAPI spec](https://github.com/codatio/oas) 
 *
 * The version of the OpenAPI document: 2.1.0
 * Contact: support@codat.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Model0 from './Model0';
import ProductVariant from './ProductVariant';

/**
 * The Product model module.
 * @module model/Product
 * @version 2.1.0
 */
class Product {
    /**
     * Constructs a new <code>Product</code>.
     * A Product is an item in the company&#39;s inventory, and includes information about the price and quantity of all products, and variants thereof, available for sale.  Explore our [data coverage](https://knowledge.codat.io/supported-features/commerce?view&#x3D;tab-by-data-type&amp;dataType&#x3D;commerce-products) for this data type. 
     * @alias module:model/Product
     * @implements module:model/Model0
     * @param id {String} A unique, persistent identifier for this record
     */
    constructor(id) { 
        Model0.initialize(this, id);
        Product.initialize(this, id);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id) { 
        obj['id'] = id;
    }

    /**
     * Constructs a <code>Product</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Product} obj Optional instance to populate.
     * @return {module:model/Product} The populated <code>Product</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Product();
            Model0.constructFromObject(data, obj);

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('categorization')) {
                obj['categorization'] = ApiClient.convertToType(data['categorization'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('isGiftCard')) {
                obj['isGiftCard'] = ApiClient.convertToType(data['isGiftCard'], 'Boolean');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('variants')) {
                obj['variants'] = ApiClient.convertToType(data['variants'], [ProductVariant]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Product</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Product</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Product.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['categorization'] && !(typeof data['categorization'] === 'string' || data['categorization'] instanceof String)) {
            throw new Error("Expected the field `categorization` to be a primitive type in the JSON string but got " + data['categorization']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        if (data['variants']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['variants'])) {
                throw new Error("Expected the field `variants` to be an array in the JSON data but got " + data['variants']);
            }
            // validate the optional field `variants` (array)
            for (const item of data['variants']) {
                ProductVariant.validateJSON(item);
            };
        }

        return true;
    }


}

Product.RequiredProperties = ["id"];

/**
 * A unique, persistent identifier for this record
 * @member {String} id
 */
Product.prototype['id'] = undefined;

/**
 * Retail category that the product is assigned to
 * @member {String} categorization
 */
Product.prototype['categorization'] = undefined;

/**
 * Description of the product recorded in the commerce or point of sale platform.
 * @member {String} description
 */
Product.prototype['description'] = undefined;

/**
 * Whether the product represents a gift card or voucher that can be redeemed in the commerce or POS platform 
 * @member {Boolean} isGiftCard
 */
Product.prototype['isGiftCard'] = undefined;

/**
 * Name of the product in the commerce or POS system
 * @member {String} name
 */
Product.prototype['name'] = undefined;

/**
 * @member {Array.<module:model/ProductVariant>} variants
 */
Product.prototype['variants'] = undefined;


// Implement Model0 interface:
/**
 * A unique, persistent identifier for this record
 * @member {String} id
 */
Model0.prototype['id'] = undefined;




export default Product;

