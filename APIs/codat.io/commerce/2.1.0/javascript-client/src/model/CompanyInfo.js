/**
 * Commerce API
 * Codat's Commerce API allows you to access standardised data from over 11 commerce and POS systems.  Standardize how you connect to your customersâ€™ payment, PoS, and eCommerce systems. Retrieve orders, payouts, payments, and product data in the same way for all the leading commerce platforms.  [Read more...](https://docs.codat.io/commerce-api/overview)  [See our OpenAPI spec](https://github.com/codatio/oas) 
 *
 * The version of the OpenAPI document: 2.1.0
 * Contact: support@codat.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AccountBalance from './AccountBalance';
import Address from './Address';
import CreatedDate from './CreatedDate';
import ModifiedDates from './ModifiedDates';
import PhoneNumber from './PhoneNumber';
import Weblink from './Weblink';

/**
 * The CompanyInfo model module.
 * @module model/CompanyInfo
 * @version 2.1.0
 */
class CompanyInfo {
    /**
     * Constructs a new <code>CompanyInfo</code>.
     * In the Codat system, company information includes standard commercial details about  a linked company, such as their address, phone number, and company registration.  Explore our [data coverage](https://knowledge.codat.io/supported-features/commerce?view&#x3D;tab-by-data-type&amp;dataType&#x3D;companyInfo) for this data type. 
     * @alias module:model/CompanyInfo
     * @implements module:model/CreatedDate
     * @implements module:model/ModifiedDates
     */
    constructor() { 
        
        CompanyInfo.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CompanyInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CompanyInfo} obj Optional instance to populate.
     * @return {module:model/CompanyInfo} The populated <code>CompanyInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CompanyInfo();
            CreatedDate.constructFromObject(data, obj);
            ModifiedDates.constructFromObject(data, obj);

            if (data.hasOwnProperty('createdDate')) {
                obj['createdDate'] = ApiClient.convertToType(data['createdDate'], 'String');
            }
            if (data.hasOwnProperty('modifiedDate')) {
                obj['modifiedDate'] = ApiClient.convertToType(data['modifiedDate'], 'String');
            }
            if (data.hasOwnProperty('sourceModifiedDate')) {
                obj['sourceModifiedDate'] = ApiClient.convertToType(data['sourceModifiedDate'], 'String');
            }
            if (data.hasOwnProperty('accountBalances')) {
                obj['accountBalances'] = ApiClient.convertToType(data['accountBalances'], [AccountBalance]);
            }
            if (data.hasOwnProperty('addresses')) {
                obj['addresses'] = ApiClient.convertToType(data['addresses'], [Address]);
            }
            if (data.hasOwnProperty('baseCurrency')) {
                obj['baseCurrency'] = ApiClient.convertToType(data['baseCurrency'], 'String');
            }
            if (data.hasOwnProperty('commercePlatformRef')) {
                obj['commercePlatformRef'] = ApiClient.convertToType(data['commercePlatformRef'], 'String');
            }
            if (data.hasOwnProperty('companyLegalName')) {
                obj['companyLegalName'] = ApiClient.convertToType(data['companyLegalName'], 'String');
            }
            if (data.hasOwnProperty('companyName')) {
                obj['companyName'] = ApiClient.convertToType(data['companyName'], 'String');
            }
            if (data.hasOwnProperty('phoneNumbers')) {
                obj['phoneNumbers'] = ApiClient.convertToType(data['phoneNumbers'], [PhoneNumber]);
            }
            if (data.hasOwnProperty('registrationNumber')) {
                obj['registrationNumber'] = ApiClient.convertToType(data['registrationNumber'], 'String');
            }
            if (data.hasOwnProperty('sourceUrls')) {
                obj['sourceUrls'] = ApiClient.convertToType(data['sourceUrls'], {'String': 'String'});
            }
            if (data.hasOwnProperty('webLinks')) {
                obj['webLinks'] = ApiClient.convertToType(data['webLinks'], [Weblink]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CompanyInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CompanyInfo</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['createdDate'] && !(typeof data['createdDate'] === 'string' || data['createdDate'] instanceof String)) {
            throw new Error("Expected the field `createdDate` to be a primitive type in the JSON string but got " + data['createdDate']);
        }
        // ensure the json data is a string
        if (data['modifiedDate'] && !(typeof data['modifiedDate'] === 'string' || data['modifiedDate'] instanceof String)) {
            throw new Error("Expected the field `modifiedDate` to be a primitive type in the JSON string but got " + data['modifiedDate']);
        }
        // ensure the json data is a string
        if (data['sourceModifiedDate'] && !(typeof data['sourceModifiedDate'] === 'string' || data['sourceModifiedDate'] instanceof String)) {
            throw new Error("Expected the field `sourceModifiedDate` to be a primitive type in the JSON string but got " + data['sourceModifiedDate']);
        }
        if (data['accountBalances']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['accountBalances'])) {
                throw new Error("Expected the field `accountBalances` to be an array in the JSON data but got " + data['accountBalances']);
            }
            // validate the optional field `accountBalances` (array)
            for (const item of data['accountBalances']) {
                AccountBalance.validateJSON(item);
            };
        }
        if (data['addresses']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['addresses'])) {
                throw new Error("Expected the field `addresses` to be an array in the JSON data but got " + data['addresses']);
            }
            // validate the optional field `addresses` (array)
            for (const item of data['addresses']) {
                Address.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['baseCurrency'] && !(typeof data['baseCurrency'] === 'string' || data['baseCurrency'] instanceof String)) {
            throw new Error("Expected the field `baseCurrency` to be a primitive type in the JSON string but got " + data['baseCurrency']);
        }
        // ensure the json data is a string
        if (data['commercePlatformRef'] && !(typeof data['commercePlatformRef'] === 'string' || data['commercePlatformRef'] instanceof String)) {
            throw new Error("Expected the field `commercePlatformRef` to be a primitive type in the JSON string but got " + data['commercePlatformRef']);
        }
        // ensure the json data is a string
        if (data['companyLegalName'] && !(typeof data['companyLegalName'] === 'string' || data['companyLegalName'] instanceof String)) {
            throw new Error("Expected the field `companyLegalName` to be a primitive type in the JSON string but got " + data['companyLegalName']);
        }
        // ensure the json data is a string
        if (data['companyName'] && !(typeof data['companyName'] === 'string' || data['companyName'] instanceof String)) {
            throw new Error("Expected the field `companyName` to be a primitive type in the JSON string but got " + data['companyName']);
        }
        if (data['phoneNumbers']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['phoneNumbers'])) {
                throw new Error("Expected the field `phoneNumbers` to be an array in the JSON data but got " + data['phoneNumbers']);
            }
            // validate the optional field `phoneNumbers` (array)
            for (const item of data['phoneNumbers']) {
                PhoneNumber.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['registrationNumber'] && !(typeof data['registrationNumber'] === 'string' || data['registrationNumber'] instanceof String)) {
            throw new Error("Expected the field `registrationNumber` to be a primitive type in the JSON string but got " + data['registrationNumber']);
        }
        if (data['webLinks']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['webLinks'])) {
                throw new Error("Expected the field `webLinks` to be an array in the JSON data but got " + data['webLinks']);
            }
            // validate the optional field `webLinks` (array)
            for (const item of data['webLinks']) {
                Weblink.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * In Codat's data model, dates and times are represented using the <a class=\"external\" href=\"https://en.wikipedia.org/wiki/ISO_8601\" target=\"_blank\">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:  ``` 2020-10-08T22:40:50Z 2021-01-01T00:00:00 ```    When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:  - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z` - Unqualified local time: `2021-11-15T01:00:00` - UTC time offsets: `2021-11-15T01:00:00-05:00`  > Time zones >  > Not all dates from Codat will contain information about time zones.   > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
 * @member {String} createdDate
 */
CompanyInfo.prototype['createdDate'] = undefined;

/**
 * In Codat's data model, dates and times are represented using the <a class=\"external\" href=\"https://en.wikipedia.org/wiki/ISO_8601\" target=\"_blank\">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:  ``` 2020-10-08T22:40:50Z 2021-01-01T00:00:00 ```    When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:  - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z` - Unqualified local time: `2021-11-15T01:00:00` - UTC time offsets: `2021-11-15T01:00:00-05:00`  > Time zones >  > Not all dates from Codat will contain information about time zones.   > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
 * @member {String} modifiedDate
 */
CompanyInfo.prototype['modifiedDate'] = undefined;

/**
 * In Codat's data model, dates and times are represented using the <a class=\"external\" href=\"https://en.wikipedia.org/wiki/ISO_8601\" target=\"_blank\">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:  ``` 2020-10-08T22:40:50Z 2021-01-01T00:00:00 ```    When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:  - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z` - Unqualified local time: `2021-11-15T01:00:00` - UTC time offsets: `2021-11-15T01:00:00-05:00`  > Time zones >  > Not all dates from Codat will contain information about time zones.   > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
 * @member {String} sourceModifiedDate
 */
CompanyInfo.prototype['sourceModifiedDate'] = undefined;

/**
 * The available and current cash balances for the company's accounts
 * @member {Array.<module:model/AccountBalance>} accountBalances
 */
CompanyInfo.prototype['accountBalances'] = undefined;

/**
 * Addresses associated with the company
 * @member {Array.<module:model/Address>} addresses
 */
CompanyInfo.prototype['addresses'] = undefined;

/**
 * The currency data type in Codat is the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code, e.g. _GBP_.  ## Unknown currencies  In line with the ISO 4217 specification, the code _XXX_ is used when the data source does not return a currency for a transaction.   There are only a very small number of edge cases where this currency code is returned by the Codat system.
 * @member {String} baseCurrency
 */
CompanyInfo.prototype['baseCurrency'] = undefined;

/**
 * Identifier or reference for the company in the commerce platform
 * @member {String} commercePlatformRef
 */
CompanyInfo.prototype['commercePlatformRef'] = undefined;

/**
 * The full legal name of the company
 * @member {String} companyLegalName
 */
CompanyInfo.prototype['companyLegalName'] = undefined;

/**
 * The name of the company
 * @member {String} companyName
 */
CompanyInfo.prototype['companyName'] = undefined;

/**
 * Phone numbers associated with the company
 * @member {Array.<module:model/PhoneNumber>} phoneNumbers
 */
CompanyInfo.prototype['phoneNumbers'] = undefined;

/**
 * The registration number of the company
 * @member {String} registrationNumber
 */
CompanyInfo.prototype['registrationNumber'] = undefined;

/**
 * URL addresses for the originating system. For example, potential use cases include 'deeplinking' to the originating system
 * @member {Object.<String, String>} sourceUrls
 */
CompanyInfo.prototype['sourceUrls'] = undefined;

/**
 * Weblinks associated with the company
 * @member {Array.<module:model/Weblink>} webLinks
 */
CompanyInfo.prototype['webLinks'] = undefined;






export default CompanyInfo;

