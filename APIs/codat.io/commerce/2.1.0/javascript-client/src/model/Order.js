/**
 * Commerce API
 * Codat's Commerce API allows you to access standardised data from over 11 commerce and POS systems.  Standardize how you connect to your customersâ€™ payment, PoS, and eCommerce systems. Retrieve orders, payouts, payments, and product data in the same way for all the leading commerce platforms.  [Read more...](https://docs.codat.io/commerce-api/overview)  [See our OpenAPI spec](https://github.com/codatio/oas) 
 *
 * The version of the OpenAPI document: 2.1.0
 * Contact: support@codat.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CreatedDate from './CreatedDate';
import CustomerRef from './CustomerRef';
import LocationRef from './LocationRef';
import ModifiedDates from './ModifiedDates';
import OrderAllOfCurrency from './OrderAllOfCurrency';
import OrderLineItem from './OrderLineItem';
import PaymentRef from './PaymentRef';
import ServiceCharge from './ServiceCharge';

/**
 * The Order model module.
 * @module model/Order
 * @version 2.1.0
 */
class Order {
    /**
     * Constructs a new <code>Order</code>.
     * Orders contain the transaction details for all products sold by the company, and include details of any payments, service charges, or refunds related to each order. You can use data from the Orders endpoints to calculate key metrics, such as gross sales values and monthly recurring revenue (MRR).  Explore our [data coverage](https://knowledge.codat.io/supported-features/commerce?view&#x3D;tab-by-data-type&amp;dataType&#x3D;commerce-orders) for this data type. 
     * @alias module:model/Order
     * @implements module:model/CreatedDate
     * @implements module:model/ModifiedDates
     * @param id {String} A unique, persistent identifier for this record
     */
    constructor(id) { 
        
        Order.initialize(this, id);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id) { 
        obj['id'] = id;
    }

    /**
     * Constructs a <code>Order</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Order} obj Optional instance to populate.
     * @return {module:model/Order} The populated <code>Order</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Order();
            CreatedDate.constructFromObject(data, obj);
            ModifiedDates.constructFromObject(data, obj);

            if (data.hasOwnProperty('createdDate')) {
                obj['createdDate'] = ApiClient.convertToType(data['createdDate'], 'String');
            }
            if (data.hasOwnProperty('modifiedDate')) {
                obj['modifiedDate'] = ApiClient.convertToType(data['modifiedDate'], 'String');
            }
            if (data.hasOwnProperty('sourceModifiedDate')) {
                obj['sourceModifiedDate'] = ApiClient.convertToType(data['sourceModifiedDate'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('closedDate')) {
                obj['closedDate'] = ApiClient.convertToType(data['closedDate'], 'String');
            }
            if (data.hasOwnProperty('country')) {
                obj['country'] = ApiClient.convertToType(data['country'], 'String');
            }
            if (data.hasOwnProperty('currency')) {
                obj['currency'] = OrderAllOfCurrency.constructFromObject(data['currency']);
            }
            if (data.hasOwnProperty('customerRef')) {
                obj['customerRef'] = CustomerRef.constructFromObject(data['customerRef']);
            }
            if (data.hasOwnProperty('locationRef')) {
                obj['locationRef'] = LocationRef.constructFromObject(data['locationRef']);
            }
            if (data.hasOwnProperty('orderLineItems')) {
                obj['orderLineItems'] = ApiClient.convertToType(data['orderLineItems'], [OrderLineItem]);
            }
            if (data.hasOwnProperty('orderNumber')) {
                obj['orderNumber'] = ApiClient.convertToType(data['orderNumber'], 'String');
            }
            if (data.hasOwnProperty('payments')) {
                obj['payments'] = ApiClient.convertToType(data['payments'], [PaymentRef]);
            }
            if (data.hasOwnProperty('serviceCharges')) {
                obj['serviceCharges'] = ApiClient.convertToType(data['serviceCharges'], [ServiceCharge]);
            }
            if (data.hasOwnProperty('totalAmount')) {
                obj['totalAmount'] = ApiClient.convertToType(data['totalAmount'], 'String');
            }
            if (data.hasOwnProperty('totalDiscount')) {
                obj['totalDiscount'] = ApiClient.convertToType(data['totalDiscount'], 'String');
            }
            if (data.hasOwnProperty('totalGratuity')) {
                obj['totalGratuity'] = ApiClient.convertToType(data['totalGratuity'], 'String');
            }
            if (data.hasOwnProperty('totalRefund')) {
                obj['totalRefund'] = ApiClient.convertToType(data['totalRefund'], 'String');
            }
            if (data.hasOwnProperty('totalTaxAmount')) {
                obj['totalTaxAmount'] = ApiClient.convertToType(data['totalTaxAmount'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Order</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Order</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Order.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['createdDate'] && !(typeof data['createdDate'] === 'string' || data['createdDate'] instanceof String)) {
            throw new Error("Expected the field `createdDate` to be a primitive type in the JSON string but got " + data['createdDate']);
        }
        // ensure the json data is a string
        if (data['modifiedDate'] && !(typeof data['modifiedDate'] === 'string' || data['modifiedDate'] instanceof String)) {
            throw new Error("Expected the field `modifiedDate` to be a primitive type in the JSON string but got " + data['modifiedDate']);
        }
        // ensure the json data is a string
        if (data['sourceModifiedDate'] && !(typeof data['sourceModifiedDate'] === 'string' || data['sourceModifiedDate'] instanceof String)) {
            throw new Error("Expected the field `sourceModifiedDate` to be a primitive type in the JSON string but got " + data['sourceModifiedDate']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['closedDate'] && !(typeof data['closedDate'] === 'string' || data['closedDate'] instanceof String)) {
            throw new Error("Expected the field `closedDate` to be a primitive type in the JSON string but got " + data['closedDate']);
        }
        // ensure the json data is a string
        if (data['country'] && !(typeof data['country'] === 'string' || data['country'] instanceof String)) {
            throw new Error("Expected the field `country` to be a primitive type in the JSON string but got " + data['country']);
        }
        // validate the optional field `currency`
        if (data['currency']) { // data not null
          OrderAllOfCurrency.validateJSON(data['currency']);
        }
        // validate the optional field `customerRef`
        if (data['customerRef']) { // data not null
          CustomerRef.validateJSON(data['customerRef']);
        }
        // validate the optional field `locationRef`
        if (data['locationRef']) { // data not null
          LocationRef.validateJSON(data['locationRef']);
        }
        if (data['orderLineItems']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['orderLineItems'])) {
                throw new Error("Expected the field `orderLineItems` to be an array in the JSON data but got " + data['orderLineItems']);
            }
            // validate the optional field `orderLineItems` (array)
            for (const item of data['orderLineItems']) {
                OrderLineItem.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['orderNumber'] && !(typeof data['orderNumber'] === 'string' || data['orderNumber'] instanceof String)) {
            throw new Error("Expected the field `orderNumber` to be a primitive type in the JSON string but got " + data['orderNumber']);
        }
        if (data['payments']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['payments'])) {
                throw new Error("Expected the field `payments` to be an array in the JSON data but got " + data['payments']);
            }
            // validate the optional field `payments` (array)
            for (const item of data['payments']) {
                PaymentRef.validateJSON(item);
            };
        }
        if (data['serviceCharges']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['serviceCharges'])) {
                throw new Error("Expected the field `serviceCharges` to be an array in the JSON data but got " + data['serviceCharges']);
            }
            // validate the optional field `serviceCharges` (array)
            for (const item of data['serviceCharges']) {
                ServiceCharge.validateJSON(item);
            };
        }

        return true;
    }


}

Order.RequiredProperties = ["id"];

/**
 * In Codat's data model, dates and times are represented using the <a class=\"external\" href=\"https://en.wikipedia.org/wiki/ISO_8601\" target=\"_blank\">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:  ``` 2020-10-08T22:40:50Z 2021-01-01T00:00:00 ```    When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:  - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z` - Unqualified local time: `2021-11-15T01:00:00` - UTC time offsets: `2021-11-15T01:00:00-05:00`  > Time zones >  > Not all dates from Codat will contain information about time zones.   > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
 * @member {String} createdDate
 */
Order.prototype['createdDate'] = undefined;

/**
 * In Codat's data model, dates and times are represented using the <a class=\"external\" href=\"https://en.wikipedia.org/wiki/ISO_8601\" target=\"_blank\">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:  ``` 2020-10-08T22:40:50Z 2021-01-01T00:00:00 ```    When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:  - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z` - Unqualified local time: `2021-11-15T01:00:00` - UTC time offsets: `2021-11-15T01:00:00-05:00`  > Time zones >  > Not all dates from Codat will contain information about time zones.   > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
 * @member {String} modifiedDate
 */
Order.prototype['modifiedDate'] = undefined;

/**
 * In Codat's data model, dates and times are represented using the <a class=\"external\" href=\"https://en.wikipedia.org/wiki/ISO_8601\" target=\"_blank\">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:  ``` 2020-10-08T22:40:50Z 2021-01-01T00:00:00 ```    When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:  - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z` - Unqualified local time: `2021-11-15T01:00:00` - UTC time offsets: `2021-11-15T01:00:00-05:00`  > Time zones >  > Not all dates from Codat will contain information about time zones.   > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
 * @member {String} sourceModifiedDate
 */
Order.prototype['sourceModifiedDate'] = undefined;

/**
 * A unique, persistent identifier for this record
 * @member {String} id
 */
Order.prototype['id'] = undefined;

/**
 * In Codat's data model, dates and times are represented using the <a class=\"external\" href=\"https://en.wikipedia.org/wiki/ISO_8601\" target=\"_blank\">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:  ``` 2020-10-08T22:40:50Z 2021-01-01T00:00:00 ```    When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:  - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z` - Unqualified local time: `2021-11-15T01:00:00` - UTC time offsets: `2021-11-15T01:00:00-05:00`  > Time zones >  > Not all dates from Codat will contain information about time zones.   > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
 * @member {String} closedDate
 */
Order.prototype['closedDate'] = undefined;

/**
 * The Codat country property is returned as it was provided in the underlying platform by the company without any formatting on our part.  Depending on the platform the value of this property will either be an <a href=\"https://en.wikipedia.org/wiki/List_of_ISO_3166_country_codes\" target=\"_blank\">ISO 3166</a> code (2-alpha or 3-alpha) or free-form text returned as a string name in our model.   For POST operations against platforms that demand a specific format for the country code, we have documented accepted values in the [options](https://docs.codat.io/codat-api#/operations/get-companies-companyId-connections-connectionId-push) endpoint.
 * @member {String} country
 */
Order.prototype['country'] = undefined;

/**
 * @member {module:model/OrderAllOfCurrency} currency
 */
Order.prototype['currency'] = undefined;

/**
 * @member {module:model/CustomerRef} customerRef
 */
Order.prototype['customerRef'] = undefined;

/**
 * @member {module:model/LocationRef} locationRef
 */
Order.prototype['locationRef'] = undefined;

/**
 * @member {Array.<module:model/OrderLineItem>} orderLineItems
 */
Order.prototype['orderLineItems'] = undefined;

/**
 * Friendly reference for the order in the commerce or point of sale platform.
 * @member {String} orderNumber
 */
Order.prototype['orderNumber'] = undefined;

/**
 * @member {Array.<module:model/PaymentRef>} payments
 */
Order.prototype['payments'] = undefined;

/**
 * @member {Array.<module:model/ServiceCharge>} serviceCharges
 */
Order.prototype['serviceCharges'] = undefined;

/**
 * Total amount of the order, including tax, net of any discounts and refunds.
 * @member {String} totalAmount
 */
Order.prototype['totalAmount'] = undefined;

/**
 * Total amount of discount applied to the order.
 * @member {String} totalDiscount
 */
Order.prototype['totalDiscount'] = undefined;

/**
 * Extra amount added to a bill.
 * @member {String} totalGratuity
 */
Order.prototype['totalGratuity'] = undefined;

/**
 * Total amount refunded issued by a merchant on an order (always a negative value).
 * @member {String} totalRefund
 */
Order.prototype['totalRefund'] = undefined;

/**
 * Total amount of tax applied to the order.
 * @member {String} totalTaxAmount
 */
Order.prototype['totalTaxAmount'] = undefined;






export default Order;

