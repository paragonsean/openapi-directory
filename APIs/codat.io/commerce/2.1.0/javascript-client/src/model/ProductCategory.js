/**
 * Commerce API
 * Codat's Commerce API allows you to access standardised data from over 11 commerce and POS systems.  Standardize how you connect to your customersâ€™ payment, PoS, and eCommerce systems. Retrieve orders, payouts, payments, and product data in the same way for all the leading commerce platforms.  [Read more...](https://docs.codat.io/commerce-api/overview)  [See our OpenAPI spec](https://github.com/codatio/oas) 
 *
 * The version of the OpenAPI document: 2.1.0
 * Contact: support@codat.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ModifiedDates from './ModifiedDates';
import RecordRef from './RecordRef';

/**
 * The ProductCategory model module.
 * @module model/ProductCategory
 * @version 2.1.0
 */
class ProductCategory {
    /**
     * Constructs a new <code>ProductCategory</code>.
     * Product categories are used to classify a group of products together, either by type (e.g. \&quot;Furniture\&quot;), or sometimes by tax profile.  Explore our [data coverage](https://knowledge.codat.io/supported-features/commerce?view&#x3D;tab-by-data-type&amp;dataType&#x3D;commerce-productCategories) for this data type.
     * @alias module:model/ProductCategory
     * @implements module:model/ModifiedDates
     */
    constructor() { 
        
        ProductCategory.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ProductCategory</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ProductCategory} obj Optional instance to populate.
     * @return {module:model/ProductCategory} The populated <code>ProductCategory</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ProductCategory();
            ModifiedDates.constructFromObject(data, obj);

            if (data.hasOwnProperty('modifiedDate')) {
                obj['modifiedDate'] = ApiClient.convertToType(data['modifiedDate'], 'String');
            }
            if (data.hasOwnProperty('sourceModifiedDate')) {
                obj['sourceModifiedDate'] = ApiClient.convertToType(data['sourceModifiedDate'], 'String');
            }
            if (data.hasOwnProperty('ancestorRefs')) {
                obj['ancestorRefs'] = ApiClient.convertToType(data['ancestorRefs'], [RecordRef]);
            }
            if (data.hasOwnProperty('hasChildren')) {
                obj['hasChildren'] = ApiClient.convertToType(data['hasChildren'], 'Boolean');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ProductCategory</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ProductCategory</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['modifiedDate'] && !(typeof data['modifiedDate'] === 'string' || data['modifiedDate'] instanceof String)) {
            throw new Error("Expected the field `modifiedDate` to be a primitive type in the JSON string but got " + data['modifiedDate']);
        }
        // ensure the json data is a string
        if (data['sourceModifiedDate'] && !(typeof data['sourceModifiedDate'] === 'string' || data['sourceModifiedDate'] instanceof String)) {
            throw new Error("Expected the field `sourceModifiedDate` to be a primitive type in the JSON string but got " + data['sourceModifiedDate']);
        }
        if (data['ancestorRefs']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['ancestorRefs'])) {
                throw new Error("Expected the field `ancestorRefs` to be an array in the JSON data but got " + data['ancestorRefs']);
            }
            // validate the optional field `ancestorRefs` (array)
            for (const item of data['ancestorRefs']) {
                RecordRef.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }

        return true;
    }


}



/**
 * In Codat's data model, dates and times are represented using the <a class=\"external\" href=\"https://en.wikipedia.org/wiki/ISO_8601\" target=\"_blank\">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:  ``` 2020-10-08T22:40:50Z 2021-01-01T00:00:00 ```    When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:  - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z` - Unqualified local time: `2021-11-15T01:00:00` - UTC time offsets: `2021-11-15T01:00:00-05:00`  > Time zones >  > Not all dates from Codat will contain information about time zones.   > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
 * @member {String} modifiedDate
 */
ProductCategory.prototype['modifiedDate'] = undefined;

/**
 * In Codat's data model, dates and times are represented using the <a class=\"external\" href=\"https://en.wikipedia.org/wiki/ISO_8601\" target=\"_blank\">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:  ``` 2020-10-08T22:40:50Z 2021-01-01T00:00:00 ```    When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:  - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z` - Unqualified local time: `2021-11-15T01:00:00` - UTC time offsets: `2021-11-15T01:00:00-05:00`  > Time zones >  > Not all dates from Codat will contain information about time zones.   > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
 * @member {String} sourceModifiedDate
 */
ProductCategory.prototype['sourceModifiedDate'] = undefined;

/**
 * A collection of parent product categories implicitly ordered with the immediate parent last in the list.
 * @member {Array.<module:model/RecordRef>} ancestorRefs
 */
ProductCategory.prototype['ancestorRefs'] = undefined;

/**
 * A boolean indicating whether there are other product categories beneath this one in the hierarchy.
 * @member {Boolean} hasChildren
 */
ProductCategory.prototype['hasChildren'] = undefined;

/**
 * The unique identifier of the product category
 * @member {String} id
 */
ProductCategory.prototype['id'] = undefined;

/**
 * The name of the product category
 * @member {String} name
 */
ProductCategory.prototype['name'] = undefined;






export default ProductCategory;

