# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.language import Language
from openapi_server.models.variable import Variable
from openapi_server import util


class SurveyMetadataBase(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, interview_count: int=None, languages: List[Language]=None, name: str=None, title: str=None, variables: List[Variable]=None):
        """SurveyMetadataBase - a model defined in OpenAPI

        :param interview_count: The interview_count of this SurveyMetadataBase.
        :param languages: The languages of this SurveyMetadataBase.
        :param name: The name of this SurveyMetadataBase.
        :param title: The title of this SurveyMetadataBase.
        :param variables: The variables of this SurveyMetadataBase.
        """
        self.openapi_types = {
            'interview_count': int,
            'languages': List[Language],
            'name': str,
            'title': str,
            'variables': List[Variable]
        }

        self.attribute_map = {
            'interview_count': 'interviewCount',
            'languages': 'languages',
            'name': 'name',
            'title': 'title',
            'variables': 'variables'
        }

        self._interview_count = interview_count
        self._languages = languages
        self._name = name
        self._title = title
        self._variables = variables

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SurveyMetadataBase':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SurveyMetadataBase of this SurveyMetadataBase.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def interview_count(self):
        """Gets the interview_count of this SurveyMetadataBase.


        :return: The interview_count of this SurveyMetadataBase.
        :rtype: int
        """
        return self._interview_count

    @interview_count.setter
    def interview_count(self, interview_count):
        """Sets the interview_count of this SurveyMetadataBase.


        :param interview_count: The interview_count of this SurveyMetadataBase.
        :type interview_count: int
        """

        self._interview_count = interview_count

    @property
    def languages(self):
        """Gets the languages of this SurveyMetadataBase.


        :return: The languages of this SurveyMetadataBase.
        :rtype: List[Language]
        """
        return self._languages

    @languages.setter
    def languages(self, languages):
        """Sets the languages of this SurveyMetadataBase.


        :param languages: The languages of this SurveyMetadataBase.
        :type languages: List[Language]
        """

        self._languages = languages

    @property
    def name(self):
        """Gets the name of this SurveyMetadataBase.


        :return: The name of this SurveyMetadataBase.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SurveyMetadataBase.


        :param name: The name of this SurveyMetadataBase.
        :type name: str
        """

        self._name = name

    @property
    def title(self):
        """Gets the title of this SurveyMetadataBase.


        :return: The title of this SurveyMetadataBase.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this SurveyMetadataBase.


        :param title: The title of this SurveyMetadataBase.
        :type title: str
        """

        self._title = title

    @property
    def variables(self):
        """Gets the variables of this SurveyMetadataBase.


        :return: The variables of this SurveyMetadataBase.
        :rtype: List[Variable]
        """
        return self._variables

    @variables.setter
    def variables(self, variables):
        """Sets the variables of this SurveyMetadataBase.


        :param variables: The variables of this SurveyMetadataBase.
        :type variables: List[Variable]
        """

        self._variables = variables
