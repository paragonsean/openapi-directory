# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.alt_label import AltLabel
from openapi_server import util


class Label(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, alt_labels: List[AltLabel]=None, text: str=None):
        """Label - a model defined in OpenAPI

        :param alt_labels: The alt_labels of this Label.
        :param text: The text of this Label.
        """
        self.openapi_types = {
            'alt_labels': List[AltLabel],
            'text': str
        }

        self.attribute_map = {
            'alt_labels': 'altLabels',
            'text': 'text'
        }

        self._alt_labels = alt_labels
        self._text = text

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Label':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Label of this Label.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def alt_labels(self):
        """Gets the alt_labels of this Label.


        :return: The alt_labels of this Label.
        :rtype: List[AltLabel]
        """
        return self._alt_labels

    @alt_labels.setter
    def alt_labels(self, alt_labels):
        """Sets the alt_labels of this Label.


        :param alt_labels: The alt_labels of this Label.
        :type alt_labels: List[AltLabel]
        """

        self._alt_labels = alt_labels

    @property
    def text(self):
        """Gets the text of this Label.


        :return: The text of this Label.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this Label.


        :param text: The text of this Label.
        :type text: str
        """

        self._text = text
