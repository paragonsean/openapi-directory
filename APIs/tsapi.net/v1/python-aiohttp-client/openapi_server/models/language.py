# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Language(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ident: str=None, name: str=None, sub_languages: List[Language]=None):
        """Language - a model defined in OpenAPI

        :param ident: The ident of this Language.
        :param name: The name of this Language.
        :param sub_languages: The sub_languages of this Language.
        """
        self.openapi_types = {
            'ident': str,
            'name': str,
            'sub_languages': List[Language]
        }

        self.attribute_map = {
            'ident': 'ident',
            'name': 'name',
            'sub_languages': 'subLanguages'
        }

        self._ident = ident
        self._name = name
        self._sub_languages = sub_languages

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Language':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Language of this Language.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ident(self):
        """Gets the ident of this Language.


        :return: The ident of this Language.
        :rtype: str
        """
        return self._ident

    @ident.setter
    def ident(self, ident):
        """Sets the ident of this Language.


        :param ident: The ident of this Language.
        :type ident: str
        """

        self._ident = ident

    @property
    def name(self):
        """Gets the name of this Language.


        :return: The name of this Language.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Language.


        :param name: The name of this Language.
        :type name: str
        """

        self._name = name

    @property
    def sub_languages(self):
        """Gets the sub_languages of this Language.


        :return: The sub_languages of this Language.
        :rtype: List[Language]
        """
        return self._sub_languages

    @sub_languages.setter
    def sub_languages(self, sub_languages):
        """Sets the sub_languages of this Language.


        :param sub_languages: The sub_languages of this Language.
        :type sub_languages: List[Language]
        """

        self._sub_languages = sub_languages
