/**
 * TSAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Label from './Label';
import ParentType from './ParentType';
import UseType from './UseType';
import VariableType from './VariableType';
import VariableValues from './VariableValues';

/**
 * The Variable model module.
 * @module model/Variable
 * @version v1
 */
class Variable {
    /**
     * Constructs a new <code>Variable</code>.
     * @alias module:model/Variable
     */
    constructor() { 
        
        Variable.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Variable</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Variable} obj Optional instance to populate.
     * @return {module:model/Variable} The populated <code>Variable</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Variable();

            if (data.hasOwnProperty('ident')) {
                obj['ident'] = ApiClient.convertToType(data['ident'], 'String');
            }
            if (data.hasOwnProperty('label')) {
                obj['label'] = ApiClient.convertToType(data['label'], Label);
            }
            if (data.hasOwnProperty('maxResponses')) {
                obj['maxResponses'] = ApiClient.convertToType(data['maxResponses'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('parentType')) {
                obj['parentType'] = ApiClient.convertToType(data['parentType'], ParentType);
            }
            if (data.hasOwnProperty('questions')) {
                obj['questions'] = ApiClient.convertToType(data['questions'], [Variable]);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], VariableType);
            }
            if (data.hasOwnProperty('use')) {
                obj['use'] = ApiClient.convertToType(data['use'], UseType);
            }
            if (data.hasOwnProperty('variableValues')) {
                obj['variableValues'] = ApiClient.convertToType(data['variableValues'], VariableValues);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Variable</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Variable</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['ident'] && !(typeof data['ident'] === 'string' || data['ident'] instanceof String)) {
            throw new Error("Expected the field `ident` to be a primitive type in the JSON string but got " + data['ident']);
        }
        // validate the optional field `label`
        if (data['label']) { // data not null
          Label.validateJSON(data['label']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        if (data['questions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['questions'])) {
                throw new Error("Expected the field `questions` to be an array in the JSON data but got " + data['questions']);
            }
            // validate the optional field `questions` (array)
            for (const item of data['questions']) {
                Variable.validateJSON(item);
            };
        }
        // validate the optional field `variableValues`
        if (data['variableValues']) { // data not null
          VariableValues.validateJSON(data['variableValues']);
        }

        return true;
    }


}



/**
 * @member {String} ident
 */
Variable.prototype['ident'] = undefined;

/**
 * @member {module:model/Label} label
 */
Variable.prototype['label'] = undefined;

/**
 * @member {Number} maxResponses
 */
Variable.prototype['maxResponses'] = undefined;

/**
 * @member {String} name
 */
Variable.prototype['name'] = undefined;

/**
 * @member {module:model/ParentType} parentType
 */
Variable.prototype['parentType'] = undefined;

/**
 * @member {Array.<module:model/Variable>} questions
 */
Variable.prototype['questions'] = undefined;

/**
 * @member {module:model/VariableType} type
 */
Variable.prototype['type'] = undefined;

/**
 * @member {module:model/UseType} use
 */
Variable.prototype['use'] = undefined;

/**
 * @member {module:model/VariableValues} variableValues
 */
Variable.prototype['variableValues'] = undefined;






export default Variable;

