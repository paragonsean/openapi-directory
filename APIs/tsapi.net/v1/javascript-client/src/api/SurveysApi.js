/**
 * TSAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Interview from '../model/Interview';
import SurveyDetail from '../model/SurveyDetail';
import SurveyMetadata from '../model/SurveyMetadata';

/**
* Surveys service.
* @module api/SurveysApi
* @version v1
*/
export default class SurveysApi {

    /**
    * Constructs a new SurveysApi. 
    * @alias module:api/SurveysApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the surveysGet operation.
     * @callback module:api/SurveysApi~surveysGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SurveyDetail>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of available Surveys
     * @param {module:api/SurveysApi~surveysGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SurveyDetail>}
     */
    surveysGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basic'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = [SurveyDetail];
      return this.apiClient.callApi(
        '/Surveys', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the surveysSurveyIdInterviewsGet operation.
     * @callback module:api/SurveysApi~surveysSurveyIdInterviewsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Interview>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetches some interview records for a specific survey
     * @param {String} surveyId 
     * @param {Object} opts Optional parameters
     * @param {Number} [start] 
     * @param {Number} [maxLength] 
     * @param {module:api/SurveysApi~surveysSurveyIdInterviewsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Interview>}
     */
    surveysSurveyIdInterviewsGet(surveyId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'surveyId' is set
      if (surveyId === undefined || surveyId === null) {
        throw new Error("Missing the required parameter 'surveyId' when calling surveysSurveyIdInterviewsGet");
      }

      let pathParams = {
        'surveyId': surveyId
      };
      let queryParams = {
        'start': opts['start'],
        'maxLength': opts['maxLength']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basic'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = [Interview];
      return this.apiClient.callApi(
        '/Surveys/{surveyId}/Interviews', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the surveysSurveyIdMetadataGet operation.
     * @callback module:api/SurveysApi~surveysSurveyIdMetadataGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SurveyMetadata} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetches the metadata for a specific survey
     * @param {String} surveyId 
     * @param {module:api/SurveysApi~surveysSurveyIdMetadataGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SurveyMetadata}
     */
    surveysSurveyIdMetadataGet(surveyId, callback) {
      let postBody = null;
      // verify the required parameter 'surveyId' is set
      if (surveyId === undefined || surveyId === null) {
        throw new Error("Missing the required parameter 'surveyId' when calling surveysSurveyIdMetadataGet");
      }

      let pathParams = {
        'surveyId': surveyId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basic'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'text/plain'];
      let returnType = SurveyMetadata;
      return this.apiClient.callApi(
        '/Surveys/{surveyId}/Metadata', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
