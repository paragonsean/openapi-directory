/**
 * TSAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVariableType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVariableType::OAIVariableType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVariableType::OAIVariableType() {
    this->initializeModel();
}

OAIVariableType::~OAIVariableType() {}

void OAIVariableType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIVariableType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIVariableType::fromJson(QString jsonString) {
    
    if ( jsonString.compare(QString::number(1), Qt::CaseInsensitive) == 0) {
        m_value = eOAIVariableType::_1;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare(QString::number(2), Qt::CaseInsensitive) == 0) {
        m_value = eOAIVariableType::_2;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare(QString::number(3), Qt::CaseInsensitive) == 0) {
        m_value = eOAIVariableType::_3;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare(QString::number(4), Qt::CaseInsensitive) == 0) {
        m_value = eOAIVariableType::_4;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare(QString::number(5), Qt::CaseInsensitive) == 0) {
        m_value = eOAIVariableType::_5;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare(QString::number(6), Qt::CaseInsensitive) == 0) {
        m_value = eOAIVariableType::_6;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare(QString::number(7), Qt::CaseInsensitive) == 0) {
        m_value = eOAIVariableType::_7;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare(QString::number(8), Qt::CaseInsensitive) == 0) {
        m_value = eOAIVariableType::_8;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIVariableType::fromJsonValue(QJsonValue json) {
m_value = static_cast<eOAIVariableType>(json.toInt());
}

QString OAIVariableType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIVariableType::_1:
            val = QString::number(1);
            break;
        case eOAIVariableType::_2:
            val = QString::number(2);
            break;
        case eOAIVariableType::_3:
            val = QString::number(3);
            break;
        case eOAIVariableType::_4:
            val = QString::number(4);
            break;
        case eOAIVariableType::_5:
            val = QString::number(5);
            break;
        case eOAIVariableType::_6:
            val = QString::number(6);
            break;
        case eOAIVariableType::_7:
            val = QString::number(7);
            break;
        case eOAIVariableType::_8:
            val = QString::number(8);
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIVariableType::asJsonValue() const {
    
    return QJsonValue(static_cast<int>(m_value));
}


OAIVariableType::eOAIVariableType OAIVariableType::getValue() const {
    return m_value;
}

void OAIVariableType::setValue(const OAIVariableType::eOAIVariableType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIVariableType::isSet() const {
    
    return m_value_isSet;
}

bool OAIVariableType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
