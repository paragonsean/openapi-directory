/**
 * The Noun Project
 * Icons for Everything
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";

/**
* Icons service.
* @module api/IconsApi
* @version 1.0.0
*/
export default class IconsApi {

    /**
    * Constructs a new IconsApi. 
    * @alias module:api/IconsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getIconsByTerm operation.
     * @callback module:api/IconsApi~getIconsByTermCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get icons by term
     * Returns a list of icons
     * @param {String} term Icon term
     * @param {Object} opts Optional parameters
     * @param {Number} [limitToPublicDomain] Limit results to public domain icons only
     * @param {Number} [limit] Maximum number of results
     * @param {Number} [offset] Number of results to displace or skip over
     * @param {Number} [page] Number of results of limit length to displace or skip over
     * @param {module:api/IconsApi~getIconsByTermCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getIconsByTerm(term, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'term' is set
      if (term === undefined || term === null) {
        throw new Error("Missing the required parameter 'term' when calling getIconsByTerm");
      }

      let pathParams = {
        'term': term
      };
      let queryParams = {
        'limit_to_public_domain': opts['limitToPublicDomain'],
        'limit': opts['limit'],
        'offset': opts['offset'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/icons/{term}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRecentIcons operation.
     * @callback module:api/IconsApi~getRecentIconsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get recent icons
     * Returns list of most recently uploaded icons
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] Maximum number of results
     * @param {Number} [offset] Number of results to displace or skip over
     * @param {Number} [page] Number of results of limit length to displace or skip over
     * @param {module:api/IconsApi~getRecentIconsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getRecentIcons(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/icons/recent_uploads', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
