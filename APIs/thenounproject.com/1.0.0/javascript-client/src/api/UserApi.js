/**
 * The Noun Project
 * Icons for Everything
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";

/**
* User service.
* @module api/UserApi
* @version 1.0.0
*/
export default class UserApi {

    /**
    * Constructs a new UserApi. 
    * @alias module:api/UserApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getUserCollection operation.
     * @callback module:api/UserApi~getUserCollectionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get user collection
     * Returns a single collection associated with a user
     * @param {Number} userId User id
     * @param {String} slug Collection slug
     * @param {module:api/UserApi~getUserCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getUserCollection(userId, slug, callback) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getUserCollection");
      }
      // verify the required parameter 'slug' is set
      if (slug === undefined || slug === null) {
        throw new Error("Missing the required parameter 'slug' when calling getUserCollection");
      }

      let pathParams = {
        'user_id': userId,
        'slug': slug
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/user/{user_id}/collections/{slug}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUserCollections operation.
     * @callback module:api/UserApi~getUserCollectionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get user collections
     * Returns a list of collections associated with a user
     * @param {Number} userId User id
     * @param {module:api/UserApi~getUserCollectionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getUserCollections(userId, callback) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getUserCollections");
      }

      let pathParams = {
        'user_id': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/user/{user_id}/collections', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUserUploadsWithUser operation.
     * @callback module:api/UserApi~getUserUploadsWithUserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get user uploads with user
     * Returns a list of uploads associated with a user
     * @param {String} username Username
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] Maximum number of results
     * @param {Number} [offset] Number of results to displace or skip over
     * @param {Number} [page] Number of results of limit length to displace or skip over
     * @param {module:api/UserApi~getUserUploadsWithUserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getUserUploadsWithUser(username, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling getUserUploadsWithUser");
      }

      let pathParams = {
        'username': username
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/user/{username}/uploads', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
