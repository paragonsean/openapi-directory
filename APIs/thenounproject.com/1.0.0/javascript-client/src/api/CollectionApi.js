/**
 * The Noun Project
 * Icons for Everything
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";

/**
* Collection service.
* @module api/CollectionApi
* @version 1.0.0
*/
export default class CollectionApi {

    /**
    * Constructs a new CollectionApi. 
    * @alias module:api/CollectionApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getCollectionById operation.
     * @callback module:api/CollectionApi~getCollectionByIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get collection by id
     * Returns a single collection
     * @param {Number} id Collection id
     * @param {module:api/CollectionApi~getCollectionByIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getCollectionById(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getCollectionById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/collection/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCollectionBySlug operation.
     * @callback module:api/CollectionApi~getCollectionBySlugCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get collection by slug
     * Returns a single collection
     * @param {String} slug Collection slug
     * @param {module:api/CollectionApi~getCollectionBySlugCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getCollectionBySlug(slug, callback) {
      let postBody = null;
      // verify the required parameter 'slug' is set
      if (slug === undefined || slug === null) {
        throw new Error("Missing the required parameter 'slug' when calling getCollectionBySlug");
      }

      let pathParams = {
        'slug': slug
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/collection/{slug}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCollectionIconsById operation.
     * @callback module:api/CollectionApi~getCollectionIconsByIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get collection icons by id
     * Returns a list of icons associated with a collection
     * @param {Number} id Collection id
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] Maximum number of results
     * @param {Number} [offset] Number of results to displace or skip over
     * @param {Number} [page] Number of results of limit length to displace or skip over
     * @param {module:api/CollectionApi~getCollectionIconsByIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getCollectionIconsById(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getCollectionIconsById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/collection/{id}/icons', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCollectionIconsBySlug operation.
     * @callback module:api/CollectionApi~getCollectionIconsBySlugCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get collection icons by slug
     * Returns a list of icons associated with a collection
     * @param {String} slug Collection slug
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] Maximum number of results
     * @param {Number} [offset] Number of results to displace or skip over
     * @param {Number} [page] Number of results of limit length to displace or skip over
     * @param {module:api/CollectionApi~getCollectionIconsBySlugCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getCollectionIconsBySlug(slug, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'slug' is set
      if (slug === undefined || slug === null) {
        throw new Error("Missing the required parameter 'slug' when calling getCollectionIconsBySlug");
      }

      let pathParams = {
        'slug': slug
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/collection/{slug}/icons', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
