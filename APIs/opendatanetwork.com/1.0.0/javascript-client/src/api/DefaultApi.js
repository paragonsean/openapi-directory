/**
 * ODN API
 * The Socrata OpenDataNetwork (ODN) REST API exposes public data, often continuosly updated and enhanced, from many thousands of public government and non profit agencies.  Much of this data originating from independent sources is fused together to create new, and often powerful, entity level data. The API, in addition to search and autosuggest capabilities for finding datasets, enables data based comparisons across geographical regions such as states, counties, metropolitan areas, cities and zip codes using highly vetted data providers such as US Census, BEA, HUD and others. Comparison data is preformatted for easy and efficient display on a chart, graph or interactive map.  The API also exposes data organized by narrative style questions a human might ask. The questions can be rapidly found using an autosuggest style index, and then used to directly access all data needed to thoroughly and authoritatively answer the question. Retrieved data includes time series (temporally aligned), tabular, map heavy (includes spatial boundaries), and auto generated unstructured descriptive text.  The ODN API does not duplicate API endpoints or services provided by public sector agencies, but rather, returns context relevant pre-populated REST URLs, when appropriate, so the caller can access data directly from the source.  The [open source](http://github.com/socrata/odn-backend) API powers [OpenDataNetwork.com](http://OpenDataNetwork.com), an [open source](http://github.com/socrata/opendatanetwork.com) site; the site highlights myriad uses and provides API badges with contextually relevant API example REST endpoints and documentation pointers.  Finally, we continuously add new dat sources which appear automatically in the API, so if your favorite data source is not available, check back soon. You can also join us [HERE](http://www.opendatanetwork.com/join-open-data-network) and receive updates or let us know which data sources you are most interested in.  ## App Tokens  Registering for and including a [Socrata application token](https://dev.socrata.com/docs/app-tokens.html) is _required_ for the ODN API. They can be passed either using the `app_token` parameter or the `X-App-Token` HTTP header.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";

/**
* Default service.
* @module api/DefaultApi
* @version 1.0.0
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createAMap operation.
     * @callback module:api/DefaultApi~createAMapCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a map
     * 
     * @param {String} variable A single variable ID.
     * @param {String} entityId A comma separated list of entity IDs. Entities must have the same type and represent geographical regions.
     * @param {Object} opts Optional parameters
     * @param {String} [constraint] Values must be specified for each constraint in the dataset. For example, to generate map data for `demographics.population.count`, you must specify a value for `year` by passing `year=2013`.
     * @param {String} [appToken] The [Socrata App Token](https://dev.socrata.com/docs/app-tokens.html) to be used with your request. The `app_token` parameter is required if an app token is not passed via the `X-App-Token` HTTP header. Clients must [register for their own app tokens](https://dev.socrata.com/docs/app-tokens.html).
     * @param {String} [xAppToken] e.g. cQovpGcdUT1CSzgYk0KPYdAI0
     * @param {module:api/DefaultApi~createAMapCallback} callback The callback function, accepting three arguments: error, data, response
     */
    createAMap(variable, entityId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'variable' is set
      if (variable === undefined || variable === null) {
        throw new Error("Missing the required parameter 'variable' when calling createAMap");
      }
      // verify the required parameter 'entityId' is set
      if (entityId === undefined || entityId === null) {
        throw new Error("Missing the required parameter 'entityId' when calling createAMap");
      }

      let pathParams = {
      };
      let queryParams = {
        'variable': variable,
        'entity_id': entityId,
        'constraint': opts['constraint'],
        'app_token': opts['appToken']
      };
      let headerParams = {
        'X-App-Token': opts['xAppToken']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/data/v1/map/new', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the findAllAvailableDataForSomeEntities operation.
     * @callback module:api/DefaultApi~findAllAvailableDataForSomeEntitiesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find all available data for some entities
     * 
     * @param {String} entityId Comma separated list of entity IDs.
     * @param {Object} opts Optional parameters
     * @param {String} [appToken] The [Socrata App Token](https://dev.socrata.com/docs/app-tokens.html) to be used with your request. The `app_token` parameter is required if an app token is not passed via the `X-App-Token` HTTP header. Clients must [register for their own app tokens](https://dev.socrata.com/docs/app-tokens.html).
     * @param {String} [xAppToken] e.g. cQovpGcdUT1CSzgYk0KPYdAI0
     * @param {module:api/DefaultApi~findAllAvailableDataForSomeEntitiesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    findAllAvailableDataForSomeEntities(entityId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'entityId' is set
      if (entityId === undefined || entityId === null) {
        throw new Error("Missing the required parameter 'entityId' when calling findAllAvailableDataForSomeEntities");
      }

      let pathParams = {
      };
      let queryParams = {
        'entity_id': entityId,
        'app_token': opts['appToken']
      };
      let headerParams = {
        'X-App-Token': opts['xAppToken']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/data/v1/availability/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the findTheRelativesOfAnEntity operation.
     * @callback module:api/DefaultApi~findTheRelativesOfAnEntityCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find the relatives of an entity
     * 
     * @param {module:model/String} relation The type of relation to find.
     * @param {String} entityId ID of the target entity.
     * @param {Object} opts Optional parameters
     * @param {String} [variableId] If this parameter is included, only entities with data for the given variable will be returned. Note that this may cause the number of entities returned to be less than the specified `limit`.
     * @param {Number} [limit = 10)] Maximum number of entities in each group. Must be an integer from 1 to 1000.
     * @param {String} [appToken] The [Socrata App Token](https://dev.socrata.com/docs/app-tokens.html) to be used with your request. The `app_token` parameter is required if an app token is not passed via the `X-App-Token` HTTP header. Clients must [register for their own app tokens](https://dev.socrata.com/docs/app-tokens.html).
     * @param {String} [xAppToken] e.g. cQovpGcdUT1CSzgYk0KPYdAI0
     * @param {module:api/DefaultApi~findTheRelativesOfAnEntityCallback} callback The callback function, accepting three arguments: error, data, response
     */
    findTheRelativesOfAnEntity(relation, entityId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'relation' is set
      if (relation === undefined || relation === null) {
        throw new Error("Missing the required parameter 'relation' when calling findTheRelativesOfAnEntity");
      }
      // verify the required parameter 'entityId' is set
      if (entityId === undefined || entityId === null) {
        throw new Error("Missing the required parameter 'entityId' when calling findTheRelativesOfAnEntity");
      }

      let pathParams = {
        'relation': relation
      };
      let queryParams = {
        'entity_id': entityId,
        'variable_id': opts['variableId'],
        'limit': opts['limit'],
        'app_token': opts['appToken']
      };
      let headerParams = {
        'X-App-Token': opts['xAppToken']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/entity/v1/{relation}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getConstraintPermutationsForEntities operation.
     * @callback module:api/DefaultApi~getConstraintPermutationsForEntitiesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get constraint permutations for entities
     * 
     * @param {String} variable Full ID of the variable to retrieve.
     * @param {String} entityId Comma separated list of entity IDs.
     * @param {String} constraint Constraint to use.
     * @param {Object} opts Optional parameters
     * @param {String} [appToken] The [Socrata App Token](https://dev.socrata.com/docs/app-tokens.html) to be used with your request. The `app_token` parameter is required if an app token is not passed via the `X-App-Token` HTTP header. Clients must [register for their own app tokens](https://dev.socrata.com/docs/app-tokens.html).
     * @param {String} [xAppToken] e.g. cQovpGcdUT1CSzgYk0KPYdAI0
     * @param {module:api/DefaultApi~getConstraintPermutationsForEntitiesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getConstraintPermutationsForEntities(variable, entityId, constraint, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'variable' is set
      if (variable === undefined || variable === null) {
        throw new Error("Missing the required parameter 'variable' when calling getConstraintPermutationsForEntities");
      }
      // verify the required parameter 'entityId' is set
      if (entityId === undefined || entityId === null) {
        throw new Error("Missing the required parameter 'entityId' when calling getConstraintPermutationsForEntities");
      }
      // verify the required parameter 'constraint' is set
      if (constraint === undefined || constraint === null) {
        throw new Error("Missing the required parameter 'constraint' when calling getConstraintPermutationsForEntities");
      }

      let pathParams = {
        'variable': variable
      };
      let queryParams = {
        'entity_id': entityId,
        'constraint': constraint,
        'app_token': opts['appToken']
      };
      let headerParams = {
        'X-App-Token': opts['xAppToken']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/data/v1/constraint/{variable}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDatasets operation.
     * @callback module:api/DefaultApi~getDatasetsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get datasets
     * 
     * @param {Object} opts Optional parameters
     * @param {String} [entityId] Entities to use in formulating the query.
     * @param {String} [datasetId] If included, the search terms of the dataset will be used in the query.
     * @param {Number} [limit = 10)] Maximum number of results to return. Must be an integer from 0 to 50000.
     * @param {Number} [offset] Number of results to skip. Used for pagination.
     * @param {String} [appToken] The [Socrata App Token](https://dev.socrata.com/docs/app-tokens.html) to be used with your request. The `app_token` parameter is required if an app token is not passed via the `X-App-Token` HTTP header. Clients must [register for their own app tokens](https://dev.socrata.com/docs/app-tokens.html).
     * @param {String} [xAppToken] e.g. cQovpGcdUT1CSzgYk0KPYdAI0
     * @param {module:api/DefaultApi~getDatasetsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getDatasets(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'entity_id': opts['entityId'],
        'dataset_id': opts['datasetId'],
        'limit': opts['limit'],
        'offset': opts['offset'],
        'app_token': opts['appToken']
      };
      let headerParams = {
        'X-App-Token': opts['xAppToken']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/search/v1/dataset', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEntities operation.
     * @callback module:api/DefaultApi~getEntitiesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Entities
     * 
     * @param {Object} opts Optional parameters
     * @param {String} [entityId] ID of the entity.
     * @param {String} [entityName] Name of the entity.
     * @param {String} [entityType] Type of the entity.
     * @param {String} [appToken] The [Socrata App Token](https://dev.socrata.com/docs/app-tokens.html) to be used with your request. The `app_token` parameter is required if an app token is not passed via the `X-App-Token` HTTP header. Clients must [register for their own app tokens](https://dev.socrata.com/docs/app-tokens.html).
     * @param {String} [xAppToken] e.g. cQovpGcdUT1CSzgYk0KPYdAI0
     * @param {module:api/DefaultApi~getEntitiesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getEntities(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'entity_id': opts['entityId'],
        'entity_name': opts['entityName'],
        'entity_type': opts['entityType'],
        'app_token': opts['appToken']
      };
      let headerParams = {
        'X-App-Token': opts['xAppToken']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/entity/v1', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getQuestions operation.
     * @callback module:api/DefaultApi~getQuestionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get questions
     * 
     * @param {String} query String to search against.
     * @param {Object} opts Optional parameters
     * @param {Number} [limit = 10)] Maximum number of results to return. Must be an integer from 0 to 50000.
     * @param {Number} [offset] Number of results to skip. Used for pagination.
     * @param {String} [appToken] The [Socrata App Token](https://dev.socrata.com/docs/app-tokens.html) to be used with your request. The `app_token` parameter is required if an app token is not passed via the `X-App-Token` HTTP header. Clients must [register for their own app tokens](https://dev.socrata.com/docs/app-tokens.html).
     * @param {String} [xAppToken] e.g. cQovpGcdUT1CSzgYk0KPYdAI0
     * @param {module:api/DefaultApi~getQuestionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getQuestions(query, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'query' is set
      if (query === undefined || query === null) {
        throw new Error("Missing the required parameter 'query' when calling getQuestions");
      }

      let pathParams = {
      };
      let queryParams = {
        'query': query,
        'limit': opts['limit'],
        'offset': opts['offset'],
        'app_token': opts['appToken']
      };
      let headerParams = {
        'X-App-Token': opts['xAppToken']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/search/v1/question', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSuggestions operation.
     * @callback module:api/DefaultApi~getSuggestionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get suggestions
     * 
     * @param {module:model/String} type Type of the object to find.
     * @param {String} query Query to match.
     * @param {Object} opts Optional parameters
     * @param {Number} [limit = 5)] Maximum number of results to return. Must be an integer from 0 to 100.
     * @param {String} [variableId] This parameter is only available when suggesting entities with `type=entity`. If it is provided, suggestions will be filtered to include only entities that have data for the given variable.  If the variable provided is invalid, no entities will be returned.  Note that this filtering will increase response time significantly, so it should only be used when necessary.
     * @param {String} [appToken] The [Socrata App Token](https://dev.socrata.com/docs/app-tokens.html) to be used with your request. The `app_token` parameter is required if an app token is not passed via the `X-App-Token` HTTP header. Clients must [register for their own app tokens](https://dev.socrata.com/docs/app-tokens.html).
     * @param {String} [xAppToken] e.g. cQovpGcdUT1CSzgYk0KPYdAI0
     * @param {module:api/DefaultApi~getSuggestionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getSuggestions(type, query, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling getSuggestions");
      }
      // verify the required parameter 'query' is set
      if (query === undefined || query === null) {
        throw new Error("Missing the required parameter 'query' when calling getSuggestions");
      }

      let pathParams = {
        'type': type
      };
      let queryParams = {
        'query': query,
        'limit': opts['limit'],
        'variable_id': opts['variableId'],
        'app_token': opts['appToken']
      };
      let headerParams = {
        'X-App-Token': opts['xAppToken']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/suggest/v1/{type}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getValuesForVariables operation.
     * @callback module:api/DefaultApi~getValuesForVariablesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get values for variables
     * 
     * @param {String} variable Comma separated list of variable IDs. Defaults to retrieving all variables. It is also possible to pass in a topic such as `demographics`, or a dataset such as `demographics.population`, which would both be equivalent to specifying `demographics.population.count` and `demographics.population.change`. Note that only variables in the same dataset are allowed.
     * @param {Object} opts Optional parameters
     * @param {String} [entityId] Comma separated list of entity IDs. Defaults to retrieving all entities. Note that since there is currently no results pagination, retrieving values for all entities may produce incomplete results.
     * @param {Number} [forecast] Number of steps to forecast. Must be an integer between 0 and 20. Forecasts are produced using linear extrapolation on the data. They are only available when retrieving data for a single variable across many numerical constraint options.  + Default `0`
     * @param {Boolean} [describe] Whether or not to produce a description of the data. Set to `true` to produce a description. Descriptions are not available if no entities are specified.  + Default `false`
     * @param {module:model/String} [format] If format is set to `google`, the data frame will be formatted as a [Google Visualizations data table](https://developers.google.com/chart/interactive/docs/reference#datatable-class). If the format is not provided or invalid, then the frame will be formatted normally.
     * @param {String} [appToken] The [Socrata App Token](https://dev.socrata.com/docs/app-tokens.html) to be used with your request. The `app_token` parameter is required if an app token is not passed via the `X-App-Token` HTTP header. Clients must [register for their own app tokens](https://dev.socrata.com/docs/app-tokens.html).
     * @param {String} [xAppToken] e.g. cQovpGcdUT1CSzgYk0KPYdAI0
     * @param {module:api/DefaultApi~getValuesForVariablesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getValuesForVariables(variable, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'variable' is set
      if (variable === undefined || variable === null) {
        throw new Error("Missing the required parameter 'variable' when calling getValuesForVariables");
      }

      let pathParams = {
      };
      let queryParams = {
        'variable': variable,
        'entity_id': opts['entityId'],
        'forecast': opts['forecast'],
        'describe': opts['describe'],
        'format': opts['format'],
        'app_token': opts['appToken']
      };
      let headerParams = {
        'X-App-Token': opts['xAppToken']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/data/v1/values', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
