/*
 * ODN API
 * The Socrata OpenDataNetwork (ODN) REST API exposes public data, often continuosly updated and enhanced, from many thousands of public government and non profit agencies.  Much of this data originating from independent sources is fused together to create new, and often powerful, entity level data. The API, in addition to search and autosuggest capabilities for finding datasets, enables data based comparisons across geographical regions such as states, counties, metropolitan areas, cities and zip codes using highly vetted data providers such as US Census, BEA, HUD and others. Comparison data is preformatted for easy and efficient display on a chart, graph or interactive map.  The API also exposes data organized by narrative style questions a human might ask. The questions can be rapidly found using an autosuggest style index, and then used to directly access all data needed to thoroughly and authoritatively answer the question. Retrieved data includes time series (temporally aligned), tabular, map heavy (includes spatial boundaries), and auto generated unstructured descriptive text.  The ODN API does not duplicate API endpoints or services provided by public sector agencies, but rather, returns context relevant pre-populated REST URLs, when appropriate, so the caller can access data directly from the source.  The [open source](http://github.com/socrata/odn-backend) API powers [OpenDataNetwork.com](http://OpenDataNetwork.com), an [open source](http://github.com/socrata/opendatanetwork.com) site; the site highlights myriad uses and provides API badges with contextually relevant API example REST endpoints and documentation pointers.  Finally, we continuously add new dat sources which appear automatically in the API, so if your favorite data source is not available, check back soon. You can also join us [HERE](http://www.opendatanetwork.com/join-open-data-network) and receive updates or let us know which data sources you are most interested in.  ## App Tokens  Registering for and including a [Socrata application token](https://dev.socrata.com/docs/app-tokens.html) is _required_ for the ODN API. They can be passed either using the `app_token` parameter or the `X-App-Token` HTTP header.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createAMap
     * @param variable A single variable ID. (required)
     * @param entityId A comma separated list of entity IDs. Entities must have the same type and represent geographical regions. (required)
     * @param constraint Values must be specified for each constraint in the dataset. For example, to generate map data for &#x60;demographics.population.count&#x60;, you must specify a value for &#x60;year&#x60; by passing &#x60;year&#x3D;2013&#x60;. (optional)
     * @param appToken The [Socrata App Token](https://dev.socrata.com/docs/app-tokens.html) to be used with your request. The &#x60;app_token&#x60; parameter is required if an app token is not passed via the &#x60;X-App-Token&#x60; HTTP header. Clients must [register for their own app tokens](https://dev.socrata.com/docs/app-tokens.html). (optional)
     * @param xAppToken e.g. cQovpGcdUT1CSzgYk0KPYdAI0 (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAMapCall(String variable, String entityId, String constraint, String appToken, String xAppToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/data/v1/map/new";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (variable != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("variable", variable));
        }

        if (entityId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("entity_id", entityId));
        }

        if (constraint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("constraint", constraint));
        }

        if (appToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("app_token", appToken));
        }

        if (xAppToken != null) {
            localVarHeaderParams.put("X-App-Token", localVarApiClient.parameterToString(xAppToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createAMapValidateBeforeCall(String variable, String entityId, String constraint, String appToken, String xAppToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'variable' is set
        if (variable == null) {
            throw new ApiException("Missing the required parameter 'variable' when calling createAMap(Async)");
        }

        // verify the required parameter 'entityId' is set
        if (entityId == null) {
            throw new ApiException("Missing the required parameter 'entityId' when calling createAMap(Async)");
        }

        return createAMapCall(variable, entityId, constraint, appToken, xAppToken, _callback);

    }

    /**
     * Create a map
     * 
     * @param variable A single variable ID. (required)
     * @param entityId A comma separated list of entity IDs. Entities must have the same type and represent geographical regions. (required)
     * @param constraint Values must be specified for each constraint in the dataset. For example, to generate map data for &#x60;demographics.population.count&#x60;, you must specify a value for &#x60;year&#x60; by passing &#x60;year&#x3D;2013&#x60;. (optional)
     * @param appToken The [Socrata App Token](https://dev.socrata.com/docs/app-tokens.html) to be used with your request. The &#x60;app_token&#x60; parameter is required if an app token is not passed via the &#x60;X-App-Token&#x60; HTTP header. Clients must [register for their own app tokens](https://dev.socrata.com/docs/app-tokens.html). (optional)
     * @param xAppToken e.g. cQovpGcdUT1CSzgYk0KPYdAI0 (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void createAMap(String variable, String entityId, String constraint, String appToken, String xAppToken) throws ApiException {
        createAMapWithHttpInfo(variable, entityId, constraint, appToken, xAppToken);
    }

    /**
     * Create a map
     * 
     * @param variable A single variable ID. (required)
     * @param entityId A comma separated list of entity IDs. Entities must have the same type and represent geographical regions. (required)
     * @param constraint Values must be specified for each constraint in the dataset. For example, to generate map data for &#x60;demographics.population.count&#x60;, you must specify a value for &#x60;year&#x60; by passing &#x60;year&#x3D;2013&#x60;. (optional)
     * @param appToken The [Socrata App Token](https://dev.socrata.com/docs/app-tokens.html) to be used with your request. The &#x60;app_token&#x60; parameter is required if an app token is not passed via the &#x60;X-App-Token&#x60; HTTP header. Clients must [register for their own app tokens](https://dev.socrata.com/docs/app-tokens.html). (optional)
     * @param xAppToken e.g. cQovpGcdUT1CSzgYk0KPYdAI0 (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> createAMapWithHttpInfo(String variable, String entityId, String constraint, String appToken, String xAppToken) throws ApiException {
        okhttp3.Call localVarCall = createAMapValidateBeforeCall(variable, entityId, constraint, appToken, xAppToken, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create a map (asynchronously)
     * 
     * @param variable A single variable ID. (required)
     * @param entityId A comma separated list of entity IDs. Entities must have the same type and represent geographical regions. (required)
     * @param constraint Values must be specified for each constraint in the dataset. For example, to generate map data for &#x60;demographics.population.count&#x60;, you must specify a value for &#x60;year&#x60; by passing &#x60;year&#x3D;2013&#x60;. (optional)
     * @param appToken The [Socrata App Token](https://dev.socrata.com/docs/app-tokens.html) to be used with your request. The &#x60;app_token&#x60; parameter is required if an app token is not passed via the &#x60;X-App-Token&#x60; HTTP header. Clients must [register for their own app tokens](https://dev.socrata.com/docs/app-tokens.html). (optional)
     * @param xAppToken e.g. cQovpGcdUT1CSzgYk0KPYdAI0 (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAMapAsync(String variable, String entityId, String constraint, String appToken, String xAppToken, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = createAMapValidateBeforeCall(variable, entityId, constraint, appToken, xAppToken, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for findAllAvailableDataForSomeEntities
     * @param entityId Comma separated list of entity IDs. (required)
     * @param appToken The [Socrata App Token](https://dev.socrata.com/docs/app-tokens.html) to be used with your request. The &#x60;app_token&#x60; parameter is required if an app token is not passed via the &#x60;X-App-Token&#x60; HTTP header. Clients must [register for their own app tokens](https://dev.socrata.com/docs/app-tokens.html). (optional)
     * @param xAppToken e.g. cQovpGcdUT1CSzgYk0KPYdAI0 (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call findAllAvailableDataForSomeEntitiesCall(String entityId, String appToken, String xAppToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/data/v1/availability/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (entityId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("entity_id", entityId));
        }

        if (appToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("app_token", appToken));
        }

        if (xAppToken != null) {
            localVarHeaderParams.put("X-App-Token", localVarApiClient.parameterToString(xAppToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call findAllAvailableDataForSomeEntitiesValidateBeforeCall(String entityId, String appToken, String xAppToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'entityId' is set
        if (entityId == null) {
            throw new ApiException("Missing the required parameter 'entityId' when calling findAllAvailableDataForSomeEntities(Async)");
        }

        return findAllAvailableDataForSomeEntitiesCall(entityId, appToken, xAppToken, _callback);

    }

    /**
     * Find all available data for some entities
     * 
     * @param entityId Comma separated list of entity IDs. (required)
     * @param appToken The [Socrata App Token](https://dev.socrata.com/docs/app-tokens.html) to be used with your request. The &#x60;app_token&#x60; parameter is required if an app token is not passed via the &#x60;X-App-Token&#x60; HTTP header. Clients must [register for their own app tokens](https://dev.socrata.com/docs/app-tokens.html). (optional)
     * @param xAppToken e.g. cQovpGcdUT1CSzgYk0KPYdAI0 (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void findAllAvailableDataForSomeEntities(String entityId, String appToken, String xAppToken) throws ApiException {
        findAllAvailableDataForSomeEntitiesWithHttpInfo(entityId, appToken, xAppToken);
    }

    /**
     * Find all available data for some entities
     * 
     * @param entityId Comma separated list of entity IDs. (required)
     * @param appToken The [Socrata App Token](https://dev.socrata.com/docs/app-tokens.html) to be used with your request. The &#x60;app_token&#x60; parameter is required if an app token is not passed via the &#x60;X-App-Token&#x60; HTTP header. Clients must [register for their own app tokens](https://dev.socrata.com/docs/app-tokens.html). (optional)
     * @param xAppToken e.g. cQovpGcdUT1CSzgYk0KPYdAI0 (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> findAllAvailableDataForSomeEntitiesWithHttpInfo(String entityId, String appToken, String xAppToken) throws ApiException {
        okhttp3.Call localVarCall = findAllAvailableDataForSomeEntitiesValidateBeforeCall(entityId, appToken, xAppToken, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Find all available data for some entities (asynchronously)
     * 
     * @param entityId Comma separated list of entity IDs. (required)
     * @param appToken The [Socrata App Token](https://dev.socrata.com/docs/app-tokens.html) to be used with your request. The &#x60;app_token&#x60; parameter is required if an app token is not passed via the &#x60;X-App-Token&#x60; HTTP header. Clients must [register for their own app tokens](https://dev.socrata.com/docs/app-tokens.html). (optional)
     * @param xAppToken e.g. cQovpGcdUT1CSzgYk0KPYdAI0 (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call findAllAvailableDataForSomeEntitiesAsync(String entityId, String appToken, String xAppToken, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = findAllAvailableDataForSomeEntitiesValidateBeforeCall(entityId, appToken, xAppToken, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for findTheRelativesOfAnEntity
     * @param relation The type of relation to find. (required)
     * @param entityId ID of the target entity. (required)
     * @param variableId If this parameter is included, only entities with data for the given variable will be returned. Note that this may cause the number of entities returned to be less than the specified &#x60;limit&#x60;. (optional)
     * @param limit Maximum number of entities in each group. Must be an integer from 1 to 1000. (optional, default to 10)
     * @param appToken The [Socrata App Token](https://dev.socrata.com/docs/app-tokens.html) to be used with your request. The &#x60;app_token&#x60; parameter is required if an app token is not passed via the &#x60;X-App-Token&#x60; HTTP header. Clients must [register for their own app tokens](https://dev.socrata.com/docs/app-tokens.html). (optional)
     * @param xAppToken e.g. cQovpGcdUT1CSzgYk0KPYdAI0 (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call findTheRelativesOfAnEntityCall(String relation, String entityId, String variableId, BigDecimal limit, String appToken, String xAppToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/entity/v1/{relation}"
            .replace("{" + "relation" + "}", localVarApiClient.escapeString(relation.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (entityId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("entity_id", entityId));
        }

        if (variableId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("variable_id", variableId));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (appToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("app_token", appToken));
        }

        if (xAppToken != null) {
            localVarHeaderParams.put("X-App-Token", localVarApiClient.parameterToString(xAppToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call findTheRelativesOfAnEntityValidateBeforeCall(String relation, String entityId, String variableId, BigDecimal limit, String appToken, String xAppToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'relation' is set
        if (relation == null) {
            throw new ApiException("Missing the required parameter 'relation' when calling findTheRelativesOfAnEntity(Async)");
        }

        // verify the required parameter 'entityId' is set
        if (entityId == null) {
            throw new ApiException("Missing the required parameter 'entityId' when calling findTheRelativesOfAnEntity(Async)");
        }

        return findTheRelativesOfAnEntityCall(relation, entityId, variableId, limit, appToken, xAppToken, _callback);

    }

    /**
     * Find the relatives of an entity
     * 
     * @param relation The type of relation to find. (required)
     * @param entityId ID of the target entity. (required)
     * @param variableId If this parameter is included, only entities with data for the given variable will be returned. Note that this may cause the number of entities returned to be less than the specified &#x60;limit&#x60;. (optional)
     * @param limit Maximum number of entities in each group. Must be an integer from 1 to 1000. (optional, default to 10)
     * @param appToken The [Socrata App Token](https://dev.socrata.com/docs/app-tokens.html) to be used with your request. The &#x60;app_token&#x60; parameter is required if an app token is not passed via the &#x60;X-App-Token&#x60; HTTP header. Clients must [register for their own app tokens](https://dev.socrata.com/docs/app-tokens.html). (optional)
     * @param xAppToken e.g. cQovpGcdUT1CSzgYk0KPYdAI0 (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void findTheRelativesOfAnEntity(String relation, String entityId, String variableId, BigDecimal limit, String appToken, String xAppToken) throws ApiException {
        findTheRelativesOfAnEntityWithHttpInfo(relation, entityId, variableId, limit, appToken, xAppToken);
    }

    /**
     * Find the relatives of an entity
     * 
     * @param relation The type of relation to find. (required)
     * @param entityId ID of the target entity. (required)
     * @param variableId If this parameter is included, only entities with data for the given variable will be returned. Note that this may cause the number of entities returned to be less than the specified &#x60;limit&#x60;. (optional)
     * @param limit Maximum number of entities in each group. Must be an integer from 1 to 1000. (optional, default to 10)
     * @param appToken The [Socrata App Token](https://dev.socrata.com/docs/app-tokens.html) to be used with your request. The &#x60;app_token&#x60; parameter is required if an app token is not passed via the &#x60;X-App-Token&#x60; HTTP header. Clients must [register for their own app tokens](https://dev.socrata.com/docs/app-tokens.html). (optional)
     * @param xAppToken e.g. cQovpGcdUT1CSzgYk0KPYdAI0 (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> findTheRelativesOfAnEntityWithHttpInfo(String relation, String entityId, String variableId, BigDecimal limit, String appToken, String xAppToken) throws ApiException {
        okhttp3.Call localVarCall = findTheRelativesOfAnEntityValidateBeforeCall(relation, entityId, variableId, limit, appToken, xAppToken, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Find the relatives of an entity (asynchronously)
     * 
     * @param relation The type of relation to find. (required)
     * @param entityId ID of the target entity. (required)
     * @param variableId If this parameter is included, only entities with data for the given variable will be returned. Note that this may cause the number of entities returned to be less than the specified &#x60;limit&#x60;. (optional)
     * @param limit Maximum number of entities in each group. Must be an integer from 1 to 1000. (optional, default to 10)
     * @param appToken The [Socrata App Token](https://dev.socrata.com/docs/app-tokens.html) to be used with your request. The &#x60;app_token&#x60; parameter is required if an app token is not passed via the &#x60;X-App-Token&#x60; HTTP header. Clients must [register for their own app tokens](https://dev.socrata.com/docs/app-tokens.html). (optional)
     * @param xAppToken e.g. cQovpGcdUT1CSzgYk0KPYdAI0 (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call findTheRelativesOfAnEntityAsync(String relation, String entityId, String variableId, BigDecimal limit, String appToken, String xAppToken, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = findTheRelativesOfAnEntityValidateBeforeCall(relation, entityId, variableId, limit, appToken, xAppToken, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getConstraintPermutationsForEntities
     * @param variable Full ID of the variable to retrieve. (required)
     * @param entityId Comma separated list of entity IDs. (required)
     * @param constraint Constraint to use. (required)
     * @param appToken The [Socrata App Token](https://dev.socrata.com/docs/app-tokens.html) to be used with your request. The &#x60;app_token&#x60; parameter is required if an app token is not passed via the &#x60;X-App-Token&#x60; HTTP header. Clients must [register for their own app tokens](https://dev.socrata.com/docs/app-tokens.html). (optional)
     * @param xAppToken e.g. cQovpGcdUT1CSzgYk0KPYdAI0 (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getConstraintPermutationsForEntitiesCall(String variable, String entityId, String constraint, String appToken, String xAppToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/data/v1/constraint/{variable}"
            .replace("{" + "variable" + "}", localVarApiClient.escapeString(variable.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (entityId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("entity_id", entityId));
        }

        if (constraint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("constraint", constraint));
        }

        if (appToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("app_token", appToken));
        }

        if (xAppToken != null) {
            localVarHeaderParams.put("X-App-Token", localVarApiClient.parameterToString(xAppToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getConstraintPermutationsForEntitiesValidateBeforeCall(String variable, String entityId, String constraint, String appToken, String xAppToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'variable' is set
        if (variable == null) {
            throw new ApiException("Missing the required parameter 'variable' when calling getConstraintPermutationsForEntities(Async)");
        }

        // verify the required parameter 'entityId' is set
        if (entityId == null) {
            throw new ApiException("Missing the required parameter 'entityId' when calling getConstraintPermutationsForEntities(Async)");
        }

        // verify the required parameter 'constraint' is set
        if (constraint == null) {
            throw new ApiException("Missing the required parameter 'constraint' when calling getConstraintPermutationsForEntities(Async)");
        }

        return getConstraintPermutationsForEntitiesCall(variable, entityId, constraint, appToken, xAppToken, _callback);

    }

    /**
     * Get constraint permutations for entities
     * 
     * @param variable Full ID of the variable to retrieve. (required)
     * @param entityId Comma separated list of entity IDs. (required)
     * @param constraint Constraint to use. (required)
     * @param appToken The [Socrata App Token](https://dev.socrata.com/docs/app-tokens.html) to be used with your request. The &#x60;app_token&#x60; parameter is required if an app token is not passed via the &#x60;X-App-Token&#x60; HTTP header. Clients must [register for their own app tokens](https://dev.socrata.com/docs/app-tokens.html). (optional)
     * @param xAppToken e.g. cQovpGcdUT1CSzgYk0KPYdAI0 (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void getConstraintPermutationsForEntities(String variable, String entityId, String constraint, String appToken, String xAppToken) throws ApiException {
        getConstraintPermutationsForEntitiesWithHttpInfo(variable, entityId, constraint, appToken, xAppToken);
    }

    /**
     * Get constraint permutations for entities
     * 
     * @param variable Full ID of the variable to retrieve. (required)
     * @param entityId Comma separated list of entity IDs. (required)
     * @param constraint Constraint to use. (required)
     * @param appToken The [Socrata App Token](https://dev.socrata.com/docs/app-tokens.html) to be used with your request. The &#x60;app_token&#x60; parameter is required if an app token is not passed via the &#x60;X-App-Token&#x60; HTTP header. Clients must [register for their own app tokens](https://dev.socrata.com/docs/app-tokens.html). (optional)
     * @param xAppToken e.g. cQovpGcdUT1CSzgYk0KPYdAI0 (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getConstraintPermutationsForEntitiesWithHttpInfo(String variable, String entityId, String constraint, String appToken, String xAppToken) throws ApiException {
        okhttp3.Call localVarCall = getConstraintPermutationsForEntitiesValidateBeforeCall(variable, entityId, constraint, appToken, xAppToken, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get constraint permutations for entities (asynchronously)
     * 
     * @param variable Full ID of the variable to retrieve. (required)
     * @param entityId Comma separated list of entity IDs. (required)
     * @param constraint Constraint to use. (required)
     * @param appToken The [Socrata App Token](https://dev.socrata.com/docs/app-tokens.html) to be used with your request. The &#x60;app_token&#x60; parameter is required if an app token is not passed via the &#x60;X-App-Token&#x60; HTTP header. Clients must [register for their own app tokens](https://dev.socrata.com/docs/app-tokens.html). (optional)
     * @param xAppToken e.g. cQovpGcdUT1CSzgYk0KPYdAI0 (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getConstraintPermutationsForEntitiesAsync(String variable, String entityId, String constraint, String appToken, String xAppToken, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getConstraintPermutationsForEntitiesValidateBeforeCall(variable, entityId, constraint, appToken, xAppToken, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDatasets
     * @param entityId Entities to use in formulating the query. (optional)
     * @param datasetId If included, the search terms of the dataset will be used in the query. (optional)
     * @param limit Maximum number of results to return. Must be an integer from 0 to 50000. (optional, default to 10)
     * @param offset Number of results to skip. Used for pagination. (optional)
     * @param appToken The [Socrata App Token](https://dev.socrata.com/docs/app-tokens.html) to be used with your request. The &#x60;app_token&#x60; parameter is required if an app token is not passed via the &#x60;X-App-Token&#x60; HTTP header. Clients must [register for their own app tokens](https://dev.socrata.com/docs/app-tokens.html). (optional)
     * @param xAppToken e.g. cQovpGcdUT1CSzgYk0KPYdAI0 (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDatasetsCall(String entityId, String datasetId, BigDecimal limit, BigDecimal offset, String appToken, String xAppToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/search/v1/dataset";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (entityId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("entity_id", entityId));
        }

        if (datasetId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dataset_id", datasetId));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (appToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("app_token", appToken));
        }

        if (xAppToken != null) {
            localVarHeaderParams.put("X-App-Token", localVarApiClient.parameterToString(xAppToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDatasetsValidateBeforeCall(String entityId, String datasetId, BigDecimal limit, BigDecimal offset, String appToken, String xAppToken, final ApiCallback _callback) throws ApiException {
        return getDatasetsCall(entityId, datasetId, limit, offset, appToken, xAppToken, _callback);

    }

    /**
     * Get datasets
     * 
     * @param entityId Entities to use in formulating the query. (optional)
     * @param datasetId If included, the search terms of the dataset will be used in the query. (optional)
     * @param limit Maximum number of results to return. Must be an integer from 0 to 50000. (optional, default to 10)
     * @param offset Number of results to skip. Used for pagination. (optional)
     * @param appToken The [Socrata App Token](https://dev.socrata.com/docs/app-tokens.html) to be used with your request. The &#x60;app_token&#x60; parameter is required if an app token is not passed via the &#x60;X-App-Token&#x60; HTTP header. Clients must [register for their own app tokens](https://dev.socrata.com/docs/app-tokens.html). (optional)
     * @param xAppToken e.g. cQovpGcdUT1CSzgYk0KPYdAI0 (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void getDatasets(String entityId, String datasetId, BigDecimal limit, BigDecimal offset, String appToken, String xAppToken) throws ApiException {
        getDatasetsWithHttpInfo(entityId, datasetId, limit, offset, appToken, xAppToken);
    }

    /**
     * Get datasets
     * 
     * @param entityId Entities to use in formulating the query. (optional)
     * @param datasetId If included, the search terms of the dataset will be used in the query. (optional)
     * @param limit Maximum number of results to return. Must be an integer from 0 to 50000. (optional, default to 10)
     * @param offset Number of results to skip. Used for pagination. (optional)
     * @param appToken The [Socrata App Token](https://dev.socrata.com/docs/app-tokens.html) to be used with your request. The &#x60;app_token&#x60; parameter is required if an app token is not passed via the &#x60;X-App-Token&#x60; HTTP header. Clients must [register for their own app tokens](https://dev.socrata.com/docs/app-tokens.html). (optional)
     * @param xAppToken e.g. cQovpGcdUT1CSzgYk0KPYdAI0 (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getDatasetsWithHttpInfo(String entityId, String datasetId, BigDecimal limit, BigDecimal offset, String appToken, String xAppToken) throws ApiException {
        okhttp3.Call localVarCall = getDatasetsValidateBeforeCall(entityId, datasetId, limit, offset, appToken, xAppToken, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get datasets (asynchronously)
     * 
     * @param entityId Entities to use in formulating the query. (optional)
     * @param datasetId If included, the search terms of the dataset will be used in the query. (optional)
     * @param limit Maximum number of results to return. Must be an integer from 0 to 50000. (optional, default to 10)
     * @param offset Number of results to skip. Used for pagination. (optional)
     * @param appToken The [Socrata App Token](https://dev.socrata.com/docs/app-tokens.html) to be used with your request. The &#x60;app_token&#x60; parameter is required if an app token is not passed via the &#x60;X-App-Token&#x60; HTTP header. Clients must [register for their own app tokens](https://dev.socrata.com/docs/app-tokens.html). (optional)
     * @param xAppToken e.g. cQovpGcdUT1CSzgYk0KPYdAI0 (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDatasetsAsync(String entityId, String datasetId, BigDecimal limit, BigDecimal offset, String appToken, String xAppToken, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDatasetsValidateBeforeCall(entityId, datasetId, limit, offset, appToken, xAppToken, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getEntities
     * @param entityId ID of the entity. (optional)
     * @param entityName Name of the entity. (optional)
     * @param entityType Type of the entity. (optional)
     * @param appToken The [Socrata App Token](https://dev.socrata.com/docs/app-tokens.html) to be used with your request. The &#x60;app_token&#x60; parameter is required if an app token is not passed via the &#x60;X-App-Token&#x60; HTTP header. Clients must [register for their own app tokens](https://dev.socrata.com/docs/app-tokens.html). (optional)
     * @param xAppToken e.g. cQovpGcdUT1CSzgYk0KPYdAI0 (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEntitiesCall(String entityId, String entityName, String entityType, String appToken, String xAppToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/entity/v1";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (entityId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("entity_id", entityId));
        }

        if (entityName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("entity_name", entityName));
        }

        if (entityType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("entity_type", entityType));
        }

        if (appToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("app_token", appToken));
        }

        if (xAppToken != null) {
            localVarHeaderParams.put("X-App-Token", localVarApiClient.parameterToString(xAppToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEntitiesValidateBeforeCall(String entityId, String entityName, String entityType, String appToken, String xAppToken, final ApiCallback _callback) throws ApiException {
        return getEntitiesCall(entityId, entityName, entityType, appToken, xAppToken, _callback);

    }

    /**
     * Get Entities
     * 
     * @param entityId ID of the entity. (optional)
     * @param entityName Name of the entity. (optional)
     * @param entityType Type of the entity. (optional)
     * @param appToken The [Socrata App Token](https://dev.socrata.com/docs/app-tokens.html) to be used with your request. The &#x60;app_token&#x60; parameter is required if an app token is not passed via the &#x60;X-App-Token&#x60; HTTP header. Clients must [register for their own app tokens](https://dev.socrata.com/docs/app-tokens.html). (optional)
     * @param xAppToken e.g. cQovpGcdUT1CSzgYk0KPYdAI0 (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void getEntities(String entityId, String entityName, String entityType, String appToken, String xAppToken) throws ApiException {
        getEntitiesWithHttpInfo(entityId, entityName, entityType, appToken, xAppToken);
    }

    /**
     * Get Entities
     * 
     * @param entityId ID of the entity. (optional)
     * @param entityName Name of the entity. (optional)
     * @param entityType Type of the entity. (optional)
     * @param appToken The [Socrata App Token](https://dev.socrata.com/docs/app-tokens.html) to be used with your request. The &#x60;app_token&#x60; parameter is required if an app token is not passed via the &#x60;X-App-Token&#x60; HTTP header. Clients must [register for their own app tokens](https://dev.socrata.com/docs/app-tokens.html). (optional)
     * @param xAppToken e.g. cQovpGcdUT1CSzgYk0KPYdAI0 (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getEntitiesWithHttpInfo(String entityId, String entityName, String entityType, String appToken, String xAppToken) throws ApiException {
        okhttp3.Call localVarCall = getEntitiesValidateBeforeCall(entityId, entityName, entityType, appToken, xAppToken, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get Entities (asynchronously)
     * 
     * @param entityId ID of the entity. (optional)
     * @param entityName Name of the entity. (optional)
     * @param entityType Type of the entity. (optional)
     * @param appToken The [Socrata App Token](https://dev.socrata.com/docs/app-tokens.html) to be used with your request. The &#x60;app_token&#x60; parameter is required if an app token is not passed via the &#x60;X-App-Token&#x60; HTTP header. Clients must [register for their own app tokens](https://dev.socrata.com/docs/app-tokens.html). (optional)
     * @param xAppToken e.g. cQovpGcdUT1CSzgYk0KPYdAI0 (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEntitiesAsync(String entityId, String entityName, String entityType, String appToken, String xAppToken, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEntitiesValidateBeforeCall(entityId, entityName, entityType, appToken, xAppToken, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getQuestions
     * @param query String to search against. (required)
     * @param limit Maximum number of results to return. Must be an integer from 0 to 50000. (optional, default to 10)
     * @param offset Number of results to skip. Used for pagination. (optional)
     * @param appToken The [Socrata App Token](https://dev.socrata.com/docs/app-tokens.html) to be used with your request. The &#x60;app_token&#x60; parameter is required if an app token is not passed via the &#x60;X-App-Token&#x60; HTTP header. Clients must [register for their own app tokens](https://dev.socrata.com/docs/app-tokens.html). (optional)
     * @param xAppToken e.g. cQovpGcdUT1CSzgYk0KPYdAI0 (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getQuestionsCall(String query, BigDecimal limit, BigDecimal offset, String appToken, String xAppToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/search/v1/question";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (appToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("app_token", appToken));
        }

        if (xAppToken != null) {
            localVarHeaderParams.put("X-App-Token", localVarApiClient.parameterToString(xAppToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getQuestionsValidateBeforeCall(String query, BigDecimal limit, BigDecimal offset, String appToken, String xAppToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'query' is set
        if (query == null) {
            throw new ApiException("Missing the required parameter 'query' when calling getQuestions(Async)");
        }

        return getQuestionsCall(query, limit, offset, appToken, xAppToken, _callback);

    }

    /**
     * Get questions
     * 
     * @param query String to search against. (required)
     * @param limit Maximum number of results to return. Must be an integer from 0 to 50000. (optional, default to 10)
     * @param offset Number of results to skip. Used for pagination. (optional)
     * @param appToken The [Socrata App Token](https://dev.socrata.com/docs/app-tokens.html) to be used with your request. The &#x60;app_token&#x60; parameter is required if an app token is not passed via the &#x60;X-App-Token&#x60; HTTP header. Clients must [register for their own app tokens](https://dev.socrata.com/docs/app-tokens.html). (optional)
     * @param xAppToken e.g. cQovpGcdUT1CSzgYk0KPYdAI0 (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void getQuestions(String query, BigDecimal limit, BigDecimal offset, String appToken, String xAppToken) throws ApiException {
        getQuestionsWithHttpInfo(query, limit, offset, appToken, xAppToken);
    }

    /**
     * Get questions
     * 
     * @param query String to search against. (required)
     * @param limit Maximum number of results to return. Must be an integer from 0 to 50000. (optional, default to 10)
     * @param offset Number of results to skip. Used for pagination. (optional)
     * @param appToken The [Socrata App Token](https://dev.socrata.com/docs/app-tokens.html) to be used with your request. The &#x60;app_token&#x60; parameter is required if an app token is not passed via the &#x60;X-App-Token&#x60; HTTP header. Clients must [register for their own app tokens](https://dev.socrata.com/docs/app-tokens.html). (optional)
     * @param xAppToken e.g. cQovpGcdUT1CSzgYk0KPYdAI0 (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getQuestionsWithHttpInfo(String query, BigDecimal limit, BigDecimal offset, String appToken, String xAppToken) throws ApiException {
        okhttp3.Call localVarCall = getQuestionsValidateBeforeCall(query, limit, offset, appToken, xAppToken, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get questions (asynchronously)
     * 
     * @param query String to search against. (required)
     * @param limit Maximum number of results to return. Must be an integer from 0 to 50000. (optional, default to 10)
     * @param offset Number of results to skip. Used for pagination. (optional)
     * @param appToken The [Socrata App Token](https://dev.socrata.com/docs/app-tokens.html) to be used with your request. The &#x60;app_token&#x60; parameter is required if an app token is not passed via the &#x60;X-App-Token&#x60; HTTP header. Clients must [register for their own app tokens](https://dev.socrata.com/docs/app-tokens.html). (optional)
     * @param xAppToken e.g. cQovpGcdUT1CSzgYk0KPYdAI0 (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getQuestionsAsync(String query, BigDecimal limit, BigDecimal offset, String appToken, String xAppToken, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getQuestionsValidateBeforeCall(query, limit, offset, appToken, xAppToken, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSuggestions
     * @param type Type of the object to find. (required)
     * @param query Query to match. (required)
     * @param limit Maximum number of results to return. Must be an integer from 0 to 100. (optional, default to 5)
     * @param variableId This parameter is only available when suggesting entities with &#x60;type&#x3D;entity&#x60;. If it is provided, suggestions will be filtered to include only entities that have data for the given variable.  If the variable provided is invalid, no entities will be returned.  Note that this filtering will increase response time significantly, so it should only be used when necessary. (optional)
     * @param appToken The [Socrata App Token](https://dev.socrata.com/docs/app-tokens.html) to be used with your request. The &#x60;app_token&#x60; parameter is required if an app token is not passed via the &#x60;X-App-Token&#x60; HTTP header. Clients must [register for their own app tokens](https://dev.socrata.com/docs/app-tokens.html). (optional)
     * @param xAppToken e.g. cQovpGcdUT1CSzgYk0KPYdAI0 (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSuggestionsCall(String type, String query, BigDecimal limit, String variableId, String appToken, String xAppToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/suggest/v1/{type}"
            .replace("{" + "type" + "}", localVarApiClient.escapeString(type.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (variableId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("variable_id", variableId));
        }

        if (appToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("app_token", appToken));
        }

        if (xAppToken != null) {
            localVarHeaderParams.put("X-App-Token", localVarApiClient.parameterToString(xAppToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSuggestionsValidateBeforeCall(String type, String query, BigDecimal limit, String variableId, String appToken, String xAppToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling getSuggestions(Async)");
        }

        // verify the required parameter 'query' is set
        if (query == null) {
            throw new ApiException("Missing the required parameter 'query' when calling getSuggestions(Async)");
        }

        return getSuggestionsCall(type, query, limit, variableId, appToken, xAppToken, _callback);

    }

    /**
     * Get suggestions
     * 
     * @param type Type of the object to find. (required)
     * @param query Query to match. (required)
     * @param limit Maximum number of results to return. Must be an integer from 0 to 100. (optional, default to 5)
     * @param variableId This parameter is only available when suggesting entities with &#x60;type&#x3D;entity&#x60;. If it is provided, suggestions will be filtered to include only entities that have data for the given variable.  If the variable provided is invalid, no entities will be returned.  Note that this filtering will increase response time significantly, so it should only be used when necessary. (optional)
     * @param appToken The [Socrata App Token](https://dev.socrata.com/docs/app-tokens.html) to be used with your request. The &#x60;app_token&#x60; parameter is required if an app token is not passed via the &#x60;X-App-Token&#x60; HTTP header. Clients must [register for their own app tokens](https://dev.socrata.com/docs/app-tokens.html). (optional)
     * @param xAppToken e.g. cQovpGcdUT1CSzgYk0KPYdAI0 (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void getSuggestions(String type, String query, BigDecimal limit, String variableId, String appToken, String xAppToken) throws ApiException {
        getSuggestionsWithHttpInfo(type, query, limit, variableId, appToken, xAppToken);
    }

    /**
     * Get suggestions
     * 
     * @param type Type of the object to find. (required)
     * @param query Query to match. (required)
     * @param limit Maximum number of results to return. Must be an integer from 0 to 100. (optional, default to 5)
     * @param variableId This parameter is only available when suggesting entities with &#x60;type&#x3D;entity&#x60;. If it is provided, suggestions will be filtered to include only entities that have data for the given variable.  If the variable provided is invalid, no entities will be returned.  Note that this filtering will increase response time significantly, so it should only be used when necessary. (optional)
     * @param appToken The [Socrata App Token](https://dev.socrata.com/docs/app-tokens.html) to be used with your request. The &#x60;app_token&#x60; parameter is required if an app token is not passed via the &#x60;X-App-Token&#x60; HTTP header. Clients must [register for their own app tokens](https://dev.socrata.com/docs/app-tokens.html). (optional)
     * @param xAppToken e.g. cQovpGcdUT1CSzgYk0KPYdAI0 (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getSuggestionsWithHttpInfo(String type, String query, BigDecimal limit, String variableId, String appToken, String xAppToken) throws ApiException {
        okhttp3.Call localVarCall = getSuggestionsValidateBeforeCall(type, query, limit, variableId, appToken, xAppToken, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get suggestions (asynchronously)
     * 
     * @param type Type of the object to find. (required)
     * @param query Query to match. (required)
     * @param limit Maximum number of results to return. Must be an integer from 0 to 100. (optional, default to 5)
     * @param variableId This parameter is only available when suggesting entities with &#x60;type&#x3D;entity&#x60;. If it is provided, suggestions will be filtered to include only entities that have data for the given variable.  If the variable provided is invalid, no entities will be returned.  Note that this filtering will increase response time significantly, so it should only be used when necessary. (optional)
     * @param appToken The [Socrata App Token](https://dev.socrata.com/docs/app-tokens.html) to be used with your request. The &#x60;app_token&#x60; parameter is required if an app token is not passed via the &#x60;X-App-Token&#x60; HTTP header. Clients must [register for their own app tokens](https://dev.socrata.com/docs/app-tokens.html). (optional)
     * @param xAppToken e.g. cQovpGcdUT1CSzgYk0KPYdAI0 (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSuggestionsAsync(String type, String query, BigDecimal limit, String variableId, String appToken, String xAppToken, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSuggestionsValidateBeforeCall(type, query, limit, variableId, appToken, xAppToken, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getValuesForVariables
     * @param variable Comma separated list of variable IDs. Defaults to retrieving all variables. It is also possible to pass in a topic such as &#x60;demographics&#x60;, or a dataset such as &#x60;demographics.population&#x60;, which would both be equivalent to specifying &#x60;demographics.population.count&#x60; and &#x60;demographics.population.change&#x60;. Note that only variables in the same dataset are allowed. (required)
     * @param entityId Comma separated list of entity IDs. Defaults to retrieving all entities. Note that since there is currently no results pagination, retrieving values for all entities may produce incomplete results. (optional)
     * @param forecast Number of steps to forecast. Must be an integer between 0 and 20. Forecasts are produced using linear extrapolation on the data. They are only available when retrieving data for a single variable across many numerical constraint options.  + Default &#x60;0&#x60; (optional)
     * @param describe Whether or not to produce a description of the data. Set to &#x60;true&#x60; to produce a description. Descriptions are not available if no entities are specified.  + Default &#x60;false&#x60; (optional)
     * @param format If format is set to &#x60;google&#x60;, the data frame will be formatted as a [Google Visualizations data table](https://developers.google.com/chart/interactive/docs/reference#datatable-class). If the format is not provided or invalid, then the frame will be formatted normally. (optional)
     * @param appToken The [Socrata App Token](https://dev.socrata.com/docs/app-tokens.html) to be used with your request. The &#x60;app_token&#x60; parameter is required if an app token is not passed via the &#x60;X-App-Token&#x60; HTTP header. Clients must [register for their own app tokens](https://dev.socrata.com/docs/app-tokens.html). (optional)
     * @param xAppToken e.g. cQovpGcdUT1CSzgYk0KPYdAI0 (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getValuesForVariablesCall(String variable, String entityId, BigDecimal forecast, Boolean describe, String format, String appToken, String xAppToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/data/v1/values";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (variable != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("variable", variable));
        }

        if (entityId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("entity_id", entityId));
        }

        if (forecast != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("forecast", forecast));
        }

        if (describe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("describe", describe));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        if (appToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("app_token", appToken));
        }

        if (xAppToken != null) {
            localVarHeaderParams.put("X-App-Token", localVarApiClient.parameterToString(xAppToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getValuesForVariablesValidateBeforeCall(String variable, String entityId, BigDecimal forecast, Boolean describe, String format, String appToken, String xAppToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'variable' is set
        if (variable == null) {
            throw new ApiException("Missing the required parameter 'variable' when calling getValuesForVariables(Async)");
        }

        return getValuesForVariablesCall(variable, entityId, forecast, describe, format, appToken, xAppToken, _callback);

    }

    /**
     * Get values for variables
     * 
     * @param variable Comma separated list of variable IDs. Defaults to retrieving all variables. It is also possible to pass in a topic such as &#x60;demographics&#x60;, or a dataset such as &#x60;demographics.population&#x60;, which would both be equivalent to specifying &#x60;demographics.population.count&#x60; and &#x60;demographics.population.change&#x60;. Note that only variables in the same dataset are allowed. (required)
     * @param entityId Comma separated list of entity IDs. Defaults to retrieving all entities. Note that since there is currently no results pagination, retrieving values for all entities may produce incomplete results. (optional)
     * @param forecast Number of steps to forecast. Must be an integer between 0 and 20. Forecasts are produced using linear extrapolation on the data. They are only available when retrieving data for a single variable across many numerical constraint options.  + Default &#x60;0&#x60; (optional)
     * @param describe Whether or not to produce a description of the data. Set to &#x60;true&#x60; to produce a description. Descriptions are not available if no entities are specified.  + Default &#x60;false&#x60; (optional)
     * @param format If format is set to &#x60;google&#x60;, the data frame will be formatted as a [Google Visualizations data table](https://developers.google.com/chart/interactive/docs/reference#datatable-class). If the format is not provided or invalid, then the frame will be formatted normally. (optional)
     * @param appToken The [Socrata App Token](https://dev.socrata.com/docs/app-tokens.html) to be used with your request. The &#x60;app_token&#x60; parameter is required if an app token is not passed via the &#x60;X-App-Token&#x60; HTTP header. Clients must [register for their own app tokens](https://dev.socrata.com/docs/app-tokens.html). (optional)
     * @param xAppToken e.g. cQovpGcdUT1CSzgYk0KPYdAI0 (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void getValuesForVariables(String variable, String entityId, BigDecimal forecast, Boolean describe, String format, String appToken, String xAppToken) throws ApiException {
        getValuesForVariablesWithHttpInfo(variable, entityId, forecast, describe, format, appToken, xAppToken);
    }

    /**
     * Get values for variables
     * 
     * @param variable Comma separated list of variable IDs. Defaults to retrieving all variables. It is also possible to pass in a topic such as &#x60;demographics&#x60;, or a dataset such as &#x60;demographics.population&#x60;, which would both be equivalent to specifying &#x60;demographics.population.count&#x60; and &#x60;demographics.population.change&#x60;. Note that only variables in the same dataset are allowed. (required)
     * @param entityId Comma separated list of entity IDs. Defaults to retrieving all entities. Note that since there is currently no results pagination, retrieving values for all entities may produce incomplete results. (optional)
     * @param forecast Number of steps to forecast. Must be an integer between 0 and 20. Forecasts are produced using linear extrapolation on the data. They are only available when retrieving data for a single variable across many numerical constraint options.  + Default &#x60;0&#x60; (optional)
     * @param describe Whether or not to produce a description of the data. Set to &#x60;true&#x60; to produce a description. Descriptions are not available if no entities are specified.  + Default &#x60;false&#x60; (optional)
     * @param format If format is set to &#x60;google&#x60;, the data frame will be formatted as a [Google Visualizations data table](https://developers.google.com/chart/interactive/docs/reference#datatable-class). If the format is not provided or invalid, then the frame will be formatted normally. (optional)
     * @param appToken The [Socrata App Token](https://dev.socrata.com/docs/app-tokens.html) to be used with your request. The &#x60;app_token&#x60; parameter is required if an app token is not passed via the &#x60;X-App-Token&#x60; HTTP header. Clients must [register for their own app tokens](https://dev.socrata.com/docs/app-tokens.html). (optional)
     * @param xAppToken e.g. cQovpGcdUT1CSzgYk0KPYdAI0 (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getValuesForVariablesWithHttpInfo(String variable, String entityId, BigDecimal forecast, Boolean describe, String format, String appToken, String xAppToken) throws ApiException {
        okhttp3.Call localVarCall = getValuesForVariablesValidateBeforeCall(variable, entityId, forecast, describe, format, appToken, xAppToken, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get values for variables (asynchronously)
     * 
     * @param variable Comma separated list of variable IDs. Defaults to retrieving all variables. It is also possible to pass in a topic such as &#x60;demographics&#x60;, or a dataset such as &#x60;demographics.population&#x60;, which would both be equivalent to specifying &#x60;demographics.population.count&#x60; and &#x60;demographics.population.change&#x60;. Note that only variables in the same dataset are allowed. (required)
     * @param entityId Comma separated list of entity IDs. Defaults to retrieving all entities. Note that since there is currently no results pagination, retrieving values for all entities may produce incomplete results. (optional)
     * @param forecast Number of steps to forecast. Must be an integer between 0 and 20. Forecasts are produced using linear extrapolation on the data. They are only available when retrieving data for a single variable across many numerical constraint options.  + Default &#x60;0&#x60; (optional)
     * @param describe Whether or not to produce a description of the data. Set to &#x60;true&#x60; to produce a description. Descriptions are not available if no entities are specified.  + Default &#x60;false&#x60; (optional)
     * @param format If format is set to &#x60;google&#x60;, the data frame will be formatted as a [Google Visualizations data table](https://developers.google.com/chart/interactive/docs/reference#datatable-class). If the format is not provided or invalid, then the frame will be formatted normally. (optional)
     * @param appToken The [Socrata App Token](https://dev.socrata.com/docs/app-tokens.html) to be used with your request. The &#x60;app_token&#x60; parameter is required if an app token is not passed via the &#x60;X-App-Token&#x60; HTTP header. Clients must [register for their own app tokens](https://dev.socrata.com/docs/app-tokens.html). (optional)
     * @param xAppToken e.g. cQovpGcdUT1CSzgYk0KPYdAI0 (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getValuesForVariablesAsync(String variable, String entityId, BigDecimal forecast, Boolean describe, String format, String appToken, String xAppToken, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getValuesForVariablesValidateBeforeCall(variable, entityId, forecast, describe, format, appToken, xAppToken, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
