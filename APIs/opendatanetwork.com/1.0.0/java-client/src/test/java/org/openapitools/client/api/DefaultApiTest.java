/*
 * ODN API
 * The Socrata OpenDataNetwork (ODN) REST API exposes public data, often continuosly updated and enhanced, from many thousands of public government and non profit agencies.  Much of this data originating from independent sources is fused together to create new, and often powerful, entity level data. The API, in addition to search and autosuggest capabilities for finding datasets, enables data based comparisons across geographical regions such as states, counties, metropolitan areas, cities and zip codes using highly vetted data providers such as US Census, BEA, HUD and others. Comparison data is preformatted for easy and efficient display on a chart, graph or interactive map.  The API also exposes data organized by narrative style questions a human might ask. The questions can be rapidly found using an autosuggest style index, and then used to directly access all data needed to thoroughly and authoritatively answer the question. Retrieved data includes time series (temporally aligned), tabular, map heavy (includes spatial boundaries), and auto generated unstructured descriptive text.  The ODN API does not duplicate API endpoints or services provided by public sector agencies, but rather, returns context relevant pre-populated REST URLs, when appropriate, so the caller can access data directly from the source.  The [open source](http://github.com/socrata/odn-backend) API powers [OpenDataNetwork.com](http://OpenDataNetwork.com), an [open source](http://github.com/socrata/opendatanetwork.com) site; the site highlights myriad uses and provides API badges with contextually relevant API example REST endpoints and documentation pointers.  Finally, we continuously add new dat sources which appear automatically in the API, so if your favorite data source is not available, check back soon. You can also join us [HERE](http://www.opendatanetwork.com/join-open-data-network) and receive updates or let us know which data sources you are most interested in.  ## App Tokens  Registering for and including a [Socrata application token](https://dev.socrata.com/docs/app-tokens.html) is _required_ for the ODN API. They can be passed either using the `app_token` parameter or the `X-App-Token` HTTP header.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import java.math.BigDecimal;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * Create a map
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createAMapTest() throws ApiException {
        String variable = null;
        String entityId = null;
        String constraint = null;
        String appToken = null;
        String xAppToken = null;
        api.createAMap(variable, entityId, constraint, appToken, xAppToken);
        // TODO: test validations
    }

    /**
     * Find all available data for some entities
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void findAllAvailableDataForSomeEntitiesTest() throws ApiException {
        String entityId = null;
        String appToken = null;
        String xAppToken = null;
        api.findAllAvailableDataForSomeEntities(entityId, appToken, xAppToken);
        // TODO: test validations
    }

    /**
     * Find the relatives of an entity
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void findTheRelativesOfAnEntityTest() throws ApiException {
        String relation = null;
        String entityId = null;
        String variableId = null;
        BigDecimal limit = null;
        String appToken = null;
        String xAppToken = null;
        api.findTheRelativesOfAnEntity(relation, entityId, variableId, limit, appToken, xAppToken);
        // TODO: test validations
    }

    /**
     * Get constraint permutations for entities
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getConstraintPermutationsForEntitiesTest() throws ApiException {
        String variable = null;
        String entityId = null;
        String constraint = null;
        String appToken = null;
        String xAppToken = null;
        api.getConstraintPermutationsForEntities(variable, entityId, constraint, appToken, xAppToken);
        // TODO: test validations
    }

    /**
     * Get datasets
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDatasetsTest() throws ApiException {
        String entityId = null;
        String datasetId = null;
        BigDecimal limit = null;
        BigDecimal offset = null;
        String appToken = null;
        String xAppToken = null;
        api.getDatasets(entityId, datasetId, limit, offset, appToken, xAppToken);
        // TODO: test validations
    }

    /**
     * Get Entities
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEntitiesTest() throws ApiException {
        String entityId = null;
        String entityName = null;
        String entityType = null;
        String appToken = null;
        String xAppToken = null;
        api.getEntities(entityId, entityName, entityType, appToken, xAppToken);
        // TODO: test validations
    }

    /**
     * Get questions
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getQuestionsTest() throws ApiException {
        String query = null;
        BigDecimal limit = null;
        BigDecimal offset = null;
        String appToken = null;
        String xAppToken = null;
        api.getQuestions(query, limit, offset, appToken, xAppToken);
        // TODO: test validations
    }

    /**
     * Get suggestions
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSuggestionsTest() throws ApiException {
        String type = null;
        String query = null;
        BigDecimal limit = null;
        String variableId = null;
        String appToken = null;
        String xAppToken = null;
        api.getSuggestions(type, query, limit, variableId, appToken, xAppToken);
        // TODO: test validations
    }

    /**
     * Get values for variables
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getValuesForVariablesTest() throws ApiException {
        String variable = null;
        String entityId = null;
        BigDecimal forecast = null;
        Boolean describe = null;
        String format = null;
        String appToken = null;
        String xAppToken = null;
        api.getValuesForVariables(variable, entityId, forecast, describe, format, appToken, xAppToken);
        // TODO: test validations
    }

}
