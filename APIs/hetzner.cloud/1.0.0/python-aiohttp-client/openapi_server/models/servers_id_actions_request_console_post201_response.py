# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.action import Action
from openapi_server import util


class ServersIdActionsRequestConsolePost201Response(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, action: Action=None, password: str=None, wss_url: str=None):
        """ServersIdActionsRequestConsolePost201Response - a model defined in OpenAPI

        :param action: The action of this ServersIdActionsRequestConsolePost201Response.
        :param password: The password of this ServersIdActionsRequestConsolePost201Response.
        :param wss_url: The wss_url of this ServersIdActionsRequestConsolePost201Response.
        """
        self.openapi_types = {
            'action': Action,
            'password': str,
            'wss_url': str
        }

        self.attribute_map = {
            'action': 'action',
            'password': 'password',
            'wss_url': 'wss_url'
        }

        self._action = action
        self._password = password
        self._wss_url = wss_url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ServersIdActionsRequestConsolePost201Response':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The _servers__id__actions_request_console_post_201_response of this ServersIdActionsRequestConsolePost201Response.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def action(self):
        """Gets the action of this ServersIdActionsRequestConsolePost201Response.


        :return: The action of this ServersIdActionsRequestConsolePost201Response.
        :rtype: Action
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this ServersIdActionsRequestConsolePost201Response.


        :param action: The action of this ServersIdActionsRequestConsolePost201Response.
        :type action: Action
        """
        if action is None:
            raise ValueError("Invalid value for `action`, must not be `None`")

        self._action = action

    @property
    def password(self):
        """Gets the password of this ServersIdActionsRequestConsolePost201Response.

        VNC password to use for this connection (this password only works in combination with a wss_url with valid token)

        :return: The password of this ServersIdActionsRequestConsolePost201Response.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this ServersIdActionsRequestConsolePost201Response.

        VNC password to use for this connection (this password only works in combination with a wss_url with valid token)

        :param password: The password of this ServersIdActionsRequestConsolePost201Response.
        :type password: str
        """
        if password is None:
            raise ValueError("Invalid value for `password`, must not be `None`")

        self._password = password

    @property
    def wss_url(self):
        """Gets the wss_url of this ServersIdActionsRequestConsolePost201Response.

        URL of websocket proxy to use; this includes a token which is valid for a limited time only

        :return: The wss_url of this ServersIdActionsRequestConsolePost201Response.
        :rtype: str
        """
        return self._wss_url

    @wss_url.setter
    def wss_url(self, wss_url):
        """Sets the wss_url of this ServersIdActionsRequestConsolePost201Response.

        URL of websocket proxy to use; this includes a token which is valid for a limited time only

        :param wss_url: The wss_url of this ServersIdActionsRequestConsolePost201Response.
        :type wss_url: str
        """
        if wss_url is None:
            raise ValueError("Invalid value for `wss_url`, must not be `None`")

        self._wss_url = wss_url
