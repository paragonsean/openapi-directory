# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.datacenters_get200_response_datacenters_inner import DatacentersGet200ResponseDatacentersInner
from openapi_server import util


class DatacentersIdGet200Response(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, datacenter: DatacentersGet200ResponseDatacentersInner=None):
        """DatacentersIdGet200Response - a model defined in OpenAPI

        :param datacenter: The datacenter of this DatacentersIdGet200Response.
        """
        self.openapi_types = {
            'datacenter': DatacentersGet200ResponseDatacentersInner
        }

        self.attribute_map = {
            'datacenter': 'datacenter'
        }

        self._datacenter = datacenter

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DatacentersIdGet200Response':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The _datacenters__id__get_200_response of this DatacentersIdGet200Response.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def datacenter(self):
        """Gets the datacenter of this DatacentersIdGet200Response.


        :return: The datacenter of this DatacentersIdGet200Response.
        :rtype: DatacentersGet200ResponseDatacentersInner
        """
        return self._datacenter

    @datacenter.setter
    def datacenter(self, datacenter):
        """Sets the datacenter of this DatacentersIdGet200Response.


        :param datacenter: The datacenter of this DatacentersIdGet200Response.
        :type datacenter: DatacentersGet200ResponseDatacentersInner
        """
        if datacenter is None:
            raise ValueError("Invalid value for `datacenter`, must not be `None`")

        self._datacenter = datacenter
