# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreatePrimaryIPRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, assignee_id: int=None, assignee_type: str=None, auto_delete: bool=None, datacenter: str=None, labels: object=None, name: str=None, type: str=None):
        """CreatePrimaryIPRequest - a model defined in OpenAPI

        :param assignee_id: The assignee_id of this CreatePrimaryIPRequest.
        :param assignee_type: The assignee_type of this CreatePrimaryIPRequest.
        :param auto_delete: The auto_delete of this CreatePrimaryIPRequest.
        :param datacenter: The datacenter of this CreatePrimaryIPRequest.
        :param labels: The labels of this CreatePrimaryIPRequest.
        :param name: The name of this CreatePrimaryIPRequest.
        :param type: The type of this CreatePrimaryIPRequest.
        """
        self.openapi_types = {
            'assignee_id': int,
            'assignee_type': str,
            'auto_delete': bool,
            'datacenter': str,
            'labels': object,
            'name': str,
            'type': str
        }

        self.attribute_map = {
            'assignee_id': 'assignee_id',
            'assignee_type': 'assignee_type',
            'auto_delete': 'auto_delete',
            'datacenter': 'datacenter',
            'labels': 'labels',
            'name': 'name',
            'type': 'type'
        }

        self._assignee_id = assignee_id
        self._assignee_type = assignee_type
        self._auto_delete = auto_delete
        self._datacenter = datacenter
        self._labels = labels
        self._name = name
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreatePrimaryIPRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreatePrimaryIPRequest of this CreatePrimaryIPRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def assignee_id(self):
        """Gets the assignee_id of this CreatePrimaryIPRequest.

        ID of the resource the Primary IP should be assigned to. Omitted if it should not be assigned.

        :return: The assignee_id of this CreatePrimaryIPRequest.
        :rtype: int
        """
        return self._assignee_id

    @assignee_id.setter
    def assignee_id(self, assignee_id):
        """Sets the assignee_id of this CreatePrimaryIPRequest.

        ID of the resource the Primary IP should be assigned to. Omitted if it should not be assigned.

        :param assignee_id: The assignee_id of this CreatePrimaryIPRequest.
        :type assignee_id: int
        """

        self._assignee_id = assignee_id

    @property
    def assignee_type(self):
        """Gets the assignee_type of this CreatePrimaryIPRequest.

        Resource type the Primary IP can be assigned to

        :return: The assignee_type of this CreatePrimaryIPRequest.
        :rtype: str
        """
        return self._assignee_type

    @assignee_type.setter
    def assignee_type(self, assignee_type):
        """Sets the assignee_type of this CreatePrimaryIPRequest.

        Resource type the Primary IP can be assigned to

        :param assignee_type: The assignee_type of this CreatePrimaryIPRequest.
        :type assignee_type: str
        """
        allowed_values = ["server"]  # noqa: E501
        if assignee_type not in allowed_values:
            raise ValueError(
                "Invalid value for `assignee_type` ({0}), must be one of {1}"
                .format(assignee_type, allowed_values)
            )

        self._assignee_type = assignee_type

    @property
    def auto_delete(self):
        """Gets the auto_delete of this CreatePrimaryIPRequest.

        Delete the Primary IP when the Server it is assigned to is deleted. If omitted defaults to `false`.

        :return: The auto_delete of this CreatePrimaryIPRequest.
        :rtype: bool
        """
        return self._auto_delete

    @auto_delete.setter
    def auto_delete(self, auto_delete):
        """Sets the auto_delete of this CreatePrimaryIPRequest.

        Delete the Primary IP when the Server it is assigned to is deleted. If omitted defaults to `false`.

        :param auto_delete: The auto_delete of this CreatePrimaryIPRequest.
        :type auto_delete: bool
        """

        self._auto_delete = auto_delete

    @property
    def datacenter(self):
        """Gets the datacenter of this CreatePrimaryIPRequest.

        ID or name of Datacenter the Primary IP will be bound to. Needs to be omitted if `assignee_id` is passed.

        :return: The datacenter of this CreatePrimaryIPRequest.
        :rtype: str
        """
        return self._datacenter

    @datacenter.setter
    def datacenter(self, datacenter):
        """Sets the datacenter of this CreatePrimaryIPRequest.

        ID or name of Datacenter the Primary IP will be bound to. Needs to be omitted if `assignee_id` is passed.

        :param datacenter: The datacenter of this CreatePrimaryIPRequest.
        :type datacenter: str
        """

        self._datacenter = datacenter

    @property
    def labels(self):
        """Gets the labels of this CreatePrimaryIPRequest.

        User-defined labels (key-value pairs)

        :return: The labels of this CreatePrimaryIPRequest.
        :rtype: object
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this CreatePrimaryIPRequest.

        User-defined labels (key-value pairs)

        :param labels: The labels of this CreatePrimaryIPRequest.
        :type labels: object
        """

        self._labels = labels

    @property
    def name(self):
        """Gets the name of this CreatePrimaryIPRequest.


        :return: The name of this CreatePrimaryIPRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreatePrimaryIPRequest.


        :param name: The name of this CreatePrimaryIPRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def type(self):
        """Gets the type of this CreatePrimaryIPRequest.

        Primary IP type

        :return: The type of this CreatePrimaryIPRequest.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CreatePrimaryIPRequest.

        Primary IP type

        :param type: The type of this CreatePrimaryIPRequest.
        :type type: str
        """
        allowed_values = ["ipv4", "ipv6"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
