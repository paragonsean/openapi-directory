# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LoadBalancerServiceHealthCheckHttp(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, domain: str=None, path: str=None, response: str=None, status_codes: List[str]=None, tls: bool=None):
        """LoadBalancerServiceHealthCheckHttp - a model defined in OpenAPI

        :param domain: The domain of this LoadBalancerServiceHealthCheckHttp.
        :param path: The path of this LoadBalancerServiceHealthCheckHttp.
        :param response: The response of this LoadBalancerServiceHealthCheckHttp.
        :param status_codes: The status_codes of this LoadBalancerServiceHealthCheckHttp.
        :param tls: The tls of this LoadBalancerServiceHealthCheckHttp.
        """
        self.openapi_types = {
            'domain': str,
            'path': str,
            'response': str,
            'status_codes': List[str],
            'tls': bool
        }

        self.attribute_map = {
            'domain': 'domain',
            'path': 'path',
            'response': 'response',
            'status_codes': 'status_codes',
            'tls': 'tls'
        }

        self._domain = domain
        self._path = path
        self._response = response
        self._status_codes = status_codes
        self._tls = tls

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LoadBalancerServiceHealthCheckHttp':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LoadBalancerServiceHealthCheck_http of this LoadBalancerServiceHealthCheckHttp.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def domain(self):
        """Gets the domain of this LoadBalancerServiceHealthCheckHttp.

        Host header to send in the HTTP request. May not contain spaces, percent or backslash symbols. Can be null, in that case no host header is sent.

        :return: The domain of this LoadBalancerServiceHealthCheckHttp.
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this LoadBalancerServiceHealthCheckHttp.

        Host header to send in the HTTP request. May not contain spaces, percent or backslash symbols. Can be null, in that case no host header is sent.

        :param domain: The domain of this LoadBalancerServiceHealthCheckHttp.
        :type domain: str
        """
        if domain is None:
            raise ValueError("Invalid value for `domain`, must not be `None`")

        self._domain = domain

    @property
    def path(self):
        """Gets the path of this LoadBalancerServiceHealthCheckHttp.

        HTTP path to use for health checks. May not contain literal spaces, use percent-encoding instead.

        :return: The path of this LoadBalancerServiceHealthCheckHttp.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this LoadBalancerServiceHealthCheckHttp.

        HTTP path to use for health checks. May not contain literal spaces, use percent-encoding instead.

        :param path: The path of this LoadBalancerServiceHealthCheckHttp.
        :type path: str
        """
        if path is None:
            raise ValueError("Invalid value for `path`, must not be `None`")

        self._path = path

    @property
    def response(self):
        """Gets the response of this LoadBalancerServiceHealthCheckHttp.

        String that must be contained in HTTP response in order to pass the health check

        :return: The response of this LoadBalancerServiceHealthCheckHttp.
        :rtype: str
        """
        return self._response

    @response.setter
    def response(self, response):
        """Sets the response of this LoadBalancerServiceHealthCheckHttp.

        String that must be contained in HTTP response in order to pass the health check

        :param response: The response of this LoadBalancerServiceHealthCheckHttp.
        :type response: str
        """

        self._response = response

    @property
    def status_codes(self):
        """Gets the status_codes of this LoadBalancerServiceHealthCheckHttp.

        List of returned HTTP status codes in order to pass the health check. Supports the wildcards `?` for exactly one character and `*` for multiple ones. The default is to pass the health check for any status code between 2?? and 3??.

        :return: The status_codes of this LoadBalancerServiceHealthCheckHttp.
        :rtype: List[str]
        """
        return self._status_codes

    @status_codes.setter
    def status_codes(self, status_codes):
        """Sets the status_codes of this LoadBalancerServiceHealthCheckHttp.

        List of returned HTTP status codes in order to pass the health check. Supports the wildcards `?` for exactly one character and `*` for multiple ones. The default is to pass the health check for any status code between 2?? and 3??.

        :param status_codes: The status_codes of this LoadBalancerServiceHealthCheckHttp.
        :type status_codes: List[str]
        """

        self._status_codes = status_codes

    @property
    def tls(self):
        """Gets the tls of this LoadBalancerServiceHealthCheckHttp.

        Use HTTPS for health check

        :return: The tls of this LoadBalancerServiceHealthCheckHttp.
        :rtype: bool
        """
        return self._tls

    @tls.setter
    def tls(self, tls):
        """Sets the tls of this LoadBalancerServiceHealthCheckHttp.

        Use HTTPS for health check

        :param tls: The tls of this LoadBalancerServiceHealthCheckHttp.
        :type tls: bool
        """

        self._tls = tls
