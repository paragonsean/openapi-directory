# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.actions_response_meta import ActionsResponseMeta
from openapi_server.models.volumes_get200_response_volumes_inner import VolumesGet200ResponseVolumesInner
from openapi_server import util


class VolumesGet200Response(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, meta: ActionsResponseMeta=None, volumes: List[VolumesGet200ResponseVolumesInner]=None):
        """VolumesGet200Response - a model defined in OpenAPI

        :param meta: The meta of this VolumesGet200Response.
        :param volumes: The volumes of this VolumesGet200Response.
        """
        self.openapi_types = {
            'meta': ActionsResponseMeta,
            'volumes': List[VolumesGet200ResponseVolumesInner]
        }

        self.attribute_map = {
            'meta': 'meta',
            'volumes': 'volumes'
        }

        self._meta = meta
        self._volumes = volumes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VolumesGet200Response':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The _volumes_get_200_response of this VolumesGet200Response.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def meta(self):
        """Gets the meta of this VolumesGet200Response.


        :return: The meta of this VolumesGet200Response.
        :rtype: ActionsResponseMeta
        """
        return self._meta

    @meta.setter
    def meta(self, meta):
        """Sets the meta of this VolumesGet200Response.


        :param meta: The meta of this VolumesGet200Response.
        :type meta: ActionsResponseMeta
        """

        self._meta = meta

    @property
    def volumes(self):
        """Gets the volumes of this VolumesGet200Response.


        :return: The volumes of this VolumesGet200Response.
        :rtype: List[VolumesGet200ResponseVolumesInner]
        """
        return self._volumes

    @volumes.setter
    def volumes(self, volumes):
        """Sets the volumes of this VolumesGet200Response.


        :param volumes: The volumes of this VolumesGet200Response.
        :type volumes: List[VolumesGet200ResponseVolumesInner]
        """
        if volumes is None:
            raise ValueError("Invalid value for `volumes`, must not be `None`")

        self._volumes = volumes
