# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.load_balancer_types_get200_response_load_balancer_types_inner_prices_inner import LoadBalancerTypesGet200ResponseLoadBalancerTypesInnerPricesInner
from openapi_server import util


class LoadBalancerTypesGet200ResponseLoadBalancerTypesInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, deprecated: str=None, description: str=None, id: float=None, max_assigned_certificates: float=None, max_connections: float=None, max_services: float=None, max_targets: float=None, name: str=None, prices: List[LoadBalancerTypesGet200ResponseLoadBalancerTypesInnerPricesInner]=None):
        """LoadBalancerTypesGet200ResponseLoadBalancerTypesInner - a model defined in OpenAPI

        :param deprecated: The deprecated of this LoadBalancerTypesGet200ResponseLoadBalancerTypesInner.
        :param description: The description of this LoadBalancerTypesGet200ResponseLoadBalancerTypesInner.
        :param id: The id of this LoadBalancerTypesGet200ResponseLoadBalancerTypesInner.
        :param max_assigned_certificates: The max_assigned_certificates of this LoadBalancerTypesGet200ResponseLoadBalancerTypesInner.
        :param max_connections: The max_connections of this LoadBalancerTypesGet200ResponseLoadBalancerTypesInner.
        :param max_services: The max_services of this LoadBalancerTypesGet200ResponseLoadBalancerTypesInner.
        :param max_targets: The max_targets of this LoadBalancerTypesGet200ResponseLoadBalancerTypesInner.
        :param name: The name of this LoadBalancerTypesGet200ResponseLoadBalancerTypesInner.
        :param prices: The prices of this LoadBalancerTypesGet200ResponseLoadBalancerTypesInner.
        """
        self.openapi_types = {
            'deprecated': str,
            'description': str,
            'id': float,
            'max_assigned_certificates': float,
            'max_connections': float,
            'max_services': float,
            'max_targets': float,
            'name': str,
            'prices': List[LoadBalancerTypesGet200ResponseLoadBalancerTypesInnerPricesInner]
        }

        self.attribute_map = {
            'deprecated': 'deprecated',
            'description': 'description',
            'id': 'id',
            'max_assigned_certificates': 'max_assigned_certificates',
            'max_connections': 'max_connections',
            'max_services': 'max_services',
            'max_targets': 'max_targets',
            'name': 'name',
            'prices': 'prices'
        }

        self._deprecated = deprecated
        self._description = description
        self._id = id
        self._max_assigned_certificates = max_assigned_certificates
        self._max_connections = max_connections
        self._max_services = max_services
        self._max_targets = max_targets
        self._name = name
        self._prices = prices

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LoadBalancerTypesGet200ResponseLoadBalancerTypesInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The _load_balancer_types_get_200_response_load_balancer_types_inner of this LoadBalancerTypesGet200ResponseLoadBalancerTypesInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def deprecated(self):
        """Gets the deprecated of this LoadBalancerTypesGet200ResponseLoadBalancerTypesInner.

        Point in time when the Load Balancer type is deprecated (in ISO-8601 format)

        :return: The deprecated of this LoadBalancerTypesGet200ResponseLoadBalancerTypesInner.
        :rtype: str
        """
        return self._deprecated

    @deprecated.setter
    def deprecated(self, deprecated):
        """Sets the deprecated of this LoadBalancerTypesGet200ResponseLoadBalancerTypesInner.

        Point in time when the Load Balancer type is deprecated (in ISO-8601 format)

        :param deprecated: The deprecated of this LoadBalancerTypesGet200ResponseLoadBalancerTypesInner.
        :type deprecated: str
        """
        if deprecated is None:
            raise ValueError("Invalid value for `deprecated`, must not be `None`")

        self._deprecated = deprecated

    @property
    def description(self):
        """Gets the description of this LoadBalancerTypesGet200ResponseLoadBalancerTypesInner.

        Description of the Load Balancer type

        :return: The description of this LoadBalancerTypesGet200ResponseLoadBalancerTypesInner.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this LoadBalancerTypesGet200ResponseLoadBalancerTypesInner.

        Description of the Load Balancer type

        :param description: The description of this LoadBalancerTypesGet200ResponseLoadBalancerTypesInner.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def id(self):
        """Gets the id of this LoadBalancerTypesGet200ResponseLoadBalancerTypesInner.

        ID of the Load Balancer type

        :return: The id of this LoadBalancerTypesGet200ResponseLoadBalancerTypesInner.
        :rtype: float
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this LoadBalancerTypesGet200ResponseLoadBalancerTypesInner.

        ID of the Load Balancer type

        :param id: The id of this LoadBalancerTypesGet200ResponseLoadBalancerTypesInner.
        :type id: float
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def max_assigned_certificates(self):
        """Gets the max_assigned_certificates of this LoadBalancerTypesGet200ResponseLoadBalancerTypesInner.

        Number of SSL Certificates that can be assigned to a single Load Balancer

        :return: The max_assigned_certificates of this LoadBalancerTypesGet200ResponseLoadBalancerTypesInner.
        :rtype: float
        """
        return self._max_assigned_certificates

    @max_assigned_certificates.setter
    def max_assigned_certificates(self, max_assigned_certificates):
        """Sets the max_assigned_certificates of this LoadBalancerTypesGet200ResponseLoadBalancerTypesInner.

        Number of SSL Certificates that can be assigned to a single Load Balancer

        :param max_assigned_certificates: The max_assigned_certificates of this LoadBalancerTypesGet200ResponseLoadBalancerTypesInner.
        :type max_assigned_certificates: float
        """
        if max_assigned_certificates is None:
            raise ValueError("Invalid value for `max_assigned_certificates`, must not be `None`")

        self._max_assigned_certificates = max_assigned_certificates

    @property
    def max_connections(self):
        """Gets the max_connections of this LoadBalancerTypesGet200ResponseLoadBalancerTypesInner.

        Number of maximum simultaneous open connections

        :return: The max_connections of this LoadBalancerTypesGet200ResponseLoadBalancerTypesInner.
        :rtype: float
        """
        return self._max_connections

    @max_connections.setter
    def max_connections(self, max_connections):
        """Sets the max_connections of this LoadBalancerTypesGet200ResponseLoadBalancerTypesInner.

        Number of maximum simultaneous open connections

        :param max_connections: The max_connections of this LoadBalancerTypesGet200ResponseLoadBalancerTypesInner.
        :type max_connections: float
        """
        if max_connections is None:
            raise ValueError("Invalid value for `max_connections`, must not be `None`")

        self._max_connections = max_connections

    @property
    def max_services(self):
        """Gets the max_services of this LoadBalancerTypesGet200ResponseLoadBalancerTypesInner.

        Number of services a Load Balancer of this type can have

        :return: The max_services of this LoadBalancerTypesGet200ResponseLoadBalancerTypesInner.
        :rtype: float
        """
        return self._max_services

    @max_services.setter
    def max_services(self, max_services):
        """Sets the max_services of this LoadBalancerTypesGet200ResponseLoadBalancerTypesInner.

        Number of services a Load Balancer of this type can have

        :param max_services: The max_services of this LoadBalancerTypesGet200ResponseLoadBalancerTypesInner.
        :type max_services: float
        """
        if max_services is None:
            raise ValueError("Invalid value for `max_services`, must not be `None`")

        self._max_services = max_services

    @property
    def max_targets(self):
        """Gets the max_targets of this LoadBalancerTypesGet200ResponseLoadBalancerTypesInner.

        Number of targets a single Load Balancer can have

        :return: The max_targets of this LoadBalancerTypesGet200ResponseLoadBalancerTypesInner.
        :rtype: float
        """
        return self._max_targets

    @max_targets.setter
    def max_targets(self, max_targets):
        """Sets the max_targets of this LoadBalancerTypesGet200ResponseLoadBalancerTypesInner.

        Number of targets a single Load Balancer can have

        :param max_targets: The max_targets of this LoadBalancerTypesGet200ResponseLoadBalancerTypesInner.
        :type max_targets: float
        """
        if max_targets is None:
            raise ValueError("Invalid value for `max_targets`, must not be `None`")

        self._max_targets = max_targets

    @property
    def name(self):
        """Gets the name of this LoadBalancerTypesGet200ResponseLoadBalancerTypesInner.

        Unique identifier of the Load Balancer type

        :return: The name of this LoadBalancerTypesGet200ResponseLoadBalancerTypesInner.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this LoadBalancerTypesGet200ResponseLoadBalancerTypesInner.

        Unique identifier of the Load Balancer type

        :param name: The name of this LoadBalancerTypesGet200ResponseLoadBalancerTypesInner.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def prices(self):
        """Gets the prices of this LoadBalancerTypesGet200ResponseLoadBalancerTypesInner.

        Prices in different network zones

        :return: The prices of this LoadBalancerTypesGet200ResponseLoadBalancerTypesInner.
        :rtype: List[LoadBalancerTypesGet200ResponseLoadBalancerTypesInnerPricesInner]
        """
        return self._prices

    @prices.setter
    def prices(self, prices):
        """Sets the prices of this LoadBalancerTypesGet200ResponseLoadBalancerTypesInner.

        Prices in different network zones

        :param prices: The prices of this LoadBalancerTypesGet200ResponseLoadBalancerTypesInner.
        :type prices: List[LoadBalancerTypesGet200ResponseLoadBalancerTypesInnerPricesInner]
        """
        if prices is None:
            raise ValueError("Invalid value for `prices`, must not be `None`")

        self._prices = prices
