# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.pricing_get200_response_pricing_floating_ip import PricingGet200ResponsePricingFloatingIp
from openapi_server.models.pricing_get200_response_pricing_floating_ips_inner import PricingGet200ResponsePricingFloatingIpsInner
from openapi_server.models.pricing_get200_response_pricing_image import PricingGet200ResponsePricingImage
from openapi_server.models.pricing_get200_response_pricing_load_balancer_types_inner import PricingGet200ResponsePricingLoadBalancerTypesInner
from openapi_server.models.pricing_get200_response_pricing_primary_ips_inner import PricingGet200ResponsePricingPrimaryIpsInner
from openapi_server.models.pricing_get200_response_pricing_server_backup import PricingGet200ResponsePricingServerBackup
from openapi_server.models.pricing_get200_response_pricing_server_types_inner import PricingGet200ResponsePricingServerTypesInner
from openapi_server.models.pricing_get200_response_pricing_traffic import PricingGet200ResponsePricingTraffic
from openapi_server.models.pricing_get200_response_pricing_volume import PricingGet200ResponsePricingVolume
from openapi_server import util


class PricingGet200ResponsePricing(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, currency: str=None, floating_ip: PricingGet200ResponsePricingFloatingIp=None, floating_ips: List[PricingGet200ResponsePricingFloatingIpsInner]=None, image: PricingGet200ResponsePricingImage=None, load_balancer_types: List[PricingGet200ResponsePricingLoadBalancerTypesInner]=None, primary_ips: List[PricingGet200ResponsePricingPrimaryIpsInner]=None, server_backup: PricingGet200ResponsePricingServerBackup=None, server_types: List[PricingGet200ResponsePricingServerTypesInner]=None, traffic: PricingGet200ResponsePricingTraffic=None, vat_rate: str=None, volume: PricingGet200ResponsePricingVolume=None):
        """PricingGet200ResponsePricing - a model defined in OpenAPI

        :param currency: The currency of this PricingGet200ResponsePricing.
        :param floating_ip: The floating_ip of this PricingGet200ResponsePricing.
        :param floating_ips: The floating_ips of this PricingGet200ResponsePricing.
        :param image: The image of this PricingGet200ResponsePricing.
        :param load_balancer_types: The load_balancer_types of this PricingGet200ResponsePricing.
        :param primary_ips: The primary_ips of this PricingGet200ResponsePricing.
        :param server_backup: The server_backup of this PricingGet200ResponsePricing.
        :param server_types: The server_types of this PricingGet200ResponsePricing.
        :param traffic: The traffic of this PricingGet200ResponsePricing.
        :param vat_rate: The vat_rate of this PricingGet200ResponsePricing.
        :param volume: The volume of this PricingGet200ResponsePricing.
        """
        self.openapi_types = {
            'currency': str,
            'floating_ip': PricingGet200ResponsePricingFloatingIp,
            'floating_ips': List[PricingGet200ResponsePricingFloatingIpsInner],
            'image': PricingGet200ResponsePricingImage,
            'load_balancer_types': List[PricingGet200ResponsePricingLoadBalancerTypesInner],
            'primary_ips': List[PricingGet200ResponsePricingPrimaryIpsInner],
            'server_backup': PricingGet200ResponsePricingServerBackup,
            'server_types': List[PricingGet200ResponsePricingServerTypesInner],
            'traffic': PricingGet200ResponsePricingTraffic,
            'vat_rate': str,
            'volume': PricingGet200ResponsePricingVolume
        }

        self.attribute_map = {
            'currency': 'currency',
            'floating_ip': 'floating_ip',
            'floating_ips': 'floating_ips',
            'image': 'image',
            'load_balancer_types': 'load_balancer_types',
            'primary_ips': 'primary_ips',
            'server_backup': 'server_backup',
            'server_types': 'server_types',
            'traffic': 'traffic',
            'vat_rate': 'vat_rate',
            'volume': 'volume'
        }

        self._currency = currency
        self._floating_ip = floating_ip
        self._floating_ips = floating_ips
        self._image = image
        self._load_balancer_types = load_balancer_types
        self._primary_ips = primary_ips
        self._server_backup = server_backup
        self._server_types = server_types
        self._traffic = traffic
        self._vat_rate = vat_rate
        self._volume = volume

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PricingGet200ResponsePricing':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The _pricing_get_200_response_pricing of this PricingGet200ResponsePricing.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def currency(self):
        """Gets the currency of this PricingGet200ResponsePricing.

        Currency the returned prices are expressed in, coded according to ISO 4217

        :return: The currency of this PricingGet200ResponsePricing.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this PricingGet200ResponsePricing.

        Currency the returned prices are expressed in, coded according to ISO 4217

        :param currency: The currency of this PricingGet200ResponsePricing.
        :type currency: str
        """
        if currency is None:
            raise ValueError("Invalid value for `currency`, must not be `None`")

        self._currency = currency

    @property
    def floating_ip(self):
        """Gets the floating_ip of this PricingGet200ResponsePricing.


        :return: The floating_ip of this PricingGet200ResponsePricing.
        :rtype: PricingGet200ResponsePricingFloatingIp
        """
        return self._floating_ip

    @floating_ip.setter
    def floating_ip(self, floating_ip):
        """Sets the floating_ip of this PricingGet200ResponsePricing.


        :param floating_ip: The floating_ip of this PricingGet200ResponsePricing.
        :type floating_ip: PricingGet200ResponsePricingFloatingIp
        """
        if floating_ip is None:
            raise ValueError("Invalid value for `floating_ip`, must not be `None`")

        self._floating_ip = floating_ip

    @property
    def floating_ips(self):
        """Gets the floating_ips of this PricingGet200ResponsePricing.

        Costs of Floating IPs types per Location and type

        :return: The floating_ips of this PricingGet200ResponsePricing.
        :rtype: List[PricingGet200ResponsePricingFloatingIpsInner]
        """
        return self._floating_ips

    @floating_ips.setter
    def floating_ips(self, floating_ips):
        """Sets the floating_ips of this PricingGet200ResponsePricing.

        Costs of Floating IPs types per Location and type

        :param floating_ips: The floating_ips of this PricingGet200ResponsePricing.
        :type floating_ips: List[PricingGet200ResponsePricingFloatingIpsInner]
        """
        if floating_ips is None:
            raise ValueError("Invalid value for `floating_ips`, must not be `None`")

        self._floating_ips = floating_ips

    @property
    def image(self):
        """Gets the image of this PricingGet200ResponsePricing.


        :return: The image of this PricingGet200ResponsePricing.
        :rtype: PricingGet200ResponsePricingImage
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this PricingGet200ResponsePricing.


        :param image: The image of this PricingGet200ResponsePricing.
        :type image: PricingGet200ResponsePricingImage
        """
        if image is None:
            raise ValueError("Invalid value for `image`, must not be `None`")

        self._image = image

    @property
    def load_balancer_types(self):
        """Gets the load_balancer_types of this PricingGet200ResponsePricing.

        Costs of Load Balancer types per Location and type

        :return: The load_balancer_types of this PricingGet200ResponsePricing.
        :rtype: List[PricingGet200ResponsePricingLoadBalancerTypesInner]
        """
        return self._load_balancer_types

    @load_balancer_types.setter
    def load_balancer_types(self, load_balancer_types):
        """Sets the load_balancer_types of this PricingGet200ResponsePricing.

        Costs of Load Balancer types per Location and type

        :param load_balancer_types: The load_balancer_types of this PricingGet200ResponsePricing.
        :type load_balancer_types: List[PricingGet200ResponsePricingLoadBalancerTypesInner]
        """
        if load_balancer_types is None:
            raise ValueError("Invalid value for `load_balancer_types`, must not be `None`")

        self._load_balancer_types = load_balancer_types

    @property
    def primary_ips(self):
        """Gets the primary_ips of this PricingGet200ResponsePricing.

        Costs of Primary IPs types per Location

        :return: The primary_ips of this PricingGet200ResponsePricing.
        :rtype: List[PricingGet200ResponsePricingPrimaryIpsInner]
        """
        return self._primary_ips

    @primary_ips.setter
    def primary_ips(self, primary_ips):
        """Sets the primary_ips of this PricingGet200ResponsePricing.

        Costs of Primary IPs types per Location

        :param primary_ips: The primary_ips of this PricingGet200ResponsePricing.
        :type primary_ips: List[PricingGet200ResponsePricingPrimaryIpsInner]
        """
        if primary_ips is None:
            raise ValueError("Invalid value for `primary_ips`, must not be `None`")

        self._primary_ips = primary_ips

    @property
    def server_backup(self):
        """Gets the server_backup of this PricingGet200ResponsePricing.


        :return: The server_backup of this PricingGet200ResponsePricing.
        :rtype: PricingGet200ResponsePricingServerBackup
        """
        return self._server_backup

    @server_backup.setter
    def server_backup(self, server_backup):
        """Sets the server_backup of this PricingGet200ResponsePricing.


        :param server_backup: The server_backup of this PricingGet200ResponsePricing.
        :type server_backup: PricingGet200ResponsePricingServerBackup
        """
        if server_backup is None:
            raise ValueError("Invalid value for `server_backup`, must not be `None`")

        self._server_backup = server_backup

    @property
    def server_types(self):
        """Gets the server_types of this PricingGet200ResponsePricing.

        Costs of Server types per Location and type

        :return: The server_types of this PricingGet200ResponsePricing.
        :rtype: List[PricingGet200ResponsePricingServerTypesInner]
        """
        return self._server_types

    @server_types.setter
    def server_types(self, server_types):
        """Sets the server_types of this PricingGet200ResponsePricing.

        Costs of Server types per Location and type

        :param server_types: The server_types of this PricingGet200ResponsePricing.
        :type server_types: List[PricingGet200ResponsePricingServerTypesInner]
        """
        if server_types is None:
            raise ValueError("Invalid value for `server_types`, must not be `None`")

        self._server_types = server_types

    @property
    def traffic(self):
        """Gets the traffic of this PricingGet200ResponsePricing.


        :return: The traffic of this PricingGet200ResponsePricing.
        :rtype: PricingGet200ResponsePricingTraffic
        """
        return self._traffic

    @traffic.setter
    def traffic(self, traffic):
        """Sets the traffic of this PricingGet200ResponsePricing.


        :param traffic: The traffic of this PricingGet200ResponsePricing.
        :type traffic: PricingGet200ResponsePricingTraffic
        """
        if traffic is None:
            raise ValueError("Invalid value for `traffic`, must not be `None`")

        self._traffic = traffic

    @property
    def vat_rate(self):
        """Gets the vat_rate of this PricingGet200ResponsePricing.

        The VAT rate used for calculating prices with VAT

        :return: The vat_rate of this PricingGet200ResponsePricing.
        :rtype: str
        """
        return self._vat_rate

    @vat_rate.setter
    def vat_rate(self, vat_rate):
        """Sets the vat_rate of this PricingGet200ResponsePricing.

        The VAT rate used for calculating prices with VAT

        :param vat_rate: The vat_rate of this PricingGet200ResponsePricing.
        :type vat_rate: str
        """
        if vat_rate is None:
            raise ValueError("Invalid value for `vat_rate`, must not be `None`")

        self._vat_rate = vat_rate

    @property
    def volume(self):
        """Gets the volume of this PricingGet200ResponsePricing.


        :return: The volume of this PricingGet200ResponsePricing.
        :rtype: PricingGet200ResponsePricingVolume
        """
        return self._volume

    @volume.setter
    def volume(self, volume):
        """Sets the volume of this PricingGet200ResponsePricing.


        :param volume: The volume of this PricingGet200ResponsePricing.
        :type volume: PricingGet200ResponsePricingVolume
        """
        if volume is None:
            raise ValueError("Invalid value for `volume`, must not be `None`")

        self._volume = volume
