# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class NetworksGet200ResponseNetworksInnerRoutesInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, destination: str=None, gateway: str=None):
        """NetworksGet200ResponseNetworksInnerRoutesInner - a model defined in OpenAPI

        :param destination: The destination of this NetworksGet200ResponseNetworksInnerRoutesInner.
        :param gateway: The gateway of this NetworksGet200ResponseNetworksInnerRoutesInner.
        """
        self.openapi_types = {
            'destination': str,
            'gateway': str
        }

        self.attribute_map = {
            'destination': 'destination',
            'gateway': 'gateway'
        }

        self._destination = destination
        self._gateway = gateway

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NetworksGet200ResponseNetworksInnerRoutesInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The _networks_get_200_response_networks_inner_routes_inner of this NetworksGet200ResponseNetworksInnerRoutesInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def destination(self):
        """Gets the destination of this NetworksGet200ResponseNetworksInnerRoutesInner.

        Destination network or host of this route. Must not overlap with an existing ip_range in any subnets or with any destinations in other routes or with the first IP of the networks ip_range or with 172.31.1.1. Must be one of the private IPv4 ranges of RFC1918.

        :return: The destination of this NetworksGet200ResponseNetworksInnerRoutesInner.
        :rtype: str
        """
        return self._destination

    @destination.setter
    def destination(self, destination):
        """Sets the destination of this NetworksGet200ResponseNetworksInnerRoutesInner.

        Destination network or host of this route. Must not overlap with an existing ip_range in any subnets or with any destinations in other routes or with the first IP of the networks ip_range or with 172.31.1.1. Must be one of the private IPv4 ranges of RFC1918.

        :param destination: The destination of this NetworksGet200ResponseNetworksInnerRoutesInner.
        :type destination: str
        """
        if destination is None:
            raise ValueError("Invalid value for `destination`, must not be `None`")

        self._destination = destination

    @property
    def gateway(self):
        """Gets the gateway of this NetworksGet200ResponseNetworksInnerRoutesInner.

        Gateway for the route. Cannot be the first IP of the networks ip_range and also cannot be 172.31.1.1 as this IP is being used as a gateway for the public network interface of Servers.

        :return: The gateway of this NetworksGet200ResponseNetworksInnerRoutesInner.
        :rtype: str
        """
        return self._gateway

    @gateway.setter
    def gateway(self, gateway):
        """Sets the gateway of this NetworksGet200ResponseNetworksInnerRoutesInner.

        Gateway for the route. Cannot be the first IP of the networks ip_range and also cannot be 172.31.1.1 as this IP is being used as a gateway for the public network interface of Servers.

        :param gateway: The gateway of this NetworksGet200ResponseNetworksInnerRoutesInner.
        :type gateway: str
        """
        if gateway is None:
            raise ValueError("Invalid value for `gateway`, must not be `None`")

        self._gateway = gateway
