# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.server_types_get200_response_server_types_inner import ServerTypesGet200ResponseServerTypesInner
from openapi_server import util


class ServerTypesIdGet200Response(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, server_type: ServerTypesGet200ResponseServerTypesInner=None):
        """ServerTypesIdGet200Response - a model defined in OpenAPI

        :param server_type: The server_type of this ServerTypesIdGet200Response.
        """
        self.openapi_types = {
            'server_type': ServerTypesGet200ResponseServerTypesInner
        }

        self.attribute_map = {
            'server_type': 'server_type'
        }

        self._server_type = server_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ServerTypesIdGet200Response':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The _server_types__id__get_200_response of this ServerTypesIdGet200Response.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def server_type(self):
        """Gets the server_type of this ServerTypesIdGet200Response.


        :return: The server_type of this ServerTypesIdGet200Response.
        :rtype: ServerTypesGet200ResponseServerTypesInner
        """
        return self._server_type

    @server_type.setter
    def server_type(self, server_type):
        """Sets the server_type of this ServerTypesIdGet200Response.


        :param server_type: The server_type of this ServerTypesIdGet200Response.
        :type server_type: ServerTypesGet200ResponseServerTypesInner
        """
        if server_type is None:
            raise ValueError("Invalid value for `server_type`, must not be `None`")

        self._server_type = server_type
