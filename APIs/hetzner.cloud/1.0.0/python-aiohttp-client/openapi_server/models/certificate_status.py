# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.certificate_status_error import CertificateStatusError
from openapi_server import util


class CertificateStatus(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, error: CertificateStatusError=None, issuance: str=None, renewal: str=None):
        """CertificateStatus - a model defined in OpenAPI

        :param error: The error of this CertificateStatus.
        :param issuance: The issuance of this CertificateStatus.
        :param renewal: The renewal of this CertificateStatus.
        """
        self.openapi_types = {
            'error': CertificateStatusError,
            'issuance': str,
            'renewal': str
        }

        self.attribute_map = {
            'error': 'error',
            'issuance': 'issuance',
            'renewal': 'renewal'
        }

        self._error = error
        self._issuance = issuance
        self._renewal = renewal

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CertificateStatus':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Certificate_status of this CertificateStatus.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def error(self):
        """Gets the error of this CertificateStatus.


        :return: The error of this CertificateStatus.
        :rtype: CertificateStatusError
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this CertificateStatus.


        :param error: The error of this CertificateStatus.
        :type error: CertificateStatusError
        """

        self._error = error

    @property
    def issuance(self):
        """Gets the issuance of this CertificateStatus.

        Status of the issuance process of the Certificate

        :return: The issuance of this CertificateStatus.
        :rtype: str
        """
        return self._issuance

    @issuance.setter
    def issuance(self, issuance):
        """Sets the issuance of this CertificateStatus.

        Status of the issuance process of the Certificate

        :param issuance: The issuance of this CertificateStatus.
        :type issuance: str
        """
        allowed_values = ["pending", "completed", "failed"]  # noqa: E501
        if issuance not in allowed_values:
            raise ValueError(
                "Invalid value for `issuance` ({0}), must be one of {1}"
                .format(issuance, allowed_values)
            )

        self._issuance = issuance

    @property
    def renewal(self):
        """Gets the renewal of this CertificateStatus.

        Status of the renewal process of the Certificate.

        :return: The renewal of this CertificateStatus.
        :rtype: str
        """
        return self._renewal

    @renewal.setter
    def renewal(self, renewal):
        """Sets the renewal of this CertificateStatus.

        Status of the renewal process of the Certificate.

        :param renewal: The renewal of this CertificateStatus.
        :type renewal: str
        """
        allowed_values = ["scheduled", "pending", "failed", "unavailable"]  # noqa: E501
        if renewal not in allowed_values:
            raise ValueError(
                "Invalid value for `renewal` ({0}), must be one of {1}"
                .format(renewal, allowed_values)
            )

        self._renewal = renewal
