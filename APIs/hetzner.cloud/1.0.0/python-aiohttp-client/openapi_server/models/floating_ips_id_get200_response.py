# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.floating_ips_get200_response_floating_ips_inner import FloatingIpsGet200ResponseFloatingIpsInner
from openapi_server import util


class FloatingIpsIdGet200Response(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, floating_ip: FloatingIpsGet200ResponseFloatingIpsInner=None):
        """FloatingIpsIdGet200Response - a model defined in OpenAPI

        :param floating_ip: The floating_ip of this FloatingIpsIdGet200Response.
        """
        self.openapi_types = {
            'floating_ip': FloatingIpsGet200ResponseFloatingIpsInner
        }

        self.attribute_map = {
            'floating_ip': 'floating_ip'
        }

        self._floating_ip = floating_ip

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FloatingIpsIdGet200Response':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The _floating_ips__id__get_200_response of this FloatingIpsIdGet200Response.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def floating_ip(self):
        """Gets the floating_ip of this FloatingIpsIdGet200Response.


        :return: The floating_ip of this FloatingIpsIdGet200Response.
        :rtype: FloatingIpsGet200ResponseFloatingIpsInner
        """
        return self._floating_ip

    @floating_ip.setter
    def floating_ip(self, floating_ip):
        """Sets the floating_ip of this FloatingIpsIdGet200Response.


        :param floating_ip: The floating_ip of this FloatingIpsIdGet200Response.
        :type floating_ip: FloatingIpsGet200ResponseFloatingIpsInner
        """
        if floating_ip is None:
            raise ValueError("Invalid value for `floating_ip`, must not be `None`")

        self._floating_ip = floating_ip
