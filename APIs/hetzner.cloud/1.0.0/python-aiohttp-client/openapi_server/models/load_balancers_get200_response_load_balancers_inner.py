# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.datacenters_get200_response_datacenters_inner_location import DatacentersGet200ResponseDatacentersInnerLocation
from openapi_server.models.floating_ips_get200_response_floating_ips_inner_protection import FloatingIpsGet200ResponseFloatingIpsInnerProtection
from openapi_server.models.load_balancer_service import LoadBalancerService
from openapi_server.models.load_balancer_target import LoadBalancerTarget
from openapi_server.models.load_balancer_types_get200_response_load_balancer_types_inner import LoadBalancerTypesGet200ResponseLoadBalancerTypesInner
from openapi_server.models.load_balancers_get200_response_load_balancers_inner_algorithm import LoadBalancersGet200ResponseLoadBalancersInnerAlgorithm
from openapi_server.models.load_balancers_get200_response_load_balancers_inner_private_net_inner import LoadBalancersGet200ResponseLoadBalancersInnerPrivateNetInner
from openapi_server.models.load_balancers_get200_response_load_balancers_inner_public_net import LoadBalancersGet200ResponseLoadBalancersInnerPublicNet
from openapi_server import util


class LoadBalancersGet200ResponseLoadBalancersInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, algorithm: LoadBalancersGet200ResponseLoadBalancersInnerAlgorithm=None, created: str=None, id: int=None, included_traffic: int=None, ingoing_traffic: int=None, labels: Dict[str, str]=None, load_balancer_type: LoadBalancerTypesGet200ResponseLoadBalancerTypesInner=None, location: DatacentersGet200ResponseDatacentersInnerLocation=None, name: str=None, outgoing_traffic: int=None, private_net: List[LoadBalancersGet200ResponseLoadBalancersInnerPrivateNetInner]=None, protection: FloatingIpsGet200ResponseFloatingIpsInnerProtection=None, public_net: LoadBalancersGet200ResponseLoadBalancersInnerPublicNet=None, services: List[LoadBalancerService]=None, targets: List[LoadBalancerTarget]=None):
        """LoadBalancersGet200ResponseLoadBalancersInner - a model defined in OpenAPI

        :param algorithm: The algorithm of this LoadBalancersGet200ResponseLoadBalancersInner.
        :param created: The created of this LoadBalancersGet200ResponseLoadBalancersInner.
        :param id: The id of this LoadBalancersGet200ResponseLoadBalancersInner.
        :param included_traffic: The included_traffic of this LoadBalancersGet200ResponseLoadBalancersInner.
        :param ingoing_traffic: The ingoing_traffic of this LoadBalancersGet200ResponseLoadBalancersInner.
        :param labels: The labels of this LoadBalancersGet200ResponseLoadBalancersInner.
        :param load_balancer_type: The load_balancer_type of this LoadBalancersGet200ResponseLoadBalancersInner.
        :param location: The location of this LoadBalancersGet200ResponseLoadBalancersInner.
        :param name: The name of this LoadBalancersGet200ResponseLoadBalancersInner.
        :param outgoing_traffic: The outgoing_traffic of this LoadBalancersGet200ResponseLoadBalancersInner.
        :param private_net: The private_net of this LoadBalancersGet200ResponseLoadBalancersInner.
        :param protection: The protection of this LoadBalancersGet200ResponseLoadBalancersInner.
        :param public_net: The public_net of this LoadBalancersGet200ResponseLoadBalancersInner.
        :param services: The services of this LoadBalancersGet200ResponseLoadBalancersInner.
        :param targets: The targets of this LoadBalancersGet200ResponseLoadBalancersInner.
        """
        self.openapi_types = {
            'algorithm': LoadBalancersGet200ResponseLoadBalancersInnerAlgorithm,
            'created': str,
            'id': int,
            'included_traffic': int,
            'ingoing_traffic': int,
            'labels': Dict[str, str],
            'load_balancer_type': LoadBalancerTypesGet200ResponseLoadBalancerTypesInner,
            'location': DatacentersGet200ResponseDatacentersInnerLocation,
            'name': str,
            'outgoing_traffic': int,
            'private_net': List[LoadBalancersGet200ResponseLoadBalancersInnerPrivateNetInner],
            'protection': FloatingIpsGet200ResponseFloatingIpsInnerProtection,
            'public_net': LoadBalancersGet200ResponseLoadBalancersInnerPublicNet,
            'services': List[LoadBalancerService],
            'targets': List[LoadBalancerTarget]
        }

        self.attribute_map = {
            'algorithm': 'algorithm',
            'created': 'created',
            'id': 'id',
            'included_traffic': 'included_traffic',
            'ingoing_traffic': 'ingoing_traffic',
            'labels': 'labels',
            'load_balancer_type': 'load_balancer_type',
            'location': 'location',
            'name': 'name',
            'outgoing_traffic': 'outgoing_traffic',
            'private_net': 'private_net',
            'protection': 'protection',
            'public_net': 'public_net',
            'services': 'services',
            'targets': 'targets'
        }

        self._algorithm = algorithm
        self._created = created
        self._id = id
        self._included_traffic = included_traffic
        self._ingoing_traffic = ingoing_traffic
        self._labels = labels
        self._load_balancer_type = load_balancer_type
        self._location = location
        self._name = name
        self._outgoing_traffic = outgoing_traffic
        self._private_net = private_net
        self._protection = protection
        self._public_net = public_net
        self._services = services
        self._targets = targets

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LoadBalancersGet200ResponseLoadBalancersInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The _load_balancers_get_200_response_load_balancers_inner of this LoadBalancersGet200ResponseLoadBalancersInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def algorithm(self):
        """Gets the algorithm of this LoadBalancersGet200ResponseLoadBalancersInner.


        :return: The algorithm of this LoadBalancersGet200ResponseLoadBalancersInner.
        :rtype: LoadBalancersGet200ResponseLoadBalancersInnerAlgorithm
        """
        return self._algorithm

    @algorithm.setter
    def algorithm(self, algorithm):
        """Sets the algorithm of this LoadBalancersGet200ResponseLoadBalancersInner.


        :param algorithm: The algorithm of this LoadBalancersGet200ResponseLoadBalancersInner.
        :type algorithm: LoadBalancersGet200ResponseLoadBalancersInnerAlgorithm
        """
        if algorithm is None:
            raise ValueError("Invalid value for `algorithm`, must not be `None`")

        self._algorithm = algorithm

    @property
    def created(self):
        """Gets the created of this LoadBalancersGet200ResponseLoadBalancersInner.

        Point in time when the Resource was created (in ISO-8601 format)

        :return: The created of this LoadBalancersGet200ResponseLoadBalancersInner.
        :rtype: str
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this LoadBalancersGet200ResponseLoadBalancersInner.

        Point in time when the Resource was created (in ISO-8601 format)

        :param created: The created of this LoadBalancersGet200ResponseLoadBalancersInner.
        :type created: str
        """
        if created is None:
            raise ValueError("Invalid value for `created`, must not be `None`")

        self._created = created

    @property
    def id(self):
        """Gets the id of this LoadBalancersGet200ResponseLoadBalancersInner.

        ID of the Resource

        :return: The id of this LoadBalancersGet200ResponseLoadBalancersInner.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this LoadBalancersGet200ResponseLoadBalancersInner.

        ID of the Resource

        :param id: The id of this LoadBalancersGet200ResponseLoadBalancersInner.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def included_traffic(self):
        """Gets the included_traffic of this LoadBalancersGet200ResponseLoadBalancersInner.

        Free Traffic for the current billing period in bytes

        :return: The included_traffic of this LoadBalancersGet200ResponseLoadBalancersInner.
        :rtype: int
        """
        return self._included_traffic

    @included_traffic.setter
    def included_traffic(self, included_traffic):
        """Sets the included_traffic of this LoadBalancersGet200ResponseLoadBalancersInner.

        Free Traffic for the current billing period in bytes

        :param included_traffic: The included_traffic of this LoadBalancersGet200ResponseLoadBalancersInner.
        :type included_traffic: int
        """
        if included_traffic is None:
            raise ValueError("Invalid value for `included_traffic`, must not be `None`")

        self._included_traffic = included_traffic

    @property
    def ingoing_traffic(self):
        """Gets the ingoing_traffic of this LoadBalancersGet200ResponseLoadBalancersInner.

        Inbound Traffic for the current billing period in bytes

        :return: The ingoing_traffic of this LoadBalancersGet200ResponseLoadBalancersInner.
        :rtype: int
        """
        return self._ingoing_traffic

    @ingoing_traffic.setter
    def ingoing_traffic(self, ingoing_traffic):
        """Sets the ingoing_traffic of this LoadBalancersGet200ResponseLoadBalancersInner.

        Inbound Traffic for the current billing period in bytes

        :param ingoing_traffic: The ingoing_traffic of this LoadBalancersGet200ResponseLoadBalancersInner.
        :type ingoing_traffic: int
        """
        if ingoing_traffic is None:
            raise ValueError("Invalid value for `ingoing_traffic`, must not be `None`")

        self._ingoing_traffic = ingoing_traffic

    @property
    def labels(self):
        """Gets the labels of this LoadBalancersGet200ResponseLoadBalancersInner.

        User-defined labels (key-value pairs)

        :return: The labels of this LoadBalancersGet200ResponseLoadBalancersInner.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this LoadBalancersGet200ResponseLoadBalancersInner.

        User-defined labels (key-value pairs)

        :param labels: The labels of this LoadBalancersGet200ResponseLoadBalancersInner.
        :type labels: Dict[str, str]
        """
        if labels is None:
            raise ValueError("Invalid value for `labels`, must not be `None`")

        self._labels = labels

    @property
    def load_balancer_type(self):
        """Gets the load_balancer_type of this LoadBalancersGet200ResponseLoadBalancersInner.


        :return: The load_balancer_type of this LoadBalancersGet200ResponseLoadBalancersInner.
        :rtype: LoadBalancerTypesGet200ResponseLoadBalancerTypesInner
        """
        return self._load_balancer_type

    @load_balancer_type.setter
    def load_balancer_type(self, load_balancer_type):
        """Sets the load_balancer_type of this LoadBalancersGet200ResponseLoadBalancersInner.


        :param load_balancer_type: The load_balancer_type of this LoadBalancersGet200ResponseLoadBalancersInner.
        :type load_balancer_type: LoadBalancerTypesGet200ResponseLoadBalancerTypesInner
        """
        if load_balancer_type is None:
            raise ValueError("Invalid value for `load_balancer_type`, must not be `None`")

        self._load_balancer_type = load_balancer_type

    @property
    def location(self):
        """Gets the location of this LoadBalancersGet200ResponseLoadBalancersInner.


        :return: The location of this LoadBalancersGet200ResponseLoadBalancersInner.
        :rtype: DatacentersGet200ResponseDatacentersInnerLocation
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this LoadBalancersGet200ResponseLoadBalancersInner.


        :param location: The location of this LoadBalancersGet200ResponseLoadBalancersInner.
        :type location: DatacentersGet200ResponseDatacentersInnerLocation
        """
        if location is None:
            raise ValueError("Invalid value for `location`, must not be `None`")

        self._location = location

    @property
    def name(self):
        """Gets the name of this LoadBalancersGet200ResponseLoadBalancersInner.

        Name of the Resource. Must be unique per Project.

        :return: The name of this LoadBalancersGet200ResponseLoadBalancersInner.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this LoadBalancersGet200ResponseLoadBalancersInner.

        Name of the Resource. Must be unique per Project.

        :param name: The name of this LoadBalancersGet200ResponseLoadBalancersInner.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def outgoing_traffic(self):
        """Gets the outgoing_traffic of this LoadBalancersGet200ResponseLoadBalancersInner.

        Outbound Traffic for the current billing period in bytes

        :return: The outgoing_traffic of this LoadBalancersGet200ResponseLoadBalancersInner.
        :rtype: int
        """
        return self._outgoing_traffic

    @outgoing_traffic.setter
    def outgoing_traffic(self, outgoing_traffic):
        """Sets the outgoing_traffic of this LoadBalancersGet200ResponseLoadBalancersInner.

        Outbound Traffic for the current billing period in bytes

        :param outgoing_traffic: The outgoing_traffic of this LoadBalancersGet200ResponseLoadBalancersInner.
        :type outgoing_traffic: int
        """
        if outgoing_traffic is None:
            raise ValueError("Invalid value for `outgoing_traffic`, must not be `None`")

        self._outgoing_traffic = outgoing_traffic

    @property
    def private_net(self):
        """Gets the private_net of this LoadBalancersGet200ResponseLoadBalancersInner.

        Private networks information

        :return: The private_net of this LoadBalancersGet200ResponseLoadBalancersInner.
        :rtype: List[LoadBalancersGet200ResponseLoadBalancersInnerPrivateNetInner]
        """
        return self._private_net

    @private_net.setter
    def private_net(self, private_net):
        """Sets the private_net of this LoadBalancersGet200ResponseLoadBalancersInner.

        Private networks information

        :param private_net: The private_net of this LoadBalancersGet200ResponseLoadBalancersInner.
        :type private_net: List[LoadBalancersGet200ResponseLoadBalancersInnerPrivateNetInner]
        """
        if private_net is None:
            raise ValueError("Invalid value for `private_net`, must not be `None`")

        self._private_net = private_net

    @property
    def protection(self):
        """Gets the protection of this LoadBalancersGet200ResponseLoadBalancersInner.


        :return: The protection of this LoadBalancersGet200ResponseLoadBalancersInner.
        :rtype: FloatingIpsGet200ResponseFloatingIpsInnerProtection
        """
        return self._protection

    @protection.setter
    def protection(self, protection):
        """Sets the protection of this LoadBalancersGet200ResponseLoadBalancersInner.


        :param protection: The protection of this LoadBalancersGet200ResponseLoadBalancersInner.
        :type protection: FloatingIpsGet200ResponseFloatingIpsInnerProtection
        """
        if protection is None:
            raise ValueError("Invalid value for `protection`, must not be `None`")

        self._protection = protection

    @property
    def public_net(self):
        """Gets the public_net of this LoadBalancersGet200ResponseLoadBalancersInner.


        :return: The public_net of this LoadBalancersGet200ResponseLoadBalancersInner.
        :rtype: LoadBalancersGet200ResponseLoadBalancersInnerPublicNet
        """
        return self._public_net

    @public_net.setter
    def public_net(self, public_net):
        """Sets the public_net of this LoadBalancersGet200ResponseLoadBalancersInner.


        :param public_net: The public_net of this LoadBalancersGet200ResponseLoadBalancersInner.
        :type public_net: LoadBalancersGet200ResponseLoadBalancersInnerPublicNet
        """
        if public_net is None:
            raise ValueError("Invalid value for `public_net`, must not be `None`")

        self._public_net = public_net

    @property
    def services(self):
        """Gets the services of this LoadBalancersGet200ResponseLoadBalancersInner.

        List of services that belong to this Load Balancer

        :return: The services of this LoadBalancersGet200ResponseLoadBalancersInner.
        :rtype: List[LoadBalancerService]
        """
        return self._services

    @services.setter
    def services(self, services):
        """Sets the services of this LoadBalancersGet200ResponseLoadBalancersInner.

        List of services that belong to this Load Balancer

        :param services: The services of this LoadBalancersGet200ResponseLoadBalancersInner.
        :type services: List[LoadBalancerService]
        """
        if services is None:
            raise ValueError("Invalid value for `services`, must not be `None`")

        self._services = services

    @property
    def targets(self):
        """Gets the targets of this LoadBalancersGet200ResponseLoadBalancersInner.

        List of targets that belong to this Load Balancer

        :return: The targets of this LoadBalancersGet200ResponseLoadBalancersInner.
        :rtype: List[LoadBalancerTarget]
        """
        return self._targets

    @targets.setter
    def targets(self, targets):
        """Sets the targets of this LoadBalancersGet200ResponseLoadBalancersInner.

        List of targets that belong to this Load Balancer

        :param targets: The targets of this LoadBalancersGet200ResponseLoadBalancersInner.
        :type targets: List[LoadBalancerTarget]
        """
        if targets is None:
            raise ValueError("Invalid value for `targets`, must not be `None`")

        self._targets = targets
