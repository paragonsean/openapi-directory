# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PlacementGroupNullable(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created: str=None, id: int=None, labels: Dict[str, str]=None, name: str=None, servers: List[int]=None, type: str=None):
        """PlacementGroupNullable - a model defined in OpenAPI

        :param created: The created of this PlacementGroupNullable.
        :param id: The id of this PlacementGroupNullable.
        :param labels: The labels of this PlacementGroupNullable.
        :param name: The name of this PlacementGroupNullable.
        :param servers: The servers of this PlacementGroupNullable.
        :param type: The type of this PlacementGroupNullable.
        """
        self.openapi_types = {
            'created': str,
            'id': int,
            'labels': Dict[str, str],
            'name': str,
            'servers': List[int],
            'type': str
        }

        self.attribute_map = {
            'created': 'created',
            'id': 'id',
            'labels': 'labels',
            'name': 'name',
            'servers': 'servers',
            'type': 'type'
        }

        self._created = created
        self._id = id
        self._labels = labels
        self._name = name
        self._servers = servers
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PlacementGroupNullable':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PlacementGroupNullable of this PlacementGroupNullable.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created(self):
        """Gets the created of this PlacementGroupNullable.

        Point in time when the Resource was created (in ISO-8601 format)

        :return: The created of this PlacementGroupNullable.
        :rtype: str
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this PlacementGroupNullable.

        Point in time when the Resource was created (in ISO-8601 format)

        :param created: The created of this PlacementGroupNullable.
        :type created: str
        """
        if created is None:
            raise ValueError("Invalid value for `created`, must not be `None`")

        self._created = created

    @property
    def id(self):
        """Gets the id of this PlacementGroupNullable.

        ID of the Resource

        :return: The id of this PlacementGroupNullable.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PlacementGroupNullable.

        ID of the Resource

        :param id: The id of this PlacementGroupNullable.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def labels(self):
        """Gets the labels of this PlacementGroupNullable.

        User-defined labels (key-value pairs)

        :return: The labels of this PlacementGroupNullable.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this PlacementGroupNullable.

        User-defined labels (key-value pairs)

        :param labels: The labels of this PlacementGroupNullable.
        :type labels: Dict[str, str]
        """
        if labels is None:
            raise ValueError("Invalid value for `labels`, must not be `None`")

        self._labels = labels

    @property
    def name(self):
        """Gets the name of this PlacementGroupNullable.

        Name of the Resource. Must be unique per Project.

        :return: The name of this PlacementGroupNullable.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PlacementGroupNullable.

        Name of the Resource. Must be unique per Project.

        :param name: The name of this PlacementGroupNullable.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def servers(self):
        """Gets the servers of this PlacementGroupNullable.

        Array of IDs of Servers that are part of this Placement Group

        :return: The servers of this PlacementGroupNullable.
        :rtype: List[int]
        """
        return self._servers

    @servers.setter
    def servers(self, servers):
        """Sets the servers of this PlacementGroupNullable.

        Array of IDs of Servers that are part of this Placement Group

        :param servers: The servers of this PlacementGroupNullable.
        :type servers: List[int]
        """
        if servers is None:
            raise ValueError("Invalid value for `servers`, must not be `None`")

        self._servers = servers

    @property
    def type(self):
        """Gets the type of this PlacementGroupNullable.

        Type of the Placement Group

        :return: The type of this PlacementGroupNullable.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this PlacementGroupNullable.

        Type of the Placement Group

        :param type: The type of this PlacementGroupNullable.
        :type type: str
        """
        allowed_values = ["spread"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
