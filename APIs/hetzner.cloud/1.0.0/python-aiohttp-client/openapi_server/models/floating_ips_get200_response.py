# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.actions_response_meta import ActionsResponseMeta
from openapi_server.models.floating_ips_get200_response_floating_ips_inner import FloatingIpsGet200ResponseFloatingIpsInner
from openapi_server import util


class FloatingIpsGet200Response(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, floating_ips: List[FloatingIpsGet200ResponseFloatingIpsInner]=None, meta: ActionsResponseMeta=None):
        """FloatingIpsGet200Response - a model defined in OpenAPI

        :param floating_ips: The floating_ips of this FloatingIpsGet200Response.
        :param meta: The meta of this FloatingIpsGet200Response.
        """
        self.openapi_types = {
            'floating_ips': List[FloatingIpsGet200ResponseFloatingIpsInner],
            'meta': ActionsResponseMeta
        }

        self.attribute_map = {
            'floating_ips': 'floating_ips',
            'meta': 'meta'
        }

        self._floating_ips = floating_ips
        self._meta = meta

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FloatingIpsGet200Response':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The _floating_ips_get_200_response of this FloatingIpsGet200Response.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def floating_ips(self):
        """Gets the floating_ips of this FloatingIpsGet200Response.


        :return: The floating_ips of this FloatingIpsGet200Response.
        :rtype: List[FloatingIpsGet200ResponseFloatingIpsInner]
        """
        return self._floating_ips

    @floating_ips.setter
    def floating_ips(self, floating_ips):
        """Sets the floating_ips of this FloatingIpsGet200Response.


        :param floating_ips: The floating_ips of this FloatingIpsGet200Response.
        :type floating_ips: List[FloatingIpsGet200ResponseFloatingIpsInner]
        """
        if floating_ips is None:
            raise ValueError("Invalid value for `floating_ips`, must not be `None`")

        self._floating_ips = floating_ips

    @property
    def meta(self):
        """Gets the meta of this FloatingIpsGet200Response.


        :return: The meta of this FloatingIpsGet200Response.
        :rtype: ActionsResponseMeta
        """
        return self._meta

    @meta.setter
    def meta(self, meta):
        """Sets the meta of this FloatingIpsGet200Response.


        :param meta: The meta of this FloatingIpsGet200Response.
        :type meta: ActionsResponseMeta
        """

        self._meta = meta
