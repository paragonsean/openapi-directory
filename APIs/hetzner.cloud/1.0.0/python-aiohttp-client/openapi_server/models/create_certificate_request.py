# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateCertificateRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, certificate: str=None, domain_names: List[str]=None, labels: object=None, name: str=None, private_key: str=None, type: str=None):
        """CreateCertificateRequest - a model defined in OpenAPI

        :param certificate: The certificate of this CreateCertificateRequest.
        :param domain_names: The domain_names of this CreateCertificateRequest.
        :param labels: The labels of this CreateCertificateRequest.
        :param name: The name of this CreateCertificateRequest.
        :param private_key: The private_key of this CreateCertificateRequest.
        :param type: The type of this CreateCertificateRequest.
        """
        self.openapi_types = {
            'certificate': str,
            'domain_names': List[str],
            'labels': object,
            'name': str,
            'private_key': str,
            'type': str
        }

        self.attribute_map = {
            'certificate': 'certificate',
            'domain_names': 'domain_names',
            'labels': 'labels',
            'name': 'name',
            'private_key': 'private_key',
            'type': 'type'
        }

        self._certificate = certificate
        self._domain_names = domain_names
        self._labels = labels
        self._name = name
        self._private_key = private_key
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateCertificateRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateCertificateRequest of this CreateCertificateRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def certificate(self):
        """Gets the certificate of this CreateCertificateRequest.

        Certificate and chain in PEM format, in order so that each record directly certifies the one preceding. Required for type `uploaded` Certificates.

        :return: The certificate of this CreateCertificateRequest.
        :rtype: str
        """
        return self._certificate

    @certificate.setter
    def certificate(self, certificate):
        """Sets the certificate of this CreateCertificateRequest.

        Certificate and chain in PEM format, in order so that each record directly certifies the one preceding. Required for type `uploaded` Certificates.

        :param certificate: The certificate of this CreateCertificateRequest.
        :type certificate: str
        """

        self._certificate = certificate

    @property
    def domain_names(self):
        """Gets the domain_names of this CreateCertificateRequest.

        Domains and subdomains that should be contained in the Certificate issued by *Let's Encrypt*. Required for type `managed` Certificates.

        :return: The domain_names of this CreateCertificateRequest.
        :rtype: List[str]
        """
        return self._domain_names

    @domain_names.setter
    def domain_names(self, domain_names):
        """Sets the domain_names of this CreateCertificateRequest.

        Domains and subdomains that should be contained in the Certificate issued by *Let's Encrypt*. Required for type `managed` Certificates.

        :param domain_names: The domain_names of this CreateCertificateRequest.
        :type domain_names: List[str]
        """

        self._domain_names = domain_names

    @property
    def labels(self):
        """Gets the labels of this CreateCertificateRequest.

        User-defined labels (key-value pairs)

        :return: The labels of this CreateCertificateRequest.
        :rtype: object
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this CreateCertificateRequest.

        User-defined labels (key-value pairs)

        :param labels: The labels of this CreateCertificateRequest.
        :type labels: object
        """

        self._labels = labels

    @property
    def name(self):
        """Gets the name of this CreateCertificateRequest.

        Name of the Certificate

        :return: The name of this CreateCertificateRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateCertificateRequest.

        Name of the Certificate

        :param name: The name of this CreateCertificateRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def private_key(self):
        """Gets the private_key of this CreateCertificateRequest.

        Certificate key in PEM format. Required for type `uploaded` Certificates.

        :return: The private_key of this CreateCertificateRequest.
        :rtype: str
        """
        return self._private_key

    @private_key.setter
    def private_key(self, private_key):
        """Sets the private_key of this CreateCertificateRequest.

        Certificate key in PEM format. Required for type `uploaded` Certificates.

        :param private_key: The private_key of this CreateCertificateRequest.
        :type private_key: str
        """

        self._private_key = private_key

    @property
    def type(self):
        """Gets the type of this CreateCertificateRequest.

        Choose between uploading a Certificate in PEM format or requesting a managed *Let's Encrypt* Certificate. If omitted defaults to `uploaded`.

        :return: The type of this CreateCertificateRequest.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CreateCertificateRequest.

        Choose between uploading a Certificate in PEM format or requesting a managed *Let's Encrypt* Certificate. If omitted defaults to `uploaded`.

        :param type: The type of this CreateCertificateRequest.
        :type type: str
        """
        allowed_values = ["uploaded", "managed"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
