# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.action_error import ActionError
from openapi_server.models.action_resources_inner import ActionResourcesInner
from openapi_server import util


class NullableAction(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, command: str=None, error: ActionError=None, finished: str=None, id: int=None, progress: float=None, resources: List[ActionResourcesInner]=None, started: str=None, status: str=None):
        """NullableAction - a model defined in OpenAPI

        :param command: The command of this NullableAction.
        :param error: The error of this NullableAction.
        :param finished: The finished of this NullableAction.
        :param id: The id of this NullableAction.
        :param progress: The progress of this NullableAction.
        :param resources: The resources of this NullableAction.
        :param started: The started of this NullableAction.
        :param status: The status of this NullableAction.
        """
        self.openapi_types = {
            'command': str,
            'error': ActionError,
            'finished': str,
            'id': int,
            'progress': float,
            'resources': List[ActionResourcesInner],
            'started': str,
            'status': str
        }

        self.attribute_map = {
            'command': 'command',
            'error': 'error',
            'finished': 'finished',
            'id': 'id',
            'progress': 'progress',
            'resources': 'resources',
            'started': 'started',
            'status': 'status'
        }

        self._command = command
        self._error = error
        self._finished = finished
        self._id = id
        self._progress = progress
        self._resources = resources
        self._started = started
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NullableAction':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NullableAction of this NullableAction.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def command(self):
        """Gets the command of this NullableAction.

        Command executed in the Action

        :return: The command of this NullableAction.
        :rtype: str
        """
        return self._command

    @command.setter
    def command(self, command):
        """Sets the command of this NullableAction.

        Command executed in the Action

        :param command: The command of this NullableAction.
        :type command: str
        """
        if command is None:
            raise ValueError("Invalid value for `command`, must not be `None`")

        self._command = command

    @property
    def error(self):
        """Gets the error of this NullableAction.


        :return: The error of this NullableAction.
        :rtype: ActionError
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this NullableAction.


        :param error: The error of this NullableAction.
        :type error: ActionError
        """
        if error is None:
            raise ValueError("Invalid value for `error`, must not be `None`")

        self._error = error

    @property
    def finished(self):
        """Gets the finished of this NullableAction.

        Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.

        :return: The finished of this NullableAction.
        :rtype: str
        """
        return self._finished

    @finished.setter
    def finished(self, finished):
        """Sets the finished of this NullableAction.

        Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.

        :param finished: The finished of this NullableAction.
        :type finished: str
        """
        if finished is None:
            raise ValueError("Invalid value for `finished`, must not be `None`")

        self._finished = finished

    @property
    def id(self):
        """Gets the id of this NullableAction.

        ID of the Resource

        :return: The id of this NullableAction.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this NullableAction.

        ID of the Resource

        :param id: The id of this NullableAction.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def progress(self):
        """Gets the progress of this NullableAction.

        Progress of Action in percent

        :return: The progress of this NullableAction.
        :rtype: float
        """
        return self._progress

    @progress.setter
    def progress(self, progress):
        """Sets the progress of this NullableAction.

        Progress of Action in percent

        :param progress: The progress of this NullableAction.
        :type progress: float
        """
        if progress is None:
            raise ValueError("Invalid value for `progress`, must not be `None`")

        self._progress = progress

    @property
    def resources(self):
        """Gets the resources of this NullableAction.

        Resources the Action relates to

        :return: The resources of this NullableAction.
        :rtype: List[ActionResourcesInner]
        """
        return self._resources

    @resources.setter
    def resources(self, resources):
        """Sets the resources of this NullableAction.

        Resources the Action relates to

        :param resources: The resources of this NullableAction.
        :type resources: List[ActionResourcesInner]
        """
        if resources is None:
            raise ValueError("Invalid value for `resources`, must not be `None`")

        self._resources = resources

    @property
    def started(self):
        """Gets the started of this NullableAction.

        Point in time when the Action was started (in ISO-8601 format)

        :return: The started of this NullableAction.
        :rtype: str
        """
        return self._started

    @started.setter
    def started(self, started):
        """Sets the started of this NullableAction.

        Point in time when the Action was started (in ISO-8601 format)

        :param started: The started of this NullableAction.
        :type started: str
        """
        if started is None:
            raise ValueError("Invalid value for `started`, must not be `None`")

        self._started = started

    @property
    def status(self):
        """Gets the status of this NullableAction.

        Status of the Action

        :return: The status of this NullableAction.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this NullableAction.

        Status of the Action

        :param status: The status of this NullableAction.
        :type status: str
        """
        allowed_values = ["success", "running", "error"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status
