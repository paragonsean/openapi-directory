# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.pricing_get200_response_pricing_server_types_inner_prices_inner import PricingGet200ResponsePricingServerTypesInnerPricesInner
from openapi_server import util


class ServersGet200ResponseServersInnerServerType(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cores: float=None, cpu_type: str=None, deprecated: bool=None, description: str=None, disk: float=None, id: int=None, memory: float=None, name: str=None, prices: List[PricingGet200ResponsePricingServerTypesInnerPricesInner]=None, storage_type: str=None):
        """ServersGet200ResponseServersInnerServerType - a model defined in OpenAPI

        :param cores: The cores of this ServersGet200ResponseServersInnerServerType.
        :param cpu_type: The cpu_type of this ServersGet200ResponseServersInnerServerType.
        :param deprecated: The deprecated of this ServersGet200ResponseServersInnerServerType.
        :param description: The description of this ServersGet200ResponseServersInnerServerType.
        :param disk: The disk of this ServersGet200ResponseServersInnerServerType.
        :param id: The id of this ServersGet200ResponseServersInnerServerType.
        :param memory: The memory of this ServersGet200ResponseServersInnerServerType.
        :param name: The name of this ServersGet200ResponseServersInnerServerType.
        :param prices: The prices of this ServersGet200ResponseServersInnerServerType.
        :param storage_type: The storage_type of this ServersGet200ResponseServersInnerServerType.
        """
        self.openapi_types = {
            'cores': float,
            'cpu_type': str,
            'deprecated': bool,
            'description': str,
            'disk': float,
            'id': int,
            'memory': float,
            'name': str,
            'prices': List[PricingGet200ResponsePricingServerTypesInnerPricesInner],
            'storage_type': str
        }

        self.attribute_map = {
            'cores': 'cores',
            'cpu_type': 'cpu_type',
            'deprecated': 'deprecated',
            'description': 'description',
            'disk': 'disk',
            'id': 'id',
            'memory': 'memory',
            'name': 'name',
            'prices': 'prices',
            'storage_type': 'storage_type'
        }

        self._cores = cores
        self._cpu_type = cpu_type
        self._deprecated = deprecated
        self._description = description
        self._disk = disk
        self._id = id
        self._memory = memory
        self._name = name
        self._prices = prices
        self._storage_type = storage_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ServersGet200ResponseServersInnerServerType':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The _servers_get_200_response_servers_inner_server_type of this ServersGet200ResponseServersInnerServerType.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cores(self):
        """Gets the cores of this ServersGet200ResponseServersInnerServerType.

        Number of cpu cores a Server of this type will have

        :return: The cores of this ServersGet200ResponseServersInnerServerType.
        :rtype: float
        """
        return self._cores

    @cores.setter
    def cores(self, cores):
        """Sets the cores of this ServersGet200ResponseServersInnerServerType.

        Number of cpu cores a Server of this type will have

        :param cores: The cores of this ServersGet200ResponseServersInnerServerType.
        :type cores: float
        """
        if cores is None:
            raise ValueError("Invalid value for `cores`, must not be `None`")

        self._cores = cores

    @property
    def cpu_type(self):
        """Gets the cpu_type of this ServersGet200ResponseServersInnerServerType.

        Type of cpu

        :return: The cpu_type of this ServersGet200ResponseServersInnerServerType.
        :rtype: str
        """
        return self._cpu_type

    @cpu_type.setter
    def cpu_type(self, cpu_type):
        """Sets the cpu_type of this ServersGet200ResponseServersInnerServerType.

        Type of cpu

        :param cpu_type: The cpu_type of this ServersGet200ResponseServersInnerServerType.
        :type cpu_type: str
        """
        allowed_values = ["shared", "dedicated"]  # noqa: E501
        if cpu_type not in allowed_values:
            raise ValueError(
                "Invalid value for `cpu_type` ({0}), must be one of {1}"
                .format(cpu_type, allowed_values)
            )

        self._cpu_type = cpu_type

    @property
    def deprecated(self):
        """Gets the deprecated of this ServersGet200ResponseServersInnerServerType.

        True if Server type is deprecated

        :return: The deprecated of this ServersGet200ResponseServersInnerServerType.
        :rtype: bool
        """
        return self._deprecated

    @deprecated.setter
    def deprecated(self, deprecated):
        """Sets the deprecated of this ServersGet200ResponseServersInnerServerType.

        True if Server type is deprecated

        :param deprecated: The deprecated of this ServersGet200ResponseServersInnerServerType.
        :type deprecated: bool
        """
        if deprecated is None:
            raise ValueError("Invalid value for `deprecated`, must not be `None`")

        self._deprecated = deprecated

    @property
    def description(self):
        """Gets the description of this ServersGet200ResponseServersInnerServerType.

        Description of the Server type

        :return: The description of this ServersGet200ResponseServersInnerServerType.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ServersGet200ResponseServersInnerServerType.

        Description of the Server type

        :param description: The description of this ServersGet200ResponseServersInnerServerType.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def disk(self):
        """Gets the disk of this ServersGet200ResponseServersInnerServerType.

        Disk size a Server of this type will have in GB

        :return: The disk of this ServersGet200ResponseServersInnerServerType.
        :rtype: float
        """
        return self._disk

    @disk.setter
    def disk(self, disk):
        """Sets the disk of this ServersGet200ResponseServersInnerServerType.

        Disk size a Server of this type will have in GB

        :param disk: The disk of this ServersGet200ResponseServersInnerServerType.
        :type disk: float
        """
        if disk is None:
            raise ValueError("Invalid value for `disk`, must not be `None`")

        self._disk = disk

    @property
    def id(self):
        """Gets the id of this ServersGet200ResponseServersInnerServerType.

        ID of the Server type

        :return: The id of this ServersGet200ResponseServersInnerServerType.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ServersGet200ResponseServersInnerServerType.

        ID of the Server type

        :param id: The id of this ServersGet200ResponseServersInnerServerType.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def memory(self):
        """Gets the memory of this ServersGet200ResponseServersInnerServerType.

        Memory a Server of this type will have in GB

        :return: The memory of this ServersGet200ResponseServersInnerServerType.
        :rtype: float
        """
        return self._memory

    @memory.setter
    def memory(self, memory):
        """Sets the memory of this ServersGet200ResponseServersInnerServerType.

        Memory a Server of this type will have in GB

        :param memory: The memory of this ServersGet200ResponseServersInnerServerType.
        :type memory: float
        """
        if memory is None:
            raise ValueError("Invalid value for `memory`, must not be `None`")

        self._memory = memory

    @property
    def name(self):
        """Gets the name of this ServersGet200ResponseServersInnerServerType.

        Unique identifier of the Server type

        :return: The name of this ServersGet200ResponseServersInnerServerType.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ServersGet200ResponseServersInnerServerType.

        Unique identifier of the Server type

        :param name: The name of this ServersGet200ResponseServersInnerServerType.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def prices(self):
        """Gets the prices of this ServersGet200ResponseServersInnerServerType.

        Prices in different Locations

        :return: The prices of this ServersGet200ResponseServersInnerServerType.
        :rtype: List[PricingGet200ResponsePricingServerTypesInnerPricesInner]
        """
        return self._prices

    @prices.setter
    def prices(self, prices):
        """Sets the prices of this ServersGet200ResponseServersInnerServerType.

        Prices in different Locations

        :param prices: The prices of this ServersGet200ResponseServersInnerServerType.
        :type prices: List[PricingGet200ResponsePricingServerTypesInnerPricesInner]
        """
        if prices is None:
            raise ValueError("Invalid value for `prices`, must not be `None`")

        self._prices = prices

    @property
    def storage_type(self):
        """Gets the storage_type of this ServersGet200ResponseServersInnerServerType.

        Type of Server boot drive. Local has higher speed. Network has better availability.

        :return: The storage_type of this ServersGet200ResponseServersInnerServerType.
        :rtype: str
        """
        return self._storage_type

    @storage_type.setter
    def storage_type(self, storage_type):
        """Sets the storage_type of this ServersGet200ResponseServersInnerServerType.

        Type of Server boot drive. Local has higher speed. Network has better availability.

        :param storage_type: The storage_type of this ServersGet200ResponseServersInnerServerType.
        :type storage_type: str
        """
        allowed_values = ["local", "network"]  # noqa: E501
        if storage_type not in allowed_values:
            raise ValueError(
                "Invalid value for `storage_type` ({0}), must be one of {1}"
                .format(storage_type, allowed_values)
            )

        self._storage_type = storage_type
