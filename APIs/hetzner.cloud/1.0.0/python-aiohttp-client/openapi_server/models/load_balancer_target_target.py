# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.load_balancer_target_health_status_inner import LoadBalancerTargetHealthStatusInner
from openapi_server.models.load_balancer_target_server import LoadBalancerTargetServer
from openapi_server import util


class LoadBalancerTargetTarget(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, health_status: List[LoadBalancerTargetHealthStatusInner]=None, server: LoadBalancerTargetServer=None, type: str=None, use_private_ip: bool=None):
        """LoadBalancerTargetTarget - a model defined in OpenAPI

        :param health_status: The health_status of this LoadBalancerTargetTarget.
        :param server: The server of this LoadBalancerTargetTarget.
        :param type: The type of this LoadBalancerTargetTarget.
        :param use_private_ip: The use_private_ip of this LoadBalancerTargetTarget.
        """
        self.openapi_types = {
            'health_status': List[LoadBalancerTargetHealthStatusInner],
            'server': LoadBalancerTargetServer,
            'type': str,
            'use_private_ip': bool
        }

        self.attribute_map = {
            'health_status': 'health_status',
            'server': 'server',
            'type': 'type',
            'use_private_ip': 'use_private_ip'
        }

        self._health_status = health_status
        self._server = server
        self._type = type
        self._use_private_ip = use_private_ip

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LoadBalancerTargetTarget':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LoadBalancerTargetTarget of this LoadBalancerTargetTarget.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def health_status(self):
        """Gets the health_status of this LoadBalancerTargetTarget.

        List of health statuses of the services on this target. Only present for target types \"server\" and \"ip\".

        :return: The health_status of this LoadBalancerTargetTarget.
        :rtype: List[LoadBalancerTargetHealthStatusInner]
        """
        return self._health_status

    @health_status.setter
    def health_status(self, health_status):
        """Sets the health_status of this LoadBalancerTargetTarget.

        List of health statuses of the services on this target. Only present for target types \"server\" and \"ip\".

        :param health_status: The health_status of this LoadBalancerTargetTarget.
        :type health_status: List[LoadBalancerTargetHealthStatusInner]
        """

        self._health_status = health_status

    @property
    def server(self):
        """Gets the server of this LoadBalancerTargetTarget.


        :return: The server of this LoadBalancerTargetTarget.
        :rtype: LoadBalancerTargetServer
        """
        return self._server

    @server.setter
    def server(self, server):
        """Sets the server of this LoadBalancerTargetTarget.


        :param server: The server of this LoadBalancerTargetTarget.
        :type server: LoadBalancerTargetServer
        """

        self._server = server

    @property
    def type(self):
        """Gets the type of this LoadBalancerTargetTarget.

        Type of the resource. Here always \"server\".

        :return: The type of this LoadBalancerTargetTarget.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this LoadBalancerTargetTarget.

        Type of the resource. Here always \"server\".

        :param type: The type of this LoadBalancerTargetTarget.
        :type type: str
        """

        self._type = type

    @property
    def use_private_ip(self):
        """Gets the use_private_ip of this LoadBalancerTargetTarget.

        Use the private network IP instead of the public IP. Default value is false. Only present for target types \"server\" and \"label_selector\".

        :return: The use_private_ip of this LoadBalancerTargetTarget.
        :rtype: bool
        """
        return self._use_private_ip

    @use_private_ip.setter
    def use_private_ip(self, use_private_ip):
        """Sets the use_private_ip of this LoadBalancerTargetTarget.

        Use the private network IP instead of the public IP. Default value is false. Only present for target types \"server\" and \"label_selector\".

        :param use_private_ip: The use_private_ip of this LoadBalancerTargetTarget.
        :type use_private_ip: bool
        """

        self._use_private_ip = use_private_ip
