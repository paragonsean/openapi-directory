# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.pricing_get200_response_pricing_server_types_inner_prices_inner import PricingGet200ResponsePricingServerTypesInnerPricesInner
from openapi_server import util


class PricingGet200ResponsePricingServerTypesInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: float=None, name: str=None, prices: List[PricingGet200ResponsePricingServerTypesInnerPricesInner]=None):
        """PricingGet200ResponsePricingServerTypesInner - a model defined in OpenAPI

        :param id: The id of this PricingGet200ResponsePricingServerTypesInner.
        :param name: The name of this PricingGet200ResponsePricingServerTypesInner.
        :param prices: The prices of this PricingGet200ResponsePricingServerTypesInner.
        """
        self.openapi_types = {
            'id': float,
            'name': str,
            'prices': List[PricingGet200ResponsePricingServerTypesInnerPricesInner]
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'prices': 'prices'
        }

        self._id = id
        self._name = name
        self._prices = prices

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PricingGet200ResponsePricingServerTypesInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The _pricing_get_200_response_pricing_server_types_inner of this PricingGet200ResponsePricingServerTypesInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this PricingGet200ResponsePricingServerTypesInner.

        ID of the Server type the price is for

        :return: The id of this PricingGet200ResponsePricingServerTypesInner.
        :rtype: float
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PricingGet200ResponsePricingServerTypesInner.

        ID of the Server type the price is for

        :param id: The id of this PricingGet200ResponsePricingServerTypesInner.
        :type id: float
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def name(self):
        """Gets the name of this PricingGet200ResponsePricingServerTypesInner.

        Name of the Server type the price is for

        :return: The name of this PricingGet200ResponsePricingServerTypesInner.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PricingGet200ResponsePricingServerTypesInner.

        Name of the Server type the price is for

        :param name: The name of this PricingGet200ResponsePricingServerTypesInner.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def prices(self):
        """Gets the prices of this PricingGet200ResponsePricingServerTypesInner.

        Server type costs per Location

        :return: The prices of this PricingGet200ResponsePricingServerTypesInner.
        :rtype: List[PricingGet200ResponsePricingServerTypesInnerPricesInner]
        """
        return self._prices

    @prices.setter
    def prices(self, prices):
        """Sets the prices of this PricingGet200ResponsePricingServerTypesInner.

        Server type costs per Location

        :param prices: The prices of this PricingGet200ResponsePricingServerTypesInner.
        :type prices: List[PricingGet200ResponsePricingServerTypesInnerPricesInner]
        """
        if prices is None:
            raise ValueError("Invalid value for `prices`, must not be `None`")

        self._prices = prices
