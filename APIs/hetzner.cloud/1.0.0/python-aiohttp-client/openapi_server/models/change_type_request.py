# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ChangeTypeRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, load_balancer_type: str=None):
        """ChangeTypeRequest - a model defined in OpenAPI

        :param load_balancer_type: The load_balancer_type of this ChangeTypeRequest.
        """
        self.openapi_types = {
            'load_balancer_type': str
        }

        self.attribute_map = {
            'load_balancer_type': 'load_balancer_type'
        }

        self._load_balancer_type = load_balancer_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ChangeTypeRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ChangeTypeRequest of this ChangeTypeRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def load_balancer_type(self):
        """Gets the load_balancer_type of this ChangeTypeRequest.

        ID or name of Load Balancer type the Load Balancer should migrate to

        :return: The load_balancer_type of this ChangeTypeRequest.
        :rtype: str
        """
        return self._load_balancer_type

    @load_balancer_type.setter
    def load_balancer_type(self, load_balancer_type):
        """Sets the load_balancer_type of this ChangeTypeRequest.

        ID or name of Load Balancer type the Load Balancer should migrate to

        :param load_balancer_type: The load_balancer_type of this ChangeTypeRequest.
        :type load_balancer_type: str
        """
        if load_balancer_type is None:
            raise ValueError("Invalid value for `load_balancer_type`, must not be `None`")

        self._load_balancer_type = load_balancer_type
