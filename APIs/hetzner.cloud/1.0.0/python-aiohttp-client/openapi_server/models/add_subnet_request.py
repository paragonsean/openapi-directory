# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AddSubnetRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ip_range: str=None, network_zone: str=None, type: str=None, vswitch_id: int=None):
        """AddSubnetRequest - a model defined in OpenAPI

        :param ip_range: The ip_range of this AddSubnetRequest.
        :param network_zone: The network_zone of this AddSubnetRequest.
        :param type: The type of this AddSubnetRequest.
        :param vswitch_id: The vswitch_id of this AddSubnetRequest.
        """
        self.openapi_types = {
            'ip_range': str,
            'network_zone': str,
            'type': str,
            'vswitch_id': int
        }

        self.attribute_map = {
            'ip_range': 'ip_range',
            'network_zone': 'network_zone',
            'type': 'type',
            'vswitch_id': 'vswitch_id'
        }

        self._ip_range = ip_range
        self._network_zone = network_zone
        self._type = type
        self._vswitch_id = vswitch_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AddSubnetRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AddSubnetRequest of this AddSubnetRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ip_range(self):
        """Gets the ip_range of this AddSubnetRequest.

        Range to allocate IPs from. Must be a Subnet of the ip_range of the parent network object and must not overlap with any other subnets or with any destinations in routes. If the Subnet is of type vSwitch, it also can not overlap with any gateway in routes. Minimum Network size is /30. We suggest that you pick a bigger Network with a /24 netmask.

        :return: The ip_range of this AddSubnetRequest.
        :rtype: str
        """
        return self._ip_range

    @ip_range.setter
    def ip_range(self, ip_range):
        """Sets the ip_range of this AddSubnetRequest.

        Range to allocate IPs from. Must be a Subnet of the ip_range of the parent network object and must not overlap with any other subnets or with any destinations in routes. If the Subnet is of type vSwitch, it also can not overlap with any gateway in routes. Minimum Network size is /30. We suggest that you pick a bigger Network with a /24 netmask.

        :param ip_range: The ip_range of this AddSubnetRequest.
        :type ip_range: str
        """

        self._ip_range = ip_range

    @property
    def network_zone(self):
        """Gets the network_zone of this AddSubnetRequest.

        Name of Network zone. The Location object contains the `network_zone` property each Location belongs to.

        :return: The network_zone of this AddSubnetRequest.
        :rtype: str
        """
        return self._network_zone

    @network_zone.setter
    def network_zone(self, network_zone):
        """Sets the network_zone of this AddSubnetRequest.

        Name of Network zone. The Location object contains the `network_zone` property each Location belongs to.

        :param network_zone: The network_zone of this AddSubnetRequest.
        :type network_zone: str
        """
        if network_zone is None:
            raise ValueError("Invalid value for `network_zone`, must not be `None`")

        self._network_zone = network_zone

    @property
    def type(self):
        """Gets the type of this AddSubnetRequest.

        Type of Subnetwork

        :return: The type of this AddSubnetRequest.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this AddSubnetRequest.

        Type of Subnetwork

        :param type: The type of this AddSubnetRequest.
        :type type: str
        """
        allowed_values = ["cloud", "server", "vswitch"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def vswitch_id(self):
        """Gets the vswitch_id of this AddSubnetRequest.

        ID of the robot vSwitch. Must be supplied if the subnet is of type vswitch.

        :return: The vswitch_id of this AddSubnetRequest.
        :rtype: int
        """
        return self._vswitch_id

    @vswitch_id.setter
    def vswitch_id(self, vswitch_id):
        """Sets the vswitch_id of this AddSubnetRequest.

        ID of the robot vSwitch. Must be supplied if the subnet is of type vswitch.

        :param vswitch_id: The vswitch_id of this AddSubnetRequest.
        :type vswitch_id: int
        """

        self._vswitch_id = vswitch_id
