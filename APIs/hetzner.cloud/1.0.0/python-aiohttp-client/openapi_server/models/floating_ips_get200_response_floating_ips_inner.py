# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.floating_ips_get200_response_floating_ips_inner_dns_ptr_inner import FloatingIpsGet200ResponseFloatingIpsInnerDnsPtrInner
from openapi_server.models.floating_ips_get200_response_floating_ips_inner_home_location import FloatingIpsGet200ResponseFloatingIpsInnerHomeLocation
from openapi_server.models.floating_ips_get200_response_floating_ips_inner_protection import FloatingIpsGet200ResponseFloatingIpsInnerProtection
from openapi_server import util


class FloatingIpsGet200ResponseFloatingIpsInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, blocked: bool=None, created: str=None, description: str=None, dns_ptr: List[FloatingIpsGet200ResponseFloatingIpsInnerDnsPtrInner]=None, home_location: FloatingIpsGet200ResponseFloatingIpsInnerHomeLocation=None, id: int=None, ip: str=None, labels: Dict[str, str]=None, name: str=None, protection: FloatingIpsGet200ResponseFloatingIpsInnerProtection=None, server: int=None, type: str=None):
        """FloatingIpsGet200ResponseFloatingIpsInner - a model defined in OpenAPI

        :param blocked: The blocked of this FloatingIpsGet200ResponseFloatingIpsInner.
        :param created: The created of this FloatingIpsGet200ResponseFloatingIpsInner.
        :param description: The description of this FloatingIpsGet200ResponseFloatingIpsInner.
        :param dns_ptr: The dns_ptr of this FloatingIpsGet200ResponseFloatingIpsInner.
        :param home_location: The home_location of this FloatingIpsGet200ResponseFloatingIpsInner.
        :param id: The id of this FloatingIpsGet200ResponseFloatingIpsInner.
        :param ip: The ip of this FloatingIpsGet200ResponseFloatingIpsInner.
        :param labels: The labels of this FloatingIpsGet200ResponseFloatingIpsInner.
        :param name: The name of this FloatingIpsGet200ResponseFloatingIpsInner.
        :param protection: The protection of this FloatingIpsGet200ResponseFloatingIpsInner.
        :param server: The server of this FloatingIpsGet200ResponseFloatingIpsInner.
        :param type: The type of this FloatingIpsGet200ResponseFloatingIpsInner.
        """
        self.openapi_types = {
            'blocked': bool,
            'created': str,
            'description': str,
            'dns_ptr': List[FloatingIpsGet200ResponseFloatingIpsInnerDnsPtrInner],
            'home_location': FloatingIpsGet200ResponseFloatingIpsInnerHomeLocation,
            'id': int,
            'ip': str,
            'labels': Dict[str, str],
            'name': str,
            'protection': FloatingIpsGet200ResponseFloatingIpsInnerProtection,
            'server': int,
            'type': str
        }

        self.attribute_map = {
            'blocked': 'blocked',
            'created': 'created',
            'description': 'description',
            'dns_ptr': 'dns_ptr',
            'home_location': 'home_location',
            'id': 'id',
            'ip': 'ip',
            'labels': 'labels',
            'name': 'name',
            'protection': 'protection',
            'server': 'server',
            'type': 'type'
        }

        self._blocked = blocked
        self._created = created
        self._description = description
        self._dns_ptr = dns_ptr
        self._home_location = home_location
        self._id = id
        self._ip = ip
        self._labels = labels
        self._name = name
        self._protection = protection
        self._server = server
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FloatingIpsGet200ResponseFloatingIpsInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The _floating_ips_get_200_response_floating_ips_inner of this FloatingIpsGet200ResponseFloatingIpsInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def blocked(self):
        """Gets the blocked of this FloatingIpsGet200ResponseFloatingIpsInner.

        Whether the IP is blocked

        :return: The blocked of this FloatingIpsGet200ResponseFloatingIpsInner.
        :rtype: bool
        """
        return self._blocked

    @blocked.setter
    def blocked(self, blocked):
        """Sets the blocked of this FloatingIpsGet200ResponseFloatingIpsInner.

        Whether the IP is blocked

        :param blocked: The blocked of this FloatingIpsGet200ResponseFloatingIpsInner.
        :type blocked: bool
        """
        if blocked is None:
            raise ValueError("Invalid value for `blocked`, must not be `None`")

        self._blocked = blocked

    @property
    def created(self):
        """Gets the created of this FloatingIpsGet200ResponseFloatingIpsInner.

        Point in time when the Resource was created (in ISO-8601 format)

        :return: The created of this FloatingIpsGet200ResponseFloatingIpsInner.
        :rtype: str
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this FloatingIpsGet200ResponseFloatingIpsInner.

        Point in time when the Resource was created (in ISO-8601 format)

        :param created: The created of this FloatingIpsGet200ResponseFloatingIpsInner.
        :type created: str
        """
        if created is None:
            raise ValueError("Invalid value for `created`, must not be `None`")

        self._created = created

    @property
    def description(self):
        """Gets the description of this FloatingIpsGet200ResponseFloatingIpsInner.

        Description of the Resource

        :return: The description of this FloatingIpsGet200ResponseFloatingIpsInner.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this FloatingIpsGet200ResponseFloatingIpsInner.

        Description of the Resource

        :param description: The description of this FloatingIpsGet200ResponseFloatingIpsInner.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def dns_ptr(self):
        """Gets the dns_ptr of this FloatingIpsGet200ResponseFloatingIpsInner.

        Array of reverse DNS entries

        :return: The dns_ptr of this FloatingIpsGet200ResponseFloatingIpsInner.
        :rtype: List[FloatingIpsGet200ResponseFloatingIpsInnerDnsPtrInner]
        """
        return self._dns_ptr

    @dns_ptr.setter
    def dns_ptr(self, dns_ptr):
        """Sets the dns_ptr of this FloatingIpsGet200ResponseFloatingIpsInner.

        Array of reverse DNS entries

        :param dns_ptr: The dns_ptr of this FloatingIpsGet200ResponseFloatingIpsInner.
        :type dns_ptr: List[FloatingIpsGet200ResponseFloatingIpsInnerDnsPtrInner]
        """
        if dns_ptr is None:
            raise ValueError("Invalid value for `dns_ptr`, must not be `None`")

        self._dns_ptr = dns_ptr

    @property
    def home_location(self):
        """Gets the home_location of this FloatingIpsGet200ResponseFloatingIpsInner.


        :return: The home_location of this FloatingIpsGet200ResponseFloatingIpsInner.
        :rtype: FloatingIpsGet200ResponseFloatingIpsInnerHomeLocation
        """
        return self._home_location

    @home_location.setter
    def home_location(self, home_location):
        """Sets the home_location of this FloatingIpsGet200ResponseFloatingIpsInner.


        :param home_location: The home_location of this FloatingIpsGet200ResponseFloatingIpsInner.
        :type home_location: FloatingIpsGet200ResponseFloatingIpsInnerHomeLocation
        """
        if home_location is None:
            raise ValueError("Invalid value for `home_location`, must not be `None`")

        self._home_location = home_location

    @property
    def id(self):
        """Gets the id of this FloatingIpsGet200ResponseFloatingIpsInner.

        ID of the Resource

        :return: The id of this FloatingIpsGet200ResponseFloatingIpsInner.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this FloatingIpsGet200ResponseFloatingIpsInner.

        ID of the Resource

        :param id: The id of this FloatingIpsGet200ResponseFloatingIpsInner.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def ip(self):
        """Gets the ip of this FloatingIpsGet200ResponseFloatingIpsInner.

        IP address

        :return: The ip of this FloatingIpsGet200ResponseFloatingIpsInner.
        :rtype: str
        """
        return self._ip

    @ip.setter
    def ip(self, ip):
        """Sets the ip of this FloatingIpsGet200ResponseFloatingIpsInner.

        IP address

        :param ip: The ip of this FloatingIpsGet200ResponseFloatingIpsInner.
        :type ip: str
        """
        if ip is None:
            raise ValueError("Invalid value for `ip`, must not be `None`")

        self._ip = ip

    @property
    def labels(self):
        """Gets the labels of this FloatingIpsGet200ResponseFloatingIpsInner.

        User-defined labels (key-value pairs)

        :return: The labels of this FloatingIpsGet200ResponseFloatingIpsInner.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this FloatingIpsGet200ResponseFloatingIpsInner.

        User-defined labels (key-value pairs)

        :param labels: The labels of this FloatingIpsGet200ResponseFloatingIpsInner.
        :type labels: Dict[str, str]
        """
        if labels is None:
            raise ValueError("Invalid value for `labels`, must not be `None`")

        self._labels = labels

    @property
    def name(self):
        """Gets the name of this FloatingIpsGet200ResponseFloatingIpsInner.

        Name of the Resource. Must be unique per Project.

        :return: The name of this FloatingIpsGet200ResponseFloatingIpsInner.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this FloatingIpsGet200ResponseFloatingIpsInner.

        Name of the Resource. Must be unique per Project.

        :param name: The name of this FloatingIpsGet200ResponseFloatingIpsInner.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def protection(self):
        """Gets the protection of this FloatingIpsGet200ResponseFloatingIpsInner.


        :return: The protection of this FloatingIpsGet200ResponseFloatingIpsInner.
        :rtype: FloatingIpsGet200ResponseFloatingIpsInnerProtection
        """
        return self._protection

    @protection.setter
    def protection(self, protection):
        """Sets the protection of this FloatingIpsGet200ResponseFloatingIpsInner.


        :param protection: The protection of this FloatingIpsGet200ResponseFloatingIpsInner.
        :type protection: FloatingIpsGet200ResponseFloatingIpsInnerProtection
        """
        if protection is None:
            raise ValueError("Invalid value for `protection`, must not be `None`")

        self._protection = protection

    @property
    def server(self):
        """Gets the server of this FloatingIpsGet200ResponseFloatingIpsInner.

        ID of the Server the Floating IP is assigned to, null if it is not assigned at all

        :return: The server of this FloatingIpsGet200ResponseFloatingIpsInner.
        :rtype: int
        """
        return self._server

    @server.setter
    def server(self, server):
        """Sets the server of this FloatingIpsGet200ResponseFloatingIpsInner.

        ID of the Server the Floating IP is assigned to, null if it is not assigned at all

        :param server: The server of this FloatingIpsGet200ResponseFloatingIpsInner.
        :type server: int
        """
        if server is None:
            raise ValueError("Invalid value for `server`, must not be `None`")

        self._server = server

    @property
    def type(self):
        """Gets the type of this FloatingIpsGet200ResponseFloatingIpsInner.

        Type of the Floating IP

        :return: The type of this FloatingIpsGet200ResponseFloatingIpsInner.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this FloatingIpsGet200ResponseFloatingIpsInner.

        Type of the Floating IP

        :param type: The type of this FloatingIpsGet200ResponseFloatingIpsInner.
        :type type: str
        """
        allowed_values = ["ipv4", "ipv6"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
