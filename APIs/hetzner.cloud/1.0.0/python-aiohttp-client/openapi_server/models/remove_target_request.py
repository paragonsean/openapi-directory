# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.add_target_request_label_selector import AddTargetRequestLabelSelector
from openapi_server.models.add_target_request_server import AddTargetRequestServer
from openapi_server.models.load_balancer_target_ip import LoadBalancerTargetIP
from openapi_server import util


class RemoveTargetRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ip: LoadBalancerTargetIP=None, label_selector: AddTargetRequestLabelSelector=None, server: AddTargetRequestServer=None, type: str=None):
        """RemoveTargetRequest - a model defined in OpenAPI

        :param ip: The ip of this RemoveTargetRequest.
        :param label_selector: The label_selector of this RemoveTargetRequest.
        :param server: The server of this RemoveTargetRequest.
        :param type: The type of this RemoveTargetRequest.
        """
        self.openapi_types = {
            'ip': LoadBalancerTargetIP,
            'label_selector': AddTargetRequestLabelSelector,
            'server': AddTargetRequestServer,
            'type': str
        }

        self.attribute_map = {
            'ip': 'ip',
            'label_selector': 'label_selector',
            'server': 'server',
            'type': 'type'
        }

        self._ip = ip
        self._label_selector = label_selector
        self._server = server
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RemoveTargetRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RemoveTargetRequest of this RemoveTargetRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ip(self):
        """Gets the ip of this RemoveTargetRequest.


        :return: The ip of this RemoveTargetRequest.
        :rtype: LoadBalancerTargetIP
        """
        return self._ip

    @ip.setter
    def ip(self, ip):
        """Sets the ip of this RemoveTargetRequest.


        :param ip: The ip of this RemoveTargetRequest.
        :type ip: LoadBalancerTargetIP
        """

        self._ip = ip

    @property
    def label_selector(self):
        """Gets the label_selector of this RemoveTargetRequest.


        :return: The label_selector of this RemoveTargetRequest.
        :rtype: AddTargetRequestLabelSelector
        """
        return self._label_selector

    @label_selector.setter
    def label_selector(self, label_selector):
        """Sets the label_selector of this RemoveTargetRequest.


        :param label_selector: The label_selector of this RemoveTargetRequest.
        :type label_selector: AddTargetRequestLabelSelector
        """

        self._label_selector = label_selector

    @property
    def server(self):
        """Gets the server of this RemoveTargetRequest.


        :return: The server of this RemoveTargetRequest.
        :rtype: AddTargetRequestServer
        """
        return self._server

    @server.setter
    def server(self, server):
        """Sets the server of this RemoveTargetRequest.


        :param server: The server of this RemoveTargetRequest.
        :type server: AddTargetRequestServer
        """

        self._server = server

    @property
    def type(self):
        """Gets the type of this RemoveTargetRequest.

        Type of the resource

        :return: The type of this RemoveTargetRequest.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this RemoveTargetRequest.

        Type of the resource

        :param type: The type of this RemoveTargetRequest.
        :type type: str
        """
        allowed_values = ["server", "label_selector", "ip"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
