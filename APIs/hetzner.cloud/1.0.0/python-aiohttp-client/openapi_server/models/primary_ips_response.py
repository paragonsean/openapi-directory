# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.actions_response_meta import ActionsResponseMeta
from openapi_server.models.primary_ip import PrimaryIP
from openapi_server import util


class PrimaryIPsResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, meta: ActionsResponseMeta=None, primary_ips: List[PrimaryIP]=None):
        """PrimaryIPsResponse - a model defined in OpenAPI

        :param meta: The meta of this PrimaryIPsResponse.
        :param primary_ips: The primary_ips of this PrimaryIPsResponse.
        """
        self.openapi_types = {
            'meta': ActionsResponseMeta,
            'primary_ips': List[PrimaryIP]
        }

        self.attribute_map = {
            'meta': 'meta',
            'primary_ips': 'primary_ips'
        }

        self._meta = meta
        self._primary_ips = primary_ips

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PrimaryIPsResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PrimaryIPsResponse of this PrimaryIPsResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def meta(self):
        """Gets the meta of this PrimaryIPsResponse.


        :return: The meta of this PrimaryIPsResponse.
        :rtype: ActionsResponseMeta
        """
        return self._meta

    @meta.setter
    def meta(self, meta):
        """Sets the meta of this PrimaryIPsResponse.


        :param meta: The meta of this PrimaryIPsResponse.
        :type meta: ActionsResponseMeta
        """

        self._meta = meta

    @property
    def primary_ips(self):
        """Gets the primary_ips of this PrimaryIPsResponse.


        :return: The primary_ips of this PrimaryIPsResponse.
        :rtype: List[PrimaryIP]
        """
        return self._primary_ips

    @primary_ips.setter
    def primary_ips(self, primary_ips):
        """Sets the primary_ips of this PrimaryIPsResponse.


        :param primary_ips: The primary_ips of this PrimaryIPsResponse.
        :type primary_ips: List[PrimaryIP]
        """
        if primary_ips is None:
            raise ValueError("Invalid value for `primary_ips`, must not be `None`")

        self._primary_ips = primary_ips
