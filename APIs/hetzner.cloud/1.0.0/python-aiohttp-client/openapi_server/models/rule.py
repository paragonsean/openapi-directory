# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Rule(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, destination_ips: List[str]=None, direction: str=None, port: str=None, protocol: str=None, source_ips: List[str]=None):
        """Rule - a model defined in OpenAPI

        :param description: The description of this Rule.
        :param destination_ips: The destination_ips of this Rule.
        :param direction: The direction of this Rule.
        :param port: The port of this Rule.
        :param protocol: The protocol of this Rule.
        :param source_ips: The source_ips of this Rule.
        """
        self.openapi_types = {
            'description': str,
            'destination_ips': List[str],
            'direction': str,
            'port': str,
            'protocol': str,
            'source_ips': List[str]
        }

        self.attribute_map = {
            'description': 'description',
            'destination_ips': 'destination_ips',
            'direction': 'direction',
            'port': 'port',
            'protocol': 'protocol',
            'source_ips': 'source_ips'
        }

        self._description = description
        self._destination_ips = destination_ips
        self._direction = direction
        self._port = port
        self._protocol = protocol
        self._source_ips = source_ips

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Rule':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Rule of this Rule.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this Rule.

        Description of the Rule

        :return: The description of this Rule.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Rule.

        Description of the Rule

        :param description: The description of this Rule.
        :type description: str
        """
        if description is not None and len(description) > 255:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `255`")

        self._description = description

    @property
    def destination_ips(self):
        """Gets the destination_ips of this Rule.

        List of permitted IPv4/IPv6 addresses in CIDR notation. Use `0.0.0.0/0` to allow all IPv4 addresses and `::/0` to allow all IPv6 addresses. You can specify 100 CIDRs at most.

        :return: The destination_ips of this Rule.
        :rtype: List[str]
        """
        return self._destination_ips

    @destination_ips.setter
    def destination_ips(self, destination_ips):
        """Sets the destination_ips of this Rule.

        List of permitted IPv4/IPv6 addresses in CIDR notation. Use `0.0.0.0/0` to allow all IPv4 addresses and `::/0` to allow all IPv6 addresses. You can specify 100 CIDRs at most.

        :param destination_ips: The destination_ips of this Rule.
        :type destination_ips: List[str]
        """

        self._destination_ips = destination_ips

    @property
    def direction(self):
        """Gets the direction of this Rule.

        Select traffic direction on which rule should be applied. Use `source_ips` for direction `in` and `destination_ips` for direction `out`.

        :return: The direction of this Rule.
        :rtype: str
        """
        return self._direction

    @direction.setter
    def direction(self, direction):
        """Sets the direction of this Rule.

        Select traffic direction on which rule should be applied. Use `source_ips` for direction `in` and `destination_ips` for direction `out`.

        :param direction: The direction of this Rule.
        :type direction: str
        """
        allowed_values = ["in", "out"]  # noqa: E501
        if direction not in allowed_values:
            raise ValueError(
                "Invalid value for `direction` ({0}), must be one of {1}"
                .format(direction, allowed_values)
            )

        self._direction = direction

    @property
    def port(self):
        """Gets the port of this Rule.

        Port or port range to which traffic will be allowed, only applicable for protocols TCP and UDP. A port range can be specified by separating two ports with a dash, e.g `1024-5000`.

        :return: The port of this Rule.
        :rtype: str
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this Rule.

        Port or port range to which traffic will be allowed, only applicable for protocols TCP and UDP. A port range can be specified by separating two ports with a dash, e.g `1024-5000`.

        :param port: The port of this Rule.
        :type port: str
        """

        self._port = port

    @property
    def protocol(self):
        """Gets the protocol of this Rule.

        Type of traffic to allow

        :return: The protocol of this Rule.
        :rtype: str
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this Rule.

        Type of traffic to allow

        :param protocol: The protocol of this Rule.
        :type protocol: str
        """
        allowed_values = ["tcp", "udp", "icmp", "esp", "gre"]  # noqa: E501
        if protocol not in allowed_values:
            raise ValueError(
                "Invalid value for `protocol` ({0}), must be one of {1}"
                .format(protocol, allowed_values)
            )

        self._protocol = protocol

    @property
    def source_ips(self):
        """Gets the source_ips of this Rule.

        List of permitted IPv4/IPv6 addresses in CIDR notation. Use `0.0.0.0/0` to allow all IPv4 addresses and `::/0` to allow all IPv6 addresses. You can specify 100 CIDRs at most.

        :return: The source_ips of this Rule.
        :rtype: List[str]
        """
        return self._source_ips

    @source_ips.setter
    def source_ips(self, source_ips):
        """Sets the source_ips of this Rule.

        List of permitted IPv4/IPv6 addresses in CIDR notation. Use `0.0.0.0/0` to allow all IPv4 addresses and `::/0` to allow all IPv6 addresses. You can specify 100 CIDRs at most.

        :param source_ips: The source_ips of this Rule.
        :type source_ips: List[str]
        """

        self._source_ips = source_ips
