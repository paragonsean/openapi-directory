# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DeleteSubnetRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ip_range: str=None):
        """DeleteSubnetRequest - a model defined in OpenAPI

        :param ip_range: The ip_range of this DeleteSubnetRequest.
        """
        self.openapi_types = {
            'ip_range': str
        }

        self.attribute_map = {
            'ip_range': 'ip_range'
        }

        self._ip_range = ip_range

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeleteSubnetRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeleteSubnetRequest of this DeleteSubnetRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ip_range(self):
        """Gets the ip_range of this DeleteSubnetRequest.

        IP range of subnet to delete

        :return: The ip_range of this DeleteSubnetRequest.
        :rtype: str
        """
        return self._ip_range

    @ip_range.setter
    def ip_range(self, ip_range):
        """Sets the ip_range of this DeleteSubnetRequest.

        IP range of subnet to delete

        :param ip_range: The ip_range of this DeleteSubnetRequest.
        :type ip_range: str
        """
        if ip_range is None:
            raise ValueError("Invalid value for `ip_range`, must not be `None`")

        self._ip_range = ip_range
