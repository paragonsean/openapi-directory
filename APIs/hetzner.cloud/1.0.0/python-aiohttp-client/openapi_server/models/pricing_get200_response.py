# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.pricing_get200_response_pricing import PricingGet200ResponsePricing
from openapi_server import util


class PricingGet200Response(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, pricing: PricingGet200ResponsePricing=None):
        """PricingGet200Response - a model defined in OpenAPI

        :param pricing: The pricing of this PricingGet200Response.
        """
        self.openapi_types = {
            'pricing': PricingGet200ResponsePricing
        }

        self.attribute_map = {
            'pricing': 'pricing'
        }

        self._pricing = pricing

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PricingGet200Response':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The _pricing_get_200_response of this PricingGet200Response.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def pricing(self):
        """Gets the pricing of this PricingGet200Response.


        :return: The pricing of this PricingGet200Response.
        :rtype: PricingGet200ResponsePricing
        """
        return self._pricing

    @pricing.setter
    def pricing(self, pricing):
        """Sets the pricing of this PricingGet200Response.


        :param pricing: The pricing of this PricingGet200Response.
        :type pricing: PricingGet200ResponsePricing
        """
        if pricing is None:
            raise ValueError("Invalid value for `pricing`, must not be `None`")

        self._pricing = pricing
