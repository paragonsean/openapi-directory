# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AssignFloatingIPRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, server: int=None):
        """AssignFloatingIPRequest - a model defined in OpenAPI

        :param server: The server of this AssignFloatingIPRequest.
        """
        self.openapi_types = {
            'server': int
        }

        self.attribute_map = {
            'server': 'server'
        }

        self._server = server

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AssignFloatingIPRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AssignFloatingIPRequest of this AssignFloatingIPRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def server(self):
        """Gets the server of this AssignFloatingIPRequest.

        ID of the Server the Floating IP shall be assigned to

        :return: The server of this AssignFloatingIPRequest.
        :rtype: int
        """
        return self._server

    @server.setter
    def server(self, server):
        """Sets the server of this AssignFloatingIPRequest.

        ID of the Server the Floating IP shall be assigned to

        :param server: The server of this AssignFloatingIPRequest.
        :type server: int
        """
        if server is None:
            raise ValueError("Invalid value for `server`, must not be `None`")

        self._server = server
