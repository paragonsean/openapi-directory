# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.pricing_get200_response_pricing_primary_ips_inner_prices_inner import PricingGet200ResponsePricingPrimaryIpsInnerPricesInner
from openapi_server import util


class PricingGet200ResponsePricingPrimaryIpsInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, prices: List[PricingGet200ResponsePricingPrimaryIpsInnerPricesInner]=None, type: str=None):
        """PricingGet200ResponsePricingPrimaryIpsInner - a model defined in OpenAPI

        :param prices: The prices of this PricingGet200ResponsePricingPrimaryIpsInner.
        :param type: The type of this PricingGet200ResponsePricingPrimaryIpsInner.
        """
        self.openapi_types = {
            'prices': List[PricingGet200ResponsePricingPrimaryIpsInnerPricesInner],
            'type': str
        }

        self.attribute_map = {
            'prices': 'prices',
            'type': 'type'
        }

        self._prices = prices
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PricingGet200ResponsePricingPrimaryIpsInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The _pricing_get_200_response_pricing_primary_ips_inner of this PricingGet200ResponsePricingPrimaryIpsInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def prices(self):
        """Gets the prices of this PricingGet200ResponsePricingPrimaryIpsInner.

        Primary IP type costs per Location

        :return: The prices of this PricingGet200ResponsePricingPrimaryIpsInner.
        :rtype: List[PricingGet200ResponsePricingPrimaryIpsInnerPricesInner]
        """
        return self._prices

    @prices.setter
    def prices(self, prices):
        """Sets the prices of this PricingGet200ResponsePricingPrimaryIpsInner.

        Primary IP type costs per Location

        :param prices: The prices of this PricingGet200ResponsePricingPrimaryIpsInner.
        :type prices: List[PricingGet200ResponsePricingPrimaryIpsInnerPricesInner]
        """
        if prices is None:
            raise ValueError("Invalid value for `prices`, must not be `None`")

        self._prices = prices

    @property
    def type(self):
        """Gets the type of this PricingGet200ResponsePricingPrimaryIpsInner.

        The type of the Primary IP

        :return: The type of this PricingGet200ResponsePricingPrimaryIpsInner.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this PricingGet200ResponsePricingPrimaryIpsInner.

        The type of the Primary IP

        :param type: The type of this PricingGet200ResponsePricingPrimaryIpsInner.
        :type type: str
        """
        allowed_values = ["ipv4", "ipv6"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
