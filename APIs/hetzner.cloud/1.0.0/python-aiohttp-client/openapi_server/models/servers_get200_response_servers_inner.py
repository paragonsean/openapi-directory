# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.placement_group_nullable import PlacementGroupNullable
from openapi_server.models.servers_get200_response_servers_inner_datacenter import ServersGet200ResponseServersInnerDatacenter
from openapi_server.models.servers_get200_response_servers_inner_image import ServersGet200ResponseServersInnerImage
from openapi_server.models.servers_get200_response_servers_inner_iso import ServersGet200ResponseServersInnerIso
from openapi_server.models.servers_get200_response_servers_inner_private_net_inner import ServersGet200ResponseServersInnerPrivateNetInner
from openapi_server.models.servers_get200_response_servers_inner_protection import ServersGet200ResponseServersInnerProtection
from openapi_server.models.servers_get200_response_servers_inner_public_net import ServersGet200ResponseServersInnerPublicNet
from openapi_server.models.servers_get200_response_servers_inner_server_type import ServersGet200ResponseServersInnerServerType
from openapi_server import util


class ServersGet200ResponseServersInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, backup_window: str=None, created: str=None, datacenter: ServersGet200ResponseServersInnerDatacenter=None, id: int=None, image: ServersGet200ResponseServersInnerImage=None, included_traffic: float=None, ingoing_traffic: float=None, iso: ServersGet200ResponseServersInnerIso=None, labels: Dict[str, str]=None, load_balancers: List[int]=None, locked: bool=None, name: str=None, outgoing_traffic: float=None, placement_group: PlacementGroupNullable=None, primary_disk_size: float=None, private_net: List[ServersGet200ResponseServersInnerPrivateNetInner]=None, protection: ServersGet200ResponseServersInnerProtection=None, public_net: ServersGet200ResponseServersInnerPublicNet=None, rescue_enabled: bool=None, server_type: ServersGet200ResponseServersInnerServerType=None, status: str=None, volumes: List[int]=None):
        """ServersGet200ResponseServersInner - a model defined in OpenAPI

        :param backup_window: The backup_window of this ServersGet200ResponseServersInner.
        :param created: The created of this ServersGet200ResponseServersInner.
        :param datacenter: The datacenter of this ServersGet200ResponseServersInner.
        :param id: The id of this ServersGet200ResponseServersInner.
        :param image: The image of this ServersGet200ResponseServersInner.
        :param included_traffic: The included_traffic of this ServersGet200ResponseServersInner.
        :param ingoing_traffic: The ingoing_traffic of this ServersGet200ResponseServersInner.
        :param iso: The iso of this ServersGet200ResponseServersInner.
        :param labels: The labels of this ServersGet200ResponseServersInner.
        :param load_balancers: The load_balancers of this ServersGet200ResponseServersInner.
        :param locked: The locked of this ServersGet200ResponseServersInner.
        :param name: The name of this ServersGet200ResponseServersInner.
        :param outgoing_traffic: The outgoing_traffic of this ServersGet200ResponseServersInner.
        :param placement_group: The placement_group of this ServersGet200ResponseServersInner.
        :param primary_disk_size: The primary_disk_size of this ServersGet200ResponseServersInner.
        :param private_net: The private_net of this ServersGet200ResponseServersInner.
        :param protection: The protection of this ServersGet200ResponseServersInner.
        :param public_net: The public_net of this ServersGet200ResponseServersInner.
        :param rescue_enabled: The rescue_enabled of this ServersGet200ResponseServersInner.
        :param server_type: The server_type of this ServersGet200ResponseServersInner.
        :param status: The status of this ServersGet200ResponseServersInner.
        :param volumes: The volumes of this ServersGet200ResponseServersInner.
        """
        self.openapi_types = {
            'backup_window': str,
            'created': str,
            'datacenter': ServersGet200ResponseServersInnerDatacenter,
            'id': int,
            'image': ServersGet200ResponseServersInnerImage,
            'included_traffic': float,
            'ingoing_traffic': float,
            'iso': ServersGet200ResponseServersInnerIso,
            'labels': Dict[str, str],
            'load_balancers': List[int],
            'locked': bool,
            'name': str,
            'outgoing_traffic': float,
            'placement_group': PlacementGroupNullable,
            'primary_disk_size': float,
            'private_net': List[ServersGet200ResponseServersInnerPrivateNetInner],
            'protection': ServersGet200ResponseServersInnerProtection,
            'public_net': ServersGet200ResponseServersInnerPublicNet,
            'rescue_enabled': bool,
            'server_type': ServersGet200ResponseServersInnerServerType,
            'status': str,
            'volumes': List[int]
        }

        self.attribute_map = {
            'backup_window': 'backup_window',
            'created': 'created',
            'datacenter': 'datacenter',
            'id': 'id',
            'image': 'image',
            'included_traffic': 'included_traffic',
            'ingoing_traffic': 'ingoing_traffic',
            'iso': 'iso',
            'labels': 'labels',
            'load_balancers': 'load_balancers',
            'locked': 'locked',
            'name': 'name',
            'outgoing_traffic': 'outgoing_traffic',
            'placement_group': 'placement_group',
            'primary_disk_size': 'primary_disk_size',
            'private_net': 'private_net',
            'protection': 'protection',
            'public_net': 'public_net',
            'rescue_enabled': 'rescue_enabled',
            'server_type': 'server_type',
            'status': 'status',
            'volumes': 'volumes'
        }

        self._backup_window = backup_window
        self._created = created
        self._datacenter = datacenter
        self._id = id
        self._image = image
        self._included_traffic = included_traffic
        self._ingoing_traffic = ingoing_traffic
        self._iso = iso
        self._labels = labels
        self._load_balancers = load_balancers
        self._locked = locked
        self._name = name
        self._outgoing_traffic = outgoing_traffic
        self._placement_group = placement_group
        self._primary_disk_size = primary_disk_size
        self._private_net = private_net
        self._protection = protection
        self._public_net = public_net
        self._rescue_enabled = rescue_enabled
        self._server_type = server_type
        self._status = status
        self._volumes = volumes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ServersGet200ResponseServersInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The _servers_get_200_response_servers_inner of this ServersGet200ResponseServersInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def backup_window(self):
        """Gets the backup_window of this ServersGet200ResponseServersInner.

        Time window (UTC) in which the backup will run, or null if the backups are not enabled

        :return: The backup_window of this ServersGet200ResponseServersInner.
        :rtype: str
        """
        return self._backup_window

    @backup_window.setter
    def backup_window(self, backup_window):
        """Sets the backup_window of this ServersGet200ResponseServersInner.

        Time window (UTC) in which the backup will run, or null if the backups are not enabled

        :param backup_window: The backup_window of this ServersGet200ResponseServersInner.
        :type backup_window: str
        """
        if backup_window is None:
            raise ValueError("Invalid value for `backup_window`, must not be `None`")

        self._backup_window = backup_window

    @property
    def created(self):
        """Gets the created of this ServersGet200ResponseServersInner.

        Point in time when the Resource was created (in ISO-8601 format)

        :return: The created of this ServersGet200ResponseServersInner.
        :rtype: str
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this ServersGet200ResponseServersInner.

        Point in time when the Resource was created (in ISO-8601 format)

        :param created: The created of this ServersGet200ResponseServersInner.
        :type created: str
        """
        if created is None:
            raise ValueError("Invalid value for `created`, must not be `None`")

        self._created = created

    @property
    def datacenter(self):
        """Gets the datacenter of this ServersGet200ResponseServersInner.


        :return: The datacenter of this ServersGet200ResponseServersInner.
        :rtype: ServersGet200ResponseServersInnerDatacenter
        """
        return self._datacenter

    @datacenter.setter
    def datacenter(self, datacenter):
        """Sets the datacenter of this ServersGet200ResponseServersInner.


        :param datacenter: The datacenter of this ServersGet200ResponseServersInner.
        :type datacenter: ServersGet200ResponseServersInnerDatacenter
        """
        if datacenter is None:
            raise ValueError("Invalid value for `datacenter`, must not be `None`")

        self._datacenter = datacenter

    @property
    def id(self):
        """Gets the id of this ServersGet200ResponseServersInner.

        ID of the Resource

        :return: The id of this ServersGet200ResponseServersInner.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ServersGet200ResponseServersInner.

        ID of the Resource

        :param id: The id of this ServersGet200ResponseServersInner.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def image(self):
        """Gets the image of this ServersGet200ResponseServersInner.


        :return: The image of this ServersGet200ResponseServersInner.
        :rtype: ServersGet200ResponseServersInnerImage
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this ServersGet200ResponseServersInner.


        :param image: The image of this ServersGet200ResponseServersInner.
        :type image: ServersGet200ResponseServersInnerImage
        """
        if image is None:
            raise ValueError("Invalid value for `image`, must not be `None`")

        self._image = image

    @property
    def included_traffic(self):
        """Gets the included_traffic of this ServersGet200ResponseServersInner.

        Free Traffic for the current billing period in bytes

        :return: The included_traffic of this ServersGet200ResponseServersInner.
        :rtype: float
        """
        return self._included_traffic

    @included_traffic.setter
    def included_traffic(self, included_traffic):
        """Sets the included_traffic of this ServersGet200ResponseServersInner.

        Free Traffic for the current billing period in bytes

        :param included_traffic: The included_traffic of this ServersGet200ResponseServersInner.
        :type included_traffic: float
        """
        if included_traffic is None:
            raise ValueError("Invalid value for `included_traffic`, must not be `None`")

        self._included_traffic = included_traffic

    @property
    def ingoing_traffic(self):
        """Gets the ingoing_traffic of this ServersGet200ResponseServersInner.

        Inbound Traffic for the current billing period in bytes

        :return: The ingoing_traffic of this ServersGet200ResponseServersInner.
        :rtype: float
        """
        return self._ingoing_traffic

    @ingoing_traffic.setter
    def ingoing_traffic(self, ingoing_traffic):
        """Sets the ingoing_traffic of this ServersGet200ResponseServersInner.

        Inbound Traffic for the current billing period in bytes

        :param ingoing_traffic: The ingoing_traffic of this ServersGet200ResponseServersInner.
        :type ingoing_traffic: float
        """
        if ingoing_traffic is None:
            raise ValueError("Invalid value for `ingoing_traffic`, must not be `None`")

        self._ingoing_traffic = ingoing_traffic

    @property
    def iso(self):
        """Gets the iso of this ServersGet200ResponseServersInner.


        :return: The iso of this ServersGet200ResponseServersInner.
        :rtype: ServersGet200ResponseServersInnerIso
        """
        return self._iso

    @iso.setter
    def iso(self, iso):
        """Sets the iso of this ServersGet200ResponseServersInner.


        :param iso: The iso of this ServersGet200ResponseServersInner.
        :type iso: ServersGet200ResponseServersInnerIso
        """
        if iso is None:
            raise ValueError("Invalid value for `iso`, must not be `None`")

        self._iso = iso

    @property
    def labels(self):
        """Gets the labels of this ServersGet200ResponseServersInner.

        User-defined labels (key-value pairs)

        :return: The labels of this ServersGet200ResponseServersInner.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this ServersGet200ResponseServersInner.

        User-defined labels (key-value pairs)

        :param labels: The labels of this ServersGet200ResponseServersInner.
        :type labels: Dict[str, str]
        """
        if labels is None:
            raise ValueError("Invalid value for `labels`, must not be `None`")

        self._labels = labels

    @property
    def load_balancers(self):
        """Gets the load_balancers of this ServersGet200ResponseServersInner.


        :return: The load_balancers of this ServersGet200ResponseServersInner.
        :rtype: List[int]
        """
        return self._load_balancers

    @load_balancers.setter
    def load_balancers(self, load_balancers):
        """Sets the load_balancers of this ServersGet200ResponseServersInner.


        :param load_balancers: The load_balancers of this ServersGet200ResponseServersInner.
        :type load_balancers: List[int]
        """

        self._load_balancers = load_balancers

    @property
    def locked(self):
        """Gets the locked of this ServersGet200ResponseServersInner.

        True if Server has been locked and is not available to user

        :return: The locked of this ServersGet200ResponseServersInner.
        :rtype: bool
        """
        return self._locked

    @locked.setter
    def locked(self, locked):
        """Sets the locked of this ServersGet200ResponseServersInner.

        True if Server has been locked and is not available to user

        :param locked: The locked of this ServersGet200ResponseServersInner.
        :type locked: bool
        """
        if locked is None:
            raise ValueError("Invalid value for `locked`, must not be `None`")

        self._locked = locked

    @property
    def name(self):
        """Gets the name of this ServersGet200ResponseServersInner.

        Name of the Server (must be unique per Project and a valid hostname as per RFC 1123)

        :return: The name of this ServersGet200ResponseServersInner.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ServersGet200ResponseServersInner.

        Name of the Server (must be unique per Project and a valid hostname as per RFC 1123)

        :param name: The name of this ServersGet200ResponseServersInner.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def outgoing_traffic(self):
        """Gets the outgoing_traffic of this ServersGet200ResponseServersInner.

        Outbound Traffic for the current billing period in bytes

        :return: The outgoing_traffic of this ServersGet200ResponseServersInner.
        :rtype: float
        """
        return self._outgoing_traffic

    @outgoing_traffic.setter
    def outgoing_traffic(self, outgoing_traffic):
        """Sets the outgoing_traffic of this ServersGet200ResponseServersInner.

        Outbound Traffic for the current billing period in bytes

        :param outgoing_traffic: The outgoing_traffic of this ServersGet200ResponseServersInner.
        :type outgoing_traffic: float
        """
        if outgoing_traffic is None:
            raise ValueError("Invalid value for `outgoing_traffic`, must not be `None`")

        self._outgoing_traffic = outgoing_traffic

    @property
    def placement_group(self):
        """Gets the placement_group of this ServersGet200ResponseServersInner.


        :return: The placement_group of this ServersGet200ResponseServersInner.
        :rtype: PlacementGroupNullable
        """
        return self._placement_group

    @placement_group.setter
    def placement_group(self, placement_group):
        """Sets the placement_group of this ServersGet200ResponseServersInner.


        :param placement_group: The placement_group of this ServersGet200ResponseServersInner.
        :type placement_group: PlacementGroupNullable
        """

        self._placement_group = placement_group

    @property
    def primary_disk_size(self):
        """Gets the primary_disk_size of this ServersGet200ResponseServersInner.

        Size of the primary Disk

        :return: The primary_disk_size of this ServersGet200ResponseServersInner.
        :rtype: float
        """
        return self._primary_disk_size

    @primary_disk_size.setter
    def primary_disk_size(self, primary_disk_size):
        """Sets the primary_disk_size of this ServersGet200ResponseServersInner.

        Size of the primary Disk

        :param primary_disk_size: The primary_disk_size of this ServersGet200ResponseServersInner.
        :type primary_disk_size: float
        """
        if primary_disk_size is None:
            raise ValueError("Invalid value for `primary_disk_size`, must not be `None`")

        self._primary_disk_size = primary_disk_size

    @property
    def private_net(self):
        """Gets the private_net of this ServersGet200ResponseServersInner.

        Private networks information

        :return: The private_net of this ServersGet200ResponseServersInner.
        :rtype: List[ServersGet200ResponseServersInnerPrivateNetInner]
        """
        return self._private_net

    @private_net.setter
    def private_net(self, private_net):
        """Sets the private_net of this ServersGet200ResponseServersInner.

        Private networks information

        :param private_net: The private_net of this ServersGet200ResponseServersInner.
        :type private_net: List[ServersGet200ResponseServersInnerPrivateNetInner]
        """
        if private_net is None:
            raise ValueError("Invalid value for `private_net`, must not be `None`")

        self._private_net = private_net

    @property
    def protection(self):
        """Gets the protection of this ServersGet200ResponseServersInner.


        :return: The protection of this ServersGet200ResponseServersInner.
        :rtype: ServersGet200ResponseServersInnerProtection
        """
        return self._protection

    @protection.setter
    def protection(self, protection):
        """Sets the protection of this ServersGet200ResponseServersInner.


        :param protection: The protection of this ServersGet200ResponseServersInner.
        :type protection: ServersGet200ResponseServersInnerProtection
        """
        if protection is None:
            raise ValueError("Invalid value for `protection`, must not be `None`")

        self._protection = protection

    @property
    def public_net(self):
        """Gets the public_net of this ServersGet200ResponseServersInner.


        :return: The public_net of this ServersGet200ResponseServersInner.
        :rtype: ServersGet200ResponseServersInnerPublicNet
        """
        return self._public_net

    @public_net.setter
    def public_net(self, public_net):
        """Sets the public_net of this ServersGet200ResponseServersInner.


        :param public_net: The public_net of this ServersGet200ResponseServersInner.
        :type public_net: ServersGet200ResponseServersInnerPublicNet
        """
        if public_net is None:
            raise ValueError("Invalid value for `public_net`, must not be `None`")

        self._public_net = public_net

    @property
    def rescue_enabled(self):
        """Gets the rescue_enabled of this ServersGet200ResponseServersInner.

        True if rescue mode is enabled. Server will then boot into rescue system on next reboot

        :return: The rescue_enabled of this ServersGet200ResponseServersInner.
        :rtype: bool
        """
        return self._rescue_enabled

    @rescue_enabled.setter
    def rescue_enabled(self, rescue_enabled):
        """Sets the rescue_enabled of this ServersGet200ResponseServersInner.

        True if rescue mode is enabled. Server will then boot into rescue system on next reboot

        :param rescue_enabled: The rescue_enabled of this ServersGet200ResponseServersInner.
        :type rescue_enabled: bool
        """
        if rescue_enabled is None:
            raise ValueError("Invalid value for `rescue_enabled`, must not be `None`")

        self._rescue_enabled = rescue_enabled

    @property
    def server_type(self):
        """Gets the server_type of this ServersGet200ResponseServersInner.


        :return: The server_type of this ServersGet200ResponseServersInner.
        :rtype: ServersGet200ResponseServersInnerServerType
        """
        return self._server_type

    @server_type.setter
    def server_type(self, server_type):
        """Sets the server_type of this ServersGet200ResponseServersInner.


        :param server_type: The server_type of this ServersGet200ResponseServersInner.
        :type server_type: ServersGet200ResponseServersInnerServerType
        """
        if server_type is None:
            raise ValueError("Invalid value for `server_type`, must not be `None`")

        self._server_type = server_type

    @property
    def status(self):
        """Gets the status of this ServersGet200ResponseServersInner.

        Status of the Server

        :return: The status of this ServersGet200ResponseServersInner.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ServersGet200ResponseServersInner.

        Status of the Server

        :param status: The status of this ServersGet200ResponseServersInner.
        :type status: str
        """
        allowed_values = ["running", "initializing", "starting", "stopping", "false", "deleting", "migrating", "rebuilding", "unknown"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def volumes(self):
        """Gets the volumes of this ServersGet200ResponseServersInner.

        IDs of Volumes assigned to this Server

        :return: The volumes of this ServersGet200ResponseServersInner.
        :rtype: List[int]
        """
        return self._volumes

    @volumes.setter
    def volumes(self, volumes):
        """Sets the volumes of this ServersGet200ResponseServersInner.

        IDs of Volumes assigned to this Server

        :param volumes: The volumes of this ServersGet200ResponseServersInner.
        :type volumes: List[int]
        """

        self._volumes = volumes
