# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.add_target_request_label_selector import AddTargetRequestLabelSelector
from openapi_server.models.add_target_request_server import AddTargetRequestServer
from openapi_server.models.load_balancer_target_ip import LoadBalancerTargetIP
from openapi_server import util


class AddTargetRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ip: LoadBalancerTargetIP=None, label_selector: AddTargetRequestLabelSelector=None, server: AddTargetRequestServer=None, type: str=None, use_private_ip: bool=None):
        """AddTargetRequest - a model defined in OpenAPI

        :param ip: The ip of this AddTargetRequest.
        :param label_selector: The label_selector of this AddTargetRequest.
        :param server: The server of this AddTargetRequest.
        :param type: The type of this AddTargetRequest.
        :param use_private_ip: The use_private_ip of this AddTargetRequest.
        """
        self.openapi_types = {
            'ip': LoadBalancerTargetIP,
            'label_selector': AddTargetRequestLabelSelector,
            'server': AddTargetRequestServer,
            'type': str,
            'use_private_ip': bool
        }

        self.attribute_map = {
            'ip': 'ip',
            'label_selector': 'label_selector',
            'server': 'server',
            'type': 'type',
            'use_private_ip': 'use_private_ip'
        }

        self._ip = ip
        self._label_selector = label_selector
        self._server = server
        self._type = type
        self._use_private_ip = use_private_ip

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AddTargetRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AddTargetRequest of this AddTargetRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ip(self):
        """Gets the ip of this AddTargetRequest.


        :return: The ip of this AddTargetRequest.
        :rtype: LoadBalancerTargetIP
        """
        return self._ip

    @ip.setter
    def ip(self, ip):
        """Sets the ip of this AddTargetRequest.


        :param ip: The ip of this AddTargetRequest.
        :type ip: LoadBalancerTargetIP
        """

        self._ip = ip

    @property
    def label_selector(self):
        """Gets the label_selector of this AddTargetRequest.


        :return: The label_selector of this AddTargetRequest.
        :rtype: AddTargetRequestLabelSelector
        """
        return self._label_selector

    @label_selector.setter
    def label_selector(self, label_selector):
        """Sets the label_selector of this AddTargetRequest.


        :param label_selector: The label_selector of this AddTargetRequest.
        :type label_selector: AddTargetRequestLabelSelector
        """

        self._label_selector = label_selector

    @property
    def server(self):
        """Gets the server of this AddTargetRequest.


        :return: The server of this AddTargetRequest.
        :rtype: AddTargetRequestServer
        """
        return self._server

    @server.setter
    def server(self, server):
        """Sets the server of this AddTargetRequest.


        :param server: The server of this AddTargetRequest.
        :type server: AddTargetRequestServer
        """

        self._server = server

    @property
    def type(self):
        """Gets the type of this AddTargetRequest.

        Type of the resource

        :return: The type of this AddTargetRequest.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this AddTargetRequest.

        Type of the resource

        :param type: The type of this AddTargetRequest.
        :type type: str
        """
        allowed_values = ["server", "label_selector", "ip"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def use_private_ip(self):
        """Gets the use_private_ip of this AddTargetRequest.

        Use the private network IP instead of the public IP of the Server, requires the Server and Load Balancer to be in the same network. Default value is false.

        :return: The use_private_ip of this AddTargetRequest.
        :rtype: bool
        """
        return self._use_private_ip

    @use_private_ip.setter
    def use_private_ip(self, use_private_ip):
        """Sets the use_private_ip of this AddTargetRequest.

        Use the private network IP instead of the public IP of the Server, requires the Server and Load Balancer to be in the same network. Default value is false.

        :param use_private_ip: The use_private_ip of this AddTargetRequest.
        :type use_private_ip: bool
        """

        self._use_private_ip = use_private_ip
