# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LoadBalancerServiceHTTP(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, certificates: List[int]=None, cookie_lifetime: int=None, cookie_name: str=None, redirect_http: bool=None, sticky_sessions: bool=None):
        """LoadBalancerServiceHTTP - a model defined in OpenAPI

        :param certificates: The certificates of this LoadBalancerServiceHTTP.
        :param cookie_lifetime: The cookie_lifetime of this LoadBalancerServiceHTTP.
        :param cookie_name: The cookie_name of this LoadBalancerServiceHTTP.
        :param redirect_http: The redirect_http of this LoadBalancerServiceHTTP.
        :param sticky_sessions: The sticky_sessions of this LoadBalancerServiceHTTP.
        """
        self.openapi_types = {
            'certificates': List[int],
            'cookie_lifetime': int,
            'cookie_name': str,
            'redirect_http': bool,
            'sticky_sessions': bool
        }

        self.attribute_map = {
            'certificates': 'certificates',
            'cookie_lifetime': 'cookie_lifetime',
            'cookie_name': 'cookie_name',
            'redirect_http': 'redirect_http',
            'sticky_sessions': 'sticky_sessions'
        }

        self._certificates = certificates
        self._cookie_lifetime = cookie_lifetime
        self._cookie_name = cookie_name
        self._redirect_http = redirect_http
        self._sticky_sessions = sticky_sessions

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LoadBalancerServiceHTTP':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LoadBalancerServiceHTTP of this LoadBalancerServiceHTTP.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def certificates(self):
        """Gets the certificates of this LoadBalancerServiceHTTP.

        IDs of the Certificates to use for TLS/SSL termination by the Load Balancer; empty for TLS/SSL passthrough or if `protocol` is \"http\"

        :return: The certificates of this LoadBalancerServiceHTTP.
        :rtype: List[int]
        """
        return self._certificates

    @certificates.setter
    def certificates(self, certificates):
        """Sets the certificates of this LoadBalancerServiceHTTP.

        IDs of the Certificates to use for TLS/SSL termination by the Load Balancer; empty for TLS/SSL passthrough or if `protocol` is \"http\"

        :param certificates: The certificates of this LoadBalancerServiceHTTP.
        :type certificates: List[int]
        """

        self._certificates = certificates

    @property
    def cookie_lifetime(self):
        """Gets the cookie_lifetime of this LoadBalancerServiceHTTP.

        Lifetime of the cookie used for sticky sessions

        :return: The cookie_lifetime of this LoadBalancerServiceHTTP.
        :rtype: int
        """
        return self._cookie_lifetime

    @cookie_lifetime.setter
    def cookie_lifetime(self, cookie_lifetime):
        """Sets the cookie_lifetime of this LoadBalancerServiceHTTP.

        Lifetime of the cookie used for sticky sessions

        :param cookie_lifetime: The cookie_lifetime of this LoadBalancerServiceHTTP.
        :type cookie_lifetime: int
        """

        self._cookie_lifetime = cookie_lifetime

    @property
    def cookie_name(self):
        """Gets the cookie_name of this LoadBalancerServiceHTTP.

        Name of the cookie used for sticky sessions

        :return: The cookie_name of this LoadBalancerServiceHTTP.
        :rtype: str
        """
        return self._cookie_name

    @cookie_name.setter
    def cookie_name(self, cookie_name):
        """Sets the cookie_name of this LoadBalancerServiceHTTP.

        Name of the cookie used for sticky sessions

        :param cookie_name: The cookie_name of this LoadBalancerServiceHTTP.
        :type cookie_name: str
        """

        self._cookie_name = cookie_name

    @property
    def redirect_http(self):
        """Gets the redirect_http of this LoadBalancerServiceHTTP.

        Redirect HTTP requests to HTTPS. Only available if protocol is \"https\". Default `false`

        :return: The redirect_http of this LoadBalancerServiceHTTP.
        :rtype: bool
        """
        return self._redirect_http

    @redirect_http.setter
    def redirect_http(self, redirect_http):
        """Sets the redirect_http of this LoadBalancerServiceHTTP.

        Redirect HTTP requests to HTTPS. Only available if protocol is \"https\". Default `false`

        :param redirect_http: The redirect_http of this LoadBalancerServiceHTTP.
        :type redirect_http: bool
        """

        self._redirect_http = redirect_http

    @property
    def sticky_sessions(self):
        """Gets the sticky_sessions of this LoadBalancerServiceHTTP.

        Use sticky sessions. Only available if protocol is \"http\" or \"https\". Default `false`

        :return: The sticky_sessions of this LoadBalancerServiceHTTP.
        :rtype: bool
        """
        return self._sticky_sessions

    @sticky_sessions.setter
    def sticky_sessions(self, sticky_sessions):
        """Sets the sticky_sessions of this LoadBalancerServiceHTTP.

        Use sticky sessions. Only available if protocol is \"http\" or \"https\". Default `false`

        :param sticky_sessions: The sticky_sessions of this LoadBalancerServiceHTTP.
        :type sticky_sessions: bool
        """

        self._sticky_sessions = sticky_sessions
