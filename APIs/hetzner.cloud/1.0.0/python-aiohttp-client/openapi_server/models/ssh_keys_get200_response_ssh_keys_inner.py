# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SshKeysGet200ResponseSshKeysInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created: str=None, fingerprint: str=None, id: int=None, labels: Dict[str, str]=None, name: str=None, public_key: str=None):
        """SshKeysGet200ResponseSshKeysInner - a model defined in OpenAPI

        :param created: The created of this SshKeysGet200ResponseSshKeysInner.
        :param fingerprint: The fingerprint of this SshKeysGet200ResponseSshKeysInner.
        :param id: The id of this SshKeysGet200ResponseSshKeysInner.
        :param labels: The labels of this SshKeysGet200ResponseSshKeysInner.
        :param name: The name of this SshKeysGet200ResponseSshKeysInner.
        :param public_key: The public_key of this SshKeysGet200ResponseSshKeysInner.
        """
        self.openapi_types = {
            'created': str,
            'fingerprint': str,
            'id': int,
            'labels': Dict[str, str],
            'name': str,
            'public_key': str
        }

        self.attribute_map = {
            'created': 'created',
            'fingerprint': 'fingerprint',
            'id': 'id',
            'labels': 'labels',
            'name': 'name',
            'public_key': 'public_key'
        }

        self._created = created
        self._fingerprint = fingerprint
        self._id = id
        self._labels = labels
        self._name = name
        self._public_key = public_key

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SshKeysGet200ResponseSshKeysInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The _ssh_keys_get_200_response_ssh_keys_inner of this SshKeysGet200ResponseSshKeysInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created(self):
        """Gets the created of this SshKeysGet200ResponseSshKeysInner.

        Point in time when the Resource was created (in ISO-8601 format)

        :return: The created of this SshKeysGet200ResponseSshKeysInner.
        :rtype: str
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this SshKeysGet200ResponseSshKeysInner.

        Point in time when the Resource was created (in ISO-8601 format)

        :param created: The created of this SshKeysGet200ResponseSshKeysInner.
        :type created: str
        """
        if created is None:
            raise ValueError("Invalid value for `created`, must not be `None`")

        self._created = created

    @property
    def fingerprint(self):
        """Gets the fingerprint of this SshKeysGet200ResponseSshKeysInner.

        Fingerprint of public key

        :return: The fingerprint of this SshKeysGet200ResponseSshKeysInner.
        :rtype: str
        """
        return self._fingerprint

    @fingerprint.setter
    def fingerprint(self, fingerprint):
        """Sets the fingerprint of this SshKeysGet200ResponseSshKeysInner.

        Fingerprint of public key

        :param fingerprint: The fingerprint of this SshKeysGet200ResponseSshKeysInner.
        :type fingerprint: str
        """
        if fingerprint is None:
            raise ValueError("Invalid value for `fingerprint`, must not be `None`")

        self._fingerprint = fingerprint

    @property
    def id(self):
        """Gets the id of this SshKeysGet200ResponseSshKeysInner.

        ID of the Resource

        :return: The id of this SshKeysGet200ResponseSshKeysInner.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SshKeysGet200ResponseSshKeysInner.

        ID of the Resource

        :param id: The id of this SshKeysGet200ResponseSshKeysInner.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def labels(self):
        """Gets the labels of this SshKeysGet200ResponseSshKeysInner.

        User-defined labels (key-value pairs)

        :return: The labels of this SshKeysGet200ResponseSshKeysInner.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this SshKeysGet200ResponseSshKeysInner.

        User-defined labels (key-value pairs)

        :param labels: The labels of this SshKeysGet200ResponseSshKeysInner.
        :type labels: Dict[str, str]
        """
        if labels is None:
            raise ValueError("Invalid value for `labels`, must not be `None`")

        self._labels = labels

    @property
    def name(self):
        """Gets the name of this SshKeysGet200ResponseSshKeysInner.

        Name of the Resource. Must be unique per Project.

        :return: The name of this SshKeysGet200ResponseSshKeysInner.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SshKeysGet200ResponseSshKeysInner.

        Name of the Resource. Must be unique per Project.

        :param name: The name of this SshKeysGet200ResponseSshKeysInner.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def public_key(self):
        """Gets the public_key of this SshKeysGet200ResponseSshKeysInner.

        Public key

        :return: The public_key of this SshKeysGet200ResponseSshKeysInner.
        :rtype: str
        """
        return self._public_key

    @public_key.setter
    def public_key(self, public_key):
        """Sets the public_key of this SshKeysGet200ResponseSshKeysInner.

        Public key

        :param public_key: The public_key of this SshKeysGet200ResponseSshKeysInner.
        :type public_key: str
        """
        if public_key is None:
            raise ValueError("Invalid value for `public_key`, must not be `None`")

        self._public_key = public_key
