# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.floating_ips_get200_response_floating_ips_inner_protection import FloatingIpsGet200ResponseFloatingIpsInnerProtection
from openapi_server.models.images_get200_response_images_inner_created_from import ImagesGet200ResponseImagesInnerCreatedFrom
from openapi_server import util


class ImagesGet200ResponseImagesInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bound_to: int=None, created: str=None, created_from: ImagesGet200ResponseImagesInnerCreatedFrom=None, deleted: str=None, deprecated: str=None, description: str=None, disk_size: float=None, id: int=None, image_size: float=None, labels: Dict[str, str]=None, name: str=None, os_flavor: str=None, os_version: str=None, protection: FloatingIpsGet200ResponseFloatingIpsInnerProtection=None, rapid_deploy: bool=None, status: str=None, type: str=None):
        """ImagesGet200ResponseImagesInner - a model defined in OpenAPI

        :param bound_to: The bound_to of this ImagesGet200ResponseImagesInner.
        :param created: The created of this ImagesGet200ResponseImagesInner.
        :param created_from: The created_from of this ImagesGet200ResponseImagesInner.
        :param deleted: The deleted of this ImagesGet200ResponseImagesInner.
        :param deprecated: The deprecated of this ImagesGet200ResponseImagesInner.
        :param description: The description of this ImagesGet200ResponseImagesInner.
        :param disk_size: The disk_size of this ImagesGet200ResponseImagesInner.
        :param id: The id of this ImagesGet200ResponseImagesInner.
        :param image_size: The image_size of this ImagesGet200ResponseImagesInner.
        :param labels: The labels of this ImagesGet200ResponseImagesInner.
        :param name: The name of this ImagesGet200ResponseImagesInner.
        :param os_flavor: The os_flavor of this ImagesGet200ResponseImagesInner.
        :param os_version: The os_version of this ImagesGet200ResponseImagesInner.
        :param protection: The protection of this ImagesGet200ResponseImagesInner.
        :param rapid_deploy: The rapid_deploy of this ImagesGet200ResponseImagesInner.
        :param status: The status of this ImagesGet200ResponseImagesInner.
        :param type: The type of this ImagesGet200ResponseImagesInner.
        """
        self.openapi_types = {
            'bound_to': int,
            'created': str,
            'created_from': ImagesGet200ResponseImagesInnerCreatedFrom,
            'deleted': str,
            'deprecated': str,
            'description': str,
            'disk_size': float,
            'id': int,
            'image_size': float,
            'labels': Dict[str, str],
            'name': str,
            'os_flavor': str,
            'os_version': str,
            'protection': FloatingIpsGet200ResponseFloatingIpsInnerProtection,
            'rapid_deploy': bool,
            'status': str,
            'type': str
        }

        self.attribute_map = {
            'bound_to': 'bound_to',
            'created': 'created',
            'created_from': 'created_from',
            'deleted': 'deleted',
            'deprecated': 'deprecated',
            'description': 'description',
            'disk_size': 'disk_size',
            'id': 'id',
            'image_size': 'image_size',
            'labels': 'labels',
            'name': 'name',
            'os_flavor': 'os_flavor',
            'os_version': 'os_version',
            'protection': 'protection',
            'rapid_deploy': 'rapid_deploy',
            'status': 'status',
            'type': 'type'
        }

        self._bound_to = bound_to
        self._created = created
        self._created_from = created_from
        self._deleted = deleted
        self._deprecated = deprecated
        self._description = description
        self._disk_size = disk_size
        self._id = id
        self._image_size = image_size
        self._labels = labels
        self._name = name
        self._os_flavor = os_flavor
        self._os_version = os_version
        self._protection = protection
        self._rapid_deploy = rapid_deploy
        self._status = status
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ImagesGet200ResponseImagesInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The _images_get_200_response_images_inner of this ImagesGet200ResponseImagesInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bound_to(self):
        """Gets the bound_to of this ImagesGet200ResponseImagesInner.

        ID of Server the Image is bound to. Only set for Images of type `backup`.

        :return: The bound_to of this ImagesGet200ResponseImagesInner.
        :rtype: int
        """
        return self._bound_to

    @bound_to.setter
    def bound_to(self, bound_to):
        """Sets the bound_to of this ImagesGet200ResponseImagesInner.

        ID of Server the Image is bound to. Only set for Images of type `backup`.

        :param bound_to: The bound_to of this ImagesGet200ResponseImagesInner.
        :type bound_to: int
        """
        if bound_to is None:
            raise ValueError("Invalid value for `bound_to`, must not be `None`")

        self._bound_to = bound_to

    @property
    def created(self):
        """Gets the created of this ImagesGet200ResponseImagesInner.

        Point in time when the Resource was created (in ISO-8601 format)

        :return: The created of this ImagesGet200ResponseImagesInner.
        :rtype: str
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this ImagesGet200ResponseImagesInner.

        Point in time when the Resource was created (in ISO-8601 format)

        :param created: The created of this ImagesGet200ResponseImagesInner.
        :type created: str
        """
        if created is None:
            raise ValueError("Invalid value for `created`, must not be `None`")

        self._created = created

    @property
    def created_from(self):
        """Gets the created_from of this ImagesGet200ResponseImagesInner.


        :return: The created_from of this ImagesGet200ResponseImagesInner.
        :rtype: ImagesGet200ResponseImagesInnerCreatedFrom
        """
        return self._created_from

    @created_from.setter
    def created_from(self, created_from):
        """Sets the created_from of this ImagesGet200ResponseImagesInner.


        :param created_from: The created_from of this ImagesGet200ResponseImagesInner.
        :type created_from: ImagesGet200ResponseImagesInnerCreatedFrom
        """
        if created_from is None:
            raise ValueError("Invalid value for `created_from`, must not be `None`")

        self._created_from = created_from

    @property
    def deleted(self):
        """Gets the deleted of this ImagesGet200ResponseImagesInner.

        Point in time where the Image was deleted (in ISO-8601 format)

        :return: The deleted of this ImagesGet200ResponseImagesInner.
        :rtype: str
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this ImagesGet200ResponseImagesInner.

        Point in time where the Image was deleted (in ISO-8601 format)

        :param deleted: The deleted of this ImagesGet200ResponseImagesInner.
        :type deleted: str
        """
        if deleted is None:
            raise ValueError("Invalid value for `deleted`, must not be `None`")

        self._deleted = deleted

    @property
    def deprecated(self):
        """Gets the deprecated of this ImagesGet200ResponseImagesInner.

        Point in time when the Image is considered to be deprecated (in ISO-8601 format)

        :return: The deprecated of this ImagesGet200ResponseImagesInner.
        :rtype: str
        """
        return self._deprecated

    @deprecated.setter
    def deprecated(self, deprecated):
        """Sets the deprecated of this ImagesGet200ResponseImagesInner.

        Point in time when the Image is considered to be deprecated (in ISO-8601 format)

        :param deprecated: The deprecated of this ImagesGet200ResponseImagesInner.
        :type deprecated: str
        """
        if deprecated is None:
            raise ValueError("Invalid value for `deprecated`, must not be `None`")

        self._deprecated = deprecated

    @property
    def description(self):
        """Gets the description of this ImagesGet200ResponseImagesInner.

        Description of the Image

        :return: The description of this ImagesGet200ResponseImagesInner.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ImagesGet200ResponseImagesInner.

        Description of the Image

        :param description: The description of this ImagesGet200ResponseImagesInner.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def disk_size(self):
        """Gets the disk_size of this ImagesGet200ResponseImagesInner.

        Size of the disk contained in the Image in GB

        :return: The disk_size of this ImagesGet200ResponseImagesInner.
        :rtype: float
        """
        return self._disk_size

    @disk_size.setter
    def disk_size(self, disk_size):
        """Sets the disk_size of this ImagesGet200ResponseImagesInner.

        Size of the disk contained in the Image in GB

        :param disk_size: The disk_size of this ImagesGet200ResponseImagesInner.
        :type disk_size: float
        """
        if disk_size is None:
            raise ValueError("Invalid value for `disk_size`, must not be `None`")

        self._disk_size = disk_size

    @property
    def id(self):
        """Gets the id of this ImagesGet200ResponseImagesInner.

        ID of the Resource

        :return: The id of this ImagesGet200ResponseImagesInner.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ImagesGet200ResponseImagesInner.

        ID of the Resource

        :param id: The id of this ImagesGet200ResponseImagesInner.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def image_size(self):
        """Gets the image_size of this ImagesGet200ResponseImagesInner.

        Size of the Image file in our storage in GB. For snapshot Images this is the value relevant for calculating costs for the Image.

        :return: The image_size of this ImagesGet200ResponseImagesInner.
        :rtype: float
        """
        return self._image_size

    @image_size.setter
    def image_size(self, image_size):
        """Sets the image_size of this ImagesGet200ResponseImagesInner.

        Size of the Image file in our storage in GB. For snapshot Images this is the value relevant for calculating costs for the Image.

        :param image_size: The image_size of this ImagesGet200ResponseImagesInner.
        :type image_size: float
        """
        if image_size is None:
            raise ValueError("Invalid value for `image_size`, must not be `None`")

        self._image_size = image_size

    @property
    def labels(self):
        """Gets the labels of this ImagesGet200ResponseImagesInner.

        User-defined labels (key-value pairs)

        :return: The labels of this ImagesGet200ResponseImagesInner.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this ImagesGet200ResponseImagesInner.

        User-defined labels (key-value pairs)

        :param labels: The labels of this ImagesGet200ResponseImagesInner.
        :type labels: Dict[str, str]
        """
        if labels is None:
            raise ValueError("Invalid value for `labels`, must not be `None`")

        self._labels = labels

    @property
    def name(self):
        """Gets the name of this ImagesGet200ResponseImagesInner.

        Unique identifier of the Image. This value is only set for system Images.

        :return: The name of this ImagesGet200ResponseImagesInner.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ImagesGet200ResponseImagesInner.

        Unique identifier of the Image. This value is only set for system Images.

        :param name: The name of this ImagesGet200ResponseImagesInner.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def os_flavor(self):
        """Gets the os_flavor of this ImagesGet200ResponseImagesInner.

        Flavor of operating system contained in the Image

        :return: The os_flavor of this ImagesGet200ResponseImagesInner.
        :rtype: str
        """
        return self._os_flavor

    @os_flavor.setter
    def os_flavor(self, os_flavor):
        """Sets the os_flavor of this ImagesGet200ResponseImagesInner.

        Flavor of operating system contained in the Image

        :param os_flavor: The os_flavor of this ImagesGet200ResponseImagesInner.
        :type os_flavor: str
        """
        allowed_values = ["ubuntu", "centos", "debian", "fedora", "unknown"]  # noqa: E501
        if os_flavor not in allowed_values:
            raise ValueError(
                "Invalid value for `os_flavor` ({0}), must be one of {1}"
                .format(os_flavor, allowed_values)
            )

        self._os_flavor = os_flavor

    @property
    def os_version(self):
        """Gets the os_version of this ImagesGet200ResponseImagesInner.

        Operating system version

        :return: The os_version of this ImagesGet200ResponseImagesInner.
        :rtype: str
        """
        return self._os_version

    @os_version.setter
    def os_version(self, os_version):
        """Sets the os_version of this ImagesGet200ResponseImagesInner.

        Operating system version

        :param os_version: The os_version of this ImagesGet200ResponseImagesInner.
        :type os_version: str
        """
        if os_version is None:
            raise ValueError("Invalid value for `os_version`, must not be `None`")

        self._os_version = os_version

    @property
    def protection(self):
        """Gets the protection of this ImagesGet200ResponseImagesInner.


        :return: The protection of this ImagesGet200ResponseImagesInner.
        :rtype: FloatingIpsGet200ResponseFloatingIpsInnerProtection
        """
        return self._protection

    @protection.setter
    def protection(self, protection):
        """Sets the protection of this ImagesGet200ResponseImagesInner.


        :param protection: The protection of this ImagesGet200ResponseImagesInner.
        :type protection: FloatingIpsGet200ResponseFloatingIpsInnerProtection
        """
        if protection is None:
            raise ValueError("Invalid value for `protection`, must not be `None`")

        self._protection = protection

    @property
    def rapid_deploy(self):
        """Gets the rapid_deploy of this ImagesGet200ResponseImagesInner.

        Indicates that rapid deploy of the Image is available

        :return: The rapid_deploy of this ImagesGet200ResponseImagesInner.
        :rtype: bool
        """
        return self._rapid_deploy

    @rapid_deploy.setter
    def rapid_deploy(self, rapid_deploy):
        """Sets the rapid_deploy of this ImagesGet200ResponseImagesInner.

        Indicates that rapid deploy of the Image is available

        :param rapid_deploy: The rapid_deploy of this ImagesGet200ResponseImagesInner.
        :type rapid_deploy: bool
        """

        self._rapid_deploy = rapid_deploy

    @property
    def status(self):
        """Gets the status of this ImagesGet200ResponseImagesInner.

        Whether the Image can be used or if it's still being created or unavailable

        :return: The status of this ImagesGet200ResponseImagesInner.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ImagesGet200ResponseImagesInner.

        Whether the Image can be used or if it's still being created or unavailable

        :param status: The status of this ImagesGet200ResponseImagesInner.
        :type status: str
        """
        allowed_values = ["available", "creating", "unavailable"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def type(self):
        """Gets the type of this ImagesGet200ResponseImagesInner.

        Type of the Image

        :return: The type of this ImagesGet200ResponseImagesInner.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ImagesGet200ResponseImagesInner.

        Type of the Image

        :param type: The type of this ImagesGet200ResponseImagesInner.
        :type type: str
        """
        allowed_values = ["system", "app", "snapshot", "backup", "temporary"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
