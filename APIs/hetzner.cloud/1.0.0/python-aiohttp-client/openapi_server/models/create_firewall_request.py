# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_firewall_request_apply_to_inner import CreateFirewallRequestApplyToInner
from openapi_server.models.rule import Rule
from openapi_server import util


class CreateFirewallRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, apply_to: List[CreateFirewallRequestApplyToInner]=None, labels: object=None, name: str=None, rules: List[Rule]=None):
        """CreateFirewallRequest - a model defined in OpenAPI

        :param apply_to: The apply_to of this CreateFirewallRequest.
        :param labels: The labels of this CreateFirewallRequest.
        :param name: The name of this CreateFirewallRequest.
        :param rules: The rules of this CreateFirewallRequest.
        """
        self.openapi_types = {
            'apply_to': List[CreateFirewallRequestApplyToInner],
            'labels': object,
            'name': str,
            'rules': List[Rule]
        }

        self.attribute_map = {
            'apply_to': 'apply_to',
            'labels': 'labels',
            'name': 'name',
            'rules': 'rules'
        }

        self._apply_to = apply_to
        self._labels = labels
        self._name = name
        self._rules = rules

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateFirewallRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateFirewallRequest of this CreateFirewallRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def apply_to(self):
        """Gets the apply_to of this CreateFirewallRequest.

        Resources the Firewall should be applied to after creation

        :return: The apply_to of this CreateFirewallRequest.
        :rtype: List[CreateFirewallRequestApplyToInner]
        """
        return self._apply_to

    @apply_to.setter
    def apply_to(self, apply_to):
        """Sets the apply_to of this CreateFirewallRequest.

        Resources the Firewall should be applied to after creation

        :param apply_to: The apply_to of this CreateFirewallRequest.
        :type apply_to: List[CreateFirewallRequestApplyToInner]
        """

        self._apply_to = apply_to

    @property
    def labels(self):
        """Gets the labels of this CreateFirewallRequest.

        User-defined labels (key-value pairs)

        :return: The labels of this CreateFirewallRequest.
        :rtype: object
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this CreateFirewallRequest.

        User-defined labels (key-value pairs)

        :param labels: The labels of this CreateFirewallRequest.
        :type labels: object
        """

        self._labels = labels

    @property
    def name(self):
        """Gets the name of this CreateFirewallRequest.

        Name of the Firewall

        :return: The name of this CreateFirewallRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateFirewallRequest.

        Name of the Firewall

        :param name: The name of this CreateFirewallRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def rules(self):
        """Gets the rules of this CreateFirewallRequest.

        Array of rules

        :return: The rules of this CreateFirewallRequest.
        :rtype: List[Rule]
        """
        return self._rules

    @rules.setter
    def rules(self, rules):
        """Sets the rules of this CreateFirewallRequest.

        Array of rules

        :param rules: The rules of this CreateFirewallRequest.
        :type rules: List[Rule]
        """

        self._rules = rules
