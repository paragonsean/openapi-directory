# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ActionsResponseMetaPagination(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, last_page: float=None, next_page: float=None, page: float=None, per_page: float=None, previous_page: float=None, total_entries: float=None):
        """ActionsResponseMetaPagination - a model defined in OpenAPI

        :param last_page: The last_page of this ActionsResponseMetaPagination.
        :param next_page: The next_page of this ActionsResponseMetaPagination.
        :param page: The page of this ActionsResponseMetaPagination.
        :param per_page: The per_page of this ActionsResponseMetaPagination.
        :param previous_page: The previous_page of this ActionsResponseMetaPagination.
        :param total_entries: The total_entries of this ActionsResponseMetaPagination.
        """
        self.openapi_types = {
            'last_page': float,
            'next_page': float,
            'page': float,
            'per_page': float,
            'previous_page': float,
            'total_entries': float
        }

        self.attribute_map = {
            'last_page': 'last_page',
            'next_page': 'next_page',
            'page': 'page',
            'per_page': 'per_page',
            'previous_page': 'previous_page',
            'total_entries': 'total_entries'
        }

        self._last_page = last_page
        self._next_page = next_page
        self._page = page
        self._per_page = per_page
        self._previous_page = previous_page
        self._total_entries = total_entries

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ActionsResponseMetaPagination':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ActionsResponse_meta_pagination of this ActionsResponseMetaPagination.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def last_page(self):
        """Gets the last_page of this ActionsResponseMetaPagination.

        ID of the last page available. Can be null if the current page is the last one.

        :return: The last_page of this ActionsResponseMetaPagination.
        :rtype: float
        """
        return self._last_page

    @last_page.setter
    def last_page(self, last_page):
        """Sets the last_page of this ActionsResponseMetaPagination.

        ID of the last page available. Can be null if the current page is the last one.

        :param last_page: The last_page of this ActionsResponseMetaPagination.
        :type last_page: float
        """
        if last_page is None:
            raise ValueError("Invalid value for `last_page`, must not be `None`")

        self._last_page = last_page

    @property
    def next_page(self):
        """Gets the next_page of this ActionsResponseMetaPagination.

        ID of the next page. Can be null if the current page is the last one.

        :return: The next_page of this ActionsResponseMetaPagination.
        :rtype: float
        """
        return self._next_page

    @next_page.setter
    def next_page(self, next_page):
        """Sets the next_page of this ActionsResponseMetaPagination.

        ID of the next page. Can be null if the current page is the last one.

        :param next_page: The next_page of this ActionsResponseMetaPagination.
        :type next_page: float
        """
        if next_page is None:
            raise ValueError("Invalid value for `next_page`, must not be `None`")

        self._next_page = next_page

    @property
    def page(self):
        """Gets the page of this ActionsResponseMetaPagination.

        Current page number

        :return: The page of this ActionsResponseMetaPagination.
        :rtype: float
        """
        return self._page

    @page.setter
    def page(self, page):
        """Sets the page of this ActionsResponseMetaPagination.

        Current page number

        :param page: The page of this ActionsResponseMetaPagination.
        :type page: float
        """
        if page is None:
            raise ValueError("Invalid value for `page`, must not be `None`")

        self._page = page

    @property
    def per_page(self):
        """Gets the per_page of this ActionsResponseMetaPagination.

        Maximum number of items shown per page in the response

        :return: The per_page of this ActionsResponseMetaPagination.
        :rtype: float
        """
        return self._per_page

    @per_page.setter
    def per_page(self, per_page):
        """Sets the per_page of this ActionsResponseMetaPagination.

        Maximum number of items shown per page in the response

        :param per_page: The per_page of this ActionsResponseMetaPagination.
        :type per_page: float
        """
        if per_page is None:
            raise ValueError("Invalid value for `per_page`, must not be `None`")

        self._per_page = per_page

    @property
    def previous_page(self):
        """Gets the previous_page of this ActionsResponseMetaPagination.

        ID of the previous page. Can be null if the current page is the first one.

        :return: The previous_page of this ActionsResponseMetaPagination.
        :rtype: float
        """
        return self._previous_page

    @previous_page.setter
    def previous_page(self, previous_page):
        """Sets the previous_page of this ActionsResponseMetaPagination.

        ID of the previous page. Can be null if the current page is the first one.

        :param previous_page: The previous_page of this ActionsResponseMetaPagination.
        :type previous_page: float
        """
        if previous_page is None:
            raise ValueError("Invalid value for `previous_page`, must not be `None`")

        self._previous_page = previous_page

    @property
    def total_entries(self):
        """Gets the total_entries of this ActionsResponseMetaPagination.

        The total number of entries that exist in the database for this query. Nullable if unknown.

        :return: The total_entries of this ActionsResponseMetaPagination.
        :rtype: float
        """
        return self._total_entries

    @total_entries.setter
    def total_entries(self, total_entries):
        """Sets the total_entries of this ActionsResponseMetaPagination.

        The total number of entries that exist in the database for this query. Nullable if unknown.

        :param total_entries: The total_entries of this ActionsResponseMetaPagination.
        :type total_entries: float
        """
        if total_entries is None:
            raise ValueError("Invalid value for `total_entries`, must not be `None`")

        self._total_entries = total_entries
