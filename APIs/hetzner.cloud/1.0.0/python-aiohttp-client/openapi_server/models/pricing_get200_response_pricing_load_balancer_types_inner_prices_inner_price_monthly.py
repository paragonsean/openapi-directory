# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PricingGet200ResponsePricingLoadBalancerTypesInnerPricesInnerPriceMonthly(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, gross: str=None, net: str=None):
        """PricingGet200ResponsePricingLoadBalancerTypesInnerPricesInnerPriceMonthly - a model defined in OpenAPI

        :param gross: The gross of this PricingGet200ResponsePricingLoadBalancerTypesInnerPricesInnerPriceMonthly.
        :param net: The net of this PricingGet200ResponsePricingLoadBalancerTypesInnerPricesInnerPriceMonthly.
        """
        self.openapi_types = {
            'gross': str,
            'net': str
        }

        self.attribute_map = {
            'gross': 'gross',
            'net': 'net'
        }

        self._gross = gross
        self._net = net

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PricingGet200ResponsePricingLoadBalancerTypesInnerPricesInnerPriceMonthly':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The _pricing_get_200_response_pricing_load_balancer_types_inner_prices_inner_price_monthly of this PricingGet200ResponsePricingLoadBalancerTypesInnerPricesInnerPriceMonthly.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def gross(self):
        """Gets the gross of this PricingGet200ResponsePricingLoadBalancerTypesInnerPricesInnerPriceMonthly.

        Price with VAT added

        :return: The gross of this PricingGet200ResponsePricingLoadBalancerTypesInnerPricesInnerPriceMonthly.
        :rtype: str
        """
        return self._gross

    @gross.setter
    def gross(self, gross):
        """Sets the gross of this PricingGet200ResponsePricingLoadBalancerTypesInnerPricesInnerPriceMonthly.

        Price with VAT added

        :param gross: The gross of this PricingGet200ResponsePricingLoadBalancerTypesInnerPricesInnerPriceMonthly.
        :type gross: str
        """
        if gross is None:
            raise ValueError("Invalid value for `gross`, must not be `None`")

        self._gross = gross

    @property
    def net(self):
        """Gets the net of this PricingGet200ResponsePricingLoadBalancerTypesInnerPricesInnerPriceMonthly.

        Price without VAT

        :return: The net of this PricingGet200ResponsePricingLoadBalancerTypesInnerPricesInnerPriceMonthly.
        :rtype: str
        """
        return self._net

    @net.setter
    def net(self, net):
        """Sets the net of this PricingGet200ResponsePricingLoadBalancerTypesInnerPricesInnerPriceMonthly.

        Price without VAT

        :param net: The net of this PricingGet200ResponsePricingLoadBalancerTypesInnerPricesInnerPriceMonthly.
        :type net: str
        """
        if net is None:
            raise ValueError("Invalid value for `net`, must not be `None`")

        self._net = net
