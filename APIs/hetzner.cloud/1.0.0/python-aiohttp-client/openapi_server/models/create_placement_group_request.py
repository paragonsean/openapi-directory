# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreatePlacementGroupRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, labels: object=None, name: str=None, type: str=None):
        """CreatePlacementGroupRequest - a model defined in OpenAPI

        :param labels: The labels of this CreatePlacementGroupRequest.
        :param name: The name of this CreatePlacementGroupRequest.
        :param type: The type of this CreatePlacementGroupRequest.
        """
        self.openapi_types = {
            'labels': object,
            'name': str,
            'type': str
        }

        self.attribute_map = {
            'labels': 'labels',
            'name': 'name',
            'type': 'type'
        }

        self._labels = labels
        self._name = name
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreatePlacementGroupRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreatePlacementGroupRequest of this CreatePlacementGroupRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def labels(self):
        """Gets the labels of this CreatePlacementGroupRequest.

        User-defined labels (key-value pairs)

        :return: The labels of this CreatePlacementGroupRequest.
        :rtype: object
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this CreatePlacementGroupRequest.

        User-defined labels (key-value pairs)

        :param labels: The labels of this CreatePlacementGroupRequest.
        :type labels: object
        """

        self._labels = labels

    @property
    def name(self):
        """Gets the name of this CreatePlacementGroupRequest.

        Name of the PlacementGroup

        :return: The name of this CreatePlacementGroupRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreatePlacementGroupRequest.

        Name of the PlacementGroup

        :param name: The name of this CreatePlacementGroupRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def type(self):
        """Gets the type of this CreatePlacementGroupRequest.

        Define the Placement Group Type.

        :return: The type of this CreatePlacementGroupRequest.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CreatePlacementGroupRequest.

        Define the Placement Group Type.

        :param type: The type of this CreatePlacementGroupRequest.
        :type type: str
        """
        allowed_values = ["spread"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
