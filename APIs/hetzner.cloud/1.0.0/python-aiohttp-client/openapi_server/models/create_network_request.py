# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_load_balancer_request_labels import CreateLoadBalancerRequestLabels
from openapi_server.models.create_network_request_subnets_inner import CreateNetworkRequestSubnetsInner
from openapi_server.models.networks_get200_response_networks_inner_routes_inner import NetworksGet200ResponseNetworksInnerRoutesInner
from openapi_server import util


class CreateNetworkRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ip_range: str=None, labels: CreateLoadBalancerRequestLabels=None, name: str=None, routes: List[NetworksGet200ResponseNetworksInnerRoutesInner]=None, subnets: List[CreateNetworkRequestSubnetsInner]=None):
        """CreateNetworkRequest - a model defined in OpenAPI

        :param ip_range: The ip_range of this CreateNetworkRequest.
        :param labels: The labels of this CreateNetworkRequest.
        :param name: The name of this CreateNetworkRequest.
        :param routes: The routes of this CreateNetworkRequest.
        :param subnets: The subnets of this CreateNetworkRequest.
        """
        self.openapi_types = {
            'ip_range': str,
            'labels': CreateLoadBalancerRequestLabels,
            'name': str,
            'routes': List[NetworksGet200ResponseNetworksInnerRoutesInner],
            'subnets': List[CreateNetworkRequestSubnetsInner]
        }

        self.attribute_map = {
            'ip_range': 'ip_range',
            'labels': 'labels',
            'name': 'name',
            'routes': 'routes',
            'subnets': 'subnets'
        }

        self._ip_range = ip_range
        self._labels = labels
        self._name = name
        self._routes = routes
        self._subnets = subnets

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateNetworkRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateNetworkRequest of this CreateNetworkRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ip_range(self):
        """Gets the ip_range of this CreateNetworkRequest.

        IP range of the whole network which must span all included subnets. Must be one of the private IPv4 ranges of RFC1918. Minimum network size is /24. We highly recommend that you pick a larger network with a /16 netmask.

        :return: The ip_range of this CreateNetworkRequest.
        :rtype: str
        """
        return self._ip_range

    @ip_range.setter
    def ip_range(self, ip_range):
        """Sets the ip_range of this CreateNetworkRequest.

        IP range of the whole network which must span all included subnets. Must be one of the private IPv4 ranges of RFC1918. Minimum network size is /24. We highly recommend that you pick a larger network with a /16 netmask.

        :param ip_range: The ip_range of this CreateNetworkRequest.
        :type ip_range: str
        """
        if ip_range is None:
            raise ValueError("Invalid value for `ip_range`, must not be `None`")

        self._ip_range = ip_range

    @property
    def labels(self):
        """Gets the labels of this CreateNetworkRequest.


        :return: The labels of this CreateNetworkRequest.
        :rtype: CreateLoadBalancerRequestLabels
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this CreateNetworkRequest.


        :param labels: The labels of this CreateNetworkRequest.
        :type labels: CreateLoadBalancerRequestLabels
        """

        self._labels = labels

    @property
    def name(self):
        """Gets the name of this CreateNetworkRequest.

        Name of the network

        :return: The name of this CreateNetworkRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateNetworkRequest.

        Name of the network

        :param name: The name of this CreateNetworkRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def routes(self):
        """Gets the routes of this CreateNetworkRequest.

        Array of routes set in this network. The destination of the route must be one of the private IPv4 ranges of RFC1918. The gateway must be a subnet/IP of the ip_range of the network object. The destination must not overlap with an existing ip_range in any subnets or with any destinations in other routes or with the first IP of the networks ip_range or with 172.31.1.1. The gateway cannot be the first IP of the networks ip_range and also cannot be 172.31.1.1.

        :return: The routes of this CreateNetworkRequest.
        :rtype: List[NetworksGet200ResponseNetworksInnerRoutesInner]
        """
        return self._routes

    @routes.setter
    def routes(self, routes):
        """Sets the routes of this CreateNetworkRequest.

        Array of routes set in this network. The destination of the route must be one of the private IPv4 ranges of RFC1918. The gateway must be a subnet/IP of the ip_range of the network object. The destination must not overlap with an existing ip_range in any subnets or with any destinations in other routes or with the first IP of the networks ip_range or with 172.31.1.1. The gateway cannot be the first IP of the networks ip_range and also cannot be 172.31.1.1.

        :param routes: The routes of this CreateNetworkRequest.
        :type routes: List[NetworksGet200ResponseNetworksInnerRoutesInner]
        """

        self._routes = routes

    @property
    def subnets(self):
        """Gets the subnets of this CreateNetworkRequest.

        Array of subnets allocated.

        :return: The subnets of this CreateNetworkRequest.
        :rtype: List[CreateNetworkRequestSubnetsInner]
        """
        return self._subnets

    @subnets.setter
    def subnets(self, subnets):
        """Sets the subnets of this CreateNetworkRequest.

        Array of subnets allocated.

        :param subnets: The subnets of this CreateNetworkRequest.
        :type subnets: List[CreateNetworkRequestSubnetsInner]
        """

        self._subnets = subnets
