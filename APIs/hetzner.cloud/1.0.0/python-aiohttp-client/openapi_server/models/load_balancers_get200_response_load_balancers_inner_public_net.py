# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.load_balancers_get200_response_load_balancers_inner_public_net_ipv4 import LoadBalancersGet200ResponseLoadBalancersInnerPublicNetIpv4
from openapi_server.models.load_balancers_get200_response_load_balancers_inner_public_net_ipv6 import LoadBalancersGet200ResponseLoadBalancersInnerPublicNetIpv6
from openapi_server import util


class LoadBalancersGet200ResponseLoadBalancersInnerPublicNet(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, enabled: bool=None, ipv4: LoadBalancersGet200ResponseLoadBalancersInnerPublicNetIpv4=None, ipv6: LoadBalancersGet200ResponseLoadBalancersInnerPublicNetIpv6=None):
        """LoadBalancersGet200ResponseLoadBalancersInnerPublicNet - a model defined in OpenAPI

        :param enabled: The enabled of this LoadBalancersGet200ResponseLoadBalancersInnerPublicNet.
        :param ipv4: The ipv4 of this LoadBalancersGet200ResponseLoadBalancersInnerPublicNet.
        :param ipv6: The ipv6 of this LoadBalancersGet200ResponseLoadBalancersInnerPublicNet.
        """
        self.openapi_types = {
            'enabled': bool,
            'ipv4': LoadBalancersGet200ResponseLoadBalancersInnerPublicNetIpv4,
            'ipv6': LoadBalancersGet200ResponseLoadBalancersInnerPublicNetIpv6
        }

        self.attribute_map = {
            'enabled': 'enabled',
            'ipv4': 'ipv4',
            'ipv6': 'ipv6'
        }

        self._enabled = enabled
        self._ipv4 = ipv4
        self._ipv6 = ipv6

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LoadBalancersGet200ResponseLoadBalancersInnerPublicNet':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The _load_balancers_get_200_response_load_balancers_inner_public_net of this LoadBalancersGet200ResponseLoadBalancersInnerPublicNet.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def enabled(self):
        """Gets the enabled of this LoadBalancersGet200ResponseLoadBalancersInnerPublicNet.

        Public Interface enabled or not

        :return: The enabled of this LoadBalancersGet200ResponseLoadBalancersInnerPublicNet.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this LoadBalancersGet200ResponseLoadBalancersInnerPublicNet.

        Public Interface enabled or not

        :param enabled: The enabled of this LoadBalancersGet200ResponseLoadBalancersInnerPublicNet.
        :type enabled: bool
        """
        if enabled is None:
            raise ValueError("Invalid value for `enabled`, must not be `None`")

        self._enabled = enabled

    @property
    def ipv4(self):
        """Gets the ipv4 of this LoadBalancersGet200ResponseLoadBalancersInnerPublicNet.


        :return: The ipv4 of this LoadBalancersGet200ResponseLoadBalancersInnerPublicNet.
        :rtype: LoadBalancersGet200ResponseLoadBalancersInnerPublicNetIpv4
        """
        return self._ipv4

    @ipv4.setter
    def ipv4(self, ipv4):
        """Sets the ipv4 of this LoadBalancersGet200ResponseLoadBalancersInnerPublicNet.


        :param ipv4: The ipv4 of this LoadBalancersGet200ResponseLoadBalancersInnerPublicNet.
        :type ipv4: LoadBalancersGet200ResponseLoadBalancersInnerPublicNetIpv4
        """
        if ipv4 is None:
            raise ValueError("Invalid value for `ipv4`, must not be `None`")

        self._ipv4 = ipv4

    @property
    def ipv6(self):
        """Gets the ipv6 of this LoadBalancersGet200ResponseLoadBalancersInnerPublicNet.


        :return: The ipv6 of this LoadBalancersGet200ResponseLoadBalancersInnerPublicNet.
        :rtype: LoadBalancersGet200ResponseLoadBalancersInnerPublicNetIpv6
        """
        return self._ipv6

    @ipv6.setter
    def ipv6(self, ipv6):
        """Sets the ipv6 of this LoadBalancersGet200ResponseLoadBalancersInnerPublicNet.


        :param ipv6: The ipv6 of this LoadBalancersGet200ResponseLoadBalancersInnerPublicNet.
        :type ipv6: LoadBalancersGet200ResponseLoadBalancersInnerPublicNetIpv6
        """
        if ipv6 is None:
            raise ValueError("Invalid value for `ipv6`, must not be `None`")

        self._ipv6 = ipv6
