# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateFloatingIPRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, home_location: str=None, labels: object=None, name: str=None, server: int=None, type: str=None):
        """CreateFloatingIPRequest - a model defined in OpenAPI

        :param description: The description of this CreateFloatingIPRequest.
        :param home_location: The home_location of this CreateFloatingIPRequest.
        :param labels: The labels of this CreateFloatingIPRequest.
        :param name: The name of this CreateFloatingIPRequest.
        :param server: The server of this CreateFloatingIPRequest.
        :param type: The type of this CreateFloatingIPRequest.
        """
        self.openapi_types = {
            'description': str,
            'home_location': str,
            'labels': object,
            'name': str,
            'server': int,
            'type': str
        }

        self.attribute_map = {
            'description': 'description',
            'home_location': 'home_location',
            'labels': 'labels',
            'name': 'name',
            'server': 'server',
            'type': 'type'
        }

        self._description = description
        self._home_location = home_location
        self._labels = labels
        self._name = name
        self._server = server
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateFloatingIPRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateFloatingIPRequest of this CreateFloatingIPRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this CreateFloatingIPRequest.


        :return: The description of this CreateFloatingIPRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateFloatingIPRequest.


        :param description: The description of this CreateFloatingIPRequest.
        :type description: str
        """

        self._description = description

    @property
    def home_location(self):
        """Gets the home_location of this CreateFloatingIPRequest.

        Home Location (routing is optimized for that Location). Only optional if Server argument is passed.

        :return: The home_location of this CreateFloatingIPRequest.
        :rtype: str
        """
        return self._home_location

    @home_location.setter
    def home_location(self, home_location):
        """Sets the home_location of this CreateFloatingIPRequest.

        Home Location (routing is optimized for that Location). Only optional if Server argument is passed.

        :param home_location: The home_location of this CreateFloatingIPRequest.
        :type home_location: str
        """

        self._home_location = home_location

    @property
    def labels(self):
        """Gets the labels of this CreateFloatingIPRequest.

        User-defined labels (key-value pairs)

        :return: The labels of this CreateFloatingIPRequest.
        :rtype: object
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this CreateFloatingIPRequest.

        User-defined labels (key-value pairs)

        :param labels: The labels of this CreateFloatingIPRequest.
        :type labels: object
        """

        self._labels = labels

    @property
    def name(self):
        """Gets the name of this CreateFloatingIPRequest.


        :return: The name of this CreateFloatingIPRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateFloatingIPRequest.


        :param name: The name of this CreateFloatingIPRequest.
        :type name: str
        """

        self._name = name

    @property
    def server(self):
        """Gets the server of this CreateFloatingIPRequest.

        Server to assign the Floating IP to

        :return: The server of this CreateFloatingIPRequest.
        :rtype: int
        """
        return self._server

    @server.setter
    def server(self, server):
        """Sets the server of this CreateFloatingIPRequest.

        Server to assign the Floating IP to

        :param server: The server of this CreateFloatingIPRequest.
        :type server: int
        """

        self._server = server

    @property
    def type(self):
        """Gets the type of this CreateFloatingIPRequest.

        Floating IP type

        :return: The type of this CreateFloatingIPRequest.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CreateFloatingIPRequest.

        Floating IP type

        :param type: The type of this CreateFloatingIPRequest.
        :type type: str
        """
        allowed_values = ["ipv4", "ipv6"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
