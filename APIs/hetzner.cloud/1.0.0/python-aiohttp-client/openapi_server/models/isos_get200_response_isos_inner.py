# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class IsosGet200ResponseIsosInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, architecture: str=None, deprecated: str=None, description: str=None, id: int=None, name: str=None, type: str=None):
        """IsosGet200ResponseIsosInner - a model defined in OpenAPI

        :param architecture: The architecture of this IsosGet200ResponseIsosInner.
        :param deprecated: The deprecated of this IsosGet200ResponseIsosInner.
        :param description: The description of this IsosGet200ResponseIsosInner.
        :param id: The id of this IsosGet200ResponseIsosInner.
        :param name: The name of this IsosGet200ResponseIsosInner.
        :param type: The type of this IsosGet200ResponseIsosInner.
        """
        self.openapi_types = {
            'architecture': str,
            'deprecated': str,
            'description': str,
            'id': int,
            'name': str,
            'type': str
        }

        self.attribute_map = {
            'architecture': 'architecture',
            'deprecated': 'deprecated',
            'description': 'description',
            'id': 'id',
            'name': 'name',
            'type': 'type'
        }

        self._architecture = architecture
        self._deprecated = deprecated
        self._description = description
        self._id = id
        self._name = name
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IsosGet200ResponseIsosInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The _isos_get_200_response_isos_inner of this IsosGet200ResponseIsosInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def architecture(self):
        """Gets the architecture of this IsosGet200ResponseIsosInner.

        Type of cpu architecture this iso is compatible with. Null indicates no restriction on the architecture (wildcard).

        :return: The architecture of this IsosGet200ResponseIsosInner.
        :rtype: str
        """
        return self._architecture

    @architecture.setter
    def architecture(self, architecture):
        """Sets the architecture of this IsosGet200ResponseIsosInner.

        Type of cpu architecture this iso is compatible with. Null indicates no restriction on the architecture (wildcard).

        :param architecture: The architecture of this IsosGet200ResponseIsosInner.
        :type architecture: str
        """
        allowed_values = [None,"x86", "arm"]  # noqa: E501
        if architecture not in allowed_values:
            raise ValueError(
                "Invalid value for `architecture` ({0}), must be one of {1}"
                .format(architecture, allowed_values)
            )

        self._architecture = architecture

    @property
    def deprecated(self):
        """Gets the deprecated of this IsosGet200ResponseIsosInner.

        ISO 8601 timestamp of deprecation, null if ISO is still available. After the deprecation time it will no longer be possible to attach the ISO to Servers.

        :return: The deprecated of this IsosGet200ResponseIsosInner.
        :rtype: str
        """
        return self._deprecated

    @deprecated.setter
    def deprecated(self, deprecated):
        """Sets the deprecated of this IsosGet200ResponseIsosInner.

        ISO 8601 timestamp of deprecation, null if ISO is still available. After the deprecation time it will no longer be possible to attach the ISO to Servers.

        :param deprecated: The deprecated of this IsosGet200ResponseIsosInner.
        :type deprecated: str
        """
        if deprecated is None:
            raise ValueError("Invalid value for `deprecated`, must not be `None`")

        self._deprecated = deprecated

    @property
    def description(self):
        """Gets the description of this IsosGet200ResponseIsosInner.

        Description of the ISO

        :return: The description of this IsosGet200ResponseIsosInner.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this IsosGet200ResponseIsosInner.

        Description of the ISO

        :param description: The description of this IsosGet200ResponseIsosInner.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def id(self):
        """Gets the id of this IsosGet200ResponseIsosInner.

        ID of the Resource

        :return: The id of this IsosGet200ResponseIsosInner.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this IsosGet200ResponseIsosInner.

        ID of the Resource

        :param id: The id of this IsosGet200ResponseIsosInner.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def name(self):
        """Gets the name of this IsosGet200ResponseIsosInner.

        Unique identifier of the ISO. Only set for public ISOs

        :return: The name of this IsosGet200ResponseIsosInner.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this IsosGet200ResponseIsosInner.

        Unique identifier of the ISO. Only set for public ISOs

        :param name: The name of this IsosGet200ResponseIsosInner.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def type(self):
        """Gets the type of this IsosGet200ResponseIsosInner.

        Type of the ISO

        :return: The type of this IsosGet200ResponseIsosInner.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this IsosGet200ResponseIsosInner.

        Type of the ISO

        :param type: The type of this IsosGet200ResponseIsosInner.
        :type type: str
        """
        allowed_values = ["public", "private"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
