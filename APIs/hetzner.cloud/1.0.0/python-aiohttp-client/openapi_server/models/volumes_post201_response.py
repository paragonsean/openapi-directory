# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.action import Action
from openapi_server.models.volumes_get200_response_volumes_inner import VolumesGet200ResponseVolumesInner
from openapi_server import util


class VolumesPost201Response(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, action: Action=None, next_actions: List[Action]=None, volume: VolumesGet200ResponseVolumesInner=None):
        """VolumesPost201Response - a model defined in OpenAPI

        :param action: The action of this VolumesPost201Response.
        :param next_actions: The next_actions of this VolumesPost201Response.
        :param volume: The volume of this VolumesPost201Response.
        """
        self.openapi_types = {
            'action': Action,
            'next_actions': List[Action],
            'volume': VolumesGet200ResponseVolumesInner
        }

        self.attribute_map = {
            'action': 'action',
            'next_actions': 'next_actions',
            'volume': 'volume'
        }

        self._action = action
        self._next_actions = next_actions
        self._volume = volume

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VolumesPost201Response':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The _volumes_post_201_response of this VolumesPost201Response.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def action(self):
        """Gets the action of this VolumesPost201Response.


        :return: The action of this VolumesPost201Response.
        :rtype: Action
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this VolumesPost201Response.


        :param action: The action of this VolumesPost201Response.
        :type action: Action
        """
        if action is None:
            raise ValueError("Invalid value for `action`, must not be `None`")

        self._action = action

    @property
    def next_actions(self):
        """Gets the next_actions of this VolumesPost201Response.


        :return: The next_actions of this VolumesPost201Response.
        :rtype: List[Action]
        """
        return self._next_actions

    @next_actions.setter
    def next_actions(self, next_actions):
        """Sets the next_actions of this VolumesPost201Response.


        :param next_actions: The next_actions of this VolumesPost201Response.
        :type next_actions: List[Action]
        """
        if next_actions is None:
            raise ValueError("Invalid value for `next_actions`, must not be `None`")

        self._next_actions = next_actions

    @property
    def volume(self):
        """Gets the volume of this VolumesPost201Response.


        :return: The volume of this VolumesPost201Response.
        :rtype: VolumesGet200ResponseVolumesInner
        """
        return self._volume

    @volume.setter
    def volume(self, volume):
        """Sets the volume of this VolumesPost201Response.


        :param volume: The volume of this VolumesPost201Response.
        :type volume: VolumesGet200ResponseVolumesInner
        """
        if volume is None:
            raise ValueError("Invalid value for `volume`, must not be `None`")

        self._volume = volume
