# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.pricing_get200_response_pricing_floating_ip_price_monthly import PricingGet200ResponsePricingFloatingIpPriceMonthly
from openapi_server import util


class PricingGet200ResponsePricingVolume(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, price_per_gb_month: PricingGet200ResponsePricingFloatingIpPriceMonthly=None):
        """PricingGet200ResponsePricingVolume - a model defined in OpenAPI

        :param price_per_gb_month: The price_per_gb_month of this PricingGet200ResponsePricingVolume.
        """
        self.openapi_types = {
            'price_per_gb_month': PricingGet200ResponsePricingFloatingIpPriceMonthly
        }

        self.attribute_map = {
            'price_per_gb_month': 'price_per_gb_month'
        }

        self._price_per_gb_month = price_per_gb_month

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PricingGet200ResponsePricingVolume':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The _pricing_get_200_response_pricing_volume of this PricingGet200ResponsePricingVolume.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def price_per_gb_month(self):
        """Gets the price_per_gb_month of this PricingGet200ResponsePricingVolume.


        :return: The price_per_gb_month of this PricingGet200ResponsePricingVolume.
        :rtype: PricingGet200ResponsePricingFloatingIpPriceMonthly
        """
        return self._price_per_gb_month

    @price_per_gb_month.setter
    def price_per_gb_month(self, price_per_gb_month):
        """Sets the price_per_gb_month of this PricingGet200ResponsePricingVolume.


        :param price_per_gb_month: The price_per_gb_month of this PricingGet200ResponsePricingVolume.
        :type price_per_gb_month: PricingGet200ResponsePricingFloatingIpPriceMonthly
        """
        if price_per_gb_month is None:
            raise ValueError("Invalid value for `price_per_gb_month`, must not be `None`")

        self._price_per_gb_month = price_per_gb_month
