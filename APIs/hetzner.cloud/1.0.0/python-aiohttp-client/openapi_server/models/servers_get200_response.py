# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.actions_response_meta import ActionsResponseMeta
from openapi_server.models.servers_get200_response_servers_inner import ServersGet200ResponseServersInner
from openapi_server import util


class ServersGet200Response(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, meta: ActionsResponseMeta=None, servers: List[ServersGet200ResponseServersInner]=None):
        """ServersGet200Response - a model defined in OpenAPI

        :param meta: The meta of this ServersGet200Response.
        :param servers: The servers of this ServersGet200Response.
        """
        self.openapi_types = {
            'meta': ActionsResponseMeta,
            'servers': List[ServersGet200ResponseServersInner]
        }

        self.attribute_map = {
            'meta': 'meta',
            'servers': 'servers'
        }

        self._meta = meta
        self._servers = servers

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ServersGet200Response':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The _servers_get_200_response of this ServersGet200Response.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def meta(self):
        """Gets the meta of this ServersGet200Response.


        :return: The meta of this ServersGet200Response.
        :rtype: ActionsResponseMeta
        """
        return self._meta

    @meta.setter
    def meta(self, meta):
        """Sets the meta of this ServersGet200Response.


        :param meta: The meta of this ServersGet200Response.
        :type meta: ActionsResponseMeta
        """

        self._meta = meta

    @property
    def servers(self):
        """Gets the servers of this ServersGet200Response.


        :return: The servers of this ServersGet200Response.
        :rtype: List[ServersGet200ResponseServersInner]
        """
        return self._servers

    @servers.setter
    def servers(self, servers):
        """Sets the servers of this ServersGet200Response.


        :param servers: The servers of this ServersGet200Response.
        :type servers: List[ServersGet200ResponseServersInner]
        """
        if servers is None:
            raise ValueError("Invalid value for `servers`, must not be `None`")

        self._servers = servers
