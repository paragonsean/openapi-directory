# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_server_request_firewalls_inner import CreateServerRequestFirewallsInner
from openapi_server.models.create_server_request_public_net import CreateServerRequestPublicNet
from openapi_server import util


class CreateServerRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, automount: bool=None, datacenter: str=None, firewalls: List[CreateServerRequestFirewallsInner]=None, image: str=None, labels: object=None, location: str=None, name: str=None, networks: List[int]=None, placement_group: int=None, public_net: CreateServerRequestPublicNet=None, server_type: str=None, ssh_keys: List[str]=None, start_after_create: bool=None, user_data: str=None, volumes: List[int]=None):
        """CreateServerRequest - a model defined in OpenAPI

        :param automount: The automount of this CreateServerRequest.
        :param datacenter: The datacenter of this CreateServerRequest.
        :param firewalls: The firewalls of this CreateServerRequest.
        :param image: The image of this CreateServerRequest.
        :param labels: The labels of this CreateServerRequest.
        :param location: The location of this CreateServerRequest.
        :param name: The name of this CreateServerRequest.
        :param networks: The networks of this CreateServerRequest.
        :param placement_group: The placement_group of this CreateServerRequest.
        :param public_net: The public_net of this CreateServerRequest.
        :param server_type: The server_type of this CreateServerRequest.
        :param ssh_keys: The ssh_keys of this CreateServerRequest.
        :param start_after_create: The start_after_create of this CreateServerRequest.
        :param user_data: The user_data of this CreateServerRequest.
        :param volumes: The volumes of this CreateServerRequest.
        """
        self.openapi_types = {
            'automount': bool,
            'datacenter': str,
            'firewalls': List[CreateServerRequestFirewallsInner],
            'image': str,
            'labels': object,
            'location': str,
            'name': str,
            'networks': List[int],
            'placement_group': int,
            'public_net': CreateServerRequestPublicNet,
            'server_type': str,
            'ssh_keys': List[str],
            'start_after_create': bool,
            'user_data': str,
            'volumes': List[int]
        }

        self.attribute_map = {
            'automount': 'automount',
            'datacenter': 'datacenter',
            'firewalls': 'firewalls',
            'image': 'image',
            'labels': 'labels',
            'location': 'location',
            'name': 'name',
            'networks': 'networks',
            'placement_group': 'placement_group',
            'public_net': 'public_net',
            'server_type': 'server_type',
            'ssh_keys': 'ssh_keys',
            'start_after_create': 'start_after_create',
            'user_data': 'user_data',
            'volumes': 'volumes'
        }

        self._automount = automount
        self._datacenter = datacenter
        self._firewalls = firewalls
        self._image = image
        self._labels = labels
        self._location = location
        self._name = name
        self._networks = networks
        self._placement_group = placement_group
        self._public_net = public_net
        self._server_type = server_type
        self._ssh_keys = ssh_keys
        self._start_after_create = start_after_create
        self._user_data = user_data
        self._volumes = volumes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateServerRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateServerRequest of this CreateServerRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def automount(self):
        """Gets the automount of this CreateServerRequest.

        Auto-mount Volumes after attach

        :return: The automount of this CreateServerRequest.
        :rtype: bool
        """
        return self._automount

    @automount.setter
    def automount(self, automount):
        """Sets the automount of this CreateServerRequest.

        Auto-mount Volumes after attach

        :param automount: The automount of this CreateServerRequest.
        :type automount: bool
        """

        self._automount = automount

    @property
    def datacenter(self):
        """Gets the datacenter of this CreateServerRequest.

        ID or name of Datacenter to create Server in (must not be used together with location)

        :return: The datacenter of this CreateServerRequest.
        :rtype: str
        """
        return self._datacenter

    @datacenter.setter
    def datacenter(self, datacenter):
        """Sets the datacenter of this CreateServerRequest.

        ID or name of Datacenter to create Server in (must not be used together with location)

        :param datacenter: The datacenter of this CreateServerRequest.
        :type datacenter: str
        """

        self._datacenter = datacenter

    @property
    def firewalls(self):
        """Gets the firewalls of this CreateServerRequest.

        Firewalls which should be applied on the Server's public network interface at creation time

        :return: The firewalls of this CreateServerRequest.
        :rtype: List[CreateServerRequestFirewallsInner]
        """
        return self._firewalls

    @firewalls.setter
    def firewalls(self, firewalls):
        """Sets the firewalls of this CreateServerRequest.

        Firewalls which should be applied on the Server's public network interface at creation time

        :param firewalls: The firewalls of this CreateServerRequest.
        :type firewalls: List[CreateServerRequestFirewallsInner]
        """

        self._firewalls = firewalls

    @property
    def image(self):
        """Gets the image of this CreateServerRequest.

        ID or name of the Image the Server is created from

        :return: The image of this CreateServerRequest.
        :rtype: str
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this CreateServerRequest.

        ID or name of the Image the Server is created from

        :param image: The image of this CreateServerRequest.
        :type image: str
        """
        if image is None:
            raise ValueError("Invalid value for `image`, must not be `None`")

        self._image = image

    @property
    def labels(self):
        """Gets the labels of this CreateServerRequest.

        User-defined labels (key-value pairs)

        :return: The labels of this CreateServerRequest.
        :rtype: object
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this CreateServerRequest.

        User-defined labels (key-value pairs)

        :param labels: The labels of this CreateServerRequest.
        :type labels: object
        """

        self._labels = labels

    @property
    def location(self):
        """Gets the location of this CreateServerRequest.

        ID or name of Location to create Server in (must not be used together with datacenter)

        :return: The location of this CreateServerRequest.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this CreateServerRequest.

        ID or name of Location to create Server in (must not be used together with datacenter)

        :param location: The location of this CreateServerRequest.
        :type location: str
        """

        self._location = location

    @property
    def name(self):
        """Gets the name of this CreateServerRequest.

        Name of the Server to create (must be unique per Project and a valid hostname as per RFC 1123)

        :return: The name of this CreateServerRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateServerRequest.

        Name of the Server to create (must be unique per Project and a valid hostname as per RFC 1123)

        :param name: The name of this CreateServerRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def networks(self):
        """Gets the networks of this CreateServerRequest.

        Network IDs which should be attached to the Server private network interface at the creation time

        :return: The networks of this CreateServerRequest.
        :rtype: List[int]
        """
        return self._networks

    @networks.setter
    def networks(self, networks):
        """Sets the networks of this CreateServerRequest.

        Network IDs which should be attached to the Server private network interface at the creation time

        :param networks: The networks of this CreateServerRequest.
        :type networks: List[int]
        """

        self._networks = networks

    @property
    def placement_group(self):
        """Gets the placement_group of this CreateServerRequest.

        ID of the Placement Group the server should be in

        :return: The placement_group of this CreateServerRequest.
        :rtype: int
        """
        return self._placement_group

    @placement_group.setter
    def placement_group(self, placement_group):
        """Sets the placement_group of this CreateServerRequest.

        ID of the Placement Group the server should be in

        :param placement_group: The placement_group of this CreateServerRequest.
        :type placement_group: int
        """

        self._placement_group = placement_group

    @property
    def public_net(self):
        """Gets the public_net of this CreateServerRequest.


        :return: The public_net of this CreateServerRequest.
        :rtype: CreateServerRequestPublicNet
        """
        return self._public_net

    @public_net.setter
    def public_net(self, public_net):
        """Sets the public_net of this CreateServerRequest.


        :param public_net: The public_net of this CreateServerRequest.
        :type public_net: CreateServerRequestPublicNet
        """

        self._public_net = public_net

    @property
    def server_type(self):
        """Gets the server_type of this CreateServerRequest.

        ID or name of the Server type this Server should be created with

        :return: The server_type of this CreateServerRequest.
        :rtype: str
        """
        return self._server_type

    @server_type.setter
    def server_type(self, server_type):
        """Sets the server_type of this CreateServerRequest.

        ID or name of the Server type this Server should be created with

        :param server_type: The server_type of this CreateServerRequest.
        :type server_type: str
        """
        if server_type is None:
            raise ValueError("Invalid value for `server_type`, must not be `None`")

        self._server_type = server_type

    @property
    def ssh_keys(self):
        """Gets the ssh_keys of this CreateServerRequest.

        SSH key IDs (`integer`) or names (`string`) which should be injected into the Server at creation time

        :return: The ssh_keys of this CreateServerRequest.
        :rtype: List[str]
        """
        return self._ssh_keys

    @ssh_keys.setter
    def ssh_keys(self, ssh_keys):
        """Sets the ssh_keys of this CreateServerRequest.

        SSH key IDs (`integer`) or names (`string`) which should be injected into the Server at creation time

        :param ssh_keys: The ssh_keys of this CreateServerRequest.
        :type ssh_keys: List[str]
        """

        self._ssh_keys = ssh_keys

    @property
    def start_after_create(self):
        """Gets the start_after_create of this CreateServerRequest.

        Start Server right after creation. Defaults to true.

        :return: The start_after_create of this CreateServerRequest.
        :rtype: bool
        """
        return self._start_after_create

    @start_after_create.setter
    def start_after_create(self, start_after_create):
        """Sets the start_after_create of this CreateServerRequest.

        Start Server right after creation. Defaults to true.

        :param start_after_create: The start_after_create of this CreateServerRequest.
        :type start_after_create: bool
        """

        self._start_after_create = start_after_create

    @property
    def user_data(self):
        """Gets the user_data of this CreateServerRequest.

        Cloud-Init user data to use during Server creation. This field is limited to 32KiB.

        :return: The user_data of this CreateServerRequest.
        :rtype: str
        """
        return self._user_data

    @user_data.setter
    def user_data(self, user_data):
        """Sets the user_data of this CreateServerRequest.

        Cloud-Init user data to use during Server creation. This field is limited to 32KiB.

        :param user_data: The user_data of this CreateServerRequest.
        :type user_data: str
        """

        self._user_data = user_data

    @property
    def volumes(self):
        """Gets the volumes of this CreateServerRequest.

        Volume IDs which should be attached to the Server at the creation time. Volumes must be in the same Location.

        :return: The volumes of this CreateServerRequest.
        :rtype: List[int]
        """
        return self._volumes

    @volumes.setter
    def volumes(self, volumes):
        """Sets the volumes of this CreateServerRequest.

        Volume IDs which should be attached to the Server at the creation time. Volumes must be in the same Location.

        :param volumes: The volumes of this CreateServerRequest.
        :type volumes: List[int]
        """

        self._volumes = volumes
