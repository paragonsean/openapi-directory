# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.server_types_get200_response_server_types_inner import ServerTypesGet200ResponseServerTypesInner
from openapi_server import util


class ServerTypesGet200Response(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, server_types: List[ServerTypesGet200ResponseServerTypesInner]=None):
        """ServerTypesGet200Response - a model defined in OpenAPI

        :param server_types: The server_types of this ServerTypesGet200Response.
        """
        self.openapi_types = {
            'server_types': List[ServerTypesGet200ResponseServerTypesInner]
        }

        self.attribute_map = {
            'server_types': 'server_types'
        }

        self._server_types = server_types

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ServerTypesGet200Response':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The _server_types_get_200_response of this ServerTypesGet200Response.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def server_types(self):
        """Gets the server_types of this ServerTypesGet200Response.


        :return: The server_types of this ServerTypesGet200Response.
        :rtype: List[ServerTypesGet200ResponseServerTypesInner]
        """
        return self._server_types

    @server_types.setter
    def server_types(self, server_types):
        """Sets the server_types of this ServerTypesGet200Response.


        :param server_types: The server_types of this ServerTypesGet200Response.
        :type server_types: List[ServerTypesGet200ResponseServerTypesInner]
        """
        if server_types is None:
            raise ValueError("Invalid value for `server_types`, must not be `None`")

        self._server_types = server_types
