# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.load_balancers_id_metrics_get200_response_metrics_time_series_value import LoadBalancersIdMetricsGet200ResponseMetricsTimeSeriesValue
from openapi_server import util


class LoadBalancersIdMetricsGet200ResponseMetrics(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, end: str=None, start: str=None, step: float=None, time_series: Dict[str, LoadBalancersIdMetricsGet200ResponseMetricsTimeSeriesValue]=None):
        """LoadBalancersIdMetricsGet200ResponseMetrics - a model defined in OpenAPI

        :param end: The end of this LoadBalancersIdMetricsGet200ResponseMetrics.
        :param start: The start of this LoadBalancersIdMetricsGet200ResponseMetrics.
        :param step: The step of this LoadBalancersIdMetricsGet200ResponseMetrics.
        :param time_series: The time_series of this LoadBalancersIdMetricsGet200ResponseMetrics.
        """
        self.openapi_types = {
            'end': str,
            'start': str,
            'step': float,
            'time_series': Dict[str, LoadBalancersIdMetricsGet200ResponseMetricsTimeSeriesValue]
        }

        self.attribute_map = {
            'end': 'end',
            'start': 'start',
            'step': 'step',
            'time_series': 'time_series'
        }

        self._end = end
        self._start = start
        self._step = step
        self._time_series = time_series

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LoadBalancersIdMetricsGet200ResponseMetrics':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The _load_balancers__id__metrics_get_200_response_metrics of this LoadBalancersIdMetricsGet200ResponseMetrics.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def end(self):
        """Gets the end of this LoadBalancersIdMetricsGet200ResponseMetrics.

        End of period of metrics reported (in ISO-8601 format)

        :return: The end of this LoadBalancersIdMetricsGet200ResponseMetrics.
        :rtype: str
        """
        return self._end

    @end.setter
    def end(self, end):
        """Sets the end of this LoadBalancersIdMetricsGet200ResponseMetrics.

        End of period of metrics reported (in ISO-8601 format)

        :param end: The end of this LoadBalancersIdMetricsGet200ResponseMetrics.
        :type end: str
        """
        if end is None:
            raise ValueError("Invalid value for `end`, must not be `None`")

        self._end = end

    @property
    def start(self):
        """Gets the start of this LoadBalancersIdMetricsGet200ResponseMetrics.

        Start of period of metrics reported (in ISO-8601 format)

        :return: The start of this LoadBalancersIdMetricsGet200ResponseMetrics.
        :rtype: str
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this LoadBalancersIdMetricsGet200ResponseMetrics.

        Start of period of metrics reported (in ISO-8601 format)

        :param start: The start of this LoadBalancersIdMetricsGet200ResponseMetrics.
        :type start: str
        """
        if start is None:
            raise ValueError("Invalid value for `start`, must not be `None`")

        self._start = start

    @property
    def step(self):
        """Gets the step of this LoadBalancersIdMetricsGet200ResponseMetrics.

        Resolution of results in seconds.

        :return: The step of this LoadBalancersIdMetricsGet200ResponseMetrics.
        :rtype: float
        """
        return self._step

    @step.setter
    def step(self, step):
        """Sets the step of this LoadBalancersIdMetricsGet200ResponseMetrics.

        Resolution of results in seconds.

        :param step: The step of this LoadBalancersIdMetricsGet200ResponseMetrics.
        :type step: float
        """
        if step is None:
            raise ValueError("Invalid value for `step`, must not be `None`")

        self._step = step

    @property
    def time_series(self):
        """Gets the time_series of this LoadBalancersIdMetricsGet200ResponseMetrics.

        Hash with timeseries information, containing the name of timeseries as key

        :return: The time_series of this LoadBalancersIdMetricsGet200ResponseMetrics.
        :rtype: Dict[str, LoadBalancersIdMetricsGet200ResponseMetricsTimeSeriesValue]
        """
        return self._time_series

    @time_series.setter
    def time_series(self, time_series):
        """Sets the time_series of this LoadBalancersIdMetricsGet200ResponseMetrics.

        Hash with timeseries information, containing the name of timeseries as key

        :param time_series: The time_series of this LoadBalancersIdMetricsGet200ResponseMetrics.
        :type time_series: Dict[str, LoadBalancersIdMetricsGet200ResponseMetricsTimeSeriesValue]
        """
        if time_series is None:
            raise ValueError("Invalid value for `time_series`, must not be `None`")

        self._time_series = time_series
