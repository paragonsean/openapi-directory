# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.datacenters_get200_response_datacenters_inner import DatacentersGet200ResponseDatacentersInner
from openapi_server import util


class DatacentersGet200Response(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, datacenters: List[DatacentersGet200ResponseDatacentersInner]=None, recommendation: float=None):
        """DatacentersGet200Response - a model defined in OpenAPI

        :param datacenters: The datacenters of this DatacentersGet200Response.
        :param recommendation: The recommendation of this DatacentersGet200Response.
        """
        self.openapi_types = {
            'datacenters': List[DatacentersGet200ResponseDatacentersInner],
            'recommendation': float
        }

        self.attribute_map = {
            'datacenters': 'datacenters',
            'recommendation': 'recommendation'
        }

        self._datacenters = datacenters
        self._recommendation = recommendation

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DatacentersGet200Response':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The _datacenters_get_200_response of this DatacentersGet200Response.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def datacenters(self):
        """Gets the datacenters of this DatacentersGet200Response.


        :return: The datacenters of this DatacentersGet200Response.
        :rtype: List[DatacentersGet200ResponseDatacentersInner]
        """
        return self._datacenters

    @datacenters.setter
    def datacenters(self, datacenters):
        """Sets the datacenters of this DatacentersGet200Response.


        :param datacenters: The datacenters of this DatacentersGet200Response.
        :type datacenters: List[DatacentersGet200ResponseDatacentersInner]
        """
        if datacenters is None:
            raise ValueError("Invalid value for `datacenters`, must not be `None`")

        self._datacenters = datacenters

    @property
    def recommendation(self):
        """Gets the recommendation of this DatacentersGet200Response.

        The Datacenter which is recommended to be used to create new Servers.

        :return: The recommendation of this DatacentersGet200Response.
        :rtype: float
        """
        return self._recommendation

    @recommendation.setter
    def recommendation(self, recommendation):
        """Sets the recommendation of this DatacentersGet200Response.

        The Datacenter which is recommended to be used to create new Servers.

        :param recommendation: The recommendation of this DatacentersGet200Response.
        :type recommendation: float
        """
        if recommendation is None:
            raise ValueError("Invalid value for `recommendation`, must not be `None`")

        self._recommendation = recommendation
