# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateVolumeRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, automount: bool=None, format: str=None, labels: object=None, location: str=None, name: str=None, server: int=None, size: int=None):
        """CreateVolumeRequest - a model defined in OpenAPI

        :param automount: The automount of this CreateVolumeRequest.
        :param format: The format of this CreateVolumeRequest.
        :param labels: The labels of this CreateVolumeRequest.
        :param location: The location of this CreateVolumeRequest.
        :param name: The name of this CreateVolumeRequest.
        :param server: The server of this CreateVolumeRequest.
        :param size: The size of this CreateVolumeRequest.
        """
        self.openapi_types = {
            'automount': bool,
            'format': str,
            'labels': object,
            'location': str,
            'name': str,
            'server': int,
            'size': int
        }

        self.attribute_map = {
            'automount': 'automount',
            'format': 'format',
            'labels': 'labels',
            'location': 'location',
            'name': 'name',
            'server': 'server',
            'size': 'size'
        }

        self._automount = automount
        self._format = format
        self._labels = labels
        self._location = location
        self._name = name
        self._server = server
        self._size = size

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateVolumeRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateVolumeRequest of this CreateVolumeRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def automount(self):
        """Gets the automount of this CreateVolumeRequest.

        Auto-mount Volume after attach. `server` must be provided.

        :return: The automount of this CreateVolumeRequest.
        :rtype: bool
        """
        return self._automount

    @automount.setter
    def automount(self, automount):
        """Sets the automount of this CreateVolumeRequest.

        Auto-mount Volume after attach. `server` must be provided.

        :param automount: The automount of this CreateVolumeRequest.
        :type automount: bool
        """

        self._automount = automount

    @property
    def format(self):
        """Gets the format of this CreateVolumeRequest.

        Format Volume after creation. One of: `xfs`, `ext4`

        :return: The format of this CreateVolumeRequest.
        :rtype: str
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this CreateVolumeRequest.

        Format Volume after creation. One of: `xfs`, `ext4`

        :param format: The format of this CreateVolumeRequest.
        :type format: str
        """

        self._format = format

    @property
    def labels(self):
        """Gets the labels of this CreateVolumeRequest.

        User-defined labels (key-value pairs)

        :return: The labels of this CreateVolumeRequest.
        :rtype: object
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this CreateVolumeRequest.

        User-defined labels (key-value pairs)

        :param labels: The labels of this CreateVolumeRequest.
        :type labels: object
        """

        self._labels = labels

    @property
    def location(self):
        """Gets the location of this CreateVolumeRequest.

        Location to create the Volume in (can be omitted if Server is specified)

        :return: The location of this CreateVolumeRequest.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this CreateVolumeRequest.

        Location to create the Volume in (can be omitted if Server is specified)

        :param location: The location of this CreateVolumeRequest.
        :type location: str
        """

        self._location = location

    @property
    def name(self):
        """Gets the name of this CreateVolumeRequest.

        Name of the volume

        :return: The name of this CreateVolumeRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateVolumeRequest.

        Name of the volume

        :param name: The name of this CreateVolumeRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def server(self):
        """Gets the server of this CreateVolumeRequest.

        Server to which to attach the Volume once it's created (Volume will be created in the same Location as the server)

        :return: The server of this CreateVolumeRequest.
        :rtype: int
        """
        return self._server

    @server.setter
    def server(self, server):
        """Sets the server of this CreateVolumeRequest.

        Server to which to attach the Volume once it's created (Volume will be created in the same Location as the server)

        :param server: The server of this CreateVolumeRequest.
        :type server: int
        """

        self._server = server

    @property
    def size(self):
        """Gets the size of this CreateVolumeRequest.

        Size of the Volume in GB

        :return: The size of this CreateVolumeRequest.
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this CreateVolumeRequest.

        Size of the Volume in GB

        :param size: The size of this CreateVolumeRequest.
        :type size: int
        """
        if size is None:
            raise ValueError("Invalid value for `size`, must not be `None`")

        self._size = size
