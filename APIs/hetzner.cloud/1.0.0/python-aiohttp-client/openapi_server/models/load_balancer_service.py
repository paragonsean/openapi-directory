# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.load_balancer_service_http import LoadBalancerServiceHTTP
from openapi_server.models.load_balancer_service_health_check import LoadBalancerServiceHealthCheck
from openapi_server import util


class LoadBalancerService(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, destination_port: int=None, health_check: LoadBalancerServiceHealthCheck=None, http: LoadBalancerServiceHTTP=None, listen_port: int=None, protocol: str=None, proxyprotocol: bool=None):
        """LoadBalancerService - a model defined in OpenAPI

        :param destination_port: The destination_port of this LoadBalancerService.
        :param health_check: The health_check of this LoadBalancerService.
        :param http: The http of this LoadBalancerService.
        :param listen_port: The listen_port of this LoadBalancerService.
        :param protocol: The protocol of this LoadBalancerService.
        :param proxyprotocol: The proxyprotocol of this LoadBalancerService.
        """
        self.openapi_types = {
            'destination_port': int,
            'health_check': LoadBalancerServiceHealthCheck,
            'http': LoadBalancerServiceHTTP,
            'listen_port': int,
            'protocol': str,
            'proxyprotocol': bool
        }

        self.attribute_map = {
            'destination_port': 'destination_port',
            'health_check': 'health_check',
            'http': 'http',
            'listen_port': 'listen_port',
            'protocol': 'protocol',
            'proxyprotocol': 'proxyprotocol'
        }

        self._destination_port = destination_port
        self._health_check = health_check
        self._http = http
        self._listen_port = listen_port
        self._protocol = protocol
        self._proxyprotocol = proxyprotocol

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LoadBalancerService':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LoadBalancerService of this LoadBalancerService.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def destination_port(self):
        """Gets the destination_port of this LoadBalancerService.

        Port the Load Balancer will balance to

        :return: The destination_port of this LoadBalancerService.
        :rtype: int
        """
        return self._destination_port

    @destination_port.setter
    def destination_port(self, destination_port):
        """Sets the destination_port of this LoadBalancerService.

        Port the Load Balancer will balance to

        :param destination_port: The destination_port of this LoadBalancerService.
        :type destination_port: int
        """
        if destination_port is None:
            raise ValueError("Invalid value for `destination_port`, must not be `None`")

        self._destination_port = destination_port

    @property
    def health_check(self):
        """Gets the health_check of this LoadBalancerService.


        :return: The health_check of this LoadBalancerService.
        :rtype: LoadBalancerServiceHealthCheck
        """
        return self._health_check

    @health_check.setter
    def health_check(self, health_check):
        """Sets the health_check of this LoadBalancerService.


        :param health_check: The health_check of this LoadBalancerService.
        :type health_check: LoadBalancerServiceHealthCheck
        """
        if health_check is None:
            raise ValueError("Invalid value for `health_check`, must not be `None`")

        self._health_check = health_check

    @property
    def http(self):
        """Gets the http of this LoadBalancerService.


        :return: The http of this LoadBalancerService.
        :rtype: LoadBalancerServiceHTTP
        """
        return self._http

    @http.setter
    def http(self, http):
        """Sets the http of this LoadBalancerService.


        :param http: The http of this LoadBalancerService.
        :type http: LoadBalancerServiceHTTP
        """

        self._http = http

    @property
    def listen_port(self):
        """Gets the listen_port of this LoadBalancerService.

        Port the Load Balancer listens on

        :return: The listen_port of this LoadBalancerService.
        :rtype: int
        """
        return self._listen_port

    @listen_port.setter
    def listen_port(self, listen_port):
        """Sets the listen_port of this LoadBalancerService.

        Port the Load Balancer listens on

        :param listen_port: The listen_port of this LoadBalancerService.
        :type listen_port: int
        """
        if listen_port is None:
            raise ValueError("Invalid value for `listen_port`, must not be `None`")

        self._listen_port = listen_port

    @property
    def protocol(self):
        """Gets the protocol of this LoadBalancerService.

        Protocol of the Load Balancer

        :return: The protocol of this LoadBalancerService.
        :rtype: str
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this LoadBalancerService.

        Protocol of the Load Balancer

        :param protocol: The protocol of this LoadBalancerService.
        :type protocol: str
        """
        allowed_values = ["tcp", "http", "https"]  # noqa: E501
        if protocol not in allowed_values:
            raise ValueError(
                "Invalid value for `protocol` ({0}), must be one of {1}"
                .format(protocol, allowed_values)
            )

        self._protocol = protocol

    @property
    def proxyprotocol(self):
        """Gets the proxyprotocol of this LoadBalancerService.

        Is Proxyprotocol enabled or not

        :return: The proxyprotocol of this LoadBalancerService.
        :rtype: bool
        """
        return self._proxyprotocol

    @proxyprotocol.setter
    def proxyprotocol(self, proxyprotocol):
        """Sets the proxyprotocol of this LoadBalancerService.

        Is Proxyprotocol enabled or not

        :param proxyprotocol: The proxyprotocol of this LoadBalancerService.
        :type proxyprotocol: bool
        """
        if proxyprotocol is None:
            raise ValueError("Invalid value for `proxyprotocol`, must not be `None`")

        self._proxyprotocol = proxyprotocol
