# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DatacentersGet200ResponseDatacentersInnerServerTypes(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, available: List[float]=None, available_for_migration: List[float]=None, supported: List[float]=None):
        """DatacentersGet200ResponseDatacentersInnerServerTypes - a model defined in OpenAPI

        :param available: The available of this DatacentersGet200ResponseDatacentersInnerServerTypes.
        :param available_for_migration: The available_for_migration of this DatacentersGet200ResponseDatacentersInnerServerTypes.
        :param supported: The supported of this DatacentersGet200ResponseDatacentersInnerServerTypes.
        """
        self.openapi_types = {
            'available': List[float],
            'available_for_migration': List[float],
            'supported': List[float]
        }

        self.attribute_map = {
            'available': 'available',
            'available_for_migration': 'available_for_migration',
            'supported': 'supported'
        }

        self._available = available
        self._available_for_migration = available_for_migration
        self._supported = supported

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DatacentersGet200ResponseDatacentersInnerServerTypes':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The _datacenters_get_200_response_datacenters_inner_server_types of this DatacentersGet200ResponseDatacentersInnerServerTypes.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def available(self):
        """Gets the available of this DatacentersGet200ResponseDatacentersInnerServerTypes.

        IDs of Server types that are supported and for which the Datacenter has enough resources left

        :return: The available of this DatacentersGet200ResponseDatacentersInnerServerTypes.
        :rtype: List[float]
        """
        return self._available

    @available.setter
    def available(self, available):
        """Sets the available of this DatacentersGet200ResponseDatacentersInnerServerTypes.

        IDs of Server types that are supported and for which the Datacenter has enough resources left

        :param available: The available of this DatacentersGet200ResponseDatacentersInnerServerTypes.
        :type available: List[float]
        """
        if available is None:
            raise ValueError("Invalid value for `available`, must not be `None`")

        self._available = available

    @property
    def available_for_migration(self):
        """Gets the available_for_migration of this DatacentersGet200ResponseDatacentersInnerServerTypes.

        IDs of Server types that are supported and for which the Datacenter has enough resources left

        :return: The available_for_migration of this DatacentersGet200ResponseDatacentersInnerServerTypes.
        :rtype: List[float]
        """
        return self._available_for_migration

    @available_for_migration.setter
    def available_for_migration(self, available_for_migration):
        """Sets the available_for_migration of this DatacentersGet200ResponseDatacentersInnerServerTypes.

        IDs of Server types that are supported and for which the Datacenter has enough resources left

        :param available_for_migration: The available_for_migration of this DatacentersGet200ResponseDatacentersInnerServerTypes.
        :type available_for_migration: List[float]
        """
        if available_for_migration is None:
            raise ValueError("Invalid value for `available_for_migration`, must not be `None`")

        self._available_for_migration = available_for_migration

    @property
    def supported(self):
        """Gets the supported of this DatacentersGet200ResponseDatacentersInnerServerTypes.

        IDs of Server types that are supported in the Datacenter

        :return: The supported of this DatacentersGet200ResponseDatacentersInnerServerTypes.
        :rtype: List[float]
        """
        return self._supported

    @supported.setter
    def supported(self, supported):
        """Sets the supported of this DatacentersGet200ResponseDatacentersInnerServerTypes.

        IDs of Server types that are supported in the Datacenter

        :param supported: The supported of this DatacentersGet200ResponseDatacentersInnerServerTypes.
        :type supported: List[float]
        """
        if supported is None:
            raise ValueError("Invalid value for `supported`, must not be `None`")

        self._supported = supported
