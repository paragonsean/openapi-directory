# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.certificate import Certificate
from openapi_server.models.nullable_action import NullableAction
from openapi_server import util


class CreateCertificateResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, action: NullableAction=None, certificate: Certificate=None):
        """CreateCertificateResponse - a model defined in OpenAPI

        :param action: The action of this CreateCertificateResponse.
        :param certificate: The certificate of this CreateCertificateResponse.
        """
        self.openapi_types = {
            'action': NullableAction,
            'certificate': Certificate
        }

        self.attribute_map = {
            'action': 'action',
            'certificate': 'certificate'
        }

        self._action = action
        self._certificate = certificate

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateCertificateResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateCertificateResponse of this CreateCertificateResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def action(self):
        """Gets the action of this CreateCertificateResponse.


        :return: The action of this CreateCertificateResponse.
        :rtype: NullableAction
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this CreateCertificateResponse.


        :param action: The action of this CreateCertificateResponse.
        :type action: NullableAction
        """

        self._action = action

    @property
    def certificate(self):
        """Gets the certificate of this CreateCertificateResponse.


        :return: The certificate of this CreateCertificateResponse.
        :rtype: Certificate
        """
        return self._certificate

    @certificate.setter
    def certificate(self, certificate):
        """Sets the certificate of this CreateCertificateResponse.


        :param certificate: The certificate of this CreateCertificateResponse.
        :type certificate: Certificate
        """
        if certificate is None:
            raise ValueError("Invalid value for `certificate`, must not be `None`")

        self._certificate = certificate
