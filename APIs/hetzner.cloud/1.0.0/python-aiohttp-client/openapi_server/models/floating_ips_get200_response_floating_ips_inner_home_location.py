# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class FloatingIpsGet200ResponseFloatingIpsInnerHomeLocation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, city: str=None, country: str=None, description: str=None, id: float=None, latitude: float=None, longitude: float=None, name: str=None, network_zone: str=None):
        """FloatingIpsGet200ResponseFloatingIpsInnerHomeLocation - a model defined in OpenAPI

        :param city: The city of this FloatingIpsGet200ResponseFloatingIpsInnerHomeLocation.
        :param country: The country of this FloatingIpsGet200ResponseFloatingIpsInnerHomeLocation.
        :param description: The description of this FloatingIpsGet200ResponseFloatingIpsInnerHomeLocation.
        :param id: The id of this FloatingIpsGet200ResponseFloatingIpsInnerHomeLocation.
        :param latitude: The latitude of this FloatingIpsGet200ResponseFloatingIpsInnerHomeLocation.
        :param longitude: The longitude of this FloatingIpsGet200ResponseFloatingIpsInnerHomeLocation.
        :param name: The name of this FloatingIpsGet200ResponseFloatingIpsInnerHomeLocation.
        :param network_zone: The network_zone of this FloatingIpsGet200ResponseFloatingIpsInnerHomeLocation.
        """
        self.openapi_types = {
            'city': str,
            'country': str,
            'description': str,
            'id': float,
            'latitude': float,
            'longitude': float,
            'name': str,
            'network_zone': str
        }

        self.attribute_map = {
            'city': 'city',
            'country': 'country',
            'description': 'description',
            'id': 'id',
            'latitude': 'latitude',
            'longitude': 'longitude',
            'name': 'name',
            'network_zone': 'network_zone'
        }

        self._city = city
        self._country = country
        self._description = description
        self._id = id
        self._latitude = latitude
        self._longitude = longitude
        self._name = name
        self._network_zone = network_zone

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FloatingIpsGet200ResponseFloatingIpsInnerHomeLocation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The _floating_ips_get_200_response_floating_ips_inner_home_location of this FloatingIpsGet200ResponseFloatingIpsInnerHomeLocation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def city(self):
        """Gets the city of this FloatingIpsGet200ResponseFloatingIpsInnerHomeLocation.

        City the Location is closest to

        :return: The city of this FloatingIpsGet200ResponseFloatingIpsInnerHomeLocation.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this FloatingIpsGet200ResponseFloatingIpsInnerHomeLocation.

        City the Location is closest to

        :param city: The city of this FloatingIpsGet200ResponseFloatingIpsInnerHomeLocation.
        :type city: str
        """
        if city is None:
            raise ValueError("Invalid value for `city`, must not be `None`")

        self._city = city

    @property
    def country(self):
        """Gets the country of this FloatingIpsGet200ResponseFloatingIpsInnerHomeLocation.

        ISO 3166-1 alpha-2 code of the country the Location resides in

        :return: The country of this FloatingIpsGet200ResponseFloatingIpsInnerHomeLocation.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this FloatingIpsGet200ResponseFloatingIpsInnerHomeLocation.

        ISO 3166-1 alpha-2 code of the country the Location resides in

        :param country: The country of this FloatingIpsGet200ResponseFloatingIpsInnerHomeLocation.
        :type country: str
        """
        if country is None:
            raise ValueError("Invalid value for `country`, must not be `None`")

        self._country = country

    @property
    def description(self):
        """Gets the description of this FloatingIpsGet200ResponseFloatingIpsInnerHomeLocation.

        Description of the Location

        :return: The description of this FloatingIpsGet200ResponseFloatingIpsInnerHomeLocation.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this FloatingIpsGet200ResponseFloatingIpsInnerHomeLocation.

        Description of the Location

        :param description: The description of this FloatingIpsGet200ResponseFloatingIpsInnerHomeLocation.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def id(self):
        """Gets the id of this FloatingIpsGet200ResponseFloatingIpsInnerHomeLocation.

        ID of the Location

        :return: The id of this FloatingIpsGet200ResponseFloatingIpsInnerHomeLocation.
        :rtype: float
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this FloatingIpsGet200ResponseFloatingIpsInnerHomeLocation.

        ID of the Location

        :param id: The id of this FloatingIpsGet200ResponseFloatingIpsInnerHomeLocation.
        :type id: float
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def latitude(self):
        """Gets the latitude of this FloatingIpsGet200ResponseFloatingIpsInnerHomeLocation.

        Latitude of the city closest to the Location

        :return: The latitude of this FloatingIpsGet200ResponseFloatingIpsInnerHomeLocation.
        :rtype: float
        """
        return self._latitude

    @latitude.setter
    def latitude(self, latitude):
        """Sets the latitude of this FloatingIpsGet200ResponseFloatingIpsInnerHomeLocation.

        Latitude of the city closest to the Location

        :param latitude: The latitude of this FloatingIpsGet200ResponseFloatingIpsInnerHomeLocation.
        :type latitude: float
        """
        if latitude is None:
            raise ValueError("Invalid value for `latitude`, must not be `None`")

        self._latitude = latitude

    @property
    def longitude(self):
        """Gets the longitude of this FloatingIpsGet200ResponseFloatingIpsInnerHomeLocation.

        Longitude of the city closest to the Location

        :return: The longitude of this FloatingIpsGet200ResponseFloatingIpsInnerHomeLocation.
        :rtype: float
        """
        return self._longitude

    @longitude.setter
    def longitude(self, longitude):
        """Sets the longitude of this FloatingIpsGet200ResponseFloatingIpsInnerHomeLocation.

        Longitude of the city closest to the Location

        :param longitude: The longitude of this FloatingIpsGet200ResponseFloatingIpsInnerHomeLocation.
        :type longitude: float
        """
        if longitude is None:
            raise ValueError("Invalid value for `longitude`, must not be `None`")

        self._longitude = longitude

    @property
    def name(self):
        """Gets the name of this FloatingIpsGet200ResponseFloatingIpsInnerHomeLocation.

        Unique identifier of the Location

        :return: The name of this FloatingIpsGet200ResponseFloatingIpsInnerHomeLocation.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this FloatingIpsGet200ResponseFloatingIpsInnerHomeLocation.

        Unique identifier of the Location

        :param name: The name of this FloatingIpsGet200ResponseFloatingIpsInnerHomeLocation.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def network_zone(self):
        """Gets the network_zone of this FloatingIpsGet200ResponseFloatingIpsInnerHomeLocation.

        Name of network zone this Location resides in

        :return: The network_zone of this FloatingIpsGet200ResponseFloatingIpsInnerHomeLocation.
        :rtype: str
        """
        return self._network_zone

    @network_zone.setter
    def network_zone(self, network_zone):
        """Sets the network_zone of this FloatingIpsGet200ResponseFloatingIpsInnerHomeLocation.

        Name of network zone this Location resides in

        :param network_zone: The network_zone of this FloatingIpsGet200ResponseFloatingIpsInnerHomeLocation.
        :type network_zone: str
        """
        if network_zone is None:
            raise ValueError("Invalid value for `network_zone`, must not be `None`")

        self._network_zone = network_zone
