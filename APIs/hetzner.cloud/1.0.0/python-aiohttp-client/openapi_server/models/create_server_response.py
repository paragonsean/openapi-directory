# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.action import Action
from openapi_server.models.servers_get200_response_servers_inner import ServersGet200ResponseServersInner
from openapi_server import util


class CreateServerResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, action: Action=None, next_actions: List[Action]=None, root_password: str=None, server: ServersGet200ResponseServersInner=None):
        """CreateServerResponse - a model defined in OpenAPI

        :param action: The action of this CreateServerResponse.
        :param next_actions: The next_actions of this CreateServerResponse.
        :param root_password: The root_password of this CreateServerResponse.
        :param server: The server of this CreateServerResponse.
        """
        self.openapi_types = {
            'action': Action,
            'next_actions': List[Action],
            'root_password': str,
            'server': ServersGet200ResponseServersInner
        }

        self.attribute_map = {
            'action': 'action',
            'next_actions': 'next_actions',
            'root_password': 'root_password',
            'server': 'server'
        }

        self._action = action
        self._next_actions = next_actions
        self._root_password = root_password
        self._server = server

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateServerResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateServerResponse of this CreateServerResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def action(self):
        """Gets the action of this CreateServerResponse.


        :return: The action of this CreateServerResponse.
        :rtype: Action
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this CreateServerResponse.


        :param action: The action of this CreateServerResponse.
        :type action: Action
        """
        if action is None:
            raise ValueError("Invalid value for `action`, must not be `None`")

        self._action = action

    @property
    def next_actions(self):
        """Gets the next_actions of this CreateServerResponse.


        :return: The next_actions of this CreateServerResponse.
        :rtype: List[Action]
        """
        return self._next_actions

    @next_actions.setter
    def next_actions(self, next_actions):
        """Sets the next_actions of this CreateServerResponse.


        :param next_actions: The next_actions of this CreateServerResponse.
        :type next_actions: List[Action]
        """
        if next_actions is None:
            raise ValueError("Invalid value for `next_actions`, must not be `None`")

        self._next_actions = next_actions

    @property
    def root_password(self):
        """Gets the root_password of this CreateServerResponse.

        Root password when no SSH keys have been specified

        :return: The root_password of this CreateServerResponse.
        :rtype: str
        """
        return self._root_password

    @root_password.setter
    def root_password(self, root_password):
        """Sets the root_password of this CreateServerResponse.

        Root password when no SSH keys have been specified

        :param root_password: The root_password of this CreateServerResponse.
        :type root_password: str
        """
        if root_password is None:
            raise ValueError("Invalid value for `root_password`, must not be `None`")

        self._root_password = root_password

    @property
    def server(self):
        """Gets the server of this CreateServerResponse.


        :return: The server of this CreateServerResponse.
        :rtype: ServersGet200ResponseServersInner
        """
        return self._server

    @server.setter
    def server(self, server):
        """Sets the server of this CreateServerResponse.


        :param server: The server of this CreateServerResponse.
        :type server: ServersGet200ResponseServersInner
        """
        if server is None:
            raise ValueError("Invalid value for `server`, must not be `None`")

        self._server = server
