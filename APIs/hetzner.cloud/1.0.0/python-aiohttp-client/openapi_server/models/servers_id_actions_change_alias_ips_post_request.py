# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ServersIdActionsChangeAliasIpsPostRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, alias_ips: List[str]=None, network: int=None):
        """ServersIdActionsChangeAliasIpsPostRequest - a model defined in OpenAPI

        :param alias_ips: The alias_ips of this ServersIdActionsChangeAliasIpsPostRequest.
        :param network: The network of this ServersIdActionsChangeAliasIpsPostRequest.
        """
        self.openapi_types = {
            'alias_ips': List[str],
            'network': int
        }

        self.attribute_map = {
            'alias_ips': 'alias_ips',
            'network': 'network'
        }

        self._alias_ips = alias_ips
        self._network = network

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ServersIdActionsChangeAliasIpsPostRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The _servers__id__actions_change_alias_ips_post_request of this ServersIdActionsChangeAliasIpsPostRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def alias_ips(self):
        """Gets the alias_ips of this ServersIdActionsChangeAliasIpsPostRequest.

        New alias IPs to set for this Server

        :return: The alias_ips of this ServersIdActionsChangeAliasIpsPostRequest.
        :rtype: List[str]
        """
        return self._alias_ips

    @alias_ips.setter
    def alias_ips(self, alias_ips):
        """Sets the alias_ips of this ServersIdActionsChangeAliasIpsPostRequest.

        New alias IPs to set for this Server

        :param alias_ips: The alias_ips of this ServersIdActionsChangeAliasIpsPostRequest.
        :type alias_ips: List[str]
        """
        if alias_ips is None:
            raise ValueError("Invalid value for `alias_ips`, must not be `None`")

        self._alias_ips = alias_ips

    @property
    def network(self):
        """Gets the network of this ServersIdActionsChangeAliasIpsPostRequest.

        ID of an existing Network already attached to the Server

        :return: The network of this ServersIdActionsChangeAliasIpsPostRequest.
        :rtype: int
        """
        return self._network

    @network.setter
    def network(self, network):
        """Sets the network of this ServersIdActionsChangeAliasIpsPostRequest.

        ID of an existing Network already attached to the Server

        :param network: The network of this ServersIdActionsChangeAliasIpsPostRequest.
        :type network: int
        """
        if network is None:
            raise ValueError("Invalid value for `network`, must not be `None`")

        self._network = network
