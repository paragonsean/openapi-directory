# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ServersGet200ResponseServersInnerPublicNetIpv4(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, blocked: bool=None, dns_ptr: str=None, id: int=None, ip: str=None):
        """ServersGet200ResponseServersInnerPublicNetIpv4 - a model defined in OpenAPI

        :param blocked: The blocked of this ServersGet200ResponseServersInnerPublicNetIpv4.
        :param dns_ptr: The dns_ptr of this ServersGet200ResponseServersInnerPublicNetIpv4.
        :param id: The id of this ServersGet200ResponseServersInnerPublicNetIpv4.
        :param ip: The ip of this ServersGet200ResponseServersInnerPublicNetIpv4.
        """
        self.openapi_types = {
            'blocked': bool,
            'dns_ptr': str,
            'id': int,
            'ip': str
        }

        self.attribute_map = {
            'blocked': 'blocked',
            'dns_ptr': 'dns_ptr',
            'id': 'id',
            'ip': 'ip'
        }

        self._blocked = blocked
        self._dns_ptr = dns_ptr
        self._id = id
        self._ip = ip

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ServersGet200ResponseServersInnerPublicNetIpv4':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The _servers_get_200_response_servers_inner_public_net_ipv4 of this ServersGet200ResponseServersInnerPublicNetIpv4.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def blocked(self):
        """Gets the blocked of this ServersGet200ResponseServersInnerPublicNetIpv4.

        If the IP is blocked by our anti abuse dept

        :return: The blocked of this ServersGet200ResponseServersInnerPublicNetIpv4.
        :rtype: bool
        """
        return self._blocked

    @blocked.setter
    def blocked(self, blocked):
        """Sets the blocked of this ServersGet200ResponseServersInnerPublicNetIpv4.

        If the IP is blocked by our anti abuse dept

        :param blocked: The blocked of this ServersGet200ResponseServersInnerPublicNetIpv4.
        :type blocked: bool
        """
        if blocked is None:
            raise ValueError("Invalid value for `blocked`, must not be `None`")

        self._blocked = blocked

    @property
    def dns_ptr(self):
        """Gets the dns_ptr of this ServersGet200ResponseServersInnerPublicNetIpv4.

        Reverse DNS PTR entry for the IPv4 addresses of this Server

        :return: The dns_ptr of this ServersGet200ResponseServersInnerPublicNetIpv4.
        :rtype: str
        """
        return self._dns_ptr

    @dns_ptr.setter
    def dns_ptr(self, dns_ptr):
        """Sets the dns_ptr of this ServersGet200ResponseServersInnerPublicNetIpv4.

        Reverse DNS PTR entry for the IPv4 addresses of this Server

        :param dns_ptr: The dns_ptr of this ServersGet200ResponseServersInnerPublicNetIpv4.
        :type dns_ptr: str
        """
        if dns_ptr is None:
            raise ValueError("Invalid value for `dns_ptr`, must not be `None`")

        self._dns_ptr = dns_ptr

    @property
    def id(self):
        """Gets the id of this ServersGet200ResponseServersInnerPublicNetIpv4.

        ID of the Resource

        :return: The id of this ServersGet200ResponseServersInnerPublicNetIpv4.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ServersGet200ResponseServersInnerPublicNetIpv4.

        ID of the Resource

        :param id: The id of this ServersGet200ResponseServersInnerPublicNetIpv4.
        :type id: int
        """

        self._id = id

    @property
    def ip(self):
        """Gets the ip of this ServersGet200ResponseServersInnerPublicNetIpv4.

        IP address (v4) of this Server

        :return: The ip of this ServersGet200ResponseServersInnerPublicNetIpv4.
        :rtype: str
        """
        return self._ip

    @ip.setter
    def ip(self, ip):
        """Sets the ip of this ServersGet200ResponseServersInnerPublicNetIpv4.

        IP address (v4) of this Server

        :param ip: The ip of this ServersGet200ResponseServersInnerPublicNetIpv4.
        :type ip: str
        """
        if ip is None:
            raise ValueError("Invalid value for `ip`, must not be `None`")

        self._ip = ip
