# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.certificate_status import CertificateStatus
from openapi_server.models.certificate_used_by_inner import CertificateUsedByInner
from openapi_server import util


class Certificate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, certificate: str=None, created: str=None, domain_names: List[str]=None, fingerprint: str=None, id: int=None, labels: Dict[str, str]=None, name: str=None, not_valid_after: str=None, not_valid_before: str=None, status: CertificateStatus=None, type: str=None, used_by: List[CertificateUsedByInner]=None):
        """Certificate - a model defined in OpenAPI

        :param certificate: The certificate of this Certificate.
        :param created: The created of this Certificate.
        :param domain_names: The domain_names of this Certificate.
        :param fingerprint: The fingerprint of this Certificate.
        :param id: The id of this Certificate.
        :param labels: The labels of this Certificate.
        :param name: The name of this Certificate.
        :param not_valid_after: The not_valid_after of this Certificate.
        :param not_valid_before: The not_valid_before of this Certificate.
        :param status: The status of this Certificate.
        :param type: The type of this Certificate.
        :param used_by: The used_by of this Certificate.
        """
        self.openapi_types = {
            'certificate': str,
            'created': str,
            'domain_names': List[str],
            'fingerprint': str,
            'id': int,
            'labels': Dict[str, str],
            'name': str,
            'not_valid_after': str,
            'not_valid_before': str,
            'status': CertificateStatus,
            'type': str,
            'used_by': List[CertificateUsedByInner]
        }

        self.attribute_map = {
            'certificate': 'certificate',
            'created': 'created',
            'domain_names': 'domain_names',
            'fingerprint': 'fingerprint',
            'id': 'id',
            'labels': 'labels',
            'name': 'name',
            'not_valid_after': 'not_valid_after',
            'not_valid_before': 'not_valid_before',
            'status': 'status',
            'type': 'type',
            'used_by': 'used_by'
        }

        self._certificate = certificate
        self._created = created
        self._domain_names = domain_names
        self._fingerprint = fingerprint
        self._id = id
        self._labels = labels
        self._name = name
        self._not_valid_after = not_valid_after
        self._not_valid_before = not_valid_before
        self._status = status
        self._type = type
        self._used_by = used_by

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Certificate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Certificate of this Certificate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def certificate(self):
        """Gets the certificate of this Certificate.

        Certificate and chain in PEM format, in order so that each record directly certifies the one preceding

        :return: The certificate of this Certificate.
        :rtype: str
        """
        return self._certificate

    @certificate.setter
    def certificate(self, certificate):
        """Sets the certificate of this Certificate.

        Certificate and chain in PEM format, in order so that each record directly certifies the one preceding

        :param certificate: The certificate of this Certificate.
        :type certificate: str
        """
        if certificate is None:
            raise ValueError("Invalid value for `certificate`, must not be `None`")

        self._certificate = certificate

    @property
    def created(self):
        """Gets the created of this Certificate.

        Point in time when the Resource was created (in ISO-8601 format)

        :return: The created of this Certificate.
        :rtype: str
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this Certificate.

        Point in time when the Resource was created (in ISO-8601 format)

        :param created: The created of this Certificate.
        :type created: str
        """
        if created is None:
            raise ValueError("Invalid value for `created`, must not be `None`")

        self._created = created

    @property
    def domain_names(self):
        """Gets the domain_names of this Certificate.

        Domains and subdomains covered by the Certificate

        :return: The domain_names of this Certificate.
        :rtype: List[str]
        """
        return self._domain_names

    @domain_names.setter
    def domain_names(self, domain_names):
        """Sets the domain_names of this Certificate.

        Domains and subdomains covered by the Certificate

        :param domain_names: The domain_names of this Certificate.
        :type domain_names: List[str]
        """
        if domain_names is None:
            raise ValueError("Invalid value for `domain_names`, must not be `None`")

        self._domain_names = domain_names

    @property
    def fingerprint(self):
        """Gets the fingerprint of this Certificate.

        SHA256 fingerprint of the Certificate

        :return: The fingerprint of this Certificate.
        :rtype: str
        """
        return self._fingerprint

    @fingerprint.setter
    def fingerprint(self, fingerprint):
        """Sets the fingerprint of this Certificate.

        SHA256 fingerprint of the Certificate

        :param fingerprint: The fingerprint of this Certificate.
        :type fingerprint: str
        """
        if fingerprint is None:
            raise ValueError("Invalid value for `fingerprint`, must not be `None`")

        self._fingerprint = fingerprint

    @property
    def id(self):
        """Gets the id of this Certificate.

        ID of the Resource

        :return: The id of this Certificate.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Certificate.

        ID of the Resource

        :param id: The id of this Certificate.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def labels(self):
        """Gets the labels of this Certificate.

        User-defined labels (key-value pairs)

        :return: The labels of this Certificate.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this Certificate.

        User-defined labels (key-value pairs)

        :param labels: The labels of this Certificate.
        :type labels: Dict[str, str]
        """
        if labels is None:
            raise ValueError("Invalid value for `labels`, must not be `None`")

        self._labels = labels

    @property
    def name(self):
        """Gets the name of this Certificate.

        Name of the Resource. Must be unique per Project.

        :return: The name of this Certificate.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Certificate.

        Name of the Resource. Must be unique per Project.

        :param name: The name of this Certificate.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def not_valid_after(self):
        """Gets the not_valid_after of this Certificate.

        Point in time when the Certificate stops being valid (in ISO-8601 format)

        :return: The not_valid_after of this Certificate.
        :rtype: str
        """
        return self._not_valid_after

    @not_valid_after.setter
    def not_valid_after(self, not_valid_after):
        """Sets the not_valid_after of this Certificate.

        Point in time when the Certificate stops being valid (in ISO-8601 format)

        :param not_valid_after: The not_valid_after of this Certificate.
        :type not_valid_after: str
        """
        if not_valid_after is None:
            raise ValueError("Invalid value for `not_valid_after`, must not be `None`")

        self._not_valid_after = not_valid_after

    @property
    def not_valid_before(self):
        """Gets the not_valid_before of this Certificate.

        Point in time when the Certificate becomes valid (in ISO-8601 format)

        :return: The not_valid_before of this Certificate.
        :rtype: str
        """
        return self._not_valid_before

    @not_valid_before.setter
    def not_valid_before(self, not_valid_before):
        """Sets the not_valid_before of this Certificate.

        Point in time when the Certificate becomes valid (in ISO-8601 format)

        :param not_valid_before: The not_valid_before of this Certificate.
        :type not_valid_before: str
        """
        if not_valid_before is None:
            raise ValueError("Invalid value for `not_valid_before`, must not be `None`")

        self._not_valid_before = not_valid_before

    @property
    def status(self):
        """Gets the status of this Certificate.


        :return: The status of this Certificate.
        :rtype: CertificateStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Certificate.


        :param status: The status of this Certificate.
        :type status: CertificateStatus
        """

        self._status = status

    @property
    def type(self):
        """Gets the type of this Certificate.

        Type of the Certificate

        :return: The type of this Certificate.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Certificate.

        Type of the Certificate

        :param type: The type of this Certificate.
        :type type: str
        """
        allowed_values = ["uploaded", "managed"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def used_by(self):
        """Gets the used_by of this Certificate.

        Resources currently using the Certificate

        :return: The used_by of this Certificate.
        :rtype: List[CertificateUsedByInner]
        """
        return self._used_by

    @used_by.setter
    def used_by(self, used_by):
        """Sets the used_by of this Certificate.

        Resources currently using the Certificate

        :param used_by: The used_by of this Certificate.
        :type used_by: List[CertificateUsedByInner]
        """
        if used_by is None:
            raise ValueError("Invalid value for `used_by`, must not be `None`")

        self._used_by = used_by
