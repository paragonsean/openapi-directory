# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.firewall_remove_from_resources import FirewallRemoveFromResources
from openapi_server import util


class RemoveFromResourcesRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, remove_from: List[FirewallRemoveFromResources]=None):
        """RemoveFromResourcesRequest - a model defined in OpenAPI

        :param remove_from: The remove_from of this RemoveFromResourcesRequest.
        """
        self.openapi_types = {
            'remove_from': List[FirewallRemoveFromResources]
        }

        self.attribute_map = {
            'remove_from': 'remove_from'
        }

        self._remove_from = remove_from

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RemoveFromResourcesRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RemoveFromResourcesRequest of this RemoveFromResourcesRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def remove_from(self):
        """Gets the remove_from of this RemoveFromResourcesRequest.

        Resources the Firewall should be removed from

        :return: The remove_from of this RemoveFromResourcesRequest.
        :rtype: List[FirewallRemoveFromResources]
        """
        return self._remove_from

    @remove_from.setter
    def remove_from(self, remove_from):
        """Sets the remove_from of this RemoveFromResourcesRequest.

        Resources the Firewall should be removed from

        :param remove_from: The remove_from of this RemoveFromResourcesRequest.
        :type remove_from: List[FirewallRemoveFromResources]
        """
        if remove_from is None:
            raise ValueError("Invalid value for `remove_from`, must not be `None`")

        self._remove_from = remove_from
