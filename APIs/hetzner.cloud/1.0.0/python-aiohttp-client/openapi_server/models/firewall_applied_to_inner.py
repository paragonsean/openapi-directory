# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.firewall_applied_to_inner_applied_to_resources_inner import FirewallAppliedToInnerAppliedToResourcesInner
from openapi_server.models.firewall_applied_to_inner_applied_to_resources_inner_server import FirewallAppliedToInnerAppliedToResourcesInnerServer
from openapi_server.models.firewall_applied_to_inner_label_selector import FirewallAppliedToInnerLabelSelector
from openapi_server import util


class FirewallAppliedToInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, applied_to_resources: List[FirewallAppliedToInnerAppliedToResourcesInner]=None, label_selector: FirewallAppliedToInnerLabelSelector=None, server: FirewallAppliedToInnerAppliedToResourcesInnerServer=None, type: str=None):
        """FirewallAppliedToInner - a model defined in OpenAPI

        :param applied_to_resources: The applied_to_resources of this FirewallAppliedToInner.
        :param label_selector: The label_selector of this FirewallAppliedToInner.
        :param server: The server of this FirewallAppliedToInner.
        :param type: The type of this FirewallAppliedToInner.
        """
        self.openapi_types = {
            'applied_to_resources': List[FirewallAppliedToInnerAppliedToResourcesInner],
            'label_selector': FirewallAppliedToInnerLabelSelector,
            'server': FirewallAppliedToInnerAppliedToResourcesInnerServer,
            'type': str
        }

        self.attribute_map = {
            'applied_to_resources': 'applied_to_resources',
            'label_selector': 'label_selector',
            'server': 'server',
            'type': 'type'
        }

        self._applied_to_resources = applied_to_resources
        self._label_selector = label_selector
        self._server = server
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FirewallAppliedToInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Firewall_applied_to_inner of this FirewallAppliedToInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def applied_to_resources(self):
        """Gets the applied_to_resources of this FirewallAppliedToInner.


        :return: The applied_to_resources of this FirewallAppliedToInner.
        :rtype: List[FirewallAppliedToInnerAppliedToResourcesInner]
        """
        return self._applied_to_resources

    @applied_to_resources.setter
    def applied_to_resources(self, applied_to_resources):
        """Sets the applied_to_resources of this FirewallAppliedToInner.


        :param applied_to_resources: The applied_to_resources of this FirewallAppliedToInner.
        :type applied_to_resources: List[FirewallAppliedToInnerAppliedToResourcesInner]
        """

        self._applied_to_resources = applied_to_resources

    @property
    def label_selector(self):
        """Gets the label_selector of this FirewallAppliedToInner.


        :return: The label_selector of this FirewallAppliedToInner.
        :rtype: FirewallAppliedToInnerLabelSelector
        """
        return self._label_selector

    @label_selector.setter
    def label_selector(self, label_selector):
        """Sets the label_selector of this FirewallAppliedToInner.


        :param label_selector: The label_selector of this FirewallAppliedToInner.
        :type label_selector: FirewallAppliedToInnerLabelSelector
        """

        self._label_selector = label_selector

    @property
    def server(self):
        """Gets the server of this FirewallAppliedToInner.


        :return: The server of this FirewallAppliedToInner.
        :rtype: FirewallAppliedToInnerAppliedToResourcesInnerServer
        """
        return self._server

    @server.setter
    def server(self, server):
        """Sets the server of this FirewallAppliedToInner.


        :param server: The server of this FirewallAppliedToInner.
        :type server: FirewallAppliedToInnerAppliedToResourcesInnerServer
        """

        self._server = server

    @property
    def type(self):
        """Gets the type of this FirewallAppliedToInner.

        Type of resource referenced

        :return: The type of this FirewallAppliedToInner.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this FirewallAppliedToInner.

        Type of resource referenced

        :param type: The type of this FirewallAppliedToInner.
        :type type: str
        """
        allowed_values = ["server", "label_selector"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
