# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ServersIdActionsChangeTypePostRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, server_type: str=None, upgrade_disk: bool=None):
        """ServersIdActionsChangeTypePostRequest - a model defined in OpenAPI

        :param server_type: The server_type of this ServersIdActionsChangeTypePostRequest.
        :param upgrade_disk: The upgrade_disk of this ServersIdActionsChangeTypePostRequest.
        """
        self.openapi_types = {
            'server_type': str,
            'upgrade_disk': bool
        }

        self.attribute_map = {
            'server_type': 'server_type',
            'upgrade_disk': 'upgrade_disk'
        }

        self._server_type = server_type
        self._upgrade_disk = upgrade_disk

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ServersIdActionsChangeTypePostRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The _servers__id__actions_change_type_post_request of this ServersIdActionsChangeTypePostRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def server_type(self):
        """Gets the server_type of this ServersIdActionsChangeTypePostRequest.

        ID or name of Server type the Server should migrate to

        :return: The server_type of this ServersIdActionsChangeTypePostRequest.
        :rtype: str
        """
        return self._server_type

    @server_type.setter
    def server_type(self, server_type):
        """Sets the server_type of this ServersIdActionsChangeTypePostRequest.

        ID or name of Server type the Server should migrate to

        :param server_type: The server_type of this ServersIdActionsChangeTypePostRequest.
        :type server_type: str
        """
        if server_type is None:
            raise ValueError("Invalid value for `server_type`, must not be `None`")

        self._server_type = server_type

    @property
    def upgrade_disk(self):
        """Gets the upgrade_disk of this ServersIdActionsChangeTypePostRequest.

        If false, do not upgrade the disk (this allows downgrading the Server type later)

        :return: The upgrade_disk of this ServersIdActionsChangeTypePostRequest.
        :rtype: bool
        """
        return self._upgrade_disk

    @upgrade_disk.setter
    def upgrade_disk(self, upgrade_disk):
        """Sets the upgrade_disk of this ServersIdActionsChangeTypePostRequest.

        If false, do not upgrade the disk (this allows downgrading the Server type later)

        :param upgrade_disk: The upgrade_disk of this ServersIdActionsChangeTypePostRequest.
        :type upgrade_disk: bool
        """
        if upgrade_disk is None:
            raise ValueError("Invalid value for `upgrade_disk`, must not be `None`")

        self._upgrade_disk = upgrade_disk
