# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class FloatingIpsGet200ResponseFloatingIpsInnerDnsPtrInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dns_ptr: str=None, ip: str=None):
        """FloatingIpsGet200ResponseFloatingIpsInnerDnsPtrInner - a model defined in OpenAPI

        :param dns_ptr: The dns_ptr of this FloatingIpsGet200ResponseFloatingIpsInnerDnsPtrInner.
        :param ip: The ip of this FloatingIpsGet200ResponseFloatingIpsInnerDnsPtrInner.
        """
        self.openapi_types = {
            'dns_ptr': str,
            'ip': str
        }

        self.attribute_map = {
            'dns_ptr': 'dns_ptr',
            'ip': 'ip'
        }

        self._dns_ptr = dns_ptr
        self._ip = ip

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FloatingIpsGet200ResponseFloatingIpsInnerDnsPtrInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The _floating_ips_get_200_response_floating_ips_inner_dns_ptr_inner of this FloatingIpsGet200ResponseFloatingIpsInnerDnsPtrInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dns_ptr(self):
        """Gets the dns_ptr of this FloatingIpsGet200ResponseFloatingIpsInnerDnsPtrInner.

        DNS pointer for the specific IP address

        :return: The dns_ptr of this FloatingIpsGet200ResponseFloatingIpsInnerDnsPtrInner.
        :rtype: str
        """
        return self._dns_ptr

    @dns_ptr.setter
    def dns_ptr(self, dns_ptr):
        """Sets the dns_ptr of this FloatingIpsGet200ResponseFloatingIpsInnerDnsPtrInner.

        DNS pointer for the specific IP address

        :param dns_ptr: The dns_ptr of this FloatingIpsGet200ResponseFloatingIpsInnerDnsPtrInner.
        :type dns_ptr: str
        """
        if dns_ptr is None:
            raise ValueError("Invalid value for `dns_ptr`, must not be `None`")

        self._dns_ptr = dns_ptr

    @property
    def ip(self):
        """Gets the ip of this FloatingIpsGet200ResponseFloatingIpsInnerDnsPtrInner.

        Single IPv4 or IPv6 address

        :return: The ip of this FloatingIpsGet200ResponseFloatingIpsInnerDnsPtrInner.
        :rtype: str
        """
        return self._ip

    @ip.setter
    def ip(self, ip):
        """Sets the ip of this FloatingIpsGet200ResponseFloatingIpsInnerDnsPtrInner.

        Single IPv4 or IPv6 address

        :param ip: The ip of this FloatingIpsGet200ResponseFloatingIpsInnerDnsPtrInner.
        :type ip: str
        """
        if ip is None:
            raise ValueError("Invalid value for `ip`, must not be `None`")

        self._ip = ip
