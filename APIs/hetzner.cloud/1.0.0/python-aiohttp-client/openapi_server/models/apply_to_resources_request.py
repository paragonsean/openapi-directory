# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.firewall_apply_to_resources import FirewallApplyToResources
from openapi_server import util


class ApplyToResourcesRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, apply_to: List[FirewallApplyToResources]=None):
        """ApplyToResourcesRequest - a model defined in OpenAPI

        :param apply_to: The apply_to of this ApplyToResourcesRequest.
        """
        self.openapi_types = {
            'apply_to': List[FirewallApplyToResources]
        }

        self.attribute_map = {
            'apply_to': 'apply_to'
        }

        self._apply_to = apply_to

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ApplyToResourcesRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ApplyToResourcesRequest of this ApplyToResourcesRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def apply_to(self):
        """Gets the apply_to of this ApplyToResourcesRequest.

        Resources the Firewall should be applied to

        :return: The apply_to of this ApplyToResourcesRequest.
        :rtype: List[FirewallApplyToResources]
        """
        return self._apply_to

    @apply_to.setter
    def apply_to(self, apply_to):
        """Sets the apply_to of this ApplyToResourcesRequest.

        Resources the Firewall should be applied to

        :param apply_to: The apply_to of this ApplyToResourcesRequest.
        :type apply_to: List[FirewallApplyToResources]
        """
        if apply_to is None:
            raise ValueError("Invalid value for `apply_to`, must not be `None`")

        self._apply_to = apply_to
