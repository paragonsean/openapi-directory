# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.load_balancer_service_health_check_http import LoadBalancerServiceHealthCheckHttp
from openapi_server import util


class LoadBalancerServiceHealthCheck(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, http: LoadBalancerServiceHealthCheckHttp=None, interval: int=None, port: int=None, protocol: str=None, retries: int=None, timeout: int=None):
        """LoadBalancerServiceHealthCheck - a model defined in OpenAPI

        :param http: The http of this LoadBalancerServiceHealthCheck.
        :param interval: The interval of this LoadBalancerServiceHealthCheck.
        :param port: The port of this LoadBalancerServiceHealthCheck.
        :param protocol: The protocol of this LoadBalancerServiceHealthCheck.
        :param retries: The retries of this LoadBalancerServiceHealthCheck.
        :param timeout: The timeout of this LoadBalancerServiceHealthCheck.
        """
        self.openapi_types = {
            'http': LoadBalancerServiceHealthCheckHttp,
            'interval': int,
            'port': int,
            'protocol': str,
            'retries': int,
            'timeout': int
        }

        self.attribute_map = {
            'http': 'http',
            'interval': 'interval',
            'port': 'port',
            'protocol': 'protocol',
            'retries': 'retries',
            'timeout': 'timeout'
        }

        self._http = http
        self._interval = interval
        self._port = port
        self._protocol = protocol
        self._retries = retries
        self._timeout = timeout

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LoadBalancerServiceHealthCheck':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LoadBalancerServiceHealthCheck of this LoadBalancerServiceHealthCheck.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def http(self):
        """Gets the http of this LoadBalancerServiceHealthCheck.


        :return: The http of this LoadBalancerServiceHealthCheck.
        :rtype: LoadBalancerServiceHealthCheckHttp
        """
        return self._http

    @http.setter
    def http(self, http):
        """Sets the http of this LoadBalancerServiceHealthCheck.


        :param http: The http of this LoadBalancerServiceHealthCheck.
        :type http: LoadBalancerServiceHealthCheckHttp
        """

        self._http = http

    @property
    def interval(self):
        """Gets the interval of this LoadBalancerServiceHealthCheck.

        Time interval in seconds health checks are performed

        :return: The interval of this LoadBalancerServiceHealthCheck.
        :rtype: int
        """
        return self._interval

    @interval.setter
    def interval(self, interval):
        """Sets the interval of this LoadBalancerServiceHealthCheck.

        Time interval in seconds health checks are performed

        :param interval: The interval of this LoadBalancerServiceHealthCheck.
        :type interval: int
        """
        if interval is None:
            raise ValueError("Invalid value for `interval`, must not be `None`")

        self._interval = interval

    @property
    def port(self):
        """Gets the port of this LoadBalancerServiceHealthCheck.

        Port the health check will be performed on

        :return: The port of this LoadBalancerServiceHealthCheck.
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this LoadBalancerServiceHealthCheck.

        Port the health check will be performed on

        :param port: The port of this LoadBalancerServiceHealthCheck.
        :type port: int
        """
        if port is None:
            raise ValueError("Invalid value for `port`, must not be `None`")

        self._port = port

    @property
    def protocol(self):
        """Gets the protocol of this LoadBalancerServiceHealthCheck.

        Type of the health check

        :return: The protocol of this LoadBalancerServiceHealthCheck.
        :rtype: str
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this LoadBalancerServiceHealthCheck.

        Type of the health check

        :param protocol: The protocol of this LoadBalancerServiceHealthCheck.
        :type protocol: str
        """
        allowed_values = ["tcp", "http"]  # noqa: E501
        if protocol not in allowed_values:
            raise ValueError(
                "Invalid value for `protocol` ({0}), must be one of {1}"
                .format(protocol, allowed_values)
            )

        self._protocol = protocol

    @property
    def retries(self):
        """Gets the retries of this LoadBalancerServiceHealthCheck.

        Unsuccessful retries needed until a target is considered unhealthy; an unhealthy target needs the same number of successful retries to become healthy again

        :return: The retries of this LoadBalancerServiceHealthCheck.
        :rtype: int
        """
        return self._retries

    @retries.setter
    def retries(self, retries):
        """Sets the retries of this LoadBalancerServiceHealthCheck.

        Unsuccessful retries needed until a target is considered unhealthy; an unhealthy target needs the same number of successful retries to become healthy again

        :param retries: The retries of this LoadBalancerServiceHealthCheck.
        :type retries: int
        """
        if retries is None:
            raise ValueError("Invalid value for `retries`, must not be `None`")

        self._retries = retries

    @property
    def timeout(self):
        """Gets the timeout of this LoadBalancerServiceHealthCheck.

        Time in seconds after an attempt is considered a timeout

        :return: The timeout of this LoadBalancerServiceHealthCheck.
        :rtype: int
        """
        return self._timeout

    @timeout.setter
    def timeout(self, timeout):
        """Sets the timeout of this LoadBalancerServiceHealthCheck.

        Time in seconds after an attempt is considered a timeout

        :param timeout: The timeout of this LoadBalancerServiceHealthCheck.
        :type timeout: int
        """
        if timeout is None:
            raise ValueError("Invalid value for `timeout`, must not be `None`")

        self._timeout = timeout
