# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateServerRequestPublicNet(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, enable_ipv4: bool=None, enable_ipv6: bool=None, ipv4: int=None, ipv6: int=None):
        """CreateServerRequestPublicNet - a model defined in OpenAPI

        :param enable_ipv4: The enable_ipv4 of this CreateServerRequestPublicNet.
        :param enable_ipv6: The enable_ipv6 of this CreateServerRequestPublicNet.
        :param ipv4: The ipv4 of this CreateServerRequestPublicNet.
        :param ipv6: The ipv6 of this CreateServerRequestPublicNet.
        """
        self.openapi_types = {
            'enable_ipv4': bool,
            'enable_ipv6': bool,
            'ipv4': int,
            'ipv6': int
        }

        self.attribute_map = {
            'enable_ipv4': 'enable_ipv4',
            'enable_ipv6': 'enable_ipv6',
            'ipv4': 'ipv4',
            'ipv6': 'ipv6'
        }

        self._enable_ipv4 = enable_ipv4
        self._enable_ipv6 = enable_ipv6
        self._ipv4 = ipv4
        self._ipv6 = ipv6

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateServerRequestPublicNet':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateServerRequest_public_net of this CreateServerRequestPublicNet.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def enable_ipv4(self):
        """Gets the enable_ipv4 of this CreateServerRequestPublicNet.

        Attach an IPv4 on the public NIC. If false, no IPv4 address will be attached. Defaults to true.

        :return: The enable_ipv4 of this CreateServerRequestPublicNet.
        :rtype: bool
        """
        return self._enable_ipv4

    @enable_ipv4.setter
    def enable_ipv4(self, enable_ipv4):
        """Sets the enable_ipv4 of this CreateServerRequestPublicNet.

        Attach an IPv4 on the public NIC. If false, no IPv4 address will be attached. Defaults to true.

        :param enable_ipv4: The enable_ipv4 of this CreateServerRequestPublicNet.
        :type enable_ipv4: bool
        """

        self._enable_ipv4 = enable_ipv4

    @property
    def enable_ipv6(self):
        """Gets the enable_ipv6 of this CreateServerRequestPublicNet.

        Attach an IPv6 on the public NIC. If false, no IPv6 address will be attached. Defaults to true.

        :return: The enable_ipv6 of this CreateServerRequestPublicNet.
        :rtype: bool
        """
        return self._enable_ipv6

    @enable_ipv6.setter
    def enable_ipv6(self, enable_ipv6):
        """Sets the enable_ipv6 of this CreateServerRequestPublicNet.

        Attach an IPv6 on the public NIC. If false, no IPv6 address will be attached. Defaults to true.

        :param enable_ipv6: The enable_ipv6 of this CreateServerRequestPublicNet.
        :type enable_ipv6: bool
        """

        self._enable_ipv6 = enable_ipv6

    @property
    def ipv4(self):
        """Gets the ipv4 of this CreateServerRequestPublicNet.

        ID of the ipv4 Primary IP to use. If omitted and enable_ipv4 is true, a new ipv4 Primary IP will automatically be created.

        :return: The ipv4 of this CreateServerRequestPublicNet.
        :rtype: int
        """
        return self._ipv4

    @ipv4.setter
    def ipv4(self, ipv4):
        """Sets the ipv4 of this CreateServerRequestPublicNet.

        ID of the ipv4 Primary IP to use. If omitted and enable_ipv4 is true, a new ipv4 Primary IP will automatically be created.

        :param ipv4: The ipv4 of this CreateServerRequestPublicNet.
        :type ipv4: int
        """

        self._ipv4 = ipv4

    @property
    def ipv6(self):
        """Gets the ipv6 of this CreateServerRequestPublicNet.

        ID of the ipv6 Primary IP to use. If omitted and enable_ipv6 is true, a new ipv6 Primary IP will automatically be created.

        :return: The ipv6 of this CreateServerRequestPublicNet.
        :rtype: int
        """
        return self._ipv6

    @ipv6.setter
    def ipv6(self, ipv6):
        """Sets the ipv6 of this CreateServerRequestPublicNet.

        ID of the ipv6 Primary IP to use. If omitted and enable_ipv6 is true, a new ipv6 Primary IP will automatically be created.

        :param ipv6: The ipv6 of this CreateServerRequestPublicNet.
        :type ipv6: int
        """

        self._ipv6 = ipv6
