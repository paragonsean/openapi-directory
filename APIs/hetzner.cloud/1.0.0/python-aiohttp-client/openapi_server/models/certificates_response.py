# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.actions_response_meta import ActionsResponseMeta
from openapi_server.models.certificate import Certificate
from openapi_server import util


class CertificatesResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, certificates: List[Certificate]=None, meta: ActionsResponseMeta=None):
        """CertificatesResponse - a model defined in OpenAPI

        :param certificates: The certificates of this CertificatesResponse.
        :param meta: The meta of this CertificatesResponse.
        """
        self.openapi_types = {
            'certificates': List[Certificate],
            'meta': ActionsResponseMeta
        }

        self.attribute_map = {
            'certificates': 'certificates',
            'meta': 'meta'
        }

        self._certificates = certificates
        self._meta = meta

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CertificatesResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CertificatesResponse of this CertificatesResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def certificates(self):
        """Gets the certificates of this CertificatesResponse.


        :return: The certificates of this CertificatesResponse.
        :rtype: List[Certificate]
        """
        return self._certificates

    @certificates.setter
    def certificates(self, certificates):
        """Sets the certificates of this CertificatesResponse.


        :param certificates: The certificates of this CertificatesResponse.
        :type certificates: List[Certificate]
        """
        if certificates is None:
            raise ValueError("Invalid value for `certificates`, must not be `None`")

        self._certificates = certificates

    @property
    def meta(self):
        """Gets the meta of this CertificatesResponse.


        :return: The meta of this CertificatesResponse.
        :rtype: ActionsResponseMeta
        """
        return self._meta

    @meta.setter
    def meta(self, meta):
        """Sets the meta of this CertificatesResponse.


        :param meta: The meta of this CertificatesResponse.
        :type meta: ActionsResponseMeta
        """

        self._meta = meta
