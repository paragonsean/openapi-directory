# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.firewall_applied_to_inner import FirewallAppliedToInner
from openapi_server.models.rule import Rule
from openapi_server import util


class Firewall(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, applied_to: List[FirewallAppliedToInner]=None, created: str=None, id: int=None, labels: Dict[str, str]=None, name: str=None, rules: List[Rule]=None):
        """Firewall - a model defined in OpenAPI

        :param applied_to: The applied_to of this Firewall.
        :param created: The created of this Firewall.
        :param id: The id of this Firewall.
        :param labels: The labels of this Firewall.
        :param name: The name of this Firewall.
        :param rules: The rules of this Firewall.
        """
        self.openapi_types = {
            'applied_to': List[FirewallAppliedToInner],
            'created': str,
            'id': int,
            'labels': Dict[str, str],
            'name': str,
            'rules': List[Rule]
        }

        self.attribute_map = {
            'applied_to': 'applied_to',
            'created': 'created',
            'id': 'id',
            'labels': 'labels',
            'name': 'name',
            'rules': 'rules'
        }

        self._applied_to = applied_to
        self._created = created
        self._id = id
        self._labels = labels
        self._name = name
        self._rules = rules

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Firewall':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Firewall of this Firewall.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def applied_to(self):
        """Gets the applied_to of this Firewall.


        :return: The applied_to of this Firewall.
        :rtype: List[FirewallAppliedToInner]
        """
        return self._applied_to

    @applied_to.setter
    def applied_to(self, applied_to):
        """Sets the applied_to of this Firewall.


        :param applied_to: The applied_to of this Firewall.
        :type applied_to: List[FirewallAppliedToInner]
        """
        if applied_to is None:
            raise ValueError("Invalid value for `applied_to`, must not be `None`")

        self._applied_to = applied_to

    @property
    def created(self):
        """Gets the created of this Firewall.

        Point in time when the Resource was created (in ISO-8601 format)

        :return: The created of this Firewall.
        :rtype: str
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this Firewall.

        Point in time when the Resource was created (in ISO-8601 format)

        :param created: The created of this Firewall.
        :type created: str
        """
        if created is None:
            raise ValueError("Invalid value for `created`, must not be `None`")

        self._created = created

    @property
    def id(self):
        """Gets the id of this Firewall.

        ID of the Resource

        :return: The id of this Firewall.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Firewall.

        ID of the Resource

        :param id: The id of this Firewall.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def labels(self):
        """Gets the labels of this Firewall.

        User-defined labels (key-value pairs)

        :return: The labels of this Firewall.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this Firewall.

        User-defined labels (key-value pairs)

        :param labels: The labels of this Firewall.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def name(self):
        """Gets the name of this Firewall.

        Name of the Resource. Must be unique per Project.

        :return: The name of this Firewall.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Firewall.

        Name of the Resource. Must be unique per Project.

        :param name: The name of this Firewall.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def rules(self):
        """Gets the rules of this Firewall.


        :return: The rules of this Firewall.
        :rtype: List[Rule]
        """
        return self._rules

    @rules.setter
    def rules(self, rules):
        """Sets the rules of this Firewall.


        :param rules: The rules of this Firewall.
        :type rules: List[Rule]
        """
        if rules is None:
            raise ValueError("Invalid value for `rules`, must not be `None`")

        self._rules = rules
