# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AssignPrimaryIPRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, assignee_id: int=None, assignee_type: str=None):
        """AssignPrimaryIPRequest - a model defined in OpenAPI

        :param assignee_id: The assignee_id of this AssignPrimaryIPRequest.
        :param assignee_type: The assignee_type of this AssignPrimaryIPRequest.
        """
        self.openapi_types = {
            'assignee_id': int,
            'assignee_type': str
        }

        self.attribute_map = {
            'assignee_id': 'assignee_id',
            'assignee_type': 'assignee_type'
        }

        self._assignee_id = assignee_id
        self._assignee_type = assignee_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AssignPrimaryIPRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AssignPrimaryIPRequest of this AssignPrimaryIPRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def assignee_id(self):
        """Gets the assignee_id of this AssignPrimaryIPRequest.

        ID of a resource of type `assignee_type`

        :return: The assignee_id of this AssignPrimaryIPRequest.
        :rtype: int
        """
        return self._assignee_id

    @assignee_id.setter
    def assignee_id(self, assignee_id):
        """Sets the assignee_id of this AssignPrimaryIPRequest.

        ID of a resource of type `assignee_type`

        :param assignee_id: The assignee_id of this AssignPrimaryIPRequest.
        :type assignee_id: int
        """
        if assignee_id is None:
            raise ValueError("Invalid value for `assignee_id`, must not be `None`")

        self._assignee_id = assignee_id

    @property
    def assignee_type(self):
        """Gets the assignee_type of this AssignPrimaryIPRequest.

        Type of resource assigning the Primary IP to

        :return: The assignee_type of this AssignPrimaryIPRequest.
        :rtype: str
        """
        return self._assignee_type

    @assignee_type.setter
    def assignee_type(self, assignee_type):
        """Sets the assignee_type of this AssignPrimaryIPRequest.

        Type of resource assigning the Primary IP to

        :param assignee_type: The assignee_type of this AssignPrimaryIPRequest.
        :type assignee_type: str
        """
        allowed_values = ["server"]  # noqa: E501
        if assignee_type not in allowed_values:
            raise ValueError(
                "Invalid value for `assignee_type` ({0}), must be one of {1}"
                .format(assignee_type, allowed_values)
            )

        self._assignee_type = assignee_type
