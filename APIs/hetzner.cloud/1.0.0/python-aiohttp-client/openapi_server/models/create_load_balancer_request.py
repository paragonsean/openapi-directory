# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_load_balancer_request_labels import CreateLoadBalancerRequestLabels
from openapi_server.models.load_balancer_algorithm import LoadBalancerAlgorithm
from openapi_server.models.load_balancer_service import LoadBalancerService
from openapi_server.models.load_balancer_target import LoadBalancerTarget
from openapi_server import util


class CreateLoadBalancerRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, algorithm: LoadBalancerAlgorithm=None, labels: CreateLoadBalancerRequestLabels=None, load_balancer_type: str=None, location: str=None, name: str=None, network: int=None, network_zone: str=None, public_interface: bool=None, services: List[LoadBalancerService]=None, targets: List[LoadBalancerTarget]=None):
        """CreateLoadBalancerRequest - a model defined in OpenAPI

        :param algorithm: The algorithm of this CreateLoadBalancerRequest.
        :param labels: The labels of this CreateLoadBalancerRequest.
        :param load_balancer_type: The load_balancer_type of this CreateLoadBalancerRequest.
        :param location: The location of this CreateLoadBalancerRequest.
        :param name: The name of this CreateLoadBalancerRequest.
        :param network: The network of this CreateLoadBalancerRequest.
        :param network_zone: The network_zone of this CreateLoadBalancerRequest.
        :param public_interface: The public_interface of this CreateLoadBalancerRequest.
        :param services: The services of this CreateLoadBalancerRequest.
        :param targets: The targets of this CreateLoadBalancerRequest.
        """
        self.openapi_types = {
            'algorithm': LoadBalancerAlgorithm,
            'labels': CreateLoadBalancerRequestLabels,
            'load_balancer_type': str,
            'location': str,
            'name': str,
            'network': int,
            'network_zone': str,
            'public_interface': bool,
            'services': List[LoadBalancerService],
            'targets': List[LoadBalancerTarget]
        }

        self.attribute_map = {
            'algorithm': 'algorithm',
            'labels': 'labels',
            'load_balancer_type': 'load_balancer_type',
            'location': 'location',
            'name': 'name',
            'network': 'network',
            'network_zone': 'network_zone',
            'public_interface': 'public_interface',
            'services': 'services',
            'targets': 'targets'
        }

        self._algorithm = algorithm
        self._labels = labels
        self._load_balancer_type = load_balancer_type
        self._location = location
        self._name = name
        self._network = network
        self._network_zone = network_zone
        self._public_interface = public_interface
        self._services = services
        self._targets = targets

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateLoadBalancerRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateLoadBalancerRequest of this CreateLoadBalancerRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def algorithm(self):
        """Gets the algorithm of this CreateLoadBalancerRequest.


        :return: The algorithm of this CreateLoadBalancerRequest.
        :rtype: LoadBalancerAlgorithm
        """
        return self._algorithm

    @algorithm.setter
    def algorithm(self, algorithm):
        """Sets the algorithm of this CreateLoadBalancerRequest.


        :param algorithm: The algorithm of this CreateLoadBalancerRequest.
        :type algorithm: LoadBalancerAlgorithm
        """
        if algorithm is None:
            raise ValueError("Invalid value for `algorithm`, must not be `None`")

        self._algorithm = algorithm

    @property
    def labels(self):
        """Gets the labels of this CreateLoadBalancerRequest.


        :return: The labels of this CreateLoadBalancerRequest.
        :rtype: CreateLoadBalancerRequestLabels
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this CreateLoadBalancerRequest.


        :param labels: The labels of this CreateLoadBalancerRequest.
        :type labels: CreateLoadBalancerRequestLabels
        """

        self._labels = labels

    @property
    def load_balancer_type(self):
        """Gets the load_balancer_type of this CreateLoadBalancerRequest.

        ID or name of the Load Balancer type this Load Balancer should be created with

        :return: The load_balancer_type of this CreateLoadBalancerRequest.
        :rtype: str
        """
        return self._load_balancer_type

    @load_balancer_type.setter
    def load_balancer_type(self, load_balancer_type):
        """Sets the load_balancer_type of this CreateLoadBalancerRequest.

        ID or name of the Load Balancer type this Load Balancer should be created with

        :param load_balancer_type: The load_balancer_type of this CreateLoadBalancerRequest.
        :type load_balancer_type: str
        """
        if load_balancer_type is None:
            raise ValueError("Invalid value for `load_balancer_type`, must not be `None`")

        self._load_balancer_type = load_balancer_type

    @property
    def location(self):
        """Gets the location of this CreateLoadBalancerRequest.

        ID or name of Location to create Load Balancer in

        :return: The location of this CreateLoadBalancerRequest.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this CreateLoadBalancerRequest.

        ID or name of Location to create Load Balancer in

        :param location: The location of this CreateLoadBalancerRequest.
        :type location: str
        """

        self._location = location

    @property
    def name(self):
        """Gets the name of this CreateLoadBalancerRequest.

        Name of the Load Balancer

        :return: The name of this CreateLoadBalancerRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateLoadBalancerRequest.

        Name of the Load Balancer

        :param name: The name of this CreateLoadBalancerRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def network(self):
        """Gets the network of this CreateLoadBalancerRequest.

        ID of the network the Load Balancer should be attached to on creation

        :return: The network of this CreateLoadBalancerRequest.
        :rtype: int
        """
        return self._network

    @network.setter
    def network(self, network):
        """Sets the network of this CreateLoadBalancerRequest.

        ID of the network the Load Balancer should be attached to on creation

        :param network: The network of this CreateLoadBalancerRequest.
        :type network: int
        """

        self._network = network

    @property
    def network_zone(self):
        """Gets the network_zone of this CreateLoadBalancerRequest.

        Name of network zone

        :return: The network_zone of this CreateLoadBalancerRequest.
        :rtype: str
        """
        return self._network_zone

    @network_zone.setter
    def network_zone(self, network_zone):
        """Sets the network_zone of this CreateLoadBalancerRequest.

        Name of network zone

        :param network_zone: The network_zone of this CreateLoadBalancerRequest.
        :type network_zone: str
        """

        self._network_zone = network_zone

    @property
    def public_interface(self):
        """Gets the public_interface of this CreateLoadBalancerRequest.

        Enable or disable the public interface of the Load Balancer

        :return: The public_interface of this CreateLoadBalancerRequest.
        :rtype: bool
        """
        return self._public_interface

    @public_interface.setter
    def public_interface(self, public_interface):
        """Sets the public_interface of this CreateLoadBalancerRequest.

        Enable or disable the public interface of the Load Balancer

        :param public_interface: The public_interface of this CreateLoadBalancerRequest.
        :type public_interface: bool
        """

        self._public_interface = public_interface

    @property
    def services(self):
        """Gets the services of this CreateLoadBalancerRequest.

        Array of services

        :return: The services of this CreateLoadBalancerRequest.
        :rtype: List[LoadBalancerService]
        """
        return self._services

    @services.setter
    def services(self, services):
        """Sets the services of this CreateLoadBalancerRequest.

        Array of services

        :param services: The services of this CreateLoadBalancerRequest.
        :type services: List[LoadBalancerService]
        """

        self._services = services

    @property
    def targets(self):
        """Gets the targets of this CreateLoadBalancerRequest.

        Array of targets

        :return: The targets of this CreateLoadBalancerRequest.
        :rtype: List[LoadBalancerTarget]
        """
        return self._targets

    @targets.setter
    def targets(self, targets):
        """Sets the targets of this CreateLoadBalancerRequest.

        Array of targets

        :param targets: The targets of this CreateLoadBalancerRequest.
        :type targets: List[LoadBalancerTarget]
        """

        self._targets = targets
