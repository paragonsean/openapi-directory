# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AttachVolumeRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, automount: bool=None, server: int=None):
        """AttachVolumeRequest - a model defined in OpenAPI

        :param automount: The automount of this AttachVolumeRequest.
        :param server: The server of this AttachVolumeRequest.
        """
        self.openapi_types = {
            'automount': bool,
            'server': int
        }

        self.attribute_map = {
            'automount': 'automount',
            'server': 'server'
        }

        self._automount = automount
        self._server = server

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AttachVolumeRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AttachVolumeRequest of this AttachVolumeRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def automount(self):
        """Gets the automount of this AttachVolumeRequest.

        Auto-mount the Volume after attaching it

        :return: The automount of this AttachVolumeRequest.
        :rtype: bool
        """
        return self._automount

    @automount.setter
    def automount(self, automount):
        """Sets the automount of this AttachVolumeRequest.

        Auto-mount the Volume after attaching it

        :param automount: The automount of this AttachVolumeRequest.
        :type automount: bool
        """

        self._automount = automount

    @property
    def server(self):
        """Gets the server of this AttachVolumeRequest.

        ID of the Server the Volume will be attached to

        :return: The server of this AttachVolumeRequest.
        :rtype: int
        """
        return self._server

    @server.setter
    def server(self, server):
        """Sets the server of this AttachVolumeRequest.

        ID of the Server the Volume will be attached to

        :param server: The server of this AttachVolumeRequest.
        :type server: int
        """
        if server is None:
            raise ValueError("Invalid value for `server`, must not be `None`")

        self._server = server
