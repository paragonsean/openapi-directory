# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.floating_ips_get200_response_floating_ips_inner_protection import FloatingIpsGet200ResponseFloatingIpsInnerProtection
from openapi_server.models.primary_ip_datacenter import PrimaryIPDatacenter
from openapi_server.models.primary_ip_dns_ptr_inner import PrimaryIPDnsPtrInner
from openapi_server import util


class PrimaryIP(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, assignee_id: int=None, assignee_type: str=None, auto_delete: bool=None, blocked: bool=None, created: str=None, datacenter: PrimaryIPDatacenter=None, dns_ptr: List[PrimaryIPDnsPtrInner]=None, id: int=None, ip: str=None, labels: Dict[str, str]=None, name: str=None, protection: FloatingIpsGet200ResponseFloatingIpsInnerProtection=None, type: str=None):
        """PrimaryIP - a model defined in OpenAPI

        :param assignee_id: The assignee_id of this PrimaryIP.
        :param assignee_type: The assignee_type of this PrimaryIP.
        :param auto_delete: The auto_delete of this PrimaryIP.
        :param blocked: The blocked of this PrimaryIP.
        :param created: The created of this PrimaryIP.
        :param datacenter: The datacenter of this PrimaryIP.
        :param dns_ptr: The dns_ptr of this PrimaryIP.
        :param id: The id of this PrimaryIP.
        :param ip: The ip of this PrimaryIP.
        :param labels: The labels of this PrimaryIP.
        :param name: The name of this PrimaryIP.
        :param protection: The protection of this PrimaryIP.
        :param type: The type of this PrimaryIP.
        """
        self.openapi_types = {
            'assignee_id': int,
            'assignee_type': str,
            'auto_delete': bool,
            'blocked': bool,
            'created': str,
            'datacenter': PrimaryIPDatacenter,
            'dns_ptr': List[PrimaryIPDnsPtrInner],
            'id': int,
            'ip': str,
            'labels': Dict[str, str],
            'name': str,
            'protection': FloatingIpsGet200ResponseFloatingIpsInnerProtection,
            'type': str
        }

        self.attribute_map = {
            'assignee_id': 'assignee_id',
            'assignee_type': 'assignee_type',
            'auto_delete': 'auto_delete',
            'blocked': 'blocked',
            'created': 'created',
            'datacenter': 'datacenter',
            'dns_ptr': 'dns_ptr',
            'id': 'id',
            'ip': 'ip',
            'labels': 'labels',
            'name': 'name',
            'protection': 'protection',
            'type': 'type'
        }

        self._assignee_id = assignee_id
        self._assignee_type = assignee_type
        self._auto_delete = auto_delete
        self._blocked = blocked
        self._created = created
        self._datacenter = datacenter
        self._dns_ptr = dns_ptr
        self._id = id
        self._ip = ip
        self._labels = labels
        self._name = name
        self._protection = protection
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PrimaryIP':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PrimaryIP of this PrimaryIP.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def assignee_id(self):
        """Gets the assignee_id of this PrimaryIP.

        ID of the resource the Primary IP is assigned to, null if it is not assigned at all

        :return: The assignee_id of this PrimaryIP.
        :rtype: int
        """
        return self._assignee_id

    @assignee_id.setter
    def assignee_id(self, assignee_id):
        """Sets the assignee_id of this PrimaryIP.

        ID of the resource the Primary IP is assigned to, null if it is not assigned at all

        :param assignee_id: The assignee_id of this PrimaryIP.
        :type assignee_id: int
        """
        if assignee_id is None:
            raise ValueError("Invalid value for `assignee_id`, must not be `None`")

        self._assignee_id = assignee_id

    @property
    def assignee_type(self):
        """Gets the assignee_type of this PrimaryIP.

        Resource type the Primary IP can be assigned to

        :return: The assignee_type of this PrimaryIP.
        :rtype: str
        """
        return self._assignee_type

    @assignee_type.setter
    def assignee_type(self, assignee_type):
        """Sets the assignee_type of this PrimaryIP.

        Resource type the Primary IP can be assigned to

        :param assignee_type: The assignee_type of this PrimaryIP.
        :type assignee_type: str
        """
        allowed_values = ["server"]  # noqa: E501
        if assignee_type not in allowed_values:
            raise ValueError(
                "Invalid value for `assignee_type` ({0}), must be one of {1}"
                .format(assignee_type, allowed_values)
            )

        self._assignee_type = assignee_type

    @property
    def auto_delete(self):
        """Gets the auto_delete of this PrimaryIP.

        Delete this Primary IP when the resource it is assigned to is deleted

        :return: The auto_delete of this PrimaryIP.
        :rtype: bool
        """
        return self._auto_delete

    @auto_delete.setter
    def auto_delete(self, auto_delete):
        """Sets the auto_delete of this PrimaryIP.

        Delete this Primary IP when the resource it is assigned to is deleted

        :param auto_delete: The auto_delete of this PrimaryIP.
        :type auto_delete: bool
        """
        if auto_delete is None:
            raise ValueError("Invalid value for `auto_delete`, must not be `None`")

        self._auto_delete = auto_delete

    @property
    def blocked(self):
        """Gets the blocked of this PrimaryIP.

        Whether the IP is blocked

        :return: The blocked of this PrimaryIP.
        :rtype: bool
        """
        return self._blocked

    @blocked.setter
    def blocked(self, blocked):
        """Sets the blocked of this PrimaryIP.

        Whether the IP is blocked

        :param blocked: The blocked of this PrimaryIP.
        :type blocked: bool
        """
        if blocked is None:
            raise ValueError("Invalid value for `blocked`, must not be `None`")

        self._blocked = blocked

    @property
    def created(self):
        """Gets the created of this PrimaryIP.

        Point in time when the Resource was created (in ISO-8601 format)

        :return: The created of this PrimaryIP.
        :rtype: str
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this PrimaryIP.

        Point in time when the Resource was created (in ISO-8601 format)

        :param created: The created of this PrimaryIP.
        :type created: str
        """
        if created is None:
            raise ValueError("Invalid value for `created`, must not be `None`")

        self._created = created

    @property
    def datacenter(self):
        """Gets the datacenter of this PrimaryIP.


        :return: The datacenter of this PrimaryIP.
        :rtype: PrimaryIPDatacenter
        """
        return self._datacenter

    @datacenter.setter
    def datacenter(self, datacenter):
        """Sets the datacenter of this PrimaryIP.


        :param datacenter: The datacenter of this PrimaryIP.
        :type datacenter: PrimaryIPDatacenter
        """
        if datacenter is None:
            raise ValueError("Invalid value for `datacenter`, must not be `None`")

        self._datacenter = datacenter

    @property
    def dns_ptr(self):
        """Gets the dns_ptr of this PrimaryIP.

        Array of reverse DNS entries

        :return: The dns_ptr of this PrimaryIP.
        :rtype: List[PrimaryIPDnsPtrInner]
        """
        return self._dns_ptr

    @dns_ptr.setter
    def dns_ptr(self, dns_ptr):
        """Sets the dns_ptr of this PrimaryIP.

        Array of reverse DNS entries

        :param dns_ptr: The dns_ptr of this PrimaryIP.
        :type dns_ptr: List[PrimaryIPDnsPtrInner]
        """
        if dns_ptr is None:
            raise ValueError("Invalid value for `dns_ptr`, must not be `None`")

        self._dns_ptr = dns_ptr

    @property
    def id(self):
        """Gets the id of this PrimaryIP.

        ID of the Resource

        :return: The id of this PrimaryIP.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PrimaryIP.

        ID of the Resource

        :param id: The id of this PrimaryIP.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def ip(self):
        """Gets the ip of this PrimaryIP.

        IP address

        :return: The ip of this PrimaryIP.
        :rtype: str
        """
        return self._ip

    @ip.setter
    def ip(self, ip):
        """Sets the ip of this PrimaryIP.

        IP address

        :param ip: The ip of this PrimaryIP.
        :type ip: str
        """
        if ip is None:
            raise ValueError("Invalid value for `ip`, must not be `None`")

        self._ip = ip

    @property
    def labels(self):
        """Gets the labels of this PrimaryIP.

        User-defined labels (key-value pairs)

        :return: The labels of this PrimaryIP.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this PrimaryIP.

        User-defined labels (key-value pairs)

        :param labels: The labels of this PrimaryIP.
        :type labels: Dict[str, str]
        """
        if labels is None:
            raise ValueError("Invalid value for `labels`, must not be `None`")

        self._labels = labels

    @property
    def name(self):
        """Gets the name of this PrimaryIP.

        Name of the Resource. Must be unique per Project.

        :return: The name of this PrimaryIP.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PrimaryIP.

        Name of the Resource. Must be unique per Project.

        :param name: The name of this PrimaryIP.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def protection(self):
        """Gets the protection of this PrimaryIP.


        :return: The protection of this PrimaryIP.
        :rtype: FloatingIpsGet200ResponseFloatingIpsInnerProtection
        """
        return self._protection

    @protection.setter
    def protection(self, protection):
        """Sets the protection of this PrimaryIP.


        :param protection: The protection of this PrimaryIP.
        :type protection: FloatingIpsGet200ResponseFloatingIpsInnerProtection
        """
        if protection is None:
            raise ValueError("Invalid value for `protection`, must not be `None`")

        self._protection = protection

    @property
    def type(self):
        """Gets the type of this PrimaryIP.

        Type of the Primary IP

        :return: The type of this PrimaryIP.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this PrimaryIP.

        Type of the Primary IP

        :param type: The type of this PrimaryIP.
        :type type: str
        """
        allowed_values = ["ipv4", "ipv6"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
