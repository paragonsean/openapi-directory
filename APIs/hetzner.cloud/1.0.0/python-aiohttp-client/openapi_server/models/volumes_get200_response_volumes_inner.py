# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.floating_ips_get200_response_floating_ips_inner_protection import FloatingIpsGet200ResponseFloatingIpsInnerProtection
from openapi_server.models.volumes_get200_response_volumes_inner_location import VolumesGet200ResponseVolumesInnerLocation
from openapi_server import util


class VolumesGet200ResponseVolumesInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created: str=None, format: str=None, id: int=None, labels: Dict[str, str]=None, linux_device: str=None, location: VolumesGet200ResponseVolumesInnerLocation=None, name: str=None, protection: FloatingIpsGet200ResponseFloatingIpsInnerProtection=None, server: int=None, size: float=None, status: str=None):
        """VolumesGet200ResponseVolumesInner - a model defined in OpenAPI

        :param created: The created of this VolumesGet200ResponseVolumesInner.
        :param format: The format of this VolumesGet200ResponseVolumesInner.
        :param id: The id of this VolumesGet200ResponseVolumesInner.
        :param labels: The labels of this VolumesGet200ResponseVolumesInner.
        :param linux_device: The linux_device of this VolumesGet200ResponseVolumesInner.
        :param location: The location of this VolumesGet200ResponseVolumesInner.
        :param name: The name of this VolumesGet200ResponseVolumesInner.
        :param protection: The protection of this VolumesGet200ResponseVolumesInner.
        :param server: The server of this VolumesGet200ResponseVolumesInner.
        :param size: The size of this VolumesGet200ResponseVolumesInner.
        :param status: The status of this VolumesGet200ResponseVolumesInner.
        """
        self.openapi_types = {
            'created': str,
            'format': str,
            'id': int,
            'labels': Dict[str, str],
            'linux_device': str,
            'location': VolumesGet200ResponseVolumesInnerLocation,
            'name': str,
            'protection': FloatingIpsGet200ResponseFloatingIpsInnerProtection,
            'server': int,
            'size': float,
            'status': str
        }

        self.attribute_map = {
            'created': 'created',
            'format': 'format',
            'id': 'id',
            'labels': 'labels',
            'linux_device': 'linux_device',
            'location': 'location',
            'name': 'name',
            'protection': 'protection',
            'server': 'server',
            'size': 'size',
            'status': 'status'
        }

        self._created = created
        self._format = format
        self._id = id
        self._labels = labels
        self._linux_device = linux_device
        self._location = location
        self._name = name
        self._protection = protection
        self._server = server
        self._size = size
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VolumesGet200ResponseVolumesInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The _volumes_get_200_response_volumes_inner of this VolumesGet200ResponseVolumesInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created(self):
        """Gets the created of this VolumesGet200ResponseVolumesInner.

        Point in time when the Resource was created (in ISO-8601 format)

        :return: The created of this VolumesGet200ResponseVolumesInner.
        :rtype: str
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this VolumesGet200ResponseVolumesInner.

        Point in time when the Resource was created (in ISO-8601 format)

        :param created: The created of this VolumesGet200ResponseVolumesInner.
        :type created: str
        """
        if created is None:
            raise ValueError("Invalid value for `created`, must not be `None`")

        self._created = created

    @property
    def format(self):
        """Gets the format of this VolumesGet200ResponseVolumesInner.

        Filesystem of the Volume if formatted on creation, null if not formatted on creation

        :return: The format of this VolumesGet200ResponseVolumesInner.
        :rtype: str
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this VolumesGet200ResponseVolumesInner.

        Filesystem of the Volume if formatted on creation, null if not formatted on creation

        :param format: The format of this VolumesGet200ResponseVolumesInner.
        :type format: str
        """
        if format is None:
            raise ValueError("Invalid value for `format`, must not be `None`")

        self._format = format

    @property
    def id(self):
        """Gets the id of this VolumesGet200ResponseVolumesInner.

        ID of the Resource

        :return: The id of this VolumesGet200ResponseVolumesInner.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this VolumesGet200ResponseVolumesInner.

        ID of the Resource

        :param id: The id of this VolumesGet200ResponseVolumesInner.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def labels(self):
        """Gets the labels of this VolumesGet200ResponseVolumesInner.

        User-defined labels (key-value pairs)

        :return: The labels of this VolumesGet200ResponseVolumesInner.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this VolumesGet200ResponseVolumesInner.

        User-defined labels (key-value pairs)

        :param labels: The labels of this VolumesGet200ResponseVolumesInner.
        :type labels: Dict[str, str]
        """
        if labels is None:
            raise ValueError("Invalid value for `labels`, must not be `None`")

        self._labels = labels

    @property
    def linux_device(self):
        """Gets the linux_device of this VolumesGet200ResponseVolumesInner.

        Device path on the file system for the Volume

        :return: The linux_device of this VolumesGet200ResponseVolumesInner.
        :rtype: str
        """
        return self._linux_device

    @linux_device.setter
    def linux_device(self, linux_device):
        """Sets the linux_device of this VolumesGet200ResponseVolumesInner.

        Device path on the file system for the Volume

        :param linux_device: The linux_device of this VolumesGet200ResponseVolumesInner.
        :type linux_device: str
        """
        if linux_device is None:
            raise ValueError("Invalid value for `linux_device`, must not be `None`")

        self._linux_device = linux_device

    @property
    def location(self):
        """Gets the location of this VolumesGet200ResponseVolumesInner.


        :return: The location of this VolumesGet200ResponseVolumesInner.
        :rtype: VolumesGet200ResponseVolumesInnerLocation
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this VolumesGet200ResponseVolumesInner.


        :param location: The location of this VolumesGet200ResponseVolumesInner.
        :type location: VolumesGet200ResponseVolumesInnerLocation
        """
        if location is None:
            raise ValueError("Invalid value for `location`, must not be `None`")

        self._location = location

    @property
    def name(self):
        """Gets the name of this VolumesGet200ResponseVolumesInner.

        Name of the Resource. Must be unique per Project.

        :return: The name of this VolumesGet200ResponseVolumesInner.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this VolumesGet200ResponseVolumesInner.

        Name of the Resource. Must be unique per Project.

        :param name: The name of this VolumesGet200ResponseVolumesInner.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def protection(self):
        """Gets the protection of this VolumesGet200ResponseVolumesInner.


        :return: The protection of this VolumesGet200ResponseVolumesInner.
        :rtype: FloatingIpsGet200ResponseFloatingIpsInnerProtection
        """
        return self._protection

    @protection.setter
    def protection(self, protection):
        """Sets the protection of this VolumesGet200ResponseVolumesInner.


        :param protection: The protection of this VolumesGet200ResponseVolumesInner.
        :type protection: FloatingIpsGet200ResponseFloatingIpsInnerProtection
        """
        if protection is None:
            raise ValueError("Invalid value for `protection`, must not be `None`")

        self._protection = protection

    @property
    def server(self):
        """Gets the server of this VolumesGet200ResponseVolumesInner.

        ID of the Server the Volume is attached to, null if it is not attached at all

        :return: The server of this VolumesGet200ResponseVolumesInner.
        :rtype: int
        """
        return self._server

    @server.setter
    def server(self, server):
        """Sets the server of this VolumesGet200ResponseVolumesInner.

        ID of the Server the Volume is attached to, null if it is not attached at all

        :param server: The server of this VolumesGet200ResponseVolumesInner.
        :type server: int
        """
        if server is None:
            raise ValueError("Invalid value for `server`, must not be `None`")

        self._server = server

    @property
    def size(self):
        """Gets the size of this VolumesGet200ResponseVolumesInner.

        Size in GB of the Volume

        :return: The size of this VolumesGet200ResponseVolumesInner.
        :rtype: float
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this VolumesGet200ResponseVolumesInner.

        Size in GB of the Volume

        :param size: The size of this VolumesGet200ResponseVolumesInner.
        :type size: float
        """
        if size is None:
            raise ValueError("Invalid value for `size`, must not be `None`")

        self._size = size

    @property
    def status(self):
        """Gets the status of this VolumesGet200ResponseVolumesInner.

        Current status of the Volume

        :return: The status of this VolumesGet200ResponseVolumesInner.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this VolumesGet200ResponseVolumesInner.

        Current status of the Volume

        :param status: The status of this VolumesGet200ResponseVolumesInner.
        :type status: str
        """
        allowed_values = ["creating", "available"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status
