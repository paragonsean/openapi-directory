# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.datacenters_get200_response_datacenters_inner_location import DatacentersGet200ResponseDatacentersInnerLocation
from openapi_server.models.datacenters_get200_response_datacenters_inner_server_types import DatacentersGet200ResponseDatacentersInnerServerTypes
from openapi_server import util


class ServersGet200ResponseServersInnerDatacenter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, id: int=None, location: DatacentersGet200ResponseDatacentersInnerLocation=None, name: str=None, server_types: DatacentersGet200ResponseDatacentersInnerServerTypes=None):
        """ServersGet200ResponseServersInnerDatacenter - a model defined in OpenAPI

        :param description: The description of this ServersGet200ResponseServersInnerDatacenter.
        :param id: The id of this ServersGet200ResponseServersInnerDatacenter.
        :param location: The location of this ServersGet200ResponseServersInnerDatacenter.
        :param name: The name of this ServersGet200ResponseServersInnerDatacenter.
        :param server_types: The server_types of this ServersGet200ResponseServersInnerDatacenter.
        """
        self.openapi_types = {
            'description': str,
            'id': int,
            'location': DatacentersGet200ResponseDatacentersInnerLocation,
            'name': str,
            'server_types': DatacentersGet200ResponseDatacentersInnerServerTypes
        }

        self.attribute_map = {
            'description': 'description',
            'id': 'id',
            'location': 'location',
            'name': 'name',
            'server_types': 'server_types'
        }

        self._description = description
        self._id = id
        self._location = location
        self._name = name
        self._server_types = server_types

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ServersGet200ResponseServersInnerDatacenter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The _servers_get_200_response_servers_inner_datacenter of this ServersGet200ResponseServersInnerDatacenter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this ServersGet200ResponseServersInnerDatacenter.

        Description of the Datacenter

        :return: The description of this ServersGet200ResponseServersInnerDatacenter.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ServersGet200ResponseServersInnerDatacenter.

        Description of the Datacenter

        :param description: The description of this ServersGet200ResponseServersInnerDatacenter.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def id(self):
        """Gets the id of this ServersGet200ResponseServersInnerDatacenter.

        ID of the Resource

        :return: The id of this ServersGet200ResponseServersInnerDatacenter.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ServersGet200ResponseServersInnerDatacenter.

        ID of the Resource

        :param id: The id of this ServersGet200ResponseServersInnerDatacenter.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def location(self):
        """Gets the location of this ServersGet200ResponseServersInnerDatacenter.


        :return: The location of this ServersGet200ResponseServersInnerDatacenter.
        :rtype: DatacentersGet200ResponseDatacentersInnerLocation
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this ServersGet200ResponseServersInnerDatacenter.


        :param location: The location of this ServersGet200ResponseServersInnerDatacenter.
        :type location: DatacentersGet200ResponseDatacentersInnerLocation
        """
        if location is None:
            raise ValueError("Invalid value for `location`, must not be `None`")

        self._location = location

    @property
    def name(self):
        """Gets the name of this ServersGet200ResponseServersInnerDatacenter.

        Unique identifier of the Datacenter

        :return: The name of this ServersGet200ResponseServersInnerDatacenter.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ServersGet200ResponseServersInnerDatacenter.

        Unique identifier of the Datacenter

        :param name: The name of this ServersGet200ResponseServersInnerDatacenter.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def server_types(self):
        """Gets the server_types of this ServersGet200ResponseServersInnerDatacenter.


        :return: The server_types of this ServersGet200ResponseServersInnerDatacenter.
        :rtype: DatacentersGet200ResponseDatacentersInnerServerTypes
        """
        return self._server_types

    @server_types.setter
    def server_types(self, server_types):
        """Sets the server_types of this ServersGet200ResponseServersInnerDatacenter.


        :param server_types: The server_types of this ServersGet200ResponseServersInnerDatacenter.
        :type server_types: DatacentersGet200ResponseDatacentersInnerServerTypes
        """
        if server_types is None:
            raise ValueError("Invalid value for `server_types`, must not be `None`")

        self._server_types = server_types
