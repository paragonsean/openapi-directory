# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.pricing_get200_response_pricing_server_types_inner_prices_inner_price_hourly import PricingGet200ResponsePricingServerTypesInnerPricesInnerPriceHourly
from openapi_server.models.pricing_get200_response_pricing_server_types_inner_prices_inner_price_monthly import PricingGet200ResponsePricingServerTypesInnerPricesInnerPriceMonthly
from openapi_server import util


class PricingGet200ResponsePricingServerTypesInnerPricesInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, location: str=None, price_hourly: PricingGet200ResponsePricingServerTypesInnerPricesInnerPriceHourly=None, price_monthly: PricingGet200ResponsePricingServerTypesInnerPricesInnerPriceMonthly=None):
        """PricingGet200ResponsePricingServerTypesInnerPricesInner - a model defined in OpenAPI

        :param location: The location of this PricingGet200ResponsePricingServerTypesInnerPricesInner.
        :param price_hourly: The price_hourly of this PricingGet200ResponsePricingServerTypesInnerPricesInner.
        :param price_monthly: The price_monthly of this PricingGet200ResponsePricingServerTypesInnerPricesInner.
        """
        self.openapi_types = {
            'location': str,
            'price_hourly': PricingGet200ResponsePricingServerTypesInnerPricesInnerPriceHourly,
            'price_monthly': PricingGet200ResponsePricingServerTypesInnerPricesInnerPriceMonthly
        }

        self.attribute_map = {
            'location': 'location',
            'price_hourly': 'price_hourly',
            'price_monthly': 'price_monthly'
        }

        self._location = location
        self._price_hourly = price_hourly
        self._price_monthly = price_monthly

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PricingGet200ResponsePricingServerTypesInnerPricesInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The _pricing_get_200_response_pricing_server_types_inner_prices_inner of this PricingGet200ResponsePricingServerTypesInnerPricesInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def location(self):
        """Gets the location of this PricingGet200ResponsePricingServerTypesInnerPricesInner.

        Name of the Location the price is for

        :return: The location of this PricingGet200ResponsePricingServerTypesInnerPricesInner.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this PricingGet200ResponsePricingServerTypesInnerPricesInner.

        Name of the Location the price is for

        :param location: The location of this PricingGet200ResponsePricingServerTypesInnerPricesInner.
        :type location: str
        """
        if location is None:
            raise ValueError("Invalid value for `location`, must not be `None`")

        self._location = location

    @property
    def price_hourly(self):
        """Gets the price_hourly of this PricingGet200ResponsePricingServerTypesInnerPricesInner.


        :return: The price_hourly of this PricingGet200ResponsePricingServerTypesInnerPricesInner.
        :rtype: PricingGet200ResponsePricingServerTypesInnerPricesInnerPriceHourly
        """
        return self._price_hourly

    @price_hourly.setter
    def price_hourly(self, price_hourly):
        """Sets the price_hourly of this PricingGet200ResponsePricingServerTypesInnerPricesInner.


        :param price_hourly: The price_hourly of this PricingGet200ResponsePricingServerTypesInnerPricesInner.
        :type price_hourly: PricingGet200ResponsePricingServerTypesInnerPricesInnerPriceHourly
        """
        if price_hourly is None:
            raise ValueError("Invalid value for `price_hourly`, must not be `None`")

        self._price_hourly = price_hourly

    @property
    def price_monthly(self):
        """Gets the price_monthly of this PricingGet200ResponsePricingServerTypesInnerPricesInner.


        :return: The price_monthly of this PricingGet200ResponsePricingServerTypesInnerPricesInner.
        :rtype: PricingGet200ResponsePricingServerTypesInnerPricesInnerPriceMonthly
        """
        return self._price_monthly

    @price_monthly.setter
    def price_monthly(self, price_monthly):
        """Sets the price_monthly of this PricingGet200ResponsePricingServerTypesInnerPricesInner.


        :param price_monthly: The price_monthly of this PricingGet200ResponsePricingServerTypesInnerPricesInner.
        :type price_monthly: PricingGet200ResponsePricingServerTypesInnerPricesInnerPriceMonthly
        """
        if price_monthly is None:
            raise ValueError("Invalid value for `price_monthly`, must not be `None`")

        self._price_monthly = price_monthly
