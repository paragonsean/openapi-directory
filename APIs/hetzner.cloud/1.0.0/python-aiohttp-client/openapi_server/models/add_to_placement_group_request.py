# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AddToPlacementGroupRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, placement_group: int=None):
        """AddToPlacementGroupRequest - a model defined in OpenAPI

        :param placement_group: The placement_group of this AddToPlacementGroupRequest.
        """
        self.openapi_types = {
            'placement_group': int
        }

        self.attribute_map = {
            'placement_group': 'placement_group'
        }

        self._placement_group = placement_group

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AddToPlacementGroupRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AddToPlacementGroupRequest of this AddToPlacementGroupRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def placement_group(self):
        """Gets the placement_group of this AddToPlacementGroupRequest.

        ID of Placement Group the Server should be added to

        :return: The placement_group of this AddToPlacementGroupRequest.
        :rtype: int
        """
        return self._placement_group

    @placement_group.setter
    def placement_group(self, placement_group):
        """Sets the placement_group of this AddToPlacementGroupRequest.

        ID of Placement Group the Server should be added to

        :param placement_group: The placement_group of this AddToPlacementGroupRequest.
        :type placement_group: int
        """
        if placement_group is None:
            raise ValueError("Invalid value for `placement_group`, must not be `None`")

        self._placement_group = placement_group
