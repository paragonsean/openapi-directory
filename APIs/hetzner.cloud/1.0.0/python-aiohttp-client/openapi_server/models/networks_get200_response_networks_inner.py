# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.networks_get200_response_networks_inner_protection import NetworksGet200ResponseNetworksInnerProtection
from openapi_server.models.networks_get200_response_networks_inner_routes_inner import NetworksGet200ResponseNetworksInnerRoutesInner
from openapi_server.models.networks_get200_response_networks_inner_subnets_inner import NetworksGet200ResponseNetworksInnerSubnetsInner
from openapi_server import util


class NetworksGet200ResponseNetworksInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created: str=None, id: int=None, ip_range: str=None, labels: object=None, load_balancers: List[int]=None, name: str=None, protection: NetworksGet200ResponseNetworksInnerProtection=None, routes: List[NetworksGet200ResponseNetworksInnerRoutesInner]=None, servers: List[int]=None, subnets: List[NetworksGet200ResponseNetworksInnerSubnetsInner]=None):
        """NetworksGet200ResponseNetworksInner - a model defined in OpenAPI

        :param created: The created of this NetworksGet200ResponseNetworksInner.
        :param id: The id of this NetworksGet200ResponseNetworksInner.
        :param ip_range: The ip_range of this NetworksGet200ResponseNetworksInner.
        :param labels: The labels of this NetworksGet200ResponseNetworksInner.
        :param load_balancers: The load_balancers of this NetworksGet200ResponseNetworksInner.
        :param name: The name of this NetworksGet200ResponseNetworksInner.
        :param protection: The protection of this NetworksGet200ResponseNetworksInner.
        :param routes: The routes of this NetworksGet200ResponseNetworksInner.
        :param servers: The servers of this NetworksGet200ResponseNetworksInner.
        :param subnets: The subnets of this NetworksGet200ResponseNetworksInner.
        """
        self.openapi_types = {
            'created': str,
            'id': int,
            'ip_range': str,
            'labels': object,
            'load_balancers': List[int],
            'name': str,
            'protection': NetworksGet200ResponseNetworksInnerProtection,
            'routes': List[NetworksGet200ResponseNetworksInnerRoutesInner],
            'servers': List[int],
            'subnets': List[NetworksGet200ResponseNetworksInnerSubnetsInner]
        }

        self.attribute_map = {
            'created': 'created',
            'id': 'id',
            'ip_range': 'ip_range',
            'labels': 'labels',
            'load_balancers': 'load_balancers',
            'name': 'name',
            'protection': 'protection',
            'routes': 'routes',
            'servers': 'servers',
            'subnets': 'subnets'
        }

        self._created = created
        self._id = id
        self._ip_range = ip_range
        self._labels = labels
        self._load_balancers = load_balancers
        self._name = name
        self._protection = protection
        self._routes = routes
        self._servers = servers
        self._subnets = subnets

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NetworksGet200ResponseNetworksInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The _networks_get_200_response_networks_inner of this NetworksGet200ResponseNetworksInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created(self):
        """Gets the created of this NetworksGet200ResponseNetworksInner.

        Point in time when the Network was created (in ISO-8601 format)

        :return: The created of this NetworksGet200ResponseNetworksInner.
        :rtype: str
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this NetworksGet200ResponseNetworksInner.

        Point in time when the Network was created (in ISO-8601 format)

        :param created: The created of this NetworksGet200ResponseNetworksInner.
        :type created: str
        """
        if created is None:
            raise ValueError("Invalid value for `created`, must not be `None`")

        self._created = created

    @property
    def id(self):
        """Gets the id of this NetworksGet200ResponseNetworksInner.

        ID of the Network

        :return: The id of this NetworksGet200ResponseNetworksInner.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this NetworksGet200ResponseNetworksInner.

        ID of the Network

        :param id: The id of this NetworksGet200ResponseNetworksInner.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def ip_range(self):
        """Gets the ip_range of this NetworksGet200ResponseNetworksInner.

        IPv4 prefix of the whole Network

        :return: The ip_range of this NetworksGet200ResponseNetworksInner.
        :rtype: str
        """
        return self._ip_range

    @ip_range.setter
    def ip_range(self, ip_range):
        """Sets the ip_range of this NetworksGet200ResponseNetworksInner.

        IPv4 prefix of the whole Network

        :param ip_range: The ip_range of this NetworksGet200ResponseNetworksInner.
        :type ip_range: str
        """
        if ip_range is None:
            raise ValueError("Invalid value for `ip_range`, must not be `None`")

        self._ip_range = ip_range

    @property
    def labels(self):
        """Gets the labels of this NetworksGet200ResponseNetworksInner.

        User-defined labels (key-value pairs)

        :return: The labels of this NetworksGet200ResponseNetworksInner.
        :rtype: object
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this NetworksGet200ResponseNetworksInner.

        User-defined labels (key-value pairs)

        :param labels: The labels of this NetworksGet200ResponseNetworksInner.
        :type labels: object
        """
        if labels is None:
            raise ValueError("Invalid value for `labels`, must not be `None`")

        self._labels = labels

    @property
    def load_balancers(self):
        """Gets the load_balancers of this NetworksGet200ResponseNetworksInner.

        Array of IDs of Load Balancers attached to this Network

        :return: The load_balancers of this NetworksGet200ResponseNetworksInner.
        :rtype: List[int]
        """
        return self._load_balancers

    @load_balancers.setter
    def load_balancers(self, load_balancers):
        """Sets the load_balancers of this NetworksGet200ResponseNetworksInner.

        Array of IDs of Load Balancers attached to this Network

        :param load_balancers: The load_balancers of this NetworksGet200ResponseNetworksInner.
        :type load_balancers: List[int]
        """

        self._load_balancers = load_balancers

    @property
    def name(self):
        """Gets the name of this NetworksGet200ResponseNetworksInner.

        Name of the Network

        :return: The name of this NetworksGet200ResponseNetworksInner.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this NetworksGet200ResponseNetworksInner.

        Name of the Network

        :param name: The name of this NetworksGet200ResponseNetworksInner.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def protection(self):
        """Gets the protection of this NetworksGet200ResponseNetworksInner.


        :return: The protection of this NetworksGet200ResponseNetworksInner.
        :rtype: NetworksGet200ResponseNetworksInnerProtection
        """
        return self._protection

    @protection.setter
    def protection(self, protection):
        """Sets the protection of this NetworksGet200ResponseNetworksInner.


        :param protection: The protection of this NetworksGet200ResponseNetworksInner.
        :type protection: NetworksGet200ResponseNetworksInnerProtection
        """
        if protection is None:
            raise ValueError("Invalid value for `protection`, must not be `None`")

        self._protection = protection

    @property
    def routes(self):
        """Gets the routes of this NetworksGet200ResponseNetworksInner.

        Array of routes set in this Network

        :return: The routes of this NetworksGet200ResponseNetworksInner.
        :rtype: List[NetworksGet200ResponseNetworksInnerRoutesInner]
        """
        return self._routes

    @routes.setter
    def routes(self, routes):
        """Sets the routes of this NetworksGet200ResponseNetworksInner.

        Array of routes set in this Network

        :param routes: The routes of this NetworksGet200ResponseNetworksInner.
        :type routes: List[NetworksGet200ResponseNetworksInnerRoutesInner]
        """
        if routes is None:
            raise ValueError("Invalid value for `routes`, must not be `None`")

        self._routes = routes

    @property
    def servers(self):
        """Gets the servers of this NetworksGet200ResponseNetworksInner.

        Array of IDs of Servers attached to this Network

        :return: The servers of this NetworksGet200ResponseNetworksInner.
        :rtype: List[int]
        """
        return self._servers

    @servers.setter
    def servers(self, servers):
        """Sets the servers of this NetworksGet200ResponseNetworksInner.

        Array of IDs of Servers attached to this Network

        :param servers: The servers of this NetworksGet200ResponseNetworksInner.
        :type servers: List[int]
        """
        if servers is None:
            raise ValueError("Invalid value for `servers`, must not be `None`")

        self._servers = servers

    @property
    def subnets(self):
        """Gets the subnets of this NetworksGet200ResponseNetworksInner.

        Array subnets allocated in this Network

        :return: The subnets of this NetworksGet200ResponseNetworksInner.
        :rtype: List[NetworksGet200ResponseNetworksInnerSubnetsInner]
        """
        return self._subnets

    @subnets.setter
    def subnets(self, subnets):
        """Sets the subnets of this NetworksGet200ResponseNetworksInner.

        Array subnets allocated in this Network

        :param subnets: The subnets of this NetworksGet200ResponseNetworksInner.
        :type subnets: List[NetworksGet200ResponseNetworksInnerSubnetsInner]
        """
        if subnets is None:
            raise ValueError("Invalid value for `subnets`, must not be `None`")

        self._subnets = subnets
