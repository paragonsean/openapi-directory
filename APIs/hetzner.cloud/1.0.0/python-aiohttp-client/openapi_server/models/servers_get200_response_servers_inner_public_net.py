# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.server_public_net_firewall import ServerPublicNetFirewall
from openapi_server.models.servers_get200_response_servers_inner_public_net_ipv4 import ServersGet200ResponseServersInnerPublicNetIpv4
from openapi_server.models.servers_get200_response_servers_inner_public_net_ipv6 import ServersGet200ResponseServersInnerPublicNetIpv6
from openapi_server import util


class ServersGet200ResponseServersInnerPublicNet(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, firewalls: List[ServerPublicNetFirewall]=None, floating_ips: List[int]=None, ipv4: ServersGet200ResponseServersInnerPublicNetIpv4=None, ipv6: ServersGet200ResponseServersInnerPublicNetIpv6=None):
        """ServersGet200ResponseServersInnerPublicNet - a model defined in OpenAPI

        :param firewalls: The firewalls of this ServersGet200ResponseServersInnerPublicNet.
        :param floating_ips: The floating_ips of this ServersGet200ResponseServersInnerPublicNet.
        :param ipv4: The ipv4 of this ServersGet200ResponseServersInnerPublicNet.
        :param ipv6: The ipv6 of this ServersGet200ResponseServersInnerPublicNet.
        """
        self.openapi_types = {
            'firewalls': List[ServerPublicNetFirewall],
            'floating_ips': List[int],
            'ipv4': ServersGet200ResponseServersInnerPublicNetIpv4,
            'ipv6': ServersGet200ResponseServersInnerPublicNetIpv6
        }

        self.attribute_map = {
            'firewalls': 'firewalls',
            'floating_ips': 'floating_ips',
            'ipv4': 'ipv4',
            'ipv6': 'ipv6'
        }

        self._firewalls = firewalls
        self._floating_ips = floating_ips
        self._ipv4 = ipv4
        self._ipv6 = ipv6

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ServersGet200ResponseServersInnerPublicNet':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The _servers_get_200_response_servers_inner_public_net of this ServersGet200ResponseServersInnerPublicNet.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def firewalls(self):
        """Gets the firewalls of this ServersGet200ResponseServersInnerPublicNet.

        Firewalls applied to the public network interface of this Server

        :return: The firewalls of this ServersGet200ResponseServersInnerPublicNet.
        :rtype: List[ServerPublicNetFirewall]
        """
        return self._firewalls

    @firewalls.setter
    def firewalls(self, firewalls):
        """Sets the firewalls of this ServersGet200ResponseServersInnerPublicNet.

        Firewalls applied to the public network interface of this Server

        :param firewalls: The firewalls of this ServersGet200ResponseServersInnerPublicNet.
        :type firewalls: List[ServerPublicNetFirewall]
        """

        self._firewalls = firewalls

    @property
    def floating_ips(self):
        """Gets the floating_ips of this ServersGet200ResponseServersInnerPublicNet.

        IDs of Floating IPs assigned to this Server

        :return: The floating_ips of this ServersGet200ResponseServersInnerPublicNet.
        :rtype: List[int]
        """
        return self._floating_ips

    @floating_ips.setter
    def floating_ips(self, floating_ips):
        """Sets the floating_ips of this ServersGet200ResponseServersInnerPublicNet.

        IDs of Floating IPs assigned to this Server

        :param floating_ips: The floating_ips of this ServersGet200ResponseServersInnerPublicNet.
        :type floating_ips: List[int]
        """
        if floating_ips is None:
            raise ValueError("Invalid value for `floating_ips`, must not be `None`")

        self._floating_ips = floating_ips

    @property
    def ipv4(self):
        """Gets the ipv4 of this ServersGet200ResponseServersInnerPublicNet.


        :return: The ipv4 of this ServersGet200ResponseServersInnerPublicNet.
        :rtype: ServersGet200ResponseServersInnerPublicNetIpv4
        """
        return self._ipv4

    @ipv4.setter
    def ipv4(self, ipv4):
        """Sets the ipv4 of this ServersGet200ResponseServersInnerPublicNet.


        :param ipv4: The ipv4 of this ServersGet200ResponseServersInnerPublicNet.
        :type ipv4: ServersGet200ResponseServersInnerPublicNetIpv4
        """
        if ipv4 is None:
            raise ValueError("Invalid value for `ipv4`, must not be `None`")

        self._ipv4 = ipv4

    @property
    def ipv6(self):
        """Gets the ipv6 of this ServersGet200ResponseServersInnerPublicNet.


        :return: The ipv6 of this ServersGet200ResponseServersInnerPublicNet.
        :rtype: ServersGet200ResponseServersInnerPublicNetIpv6
        """
        return self._ipv6

    @ipv6.setter
    def ipv6(self, ipv6):
        """Sets the ipv6 of this ServersGet200ResponseServersInnerPublicNet.


        :param ipv6: The ipv6 of this ServersGet200ResponseServersInnerPublicNet.
        :type ipv6: ServersGet200ResponseServersInnerPublicNetIpv6
        """
        if ipv6 is None:
            raise ValueError("Invalid value for `ipv6`, must not be `None`")

        self._ipv6 = ipv6
