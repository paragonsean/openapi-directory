# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UpdateKeyRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, read: bool=None, write: bool=None):
        """UpdateKeyRequest - a model defined in OpenAPI

        :param name: The name of this UpdateKeyRequest.
        :param read: The read of this UpdateKeyRequest.
        :param write: The write of this UpdateKeyRequest.
        """
        self.openapi_types = {
            'name': str,
            'read': bool,
            'write': bool
        }

        self.attribute_map = {
            'name': 'name',
            'read': 'read',
            'write': 'write'
        }

        self._name = name
        self._read = read
        self._write = write

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateKeyRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateKeyRequest of this UpdateKeyRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this UpdateKeyRequest.


        :return: The name of this UpdateKeyRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UpdateKeyRequest.


        :param name: The name of this UpdateKeyRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def read(self):
        """Gets the read of this UpdateKeyRequest.


        :return: The read of this UpdateKeyRequest.
        :rtype: bool
        """
        return self._read

    @read.setter
    def read(self, read):
        """Sets the read of this UpdateKeyRequest.


        :param read: The read of this UpdateKeyRequest.
        :type read: bool
        """
        if read is None:
            raise ValueError("Invalid value for `read`, must not be `None`")

        self._read = read

    @property
    def write(self):
        """Gets the write of this UpdateKeyRequest.


        :return: The write of this UpdateKeyRequest.
        :rtype: bool
        """
        return self._write

    @write.setter
    def write(self, write):
        """Sets the write of this UpdateKeyRequest.


        :param write: The write of this UpdateKeyRequest.
        :type write: bool
        """
        if write is None:
            raise ValueError("Invalid value for `write`, must not be `None`")

        self._write = write
