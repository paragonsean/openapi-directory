# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class User(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created_at: datetime=None, display_name: str=None, email: str=None, id: str=None, photo_url: str=None):
        """User - a model defined in OpenAPI

        :param created_at: The created_at of this User.
        :param display_name: The display_name of this User.
        :param email: The email of this User.
        :param id: The id of this User.
        :param photo_url: The photo_url of this User.
        """
        self.openapi_types = {
            'created_at': datetime,
            'display_name': str,
            'email': str,
            'id': str,
            'photo_url': str
        }

        self.attribute_map = {
            'created_at': 'createdAt',
            'display_name': 'displayName',
            'email': 'email',
            'id': 'id',
            'photo_url': 'photoURL'
        }

        self._created_at = created_at
        self._display_name = display_name
        self._email = email
        self._id = id
        self._photo_url = photo_url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'User':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The User of this User.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created_at(self):
        """Gets the created_at of this User.


        :return: The created_at of this User.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this User.


        :param created_at: The created_at of this User.
        :type created_at: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at

    @property
    def display_name(self):
        """Gets the display_name of this User.


        :return: The display_name of this User.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this User.


        :param display_name: The display_name of this User.
        :type display_name: str
        """
        if display_name is None:
            raise ValueError("Invalid value for `display_name`, must not be `None`")

        self._display_name = display_name

    @property
    def email(self):
        """Gets the email of this User.


        :return: The email of this User.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this User.


        :param email: The email of this User.
        :type email: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")

        self._email = email

    @property
    def id(self):
        """Gets the id of this User.


        :return: The id of this User.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this User.


        :param id: The id of this User.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def photo_url(self):
        """Gets the photo_url of this User.


        :return: The photo_url of this User.
        :rtype: str
        """
        return self._photo_url

    @photo_url.setter
    def photo_url(self, photo_url):
        """Sets the photo_url of this User.


        :param photo_url: The photo_url of this User.
        :type photo_url: str
        """

        self._photo_url = photo_url
