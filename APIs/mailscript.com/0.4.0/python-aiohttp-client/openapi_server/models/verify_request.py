# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.verify_email_request import VerifyEmailRequest
from openapi_server.models.verify_sms_request import VerifySmsRequest
from openapi_server import util


class VerifyRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, code: str=None, email: str=None, sms: str=None):
        """VerifyRequest - a model defined in OpenAPI

        :param code: The code of this VerifyRequest.
        :param email: The email of this VerifyRequest.
        :param sms: The sms of this VerifyRequest.
        """
        self.openapi_types = {
            'code': str,
            'email': str,
            'sms': str
        }

        self.attribute_map = {
            'code': 'code',
            'email': 'email',
            'sms': 'sms'
        }

        self._code = code
        self._email = email
        self._sms = sms

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VerifyRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The verify_request of this VerifyRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def code(self):
        """Gets the code of this VerifyRequest.


        :return: The code of this VerifyRequest.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this VerifyRequest.


        :param code: The code of this VerifyRequest.
        :type code: str
        """
        if code is None:
            raise ValueError("Invalid value for `code`, must not be `None`")

        self._code = code

    @property
    def email(self):
        """Gets the email of this VerifyRequest.


        :return: The email of this VerifyRequest.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this VerifyRequest.


        :param email: The email of this VerifyRequest.
        :type email: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")

        self._email = email

    @property
    def sms(self):
        """Gets the sms of this VerifyRequest.


        :return: The sms of this VerifyRequest.
        :rtype: str
        """
        return self._sms

    @sms.setter
    def sms(self, sms):
        """Sets the sms of this VerifyRequest.


        :param sms: The sms of this VerifyRequest.
        :type sms: str
        """
        if sms is None:
            raise ValueError("Invalid value for `sms`, must not be `None`")

        self._sms = sms
