# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Criteria(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, domain: str=None, _from: str=None, has_attachments: bool=None, has_the_words: str=None, sent_to: str=None, subject_contains: str=None):
        """Criteria - a model defined in OpenAPI

        :param domain: The domain of this Criteria.
        :param _from: The _from of this Criteria.
        :param has_attachments: The has_attachments of this Criteria.
        :param has_the_words: The has_the_words of this Criteria.
        :param sent_to: The sent_to of this Criteria.
        :param subject_contains: The subject_contains of this Criteria.
        """
        self.openapi_types = {
            'domain': str,
            '_from': str,
            'has_attachments': bool,
            'has_the_words': str,
            'sent_to': str,
            'subject_contains': str
        }

        self.attribute_map = {
            'domain': 'domain',
            '_from': 'from',
            'has_attachments': 'hasAttachments',
            'has_the_words': 'hasTheWords',
            'sent_to': 'sentTo',
            'subject_contains': 'subjectContains'
        }

        self._domain = domain
        self.__from = _from
        self._has_attachments = has_attachments
        self._has_the_words = has_the_words
        self._sent_to = sent_to
        self._subject_contains = subject_contains

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Criteria':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Criteria of this Criteria.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def domain(self):
        """Gets the domain of this Criteria.


        :return: The domain of this Criteria.
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this Criteria.


        :param domain: The domain of this Criteria.
        :type domain: str
        """

        self._domain = domain

    @property
    def _from(self):
        """Gets the _from of this Criteria.


        :return: The _from of this Criteria.
        :rtype: str
        """
        return self.__from

    @_from.setter
    def _from(self, _from):
        """Sets the _from of this Criteria.


        :param _from: The _from of this Criteria.
        :type _from: str
        """

        self.__from = _from

    @property
    def has_attachments(self):
        """Gets the has_attachments of this Criteria.


        :return: The has_attachments of this Criteria.
        :rtype: bool
        """
        return self._has_attachments

    @has_attachments.setter
    def has_attachments(self, has_attachments):
        """Sets the has_attachments of this Criteria.


        :param has_attachments: The has_attachments of this Criteria.
        :type has_attachments: bool
        """

        self._has_attachments = has_attachments

    @property
    def has_the_words(self):
        """Gets the has_the_words of this Criteria.


        :return: The has_the_words of this Criteria.
        :rtype: str
        """
        return self._has_the_words

    @has_the_words.setter
    def has_the_words(self, has_the_words):
        """Sets the has_the_words of this Criteria.


        :param has_the_words: The has_the_words of this Criteria.
        :type has_the_words: str
        """

        self._has_the_words = has_the_words

    @property
    def sent_to(self):
        """Gets the sent_to of this Criteria.


        :return: The sent_to of this Criteria.
        :rtype: str
        """
        return self._sent_to

    @sent_to.setter
    def sent_to(self, sent_to):
        """Sets the sent_to of this Criteria.


        :param sent_to: The sent_to of this Criteria.
        :type sent_to: str
        """

        self._sent_to = sent_to

    @property
    def subject_contains(self):
        """Gets the subject_contains of this Criteria.


        :return: The subject_contains of this Criteria.
        :rtype: str
        """
        return self._subject_contains

    @subject_contains.setter
    def subject_contains(self, subject_contains):
        """Sets the subject_contains of this Criteria.


        :param subject_contains: The subject_contains of this Criteria.
        :type subject_contains: str
        """

        self._subject_contains = subject_contains
