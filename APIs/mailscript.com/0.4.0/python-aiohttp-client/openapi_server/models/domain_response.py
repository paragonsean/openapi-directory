# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.domain_response_records_inner import DomainResponseRecordsInner
from openapi_server import util


class DomainResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, domain: str=None, records: List[DomainResponseRecordsInner]=None):
        """DomainResponse - a model defined in OpenAPI

        :param domain: The domain of this DomainResponse.
        :param records: The records of this DomainResponse.
        """
        self.openapi_types = {
            'domain': str,
            'records': List[DomainResponseRecordsInner]
        }

        self.attribute_map = {
            'domain': 'domain',
            'records': 'records'
        }

        self._domain = domain
        self._records = records

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DomainResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DomainResponse of this DomainResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def domain(self):
        """Gets the domain of this DomainResponse.


        :return: The domain of this DomainResponse.
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this DomainResponse.


        :param domain: The domain of this DomainResponse.
        :type domain: str
        """
        if domain is None:
            raise ValueError("Invalid value for `domain`, must not be `None`")

        self._domain = domain

    @property
    def records(self):
        """Gets the records of this DomainResponse.


        :return: The records of this DomainResponse.
        :rtype: List[DomainResponseRecordsInner]
        """
        return self._records

    @records.setter
    def records(self, records):
        """Sets the records of this DomainResponse.


        :param records: The records of this DomainResponse.
        :type records: List[DomainResponseRecordsInner]
        """
        if records is None:
            raise ValueError("Invalid value for `records`, must not be `None`")

        self._records = records
