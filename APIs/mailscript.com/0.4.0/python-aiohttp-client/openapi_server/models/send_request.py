# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SendRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, _from: str=None, html: str=None, subject: str=None, text: str=None, to: str=None):
        """SendRequest - a model defined in OpenAPI

        :param _from: The _from of this SendRequest.
        :param html: The html of this SendRequest.
        :param subject: The subject of this SendRequest.
        :param text: The text of this SendRequest.
        :param to: The to of this SendRequest.
        """
        self.openapi_types = {
            '_from': str,
            'html': str,
            'subject': str,
            'text': str,
            'to': str
        }

        self.attribute_map = {
            '_from': 'from',
            'html': 'html',
            'subject': 'subject',
            'text': 'text',
            'to': 'to'
        }

        self.__from = _from
        self._html = html
        self._subject = subject
        self._text = text
        self._to = to

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SendRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SendRequest of this SendRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def _from(self):
        """Gets the _from of this SendRequest.


        :return: The _from of this SendRequest.
        :rtype: str
        """
        return self.__from

    @_from.setter
    def _from(self, _from):
        """Sets the _from of this SendRequest.


        :param _from: The _from of this SendRequest.
        :type _from: str
        """
        if _from is None:
            raise ValueError("Invalid value for `_from`, must not be `None`")

        self.__from = _from

    @property
    def html(self):
        """Gets the html of this SendRequest.


        :return: The html of this SendRequest.
        :rtype: str
        """
        return self._html

    @html.setter
    def html(self, html):
        """Sets the html of this SendRequest.


        :param html: The html of this SendRequest.
        :type html: str
        """

        self._html = html

    @property
    def subject(self):
        """Gets the subject of this SendRequest.


        :return: The subject of this SendRequest.
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this SendRequest.


        :param subject: The subject of this SendRequest.
        :type subject: str
        """
        if subject is None:
            raise ValueError("Invalid value for `subject`, must not be `None`")

        self._subject = subject

    @property
    def text(self):
        """Gets the text of this SendRequest.


        :return: The text of this SendRequest.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this SendRequest.


        :param text: The text of this SendRequest.
        :type text: str
        """

        self._text = text

    @property
    def to(self):
        """Gets the to of this SendRequest.


        :return: The to of this SendRequest.
        :rtype: str
        """
        return self._to

    @to.setter
    def to(self, to):
        """Sets the to of this SendRequest.


        :param to: The to of this SendRequest.
        :type to: str
        """
        if to is None:
            raise ValueError("Invalid value for `to`, must not be `None`")

        self._to = to
