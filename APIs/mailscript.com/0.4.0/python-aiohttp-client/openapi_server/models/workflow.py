# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Workflow(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, action: str=None, active: bool=None, created_at: datetime=None, created_by: str=None, id: str=None, input: str=None, name: str=None, owner: str=None, trigger: str=None):
        """Workflow - a model defined in OpenAPI

        :param action: The action of this Workflow.
        :param active: The active of this Workflow.
        :param created_at: The created_at of this Workflow.
        :param created_by: The created_by of this Workflow.
        :param id: The id of this Workflow.
        :param input: The input of this Workflow.
        :param name: The name of this Workflow.
        :param owner: The owner of this Workflow.
        :param trigger: The trigger of this Workflow.
        """
        self.openapi_types = {
            'action': str,
            'active': bool,
            'created_at': datetime,
            'created_by': str,
            'id': str,
            'input': str,
            'name': str,
            'owner': str,
            'trigger': str
        }

        self.attribute_map = {
            'action': 'action',
            'active': 'active',
            'created_at': 'createdAt',
            'created_by': 'createdBy',
            'id': 'id',
            'input': 'input',
            'name': 'name',
            'owner': 'owner',
            'trigger': 'trigger'
        }

        self._action = action
        self._active = active
        self._created_at = created_at
        self._created_by = created_by
        self._id = id
        self._input = input
        self._name = name
        self._owner = owner
        self._trigger = trigger

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Workflow':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Workflow of this Workflow.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def action(self):
        """Gets the action of this Workflow.


        :return: The action of this Workflow.
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this Workflow.


        :param action: The action of this Workflow.
        :type action: str
        """
        if action is None:
            raise ValueError("Invalid value for `action`, must not be `None`")

        self._action = action

    @property
    def active(self):
        """Gets the active of this Workflow.


        :return: The active of this Workflow.
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this Workflow.


        :param active: The active of this Workflow.
        :type active: bool
        """

        self._active = active

    @property
    def created_at(self):
        """Gets the created_at of this Workflow.


        :return: The created_at of this Workflow.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Workflow.


        :param created_at: The created_at of this Workflow.
        :type created_at: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at

    @property
    def created_by(self):
        """Gets the created_by of this Workflow.


        :return: The created_by of this Workflow.
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this Workflow.


        :param created_by: The created_by of this Workflow.
        :type created_by: str
        """
        if created_by is None:
            raise ValueError("Invalid value for `created_by`, must not be `None`")

        self._created_by = created_by

    @property
    def id(self):
        """Gets the id of this Workflow.


        :return: The id of this Workflow.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Workflow.


        :param id: The id of this Workflow.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def input(self):
        """Gets the input of this Workflow.


        :return: The input of this Workflow.
        :rtype: str
        """
        return self._input

    @input.setter
    def input(self, input):
        """Sets the input of this Workflow.


        :param input: The input of this Workflow.
        :type input: str
        """
        if input is None:
            raise ValueError("Invalid value for `input`, must not be `None`")

        self._input = input

    @property
    def name(self):
        """Gets the name of this Workflow.


        :return: The name of this Workflow.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Workflow.


        :param name: The name of this Workflow.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def owner(self):
        """Gets the owner of this Workflow.


        :return: The owner of this Workflow.
        :rtype: str
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this Workflow.


        :param owner: The owner of this Workflow.
        :type owner: str
        """
        if owner is None:
            raise ValueError("Invalid value for `owner`, must not be `None`")

        self._owner = owner

    @property
    def trigger(self):
        """Gets the trigger of this Workflow.


        :return: The trigger of this Workflow.
        :rtype: str
        """
        return self._trigger

    @trigger.setter
    def trigger(self, trigger):
        """Sets the trigger of this Workflow.


        :param trigger: The trigger of this Workflow.
        :type trigger: str
        """
        if trigger is None:
            raise ValueError("Invalid value for `trigger`, must not be `None`")

        self._trigger = trigger
