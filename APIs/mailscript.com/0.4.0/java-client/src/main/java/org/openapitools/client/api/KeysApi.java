/*
 * Mailscript
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AddKeyRequest;
import org.openapitools.client.model.AddKeyResponse;
import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.GetAllKeysResponse;
import org.openapitools.client.model.Key;
import org.openapitools.client.model.UpdateKeyRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class KeysApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public KeysApi() {
        this(Configuration.getDefaultApiClient());
    }

    public KeysApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for addKey
     * @param address ID of address (required)
     * @param addKeyRequest Key body (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad credentials </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Address not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addKeyCall(String address, AddKeyRequest addKeyRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = addKeyRequest;

        // create path and map variables
        String localVarPath = "/addresses/{address}/keys"
            .replace("{" + "address" + "}", localVarApiClient.escapeString(address.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addKeyValidateBeforeCall(String address, AddKeyRequest addKeyRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'address' is set
        if (address == null) {
            throw new ApiException("Missing the required parameter 'address' when calling addKey(Async)");
        }

        // verify the required parameter 'addKeyRequest' is set
        if (addKeyRequest == null) {
            throw new ApiException("Missing the required parameter 'addKeyRequest' when calling addKey(Async)");
        }

        return addKeyCall(address, addKeyRequest, _callback);

    }

    /**
     * Add address key
     * 
     * @param address ID of address (required)
     * @param addKeyRequest Key body (required)
     * @return AddKeyResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad credentials </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Address not found </td><td>  -  </td></tr>
     </table>
     */
    public AddKeyResponse addKey(String address, AddKeyRequest addKeyRequest) throws ApiException {
        ApiResponse<AddKeyResponse> localVarResp = addKeyWithHttpInfo(address, addKeyRequest);
        return localVarResp.getData();
    }

    /**
     * Add address key
     * 
     * @param address ID of address (required)
     * @param addKeyRequest Key body (required)
     * @return ApiResponse&lt;AddKeyResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad credentials </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Address not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AddKeyResponse> addKeyWithHttpInfo(String address, AddKeyRequest addKeyRequest) throws ApiException {
        okhttp3.Call localVarCall = addKeyValidateBeforeCall(address, addKeyRequest, null);
        Type localVarReturnType = new TypeToken<AddKeyResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add address key (asynchronously)
     * 
     * @param address ID of address (required)
     * @param addKeyRequest Key body (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad credentials </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Address not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addKeyAsync(String address, AddKeyRequest addKeyRequest, final ApiCallback<AddKeyResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = addKeyValidateBeforeCall(address, addKeyRequest, _callback);
        Type localVarReturnType = new TypeToken<AddKeyResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteKey
     * @param address ID of address (required)
     * @param key ID of key (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful delete operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Failure </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad credentials </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Key not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteKeyCall(String address, String key, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/addresses/{address}/keys/{key}"
            .replace("{" + "address" + "}", localVarApiClient.escapeString(address.toString()))
            .replace("{" + "key" + "}", localVarApiClient.escapeString(key.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteKeyValidateBeforeCall(String address, String key, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'address' is set
        if (address == null) {
            throw new ApiException("Missing the required parameter 'address' when calling deleteKey(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling deleteKey(Async)");
        }

        return deleteKeyCall(address, key, _callback);

    }

    /**
     * Delete address key
     * 
     * @param address ID of address (required)
     * @param key ID of key (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful delete operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Failure </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad credentials </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Key not found </td><td>  -  </td></tr>
     </table>
     */
    public void deleteKey(String address, String key) throws ApiException {
        deleteKeyWithHttpInfo(address, key);
    }

    /**
     * Delete address key
     * 
     * @param address ID of address (required)
     * @param key ID of key (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful delete operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Failure </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad credentials </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Key not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteKeyWithHttpInfo(String address, String key) throws ApiException {
        okhttp3.Call localVarCall = deleteKeyValidateBeforeCall(address, key, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete address key (asynchronously)
     * 
     * @param address ID of address (required)
     * @param key ID of key (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful delete operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Failure </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad credentials </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Key not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteKeyAsync(String address, String key, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteKeyValidateBeforeCall(address, key, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAllKeys
     * @param address ID of address (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad credentials </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Address not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllKeysCall(String address, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/addresses/{address}/keys"
            .replace("{" + "address" + "}", localVarApiClient.escapeString(address.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllKeysValidateBeforeCall(String address, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'address' is set
        if (address == null) {
            throw new ApiException("Missing the required parameter 'address' when calling getAllKeys(Async)");
        }

        return getAllKeysCall(address, _callback);

    }

    /**
     * List address keys
     * 
     * @param address ID of address (required)
     * @return GetAllKeysResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad credentials </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Address not found </td><td>  -  </td></tr>
     </table>
     */
    public GetAllKeysResponse getAllKeys(String address) throws ApiException {
        ApiResponse<GetAllKeysResponse> localVarResp = getAllKeysWithHttpInfo(address);
        return localVarResp.getData();
    }

    /**
     * List address keys
     * 
     * @param address ID of address (required)
     * @return ApiResponse&lt;GetAllKeysResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad credentials </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Address not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetAllKeysResponse> getAllKeysWithHttpInfo(String address) throws ApiException {
        okhttp3.Call localVarCall = getAllKeysValidateBeforeCall(address, null);
        Type localVarReturnType = new TypeToken<GetAllKeysResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List address keys (asynchronously)
     * 
     * @param address ID of address (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad credentials </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Address not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllKeysAsync(String address, final ApiCallback<GetAllKeysResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllKeysValidateBeforeCall(address, _callback);
        Type localVarReturnType = new TypeToken<GetAllKeysResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getKey
     * @param address ID of address (required)
     * @param key ID of key (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad credentials </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Key not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getKeyCall(String address, String key, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/addresses/{address}/keys/{key}"
            .replace("{" + "address" + "}", localVarApiClient.escapeString(address.toString()))
            .replace("{" + "key" + "}", localVarApiClient.escapeString(key.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getKeyValidateBeforeCall(String address, String key, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'address' is set
        if (address == null) {
            throw new ApiException("Missing the required parameter 'address' when calling getKey(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling getKey(Async)");
        }

        return getKeyCall(address, key, _callback);

    }

    /**
     * Get address key
     * 
     * @param address ID of address (required)
     * @param key ID of key (required)
     * @return Key
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad credentials </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Key not found </td><td>  -  </td></tr>
     </table>
     */
    public Key getKey(String address, String key) throws ApiException {
        ApiResponse<Key> localVarResp = getKeyWithHttpInfo(address, key);
        return localVarResp.getData();
    }

    /**
     * Get address key
     * 
     * @param address ID of address (required)
     * @param key ID of key (required)
     * @return ApiResponse&lt;Key&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad credentials </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Key not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Key> getKeyWithHttpInfo(String address, String key) throws ApiException {
        okhttp3.Call localVarCall = getKeyValidateBeforeCall(address, key, null);
        Type localVarReturnType = new TypeToken<Key>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get address key (asynchronously)
     * 
     * @param address ID of address (required)
     * @param key ID of key (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad credentials </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Key not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getKeyAsync(String address, String key, final ApiCallback<Key> _callback) throws ApiException {

        okhttp3.Call localVarCall = getKeyValidateBeforeCall(address, key, _callback);
        Type localVarReturnType = new TypeToken<Key>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateKey
     * @param address ID of address (required)
     * @param key ID of key (required)
     * @param updateKeyRequest Key body (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Failure </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad credentials </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Key not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateKeyCall(String address, String key, UpdateKeyRequest updateKeyRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateKeyRequest;

        // create path and map variables
        String localVarPath = "/addresses/{address}/keys/{key}"
            .replace("{" + "address" + "}", localVarApiClient.escapeString(address.toString()))
            .replace("{" + "key" + "}", localVarApiClient.escapeString(key.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateKeyValidateBeforeCall(String address, String key, UpdateKeyRequest updateKeyRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'address' is set
        if (address == null) {
            throw new ApiException("Missing the required parameter 'address' when calling updateKey(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling updateKey(Async)");
        }

        // verify the required parameter 'updateKeyRequest' is set
        if (updateKeyRequest == null) {
            throw new ApiException("Missing the required parameter 'updateKeyRequest' when calling updateKey(Async)");
        }

        return updateKeyCall(address, key, updateKeyRequest, _callback);

    }

    /**
     * Update an address key
     * 
     * @param address ID of address (required)
     * @param key ID of key (required)
     * @param updateKeyRequest Key body (required)
     * @return Key
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Failure </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad credentials </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Key not found </td><td>  -  </td></tr>
     </table>
     */
    public Key updateKey(String address, String key, UpdateKeyRequest updateKeyRequest) throws ApiException {
        ApiResponse<Key> localVarResp = updateKeyWithHttpInfo(address, key, updateKeyRequest);
        return localVarResp.getData();
    }

    /**
     * Update an address key
     * 
     * @param address ID of address (required)
     * @param key ID of key (required)
     * @param updateKeyRequest Key body (required)
     * @return ApiResponse&lt;Key&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Failure </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad credentials </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Key not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Key> updateKeyWithHttpInfo(String address, String key, UpdateKeyRequest updateKeyRequest) throws ApiException {
        okhttp3.Call localVarCall = updateKeyValidateBeforeCall(address, key, updateKeyRequest, null);
        Type localVarReturnType = new TypeToken<Key>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update an address key (asynchronously)
     * 
     * @param address ID of address (required)
     * @param key ID of key (required)
     * @param updateKeyRequest Key body (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Failure </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad credentials </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Key not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateKeyAsync(String address, String key, UpdateKeyRequest updateKeyRequest, final ApiCallback<Key> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateKeyValidateBeforeCall(address, key, updateKeyRequest, _callback);
        Type localVarReturnType = new TypeToken<Key>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
