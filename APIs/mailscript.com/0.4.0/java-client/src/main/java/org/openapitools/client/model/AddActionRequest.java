/*
 * Mailscript
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AddActionAliasRequest;
import org.openapitools.client.model.AddActionAliasRequestConfig;
import org.openapitools.client.model.AddActionCombineRequest;
import org.openapitools.client.model.AddActionDaemonRequest;
import org.openapitools.client.model.AddActionForwardRequest;
import org.openapitools.client.model.AddActionReplyAllRequest;
import org.openapitools.client.model.AddActionReplyRequest;
import org.openapitools.client.model.AddActionSendRequest;
import org.openapitools.client.model.AddActionSmsRequest;
import org.openapitools.client.model.AddActionWebhookRequest;



import java.io.IOException;
import java.lang.reflect.Type;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.JsonPrimitive;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonArray;
import com.google.gson.JsonParseException;

import org.openapitools.client.JSON;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:12:01.468742-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AddActionRequest extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(AddActionRequest.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!AddActionRequest.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'AddActionRequest' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<AddActionCombineRequest> adapterAddActionCombineRequest = gson.getDelegateAdapter(this, TypeToken.get(AddActionCombineRequest.class));
            final TypeAdapter<AddActionSmsRequest> adapterAddActionSmsRequest = gson.getDelegateAdapter(this, TypeToken.get(AddActionSmsRequest.class));
            final TypeAdapter<AddActionWebhookRequest> adapterAddActionWebhookRequest = gson.getDelegateAdapter(this, TypeToken.get(AddActionWebhookRequest.class));
            final TypeAdapter<AddActionDaemonRequest> adapterAddActionDaemonRequest = gson.getDelegateAdapter(this, TypeToken.get(AddActionDaemonRequest.class));
            final TypeAdapter<AddActionSendRequest> adapterAddActionSendRequest = gson.getDelegateAdapter(this, TypeToken.get(AddActionSendRequest.class));
            final TypeAdapter<AddActionForwardRequest> adapterAddActionForwardRequest = gson.getDelegateAdapter(this, TypeToken.get(AddActionForwardRequest.class));
            final TypeAdapter<AddActionReplyRequest> adapterAddActionReplyRequest = gson.getDelegateAdapter(this, TypeToken.get(AddActionReplyRequest.class));
            final TypeAdapter<AddActionReplyAllRequest> adapterAddActionReplyAllRequest = gson.getDelegateAdapter(this, TypeToken.get(AddActionReplyAllRequest.class));
            final TypeAdapter<AddActionAliasRequest> adapterAddActionAliasRequest = gson.getDelegateAdapter(this, TypeToken.get(AddActionAliasRequest.class));

            return (TypeAdapter<T>) new TypeAdapter<AddActionRequest>() {
                @Override
                public void write(JsonWriter out, AddActionRequest value) throws IOException {
                    if (value == null || value.getActualInstance() == null) {
                        elementAdapter.write(out, null);
                        return;
                    }

                    // check if the actual instance is of the type `AddActionCombineRequest`
                    if (value.getActualInstance() instanceof AddActionCombineRequest) {
                        JsonElement element = adapterAddActionCombineRequest.toJsonTree((AddActionCombineRequest)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `AddActionSmsRequest`
                    if (value.getActualInstance() instanceof AddActionSmsRequest) {
                        JsonElement element = adapterAddActionSmsRequest.toJsonTree((AddActionSmsRequest)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `AddActionWebhookRequest`
                    if (value.getActualInstance() instanceof AddActionWebhookRequest) {
                        JsonElement element = adapterAddActionWebhookRequest.toJsonTree((AddActionWebhookRequest)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `AddActionDaemonRequest`
                    if (value.getActualInstance() instanceof AddActionDaemonRequest) {
                        JsonElement element = adapterAddActionDaemonRequest.toJsonTree((AddActionDaemonRequest)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `AddActionSendRequest`
                    if (value.getActualInstance() instanceof AddActionSendRequest) {
                        JsonElement element = adapterAddActionSendRequest.toJsonTree((AddActionSendRequest)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `AddActionForwardRequest`
                    if (value.getActualInstance() instanceof AddActionForwardRequest) {
                        JsonElement element = adapterAddActionForwardRequest.toJsonTree((AddActionForwardRequest)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `AddActionReplyRequest`
                    if (value.getActualInstance() instanceof AddActionReplyRequest) {
                        JsonElement element = adapterAddActionReplyRequest.toJsonTree((AddActionReplyRequest)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `AddActionReplyAllRequest`
                    if (value.getActualInstance() instanceof AddActionReplyAllRequest) {
                        JsonElement element = adapterAddActionReplyAllRequest.toJsonTree((AddActionReplyAllRequest)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `AddActionAliasRequest`
                    if (value.getActualInstance() instanceof AddActionAliasRequest) {
                        JsonElement element = adapterAddActionAliasRequest.toJsonTree((AddActionAliasRequest)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    throw new IOException("Failed to serialize as the type doesn't match oneOf schemas: AddActionAliasRequest, AddActionCombineRequest, AddActionDaemonRequest, AddActionForwardRequest, AddActionReplyAllRequest, AddActionReplyRequest, AddActionSendRequest, AddActionSmsRequest, AddActionWebhookRequest");
                }

                @Override
                public AddActionRequest read(JsonReader in) throws IOException {
                    Object deserialized = null;
                    JsonElement jsonElement = elementAdapter.read(in);

                    int match = 0;
                    ArrayList<String> errorMessages = new ArrayList<>();
                    TypeAdapter actualAdapter = elementAdapter;

                    // deserialize AddActionCombineRequest
                    try {
                        // validate the JSON object to see if any exception is thrown
                        AddActionCombineRequest.validateJsonElement(jsonElement);
                        actualAdapter = adapterAddActionCombineRequest;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'AddActionCombineRequest'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for AddActionCombineRequest failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'AddActionCombineRequest'", e);
                    }
                    // deserialize AddActionSmsRequest
                    try {
                        // validate the JSON object to see if any exception is thrown
                        AddActionSmsRequest.validateJsonElement(jsonElement);
                        actualAdapter = adapterAddActionSmsRequest;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'AddActionSmsRequest'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for AddActionSmsRequest failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'AddActionSmsRequest'", e);
                    }
                    // deserialize AddActionWebhookRequest
                    try {
                        // validate the JSON object to see if any exception is thrown
                        AddActionWebhookRequest.validateJsonElement(jsonElement);
                        actualAdapter = adapterAddActionWebhookRequest;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'AddActionWebhookRequest'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for AddActionWebhookRequest failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'AddActionWebhookRequest'", e);
                    }
                    // deserialize AddActionDaemonRequest
                    try {
                        // validate the JSON object to see if any exception is thrown
                        AddActionDaemonRequest.validateJsonElement(jsonElement);
                        actualAdapter = adapterAddActionDaemonRequest;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'AddActionDaemonRequest'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for AddActionDaemonRequest failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'AddActionDaemonRequest'", e);
                    }
                    // deserialize AddActionSendRequest
                    try {
                        // validate the JSON object to see if any exception is thrown
                        AddActionSendRequest.validateJsonElement(jsonElement);
                        actualAdapter = adapterAddActionSendRequest;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'AddActionSendRequest'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for AddActionSendRequest failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'AddActionSendRequest'", e);
                    }
                    // deserialize AddActionForwardRequest
                    try {
                        // validate the JSON object to see if any exception is thrown
                        AddActionForwardRequest.validateJsonElement(jsonElement);
                        actualAdapter = adapterAddActionForwardRequest;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'AddActionForwardRequest'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for AddActionForwardRequest failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'AddActionForwardRequest'", e);
                    }
                    // deserialize AddActionReplyRequest
                    try {
                        // validate the JSON object to see if any exception is thrown
                        AddActionReplyRequest.validateJsonElement(jsonElement);
                        actualAdapter = adapterAddActionReplyRequest;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'AddActionReplyRequest'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for AddActionReplyRequest failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'AddActionReplyRequest'", e);
                    }
                    // deserialize AddActionReplyAllRequest
                    try {
                        // validate the JSON object to see if any exception is thrown
                        AddActionReplyAllRequest.validateJsonElement(jsonElement);
                        actualAdapter = adapterAddActionReplyAllRequest;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'AddActionReplyAllRequest'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for AddActionReplyAllRequest failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'AddActionReplyAllRequest'", e);
                    }
                    // deserialize AddActionAliasRequest
                    try {
                        // validate the JSON object to see if any exception is thrown
                        AddActionAliasRequest.validateJsonElement(jsonElement);
                        actualAdapter = adapterAddActionAliasRequest;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'AddActionAliasRequest'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for AddActionAliasRequest failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'AddActionAliasRequest'", e);
                    }

                    if (match == 1) {
                        AddActionRequest ret = new AddActionRequest();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    }

                    throw new IOException(String.format("Failed deserialization for AddActionRequest: %d classes match result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", match, errorMessages, jsonElement.toString()));
                }
            }.nullSafe();
        }
    }

    // store a list of schema names defined in oneOf
    public static final Map<String, Class<?>> schemas = new HashMap<String, Class<?>>();

    public AddActionRequest() {
        super("oneOf", Boolean.FALSE);
    }

    public AddActionRequest(Object o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("AddActionCombineRequest", AddActionCombineRequest.class);
        schemas.put("AddActionSmsRequest", AddActionSmsRequest.class);
        schemas.put("AddActionWebhookRequest", AddActionWebhookRequest.class);
        schemas.put("AddActionDaemonRequest", AddActionDaemonRequest.class);
        schemas.put("AddActionSendRequest", AddActionSendRequest.class);
        schemas.put("AddActionForwardRequest", AddActionForwardRequest.class);
        schemas.put("AddActionReplyRequest", AddActionReplyRequest.class);
        schemas.put("AddActionReplyAllRequest", AddActionReplyAllRequest.class);
        schemas.put("AddActionAliasRequest", AddActionAliasRequest.class);
    }

    @Override
    public Map<String, Class<?>> getSchemas() {
        return AddActionRequest.schemas;
    }

    /**
     * Set the instance that matches the oneOf child schema, check
     * the instance parameter is valid against the oneOf child schemas:
     * AddActionAliasRequest, AddActionCombineRequest, AddActionDaemonRequest, AddActionForwardRequest, AddActionReplyAllRequest, AddActionReplyRequest, AddActionSendRequest, AddActionSmsRequest, AddActionWebhookRequest
     *
     * It could be an instance of the 'oneOf' schemas.
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof AddActionCombineRequest) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof AddActionSmsRequest) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof AddActionWebhookRequest) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof AddActionDaemonRequest) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof AddActionSendRequest) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof AddActionForwardRequest) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof AddActionReplyRequest) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof AddActionReplyAllRequest) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof AddActionAliasRequest) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be AddActionAliasRequest, AddActionCombineRequest, AddActionDaemonRequest, AddActionForwardRequest, AddActionReplyAllRequest, AddActionReplyRequest, AddActionSendRequest, AddActionSmsRequest, AddActionWebhookRequest");
    }

    /**
     * Get the actual instance, which can be the following:
     * AddActionAliasRequest, AddActionCombineRequest, AddActionDaemonRequest, AddActionForwardRequest, AddActionReplyAllRequest, AddActionReplyRequest, AddActionSendRequest, AddActionSmsRequest, AddActionWebhookRequest
     *
     * @return The actual instance (AddActionAliasRequest, AddActionCombineRequest, AddActionDaemonRequest, AddActionForwardRequest, AddActionReplyAllRequest, AddActionReplyRequest, AddActionSendRequest, AddActionSmsRequest, AddActionWebhookRequest)
     */
    @SuppressWarnings("unchecked")
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `AddActionCombineRequest`. If the actual instance is not `AddActionCombineRequest`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `AddActionCombineRequest`
     * @throws ClassCastException if the instance is not `AddActionCombineRequest`
     */
    public AddActionCombineRequest getAddActionCombineRequest() throws ClassCastException {
        return (AddActionCombineRequest)super.getActualInstance();
    }
    /**
     * Get the actual instance of `AddActionSmsRequest`. If the actual instance is not `AddActionSmsRequest`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `AddActionSmsRequest`
     * @throws ClassCastException if the instance is not `AddActionSmsRequest`
     */
    public AddActionSmsRequest getAddActionSmsRequest() throws ClassCastException {
        return (AddActionSmsRequest)super.getActualInstance();
    }
    /**
     * Get the actual instance of `AddActionWebhookRequest`. If the actual instance is not `AddActionWebhookRequest`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `AddActionWebhookRequest`
     * @throws ClassCastException if the instance is not `AddActionWebhookRequest`
     */
    public AddActionWebhookRequest getAddActionWebhookRequest() throws ClassCastException {
        return (AddActionWebhookRequest)super.getActualInstance();
    }
    /**
     * Get the actual instance of `AddActionDaemonRequest`. If the actual instance is not `AddActionDaemonRequest`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `AddActionDaemonRequest`
     * @throws ClassCastException if the instance is not `AddActionDaemonRequest`
     */
    public AddActionDaemonRequest getAddActionDaemonRequest() throws ClassCastException {
        return (AddActionDaemonRequest)super.getActualInstance();
    }
    /**
     * Get the actual instance of `AddActionSendRequest`. If the actual instance is not `AddActionSendRequest`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `AddActionSendRequest`
     * @throws ClassCastException if the instance is not `AddActionSendRequest`
     */
    public AddActionSendRequest getAddActionSendRequest() throws ClassCastException {
        return (AddActionSendRequest)super.getActualInstance();
    }
    /**
     * Get the actual instance of `AddActionForwardRequest`. If the actual instance is not `AddActionForwardRequest`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `AddActionForwardRequest`
     * @throws ClassCastException if the instance is not `AddActionForwardRequest`
     */
    public AddActionForwardRequest getAddActionForwardRequest() throws ClassCastException {
        return (AddActionForwardRequest)super.getActualInstance();
    }
    /**
     * Get the actual instance of `AddActionReplyRequest`. If the actual instance is not `AddActionReplyRequest`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `AddActionReplyRequest`
     * @throws ClassCastException if the instance is not `AddActionReplyRequest`
     */
    public AddActionReplyRequest getAddActionReplyRequest() throws ClassCastException {
        return (AddActionReplyRequest)super.getActualInstance();
    }
    /**
     * Get the actual instance of `AddActionReplyAllRequest`. If the actual instance is not `AddActionReplyAllRequest`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `AddActionReplyAllRequest`
     * @throws ClassCastException if the instance is not `AddActionReplyAllRequest`
     */
    public AddActionReplyAllRequest getAddActionReplyAllRequest() throws ClassCastException {
        return (AddActionReplyAllRequest)super.getActualInstance();
    }
    /**
     * Get the actual instance of `AddActionAliasRequest`. If the actual instance is not `AddActionAliasRequest`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `AddActionAliasRequest`
     * @throws ClassCastException if the instance is not `AddActionAliasRequest`
     */
    public AddActionAliasRequest getAddActionAliasRequest() throws ClassCastException {
        return (AddActionAliasRequest)super.getActualInstance();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to AddActionRequest
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        // validate oneOf schemas one by one
        int validCount = 0;
        ArrayList<String> errorMessages = new ArrayList<>();
        // validate the json string with AddActionCombineRequest
        try {
            AddActionCombineRequest.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for AddActionCombineRequest failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with AddActionSmsRequest
        try {
            AddActionSmsRequest.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for AddActionSmsRequest failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with AddActionWebhookRequest
        try {
            AddActionWebhookRequest.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for AddActionWebhookRequest failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with AddActionDaemonRequest
        try {
            AddActionDaemonRequest.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for AddActionDaemonRequest failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with AddActionSendRequest
        try {
            AddActionSendRequest.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for AddActionSendRequest failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with AddActionForwardRequest
        try {
            AddActionForwardRequest.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for AddActionForwardRequest failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with AddActionReplyRequest
        try {
            AddActionReplyRequest.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for AddActionReplyRequest failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with AddActionReplyAllRequest
        try {
            AddActionReplyAllRequest.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for AddActionReplyAllRequest failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with AddActionAliasRequest
        try {
            AddActionAliasRequest.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for AddActionAliasRequest failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        if (validCount != 1) {
            throw new IOException(String.format("The JSON string is invalid for AddActionRequest with oneOf schemas: AddActionAliasRequest, AddActionCombineRequest, AddActionDaemonRequest, AddActionForwardRequest, AddActionReplyAllRequest, AddActionReplyRequest, AddActionSendRequest, AddActionSmsRequest, AddActionWebhookRequest. %d class(es) match the result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", validCount, errorMessages, jsonElement.toString()));
        }
    }

    /**
     * Create an instance of AddActionRequest given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of AddActionRequest
     * @throws IOException if the JSON string is invalid with respect to AddActionRequest
     */
    public static AddActionRequest fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, AddActionRequest.class);
    }

    /**
     * Convert an instance of AddActionRequest to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

