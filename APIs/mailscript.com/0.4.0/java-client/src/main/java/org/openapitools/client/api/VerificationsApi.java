/*
 * Mailscript
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AddVerificationRequest;
import org.openapitools.client.model.AddVerificationResponse;
import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.GetAllVerificationsResponse;
import org.openapitools.client.model.VerifyRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class VerificationsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public VerificationsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public VerificationsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for addVerification
     * @param addVerificationRequest Key body (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Failure </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad credentials </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addVerificationCall(AddVerificationRequest addVerificationRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = addVerificationRequest;

        // create path and map variables
        String localVarPath = "/verifications";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addVerificationValidateBeforeCall(AddVerificationRequest addVerificationRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'addVerificationRequest' is set
        if (addVerificationRequest == null) {
            throw new ApiException("Missing the required parameter 'addVerificationRequest' when calling addVerification(Async)");
        }

        return addVerificationCall(addVerificationRequest, _callback);

    }

    /**
     * Start verification process for external email address or sms number
     * 
     * @param addVerificationRequest Key body (required)
     * @return AddVerificationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Failure </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad credentials </td><td>  -  </td></tr>
     </table>
     */
    public AddVerificationResponse addVerification(AddVerificationRequest addVerificationRequest) throws ApiException {
        ApiResponse<AddVerificationResponse> localVarResp = addVerificationWithHttpInfo(addVerificationRequest);
        return localVarResp.getData();
    }

    /**
     * Start verification process for external email address or sms number
     * 
     * @param addVerificationRequest Key body (required)
     * @return ApiResponse&lt;AddVerificationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Failure </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad credentials </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AddVerificationResponse> addVerificationWithHttpInfo(AddVerificationRequest addVerificationRequest) throws ApiException {
        okhttp3.Call localVarCall = addVerificationValidateBeforeCall(addVerificationRequest, null);
        Type localVarReturnType = new TypeToken<AddVerificationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Start verification process for external email address or sms number (asynchronously)
     * 
     * @param addVerificationRequest Key body (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Failure </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad credentials </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addVerificationAsync(AddVerificationRequest addVerificationRequest, final ApiCallback<AddVerificationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = addVerificationValidateBeforeCall(addVerificationRequest, _callback);
        Type localVarReturnType = new TypeToken<AddVerificationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAllVerifications
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad credentials </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllVerificationsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/verifications";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllVerificationsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getAllVerificationsCall(_callback);

    }

    /**
     * Get all verificats for the user
     * 
     * @return GetAllVerificationsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad credentials </td><td>  -  </td></tr>
     </table>
     */
    public GetAllVerificationsResponse getAllVerifications() throws ApiException {
        ApiResponse<GetAllVerificationsResponse> localVarResp = getAllVerificationsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get all verificats for the user
     * 
     * @return ApiResponse&lt;GetAllVerificationsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad credentials </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetAllVerificationsResponse> getAllVerificationsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getAllVerificationsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<GetAllVerificationsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all verificats for the user (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad credentials </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllVerificationsAsync(final ApiCallback<GetAllVerificationsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllVerificationsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<GetAllVerificationsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for verify
     * @param verification ID of the verification entry (required)
     * @param verifyRequest Verify action body (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Failure </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized or bad code </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call verifyCall(String verification, VerifyRequest verifyRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = verifyRequest;

        // create path and map variables
        String localVarPath = "/verifications/{verification}/verify"
            .replace("{" + "verification" + "}", localVarApiClient.escapeString(verification.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call verifyValidateBeforeCall(String verification, VerifyRequest verifyRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'verification' is set
        if (verification == null) {
            throw new ApiException("Missing the required parameter 'verification' when calling verify(Async)");
        }

        // verify the required parameter 'verifyRequest' is set
        if (verifyRequest == null) {
            throw new ApiException("Missing the required parameter 'verifyRequest' when calling verify(Async)");
        }

        return verifyCall(verification, verifyRequest, _callback);

    }

    /**
     * Verify an email address or sms number with a code
     * 
     * @param verification ID of the verification entry (required)
     * @param verifyRequest Verify action body (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Failure </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized or bad code </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public void verify(String verification, VerifyRequest verifyRequest) throws ApiException {
        verifyWithHttpInfo(verification, verifyRequest);
    }

    /**
     * Verify an email address or sms number with a code
     * 
     * @param verification ID of the verification entry (required)
     * @param verifyRequest Verify action body (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Failure </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized or bad code </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> verifyWithHttpInfo(String verification, VerifyRequest verifyRequest) throws ApiException {
        okhttp3.Call localVarCall = verifyValidateBeforeCall(verification, verifyRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Verify an email address or sms number with a code (asynchronously)
     * 
     * @param verification ID of the verification entry (required)
     * @param verifyRequest Verify action body (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Failure </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized or bad code </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call verifyAsync(String verification, VerifyRequest verifyRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = verifyValidateBeforeCall(verification, verifyRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
