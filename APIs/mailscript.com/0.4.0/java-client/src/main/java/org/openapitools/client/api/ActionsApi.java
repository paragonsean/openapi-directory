/*
 * Mailscript
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AddActionRequest;
import org.openapitools.client.model.AddActionResponse;
import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.GetAllActionsResponse;
import org.openapitools.client.model.Key;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ActionsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ActionsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ActionsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for addAction
     * @param addActionRequest Add action body (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Failure </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized or bad code </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addActionCall(AddActionRequest addActionRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = addActionRequest;

        // create path and map variables
        String localVarPath = "/actions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addActionValidateBeforeCall(AddActionRequest addActionRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'addActionRequest' is set
        if (addActionRequest == null) {
            throw new ApiException("Missing the required parameter 'addActionRequest' when calling addAction(Async)");
        }

        return addActionCall(addActionRequest, _callback);

    }

    /**
     * Add an action
     * 
     * @param addActionRequest Add action body (required)
     * @return AddActionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Failure </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized or bad code </td><td>  -  </td></tr>
     </table>
     */
    public AddActionResponse addAction(AddActionRequest addActionRequest) throws ApiException {
        ApiResponse<AddActionResponse> localVarResp = addActionWithHttpInfo(addActionRequest);
        return localVarResp.getData();
    }

    /**
     * Add an action
     * 
     * @param addActionRequest Add action body (required)
     * @return ApiResponse&lt;AddActionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Failure </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized or bad code </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AddActionResponse> addActionWithHttpInfo(AddActionRequest addActionRequest) throws ApiException {
        okhttp3.Call localVarCall = addActionValidateBeforeCall(addActionRequest, null);
        Type localVarReturnType = new TypeToken<AddActionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add an action (asynchronously)
     * 
     * @param addActionRequest Add action body (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Failure </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized or bad code </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addActionAsync(AddActionRequest addActionRequest, final ApiCallback<AddActionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = addActionValidateBeforeCall(addActionRequest, _callback);
        Type localVarReturnType = new TypeToken<AddActionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteAction
     * @param action ID of the action (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful delete operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Failure </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad credentials </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Key not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteActionCall(String action, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/actions/{action}"
            .replace("{" + "action" + "}", localVarApiClient.escapeString(action.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteActionValidateBeforeCall(String action, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling deleteAction(Async)");
        }

        return deleteActionCall(action, _callback);

    }

    /**
     * Delete an action
     * 
     * @param action ID of the action (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful delete operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Failure </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad credentials </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Key not found </td><td>  -  </td></tr>
     </table>
     */
    public void deleteAction(String action) throws ApiException {
        deleteActionWithHttpInfo(action);
    }

    /**
     * Delete an action
     * 
     * @param action ID of the action (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful delete operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Failure </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad credentials </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Key not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteActionWithHttpInfo(String action) throws ApiException {
        okhttp3.Call localVarCall = deleteActionValidateBeforeCall(action, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete an action (asynchronously)
     * 
     * @param action ID of the action (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful delete operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Failure </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad credentials </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Key not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteActionAsync(String action, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteActionValidateBeforeCall(action, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAllActions
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad credentials </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllActionsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/actions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllActionsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getAllActionsCall(_callback);

    }

    /**
     * Get all actions for the user
     * 
     * @return GetAllActionsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad credentials </td><td>  -  </td></tr>
     </table>
     */
    public GetAllActionsResponse getAllActions() throws ApiException {
        ApiResponse<GetAllActionsResponse> localVarResp = getAllActionsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get all actions for the user
     * 
     * @return ApiResponse&lt;GetAllActionsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad credentials </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetAllActionsResponse> getAllActionsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getAllActionsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<GetAllActionsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all actions for the user (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad credentials </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllActionsAsync(final ApiCallback<GetAllActionsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllActionsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<GetAllActionsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateAction
     * @param action ID of action (required)
     * @param addActionRequest Action body (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful update operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Failure </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad credentials </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Key not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateActionCall(String action, AddActionRequest addActionRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = addActionRequest;

        // create path and map variables
        String localVarPath = "/actions/{action}"
            .replace("{" + "action" + "}", localVarApiClient.escapeString(action.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateActionValidateBeforeCall(String action, AddActionRequest addActionRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling updateAction(Async)");
        }

        // verify the required parameter 'addActionRequest' is set
        if (addActionRequest == null) {
            throw new ApiException("Missing the required parameter 'addActionRequest' when calling updateAction(Async)");
        }

        return updateActionCall(action, addActionRequest, _callback);

    }

    /**
     * Update an action key
     * 
     * @param action ID of action (required)
     * @param addActionRequest Action body (required)
     * @return Key
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful update operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Failure </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad credentials </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Key not found </td><td>  -  </td></tr>
     </table>
     */
    public Key updateAction(String action, AddActionRequest addActionRequest) throws ApiException {
        ApiResponse<Key> localVarResp = updateActionWithHttpInfo(action, addActionRequest);
        return localVarResp.getData();
    }

    /**
     * Update an action key
     * 
     * @param action ID of action (required)
     * @param addActionRequest Action body (required)
     * @return ApiResponse&lt;Key&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful update operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Failure </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad credentials </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Key not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Key> updateActionWithHttpInfo(String action, AddActionRequest addActionRequest) throws ApiException {
        okhttp3.Call localVarCall = updateActionValidateBeforeCall(action, addActionRequest, null);
        Type localVarReturnType = new TypeToken<Key>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update an action key (asynchronously)
     * 
     * @param action ID of action (required)
     * @param addActionRequest Action body (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful update operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Failure </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Bad credentials </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Key not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateActionAsync(String action, AddActionRequest addActionRequest, final ApiCallback<Key> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateActionValidateBeforeCall(action, addActionRequest, _callback);
        Type localVarReturnType = new TypeToken<Key>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
