/**
 * Mailscript
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.4.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAddTriggerRequest_criteria.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAddTriggerRequest_criteria::OAIAddTriggerRequest_criteria(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAddTriggerRequest_criteria::OAIAddTriggerRequest_criteria() {
    this->initializeModel();
}

OAIAddTriggerRequest_criteria::~OAIAddTriggerRequest_criteria() {}

void OAIAddTriggerRequest_criteria::initializeModel() {

    m_domain_isSet = false;
    m_domain_isValid = false;

    m_from_isSet = false;
    m_from_isValid = false;

    m_has_attachments_isSet = false;
    m_has_attachments_isValid = false;

    m_has_the_words_isSet = false;
    m_has_the_words_isValid = false;

    m_sent_to_isSet = false;
    m_sent_to_isValid = false;

    m_subject_contains_isSet = false;
    m_subject_contains_isValid = false;

    m_r_and_isSet = false;
    m_r_and_isValid = false;

    m_r_or_isSet = false;
    m_r_or_isValid = false;
}

void OAIAddTriggerRequest_criteria::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAddTriggerRequest_criteria::fromJsonObject(QJsonObject json) {

    m_domain_isValid = ::OpenAPI::fromJsonValue(m_domain, json[QString("domain")]);
    m_domain_isSet = !json[QString("domain")].isNull() && m_domain_isValid;

    m_from_isValid = ::OpenAPI::fromJsonValue(m_from, json[QString("from")]);
    m_from_isSet = !json[QString("from")].isNull() && m_from_isValid;

    m_has_attachments_isValid = ::OpenAPI::fromJsonValue(m_has_attachments, json[QString("hasAttachments")]);
    m_has_attachments_isSet = !json[QString("hasAttachments")].isNull() && m_has_attachments_isValid;

    m_has_the_words_isValid = ::OpenAPI::fromJsonValue(m_has_the_words, json[QString("hasTheWords")]);
    m_has_the_words_isSet = !json[QString("hasTheWords")].isNull() && m_has_the_words_isValid;

    m_sent_to_isValid = ::OpenAPI::fromJsonValue(m_sent_to, json[QString("sentTo")]);
    m_sent_to_isSet = !json[QString("sentTo")].isNull() && m_sent_to_isValid;

    m_subject_contains_isValid = ::OpenAPI::fromJsonValue(m_subject_contains, json[QString("subjectContains")]);
    m_subject_contains_isSet = !json[QString("subjectContains")].isNull() && m_subject_contains_isValid;

    m_r_and_isValid = ::OpenAPI::fromJsonValue(m_r_and, json[QString("and")]);
    m_r_and_isSet = !json[QString("and")].isNull() && m_r_and_isValid;

    m_r_or_isValid = ::OpenAPI::fromJsonValue(m_r_or, json[QString("or")]);
    m_r_or_isSet = !json[QString("or")].isNull() && m_r_or_isValid;
}

QString OAIAddTriggerRequest_criteria::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAddTriggerRequest_criteria::asJsonObject() const {
    QJsonObject obj;
    if (m_domain_isSet) {
        obj.insert(QString("domain"), ::OpenAPI::toJsonValue(m_domain));
    }
    if (m_from_isSet) {
        obj.insert(QString("from"), ::OpenAPI::toJsonValue(m_from));
    }
    if (m_has_attachments_isSet) {
        obj.insert(QString("hasAttachments"), ::OpenAPI::toJsonValue(m_has_attachments));
    }
    if (m_has_the_words_isSet) {
        obj.insert(QString("hasTheWords"), ::OpenAPI::toJsonValue(m_has_the_words));
    }
    if (m_sent_to_isSet) {
        obj.insert(QString("sentTo"), ::OpenAPI::toJsonValue(m_sent_to));
    }
    if (m_subject_contains_isSet) {
        obj.insert(QString("subjectContains"), ::OpenAPI::toJsonValue(m_subject_contains));
    }
    if (m_r_and.size() > 0) {
        obj.insert(QString("and"), ::OpenAPI::toJsonValue(m_r_and));
    }
    if (m_r_or.size() > 0) {
        obj.insert(QString("or"), ::OpenAPI::toJsonValue(m_r_or));
    }
    return obj;
}

QString OAIAddTriggerRequest_criteria::getDomain() const {
    return m_domain;
}
void OAIAddTriggerRequest_criteria::setDomain(const QString &domain) {
    m_domain = domain;
    m_domain_isSet = true;
}

bool OAIAddTriggerRequest_criteria::is_domain_Set() const{
    return m_domain_isSet;
}

bool OAIAddTriggerRequest_criteria::is_domain_Valid() const{
    return m_domain_isValid;
}

QString OAIAddTriggerRequest_criteria::getFrom() const {
    return m_from;
}
void OAIAddTriggerRequest_criteria::setFrom(const QString &from) {
    m_from = from;
    m_from_isSet = true;
}

bool OAIAddTriggerRequest_criteria::is_from_Set() const{
    return m_from_isSet;
}

bool OAIAddTriggerRequest_criteria::is_from_Valid() const{
    return m_from_isValid;
}

bool OAIAddTriggerRequest_criteria::isHasAttachments() const {
    return m_has_attachments;
}
void OAIAddTriggerRequest_criteria::setHasAttachments(const bool &has_attachments) {
    m_has_attachments = has_attachments;
    m_has_attachments_isSet = true;
}

bool OAIAddTriggerRequest_criteria::is_has_attachments_Set() const{
    return m_has_attachments_isSet;
}

bool OAIAddTriggerRequest_criteria::is_has_attachments_Valid() const{
    return m_has_attachments_isValid;
}

QString OAIAddTriggerRequest_criteria::getHasTheWords() const {
    return m_has_the_words;
}
void OAIAddTriggerRequest_criteria::setHasTheWords(const QString &has_the_words) {
    m_has_the_words = has_the_words;
    m_has_the_words_isSet = true;
}

bool OAIAddTriggerRequest_criteria::is_has_the_words_Set() const{
    return m_has_the_words_isSet;
}

bool OAIAddTriggerRequest_criteria::is_has_the_words_Valid() const{
    return m_has_the_words_isValid;
}

QString OAIAddTriggerRequest_criteria::getSentTo() const {
    return m_sent_to;
}
void OAIAddTriggerRequest_criteria::setSentTo(const QString &sent_to) {
    m_sent_to = sent_to;
    m_sent_to_isSet = true;
}

bool OAIAddTriggerRequest_criteria::is_sent_to_Set() const{
    return m_sent_to_isSet;
}

bool OAIAddTriggerRequest_criteria::is_sent_to_Valid() const{
    return m_sent_to_isValid;
}

QString OAIAddTriggerRequest_criteria::getSubjectContains() const {
    return m_subject_contains;
}
void OAIAddTriggerRequest_criteria::setSubjectContains(const QString &subject_contains) {
    m_subject_contains = subject_contains;
    m_subject_contains_isSet = true;
}

bool OAIAddTriggerRequest_criteria::is_subject_contains_Set() const{
    return m_subject_contains_isSet;
}

bool OAIAddTriggerRequest_criteria::is_subject_contains_Valid() const{
    return m_subject_contains_isValid;
}

QList<QString> OAIAddTriggerRequest_criteria::getRAnd() const {
    return m_r_and;
}
void OAIAddTriggerRequest_criteria::setRAnd(const QList<QString> &r_and) {
    m_r_and = r_and;
    m_r_and_isSet = true;
}

bool OAIAddTriggerRequest_criteria::is_r_and_Set() const{
    return m_r_and_isSet;
}

bool OAIAddTriggerRequest_criteria::is_r_and_Valid() const{
    return m_r_and_isValid;
}

QList<QString> OAIAddTriggerRequest_criteria::getROr() const {
    return m_r_or;
}
void OAIAddTriggerRequest_criteria::setROr(const QList<QString> &r_or) {
    m_r_or = r_or;
    m_r_or_isSet = true;
}

bool OAIAddTriggerRequest_criteria::is_r_or_Set() const{
    return m_r_or_isSet;
}

bool OAIAddTriggerRequest_criteria::is_r_or_Valid() const{
    return m_r_or_isValid;
}

bool OAIAddTriggerRequest_criteria::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_domain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_from_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_attachments_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_the_words_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sent_to_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subject_contains_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_and.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_or.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAddTriggerRequest_criteria::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
