/**
 * Mailscript
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.4.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWorkflow.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWorkflow::OAIWorkflow(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWorkflow::OAIWorkflow() {
    this->initializeModel();
}

OAIWorkflow::~OAIWorkflow() {}

void OAIWorkflow::initializeModel() {

    m_action_isSet = false;
    m_action_isValid = false;

    m_active_isSet = false;
    m_active_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_created_by_isSet = false;
    m_created_by_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_input_isSet = false;
    m_input_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_owner_isSet = false;
    m_owner_isValid = false;

    m_trigger_isSet = false;
    m_trigger_isValid = false;
}

void OAIWorkflow::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWorkflow::fromJsonObject(QJsonObject json) {

    m_action_isValid = ::OpenAPI::fromJsonValue(m_action, json[QString("action")]);
    m_action_isSet = !json[QString("action")].isNull() && m_action_isValid;

    m_active_isValid = ::OpenAPI::fromJsonValue(m_active, json[QString("active")]);
    m_active_isSet = !json[QString("active")].isNull() && m_active_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("createdAt")]);
    m_created_at_isSet = !json[QString("createdAt")].isNull() && m_created_at_isValid;

    m_created_by_isValid = ::OpenAPI::fromJsonValue(m_created_by, json[QString("createdBy")]);
    m_created_by_isSet = !json[QString("createdBy")].isNull() && m_created_by_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_input_isValid = ::OpenAPI::fromJsonValue(m_input, json[QString("input")]);
    m_input_isSet = !json[QString("input")].isNull() && m_input_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_owner_isValid = ::OpenAPI::fromJsonValue(m_owner, json[QString("owner")]);
    m_owner_isSet = !json[QString("owner")].isNull() && m_owner_isValid;

    m_trigger_isValid = ::OpenAPI::fromJsonValue(m_trigger, json[QString("trigger")]);
    m_trigger_isSet = !json[QString("trigger")].isNull() && m_trigger_isValid;
}

QString OAIWorkflow::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWorkflow::asJsonObject() const {
    QJsonObject obj;
    if (m_action_isSet) {
        obj.insert(QString("action"), ::OpenAPI::toJsonValue(m_action));
    }
    if (m_active_isSet) {
        obj.insert(QString("active"), ::OpenAPI::toJsonValue(m_active));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("createdAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_created_by_isSet) {
        obj.insert(QString("createdBy"), ::OpenAPI::toJsonValue(m_created_by));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_input_isSet) {
        obj.insert(QString("input"), ::OpenAPI::toJsonValue(m_input));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_owner_isSet) {
        obj.insert(QString("owner"), ::OpenAPI::toJsonValue(m_owner));
    }
    if (m_trigger_isSet) {
        obj.insert(QString("trigger"), ::OpenAPI::toJsonValue(m_trigger));
    }
    return obj;
}

QString OAIWorkflow::getAction() const {
    return m_action;
}
void OAIWorkflow::setAction(const QString &action) {
    m_action = action;
    m_action_isSet = true;
}

bool OAIWorkflow::is_action_Set() const{
    return m_action_isSet;
}

bool OAIWorkflow::is_action_Valid() const{
    return m_action_isValid;
}

bool OAIWorkflow::isActive() const {
    return m_active;
}
void OAIWorkflow::setActive(const bool &active) {
    m_active = active;
    m_active_isSet = true;
}

bool OAIWorkflow::is_active_Set() const{
    return m_active_isSet;
}

bool OAIWorkflow::is_active_Valid() const{
    return m_active_isValid;
}

QDateTime OAIWorkflow::getCreatedAt() const {
    return m_created_at;
}
void OAIWorkflow::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIWorkflow::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIWorkflow::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIWorkflow::getCreatedBy() const {
    return m_created_by;
}
void OAIWorkflow::setCreatedBy(const QString &created_by) {
    m_created_by = created_by;
    m_created_by_isSet = true;
}

bool OAIWorkflow::is_created_by_Set() const{
    return m_created_by_isSet;
}

bool OAIWorkflow::is_created_by_Valid() const{
    return m_created_by_isValid;
}

QString OAIWorkflow::getId() const {
    return m_id;
}
void OAIWorkflow::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIWorkflow::is_id_Set() const{
    return m_id_isSet;
}

bool OAIWorkflow::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIWorkflow::getInput() const {
    return m_input;
}
void OAIWorkflow::setInput(const QString &input) {
    m_input = input;
    m_input_isSet = true;
}

bool OAIWorkflow::is_input_Set() const{
    return m_input_isSet;
}

bool OAIWorkflow::is_input_Valid() const{
    return m_input_isValid;
}

QString OAIWorkflow::getName() const {
    return m_name;
}
void OAIWorkflow::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIWorkflow::is_name_Set() const{
    return m_name_isSet;
}

bool OAIWorkflow::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIWorkflow::getOwner() const {
    return m_owner;
}
void OAIWorkflow::setOwner(const QString &owner) {
    m_owner = owner;
    m_owner_isSet = true;
}

bool OAIWorkflow::is_owner_Set() const{
    return m_owner_isSet;
}

bool OAIWorkflow::is_owner_Valid() const{
    return m_owner_isValid;
}

QString OAIWorkflow::getTrigger() const {
    return m_trigger;
}
void OAIWorkflow::setTrigger(const QString &trigger) {
    m_trigger = trigger;
    m_trigger_isSet = true;
}

bool OAIWorkflow::is_trigger_Set() const{
    return m_trigger_isSet;
}

bool OAIWorkflow::is_trigger_Valid() const{
    return m_trigger_isValid;
}

bool OAIWorkflow::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_action_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_active_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_input_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_trigger_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWorkflow::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_action_isValid && m_created_at_isValid && m_created_by_isValid && m_id_isValid && m_input_isValid && m_name_isValid && m_owner_isValid && m_trigger_isValid && true;
}

} // namespace OpenAPI
