/**
 * Mailscript
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.4.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAITriggersApi_H
#define OAI_OAITriggersApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAddTriggerRequest.h"
#include "OAIAddTriggerResponse.h"
#include "OAIErrorResponse.h"
#include "OAIGetAllTriggersResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAITriggersApi : public QObject {
    Q_OBJECT

public:
    OAITriggersApi(const int timeOut = 0);
    ~OAITriggersApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_add_trigger_request OAIAddTriggerRequest [required]
    */
    virtual void addTrigger(const OAIAddTriggerRequest &oai_add_trigger_request);

    /**
    * @param[in]  trigger QString [required]
    */
    virtual void deleteTrigger(const QString &trigger);


    virtual void getAllTriggers();

    /**
    * @param[in]  trigger QString [required]
    * @param[in]  oai_add_trigger_request OAIAddTriggerRequest [required]
    */
    virtual void updateTrigger(const QString &trigger, const OAIAddTriggerRequest &oai_add_trigger_request);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void addTriggerCallback(OAIHttpRequestWorker *worker);
    void deleteTriggerCallback(OAIHttpRequestWorker *worker);
    void getAllTriggersCallback(OAIHttpRequestWorker *worker);
    void updateTriggerCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void addTriggerSignal(OAIAddTriggerResponse summary);
    void deleteTriggerSignal();
    void getAllTriggersSignal(OAIGetAllTriggersResponse summary);
    void updateTriggerSignal();


    void addTriggerSignalFull(OAIHttpRequestWorker *worker, OAIAddTriggerResponse summary);
    void deleteTriggerSignalFull(OAIHttpRequestWorker *worker);
    void getAllTriggersSignalFull(OAIHttpRequestWorker *worker, OAIGetAllTriggersResponse summary);
    void updateTriggerSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use addTriggerSignalError() instead")
    void addTriggerSignalE(OAIAddTriggerResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void addTriggerSignalError(OAIAddTriggerResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteTriggerSignalError() instead")
    void deleteTriggerSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteTriggerSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllTriggersSignalError() instead")
    void getAllTriggersSignalE(OAIGetAllTriggersResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllTriggersSignalError(OAIGetAllTriggersResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateTriggerSignalError() instead")
    void updateTriggerSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateTriggerSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use addTriggerSignalErrorFull() instead")
    void addTriggerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addTriggerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteTriggerSignalErrorFull() instead")
    void deleteTriggerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteTriggerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllTriggersSignalErrorFull() instead")
    void getAllTriggersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllTriggersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateTriggerSignalErrorFull() instead")
    void updateTriggerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateTriggerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
