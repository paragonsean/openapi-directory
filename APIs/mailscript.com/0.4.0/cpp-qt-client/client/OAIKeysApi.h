/**
 * Mailscript
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.4.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIKeysApi_H
#define OAI_OAIKeysApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAddKeyRequest.h"
#include "OAIAddKeyResponse.h"
#include "OAIErrorResponse.h"
#include "OAIGetAllKeysResponse.h"
#include "OAIKey.h"
#include "OAIUpdateKeyRequest.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIKeysApi : public QObject {
    Q_OBJECT

public:
    OAIKeysApi(const int timeOut = 0);
    ~OAIKeysApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  address QString [required]
    * @param[in]  oai_add_key_request OAIAddKeyRequest [required]
    */
    virtual void addKey(const QString &address, const OAIAddKeyRequest &oai_add_key_request);

    /**
    * @param[in]  address QString [required]
    * @param[in]  key QString [required]
    */
    virtual void deleteKey(const QString &address, const QString &key);

    /**
    * @param[in]  address QString [required]
    */
    virtual void getAllKeys(const QString &address);

    /**
    * @param[in]  address QString [required]
    * @param[in]  key QString [required]
    */
    virtual void getKey(const QString &address, const QString &key);

    /**
    * @param[in]  address QString [required]
    * @param[in]  key QString [required]
    * @param[in]  oai_update_key_request OAIUpdateKeyRequest [required]
    */
    virtual void updateKey(const QString &address, const QString &key, const OAIUpdateKeyRequest &oai_update_key_request);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void addKeyCallback(OAIHttpRequestWorker *worker);
    void deleteKeyCallback(OAIHttpRequestWorker *worker);
    void getAllKeysCallback(OAIHttpRequestWorker *worker);
    void getKeyCallback(OAIHttpRequestWorker *worker);
    void updateKeyCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void addKeySignal(OAIAddKeyResponse summary);
    void deleteKeySignal();
    void getAllKeysSignal(OAIGetAllKeysResponse summary);
    void getKeySignal(OAIKey summary);
    void updateKeySignal(OAIKey summary);


    void addKeySignalFull(OAIHttpRequestWorker *worker, OAIAddKeyResponse summary);
    void deleteKeySignalFull(OAIHttpRequestWorker *worker);
    void getAllKeysSignalFull(OAIHttpRequestWorker *worker, OAIGetAllKeysResponse summary);
    void getKeySignalFull(OAIHttpRequestWorker *worker, OAIKey summary);
    void updateKeySignalFull(OAIHttpRequestWorker *worker, OAIKey summary);

    Q_DECL_DEPRECATED_X("Use addKeySignalError() instead")
    void addKeySignalE(OAIAddKeyResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void addKeySignalError(OAIAddKeyResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteKeySignalError() instead")
    void deleteKeySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteKeySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllKeysSignalError() instead")
    void getAllKeysSignalE(OAIGetAllKeysResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllKeysSignalError(OAIGetAllKeysResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getKeySignalError() instead")
    void getKeySignalE(OAIKey summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getKeySignalError(OAIKey summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateKeySignalError() instead")
    void updateKeySignalE(OAIKey summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateKeySignalError(OAIKey summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use addKeySignalErrorFull() instead")
    void addKeySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addKeySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteKeySignalErrorFull() instead")
    void deleteKeySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteKeySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllKeysSignalErrorFull() instead")
    void getAllKeysSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllKeysSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getKeySignalErrorFull() instead")
    void getKeySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getKeySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateKeySignalErrorFull() instead")
    void updateKeySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateKeySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
