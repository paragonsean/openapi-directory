/**
 * Mailscript
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.4.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDomainsApi_H
#define OAI_OAIDomainsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAddDomainRequest.h"
#include "OAICheckDomainVerify.h"
#include "OAIDomainResponse.h"
#include "OAIErrorResponse.h"
#include "OAIGetAllDomainsResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDomainsApi : public QObject {
    Q_OBJECT

public:
    OAIDomainsApi(const int timeOut = 0);
    ~OAIDomainsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_add_domain_request OAIAddDomainRequest [required]
    */
    virtual void addDomain(const OAIAddDomainRequest &oai_add_domain_request);

    /**
    * @param[in]  domain QString [required]
    */
    virtual void checkDomainVerify(const QString &domain);


    virtual void getAllDomains();

    /**
    * @param[in]  domain QString [required]
    */
    virtual void getDomainVerify(const QString &domain);

    /**
    * @param[in]  domain QString [required]
    */
    virtual void removeDomainVerify(const QString &domain);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void addDomainCallback(OAIHttpRequestWorker *worker);
    void checkDomainVerifyCallback(OAIHttpRequestWorker *worker);
    void getAllDomainsCallback(OAIHttpRequestWorker *worker);
    void getDomainVerifyCallback(OAIHttpRequestWorker *worker);
    void removeDomainVerifyCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void addDomainSignal(OAIDomainResponse summary);
    void checkDomainVerifySignal(OAICheckDomainVerify summary);
    void getAllDomainsSignal(OAIGetAllDomainsResponse summary);
    void getDomainVerifySignal(OAIDomainResponse summary);
    void removeDomainVerifySignal();


    void addDomainSignalFull(OAIHttpRequestWorker *worker, OAIDomainResponse summary);
    void checkDomainVerifySignalFull(OAIHttpRequestWorker *worker, OAICheckDomainVerify summary);
    void getAllDomainsSignalFull(OAIHttpRequestWorker *worker, OAIGetAllDomainsResponse summary);
    void getDomainVerifySignalFull(OAIHttpRequestWorker *worker, OAIDomainResponse summary);
    void removeDomainVerifySignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use addDomainSignalError() instead")
    void addDomainSignalE(OAIDomainResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void addDomainSignalError(OAIDomainResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use checkDomainVerifySignalError() instead")
    void checkDomainVerifySignalE(OAICheckDomainVerify summary, QNetworkReply::NetworkError error_type, QString error_str);
    void checkDomainVerifySignalError(OAICheckDomainVerify summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllDomainsSignalError() instead")
    void getAllDomainsSignalE(OAIGetAllDomainsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllDomainsSignalError(OAIGetAllDomainsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDomainVerifySignalError() instead")
    void getDomainVerifySignalE(OAIDomainResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDomainVerifySignalError(OAIDomainResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeDomainVerifySignalError() instead")
    void removeDomainVerifySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void removeDomainVerifySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use addDomainSignalErrorFull() instead")
    void addDomainSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addDomainSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use checkDomainVerifySignalErrorFull() instead")
    void checkDomainVerifySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void checkDomainVerifySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllDomainsSignalErrorFull() instead")
    void getAllDomainsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllDomainsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDomainVerifySignalErrorFull() instead")
    void getDomainVerifySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDomainVerifySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeDomainVerifySignalErrorFull() instead")
    void removeDomainVerifySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void removeDomainVerifySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
