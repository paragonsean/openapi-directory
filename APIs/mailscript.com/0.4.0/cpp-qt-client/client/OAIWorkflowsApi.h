/**
 * Mailscript
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.4.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIWorkflowsApi_H
#define OAI_OAIWorkflowsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAddWorkflowRequest.h"
#include "OAIErrorResponse.h"
#include "OAIGetAllWorkflowsResponse.h"
#include "OAISetWorkflowRequest.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIWorkflowsApi : public QObject {
    Q_OBJECT

public:
    OAIWorkflowsApi(const int timeOut = 0);
    ~OAIWorkflowsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_add_workflow_request OAIAddWorkflowRequest [required]
    */
    virtual void addWorkflow(const OAIAddWorkflowRequest &oai_add_workflow_request);

    /**
    * @param[in]  workflow QString [required]
    */
    virtual void deleteWorkflow(const QString &workflow);


    virtual void getAllWorkflows();

    /**
    * @param[in]  oai_set_workflow_request OAISetWorkflowRequest [required]
    */
    virtual void setWorkflow(const OAISetWorkflowRequest &oai_set_workflow_request);

    /**
    * @param[in]  workflow QString [required]
    * @param[in]  oai_add_workflow_request OAIAddWorkflowRequest [required]
    */
    virtual void updateWorkflow(const QString &workflow, const OAIAddWorkflowRequest &oai_add_workflow_request);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void addWorkflowCallback(OAIHttpRequestWorker *worker);
    void deleteWorkflowCallback(OAIHttpRequestWorker *worker);
    void getAllWorkflowsCallback(OAIHttpRequestWorker *worker);
    void setWorkflowCallback(OAIHttpRequestWorker *worker);
    void updateWorkflowCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void addWorkflowSignal();
    void deleteWorkflowSignal();
    void getAllWorkflowsSignal(OAIGetAllWorkflowsResponse summary);
    void setWorkflowSignal();
    void updateWorkflowSignal();


    void addWorkflowSignalFull(OAIHttpRequestWorker *worker);
    void deleteWorkflowSignalFull(OAIHttpRequestWorker *worker);
    void getAllWorkflowsSignalFull(OAIHttpRequestWorker *worker, OAIGetAllWorkflowsResponse summary);
    void setWorkflowSignalFull(OAIHttpRequestWorker *worker);
    void updateWorkflowSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use addWorkflowSignalError() instead")
    void addWorkflowSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void addWorkflowSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteWorkflowSignalError() instead")
    void deleteWorkflowSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteWorkflowSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllWorkflowsSignalError() instead")
    void getAllWorkflowsSignalE(OAIGetAllWorkflowsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllWorkflowsSignalError(OAIGetAllWorkflowsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setWorkflowSignalError() instead")
    void setWorkflowSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void setWorkflowSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateWorkflowSignalError() instead")
    void updateWorkflowSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateWorkflowSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use addWorkflowSignalErrorFull() instead")
    void addWorkflowSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addWorkflowSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteWorkflowSignalErrorFull() instead")
    void deleteWorkflowSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteWorkflowSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllWorkflowsSignalErrorFull() instead")
    void getAllWorkflowsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllWorkflowsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setWorkflowSignalErrorFull() instead")
    void setWorkflowSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setWorkflowSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateWorkflowSignalErrorFull() instead")
    void updateWorkflowSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateWorkflowSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
