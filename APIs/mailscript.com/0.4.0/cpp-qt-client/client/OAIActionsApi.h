/**
 * Mailscript
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.4.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIActionsApi_H
#define OAI_OAIActionsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAddActionResponse.h"
#include "OAIAddAction_request.h"
#include "OAIErrorResponse.h"
#include "OAIGetAllActionsResponse.h"
#include "OAIKey.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIActionsApi : public QObject {
    Q_OBJECT

public:
    OAIActionsApi(const int timeOut = 0);
    ~OAIActionsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_add_action_request OAIAddAction_request [required]
    */
    virtual void addAction(const OAIAddAction_request &oai_add_action_request);

    /**
    * @param[in]  action QString [required]
    */
    virtual void deleteAction(const QString &action);


    virtual void getAllActions();

    /**
    * @param[in]  action QString [required]
    * @param[in]  oai_add_action_request OAIAddAction_request [required]
    */
    virtual void updateAction(const QString &action, const OAIAddAction_request &oai_add_action_request);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void addActionCallback(OAIHttpRequestWorker *worker);
    void deleteActionCallback(OAIHttpRequestWorker *worker);
    void getAllActionsCallback(OAIHttpRequestWorker *worker);
    void updateActionCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void addActionSignal(OAIAddActionResponse summary);
    void deleteActionSignal();
    void getAllActionsSignal(OAIGetAllActionsResponse summary);
    void updateActionSignal(OAIKey summary);


    void addActionSignalFull(OAIHttpRequestWorker *worker, OAIAddActionResponse summary);
    void deleteActionSignalFull(OAIHttpRequestWorker *worker);
    void getAllActionsSignalFull(OAIHttpRequestWorker *worker, OAIGetAllActionsResponse summary);
    void updateActionSignalFull(OAIHttpRequestWorker *worker, OAIKey summary);

    Q_DECL_DEPRECATED_X("Use addActionSignalError() instead")
    void addActionSignalE(OAIAddActionResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void addActionSignalError(OAIAddActionResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteActionSignalError() instead")
    void deleteActionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteActionSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllActionsSignalError() instead")
    void getAllActionsSignalE(OAIGetAllActionsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllActionsSignalError(OAIGetAllActionsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateActionSignalError() instead")
    void updateActionSignalE(OAIKey summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateActionSignalError(OAIKey summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use addActionSignalErrorFull() instead")
    void addActionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addActionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteActionSignalErrorFull() instead")
    void deleteActionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteActionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllActionsSignalErrorFull() instead")
    void getAllActionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllActionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateActionSignalErrorFull() instead")
    void updateActionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateActionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
