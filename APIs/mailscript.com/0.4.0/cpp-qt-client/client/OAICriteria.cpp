/**
 * Mailscript
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.4.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICriteria.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICriteria::OAICriteria(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICriteria::OAICriteria() {
    this->initializeModel();
}

OAICriteria::~OAICriteria() {}

void OAICriteria::initializeModel() {

    m_domain_isSet = false;
    m_domain_isValid = false;

    m_from_isSet = false;
    m_from_isValid = false;

    m_has_attachments_isSet = false;
    m_has_attachments_isValid = false;

    m_has_the_words_isSet = false;
    m_has_the_words_isValid = false;

    m_sent_to_isSet = false;
    m_sent_to_isValid = false;

    m_subject_contains_isSet = false;
    m_subject_contains_isValid = false;
}

void OAICriteria::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICriteria::fromJsonObject(QJsonObject json) {

    m_domain_isValid = ::OpenAPI::fromJsonValue(m_domain, json[QString("domain")]);
    m_domain_isSet = !json[QString("domain")].isNull() && m_domain_isValid;

    m_from_isValid = ::OpenAPI::fromJsonValue(m_from, json[QString("from")]);
    m_from_isSet = !json[QString("from")].isNull() && m_from_isValid;

    m_has_attachments_isValid = ::OpenAPI::fromJsonValue(m_has_attachments, json[QString("hasAttachments")]);
    m_has_attachments_isSet = !json[QString("hasAttachments")].isNull() && m_has_attachments_isValid;

    m_has_the_words_isValid = ::OpenAPI::fromJsonValue(m_has_the_words, json[QString("hasTheWords")]);
    m_has_the_words_isSet = !json[QString("hasTheWords")].isNull() && m_has_the_words_isValid;

    m_sent_to_isValid = ::OpenAPI::fromJsonValue(m_sent_to, json[QString("sentTo")]);
    m_sent_to_isSet = !json[QString("sentTo")].isNull() && m_sent_to_isValid;

    m_subject_contains_isValid = ::OpenAPI::fromJsonValue(m_subject_contains, json[QString("subjectContains")]);
    m_subject_contains_isSet = !json[QString("subjectContains")].isNull() && m_subject_contains_isValid;
}

QString OAICriteria::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICriteria::asJsonObject() const {
    QJsonObject obj;
    if (m_domain_isSet) {
        obj.insert(QString("domain"), ::OpenAPI::toJsonValue(m_domain));
    }
    if (m_from_isSet) {
        obj.insert(QString("from"), ::OpenAPI::toJsonValue(m_from));
    }
    if (m_has_attachments_isSet) {
        obj.insert(QString("hasAttachments"), ::OpenAPI::toJsonValue(m_has_attachments));
    }
    if (m_has_the_words_isSet) {
        obj.insert(QString("hasTheWords"), ::OpenAPI::toJsonValue(m_has_the_words));
    }
    if (m_sent_to_isSet) {
        obj.insert(QString("sentTo"), ::OpenAPI::toJsonValue(m_sent_to));
    }
    if (m_subject_contains_isSet) {
        obj.insert(QString("subjectContains"), ::OpenAPI::toJsonValue(m_subject_contains));
    }
    return obj;
}

QString OAICriteria::getDomain() const {
    return m_domain;
}
void OAICriteria::setDomain(const QString &domain) {
    m_domain = domain;
    m_domain_isSet = true;
}

bool OAICriteria::is_domain_Set() const{
    return m_domain_isSet;
}

bool OAICriteria::is_domain_Valid() const{
    return m_domain_isValid;
}

QString OAICriteria::getFrom() const {
    return m_from;
}
void OAICriteria::setFrom(const QString &from) {
    m_from = from;
    m_from_isSet = true;
}

bool OAICriteria::is_from_Set() const{
    return m_from_isSet;
}

bool OAICriteria::is_from_Valid() const{
    return m_from_isValid;
}

bool OAICriteria::isHasAttachments() const {
    return m_has_attachments;
}
void OAICriteria::setHasAttachments(const bool &has_attachments) {
    m_has_attachments = has_attachments;
    m_has_attachments_isSet = true;
}

bool OAICriteria::is_has_attachments_Set() const{
    return m_has_attachments_isSet;
}

bool OAICriteria::is_has_attachments_Valid() const{
    return m_has_attachments_isValid;
}

QString OAICriteria::getHasTheWords() const {
    return m_has_the_words;
}
void OAICriteria::setHasTheWords(const QString &has_the_words) {
    m_has_the_words = has_the_words;
    m_has_the_words_isSet = true;
}

bool OAICriteria::is_has_the_words_Set() const{
    return m_has_the_words_isSet;
}

bool OAICriteria::is_has_the_words_Valid() const{
    return m_has_the_words_isValid;
}

QString OAICriteria::getSentTo() const {
    return m_sent_to;
}
void OAICriteria::setSentTo(const QString &sent_to) {
    m_sent_to = sent_to;
    m_sent_to_isSet = true;
}

bool OAICriteria::is_sent_to_Set() const{
    return m_sent_to_isSet;
}

bool OAICriteria::is_sent_to_Valid() const{
    return m_sent_to_isValid;
}

QString OAICriteria::getSubjectContains() const {
    return m_subject_contains;
}
void OAICriteria::setSubjectContains(const QString &subject_contains) {
    m_subject_contains = subject_contains;
    m_subject_contains_isSet = true;
}

bool OAICriteria::is_subject_contains_Set() const{
    return m_subject_contains_isSet;
}

bool OAICriteria::is_subject_contains_Valid() const{
    return m_subject_contains_isValid;
}

bool OAICriteria::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_domain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_from_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_attachments_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_the_words_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sent_to_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subject_contains_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICriteria::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
