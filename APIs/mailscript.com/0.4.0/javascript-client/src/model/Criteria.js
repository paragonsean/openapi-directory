/**
 * Mailscript
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Criteria model module.
 * @module model/Criteria
 * @version 0.4.0
 */
class Criteria {
    /**
     * Constructs a new <code>Criteria</code>.
     * @alias module:model/Criteria
     */
    constructor() { 
        
        Criteria.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Criteria</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Criteria} obj Optional instance to populate.
     * @return {module:model/Criteria} The populated <code>Criteria</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Criteria();

            if (data.hasOwnProperty('domain')) {
                obj['domain'] = ApiClient.convertToType(data['domain'], 'String');
            }
            if (data.hasOwnProperty('from')) {
                obj['from'] = ApiClient.convertToType(data['from'], 'String');
            }
            if (data.hasOwnProperty('hasAttachments')) {
                obj['hasAttachments'] = ApiClient.convertToType(data['hasAttachments'], 'Boolean');
            }
            if (data.hasOwnProperty('hasTheWords')) {
                obj['hasTheWords'] = ApiClient.convertToType(data['hasTheWords'], 'String');
            }
            if (data.hasOwnProperty('sentTo')) {
                obj['sentTo'] = ApiClient.convertToType(data['sentTo'], 'String');
            }
            if (data.hasOwnProperty('subjectContains')) {
                obj['subjectContains'] = ApiClient.convertToType(data['subjectContains'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Criteria</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Criteria</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['domain'] && !(typeof data['domain'] === 'string' || data['domain'] instanceof String)) {
            throw new Error("Expected the field `domain` to be a primitive type in the JSON string but got " + data['domain']);
        }
        // ensure the json data is a string
        if (data['from'] && !(typeof data['from'] === 'string' || data['from'] instanceof String)) {
            throw new Error("Expected the field `from` to be a primitive type in the JSON string but got " + data['from']);
        }
        // ensure the json data is a string
        if (data['hasTheWords'] && !(typeof data['hasTheWords'] === 'string' || data['hasTheWords'] instanceof String)) {
            throw new Error("Expected the field `hasTheWords` to be a primitive type in the JSON string but got " + data['hasTheWords']);
        }
        // ensure the json data is a string
        if (data['sentTo'] && !(typeof data['sentTo'] === 'string' || data['sentTo'] instanceof String)) {
            throw new Error("Expected the field `sentTo` to be a primitive type in the JSON string but got " + data['sentTo']);
        }
        // ensure the json data is a string
        if (data['subjectContains'] && !(typeof data['subjectContains'] === 'string' || data['subjectContains'] instanceof String)) {
            throw new Error("Expected the field `subjectContains` to be a primitive type in the JSON string but got " + data['subjectContains']);
        }

        return true;
    }


}



/**
 * @member {String} domain
 */
Criteria.prototype['domain'] = undefined;

/**
 * @member {String} from
 */
Criteria.prototype['from'] = undefined;

/**
 * @member {Boolean} hasAttachments
 */
Criteria.prototype['hasAttachments'] = undefined;

/**
 * @member {String} hasTheWords
 */
Criteria.prototype['hasTheWords'] = undefined;

/**
 * @member {String} sentTo
 */
Criteria.prototype['sentTo'] = undefined;

/**
 * @member {String} subjectContains
 */
Criteria.prototype['subjectContains'] = undefined;






export default Criteria;

