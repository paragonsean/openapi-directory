/**
 * Mailscript
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AddActionReplyAllRequestConfig model module.
 * @module model/AddActionReplyAllRequestConfig
 * @version 0.4.0
 */
class AddActionReplyAllRequestConfig {
    /**
     * Constructs a new <code>AddActionReplyAllRequestConfig</code>.
     * @alias module:model/AddActionReplyAllRequestConfig
     * @param from {String} 
     * @param key {String} 
     * @param type {module:model/AddActionReplyAllRequestConfig.TypeEnum} 
     */
    constructor(from, key, type) { 
        
        AddActionReplyAllRequestConfig.initialize(this, from, key, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, from, key, type) { 
        obj['from'] = from;
        obj['key'] = key;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>AddActionReplyAllRequestConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AddActionReplyAllRequestConfig} obj Optional instance to populate.
     * @return {module:model/AddActionReplyAllRequestConfig} The populated <code>AddActionReplyAllRequestConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AddActionReplyAllRequestConfig();

            if (data.hasOwnProperty('from')) {
                obj['from'] = ApiClient.convertToType(data['from'], 'String');
            }
            if (data.hasOwnProperty('html')) {
                obj['html'] = ApiClient.convertToType(data['html'], 'String');
            }
            if (data.hasOwnProperty('key')) {
                obj['key'] = ApiClient.convertToType(data['key'], 'String');
            }
            if (data.hasOwnProperty('text')) {
                obj['text'] = ApiClient.convertToType(data['text'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AddActionReplyAllRequestConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AddActionReplyAllRequestConfig</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of AddActionReplyAllRequestConfig.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['from'] && !(typeof data['from'] === 'string' || data['from'] instanceof String)) {
            throw new Error("Expected the field `from` to be a primitive type in the JSON string but got " + data['from']);
        }
        // ensure the json data is a string
        if (data['html'] && !(typeof data['html'] === 'string' || data['html'] instanceof String)) {
            throw new Error("Expected the field `html` to be a primitive type in the JSON string but got " + data['html']);
        }
        // ensure the json data is a string
        if (data['key'] && !(typeof data['key'] === 'string' || data['key'] instanceof String)) {
            throw new Error("Expected the field `key` to be a primitive type in the JSON string but got " + data['key']);
        }
        // ensure the json data is a string
        if (data['text'] && !(typeof data['text'] === 'string' || data['text'] instanceof String)) {
            throw new Error("Expected the field `text` to be a primitive type in the JSON string but got " + data['text']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

AddActionReplyAllRequestConfig.RequiredProperties = ["from", "key", "type"];

/**
 * @member {String} from
 */
AddActionReplyAllRequestConfig.prototype['from'] = undefined;

/**
 * @member {String} html
 */
AddActionReplyAllRequestConfig.prototype['html'] = undefined;

/**
 * @member {String} key
 */
AddActionReplyAllRequestConfig.prototype['key'] = undefined;

/**
 * @member {String} text
 */
AddActionReplyAllRequestConfig.prototype['text'] = undefined;

/**
 * @member {module:model/AddActionReplyAllRequestConfig.TypeEnum} type
 */
AddActionReplyAllRequestConfig.prototype['type'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
AddActionReplyAllRequestConfig['TypeEnum'] = {

    /**
     * value: "replyAll"
     * @const
     */
    "replyAll": "replyAll"
};



export default AddActionReplyAllRequestConfig;

