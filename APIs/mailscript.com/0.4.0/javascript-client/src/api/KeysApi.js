/**
 * Mailscript
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AddKeyRequest from '../model/AddKeyRequest';
import AddKeyResponse from '../model/AddKeyResponse';
import ErrorResponse from '../model/ErrorResponse';
import GetAllKeysResponse from '../model/GetAllKeysResponse';
import Key from '../model/Key';
import UpdateKeyRequest from '../model/UpdateKeyRequest';

/**
* Keys service.
* @module api/KeysApi
* @version 0.4.0
*/
export default class KeysApi {

    /**
    * Constructs a new KeysApi. 
    * @alias module:api/KeysApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addKey operation.
     * @callback module:api/KeysApi~addKeyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AddKeyResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add address key
     * @param {String} address ID of address
     * @param {module:model/AddKeyRequest} addKeyRequest Key body
     * @param {module:api/KeysApi~addKeyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AddKeyResponse}
     */
    addKey(address, addKeyRequest, callback) {
      let postBody = addKeyRequest;
      // verify the required parameter 'address' is set
      if (address === undefined || address === null) {
        throw new Error("Missing the required parameter 'address' when calling addKey");
      }
      // verify the required parameter 'addKeyRequest' is set
      if (addKeyRequest === undefined || addKeyRequest === null) {
        throw new Error("Missing the required parameter 'addKeyRequest' when calling addKey");
      }

      let pathParams = {
        'address': address
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AddKeyResponse;
      return this.apiClient.callApi(
        '/addresses/{address}/keys', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteKey operation.
     * @callback module:api/KeysApi~deleteKeyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete address key
     * @param {String} address ID of address
     * @param {String} key ID of key
     * @param {module:api/KeysApi~deleteKeyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteKey(address, key, callback) {
      let postBody = null;
      // verify the required parameter 'address' is set
      if (address === undefined || address === null) {
        throw new Error("Missing the required parameter 'address' when calling deleteKey");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteKey");
      }

      let pathParams = {
        'address': address,
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/addresses/{address}/keys/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllKeys operation.
     * @callback module:api/KeysApi~getAllKeysCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetAllKeysResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List address keys
     * @param {String} address ID of address
     * @param {module:api/KeysApi~getAllKeysCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetAllKeysResponse}
     */
    getAllKeys(address, callback) {
      let postBody = null;
      // verify the required parameter 'address' is set
      if (address === undefined || address === null) {
        throw new Error("Missing the required parameter 'address' when calling getAllKeys");
      }

      let pathParams = {
        'address': address
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetAllKeysResponse;
      return this.apiClient.callApi(
        '/addresses/{address}/keys', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getKey operation.
     * @callback module:api/KeysApi~getKeyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Key} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get address key
     * @param {String} address ID of address
     * @param {String} key ID of key
     * @param {module:api/KeysApi~getKeyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Key}
     */
    getKey(address, key, callback) {
      let postBody = null;
      // verify the required parameter 'address' is set
      if (address === undefined || address === null) {
        throw new Error("Missing the required parameter 'address' when calling getKey");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getKey");
      }

      let pathParams = {
        'address': address,
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Key;
      return this.apiClient.callApi(
        '/addresses/{address}/keys/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateKey operation.
     * @callback module:api/KeysApi~updateKeyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Key} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an address key
     * @param {String} address ID of address
     * @param {String} key ID of key
     * @param {module:model/UpdateKeyRequest} updateKeyRequest Key body
     * @param {module:api/KeysApi~updateKeyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Key}
     */
    updateKey(address, key, updateKeyRequest, callback) {
      let postBody = updateKeyRequest;
      // verify the required parameter 'address' is set
      if (address === undefined || address === null) {
        throw new Error("Missing the required parameter 'address' when calling updateKey");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling updateKey");
      }
      // verify the required parameter 'updateKeyRequest' is set
      if (updateKeyRequest === undefined || updateKeyRequest === null) {
        throw new Error("Missing the required parameter 'updateKeyRequest' when calling updateKey");
      }

      let pathParams = {
        'address': address,
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Key;
      return this.apiClient.callApi(
        '/addresses/{address}/keys/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
