/**
 * Mailscript
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AddTriggerRequest from '../model/AddTriggerRequest';
import AddTriggerResponse from '../model/AddTriggerResponse';
import ErrorResponse from '../model/ErrorResponse';
import GetAllTriggersResponse from '../model/GetAllTriggersResponse';

/**
* Triggers service.
* @module api/TriggersApi
* @version 0.4.0
*/
export default class TriggersApi {

    /**
    * Constructs a new TriggersApi. 
    * @alias module:api/TriggersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addTrigger operation.
     * @callback module:api/TriggersApi~addTriggerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AddTriggerResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Setup a trigger
     * 
     * @param {module:model/AddTriggerRequest} addTriggerRequest Trigger body
     * @param {module:api/TriggersApi~addTriggerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AddTriggerResponse}
     */
    addTrigger(addTriggerRequest, callback) {
      let postBody = addTriggerRequest;
      // verify the required parameter 'addTriggerRequest' is set
      if (addTriggerRequest === undefined || addTriggerRequest === null) {
        throw new Error("Missing the required parameter 'addTriggerRequest' when calling addTrigger");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AddTriggerResponse;
      return this.apiClient.callApi(
        '/triggers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteTrigger operation.
     * @callback module:api/TriggersApi~deleteTriggerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a trigger
     * @param {String} trigger ID of the trigger
     * @param {module:api/TriggersApi~deleteTriggerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteTrigger(trigger, callback) {
      let postBody = null;
      // verify the required parameter 'trigger' is set
      if (trigger === undefined || trigger === null) {
        throw new Error("Missing the required parameter 'trigger' when calling deleteTrigger");
      }

      let pathParams = {
        'trigger': trigger
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/triggers/{trigger}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllTriggers operation.
     * @callback module:api/TriggersApi~getAllTriggersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetAllTriggersResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all triggers you have access to
     * 
     * @param {module:api/TriggersApi~getAllTriggersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetAllTriggersResponse}
     */
    getAllTriggers(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetAllTriggersResponse;
      return this.apiClient.callApi(
        '/triggers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateTrigger operation.
     * @callback module:api/TriggersApi~updateTriggerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a trigger
     * @param {String} trigger ID of the trigger
     * @param {module:model/AddTriggerRequest} addTriggerRequest Trigger body
     * @param {module:api/TriggersApi~updateTriggerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateTrigger(trigger, addTriggerRequest, callback) {
      let postBody = addTriggerRequest;
      // verify the required parameter 'trigger' is set
      if (trigger === undefined || trigger === null) {
        throw new Error("Missing the required parameter 'trigger' when calling updateTrigger");
      }
      // verify the required parameter 'addTriggerRequest' is set
      if (addTriggerRequest === undefined || addTriggerRequest === null) {
        throw new Error("Missing the required parameter 'addTriggerRequest' when calling updateTrigger");
      }

      let pathParams = {
        'trigger': trigger
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/triggers/{trigger}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
