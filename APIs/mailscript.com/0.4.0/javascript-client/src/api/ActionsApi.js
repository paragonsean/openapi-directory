/**
 * Mailscript
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AddActionRequest from '../model/AddActionRequest';
import AddActionResponse from '../model/AddActionResponse';
import ErrorResponse from '../model/ErrorResponse';
import GetAllActionsResponse from '../model/GetAllActionsResponse';
import Key from '../model/Key';

/**
* Actions service.
* @module api/ActionsApi
* @version 0.4.0
*/
export default class ActionsApi {

    /**
    * Constructs a new ActionsApi. 
    * @alias module:api/ActionsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addAction operation.
     * @callback module:api/ActionsApi~addActionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AddActionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add an action
     * @param {module:model/AddActionRequest} addActionRequest Add action body
     * @param {module:api/ActionsApi~addActionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AddActionResponse}
     */
    addAction(addActionRequest, callback) {
      let postBody = addActionRequest;
      // verify the required parameter 'addActionRequest' is set
      if (addActionRequest === undefined || addActionRequest === null) {
        throw new Error("Missing the required parameter 'addActionRequest' when calling addAction");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AddActionResponse;
      return this.apiClient.callApi(
        '/actions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteAction operation.
     * @callback module:api/ActionsApi~deleteActionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an action
     * @param {String} action ID of the action
     * @param {module:api/ActionsApi~deleteActionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteAction(action, callback) {
      let postBody = null;
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling deleteAction");
      }

      let pathParams = {
        'action': action
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/actions/{action}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllActions operation.
     * @callback module:api/ActionsApi~getAllActionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetAllActionsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all actions for the user
     * @param {module:api/ActionsApi~getAllActionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetAllActionsResponse}
     */
    getAllActions(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetAllActionsResponse;
      return this.apiClient.callApi(
        '/actions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateAction operation.
     * @callback module:api/ActionsApi~updateActionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Key} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an action key
     * @param {String} action ID of action
     * @param {module:model/AddActionRequest} addActionRequest Action body
     * @param {module:api/ActionsApi~updateActionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Key}
     */
    updateAction(action, addActionRequest, callback) {
      let postBody = addActionRequest;
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling updateAction");
      }
      // verify the required parameter 'addActionRequest' is set
      if (addActionRequest === undefined || addActionRequest === null) {
        throw new Error("Missing the required parameter 'addActionRequest' when calling updateAction");
      }

      let pathParams = {
        'action': action
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Key;
      return this.apiClient.callApi(
        '/actions/{action}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
