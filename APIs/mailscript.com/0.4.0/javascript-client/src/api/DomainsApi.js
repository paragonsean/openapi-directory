/**
 * Mailscript
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AddDomainRequest from '../model/AddDomainRequest';
import CheckDomainVerify from '../model/CheckDomainVerify';
import DomainResponse from '../model/DomainResponse';
import ErrorResponse from '../model/ErrorResponse';
import GetAllDomainsResponse from '../model/GetAllDomainsResponse';

/**
* Domains service.
* @module api/DomainsApi
* @version 0.4.0
*/
export default class DomainsApi {

    /**
    * Constructs a new DomainsApi. 
    * @alias module:api/DomainsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addDomain operation.
     * @callback module:api/DomainsApi~addDomainCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DomainResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Claim a new Domain
     * 
     * @param {module:model/AddDomainRequest} addDomainRequest Domain body
     * @param {module:api/DomainsApi~addDomainCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DomainResponse}
     */
    addDomain(addDomainRequest, callback) {
      let postBody = addDomainRequest;
      // verify the required parameter 'addDomainRequest' is set
      if (addDomainRequest === undefined || addDomainRequest === null) {
        throw new Error("Missing the required parameter 'addDomainRequest' when calling addDomain");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DomainResponse;
      return this.apiClient.callApi(
        '/domains', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the checkDomainVerify operation.
     * @callback module:api/DomainsApi~checkDomainVerifyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CheckDomainVerify} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check a new Domain
     * 
     * @param {String} domain Full Top-level domain name
     * @param {module:api/DomainsApi~checkDomainVerifyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CheckDomainVerify}
     */
    checkDomainVerify(domain, callback) {
      let postBody = null;
      // verify the required parameter 'domain' is set
      if (domain === undefined || domain === null) {
        throw new Error("Missing the required parameter 'domain' when calling checkDomainVerify");
      }

      let pathParams = {
        'domain': domain
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CheckDomainVerify;
      return this.apiClient.callApi(
        '/domains/verify/{domain}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllDomains operation.
     * @callback module:api/DomainsApi~getAllDomainsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetAllDomainsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all domains you have access to
     * 
     * @param {module:api/DomainsApi~getAllDomainsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetAllDomainsResponse}
     */
    getAllDomains(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetAllDomainsResponse;
      return this.apiClient.callApi(
        '/domains', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDomainVerify operation.
     * @callback module:api/DomainsApi~getDomainVerifyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DomainResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get domain verification
     * 
     * @param {String} domain Full Top-level domain name
     * @param {module:api/DomainsApi~getDomainVerifyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DomainResponse}
     */
    getDomainVerify(domain, callback) {
      let postBody = null;
      // verify the required parameter 'domain' is set
      if (domain === undefined || domain === null) {
        throw new Error("Missing the required parameter 'domain' when calling getDomainVerify");
      }

      let pathParams = {
        'domain': domain
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DomainResponse;
      return this.apiClient.callApi(
        '/domains/verify/{domain}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeDomainVerify operation.
     * @callback module:api/DomainsApi~removeDomainVerifyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a domain
     * 
     * @param {String} domain Full Top-level domain name
     * @param {module:api/DomainsApi~removeDomainVerifyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    removeDomainVerify(domain, callback) {
      let postBody = null;
      // verify the required parameter 'domain' is set
      if (domain === undefined || domain === null) {
        throw new Error("Missing the required parameter 'domain' when calling removeDomainVerify");
      }

      let pathParams = {
        'domain': domain
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/domains/{domain}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
