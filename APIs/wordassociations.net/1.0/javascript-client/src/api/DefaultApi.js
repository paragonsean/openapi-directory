/**
 * Word Associations API
 * The Word Associations Network API allows developers to embed the ability to find associations for a word or phrase into their mobile apps or web services. Words are grouped by semantics, meaning, and psychological perception. The Word Associations Network API currently supports English, French, Spanish, German, Italian, Portuguese, and Russian vocabulary. Please [register and subscribe](https://api.wordassociations.net/subscriptions/) to one of available tariff plans to get a valid API key.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: contact@wordassociations.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Body from '../model/Body';

/**
* Default service.
* @module api/DefaultApi
* @version 1.0
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the jsonSearchGet operation.
     * @callback module:api/DefaultApi~jsonSearchGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Body} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets associations with the given word or phrase. 
     * @param {Array.<String>} text Word or phrase to find associations with. Tip. You can use multiple parameters 'text' in a request (from 1 to 10 inclusive). This way you can get associations for several input words or phrases in one response. Restriction: regardless of the size of the text association lookup is always performed by the first 10 words of the text. 
     * @param {module:model/String} lang Query language. Use language code for the language of the text: * de - German; * en - English; * es - Spanish; * fr - French; * it - Italian; * pt - Portuguese; * ru - Russian; 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [type = 'stimulus')] Type of result. Possible values:  * stimulus - an input data (the text parameter) is considered as a response word. The service returns a list of stimuli words, which evoke a given response word; * response - an input data (the text parameter) is considered as a stimulus word. The service returns a list of response words, which come to mind for a given stimulus word. 
     * @param {Number} [limit = 50)] Maximum number of results to return. Allows to limit the number of results (associations) in response. The value of this parameter is an integer number from 1 to 300 inclusive. 
     * @param {Array.<module:model/String>} [pos] Parts of speech to return. Allows to limit results by specified parts of speech. The value of this parameter is a list of parts of speech separated by comma. The following parts of speech codes are supported: * noun * adjective * verb * adverb 
     * @param {module:model/String} [indent = 'true')] Indentation switch for pretty printing of JSON response. Allows to either turn on or off space indentation for a response. The following values are allowed: * yes - turns indentation with spaces on; * no - turn indentation with spaces off; 
     * @param {module:api/DefaultApi~jsonSearchGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Body}
     */
    jsonSearchGet(text, lang, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'text' is set
      if (text === undefined || text === null) {
        throw new Error("Missing the required parameter 'text' when calling jsonSearchGet");
      }
      // verify the required parameter 'lang' is set
      if (lang === undefined || lang === null) {
        throw new Error("Missing the required parameter 'lang' when calling jsonSearchGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'text': this.apiClient.buildCollectionParam(text, 'multi'),
        'lang': lang,
        'type': opts['type'],
        'limit': opts['limit'],
        'pos': this.apiClient.buildCollectionParam(opts['pos'], 'csv'),
        'indent': opts['indent']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['internalApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Body;
      return this.apiClient.callApi(
        '/json/search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the jsonSearchPost operation.
     * @callback module:api/DefaultApi~jsonSearchPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Body} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets associations with the given word or phrase. 
     * @param {Array.<String>} text Word or phrase to find associations with. Tip. You can use multiple parameters 'text' in a request (from 1 to 10 inclusive). This way you can get associations for several input words or phrases in one response. Restriction: regardless of the size of the text association lookup is always performed by the first 10 words of the text. 
     * @param {module:model/String} lang Query language. Use language code for the language of the text: * de - German; * en - English; * es - Spanish; * fr - French; * it - Italian; * pt - Portuguese; * ru - Russian; 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [type = 'stimulus')] Type of result. Possible values:  * stimulus - an input data (the text parameter) is considered as a response word. The service returns a list of stimuli words, which evoke a given response word; * response - an input data (the text parameter) is considered as a stimulus word. The service returns a list of response words, which come to mind for a given stimulus word. 
     * @param {Number} [limit = 50)] Maximum number of results to return. Allows to limit the number of results (associations) in response. The value of this parameter is an integer number from 1 to 300 inclusive. 
     * @param {Array.<module:model/String>} [pos] Parts of speech to return. Allows to limit results by specified parts of speech. The value of this parameter is a list of parts of speech separated by comma. The following parts of speech codes are supported: * noun * adjective * verb * adverb 
     * @param {module:model/String} [indent = 'true')] Indentation switch for pretty printing of JSON response. Allows to either turn on or off space indentation for a response. The following values are allowed: * yes - turns indentation with spaces on; * no - turn indentation with spaces off; 
     * @param {module:api/DefaultApi~jsonSearchPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Body}
     */
    jsonSearchPost(text, lang, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'text' is set
      if (text === undefined || text === null) {
        throw new Error("Missing the required parameter 'text' when calling jsonSearchPost");
      }
      // verify the required parameter 'lang' is set
      if (lang === undefined || lang === null) {
        throw new Error("Missing the required parameter 'lang' when calling jsonSearchPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'text': this.apiClient.buildCollectionParam(text, 'csv'),
        'lang': lang,
        'type': opts['type'],
        'limit': opts['limit'],
        'pos': this.apiClient.buildCollectionParam(opts['pos'], 'csv'),
        'indent': opts['indent']
      };

      let authNames = ['internalApiKey'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = Body;
      return this.apiClient.callApi(
        '/json/search', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
