/**
 * Word Associations API
 * The Word Associations Network API allows developers to embed the ability to find associations for a word or phrase into their mobile apps or web services. Words are grouped by semantics, meaning, and psychological perception. The Word Associations Network API currently supports English, French, Spanish, German, Italian, Portuguese, and Russian vocabulary. Please [register and subscribe](https://api.wordassociations.net/subscriptions/) to one of available tariff plans to get a valid API key.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: contact@wordassociations.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Request from './Request';
import Response from './Response';

/**
 * The Body model module.
 * @module model/Body
 * @version 1.0
 */
class Body {
    /**
     * Constructs a new <code>Body</code>.
     * @alias module:model/Body
     */
    constructor() { 
        
        Body.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Body</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Body} obj Optional instance to populate.
     * @return {module:model/Body} The populated <code>Body</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Body();

            if (data.hasOwnProperty('code')) {
                obj['code'] = ApiClient.convertToType(data['code'], 'Number');
            }
            if (data.hasOwnProperty('request')) {
                obj['request'] = Request.constructFromObject(data['request']);
            }
            if (data.hasOwnProperty('response')) {
                obj['response'] = ApiClient.convertToType(data['response'], [Response]);
            }
            if (data.hasOwnProperty('version')) {
                obj['version'] = ApiClient.convertToType(data['version'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Body</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Body</code>.
     */
    static validateJSON(data) {
        // validate the optional field `request`
        if (data['request']) { // data not null
          Request.validateJSON(data['request']);
        }
        if (data['response']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['response'])) {
                throw new Error("Expected the field `response` to be an array in the JSON data but got " + data['response']);
            }
            // validate the optional field `response` (array)
            for (const item of data['response']) {
                Response.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['version'] && !(typeof data['version'] === 'string' || data['version'] instanceof String)) {
            throw new Error("Expected the field `version` to be a primitive type in the JSON string but got " + data['version']);
        }

        return true;
    }


}



/**
 * @member {Number} code
 */
Body.prototype['code'] = undefined;

/**
 * @member {module:model/Request} request
 */
Body.prototype['request'] = undefined;

/**
 * @member {Array.<module:model/Response>} response
 */
Body.prototype['response'] = undefined;

/**
 * @member {String} version
 */
Body.prototype['version'] = undefined;






export default Body;

