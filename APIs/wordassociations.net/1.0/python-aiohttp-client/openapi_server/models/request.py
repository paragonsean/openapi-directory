# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Request(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, indent: str=None, lang: str=None, limit: int=None, pos: str=None, text: List[str]=None, type: str=None):
        """Request - a model defined in OpenAPI

        :param indent: The indent of this Request.
        :param lang: The lang of this Request.
        :param limit: The limit of this Request.
        :param pos: The pos of this Request.
        :param text: The text of this Request.
        :param type: The type of this Request.
        """
        self.openapi_types = {
            'indent': str,
            'lang': str,
            'limit': int,
            'pos': str,
            'text': List[str],
            'type': str
        }

        self.attribute_map = {
            'indent': 'indent',
            'lang': 'lang',
            'limit': 'limit',
            'pos': 'pos',
            'text': 'text',
            'type': 'type'
        }

        self._indent = indent
        self._lang = lang
        self._limit = limit
        self._pos = pos
        self._text = text
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Request':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Request of this Request.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def indent(self):
        """Gets the indent of this Request.


        :return: The indent of this Request.
        :rtype: str
        """
        return self._indent

    @indent.setter
    def indent(self, indent):
        """Sets the indent of this Request.


        :param indent: The indent of this Request.
        :type indent: str
        """

        self._indent = indent

    @property
    def lang(self):
        """Gets the lang of this Request.


        :return: The lang of this Request.
        :rtype: str
        """
        return self._lang

    @lang.setter
    def lang(self, lang):
        """Sets the lang of this Request.


        :param lang: The lang of this Request.
        :type lang: str
        """

        self._lang = lang

    @property
    def limit(self):
        """Gets the limit of this Request.


        :return: The limit of this Request.
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this Request.


        :param limit: The limit of this Request.
        :type limit: int
        """

        self._limit = limit

    @property
    def pos(self):
        """Gets the pos of this Request.


        :return: The pos of this Request.
        :rtype: str
        """
        return self._pos

    @pos.setter
    def pos(self, pos):
        """Sets the pos of this Request.


        :param pos: The pos of this Request.
        :type pos: str
        """

        self._pos = pos

    @property
    def text(self):
        """Gets the text of this Request.


        :return: The text of this Request.
        :rtype: List[str]
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this Request.


        :param text: The text of this Request.
        :type text: List[str]
        """

        self._text = text

    @property
    def type(self):
        """Gets the type of this Request.


        :return: The type of this Request.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Request.


        :param type: The type of this Request.
        :type type: str
        """

        self._type = type
