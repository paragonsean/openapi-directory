/*
 * Word Associations API
 * The Word Associations Network API allows developers to embed the ability to find associations for a word or phrase into their mobile apps or web services. Words are grouped by semantics, meaning, and psychological perception. The Word Associations Network API currently supports English, French, Spanish, German, Italian, Portuguese, and Russian vocabulary. Please [register and subscribe](https://api.wordassociations.net/subscriptions/) to one of available tariff plans to get a valid API key.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: contact@wordassociations.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Body;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for jsonSearchGet
     * @param text Word or phrase to find associations with. Tip. You can use multiple parameters &#39;text&#39; in a request (from 1 to 10 inclusive). This way you can get associations for several input words or phrases in one response. Restriction: regardless of the size of the text association lookup is always performed by the first 10 words of the text.  (required)
     * @param lang Query language. Use language code for the language of the text: * de - German; * en - English; * es - Spanish; * fr - French; * it - Italian; * pt - Portuguese; * ru - Russian;  (required)
     * @param type Type of result. Possible values:  * stimulus - an input data (the text parameter) is considered as a response word. The service returns a list of stimuli words, which evoke a given response word; * response - an input data (the text parameter) is considered as a stimulus word. The service returns a list of response words, which come to mind for a given stimulus word.  (optional, default to stimulus)
     * @param limit Maximum number of results to return. Allows to limit the number of results (associations) in response. The value of this parameter is an integer number from 1 to 300 inclusive.  (optional, default to 50)
     * @param pos Parts of speech to return. Allows to limit results by specified parts of speech. The value of this parameter is a list of parts of speech separated by comma. The following parts of speech codes are supported: * noun * adjective * verb * adverb  (optional)
     * @param indent Indentation switch for pretty printing of JSON response. Allows to either turn on or off space indentation for a response. The following values are allowed: * yes - turns indentation with spaces on; * no - turn indentation with spaces off;  (optional, default to true)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API key </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The monthly limit on the number of requests is exceeded </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> The specified language is not supported </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jsonSearchGetCall(List<String> text, String lang, String type, Integer limit, List<String> pos, String indent, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/json/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (text != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "text", text));
        }

        if (lang != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lang", lang));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (pos != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "pos", pos));
        }

        if (indent != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("indent", indent));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "internalApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call jsonSearchGetValidateBeforeCall(List<String> text, String lang, String type, Integer limit, List<String> pos, String indent, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'text' is set
        if (text == null) {
            throw new ApiException("Missing the required parameter 'text' when calling jsonSearchGet(Async)");
        }

        // verify the required parameter 'lang' is set
        if (lang == null) {
            throw new ApiException("Missing the required parameter 'lang' when calling jsonSearchGet(Async)");
        }

        return jsonSearchGetCall(text, lang, type, limit, pos, indent, _callback);

    }

    /**
     * 
     * Gets associations with the given word or phrase. 
     * @param text Word or phrase to find associations with. Tip. You can use multiple parameters &#39;text&#39; in a request (from 1 to 10 inclusive). This way you can get associations for several input words or phrases in one response. Restriction: regardless of the size of the text association lookup is always performed by the first 10 words of the text.  (required)
     * @param lang Query language. Use language code for the language of the text: * de - German; * en - English; * es - Spanish; * fr - French; * it - Italian; * pt - Portuguese; * ru - Russian;  (required)
     * @param type Type of result. Possible values:  * stimulus - an input data (the text parameter) is considered as a response word. The service returns a list of stimuli words, which evoke a given response word; * response - an input data (the text parameter) is considered as a stimulus word. The service returns a list of response words, which come to mind for a given stimulus word.  (optional, default to stimulus)
     * @param limit Maximum number of results to return. Allows to limit the number of results (associations) in response. The value of this parameter is an integer number from 1 to 300 inclusive.  (optional, default to 50)
     * @param pos Parts of speech to return. Allows to limit results by specified parts of speech. The value of this parameter is a list of parts of speech separated by comma. The following parts of speech codes are supported: * noun * adjective * verb * adverb  (optional)
     * @param indent Indentation switch for pretty printing of JSON response. Allows to either turn on or off space indentation for a response. The following values are allowed: * yes - turns indentation with spaces on; * no - turn indentation with spaces off;  (optional, default to true)
     * @return Body
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API key </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The monthly limit on the number of requests is exceeded </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> The specified language is not supported </td><td>  -  </td></tr>
     </table>
     */
    public Body jsonSearchGet(List<String> text, String lang, String type, Integer limit, List<String> pos, String indent) throws ApiException {
        ApiResponse<Body> localVarResp = jsonSearchGetWithHttpInfo(text, lang, type, limit, pos, indent);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets associations with the given word or phrase. 
     * @param text Word or phrase to find associations with. Tip. You can use multiple parameters &#39;text&#39; in a request (from 1 to 10 inclusive). This way you can get associations for several input words or phrases in one response. Restriction: regardless of the size of the text association lookup is always performed by the first 10 words of the text.  (required)
     * @param lang Query language. Use language code for the language of the text: * de - German; * en - English; * es - Spanish; * fr - French; * it - Italian; * pt - Portuguese; * ru - Russian;  (required)
     * @param type Type of result. Possible values:  * stimulus - an input data (the text parameter) is considered as a response word. The service returns a list of stimuli words, which evoke a given response word; * response - an input data (the text parameter) is considered as a stimulus word. The service returns a list of response words, which come to mind for a given stimulus word.  (optional, default to stimulus)
     * @param limit Maximum number of results to return. Allows to limit the number of results (associations) in response. The value of this parameter is an integer number from 1 to 300 inclusive.  (optional, default to 50)
     * @param pos Parts of speech to return. Allows to limit results by specified parts of speech. The value of this parameter is a list of parts of speech separated by comma. The following parts of speech codes are supported: * noun * adjective * verb * adverb  (optional)
     * @param indent Indentation switch for pretty printing of JSON response. Allows to either turn on or off space indentation for a response. The following values are allowed: * yes - turns indentation with spaces on; * no - turn indentation with spaces off;  (optional, default to true)
     * @return ApiResponse&lt;Body&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API key </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The monthly limit on the number of requests is exceeded </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> The specified language is not supported </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Body> jsonSearchGetWithHttpInfo(List<String> text, String lang, String type, Integer limit, List<String> pos, String indent) throws ApiException {
        okhttp3.Call localVarCall = jsonSearchGetValidateBeforeCall(text, lang, type, limit, pos, indent, null);
        Type localVarReturnType = new TypeToken<Body>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets associations with the given word or phrase. 
     * @param text Word or phrase to find associations with. Tip. You can use multiple parameters &#39;text&#39; in a request (from 1 to 10 inclusive). This way you can get associations for several input words or phrases in one response. Restriction: regardless of the size of the text association lookup is always performed by the first 10 words of the text.  (required)
     * @param lang Query language. Use language code for the language of the text: * de - German; * en - English; * es - Spanish; * fr - French; * it - Italian; * pt - Portuguese; * ru - Russian;  (required)
     * @param type Type of result. Possible values:  * stimulus - an input data (the text parameter) is considered as a response word. The service returns a list of stimuli words, which evoke a given response word; * response - an input data (the text parameter) is considered as a stimulus word. The service returns a list of response words, which come to mind for a given stimulus word.  (optional, default to stimulus)
     * @param limit Maximum number of results to return. Allows to limit the number of results (associations) in response. The value of this parameter is an integer number from 1 to 300 inclusive.  (optional, default to 50)
     * @param pos Parts of speech to return. Allows to limit results by specified parts of speech. The value of this parameter is a list of parts of speech separated by comma. The following parts of speech codes are supported: * noun * adjective * verb * adverb  (optional)
     * @param indent Indentation switch for pretty printing of JSON response. Allows to either turn on or off space indentation for a response. The following values are allowed: * yes - turns indentation with spaces on; * no - turn indentation with spaces off;  (optional, default to true)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API key </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The monthly limit on the number of requests is exceeded </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> The specified language is not supported </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jsonSearchGetAsync(List<String> text, String lang, String type, Integer limit, List<String> pos, String indent, final ApiCallback<Body> _callback) throws ApiException {

        okhttp3.Call localVarCall = jsonSearchGetValidateBeforeCall(text, lang, type, limit, pos, indent, _callback);
        Type localVarReturnType = new TypeToken<Body>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for jsonSearchPost
     * @param text Word or phrase to find associations with. Tip. You can use multiple parameters &#39;text&#39; in a request (from 1 to 10 inclusive). This way you can get associations for several input words or phrases in one response. Restriction: regardless of the size of the text association lookup is always performed by the first 10 words of the text.  (required)
     * @param lang Query language. Use language code for the language of the text: * de - German; * en - English; * es - Spanish; * fr - French; * it - Italian; * pt - Portuguese; * ru - Russian;  (required)
     * @param type Type of result. Possible values:  * stimulus - an input data (the text parameter) is considered as a response word. The service returns a list of stimuli words, which evoke a given response word; * response - an input data (the text parameter) is considered as a stimulus word. The service returns a list of response words, which come to mind for a given stimulus word.  (optional, default to stimulus)
     * @param limit Maximum number of results to return. Allows to limit the number of results (associations) in response. The value of this parameter is an integer number from 1 to 300 inclusive.  (optional, default to 50)
     * @param pos Parts of speech to return. Allows to limit results by specified parts of speech. The value of this parameter is a list of parts of speech separated by comma. The following parts of speech codes are supported: * noun * adjective * verb * adverb  (optional)
     * @param indent Indentation switch for pretty printing of JSON response. Allows to either turn on or off space indentation for a response. The following values are allowed: * yes - turns indentation with spaces on; * no - turn indentation with spaces off;  (optional, default to true)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API key </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The monthly limit on the number of requests is exceeded </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> The specified language is not supported </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jsonSearchPostCall(List<String> text, String lang, String type, Integer limit, List<String> pos, String indent, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/json/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (text != null) {
            localVarFormParams.put("text", text);
        }

        if (lang != null) {
            localVarFormParams.put("lang", lang);
        }

        if (type != null) {
            localVarFormParams.put("type", type);
        }

        if (limit != null) {
            localVarFormParams.put("limit", limit);
        }

        if (pos != null) {
            localVarFormParams.put("pos", pos);
        }

        if (indent != null) {
            localVarFormParams.put("indent", indent);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "internalApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call jsonSearchPostValidateBeforeCall(List<String> text, String lang, String type, Integer limit, List<String> pos, String indent, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'text' is set
        if (text == null) {
            throw new ApiException("Missing the required parameter 'text' when calling jsonSearchPost(Async)");
        }

        // verify the required parameter 'lang' is set
        if (lang == null) {
            throw new ApiException("Missing the required parameter 'lang' when calling jsonSearchPost(Async)");
        }

        return jsonSearchPostCall(text, lang, type, limit, pos, indent, _callback);

    }

    /**
     * 
     * Gets associations with the given word or phrase. 
     * @param text Word or phrase to find associations with. Tip. You can use multiple parameters &#39;text&#39; in a request (from 1 to 10 inclusive). This way you can get associations for several input words or phrases in one response. Restriction: regardless of the size of the text association lookup is always performed by the first 10 words of the text.  (required)
     * @param lang Query language. Use language code for the language of the text: * de - German; * en - English; * es - Spanish; * fr - French; * it - Italian; * pt - Portuguese; * ru - Russian;  (required)
     * @param type Type of result. Possible values:  * stimulus - an input data (the text parameter) is considered as a response word. The service returns a list of stimuli words, which evoke a given response word; * response - an input data (the text parameter) is considered as a stimulus word. The service returns a list of response words, which come to mind for a given stimulus word.  (optional, default to stimulus)
     * @param limit Maximum number of results to return. Allows to limit the number of results (associations) in response. The value of this parameter is an integer number from 1 to 300 inclusive.  (optional, default to 50)
     * @param pos Parts of speech to return. Allows to limit results by specified parts of speech. The value of this parameter is a list of parts of speech separated by comma. The following parts of speech codes are supported: * noun * adjective * verb * adverb  (optional)
     * @param indent Indentation switch for pretty printing of JSON response. Allows to either turn on or off space indentation for a response. The following values are allowed: * yes - turns indentation with spaces on; * no - turn indentation with spaces off;  (optional, default to true)
     * @return Body
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API key </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The monthly limit on the number of requests is exceeded </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> The specified language is not supported </td><td>  -  </td></tr>
     </table>
     */
    public Body jsonSearchPost(List<String> text, String lang, String type, Integer limit, List<String> pos, String indent) throws ApiException {
        ApiResponse<Body> localVarResp = jsonSearchPostWithHttpInfo(text, lang, type, limit, pos, indent);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets associations with the given word or phrase. 
     * @param text Word or phrase to find associations with. Tip. You can use multiple parameters &#39;text&#39; in a request (from 1 to 10 inclusive). This way you can get associations for several input words or phrases in one response. Restriction: regardless of the size of the text association lookup is always performed by the first 10 words of the text.  (required)
     * @param lang Query language. Use language code for the language of the text: * de - German; * en - English; * es - Spanish; * fr - French; * it - Italian; * pt - Portuguese; * ru - Russian;  (required)
     * @param type Type of result. Possible values:  * stimulus - an input data (the text parameter) is considered as a response word. The service returns a list of stimuli words, which evoke a given response word; * response - an input data (the text parameter) is considered as a stimulus word. The service returns a list of response words, which come to mind for a given stimulus word.  (optional, default to stimulus)
     * @param limit Maximum number of results to return. Allows to limit the number of results (associations) in response. The value of this parameter is an integer number from 1 to 300 inclusive.  (optional, default to 50)
     * @param pos Parts of speech to return. Allows to limit results by specified parts of speech. The value of this parameter is a list of parts of speech separated by comma. The following parts of speech codes are supported: * noun * adjective * verb * adverb  (optional)
     * @param indent Indentation switch for pretty printing of JSON response. Allows to either turn on or off space indentation for a response. The following values are allowed: * yes - turns indentation with spaces on; * no - turn indentation with spaces off;  (optional, default to true)
     * @return ApiResponse&lt;Body&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API key </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The monthly limit on the number of requests is exceeded </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> The specified language is not supported </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Body> jsonSearchPostWithHttpInfo(List<String> text, String lang, String type, Integer limit, List<String> pos, String indent) throws ApiException {
        okhttp3.Call localVarCall = jsonSearchPostValidateBeforeCall(text, lang, type, limit, pos, indent, null);
        Type localVarReturnType = new TypeToken<Body>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets associations with the given word or phrase. 
     * @param text Word or phrase to find associations with. Tip. You can use multiple parameters &#39;text&#39; in a request (from 1 to 10 inclusive). This way you can get associations for several input words or phrases in one response. Restriction: regardless of the size of the text association lookup is always performed by the first 10 words of the text.  (required)
     * @param lang Query language. Use language code for the language of the text: * de - German; * en - English; * es - Spanish; * fr - French; * it - Italian; * pt - Portuguese; * ru - Russian;  (required)
     * @param type Type of result. Possible values:  * stimulus - an input data (the text parameter) is considered as a response word. The service returns a list of stimuli words, which evoke a given response word; * response - an input data (the text parameter) is considered as a stimulus word. The service returns a list of response words, which come to mind for a given stimulus word.  (optional, default to stimulus)
     * @param limit Maximum number of results to return. Allows to limit the number of results (associations) in response. The value of this parameter is an integer number from 1 to 300 inclusive.  (optional, default to 50)
     * @param pos Parts of speech to return. Allows to limit results by specified parts of speech. The value of this parameter is a list of parts of speech separated by comma. The following parts of speech codes are supported: * noun * adjective * verb * adverb  (optional)
     * @param indent Indentation switch for pretty printing of JSON response. Allows to either turn on or off space indentation for a response. The following values are allowed: * yes - turns indentation with spaces on; * no - turn indentation with spaces off;  (optional, default to true)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API key </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> The monthly limit on the number of requests is exceeded </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> The specified language is not supported </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jsonSearchPostAsync(List<String> text, String lang, String type, Integer limit, List<String> pos, String indent, final ApiCallback<Body> _callback) throws ApiException {

        okhttp3.Call localVarCall = jsonSearchPostValidateBeforeCall(text, lang, type, limit, pos, indent, _callback);
        Type localVarReturnType = new TypeToken<Body>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
