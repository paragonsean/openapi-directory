/**
 * Word Associations API
 * The Word Associations Network API allows developers to embed the ability to find associations for a word or phrase into their mobile apps or web services. Words are grouped by semantics, meaning, and psychological perception. The Word Associations Network API currently supports English, French, Spanish, German, Italian, Portuguese, and Russian vocabulary. Please [register and subscribe](https://api.wordassociations.net/subscriptions/) to one of available tariff plans to get a valid API key.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: contact@wordassociations.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBody.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBody::OAIBody(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBody::OAIBody() {
    this->initializeModel();
}

OAIBody::~OAIBody() {}

void OAIBody::initializeModel() {

    m_code_isSet = false;
    m_code_isValid = false;

    m_request_isSet = false;
    m_request_isValid = false;

    m_response_isSet = false;
    m_response_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIBody::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBody::fromJsonObject(QJsonObject json) {

    m_code_isValid = ::OpenAPI::fromJsonValue(m_code, json[QString("code")]);
    m_code_isSet = !json[QString("code")].isNull() && m_code_isValid;

    m_request_isValid = ::OpenAPI::fromJsonValue(m_request, json[QString("request")]);
    m_request_isSet = !json[QString("request")].isNull() && m_request_isValid;

    m_response_isValid = ::OpenAPI::fromJsonValue(m_response, json[QString("response")]);
    m_response_isSet = !json[QString("response")].isNull() && m_response_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAIBody::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBody::asJsonObject() const {
    QJsonObject obj;
    if (m_code_isSet) {
        obj.insert(QString("code"), ::OpenAPI::toJsonValue(m_code));
    }
    if (m_request.isSet()) {
        obj.insert(QString("request"), ::OpenAPI::toJsonValue(m_request));
    }
    if (m_response.size() > 0) {
        obj.insert(QString("response"), ::OpenAPI::toJsonValue(m_response));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

qint32 OAIBody::getCode() const {
    return m_code;
}
void OAIBody::setCode(const qint32 &code) {
    m_code = code;
    m_code_isSet = true;
}

bool OAIBody::is_code_Set() const{
    return m_code_isSet;
}

bool OAIBody::is_code_Valid() const{
    return m_code_isValid;
}

OAIRequest OAIBody::getRequest() const {
    return m_request;
}
void OAIBody::setRequest(const OAIRequest &request) {
    m_request = request;
    m_request_isSet = true;
}

bool OAIBody::is_request_Set() const{
    return m_request_isSet;
}

bool OAIBody::is_request_Valid() const{
    return m_request_isValid;
}

QList<OAIResponse> OAIBody::getResponse() const {
    return m_response;
}
void OAIBody::setResponse(const QList<OAIResponse> &response) {
    m_response = response;
    m_response_isSet = true;
}

bool OAIBody::is_response_Set() const{
    return m_response_isSet;
}

bool OAIBody::is_response_Valid() const{
    return m_response_isValid;
}

QString OAIBody::getVersion() const {
    return m_version;
}
void OAIBody::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIBody::is_version_Set() const{
    return m_version_isSet;
}

bool OAIBody::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIBody::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_response.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBody::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
