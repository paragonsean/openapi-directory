/**
 * Word Associations API
 * The Word Associations Network API allows developers to embed the ability to find associations for a word or phrase into their mobile apps or web services. Words are grouped by semantics, meaning, and psychological perception. The Word Associations Network API currently supports English, French, Spanish, German, Italian, Portuguese, and Russian vocabulary. Please [register and subscribe](https://api.wordassociations.net/subscriptions/) to one of available tariff plans to get a valid API key.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: contact@wordassociations.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIItem.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIItem::OAIItem(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIItem::OAIItem() {
    this->initializeModel();
}

OAIItem::~OAIItem() {}

void OAIItem::initializeModel() {

    m_item_isSet = false;
    m_item_isValid = false;

    m_pos_isSet = false;
    m_pos_isValid = false;

    m_weight_isSet = false;
    m_weight_isValid = false;
}

void OAIItem::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIItem::fromJsonObject(QJsonObject json) {

    m_item_isValid = ::OpenAPI::fromJsonValue(m_item, json[QString("item")]);
    m_item_isSet = !json[QString("item")].isNull() && m_item_isValid;

    m_pos_isValid = ::OpenAPI::fromJsonValue(m_pos, json[QString("pos")]);
    m_pos_isSet = !json[QString("pos")].isNull() && m_pos_isValid;

    m_weight_isValid = ::OpenAPI::fromJsonValue(m_weight, json[QString("weight")]);
    m_weight_isSet = !json[QString("weight")].isNull() && m_weight_isValid;
}

QString OAIItem::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIItem::asJsonObject() const {
    QJsonObject obj;
    if (m_item_isSet) {
        obj.insert(QString("item"), ::OpenAPI::toJsonValue(m_item));
    }
    if (m_pos_isSet) {
        obj.insert(QString("pos"), ::OpenAPI::toJsonValue(m_pos));
    }
    if (m_weight_isSet) {
        obj.insert(QString("weight"), ::OpenAPI::toJsonValue(m_weight));
    }
    return obj;
}

QString OAIItem::getItem() const {
    return m_item;
}
void OAIItem::setItem(const QString &item) {
    m_item = item;
    m_item_isSet = true;
}

bool OAIItem::is_item_Set() const{
    return m_item_isSet;
}

bool OAIItem::is_item_Valid() const{
    return m_item_isValid;
}

QString OAIItem::getPos() const {
    return m_pos;
}
void OAIItem::setPos(const QString &pos) {
    m_pos = pos;
    m_pos_isSet = true;
}

bool OAIItem::is_pos_Set() const{
    return m_pos_isSet;
}

bool OAIItem::is_pos_Valid() const{
    return m_pos_isValid;
}

double OAIItem::getWeight() const {
    return m_weight;
}
void OAIItem::setWeight(const double &weight) {
    m_weight = weight;
    m_weight_isSet = true;
}

bool OAIItem::is_weight_Set() const{
    return m_weight_isSet;
}

bool OAIItem::is_weight_Valid() const{
    return m_weight_isValid;
}

bool OAIItem::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_item_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pos_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_weight_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIItem::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
