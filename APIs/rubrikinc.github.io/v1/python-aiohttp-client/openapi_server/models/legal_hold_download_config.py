# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LegalHoldDownloadConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, is_legal_hold_download: bool=None):
        """LegalHoldDownloadConfig - a model defined in OpenAPI

        :param is_legal_hold_download: The is_legal_hold_download of this LegalHoldDownloadConfig.
        """
        self.openapi_types = {
            'is_legal_hold_download': bool
        }

        self.attribute_map = {
            'is_legal_hold_download': 'isLegalHoldDownload'
        }

        self._is_legal_hold_download = is_legal_hold_download

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LegalHoldDownloadConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LegalHoldDownloadConfig of this LegalHoldDownloadConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def is_legal_hold_download(self):
        """Gets the is_legal_hold_download of this LegalHoldDownloadConfig.

        Specifies if the download action is in response to a Legal Hold. This download generates a SHA1 checksum of downloaded data that external bodies can use for integrity verification.

        :return: The is_legal_hold_download of this LegalHoldDownloadConfig.
        :rtype: bool
        """
        return self._is_legal_hold_download

    @is_legal_hold_download.setter
    def is_legal_hold_download(self, is_legal_hold_download):
        """Sets the is_legal_hold_download of this LegalHoldDownloadConfig.

        Specifies if the download action is in response to a Legal Hold. This download generates a SHA1 checksum of downloaded data that external bodies can use for integrity verification.

        :param is_legal_hold_download: The is_legal_hold_download of this LegalHoldDownloadConfig.
        :type is_legal_hold_download: bool
        """
        if is_legal_hold_download is None:
            raise ValueError("Invalid value for `is_legal_hold_download`, must not be `None`")

        self._is_legal_hold_download = is_legal_hold_download
