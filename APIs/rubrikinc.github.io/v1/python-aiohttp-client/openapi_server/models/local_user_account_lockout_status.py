# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LocalUserAccountLockoutStatus(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_lockout_duration_in_minutes: int=None, enabled: bool=None, max_failed_logins_for_local_user: int=None):
        """LocalUserAccountLockoutStatus - a model defined in OpenAPI

        :param account_lockout_duration_in_minutes: The account_lockout_duration_in_minutes of this LocalUserAccountLockoutStatus.
        :param enabled: The enabled of this LocalUserAccountLockoutStatus.
        :param max_failed_logins_for_local_user: The max_failed_logins_for_local_user of this LocalUserAccountLockoutStatus.
        """
        self.openapi_types = {
            'account_lockout_duration_in_minutes': int,
            'enabled': bool,
            'max_failed_logins_for_local_user': int
        }

        self.attribute_map = {
            'account_lockout_duration_in_minutes': 'accountLockoutDurationInMinutes',
            'enabled': 'enabled',
            'max_failed_logins_for_local_user': 'maxFailedLoginsForLocalUser'
        }

        self._account_lockout_duration_in_minutes = account_lockout_duration_in_minutes
        self._enabled = enabled
        self._max_failed_logins_for_local_user = max_failed_logins_for_local_user

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LocalUserAccountLockoutStatus':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LocalUserAccountLockoutStatus of this LocalUserAccountLockoutStatus.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_lockout_duration_in_minutes(self):
        """Gets the account_lockout_duration_in_minutes of this LocalUserAccountLockoutStatus.

        Specifies the duration in minutes after which a locked user account is automatically unlocked. When set to 0, the user account is not unlocked automatically. 

        :return: The account_lockout_duration_in_minutes of this LocalUserAccountLockoutStatus.
        :rtype: int
        """
        return self._account_lockout_duration_in_minutes

    @account_lockout_duration_in_minutes.setter
    def account_lockout_duration_in_minutes(self, account_lockout_duration_in_minutes):
        """Sets the account_lockout_duration_in_minutes of this LocalUserAccountLockoutStatus.

        Specifies the duration in minutes after which a locked user account is automatically unlocked. When set to 0, the user account is not unlocked automatically. 

        :param account_lockout_duration_in_minutes: The account_lockout_duration_in_minutes of this LocalUserAccountLockoutStatus.
        :type account_lockout_duration_in_minutes: int
        """
        if account_lockout_duration_in_minutes is None:
            raise ValueError("Invalid value for `account_lockout_duration_in_minutes`, must not be `None`")

        self._account_lockout_duration_in_minutes = account_lockout_duration_in_minutes

    @property
    def enabled(self):
        """Gets the enabled of this LocalUserAccountLockoutStatus.

        Specifies whether local user accounts are locked. When 'true' the local user account is locked after 'x' failed consecutive login attempts where 'x' is specified by 'maxFailedLoginsForLocalUser'. When 'false' failed login attempts are not recorded and will not lock the local user account. 

        :return: The enabled of this LocalUserAccountLockoutStatus.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this LocalUserAccountLockoutStatus.

        Specifies whether local user accounts are locked. When 'true' the local user account is locked after 'x' failed consecutive login attempts where 'x' is specified by 'maxFailedLoginsForLocalUser'. When 'false' failed login attempts are not recorded and will not lock the local user account. 

        :param enabled: The enabled of this LocalUserAccountLockoutStatus.
        :type enabled: bool
        """
        if enabled is None:
            raise ValueError("Invalid value for `enabled`, must not be `None`")

        self._enabled = enabled

    @property
    def max_failed_logins_for_local_user(self):
        """Gets the max_failed_logins_for_local_user of this LocalUserAccountLockoutStatus.

        Specifies the number of consecutive failed logins after which the local user account is locked. 

        :return: The max_failed_logins_for_local_user of this LocalUserAccountLockoutStatus.
        :rtype: int
        """
        return self._max_failed_logins_for_local_user

    @max_failed_logins_for_local_user.setter
    def max_failed_logins_for_local_user(self, max_failed_logins_for_local_user):
        """Sets the max_failed_logins_for_local_user of this LocalUserAccountLockoutStatus.

        Specifies the number of consecutive failed logins after which the local user account is locked. 

        :param max_failed_logins_for_local_user: The max_failed_logins_for_local_user of this LocalUserAccountLockoutStatus.
        :type max_failed_logins_for_local_user: int
        """
        if max_failed_logins_for_local_user is None:
            raise ValueError("Invalid value for `max_failed_logins_for_local_user`, must not be `None`")

        self._max_failed_logins_for_local_user = max_failed_logins_for_local_user
