# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.event_series_status_v1 import EventSeriesStatusV1
from openapi_server.models.event_summary_v1 import EventSummaryV1
from openapi_server import util


class ActivityLogSummaryV1(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, after_id: str=None, event_detail_list: List[EventSummaryV1]=None, event_series_status: EventSeriesStatusV1=None, latest_event: EventSummaryV1=None, warning_count: int=None):
        """ActivityLogSummaryV1 - a model defined in OpenAPI

        :param after_id: The after_id of this ActivityLogSummaryV1.
        :param event_detail_list: The event_detail_list of this ActivityLogSummaryV1.
        :param event_series_status: The event_series_status of this ActivityLogSummaryV1.
        :param latest_event: The latest_event of this ActivityLogSummaryV1.
        :param warning_count: The warning_count of this ActivityLogSummaryV1.
        """
        self.openapi_types = {
            'after_id': str,
            'event_detail_list': List[EventSummaryV1],
            'event_series_status': EventSeriesStatusV1,
            'latest_event': EventSummaryV1,
            'warning_count': int
        }

        self.attribute_map = {
            'after_id': 'afterId',
            'event_detail_list': 'eventDetailList',
            'event_series_status': 'eventSeriesStatus',
            'latest_event': 'latestEvent',
            'warning_count': 'warningCount'
        }

        self._after_id = after_id
        self._event_detail_list = event_detail_list
        self._event_series_status = event_series_status
        self._latest_event = latest_event
        self._warning_count = warning_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ActivityLogSummaryV1':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ActivityLogSummaryV1 of this ActivityLogSummaryV1.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def after_id(self):
        """Gets the after_id of this ActivityLogSummaryV1.

        The serialized AfterId of the response, if any.

        :return: The after_id of this ActivityLogSummaryV1.
        :rtype: str
        """
        return self._after_id

    @after_id.setter
    def after_id(self, after_id):
        """Sets the after_id of this ActivityLogSummaryV1.

        The serialized AfterId of the response, if any.

        :param after_id: The after_id of this ActivityLogSummaryV1.
        :type after_id: str
        """

        self._after_id = after_id

    @property
    def event_detail_list(self):
        """Gets the event_detail_list of this ActivityLogSummaryV1.

        List of the events in the event series.

        :return: The event_detail_list of this ActivityLogSummaryV1.
        :rtype: List[EventSummaryV1]
        """
        return self._event_detail_list

    @event_detail_list.setter
    def event_detail_list(self, event_detail_list):
        """Sets the event_detail_list of this ActivityLogSummaryV1.

        List of the events in the event series.

        :param event_detail_list: The event_detail_list of this ActivityLogSummaryV1.
        :type event_detail_list: List[EventSummaryV1]
        """

        self._event_detail_list = event_detail_list

    @property
    def event_series_status(self):
        """Gets the event_series_status of this ActivityLogSummaryV1.


        :return: The event_series_status of this ActivityLogSummaryV1.
        :rtype: EventSeriesStatusV1
        """
        return self._event_series_status

    @event_series_status.setter
    def event_series_status(self, event_series_status):
        """Sets the event_series_status of this ActivityLogSummaryV1.


        :param event_series_status: The event_series_status of this ActivityLogSummaryV1.
        :type event_series_status: EventSeriesStatusV1
        """

        self._event_series_status = event_series_status

    @property
    def latest_event(self):
        """Gets the latest_event of this ActivityLogSummaryV1.


        :return: The latest_event of this ActivityLogSummaryV1.
        :rtype: EventSummaryV1
        """
        return self._latest_event

    @latest_event.setter
    def latest_event(self, latest_event):
        """Sets the latest_event of this ActivityLogSummaryV1.


        :param latest_event: The latest_event of this ActivityLogSummaryV1.
        :type latest_event: EventSummaryV1
        """
        if latest_event is None:
            raise ValueError("Invalid value for `latest_event`, must not be `None`")

        self._latest_event = latest_event

    @property
    def warning_count(self):
        """Gets the warning_count of this ActivityLogSummaryV1.

        The number of events in the same series as the specified event that have the warning status.

        :return: The warning_count of this ActivityLogSummaryV1.
        :rtype: int
        """
        return self._warning_count

    @warning_count.setter
    def warning_count(self, warning_count):
        """Sets the warning_count of this ActivityLogSummaryV1.

        The number of events in the same series as the specified event that have the warning status.

        :param warning_count: The warning_count of this ActivityLogSummaryV1.
        :type warning_count: int
        """
        if warning_count is None:
            raise ValueError("Invalid value for `warning_count`, must not be `None`")

        self._warning_count = warning_count
