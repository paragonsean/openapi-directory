# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.truststore_type import TruststoreType
from openapi_server import util


class TruststorePayload(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cert_ids: List[str]=None, truststore_type: TruststoreType=None):
        """TruststorePayload - a model defined in OpenAPI

        :param cert_ids: The cert_ids of this TruststorePayload.
        :param truststore_type: The truststore_type of this TruststorePayload.
        """
        self.openapi_types = {
            'cert_ids': List[str],
            'truststore_type': TruststoreType
        }

        self.attribute_map = {
            'cert_ids': 'certIds',
            'truststore_type': 'truststoreType'
        }

        self._cert_ids = cert_ids
        self._truststore_type = truststore_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TruststorePayload':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TruststorePayload of this TruststorePayload.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cert_ids(self):
        """Gets the cert_ids of this TruststorePayload.


        :return: The cert_ids of this TruststorePayload.
        :rtype: List[str]
        """
        return self._cert_ids

    @cert_ids.setter
    def cert_ids(self, cert_ids):
        """Sets the cert_ids of this TruststorePayload.


        :param cert_ids: The cert_ids of this TruststorePayload.
        :type cert_ids: List[str]
        """
        if cert_ids is None:
            raise ValueError("Invalid value for `cert_ids`, must not be `None`")

        self._cert_ids = cert_ids

    @property
    def truststore_type(self):
        """Gets the truststore_type of this TruststorePayload.


        :return: The truststore_type of this TruststorePayload.
        :rtype: TruststoreType
        """
        return self._truststore_type

    @truststore_type.setter
    def truststore_type(self, truststore_type):
        """Sets the truststore_type of this TruststorePayload.


        :param truststore_type: The truststore_type of this TruststorePayload.
        :type truststore_type: TruststoreType
        """
        if truststore_type is None:
            raise ValueError("Invalid value for `truststore_type`, must not be `None`")

        self._truststore_type = truststore_type
