# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DbLogReportProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, enable_delay_notification: bool=None, log_delay_notification_frequency_in_min: int=None, log_delay_threshold_in_min: int=None):
        """DbLogReportProperties - a model defined in OpenAPI

        :param enable_delay_notification: The enable_delay_notification of this DbLogReportProperties.
        :param log_delay_notification_frequency_in_min: The log_delay_notification_frequency_in_min of this DbLogReportProperties.
        :param log_delay_threshold_in_min: The log_delay_threshold_in_min of this DbLogReportProperties.
        """
        self.openapi_types = {
            'enable_delay_notification': bool,
            'log_delay_notification_frequency_in_min': int,
            'log_delay_threshold_in_min': int
        }

        self.attribute_map = {
            'enable_delay_notification': 'enableDelayNotification',
            'log_delay_notification_frequency_in_min': 'logDelayNotificationFrequencyInMin',
            'log_delay_threshold_in_min': 'logDelayThresholdInMin'
        }

        self._enable_delay_notification = enable_delay_notification
        self._log_delay_notification_frequency_in_min = log_delay_notification_frequency_in_min
        self._log_delay_threshold_in_min = log_delay_threshold_in_min

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DbLogReportProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DbLogReportProperties of this DbLogReportProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def enable_delay_notification(self):
        """Gets the enable_delay_notification of this DbLogReportProperties.

        Indicates whether the database log backup delay notification is enabled. Set to 'true' to send an email notification when the log backup delay is more than the configured threshold, and 'false' to disable the behavior.

        :return: The enable_delay_notification of this DbLogReportProperties.
        :rtype: bool
        """
        return self._enable_delay_notification

    @enable_delay_notification.setter
    def enable_delay_notification(self, enable_delay_notification):
        """Sets the enable_delay_notification of this DbLogReportProperties.

        Indicates whether the database log backup delay notification is enabled. Set to 'true' to send an email notification when the log backup delay is more than the configured threshold, and 'false' to disable the behavior.

        :param enable_delay_notification: The enable_delay_notification of this DbLogReportProperties.
        :type enable_delay_notification: bool
        """
        if enable_delay_notification is None:
            raise ValueError("Invalid value for `enable_delay_notification`, must not be `None`")

        self._enable_delay_notification = enable_delay_notification

    @property
    def log_delay_notification_frequency_in_min(self):
        """Gets the log_delay_notification_frequency_in_min of this DbLogReportProperties.

        The frequency for sending an email notification to the customer when the log backup delay is more than the threshold.

        :return: The log_delay_notification_frequency_in_min of this DbLogReportProperties.
        :rtype: int
        """
        return self._log_delay_notification_frequency_in_min

    @log_delay_notification_frequency_in_min.setter
    def log_delay_notification_frequency_in_min(self, log_delay_notification_frequency_in_min):
        """Sets the log_delay_notification_frequency_in_min of this DbLogReportProperties.

        The frequency for sending an email notification to the customer when the log backup delay is more than the threshold.

        :param log_delay_notification_frequency_in_min: The log_delay_notification_frequency_in_min of this DbLogReportProperties.
        :type log_delay_notification_frequency_in_min: int
        """
        if log_delay_notification_frequency_in_min is None:
            raise ValueError("Invalid value for `log_delay_notification_frequency_in_min`, must not be `None`")

        self._log_delay_notification_frequency_in_min = log_delay_notification_frequency_in_min

    @property
    def log_delay_threshold_in_min(self):
        """Gets the log_delay_threshold_in_min of this DbLogReportProperties.

        The threshold for the delay in log backup before an email notification should be created.

        :return: The log_delay_threshold_in_min of this DbLogReportProperties.
        :rtype: int
        """
        return self._log_delay_threshold_in_min

    @log_delay_threshold_in_min.setter
    def log_delay_threshold_in_min(self, log_delay_threshold_in_min):
        """Sets the log_delay_threshold_in_min of this DbLogReportProperties.

        The threshold for the delay in log backup before an email notification should be created.

        :param log_delay_threshold_in_min: The log_delay_threshold_in_min of this DbLogReportProperties.
        :type log_delay_threshold_in_min: int
        """
        if log_delay_threshold_in_min is None:
            raise ValueError("Invalid value for `log_delay_threshold_in_min`, must not be `None`")

        self._log_delay_threshold_in_min = log_delay_threshold_in_min
