# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.hold_config import HoldConfig
from openapi_server import util


class ApplyLegalHoldDefinition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, hold_config: HoldConfig=None, snapshot_id: str=None):
        """ApplyLegalHoldDefinition - a model defined in OpenAPI

        :param hold_config: The hold_config of this ApplyLegalHoldDefinition.
        :param snapshot_id: The snapshot_id of this ApplyLegalHoldDefinition.
        """
        self.openapi_types = {
            'hold_config': HoldConfig,
            'snapshot_id': str
        }

        self.attribute_map = {
            'hold_config': 'holdConfig',
            'snapshot_id': 'snapshotId'
        }

        self._hold_config = hold_config
        self._snapshot_id = snapshot_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ApplyLegalHoldDefinition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ApplyLegalHoldDefinition of this ApplyLegalHoldDefinition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def hold_config(self):
        """Gets the hold_config of this ApplyLegalHoldDefinition.


        :return: The hold_config of this ApplyLegalHoldDefinition.
        :rtype: HoldConfig
        """
        return self._hold_config

    @hold_config.setter
    def hold_config(self, hold_config):
        """Sets the hold_config of this ApplyLegalHoldDefinition.


        :param hold_config: The hold_config of this ApplyLegalHoldDefinition.
        :type hold_config: HoldConfig
        """
        if hold_config is None:
            raise ValueError("Invalid value for `hold_config`, must not be `None`")

        self._hold_config = hold_config

    @property
    def snapshot_id(self):
        """Gets the snapshot_id of this ApplyLegalHoldDefinition.


        :return: The snapshot_id of this ApplyLegalHoldDefinition.
        :rtype: str
        """
        return self._snapshot_id

    @snapshot_id.setter
    def snapshot_id(self, snapshot_id):
        """Sets the snapshot_id of this ApplyLegalHoldDefinition.


        :param snapshot_id: The snapshot_id of this ApplyLegalHoldDefinition.
        :type snapshot_id: str
        """
        if snapshot_id is None:
            raise ValueError("Invalid value for `snapshot_id`, must not be `None`")

        self._snapshot_id = snapshot_id
