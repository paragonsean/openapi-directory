# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SapHanaSslInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, encryption_provider: str=None, key_store_path: str=None):
        """SapHanaSslInfo - a model defined in OpenAPI

        :param encryption_provider: The encryption_provider of this SapHanaSslInfo.
        :param key_store_path: The key_store_path of this SapHanaSslInfo.
        """
        self.openapi_types = {
            'encryption_provider': str,
            'key_store_path': str
        }

        self.attribute_map = {
            'encryption_provider': 'encryptionProvider',
            'key_store_path': 'keyStorePath'
        }

        self._encryption_provider = encryption_provider
        self._key_store_path = key_store_path

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SapHanaSslInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SapHanaSslInfo of this SapHanaSslInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def encryption_provider(self):
        """Gets the encryption_provider of this SapHanaSslInfo.

        The encryption provider for the SAPA HANA system. Possible values are OPENSSL, COMMON_CRYPTO, SAP_CRYPTO.

        :return: The encryption_provider of this SapHanaSslInfo.
        :rtype: str
        """
        return self._encryption_provider

    @encryption_provider.setter
    def encryption_provider(self, encryption_provider):
        """Sets the encryption_provider of this SapHanaSslInfo.

        The encryption provider for the SAPA HANA system. Possible values are OPENSSL, COMMON_CRYPTO, SAP_CRYPTO.

        :param encryption_provider: The encryption_provider of this SapHanaSslInfo.
        :type encryption_provider: str
        """
        allowed_values = ["OPENSSL", "COMMON_CRYPTO", "SAP_CRYPTO"]  # noqa: E501
        if encryption_provider not in allowed_values:
            raise ValueError(
                "Invalid value for `encryption_provider` ({0}), must be one of {1}"
                .format(encryption_provider, allowed_values)
            )

        self._encryption_provider = encryption_provider

    @property
    def key_store_path(self):
        """Gets the key_store_path of this SapHanaSslInfo.

        The path where the encryption key for the SAP HANA system is stored.

        :return: The key_store_path of this SapHanaSslInfo.
        :rtype: str
        """
        return self._key_store_path

    @key_store_path.setter
    def key_store_path(self, key_store_path):
        """Sets the key_store_path of this SapHanaSslInfo.

        The path where the encryption key for the SAP HANA system is stored.

        :param key_store_path: The key_store_path of this SapHanaSslInfo.
        :type key_store_path: str
        """
        if key_store_path is None:
            raise ValueError("Invalid value for `key_store_path`, must not be `None`")

        self._key_store_path = key_store_path
