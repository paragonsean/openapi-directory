# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DataStoreSummary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, capacity: int=None, data_center_name: str=None, data_store_type: str=None, id: str=None, is_local: bool=None, name: str=None):
        """DataStoreSummary - a model defined in OpenAPI

        :param capacity: The capacity of this DataStoreSummary.
        :param data_center_name: The data_center_name of this DataStoreSummary.
        :param data_store_type: The data_store_type of this DataStoreSummary.
        :param id: The id of this DataStoreSummary.
        :param is_local: The is_local of this DataStoreSummary.
        :param name: The name of this DataStoreSummary.
        """
        self.openapi_types = {
            'capacity': int,
            'data_center_name': str,
            'data_store_type': str,
            'id': str,
            'is_local': bool,
            'name': str
        }

        self.attribute_map = {
            'capacity': 'capacity',
            'data_center_name': 'dataCenterName',
            'data_store_type': 'dataStoreType',
            'id': 'id',
            'is_local': 'isLocal',
            'name': 'name'
        }

        self._capacity = capacity
        self._data_center_name = data_center_name
        self._data_store_type = data_store_type
        self._id = id
        self._is_local = is_local
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DataStoreSummary':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DataStoreSummary of this DataStoreSummary.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def capacity(self):
        """Gets the capacity of this DataStoreSummary.


        :return: The capacity of this DataStoreSummary.
        :rtype: int
        """
        return self._capacity

    @capacity.setter
    def capacity(self, capacity):
        """Sets the capacity of this DataStoreSummary.


        :param capacity: The capacity of this DataStoreSummary.
        :type capacity: int
        """

        self._capacity = capacity

    @property
    def data_center_name(self):
        """Gets the data_center_name of this DataStoreSummary.


        :return: The data_center_name of this DataStoreSummary.
        :rtype: str
        """
        return self._data_center_name

    @data_center_name.setter
    def data_center_name(self, data_center_name):
        """Sets the data_center_name of this DataStoreSummary.


        :param data_center_name: The data_center_name of this DataStoreSummary.
        :type data_center_name: str
        """

        self._data_center_name = data_center_name

    @property
    def data_store_type(self):
        """Gets the data_store_type of this DataStoreSummary.


        :return: The data_store_type of this DataStoreSummary.
        :rtype: str
        """
        return self._data_store_type

    @data_store_type.setter
    def data_store_type(self, data_store_type):
        """Sets the data_store_type of this DataStoreSummary.


        :param data_store_type: The data_store_type of this DataStoreSummary.
        :type data_store_type: str
        """

        self._data_store_type = data_store_type

    @property
    def id(self):
        """Gets the id of this DataStoreSummary.


        :return: The id of this DataStoreSummary.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DataStoreSummary.


        :param id: The id of this DataStoreSummary.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def is_local(self):
        """Gets the is_local of this DataStoreSummary.


        :return: The is_local of this DataStoreSummary.
        :rtype: bool
        """
        return self._is_local

    @is_local.setter
    def is_local(self, is_local):
        """Sets the is_local of this DataStoreSummary.


        :param is_local: The is_local of this DataStoreSummary.
        :type is_local: bool
        """

        self._is_local = is_local

    @property
    def name(self):
        """Gets the name of this DataStoreSummary.


        :return: The name of this DataStoreSummary.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DataStoreSummary.


        :param name: The name of this DataStoreSummary.
        :type name: str
        """

        self._name = name
