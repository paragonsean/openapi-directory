# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PrecheckStatusNextRunInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, job_instance_id: str=None, start_time: int=None, status: str=None):
        """PrecheckStatusNextRunInfo - a model defined in OpenAPI

        :param job_instance_id: The job_instance_id of this PrecheckStatusNextRunInfo.
        :param start_time: The start_time of this PrecheckStatusNextRunInfo.
        :param status: The status of this PrecheckStatusNextRunInfo.
        """
        self.openapi_types = {
            'job_instance_id': str,
            'start_time': int,
            'status': str
        }

        self.attribute_map = {
            'job_instance_id': 'jobInstanceId',
            'start_time': 'startTime',
            'status': 'status'
        }

        self._job_instance_id = job_instance_id
        self._start_time = start_time
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PrecheckStatusNextRunInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PrecheckStatusNextRunInfo of this PrecheckStatusNextRunInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def job_instance_id(self):
        """Gets the job_instance_id of this PrecheckStatusNextRunInfo.

        Identifier corresponding to the currently running or next upgrade prechecks job instance. 

        :return: The job_instance_id of this PrecheckStatusNextRunInfo.
        :rtype: str
        """
        return self._job_instance_id

    @job_instance_id.setter
    def job_instance_id(self, job_instance_id):
        """Sets the job_instance_id of this PrecheckStatusNextRunInfo.

        Identifier corresponding to the currently running or next upgrade prechecks job instance. 

        :param job_instance_id: The job_instance_id of this PrecheckStatusNextRunInfo.
        :type job_instance_id: str
        """
        if job_instance_id is None:
            raise ValueError("Invalid value for `job_instance_id`, must not be `None`")

        self._job_instance_id = job_instance_id

    @property
    def start_time(self):
        """Gets the start_time of this PrecheckStatusNextRunInfo.

        The Unix epoch timestamp, in milliseconds, corresponding to the start of the currently running or next upgrade prechecks job instance. 

        :return: The start_time of this PrecheckStatusNextRunInfo.
        :rtype: int
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this PrecheckStatusNextRunInfo.

        The Unix epoch timestamp, in milliseconds, corresponding to the start of the currently running or next upgrade prechecks job instance. 

        :param start_time: The start_time of this PrecheckStatusNextRunInfo.
        :type start_time: int
        """
        if start_time is None:
            raise ValueError("Invalid value for `start_time`, must not be `None`")

        self._start_time = start_time

    @property
    def status(self):
        """Gets the status of this PrecheckStatusNextRunInfo.

        Status of the currently running or next upgrade prechecks job instance. 

        :return: The status of this PrecheckStatusNextRunInfo.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this PrecheckStatusNextRunInfo.

        Status of the currently running or next upgrade prechecks job instance. 

        :param status: The status of this PrecheckStatusNextRunInfo.
        :type status: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status
