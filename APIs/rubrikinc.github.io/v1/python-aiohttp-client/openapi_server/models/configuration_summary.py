# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ConfigurationSummary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, current_value: str=None, default_value: str=None, name: str=None, namespace: str=None, node_id: str=None, on_date: datetime=None, value_on_date: str=None):
        """ConfigurationSummary - a model defined in OpenAPI

        :param current_value: The current_value of this ConfigurationSummary.
        :param default_value: The default_value of this ConfigurationSummary.
        :param name: The name of this ConfigurationSummary.
        :param namespace: The namespace of this ConfigurationSummary.
        :param node_id: The node_id of this ConfigurationSummary.
        :param on_date: The on_date of this ConfigurationSummary.
        :param value_on_date: The value_on_date of this ConfigurationSummary.
        """
        self.openapi_types = {
            'current_value': str,
            'default_value': str,
            'name': str,
            'namespace': str,
            'node_id': str,
            'on_date': datetime,
            'value_on_date': str
        }

        self.attribute_map = {
            'current_value': 'currentValue',
            'default_value': 'defaultValue',
            'name': 'name',
            'namespace': 'namespace',
            'node_id': 'nodeId',
            'on_date': 'onDate',
            'value_on_date': 'valueOnDate'
        }

        self._current_value = current_value
        self._default_value = default_value
        self._name = name
        self._namespace = namespace
        self._node_id = node_id
        self._on_date = on_date
        self._value_on_date = value_on_date

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConfigurationSummary':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ConfigurationSummary of this ConfigurationSummary.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def current_value(self):
        """Gets the current_value of this ConfigurationSummary.

        The current value of the configuration option.

        :return: The current_value of this ConfigurationSummary.
        :rtype: str
        """
        return self._current_value

    @current_value.setter
    def current_value(self, current_value):
        """Sets the current_value of this ConfigurationSummary.

        The current value of the configuration option.

        :param current_value: The current_value of this ConfigurationSummary.
        :type current_value: str
        """

        self._current_value = current_value

    @property
    def default_value(self):
        """Gets the default_value of this ConfigurationSummary.

        The default value, if any, for this configuration value for this release version.

        :return: The default_value of this ConfigurationSummary.
        :rtype: str
        """
        return self._default_value

    @default_value.setter
    def default_value(self, default_value):
        """Sets the default_value of this ConfigurationSummary.

        The default value, if any, for this configuration value for this release version.

        :param default_value: The default_value of this ConfigurationSummary.
        :type default_value: str
        """

        self._default_value = default_value

    @property
    def name(self):
        """Gets the name of this ConfigurationSummary.

        The name of the configuration value.

        :return: The name of this ConfigurationSummary.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ConfigurationSummary.

        The name of the configuration value.

        :param name: The name of this ConfigurationSummary.
        :type name: str
        """

        self._name = name

    @property
    def namespace(self):
        """Gets the namespace of this ConfigurationSummary.

        The configuration namespace.

        :return: The namespace of this ConfigurationSummary.
        :rtype: str
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """Sets the namespace of this ConfigurationSummary.

        The configuration namespace.

        :param namespace: The namespace of this ConfigurationSummary.
        :type namespace: str
        """

        self._namespace = namespace

    @property
    def node_id(self):
        """Gets the node_id of this ConfigurationSummary.

        For local configuration options, the ID of the node. 'cluster' for cluster-wide configuration options.

        :return: The node_id of this ConfigurationSummary.
        :rtype: str
        """
        return self._node_id

    @node_id.setter
    def node_id(self, node_id):
        """Sets the node_id of this ConfigurationSummary.

        For local configuration options, the ID of the node. 'cluster' for cluster-wide configuration options.

        :param node_id: The node_id of this ConfigurationSummary.
        :type node_id: str
        """

        self._node_id = node_id

    @property
    def on_date(self):
        """Gets the on_date of this ConfigurationSummary.

        The timestamp specified in the input query.

        :return: The on_date of this ConfigurationSummary.
        :rtype: datetime
        """
        return self._on_date

    @on_date.setter
    def on_date(self, on_date):
        """Sets the on_date of this ConfigurationSummary.

        The timestamp specified in the input query.

        :param on_date: The on_date of this ConfigurationSummary.
        :type on_date: datetime
        """

        self._on_date = on_date

    @property
    def value_on_date(self):
        """Gets the value_on_date of this ConfigurationSummary.

        Value of the configuration option at the requested time.

        :return: The value_on_date of this ConfigurationSummary.
        :rtype: str
        """
        return self._value_on_date

    @value_on_date.setter
    def value_on_date(self, value_on_date):
        """Sets the value_on_date of this ConfigurationSummary.

        Value of the configuration option at the requested time.

        :param value_on_date: The value_on_date of this ConfigurationSummary.
        :type value_on_date: str
        """

        self._value_on_date = value_on_date
