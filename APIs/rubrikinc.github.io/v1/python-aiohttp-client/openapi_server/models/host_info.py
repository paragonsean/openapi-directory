# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class HostInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, hostname: str=None, id: str=None, oracle_query_user: str=None, oracle_sys_dba_user: str=None):
        """HostInfo - a model defined in OpenAPI

        :param hostname: The hostname of this HostInfo.
        :param id: The id of this HostInfo.
        :param oracle_query_user: The oracle_query_user of this HostInfo.
        :param oracle_sys_dba_user: The oracle_sys_dba_user of this HostInfo.
        """
        self.openapi_types = {
            'hostname': str,
            'id': str,
            'oracle_query_user': str,
            'oracle_sys_dba_user': str
        }

        self.attribute_map = {
            'hostname': 'hostname',
            'id': 'id',
            'oracle_query_user': 'oracleQueryUser',
            'oracle_sys_dba_user': 'oracleSysDbaUser'
        }

        self._hostname = hostname
        self._id = id
        self._oracle_query_user = oracle_query_user
        self._oracle_sys_dba_user = oracle_sys_dba_user

    @classmethod
    def from_dict(cls, dikt: dict) -> 'HostInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The HostInfo of this HostInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def hostname(self):
        """Gets the hostname of this HostInfo.

        Name of the host.

        :return: The hostname of this HostInfo.
        :rtype: str
        """
        return self._hostname

    @hostname.setter
    def hostname(self, hostname):
        """Sets the hostname of this HostInfo.

        Name of the host.

        :param hostname: The hostname of this HostInfo.
        :type hostname: str
        """
        if hostname is None:
            raise ValueError("Invalid value for `hostname`, must not be `None`")

        self._hostname = hostname

    @property
    def id(self):
        """Gets the id of this HostInfo.

        The managed id of the host.

        :return: The id of this HostInfo.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this HostInfo.

        The managed id of the host.

        :param id: The id of this HostInfo.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def oracle_query_user(self):
        """Gets the oracle_query_user of this HostInfo.

        Oracle discovery user.

        :return: The oracle_query_user of this HostInfo.
        :rtype: str
        """
        return self._oracle_query_user

    @oracle_query_user.setter
    def oracle_query_user(self, oracle_query_user):
        """Sets the oracle_query_user of this HostInfo.

        Oracle discovery user.

        :param oracle_query_user: The oracle_query_user of this HostInfo.
        :type oracle_query_user: str
        """
        if oracle_query_user is None:
            raise ValueError("Invalid value for `oracle_query_user`, must not be `None`")

        self._oracle_query_user = oracle_query_user

    @property
    def oracle_sys_dba_user(self):
        """Gets the oracle_sys_dba_user of this HostInfo.

        Oracle sysdba user to use on the host.

        :return: The oracle_sys_dba_user of this HostInfo.
        :rtype: str
        """
        return self._oracle_sys_dba_user

    @oracle_sys_dba_user.setter
    def oracle_sys_dba_user(self, oracle_sys_dba_user):
        """Sets the oracle_sys_dba_user of this HostInfo.

        Oracle sysdba user to use on the host.

        :param oracle_sys_dba_user: The oracle_sys_dba_user of this HostInfo.
        :type oracle_sys_dba_user: str
        """
        if oracle_sys_dba_user is None:
            raise ValueError("Invalid value for `oracle_sys_dba_user`, must not be `None`")

        self._oracle_sys_dba_user = oracle_sys_dba_user
