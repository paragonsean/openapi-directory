# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MssqlRootProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, root_id: str=None, root_name: str=None, root_role: str=None, root_type: str=None):
        """MssqlRootProperties - a model defined in OpenAPI

        :param root_id: The root_id of this MssqlRootProperties.
        :param root_name: The root_name of this MssqlRootProperties.
        :param root_role: The root_role of this MssqlRootProperties.
        :param root_type: The root_type of this MssqlRootProperties.
        """
        self.openapi_types = {
            'root_id': str,
            'root_name': str,
            'root_role': str,
            'root_type': str
        }

        self.attribute_map = {
            'root_id': 'rootId',
            'root_name': 'rootName',
            'root_role': 'rootRole',
            'root_type': 'rootType'
        }

        self._root_id = root_id
        self._root_name = root_name
        self._root_role = root_role
        self._root_type = root_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MssqlRootProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MssqlRootProperties of this MssqlRootProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def root_id(self):
        """Gets the root_id of this MssqlRootProperties.

        ID of the root of this object.

        :return: The root_id of this MssqlRootProperties.
        :rtype: str
        """
        return self._root_id

    @root_id.setter
    def root_id(self, root_id):
        """Sets the root_id of this MssqlRootProperties.

        ID of the root of this object.

        :param root_id: The root_id of this MssqlRootProperties.
        :type root_id: str
        """

        self._root_id = root_id

    @property
    def root_name(self):
        """Gets the root_name of this MssqlRootProperties.

        Name of the root of this object.

        :return: The root_name of this MssqlRootProperties.
        :rtype: str
        """
        return self._root_name

    @root_name.setter
    def root_name(self, root_name):
        """Sets the root_name of this MssqlRootProperties.

        Name of the root of this object.

        :param root_name: The root_name of this MssqlRootProperties.
        :type root_name: str
        """
        if root_name is None:
            raise ValueError("Invalid value for `root_name`, must not be `None`")

        self._root_name = root_name

    @property
    def root_role(self):
        """Gets the root_role of this MssqlRootProperties.

        Role of the root object for this object if the root object is a Host and part of a **_MssqlAvailabilityGroup_**.

        :return: The root_role of this MssqlRootProperties.
        :rtype: str
        """
        return self._root_role

    @root_role.setter
    def root_role(self, root_role):
        """Sets the root_role of this MssqlRootProperties.

        Role of the root object for this object if the root object is a Host and part of a **_MssqlAvailabilityGroup_**.

        :param root_role: The root_role of this MssqlRootProperties.
        :type root_role: str
        """

        self._root_role = root_role

    @property
    def root_type(self):
        """Gets the root_type of this MssqlRootProperties.

        Type of the root object for this object. The root object is the top-level object from which this object is derived. If this object is an availability database, the root object is **_MssqlAvailabilityGroup_**. Otherwise, if this object is part of a cluster, the root object is **_WindowsCluster_**. Otherwise, the root object is **_Host_**.

        :return: The root_type of this MssqlRootProperties.
        :rtype: str
        """
        return self._root_type

    @root_type.setter
    def root_type(self, root_type):
        """Sets the root_type of this MssqlRootProperties.

        Type of the root object for this object. The root object is the top-level object from which this object is derived. If this object is an availability database, the root object is **_MssqlAvailabilityGroup_**. Otherwise, if this object is part of a cluster, the root object is **_WindowsCluster_**. Otherwise, the root object is **_Host_**.

        :param root_type: The root_type of this MssqlRootProperties.
        :type root_type: str
        """
        allowed_values = ["Host", "WindowsCluster", "MssqlAvailabilityGroup"]  # noqa: E501
        if root_type not in allowed_values:
            raise ValueError(
                "Invalid value for `root_type` ({0}), must be one of {1}"
                .format(root_type, allowed_values)
            )

        self._root_type = root_type
