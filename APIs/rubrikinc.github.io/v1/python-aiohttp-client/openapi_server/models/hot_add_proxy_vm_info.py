# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.hot_add_network_config_with_name import HotAddNetworkConfigWithName
from openapi_server.models.hot_add_proxy_vm_status_type import HotAddProxyVmStatusType
from openapi_server import util


class HotAddProxyVmInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, used_port_count: int=None, compute_cluster_name: str=None, datastore_name: str=None, host_name: str=None, id: str=None, name: str=None, proxy_network_info: HotAddNetworkConfigWithName=None, status: HotAddProxyVmStatusType=None, vcenter_name: str=None):
        """HotAddProxyVmInfo - a model defined in OpenAPI

        :param used_port_count: The used_port_count of this HotAddProxyVmInfo.
        :param compute_cluster_name: The compute_cluster_name of this HotAddProxyVmInfo.
        :param datastore_name: The datastore_name of this HotAddProxyVmInfo.
        :param host_name: The host_name of this HotAddProxyVmInfo.
        :param id: The id of this HotAddProxyVmInfo.
        :param name: The name of this HotAddProxyVmInfo.
        :param proxy_network_info: The proxy_network_info of this HotAddProxyVmInfo.
        :param status: The status of this HotAddProxyVmInfo.
        :param vcenter_name: The vcenter_name of this HotAddProxyVmInfo.
        """
        self.openapi_types = {
            'used_port_count': int,
            'compute_cluster_name': str,
            'datastore_name': str,
            'host_name': str,
            'id': str,
            'name': str,
            'proxy_network_info': HotAddNetworkConfigWithName,
            'status': HotAddProxyVmStatusType,
            'vcenter_name': str
        }

        self.attribute_map = {
            'used_port_count': 'UsedPortCount',
            'compute_cluster_name': 'computeClusterName',
            'datastore_name': 'datastoreName',
            'host_name': 'hostName',
            'id': 'id',
            'name': 'name',
            'proxy_network_info': 'proxyNetworkInfo',
            'status': 'status',
            'vcenter_name': 'vcenterName'
        }

        self._used_port_count = used_port_count
        self._compute_cluster_name = compute_cluster_name
        self._datastore_name = datastore_name
        self._host_name = host_name
        self._id = id
        self._name = name
        self._proxy_network_info = proxy_network_info
        self._status = status
        self._vcenter_name = vcenter_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'HotAddProxyVmInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The HotAddProxyVmInfo of this HotAddProxyVmInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def used_port_count(self):
        """Gets the used_port_count of this HotAddProxyVmInfo.

        The number of port in use for the HotAdd proxy virtual machine.

        :return: The used_port_count of this HotAddProxyVmInfo.
        :rtype: int
        """
        return self._used_port_count

    @used_port_count.setter
    def used_port_count(self, used_port_count):
        """Sets the used_port_count of this HotAddProxyVmInfo.

        The number of port in use for the HotAdd proxy virtual machine.

        :param used_port_count: The used_port_count of this HotAddProxyVmInfo.
        :type used_port_count: int
        """
        if used_port_count is None:
            raise ValueError("Invalid value for `used_port_count`, must not be `None`")

        self._used_port_count = used_port_count

    @property
    def compute_cluster_name(self):
        """Gets the compute_cluster_name of this HotAddProxyVmInfo.

        The name of the compute cluster that contains the HotAdd proxy virtual machine.

        :return: The compute_cluster_name of this HotAddProxyVmInfo.
        :rtype: str
        """
        return self._compute_cluster_name

    @compute_cluster_name.setter
    def compute_cluster_name(self, compute_cluster_name):
        """Sets the compute_cluster_name of this HotAddProxyVmInfo.

        The name of the compute cluster that contains the HotAdd proxy virtual machine.

        :param compute_cluster_name: The compute_cluster_name of this HotAddProxyVmInfo.
        :type compute_cluster_name: str
        """

        self._compute_cluster_name = compute_cluster_name

    @property
    def datastore_name(self):
        """Gets the datastore_name of this HotAddProxyVmInfo.

        The name of the datastore that the HotAdd proxy virtual machine uses.

        :return: The datastore_name of this HotAddProxyVmInfo.
        :rtype: str
        """
        return self._datastore_name

    @datastore_name.setter
    def datastore_name(self, datastore_name):
        """Sets the datastore_name of this HotAddProxyVmInfo.

        The name of the datastore that the HotAdd proxy virtual machine uses.

        :param datastore_name: The datastore_name of this HotAddProxyVmInfo.
        :type datastore_name: str
        """
        if datastore_name is None:
            raise ValueError("Invalid value for `datastore_name`, must not be `None`")

        self._datastore_name = datastore_name

    @property
    def host_name(self):
        """Gets the host_name of this HotAddProxyVmInfo.

        The name of the ESX host that contains the HotAdd proxy virtual machine.

        :return: The host_name of this HotAddProxyVmInfo.
        :rtype: str
        """
        return self._host_name

    @host_name.setter
    def host_name(self, host_name):
        """Sets the host_name of this HotAddProxyVmInfo.

        The name of the ESX host that contains the HotAdd proxy virtual machine.

        :param host_name: The host_name of this HotAddProxyVmInfo.
        :type host_name: str
        """

        self._host_name = host_name

    @property
    def id(self):
        """Gets the id of this HotAddProxyVmInfo.

        The ID of the HotAdd proxy virtual machine.

        :return: The id of this HotAddProxyVmInfo.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this HotAddProxyVmInfo.

        The ID of the HotAdd proxy virtual machine.

        :param id: The id of this HotAddProxyVmInfo.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def name(self):
        """Gets the name of this HotAddProxyVmInfo.

        The name of the HotAdd proxy virtual machine.

        :return: The name of this HotAddProxyVmInfo.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this HotAddProxyVmInfo.

        The name of the HotAdd proxy virtual machine.

        :param name: The name of this HotAddProxyVmInfo.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def proxy_network_info(self):
        """Gets the proxy_network_info of this HotAddProxyVmInfo.


        :return: The proxy_network_info of this HotAddProxyVmInfo.
        :rtype: HotAddNetworkConfigWithName
        """
        return self._proxy_network_info

    @proxy_network_info.setter
    def proxy_network_info(self, proxy_network_info):
        """Sets the proxy_network_info of this HotAddProxyVmInfo.


        :param proxy_network_info: The proxy_network_info of this HotAddProxyVmInfo.
        :type proxy_network_info: HotAddNetworkConfigWithName
        """

        self._proxy_network_info = proxy_network_info

    @property
    def status(self):
        """Gets the status of this HotAddProxyVmInfo.


        :return: The status of this HotAddProxyVmInfo.
        :rtype: HotAddProxyVmStatusType
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this HotAddProxyVmInfo.


        :param status: The status of this HotAddProxyVmInfo.
        :type status: HotAddProxyVmStatusType
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status

    @property
    def vcenter_name(self):
        """Gets the vcenter_name of this HotAddProxyVmInfo.

        The name of the vCenter that contains the HotAdd proxy virtual machine.

        :return: The vcenter_name of this HotAddProxyVmInfo.
        :rtype: str
        """
        return self._vcenter_name

    @vcenter_name.setter
    def vcenter_name(self, vcenter_name):
        """Sets the vcenter_name of this HotAddProxyVmInfo.

        The name of the vCenter that contains the HotAdd proxy virtual machine.

        :param vcenter_name: The vcenter_name of this HotAddProxyVmInfo.
        :type vcenter_name: str
        """
        if vcenter_name is None:
            raise ValueError("Invalid value for `vcenter_name`, must not be `None`")

        self._vcenter_name = vcenter_name
