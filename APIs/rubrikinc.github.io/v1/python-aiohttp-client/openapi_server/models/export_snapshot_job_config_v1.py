# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ExportSnapshotJobConfigV1(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, disable_network: bool=None, keep_mac_addresses: bool=None, power_on: bool=None, remove_network_devices: bool=None, vm_name: str=None, datastore_id: str=None, host_id: str=None, should_recover_tags: bool=None, unregister_vm: bool=None):
        """ExportSnapshotJobConfigV1 - a model defined in OpenAPI

        :param disable_network: The disable_network of this ExportSnapshotJobConfigV1.
        :param keep_mac_addresses: The keep_mac_addresses of this ExportSnapshotJobConfigV1.
        :param power_on: The power_on of this ExportSnapshotJobConfigV1.
        :param remove_network_devices: The remove_network_devices of this ExportSnapshotJobConfigV1.
        :param vm_name: The vm_name of this ExportSnapshotJobConfigV1.
        :param datastore_id: The datastore_id of this ExportSnapshotJobConfigV1.
        :param host_id: The host_id of this ExportSnapshotJobConfigV1.
        :param should_recover_tags: The should_recover_tags of this ExportSnapshotJobConfigV1.
        :param unregister_vm: The unregister_vm of this ExportSnapshotJobConfigV1.
        """
        self.openapi_types = {
            'disable_network': bool,
            'keep_mac_addresses': bool,
            'power_on': bool,
            'remove_network_devices': bool,
            'vm_name': str,
            'datastore_id': str,
            'host_id': str,
            'should_recover_tags': bool,
            'unregister_vm': bool
        }

        self.attribute_map = {
            'disable_network': 'disableNetwork',
            'keep_mac_addresses': 'keepMacAddresses',
            'power_on': 'powerOn',
            'remove_network_devices': 'removeNetworkDevices',
            'vm_name': 'vmName',
            'datastore_id': 'datastoreId',
            'host_id': 'hostId',
            'should_recover_tags': 'shouldRecoverTags',
            'unregister_vm': 'unregisterVm'
        }

        self._disable_network = disable_network
        self._keep_mac_addresses = keep_mac_addresses
        self._power_on = power_on
        self._remove_network_devices = remove_network_devices
        self._vm_name = vm_name
        self._datastore_id = datastore_id
        self._host_id = host_id
        self._should_recover_tags = should_recover_tags
        self._unregister_vm = unregister_vm

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ExportSnapshotJobConfigV1':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ExportSnapshotJobConfigV1 of this ExportSnapshotJobConfigV1.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def disable_network(self):
        """Gets the disable_network of this ExportSnapshotJobConfigV1.

        Sets the state of the network interfaces when the virtual machine is mounted or exported. Use 'false' to enable the network interfaces. Use 'true' to disable the network interfaces. Disabling the interfaces can prevent IP conflicts.

        :return: The disable_network of this ExportSnapshotJobConfigV1.
        :rtype: bool
        """
        return self._disable_network

    @disable_network.setter
    def disable_network(self, disable_network):
        """Sets the disable_network of this ExportSnapshotJobConfigV1.

        Sets the state of the network interfaces when the virtual machine is mounted or exported. Use 'false' to enable the network interfaces. Use 'true' to disable the network interfaces. Disabling the interfaces can prevent IP conflicts.

        :param disable_network: The disable_network of this ExportSnapshotJobConfigV1.
        :type disable_network: bool
        """

        self._disable_network = disable_network

    @property
    def keep_mac_addresses(self):
        """Gets the keep_mac_addresses of this ExportSnapshotJobConfigV1.

        Determines whether the MAC addresses of the network interfaces on the source virtual machine are assigned to the new virtual machine. Set to 'true' to assign the original MAC addresses to the new virtual machine. Set to 'false' to assign new MAC addresses. The default is 'false'. When removeNetworkDevices is set to true, this property is ignored.

        :return: The keep_mac_addresses of this ExportSnapshotJobConfigV1.
        :rtype: bool
        """
        return self._keep_mac_addresses

    @keep_mac_addresses.setter
    def keep_mac_addresses(self, keep_mac_addresses):
        """Sets the keep_mac_addresses of this ExportSnapshotJobConfigV1.

        Determines whether the MAC addresses of the network interfaces on the source virtual machine are assigned to the new virtual machine. Set to 'true' to assign the original MAC addresses to the new virtual machine. Set to 'false' to assign new MAC addresses. The default is 'false'. When removeNetworkDevices is set to true, this property is ignored.

        :param keep_mac_addresses: The keep_mac_addresses of this ExportSnapshotJobConfigV1.
        :type keep_mac_addresses: bool
        """

        self._keep_mac_addresses = keep_mac_addresses

    @property
    def power_on(self):
        """Gets the power_on of this ExportSnapshotJobConfigV1.

        Determines whether the virtual machine should be powered on after mount or export. Set to 'true' to power on the virtual machine. Set to 'false' to mount or export the virtual machine but not power it on. The default is 'true'.

        :return: The power_on of this ExportSnapshotJobConfigV1.
        :rtype: bool
        """
        return self._power_on

    @power_on.setter
    def power_on(self, power_on):
        """Sets the power_on of this ExportSnapshotJobConfigV1.

        Determines whether the virtual machine should be powered on after mount or export. Set to 'true' to power on the virtual machine. Set to 'false' to mount or export the virtual machine but not power it on. The default is 'true'.

        :param power_on: The power_on of this ExportSnapshotJobConfigV1.
        :type power_on: bool
        """

        self._power_on = power_on

    @property
    def remove_network_devices(self):
        """Gets the remove_network_devices of this ExportSnapshotJobConfigV1.

        Determines whether to remove the network interfaces from the mounted or exported virtual machine. Set to 'true' to remove all network interfaces. The default value is 'false'.

        :return: The remove_network_devices of this ExportSnapshotJobConfigV1.
        :rtype: bool
        """
        return self._remove_network_devices

    @remove_network_devices.setter
    def remove_network_devices(self, remove_network_devices):
        """Sets the remove_network_devices of this ExportSnapshotJobConfigV1.

        Determines whether to remove the network interfaces from the mounted or exported virtual machine. Set to 'true' to remove all network interfaces. The default value is 'false'.

        :param remove_network_devices: The remove_network_devices of this ExportSnapshotJobConfigV1.
        :type remove_network_devices: bool
        """

        self._remove_network_devices = remove_network_devices

    @property
    def vm_name(self):
        """Gets the vm_name of this ExportSnapshotJobConfigV1.

        Name of the new VM created by mount or export.

        :return: The vm_name of this ExportSnapshotJobConfigV1.
        :rtype: str
        """
        return self._vm_name

    @vm_name.setter
    def vm_name(self, vm_name):
        """Sets the vm_name of this ExportSnapshotJobConfigV1.

        Name of the new VM created by mount or export.

        :param vm_name: The vm_name of this ExportSnapshotJobConfigV1.
        :type vm_name: str
        """

        self._vm_name = vm_name

    @property
    def datastore_id(self):
        """Gets the datastore_id of this ExportSnapshotJobConfigV1.

        ID of the datastore to assign to the exported virtual machine.

        :return: The datastore_id of this ExportSnapshotJobConfigV1.
        :rtype: str
        """
        return self._datastore_id

    @datastore_id.setter
    def datastore_id(self, datastore_id):
        """Sets the datastore_id of this ExportSnapshotJobConfigV1.

        ID of the datastore to assign to the exported virtual machine.

        :param datastore_id: The datastore_id of this ExportSnapshotJobConfigV1.
        :type datastore_id: str
        """
        if datastore_id is None:
            raise ValueError("Invalid value for `datastore_id`, must not be `None`")

        self._datastore_id = datastore_id

    @property
    def host_id(self):
        """Gets the host_id of this ExportSnapshotJobConfigV1.

        ID of the ESXi host to export the new virtual machine to.

        :return: The host_id of this ExportSnapshotJobConfigV1.
        :rtype: str
        """
        return self._host_id

    @host_id.setter
    def host_id(self, host_id):
        """Sets the host_id of this ExportSnapshotJobConfigV1.

        ID of the ESXi host to export the new virtual machine to.

        :param host_id: The host_id of this ExportSnapshotJobConfigV1.
        :type host_id: str
        """

        self._host_id = host_id

    @property
    def should_recover_tags(self):
        """Gets the should_recover_tags of this ExportSnapshotJobConfigV1.

        The job recovers any tags that were assigned to the virtual machine.

        :return: The should_recover_tags of this ExportSnapshotJobConfigV1.
        :rtype: bool
        """
        return self._should_recover_tags

    @should_recover_tags.setter
    def should_recover_tags(self, should_recover_tags):
        """Sets the should_recover_tags of this ExportSnapshotJobConfigV1.

        The job recovers any tags that were assigned to the virtual machine.

        :param should_recover_tags: The should_recover_tags of this ExportSnapshotJobConfigV1.
        :type should_recover_tags: bool
        """

        self._should_recover_tags = should_recover_tags

    @property
    def unregister_vm(self):
        """Gets the unregister_vm of this ExportSnapshotJobConfigV1.

        Determines whether the new virtual machine created from a snapshot is registered with the vCenter Server. Use 'true' to remove the registration from vCenter Server. Use 'false' to keep the registration with the vCenter Server. The default is 'false'.

        :return: The unregister_vm of this ExportSnapshotJobConfigV1.
        :rtype: bool
        """
        return self._unregister_vm

    @unregister_vm.setter
    def unregister_vm(self, unregister_vm):
        """Sets the unregister_vm of this ExportSnapshotJobConfigV1.

        Determines whether the new virtual machine created from a snapshot is registered with the vCenter Server. Use 'true' to remove the registration from vCenter Server. Use 'false' to keep the registration with the vCenter Server. The default is 'false'.

        :param unregister_vm: The unregister_vm of this ExportSnapshotJobConfigV1.
        :type unregister_vm: bool
        """

        self._unregister_vm = unregister_vm
