# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class FilesetTemplatePatch(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allow_backup_hidden_folders_in_network_mounts: bool=None, allow_backup_network_mounts: bool=None, use_windows_vss: bool=None, backup_script_error_handling: str=None, backup_script_timeout: int=None, exceptions: List[str]=None, excludes: List[str]=None, id: str=None, includes: List[str]=None, name: str=None, operating_system_type: str=None, post_backup_script: str=None, pre_backup_script: str=None, share_type: str=None):
        """FilesetTemplatePatch - a model defined in OpenAPI

        :param allow_backup_hidden_folders_in_network_mounts: The allow_backup_hidden_folders_in_network_mounts of this FilesetTemplatePatch.
        :param allow_backup_network_mounts: The allow_backup_network_mounts of this FilesetTemplatePatch.
        :param use_windows_vss: The use_windows_vss of this FilesetTemplatePatch.
        :param backup_script_error_handling: The backup_script_error_handling of this FilesetTemplatePatch.
        :param backup_script_timeout: The backup_script_timeout of this FilesetTemplatePatch.
        :param exceptions: The exceptions of this FilesetTemplatePatch.
        :param excludes: The excludes of this FilesetTemplatePatch.
        :param id: The id of this FilesetTemplatePatch.
        :param includes: The includes of this FilesetTemplatePatch.
        :param name: The name of this FilesetTemplatePatch.
        :param operating_system_type: The operating_system_type of this FilesetTemplatePatch.
        :param post_backup_script: The post_backup_script of this FilesetTemplatePatch.
        :param pre_backup_script: The pre_backup_script of this FilesetTemplatePatch.
        :param share_type: The share_type of this FilesetTemplatePatch.
        """
        self.openapi_types = {
            'allow_backup_hidden_folders_in_network_mounts': bool,
            'allow_backup_network_mounts': bool,
            'use_windows_vss': bool,
            'backup_script_error_handling': str,
            'backup_script_timeout': int,
            'exceptions': List[str],
            'excludes': List[str],
            'id': str,
            'includes': List[str],
            'name': str,
            'operating_system_type': str,
            'post_backup_script': str,
            'pre_backup_script': str,
            'share_type': str
        }

        self.attribute_map = {
            'allow_backup_hidden_folders_in_network_mounts': 'allowBackupHiddenFoldersInNetworkMounts',
            'allow_backup_network_mounts': 'allowBackupNetworkMounts',
            'use_windows_vss': 'useWindowsVss',
            'backup_script_error_handling': 'backupScriptErrorHandling',
            'backup_script_timeout': 'backupScriptTimeout',
            'exceptions': 'exceptions',
            'excludes': 'excludes',
            'id': 'id',
            'includes': 'includes',
            'name': 'name',
            'operating_system_type': 'operatingSystemType',
            'post_backup_script': 'postBackupScript',
            'pre_backup_script': 'preBackupScript',
            'share_type': 'shareType'
        }

        self._allow_backup_hidden_folders_in_network_mounts = allow_backup_hidden_folders_in_network_mounts
        self._allow_backup_network_mounts = allow_backup_network_mounts
        self._use_windows_vss = use_windows_vss
        self._backup_script_error_handling = backup_script_error_handling
        self._backup_script_timeout = backup_script_timeout
        self._exceptions = exceptions
        self._excludes = excludes
        self._id = id
        self._includes = includes
        self._name = name
        self._operating_system_type = operating_system_type
        self._post_backup_script = post_backup_script
        self._pre_backup_script = pre_backup_script
        self._share_type = share_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FilesetTemplatePatch':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FilesetTemplatePatch of this FilesetTemplatePatch.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allow_backup_hidden_folders_in_network_mounts(self):
        """Gets the allow_backup_hidden_folders_in_network_mounts of this FilesetTemplatePatch.

        Include or exclude hidden folders inside locally-mounted remote file systems from backups.

        :return: The allow_backup_hidden_folders_in_network_mounts of this FilesetTemplatePatch.
        :rtype: bool
        """
        return self._allow_backup_hidden_folders_in_network_mounts

    @allow_backup_hidden_folders_in_network_mounts.setter
    def allow_backup_hidden_folders_in_network_mounts(self, allow_backup_hidden_folders_in_network_mounts):
        """Sets the allow_backup_hidden_folders_in_network_mounts of this FilesetTemplatePatch.

        Include or exclude hidden folders inside locally-mounted remote file systems from backups.

        :param allow_backup_hidden_folders_in_network_mounts: The allow_backup_hidden_folders_in_network_mounts of this FilesetTemplatePatch.
        :type allow_backup_hidden_folders_in_network_mounts: bool
        """

        self._allow_backup_hidden_folders_in_network_mounts = allow_backup_hidden_folders_in_network_mounts

    @property
    def allow_backup_network_mounts(self):
        """Gets the allow_backup_network_mounts of this FilesetTemplatePatch.

        Include or exclude locally-mounted remote file systems from backups.

        :return: The allow_backup_network_mounts of this FilesetTemplatePatch.
        :rtype: bool
        """
        return self._allow_backup_network_mounts

    @allow_backup_network_mounts.setter
    def allow_backup_network_mounts(self, allow_backup_network_mounts):
        """Sets the allow_backup_network_mounts of this FilesetTemplatePatch.

        Include or exclude locally-mounted remote file systems from backups.

        :param allow_backup_network_mounts: The allow_backup_network_mounts of this FilesetTemplatePatch.
        :type allow_backup_network_mounts: bool
        """

        self._allow_backup_network_mounts = allow_backup_network_mounts

    @property
    def use_windows_vss(self):
        """Gets the use_windows_vss of this FilesetTemplatePatch.

        Use VSS during Windows backups.

        :return: The use_windows_vss of this FilesetTemplatePatch.
        :rtype: bool
        """
        return self._use_windows_vss

    @use_windows_vss.setter
    def use_windows_vss(self, use_windows_vss):
        """Sets the use_windows_vss of this FilesetTemplatePatch.

        Use VSS during Windows backups.

        :param use_windows_vss: The use_windows_vss of this FilesetTemplatePatch.
        :type use_windows_vss: bool
        """

        self._use_windows_vss = use_windows_vss

    @property
    def backup_script_error_handling(self):
        """Gets the backup_script_error_handling of this FilesetTemplatePatch.

        Action taken if script fails. Options are \"abort\", \"continue\".

        :return: The backup_script_error_handling of this FilesetTemplatePatch.
        :rtype: str
        """
        return self._backup_script_error_handling

    @backup_script_error_handling.setter
    def backup_script_error_handling(self, backup_script_error_handling):
        """Sets the backup_script_error_handling of this FilesetTemplatePatch.

        Action taken if script fails. Options are \"abort\", \"continue\".

        :param backup_script_error_handling: The backup_script_error_handling of this FilesetTemplatePatch.
        :type backup_script_error_handling: str
        """

        self._backup_script_error_handling = backup_script_error_handling

    @property
    def backup_script_timeout(self):
        """Gets the backup_script_timeout of this FilesetTemplatePatch.

        Number of seconds after which the script is killed if it has not completed execution.

        :return: The backup_script_timeout of this FilesetTemplatePatch.
        :rtype: int
        """
        return self._backup_script_timeout

    @backup_script_timeout.setter
    def backup_script_timeout(self, backup_script_timeout):
        """Sets the backup_script_timeout of this FilesetTemplatePatch.

        Number of seconds after which the script is killed if it has not completed execution.

        :param backup_script_timeout: The backup_script_timeout of this FilesetTemplatePatch.
        :type backup_script_timeout: int
        """

        self._backup_script_timeout = backup_script_timeout

    @property
    def exceptions(self):
        """Gets the exceptions of this FilesetTemplatePatch.


        :return: The exceptions of this FilesetTemplatePatch.
        :rtype: List[str]
        """
        return self._exceptions

    @exceptions.setter
    def exceptions(self, exceptions):
        """Sets the exceptions of this FilesetTemplatePatch.


        :param exceptions: The exceptions of this FilesetTemplatePatch.
        :type exceptions: List[str]
        """

        self._exceptions = exceptions

    @property
    def excludes(self):
        """Gets the excludes of this FilesetTemplatePatch.


        :return: The excludes of this FilesetTemplatePatch.
        :rtype: List[str]
        """
        return self._excludes

    @excludes.setter
    def excludes(self, excludes):
        """Sets the excludes of this FilesetTemplatePatch.


        :param excludes: The excludes of this FilesetTemplatePatch.
        :type excludes: List[str]
        """

        self._excludes = excludes

    @property
    def id(self):
        """Gets the id of this FilesetTemplatePatch.


        :return: The id of this FilesetTemplatePatch.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this FilesetTemplatePatch.


        :param id: The id of this FilesetTemplatePatch.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def includes(self):
        """Gets the includes of this FilesetTemplatePatch.


        :return: The includes of this FilesetTemplatePatch.
        :rtype: List[str]
        """
        return self._includes

    @includes.setter
    def includes(self, includes):
        """Sets the includes of this FilesetTemplatePatch.


        :param includes: The includes of this FilesetTemplatePatch.
        :type includes: List[str]
        """

        self._includes = includes

    @property
    def name(self):
        """Gets the name of this FilesetTemplatePatch.


        :return: The name of this FilesetTemplatePatch.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this FilesetTemplatePatch.


        :param name: The name of this FilesetTemplatePatch.
        :type name: str
        """

        self._name = name

    @property
    def operating_system_type(self):
        """Gets the operating_system_type of this FilesetTemplatePatch.

        Operating system type of filesets created by template.

        :return: The operating_system_type of this FilesetTemplatePatch.
        :rtype: str
        """
        return self._operating_system_type

    @operating_system_type.setter
    def operating_system_type(self, operating_system_type):
        """Sets the operating_system_type of this FilesetTemplatePatch.

        Operating system type of filesets created by template.

        :param operating_system_type: The operating_system_type of this FilesetTemplatePatch.
        :type operating_system_type: str
        """
        allowed_values = ["UnixLike", "Windows"]  # noqa: E501
        if operating_system_type not in allowed_values:
            raise ValueError(
                "Invalid value for `operating_system_type` ({0}), must be one of {1}"
                .format(operating_system_type, allowed_values)
            )

        self._operating_system_type = operating_system_type

    @property
    def post_backup_script(self):
        """Gets the post_backup_script of this FilesetTemplatePatch.

        Script to run after backup of this Fileset ends.

        :return: The post_backup_script of this FilesetTemplatePatch.
        :rtype: str
        """
        return self._post_backup_script

    @post_backup_script.setter
    def post_backup_script(self, post_backup_script):
        """Sets the post_backup_script of this FilesetTemplatePatch.

        Script to run after backup of this Fileset ends.

        :param post_backup_script: The post_backup_script of this FilesetTemplatePatch.
        :type post_backup_script: str
        """

        self._post_backup_script = post_backup_script

    @property
    def pre_backup_script(self):
        """Gets the pre_backup_script of this FilesetTemplatePatch.

        Script to run before backup of this Fileset starts.

        :return: The pre_backup_script of this FilesetTemplatePatch.
        :rtype: str
        """
        return self._pre_backup_script

    @pre_backup_script.setter
    def pre_backup_script(self, pre_backup_script):
        """Sets the pre_backup_script of this FilesetTemplatePatch.

        Script to run before backup of this Fileset starts.

        :param pre_backup_script: The pre_backup_script of this FilesetTemplatePatch.
        :type pre_backup_script: str
        """

        self._pre_backup_script = pre_backup_script

    @property
    def share_type(self):
        """Gets the share_type of this FilesetTemplatePatch.


        :return: The share_type of this FilesetTemplatePatch.
        :rtype: str
        """
        return self._share_type

    @share_type.setter
    def share_type(self, share_type):
        """Sets the share_type of this FilesetTemplatePatch.


        :param share_type: The share_type of this FilesetTemplatePatch.
        :type share_type: str
        """
        allowed_values = ["NFS", "SMB"]  # noqa: E501
        if share_type not in allowed_values:
            raise ValueError(
                "Invalid value for `share_type` ({0}), must be one of {1}"
                .format(share_type, allowed_values)
            )

        self._share_type = share_type
