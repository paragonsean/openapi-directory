# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SnapshotStorageStats(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, historic_ingested_bytes: int=None, ingested_bytes: int=None, logical_bytes: int=None, physical_bytes: int=None):
        """SnapshotStorageStats - a model defined in OpenAPI

        :param historic_ingested_bytes: The historic_ingested_bytes of this SnapshotStorageStats.
        :param ingested_bytes: The ingested_bytes of this SnapshotStorageStats.
        :param logical_bytes: The logical_bytes of this SnapshotStorageStats.
        :param physical_bytes: The physical_bytes of this SnapshotStorageStats.
        """
        self.openapi_types = {
            'historic_ingested_bytes': int,
            'ingested_bytes': int,
            'logical_bytes': int,
            'physical_bytes': int
        }

        self.attribute_map = {
            'historic_ingested_bytes': 'historicIngestedBytes',
            'ingested_bytes': 'ingestedBytes',
            'logical_bytes': 'logicalBytes',
            'physical_bytes': 'physicalBytes'
        }

        self._historic_ingested_bytes = historic_ingested_bytes
        self._ingested_bytes = ingested_bytes
        self._logical_bytes = logical_bytes
        self._physical_bytes = physical_bytes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SnapshotStorageStats':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SnapshotStorageStats of this SnapshotStorageStats.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def historic_ingested_bytes(self):
        """Gets the historic_ingested_bytes of this SnapshotStorageStats.

        Amount of bytes actually ingested for the snapshot. This value reflects the amount of bytes ingested during snapshot capture and remains consistent across different physical representations.

        :return: The historic_ingested_bytes of this SnapshotStorageStats.
        :rtype: int
        """
        return self._historic_ingested_bytes

    @historic_ingested_bytes.setter
    def historic_ingested_bytes(self, historic_ingested_bytes):
        """Sets the historic_ingested_bytes of this SnapshotStorageStats.

        Amount of bytes actually ingested for the snapshot. This value reflects the amount of bytes ingested during snapshot capture and remains consistent across different physical representations.

        :param historic_ingested_bytes: The historic_ingested_bytes of this SnapshotStorageStats.
        :type historic_ingested_bytes: int
        """
        if historic_ingested_bytes is None:
            raise ValueError("Invalid value for `historic_ingested_bytes`, must not be `None`")

        self._historic_ingested_bytes = historic_ingested_bytes

    @property
    def ingested_bytes(self):
        """Gets the ingested_bytes of this SnapshotStorageStats.

        Amount of bytes inferred to be ingested to our system for the snapshot. This may change for existing logical content, as physical representation of content changes.

        :return: The ingested_bytes of this SnapshotStorageStats.
        :rtype: int
        """
        return self._ingested_bytes

    @ingested_bytes.setter
    def ingested_bytes(self, ingested_bytes):
        """Sets the ingested_bytes of this SnapshotStorageStats.

        Amount of bytes inferred to be ingested to our system for the snapshot. This may change for existing logical content, as physical representation of content changes.

        :param ingested_bytes: The ingested_bytes of this SnapshotStorageStats.
        :type ingested_bytes: int
        """
        if ingested_bytes is None:
            raise ValueError("Invalid value for `ingested_bytes`, must not be `None`")

        self._ingested_bytes = ingested_bytes

    @property
    def logical_bytes(self):
        """Gets the logical_bytes of this SnapshotStorageStats.

        Amount of logical bytes the snapshot represents.

        :return: The logical_bytes of this SnapshotStorageStats.
        :rtype: int
        """
        return self._logical_bytes

    @logical_bytes.setter
    def logical_bytes(self, logical_bytes):
        """Sets the logical_bytes of this SnapshotStorageStats.

        Amount of logical bytes the snapshot represents.

        :param logical_bytes: The logical_bytes of this SnapshotStorageStats.
        :type logical_bytes: int
        """
        if logical_bytes is None:
            raise ValueError("Invalid value for `logical_bytes`, must not be `None`")

        self._logical_bytes = logical_bytes

    @property
    def physical_bytes(self):
        """Gets the physical_bytes of this SnapshotStorageStats.

        Amount of bytes physically stored for the snapshot.

        :return: The physical_bytes of this SnapshotStorageStats.
        :rtype: int
        """
        return self._physical_bytes

    @physical_bytes.setter
    def physical_bytes(self, physical_bytes):
        """Sets the physical_bytes of this SnapshotStorageStats.

        Amount of bytes physically stored for the snapshot.

        :param physical_bytes: The physical_bytes of this SnapshotStorageStats.
        :type physical_bytes: int
        """
        if physical_bytes is None:
            raise ValueError("Invalid value for `physical_bytes`, must not be `None`")

        self._physical_bytes = physical_bytes
