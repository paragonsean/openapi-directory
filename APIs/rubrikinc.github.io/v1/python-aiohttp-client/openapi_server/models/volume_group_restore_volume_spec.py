# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class VolumeGroupRestoreVolumeSpec(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, target_volume_path: str=None, volume_id: str=None):
        """VolumeGroupRestoreVolumeSpec - a model defined in OpenAPI

        :param target_volume_path: The target_volume_path of this VolumeGroupRestoreVolumeSpec.
        :param volume_id: The volume_id of this VolumeGroupRestoreVolumeSpec.
        """
        self.openapi_types = {
            'target_volume_path': str,
            'volume_id': str
        }

        self.attribute_map = {
            'target_volume_path': 'targetVolumePath',
            'volume_id': 'volumeId'
        }

        self._target_volume_path = target_volume_path
        self._volume_id = volume_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VolumeGroupRestoreVolumeSpec':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VolumeGroupRestoreVolumeSpec of this VolumeGroupRestoreVolumeSpec.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def target_volume_path(self):
        """Gets the target_volume_path of this VolumeGroupRestoreVolumeSpec.

        Path of the target volume for the restore operation.

        :return: The target_volume_path of this VolumeGroupRestoreVolumeSpec.
        :rtype: str
        """
        return self._target_volume_path

    @target_volume_path.setter
    def target_volume_path(self, target_volume_path):
        """Sets the target_volume_path of this VolumeGroupRestoreVolumeSpec.

        Path of the target volume for the restore operation.

        :param target_volume_path: The target_volume_path of this VolumeGroupRestoreVolumeSpec.
        :type target_volume_path: str
        """
        if target_volume_path is None:
            raise ValueError("Invalid value for `target_volume_path`, must not be `None`")

        self._target_volume_path = target_volume_path

    @property
    def volume_id(self):
        """Gets the volume_id of this VolumeGroupRestoreVolumeSpec.

        ID of volume in snapshot to restore.

        :return: The volume_id of this VolumeGroupRestoreVolumeSpec.
        :rtype: str
        """
        return self._volume_id

    @volume_id.setter
    def volume_id(self, volume_id):
        """Sets the volume_id of this VolumeGroupRestoreVolumeSpec.

        ID of volume in snapshot to restore.

        :param volume_id: The volume_id of this VolumeGroupRestoreVolumeSpec.
        :type volume_id: str
        """
        if volume_id is None:
            raise ValueError("Invalid value for `volume_id`, must not be `None`")

        self._volume_id = volume_id
