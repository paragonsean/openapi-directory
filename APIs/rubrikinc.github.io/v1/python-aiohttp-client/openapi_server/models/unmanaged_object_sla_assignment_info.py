# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UnmanagedObjectSlaAssignmentInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, managed_ids: List[str]=None, should_apply_to_non_policy_snapshots: bool=None, sla_domain_id: str=None):
        """UnmanagedObjectSlaAssignmentInfo - a model defined in OpenAPI

        :param managed_ids: The managed_ids of this UnmanagedObjectSlaAssignmentInfo.
        :param should_apply_to_non_policy_snapshots: The should_apply_to_non_policy_snapshots of this UnmanagedObjectSlaAssignmentInfo.
        :param sla_domain_id: The sla_domain_id of this UnmanagedObjectSlaAssignmentInfo.
        """
        self.openapi_types = {
            'managed_ids': List[str],
            'should_apply_to_non_policy_snapshots': bool,
            'sla_domain_id': str
        }

        self.attribute_map = {
            'managed_ids': 'managedIds',
            'should_apply_to_non_policy_snapshots': 'shouldApplyToNonPolicySnapshots',
            'sla_domain_id': 'slaDomainId'
        }

        self._managed_ids = managed_ids
        self._should_apply_to_non_policy_snapshots = should_apply_to_non_policy_snapshots
        self._sla_domain_id = sla_domain_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UnmanagedObjectSlaAssignmentInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UnmanagedObjectSlaAssignmentInfo of this UnmanagedObjectSlaAssignmentInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def managed_ids(self):
        """Gets the managed_ids of this UnmanagedObjectSlaAssignmentInfo.


        :return: The managed_ids of this UnmanagedObjectSlaAssignmentInfo.
        :rtype: List[str]
        """
        return self._managed_ids

    @managed_ids.setter
    def managed_ids(self, managed_ids):
        """Sets the managed_ids of this UnmanagedObjectSlaAssignmentInfo.


        :param managed_ids: The managed_ids of this UnmanagedObjectSlaAssignmentInfo.
        :type managed_ids: List[str]
        """
        if managed_ids is None:
            raise ValueError("Invalid value for `managed_ids`, must not be `None`")

        self._managed_ids = managed_ids

    @property
    def should_apply_to_non_policy_snapshots(self):
        """Gets the should_apply_to_non_policy_snapshots of this UnmanagedObjectSlaAssignmentInfo.


        :return: The should_apply_to_non_policy_snapshots of this UnmanagedObjectSlaAssignmentInfo.
        :rtype: bool
        """
        return self._should_apply_to_non_policy_snapshots

    @should_apply_to_non_policy_snapshots.setter
    def should_apply_to_non_policy_snapshots(self, should_apply_to_non_policy_snapshots):
        """Sets the should_apply_to_non_policy_snapshots of this UnmanagedObjectSlaAssignmentInfo.


        :param should_apply_to_non_policy_snapshots: The should_apply_to_non_policy_snapshots of this UnmanagedObjectSlaAssignmentInfo.
        :type should_apply_to_non_policy_snapshots: bool
        """

        self._should_apply_to_non_policy_snapshots = should_apply_to_non_policy_snapshots

    @property
    def sla_domain_id(self):
        """Gets the sla_domain_id of this UnmanagedObjectSlaAssignmentInfo.


        :return: The sla_domain_id of this UnmanagedObjectSlaAssignmentInfo.
        :rtype: str
        """
        return self._sla_domain_id

    @sla_domain_id.setter
    def sla_domain_id(self, sla_domain_id):
        """Sets the sla_domain_id of this UnmanagedObjectSlaAssignmentInfo.


        :param sla_domain_id: The sla_domain_id of this UnmanagedObjectSlaAssignmentInfo.
        :type sla_domain_id: str
        """
        if sla_domain_id is None:
            raise ValueError("Invalid value for `sla_domain_id`, must not be `None`")

        self._sla_domain_id = sla_domain_id
