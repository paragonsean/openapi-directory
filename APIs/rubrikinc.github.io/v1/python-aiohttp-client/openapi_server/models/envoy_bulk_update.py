# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.envoy_update import EnvoyUpdate
from openapi_server import util


class EnvoyBulkUpdate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, update_properties: EnvoyUpdate=None):
        """EnvoyBulkUpdate - a model defined in OpenAPI

        :param id: The id of this EnvoyBulkUpdate.
        :param update_properties: The update_properties of this EnvoyBulkUpdate.
        """
        self.openapi_types = {
            'id': str,
            'update_properties': EnvoyUpdate
        }

        self.attribute_map = {
            'id': 'id',
            'update_properties': 'updateProperties'
        }

        self._id = id
        self._update_properties = update_properties

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EnvoyBulkUpdate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EnvoyBulkUpdate of this EnvoyBulkUpdate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this EnvoyBulkUpdate.

        ID assigned to a Rubrik Envoy object.

        :return: The id of this EnvoyBulkUpdate.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EnvoyBulkUpdate.

        ID assigned to a Rubrik Envoy object.

        :param id: The id of this EnvoyBulkUpdate.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def update_properties(self):
        """Gets the update_properties of this EnvoyBulkUpdate.


        :return: The update_properties of this EnvoyBulkUpdate.
        :rtype: EnvoyUpdate
        """
        return self._update_properties

    @update_properties.setter
    def update_properties(self, update_properties):
        """Sets the update_properties of this EnvoyBulkUpdate.


        :param update_properties: The update_properties of this EnvoyBulkUpdate.
        :type update_properties: EnvoyUpdate
        """
        if update_properties is None:
            raise ValueError("Invalid value for `update_properties`, must not be `None`")

        self._update_properties = update_properties
