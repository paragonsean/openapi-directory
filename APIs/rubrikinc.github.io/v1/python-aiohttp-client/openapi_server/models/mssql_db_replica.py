# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.mssql_db_replica_availability_info import MssqlDbReplicaAvailabilityInfo
from openapi_server.models.mssql_root_properties import MssqlRootProperties
from openapi_server import util


class MssqlDbReplica(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, availability_info: MssqlDbReplicaAvailabilityInfo=None, has_permissions: bool=None, instance_id: str=None, instance_name: str=None, is_archived: bool=None, is_deleted: bool=None, is_standby: bool=None, recovery_fork_guid: str=None, recovery_model: str=None, root_properties: MssqlRootProperties=None, state: str=None):
        """MssqlDbReplica - a model defined in OpenAPI

        :param availability_info: The availability_info of this MssqlDbReplica.
        :param has_permissions: The has_permissions of this MssqlDbReplica.
        :param instance_id: The instance_id of this MssqlDbReplica.
        :param instance_name: The instance_name of this MssqlDbReplica.
        :param is_archived: The is_archived of this MssqlDbReplica.
        :param is_deleted: The is_deleted of this MssqlDbReplica.
        :param is_standby: The is_standby of this MssqlDbReplica.
        :param recovery_fork_guid: The recovery_fork_guid of this MssqlDbReplica.
        :param recovery_model: The recovery_model of this MssqlDbReplica.
        :param root_properties: The root_properties of this MssqlDbReplica.
        :param state: The state of this MssqlDbReplica.
        """
        self.openapi_types = {
            'availability_info': MssqlDbReplicaAvailabilityInfo,
            'has_permissions': bool,
            'instance_id': str,
            'instance_name': str,
            'is_archived': bool,
            'is_deleted': bool,
            'is_standby': bool,
            'recovery_fork_guid': str,
            'recovery_model': str,
            'root_properties': MssqlRootProperties,
            'state': str
        }

        self.attribute_map = {
            'availability_info': 'availabilityInfo',
            'has_permissions': 'hasPermissions',
            'instance_id': 'instanceId',
            'instance_name': 'instanceName',
            'is_archived': 'isArchived',
            'is_deleted': 'isDeleted',
            'is_standby': 'isStandby',
            'recovery_fork_guid': 'recoveryForkGuid',
            'recovery_model': 'recoveryModel',
            'root_properties': 'rootProperties',
            'state': 'state'
        }

        self._availability_info = availability_info
        self._has_permissions = has_permissions
        self._instance_id = instance_id
        self._instance_name = instance_name
        self._is_archived = is_archived
        self._is_deleted = is_deleted
        self._is_standby = is_standby
        self._recovery_fork_guid = recovery_fork_guid
        self._recovery_model = recovery_model
        self._root_properties = root_properties
        self._state = state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MssqlDbReplica':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MssqlDbReplica of this MssqlDbReplica.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def availability_info(self):
        """Gets the availability_info of this MssqlDbReplica.


        :return: The availability_info of this MssqlDbReplica.
        :rtype: MssqlDbReplicaAvailabilityInfo
        """
        return self._availability_info

    @availability_info.setter
    def availability_info(self, availability_info):
        """Sets the availability_info of this MssqlDbReplica.


        :param availability_info: The availability_info of this MssqlDbReplica.
        :type availability_info: MssqlDbReplicaAvailabilityInfo
        """

        self._availability_info = availability_info

    @property
    def has_permissions(self):
        """Gets the has_permissions of this MssqlDbReplica.

        `True` when the Rubrik cluster has sufficient permissions to perform all necessary operations.

        :return: The has_permissions of this MssqlDbReplica.
        :rtype: bool
        """
        return self._has_permissions

    @has_permissions.setter
    def has_permissions(self, has_permissions):
        """Sets the has_permissions of this MssqlDbReplica.

        `True` when the Rubrik cluster has sufficient permissions to perform all necessary operations.

        :param has_permissions: The has_permissions of this MssqlDbReplica.
        :type has_permissions: bool
        """
        if has_permissions is None:
            raise ValueError("Invalid value for `has_permissions`, must not be `None`")

        self._has_permissions = has_permissions

    @property
    def instance_id(self):
        """Gets the instance_id of this MssqlDbReplica.

        ID of the SQL Server instance managing the replica.

        :return: The instance_id of this MssqlDbReplica.
        :rtype: str
        """
        return self._instance_id

    @instance_id.setter
    def instance_id(self, instance_id):
        """Sets the instance_id of this MssqlDbReplica.

        ID of the SQL Server instance managing the replica.

        :param instance_id: The instance_id of this MssqlDbReplica.
        :type instance_id: str
        """
        if instance_id is None:
            raise ValueError("Invalid value for `instance_id`, must not be `None`")

        self._instance_id = instance_id

    @property
    def instance_name(self):
        """Gets the instance_name of this MssqlDbReplica.

        Name of the SQL Server instance managing the replica.

        :return: The instance_name of this MssqlDbReplica.
        :rtype: str
        """
        return self._instance_name

    @instance_name.setter
    def instance_name(self, instance_name):
        """Sets the instance_name of this MssqlDbReplica.

        Name of the SQL Server instance managing the replica.

        :param instance_name: The instance_name of this MssqlDbReplica.
        :type instance_name: str
        """
        if instance_name is None:
            raise ValueError("Invalid value for `instance_name`, must not be `None`")

        self._instance_name = instance_name

    @property
    def is_archived(self):
        """Gets the is_archived of this MssqlDbReplica.

        Deprecated. Please use 'isDeleted' instead.

        :return: The is_archived of this MssqlDbReplica.
        :rtype: bool
        """
        return self._is_archived

    @is_archived.setter
    def is_archived(self, is_archived):
        """Sets the is_archived of this MssqlDbReplica.

        Deprecated. Please use 'isDeleted' instead.

        :param is_archived: The is_archived of this MssqlDbReplica.
        :type is_archived: bool
        """
        if is_archived is None:
            raise ValueError("Invalid value for `is_archived`, must not be `None`")

        self._is_archived = is_archived

    @property
    def is_deleted(self):
        """Gets the is_deleted of this MssqlDbReplica.

        `True` when the replica is deleted.

        :return: The is_deleted of this MssqlDbReplica.
        :rtype: bool
        """
        return self._is_deleted

    @is_deleted.setter
    def is_deleted(self, is_deleted):
        """Sets the is_deleted of this MssqlDbReplica.

        `True` when the replica is deleted.

        :param is_deleted: The is_deleted of this MssqlDbReplica.
        :type is_deleted: bool
        """
        if is_deleted is None:
            raise ValueError("Invalid value for `is_deleted`, must not be `None`")

        self._is_deleted = is_deleted

    @property
    def is_standby(self):
        """Gets the is_standby of this MssqlDbReplica.

        `True` when the replica is in standby mode.

        :return: The is_standby of this MssqlDbReplica.
        :rtype: bool
        """
        return self._is_standby

    @is_standby.setter
    def is_standby(self, is_standby):
        """Sets the is_standby of this MssqlDbReplica.

        `True` when the replica is in standby mode.

        :param is_standby: The is_standby of this MssqlDbReplica.
        :type is_standby: bool
        """
        if is_standby is None:
            raise ValueError("Invalid value for `is_standby`, must not be `None`")

        self._is_standby = is_standby

    @property
    def recovery_fork_guid(self):
        """Gets the recovery_fork_guid of this MssqlDbReplica.

        The recovery fork GUID of the replica.

        :return: The recovery_fork_guid of this MssqlDbReplica.
        :rtype: str
        """
        return self._recovery_fork_guid

    @recovery_fork_guid.setter
    def recovery_fork_guid(self, recovery_fork_guid):
        """Sets the recovery_fork_guid of this MssqlDbReplica.

        The recovery fork GUID of the replica.

        :param recovery_fork_guid: The recovery_fork_guid of this MssqlDbReplica.
        :type recovery_fork_guid: str
        """

        self._recovery_fork_guid = recovery_fork_guid

    @property
    def recovery_model(self):
        """Gets the recovery_model of this MssqlDbReplica.

        The recovery model of the replica.

        :return: The recovery_model of this MssqlDbReplica.
        :rtype: str
        """
        return self._recovery_model

    @recovery_model.setter
    def recovery_model(self, recovery_model):
        """Sets the recovery_model of this MssqlDbReplica.

        The recovery model of the replica.

        :param recovery_model: The recovery_model of this MssqlDbReplica.
        :type recovery_model: str
        """
        allowed_values = ["SIMPLE", "FULL", "BULK_LOGGED"]  # noqa: E501
        if recovery_model not in allowed_values:
            raise ValueError(
                "Invalid value for `recovery_model` ({0}), must be one of {1}"
                .format(recovery_model, allowed_values)
            )

        self._recovery_model = recovery_model

    @property
    def root_properties(self):
        """Gets the root_properties of this MssqlDbReplica.


        :return: The root_properties of this MssqlDbReplica.
        :rtype: MssqlRootProperties
        """
        return self._root_properties

    @root_properties.setter
    def root_properties(self, root_properties):
        """Sets the root_properties of this MssqlDbReplica.


        :param root_properties: The root_properties of this MssqlDbReplica.
        :type root_properties: MssqlRootProperties
        """
        if root_properties is None:
            raise ValueError("Invalid value for `root_properties`, must not be `None`")

        self._root_properties = root_properties

    @property
    def state(self):
        """Gets the state of this MssqlDbReplica.

        The state of the replica.

        :return: The state of this MssqlDbReplica.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this MssqlDbReplica.

        The state of the replica.

        :param state: The state of this MssqlDbReplica.
        :type state: str
        """
        if state is None:
            raise ValueError("Invalid value for `state`, must not be `None`")

        self._state = state
