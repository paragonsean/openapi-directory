# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.cloud_out_forecast_sla_parameters import CloudOutForecastSlaParameters
from openapi_server.models.forecast_consolidation_filter import ForecastConsolidationFilter
from openapi_server.models.forecast_granularity import ForecastGranularity
from openapi_server import util


class CloudOutForecastRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, consolidation_filter: ForecastConsolidationFilter=None, forecast_period_in_granularity_unit: int=None, granularity: ForecastGranularity=None, sla_parameters: CloudOutForecastSlaParameters=None):
        """CloudOutForecastRequest - a model defined in OpenAPI

        :param consolidation_filter: The consolidation_filter of this CloudOutForecastRequest.
        :param forecast_period_in_granularity_unit: The forecast_period_in_granularity_unit of this CloudOutForecastRequest.
        :param granularity: The granularity of this CloudOutForecastRequest.
        :param sla_parameters: The sla_parameters of this CloudOutForecastRequest.
        """
        self.openapi_types = {
            'consolidation_filter': ForecastConsolidationFilter,
            'forecast_period_in_granularity_unit': int,
            'granularity': ForecastGranularity,
            'sla_parameters': CloudOutForecastSlaParameters
        }

        self.attribute_map = {
            'consolidation_filter': 'consolidationFilter',
            'forecast_period_in_granularity_unit': 'forecastPeriodInGranularityUnit',
            'granularity': 'granularity',
            'sla_parameters': 'slaParameters'
        }

        self._consolidation_filter = consolidation_filter
        self._forecast_period_in_granularity_unit = forecast_period_in_granularity_unit
        self._granularity = granularity
        self._sla_parameters = sla_parameters

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CloudOutForecastRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CloudOutForecastRequest of this CloudOutForecastRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def consolidation_filter(self):
        """Gets the consolidation_filter of this CloudOutForecastRequest.


        :return: The consolidation_filter of this CloudOutForecastRequest.
        :rtype: ForecastConsolidationFilter
        """
        return self._consolidation_filter

    @consolidation_filter.setter
    def consolidation_filter(self, consolidation_filter):
        """Sets the consolidation_filter of this CloudOutForecastRequest.


        :param consolidation_filter: The consolidation_filter of this CloudOutForecastRequest.
        :type consolidation_filter: ForecastConsolidationFilter
        """
        if consolidation_filter is None:
            raise ValueError("Invalid value for `consolidation_filter`, must not be `None`")

        self._consolidation_filter = consolidation_filter

    @property
    def forecast_period_in_granularity_unit(self):
        """Gets the forecast_period_in_granularity_unit of this CloudOutForecastRequest.

        Length of forecast period, in multiples of granularity. The maximum supported forecast period is 10 years.

        :return: The forecast_period_in_granularity_unit of this CloudOutForecastRequest.
        :rtype: int
        """
        return self._forecast_period_in_granularity_unit

    @forecast_period_in_granularity_unit.setter
    def forecast_period_in_granularity_unit(self, forecast_period_in_granularity_unit):
        """Sets the forecast_period_in_granularity_unit of this CloudOutForecastRequest.

        Length of forecast period, in multiples of granularity. The maximum supported forecast period is 10 years.

        :param forecast_period_in_granularity_unit: The forecast_period_in_granularity_unit of this CloudOutForecastRequest.
        :type forecast_period_in_granularity_unit: int
        """
        if forecast_period_in_granularity_unit is None:
            raise ValueError("Invalid value for `forecast_period_in_granularity_unit`, must not be `None`")
        if forecast_period_in_granularity_unit is not None and forecast_period_in_granularity_unit < 1:
            raise ValueError("Invalid value for `forecast_period_in_granularity_unit`, must be a value greater than or equal to `1`")

        self._forecast_period_in_granularity_unit = forecast_period_in_granularity_unit

    @property
    def granularity(self):
        """Gets the granularity of this CloudOutForecastRequest.


        :return: The granularity of this CloudOutForecastRequest.
        :rtype: ForecastGranularity
        """
        return self._granularity

    @granularity.setter
    def granularity(self, granularity):
        """Sets the granularity of this CloudOutForecastRequest.


        :param granularity: The granularity of this CloudOutForecastRequest.
        :type granularity: ForecastGranularity
        """
        if granularity is None:
            raise ValueError("Invalid value for `granularity`, must not be `None`")

        self._granularity = granularity

    @property
    def sla_parameters(self):
        """Gets the sla_parameters of this CloudOutForecastRequest.


        :return: The sla_parameters of this CloudOutForecastRequest.
        :rtype: CloudOutForecastSlaParameters
        """
        return self._sla_parameters

    @sla_parameters.setter
    def sla_parameters(self, sla_parameters):
        """Sets the sla_parameters of this CloudOutForecastRequest.


        :param sla_parameters: The sla_parameters of this CloudOutForecastRequest.
        :type sla_parameters: CloudOutForecastSlaParameters
        """
        if sla_parameters is None:
            raise ValueError("Invalid value for `sla_parameters`, must not be `None`")

        self._sla_parameters = sla_parameters
