# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.host_share_patch import HostSharePatch
from openapi_server import util


class HostShareUpdate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, share_id: str=None, update_properties: HostSharePatch=None):
        """HostShareUpdate - a model defined in OpenAPI

        :param share_id: The share_id of this HostShareUpdate.
        :param update_properties: The update_properties of this HostShareUpdate.
        """
        self.openapi_types = {
            'share_id': str,
            'update_properties': HostSharePatch
        }

        self.attribute_map = {
            'share_id': 'shareId',
            'update_properties': 'updateProperties'
        }

        self._share_id = share_id
        self._update_properties = update_properties

    @classmethod
    def from_dict(cls, dikt: dict) -> 'HostShareUpdate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The HostShareUpdate of this HostShareUpdate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def share_id(self):
        """Gets the share_id of this HostShareUpdate.

        ID of the network share.

        :return: The share_id of this HostShareUpdate.
        :rtype: str
        """
        return self._share_id

    @share_id.setter
    def share_id(self, share_id):
        """Sets the share_id of this HostShareUpdate.

        ID of the network share.

        :param share_id: The share_id of this HostShareUpdate.
        :type share_id: str
        """
        if share_id is None:
            raise ValueError("Invalid value for `share_id`, must not be `None`")

        self._share_id = share_id

    @property
    def update_properties(self):
        """Gets the update_properties of this HostShareUpdate.


        :return: The update_properties of this HostShareUpdate.
        :rtype: HostSharePatch
        """
        return self._update_properties

    @update_properties.setter
    def update_properties(self, update_properties):
        """Sets the update_properties of this HostShareUpdate.


        :param update_properties: The update_properties of this HostShareUpdate.
        :type update_properties: HostSharePatch
        """
        if update_properties is None:
            raise ValueError("Invalid value for `update_properties`, must not be `None`")

        self._update_properties = update_properties
