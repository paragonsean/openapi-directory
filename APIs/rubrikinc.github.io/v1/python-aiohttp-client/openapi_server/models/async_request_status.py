# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.link import Link
from openapi_server.models.request_error_info import RequestErrorInfo
from openapi_server import util


class AsyncRequestStatus(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, end_time: datetime=None, error: RequestErrorInfo=None, id: str=None, links: List[Link]=None, node_id: str=None, progress: float=None, start_time: datetime=None, status: str=None):
        """AsyncRequestStatus - a model defined in OpenAPI

        :param end_time: The end_time of this AsyncRequestStatus.
        :param error: The error of this AsyncRequestStatus.
        :param id: The id of this AsyncRequestStatus.
        :param links: The links of this AsyncRequestStatus.
        :param node_id: The node_id of this AsyncRequestStatus.
        :param progress: The progress of this AsyncRequestStatus.
        :param start_time: The start_time of this AsyncRequestStatus.
        :param status: The status of this AsyncRequestStatus.
        """
        self.openapi_types = {
            'end_time': datetime,
            'error': RequestErrorInfo,
            'id': str,
            'links': List[Link],
            'node_id': str,
            'progress': float,
            'start_time': datetime,
            'status': str
        }

        self.attribute_map = {
            'end_time': 'endTime',
            'error': 'error',
            'id': 'id',
            'links': 'links',
            'node_id': 'nodeId',
            'progress': 'progress',
            'start_time': 'startTime',
            'status': 'status'
        }

        self._end_time = end_time
        self._error = error
        self._id = id
        self._links = links
        self._node_id = node_id
        self._progress = progress
        self._start_time = start_time
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AsyncRequestStatus':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AsyncRequestStatus of this AsyncRequestStatus.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def end_time(self):
        """Gets the end_time of this AsyncRequestStatus.

        The end time of the request.

        :return: The end_time of this AsyncRequestStatus.
        :rtype: datetime
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this AsyncRequestStatus.

        The end time of the request.

        :param end_time: The end_time of this AsyncRequestStatus.
        :type end_time: datetime
        """

        self._end_time = end_time

    @property
    def error(self):
        """Gets the error of this AsyncRequestStatus.


        :return: The error of this AsyncRequestStatus.
        :rtype: RequestErrorInfo
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this AsyncRequestStatus.


        :param error: The error of this AsyncRequestStatus.
        :type error: RequestErrorInfo
        """

        self._error = error

    @property
    def id(self):
        """Gets the id of this AsyncRequestStatus.

        The ID of the request object used to poll the status.

        :return: The id of this AsyncRequestStatus.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AsyncRequestStatus.

        The ID of the request object used to poll the status.

        :param id: The id of this AsyncRequestStatus.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def links(self):
        """Gets the links of this AsyncRequestStatus.

        References to any related objects.

        :return: The links of this AsyncRequestStatus.
        :rtype: List[Link]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this AsyncRequestStatus.

        References to any related objects.

        :param links: The links of this AsyncRequestStatus.
        :type links: List[Link]
        """
        if links is None:
            raise ValueError("Invalid value for `links`, must not be `None`")

        self._links = links

    @property
    def node_id(self):
        """Gets the node_id of this AsyncRequestStatus.

        The ID of the node where the job ran.

        :return: The node_id of this AsyncRequestStatus.
        :rtype: str
        """
        return self._node_id

    @node_id.setter
    def node_id(self, node_id):
        """Sets the node_id of this AsyncRequestStatus.

        The ID of the node where the job ran.

        :param node_id: The node_id of this AsyncRequestStatus.
        :type node_id: str
        """

        self._node_id = node_id

    @property
    def progress(self):
        """Gets the progress of this AsyncRequestStatus.

        The current percentage progress of the asynchronous request.

        :return: The progress of this AsyncRequestStatus.
        :rtype: float
        """
        return self._progress

    @progress.setter
    def progress(self, progress):
        """Sets the progress of this AsyncRequestStatus.

        The current percentage progress of the asynchronous request.

        :param progress: The progress of this AsyncRequestStatus.
        :type progress: float
        """

        self._progress = progress

    @property
    def start_time(self):
        """Gets the start_time of this AsyncRequestStatus.

        The start time of the request.

        :return: The start_time of this AsyncRequestStatus.
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this AsyncRequestStatus.

        The start time of the request.

        :param start_time: The start_time of this AsyncRequestStatus.
        :type start_time: datetime
        """

        self._start_time = start_time

    @property
    def status(self):
        """Gets the status of this AsyncRequestStatus.

        Status of the ID.

        :return: The status of this AsyncRequestStatus.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this AsyncRequestStatus.

        Status of the ID.

        :param status: The status of this AsyncRequestStatus.
        :type status: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status
