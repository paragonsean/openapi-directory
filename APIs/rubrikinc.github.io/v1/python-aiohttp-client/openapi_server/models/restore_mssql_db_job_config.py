# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.mssql_recovery_point import MssqlRecoveryPoint
from openapi_server import util


class RestoreMssqlDbJobConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, finish_recovery: bool=None, max_data_streams: int=None, recovery_point: MssqlRecoveryPoint=None):
        """RestoreMssqlDbJobConfig - a model defined in OpenAPI

        :param finish_recovery: The finish_recovery of this RestoreMssqlDbJobConfig.
        :param max_data_streams: The max_data_streams of this RestoreMssqlDbJobConfig.
        :param recovery_point: The recovery_point of this RestoreMssqlDbJobConfig.
        """
        self.openapi_types = {
            'finish_recovery': bool,
            'max_data_streams': int,
            'recovery_point': MssqlRecoveryPoint
        }

        self.attribute_map = {
            'finish_recovery': 'finishRecovery',
            'max_data_streams': 'maxDataStreams',
            'recovery_point': 'recoveryPoint'
        }

        self._finish_recovery = finish_recovery
        self._max_data_streams = max_data_streams
        self._recovery_point = recovery_point

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RestoreMssqlDbJobConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RestoreMssqlDbJobConfig of this RestoreMssqlDbJobConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def finish_recovery(self):
        """Gets the finish_recovery of this RestoreMssqlDbJobConfig.

        A Boolean value that determines the recovery option to use during database restore. When this value is 'true', the database is restored using the RECOVERY option and is fully functional at the end of the restore operation. When this value is 'false', the database is restored using the NORECOVERY option and remains in recovering mode at the end of the restore operation.

        :return: The finish_recovery of this RestoreMssqlDbJobConfig.
        :rtype: bool
        """
        return self._finish_recovery

    @finish_recovery.setter
    def finish_recovery(self, finish_recovery):
        """Sets the finish_recovery of this RestoreMssqlDbJobConfig.

        A Boolean value that determines the recovery option to use during database restore. When this value is 'true', the database is restored using the RECOVERY option and is fully functional at the end of the restore operation. When this value is 'false', the database is restored using the NORECOVERY option and remains in recovering mode at the end of the restore operation.

        :param finish_recovery: The finish_recovery of this RestoreMssqlDbJobConfig.
        :type finish_recovery: bool
        """

        self._finish_recovery = finish_recovery

    @property
    def max_data_streams(self):
        """Gets the max_data_streams of this RestoreMssqlDbJobConfig.

        Maximum number of parallel data streams that can be used to copy data to the target system.

        :return: The max_data_streams of this RestoreMssqlDbJobConfig.
        :rtype: int
        """
        return self._max_data_streams

    @max_data_streams.setter
    def max_data_streams(self, max_data_streams):
        """Sets the max_data_streams of this RestoreMssqlDbJobConfig.

        Maximum number of parallel data streams that can be used to copy data to the target system.

        :param max_data_streams: The max_data_streams of this RestoreMssqlDbJobConfig.
        :type max_data_streams: int
        """

        self._max_data_streams = max_data_streams

    @property
    def recovery_point(self):
        """Gets the recovery_point of this RestoreMssqlDbJobConfig.


        :return: The recovery_point of this RestoreMssqlDbJobConfig.
        :rtype: MssqlRecoveryPoint
        """
        return self._recovery_point

    @recovery_point.setter
    def recovery_point(self, recovery_point):
        """Sets the recovery_point of this RestoreMssqlDbJobConfig.


        :param recovery_point: The recovery_point of this RestoreMssqlDbJobConfig.
        :type recovery_point: MssqlRecoveryPoint
        """
        if recovery_point is None:
            raise ValueError("Invalid value for `recovery_point`, must not be `None`")

        self._recovery_point = recovery_point
