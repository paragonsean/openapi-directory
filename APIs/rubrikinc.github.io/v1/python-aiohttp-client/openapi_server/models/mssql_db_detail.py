# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.backup_task_diagnostic_info import BackupTaskDiagnosticInfo
from openapi_server.models.blackout_window_status import BlackoutWindowStatus
from openapi_server.models.blackout_windows import BlackoutWindows
from openapi_server.models.configured_sla_type import ConfiguredSlaType
from openapi_server.models.managed_object_pending_sla_info import ManagedObjectPendingSlaInfo
from openapi_server.models.mssql_db_replica import MssqlDbReplica
from openapi_server.models.mssql_root_properties import MssqlRootProperties
from openapi_server.models.mssql_script_detail import MssqlScriptDetail
from openapi_server import util


class MssqlDbDetail(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, configured_sla_domain_id: str=None, configured_sla_domain_name: str=None, configured_sla_domain_type: ConfiguredSlaType=None, id: str=None, is_configured_sla_domain_retention_locked: bool=None, name: str=None, primary_cluster_id: str=None, sla_last_update_time: datetime=None, effective_sla_domain_id: str=None, effective_sla_domain_name: str=None, effective_sla_domain_polaris_managed_id: str=None, effective_sla_source_object_id: str=None, effective_sla_source_object_name: str=None, is_effective_sla_domain_retention_locked: bool=None, retention_sla_domain_id: str=None, sla_assignment: str=None, availability_group_id: str=None, copy_only: bool=None, current_backup_task_info: BackupTaskDiagnosticInfo=None, has_permissions: bool=None, include_backup_task_info: bool=None, instance_id: str=None, instance_name: str=None, is_in_availability_group: bool=None, is_live_mount: bool=None, is_log_shipping_secondary: bool=None, is_online: bool=None, is_relic: bool=None, last_snapshot_time: datetime=None, log_backup_frequency_in_seconds: int=None, log_backup_retention_hours: int=None, num_missed_snapshot: int=None, pending_sla_domain: ManagedObjectPendingSlaInfo=None, recovery_model: str=None, replicas: List[MssqlDbReplica]=None, root_properties: MssqlRootProperties=None, state: str=None, unprotectable_reasons: List[str]=None, blackout_window_status: BlackoutWindowStatus=None, blackout_windows: BlackoutWindows=None, archive_storage: int=None, is_local: bool=None, is_standby: bool=None, latest_recovery_point: date=None, local_storage: int=None, max_data_streams: int=None, oldest_recovery_point: date=None, post_backup_script: MssqlScriptDetail=None, pre_backup_script: MssqlScriptDetail=None, protection_date: date=None, recovery_fork_guid: str=None, snapshot_count: int=None):
        """MssqlDbDetail - a model defined in OpenAPI

        :param configured_sla_domain_id: The configured_sla_domain_id of this MssqlDbDetail.
        :param configured_sla_domain_name: The configured_sla_domain_name of this MssqlDbDetail.
        :param configured_sla_domain_type: The configured_sla_domain_type of this MssqlDbDetail.
        :param id: The id of this MssqlDbDetail.
        :param is_configured_sla_domain_retention_locked: The is_configured_sla_domain_retention_locked of this MssqlDbDetail.
        :param name: The name of this MssqlDbDetail.
        :param primary_cluster_id: The primary_cluster_id of this MssqlDbDetail.
        :param sla_last_update_time: The sla_last_update_time of this MssqlDbDetail.
        :param effective_sla_domain_id: The effective_sla_domain_id of this MssqlDbDetail.
        :param effective_sla_domain_name: The effective_sla_domain_name of this MssqlDbDetail.
        :param effective_sla_domain_polaris_managed_id: The effective_sla_domain_polaris_managed_id of this MssqlDbDetail.
        :param effective_sla_source_object_id: The effective_sla_source_object_id of this MssqlDbDetail.
        :param effective_sla_source_object_name: The effective_sla_source_object_name of this MssqlDbDetail.
        :param is_effective_sla_domain_retention_locked: The is_effective_sla_domain_retention_locked of this MssqlDbDetail.
        :param retention_sla_domain_id: The retention_sla_domain_id of this MssqlDbDetail.
        :param sla_assignment: The sla_assignment of this MssqlDbDetail.
        :param availability_group_id: The availability_group_id of this MssqlDbDetail.
        :param copy_only: The copy_only of this MssqlDbDetail.
        :param current_backup_task_info: The current_backup_task_info of this MssqlDbDetail.
        :param has_permissions: The has_permissions of this MssqlDbDetail.
        :param include_backup_task_info: The include_backup_task_info of this MssqlDbDetail.
        :param instance_id: The instance_id of this MssqlDbDetail.
        :param instance_name: The instance_name of this MssqlDbDetail.
        :param is_in_availability_group: The is_in_availability_group of this MssqlDbDetail.
        :param is_live_mount: The is_live_mount of this MssqlDbDetail.
        :param is_log_shipping_secondary: The is_log_shipping_secondary of this MssqlDbDetail.
        :param is_online: The is_online of this MssqlDbDetail.
        :param is_relic: The is_relic of this MssqlDbDetail.
        :param last_snapshot_time: The last_snapshot_time of this MssqlDbDetail.
        :param log_backup_frequency_in_seconds: The log_backup_frequency_in_seconds of this MssqlDbDetail.
        :param log_backup_retention_hours: The log_backup_retention_hours of this MssqlDbDetail.
        :param num_missed_snapshot: The num_missed_snapshot of this MssqlDbDetail.
        :param pending_sla_domain: The pending_sla_domain of this MssqlDbDetail.
        :param recovery_model: The recovery_model of this MssqlDbDetail.
        :param replicas: The replicas of this MssqlDbDetail.
        :param root_properties: The root_properties of this MssqlDbDetail.
        :param state: The state of this MssqlDbDetail.
        :param unprotectable_reasons: The unprotectable_reasons of this MssqlDbDetail.
        :param blackout_window_status: The blackout_window_status of this MssqlDbDetail.
        :param blackout_windows: The blackout_windows of this MssqlDbDetail.
        :param archive_storage: The archive_storage of this MssqlDbDetail.
        :param is_local: The is_local of this MssqlDbDetail.
        :param is_standby: The is_standby of this MssqlDbDetail.
        :param latest_recovery_point: The latest_recovery_point of this MssqlDbDetail.
        :param local_storage: The local_storage of this MssqlDbDetail.
        :param max_data_streams: The max_data_streams of this MssqlDbDetail.
        :param oldest_recovery_point: The oldest_recovery_point of this MssqlDbDetail.
        :param post_backup_script: The post_backup_script of this MssqlDbDetail.
        :param pre_backup_script: The pre_backup_script of this MssqlDbDetail.
        :param protection_date: The protection_date of this MssqlDbDetail.
        :param recovery_fork_guid: The recovery_fork_guid of this MssqlDbDetail.
        :param snapshot_count: The snapshot_count of this MssqlDbDetail.
        """
        self.openapi_types = {
            'configured_sla_domain_id': str,
            'configured_sla_domain_name': str,
            'configured_sla_domain_type': ConfiguredSlaType,
            'id': str,
            'is_configured_sla_domain_retention_locked': bool,
            'name': str,
            'primary_cluster_id': str,
            'sla_last_update_time': datetime,
            'effective_sla_domain_id': str,
            'effective_sla_domain_name': str,
            'effective_sla_domain_polaris_managed_id': str,
            'effective_sla_source_object_id': str,
            'effective_sla_source_object_name': str,
            'is_effective_sla_domain_retention_locked': bool,
            'retention_sla_domain_id': str,
            'sla_assignment': str,
            'availability_group_id': str,
            'copy_only': bool,
            'current_backup_task_info': BackupTaskDiagnosticInfo,
            'has_permissions': bool,
            'include_backup_task_info': bool,
            'instance_id': str,
            'instance_name': str,
            'is_in_availability_group': bool,
            'is_live_mount': bool,
            'is_log_shipping_secondary': bool,
            'is_online': bool,
            'is_relic': bool,
            'last_snapshot_time': datetime,
            'log_backup_frequency_in_seconds': int,
            'log_backup_retention_hours': int,
            'num_missed_snapshot': int,
            'pending_sla_domain': ManagedObjectPendingSlaInfo,
            'recovery_model': str,
            'replicas': List[MssqlDbReplica],
            'root_properties': MssqlRootProperties,
            'state': str,
            'unprotectable_reasons': List[str],
            'blackout_window_status': BlackoutWindowStatus,
            'blackout_windows': BlackoutWindows,
            'archive_storage': int,
            'is_local': bool,
            'is_standby': bool,
            'latest_recovery_point': date,
            'local_storage': int,
            'max_data_streams': int,
            'oldest_recovery_point': date,
            'post_backup_script': MssqlScriptDetail,
            'pre_backup_script': MssqlScriptDetail,
            'protection_date': date,
            'recovery_fork_guid': str,
            'snapshot_count': int
        }

        self.attribute_map = {
            'configured_sla_domain_id': 'configuredSlaDomainId',
            'configured_sla_domain_name': 'configuredSlaDomainName',
            'configured_sla_domain_type': 'configuredSlaDomainType',
            'id': 'id',
            'is_configured_sla_domain_retention_locked': 'isConfiguredSlaDomainRetentionLocked',
            'name': 'name',
            'primary_cluster_id': 'primaryClusterId',
            'sla_last_update_time': 'slaLastUpdateTime',
            'effective_sla_domain_id': 'effectiveSlaDomainId',
            'effective_sla_domain_name': 'effectiveSlaDomainName',
            'effective_sla_domain_polaris_managed_id': 'effectiveSlaDomainPolarisManagedId',
            'effective_sla_source_object_id': 'effectiveSlaSourceObjectId',
            'effective_sla_source_object_name': 'effectiveSlaSourceObjectName',
            'is_effective_sla_domain_retention_locked': 'isEffectiveSlaDomainRetentionLocked',
            'retention_sla_domain_id': 'retentionSlaDomainId',
            'sla_assignment': 'slaAssignment',
            'availability_group_id': 'availabilityGroupId',
            'copy_only': 'copyOnly',
            'current_backup_task_info': 'currentBackupTaskInfo',
            'has_permissions': 'hasPermissions',
            'include_backup_task_info': 'includeBackupTaskInfo',
            'instance_id': 'instanceId',
            'instance_name': 'instanceName',
            'is_in_availability_group': 'isInAvailabilityGroup',
            'is_live_mount': 'isLiveMount',
            'is_log_shipping_secondary': 'isLogShippingSecondary',
            'is_online': 'isOnline',
            'is_relic': 'isRelic',
            'last_snapshot_time': 'lastSnapshotTime',
            'log_backup_frequency_in_seconds': 'logBackupFrequencyInSeconds',
            'log_backup_retention_hours': 'logBackupRetentionHours',
            'num_missed_snapshot': 'numMissedSnapshot',
            'pending_sla_domain': 'pendingSlaDomain',
            'recovery_model': 'recoveryModel',
            'replicas': 'replicas',
            'root_properties': 'rootProperties',
            'state': 'state',
            'unprotectable_reasons': 'unprotectableReasons',
            'blackout_window_status': 'blackoutWindowStatus',
            'blackout_windows': 'blackoutWindows',
            'archive_storage': 'archiveStorage',
            'is_local': 'isLocal',
            'is_standby': 'isStandby',
            'latest_recovery_point': 'latestRecoveryPoint',
            'local_storage': 'localStorage',
            'max_data_streams': 'maxDataStreams',
            'oldest_recovery_point': 'oldestRecoveryPoint',
            'post_backup_script': 'postBackupScript',
            'pre_backup_script': 'preBackupScript',
            'protection_date': 'protectionDate',
            'recovery_fork_guid': 'recoveryForkGuid',
            'snapshot_count': 'snapshotCount'
        }

        self._configured_sla_domain_id = configured_sla_domain_id
        self._configured_sla_domain_name = configured_sla_domain_name
        self._configured_sla_domain_type = configured_sla_domain_type
        self._id = id
        self._is_configured_sla_domain_retention_locked = is_configured_sla_domain_retention_locked
        self._name = name
        self._primary_cluster_id = primary_cluster_id
        self._sla_last_update_time = sla_last_update_time
        self._effective_sla_domain_id = effective_sla_domain_id
        self._effective_sla_domain_name = effective_sla_domain_name
        self._effective_sla_domain_polaris_managed_id = effective_sla_domain_polaris_managed_id
        self._effective_sla_source_object_id = effective_sla_source_object_id
        self._effective_sla_source_object_name = effective_sla_source_object_name
        self._is_effective_sla_domain_retention_locked = is_effective_sla_domain_retention_locked
        self._retention_sla_domain_id = retention_sla_domain_id
        self._sla_assignment = sla_assignment
        self._availability_group_id = availability_group_id
        self._copy_only = copy_only
        self._current_backup_task_info = current_backup_task_info
        self._has_permissions = has_permissions
        self._include_backup_task_info = include_backup_task_info
        self._instance_id = instance_id
        self._instance_name = instance_name
        self._is_in_availability_group = is_in_availability_group
        self._is_live_mount = is_live_mount
        self._is_log_shipping_secondary = is_log_shipping_secondary
        self._is_online = is_online
        self._is_relic = is_relic
        self._last_snapshot_time = last_snapshot_time
        self._log_backup_frequency_in_seconds = log_backup_frequency_in_seconds
        self._log_backup_retention_hours = log_backup_retention_hours
        self._num_missed_snapshot = num_missed_snapshot
        self._pending_sla_domain = pending_sla_domain
        self._recovery_model = recovery_model
        self._replicas = replicas
        self._root_properties = root_properties
        self._state = state
        self._unprotectable_reasons = unprotectable_reasons
        self._blackout_window_status = blackout_window_status
        self._blackout_windows = blackout_windows
        self._archive_storage = archive_storage
        self._is_local = is_local
        self._is_standby = is_standby
        self._latest_recovery_point = latest_recovery_point
        self._local_storage = local_storage
        self._max_data_streams = max_data_streams
        self._oldest_recovery_point = oldest_recovery_point
        self._post_backup_script = post_backup_script
        self._pre_backup_script = pre_backup_script
        self._protection_date = protection_date
        self._recovery_fork_guid = recovery_fork_guid
        self._snapshot_count = snapshot_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MssqlDbDetail':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MssqlDbDetail of this MssqlDbDetail.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def configured_sla_domain_id(self):
        """Gets the configured_sla_domain_id of this MssqlDbDetail.

        The ID of the SLA Domain configured directly on the Rubrik object.

        :return: The configured_sla_domain_id of this MssqlDbDetail.
        :rtype: str
        """
        return self._configured_sla_domain_id

    @configured_sla_domain_id.setter
    def configured_sla_domain_id(self, configured_sla_domain_id):
        """Sets the configured_sla_domain_id of this MssqlDbDetail.

        The ID of the SLA Domain configured directly on the Rubrik object.

        :param configured_sla_domain_id: The configured_sla_domain_id of this MssqlDbDetail.
        :type configured_sla_domain_id: str
        """
        if configured_sla_domain_id is None:
            raise ValueError("Invalid value for `configured_sla_domain_id`, must not be `None`")

        self._configured_sla_domain_id = configured_sla_domain_id

    @property
    def configured_sla_domain_name(self):
        """Gets the configured_sla_domain_name of this MssqlDbDetail.

        The name of the SLA Domain configured directly on the Rubrik object.

        :return: The configured_sla_domain_name of this MssqlDbDetail.
        :rtype: str
        """
        return self._configured_sla_domain_name

    @configured_sla_domain_name.setter
    def configured_sla_domain_name(self, configured_sla_domain_name):
        """Sets the configured_sla_domain_name of this MssqlDbDetail.

        The name of the SLA Domain configured directly on the Rubrik object.

        :param configured_sla_domain_name: The configured_sla_domain_name of this MssqlDbDetail.
        :type configured_sla_domain_name: str
        """
        if configured_sla_domain_name is None:
            raise ValueError("Invalid value for `configured_sla_domain_name`, must not be `None`")

        self._configured_sla_domain_name = configured_sla_domain_name

    @property
    def configured_sla_domain_type(self):
        """Gets the configured_sla_domain_type of this MssqlDbDetail.


        :return: The configured_sla_domain_type of this MssqlDbDetail.
        :rtype: ConfiguredSlaType
        """
        return self._configured_sla_domain_type

    @configured_sla_domain_type.setter
    def configured_sla_domain_type(self, configured_sla_domain_type):
        """Sets the configured_sla_domain_type of this MssqlDbDetail.


        :param configured_sla_domain_type: The configured_sla_domain_type of this MssqlDbDetail.
        :type configured_sla_domain_type: ConfiguredSlaType
        """

        self._configured_sla_domain_type = configured_sla_domain_type

    @property
    def id(self):
        """Gets the id of this MssqlDbDetail.


        :return: The id of this MssqlDbDetail.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this MssqlDbDetail.


        :param id: The id of this MssqlDbDetail.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def is_configured_sla_domain_retention_locked(self):
        """Gets the is_configured_sla_domain_retention_locked of this MssqlDbDetail.

        Indicates whether the configured SLA Domain is Retention Locked. When this value is 'true', the configured SLA Domain is a Retention Lock SLA Domain.

        :return: The is_configured_sla_domain_retention_locked of this MssqlDbDetail.
        :rtype: bool
        """
        return self._is_configured_sla_domain_retention_locked

    @is_configured_sla_domain_retention_locked.setter
    def is_configured_sla_domain_retention_locked(self, is_configured_sla_domain_retention_locked):
        """Sets the is_configured_sla_domain_retention_locked of this MssqlDbDetail.

        Indicates whether the configured SLA Domain is Retention Locked. When this value is 'true', the configured SLA Domain is a Retention Lock SLA Domain.

        :param is_configured_sla_domain_retention_locked: The is_configured_sla_domain_retention_locked of this MssqlDbDetail.
        :type is_configured_sla_domain_retention_locked: bool
        """

        self._is_configured_sla_domain_retention_locked = is_configured_sla_domain_retention_locked

    @property
    def name(self):
        """Gets the name of this MssqlDbDetail.


        :return: The name of this MssqlDbDetail.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this MssqlDbDetail.


        :param name: The name of this MssqlDbDetail.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def primary_cluster_id(self):
        """Gets the primary_cluster_id of this MssqlDbDetail.


        :return: The primary_cluster_id of this MssqlDbDetail.
        :rtype: str
        """
        return self._primary_cluster_id

    @primary_cluster_id.setter
    def primary_cluster_id(self, primary_cluster_id):
        """Sets the primary_cluster_id of this MssqlDbDetail.


        :param primary_cluster_id: The primary_cluster_id of this MssqlDbDetail.
        :type primary_cluster_id: str
        """
        if primary_cluster_id is None:
            raise ValueError("Invalid value for `primary_cluster_id`, must not be `None`")

        self._primary_cluster_id = primary_cluster_id

    @property
    def sla_last_update_time(self):
        """Gets the sla_last_update_time of this MssqlDbDetail.

        The UTC time when the SLA Domain was last updated.

        :return: The sla_last_update_time of this MssqlDbDetail.
        :rtype: datetime
        """
        return self._sla_last_update_time

    @sla_last_update_time.setter
    def sla_last_update_time(self, sla_last_update_time):
        """Sets the sla_last_update_time of this MssqlDbDetail.

        The UTC time when the SLA Domain was last updated.

        :param sla_last_update_time: The sla_last_update_time of this MssqlDbDetail.
        :type sla_last_update_time: datetime
        """

        self._sla_last_update_time = sla_last_update_time

    @property
    def effective_sla_domain_id(self):
        """Gets the effective_sla_domain_id of this MssqlDbDetail.

        The ID of the SLA Domain that controls the protection of the Rubrik object.

        :return: The effective_sla_domain_id of this MssqlDbDetail.
        :rtype: str
        """
        return self._effective_sla_domain_id

    @effective_sla_domain_id.setter
    def effective_sla_domain_id(self, effective_sla_domain_id):
        """Sets the effective_sla_domain_id of this MssqlDbDetail.

        The ID of the SLA Domain that controls the protection of the Rubrik object.

        :param effective_sla_domain_id: The effective_sla_domain_id of this MssqlDbDetail.
        :type effective_sla_domain_id: str
        """
        if effective_sla_domain_id is None:
            raise ValueError("Invalid value for `effective_sla_domain_id`, must not be `None`")

        self._effective_sla_domain_id = effective_sla_domain_id

    @property
    def effective_sla_domain_name(self):
        """Gets the effective_sla_domain_name of this MssqlDbDetail.

        The name of the SLA Domain that controls the protection of the Rubrik object.

        :return: The effective_sla_domain_name of this MssqlDbDetail.
        :rtype: str
        """
        return self._effective_sla_domain_name

    @effective_sla_domain_name.setter
    def effective_sla_domain_name(self, effective_sla_domain_name):
        """Sets the effective_sla_domain_name of this MssqlDbDetail.

        The name of the SLA Domain that controls the protection of the Rubrik object.

        :param effective_sla_domain_name: The effective_sla_domain_name of this MssqlDbDetail.
        :type effective_sla_domain_name: str
        """
        if effective_sla_domain_name is None:
            raise ValueError("Invalid value for `effective_sla_domain_name`, must not be `None`")

        self._effective_sla_domain_name = effective_sla_domain_name

    @property
    def effective_sla_domain_polaris_managed_id(self):
        """Gets the effective_sla_domain_polaris_managed_id of this MssqlDbDetail.

        Optional. This field contains the managed ID of of the Polaris-managed effective SLA Domain.

        :return: The effective_sla_domain_polaris_managed_id of this MssqlDbDetail.
        :rtype: str
        """
        return self._effective_sla_domain_polaris_managed_id

    @effective_sla_domain_polaris_managed_id.setter
    def effective_sla_domain_polaris_managed_id(self, effective_sla_domain_polaris_managed_id):
        """Sets the effective_sla_domain_polaris_managed_id of this MssqlDbDetail.

        Optional. This field contains the managed ID of of the Polaris-managed effective SLA Domain.

        :param effective_sla_domain_polaris_managed_id: The effective_sla_domain_polaris_managed_id of this MssqlDbDetail.
        :type effective_sla_domain_polaris_managed_id: str
        """

        self._effective_sla_domain_polaris_managed_id = effective_sla_domain_polaris_managed_id

    @property
    def effective_sla_source_object_id(self):
        """Gets the effective_sla_source_object_id of this MssqlDbDetail.

        The ID of the parent of the Rubrik object from which the SLA Domain that controls the protection of Rubrik object is inherited.

        :return: The effective_sla_source_object_id of this MssqlDbDetail.
        :rtype: str
        """
        return self._effective_sla_source_object_id

    @effective_sla_source_object_id.setter
    def effective_sla_source_object_id(self, effective_sla_source_object_id):
        """Sets the effective_sla_source_object_id of this MssqlDbDetail.

        The ID of the parent of the Rubrik object from which the SLA Domain that controls the protection of Rubrik object is inherited.

        :param effective_sla_source_object_id: The effective_sla_source_object_id of this MssqlDbDetail.
        :type effective_sla_source_object_id: str
        """

        self._effective_sla_source_object_id = effective_sla_source_object_id

    @property
    def effective_sla_source_object_name(self):
        """Gets the effective_sla_source_object_name of this MssqlDbDetail.

        The name of the parent of the Rubrik object from which the SLA Domain that controls the protection of Rubrik object is inherited.

        :return: The effective_sla_source_object_name of this MssqlDbDetail.
        :rtype: str
        """
        return self._effective_sla_source_object_name

    @effective_sla_source_object_name.setter
    def effective_sla_source_object_name(self, effective_sla_source_object_name):
        """Sets the effective_sla_source_object_name of this MssqlDbDetail.

        The name of the parent of the Rubrik object from which the SLA Domain that controls the protection of Rubrik object is inherited.

        :param effective_sla_source_object_name: The effective_sla_source_object_name of this MssqlDbDetail.
        :type effective_sla_source_object_name: str
        """

        self._effective_sla_source_object_name = effective_sla_source_object_name

    @property
    def is_effective_sla_domain_retention_locked(self):
        """Gets the is_effective_sla_domain_retention_locked of this MssqlDbDetail.

        Indicates whether the effective SLA Domain is Retention Locked. When this value is 'true', the effective SLA domain is a Retention Lock SLA Domain.

        :return: The is_effective_sla_domain_retention_locked of this MssqlDbDetail.
        :rtype: bool
        """
        return self._is_effective_sla_domain_retention_locked

    @is_effective_sla_domain_retention_locked.setter
    def is_effective_sla_domain_retention_locked(self, is_effective_sla_domain_retention_locked):
        """Sets the is_effective_sla_domain_retention_locked of this MssqlDbDetail.

        Indicates whether the effective SLA Domain is Retention Locked. When this value is 'true', the effective SLA domain is a Retention Lock SLA Domain.

        :param is_effective_sla_domain_retention_locked: The is_effective_sla_domain_retention_locked of this MssqlDbDetail.
        :type is_effective_sla_domain_retention_locked: bool
        """

        self._is_effective_sla_domain_retention_locked = is_effective_sla_domain_retention_locked

    @property
    def retention_sla_domain_id(self):
        """Gets the retention_sla_domain_id of this MssqlDbDetail.

        The ID of the SLA Domain whose retention policy is in use.

        :return: The retention_sla_domain_id of this MssqlDbDetail.
        :rtype: str
        """
        return self._retention_sla_domain_id

    @retention_sla_domain_id.setter
    def retention_sla_domain_id(self, retention_sla_domain_id):
        """Sets the retention_sla_domain_id of this MssqlDbDetail.

        The ID of the SLA Domain whose retention policy is in use.

        :param retention_sla_domain_id: The retention_sla_domain_id of this MssqlDbDetail.
        :type retention_sla_domain_id: str
        """

        self._retention_sla_domain_id = retention_sla_domain_id

    @property
    def sla_assignment(self):
        """Gets the sla_assignment of this MssqlDbDetail.

        The SLA assignment type. Direct SLA assignment means that a SLA Domain was configured directly on the Rubrik object by the user. Derived SLA assignment means that the Rubrik object inherits an SLA Domain from its parent Rubrik object.

        :return: The sla_assignment of this MssqlDbDetail.
        :rtype: str
        """
        return self._sla_assignment

    @sla_assignment.setter
    def sla_assignment(self, sla_assignment):
        """Sets the sla_assignment of this MssqlDbDetail.

        The SLA assignment type. Direct SLA assignment means that a SLA Domain was configured directly on the Rubrik object by the user. Derived SLA assignment means that the Rubrik object inherits an SLA Domain from its parent Rubrik object.

        :param sla_assignment: The sla_assignment of this MssqlDbDetail.
        :type sla_assignment: str
        """
        allowed_values = ["Derived", "Direct", "Unassigned"]  # noqa: E501
        if sla_assignment not in allowed_values:
            raise ValueError(
                "Invalid value for `sla_assignment` ({0}), must be one of {1}"
                .format(sla_assignment, allowed_values)
            )

        self._sla_assignment = sla_assignment

    @property
    def availability_group_id(self):
        """Gets the availability_group_id of this MssqlDbDetail.

        For an availability database, the ID of the availability group that the database belongs to.

        :return: The availability_group_id of this MssqlDbDetail.
        :rtype: str
        """
        return self._availability_group_id

    @availability_group_id.setter
    def availability_group_id(self, availability_group_id):
        """Sets the availability_group_id of this MssqlDbDetail.

        For an availability database, the ID of the availability group that the database belongs to.

        :param availability_group_id: The availability_group_id of this MssqlDbDetail.
        :type availability_group_id: str
        """

        self._availability_group_id = availability_group_id

    @property
    def copy_only(self):
        """Gets the copy_only of this MssqlDbDetail.

        Boolean value that specifies whether or not to perform copy-only backups of the database. When true, database backups are copy-only backups. When false, database backups are full backups.

        :return: The copy_only of this MssqlDbDetail.
        :rtype: bool
        """
        return self._copy_only

    @copy_only.setter
    def copy_only(self, copy_only):
        """Sets the copy_only of this MssqlDbDetail.

        Boolean value that specifies whether or not to perform copy-only backups of the database. When true, database backups are copy-only backups. When false, database backups are full backups.

        :param copy_only: The copy_only of this MssqlDbDetail.
        :type copy_only: bool
        """
        if copy_only is None:
            raise ValueError("Invalid value for `copy_only`, must not be `None`")

        self._copy_only = copy_only

    @property
    def current_backup_task_info(self):
        """Gets the current_backup_task_info of this MssqlDbDetail.


        :return: The current_backup_task_info of this MssqlDbDetail.
        :rtype: BackupTaskDiagnosticInfo
        """
        return self._current_backup_task_info

    @current_backup_task_info.setter
    def current_backup_task_info(self, current_backup_task_info):
        """Sets the current_backup_task_info of this MssqlDbDetail.


        :param current_backup_task_info: The current_backup_task_info of this MssqlDbDetail.
        :type current_backup_task_info: BackupTaskDiagnosticInfo
        """

        self._current_backup_task_info = current_backup_task_info

    @property
    def has_permissions(self):
        """Gets the has_permissions of this MssqlDbDetail.

        A Boolean value that specifies whether the cluster has permission to back up the database. When this value is 'true', the cluster has permission to back up the database.

        :return: The has_permissions of this MssqlDbDetail.
        :rtype: bool
        """
        return self._has_permissions

    @has_permissions.setter
    def has_permissions(self, has_permissions):
        """Sets the has_permissions of this MssqlDbDetail.

        A Boolean value that specifies whether the cluster has permission to back up the database. When this value is 'true', the cluster has permission to back up the database.

        :param has_permissions: The has_permissions of this MssqlDbDetail.
        :type has_permissions: bool
        """
        if has_permissions is None:
            raise ValueError("Invalid value for `has_permissions`, must not be `None`")

        self._has_permissions = has_permissions

    @property
    def include_backup_task_info(self):
        """Gets the include_backup_task_info of this MssqlDbDetail.

        True/false value indicating if backup task information is included in the response.

        :return: The include_backup_task_info of this MssqlDbDetail.
        :rtype: bool
        """
        return self._include_backup_task_info

    @include_backup_task_info.setter
    def include_backup_task_info(self, include_backup_task_info):
        """Sets the include_backup_task_info of this MssqlDbDetail.

        True/false value indicating if backup task information is included in the response.

        :param include_backup_task_info: The include_backup_task_info of this MssqlDbDetail.
        :type include_backup_task_info: bool
        """

        self._include_backup_task_info = include_backup_task_info

    @property
    def instance_id(self):
        """Gets the instance_id of this MssqlDbDetail.

        This field is deprecated. Use the instanceId field on the replicas list instead. This field will continue to work for non-availability databases, but it is meaningless for availability databases.

        :return: The instance_id of this MssqlDbDetail.
        :rtype: str
        """
        return self._instance_id

    @instance_id.setter
    def instance_id(self, instance_id):
        """Sets the instance_id of this MssqlDbDetail.

        This field is deprecated. Use the instanceId field on the replicas list instead. This field will continue to work for non-availability databases, but it is meaningless for availability databases.

        :param instance_id: The instance_id of this MssqlDbDetail.
        :type instance_id: str
        """

        self._instance_id = instance_id

    @property
    def instance_name(self):
        """Gets the instance_name of this MssqlDbDetail.

        This field is deprecated. Use the instanceName field on the replicas list instead. This field will continue to work for non-availability databases, but it is meaningless for availability databases.

        :return: The instance_name of this MssqlDbDetail.
        :rtype: str
        """
        return self._instance_name

    @instance_name.setter
    def instance_name(self, instance_name):
        """Sets the instance_name of this MssqlDbDetail.

        This field is deprecated. Use the instanceName field on the replicas list instead. This field will continue to work for non-availability databases, but it is meaningless for availability databases.

        :param instance_name: The instance_name of this MssqlDbDetail.
        :type instance_name: str
        """

        self._instance_name = instance_name

    @property
    def is_in_availability_group(self):
        """Gets the is_in_availability_group of this MssqlDbDetail.


        :return: The is_in_availability_group of this MssqlDbDetail.
        :rtype: bool
        """
        return self._is_in_availability_group

    @is_in_availability_group.setter
    def is_in_availability_group(self, is_in_availability_group):
        """Sets the is_in_availability_group of this MssqlDbDetail.


        :param is_in_availability_group: The is_in_availability_group of this MssqlDbDetail.
        :type is_in_availability_group: bool
        """
        if is_in_availability_group is None:
            raise ValueError("Invalid value for `is_in_availability_group`, must not be `None`")

        self._is_in_availability_group = is_in_availability_group

    @property
    def is_live_mount(self):
        """Gets the is_live_mount of this MssqlDbDetail.

        Boolean value that specifies whether a database object is a Live Mount. Value is 'true' when the database object is a Live Mount.

        :return: The is_live_mount of this MssqlDbDetail.
        :rtype: bool
        """
        return self._is_live_mount

    @is_live_mount.setter
    def is_live_mount(self, is_live_mount):
        """Sets the is_live_mount of this MssqlDbDetail.

        Boolean value that specifies whether a database object is a Live Mount. Value is 'true' when the database object is a Live Mount.

        :param is_live_mount: The is_live_mount of this MssqlDbDetail.
        :type is_live_mount: bool
        """
        if is_live_mount is None:
            raise ValueError("Invalid value for `is_live_mount`, must not be `None`")

        self._is_live_mount = is_live_mount

    @property
    def is_log_shipping_secondary(self):
        """Gets the is_log_shipping_secondary of this MssqlDbDetail.

        Boolean value that specifies whether a database object represents a secondary database. Value is 'true' when the database object represents a secondary database in a log shipping configuration.

        :return: The is_log_shipping_secondary of this MssqlDbDetail.
        :rtype: bool
        """
        return self._is_log_shipping_secondary

    @is_log_shipping_secondary.setter
    def is_log_shipping_secondary(self, is_log_shipping_secondary):
        """Sets the is_log_shipping_secondary of this MssqlDbDetail.

        Boolean value that specifies whether a database object represents a secondary database. Value is 'true' when the database object represents a secondary database in a log shipping configuration.

        :param is_log_shipping_secondary: The is_log_shipping_secondary of this MssqlDbDetail.
        :type is_log_shipping_secondary: bool
        """
        if is_log_shipping_secondary is None:
            raise ValueError("Invalid value for `is_log_shipping_secondary`, must not be `None`")

        self._is_log_shipping_secondary = is_log_shipping_secondary

    @property
    def is_online(self):
        """Gets the is_online of this MssqlDbDetail.

        A Boolean value that specifies whether the database is in the ONLINE state. When this value is 'true', the database is in the ONLINE state.

        :return: The is_online of this MssqlDbDetail.
        :rtype: bool
        """
        return self._is_online

    @is_online.setter
    def is_online(self, is_online):
        """Sets the is_online of this MssqlDbDetail.

        A Boolean value that specifies whether the database is in the ONLINE state. When this value is 'true', the database is in the ONLINE state.

        :param is_online: The is_online of this MssqlDbDetail.
        :type is_online: bool
        """
        if is_online is None:
            raise ValueError("Invalid value for `is_online`, must not be `None`")

        self._is_online = is_online

    @property
    def is_relic(self):
        """Gets the is_relic of this MssqlDbDetail.


        :return: The is_relic of this MssqlDbDetail.
        :rtype: bool
        """
        return self._is_relic

    @is_relic.setter
    def is_relic(self, is_relic):
        """Sets the is_relic of this MssqlDbDetail.


        :param is_relic: The is_relic of this MssqlDbDetail.
        :type is_relic: bool
        """
        if is_relic is None:
            raise ValueError("Invalid value for `is_relic`, must not be `None`")

        self._is_relic = is_relic

    @property
    def last_snapshot_time(self):
        """Gets the last_snapshot_time of this MssqlDbDetail.

        The timestamp of the previous snapshot.. Only available in the /v1/mssql/db endpoint request body. The information will not be available for other endpoints.

        :return: The last_snapshot_time of this MssqlDbDetail.
        :rtype: datetime
        """
        return self._last_snapshot_time

    @last_snapshot_time.setter
    def last_snapshot_time(self, last_snapshot_time):
        """Sets the last_snapshot_time of this MssqlDbDetail.

        The timestamp of the previous snapshot.. Only available in the /v1/mssql/db endpoint request body. The information will not be available for other endpoints.

        :param last_snapshot_time: The last_snapshot_time of this MssqlDbDetail.
        :type last_snapshot_time: datetime
        """

        self._last_snapshot_time = last_snapshot_time

    @property
    def log_backup_frequency_in_seconds(self):
        """Gets the log_backup_frequency_in_seconds of this MssqlDbDetail.


        :return: The log_backup_frequency_in_seconds of this MssqlDbDetail.
        :rtype: int
        """
        return self._log_backup_frequency_in_seconds

    @log_backup_frequency_in_seconds.setter
    def log_backup_frequency_in_seconds(self, log_backup_frequency_in_seconds):
        """Sets the log_backup_frequency_in_seconds of this MssqlDbDetail.


        :param log_backup_frequency_in_seconds: The log_backup_frequency_in_seconds of this MssqlDbDetail.
        :type log_backup_frequency_in_seconds: int
        """
        if log_backup_frequency_in_seconds is None:
            raise ValueError("Invalid value for `log_backup_frequency_in_seconds`, must not be `None`")

        self._log_backup_frequency_in_seconds = log_backup_frequency_in_seconds

    @property
    def log_backup_retention_hours(self):
        """Gets the log_backup_retention_hours of this MssqlDbDetail.

        Hours to keep a log backup. A value of -1 indicates that a log will only expire when the preceding snapshots have expired.

        :return: The log_backup_retention_hours of this MssqlDbDetail.
        :rtype: int
        """
        return self._log_backup_retention_hours

    @log_backup_retention_hours.setter
    def log_backup_retention_hours(self, log_backup_retention_hours):
        """Sets the log_backup_retention_hours of this MssqlDbDetail.

        Hours to keep a log backup. A value of -1 indicates that a log will only expire when the preceding snapshots have expired.

        :param log_backup_retention_hours: The log_backup_retention_hours of this MssqlDbDetail.
        :type log_backup_retention_hours: int
        """
        if log_backup_retention_hours is None:
            raise ValueError("Invalid value for `log_backup_retention_hours`, must not be `None`")

        self._log_backup_retention_hours = log_backup_retention_hours

    @property
    def num_missed_snapshot(self):
        """Gets the num_missed_snapshot of this MssqlDbDetail.

        An integer that specifies the number of missed snapshots. Only available in the /v1/mssql/db endpoint request body. The information will not be available for other endpoints.

        :return: The num_missed_snapshot of this MssqlDbDetail.
        :rtype: int
        """
        return self._num_missed_snapshot

    @num_missed_snapshot.setter
    def num_missed_snapshot(self, num_missed_snapshot):
        """Sets the num_missed_snapshot of this MssqlDbDetail.

        An integer that specifies the number of missed snapshots. Only available in the /v1/mssql/db endpoint request body. The information will not be available for other endpoints.

        :param num_missed_snapshot: The num_missed_snapshot of this MssqlDbDetail.
        :type num_missed_snapshot: int
        """
        if num_missed_snapshot is None:
            raise ValueError("Invalid value for `num_missed_snapshot`, must not be `None`")

        self._num_missed_snapshot = num_missed_snapshot

    @property
    def pending_sla_domain(self):
        """Gets the pending_sla_domain of this MssqlDbDetail.


        :return: The pending_sla_domain of this MssqlDbDetail.
        :rtype: ManagedObjectPendingSlaInfo
        """
        return self._pending_sla_domain

    @pending_sla_domain.setter
    def pending_sla_domain(self, pending_sla_domain):
        """Sets the pending_sla_domain of this MssqlDbDetail.


        :param pending_sla_domain: The pending_sla_domain of this MssqlDbDetail.
        :type pending_sla_domain: ManagedObjectPendingSlaInfo
        """

        self._pending_sla_domain = pending_sla_domain

    @property
    def recovery_model(self):
        """Gets the recovery_model of this MssqlDbDetail.

        This field is deprecated. Use the recoveryModel field on the replicas list instead. This field will continue to work for non-availability databases, but it is meaningless for availability databases.

        :return: The recovery_model of this MssqlDbDetail.
        :rtype: str
        """
        return self._recovery_model

    @recovery_model.setter
    def recovery_model(self, recovery_model):
        """Sets the recovery_model of this MssqlDbDetail.

        This field is deprecated. Use the recoveryModel field on the replicas list instead. This field will continue to work for non-availability databases, but it is meaningless for availability databases.

        :param recovery_model: The recovery_model of this MssqlDbDetail.
        :type recovery_model: str
        """
        allowed_values = ["SIMPLE", "FULL", "BULK_LOGGED"]  # noqa: E501
        if recovery_model not in allowed_values:
            raise ValueError(
                "Invalid value for `recovery_model` ({0}), must be one of {1}"
                .format(recovery_model, allowed_values)
            )

        self._recovery_model = recovery_model

    @property
    def replicas(self):
        """Gets the replicas of this MssqlDbDetail.

        List of replicas of this database. An availability database may have multiple replicas, while other databases will have only one replica.

        :return: The replicas of this MssqlDbDetail.
        :rtype: List[MssqlDbReplica]
        """
        return self._replicas

    @replicas.setter
    def replicas(self, replicas):
        """Sets the replicas of this MssqlDbDetail.

        List of replicas of this database. An availability database may have multiple replicas, while other databases will have only one replica.

        :param replicas: The replicas of this MssqlDbDetail.
        :type replicas: List[MssqlDbReplica]
        """
        if replicas is None:
            raise ValueError("Invalid value for `replicas`, must not be `None`")

        self._replicas = replicas

    @property
    def root_properties(self):
        """Gets the root_properties of this MssqlDbDetail.


        :return: The root_properties of this MssqlDbDetail.
        :rtype: MssqlRootProperties
        """
        return self._root_properties

    @root_properties.setter
    def root_properties(self, root_properties):
        """Sets the root_properties of this MssqlDbDetail.


        :param root_properties: The root_properties of this MssqlDbDetail.
        :type root_properties: MssqlRootProperties
        """
        if root_properties is None:
            raise ValueError("Invalid value for `root_properties`, must not be `None`")

        self._root_properties = root_properties

    @property
    def state(self):
        """Gets the state of this MssqlDbDetail.

        This field is deprecated. Use the state field on the replicas list instead. This field will continue to work for non-availability databases, but it is meaningless for availability databases.

        :return: The state of this MssqlDbDetail.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this MssqlDbDetail.

        This field is deprecated. Use the state field on the replicas list instead. This field will continue to work for non-availability databases, but it is meaningless for availability databases.

        :param state: The state of this MssqlDbDetail.
        :type state: str
        """

        self._state = state

    @property
    def unprotectable_reasons(self):
        """Gets the unprotectable_reasons of this MssqlDbDetail.

        A list of reasons that a SQL Server database cannot be protected by the Rubrik CDM.

        :return: The unprotectable_reasons of this MssqlDbDetail.
        :rtype: List[str]
        """
        return self._unprotectable_reasons

    @unprotectable_reasons.setter
    def unprotectable_reasons(self, unprotectable_reasons):
        """Sets the unprotectable_reasons of this MssqlDbDetail.

        A list of reasons that a SQL Server database cannot be protected by the Rubrik CDM.

        :param unprotectable_reasons: The unprotectable_reasons of this MssqlDbDetail.
        :type unprotectable_reasons: List[str]
        """
        if unprotectable_reasons is None:
            raise ValueError("Invalid value for `unprotectable_reasons`, must not be `None`")

        self._unprotectable_reasons = unprotectable_reasons

    @property
    def blackout_window_status(self):
        """Gets the blackout_window_status of this MssqlDbDetail.


        :return: The blackout_window_status of this MssqlDbDetail.
        :rtype: BlackoutWindowStatus
        """
        return self._blackout_window_status

    @blackout_window_status.setter
    def blackout_window_status(self, blackout_window_status):
        """Sets the blackout_window_status of this MssqlDbDetail.


        :param blackout_window_status: The blackout_window_status of this MssqlDbDetail.
        :type blackout_window_status: BlackoutWindowStatus
        """
        if blackout_window_status is None:
            raise ValueError("Invalid value for `blackout_window_status`, must not be `None`")

        self._blackout_window_status = blackout_window_status

    @property
    def blackout_windows(self):
        """Gets the blackout_windows of this MssqlDbDetail.


        :return: The blackout_windows of this MssqlDbDetail.
        :rtype: BlackoutWindows
        """
        return self._blackout_windows

    @blackout_windows.setter
    def blackout_windows(self, blackout_windows):
        """Sets the blackout_windows of this MssqlDbDetail.


        :param blackout_windows: The blackout_windows of this MssqlDbDetail.
        :type blackout_windows: BlackoutWindows
        """
        if blackout_windows is None:
            raise ValueError("Invalid value for `blackout_windows`, must not be `None`")

        self._blackout_windows = blackout_windows

    @property
    def archive_storage(self):
        """Gets the archive_storage of this MssqlDbDetail.


        :return: The archive_storage of this MssqlDbDetail.
        :rtype: int
        """
        return self._archive_storage

    @archive_storage.setter
    def archive_storage(self, archive_storage):
        """Sets the archive_storage of this MssqlDbDetail.


        :param archive_storage: The archive_storage of this MssqlDbDetail.
        :type archive_storage: int
        """

        self._archive_storage = archive_storage

    @property
    def is_local(self):
        """Gets the is_local of this MssqlDbDetail.


        :return: The is_local of this MssqlDbDetail.
        :rtype: bool
        """
        return self._is_local

    @is_local.setter
    def is_local(self, is_local):
        """Sets the is_local of this MssqlDbDetail.


        :param is_local: The is_local of this MssqlDbDetail.
        :type is_local: bool
        """

        self._is_local = is_local

    @property
    def is_standby(self):
        """Gets the is_standby of this MssqlDbDetail.

        This field is deprecated. Use the isStandby field on the replicas list instead. This field will continue to work for non-availability databases, but it is meaningless for availability databases.

        :return: The is_standby of this MssqlDbDetail.
        :rtype: bool
        """
        return self._is_standby

    @is_standby.setter
    def is_standby(self, is_standby):
        """Sets the is_standby of this MssqlDbDetail.

        This field is deprecated. Use the isStandby field on the replicas list instead. This field will continue to work for non-availability databases, but it is meaningless for availability databases.

        :param is_standby: The is_standby of this MssqlDbDetail.
        :type is_standby: bool
        """

        self._is_standby = is_standby

    @property
    def latest_recovery_point(self):
        """Gets the latest_recovery_point of this MssqlDbDetail.


        :return: The latest_recovery_point of this MssqlDbDetail.
        :rtype: date
        """
        return self._latest_recovery_point

    @latest_recovery_point.setter
    def latest_recovery_point(self, latest_recovery_point):
        """Sets the latest_recovery_point of this MssqlDbDetail.


        :param latest_recovery_point: The latest_recovery_point of this MssqlDbDetail.
        :type latest_recovery_point: date
        """

        self._latest_recovery_point = latest_recovery_point

    @property
    def local_storage(self):
        """Gets the local_storage of this MssqlDbDetail.


        :return: The local_storage of this MssqlDbDetail.
        :rtype: int
        """
        return self._local_storage

    @local_storage.setter
    def local_storage(self, local_storage):
        """Sets the local_storage of this MssqlDbDetail.


        :param local_storage: The local_storage of this MssqlDbDetail.
        :type local_storage: int
        """

        self._local_storage = local_storage

    @property
    def max_data_streams(self):
        """Gets the max_data_streams of this MssqlDbDetail.


        :return: The max_data_streams of this MssqlDbDetail.
        :rtype: int
        """
        return self._max_data_streams

    @max_data_streams.setter
    def max_data_streams(self, max_data_streams):
        """Sets the max_data_streams of this MssqlDbDetail.


        :param max_data_streams: The max_data_streams of this MssqlDbDetail.
        :type max_data_streams: int
        """

        self._max_data_streams = max_data_streams

    @property
    def oldest_recovery_point(self):
        """Gets the oldest_recovery_point of this MssqlDbDetail.


        :return: The oldest_recovery_point of this MssqlDbDetail.
        :rtype: date
        """
        return self._oldest_recovery_point

    @oldest_recovery_point.setter
    def oldest_recovery_point(self, oldest_recovery_point):
        """Sets the oldest_recovery_point of this MssqlDbDetail.


        :param oldest_recovery_point: The oldest_recovery_point of this MssqlDbDetail.
        :type oldest_recovery_point: date
        """

        self._oldest_recovery_point = oldest_recovery_point

    @property
    def post_backup_script(self):
        """Gets the post_backup_script of this MssqlDbDetail.


        :return: The post_backup_script of this MssqlDbDetail.
        :rtype: MssqlScriptDetail
        """
        return self._post_backup_script

    @post_backup_script.setter
    def post_backup_script(self, post_backup_script):
        """Sets the post_backup_script of this MssqlDbDetail.


        :param post_backup_script: The post_backup_script of this MssqlDbDetail.
        :type post_backup_script: MssqlScriptDetail
        """

        self._post_backup_script = post_backup_script

    @property
    def pre_backup_script(self):
        """Gets the pre_backup_script of this MssqlDbDetail.


        :return: The pre_backup_script of this MssqlDbDetail.
        :rtype: MssqlScriptDetail
        """
        return self._pre_backup_script

    @pre_backup_script.setter
    def pre_backup_script(self, pre_backup_script):
        """Sets the pre_backup_script of this MssqlDbDetail.


        :param pre_backup_script: The pre_backup_script of this MssqlDbDetail.
        :type pre_backup_script: MssqlScriptDetail
        """

        self._pre_backup_script = pre_backup_script

    @property
    def protection_date(self):
        """Gets the protection_date of this MssqlDbDetail.


        :return: The protection_date of this MssqlDbDetail.
        :rtype: date
        """
        return self._protection_date

    @protection_date.setter
    def protection_date(self, protection_date):
        """Sets the protection_date of this MssqlDbDetail.


        :param protection_date: The protection_date of this MssqlDbDetail.
        :type protection_date: date
        """

        self._protection_date = protection_date

    @property
    def recovery_fork_guid(self):
        """Gets the recovery_fork_guid of this MssqlDbDetail.

        This field is deprecated. Use the recoveryForkGuid field on the replicas list instead. This field will continue to work for non-availability databases, but it is meaningless for availability databases.

        :return: The recovery_fork_guid of this MssqlDbDetail.
        :rtype: str
        """
        return self._recovery_fork_guid

    @recovery_fork_guid.setter
    def recovery_fork_guid(self, recovery_fork_guid):
        """Sets the recovery_fork_guid of this MssqlDbDetail.

        This field is deprecated. Use the recoveryForkGuid field on the replicas list instead. This field will continue to work for non-availability databases, but it is meaningless for availability databases.

        :param recovery_fork_guid: The recovery_fork_guid of this MssqlDbDetail.
        :type recovery_fork_guid: str
        """

        self._recovery_fork_guid = recovery_fork_guid

    @property
    def snapshot_count(self):
        """Gets the snapshot_count of this MssqlDbDetail.


        :return: The snapshot_count of this MssqlDbDetail.
        :rtype: int
        """
        return self._snapshot_count

    @snapshot_count.setter
    def snapshot_count(self, snapshot_count):
        """Sets the snapshot_count of this MssqlDbDetail.


        :param snapshot_count: The snapshot_count of this MssqlDbDetail.
        :type snapshot_count: int
        """
        if snapshot_count is None:
            raise ValueError("Invalid value for `snapshot_count`, must not be `None`")

        self._snapshot_count = snapshot_count
