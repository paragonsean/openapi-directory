# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.job_monitoring_stream import JobMonitoringStream
from openapi_server import util


class JobMonitoringStreamingResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cluster_time: datetime=None, data: List[JobMonitoringStream]=None, has_more: bool=None):
        """JobMonitoringStreamingResponse - a model defined in OpenAPI

        :param cluster_time: The cluster_time of this JobMonitoringStreamingResponse.
        :param data: The data of this JobMonitoringStreamingResponse.
        :param has_more: The has_more of this JobMonitoringStreamingResponse.
        """
        self.openapi_types = {
            'cluster_time': datetime,
            'data': List[JobMonitoringStream],
            'has_more': bool
        }

        self.attribute_map = {
            'cluster_time': 'clusterTime',
            'data': 'data',
            'has_more': 'hasMore'
        }

        self._cluster_time = cluster_time
        self._data = data
        self._has_more = has_more

    @classmethod
    def from_dict(cls, dikt: dict) -> 'JobMonitoringStreamingResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The JobMonitoringStreamingResponse of this JobMonitoringStreamingResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cluster_time(self):
        """Gets the cluster_time of this JobMonitoringStreamingResponse.

        Current time of the cluster when the request was made.

        :return: The cluster_time of this JobMonitoringStreamingResponse.
        :rtype: datetime
        """
        return self._cluster_time

    @cluster_time.setter
    def cluster_time(self, cluster_time):
        """Sets the cluster_time of this JobMonitoringStreamingResponse.

        Current time of the cluster when the request was made.

        :param cluster_time: The cluster_time of this JobMonitoringStreamingResponse.
        :type cluster_time: datetime
        """
        if cluster_time is None:
            raise ValueError("Invalid value for `cluster_time`, must not be `None`")

        self._cluster_time = cluster_time

    @property
    def data(self):
        """Gets the data of this JobMonitoringStreamingResponse.

        Response data.

        :return: The data of this JobMonitoringStreamingResponse.
        :rtype: List[JobMonitoringStream]
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this JobMonitoringStreamingResponse.

        Response data.

        :param data: The data of this JobMonitoringStreamingResponse.
        :type data: List[JobMonitoringStream]
        """
        if data is None:
            raise ValueError("Invalid value for `data`, must not be `None`")

        self._data = data

    @property
    def has_more(self):
        """Gets the has_more of this JobMonitoringStreamingResponse.

        True if the list has more elements.

        :return: The has_more of this JobMonitoringStreamingResponse.
        :rtype: bool
        """
        return self._has_more

    @has_more.setter
    def has_more(self, has_more):
        """Sets the has_more of this JobMonitoringStreamingResponse.

        True if the list has more elements.

        :param has_more: The has_more of this JobMonitoringStreamingResponse.
        :type has_more: bool
        """
        if has_more is None:
            raise ValueError("Invalid value for `has_more`, must not be `None`")

        self._has_more = has_more
