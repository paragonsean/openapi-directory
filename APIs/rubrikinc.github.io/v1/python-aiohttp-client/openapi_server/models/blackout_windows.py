# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.blackout_window import BlackoutWindow
from openapi_server import util


class BlackoutWindows(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, global_blackout_windows: List[BlackoutWindow]=None, snappable_blackout_windows: List[BlackoutWindow]=None):
        """BlackoutWindows - a model defined in OpenAPI

        :param global_blackout_windows: The global_blackout_windows of this BlackoutWindows.
        :param snappable_blackout_windows: The snappable_blackout_windows of this BlackoutWindows.
        """
        self.openapi_types = {
            'global_blackout_windows': List[BlackoutWindow],
            'snappable_blackout_windows': List[BlackoutWindow]
        }

        self.attribute_map = {
            'global_blackout_windows': 'globalBlackoutWindows',
            'snappable_blackout_windows': 'snappableBlackoutWindows'
        }

        self._global_blackout_windows = global_blackout_windows
        self._snappable_blackout_windows = snappable_blackout_windows

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BlackoutWindows':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BlackoutWindows of this BlackoutWindows.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def global_blackout_windows(self):
        """Gets the global_blackout_windows of this BlackoutWindows.


        :return: The global_blackout_windows of this BlackoutWindows.
        :rtype: List[BlackoutWindow]
        """
        return self._global_blackout_windows

    @global_blackout_windows.setter
    def global_blackout_windows(self, global_blackout_windows):
        """Sets the global_blackout_windows of this BlackoutWindows.


        :param global_blackout_windows: The global_blackout_windows of this BlackoutWindows.
        :type global_blackout_windows: List[BlackoutWindow]
        """
        if global_blackout_windows is None:
            raise ValueError("Invalid value for `global_blackout_windows`, must not be `None`")

        self._global_blackout_windows = global_blackout_windows

    @property
    def snappable_blackout_windows(self):
        """Gets the snappable_blackout_windows of this BlackoutWindows.


        :return: The snappable_blackout_windows of this BlackoutWindows.
        :rtype: List[BlackoutWindow]
        """
        return self._snappable_blackout_windows

    @snappable_blackout_windows.setter
    def snappable_blackout_windows(self, snappable_blackout_windows):
        """Sets the snappable_blackout_windows of this BlackoutWindows.


        :param snappable_blackout_windows: The snappable_blackout_windows of this BlackoutWindows.
        :type snappable_blackout_windows: List[BlackoutWindow]
        """

        self._snappable_blackout_windows = snappable_blackout_windows
