# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.config_param import ConfigParam
from openapi_server.models.node_status_enum import NodeStatusEnum
from openapi_server.models.notification_config import NotificationConfig
from openapi_server.models.policy_scope_enum import PolicyScopeEnum
from openapi_server.models.policy_type_enum import PolicyTypeEnum
from openapi_server import util


class HealthMonitorPolicy(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, causes: List[str]=None, config_params: List[ConfigParam]=None, dependencies: List[str]=None, description: str=None, is_enabled: bool=None, is_hidden: bool=None, kb_info: str=None, notification_config: NotificationConfig=None, policy_id: str=None, policy_name: str=None, policy_type: PolicyTypeEnum=None, remedies: List[str]=None, run_in_state: List[NodeStatusEnum]=None, schedule_freq_in_sec: int=None, scope: PolicyScopeEnum=None, script: str=None):
        """HealthMonitorPolicy - a model defined in OpenAPI

        :param causes: The causes of this HealthMonitorPolicy.
        :param config_params: The config_params of this HealthMonitorPolicy.
        :param dependencies: The dependencies of this HealthMonitorPolicy.
        :param description: The description of this HealthMonitorPolicy.
        :param is_enabled: The is_enabled of this HealthMonitorPolicy.
        :param is_hidden: The is_hidden of this HealthMonitorPolicy.
        :param kb_info: The kb_info of this HealthMonitorPolicy.
        :param notification_config: The notification_config of this HealthMonitorPolicy.
        :param policy_id: The policy_id of this HealthMonitorPolicy.
        :param policy_name: The policy_name of this HealthMonitorPolicy.
        :param policy_type: The policy_type of this HealthMonitorPolicy.
        :param remedies: The remedies of this HealthMonitorPolicy.
        :param run_in_state: The run_in_state of this HealthMonitorPolicy.
        :param schedule_freq_in_sec: The schedule_freq_in_sec of this HealthMonitorPolicy.
        :param scope: The scope of this HealthMonitorPolicy.
        :param script: The script of this HealthMonitorPolicy.
        """
        self.openapi_types = {
            'causes': List[str],
            'config_params': List[ConfigParam],
            'dependencies': List[str],
            'description': str,
            'is_enabled': bool,
            'is_hidden': bool,
            'kb_info': str,
            'notification_config': NotificationConfig,
            'policy_id': str,
            'policy_name': str,
            'policy_type': PolicyTypeEnum,
            'remedies': List[str],
            'run_in_state': List[NodeStatusEnum],
            'schedule_freq_in_sec': int,
            'scope': PolicyScopeEnum,
            'script': str
        }

        self.attribute_map = {
            'causes': 'causes',
            'config_params': 'configParams',
            'dependencies': 'dependencies',
            'description': 'description',
            'is_enabled': 'isEnabled',
            'is_hidden': 'isHidden',
            'kb_info': 'kbInfo',
            'notification_config': 'notificationConfig',
            'policy_id': 'policyId',
            'policy_name': 'policyName',
            'policy_type': 'policyType',
            'remedies': 'remedies',
            'run_in_state': 'runInState',
            'schedule_freq_in_sec': 'scheduleFreqInSec',
            'scope': 'scope',
            'script': 'script'
        }

        self._causes = causes
        self._config_params = config_params
        self._dependencies = dependencies
        self._description = description
        self._is_enabled = is_enabled
        self._is_hidden = is_hidden
        self._kb_info = kb_info
        self._notification_config = notification_config
        self._policy_id = policy_id
        self._policy_name = policy_name
        self._policy_type = policy_type
        self._remedies = remedies
        self._run_in_state = run_in_state
        self._schedule_freq_in_sec = schedule_freq_in_sec
        self._scope = scope
        self._script = script

    @classmethod
    def from_dict(cls, dikt: dict) -> 'HealthMonitorPolicy':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The HealthMonitorPolicy of this HealthMonitorPolicy.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def causes(self):
        """Gets the causes of this HealthMonitorPolicy.


        :return: The causes of this HealthMonitorPolicy.
        :rtype: List[str]
        """
        return self._causes

    @causes.setter
    def causes(self, causes):
        """Sets the causes of this HealthMonitorPolicy.


        :param causes: The causes of this HealthMonitorPolicy.
        :type causes: List[str]
        """
        if causes is None:
            raise ValueError("Invalid value for `causes`, must not be `None`")

        self._causes = causes

    @property
    def config_params(self):
        """Gets the config_params of this HealthMonitorPolicy.


        :return: The config_params of this HealthMonitorPolicy.
        :rtype: List[ConfigParam]
        """
        return self._config_params

    @config_params.setter
    def config_params(self, config_params):
        """Sets the config_params of this HealthMonitorPolicy.


        :param config_params: The config_params of this HealthMonitorPolicy.
        :type config_params: List[ConfigParam]
        """
        if config_params is None:
            raise ValueError("Invalid value for `config_params`, must not be `None`")

        self._config_params = config_params

    @property
    def dependencies(self):
        """Gets the dependencies of this HealthMonitorPolicy.


        :return: The dependencies of this HealthMonitorPolicy.
        :rtype: List[str]
        """
        return self._dependencies

    @dependencies.setter
    def dependencies(self, dependencies):
        """Sets the dependencies of this HealthMonitorPolicy.


        :param dependencies: The dependencies of this HealthMonitorPolicy.
        :type dependencies: List[str]
        """
        if dependencies is None:
            raise ValueError("Invalid value for `dependencies`, must not be `None`")

        self._dependencies = dependencies

    @property
    def description(self):
        """Gets the description of this HealthMonitorPolicy.


        :return: The description of this HealthMonitorPolicy.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this HealthMonitorPolicy.


        :param description: The description of this HealthMonitorPolicy.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def is_enabled(self):
        """Gets the is_enabled of this HealthMonitorPolicy.


        :return: The is_enabled of this HealthMonitorPolicy.
        :rtype: bool
        """
        return self._is_enabled

    @is_enabled.setter
    def is_enabled(self, is_enabled):
        """Sets the is_enabled of this HealthMonitorPolicy.


        :param is_enabled: The is_enabled of this HealthMonitorPolicy.
        :type is_enabled: bool
        """
        if is_enabled is None:
            raise ValueError("Invalid value for `is_enabled`, must not be `None`")

        self._is_enabled = is_enabled

    @property
    def is_hidden(self):
        """Gets the is_hidden of this HealthMonitorPolicy.


        :return: The is_hidden of this HealthMonitorPolicy.
        :rtype: bool
        """
        return self._is_hidden

    @is_hidden.setter
    def is_hidden(self, is_hidden):
        """Sets the is_hidden of this HealthMonitorPolicy.


        :param is_hidden: The is_hidden of this HealthMonitorPolicy.
        :type is_hidden: bool
        """
        if is_hidden is None:
            raise ValueError("Invalid value for `is_hidden`, must not be `None`")

        self._is_hidden = is_hidden

    @property
    def kb_info(self):
        """Gets the kb_info of this HealthMonitorPolicy.


        :return: The kb_info of this HealthMonitorPolicy.
        :rtype: str
        """
        return self._kb_info

    @kb_info.setter
    def kb_info(self, kb_info):
        """Sets the kb_info of this HealthMonitorPolicy.


        :param kb_info: The kb_info of this HealthMonitorPolicy.
        :type kb_info: str
        """

        self._kb_info = kb_info

    @property
    def notification_config(self):
        """Gets the notification_config of this HealthMonitorPolicy.


        :return: The notification_config of this HealthMonitorPolicy.
        :rtype: NotificationConfig
        """
        return self._notification_config

    @notification_config.setter
    def notification_config(self, notification_config):
        """Sets the notification_config of this HealthMonitorPolicy.


        :param notification_config: The notification_config of this HealthMonitorPolicy.
        :type notification_config: NotificationConfig
        """

        self._notification_config = notification_config

    @property
    def policy_id(self):
        """Gets the policy_id of this HealthMonitorPolicy.


        :return: The policy_id of this HealthMonitorPolicy.
        :rtype: str
        """
        return self._policy_id

    @policy_id.setter
    def policy_id(self, policy_id):
        """Sets the policy_id of this HealthMonitorPolicy.


        :param policy_id: The policy_id of this HealthMonitorPolicy.
        :type policy_id: str
        """
        if policy_id is None:
            raise ValueError("Invalid value for `policy_id`, must not be `None`")

        self._policy_id = policy_id

    @property
    def policy_name(self):
        """Gets the policy_name of this HealthMonitorPolicy.


        :return: The policy_name of this HealthMonitorPolicy.
        :rtype: str
        """
        return self._policy_name

    @policy_name.setter
    def policy_name(self, policy_name):
        """Sets the policy_name of this HealthMonitorPolicy.


        :param policy_name: The policy_name of this HealthMonitorPolicy.
        :type policy_name: str
        """
        if policy_name is None:
            raise ValueError("Invalid value for `policy_name`, must not be `None`")

        self._policy_name = policy_name

    @property
    def policy_type(self):
        """Gets the policy_type of this HealthMonitorPolicy.


        :return: The policy_type of this HealthMonitorPolicy.
        :rtype: PolicyTypeEnum
        """
        return self._policy_type

    @policy_type.setter
    def policy_type(self, policy_type):
        """Sets the policy_type of this HealthMonitorPolicy.


        :param policy_type: The policy_type of this HealthMonitorPolicy.
        :type policy_type: PolicyTypeEnum
        """
        if policy_type is None:
            raise ValueError("Invalid value for `policy_type`, must not be `None`")

        self._policy_type = policy_type

    @property
    def remedies(self):
        """Gets the remedies of this HealthMonitorPolicy.


        :return: The remedies of this HealthMonitorPolicy.
        :rtype: List[str]
        """
        return self._remedies

    @remedies.setter
    def remedies(self, remedies):
        """Sets the remedies of this HealthMonitorPolicy.


        :param remedies: The remedies of this HealthMonitorPolicy.
        :type remedies: List[str]
        """
        if remedies is None:
            raise ValueError("Invalid value for `remedies`, must not be `None`")

        self._remedies = remedies

    @property
    def run_in_state(self):
        """Gets the run_in_state of this HealthMonitorPolicy.


        :return: The run_in_state of this HealthMonitorPolicy.
        :rtype: List[NodeStatusEnum]
        """
        return self._run_in_state

    @run_in_state.setter
    def run_in_state(self, run_in_state):
        """Sets the run_in_state of this HealthMonitorPolicy.


        :param run_in_state: The run_in_state of this HealthMonitorPolicy.
        :type run_in_state: List[NodeStatusEnum]
        """
        if run_in_state is None:
            raise ValueError("Invalid value for `run_in_state`, must not be `None`")

        self._run_in_state = run_in_state

    @property
    def schedule_freq_in_sec(self):
        """Gets the schedule_freq_in_sec of this HealthMonitorPolicy.


        :return: The schedule_freq_in_sec of this HealthMonitorPolicy.
        :rtype: int
        """
        return self._schedule_freq_in_sec

    @schedule_freq_in_sec.setter
    def schedule_freq_in_sec(self, schedule_freq_in_sec):
        """Sets the schedule_freq_in_sec of this HealthMonitorPolicy.


        :param schedule_freq_in_sec: The schedule_freq_in_sec of this HealthMonitorPolicy.
        :type schedule_freq_in_sec: int
        """
        if schedule_freq_in_sec is None:
            raise ValueError("Invalid value for `schedule_freq_in_sec`, must not be `None`")

        self._schedule_freq_in_sec = schedule_freq_in_sec

    @property
    def scope(self):
        """Gets the scope of this HealthMonitorPolicy.


        :return: The scope of this HealthMonitorPolicy.
        :rtype: PolicyScopeEnum
        """
        return self._scope

    @scope.setter
    def scope(self, scope):
        """Sets the scope of this HealthMonitorPolicy.


        :param scope: The scope of this HealthMonitorPolicy.
        :type scope: PolicyScopeEnum
        """
        if scope is None:
            raise ValueError("Invalid value for `scope`, must not be `None`")

        self._scope = scope

    @property
    def script(self):
        """Gets the script of this HealthMonitorPolicy.


        :return: The script of this HealthMonitorPolicy.
        :rtype: str
        """
        return self._script

    @script.setter
    def script(self, script):
        """Sets the script of this HealthMonitorPolicy.


        :param script: The script of this HealthMonitorPolicy.
        :type script: str
        """
        if script is None:
            raise ValueError("Invalid value for `script`, must not be `None`")

        self._script = script
