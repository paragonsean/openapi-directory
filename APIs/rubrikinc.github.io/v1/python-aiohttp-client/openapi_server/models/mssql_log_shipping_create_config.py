# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.mssql_db_file_export_path import MssqlDbFileExportPath
from openapi_server.models.mssql_log_shipping_ok_state import MssqlLogShippingOkState
from openapi_server import util


class MssqlLogShippingCreateConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, should_disconnect_standby_users: bool=None, state: MssqlLogShippingOkState=None, max_data_streams: int=None, target_data_file_path: str=None, target_database_name: str=None, target_file_paths: List[MssqlDbFileExportPath]=None, target_instance_id: str=None, target_log_file_path: str=None):
        """MssqlLogShippingCreateConfig - a model defined in OpenAPI

        :param should_disconnect_standby_users: The should_disconnect_standby_users of this MssqlLogShippingCreateConfig.
        :param state: The state of this MssqlLogShippingCreateConfig.
        :param max_data_streams: The max_data_streams of this MssqlLogShippingCreateConfig.
        :param target_data_file_path: The target_data_file_path of this MssqlLogShippingCreateConfig.
        :param target_database_name: The target_database_name of this MssqlLogShippingCreateConfig.
        :param target_file_paths: The target_file_paths of this MssqlLogShippingCreateConfig.
        :param target_instance_id: The target_instance_id of this MssqlLogShippingCreateConfig.
        :param target_log_file_path: The target_log_file_path of this MssqlLogShippingCreateConfig.
        """
        self.openapi_types = {
            'should_disconnect_standby_users': bool,
            'state': MssqlLogShippingOkState,
            'max_data_streams': int,
            'target_data_file_path': str,
            'target_database_name': str,
            'target_file_paths': List[MssqlDbFileExportPath],
            'target_instance_id': str,
            'target_log_file_path': str
        }

        self.attribute_map = {
            'should_disconnect_standby_users': 'shouldDisconnectStandbyUsers',
            'state': 'state',
            'max_data_streams': 'maxDataStreams',
            'target_data_file_path': 'targetDataFilePath',
            'target_database_name': 'targetDatabaseName',
            'target_file_paths': 'targetFilePaths',
            'target_instance_id': 'targetInstanceId',
            'target_log_file_path': 'targetLogFilePath'
        }

        self._should_disconnect_standby_users = should_disconnect_standby_users
        self._state = state
        self._max_data_streams = max_data_streams
        self._target_data_file_path = target_data_file_path
        self._target_database_name = target_database_name
        self._target_file_paths = target_file_paths
        self._target_instance_id = target_instance_id
        self._target_log_file_path = target_log_file_path

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MssqlLogShippingCreateConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MssqlLogShippingCreateConfig of this MssqlLogShippingCreateConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def should_disconnect_standby_users(self):
        """Gets the should_disconnect_standby_users of this MssqlLogShippingCreateConfig.

        Specifies whether to automatically disconnect users from a secondary database in standby mode when a restore operation is performed. If this value is set to false and users remain connected, any scheduled restore operations fail. If the \"state\" field is `RESTORING`, this value can be omitted and is ignored.

        :return: The should_disconnect_standby_users of this MssqlLogShippingCreateConfig.
        :rtype: bool
        """
        return self._should_disconnect_standby_users

    @should_disconnect_standby_users.setter
    def should_disconnect_standby_users(self, should_disconnect_standby_users):
        """Sets the should_disconnect_standby_users of this MssqlLogShippingCreateConfig.

        Specifies whether to automatically disconnect users from a secondary database in standby mode when a restore operation is performed. If this value is set to false and users remain connected, any scheduled restore operations fail. If the \"state\" field is `RESTORING`, this value can be omitted and is ignored.

        :param should_disconnect_standby_users: The should_disconnect_standby_users of this MssqlLogShippingCreateConfig.
        :type should_disconnect_standby_users: bool
        """

        self._should_disconnect_standby_users = should_disconnect_standby_users

    @property
    def state(self):
        """Gets the state of this MssqlLogShippingCreateConfig.


        :return: The state of this MssqlLogShippingCreateConfig.
        :rtype: MssqlLogShippingOkState
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this MssqlLogShippingCreateConfig.


        :param state: The state of this MssqlLogShippingCreateConfig.
        :type state: MssqlLogShippingOkState
        """
        if state is None:
            raise ValueError("Invalid value for `state`, must not be `None`")

        self._state = state

    @property
    def max_data_streams(self):
        """Gets the max_data_streams of this MssqlLogShippingCreateConfig.

        Maximum number of parallel data streams that can be used to copy data to the target system.

        :return: The max_data_streams of this MssqlLogShippingCreateConfig.
        :rtype: int
        """
        return self._max_data_streams

    @max_data_streams.setter
    def max_data_streams(self, max_data_streams):
        """Sets the max_data_streams of this MssqlLogShippingCreateConfig.

        Maximum number of parallel data streams that can be used to copy data to the target system.

        :param max_data_streams: The max_data_streams of this MssqlLogShippingCreateConfig.
        :type max_data_streams: int
        """

        self._max_data_streams = max_data_streams

    @property
    def target_data_file_path(self):
        """Gets the target_data_file_path of this MssqlLogShippingCreateConfig.

        The path to the default target location for data file storage.

        :return: The target_data_file_path of this MssqlLogShippingCreateConfig.
        :rtype: str
        """
        return self._target_data_file_path

    @target_data_file_path.setter
    def target_data_file_path(self, target_data_file_path):
        """Sets the target_data_file_path of this MssqlLogShippingCreateConfig.

        The path to the default target location for data file storage.

        :param target_data_file_path: The target_data_file_path of this MssqlLogShippingCreateConfig.
        :type target_data_file_path: str
        """

        self._target_data_file_path = target_data_file_path

    @property
    def target_database_name(self):
        """Gets the target_database_name of this MssqlLogShippingCreateConfig.

        The name of the secondary database.

        :return: The target_database_name of this MssqlLogShippingCreateConfig.
        :rtype: str
        """
        return self._target_database_name

    @target_database_name.setter
    def target_database_name(self, target_database_name):
        """Sets the target_database_name of this MssqlLogShippingCreateConfig.

        The name of the secondary database.

        :param target_database_name: The target_database_name of this MssqlLogShippingCreateConfig.
        :type target_database_name: str
        """
        if target_database_name is None:
            raise ValueError("Invalid value for `target_database_name`, must not be `None`")

        self._target_database_name = target_database_name

    @property
    def target_file_paths(self):
        """Gets the target_file_paths of this MssqlLogShippingCreateConfig.

        Array of database file storage paths. Each path is the target storage location for a database file. Values in this array override the values in targetDataFilePath and targetLogFilePath for the specified database files.

        :return: The target_file_paths of this MssqlLogShippingCreateConfig.
        :rtype: List[MssqlDbFileExportPath]
        """
        return self._target_file_paths

    @target_file_paths.setter
    def target_file_paths(self, target_file_paths):
        """Sets the target_file_paths of this MssqlLogShippingCreateConfig.

        Array of database file storage paths. Each path is the target storage location for a database file. Values in this array override the values in targetDataFilePath and targetLogFilePath for the specified database files.

        :param target_file_paths: The target_file_paths of this MssqlLogShippingCreateConfig.
        :type target_file_paths: List[MssqlDbFileExportPath]
        """

        self._target_file_paths = target_file_paths

    @property
    def target_instance_id(self):
        """Gets the target_instance_id of this MssqlLogShippingCreateConfig.

        The ID of the SQL Server instance that hosts the secondary database.

        :return: The target_instance_id of this MssqlLogShippingCreateConfig.
        :rtype: str
        """
        return self._target_instance_id

    @target_instance_id.setter
    def target_instance_id(self, target_instance_id):
        """Sets the target_instance_id of this MssqlLogShippingCreateConfig.

        The ID of the SQL Server instance that hosts the secondary database.

        :param target_instance_id: The target_instance_id of this MssqlLogShippingCreateConfig.
        :type target_instance_id: str
        """
        if target_instance_id is None:
            raise ValueError("Invalid value for `target_instance_id`, must not be `None`")

        self._target_instance_id = target_instance_id

    @property
    def target_log_file_path(self):
        """Gets the target_log_file_path of this MssqlLogShippingCreateConfig.

        The path to the location of the log files.

        :return: The target_log_file_path of this MssqlLogShippingCreateConfig.
        :rtype: str
        """
        return self._target_log_file_path

    @target_log_file_path.setter
    def target_log_file_path(self, target_log_file_path):
        """Sets the target_log_file_path of this MssqlLogShippingCreateConfig.

        The path to the location of the log files.

        :param target_log_file_path: The target_log_file_path of this MssqlLogShippingCreateConfig.
        :type target_log_file_path: str
        """

        self._target_log_file_path = target_log_file_path
