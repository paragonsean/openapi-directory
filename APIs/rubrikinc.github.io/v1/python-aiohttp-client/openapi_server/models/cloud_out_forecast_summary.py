# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.forecast_assumptions import ForecastAssumptions
from openapi_server.models.per_location_cloud_out_forecast_summary import PerLocationCloudOutForecastSummary
from openapi_server import util


class CloudOutForecastSummary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, assumptions: ForecastAssumptions=None, location_forecast: PerLocationCloudOutForecastSummary=None):
        """CloudOutForecastSummary - a model defined in OpenAPI

        :param assumptions: The assumptions of this CloudOutForecastSummary.
        :param location_forecast: The location_forecast of this CloudOutForecastSummary.
        """
        self.openapi_types = {
            'assumptions': ForecastAssumptions,
            'location_forecast': PerLocationCloudOutForecastSummary
        }

        self.attribute_map = {
            'assumptions': 'assumptions',
            'location_forecast': 'locationForecast'
        }

        self._assumptions = assumptions
        self._location_forecast = location_forecast

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CloudOutForecastSummary':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CloudOutForecastSummary of this CloudOutForecastSummary.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def assumptions(self):
        """Gets the assumptions of this CloudOutForecastSummary.


        :return: The assumptions of this CloudOutForecastSummary.
        :rtype: ForecastAssumptions
        """
        return self._assumptions

    @assumptions.setter
    def assumptions(self, assumptions):
        """Sets the assumptions of this CloudOutForecastSummary.


        :param assumptions: The assumptions of this CloudOutForecastSummary.
        :type assumptions: ForecastAssumptions
        """

        self._assumptions = assumptions

    @property
    def location_forecast(self):
        """Gets the location_forecast of this CloudOutForecastSummary.


        :return: The location_forecast of this CloudOutForecastSummary.
        :rtype: PerLocationCloudOutForecastSummary
        """
        return self._location_forecast

    @location_forecast.setter
    def location_forecast(self, location_forecast):
        """Sets the location_forecast of this CloudOutForecastSummary.


        :param location_forecast: The location_forecast of this CloudOutForecastSummary.
        :type location_forecast: PerLocationCloudOutForecastSummary
        """

        self._location_forecast = location_forecast
