# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.mssql_database_recovery_model import MssqlDatabaseRecoveryModel
from openapi_server.models.mssql_recovery_point import MssqlRecoveryPoint
from openapi_server import util


class MountMssqlDbConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, mounted_database_name: str=None, recovery_model: MssqlDatabaseRecoveryModel=None, recovery_point: MssqlRecoveryPoint=None, target_instance_id: str=None):
        """MountMssqlDbConfig - a model defined in OpenAPI

        :param mounted_database_name: The mounted_database_name of this MountMssqlDbConfig.
        :param recovery_model: The recovery_model of this MountMssqlDbConfig.
        :param recovery_point: The recovery_point of this MountMssqlDbConfig.
        :param target_instance_id: The target_instance_id of this MountMssqlDbConfig.
        """
        self.openapi_types = {
            'mounted_database_name': str,
            'recovery_model': MssqlDatabaseRecoveryModel,
            'recovery_point': MssqlRecoveryPoint,
            'target_instance_id': str
        }

        self.attribute_map = {
            'mounted_database_name': 'mountedDatabaseName',
            'recovery_model': 'recoveryModel',
            'recovery_point': 'recoveryPoint',
            'target_instance_id': 'targetInstanceId'
        }

        self._mounted_database_name = mounted_database_name
        self._recovery_model = recovery_model
        self._recovery_point = recovery_point
        self._target_instance_id = target_instance_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MountMssqlDbConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MountMssqlDbConfig of this MountMssqlDbConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def mounted_database_name(self):
        """Gets the mounted_database_name of this MountMssqlDbConfig.

        Name to assign to the mounted database.

        :return: The mounted_database_name of this MountMssqlDbConfig.
        :rtype: str
        """
        return self._mounted_database_name

    @mounted_database_name.setter
    def mounted_database_name(self, mounted_database_name):
        """Sets the mounted_database_name of this MountMssqlDbConfig.

        Name to assign to the mounted database.

        :param mounted_database_name: The mounted_database_name of this MountMssqlDbConfig.
        :type mounted_database_name: str
        """
        if mounted_database_name is None:
            raise ValueError("Invalid value for `mounted_database_name`, must not be `None`")

        self._mounted_database_name = mounted_database_name

    @property
    def recovery_model(self):
        """Gets the recovery_model of this MountMssqlDbConfig.


        :return: The recovery_model of this MountMssqlDbConfig.
        :rtype: MssqlDatabaseRecoveryModel
        """
        return self._recovery_model

    @recovery_model.setter
    def recovery_model(self, recovery_model):
        """Sets the recovery_model of this MountMssqlDbConfig.


        :param recovery_model: The recovery_model of this MountMssqlDbConfig.
        :type recovery_model: MssqlDatabaseRecoveryModel
        """

        self._recovery_model = recovery_model

    @property
    def recovery_point(self):
        """Gets the recovery_point of this MountMssqlDbConfig.


        :return: The recovery_point of this MountMssqlDbConfig.
        :rtype: MssqlRecoveryPoint
        """
        return self._recovery_point

    @recovery_point.setter
    def recovery_point(self, recovery_point):
        """Sets the recovery_point of this MountMssqlDbConfig.


        :param recovery_point: The recovery_point of this MountMssqlDbConfig.
        :type recovery_point: MssqlRecoveryPoint
        """
        if recovery_point is None:
            raise ValueError("Invalid value for `recovery_point`, must not be `None`")

        self._recovery_point = recovery_point

    @property
    def target_instance_id(self):
        """Gets the target_instance_id of this MountMssqlDbConfig.

        ID of the SQL Server instance to mount the database on. For availability source databases, this must be specified. When unspecified for non-availability source databases, the source SQL Server instance is used.

        :return: The target_instance_id of this MountMssqlDbConfig.
        :rtype: str
        """
        return self._target_instance_id

    @target_instance_id.setter
    def target_instance_id(self, target_instance_id):
        """Sets the target_instance_id of this MountMssqlDbConfig.

        ID of the SQL Server instance to mount the database on. For availability source databases, this must be specified. When unspecified for non-availability source databases, the source SQL Server instance is used.

        :param target_instance_id: The target_instance_id of this MountMssqlDbConfig.
        :type target_instance_id: str
        """

        self._target_instance_id = target_instance_id
