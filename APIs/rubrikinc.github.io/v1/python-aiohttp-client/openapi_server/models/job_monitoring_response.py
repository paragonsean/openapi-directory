# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.job_monitoring_info import JobMonitoringInfo
from openapi_server.models.job_monitoring_status import JobMonitoringStatus
from openapi_server.models.job_monitoring_task_type import JobMonitoringTaskType
from openapi_server.models.reportable_object_type import ReportableObjectType
from openapi_server import util


class JobMonitoringResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, after_id: str=None, effective_sla_domain_id: str=None, has_more: bool=None, is_first_full: bool=None, job_event_status: List[JobMonitoringStatus]=None, job_monitoring_info_list: List[JobMonitoringInfo]=None, job_type: JobMonitoringTaskType=None, last_update_time: datetime=None, node_name: str=None, object_name: str=None, object_type: ReportableObjectType=None, should_include_log_related_job: bool=None):
        """JobMonitoringResponse - a model defined in OpenAPI

        :param after_id: The after_id of this JobMonitoringResponse.
        :param effective_sla_domain_id: The effective_sla_domain_id of this JobMonitoringResponse.
        :param has_more: The has_more of this JobMonitoringResponse.
        :param is_first_full: The is_first_full of this JobMonitoringResponse.
        :param job_event_status: The job_event_status of this JobMonitoringResponse.
        :param job_monitoring_info_list: The job_monitoring_info_list of this JobMonitoringResponse.
        :param job_type: The job_type of this JobMonitoringResponse.
        :param last_update_time: The last_update_time of this JobMonitoringResponse.
        :param node_name: The node_name of this JobMonitoringResponse.
        :param object_name: The object_name of this JobMonitoringResponse.
        :param object_type: The object_type of this JobMonitoringResponse.
        :param should_include_log_related_job: The should_include_log_related_job of this JobMonitoringResponse.
        """
        self.openapi_types = {
            'after_id': str,
            'effective_sla_domain_id': str,
            'has_more': bool,
            'is_first_full': bool,
            'job_event_status': List[JobMonitoringStatus],
            'job_monitoring_info_list': List[JobMonitoringInfo],
            'job_type': JobMonitoringTaskType,
            'last_update_time': datetime,
            'node_name': str,
            'object_name': str,
            'object_type': ReportableObjectType,
            'should_include_log_related_job': bool
        }

        self.attribute_map = {
            'after_id': 'afterId',
            'effective_sla_domain_id': 'effectiveSlaDomainId',
            'has_more': 'hasMore',
            'is_first_full': 'isFirstFull',
            'job_event_status': 'jobEventStatus',
            'job_monitoring_info_list': 'jobMonitoringInfoList',
            'job_type': 'jobType',
            'last_update_time': 'lastUpdateTime',
            'node_name': 'nodeName',
            'object_name': 'objectName',
            'object_type': 'objectType',
            'should_include_log_related_job': 'shouldIncludeLogRelatedJob'
        }

        self._after_id = after_id
        self._effective_sla_domain_id = effective_sla_domain_id
        self._has_more = has_more
        self._is_first_full = is_first_full
        self._job_event_status = job_event_status
        self._job_monitoring_info_list = job_monitoring_info_list
        self._job_type = job_type
        self._last_update_time = last_update_time
        self._node_name = node_name
        self._object_name = object_name
        self._object_type = object_type
        self._should_include_log_related_job = should_include_log_related_job

    @classmethod
    def from_dict(cls, dikt: dict) -> 'JobMonitoringResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The JobMonitoringResponse of this JobMonitoringResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def after_id(self):
        """Gets the after_id of this JobMonitoringResponse.

        Cursor of the last table row sent in the response. Used for setting the cursor when getting the next page of the table.

        :return: The after_id of this JobMonitoringResponse.
        :rtype: str
        """
        return self._after_id

    @after_id.setter
    def after_id(self, after_id):
        """Sets the after_id of this JobMonitoringResponse.

        Cursor of the last table row sent in the response. Used for setting the cursor when getting the next page of the table.

        :param after_id: The after_id of this JobMonitoringResponse.
        :type after_id: str
        """

        self._after_id = after_id

    @property
    def effective_sla_domain_id(self):
        """Gets the effective_sla_domain_id of this JobMonitoringResponse.

        The requested SLA domain id (if applicable).

        :return: The effective_sla_domain_id of this JobMonitoringResponse.
        :rtype: str
        """
        return self._effective_sla_domain_id

    @effective_sla_domain_id.setter
    def effective_sla_domain_id(self, effective_sla_domain_id):
        """Sets the effective_sla_domain_id of this JobMonitoringResponse.

        The requested SLA domain id (if applicable).

        :param effective_sla_domain_id: The effective_sla_domain_id of this JobMonitoringResponse.
        :type effective_sla_domain_id: str
        """

        self._effective_sla_domain_id = effective_sla_domain_id

    @property
    def has_more(self):
        """Gets the has_more of this JobMonitoringResponse.

        A Boolean value that specifies whether or not the list has more elements. This value is 'true' when the list has more elements. This value is 'false' when the list has no more elements.

        :return: The has_more of this JobMonitoringResponse.
        :rtype: bool
        """
        return self._has_more

    @has_more.setter
    def has_more(self, has_more):
        """Sets the has_more of this JobMonitoringResponse.

        A Boolean value that specifies whether or not the list has more elements. This value is 'true' when the list has more elements. This value is 'false' when the list has no more elements.

        :param has_more: The has_more of this JobMonitoringResponse.
        :type has_more: bool
        """
        if has_more is None:
            raise ValueError("Invalid value for `has_more`, must not be `None`")

        self._has_more = has_more

    @property
    def is_first_full(self):
        """Gets the is_first_full of this JobMonitoringResponse.

        A Boolean to specify if the jobs are first full backups or not.

        :return: The is_first_full of this JobMonitoringResponse.
        :rtype: bool
        """
        return self._is_first_full

    @is_first_full.setter
    def is_first_full(self, is_first_full):
        """Sets the is_first_full of this JobMonitoringResponse.

        A Boolean to specify if the jobs are first full backups or not.

        :param is_first_full: The is_first_full of this JobMonitoringResponse.
        :type is_first_full: bool
        """

        self._is_first_full = is_first_full

    @property
    def job_event_status(self):
        """Gets the job_event_status of this JobMonitoringResponse.

        The requested event status of the jobs (if applicable).

        :return: The job_event_status of this JobMonitoringResponse.
        :rtype: List[JobMonitoringStatus]
        """
        return self._job_event_status

    @job_event_status.setter
    def job_event_status(self, job_event_status):
        """Sets the job_event_status of this JobMonitoringResponse.

        The requested event status of the jobs (if applicable).

        :param job_event_status: The job_event_status of this JobMonitoringResponse.
        :type job_event_status: List[JobMonitoringStatus]
        """

        self._job_event_status = job_event_status

    @property
    def job_monitoring_info_list(self):
        """Gets the job_monitoring_info_list of this JobMonitoringResponse.

        A list of jobs.

        :return: The job_monitoring_info_list of this JobMonitoringResponse.
        :rtype: List[JobMonitoringInfo]
        """
        return self._job_monitoring_info_list

    @job_monitoring_info_list.setter
    def job_monitoring_info_list(self, job_monitoring_info_list):
        """Sets the job_monitoring_info_list of this JobMonitoringResponse.

        A list of jobs.

        :param job_monitoring_info_list: The job_monitoring_info_list of this JobMonitoringResponse.
        :type job_monitoring_info_list: List[JobMonitoringInfo]
        """
        if job_monitoring_info_list is None:
            raise ValueError("Invalid value for `job_monitoring_info_list`, must not be `None`")

        self._job_monitoring_info_list = job_monitoring_info_list

    @property
    def job_type(self):
        """Gets the job_type of this JobMonitoringResponse.


        :return: The job_type of this JobMonitoringResponse.
        :rtype: JobMonitoringTaskType
        """
        return self._job_type

    @job_type.setter
    def job_type(self, job_type):
        """Sets the job_type of this JobMonitoringResponse.


        :param job_type: The job_type of this JobMonitoringResponse.
        :type job_type: JobMonitoringTaskType
        """

        self._job_type = job_type

    @property
    def last_update_time(self):
        """Gets the last_update_time of this JobMonitoringResponse.

        The earliest possible time at which the latest update to all rows has been made.

        :return: The last_update_time of this JobMonitoringResponse.
        :rtype: datetime
        """
        return self._last_update_time

    @last_update_time.setter
    def last_update_time(self, last_update_time):
        """Sets the last_update_time of this JobMonitoringResponse.

        The earliest possible time at which the latest update to all rows has been made.

        :param last_update_time: The last_update_time of this JobMonitoringResponse.
        :type last_update_time: datetime
        """

        self._last_update_time = last_update_time

    @property
    def node_name(self):
        """Gets the node_name of this JobMonitoringResponse.

        The requested node (if applicable).

        :return: The node_name of this JobMonitoringResponse.
        :rtype: str
        """
        return self._node_name

    @node_name.setter
    def node_name(self, node_name):
        """Sets the node_name of this JobMonitoringResponse.

        The requested node (if applicable).

        :param node_name: The node_name of this JobMonitoringResponse.
        :type node_name: str
        """

        self._node_name = node_name

    @property
    def object_name(self):
        """Gets the object_name of this JobMonitoringResponse.

        The requested object name (if applicable).

        :return: The object_name of this JobMonitoringResponse.
        :rtype: str
        """
        return self._object_name

    @object_name.setter
    def object_name(self, object_name):
        """Sets the object_name of this JobMonitoringResponse.

        The requested object name (if applicable).

        :param object_name: The object_name of this JobMonitoringResponse.
        :type object_name: str
        """

        self._object_name = object_name

    @property
    def object_type(self):
        """Gets the object_type of this JobMonitoringResponse.


        :return: The object_type of this JobMonitoringResponse.
        :rtype: ReportableObjectType
        """
        return self._object_type

    @object_type.setter
    def object_type(self, object_type):
        """Sets the object_type of this JobMonitoringResponse.


        :param object_type: The object_type of this JobMonitoringResponse.
        :type object_type: ReportableObjectType
        """

        self._object_type = object_type

    @property
    def should_include_log_related_job(self):
        """Gets the should_include_log_related_job of this JobMonitoringResponse.

        A Boolean to specify whether or not to include log-related jobs.

        :return: The should_include_log_related_job of this JobMonitoringResponse.
        :rtype: bool
        """
        return self._should_include_log_related_job

    @should_include_log_related_job.setter
    def should_include_log_related_job(self, should_include_log_related_job):
        """Sets the should_include_log_related_job of this JobMonitoringResponse.

        A Boolean to specify whether or not to include log-related jobs.

        :param should_include_log_related_job: The should_include_log_related_job of this JobMonitoringResponse.
        :type should_include_log_related_job: bool
        """
        if should_include_log_related_job is None:
            raise ValueError("Invalid value for `should_include_log_related_job`, must not be `None`")

        self._should_include_log_related_job = should_include_log_related_job
