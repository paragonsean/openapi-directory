# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.pattern_status import PatternStatus
from openapi_server import util


class ExclusionPatternDetail(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, is_active: bool=None, is_mutable: bool=None, pattern: str=None, pattern_status: PatternStatus=None, primary_cluster_id: str=None, source_id: str=None):
        """ExclusionPatternDetail - a model defined in OpenAPI

        :param id: The id of this ExclusionPatternDetail.
        :param is_active: The is_active of this ExclusionPatternDetail.
        :param is_mutable: The is_mutable of this ExclusionPatternDetail.
        :param pattern: The pattern of this ExclusionPatternDetail.
        :param pattern_status: The pattern_status of this ExclusionPatternDetail.
        :param primary_cluster_id: The primary_cluster_id of this ExclusionPatternDetail.
        :param source_id: The source_id of this ExclusionPatternDetail.
        """
        self.openapi_types = {
            'id': str,
            'is_active': bool,
            'is_mutable': bool,
            'pattern': str,
            'pattern_status': PatternStatus,
            'primary_cluster_id': str,
            'source_id': str
        }

        self.attribute_map = {
            'id': 'id',
            'is_active': 'isActive',
            'is_mutable': 'isMutable',
            'pattern': 'pattern',
            'pattern_status': 'patternStatus',
            'primary_cluster_id': 'primaryClusterId',
            'source_id': 'sourceId'
        }

        self._id = id
        self._is_active = is_active
        self._is_mutable = is_mutable
        self._pattern = pattern
        self._pattern_status = pattern_status
        self._primary_cluster_id = primary_cluster_id
        self._source_id = source_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ExclusionPatternDetail':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ExclusionPatternDetail of this ExclusionPatternDetail.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this ExclusionPatternDetail.

        ID of the exclusion pattern.

        :return: The id of this ExclusionPatternDetail.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ExclusionPatternDetail.

        ID of the exclusion pattern.

        :param id: The id of this ExclusionPatternDetail.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def is_active(self):
        """Gets the is_active of this ExclusionPatternDetail.

        Indicates if the exclusion pattern applies.

        :return: The is_active of this ExclusionPatternDetail.
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """Sets the is_active of this ExclusionPatternDetail.

        Indicates if the exclusion pattern applies.

        :param is_active: The is_active of this ExclusionPatternDetail.
        :type is_active: bool
        """
        if is_active is None:
            raise ValueError("Invalid value for `is_active`, must not be `None`")

        self._is_active = is_active

    @property
    def is_mutable(self):
        """Gets the is_mutable of this ExclusionPatternDetail.

        Specifies whether the pattern is mutable. When this value is false, the pattern can not be altered.

        :return: The is_mutable of this ExclusionPatternDetail.
        :rtype: bool
        """
        return self._is_mutable

    @is_mutable.setter
    def is_mutable(self, is_mutable):
        """Sets the is_mutable of this ExclusionPatternDetail.

        Specifies whether the pattern is mutable. When this value is false, the pattern can not be altered.

        :param is_mutable: The is_mutable of this ExclusionPatternDetail.
        :type is_mutable: bool
        """
        if is_mutable is None:
            raise ValueError("Invalid value for `is_mutable`, must not be `None`")

        self._is_mutable = is_mutable

    @property
    def pattern(self):
        """Gets the pattern of this ExclusionPatternDetail.

        The pattern is used for existing and future snapshots. The pattern can be a regular expression or filename. Files or directories that match the pattern are not shown in the results of searches and are excluded from restore and download operations.

        :return: The pattern of this ExclusionPatternDetail.
        :rtype: str
        """
        return self._pattern

    @pattern.setter
    def pattern(self, pattern):
        """Sets the pattern of this ExclusionPatternDetail.

        The pattern is used for existing and future snapshots. The pattern can be a regular expression or filename. Files or directories that match the pattern are not shown in the results of searches and are excluded from restore and download operations.

        :param pattern: The pattern of this ExclusionPatternDetail.
        :type pattern: str
        """
        if pattern is None:
            raise ValueError("Invalid value for `pattern`, must not be `None`")

        self._pattern = pattern

    @property
    def pattern_status(self):
        """Gets the pattern_status of this ExclusionPatternDetail.


        :return: The pattern_status of this ExclusionPatternDetail.
        :rtype: PatternStatus
        """
        return self._pattern_status

    @pattern_status.setter
    def pattern_status(self, pattern_status):
        """Sets the pattern_status of this ExclusionPatternDetail.


        :param pattern_status: The pattern_status of this ExclusionPatternDetail.
        :type pattern_status: PatternStatus
        """
        if pattern_status is None:
            raise ValueError("Invalid value for `pattern_status`, must not be `None`")

        self._pattern_status = pattern_status

    @property
    def primary_cluster_id(self):
        """Gets the primary_cluster_id of this ExclusionPatternDetail.


        :return: The primary_cluster_id of this ExclusionPatternDetail.
        :rtype: str
        """
        return self._primary_cluster_id

    @primary_cluster_id.setter
    def primary_cluster_id(self, primary_cluster_id):
        """Sets the primary_cluster_id of this ExclusionPatternDetail.


        :param primary_cluster_id: The primary_cluster_id of this ExclusionPatternDetail.
        :type primary_cluster_id: str
        """
        if primary_cluster_id is None:
            raise ValueError("Invalid value for `primary_cluster_id`, must not be `None`")

        self._primary_cluster_id = primary_cluster_id

    @property
    def source_id(self):
        """Gets the source_id of this ExclusionPatternDetail.

        ID of the protectable object to which the pattern applies.

        :return: The source_id of this ExclusionPatternDetail.
        :rtype: str
        """
        return self._source_id

    @source_id.setter
    def source_id(self, source_id):
        """Sets the source_id of this ExclusionPatternDetail.

        ID of the protectable object to which the pattern applies.

        :param source_id: The source_id of this ExclusionPatternDetail.
        :type source_id: str
        """
        if source_id is None:
            raise ValueError("Invalid value for `source_id`, must not be `None`")

        self._source_id = source_id
