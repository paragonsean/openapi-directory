# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class IdProviderAuthDomainSummary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, entity_id: str=None, id: str=None, name: str=None, organization_id: str=None, sign_cert: str=None, sign_cert_expiry_date: str=None, skewness_in_sec: int=None, sso_url: str=None):
        """IdProviderAuthDomainSummary - a model defined in OpenAPI

        :param entity_id: The entity_id of this IdProviderAuthDomainSummary.
        :param id: The id of this IdProviderAuthDomainSummary.
        :param name: The name of this IdProviderAuthDomainSummary.
        :param organization_id: The organization_id of this IdProviderAuthDomainSummary.
        :param sign_cert: The sign_cert of this IdProviderAuthDomainSummary.
        :param sign_cert_expiry_date: The sign_cert_expiry_date of this IdProviderAuthDomainSummary.
        :param skewness_in_sec: The skewness_in_sec of this IdProviderAuthDomainSummary.
        :param sso_url: The sso_url of this IdProviderAuthDomainSummary.
        """
        self.openapi_types = {
            'entity_id': str,
            'id': str,
            'name': str,
            'organization_id': str,
            'sign_cert': str,
            'sign_cert_expiry_date': str,
            'skewness_in_sec': int,
            'sso_url': str
        }

        self.attribute_map = {
            'entity_id': 'entityId',
            'id': 'id',
            'name': 'name',
            'organization_id': 'organizationId',
            'sign_cert': 'signCert',
            'sign_cert_expiry_date': 'signCertExpiryDate',
            'skewness_in_sec': 'skewnessInSec',
            'sso_url': 'ssoUrl'
        }

        self._entity_id = entity_id
        self._id = id
        self._name = name
        self._organization_id = organization_id
        self._sign_cert = sign_cert
        self._sign_cert_expiry_date = sign_cert_expiry_date
        self._skewness_in_sec = skewness_in_sec
        self._sso_url = sso_url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IdProviderAuthDomainSummary':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The IdProviderAuthDomainSummary of this IdProviderAuthDomainSummary.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def entity_id(self):
        """Gets the entity_id of this IdProviderAuthDomainSummary.

        Entity ID of the Id Provider (IdP).

        :return: The entity_id of this IdProviderAuthDomainSummary.
        :rtype: str
        """
        return self._entity_id

    @entity_id.setter
    def entity_id(self, entity_id):
        """Sets the entity_id of this IdProviderAuthDomainSummary.

        Entity ID of the Id Provider (IdP).

        :param entity_id: The entity_id of this IdProviderAuthDomainSummary.
        :type entity_id: str
        """
        if entity_id is None:
            raise ValueError("Invalid value for `entity_id`, must not be `None`")

        self._entity_id = entity_id

    @property
    def id(self):
        """Gets the id of this IdProviderAuthDomainSummary.

        ID of this authentication domain.

        :return: The id of this IdProviderAuthDomainSummary.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this IdProviderAuthDomainSummary.

        ID of this authentication domain.

        :param id: The id of this IdProviderAuthDomainSummary.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def name(self):
        """Gets the name of this IdProviderAuthDomainSummary.

        Domain name.

        :return: The name of this IdProviderAuthDomainSummary.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this IdProviderAuthDomainSummary.

        Domain name.

        :param name: The name of this IdProviderAuthDomainSummary.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def organization_id(self):
        """Gets the organization_id of this IdProviderAuthDomainSummary.

        ID of the organization that added the authentication domain.

        :return: The organization_id of this IdProviderAuthDomainSummary.
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """Sets the organization_id of this IdProviderAuthDomainSummary.

        ID of the organization that added the authentication domain.

        :param organization_id: The organization_id of this IdProviderAuthDomainSummary.
        :type organization_id: str
        """

        self._organization_id = organization_id

    @property
    def sign_cert(self):
        """Gets the sign_cert of this IdProviderAuthDomainSummary.

        The Identity Provider (IdP) X509 certificate, stored using the PEM format, used to sign the SAML assertion.

        :return: The sign_cert of this IdProviderAuthDomainSummary.
        :rtype: str
        """
        return self._sign_cert

    @sign_cert.setter
    def sign_cert(self, sign_cert):
        """Sets the sign_cert of this IdProviderAuthDomainSummary.

        The Identity Provider (IdP) X509 certificate, stored using the PEM format, used to sign the SAML assertion.

        :param sign_cert: The sign_cert of this IdProviderAuthDomainSummary.
        :type sign_cert: str
        """
        if sign_cert is None:
            raise ValueError("Invalid value for `sign_cert`, must not be `None`")

        self._sign_cert = sign_cert

    @property
    def sign_cert_expiry_date(self):
        """Gets the sign_cert_expiry_date of this IdProviderAuthDomainSummary.

        The expiry date of the Identity Provider (IdP) X509 certificate. The date is a string with the ISO-8601 format like 2017-01-23T20:12:45.000Z with milliseconds precision.

        :return: The sign_cert_expiry_date of this IdProviderAuthDomainSummary.
        :rtype: str
        """
        return self._sign_cert_expiry_date

    @sign_cert_expiry_date.setter
    def sign_cert_expiry_date(self, sign_cert_expiry_date):
        """Sets the sign_cert_expiry_date of this IdProviderAuthDomainSummary.

        The expiry date of the Identity Provider (IdP) X509 certificate. The date is a string with the ISO-8601 format like 2017-01-23T20:12:45.000Z with milliseconds precision.

        :param sign_cert_expiry_date: The sign_cert_expiry_date of this IdProviderAuthDomainSummary.
        :type sign_cert_expiry_date: str
        """
        if sign_cert_expiry_date is None:
            raise ValueError("Invalid value for `sign_cert_expiry_date`, must not be `None`")

        self._sign_cert_expiry_date = sign_cert_expiry_date

    @property
    def skewness_in_sec(self):
        """Gets the skewness_in_sec of this IdProviderAuthDomainSummary.

        The clock skewness tolerance, in seconds, between the Identity Provider (IdP) and the Rubrik cluster.

        :return: The skewness_in_sec of this IdProviderAuthDomainSummary.
        :rtype: int
        """
        return self._skewness_in_sec

    @skewness_in_sec.setter
    def skewness_in_sec(self, skewness_in_sec):
        """Sets the skewness_in_sec of this IdProviderAuthDomainSummary.

        The clock skewness tolerance, in seconds, between the Identity Provider (IdP) and the Rubrik cluster.

        :param skewness_in_sec: The skewness_in_sec of this IdProviderAuthDomainSummary.
        :type skewness_in_sec: int
        """
        if skewness_in_sec is None:
            raise ValueError("Invalid value for `skewness_in_sec`, must not be `None`")

        self._skewness_in_sec = skewness_in_sec

    @property
    def sso_url(self):
        """Gets the sso_url of this IdProviderAuthDomainSummary.

        The Identity Provider (IdP) endpoint that Rubrik sends authentication request to in order to initiate SSO login.

        :return: The sso_url of this IdProviderAuthDomainSummary.
        :rtype: str
        """
        return self._sso_url

    @sso_url.setter
    def sso_url(self, sso_url):
        """Sets the sso_url of this IdProviderAuthDomainSummary.

        The Identity Provider (IdP) endpoint that Rubrik sends authentication request to in order to initiate SSO login.

        :param sso_url: The sso_url of this IdProviderAuthDomainSummary.
        :type sso_url: str
        """
        if sso_url is None:
            raise ValueError("Invalid value for `sso_url`, must not be `None`")

        self._sso_url = sso_url
