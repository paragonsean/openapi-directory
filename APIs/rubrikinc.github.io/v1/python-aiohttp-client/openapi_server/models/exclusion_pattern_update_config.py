# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ExclusionPatternUpdateConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, is_active: bool=None, is_mutable: bool=None, pattern: str=None):
        """ExclusionPatternUpdateConfig - a model defined in OpenAPI

        :param is_active: The is_active of this ExclusionPatternUpdateConfig.
        :param is_mutable: The is_mutable of this ExclusionPatternUpdateConfig.
        :param pattern: The pattern of this ExclusionPatternUpdateConfig.
        """
        self.openapi_types = {
            'is_active': bool,
            'is_mutable': bool,
            'pattern': str
        }

        self.attribute_map = {
            'is_active': 'isActive',
            'is_mutable': 'isMutable',
            'pattern': 'pattern'
        }

        self._is_active = is_active
        self._is_mutable = is_mutable
        self._pattern = pattern

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ExclusionPatternUpdateConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ExclusionPatternUpdateConfig of this ExclusionPatternUpdateConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def is_active(self):
        """Gets the is_active of this ExclusionPatternUpdateConfig.

        Specifies whether or not the exclusion pattern applies. Only applicable to mutable patterns.

        :return: The is_active of this ExclusionPatternUpdateConfig.
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """Sets the is_active of this ExclusionPatternUpdateConfig.

        Specifies whether or not the exclusion pattern applies. Only applicable to mutable patterns.

        :param is_active: The is_active of this ExclusionPatternUpdateConfig.
        :type is_active: bool
        """

        self._is_active = is_active

    @property
    def is_mutable(self):
        """Gets the is_mutable of this ExclusionPatternUpdateConfig.

        Specifies whether the pattern is mutable. When this value is false, the pattern can not be altered.

        :return: The is_mutable of this ExclusionPatternUpdateConfig.
        :rtype: bool
        """
        return self._is_mutable

    @is_mutable.setter
    def is_mutable(self, is_mutable):
        """Sets the is_mutable of this ExclusionPatternUpdateConfig.

        Specifies whether the pattern is mutable. When this value is false, the pattern can not be altered.

        :param is_mutable: The is_mutable of this ExclusionPatternUpdateConfig.
        :type is_mutable: bool
        """

        self._is_mutable = is_mutable

    @property
    def pattern(self):
        """Gets the pattern of this ExclusionPatternUpdateConfig.

        The pattern is used for existing and future snapshots. The pattern can be a regular expression or filename. Files or directories that match the pattern are not shown in the results of searches and are excluded from restore and download operations.

        :return: The pattern of this ExclusionPatternUpdateConfig.
        :rtype: str
        """
        return self._pattern

    @pattern.setter
    def pattern(self, pattern):
        """Sets the pattern of this ExclusionPatternUpdateConfig.

        The pattern is used for existing and future snapshots. The pattern can be a regular expression or filename. Files or directories that match the pattern are not shown in the results of searches and are excluded from restore and download operations.

        :param pattern: The pattern of this ExclusionPatternUpdateConfig.
        :type pattern: str
        """

        self._pattern = pattern
