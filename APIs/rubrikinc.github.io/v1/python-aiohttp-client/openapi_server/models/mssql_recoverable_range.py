# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MssqlRecoverableRange(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, begin_time: datetime=None, end_time: datetime=None, is_mount_allowed: bool=None, status: str=None):
        """MssqlRecoverableRange - a model defined in OpenAPI

        :param begin_time: The begin_time of this MssqlRecoverableRange.
        :param end_time: The end_time of this MssqlRecoverableRange.
        :param is_mount_allowed: The is_mount_allowed of this MssqlRecoverableRange.
        :param status: The status of this MssqlRecoverableRange.
        """
        self.openapi_types = {
            'begin_time': datetime,
            'end_time': datetime,
            'is_mount_allowed': bool,
            'status': str
        }

        self.attribute_map = {
            'begin_time': 'beginTime',
            'end_time': 'endTime',
            'is_mount_allowed': 'isMountAllowed',
            'status': 'status'
        }

        self._begin_time = begin_time
        self._end_time = end_time
        self._is_mount_allowed = is_mount_allowed
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MssqlRecoverableRange':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MssqlRecoverableRange of this MssqlRecoverableRange.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def begin_time(self):
        """Gets the begin_time of this MssqlRecoverableRange.


        :return: The begin_time of this MssqlRecoverableRange.
        :rtype: datetime
        """
        return self._begin_time

    @begin_time.setter
    def begin_time(self, begin_time):
        """Sets the begin_time of this MssqlRecoverableRange.


        :param begin_time: The begin_time of this MssqlRecoverableRange.
        :type begin_time: datetime
        """
        if begin_time is None:
            raise ValueError("Invalid value for `begin_time`, must not be `None`")

        self._begin_time = begin_time

    @property
    def end_time(self):
        """Gets the end_time of this MssqlRecoverableRange.


        :return: The end_time of this MssqlRecoverableRange.
        :rtype: datetime
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this MssqlRecoverableRange.


        :param end_time: The end_time of this MssqlRecoverableRange.
        :type end_time: datetime
        """
        if end_time is None:
            raise ValueError("Invalid value for `end_time`, must not be `None`")

        self._end_time = end_time

    @property
    def is_mount_allowed(self):
        """Gets the is_mount_allowed of this MssqlRecoverableRange.


        :return: The is_mount_allowed of this MssqlRecoverableRange.
        :rtype: bool
        """
        return self._is_mount_allowed

    @is_mount_allowed.setter
    def is_mount_allowed(self, is_mount_allowed):
        """Sets the is_mount_allowed of this MssqlRecoverableRange.


        :param is_mount_allowed: The is_mount_allowed of this MssqlRecoverableRange.
        :type is_mount_allowed: bool
        """
        if is_mount_allowed is None:
            raise ValueError("Invalid value for `is_mount_allowed`, must not be `None`")

        self._is_mount_allowed = is_mount_allowed

    @property
    def status(self):
        """Gets the status of this MssqlRecoverableRange.


        :return: The status of this MssqlRecoverableRange.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this MssqlRecoverableRange.


        :param status: The status of this MssqlRecoverableRange.
        :type status: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status
