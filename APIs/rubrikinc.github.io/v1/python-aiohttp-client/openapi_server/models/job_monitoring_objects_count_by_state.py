# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class JobMonitoringObjectsCountByState(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, active: int=None, canceled: int=None, failure: int=None, scheduled: int=None, success: int=None, total: int=None):
        """JobMonitoringObjectsCountByState - a model defined in OpenAPI

        :param active: The active of this JobMonitoringObjectsCountByState.
        :param canceled: The canceled of this JobMonitoringObjectsCountByState.
        :param failure: The failure of this JobMonitoringObjectsCountByState.
        :param scheduled: The scheduled of this JobMonitoringObjectsCountByState.
        :param success: The success of this JobMonitoringObjectsCountByState.
        :param total: The total of this JobMonitoringObjectsCountByState.
        """
        self.openapi_types = {
            'active': int,
            'canceled': int,
            'failure': int,
            'scheduled': int,
            'success': int,
            'total': int
        }

        self.attribute_map = {
            'active': 'active',
            'canceled': 'canceled',
            'failure': 'failure',
            'scheduled': 'scheduled',
            'success': 'success',
            'total': 'total'
        }

        self._active = active
        self._canceled = canceled
        self._failure = failure
        self._scheduled = scheduled
        self._success = success
        self._total = total

    @classmethod
    def from_dict(cls, dikt: dict) -> 'JobMonitoringObjectsCountByState':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The JobMonitoringObjectsCountByState of this JobMonitoringObjectsCountByState.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def active(self):
        """Gets the active of this JobMonitoringObjectsCountByState.

        The total count of all jobs with the 'Running' status.

        :return: The active of this JobMonitoringObjectsCountByState.
        :rtype: int
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this JobMonitoringObjectsCountByState.

        The total count of all jobs with the 'Running' status.

        :param active: The active of this JobMonitoringObjectsCountByState.
        :type active: int
        """
        if active is None:
            raise ValueError("Invalid value for `active`, must not be `None`")

        self._active = active

    @property
    def canceled(self):
        """Gets the canceled of this JobMonitoringObjectsCountByState.

        The total count of all jobs with the 'Canceled' status.

        :return: The canceled of this JobMonitoringObjectsCountByState.
        :rtype: int
        """
        return self._canceled

    @canceled.setter
    def canceled(self, canceled):
        """Sets the canceled of this JobMonitoringObjectsCountByState.

        The total count of all jobs with the 'Canceled' status.

        :param canceled: The canceled of this JobMonitoringObjectsCountByState.
        :type canceled: int
        """
        if canceled is None:
            raise ValueError("Invalid value for `canceled`, must not be `None`")

        self._canceled = canceled

    @property
    def failure(self):
        """Gets the failure of this JobMonitoringObjectsCountByState.

        The total count of all jobs with the 'Failure' status.

        :return: The failure of this JobMonitoringObjectsCountByState.
        :rtype: int
        """
        return self._failure

    @failure.setter
    def failure(self, failure):
        """Sets the failure of this JobMonitoringObjectsCountByState.

        The total count of all jobs with the 'Failure' status.

        :param failure: The failure of this JobMonitoringObjectsCountByState.
        :type failure: int
        """
        if failure is None:
            raise ValueError("Invalid value for `failure`, must not be `None`")

        self._failure = failure

    @property
    def scheduled(self):
        """Gets the scheduled of this JobMonitoringObjectsCountByState.

        The total count of all jobs with the 'Scheduled' status.

        :return: The scheduled of this JobMonitoringObjectsCountByState.
        :rtype: int
        """
        return self._scheduled

    @scheduled.setter
    def scheduled(self, scheduled):
        """Sets the scheduled of this JobMonitoringObjectsCountByState.

        The total count of all jobs with the 'Scheduled' status.

        :param scheduled: The scheduled of this JobMonitoringObjectsCountByState.
        :type scheduled: int
        """
        if scheduled is None:
            raise ValueError("Invalid value for `scheduled`, must not be `None`")

        self._scheduled = scheduled

    @property
    def success(self):
        """Gets the success of this JobMonitoringObjectsCountByState.

        The total count of all jobs with the 'Succeeded' status.

        :return: The success of this JobMonitoringObjectsCountByState.
        :rtype: int
        """
        return self._success

    @success.setter
    def success(self, success):
        """Sets the success of this JobMonitoringObjectsCountByState.

        The total count of all jobs with the 'Succeeded' status.

        :param success: The success of this JobMonitoringObjectsCountByState.
        :type success: int
        """
        if success is None:
            raise ValueError("Invalid value for `success`, must not be `None`")

        self._success = success

    @property
    def total(self):
        """Gets the total of this JobMonitoringObjectsCountByState.

        The total count of all jobs.

        :return: The total of this JobMonitoringObjectsCountByState.
        :rtype: int
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this JobMonitoringObjectsCountByState.

        The total count of all jobs.

        :param total: The total of this JobMonitoringObjectsCountByState.
        :type total: int
        """
        if total is None:
            raise ValueError("Invalid value for `total`, must not be `None`")

        self._total = total
