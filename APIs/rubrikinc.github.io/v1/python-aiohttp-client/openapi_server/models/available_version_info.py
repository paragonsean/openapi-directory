# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.download_job_info import DownloadJobInfo
from openapi_server.models.software_availability import SoftwareAvailability
from openapi_server import util


class AvailableVersionInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, availability: SoftwareAvailability=None, description: str=None, download_job_info: DownloadJobInfo=None, general_availability_release_date_for_release_family: str=None, md5sum: str=None, release_date: str=None, release_notes: str=None, remote_download_url: str=None, size: int=None, version: str=None):
        """AvailableVersionInfo - a model defined in OpenAPI

        :param availability: The availability of this AvailableVersionInfo.
        :param description: The description of this AvailableVersionInfo.
        :param download_job_info: The download_job_info of this AvailableVersionInfo.
        :param general_availability_release_date_for_release_family: The general_availability_release_date_for_release_family of this AvailableVersionInfo.
        :param md5sum: The md5sum of this AvailableVersionInfo.
        :param release_date: The release_date of this AvailableVersionInfo.
        :param release_notes: The release_notes of this AvailableVersionInfo.
        :param remote_download_url: The remote_download_url of this AvailableVersionInfo.
        :param size: The size of this AvailableVersionInfo.
        :param version: The version of this AvailableVersionInfo.
        """
        self.openapi_types = {
            'availability': SoftwareAvailability,
            'description': str,
            'download_job_info': DownloadJobInfo,
            'general_availability_release_date_for_release_family': str,
            'md5sum': str,
            'release_date': str,
            'release_notes': str,
            'remote_download_url': str,
            'size': int,
            'version': str
        }

        self.attribute_map = {
            'availability': 'availability',
            'description': 'description',
            'download_job_info': 'downloadJobInfo',
            'general_availability_release_date_for_release_family': 'generalAvailabilityReleaseDateForReleaseFamily',
            'md5sum': 'md5sum',
            'release_date': 'releaseDate',
            'release_notes': 'releaseNotes',
            'remote_download_url': 'remoteDownloadUrl',
            'size': 'size',
            'version': 'version'
        }

        self._availability = availability
        self._description = description
        self._download_job_info = download_job_info
        self._general_availability_release_date_for_release_family = general_availability_release_date_for_release_family
        self._md5sum = md5sum
        self._release_date = release_date
        self._release_notes = release_notes
        self._remote_download_url = remote_download_url
        self._size = size
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AvailableVersionInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AvailableVersionInfo of this AvailableVersionInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def availability(self):
        """Gets the availability of this AvailableVersionInfo.


        :return: The availability of this AvailableVersionInfo.
        :rtype: SoftwareAvailability
        """
        return self._availability

    @availability.setter
    def availability(self, availability):
        """Sets the availability of this AvailableVersionInfo.


        :param availability: The availability of this AvailableVersionInfo.
        :type availability: SoftwareAvailability
        """
        if availability is None:
            raise ValueError("Invalid value for `availability`, must not be `None`")

        self._availability = availability

    @property
    def description(self):
        """Gets the description of this AvailableVersionInfo.

        Brief description of the Rubrik CDM version. An example response value is \"Rubrik 5.0 (GA)\". 

        :return: The description of this AvailableVersionInfo.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this AvailableVersionInfo.

        Brief description of the Rubrik CDM version. An example response value is \"Rubrik 5.0 (GA)\". 

        :param description: The description of this AvailableVersionInfo.
        :type description: str
        """

        self._description = description

    @property
    def download_job_info(self):
        """Gets the download_job_info of this AvailableVersionInfo.


        :return: The download_job_info of this AvailableVersionInfo.
        :rtype: DownloadJobInfo
        """
        return self._download_job_info

    @download_job_info.setter
    def download_job_info(self, download_job_info):
        """Sets the download_job_info of this AvailableVersionInfo.


        :param download_job_info: The download_job_info of this AvailableVersionInfo.
        :type download_job_info: DownloadJobInfo
        """

        self._download_job_info = download_job_info

    @property
    def general_availability_release_date_for_release_family(self):
        """Gets the general_availability_release_date_for_release_family of this AvailableVersionInfo.

        The date the Rubrik CDM family was released. This date is only available for software images stored remotely and not yet downloaded.

        :return: The general_availability_release_date_for_release_family of this AvailableVersionInfo.
        :rtype: str
        """
        return self._general_availability_release_date_for_release_family

    @general_availability_release_date_for_release_family.setter
    def general_availability_release_date_for_release_family(self, general_availability_release_date_for_release_family):
        """Sets the general_availability_release_date_for_release_family of this AvailableVersionInfo.

        The date the Rubrik CDM family was released. This date is only available for software images stored remotely and not yet downloaded.

        :param general_availability_release_date_for_release_family: The general_availability_release_date_for_release_family of this AvailableVersionInfo.
        :type general_availability_release_date_for_release_family: str
        """

        self._general_availability_release_date_for_release_family = general_availability_release_date_for_release_family

    @property
    def md5sum(self):
        """Gets the md5sum of this AvailableVersionInfo.

        The MD5 checksum of the software image. This value is used to verify the integrity of the package download.

        :return: The md5sum of this AvailableVersionInfo.
        :rtype: str
        """
        return self._md5sum

    @md5sum.setter
    def md5sum(self, md5sum):
        """Sets the md5sum of this AvailableVersionInfo.

        The MD5 checksum of the software image. This value is used to verify the integrity of the package download.

        :param md5sum: The md5sum of this AvailableVersionInfo.
        :type md5sum: str
        """

        self._md5sum = md5sum

    @property
    def release_date(self):
        """Gets the release_date of this AvailableVersionInfo.

        The date the Rubrik CDM version was released. This is only available for software images stored remotely and not yet downloaded.

        :return: The release_date of this AvailableVersionInfo.
        :rtype: str
        """
        return self._release_date

    @release_date.setter
    def release_date(self, release_date):
        """Sets the release_date of this AvailableVersionInfo.

        The date the Rubrik CDM version was released. This is only available for software images stored remotely and not yet downloaded.

        :param release_date: The release_date of this AvailableVersionInfo.
        :type release_date: str
        """

        self._release_date = release_date

    @property
    def release_notes(self):
        """Gets the release_notes of this AvailableVersionInfo.

        The URL used to access the version Release Notes for the Rubrik CDM software image. The URL is available only for software images stored remotely and not yet downloaded.

        :return: The release_notes of this AvailableVersionInfo.
        :rtype: str
        """
        return self._release_notes

    @release_notes.setter
    def release_notes(self, release_notes):
        """Sets the release_notes of this AvailableVersionInfo.

        The URL used to access the version Release Notes for the Rubrik CDM software image. The URL is available only for software images stored remotely and not yet downloaded.

        :param release_notes: The release_notes of this AvailableVersionInfo.
        :type release_notes: str
        """

        self._release_notes = release_notes

    @property
    def remote_download_url(self):
        """Gets the remote_download_url of this AvailableVersionInfo.

        The remote download URL of the Rubrik CDM software image. This URL is used to download the software to the Rubrik cluster.

        :return: The remote_download_url of this AvailableVersionInfo.
        :rtype: str
        """
        return self._remote_download_url

    @remote_download_url.setter
    def remote_download_url(self, remote_download_url):
        """Sets the remote_download_url of this AvailableVersionInfo.

        The remote download URL of the Rubrik CDM software image. This URL is used to download the software to the Rubrik cluster.

        :param remote_download_url: The remote_download_url of this AvailableVersionInfo.
        :type remote_download_url: str
        """

        self._remote_download_url = remote_download_url

    @property
    def size(self):
        """Gets the size of this AvailableVersionInfo.

        The size, in bytes, of the downloaded software image.

        :return: The size of this AvailableVersionInfo.
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this AvailableVersionInfo.

        The size, in bytes, of the downloaded software image.

        :param size: The size of this AvailableVersionInfo.
        :type size: int
        """

        self._size = size

    @property
    def version(self):
        """Gets the version of this AvailableVersionInfo.

        The version of Rubrik CDM available in the Rubrik cluster or in the Rubrik remote central repository.

        :return: The version of this AvailableVersionInfo.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this AvailableVersionInfo.

        The version of Rubrik CDM available in the Rubrik cluster or in the Rubrik remote central repository.

        :param version: The version of this AvailableVersionInfo.
        :type version: str
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")

        self._version = version
