# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.mssql_database_file_type import MssqlDatabaseFileType
from openapi_server import util


class MssqlRestoreFile(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, file_id: int=None, file_type: MssqlDatabaseFileType=None, logical_name: str=None, original_name: str=None, original_path: str=None):
        """MssqlRestoreFile - a model defined in OpenAPI

        :param file_id: The file_id of this MssqlRestoreFile.
        :param file_type: The file_type of this MssqlRestoreFile.
        :param logical_name: The logical_name of this MssqlRestoreFile.
        :param original_name: The original_name of this MssqlRestoreFile.
        :param original_path: The original_path of this MssqlRestoreFile.
        """
        self.openapi_types = {
            'file_id': int,
            'file_type': MssqlDatabaseFileType,
            'logical_name': str,
            'original_name': str,
            'original_path': str
        }

        self.attribute_map = {
            'file_id': 'fileId',
            'file_type': 'fileType',
            'logical_name': 'logicalName',
            'original_name': 'originalName',
            'original_path': 'originalPath'
        }

        self._file_id = file_id
        self._file_type = file_type
        self._logical_name = logical_name
        self._original_name = original_name
        self._original_path = original_path

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MssqlRestoreFile':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MssqlRestoreFile of this MssqlRestoreFile.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def file_id(self):
        """Gets the file_id of this MssqlRestoreFile.

        Original file ID of the database file to be restored.

        :return: The file_id of this MssqlRestoreFile.
        :rtype: int
        """
        return self._file_id

    @file_id.setter
    def file_id(self, file_id):
        """Sets the file_id of this MssqlRestoreFile.

        Original file ID of the database file to be restored.

        :param file_id: The file_id of this MssqlRestoreFile.
        :type file_id: int
        """
        if file_id is None:
            raise ValueError("Invalid value for `file_id`, must not be `None`")

        self._file_id = file_id

    @property
    def file_type(self):
        """Gets the file_type of this MssqlRestoreFile.


        :return: The file_type of this MssqlRestoreFile.
        :rtype: MssqlDatabaseFileType
        """
        return self._file_type

    @file_type.setter
    def file_type(self, file_type):
        """Sets the file_type of this MssqlRestoreFile.


        :param file_type: The file_type of this MssqlRestoreFile.
        :type file_type: MssqlDatabaseFileType
        """
        if file_type is None:
            raise ValueError("Invalid value for `file_type`, must not be `None`")

        self._file_type = file_type

    @property
    def logical_name(self):
        """Gets the logical_name of this MssqlRestoreFile.

        Logical name of the database file to be restored.

        :return: The logical_name of this MssqlRestoreFile.
        :rtype: str
        """
        return self._logical_name

    @logical_name.setter
    def logical_name(self, logical_name):
        """Sets the logical_name of this MssqlRestoreFile.

        Logical name of the database file to be restored.

        :param logical_name: The logical_name of this MssqlRestoreFile.
        :type logical_name: str
        """
        if logical_name is None:
            raise ValueError("Invalid value for `logical_name`, must not be `None`")

        self._logical_name = logical_name

    @property
    def original_name(self):
        """Gets the original_name of this MssqlRestoreFile.

        Original filename of the database file to be restored.

        :return: The original_name of this MssqlRestoreFile.
        :rtype: str
        """
        return self._original_name

    @original_name.setter
    def original_name(self, original_name):
        """Sets the original_name of this MssqlRestoreFile.

        Original filename of the database file to be restored.

        :param original_name: The original_name of this MssqlRestoreFile.
        :type original_name: str
        """
        if original_name is None:
            raise ValueError("Invalid value for `original_name`, must not be `None`")

        self._original_name = original_name

    @property
    def original_path(self):
        """Gets the original_path of this MssqlRestoreFile.

        Original path to the database file to be restored.

        :return: The original_path of this MssqlRestoreFile.
        :rtype: str
        """
        return self._original_path

    @original_path.setter
    def original_path(self, original_path):
        """Sets the original_path of this MssqlRestoreFile.

        Original path to the database file to be restored.

        :param original_path: The original_path of this MssqlRestoreFile.
        :type original_path: str
        """
        if original_path is None:
            raise ValueError("Invalid value for `original_path`, must not be `None`")

        self._original_path = original_path
