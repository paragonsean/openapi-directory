# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.vm_snapshot_summary import VmSnapshotSummary
from openapi_server import util


class VmSnapshotSummaries(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, vm_id: str=None, vm_snapshots_summaries: List[VmSnapshotSummary]=None):
        """VmSnapshotSummaries - a model defined in OpenAPI

        :param vm_id: The vm_id of this VmSnapshotSummaries.
        :param vm_snapshots_summaries: The vm_snapshots_summaries of this VmSnapshotSummaries.
        """
        self.openapi_types = {
            'vm_id': str,
            'vm_snapshots_summaries': List[VmSnapshotSummary]
        }

        self.attribute_map = {
            'vm_id': 'vmId',
            'vm_snapshots_summaries': 'vmSnapshotsSummaries'
        }

        self._vm_id = vm_id
        self._vm_snapshots_summaries = vm_snapshots_summaries

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VmSnapshotSummaries':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VmSnapshotSummaries of this VmSnapshotSummaries.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def vm_id(self):
        """Gets the vm_id of this VmSnapshotSummaries.

        The ID of the virtual machine.

        :return: The vm_id of this VmSnapshotSummaries.
        :rtype: str
        """
        return self._vm_id

    @vm_id.setter
    def vm_id(self, vm_id):
        """Sets the vm_id of this VmSnapshotSummaries.

        The ID of the virtual machine.

        :param vm_id: The vm_id of this VmSnapshotSummaries.
        :type vm_id: str
        """
        if vm_id is None:
            raise ValueError("Invalid value for `vm_id`, must not be `None`")

        self._vm_id = vm_id

    @property
    def vm_snapshots_summaries(self):
        """Gets the vm_snapshots_summaries of this VmSnapshotSummaries.

        A list of VmSnapshotSummary for the virtual machine.

        :return: The vm_snapshots_summaries of this VmSnapshotSummaries.
        :rtype: List[VmSnapshotSummary]
        """
        return self._vm_snapshots_summaries

    @vm_snapshots_summaries.setter
    def vm_snapshots_summaries(self, vm_snapshots_summaries):
        """Sets the vm_snapshots_summaries of this VmSnapshotSummaries.

        A list of VmSnapshotSummary for the virtual machine.

        :param vm_snapshots_summaries: The vm_snapshots_summaries of this VmSnapshotSummaries.
        :type vm_snapshots_summaries: List[VmSnapshotSummary]
        """
        if vm_snapshots_summaries is None:
            raise ValueError("Invalid value for `vm_snapshots_summaries`, must not be `None`")

        self._vm_snapshots_summaries = vm_snapshots_summaries
