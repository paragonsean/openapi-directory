# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class StaticIpInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dns_servers: List[str]=None, gateway: str=None, ip_addresses: List[str]=None, subnet_mask: str=None):
        """StaticIpInfo - a model defined in OpenAPI

        :param dns_servers: The dns_servers of this StaticIpInfo.
        :param gateway: The gateway of this StaticIpInfo.
        :param ip_addresses: The ip_addresses of this StaticIpInfo.
        :param subnet_mask: The subnet_mask of this StaticIpInfo.
        """
        self.openapi_types = {
            'dns_servers': List[str],
            'gateway': str,
            'ip_addresses': List[str],
            'subnet_mask': str
        }

        self.attribute_map = {
            'dns_servers': 'dns_servers',
            'gateway': 'gateway',
            'ip_addresses': 'ip_addresses',
            'subnet_mask': 'subnet_mask'
        }

        self._dns_servers = dns_servers
        self._gateway = gateway
        self._ip_addresses = ip_addresses
        self._subnet_mask = subnet_mask

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StaticIpInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StaticIpInfo of this StaticIpInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dns_servers(self):
        """Gets the dns_servers of this StaticIpInfo.

        DNS Servers for the specified IP addresses.

        :return: The dns_servers of this StaticIpInfo.
        :rtype: List[str]
        """
        return self._dns_servers

    @dns_servers.setter
    def dns_servers(self, dns_servers):
        """Sets the dns_servers of this StaticIpInfo.

        DNS Servers for the specified IP addresses.

        :param dns_servers: The dns_servers of this StaticIpInfo.
        :type dns_servers: List[str]
        """

        self._dns_servers = dns_servers

    @property
    def gateway(self):
        """Gets the gateway of this StaticIpInfo.

        Gateway for the specified IP addresses.

        :return: The gateway of this StaticIpInfo.
        :rtype: str
        """
        return self._gateway

    @gateway.setter
    def gateway(self, gateway):
        """Sets the gateway of this StaticIpInfo.

        Gateway for the specified IP addresses.

        :param gateway: The gateway of this StaticIpInfo.
        :type gateway: str
        """

        self._gateway = gateway

    @property
    def ip_addresses(self):
        """Gets the ip_addresses of this StaticIpInfo.

        IP addresses and ranges, separated by commas.

        :return: The ip_addresses of this StaticIpInfo.
        :rtype: List[str]
        """
        return self._ip_addresses

    @ip_addresses.setter
    def ip_addresses(self, ip_addresses):
        """Sets the ip_addresses of this StaticIpInfo.

        IP addresses and ranges, separated by commas.

        :param ip_addresses: The ip_addresses of this StaticIpInfo.
        :type ip_addresses: List[str]
        """
        if ip_addresses is None:
            raise ValueError("Invalid value for `ip_addresses`, must not be `None`")

        self._ip_addresses = ip_addresses

    @property
    def subnet_mask(self):
        """Gets the subnet_mask of this StaticIpInfo.

        Subnet mask for the specified IP addresses.

        :return: The subnet_mask of this StaticIpInfo.
        :rtype: str
        """
        return self._subnet_mask

    @subnet_mask.setter
    def subnet_mask(self, subnet_mask):
        """Sets the subnet_mask of this StaticIpInfo.

        Subnet mask for the specified IP addresses.

        :param subnet_mask: The subnet_mask of this StaticIpInfo.
        :type subnet_mask: str
        """
        if subnet_mask is None:
            raise ValueError("Invalid value for `subnet_mask`, must not be `None`")

        self._subnet_mask = subnet_mask
