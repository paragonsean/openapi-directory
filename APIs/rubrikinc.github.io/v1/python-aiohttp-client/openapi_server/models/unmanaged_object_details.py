# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.location_path_point import LocationPathPoint
from openapi_server.models.managed_object_pending_sla_info import ManagedObjectPendingSlaInfo
from openapi_server.models.snappable_recovery_info import SnappableRecoveryInfo
from openapi_server import util


class UnmanagedObjectDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, archive_storage: int=None, has_snapshots_with_policy: bool=None, id: str=None, is_remote: bool=None, local_storage: int=None, name: str=None, object_type: str=None, pending_sla_domain: ManagedObjectPendingSlaInfo=None, physical_location: List[LocationPathPoint]=None, recovery_info: SnappableRecoveryInfo=None, retention_sla_domain_id: str=None, retention_sla_domain_name: str=None, retention_sla_domain_polaris_managed_id: str=None, snapshot_count: int=None, unmanaged_status: str=None):
        """UnmanagedObjectDetails - a model defined in OpenAPI

        :param archive_storage: The archive_storage of this UnmanagedObjectDetails.
        :param has_snapshots_with_policy: The has_snapshots_with_policy of this UnmanagedObjectDetails.
        :param id: The id of this UnmanagedObjectDetails.
        :param is_remote: The is_remote of this UnmanagedObjectDetails.
        :param local_storage: The local_storage of this UnmanagedObjectDetails.
        :param name: The name of this UnmanagedObjectDetails.
        :param object_type: The object_type of this UnmanagedObjectDetails.
        :param pending_sla_domain: The pending_sla_domain of this UnmanagedObjectDetails.
        :param physical_location: The physical_location of this UnmanagedObjectDetails.
        :param recovery_info: The recovery_info of this UnmanagedObjectDetails.
        :param retention_sla_domain_id: The retention_sla_domain_id of this UnmanagedObjectDetails.
        :param retention_sla_domain_name: The retention_sla_domain_name of this UnmanagedObjectDetails.
        :param retention_sla_domain_polaris_managed_id: The retention_sla_domain_polaris_managed_id of this UnmanagedObjectDetails.
        :param snapshot_count: The snapshot_count of this UnmanagedObjectDetails.
        :param unmanaged_status: The unmanaged_status of this UnmanagedObjectDetails.
        """
        self.openapi_types = {
            'archive_storage': int,
            'has_snapshots_with_policy': bool,
            'id': str,
            'is_remote': bool,
            'local_storage': int,
            'name': str,
            'object_type': str,
            'pending_sla_domain': ManagedObjectPendingSlaInfo,
            'physical_location': List[LocationPathPoint],
            'recovery_info': SnappableRecoveryInfo,
            'retention_sla_domain_id': str,
            'retention_sla_domain_name': str,
            'retention_sla_domain_polaris_managed_id': str,
            'snapshot_count': int,
            'unmanaged_status': str
        }

        self.attribute_map = {
            'archive_storage': 'archiveStorage',
            'has_snapshots_with_policy': 'hasSnapshotsWithPolicy',
            'id': 'id',
            'is_remote': 'isRemote',
            'local_storage': 'localStorage',
            'name': 'name',
            'object_type': 'objectType',
            'pending_sla_domain': 'pendingSlaDomain',
            'physical_location': 'physicalLocation',
            'recovery_info': 'recoveryInfo',
            'retention_sla_domain_id': 'retentionSlaDomainId',
            'retention_sla_domain_name': 'retentionSlaDomainName',
            'retention_sla_domain_polaris_managed_id': 'retentionSlaDomainPolarisManagedId',
            'snapshot_count': 'snapshotCount',
            'unmanaged_status': 'unmanagedStatus'
        }

        self._archive_storage = archive_storage
        self._has_snapshots_with_policy = has_snapshots_with_policy
        self._id = id
        self._is_remote = is_remote
        self._local_storage = local_storage
        self._name = name
        self._object_type = object_type
        self._pending_sla_domain = pending_sla_domain
        self._physical_location = physical_location
        self._recovery_info = recovery_info
        self._retention_sla_domain_id = retention_sla_domain_id
        self._retention_sla_domain_name = retention_sla_domain_name
        self._retention_sla_domain_polaris_managed_id = retention_sla_domain_polaris_managed_id
        self._snapshot_count = snapshot_count
        self._unmanaged_status = unmanaged_status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UnmanagedObjectDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UnmanagedObjectDetails of this UnmanagedObjectDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def archive_storage(self):
        """Gets the archive_storage of this UnmanagedObjectDetails.

        The amount of storage on the archival location used by unmanaged snapshots.

        :return: The archive_storage of this UnmanagedObjectDetails.
        :rtype: int
        """
        return self._archive_storage

    @archive_storage.setter
    def archive_storage(self, archive_storage):
        """Sets the archive_storage of this UnmanagedObjectDetails.

        The amount of storage on the archival location used by unmanaged snapshots.

        :param archive_storage: The archive_storage of this UnmanagedObjectDetails.
        :type archive_storage: int
        """
        if archive_storage is None:
            raise ValueError("Invalid value for `archive_storage`, must not be `None`")

        self._archive_storage = archive_storage

    @property
    def has_snapshots_with_policy(self):
        """Gets the has_snapshots_with_policy of this UnmanagedObjectDetails.

        A boolean that specifies whether any of the snapshots for this object are being retained by a SLA Domain at any location. 

        :return: The has_snapshots_with_policy of this UnmanagedObjectDetails.
        :rtype: bool
        """
        return self._has_snapshots_with_policy

    @has_snapshots_with_policy.setter
    def has_snapshots_with_policy(self, has_snapshots_with_policy):
        """Sets the has_snapshots_with_policy of this UnmanagedObjectDetails.

        A boolean that specifies whether any of the snapshots for this object are being retained by a SLA Domain at any location. 

        :param has_snapshots_with_policy: The has_snapshots_with_policy of this UnmanagedObjectDetails.
        :type has_snapshots_with_policy: bool
        """
        if has_snapshots_with_policy is None:
            raise ValueError("Invalid value for `has_snapshots_with_policy`, must not be `None`")

        self._has_snapshots_with_policy = has_snapshots_with_policy

    @property
    def id(self):
        """Gets the id of this UnmanagedObjectDetails.


        :return: The id of this UnmanagedObjectDetails.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this UnmanagedObjectDetails.


        :param id: The id of this UnmanagedObjectDetails.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def is_remote(self):
        """Gets the is_remote of this UnmanagedObjectDetails.

        Boolean that specifies whether the object is remote or local. A value of true indicates that the object is remote. 

        :return: The is_remote of this UnmanagedObjectDetails.
        :rtype: bool
        """
        return self._is_remote

    @is_remote.setter
    def is_remote(self, is_remote):
        """Sets the is_remote of this UnmanagedObjectDetails.

        Boolean that specifies whether the object is remote or local. A value of true indicates that the object is remote. 

        :param is_remote: The is_remote of this UnmanagedObjectDetails.
        :type is_remote: bool
        """

        self._is_remote = is_remote

    @property
    def local_storage(self):
        """Gets the local_storage of this UnmanagedObjectDetails.

        The amount of storage on the local cluster used by unmanaged snapshots.

        :return: The local_storage of this UnmanagedObjectDetails.
        :rtype: int
        """
        return self._local_storage

    @local_storage.setter
    def local_storage(self, local_storage):
        """Sets the local_storage of this UnmanagedObjectDetails.

        The amount of storage on the local cluster used by unmanaged snapshots.

        :param local_storage: The local_storage of this UnmanagedObjectDetails.
        :type local_storage: int
        """
        if local_storage is None:
            raise ValueError("Invalid value for `local_storage`, must not be `None`")

        self._local_storage = local_storage

    @property
    def name(self):
        """Gets the name of this UnmanagedObjectDetails.


        :return: The name of this UnmanagedObjectDetails.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UnmanagedObjectDetails.


        :param name: The name of this UnmanagedObjectDetails.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def object_type(self):
        """Gets the object_type of this UnmanagedObjectDetails.

        The type of the unmanaged object. Valid object types are VirtualMachine, MssqlDatabase, LinuxFileset, ShareFileset, WindowsFileset, NutanixVirtualMachine, Ec2Instance and StorageArrayVolumeGroup.

        :return: The object_type of this UnmanagedObjectDetails.
        :rtype: str
        """
        return self._object_type

    @object_type.setter
    def object_type(self, object_type):
        """Sets the object_type of this UnmanagedObjectDetails.

        The type of the unmanaged object. Valid object types are VirtualMachine, MssqlDatabase, LinuxFileset, ShareFileset, WindowsFileset, NutanixVirtualMachine, Ec2Instance and StorageArrayVolumeGroup.

        :param object_type: The object_type of this UnmanagedObjectDetails.
        :type object_type: str
        """
        allowed_values = ["VirtualMachine", "MssqlDatabase", "LinuxFileset", "WindowsFileset", "ShareFileset", "NutanixVirtualMachine", "HypervVirtualMachine", "ManagedVolume", "Ec2Instance", "StorageArrayVolumeGroup", "VcdVapp", "LinuxHost", "WindowsHost", "OracleDatabase", "VolumeGroup", "AppBlueprint"]  # noqa: E501
        if object_type not in allowed_values:
            raise ValueError(
                "Invalid value for `object_type` ({0}), must be one of {1}"
                .format(object_type, allowed_values)
            )

        self._object_type = object_type

    @property
    def pending_sla_domain(self):
        """Gets the pending_sla_domain of this UnmanagedObjectDetails.


        :return: The pending_sla_domain of this UnmanagedObjectDetails.
        :rtype: ManagedObjectPendingSlaInfo
        """
        return self._pending_sla_domain

    @pending_sla_domain.setter
    def pending_sla_domain(self, pending_sla_domain):
        """Sets the pending_sla_domain of this UnmanagedObjectDetails.


        :param pending_sla_domain: The pending_sla_domain of this UnmanagedObjectDetails.
        :type pending_sla_domain: ManagedObjectPendingSlaInfo
        """

        self._pending_sla_domain = pending_sla_domain

    @property
    def physical_location(self):
        """Gets the physical_location of this UnmanagedObjectDetails.

        Summary information of all objects on the physical path to this object.

        :return: The physical_location of this UnmanagedObjectDetails.
        :rtype: List[LocationPathPoint]
        """
        return self._physical_location

    @physical_location.setter
    def physical_location(self, physical_location):
        """Sets the physical_location of this UnmanagedObjectDetails.

        Summary information of all objects on the physical path to this object.

        :param physical_location: The physical_location of this UnmanagedObjectDetails.
        :type physical_location: List[LocationPathPoint]
        """
        if physical_location is None:
            raise ValueError("Invalid value for `physical_location`, must not be `None`")

        self._physical_location = physical_location

    @property
    def recovery_info(self):
        """Gets the recovery_info of this UnmanagedObjectDetails.


        :return: The recovery_info of this UnmanagedObjectDetails.
        :rtype: SnappableRecoveryInfo
        """
        return self._recovery_info

    @recovery_info.setter
    def recovery_info(self, recovery_info):
        """Sets the recovery_info of this UnmanagedObjectDetails.


        :param recovery_info: The recovery_info of this UnmanagedObjectDetails.
        :type recovery_info: SnappableRecoveryInfo
        """

        self._recovery_info = recovery_info

    @property
    def retention_sla_domain_id(self):
        """Gets the retention_sla_domain_id of this UnmanagedObjectDetails.

        ID assigned to an SLA Domain retention policy.

        :return: The retention_sla_domain_id of this UnmanagedObjectDetails.
        :rtype: str
        """
        return self._retention_sla_domain_id

    @retention_sla_domain_id.setter
    def retention_sla_domain_id(self, retention_sla_domain_id):
        """Sets the retention_sla_domain_id of this UnmanagedObjectDetails.

        ID assigned to an SLA Domain retention policy.

        :param retention_sla_domain_id: The retention_sla_domain_id of this UnmanagedObjectDetails.
        :type retention_sla_domain_id: str
        """
        if retention_sla_domain_id is None:
            raise ValueError("Invalid value for `retention_sla_domain_id`, must not be `None`")

        self._retention_sla_domain_id = retention_sla_domain_id

    @property
    def retention_sla_domain_name(self):
        """Gets the retention_sla_domain_name of this UnmanagedObjectDetails.

        Name of an SLA Domain retention policy.

        :return: The retention_sla_domain_name of this UnmanagedObjectDetails.
        :rtype: str
        """
        return self._retention_sla_domain_name

    @retention_sla_domain_name.setter
    def retention_sla_domain_name(self, retention_sla_domain_name):
        """Sets the retention_sla_domain_name of this UnmanagedObjectDetails.

        Name of an SLA Domain retention policy.

        :param retention_sla_domain_name: The retention_sla_domain_name of this UnmanagedObjectDetails.
        :type retention_sla_domain_name: str
        """
        if retention_sla_domain_name is None:
            raise ValueError("Invalid value for `retention_sla_domain_name`, must not be `None`")

        self._retention_sla_domain_name = retention_sla_domain_name

    @property
    def retention_sla_domain_polaris_managed_id(self):
        """Gets the retention_sla_domain_polaris_managed_id of this UnmanagedObjectDetails.

        Optional field with the ID assigned to an SLA Domain by Polaris.

        :return: The retention_sla_domain_polaris_managed_id of this UnmanagedObjectDetails.
        :rtype: str
        """
        return self._retention_sla_domain_polaris_managed_id

    @retention_sla_domain_polaris_managed_id.setter
    def retention_sla_domain_polaris_managed_id(self, retention_sla_domain_polaris_managed_id):
        """Sets the retention_sla_domain_polaris_managed_id of this UnmanagedObjectDetails.

        Optional field with the ID assigned to an SLA Domain by Polaris.

        :param retention_sla_domain_polaris_managed_id: The retention_sla_domain_polaris_managed_id of this UnmanagedObjectDetails.
        :type retention_sla_domain_polaris_managed_id: str
        """

        self._retention_sla_domain_polaris_managed_id = retention_sla_domain_polaris_managed_id

    @property
    def snapshot_count(self):
        """Gets the snapshot_count of this UnmanagedObjectDetails.

        Total number of snapshots to for the specified object.

        :return: The snapshot_count of this UnmanagedObjectDetails.
        :rtype: int
        """
        return self._snapshot_count

    @snapshot_count.setter
    def snapshot_count(self, snapshot_count):
        """Sets the snapshot_count of this UnmanagedObjectDetails.

        Total number of snapshots to for the specified object.

        :param snapshot_count: The snapshot_count of this UnmanagedObjectDetails.
        :type snapshot_count: int
        """
        if snapshot_count is None:
            raise ValueError("Invalid value for `snapshot_count`, must not be `None`")

        self._snapshot_count = snapshot_count

    @property
    def unmanaged_status(self):
        """Gets the unmanaged_status of this UnmanagedObjectDetails.

        Unmanaged Status of this object. Protected means that this object is still protected by an SLA Policy. Unprotected means that this object has become unprotected. Relic means that Rubrik has lost contact with this object.

        :return: The unmanaged_status of this UnmanagedObjectDetails.
        :rtype: str
        """
        return self._unmanaged_status

    @unmanaged_status.setter
    def unmanaged_status(self, unmanaged_status):
        """Sets the unmanaged_status of this UnmanagedObjectDetails.

        Unmanaged Status of this object. Protected means that this object is still protected by an SLA Policy. Unprotected means that this object has become unprotected. Relic means that Rubrik has lost contact with this object.

        :param unmanaged_status: The unmanaged_status of this UnmanagedObjectDetails.
        :type unmanaged_status: str
        """
        allowed_values = ["Protected", "Relic", "Unprotected", "ReplicatedRelic", "RemoteUnprotected"]  # noqa: E501
        if unmanaged_status not in allowed_values:
            raise ValueError(
                "Invalid value for `unmanaged_status` ({0}), must be one of {1}"
                .format(unmanaged_status, allowed_values)
            )

        self._unmanaged_status = unmanaged_status
