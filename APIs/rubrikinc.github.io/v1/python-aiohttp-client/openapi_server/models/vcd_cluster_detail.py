# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.configured_sla_type import ConfiguredSlaType
from openapi_server.models.vcd_connection_status import VcdConnectionStatus
from openapi_server import util


class VcdClusterDetail(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, configured_sla_domain_id: str=None, configured_sla_domain_name: str=None, configured_sla_domain_type: ConfiguredSlaType=None, id: str=None, is_configured_sla_domain_retention_locked: bool=None, name: str=None, primary_cluster_id: str=None, sla_last_update_time: datetime=None, ca_certs: str=None, hostname: str=None, username: str=None, connection_status: VcdConnectionStatus=None):
        """VcdClusterDetail - a model defined in OpenAPI

        :param configured_sla_domain_id: The configured_sla_domain_id of this VcdClusterDetail.
        :param configured_sla_domain_name: The configured_sla_domain_name of this VcdClusterDetail.
        :param configured_sla_domain_type: The configured_sla_domain_type of this VcdClusterDetail.
        :param id: The id of this VcdClusterDetail.
        :param is_configured_sla_domain_retention_locked: The is_configured_sla_domain_retention_locked of this VcdClusterDetail.
        :param name: The name of this VcdClusterDetail.
        :param primary_cluster_id: The primary_cluster_id of this VcdClusterDetail.
        :param sla_last_update_time: The sla_last_update_time of this VcdClusterDetail.
        :param ca_certs: The ca_certs of this VcdClusterDetail.
        :param hostname: The hostname of this VcdClusterDetail.
        :param username: The username of this VcdClusterDetail.
        :param connection_status: The connection_status of this VcdClusterDetail.
        """
        self.openapi_types = {
            'configured_sla_domain_id': str,
            'configured_sla_domain_name': str,
            'configured_sla_domain_type': ConfiguredSlaType,
            'id': str,
            'is_configured_sla_domain_retention_locked': bool,
            'name': str,
            'primary_cluster_id': str,
            'sla_last_update_time': datetime,
            'ca_certs': str,
            'hostname': str,
            'username': str,
            'connection_status': VcdConnectionStatus
        }

        self.attribute_map = {
            'configured_sla_domain_id': 'configuredSlaDomainId',
            'configured_sla_domain_name': 'configuredSlaDomainName',
            'configured_sla_domain_type': 'configuredSlaDomainType',
            'id': 'id',
            'is_configured_sla_domain_retention_locked': 'isConfiguredSlaDomainRetentionLocked',
            'name': 'name',
            'primary_cluster_id': 'primaryClusterId',
            'sla_last_update_time': 'slaLastUpdateTime',
            'ca_certs': 'caCerts',
            'hostname': 'hostname',
            'username': 'username',
            'connection_status': 'connectionStatus'
        }

        self._configured_sla_domain_id = configured_sla_domain_id
        self._configured_sla_domain_name = configured_sla_domain_name
        self._configured_sla_domain_type = configured_sla_domain_type
        self._id = id
        self._is_configured_sla_domain_retention_locked = is_configured_sla_domain_retention_locked
        self._name = name
        self._primary_cluster_id = primary_cluster_id
        self._sla_last_update_time = sla_last_update_time
        self._ca_certs = ca_certs
        self._hostname = hostname
        self._username = username
        self._connection_status = connection_status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VcdClusterDetail':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VcdClusterDetail of this VcdClusterDetail.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def configured_sla_domain_id(self):
        """Gets the configured_sla_domain_id of this VcdClusterDetail.

        The ID of the SLA Domain configured directly on the Rubrik object.

        :return: The configured_sla_domain_id of this VcdClusterDetail.
        :rtype: str
        """
        return self._configured_sla_domain_id

    @configured_sla_domain_id.setter
    def configured_sla_domain_id(self, configured_sla_domain_id):
        """Sets the configured_sla_domain_id of this VcdClusterDetail.

        The ID of the SLA Domain configured directly on the Rubrik object.

        :param configured_sla_domain_id: The configured_sla_domain_id of this VcdClusterDetail.
        :type configured_sla_domain_id: str
        """
        if configured_sla_domain_id is None:
            raise ValueError("Invalid value for `configured_sla_domain_id`, must not be `None`")

        self._configured_sla_domain_id = configured_sla_domain_id

    @property
    def configured_sla_domain_name(self):
        """Gets the configured_sla_domain_name of this VcdClusterDetail.

        The name of the SLA Domain configured directly on the Rubrik object.

        :return: The configured_sla_domain_name of this VcdClusterDetail.
        :rtype: str
        """
        return self._configured_sla_domain_name

    @configured_sla_domain_name.setter
    def configured_sla_domain_name(self, configured_sla_domain_name):
        """Sets the configured_sla_domain_name of this VcdClusterDetail.

        The name of the SLA Domain configured directly on the Rubrik object.

        :param configured_sla_domain_name: The configured_sla_domain_name of this VcdClusterDetail.
        :type configured_sla_domain_name: str
        """
        if configured_sla_domain_name is None:
            raise ValueError("Invalid value for `configured_sla_domain_name`, must not be `None`")

        self._configured_sla_domain_name = configured_sla_domain_name

    @property
    def configured_sla_domain_type(self):
        """Gets the configured_sla_domain_type of this VcdClusterDetail.


        :return: The configured_sla_domain_type of this VcdClusterDetail.
        :rtype: ConfiguredSlaType
        """
        return self._configured_sla_domain_type

    @configured_sla_domain_type.setter
    def configured_sla_domain_type(self, configured_sla_domain_type):
        """Sets the configured_sla_domain_type of this VcdClusterDetail.


        :param configured_sla_domain_type: The configured_sla_domain_type of this VcdClusterDetail.
        :type configured_sla_domain_type: ConfiguredSlaType
        """

        self._configured_sla_domain_type = configured_sla_domain_type

    @property
    def id(self):
        """Gets the id of this VcdClusterDetail.

        ID assigned to a vCD Cluster object.

        :return: The id of this VcdClusterDetail.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this VcdClusterDetail.

        ID assigned to a vCD Cluster object.

        :param id: The id of this VcdClusterDetail.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def is_configured_sla_domain_retention_locked(self):
        """Gets the is_configured_sla_domain_retention_locked of this VcdClusterDetail.

        Indicates whether the configured SLA Domain is Retention Locked. When this value is 'true', the configured SLA Domain is a Retention Lock SLA Domain.

        :return: The is_configured_sla_domain_retention_locked of this VcdClusterDetail.
        :rtype: bool
        """
        return self._is_configured_sla_domain_retention_locked

    @is_configured_sla_domain_retention_locked.setter
    def is_configured_sla_domain_retention_locked(self, is_configured_sla_domain_retention_locked):
        """Sets the is_configured_sla_domain_retention_locked of this VcdClusterDetail.

        Indicates whether the configured SLA Domain is Retention Locked. When this value is 'true', the configured SLA Domain is a Retention Lock SLA Domain.

        :param is_configured_sla_domain_retention_locked: The is_configured_sla_domain_retention_locked of this VcdClusterDetail.
        :type is_configured_sla_domain_retention_locked: bool
        """

        self._is_configured_sla_domain_retention_locked = is_configured_sla_domain_retention_locked

    @property
    def name(self):
        """Gets the name of this VcdClusterDetail.

        The name of the Rubrik object.

        :return: The name of this VcdClusterDetail.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this VcdClusterDetail.

        The name of the Rubrik object.

        :param name: The name of this VcdClusterDetail.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def primary_cluster_id(self):
        """Gets the primary_cluster_id of this VcdClusterDetail.

        The ID of the cluster that manages the Rubrik object.

        :return: The primary_cluster_id of this VcdClusterDetail.
        :rtype: str
        """
        return self._primary_cluster_id

    @primary_cluster_id.setter
    def primary_cluster_id(self, primary_cluster_id):
        """Sets the primary_cluster_id of this VcdClusterDetail.

        The ID of the cluster that manages the Rubrik object.

        :param primary_cluster_id: The primary_cluster_id of this VcdClusterDetail.
        :type primary_cluster_id: str
        """
        if primary_cluster_id is None:
            raise ValueError("Invalid value for `primary_cluster_id`, must not be `None`")

        self._primary_cluster_id = primary_cluster_id

    @property
    def sla_last_update_time(self):
        """Gets the sla_last_update_time of this VcdClusterDetail.

        The UTC time when the SLA Domain was last updated.

        :return: The sla_last_update_time of this VcdClusterDetail.
        :rtype: datetime
        """
        return self._sla_last_update_time

    @sla_last_update_time.setter
    def sla_last_update_time(self, sla_last_update_time):
        """Sets the sla_last_update_time of this VcdClusterDetail.

        The UTC time when the SLA Domain was last updated.

        :param sla_last_update_time: The sla_last_update_time of this VcdClusterDetail.
        :type sla_last_update_time: datetime
        """

        self._sla_last_update_time = sla_last_update_time

    @property
    def ca_certs(self):
        """Gets the ca_certs of this VcdClusterDetail.

        Concatenated X.509 certificates in Base64 encoded DER format. Each certificate must start with -----BEGIN CERTIFICATE----- and end with -----END CERTIFICATE-----.

        :return: The ca_certs of this VcdClusterDetail.
        :rtype: str
        """
        return self._ca_certs

    @ca_certs.setter
    def ca_certs(self, ca_certs):
        """Sets the ca_certs of this VcdClusterDetail.

        Concatenated X.509 certificates in Base64 encoded DER format. Each certificate must start with -----BEGIN CERTIFICATE----- and end with -----END CERTIFICATE-----.

        :param ca_certs: The ca_certs of this VcdClusterDetail.
        :type ca_certs: str
        """

        self._ca_certs = ca_certs

    @property
    def hostname(self):
        """Gets the hostname of this VcdClusterDetail.


        :return: The hostname of this VcdClusterDetail.
        :rtype: str
        """
        return self._hostname

    @hostname.setter
    def hostname(self, hostname):
        """Sets the hostname of this VcdClusterDetail.


        :param hostname: The hostname of this VcdClusterDetail.
        :type hostname: str
        """
        if hostname is None:
            raise ValueError("Invalid value for `hostname`, must not be `None`")

        self._hostname = hostname

    @property
    def username(self):
        """Gets the username of this VcdClusterDetail.


        :return: The username of this VcdClusterDetail.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this VcdClusterDetail.


        :param username: The username of this VcdClusterDetail.
        :type username: str
        """
        if username is None:
            raise ValueError("Invalid value for `username`, must not be `None`")

        self._username = username

    @property
    def connection_status(self):
        """Gets the connection_status of this VcdClusterDetail.


        :return: The connection_status of this VcdClusterDetail.
        :rtype: VcdConnectionStatus
        """
        return self._connection_status

    @connection_status.setter
    def connection_status(self, connection_status):
        """Sets the connection_status of this VcdClusterDetail.


        :param connection_status: The connection_status of this VcdClusterDetail.
        :type connection_status: VcdConnectionStatus
        """

        self._connection_status = connection_status
