# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.mssql_db_file_export_path import MssqlDbFileExportPath
from openapi_server.models.mssql_recovery_point import MssqlRecoveryPoint
from openapi_server import util


class ExportMssqlDbJobConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allow_overwrite: bool=False, finish_recovery: bool=None, max_data_streams: int=None, recovery_point: MssqlRecoveryPoint=None, target_data_file_path: str=None, target_database_name: str=None, target_file_paths: List[MssqlDbFileExportPath]=None, target_instance_id: str=None, target_log_file_path: str=None):
        """ExportMssqlDbJobConfig - a model defined in OpenAPI

        :param allow_overwrite: The allow_overwrite of this ExportMssqlDbJobConfig.
        :param finish_recovery: The finish_recovery of this ExportMssqlDbJobConfig.
        :param max_data_streams: The max_data_streams of this ExportMssqlDbJobConfig.
        :param recovery_point: The recovery_point of this ExportMssqlDbJobConfig.
        :param target_data_file_path: The target_data_file_path of this ExportMssqlDbJobConfig.
        :param target_database_name: The target_database_name of this ExportMssqlDbJobConfig.
        :param target_file_paths: The target_file_paths of this ExportMssqlDbJobConfig.
        :param target_instance_id: The target_instance_id of this ExportMssqlDbJobConfig.
        :param target_log_file_path: The target_log_file_path of this ExportMssqlDbJobConfig.
        """
        self.openapi_types = {
            'allow_overwrite': bool,
            'finish_recovery': bool,
            'max_data_streams': int,
            'recovery_point': MssqlRecoveryPoint,
            'target_data_file_path': str,
            'target_database_name': str,
            'target_file_paths': List[MssqlDbFileExportPath],
            'target_instance_id': str,
            'target_log_file_path': str
        }

        self.attribute_map = {
            'allow_overwrite': 'allowOverwrite',
            'finish_recovery': 'finishRecovery',
            'max_data_streams': 'maxDataStreams',
            'recovery_point': 'recoveryPoint',
            'target_data_file_path': 'targetDataFilePath',
            'target_database_name': 'targetDatabaseName',
            'target_file_paths': 'targetFilePaths',
            'target_instance_id': 'targetInstanceId',
            'target_log_file_path': 'targetLogFilePath'
        }

        self._allow_overwrite = allow_overwrite
        self._finish_recovery = finish_recovery
        self._max_data_streams = max_data_streams
        self._recovery_point = recovery_point
        self._target_data_file_path = target_data_file_path
        self._target_database_name = target_database_name
        self._target_file_paths = target_file_paths
        self._target_instance_id = target_instance_id
        self._target_log_file_path = target_log_file_path

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ExportMssqlDbJobConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ExportMssqlDbJobConfig of this ExportMssqlDbJobConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allow_overwrite(self):
        """Gets the allow_overwrite of this ExportMssqlDbJobConfig.

        A Boolean value that determines whether an existing database can be overwritten by a database this is exported from a backup. Set to false to prevent overwrites. This is the default. Set to true to allow overwrites.

        :return: The allow_overwrite of this ExportMssqlDbJobConfig.
        :rtype: bool
        """
        return self._allow_overwrite

    @allow_overwrite.setter
    def allow_overwrite(self, allow_overwrite):
        """Sets the allow_overwrite of this ExportMssqlDbJobConfig.

        A Boolean value that determines whether an existing database can be overwritten by a database this is exported from a backup. Set to false to prevent overwrites. This is the default. Set to true to allow overwrites.

        :param allow_overwrite: The allow_overwrite of this ExportMssqlDbJobConfig.
        :type allow_overwrite: bool
        """

        self._allow_overwrite = allow_overwrite

    @property
    def finish_recovery(self):
        """Gets the finish_recovery of this ExportMssqlDbJobConfig.

        A Boolean value that determines the recovery option to use during database restore. When this value is 'true', the database is restored using the RECOVERY option and is fully functional at the end of the restore operation. When this value is 'false', the database is restored using the NORECOVERY option and remains in recovering mode at the end of the restore operation.

        :return: The finish_recovery of this ExportMssqlDbJobConfig.
        :rtype: bool
        """
        return self._finish_recovery

    @finish_recovery.setter
    def finish_recovery(self, finish_recovery):
        """Sets the finish_recovery of this ExportMssqlDbJobConfig.

        A Boolean value that determines the recovery option to use during database restore. When this value is 'true', the database is restored using the RECOVERY option and is fully functional at the end of the restore operation. When this value is 'false', the database is restored using the NORECOVERY option and remains in recovering mode at the end of the restore operation.

        :param finish_recovery: The finish_recovery of this ExportMssqlDbJobConfig.
        :type finish_recovery: bool
        """

        self._finish_recovery = finish_recovery

    @property
    def max_data_streams(self):
        """Gets the max_data_streams of this ExportMssqlDbJobConfig.

        Maximum number of parallel data streams that can be used to copy data to the target system.

        :return: The max_data_streams of this ExportMssqlDbJobConfig.
        :rtype: int
        """
        return self._max_data_streams

    @max_data_streams.setter
    def max_data_streams(self, max_data_streams):
        """Sets the max_data_streams of this ExportMssqlDbJobConfig.

        Maximum number of parallel data streams that can be used to copy data to the target system.

        :param max_data_streams: The max_data_streams of this ExportMssqlDbJobConfig.
        :type max_data_streams: int
        """

        self._max_data_streams = max_data_streams

    @property
    def recovery_point(self):
        """Gets the recovery_point of this ExportMssqlDbJobConfig.


        :return: The recovery_point of this ExportMssqlDbJobConfig.
        :rtype: MssqlRecoveryPoint
        """
        return self._recovery_point

    @recovery_point.setter
    def recovery_point(self, recovery_point):
        """Sets the recovery_point of this ExportMssqlDbJobConfig.


        :param recovery_point: The recovery_point of this ExportMssqlDbJobConfig.
        :type recovery_point: MssqlRecoveryPoint
        """
        if recovery_point is None:
            raise ValueError("Invalid value for `recovery_point`, must not be `None`")

        self._recovery_point = recovery_point

    @property
    def target_data_file_path(self):
        """Gets the target_data_file_path of this ExportMssqlDbJobConfig.

        The target path to store all data files.

        :return: The target_data_file_path of this ExportMssqlDbJobConfig.
        :rtype: str
        """
        return self._target_data_file_path

    @target_data_file_path.setter
    def target_data_file_path(self, target_data_file_path):
        """Sets the target_data_file_path of this ExportMssqlDbJobConfig.

        The target path to store all data files.

        :param target_data_file_path: The target_data_file_path of this ExportMssqlDbJobConfig.
        :type target_data_file_path: str
        """

        self._target_data_file_path = target_data_file_path

    @property
    def target_database_name(self):
        """Gets the target_database_name of this ExportMssqlDbJobConfig.

        Name of the new database.

        :return: The target_database_name of this ExportMssqlDbJobConfig.
        :rtype: str
        """
        return self._target_database_name

    @target_database_name.setter
    def target_database_name(self, target_database_name):
        """Sets the target_database_name of this ExportMssqlDbJobConfig.

        Name of the new database.

        :param target_database_name: The target_database_name of this ExportMssqlDbJobConfig.
        :type target_database_name: str
        """
        if target_database_name is None:
            raise ValueError("Invalid value for `target_database_name`, must not be `None`")

        self._target_database_name = target_database_name

    @property
    def target_file_paths(self):
        """Gets the target_file_paths of this ExportMssqlDbJobConfig.

        One target path for each individual database file. Overrides targetDataFilePath and targetLogFilePath.

        :return: The target_file_paths of this ExportMssqlDbJobConfig.
        :rtype: List[MssqlDbFileExportPath]
        """
        return self._target_file_paths

    @target_file_paths.setter
    def target_file_paths(self, target_file_paths):
        """Sets the target_file_paths of this ExportMssqlDbJobConfig.

        One target path for each individual database file. Overrides targetDataFilePath and targetLogFilePath.

        :param target_file_paths: The target_file_paths of this ExportMssqlDbJobConfig.
        :type target_file_paths: List[MssqlDbFileExportPath]
        """

        self._target_file_paths = target_file_paths

    @property
    def target_instance_id(self):
        """Gets the target_instance_id of this ExportMssqlDbJobConfig.

        ID of the Microsoft SQL instance for the new database.

        :return: The target_instance_id of this ExportMssqlDbJobConfig.
        :rtype: str
        """
        return self._target_instance_id

    @target_instance_id.setter
    def target_instance_id(self, target_instance_id):
        """Sets the target_instance_id of this ExportMssqlDbJobConfig.

        ID of the Microsoft SQL instance for the new database.

        :param target_instance_id: The target_instance_id of this ExportMssqlDbJobConfig.
        :type target_instance_id: str
        """
        if target_instance_id is None:
            raise ValueError("Invalid value for `target_instance_id`, must not be `None`")

        self._target_instance_id = target_instance_id

    @property
    def target_log_file_path(self):
        """Gets the target_log_file_path of this ExportMssqlDbJobConfig.

        The target path to store all log files.

        :return: The target_log_file_path of this ExportMssqlDbJobConfig.
        :rtype: str
        """
        return self._target_log_file_path

    @target_log_file_path.setter
    def target_log_file_path(self, target_log_file_path):
        """Sets the target_log_file_path of this ExportMssqlDbJobConfig.

        The target path to store all log files.

        :param target_log_file_path: The target_log_file_path of this ExportMssqlDbJobConfig.
        :type target_log_file_path: str
        """

        self._target_log_file_path = target_log_file_path
