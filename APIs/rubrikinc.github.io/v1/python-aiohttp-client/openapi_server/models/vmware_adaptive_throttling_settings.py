# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class VmwareAdaptiveThrottlingSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cpu_utilization_threshold: int=None, datastore_io_latency_threshold: int=None, io_latency_threshold: int=None):
        """VmwareAdaptiveThrottlingSettings - a model defined in OpenAPI

        :param cpu_utilization_threshold: The cpu_utilization_threshold of this VmwareAdaptiveThrottlingSettings.
        :param datastore_io_latency_threshold: The datastore_io_latency_threshold of this VmwareAdaptiveThrottlingSettings.
        :param io_latency_threshold: The io_latency_threshold of this VmwareAdaptiveThrottlingSettings.
        """
        self.openapi_types = {
            'cpu_utilization_threshold': int,
            'datastore_io_latency_threshold': int,
            'io_latency_threshold': int
        }

        self.attribute_map = {
            'cpu_utilization_threshold': 'cpuUtilizationThreshold',
            'datastore_io_latency_threshold': 'datastoreIoLatencyThreshold',
            'io_latency_threshold': 'ioLatencyThreshold'
        }

        self._cpu_utilization_threshold = cpu_utilization_threshold
        self._datastore_io_latency_threshold = datastore_io_latency_threshold
        self._io_latency_threshold = io_latency_threshold

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VmwareAdaptiveThrottlingSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VmwareAdaptiveThrottlingSettings of this VmwareAdaptiveThrottlingSettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cpu_utilization_threshold(self):
        """Gets the cpu_utilization_threshold of this VmwareAdaptiveThrottlingSettings.

        Threshold virtual machine CPU utilization value that determines whether to postpone a scheduled snapshot of a vSphere virtual machine. Specify the threshold value as a percentage.

        :return: The cpu_utilization_threshold of this VmwareAdaptiveThrottlingSettings.
        :rtype: int
        """
        return self._cpu_utilization_threshold

    @cpu_utilization_threshold.setter
    def cpu_utilization_threshold(self, cpu_utilization_threshold):
        """Sets the cpu_utilization_threshold of this VmwareAdaptiveThrottlingSettings.

        Threshold virtual machine CPU utilization value that determines whether to postpone a scheduled snapshot of a vSphere virtual machine. Specify the threshold value as a percentage.

        :param cpu_utilization_threshold: The cpu_utilization_threshold of this VmwareAdaptiveThrottlingSettings.
        :type cpu_utilization_threshold: int
        """

        self._cpu_utilization_threshold = cpu_utilization_threshold

    @property
    def datastore_io_latency_threshold(self):
        """Gets the datastore_io_latency_threshold of this VmwareAdaptiveThrottlingSettings.

        Threshold datastore latency value, measured across all datastores, that determines whether to postpone a scheduled snapshot of a vSphere virtual machine. Specify the threshold value in milliseconds (ms).

        :return: The datastore_io_latency_threshold of this VmwareAdaptiveThrottlingSettings.
        :rtype: int
        """
        return self._datastore_io_latency_threshold

    @datastore_io_latency_threshold.setter
    def datastore_io_latency_threshold(self, datastore_io_latency_threshold):
        """Sets the datastore_io_latency_threshold of this VmwareAdaptiveThrottlingSettings.

        Threshold datastore latency value, measured across all datastores, that determines whether to postpone a scheduled snapshot of a vSphere virtual machine. Specify the threshold value in milliseconds (ms).

        :param datastore_io_latency_threshold: The datastore_io_latency_threshold of this VmwareAdaptiveThrottlingSettings.
        :type datastore_io_latency_threshold: int
        """

        self._datastore_io_latency_threshold = datastore_io_latency_threshold

    @property
    def io_latency_threshold(self):
        """Gets the io_latency_threshold of this VmwareAdaptiveThrottlingSettings.

        Threshold virtual machine latency value that determines whether to postpone a scheduled snapshot of the vSphere virtual machine. Specify the threshold value in milliseconds (ms).

        :return: The io_latency_threshold of this VmwareAdaptiveThrottlingSettings.
        :rtype: int
        """
        return self._io_latency_threshold

    @io_latency_threshold.setter
    def io_latency_threshold(self, io_latency_threshold):
        """Sets the io_latency_threshold of this VmwareAdaptiveThrottlingSettings.

        Threshold virtual machine latency value that determines whether to postpone a scheduled snapshot of the vSphere virtual machine. Specify the threshold value in milliseconds (ms).

        :param io_latency_threshold: The io_latency_threshold of this VmwareAdaptiveThrottlingSettings.
        :type io_latency_threshold: int
        """

        self._io_latency_threshold = io_latency_threshold
