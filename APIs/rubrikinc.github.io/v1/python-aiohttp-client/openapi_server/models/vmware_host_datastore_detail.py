# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.data_store_summary import DataStoreSummary
from openapi_server import util


class VmwareHostDatastoreDetail(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, datastores: List[DataStoreSummary]=None, host_id: str=None, host_name: str=None):
        """VmwareHostDatastoreDetail - a model defined in OpenAPI

        :param datastores: The datastores of this VmwareHostDatastoreDetail.
        :param host_id: The host_id of this VmwareHostDatastoreDetail.
        :param host_name: The host_name of this VmwareHostDatastoreDetail.
        """
        self.openapi_types = {
            'datastores': List[DataStoreSummary],
            'host_id': str,
            'host_name': str
        }

        self.attribute_map = {
            'datastores': 'datastores',
            'host_id': 'hostId',
            'host_name': 'hostName'
        }

        self._datastores = datastores
        self._host_id = host_id
        self._host_name = host_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VmwareHostDatastoreDetail':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VmwareHostDatastoreDetail of this VmwareHostDatastoreDetail.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def datastores(self):
        """Gets the datastores of this VmwareHostDatastoreDetail.


        :return: The datastores of this VmwareHostDatastoreDetail.
        :rtype: List[DataStoreSummary]
        """
        return self._datastores

    @datastores.setter
    def datastores(self, datastores):
        """Sets the datastores of this VmwareHostDatastoreDetail.


        :param datastores: The datastores of this VmwareHostDatastoreDetail.
        :type datastores: List[DataStoreSummary]
        """

        self._datastores = datastores

    @property
    def host_id(self):
        """Gets the host_id of this VmwareHostDatastoreDetail.


        :return: The host_id of this VmwareHostDatastoreDetail.
        :rtype: str
        """
        return self._host_id

    @host_id.setter
    def host_id(self, host_id):
        """Sets the host_id of this VmwareHostDatastoreDetail.


        :param host_id: The host_id of this VmwareHostDatastoreDetail.
        :type host_id: str
        """
        if host_id is None:
            raise ValueError("Invalid value for `host_id`, must not be `None`")

        self._host_id = host_id

    @property
    def host_name(self):
        """Gets the host_name of this VmwareHostDatastoreDetail.


        :return: The host_name of this VmwareHostDatastoreDetail.
        :rtype: str
        """
        return self._host_name

    @host_name.setter
    def host_name(self, host_name):
        """Sets the host_name of this VmwareHostDatastoreDetail.


        :param host_name: The host_name of this VmwareHostDatastoreDetail.
        :type host_name: str
        """

        self._host_name = host_name
