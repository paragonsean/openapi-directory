# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.failover_cluster_node_connection_status import FailoverClusterNodeConnectionStatus
from openapi_server import util


class FailoverClusterNode(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, connection_status: FailoverClusterNodeConnectionStatus=None, id: str=None, name: str=None, operating_system: str=None):
        """FailoverClusterNode - a model defined in OpenAPI

        :param connection_status: The connection_status of this FailoverClusterNode.
        :param id: The id of this FailoverClusterNode.
        :param name: The name of this FailoverClusterNode.
        :param operating_system: The operating_system of this FailoverClusterNode.
        """
        self.openapi_types = {
            'connection_status': FailoverClusterNodeConnectionStatus,
            'id': str,
            'name': str,
            'operating_system': str
        }

        self.attribute_map = {
            'connection_status': 'connectionStatus',
            'id': 'id',
            'name': 'name',
            'operating_system': 'operatingSystem'
        }

        self._connection_status = connection_status
        self._id = id
        self._name = name
        self._operating_system = operating_system

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FailoverClusterNode':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FailoverClusterNode of this FailoverClusterNode.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def connection_status(self):
        """Gets the connection_status of this FailoverClusterNode.


        :return: The connection_status of this FailoverClusterNode.
        :rtype: FailoverClusterNodeConnectionStatus
        """
        return self._connection_status

    @connection_status.setter
    def connection_status(self, connection_status):
        """Sets the connection_status of this FailoverClusterNode.


        :param connection_status: The connection_status of this FailoverClusterNode.
        :type connection_status: FailoverClusterNodeConnectionStatus
        """
        if connection_status is None:
            raise ValueError("Invalid value for `connection_status`, must not be `None`")

        self._connection_status = connection_status

    @property
    def id(self):
        """Gets the id of this FailoverClusterNode.

        ID of the node in the failover cluster.

        :return: The id of this FailoverClusterNode.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this FailoverClusterNode.

        ID of the node in the failover cluster.

        :param id: The id of this FailoverClusterNode.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def name(self):
        """Gets the name of this FailoverClusterNode.

        Name of the node in the failover cluster.

        :return: The name of this FailoverClusterNode.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this FailoverClusterNode.

        Name of the node in the failover cluster.

        :param name: The name of this FailoverClusterNode.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def operating_system(self):
        """Gets the operating_system of this FailoverClusterNode.

        Operating system of the node in the failover cluster.

        :return: The operating_system of this FailoverClusterNode.
        :rtype: str
        """
        return self._operating_system

    @operating_system.setter
    def operating_system(self, operating_system):
        """Sets the operating_system of this FailoverClusterNode.

        Operating system of the node in the failover cluster.

        :param operating_system: The operating_system of this FailoverClusterNode.
        :type operating_system: str
        """
        if operating_system is None:
            raise ValueError("Invalid value for `operating_system`, must not be `None`")

        self._operating_system = operating_system
