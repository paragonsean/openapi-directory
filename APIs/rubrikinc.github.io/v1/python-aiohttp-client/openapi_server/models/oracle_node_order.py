# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class OracleNodeOrder(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, node_name: str=None, order: int=None):
        """OracleNodeOrder - a model defined in OpenAPI

        :param node_name: The node_name of this OracleNodeOrder.
        :param order: The order of this OracleNodeOrder.
        """
        self.openapi_types = {
            'node_name': str,
            'order': int
        }

        self.attribute_map = {
            'node_name': 'nodeName',
            'order': 'order'
        }

        self._node_name = node_name
        self._order = order

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OracleNodeOrder':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OracleNodeOrder of this OracleNodeOrder.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def node_name(self):
        """Gets the node_name of this OracleNodeOrder.

        Nodename of the Oracle RAC node.

        :return: The node_name of this OracleNodeOrder.
        :rtype: str
        """
        return self._node_name

    @node_name.setter
    def node_name(self, node_name):
        """Sets the node_name of this OracleNodeOrder.

        Nodename of the Oracle RAC node.

        :param node_name: The node_name of this OracleNodeOrder.
        :type node_name: str
        """
        if node_name is None:
            raise ValueError("Invalid value for `node_name`, must not be `None`")

        self._node_name = node_name

    @property
    def order(self):
        """Gets the order of this OracleNodeOrder.

        Order in which Rubrik uses this node for automated Oracle backup.

        :return: The order of this OracleNodeOrder.
        :rtype: int
        """
        return self._order

    @order.setter
    def order(self, order):
        """Sets the order of this OracleNodeOrder.

        Order in which Rubrik uses this node for automated Oracle backup.

        :param order: The order of this OracleNodeOrder.
        :type order: int
        """
        if order is None:
            raise ValueError("Invalid value for `order`, must not be `None`")

        self._order = order
