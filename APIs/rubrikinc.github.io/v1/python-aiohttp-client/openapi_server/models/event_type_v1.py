# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EventTypeV1(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    """
    allowed enum values
    """
    ARCHIVE = 'Archive'
    AUDIT = 'Audit'
    AUTHDOMAIN = 'AuthDomain'
    AWSEVENT = 'AwsEvent'
    BACKUP = 'Backup'
    CLASSIFICATION = 'Classification'
    CLOUDNATIVESOURCE = 'CloudNativeSource'
    CLOUDNATIVEVM = 'CloudNativeVm'
    CONFIGURATION = 'Configuration'
    CONNECTION = 'Connection'
    CONVERSION = 'Conversion'
    DIAGNOSTIC = 'Diagnostic'
    DISCOVERY = 'Discovery'
    FAILOVER = 'Failover'
    FILESET = 'Fileset'
    HARDWARE = 'Hardware'
    HOSTEVENT = 'HostEvent'
    HYPERVSCVMM = 'HypervScvmm'
    HYPERVSERVER = 'HypervServer'
    INDEX = 'Index'
    INSTANTIATE = 'Instantiate'
    LEGALHOLD = 'LegalHold'
    MAINTENANCE = 'Maintenance'
    NUTANIXCLUSTER = 'NutanixCluster'
    RECOVERY = 'Recovery'
    REPLICATION = 'Replication'
    RESOURCEOPERATIONS = 'ResourceOperations'
    STORAGE = 'Storage'
    STORAGEARRAY = 'StorageArray'
    STORMRESOURCE = 'StormResource'
    SUPPORT = 'Support'
    SYSTEM = 'System'
    TESTFAILOVER = 'TestFailover'
    UPGRADE = 'Upgrade'
    VCENTER = 'VCenter'
    VCD = 'Vcd'
    VOLUMEGROUP = 'VolumeGroup'
    UNKNOWNEVENTTYPE = 'UnknownEventType'

    def __init__(self):
        """EventTypeV1 - a model defined in OpenAPI

        """
        self.openapi_types = {
        }

        self.attribute_map = {
        }

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EventTypeV1':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EventTypeV1 of this EventTypeV1.
        """
        return util.deserialize_model(dikt, cls)
