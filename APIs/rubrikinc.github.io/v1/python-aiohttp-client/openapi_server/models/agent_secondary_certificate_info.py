# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AgentSecondaryCertificateInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cert_id: str=None, cluster_uuid: str=None, is_agent_enabled: bool=None, name: str=None):
        """AgentSecondaryCertificateInfo - a model defined in OpenAPI

        :param cert_id: The cert_id of this AgentSecondaryCertificateInfo.
        :param cluster_uuid: The cluster_uuid of this AgentSecondaryCertificateInfo.
        :param is_agent_enabled: The is_agent_enabled of this AgentSecondaryCertificateInfo.
        :param name: The name of this AgentSecondaryCertificateInfo.
        """
        self.openapi_types = {
            'cert_id': str,
            'cluster_uuid': str,
            'is_agent_enabled': bool,
            'name': str
        }

        self.attribute_map = {
            'cert_id': 'certId',
            'cluster_uuid': 'clusterUuid',
            'is_agent_enabled': 'isAgentEnabled',
            'name': 'name'
        }

        self._cert_id = cert_id
        self._cluster_uuid = cluster_uuid
        self._is_agent_enabled = is_agent_enabled
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AgentSecondaryCertificateInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AgentSecondaryCertificateInfo of this AgentSecondaryCertificateInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cert_id(self):
        """Gets the cert_id of this AgentSecondaryCertificateInfo.

        ID of the certificate.

        :return: The cert_id of this AgentSecondaryCertificateInfo.
        :rtype: str
        """
        return self._cert_id

    @cert_id.setter
    def cert_id(self, cert_id):
        """Sets the cert_id of this AgentSecondaryCertificateInfo.

        ID of the certificate.

        :param cert_id: The cert_id of this AgentSecondaryCertificateInfo.
        :type cert_id: str
        """
        if cert_id is None:
            raise ValueError("Invalid value for `cert_id`, must not be `None`")

        self._cert_id = cert_id

    @property
    def cluster_uuid(self):
        """Gets the cluster_uuid of this AgentSecondaryCertificateInfo.

        Parsed cluster ID from the certificate.

        :return: The cluster_uuid of this AgentSecondaryCertificateInfo.
        :rtype: str
        """
        return self._cluster_uuid

    @cluster_uuid.setter
    def cluster_uuid(self, cluster_uuid):
        """Sets the cluster_uuid of this AgentSecondaryCertificateInfo.

        Parsed cluster ID from the certificate.

        :param cluster_uuid: The cluster_uuid of this AgentSecondaryCertificateInfo.
        :type cluster_uuid: str
        """
        if cluster_uuid is None:
            raise ValueError("Invalid value for `cluster_uuid`, must not be `None`")

        self._cluster_uuid = cluster_uuid

    @property
    def is_agent_enabled(self):
        """Gets the is_agent_enabled of this AgentSecondaryCertificateInfo.

        Whether this certificate has been marked for use by agents.

        :return: The is_agent_enabled of this AgentSecondaryCertificateInfo.
        :rtype: bool
        """
        return self._is_agent_enabled

    @is_agent_enabled.setter
    def is_agent_enabled(self, is_agent_enabled):
        """Sets the is_agent_enabled of this AgentSecondaryCertificateInfo.

        Whether this certificate has been marked for use by agents.

        :param is_agent_enabled: The is_agent_enabled of this AgentSecondaryCertificateInfo.
        :type is_agent_enabled: bool
        """
        if is_agent_enabled is None:
            raise ValueError("Invalid value for `is_agent_enabled`, must not be `None`")

        self._is_agent_enabled = is_agent_enabled

    @property
    def name(self):
        """Gets the name of this AgentSecondaryCertificateInfo.

        Display name for the certificate.

        :return: The name of this AgentSecondaryCertificateInfo.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AgentSecondaryCertificateInfo.

        Display name for the certificate.

        :param name: The name of this AgentSecondaryCertificateInfo.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name
