# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DownloadedSnapshotSlaAssignmentInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, object_id: str=None, sla_domain_id: str=None, snapshot_ids: List[str]=None):
        """DownloadedSnapshotSlaAssignmentInfo - a model defined in OpenAPI

        :param object_id: The object_id of this DownloadedSnapshotSlaAssignmentInfo.
        :param sla_domain_id: The sla_domain_id of this DownloadedSnapshotSlaAssignmentInfo.
        :param snapshot_ids: The snapshot_ids of this DownloadedSnapshotSlaAssignmentInfo.
        """
        self.openapi_types = {
            'object_id': str,
            'sla_domain_id': str,
            'snapshot_ids': List[str]
        }

        self.attribute_map = {
            'object_id': 'objectId',
            'sla_domain_id': 'slaDomainId',
            'snapshot_ids': 'snapshotIds'
        }

        self._object_id = object_id
        self._sla_domain_id = sla_domain_id
        self._snapshot_ids = snapshot_ids

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DownloadedSnapshotSlaAssignmentInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DownloadedSnapshotSlaAssignmentInfo of this DownloadedSnapshotSlaAssignmentInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def object_id(self):
        """Gets the object_id of this DownloadedSnapshotSlaAssignmentInfo.

        The managed ID of the object that owns the downloaded snapshots in the provided list.

        :return: The object_id of this DownloadedSnapshotSlaAssignmentInfo.
        :rtype: str
        """
        return self._object_id

    @object_id.setter
    def object_id(self, object_id):
        """Sets the object_id of this DownloadedSnapshotSlaAssignmentInfo.

        The managed ID of the object that owns the downloaded snapshots in the provided list.

        :param object_id: The object_id of this DownloadedSnapshotSlaAssignmentInfo.
        :type object_id: str
        """
        if object_id is None:
            raise ValueError("Invalid value for `object_id`, must not be `None`")

        self._object_id = object_id

    @property
    def sla_domain_id(self):
        """Gets the sla_domain_id of this DownloadedSnapshotSlaAssignmentInfo.

        The ID of the SLA Domain to assign to the provided list of downloaded snapshots.

        :return: The sla_domain_id of this DownloadedSnapshotSlaAssignmentInfo.
        :rtype: str
        """
        return self._sla_domain_id

    @sla_domain_id.setter
    def sla_domain_id(self, sla_domain_id):
        """Sets the sla_domain_id of this DownloadedSnapshotSlaAssignmentInfo.

        The ID of the SLA Domain to assign to the provided list of downloaded snapshots.

        :param sla_domain_id: The sla_domain_id of this DownloadedSnapshotSlaAssignmentInfo.
        :type sla_domain_id: str
        """
        if sla_domain_id is None:
            raise ValueError("Invalid value for `sla_domain_id`, must not be `None`")

        self._sla_domain_id = sla_domain_id

    @property
    def snapshot_ids(self):
        """Gets the snapshot_ids of this DownloadedSnapshotSlaAssignmentInfo.

        A list of snapshot IDs. The SLA Domain manages retention for the downloaded copy of the snapshots assigned to the snapshot IDs. If a snapshot in the list has no downloaded copy, its retention period remains unchanged.

        :return: The snapshot_ids of this DownloadedSnapshotSlaAssignmentInfo.
        :rtype: List[str]
        """
        return self._snapshot_ids

    @snapshot_ids.setter
    def snapshot_ids(self, snapshot_ids):
        """Sets the snapshot_ids of this DownloadedSnapshotSlaAssignmentInfo.

        A list of snapshot IDs. The SLA Domain manages retention for the downloaded copy of the snapshots assigned to the snapshot IDs. If a snapshot in the list has no downloaded copy, its retention period remains unchanged.

        :param snapshot_ids: The snapshot_ids of this DownloadedSnapshotSlaAssignmentInfo.
        :type snapshot_ids: List[str]
        """
        if snapshot_ids is None:
            raise ValueError("Invalid value for `snapshot_ids`, must not be `None`")

        self._snapshot_ids = snapshot_ids
