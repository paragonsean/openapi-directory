# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.configured_sla_type import ConfiguredSlaType
from openapi_server.models.sap_hana_data_path_type import SapHanaDataPathType
from openapi_server import util


class SapHanaDatabaseSummary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, configured_sla_domain_id: str=None, configured_sla_domain_name: str=None, configured_sla_domain_type: ConfiguredSlaType=None, id: str=None, is_configured_sla_domain_retention_locked: bool=None, name: str=None, primary_cluster_id: str=None, sla_last_update_time: datetime=None, effective_sla_domain_id: str=None, effective_sla_domain_name: str=None, effective_sla_domain_polaris_managed_id: str=None, effective_sla_source_object_id: str=None, effective_sla_source_object_name: str=None, is_effective_sla_domain_retention_locked: bool=None, retention_sla_domain_id: str=None, sla_assignment: str=None, data_path_type: SapHanaDataPathType=None, db_status: str=None, db_type: str=None, is_relic: bool=None, log_backup_interval_in_secs: int=None, primary_cluster_uuid: str=None, protection_date: datetime=None, sap_hana_system_id: str=None, sap_hana_system_name: str=None):
        """SapHanaDatabaseSummary - a model defined in OpenAPI

        :param configured_sla_domain_id: The configured_sla_domain_id of this SapHanaDatabaseSummary.
        :param configured_sla_domain_name: The configured_sla_domain_name of this SapHanaDatabaseSummary.
        :param configured_sla_domain_type: The configured_sla_domain_type of this SapHanaDatabaseSummary.
        :param id: The id of this SapHanaDatabaseSummary.
        :param is_configured_sla_domain_retention_locked: The is_configured_sla_domain_retention_locked of this SapHanaDatabaseSummary.
        :param name: The name of this SapHanaDatabaseSummary.
        :param primary_cluster_id: The primary_cluster_id of this SapHanaDatabaseSummary.
        :param sla_last_update_time: The sla_last_update_time of this SapHanaDatabaseSummary.
        :param effective_sla_domain_id: The effective_sla_domain_id of this SapHanaDatabaseSummary.
        :param effective_sla_domain_name: The effective_sla_domain_name of this SapHanaDatabaseSummary.
        :param effective_sla_domain_polaris_managed_id: The effective_sla_domain_polaris_managed_id of this SapHanaDatabaseSummary.
        :param effective_sla_source_object_id: The effective_sla_source_object_id of this SapHanaDatabaseSummary.
        :param effective_sla_source_object_name: The effective_sla_source_object_name of this SapHanaDatabaseSummary.
        :param is_effective_sla_domain_retention_locked: The is_effective_sla_domain_retention_locked of this SapHanaDatabaseSummary.
        :param retention_sla_domain_id: The retention_sla_domain_id of this SapHanaDatabaseSummary.
        :param sla_assignment: The sla_assignment of this SapHanaDatabaseSummary.
        :param data_path_type: The data_path_type of this SapHanaDatabaseSummary.
        :param db_status: The db_status of this SapHanaDatabaseSummary.
        :param db_type: The db_type of this SapHanaDatabaseSummary.
        :param is_relic: The is_relic of this SapHanaDatabaseSummary.
        :param log_backup_interval_in_secs: The log_backup_interval_in_secs of this SapHanaDatabaseSummary.
        :param primary_cluster_uuid: The primary_cluster_uuid of this SapHanaDatabaseSummary.
        :param protection_date: The protection_date of this SapHanaDatabaseSummary.
        :param sap_hana_system_id: The sap_hana_system_id of this SapHanaDatabaseSummary.
        :param sap_hana_system_name: The sap_hana_system_name of this SapHanaDatabaseSummary.
        """
        self.openapi_types = {
            'configured_sla_domain_id': str,
            'configured_sla_domain_name': str,
            'configured_sla_domain_type': ConfiguredSlaType,
            'id': str,
            'is_configured_sla_domain_retention_locked': bool,
            'name': str,
            'primary_cluster_id': str,
            'sla_last_update_time': datetime,
            'effective_sla_domain_id': str,
            'effective_sla_domain_name': str,
            'effective_sla_domain_polaris_managed_id': str,
            'effective_sla_source_object_id': str,
            'effective_sla_source_object_name': str,
            'is_effective_sla_domain_retention_locked': bool,
            'retention_sla_domain_id': str,
            'sla_assignment': str,
            'data_path_type': SapHanaDataPathType,
            'db_status': str,
            'db_type': str,
            'is_relic': bool,
            'log_backup_interval_in_secs': int,
            'primary_cluster_uuid': str,
            'protection_date': datetime,
            'sap_hana_system_id': str,
            'sap_hana_system_name': str
        }

        self.attribute_map = {
            'configured_sla_domain_id': 'configuredSlaDomainId',
            'configured_sla_domain_name': 'configuredSlaDomainName',
            'configured_sla_domain_type': 'configuredSlaDomainType',
            'id': 'id',
            'is_configured_sla_domain_retention_locked': 'isConfiguredSlaDomainRetentionLocked',
            'name': 'name',
            'primary_cluster_id': 'primaryClusterId',
            'sla_last_update_time': 'slaLastUpdateTime',
            'effective_sla_domain_id': 'effectiveSlaDomainId',
            'effective_sla_domain_name': 'effectiveSlaDomainName',
            'effective_sla_domain_polaris_managed_id': 'effectiveSlaDomainPolarisManagedId',
            'effective_sla_source_object_id': 'effectiveSlaSourceObjectId',
            'effective_sla_source_object_name': 'effectiveSlaSourceObjectName',
            'is_effective_sla_domain_retention_locked': 'isEffectiveSlaDomainRetentionLocked',
            'retention_sla_domain_id': 'retentionSlaDomainId',
            'sla_assignment': 'slaAssignment',
            'data_path_type': 'dataPathType',
            'db_status': 'dbStatus',
            'db_type': 'dbType',
            'is_relic': 'isRelic',
            'log_backup_interval_in_secs': 'logBackupIntervalInSecs',
            'primary_cluster_uuid': 'primaryClusterUuid',
            'protection_date': 'protectionDate',
            'sap_hana_system_id': 'sapHanaSystemId',
            'sap_hana_system_name': 'sapHanaSystemName'
        }

        self._configured_sla_domain_id = configured_sla_domain_id
        self._configured_sla_domain_name = configured_sla_domain_name
        self._configured_sla_domain_type = configured_sla_domain_type
        self._id = id
        self._is_configured_sla_domain_retention_locked = is_configured_sla_domain_retention_locked
        self._name = name
        self._primary_cluster_id = primary_cluster_id
        self._sla_last_update_time = sla_last_update_time
        self._effective_sla_domain_id = effective_sla_domain_id
        self._effective_sla_domain_name = effective_sla_domain_name
        self._effective_sla_domain_polaris_managed_id = effective_sla_domain_polaris_managed_id
        self._effective_sla_source_object_id = effective_sla_source_object_id
        self._effective_sla_source_object_name = effective_sla_source_object_name
        self._is_effective_sla_domain_retention_locked = is_effective_sla_domain_retention_locked
        self._retention_sla_domain_id = retention_sla_domain_id
        self._sla_assignment = sla_assignment
        self._data_path_type = data_path_type
        self._db_status = db_status
        self._db_type = db_type
        self._is_relic = is_relic
        self._log_backup_interval_in_secs = log_backup_interval_in_secs
        self._primary_cluster_uuid = primary_cluster_uuid
        self._protection_date = protection_date
        self._sap_hana_system_id = sap_hana_system_id
        self._sap_hana_system_name = sap_hana_system_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SapHanaDatabaseSummary':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SapHanaDatabaseSummary of this SapHanaDatabaseSummary.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def configured_sla_domain_id(self):
        """Gets the configured_sla_domain_id of this SapHanaDatabaseSummary.

        The ID of the SLA Domain configured directly on the Rubrik object.

        :return: The configured_sla_domain_id of this SapHanaDatabaseSummary.
        :rtype: str
        """
        return self._configured_sla_domain_id

    @configured_sla_domain_id.setter
    def configured_sla_domain_id(self, configured_sla_domain_id):
        """Sets the configured_sla_domain_id of this SapHanaDatabaseSummary.

        The ID of the SLA Domain configured directly on the Rubrik object.

        :param configured_sla_domain_id: The configured_sla_domain_id of this SapHanaDatabaseSummary.
        :type configured_sla_domain_id: str
        """
        if configured_sla_domain_id is None:
            raise ValueError("Invalid value for `configured_sla_domain_id`, must not be `None`")

        self._configured_sla_domain_id = configured_sla_domain_id

    @property
    def configured_sla_domain_name(self):
        """Gets the configured_sla_domain_name of this SapHanaDatabaseSummary.

        The name of the SLA Domain configured directly on the Rubrik object.

        :return: The configured_sla_domain_name of this SapHanaDatabaseSummary.
        :rtype: str
        """
        return self._configured_sla_domain_name

    @configured_sla_domain_name.setter
    def configured_sla_domain_name(self, configured_sla_domain_name):
        """Sets the configured_sla_domain_name of this SapHanaDatabaseSummary.

        The name of the SLA Domain configured directly on the Rubrik object.

        :param configured_sla_domain_name: The configured_sla_domain_name of this SapHanaDatabaseSummary.
        :type configured_sla_domain_name: str
        """
        if configured_sla_domain_name is None:
            raise ValueError("Invalid value for `configured_sla_domain_name`, must not be `None`")

        self._configured_sla_domain_name = configured_sla_domain_name

    @property
    def configured_sla_domain_type(self):
        """Gets the configured_sla_domain_type of this SapHanaDatabaseSummary.


        :return: The configured_sla_domain_type of this SapHanaDatabaseSummary.
        :rtype: ConfiguredSlaType
        """
        return self._configured_sla_domain_type

    @configured_sla_domain_type.setter
    def configured_sla_domain_type(self, configured_sla_domain_type):
        """Sets the configured_sla_domain_type of this SapHanaDatabaseSummary.


        :param configured_sla_domain_type: The configured_sla_domain_type of this SapHanaDatabaseSummary.
        :type configured_sla_domain_type: ConfiguredSlaType
        """

        self._configured_sla_domain_type = configured_sla_domain_type

    @property
    def id(self):
        """Gets the id of this SapHanaDatabaseSummary.

        The ID of the SAP HANA database.

        :return: The id of this SapHanaDatabaseSummary.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SapHanaDatabaseSummary.

        The ID of the SAP HANA database.

        :param id: The id of this SapHanaDatabaseSummary.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def is_configured_sla_domain_retention_locked(self):
        """Gets the is_configured_sla_domain_retention_locked of this SapHanaDatabaseSummary.

        Indicates whether the configured SLA Domain is Retention Locked. When this value is 'true', the configured SLA Domain is a Retention Lock SLA Domain.

        :return: The is_configured_sla_domain_retention_locked of this SapHanaDatabaseSummary.
        :rtype: bool
        """
        return self._is_configured_sla_domain_retention_locked

    @is_configured_sla_domain_retention_locked.setter
    def is_configured_sla_domain_retention_locked(self, is_configured_sla_domain_retention_locked):
        """Sets the is_configured_sla_domain_retention_locked of this SapHanaDatabaseSummary.

        Indicates whether the configured SLA Domain is Retention Locked. When this value is 'true', the configured SLA Domain is a Retention Lock SLA Domain.

        :param is_configured_sla_domain_retention_locked: The is_configured_sla_domain_retention_locked of this SapHanaDatabaseSummary.
        :type is_configured_sla_domain_retention_locked: bool
        """

        self._is_configured_sla_domain_retention_locked = is_configured_sla_domain_retention_locked

    @property
    def name(self):
        """Gets the name of this SapHanaDatabaseSummary.

        The name of the SAP HANA database.

        :return: The name of this SapHanaDatabaseSummary.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SapHanaDatabaseSummary.

        The name of the SAP HANA database.

        :param name: The name of this SapHanaDatabaseSummary.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def primary_cluster_id(self):
        """Gets the primary_cluster_id of this SapHanaDatabaseSummary.

        The ID of the cluster that manages the Rubrik object.

        :return: The primary_cluster_id of this SapHanaDatabaseSummary.
        :rtype: str
        """
        return self._primary_cluster_id

    @primary_cluster_id.setter
    def primary_cluster_id(self, primary_cluster_id):
        """Sets the primary_cluster_id of this SapHanaDatabaseSummary.

        The ID of the cluster that manages the Rubrik object.

        :param primary_cluster_id: The primary_cluster_id of this SapHanaDatabaseSummary.
        :type primary_cluster_id: str
        """
        if primary_cluster_id is None:
            raise ValueError("Invalid value for `primary_cluster_id`, must not be `None`")

        self._primary_cluster_id = primary_cluster_id

    @property
    def sla_last_update_time(self):
        """Gets the sla_last_update_time of this SapHanaDatabaseSummary.

        The UTC time when the SLA Domain was last updated.

        :return: The sla_last_update_time of this SapHanaDatabaseSummary.
        :rtype: datetime
        """
        return self._sla_last_update_time

    @sla_last_update_time.setter
    def sla_last_update_time(self, sla_last_update_time):
        """Sets the sla_last_update_time of this SapHanaDatabaseSummary.

        The UTC time when the SLA Domain was last updated.

        :param sla_last_update_time: The sla_last_update_time of this SapHanaDatabaseSummary.
        :type sla_last_update_time: datetime
        """

        self._sla_last_update_time = sla_last_update_time

    @property
    def effective_sla_domain_id(self):
        """Gets the effective_sla_domain_id of this SapHanaDatabaseSummary.

        The ID of the SLA Domain that controls the protection of the Rubrik object.

        :return: The effective_sla_domain_id of this SapHanaDatabaseSummary.
        :rtype: str
        """
        return self._effective_sla_domain_id

    @effective_sla_domain_id.setter
    def effective_sla_domain_id(self, effective_sla_domain_id):
        """Sets the effective_sla_domain_id of this SapHanaDatabaseSummary.

        The ID of the SLA Domain that controls the protection of the Rubrik object.

        :param effective_sla_domain_id: The effective_sla_domain_id of this SapHanaDatabaseSummary.
        :type effective_sla_domain_id: str
        """
        if effective_sla_domain_id is None:
            raise ValueError("Invalid value for `effective_sla_domain_id`, must not be `None`")

        self._effective_sla_domain_id = effective_sla_domain_id

    @property
    def effective_sla_domain_name(self):
        """Gets the effective_sla_domain_name of this SapHanaDatabaseSummary.

        The name of the SLA Domain that controls the protection of the Rubrik object.

        :return: The effective_sla_domain_name of this SapHanaDatabaseSummary.
        :rtype: str
        """
        return self._effective_sla_domain_name

    @effective_sla_domain_name.setter
    def effective_sla_domain_name(self, effective_sla_domain_name):
        """Sets the effective_sla_domain_name of this SapHanaDatabaseSummary.

        The name of the SLA Domain that controls the protection of the Rubrik object.

        :param effective_sla_domain_name: The effective_sla_domain_name of this SapHanaDatabaseSummary.
        :type effective_sla_domain_name: str
        """
        if effective_sla_domain_name is None:
            raise ValueError("Invalid value for `effective_sla_domain_name`, must not be `None`")

        self._effective_sla_domain_name = effective_sla_domain_name

    @property
    def effective_sla_domain_polaris_managed_id(self):
        """Gets the effective_sla_domain_polaris_managed_id of this SapHanaDatabaseSummary.

        Optional. This field contains the managed ID of of the Polaris-managed effective SLA Domain.

        :return: The effective_sla_domain_polaris_managed_id of this SapHanaDatabaseSummary.
        :rtype: str
        """
        return self._effective_sla_domain_polaris_managed_id

    @effective_sla_domain_polaris_managed_id.setter
    def effective_sla_domain_polaris_managed_id(self, effective_sla_domain_polaris_managed_id):
        """Sets the effective_sla_domain_polaris_managed_id of this SapHanaDatabaseSummary.

        Optional. This field contains the managed ID of of the Polaris-managed effective SLA Domain.

        :param effective_sla_domain_polaris_managed_id: The effective_sla_domain_polaris_managed_id of this SapHanaDatabaseSummary.
        :type effective_sla_domain_polaris_managed_id: str
        """

        self._effective_sla_domain_polaris_managed_id = effective_sla_domain_polaris_managed_id

    @property
    def effective_sla_source_object_id(self):
        """Gets the effective_sla_source_object_id of this SapHanaDatabaseSummary.

        The ID of the parent of the Rubrik object from which the SLA Domain that controls the protection of Rubrik object is inherited.

        :return: The effective_sla_source_object_id of this SapHanaDatabaseSummary.
        :rtype: str
        """
        return self._effective_sla_source_object_id

    @effective_sla_source_object_id.setter
    def effective_sla_source_object_id(self, effective_sla_source_object_id):
        """Sets the effective_sla_source_object_id of this SapHanaDatabaseSummary.

        The ID of the parent of the Rubrik object from which the SLA Domain that controls the protection of Rubrik object is inherited.

        :param effective_sla_source_object_id: The effective_sla_source_object_id of this SapHanaDatabaseSummary.
        :type effective_sla_source_object_id: str
        """

        self._effective_sla_source_object_id = effective_sla_source_object_id

    @property
    def effective_sla_source_object_name(self):
        """Gets the effective_sla_source_object_name of this SapHanaDatabaseSummary.

        The name of the parent of the Rubrik object from which the SLA Domain that controls the protection of Rubrik object is inherited.

        :return: The effective_sla_source_object_name of this SapHanaDatabaseSummary.
        :rtype: str
        """
        return self._effective_sla_source_object_name

    @effective_sla_source_object_name.setter
    def effective_sla_source_object_name(self, effective_sla_source_object_name):
        """Sets the effective_sla_source_object_name of this SapHanaDatabaseSummary.

        The name of the parent of the Rubrik object from which the SLA Domain that controls the protection of Rubrik object is inherited.

        :param effective_sla_source_object_name: The effective_sla_source_object_name of this SapHanaDatabaseSummary.
        :type effective_sla_source_object_name: str
        """

        self._effective_sla_source_object_name = effective_sla_source_object_name

    @property
    def is_effective_sla_domain_retention_locked(self):
        """Gets the is_effective_sla_domain_retention_locked of this SapHanaDatabaseSummary.

        Indicates whether the effective SLA Domain is Retention Locked. When this value is 'true', the effective SLA domain is a Retention Lock SLA Domain.

        :return: The is_effective_sla_domain_retention_locked of this SapHanaDatabaseSummary.
        :rtype: bool
        """
        return self._is_effective_sla_domain_retention_locked

    @is_effective_sla_domain_retention_locked.setter
    def is_effective_sla_domain_retention_locked(self, is_effective_sla_domain_retention_locked):
        """Sets the is_effective_sla_domain_retention_locked of this SapHanaDatabaseSummary.

        Indicates whether the effective SLA Domain is Retention Locked. When this value is 'true', the effective SLA domain is a Retention Lock SLA Domain.

        :param is_effective_sla_domain_retention_locked: The is_effective_sla_domain_retention_locked of this SapHanaDatabaseSummary.
        :type is_effective_sla_domain_retention_locked: bool
        """

        self._is_effective_sla_domain_retention_locked = is_effective_sla_domain_retention_locked

    @property
    def retention_sla_domain_id(self):
        """Gets the retention_sla_domain_id of this SapHanaDatabaseSummary.

        The ID of the SLA Domain whose retention policy is in use.

        :return: The retention_sla_domain_id of this SapHanaDatabaseSummary.
        :rtype: str
        """
        return self._retention_sla_domain_id

    @retention_sla_domain_id.setter
    def retention_sla_domain_id(self, retention_sla_domain_id):
        """Sets the retention_sla_domain_id of this SapHanaDatabaseSummary.

        The ID of the SLA Domain whose retention policy is in use.

        :param retention_sla_domain_id: The retention_sla_domain_id of this SapHanaDatabaseSummary.
        :type retention_sla_domain_id: str
        """

        self._retention_sla_domain_id = retention_sla_domain_id

    @property
    def sla_assignment(self):
        """Gets the sla_assignment of this SapHanaDatabaseSummary.

        The SLA assignment type. Direct SLA assignment means that a SLA Domain was configured directly on the Rubrik object by the user. Derived SLA assignment means that the Rubrik object inherits an SLA Domain from its parent Rubrik object.

        :return: The sla_assignment of this SapHanaDatabaseSummary.
        :rtype: str
        """
        return self._sla_assignment

    @sla_assignment.setter
    def sla_assignment(self, sla_assignment):
        """Sets the sla_assignment of this SapHanaDatabaseSummary.

        The SLA assignment type. Direct SLA assignment means that a SLA Domain was configured directly on the Rubrik object by the user. Derived SLA assignment means that the Rubrik object inherits an SLA Domain from its parent Rubrik object.

        :param sla_assignment: The sla_assignment of this SapHanaDatabaseSummary.
        :type sla_assignment: str
        """
        allowed_values = ["Derived", "Direct", "Unassigned"]  # noqa: E501
        if sla_assignment not in allowed_values:
            raise ValueError(
                "Invalid value for `sla_assignment` ({0}), must be one of {1}"
                .format(sla_assignment, allowed_values)
            )

        self._sla_assignment = sla_assignment

    @property
    def data_path_type(self):
        """Gets the data_path_type of this SapHanaDatabaseSummary.


        :return: The data_path_type of this SapHanaDatabaseSummary.
        :rtype: SapHanaDataPathType
        """
        return self._data_path_type

    @data_path_type.setter
    def data_path_type(self, data_path_type):
        """Sets the data_path_type of this SapHanaDatabaseSummary.


        :param data_path_type: The data_path_type of this SapHanaDatabaseSummary.
        :type data_path_type: SapHanaDataPathType
        """
        if data_path_type is None:
            raise ValueError("Invalid value for `data_path_type`, must not be `None`")

        self._data_path_type = data_path_type

    @property
    def db_status(self):
        """Gets the db_status of this SapHanaDatabaseSummary.

        Whether the database is in an ACTIVE,INACTIVE, or UNKNOWN state.

        :return: The db_status of this SapHanaDatabaseSummary.
        :rtype: str
        """
        return self._db_status

    @db_status.setter
    def db_status(self, db_status):
        """Sets the db_status of this SapHanaDatabaseSummary.

        Whether the database is in an ACTIVE,INACTIVE, or UNKNOWN state.

        :param db_status: The db_status of this SapHanaDatabaseSummary.
        :type db_status: str
        """
        allowed_values = ["ACTIVE", "INACTIVE", "UNKNOWN"]  # noqa: E501
        if db_status not in allowed_values:
            raise ValueError(
                "Invalid value for `db_status` ({0}), must be one of {1}"
                .format(db_status, allowed_values)
            )

        self._db_status = db_status

    @property
    def db_type(self):
        """Gets the db_type of this SapHanaDatabaseSummary.

        The type of SAP HANA database. Possible values are SYSTEM or TENANT. The SYSTEM database stores information about SAP HANA users and central system management. The TENANT database contains databases used by applications.

        :return: The db_type of this SapHanaDatabaseSummary.
        :rtype: str
        """
        return self._db_type

    @db_type.setter
    def db_type(self, db_type):
        """Sets the db_type of this SapHanaDatabaseSummary.

        The type of SAP HANA database. Possible values are SYSTEM or TENANT. The SYSTEM database stores information about SAP HANA users and central system management. The TENANT database contains databases used by applications.

        :param db_type: The db_type of this SapHanaDatabaseSummary.
        :type db_type: str
        """
        allowed_values = ["SYSTEM", "TENANT"]  # noqa: E501
        if db_type not in allowed_values:
            raise ValueError(
                "Invalid value for `db_type` ({0}), must be one of {1}"
                .format(db_type, allowed_values)
            )

        self._db_type = db_type

    @property
    def is_relic(self):
        """Gets the is_relic of this SapHanaDatabaseSummary.

        Specifies whether the SAP HANA database is accessible on the CDM cluster.

        :return: The is_relic of this SapHanaDatabaseSummary.
        :rtype: bool
        """
        return self._is_relic

    @is_relic.setter
    def is_relic(self, is_relic):
        """Sets the is_relic of this SapHanaDatabaseSummary.

        Specifies whether the SAP HANA database is accessible on the CDM cluster.

        :param is_relic: The is_relic of this SapHanaDatabaseSummary.
        :type is_relic: bool
        """
        if is_relic is None:
            raise ValueError("Invalid value for `is_relic`, must not be `None`")

        self._is_relic = is_relic

    @property
    def log_backup_interval_in_secs(self):
        """Gets the log_backup_interval_in_secs of this SapHanaDatabaseSummary.

        The log backup interval in seconds.

        :return: The log_backup_interval_in_secs of this SapHanaDatabaseSummary.
        :rtype: int
        """
        return self._log_backup_interval_in_secs

    @log_backup_interval_in_secs.setter
    def log_backup_interval_in_secs(self, log_backup_interval_in_secs):
        """Sets the log_backup_interval_in_secs of this SapHanaDatabaseSummary.

        The log backup interval in seconds.

        :param log_backup_interval_in_secs: The log_backup_interval_in_secs of this SapHanaDatabaseSummary.
        :type log_backup_interval_in_secs: int
        """

        self._log_backup_interval_in_secs = log_backup_interval_in_secs

    @property
    def primary_cluster_uuid(self):
        """Gets the primary_cluster_uuid of this SapHanaDatabaseSummary.

        The ID of the CDM cluster that protects the SAP HANA database.

        :return: The primary_cluster_uuid of this SapHanaDatabaseSummary.
        :rtype: str
        """
        return self._primary_cluster_uuid

    @primary_cluster_uuid.setter
    def primary_cluster_uuid(self, primary_cluster_uuid):
        """Sets the primary_cluster_uuid of this SapHanaDatabaseSummary.

        The ID of the CDM cluster that protects the SAP HANA database.

        :param primary_cluster_uuid: The primary_cluster_uuid of this SapHanaDatabaseSummary.
        :type primary_cluster_uuid: str
        """
        if primary_cluster_uuid is None:
            raise ValueError("Invalid value for `primary_cluster_uuid`, must not be `None`")

        self._primary_cluster_uuid = primary_cluster_uuid

    @property
    def protection_date(self):
        """Gets the protection_date of this SapHanaDatabaseSummary.

        The UTC timestamp for when the SAP HANA database was first protected.

        :return: The protection_date of this SapHanaDatabaseSummary.
        :rtype: datetime
        """
        return self._protection_date

    @protection_date.setter
    def protection_date(self, protection_date):
        """Sets the protection_date of this SapHanaDatabaseSummary.

        The UTC timestamp for when the SAP HANA database was first protected.

        :param protection_date: The protection_date of this SapHanaDatabaseSummary.
        :type protection_date: datetime
        """

        self._protection_date = protection_date

    @property
    def sap_hana_system_id(self):
        """Gets the sap_hana_system_id of this SapHanaDatabaseSummary.

        The ID of the SAP HANA system that owns the database.

        :return: The sap_hana_system_id of this SapHanaDatabaseSummary.
        :rtype: str
        """
        return self._sap_hana_system_id

    @sap_hana_system_id.setter
    def sap_hana_system_id(self, sap_hana_system_id):
        """Sets the sap_hana_system_id of this SapHanaDatabaseSummary.

        The ID of the SAP HANA system that owns the database.

        :param sap_hana_system_id: The sap_hana_system_id of this SapHanaDatabaseSummary.
        :type sap_hana_system_id: str
        """
        if sap_hana_system_id is None:
            raise ValueError("Invalid value for `sap_hana_system_id`, must not be `None`")

        self._sap_hana_system_id = sap_hana_system_id

    @property
    def sap_hana_system_name(self):
        """Gets the sap_hana_system_name of this SapHanaDatabaseSummary.

        Name of the SAP HANA system that owns the database.

        :return: The sap_hana_system_name of this SapHanaDatabaseSummary.
        :rtype: str
        """
        return self._sap_hana_system_name

    @sap_hana_system_name.setter
    def sap_hana_system_name(self, sap_hana_system_name):
        """Sets the sap_hana_system_name of this SapHanaDatabaseSummary.

        Name of the SAP HANA system that owns the database.

        :param sap_hana_system_name: The sap_hana_system_name of this SapHanaDatabaseSummary.
        :type sap_hana_system_name: str
        """
        if sap_hana_system_name is None:
            raise ValueError("Invalid value for `sap_hana_system_name`, must not be `None`")

        self._sap_hana_system_name = sap_hana_system_name
