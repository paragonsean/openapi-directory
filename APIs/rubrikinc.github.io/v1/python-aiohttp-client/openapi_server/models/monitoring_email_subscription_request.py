# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.job_monitoring_state import JobMonitoringState
from openapi_server.models.subscription_attachment_type import SubscriptionAttachmentType
from openapi_server.models.subscription_schedule_time_attributes import SubscriptionScheduleTimeAttributes
from openapi_server import util


class MonitoringEmailSubscriptionRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attachments: List[SubscriptionAttachmentType]=None, email_addresses: List[str]=None, job_states: List[JobMonitoringState]=None, time_attributes: SubscriptionScheduleTimeAttributes=None):
        """MonitoringEmailSubscriptionRequest - a model defined in OpenAPI

        :param attachments: The attachments of this MonitoringEmailSubscriptionRequest.
        :param email_addresses: The email_addresses of this MonitoringEmailSubscriptionRequest.
        :param job_states: The job_states of this MonitoringEmailSubscriptionRequest.
        :param time_attributes: The time_attributes of this MonitoringEmailSubscriptionRequest.
        """
        self.openapi_types = {
            'attachments': List[SubscriptionAttachmentType],
            'email_addresses': List[str],
            'job_states': List[JobMonitoringState],
            'time_attributes': SubscriptionScheduleTimeAttributes
        }

        self.attribute_map = {
            'attachments': 'attachments',
            'email_addresses': 'emailAddresses',
            'job_states': 'jobStates',
            'time_attributes': 'timeAttributes'
        }

        self._attachments = attachments
        self._email_addresses = email_addresses
        self._job_states = job_states
        self._time_attributes = time_attributes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MonitoringEmailSubscriptionRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MonitoringEmailSubscriptionRequest of this MonitoringEmailSubscriptionRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attachments(self):
        """Gets the attachments of this MonitoringEmailSubscriptionRequest.

        Attachment files to send with the subscription.

        :return: The attachments of this MonitoringEmailSubscriptionRequest.
        :rtype: List[SubscriptionAttachmentType]
        """
        return self._attachments

    @attachments.setter
    def attachments(self, attachments):
        """Sets the attachments of this MonitoringEmailSubscriptionRequest.

        Attachment files to send with the subscription.

        :param attachments: The attachments of this MonitoringEmailSubscriptionRequest.
        :type attachments: List[SubscriptionAttachmentType]
        """
        if attachments is None:
            raise ValueError("Invalid value for `attachments`, must not be `None`")

        self._attachments = attachments

    @property
    def email_addresses(self):
        """Gets the email_addresses of this MonitoringEmailSubscriptionRequest.

        Email addresses to send monitoring subscriptions to.

        :return: The email_addresses of this MonitoringEmailSubscriptionRequest.
        :rtype: List[str]
        """
        return self._email_addresses

    @email_addresses.setter
    def email_addresses(self, email_addresses):
        """Sets the email_addresses of this MonitoringEmailSubscriptionRequest.

        Email addresses to send monitoring subscriptions to.

        :param email_addresses: The email_addresses of this MonitoringEmailSubscriptionRequest.
        :type email_addresses: List[str]
        """
        if email_addresses is None:
            raise ValueError("Invalid value for `email_addresses`, must not be `None`")

        self._email_addresses = email_addresses

    @property
    def job_states(self):
        """Gets the job_states of this MonitoringEmailSubscriptionRequest.

        User-selected job states.

        :return: The job_states of this MonitoringEmailSubscriptionRequest.
        :rtype: List[JobMonitoringState]
        """
        return self._job_states

    @job_states.setter
    def job_states(self, job_states):
        """Sets the job_states of this MonitoringEmailSubscriptionRequest.

        User-selected job states.

        :param job_states: The job_states of this MonitoringEmailSubscriptionRequest.
        :type job_states: List[JobMonitoringState]
        """
        if job_states is None:
            raise ValueError("Invalid value for `job_states`, must not be `None`")

        self._job_states = job_states

    @property
    def time_attributes(self):
        """Gets the time_attributes of this MonitoringEmailSubscriptionRequest.


        :return: The time_attributes of this MonitoringEmailSubscriptionRequest.
        :rtype: SubscriptionScheduleTimeAttributes
        """
        return self._time_attributes

    @time_attributes.setter
    def time_attributes(self, time_attributes):
        """Sets the time_attributes of this MonitoringEmailSubscriptionRequest.


        :param time_attributes: The time_attributes of this MonitoringEmailSubscriptionRequest.
        :type time_attributes: SubscriptionScheduleTimeAttributes
        """
        if time_attributes is None:
            raise ValueError("Invalid value for `time_attributes`, must not be `None`")

        self._time_attributes = time_attributes
