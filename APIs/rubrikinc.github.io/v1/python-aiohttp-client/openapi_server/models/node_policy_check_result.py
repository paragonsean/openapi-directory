# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.policy_check_result import PolicyCheckResult
from openapi_server import util


class NodePolicyCheckResult(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, check_results: List[PolicyCheckResult]=None, node_id: str=None):
        """NodePolicyCheckResult - a model defined in OpenAPI

        :param check_results: The check_results of this NodePolicyCheckResult.
        :param node_id: The node_id of this NodePolicyCheckResult.
        """
        self.openapi_types = {
            'check_results': List[PolicyCheckResult],
            'node_id': str
        }

        self.attribute_map = {
            'check_results': 'checkResults',
            'node_id': 'nodeId'
        }

        self._check_results = check_results
        self._node_id = node_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NodePolicyCheckResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NodePolicyCheckResult of this NodePolicyCheckResult.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def check_results(self):
        """Gets the check_results of this NodePolicyCheckResult.


        :return: The check_results of this NodePolicyCheckResult.
        :rtype: List[PolicyCheckResult]
        """
        return self._check_results

    @check_results.setter
    def check_results(self, check_results):
        """Sets the check_results of this NodePolicyCheckResult.


        :param check_results: The check_results of this NodePolicyCheckResult.
        :type check_results: List[PolicyCheckResult]
        """
        if check_results is None:
            raise ValueError("Invalid value for `check_results`, must not be `None`")

        self._check_results = check_results

    @property
    def node_id(self):
        """Gets the node_id of this NodePolicyCheckResult.


        :return: The node_id of this NodePolicyCheckResult.
        :rtype: str
        """
        return self._node_id

    @node_id.setter
    def node_id(self, node_id):
        """Sets the node_id of this NodePolicyCheckResult.


        :param node_id: The node_id of this NodePolicyCheckResult.
        :type node_id: str
        """
        if node_id is None:
            raise ValueError("Invalid value for `node_id`, must not be `None`")

        self._node_id = node_id
