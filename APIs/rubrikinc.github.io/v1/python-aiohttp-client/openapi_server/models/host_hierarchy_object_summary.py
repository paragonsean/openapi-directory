# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.fileset_summary import FilesetSummary
from openapi_server.models.host_hierarchy_object_descendant_count import HostHierarchyObjectDescendantCount
from openapi_server.models.host_object_type import HostObjectType
from openapi_server.models.nas_base_config import NasBaseConfig
from openapi_server.models.sla_assignment import SlaAssignment
from openapi_server import util


class HostHierarchyObjectSummary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, alias: str=None, descendant_count: HostHierarchyObjectDescendantCount=None, domain: str=None, export_point: str=None, filesets: List[FilesetSummary]=None, host_id: str=None, hostname: str=None, id: str=None, is_change_list: bool=None, is_on_snap_mirror_dest_volume: bool=None, is_snap_diff: bool=None, isilon_changelist_enabled_descendant_count: int=None, name: str=None, nas_base_config: NasBaseConfig=None, object_type: HostObjectType=None, operating_system: str=None, operating_system_type: str=None, primary_cluster_id: str=None, share_type: str=None, sla_assignment: SlaAssignment=None, snap_diff_enabled_descendant_count: int=None, status: str=None, username: str=None):
        """HostHierarchyObjectSummary - a model defined in OpenAPI

        :param alias: The alias of this HostHierarchyObjectSummary.
        :param descendant_count: The descendant_count of this HostHierarchyObjectSummary.
        :param domain: The domain of this HostHierarchyObjectSummary.
        :param export_point: The export_point of this HostHierarchyObjectSummary.
        :param filesets: The filesets of this HostHierarchyObjectSummary.
        :param host_id: The host_id of this HostHierarchyObjectSummary.
        :param hostname: The hostname of this HostHierarchyObjectSummary.
        :param id: The id of this HostHierarchyObjectSummary.
        :param is_change_list: The is_change_list of this HostHierarchyObjectSummary.
        :param is_on_snap_mirror_dest_volume: The is_on_snap_mirror_dest_volume of this HostHierarchyObjectSummary.
        :param is_snap_diff: The is_snap_diff of this HostHierarchyObjectSummary.
        :param isilon_changelist_enabled_descendant_count: The isilon_changelist_enabled_descendant_count of this HostHierarchyObjectSummary.
        :param name: The name of this HostHierarchyObjectSummary.
        :param nas_base_config: The nas_base_config of this HostHierarchyObjectSummary.
        :param object_type: The object_type of this HostHierarchyObjectSummary.
        :param operating_system: The operating_system of this HostHierarchyObjectSummary.
        :param operating_system_type: The operating_system_type of this HostHierarchyObjectSummary.
        :param primary_cluster_id: The primary_cluster_id of this HostHierarchyObjectSummary.
        :param share_type: The share_type of this HostHierarchyObjectSummary.
        :param sla_assignment: The sla_assignment of this HostHierarchyObjectSummary.
        :param snap_diff_enabled_descendant_count: The snap_diff_enabled_descendant_count of this HostHierarchyObjectSummary.
        :param status: The status of this HostHierarchyObjectSummary.
        :param username: The username of this HostHierarchyObjectSummary.
        """
        self.openapi_types = {
            'alias': str,
            'descendant_count': HostHierarchyObjectDescendantCount,
            'domain': str,
            'export_point': str,
            'filesets': List[FilesetSummary],
            'host_id': str,
            'hostname': str,
            'id': str,
            'is_change_list': bool,
            'is_on_snap_mirror_dest_volume': bool,
            'is_snap_diff': bool,
            'isilon_changelist_enabled_descendant_count': int,
            'name': str,
            'nas_base_config': NasBaseConfig,
            'object_type': HostObjectType,
            'operating_system': str,
            'operating_system_type': str,
            'primary_cluster_id': str,
            'share_type': str,
            'sla_assignment': SlaAssignment,
            'snap_diff_enabled_descendant_count': int,
            'status': str,
            'username': str
        }

        self.attribute_map = {
            'alias': 'alias',
            'descendant_count': 'descendantCount',
            'domain': 'domain',
            'export_point': 'exportPoint',
            'filesets': 'filesets',
            'host_id': 'hostId',
            'hostname': 'hostname',
            'id': 'id',
            'is_change_list': 'isChangeList',
            'is_on_snap_mirror_dest_volume': 'isOnSnapMirrorDestVolume',
            'is_snap_diff': 'isSnapDiff',
            'isilon_changelist_enabled_descendant_count': 'isilonChangelistEnabledDescendantCount',
            'name': 'name',
            'nas_base_config': 'nasBaseConfig',
            'object_type': 'objectType',
            'operating_system': 'operatingSystem',
            'operating_system_type': 'operatingSystemType',
            'primary_cluster_id': 'primaryClusterId',
            'share_type': 'shareType',
            'sla_assignment': 'slaAssignment',
            'snap_diff_enabled_descendant_count': 'snapDiffEnabledDescendantCount',
            'status': 'status',
            'username': 'username'
        }

        self._alias = alias
        self._descendant_count = descendant_count
        self._domain = domain
        self._export_point = export_point
        self._filesets = filesets
        self._host_id = host_id
        self._hostname = hostname
        self._id = id
        self._is_change_list = is_change_list
        self._is_on_snap_mirror_dest_volume = is_on_snap_mirror_dest_volume
        self._is_snap_diff = is_snap_diff
        self._isilon_changelist_enabled_descendant_count = isilon_changelist_enabled_descendant_count
        self._name = name
        self._nas_base_config = nas_base_config
        self._object_type = object_type
        self._operating_system = operating_system
        self._operating_system_type = operating_system_type
        self._primary_cluster_id = primary_cluster_id
        self._share_type = share_type
        self._sla_assignment = sla_assignment
        self._snap_diff_enabled_descendant_count = snap_diff_enabled_descendant_count
        self._status = status
        self._username = username

    @classmethod
    def from_dict(cls, dikt: dict) -> 'HostHierarchyObjectSummary':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The HostHierarchyObjectSummary of this HostHierarchyObjectSummary.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def alias(self):
        """Gets the alias of this HostHierarchyObjectSummary.

        A user-specified string that returns this host in searches for host/share hierarchy objects. Only valid for host object.

        :return: The alias of this HostHierarchyObjectSummary.
        :rtype: str
        """
        return self._alias

    @alias.setter
    def alias(self, alias):
        """Sets the alias of this HostHierarchyObjectSummary.

        A user-specified string that returns this host in searches for host/share hierarchy objects. Only valid for host object.

        :param alias: The alias of this HostHierarchyObjectSummary.
        :type alias: str
        """

        self._alias = alias

    @property
    def descendant_count(self):
        """Gets the descendant_count of this HostHierarchyObjectSummary.


        :return: The descendant_count of this HostHierarchyObjectSummary.
        :rtype: HostHierarchyObjectDescendantCount
        """
        return self._descendant_count

    @descendant_count.setter
    def descendant_count(self, descendant_count):
        """Sets the descendant_count of this HostHierarchyObjectSummary.


        :param descendant_count: The descendant_count of this HostHierarchyObjectSummary.
        :type descendant_count: HostHierarchyObjectDescendantCount
        """
        if descendant_count is None:
            raise ValueError("Invalid value for `descendant_count`, must not be `None`")

        self._descendant_count = descendant_count

    @property
    def domain(self):
        """Gets the domain of this HostHierarchyObjectSummary.

        The share domain name. This value is only valid for host share objects.

        :return: The domain of this HostHierarchyObjectSummary.
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this HostHierarchyObjectSummary.

        The share domain name. This value is only valid for host share objects.

        :param domain: The domain of this HostHierarchyObjectSummary.
        :type domain: str
        """

        self._domain = domain

    @property
    def export_point(self):
        """Gets the export_point of this HostHierarchyObjectSummary.

        The export point of host/share hierarchy objects. Only valid for share object.

        :return: The export_point of this HostHierarchyObjectSummary.
        :rtype: str
        """
        return self._export_point

    @export_point.setter
    def export_point(self, export_point):
        """Sets the export_point of this HostHierarchyObjectSummary.

        The export point of host/share hierarchy objects. Only valid for share object.

        :param export_point: The export_point of this HostHierarchyObjectSummary.
        :type export_point: str
        """

        self._export_point = export_point

    @property
    def filesets(self):
        """Gets the filesets of this HostHierarchyObjectSummary.

        Fileset summary for the host/share hierarchy object. Only valid for share object.

        :return: The filesets of this HostHierarchyObjectSummary.
        :rtype: List[FilesetSummary]
        """
        return self._filesets

    @filesets.setter
    def filesets(self, filesets):
        """Sets the filesets of this HostHierarchyObjectSummary.

        Fileset summary for the host/share hierarchy object. Only valid for share object.

        :param filesets: The filesets of this HostHierarchyObjectSummary.
        :type filesets: List[FilesetSummary]
        """

        self._filesets = filesets

    @property
    def host_id(self):
        """Gets the host_id of this HostHierarchyObjectSummary.

        The host ID of host/share hierarchy objects. Only valid for share object.

        :return: The host_id of this HostHierarchyObjectSummary.
        :rtype: str
        """
        return self._host_id

    @host_id.setter
    def host_id(self, host_id):
        """Sets the host_id of this HostHierarchyObjectSummary.

        The host ID of host/share hierarchy objects. Only valid for share object.

        :param host_id: The host_id of this HostHierarchyObjectSummary.
        :type host_id: str
        """

        self._host_id = host_id

    @property
    def hostname(self):
        """Gets the hostname of this HostHierarchyObjectSummary.

        The host name of host/share hierarchy objects. Only valid for share object.

        :return: The hostname of this HostHierarchyObjectSummary.
        :rtype: str
        """
        return self._hostname

    @hostname.setter
    def hostname(self, hostname):
        """Sets the hostname of this HostHierarchyObjectSummary.

        The host name of host/share hierarchy objects. Only valid for share object.

        :param hostname: The hostname of this HostHierarchyObjectSummary.
        :type hostname: str
        """

        self._hostname = hostname

    @property
    def id(self):
        """Gets the id of this HostHierarchyObjectSummary.

        ID assigned to the host/share hierarchy object.

        :return: The id of this HostHierarchyObjectSummary.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this HostHierarchyObjectSummary.

        ID assigned to the host/share hierarchy object.

        :param id: The id of this HostHierarchyObjectSummary.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def is_change_list(self):
        """Gets the is_change_list of this HostHierarchyObjectSummary.

        A Boolean that specifies whether ChangeList is enabled for the host/share hierarchy object. Only valid for share objects.

        :return: The is_change_list of this HostHierarchyObjectSummary.
        :rtype: bool
        """
        return self._is_change_list

    @is_change_list.setter
    def is_change_list(self, is_change_list):
        """Sets the is_change_list of this HostHierarchyObjectSummary.

        A Boolean that specifies whether ChangeList is enabled for the host/share hierarchy object. Only valid for share objects.

        :param is_change_list: The is_change_list of this HostHierarchyObjectSummary.
        :type is_change_list: bool
        """

        self._is_change_list = is_change_list

    @property
    def is_on_snap_mirror_dest_volume(self):
        """Gets the is_on_snap_mirror_dest_volume of this HostHierarchyObjectSummary.

        Indicates if the NetApp SnapMirror destination volume includes the NAS share. Only valid for share objects.

        :return: The is_on_snap_mirror_dest_volume of this HostHierarchyObjectSummary.
        :rtype: bool
        """
        return self._is_on_snap_mirror_dest_volume

    @is_on_snap_mirror_dest_volume.setter
    def is_on_snap_mirror_dest_volume(self, is_on_snap_mirror_dest_volume):
        """Sets the is_on_snap_mirror_dest_volume of this HostHierarchyObjectSummary.

        Indicates if the NetApp SnapMirror destination volume includes the NAS share. Only valid for share objects.

        :param is_on_snap_mirror_dest_volume: The is_on_snap_mirror_dest_volume of this HostHierarchyObjectSummary.
        :type is_on_snap_mirror_dest_volume: bool
        """

        self._is_on_snap_mirror_dest_volume = is_on_snap_mirror_dest_volume

    @property
    def is_snap_diff(self):
        """Gets the is_snap_diff of this HostHierarchyObjectSummary.

        A Boolean that specifies whether SnapDiff is enabled for the host/share hierarchy object. Only valid for share objects.

        :return: The is_snap_diff of this HostHierarchyObjectSummary.
        :rtype: bool
        """
        return self._is_snap_diff

    @is_snap_diff.setter
    def is_snap_diff(self, is_snap_diff):
        """Sets the is_snap_diff of this HostHierarchyObjectSummary.

        A Boolean that specifies whether SnapDiff is enabled for the host/share hierarchy object. Only valid for share objects.

        :param is_snap_diff: The is_snap_diff of this HostHierarchyObjectSummary.
        :type is_snap_diff: bool
        """

        self._is_snap_diff = is_snap_diff

    @property
    def isilon_changelist_enabled_descendant_count(self):
        """Gets the isilon_changelist_enabled_descendant_count of this HostHierarchyObjectSummary.

        The number of host shares that have the Isilon Changelist feature enabled which improves incremental backup performance by tracking the difference between two snapshots, reducing the metadata scanning time during a backup job. This value is only valid for physical host objects.

        :return: The isilon_changelist_enabled_descendant_count of this HostHierarchyObjectSummary.
        :rtype: int
        """
        return self._isilon_changelist_enabled_descendant_count

    @isilon_changelist_enabled_descendant_count.setter
    def isilon_changelist_enabled_descendant_count(self, isilon_changelist_enabled_descendant_count):
        """Sets the isilon_changelist_enabled_descendant_count of this HostHierarchyObjectSummary.

        The number of host shares that have the Isilon Changelist feature enabled which improves incremental backup performance by tracking the difference between two snapshots, reducing the metadata scanning time during a backup job. This value is only valid for physical host objects.

        :param isilon_changelist_enabled_descendant_count: The isilon_changelist_enabled_descendant_count of this HostHierarchyObjectSummary.
        :type isilon_changelist_enabled_descendant_count: int
        """

        self._isilon_changelist_enabled_descendant_count = isilon_changelist_enabled_descendant_count

    @property
    def name(self):
        """Gets the name of this HostHierarchyObjectSummary.

        The name of host/share hierarchy objects. Only valid for host object.

        :return: The name of this HostHierarchyObjectSummary.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this HostHierarchyObjectSummary.

        The name of host/share hierarchy objects. Only valid for host object.

        :param name: The name of this HostHierarchyObjectSummary.
        :type name: str
        """

        self._name = name

    @property
    def nas_base_config(self):
        """Gets the nas_base_config of this HostHierarchyObjectSummary.


        :return: The nas_base_config of this HostHierarchyObjectSummary.
        :rtype: NasBaseConfig
        """
        return self._nas_base_config

    @nas_base_config.setter
    def nas_base_config(self, nas_base_config):
        """Sets the nas_base_config of this HostHierarchyObjectSummary.


        :param nas_base_config: The nas_base_config of this HostHierarchyObjectSummary.
        :type nas_base_config: NasBaseConfig
        """

        self._nas_base_config = nas_base_config

    @property
    def object_type(self):
        """Gets the object_type of this HostHierarchyObjectSummary.


        :return: The object_type of this HostHierarchyObjectSummary.
        :rtype: HostObjectType
        """
        return self._object_type

    @object_type.setter
    def object_type(self, object_type):
        """Sets the object_type of this HostHierarchyObjectSummary.


        :param object_type: The object_type of this HostHierarchyObjectSummary.
        :type object_type: HostObjectType
        """
        if object_type is None:
            raise ValueError("Invalid value for `object_type`, must not be `None`")

        self._object_type = object_type

    @property
    def operating_system(self):
        """Gets the operating_system of this HostHierarchyObjectSummary.

        The operating system detailed information of host/share hierarchy objects. Only valid for physical host object.

        :return: The operating_system of this HostHierarchyObjectSummary.
        :rtype: str
        """
        return self._operating_system

    @operating_system.setter
    def operating_system(self, operating_system):
        """Sets the operating_system of this HostHierarchyObjectSummary.

        The operating system detailed information of host/share hierarchy objects. Only valid for physical host object.

        :param operating_system: The operating_system of this HostHierarchyObjectSummary.
        :type operating_system: str
        """

        self._operating_system = operating_system

    @property
    def operating_system_type(self):
        """Gets the operating_system_type of this HostHierarchyObjectSummary.

        The operating system type of host/share hierarchy objects. Only valid for physical host object.

        :return: The operating_system_type of this HostHierarchyObjectSummary.
        :rtype: str
        """
        return self._operating_system_type

    @operating_system_type.setter
    def operating_system_type(self, operating_system_type):
        """Sets the operating_system_type of this HostHierarchyObjectSummary.

        The operating system type of host/share hierarchy objects. Only valid for physical host object.

        :param operating_system_type: The operating_system_type of this HostHierarchyObjectSummary.
        :type operating_system_type: str
        """

        self._operating_system_type = operating_system_type

    @property
    def primary_cluster_id(self):
        """Gets the primary_cluster_id of this HostHierarchyObjectSummary.


        :return: The primary_cluster_id of this HostHierarchyObjectSummary.
        :rtype: str
        """
        return self._primary_cluster_id

    @primary_cluster_id.setter
    def primary_cluster_id(self, primary_cluster_id):
        """Sets the primary_cluster_id of this HostHierarchyObjectSummary.


        :param primary_cluster_id: The primary_cluster_id of this HostHierarchyObjectSummary.
        :type primary_cluster_id: str
        """
        if primary_cluster_id is None:
            raise ValueError("Invalid value for `primary_cluster_id`, must not be `None`")

        self._primary_cluster_id = primary_cluster_id

    @property
    def share_type(self):
        """Gets the share_type of this HostHierarchyObjectSummary.


        :return: The share_type of this HostHierarchyObjectSummary.
        :rtype: str
        """
        return self._share_type

    @share_type.setter
    def share_type(self, share_type):
        """Sets the share_type of this HostHierarchyObjectSummary.


        :param share_type: The share_type of this HostHierarchyObjectSummary.
        :type share_type: str
        """
        allowed_values = ["NFS", "SMB"]  # noqa: E501
        if share_type not in allowed_values:
            raise ValueError(
                "Invalid value for `share_type` ({0}), must be one of {1}"
                .format(share_type, allowed_values)
            )

        self._share_type = share_type

    @property
    def sla_assignment(self):
        """Gets the sla_assignment of this HostHierarchyObjectSummary.


        :return: The sla_assignment of this HostHierarchyObjectSummary.
        :rtype: SlaAssignment
        """
        return self._sla_assignment

    @sla_assignment.setter
    def sla_assignment(self, sla_assignment):
        """Sets the sla_assignment of this HostHierarchyObjectSummary.


        :param sla_assignment: The sla_assignment of this HostHierarchyObjectSummary.
        :type sla_assignment: SlaAssignment
        """

        self._sla_assignment = sla_assignment

    @property
    def snap_diff_enabled_descendant_count(self):
        """Gets the snap_diff_enabled_descendant_count of this HostHierarchyObjectSummary.

        The number of host shares that have enabled SnapDiff. This value is only valid for physical host objects.

        :return: The snap_diff_enabled_descendant_count of this HostHierarchyObjectSummary.
        :rtype: int
        """
        return self._snap_diff_enabled_descendant_count

    @snap_diff_enabled_descendant_count.setter
    def snap_diff_enabled_descendant_count(self, snap_diff_enabled_descendant_count):
        """Sets the snap_diff_enabled_descendant_count of this HostHierarchyObjectSummary.

        The number of host shares that have enabled SnapDiff. This value is only valid for physical host objects.

        :param snap_diff_enabled_descendant_count: The snap_diff_enabled_descendant_count of this HostHierarchyObjectSummary.
        :type snap_diff_enabled_descendant_count: int
        """

        self._snap_diff_enabled_descendant_count = snap_diff_enabled_descendant_count

    @property
    def status(self):
        """Gets the status of this HostHierarchyObjectSummary.


        :return: The status of this HostHierarchyObjectSummary.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this HostHierarchyObjectSummary.


        :param status: The status of this HostHierarchyObjectSummary.
        :type status: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status

    @property
    def username(self):
        """Gets the username of this HostHierarchyObjectSummary.

        The share user name. This value is only valid for host share objects.

        :return: The username of this HostHierarchyObjectSummary.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this HostHierarchyObjectSummary.

        The share user name. This value is only valid for host share objects.

        :param username: The username of this HostHierarchyObjectSummary.
        :type username: str
        """

        self._username = username
