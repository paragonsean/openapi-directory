# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SapHanaHost(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, host_name: str=None, host_type: str=None, host_uuid: str=None, sap_hana_host_name: str=None, status: str=None):
        """SapHanaHost - a model defined in OpenAPI

        :param host_name: The host_name of this SapHanaHost.
        :param host_type: The host_type of this SapHanaHost.
        :param host_uuid: The host_uuid of this SapHanaHost.
        :param sap_hana_host_name: The sap_hana_host_name of this SapHanaHost.
        :param status: The status of this SapHanaHost.
        """
        self.openapi_types = {
            'host_name': str,
            'host_type': str,
            'host_uuid': str,
            'sap_hana_host_name': str,
            'status': str
        }

        self.attribute_map = {
            'host_name': 'hostName',
            'host_type': 'hostType',
            'host_uuid': 'hostUuid',
            'sap_hana_host_name': 'sapHanaHostName',
            'status': 'status'
        }

        self._host_name = host_name
        self._host_type = host_type
        self._host_uuid = host_uuid
        self._sap_hana_host_name = sap_hana_host_name
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SapHanaHost':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SapHanaHost of this SapHanaHost.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def host_name(self):
        """Gets the host_name of this SapHanaHost.

        The IP address or fully qualified domain name of the SAP HANA host.

        :return: The host_name of this SapHanaHost.
        :rtype: str
        """
        return self._host_name

    @host_name.setter
    def host_name(self, host_name):
        """Sets the host_name of this SapHanaHost.

        The IP address or fully qualified domain name of the SAP HANA host.

        :param host_name: The host_name of this SapHanaHost.
        :type host_name: str
        """
        if host_name is None:
            raise ValueError("Invalid value for `host_name`, must not be `None`")

        self._host_name = host_name

    @property
    def host_type(self):
        """Gets the host_type of this SapHanaHost.

        The type of the SAP HANA system host. Possible values are MASTER, SLAVE, SECONDARY_MASTER or SECONDARY_SLAVE .

        :return: The host_type of this SapHanaHost.
        :rtype: str
        """
        return self._host_type

    @host_type.setter
    def host_type(self, host_type):
        """Sets the host_type of this SapHanaHost.

        The type of the SAP HANA system host. Possible values are MASTER, SLAVE, SECONDARY_MASTER or SECONDARY_SLAVE .

        :param host_type: The host_type of this SapHanaHost.
        :type host_type: str
        """
        allowed_values = ["MASTER", "SLAVE", "SECONDARY_MASTER", "SECONDARY_SLAVE"]  # noqa: E501
        if host_type not in allowed_values:
            raise ValueError(
                "Invalid value for `host_type` ({0}), must be one of {1}"
                .format(host_type, allowed_values)
            )

        self._host_type = host_type

    @property
    def host_uuid(self):
        """Gets the host_uuid of this SapHanaHost.

        The ID of the SAP HANA system host.

        :return: The host_uuid of this SapHanaHost.
        :rtype: str
        """
        return self._host_uuid

    @host_uuid.setter
    def host_uuid(self, host_uuid):
        """Sets the host_uuid of this SapHanaHost.

        The ID of the SAP HANA system host.

        :param host_uuid: The host_uuid of this SapHanaHost.
        :type host_uuid: str
        """
        if host_uuid is None:
            raise ValueError("Invalid value for `host_uuid`, must not be `None`")

        self._host_uuid = host_uuid

    @property
    def sap_hana_host_name(self):
        """Gets the sap_hana_host_name of this SapHanaHost.

        The local name of the SAP HANA host.

        :return: The sap_hana_host_name of this SapHanaHost.
        :rtype: str
        """
        return self._sap_hana_host_name

    @sap_hana_host_name.setter
    def sap_hana_host_name(self, sap_hana_host_name):
        """Sets the sap_hana_host_name of this SapHanaHost.

        The local name of the SAP HANA host.

        :param sap_hana_host_name: The sap_hana_host_name of this SapHanaHost.
        :type sap_hana_host_name: str
        """

        self._sap_hana_host_name = sap_hana_host_name

    @property
    def status(self):
        """Gets the status of this SapHanaHost.

        The status of the SAP HANA system host.

        :return: The status of this SapHanaHost.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this SapHanaHost.

        The status of the SAP HANA system host.

        :param status: The status of this SapHanaHost.
        :type status: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status
