# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SnapshotLocationRetentionInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, expiration_time: datetime=None, id: str=None, is_expiration_date_calculated: bool=None, is_expiration_information_unavailable: bool=None, is_snapshot_present: bool=None, name: str=None, snapshot_frequency: str=None):
        """SnapshotLocationRetentionInfo - a model defined in OpenAPI

        :param expiration_time: The expiration_time of this SnapshotLocationRetentionInfo.
        :param id: The id of this SnapshotLocationRetentionInfo.
        :param is_expiration_date_calculated: The is_expiration_date_calculated of this SnapshotLocationRetentionInfo.
        :param is_expiration_information_unavailable: The is_expiration_information_unavailable of this SnapshotLocationRetentionInfo.
        :param is_snapshot_present: The is_snapshot_present of this SnapshotLocationRetentionInfo.
        :param name: The name of this SnapshotLocationRetentionInfo.
        :param snapshot_frequency: The snapshot_frequency of this SnapshotLocationRetentionInfo.
        """
        self.openapi_types = {
            'expiration_time': datetime,
            'id': str,
            'is_expiration_date_calculated': bool,
            'is_expiration_information_unavailable': bool,
            'is_snapshot_present': bool,
            'name': str,
            'snapshot_frequency': str
        }

        self.attribute_map = {
            'expiration_time': 'expirationTime',
            'id': 'id',
            'is_expiration_date_calculated': 'isExpirationDateCalculated',
            'is_expiration_information_unavailable': 'isExpirationInformationUnavailable',
            'is_snapshot_present': 'isSnapshotPresent',
            'name': 'name',
            'snapshot_frequency': 'snapshotFrequency'
        }

        self._expiration_time = expiration_time
        self._id = id
        self._is_expiration_date_calculated = is_expiration_date_calculated
        self._is_expiration_information_unavailable = is_expiration_information_unavailable
        self._is_snapshot_present = is_snapshot_present
        self._name = name
        self._snapshot_frequency = snapshot_frequency

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SnapshotLocationRetentionInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SnapshotLocationRetentionInfo of this SnapshotLocationRetentionInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def expiration_time(self):
        """Gets the expiration_time of this SnapshotLocationRetentionInfo.

        Time when the snapshot expired or is expected to expire at this location. This field will only be set if the snapshot has ever existed at the location. If the snapshot is present at the location, but the expiration time calculation is pending, this field will be absent. If the expiration time calculation is complete and the field is still absent, the snapshot will be retained forever at this location.

        :return: The expiration_time of this SnapshotLocationRetentionInfo.
        :rtype: datetime
        """
        return self._expiration_time

    @expiration_time.setter
    def expiration_time(self, expiration_time):
        """Sets the expiration_time of this SnapshotLocationRetentionInfo.

        Time when the snapshot expired or is expected to expire at this location. This field will only be set if the snapshot has ever existed at the location. If the snapshot is present at the location, but the expiration time calculation is pending, this field will be absent. If the expiration time calculation is complete and the field is still absent, the snapshot will be retained forever at this location.

        :param expiration_time: The expiration_time of this SnapshotLocationRetentionInfo.
        :type expiration_time: datetime
        """

        self._expiration_time = expiration_time

    @property
    def id(self):
        """Gets the id of this SnapshotLocationRetentionInfo.

        ID of the location.

        :return: The id of this SnapshotLocationRetentionInfo.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SnapshotLocationRetentionInfo.

        ID of the location.

        :param id: The id of this SnapshotLocationRetentionInfo.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def is_expiration_date_calculated(self):
        """Gets the is_expiration_date_calculated of this SnapshotLocationRetentionInfo.

        A Boolean that indicates whether expiration date for snapshot has been calculated. This field will be absent if the snapshot has never existed at this location.

        :return: The is_expiration_date_calculated of this SnapshotLocationRetentionInfo.
        :rtype: bool
        """
        return self._is_expiration_date_calculated

    @is_expiration_date_calculated.setter
    def is_expiration_date_calculated(self, is_expiration_date_calculated):
        """Sets the is_expiration_date_calculated of this SnapshotLocationRetentionInfo.

        A Boolean that indicates whether expiration date for snapshot has been calculated. This field will be absent if the snapshot has never existed at this location.

        :param is_expiration_date_calculated: The is_expiration_date_calculated of this SnapshotLocationRetentionInfo.
        :type is_expiration_date_calculated: bool
        """

        self._is_expiration_date_calculated = is_expiration_date_calculated

    @property
    def is_expiration_information_unavailable(self):
        """Gets the is_expiration_information_unavailable of this SnapshotLocationRetentionInfo.

        Indicates whether expiration information of the snapshot is unavailable at this location. This field is always and only present for replication locations. Its value is true if and only if the replicated snapshots are from pre-5.2 cluster. 

        :return: The is_expiration_information_unavailable of this SnapshotLocationRetentionInfo.
        :rtype: bool
        """
        return self._is_expiration_information_unavailable

    @is_expiration_information_unavailable.setter
    def is_expiration_information_unavailable(self, is_expiration_information_unavailable):
        """Sets the is_expiration_information_unavailable of this SnapshotLocationRetentionInfo.

        Indicates whether expiration information of the snapshot is unavailable at this location. This field is always and only present for replication locations. Its value is true if and only if the replicated snapshots are from pre-5.2 cluster. 

        :param is_expiration_information_unavailable: The is_expiration_information_unavailable of this SnapshotLocationRetentionInfo.
        :type is_expiration_information_unavailable: bool
        """

        self._is_expiration_information_unavailable = is_expiration_information_unavailable

    @property
    def is_snapshot_present(self):
        """Gets the is_snapshot_present of this SnapshotLocationRetentionInfo.

        Boolean that specifies whether the snapshot is present at this location. When this value is 'false,' the snapshot is expired at this location. Because retention information is unreliable for locations where the snapshots are not present, confirming that this value is 'true' is the best practice.

        :return: The is_snapshot_present of this SnapshotLocationRetentionInfo.
        :rtype: bool
        """
        return self._is_snapshot_present

    @is_snapshot_present.setter
    def is_snapshot_present(self, is_snapshot_present):
        """Sets the is_snapshot_present of this SnapshotLocationRetentionInfo.

        Boolean that specifies whether the snapshot is present at this location. When this value is 'false,' the snapshot is expired at this location. Because retention information is unreliable for locations where the snapshots are not present, confirming that this value is 'true' is the best practice.

        :param is_snapshot_present: The is_snapshot_present of this SnapshotLocationRetentionInfo.
        :type is_snapshot_present: bool
        """
        if is_snapshot_present is None:
            raise ValueError("Invalid value for `is_snapshot_present`, must not be `None`")

        self._is_snapshot_present = is_snapshot_present

    @property
    def name(self):
        """Gets the name of this SnapshotLocationRetentionInfo.

        Name of the location.

        :return: The name of this SnapshotLocationRetentionInfo.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SnapshotLocationRetentionInfo.

        Name of the location.

        :param name: The name of this SnapshotLocationRetentionInfo.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def snapshot_frequency(self):
        """Gets the snapshot_frequency of this SnapshotLocationRetentionInfo.

        The tag to determine what frequency the snapshot corresponds to at this location. The snapshot tag can be hourly, daily, weekly, monthly, quarterly, or yearly depending on the SLA frequency which is used to determine the retention of the snapshot. A value of \"Ready for Deletion\" means that the snapshot will be deleted soon. A value of \"Forever\" means that the snapshot will never be deleted. This field is absent when the tag computation is incomplete. 

        :return: The snapshot_frequency of this SnapshotLocationRetentionInfo.
        :rtype: str
        """
        return self._snapshot_frequency

    @snapshot_frequency.setter
    def snapshot_frequency(self, snapshot_frequency):
        """Sets the snapshot_frequency of this SnapshotLocationRetentionInfo.

        The tag to determine what frequency the snapshot corresponds to at this location. The snapshot tag can be hourly, daily, weekly, monthly, quarterly, or yearly depending on the SLA frequency which is used to determine the retention of the snapshot. A value of \"Ready for Deletion\" means that the snapshot will be deleted soon. A value of \"Forever\" means that the snapshot will never be deleted. This field is absent when the tag computation is incomplete. 

        :param snapshot_frequency: The snapshot_frequency of this SnapshotLocationRetentionInfo.
        :type snapshot_frequency: str
        """

        self._snapshot_frequency = snapshot_frequency
