# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.role_info import RoleInfo
from openapi_server import util


class RoleInfoWithPrincipals(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, principals: List[str]=None, role: RoleInfo=None):
        """RoleInfoWithPrincipals - a model defined in OpenAPI

        :param principals: The principals of this RoleInfoWithPrincipals.
        :param role: The role of this RoleInfoWithPrincipals.
        """
        self.openapi_types = {
            'principals': List[str],
            'role': RoleInfo
        }

        self.attribute_map = {
            'principals': 'principals',
            'role': 'role'
        }

        self._principals = principals
        self._role = role

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RoleInfoWithPrincipals':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RoleInfoWithPrincipals of this RoleInfoWithPrincipals.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def principals(self):
        """Gets the principals of this RoleInfoWithPrincipals.

        The principals that are assigned the role.

        :return: The principals of this RoleInfoWithPrincipals.
        :rtype: List[str]
        """
        return self._principals

    @principals.setter
    def principals(self, principals):
        """Sets the principals of this RoleInfoWithPrincipals.

        The principals that are assigned the role.

        :param principals: The principals of this RoleInfoWithPrincipals.
        :type principals: List[str]
        """
        if principals is None:
            raise ValueError("Invalid value for `principals`, must not be `None`")

        self._principals = principals

    @property
    def role(self):
        """Gets the role of this RoleInfoWithPrincipals.


        :return: The role of this RoleInfoWithPrincipals.
        :rtype: RoleInfo
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this RoleInfoWithPrincipals.


        :param role: The role of this RoleInfoWithPrincipals.
        :type role: RoleInfo
        """
        if role is None:
            raise ValueError("Invalid value for `role`, must not be `None`")

        self._role = role
