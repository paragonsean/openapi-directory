# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.file_system_type import FileSystemType
from openapi_server import util


class HostVolumeSummary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, file_system_type: FileSystemType=None, id: str=None, mount_points: List[str]=None, size: int=None, is_currently_present_on_system: bool=None, natural_id: str=None, volume_group_id: str=None):
        """HostVolumeSummary - a model defined in OpenAPI

        :param file_system_type: The file_system_type of this HostVolumeSummary.
        :param id: The id of this HostVolumeSummary.
        :param mount_points: The mount_points of this HostVolumeSummary.
        :param size: The size of this HostVolumeSummary.
        :param is_currently_present_on_system: The is_currently_present_on_system of this HostVolumeSummary.
        :param natural_id: The natural_id of this HostVolumeSummary.
        :param volume_group_id: The volume_group_id of this HostVolumeSummary.
        """
        self.openapi_types = {
            'file_system_type': FileSystemType,
            'id': str,
            'mount_points': List[str],
            'size': int,
            'is_currently_present_on_system': bool,
            'natural_id': str,
            'volume_group_id': str
        }

        self.attribute_map = {
            'file_system_type': 'fileSystemType',
            'id': 'id',
            'mount_points': 'mountPoints',
            'size': 'size',
            'is_currently_present_on_system': 'isCurrentlyPresentOnSystem',
            'natural_id': 'naturalId',
            'volume_group_id': 'volumeGroupId'
        }

        self._file_system_type = file_system_type
        self._id = id
        self._mount_points = mount_points
        self._size = size
        self._is_currently_present_on_system = is_currently_present_on_system
        self._natural_id = natural_id
        self._volume_group_id = volume_group_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'HostVolumeSummary':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The HostVolumeSummary of this HostVolumeSummary.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def file_system_type(self):
        """Gets the file_system_type of this HostVolumeSummary.


        :return: The file_system_type of this HostVolumeSummary.
        :rtype: FileSystemType
        """
        return self._file_system_type

    @file_system_type.setter
    def file_system_type(self, file_system_type):
        """Sets the file_system_type of this HostVolumeSummary.


        :param file_system_type: The file_system_type of this HostVolumeSummary.
        :type file_system_type: FileSystemType
        """
        if file_system_type is None:
            raise ValueError("Invalid value for `file_system_type`, must not be `None`")

        self._file_system_type = file_system_type

    @property
    def id(self):
        """Gets the id of this HostVolumeSummary.

        The unique ID of the snapshot volume summary.

        :return: The id of this HostVolumeSummary.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this HostVolumeSummary.

        The unique ID of the snapshot volume summary.

        :param id: The id of this HostVolumeSummary.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def mount_points(self):
        """Gets the mount_points of this HostVolumeSummary.

        The mount points of the volume on the host.

        :return: The mount_points of this HostVolumeSummary.
        :rtype: List[str]
        """
        return self._mount_points

    @mount_points.setter
    def mount_points(self, mount_points):
        """Sets the mount_points of this HostVolumeSummary.

        The mount points of the volume on the host.

        :param mount_points: The mount_points of this HostVolumeSummary.
        :type mount_points: List[str]
        """
        if mount_points is None:
            raise ValueError("Invalid value for `mount_points`, must not be `None`")

        self._mount_points = mount_points

    @property
    def size(self):
        """Gets the size of this HostVolumeSummary.

        The size of the volume in bytes.

        :return: The size of this HostVolumeSummary.
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this HostVolumeSummary.

        The size of the volume in bytes.

        :param size: The size of this HostVolumeSummary.
        :type size: int
        """
        if size is None:
            raise ValueError("Invalid value for `size`, must not be `None`")

        self._size = size

    @property
    def is_currently_present_on_system(self):
        """Gets the is_currently_present_on_system of this HostVolumeSummary.

        Indicates whether a volume is present on the host. When 'true', the volume is present. When 'false', the volume is not present. Volumes that are not present on the host are still included in snapshots and trigger warnings until the missing volumes are excluded from snapshots.

        :return: The is_currently_present_on_system of this HostVolumeSummary.
        :rtype: bool
        """
        return self._is_currently_present_on_system

    @is_currently_present_on_system.setter
    def is_currently_present_on_system(self, is_currently_present_on_system):
        """Sets the is_currently_present_on_system of this HostVolumeSummary.

        Indicates whether a volume is present on the host. When 'true', the volume is present. When 'false', the volume is not present. Volumes that are not present on the host are still included in snapshots and trigger warnings until the missing volumes are excluded from snapshots.

        :param is_currently_present_on_system: The is_currently_present_on_system of this HostVolumeSummary.
        :type is_currently_present_on_system: bool
        """
        if is_currently_present_on_system is None:
            raise ValueError("Invalid value for `is_currently_present_on_system`, must not be `None`")

        self._is_currently_present_on_system = is_currently_present_on_system

    @property
    def natural_id(self):
        """Gets the natural_id of this HostVolumeSummary.

        The unique ID of the volume on the Windows host.

        :return: The natural_id of this HostVolumeSummary.
        :rtype: str
        """
        return self._natural_id

    @natural_id.setter
    def natural_id(self, natural_id):
        """Sets the natural_id of this HostVolumeSummary.

        The unique ID of the volume on the Windows host.

        :param natural_id: The natural_id of this HostVolumeSummary.
        :type natural_id: str
        """
        if natural_id is None:
            raise ValueError("Invalid value for `natural_id`, must not be `None`")

        self._natural_id = natural_id

    @property
    def volume_group_id(self):
        """Gets the volume_group_id of this HostVolumeSummary.

        The unique ID of the Volume Group.

        :return: The volume_group_id of this HostVolumeSummary.
        :rtype: str
        """
        return self._volume_group_id

    @volume_group_id.setter
    def volume_group_id(self, volume_group_id):
        """Sets the volume_group_id of this HostVolumeSummary.

        The unique ID of the Volume Group.

        :param volume_group_id: The volume_group_id of this HostVolumeSummary.
        :type volume_group_id: str
        """

        self._volume_group_id = volume_group_id
