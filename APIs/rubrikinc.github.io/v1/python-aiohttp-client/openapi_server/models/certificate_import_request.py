# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CertificateImportRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, csr_id: str=None, description: str=None, name: str=None, pem_file: str=None, private_key: str=None):
        """CertificateImportRequest - a model defined in OpenAPI

        :param csr_id: The csr_id of this CertificateImportRequest.
        :param description: The description of this CertificateImportRequest.
        :param name: The name of this CertificateImportRequest.
        :param pem_file: The pem_file of this CertificateImportRequest.
        :param private_key: The private_key of this CertificateImportRequest.
        """
        self.openapi_types = {
            'csr_id': str,
            'description': str,
            'name': str,
            'pem_file': str,
            'private_key': str
        }

        self.attribute_map = {
            'csr_id': 'csrId',
            'description': 'description',
            'name': 'name',
            'pem_file': 'pemFile',
            'private_key': 'privateKey'
        }

        self._csr_id = csr_id
        self._description = description
        self._name = name
        self._pem_file = pem_file
        self._private_key = private_key

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CertificateImportRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CertificateImportRequest of this CertificateImportRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def csr_id(self):
        """Gets the csr_id of this CertificateImportRequest.

        ID of the certificate signing request (CSR) associated with the imported certificate.

        :return: The csr_id of this CertificateImportRequest.
        :rtype: str
        """
        return self._csr_id

    @csr_id.setter
    def csr_id(self, csr_id):
        """Sets the csr_id of this CertificateImportRequest.

        ID of the certificate signing request (CSR) associated with the imported certificate.

        :param csr_id: The csr_id of this CertificateImportRequest.
        :type csr_id: str
        """

        self._csr_id = csr_id

    @property
    def description(self):
        """Gets the description of this CertificateImportRequest.

        User-friendly description for the certificate.

        :return: The description of this CertificateImportRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CertificateImportRequest.

        User-friendly description for the certificate.

        :param description: The description of this CertificateImportRequest.
        :type description: str
        """

        self._description = description

    @property
    def name(self):
        """Gets the name of this CertificateImportRequest.

        Display name for the certificate.

        :return: The name of this CertificateImportRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CertificateImportRequest.

        Display name for the certificate.

        :param name: The name of this CertificateImportRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def pem_file(self):
        """Gets the pem_file of this CertificateImportRequest.

        The certificates, and optionally private key to be imported, in PEM format.

        :return: The pem_file of this CertificateImportRequest.
        :rtype: str
        """
        return self._pem_file

    @pem_file.setter
    def pem_file(self, pem_file):
        """Sets the pem_file of this CertificateImportRequest.

        The certificates, and optionally private key to be imported, in PEM format.

        :param pem_file: The pem_file of this CertificateImportRequest.
        :type pem_file: str
        """
        if pem_file is None:
            raise ValueError("Invalid value for `pem_file`, must not be `None`")

        self._pem_file = pem_file

    @property
    def private_key(self):
        """Gets the private_key of this CertificateImportRequest.

        The private key, in PEM format, to be imported. If a private key is provided using this field instead of the pemFile field, the import fails if the private key is not successfully parsed.

        :return: The private_key of this CertificateImportRequest.
        :rtype: str
        """
        return self._private_key

    @private_key.setter
    def private_key(self, private_key):
        """Sets the private_key of this CertificateImportRequest.

        The private key, in PEM format, to be imported. If a private key is provided using this field instead of the pemFile field, the import fails if the private key is not successfully parsed.

        :param private_key: The private_key of this CertificateImportRequest.
        :type private_key: str
        """

        self._private_key = private_key
