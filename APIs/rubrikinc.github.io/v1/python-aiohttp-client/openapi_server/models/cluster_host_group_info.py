# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.host_group_info import HostGroupInfo
from openapi_server import util


class ClusterHostGroupInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, datacenter_name: str=None, host_groups: List[HostGroupInfo]=None, id: str=None, name: str=None):
        """ClusterHostGroupInfo - a model defined in OpenAPI

        :param datacenter_name: The datacenter_name of this ClusterHostGroupInfo.
        :param host_groups: The host_groups of this ClusterHostGroupInfo.
        :param id: The id of this ClusterHostGroupInfo.
        :param name: The name of this ClusterHostGroupInfo.
        """
        self.openapi_types = {
            'datacenter_name': str,
            'host_groups': List[HostGroupInfo],
            'id': str,
            'name': str
        }

        self.attribute_map = {
            'datacenter_name': 'datacenterName',
            'host_groups': 'hostGroups',
            'id': 'id',
            'name': 'name'
        }

        self._datacenter_name = datacenter_name
        self._host_groups = host_groups
        self._id = id
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ClusterHostGroupInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ClusterHostGroupInfo of this ClusterHostGroupInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def datacenter_name(self):
        """Gets the datacenter_name of this ClusterHostGroupInfo.

        Name of data center the compute cluster is a member of.

        :return: The datacenter_name of this ClusterHostGroupInfo.
        :rtype: str
        """
        return self._datacenter_name

    @datacenter_name.setter
    def datacenter_name(self, datacenter_name):
        """Sets the datacenter_name of this ClusterHostGroupInfo.

        Name of data center the compute cluster is a member of.

        :param datacenter_name: The datacenter_name of this ClusterHostGroupInfo.
        :type datacenter_name: str
        """
        if datacenter_name is None:
            raise ValueError("Invalid value for `datacenter_name`, must not be `None`")

        self._datacenter_name = datacenter_name

    @property
    def host_groups(self):
        """Gets the host_groups of this ClusterHostGroupInfo.

        Host groups configured in the compute cluster.

        :return: The host_groups of this ClusterHostGroupInfo.
        :rtype: List[HostGroupInfo]
        """
        return self._host_groups

    @host_groups.setter
    def host_groups(self, host_groups):
        """Sets the host_groups of this ClusterHostGroupInfo.

        Host groups configured in the compute cluster.

        :param host_groups: The host_groups of this ClusterHostGroupInfo.
        :type host_groups: List[HostGroupInfo]
        """
        if host_groups is None:
            raise ValueError("Invalid value for `host_groups`, must not be `None`")

        self._host_groups = host_groups

    @property
    def id(self):
        """Gets the id of this ClusterHostGroupInfo.

        Moid of the compute cluster. This is not the Rubrik managed id.

        :return: The id of this ClusterHostGroupInfo.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ClusterHostGroupInfo.

        Moid of the compute cluster. This is not the Rubrik managed id.

        :param id: The id of this ClusterHostGroupInfo.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def name(self):
        """Gets the name of this ClusterHostGroupInfo.

        Name of the compute cluster.

        :return: The name of this ClusterHostGroupInfo.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ClusterHostGroupInfo.

        Name of the compute cluster.

        :param name: The name of this ClusterHostGroupInfo.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name
