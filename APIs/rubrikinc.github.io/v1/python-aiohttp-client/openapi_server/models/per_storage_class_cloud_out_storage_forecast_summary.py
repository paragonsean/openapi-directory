# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PerStorageClassCloudOutStorageForecastSummary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, storage_class: str=None, storage_cost_in_usd: List[int]=None, storage_used_in_gb: List[int]=None):
        """PerStorageClassCloudOutStorageForecastSummary - a model defined in OpenAPI

        :param storage_class: The storage_class of this PerStorageClassCloudOutStorageForecastSummary.
        :param storage_cost_in_usd: The storage_cost_in_usd of this PerStorageClassCloudOutStorageForecastSummary.
        :param storage_used_in_gb: The storage_used_in_gb of this PerStorageClassCloudOutStorageForecastSummary.
        """
        self.openapi_types = {
            'storage_class': str,
            'storage_cost_in_usd': List[int],
            'storage_used_in_gb': List[int]
        }

        self.attribute_map = {
            'storage_class': 'storageClass',
            'storage_cost_in_usd': 'storageCostInUSD',
            'storage_used_in_gb': 'storageUsedInGB'
        }

        self._storage_class = storage_class
        self._storage_cost_in_usd = storage_cost_in_usd
        self._storage_used_in_gb = storage_used_in_gb

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PerStorageClassCloudOutStorageForecastSummary':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PerStorageClassCloudOutStorageForecastSummary of this PerStorageClassCloudOutStorageForecastSummary.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def storage_class(self):
        """Gets the storage_class of this PerStorageClassCloudOutStorageForecastSummary.

        Storage class of the cloud archival location.

        :return: The storage_class of this PerStorageClassCloudOutStorageForecastSummary.
        :rtype: str
        """
        return self._storage_class

    @storage_class.setter
    def storage_class(self, storage_class):
        """Sets the storage_class of this PerStorageClassCloudOutStorageForecastSummary.

        Storage class of the cloud archival location.

        :param storage_class: The storage_class of this PerStorageClassCloudOutStorageForecastSummary.
        :type storage_class: str
        """
        if storage_class is None:
            raise ValueError("Invalid value for `storage_class`, must not be `None`")

        self._storage_class = storage_class

    @property
    def storage_cost_in_usd(self):
        """Gets the storage_cost_in_usd of this PerStorageClassCloudOutStorageForecastSummary.

        Storage costs, in USD, for a particular storage class in the cloud archival location. The list contains forecastPeriodInGranularityUnit values, one for each granularity period. For example, for a 3-year forecast period with a granularity of 'year', the list contains 3 values. The first value corresponds to the first year, the second value corresponds to the second year, and the third value corresponds to the third year.

        :return: The storage_cost_in_usd of this PerStorageClassCloudOutStorageForecastSummary.
        :rtype: List[int]
        """
        return self._storage_cost_in_usd

    @storage_cost_in_usd.setter
    def storage_cost_in_usd(self, storage_cost_in_usd):
        """Sets the storage_cost_in_usd of this PerStorageClassCloudOutStorageForecastSummary.

        Storage costs, in USD, for a particular storage class in the cloud archival location. The list contains forecastPeriodInGranularityUnit values, one for each granularity period. For example, for a 3-year forecast period with a granularity of 'year', the list contains 3 values. The first value corresponds to the first year, the second value corresponds to the second year, and the third value corresponds to the third year.

        :param storage_cost_in_usd: The storage_cost_in_usd of this PerStorageClassCloudOutStorageForecastSummary.
        :type storage_cost_in_usd: List[int]
        """
        if storage_cost_in_usd is None:
            raise ValueError("Invalid value for `storage_cost_in_usd`, must not be `None`")

        self._storage_cost_in_usd = storage_cost_in_usd

    @property
    def storage_used_in_gb(self):
        """Gets the storage_used_in_gb of this PerStorageClassCloudOutStorageForecastSummary.

        Storage values, in GBs, used on a particular storage class in the cloud archival location. The number of values in the list is specified by the value of the forecastPeriodInGranularityUnit parameter. Each value in the list is for the last day of the granularity period. For example, for a 3-year forecast period with a granularity of 'year', the list contains 3 values. First value corresponds to the last day of the first year. Second value corresponds to the last day of the second year. Third value corresponds to the last day of the third year.

        :return: The storage_used_in_gb of this PerStorageClassCloudOutStorageForecastSummary.
        :rtype: List[int]
        """
        return self._storage_used_in_gb

    @storage_used_in_gb.setter
    def storage_used_in_gb(self, storage_used_in_gb):
        """Sets the storage_used_in_gb of this PerStorageClassCloudOutStorageForecastSummary.

        Storage values, in GBs, used on a particular storage class in the cloud archival location. The number of values in the list is specified by the value of the forecastPeriodInGranularityUnit parameter. Each value in the list is for the last day of the granularity period. For example, for a 3-year forecast period with a granularity of 'year', the list contains 3 values. First value corresponds to the last day of the first year. Second value corresponds to the last day of the second year. Third value corresponds to the last day of the third year.

        :param storage_used_in_gb: The storage_used_in_gb of this PerStorageClassCloudOutStorageForecastSummary.
        :type storage_used_in_gb: List[int]
        """
        if storage_used_in_gb is None:
            raise ValueError("Invalid value for `storage_used_in_gb`, must not be `None`")

        self._storage_used_in_gb = storage_used_in_gb
