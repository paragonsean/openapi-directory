# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class FullyQualifiedDomainNameInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, fqdn: str=None):
        """FullyQualifiedDomainNameInfo - a model defined in OpenAPI

        :param fqdn: The fqdn of this FullyQualifiedDomainNameInfo.
        """
        self.openapi_types = {
            'fqdn': str
        }

        self.attribute_map = {
            'fqdn': 'fqdn'
        }

        self._fqdn = fqdn

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FullyQualifiedDomainNameInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FullyQualifiedDomainNameInfo of this FullyQualifiedDomainNameInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def fqdn(self):
        """Gets the fqdn of this FullyQualifiedDomainNameInfo.

        Fully qualified domain name where the filter should be hosted for install/upgrade operations.

        :return: The fqdn of this FullyQualifiedDomainNameInfo.
        :rtype: str
        """
        return self._fqdn

    @fqdn.setter
    def fqdn(self, fqdn):
        """Sets the fqdn of this FullyQualifiedDomainNameInfo.

        Fully qualified domain name where the filter should be hosted for install/upgrade operations.

        :param fqdn: The fqdn of this FullyQualifiedDomainNameInfo.
        :type fqdn: str
        """
        if fqdn is None:
            raise ValueError("Invalid value for `fqdn`, must not be `None`")

        self._fqdn = fqdn
