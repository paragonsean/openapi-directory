# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.precheck_failure_result import PrecheckFailureResult
from openapi_server.models.precheck_status_next_run_info import PrecheckStatusNextRunInfo
from openapi_server import util


class PrecheckStatusResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, end_time: int=None, failure_results: List[PrecheckFailureResult]=None, is_on_demand: bool=None, next_run_info: PrecheckStatusNextRunInfo=None, num_prechecks_run: int=None, run_period_in_minutes: int=None, start_time: int=None):
        """PrecheckStatusResponse - a model defined in OpenAPI

        :param end_time: The end_time of this PrecheckStatusResponse.
        :param failure_results: The failure_results of this PrecheckStatusResponse.
        :param is_on_demand: The is_on_demand of this PrecheckStatusResponse.
        :param next_run_info: The next_run_info of this PrecheckStatusResponse.
        :param num_prechecks_run: The num_prechecks_run of this PrecheckStatusResponse.
        :param run_period_in_minutes: The run_period_in_minutes of this PrecheckStatusResponse.
        :param start_time: The start_time of this PrecheckStatusResponse.
        """
        self.openapi_types = {
            'end_time': int,
            'failure_results': List[PrecheckFailureResult],
            'is_on_demand': bool,
            'next_run_info': PrecheckStatusNextRunInfo,
            'num_prechecks_run': int,
            'run_period_in_minutes': int,
            'start_time': int
        }

        self.attribute_map = {
            'end_time': 'endTime',
            'failure_results': 'failureResults',
            'is_on_demand': 'isOnDemand',
            'next_run_info': 'nextRunInfo',
            'num_prechecks_run': 'numPrechecksRun',
            'run_period_in_minutes': 'runPeriodInMinutes',
            'start_time': 'startTime'
        }

        self._end_time = end_time
        self._failure_results = failure_results
        self._is_on_demand = is_on_demand
        self._next_run_info = next_run_info
        self._num_prechecks_run = num_prechecks_run
        self._run_period_in_minutes = run_period_in_minutes
        self._start_time = start_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PrecheckStatusResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PrecheckStatusResponse of this PrecheckStatusResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def end_time(self):
        """Gets the end_time of this PrecheckStatusResponse.

        The Unix epoch timestamp, in milliseconds, corresponding to the end of the last completed upgrade prechecks job instance. 

        :return: The end_time of this PrecheckStatusResponse.
        :rtype: int
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this PrecheckStatusResponse.

        The Unix epoch timestamp, in milliseconds, corresponding to the end of the last completed upgrade prechecks job instance. 

        :param end_time: The end_time of this PrecheckStatusResponse.
        :type end_time: int
        """
        if end_time is None:
            raise ValueError("Invalid value for `end_time`, must not be `None`")

        self._end_time = end_time

    @property
    def failure_results(self):
        """Gets the failure_results of this PrecheckStatusResponse.

        The results of the failed prechecks. This includes the name of the failed prechecks and details of the error.

        :return: The failure_results of this PrecheckStatusResponse.
        :rtype: List[PrecheckFailureResult]
        """
        return self._failure_results

    @failure_results.setter
    def failure_results(self, failure_results):
        """Sets the failure_results of this PrecheckStatusResponse.

        The results of the failed prechecks. This includes the name of the failed prechecks and details of the error.

        :param failure_results: The failure_results of this PrecheckStatusResponse.
        :type failure_results: List[PrecheckFailureResult]
        """
        if failure_results is None:
            raise ValueError("Invalid value for `failure_results`, must not be `None`")

        self._failure_results = failure_results

    @property
    def is_on_demand(self):
        """Gets the is_on_demand of this PrecheckStatusResponse.

        Specifies whether this result is from a user-triggered job.

        :return: The is_on_demand of this PrecheckStatusResponse.
        :rtype: bool
        """
        return self._is_on_demand

    @is_on_demand.setter
    def is_on_demand(self, is_on_demand):
        """Sets the is_on_demand of this PrecheckStatusResponse.

        Specifies whether this result is from a user-triggered job.

        :param is_on_demand: The is_on_demand of this PrecheckStatusResponse.
        :type is_on_demand: bool
        """
        if is_on_demand is None:
            raise ValueError("Invalid value for `is_on_demand`, must not be `None`")

        self._is_on_demand = is_on_demand

    @property
    def next_run_info(self):
        """Gets the next_run_info of this PrecheckStatusResponse.


        :return: The next_run_info of this PrecheckStatusResponse.
        :rtype: PrecheckStatusNextRunInfo
        """
        return self._next_run_info

    @next_run_info.setter
    def next_run_info(self, next_run_info):
        """Sets the next_run_info of this PrecheckStatusResponse.


        :param next_run_info: The next_run_info of this PrecheckStatusResponse.
        :type next_run_info: PrecheckStatusNextRunInfo
        """

        self._next_run_info = next_run_info

    @property
    def num_prechecks_run(self):
        """Gets the num_prechecks_run of this PrecheckStatusResponse.

        Total number of upgrade prechecks that were run.

        :return: The num_prechecks_run of this PrecheckStatusResponse.
        :rtype: int
        """
        return self._num_prechecks_run

    @num_prechecks_run.setter
    def num_prechecks_run(self, num_prechecks_run):
        """Sets the num_prechecks_run of this PrecheckStatusResponse.

        Total number of upgrade prechecks that were run.

        :param num_prechecks_run: The num_prechecks_run of this PrecheckStatusResponse.
        :type num_prechecks_run: int
        """
        if num_prechecks_run is None:
            raise ValueError("Invalid value for `num_prechecks_run`, must not be `None`")

        self._num_prechecks_run = num_prechecks_run

    @property
    def run_period_in_minutes(self):
        """Gets the run_period_in_minutes of this PrecheckStatusResponse.

        Time, in minutes, between consecutive runs of scheduled upgrade prechecks job instances. 

        :return: The run_period_in_minutes of this PrecheckStatusResponse.
        :rtype: int
        """
        return self._run_period_in_minutes

    @run_period_in_minutes.setter
    def run_period_in_minutes(self, run_period_in_minutes):
        """Sets the run_period_in_minutes of this PrecheckStatusResponse.

        Time, in minutes, between consecutive runs of scheduled upgrade prechecks job instances. 

        :param run_period_in_minutes: The run_period_in_minutes of this PrecheckStatusResponse.
        :type run_period_in_minutes: int
        """
        if run_period_in_minutes is None:
            raise ValueError("Invalid value for `run_period_in_minutes`, must not be `None`")

        self._run_period_in_minutes = run_period_in_minutes

    @property
    def start_time(self):
        """Gets the start_time of this PrecheckStatusResponse.

        The Unix epoch timestamp, in milliseconds, corresponding to the start of the last completed upgrade prechecks job instance. 

        :return: The start_time of this PrecheckStatusResponse.
        :rtype: int
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this PrecheckStatusResponse.

        The Unix epoch timestamp, in milliseconds, corresponding to the start of the last completed upgrade prechecks job instance. 

        :param start_time: The start_time of this PrecheckStatusResponse.
        :type start_time: int
        """
        if start_time is None:
            raise ValueError("Invalid value for `start_time`, must not be `None`")

        self._start_time = start_time
