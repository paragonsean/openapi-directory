# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.snapshot_retention_info import SnapshotRetentionInfo
from openapi_server.models.unmanaged_snapshot_type import UnmanagedSnapshotType
from openapi_server import util


class SnapshotSummary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, _date: datetime=None, id: str=None, is_custom_retention_applied: bool=None, is_retention_lock_applied: bool=None, snapshot_retention_info: SnapshotRetentionInfo=None, snapshot_type: UnmanagedSnapshotType=None):
        """SnapshotSummary - a model defined in OpenAPI

        :param _date: The _date of this SnapshotSummary.
        :param id: The id of this SnapshotSummary.
        :param is_custom_retention_applied: The is_custom_retention_applied of this SnapshotSummary.
        :param is_retention_lock_applied: The is_retention_lock_applied of this SnapshotSummary.
        :param snapshot_retention_info: The snapshot_retention_info of this SnapshotSummary.
        :param snapshot_type: The snapshot_type of this SnapshotSummary.
        """
        self.openapi_types = {
            '_date': datetime,
            'id': str,
            'is_custom_retention_applied': bool,
            'is_retention_lock_applied': bool,
            'snapshot_retention_info': SnapshotRetentionInfo,
            'snapshot_type': UnmanagedSnapshotType
        }

        self.attribute_map = {
            '_date': 'date',
            'id': 'id',
            'is_custom_retention_applied': 'isCustomRetentionApplied',
            'is_retention_lock_applied': 'isRetentionLockApplied',
            'snapshot_retention_info': 'snapshotRetentionInfo',
            'snapshot_type': 'snapshotType'
        }

        self.__date = _date
        self._id = id
        self._is_custom_retention_applied = is_custom_retention_applied
        self._is_retention_lock_applied = is_retention_lock_applied
        self._snapshot_retention_info = snapshot_retention_info
        self._snapshot_type = snapshot_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SnapshotSummary':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SnapshotSummary of this SnapshotSummary.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def _date(self):
        """Gets the _date of this SnapshotSummary.

        Time at which the snapshot was taken.

        :return: The _date of this SnapshotSummary.
        :rtype: datetime
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this SnapshotSummary.

        Time at which the snapshot was taken.

        :param _date: The _date of this SnapshotSummary.
        :type _date: datetime
        """
        if _date is None:
            raise ValueError("Invalid value for `_date`, must not be `None`")

        self.__date = _date

    @property
    def id(self):
        """Gets the id of this SnapshotSummary.

        ID of the snapshot.

        :return: The id of this SnapshotSummary.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SnapshotSummary.

        ID of the snapshot.

        :param id: The id of this SnapshotSummary.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def is_custom_retention_applied(self):
        """Gets the is_custom_retention_applied of this SnapshotSummary.

        A Boolean value that indicates whether custom retention is applied to the specified snapshot. Value is true when custom retention is applied to the snapshot. 

        :return: The is_custom_retention_applied of this SnapshotSummary.
        :rtype: bool
        """
        return self._is_custom_retention_applied

    @is_custom_retention_applied.setter
    def is_custom_retention_applied(self, is_custom_retention_applied):
        """Sets the is_custom_retention_applied of this SnapshotSummary.

        A Boolean value that indicates whether custom retention is applied to the specified snapshot. Value is true when custom retention is applied to the snapshot. 

        :param is_custom_retention_applied: The is_custom_retention_applied of this SnapshotSummary.
        :type is_custom_retention_applied: bool
        """
        if is_custom_retention_applied is None:
            raise ValueError("Invalid value for `is_custom_retention_applied`, must not be `None`")

        self._is_custom_retention_applied = is_custom_retention_applied

    @property
    def is_retention_lock_applied(self):
        """Gets the is_retention_lock_applied of this SnapshotSummary.

        Indicates whether the snapshot is protected by a Retention Locked SLA Domain. 

        :return: The is_retention_lock_applied of this SnapshotSummary.
        :rtype: bool
        """
        return self._is_retention_lock_applied

    @is_retention_lock_applied.setter
    def is_retention_lock_applied(self, is_retention_lock_applied):
        """Sets the is_retention_lock_applied of this SnapshotSummary.

        Indicates whether the snapshot is protected by a Retention Locked SLA Domain. 

        :param is_retention_lock_applied: The is_retention_lock_applied of this SnapshotSummary.
        :type is_retention_lock_applied: bool
        """
        if is_retention_lock_applied is None:
            raise ValueError("Invalid value for `is_retention_lock_applied`, must not be `None`")

        self._is_retention_lock_applied = is_retention_lock_applied

    @property
    def snapshot_retention_info(self):
        """Gets the snapshot_retention_info of this SnapshotSummary.


        :return: The snapshot_retention_info of this SnapshotSummary.
        :rtype: SnapshotRetentionInfo
        """
        return self._snapshot_retention_info

    @snapshot_retention_info.setter
    def snapshot_retention_info(self, snapshot_retention_info):
        """Sets the snapshot_retention_info of this SnapshotSummary.


        :param snapshot_retention_info: The snapshot_retention_info of this SnapshotSummary.
        :type snapshot_retention_info: SnapshotRetentionInfo
        """
        if snapshot_retention_info is None:
            raise ValueError("Invalid value for `snapshot_retention_info`, must not be `None`")

        self._snapshot_retention_info = snapshot_retention_info

    @property
    def snapshot_type(self):
        """Gets the snapshot_type of this SnapshotSummary.


        :return: The snapshot_type of this SnapshotSummary.
        :rtype: UnmanagedSnapshotType
        """
        return self._snapshot_type

    @snapshot_type.setter
    def snapshot_type(self, snapshot_type):
        """Sets the snapshot_type of this SnapshotSummary.


        :param snapshot_type: The snapshot_type of this SnapshotSummary.
        :type snapshot_type: UnmanagedSnapshotType
        """
        if snapshot_type is None:
            raise ValueError("Invalid value for `snapshot_type`, must not be `None`")

        self._snapshot_type = snapshot_type
