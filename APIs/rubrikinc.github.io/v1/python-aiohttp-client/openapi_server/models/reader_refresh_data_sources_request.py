# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ReaderRefreshDataSourcesRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, archival_data_source_ids: List[str]=None, local_data_source_ids: List[str]=None):
        """ReaderRefreshDataSourcesRequest - a model defined in OpenAPI

        :param archival_data_source_ids: The archival_data_source_ids of this ReaderRefreshDataSourcesRequest.
        :param local_data_source_ids: The local_data_source_ids of this ReaderRefreshDataSourcesRequest.
        """
        self.openapi_types = {
            'archival_data_source_ids': List[str],
            'local_data_source_ids': List[str]
        }

        self.attribute_map = {
            'archival_data_source_ids': 'archivalDataSourceIds',
            'local_data_source_ids': 'localDataSourceIds'
        }

        self._archival_data_source_ids = archival_data_source_ids
        self._local_data_source_ids = local_data_source_ids

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReaderRefreshDataSourcesRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ReaderRefreshDataSourcesRequest of this ReaderRefreshDataSourcesRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def archival_data_source_ids(self):
        """Gets the archival_data_source_ids of this ReaderRefreshDataSourcesRequest.

        The owner cluster assigned IDs for data sources previously recovered from a reader archival location, which is a read only archival location connected from the local cluster to the archival location owned by some other cluster through connect-as-reader operation. 

        :return: The archival_data_source_ids of this ReaderRefreshDataSourcesRequest.
        :rtype: List[str]
        """
        return self._archival_data_source_ids

    @archival_data_source_ids.setter
    def archival_data_source_ids(self, archival_data_source_ids):
        """Sets the archival_data_source_ids of this ReaderRefreshDataSourcesRequest.

        The owner cluster assigned IDs for data sources previously recovered from a reader archival location, which is a read only archival location connected from the local cluster to the archival location owned by some other cluster through connect-as-reader operation. 

        :param archival_data_source_ids: The archival_data_source_ids of this ReaderRefreshDataSourcesRequest.
        :type archival_data_source_ids: List[str]
        """

        self._archival_data_source_ids = archival_data_source_ids

    @property
    def local_data_source_ids(self):
        """Gets the local_data_source_ids of this ReaderRefreshDataSourcesRequest.

        The locally assigned IDs for data sources previously recovered from a reader archival location, which is a read only archival location connected from the local cluster to the archival location owned by some other cluster through connect-as-reader operation. 

        :return: The local_data_source_ids of this ReaderRefreshDataSourcesRequest.
        :rtype: List[str]
        """
        return self._local_data_source_ids

    @local_data_source_ids.setter
    def local_data_source_ids(self, local_data_source_ids):
        """Sets the local_data_source_ids of this ReaderRefreshDataSourcesRequest.

        The locally assigned IDs for data sources previously recovered from a reader archival location, which is a read only archival location connected from the local cluster to the archival location owned by some other cluster through connect-as-reader operation. 

        :param local_data_source_ids: The local_data_source_ids of this ReaderRefreshDataSourcesRequest.
        :type local_data_source_ids: List[str]
        """

        self._local_data_source_ids = local_data_source_ids
