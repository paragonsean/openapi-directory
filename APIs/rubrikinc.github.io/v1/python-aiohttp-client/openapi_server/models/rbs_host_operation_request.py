# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.operation_mode import OperationMode
from openapi_server import util


class RbsHostOperationRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, operation_timeout: int=600, password: str=None, username: str=None, operation_mode: OperationMode=None):
        """RbsHostOperationRequest - a model defined in OpenAPI

        :param name: The name of this RbsHostOperationRequest.
        :param operation_timeout: The operation_timeout of this RbsHostOperationRequest.
        :param password: The password of this RbsHostOperationRequest.
        :param username: The username of this RbsHostOperationRequest.
        :param operation_mode: The operation_mode of this RbsHostOperationRequest.
        """
        self.openapi_types = {
            'name': str,
            'operation_timeout': int,
            'password': str,
            'username': str,
            'operation_mode': OperationMode
        }

        self.attribute_map = {
            'name': 'name',
            'operation_timeout': 'operationTimeout',
            'password': 'password',
            'username': 'username',
            'operation_mode': 'operationMode'
        }

        self._name = name
        self._operation_timeout = operation_timeout
        self._password = password
        self._username = username
        self._operation_mode = operation_mode

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RbsHostOperationRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RbsHostOperationRequest of this RbsHostOperationRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this RbsHostOperationRequest.

        IP address or hostname of the host.

        :return: The name of this RbsHostOperationRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this RbsHostOperationRequest.

        IP address or hostname of the host.

        :param name: The name of this RbsHostOperationRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def operation_timeout(self):
        """Gets the operation_timeout of this RbsHostOperationRequest.

        Number of seconds after which the operation is terminated if it has not completed execution. Default value is 600 seconds.

        :return: The operation_timeout of this RbsHostOperationRequest.
        :rtype: int
        """
        return self._operation_timeout

    @operation_timeout.setter
    def operation_timeout(self, operation_timeout):
        """Sets the operation_timeout of this RbsHostOperationRequest.

        Number of seconds after which the operation is terminated if it has not completed execution. Default value is 600 seconds.

        :param operation_timeout: The operation_timeout of this RbsHostOperationRequest.
        :type operation_timeout: int
        """

        self._operation_timeout = operation_timeout

    @property
    def password(self):
        """Gets the password of this RbsHostOperationRequest.

        Password associated with the username that has access to the host.

        :return: The password of this RbsHostOperationRequest.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this RbsHostOperationRequest.

        Password associated with the username that has access to the host.

        :param password: The password of this RbsHostOperationRequest.
        :type password: str
        """
        if password is None:
            raise ValueError("Invalid value for `password`, must not be `None`")

        self._password = password

    @property
    def username(self):
        """Gets the username of this RbsHostOperationRequest.

        Name of the user account that has sudo/admin privileges on the RBS host. This is required to install/uninstall/upgrade RBS packages on the RBS host.

        :return: The username of this RbsHostOperationRequest.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this RbsHostOperationRequest.

        Name of the user account that has sudo/admin privileges on the RBS host. This is required to install/uninstall/upgrade RBS packages on the RBS host.

        :param username: The username of this RbsHostOperationRequest.
        :type username: str
        """
        if username is None:
            raise ValueError("Invalid value for `username`, must not be `None`")

        self._username = username

    @property
    def operation_mode(self):
        """Gets the operation_mode of this RbsHostOperationRequest.


        :return: The operation_mode of this RbsHostOperationRequest.
        :rtype: OperationMode
        """
        return self._operation_mode

    @operation_mode.setter
    def operation_mode(self, operation_mode):
        """Sets the operation_mode of this RbsHostOperationRequest.


        :param operation_mode: The operation_mode of this RbsHostOperationRequest.
        :type operation_mode: OperationMode
        """

        self._operation_mode = operation_mode
