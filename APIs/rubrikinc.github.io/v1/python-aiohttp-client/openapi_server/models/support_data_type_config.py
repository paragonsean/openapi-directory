# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.support_data_type import SupportDataType
from openapi_server.models.support_data_type_status import SupportDataTypeStatus
from openapi_server import util


class SupportDataTypeConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data_type: SupportDataType=None, should_toggle_chisel: bool=False, status: SupportDataTypeStatus=None):
        """SupportDataTypeConfig - a model defined in OpenAPI

        :param data_type: The data_type of this SupportDataTypeConfig.
        :param should_toggle_chisel: The should_toggle_chisel of this SupportDataTypeConfig.
        :param status: The status of this SupportDataTypeConfig.
        """
        self.openapi_types = {
            'data_type': SupportDataType,
            'should_toggle_chisel': bool,
            'status': SupportDataTypeStatus
        }

        self.attribute_map = {
            'data_type': 'dataType',
            'should_toggle_chisel': 'shouldToggleChisel',
            'status': 'status'
        }

        self._data_type = data_type
        self._should_toggle_chisel = should_toggle_chisel
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SupportDataTypeConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SupportDataTypeConfig of this SupportDataTypeConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data_type(self):
        """Gets the data_type of this SupportDataTypeConfig.


        :return: The data_type of this SupportDataTypeConfig.
        :rtype: SupportDataType
        """
        return self._data_type

    @data_type.setter
    def data_type(self, data_type):
        """Sets the data_type of this SupportDataTypeConfig.


        :param data_type: The data_type of this SupportDataTypeConfig.
        :type data_type: SupportDataType
        """
        if data_type is None:
            raise ValueError("Invalid value for `data_type`, must not be `None`")

        self._data_type = data_type

    @property
    def should_toggle_chisel(self):
        """Gets the should_toggle_chisel of this SupportDataTypeConfig.

        Controls all the traffic to/from the Rubrik cluster. If set to true, and the user opts-out, this flag will be used to disable all telemetry, including the creation of the support tunnel. If the user opts-in, the flag will be used to enable a service to allow traffic movement to/from the Rubrik cluster.

        :return: The should_toggle_chisel of this SupportDataTypeConfig.
        :rtype: bool
        """
        return self._should_toggle_chisel

    @should_toggle_chisel.setter
    def should_toggle_chisel(self, should_toggle_chisel):
        """Sets the should_toggle_chisel of this SupportDataTypeConfig.

        Controls all the traffic to/from the Rubrik cluster. If set to true, and the user opts-out, this flag will be used to disable all telemetry, including the creation of the support tunnel. If the user opts-in, the flag will be used to enable a service to allow traffic movement to/from the Rubrik cluster.

        :param should_toggle_chisel: The should_toggle_chisel of this SupportDataTypeConfig.
        :type should_toggle_chisel: bool
        """

        self._should_toggle_chisel = should_toggle_chisel

    @property
    def status(self):
        """Gets the status of this SupportDataTypeConfig.


        :return: The status of this SupportDataTypeConfig.
        :rtype: SupportDataTypeStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this SupportDataTypeConfig.


        :param status: The status of this SupportDataTypeConfig.
        :type status: SupportDataTypeStatus
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status
