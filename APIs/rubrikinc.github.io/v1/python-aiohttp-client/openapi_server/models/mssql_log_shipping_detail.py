# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.mssql_log_shipping_links import MssqlLogShippingLinks
from openapi_server.models.mssql_log_shipping_status_info import MssqlLogShippingStatusInfo
from openapi_server import util


class MssqlLogShippingDetail(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, lag_time: int=None, last_applied_point: datetime=None, location: str=None, primary_database_id: str=None, primary_database_log_backup_frequency: int=None, primary_database_name: str=None, secondary_database_id: str=None, secondary_database_name: str=None, state: str=None, status: MssqlLogShippingStatusInfo=None, links: MssqlLogShippingLinks=None, should_disconnect_standby_users: bool=None):
        """MssqlLogShippingDetail - a model defined in OpenAPI

        :param id: The id of this MssqlLogShippingDetail.
        :param lag_time: The lag_time of this MssqlLogShippingDetail.
        :param last_applied_point: The last_applied_point of this MssqlLogShippingDetail.
        :param location: The location of this MssqlLogShippingDetail.
        :param primary_database_id: The primary_database_id of this MssqlLogShippingDetail.
        :param primary_database_log_backup_frequency: The primary_database_log_backup_frequency of this MssqlLogShippingDetail.
        :param primary_database_name: The primary_database_name of this MssqlLogShippingDetail.
        :param secondary_database_id: The secondary_database_id of this MssqlLogShippingDetail.
        :param secondary_database_name: The secondary_database_name of this MssqlLogShippingDetail.
        :param state: The state of this MssqlLogShippingDetail.
        :param status: The status of this MssqlLogShippingDetail.
        :param links: The links of this MssqlLogShippingDetail.
        :param should_disconnect_standby_users: The should_disconnect_standby_users of this MssqlLogShippingDetail.
        """
        self.openapi_types = {
            'id': str,
            'lag_time': int,
            'last_applied_point': datetime,
            'location': str,
            'primary_database_id': str,
            'primary_database_log_backup_frequency': int,
            'primary_database_name': str,
            'secondary_database_id': str,
            'secondary_database_name': str,
            'state': str,
            'status': MssqlLogShippingStatusInfo,
            'links': MssqlLogShippingLinks,
            'should_disconnect_standby_users': bool
        }

        self.attribute_map = {
            'id': 'id',
            'lag_time': 'lagTime',
            'last_applied_point': 'lastAppliedPoint',
            'location': 'location',
            'primary_database_id': 'primaryDatabaseId',
            'primary_database_log_backup_frequency': 'primaryDatabaseLogBackupFrequency',
            'primary_database_name': 'primaryDatabaseName',
            'secondary_database_id': 'secondaryDatabaseId',
            'secondary_database_name': 'secondaryDatabaseName',
            'state': 'state',
            'status': 'status',
            'links': 'links',
            'should_disconnect_standby_users': 'shouldDisconnectStandbyUsers'
        }

        self._id = id
        self._lag_time = lag_time
        self._last_applied_point = last_applied_point
        self._location = location
        self._primary_database_id = primary_database_id
        self._primary_database_log_backup_frequency = primary_database_log_backup_frequency
        self._primary_database_name = primary_database_name
        self._secondary_database_id = secondary_database_id
        self._secondary_database_name = secondary_database_name
        self._state = state
        self._status = status
        self._links = links
        self._should_disconnect_standby_users = should_disconnect_standby_users

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MssqlLogShippingDetail':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MssqlLogShippingDetail of this MssqlLogShippingDetail.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this MssqlLogShippingDetail.

        ID assigned to the log shipping configuration object.

        :return: The id of this MssqlLogShippingDetail.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this MssqlLogShippingDetail.

        ID assigned to the log shipping configuration object.

        :param id: The id of this MssqlLogShippingDetail.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def lag_time(self):
        """Gets the lag_time of this MssqlLogShippingDetail.

        Number of milliseconds elapsed since the latest backup was applied to the secondary database and the time the backup was taken on the primary database.

        :return: The lag_time of this MssqlLogShippingDetail.
        :rtype: int
        """
        return self._lag_time

    @lag_time.setter
    def lag_time(self, lag_time):
        """Sets the lag_time of this MssqlLogShippingDetail.

        Number of milliseconds elapsed since the latest backup was applied to the secondary database and the time the backup was taken on the primary database.

        :param lag_time: The lag_time of this MssqlLogShippingDetail.
        :type lag_time: int
        """

        self._lag_time = lag_time

    @property
    def last_applied_point(self):
        """Gets the last_applied_point of this MssqlLogShippingDetail.

        Timestamp of the last transaction applied using the specified log shipping configuration object.

        :return: The last_applied_point of this MssqlLogShippingDetail.
        :rtype: datetime
        """
        return self._last_applied_point

    @last_applied_point.setter
    def last_applied_point(self, last_applied_point):
        """Sets the last_applied_point of this MssqlLogShippingDetail.

        Timestamp of the last transaction applied using the specified log shipping configuration object.

        :param last_applied_point: The last_applied_point of this MssqlLogShippingDetail.
        :type last_applied_point: datetime
        """

        self._last_applied_point = last_applied_point

    @property
    def location(self):
        """Gets the location of this MssqlLogShippingDetail.

        Location of a specified secondary database. Location uses this format: \"host/instance\".

        :return: The location of this MssqlLogShippingDetail.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this MssqlLogShippingDetail.

        Location of a specified secondary database. Location uses this format: \"host/instance\".

        :param location: The location of this MssqlLogShippingDetail.
        :type location: str
        """
        if location is None:
            raise ValueError("Invalid value for `location`, must not be `None`")

        self._location = location

    @property
    def primary_database_id(self):
        """Gets the primary_database_id of this MssqlLogShippingDetail.

        ID of the primary database.

        :return: The primary_database_id of this MssqlLogShippingDetail.
        :rtype: str
        """
        return self._primary_database_id

    @primary_database_id.setter
    def primary_database_id(self, primary_database_id):
        """Sets the primary_database_id of this MssqlLogShippingDetail.

        ID of the primary database.

        :param primary_database_id: The primary_database_id of this MssqlLogShippingDetail.
        :type primary_database_id: str
        """
        if primary_database_id is None:
            raise ValueError("Invalid value for `primary_database_id`, must not be `None`")

        self._primary_database_id = primary_database_id

    @property
    def primary_database_log_backup_frequency(self):
        """Gets the primary_database_log_backup_frequency of this MssqlLogShippingDetail.

        Log backup frequency, in seconds, of the primary database.

        :return: The primary_database_log_backup_frequency of this MssqlLogShippingDetail.
        :rtype: int
        """
        return self._primary_database_log_backup_frequency

    @primary_database_log_backup_frequency.setter
    def primary_database_log_backup_frequency(self, primary_database_log_backup_frequency):
        """Sets the primary_database_log_backup_frequency of this MssqlLogShippingDetail.

        Log backup frequency, in seconds, of the primary database.

        :param primary_database_log_backup_frequency: The primary_database_log_backup_frequency of this MssqlLogShippingDetail.
        :type primary_database_log_backup_frequency: int
        """
        if primary_database_log_backup_frequency is None:
            raise ValueError("Invalid value for `primary_database_log_backup_frequency`, must not be `None`")

        self._primary_database_log_backup_frequency = primary_database_log_backup_frequency

    @property
    def primary_database_name(self):
        """Gets the primary_database_name of this MssqlLogShippingDetail.

        Name of the primary database.

        :return: The primary_database_name of this MssqlLogShippingDetail.
        :rtype: str
        """
        return self._primary_database_name

    @primary_database_name.setter
    def primary_database_name(self, primary_database_name):
        """Sets the primary_database_name of this MssqlLogShippingDetail.

        Name of the primary database.

        :param primary_database_name: The primary_database_name of this MssqlLogShippingDetail.
        :type primary_database_name: str
        """
        if primary_database_name is None:
            raise ValueError("Invalid value for `primary_database_name`, must not be `None`")

        self._primary_database_name = primary_database_name

    @property
    def secondary_database_id(self):
        """Gets the secondary_database_id of this MssqlLogShippingDetail.

        ID of the secondary database.

        :return: The secondary_database_id of this MssqlLogShippingDetail.
        :rtype: str
        """
        return self._secondary_database_id

    @secondary_database_id.setter
    def secondary_database_id(self, secondary_database_id):
        """Sets the secondary_database_id of this MssqlLogShippingDetail.

        ID of the secondary database.

        :param secondary_database_id: The secondary_database_id of this MssqlLogShippingDetail.
        :type secondary_database_id: str
        """

        self._secondary_database_id = secondary_database_id

    @property
    def secondary_database_name(self):
        """Gets the secondary_database_name of this MssqlLogShippingDetail.

        Name of the secondary database.

        :return: The secondary_database_name of this MssqlLogShippingDetail.
        :rtype: str
        """
        return self._secondary_database_name

    @secondary_database_name.setter
    def secondary_database_name(self, secondary_database_name):
        """Sets the secondary_database_name of this MssqlLogShippingDetail.

        Name of the secondary database.

        :param secondary_database_name: The secondary_database_name of this MssqlLogShippingDetail.
        :type secondary_database_name: str
        """
        if secondary_database_name is None:
            raise ValueError("Invalid value for `secondary_database_name`, must not be `None`")

        self._secondary_database_name = secondary_database_name

    @property
    def state(self):
        """Gets the state of this MssqlLogShippingDetail.

        The current state of the secondary database.

        :return: The state of this MssqlLogShippingDetail.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this MssqlLogShippingDetail.

        The current state of the secondary database.

        :param state: The state of this MssqlLogShippingDetail.
        :type state: str
        """

        self._state = state

    @property
    def status(self):
        """Gets the status of this MssqlLogShippingDetail.


        :return: The status of this MssqlLogShippingDetail.
        :rtype: MssqlLogShippingStatusInfo
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this MssqlLogShippingDetail.


        :param status: The status of this MssqlLogShippingDetail.
        :type status: MssqlLogShippingStatusInfo
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status

    @property
    def links(self):
        """Gets the links of this MssqlLogShippingDetail.


        :return: The links of this MssqlLogShippingDetail.
        :rtype: MssqlLogShippingLinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this MssqlLogShippingDetail.


        :param links: The links of this MssqlLogShippingDetail.
        :type links: MssqlLogShippingLinks
        """
        if links is None:
            raise ValueError("Invalid value for `links`, must not be `None`")

        self._links = links

    @property
    def should_disconnect_standby_users(self):
        """Gets the should_disconnect_standby_users of this MssqlLogShippingDetail.

        Whether to automatically disconnect users from a secondary database in Standby mode when a restore operation is performed. If this value is false and users remain connected, then any scheduled restore operations will fail. This is only returned when the secondary database is in Standby mode.

        :return: The should_disconnect_standby_users of this MssqlLogShippingDetail.
        :rtype: bool
        """
        return self._should_disconnect_standby_users

    @should_disconnect_standby_users.setter
    def should_disconnect_standby_users(self, should_disconnect_standby_users):
        """Sets the should_disconnect_standby_users of this MssqlLogShippingDetail.

        Whether to automatically disconnect users from a secondary database in Standby mode when a restore operation is performed. If this value is false and users remain connected, then any scheduled restore operations will fail. This is only returned when the secondary database is in Standby mode.

        :param should_disconnect_standby_users: The should_disconnect_standby_users of this MssqlLogShippingDetail.
        :type should_disconnect_standby_users: bool
        """

        self._should_disconnect_standby_users = should_disconnect_standby_users
