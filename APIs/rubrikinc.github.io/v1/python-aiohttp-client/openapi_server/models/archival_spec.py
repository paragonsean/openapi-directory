# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.archival_tiering_spec import ArchivalTieringSpec
from openapi_server import util


class ArchivalSpec(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, archival_threshold: int=None, archival_tiering_spec: ArchivalTieringSpec=None, is_passthrough_supported: bool=None, location_id: str=None, location_name: str=None):
        """ArchivalSpec - a model defined in OpenAPI

        :param archival_threshold: The archival_threshold of this ArchivalSpec.
        :param archival_tiering_spec: The archival_tiering_spec of this ArchivalSpec.
        :param is_passthrough_supported: The is_passthrough_supported of this ArchivalSpec.
        :param location_id: The location_id of this ArchivalSpec.
        :param location_name: The location_name of this ArchivalSpec.
        """
        self.openapi_types = {
            'archival_threshold': int,
            'archival_tiering_spec': ArchivalTieringSpec,
            'is_passthrough_supported': bool,
            'location_id': str,
            'location_name': str
        }

        self.attribute_map = {
            'archival_threshold': 'archivalThreshold',
            'archival_tiering_spec': 'archivalTieringSpec',
            'is_passthrough_supported': 'isPassthroughSupported',
            'location_id': 'locationId',
            'location_name': 'locationName'
        }

        self._archival_threshold = archival_threshold
        self._archival_tiering_spec = archival_tiering_spec
        self._is_passthrough_supported = is_passthrough_supported
        self._location_id = location_id
        self._location_name = location_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ArchivalSpec':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ArchivalSpec of this ArchivalSpec.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def archival_threshold(self):
        """Gets the archival_threshold of this ArchivalSpec.


        :return: The archival_threshold of this ArchivalSpec.
        :rtype: int
        """
        return self._archival_threshold

    @archival_threshold.setter
    def archival_threshold(self, archival_threshold):
        """Sets the archival_threshold of this ArchivalSpec.


        :param archival_threshold: The archival_threshold of this ArchivalSpec.
        :type archival_threshold: int
        """
        if archival_threshold is None:
            raise ValueError("Invalid value for `archival_threshold`, must not be `None`")

        self._archival_threshold = archival_threshold

    @property
    def archival_tiering_spec(self):
        """Gets the archival_tiering_spec of this ArchivalSpec.


        :return: The archival_tiering_spec of this ArchivalSpec.
        :rtype: ArchivalTieringSpec
        """
        return self._archival_tiering_spec

    @archival_tiering_spec.setter
    def archival_tiering_spec(self, archival_tiering_spec):
        """Sets the archival_tiering_spec of this ArchivalSpec.


        :param archival_tiering_spec: The archival_tiering_spec of this ArchivalSpec.
        :type archival_tiering_spec: ArchivalTieringSpec
        """

        self._archival_tiering_spec = archival_tiering_spec

    @property
    def is_passthrough_supported(self):
        """Gets the is_passthrough_supported of this ArchivalSpec.

        A Boolean value that identifies whether the archival location type supports direct archive backups. 

        :return: The is_passthrough_supported of this ArchivalSpec.
        :rtype: bool
        """
        return self._is_passthrough_supported

    @is_passthrough_supported.setter
    def is_passthrough_supported(self, is_passthrough_supported):
        """Sets the is_passthrough_supported of this ArchivalSpec.

        A Boolean value that identifies whether the archival location type supports direct archive backups. 

        :param is_passthrough_supported: The is_passthrough_supported of this ArchivalSpec.
        :type is_passthrough_supported: bool
        """

        self._is_passthrough_supported = is_passthrough_supported

    @property
    def location_id(self):
        """Gets the location_id of this ArchivalSpec.


        :return: The location_id of this ArchivalSpec.
        :rtype: str
        """
        return self._location_id

    @location_id.setter
    def location_id(self, location_id):
        """Sets the location_id of this ArchivalSpec.


        :param location_id: The location_id of this ArchivalSpec.
        :type location_id: str
        """
        if location_id is None:
            raise ValueError("Invalid value for `location_id`, must not be `None`")

        self._location_id = location_id

    @property
    def location_name(self):
        """Gets the location_name of this ArchivalSpec.


        :return: The location_name of this ArchivalSpec.
        :rtype: str
        """
        return self._location_name

    @location_name.setter
    def location_name(self, location_name):
        """Sets the location_name of this ArchivalSpec.


        :param location_name: The location_name of this ArchivalSpec.
        :type location_name: str
        """

        self._location_name = location_name
