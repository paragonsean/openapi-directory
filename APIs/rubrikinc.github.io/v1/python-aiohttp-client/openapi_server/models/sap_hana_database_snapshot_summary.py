# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.snapshot_cloud_storage_tier import SnapshotCloudStorageTier
from openapi_server.models.snapshot_retention_info import SnapshotRetentionInfo
from openapi_server import util


class SapHanaDatabaseSnapshotSummary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, archival_location_ids: List[str]=None, cloud_state: int=None, cloud_storage_tier: SnapshotCloudStorageTier=None, consistency_level: str=None, _date: datetime=None, expiration_date: datetime=None, id: str=None, index_state: int=None, is_custom_retention_applied: bool=None, is_on_demand_snapshot: bool=None, is_placed_on_legal_hold: bool=None, is_retained_by_retention_lock_sla: bool=None, parent_snapshot_id: str=None, replication_location_ids: List[str]=None, sla_id: str=None, sla_name: str=None, snapshot_retention_info: SnapshotRetentionInfo=None, source_object_type: str=None, backup_id: int=None, backup_prefix: str=None, backup_type: str=None, base_backup_id: int=None, is_external_backup: bool=None, is_rubrik_triggered_on_demand_backup: bool=None, rubrik_snapshot_end_time: datetime=None, rubrik_snapshot_start_time: datetime=None, sap_hana_end_time: datetime=None, sap_hana_start_time: datetime=None):
        """SapHanaDatabaseSnapshotSummary - a model defined in OpenAPI

        :param archival_location_ids: The archival_location_ids of this SapHanaDatabaseSnapshotSummary.
        :param cloud_state: The cloud_state of this SapHanaDatabaseSnapshotSummary.
        :param cloud_storage_tier: The cloud_storage_tier of this SapHanaDatabaseSnapshotSummary.
        :param consistency_level: The consistency_level of this SapHanaDatabaseSnapshotSummary.
        :param _date: The _date of this SapHanaDatabaseSnapshotSummary.
        :param expiration_date: The expiration_date of this SapHanaDatabaseSnapshotSummary.
        :param id: The id of this SapHanaDatabaseSnapshotSummary.
        :param index_state: The index_state of this SapHanaDatabaseSnapshotSummary.
        :param is_custom_retention_applied: The is_custom_retention_applied of this SapHanaDatabaseSnapshotSummary.
        :param is_on_demand_snapshot: The is_on_demand_snapshot of this SapHanaDatabaseSnapshotSummary.
        :param is_placed_on_legal_hold: The is_placed_on_legal_hold of this SapHanaDatabaseSnapshotSummary.
        :param is_retained_by_retention_lock_sla: The is_retained_by_retention_lock_sla of this SapHanaDatabaseSnapshotSummary.
        :param parent_snapshot_id: The parent_snapshot_id of this SapHanaDatabaseSnapshotSummary.
        :param replication_location_ids: The replication_location_ids of this SapHanaDatabaseSnapshotSummary.
        :param sla_id: The sla_id of this SapHanaDatabaseSnapshotSummary.
        :param sla_name: The sla_name of this SapHanaDatabaseSnapshotSummary.
        :param snapshot_retention_info: The snapshot_retention_info of this SapHanaDatabaseSnapshotSummary.
        :param source_object_type: The source_object_type of this SapHanaDatabaseSnapshotSummary.
        :param backup_id: The backup_id of this SapHanaDatabaseSnapshotSummary.
        :param backup_prefix: The backup_prefix of this SapHanaDatabaseSnapshotSummary.
        :param backup_type: The backup_type of this SapHanaDatabaseSnapshotSummary.
        :param base_backup_id: The base_backup_id of this SapHanaDatabaseSnapshotSummary.
        :param is_external_backup: The is_external_backup of this SapHanaDatabaseSnapshotSummary.
        :param is_rubrik_triggered_on_demand_backup: The is_rubrik_triggered_on_demand_backup of this SapHanaDatabaseSnapshotSummary.
        :param rubrik_snapshot_end_time: The rubrik_snapshot_end_time of this SapHanaDatabaseSnapshotSummary.
        :param rubrik_snapshot_start_time: The rubrik_snapshot_start_time of this SapHanaDatabaseSnapshotSummary.
        :param sap_hana_end_time: The sap_hana_end_time of this SapHanaDatabaseSnapshotSummary.
        :param sap_hana_start_time: The sap_hana_start_time of this SapHanaDatabaseSnapshotSummary.
        """
        self.openapi_types = {
            'archival_location_ids': List[str],
            'cloud_state': int,
            'cloud_storage_tier': SnapshotCloudStorageTier,
            'consistency_level': str,
            '_date': datetime,
            'expiration_date': datetime,
            'id': str,
            'index_state': int,
            'is_custom_retention_applied': bool,
            'is_on_demand_snapshot': bool,
            'is_placed_on_legal_hold': bool,
            'is_retained_by_retention_lock_sla': bool,
            'parent_snapshot_id': str,
            'replication_location_ids': List[str],
            'sla_id': str,
            'sla_name': str,
            'snapshot_retention_info': SnapshotRetentionInfo,
            'source_object_type': str,
            'backup_id': int,
            'backup_prefix': str,
            'backup_type': str,
            'base_backup_id': int,
            'is_external_backup': bool,
            'is_rubrik_triggered_on_demand_backup': bool,
            'rubrik_snapshot_end_time': datetime,
            'rubrik_snapshot_start_time': datetime,
            'sap_hana_end_time': datetime,
            'sap_hana_start_time': datetime
        }

        self.attribute_map = {
            'archival_location_ids': 'archivalLocationIds',
            'cloud_state': 'cloudState',
            'cloud_storage_tier': 'cloudStorageTier',
            'consistency_level': 'consistencyLevel',
            '_date': 'date',
            'expiration_date': 'expirationDate',
            'id': 'id',
            'index_state': 'indexState',
            'is_custom_retention_applied': 'isCustomRetentionApplied',
            'is_on_demand_snapshot': 'isOnDemandSnapshot',
            'is_placed_on_legal_hold': 'isPlacedOnLegalHold',
            'is_retained_by_retention_lock_sla': 'isRetainedByRetentionLockSla',
            'parent_snapshot_id': 'parentSnapshotId',
            'replication_location_ids': 'replicationLocationIds',
            'sla_id': 'slaId',
            'sla_name': 'slaName',
            'snapshot_retention_info': 'snapshotRetentionInfo',
            'source_object_type': 'sourceObjectType',
            'backup_id': 'backupId',
            'backup_prefix': 'backupPrefix',
            'backup_type': 'backupType',
            'base_backup_id': 'baseBackupId',
            'is_external_backup': 'isExternalBackup',
            'is_rubrik_triggered_on_demand_backup': 'isRubrikTriggeredOnDemandBackup',
            'rubrik_snapshot_end_time': 'rubrikSnapshotEndTime',
            'rubrik_snapshot_start_time': 'rubrikSnapshotStartTime',
            'sap_hana_end_time': 'sapHanaEndTime',
            'sap_hana_start_time': 'sapHanaStartTime'
        }

        self._archival_location_ids = archival_location_ids
        self._cloud_state = cloud_state
        self._cloud_storage_tier = cloud_storage_tier
        self._consistency_level = consistency_level
        self.__date = _date
        self._expiration_date = expiration_date
        self._id = id
        self._index_state = index_state
        self._is_custom_retention_applied = is_custom_retention_applied
        self._is_on_demand_snapshot = is_on_demand_snapshot
        self._is_placed_on_legal_hold = is_placed_on_legal_hold
        self._is_retained_by_retention_lock_sla = is_retained_by_retention_lock_sla
        self._parent_snapshot_id = parent_snapshot_id
        self._replication_location_ids = replication_location_ids
        self._sla_id = sla_id
        self._sla_name = sla_name
        self._snapshot_retention_info = snapshot_retention_info
        self._source_object_type = source_object_type
        self._backup_id = backup_id
        self._backup_prefix = backup_prefix
        self._backup_type = backup_type
        self._base_backup_id = base_backup_id
        self._is_external_backup = is_external_backup
        self._is_rubrik_triggered_on_demand_backup = is_rubrik_triggered_on_demand_backup
        self._rubrik_snapshot_end_time = rubrik_snapshot_end_time
        self._rubrik_snapshot_start_time = rubrik_snapshot_start_time
        self._sap_hana_end_time = sap_hana_end_time
        self._sap_hana_start_time = sap_hana_start_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SapHanaDatabaseSnapshotSummary':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SapHanaDatabaseSnapshotSummary of this SapHanaDatabaseSnapshotSummary.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def archival_location_ids(self):
        """Gets the archival_location_ids of this SapHanaDatabaseSnapshotSummary.


        :return: The archival_location_ids of this SapHanaDatabaseSnapshotSummary.
        :rtype: List[str]
        """
        return self._archival_location_ids

    @archival_location_ids.setter
    def archival_location_ids(self, archival_location_ids):
        """Sets the archival_location_ids of this SapHanaDatabaseSnapshotSummary.


        :param archival_location_ids: The archival_location_ids of this SapHanaDatabaseSnapshotSummary.
        :type archival_location_ids: List[str]
        """

        self._archival_location_ids = archival_location_ids

    @property
    def cloud_state(self):
        """Gets the cloud_state of this SapHanaDatabaseSnapshotSummary.

        Integer value that represents the archival state of a snapshot. 0 means the snapshot is not archived. 2 means the snapshot is archived. 3 means the snapshot is downloaded from the archival location. 4 means the snapshot is in the process of being downloaded from the archival location. 6 means the snapshot is stored locally and at the archival location. 

        :return: The cloud_state of this SapHanaDatabaseSnapshotSummary.
        :rtype: int
        """
        return self._cloud_state

    @cloud_state.setter
    def cloud_state(self, cloud_state):
        """Sets the cloud_state of this SapHanaDatabaseSnapshotSummary.

        Integer value that represents the archival state of a snapshot. 0 means the snapshot is not archived. 2 means the snapshot is archived. 3 means the snapshot is downloaded from the archival location. 4 means the snapshot is in the process of being downloaded from the archival location. 6 means the snapshot is stored locally and at the archival location. 

        :param cloud_state: The cloud_state of this SapHanaDatabaseSnapshotSummary.
        :type cloud_state: int
        """

        self._cloud_state = cloud_state

    @property
    def cloud_storage_tier(self):
        """Gets the cloud_storage_tier of this SapHanaDatabaseSnapshotSummary.


        :return: The cloud_storage_tier of this SapHanaDatabaseSnapshotSummary.
        :rtype: SnapshotCloudStorageTier
        """
        return self._cloud_storage_tier

    @cloud_storage_tier.setter
    def cloud_storage_tier(self, cloud_storage_tier):
        """Sets the cloud_storage_tier of this SapHanaDatabaseSnapshotSummary.


        :param cloud_storage_tier: The cloud_storage_tier of this SapHanaDatabaseSnapshotSummary.
        :type cloud_storage_tier: SnapshotCloudStorageTier
        """

        self._cloud_storage_tier = cloud_storage_tier

    @property
    def consistency_level(self):
        """Gets the consistency_level of this SapHanaDatabaseSnapshotSummary.


        :return: The consistency_level of this SapHanaDatabaseSnapshotSummary.
        :rtype: str
        """
        return self._consistency_level

    @consistency_level.setter
    def consistency_level(self, consistency_level):
        """Sets the consistency_level of this SapHanaDatabaseSnapshotSummary.


        :param consistency_level: The consistency_level of this SapHanaDatabaseSnapshotSummary.
        :type consistency_level: str
        """

        self._consistency_level = consistency_level

    @property
    def _date(self):
        """Gets the _date of this SapHanaDatabaseSnapshotSummary.


        :return: The _date of this SapHanaDatabaseSnapshotSummary.
        :rtype: datetime
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this SapHanaDatabaseSnapshotSummary.


        :param _date: The _date of this SapHanaDatabaseSnapshotSummary.
        :type _date: datetime
        """
        if _date is None:
            raise ValueError("Invalid value for `_date`, must not be `None`")

        self.__date = _date

    @property
    def expiration_date(self):
        """Gets the expiration_date of this SapHanaDatabaseSnapshotSummary.


        :return: The expiration_date of this SapHanaDatabaseSnapshotSummary.
        :rtype: datetime
        """
        return self._expiration_date

    @expiration_date.setter
    def expiration_date(self, expiration_date):
        """Sets the expiration_date of this SapHanaDatabaseSnapshotSummary.


        :param expiration_date: The expiration_date of this SapHanaDatabaseSnapshotSummary.
        :type expiration_date: datetime
        """

        self._expiration_date = expiration_date

    @property
    def id(self):
        """Gets the id of this SapHanaDatabaseSnapshotSummary.


        :return: The id of this SapHanaDatabaseSnapshotSummary.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SapHanaDatabaseSnapshotSummary.


        :param id: The id of this SapHanaDatabaseSnapshotSummary.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def index_state(self):
        """Gets the index_state of this SapHanaDatabaseSnapshotSummary.

        Integer value representing the state of the indexing job for a snapshot. 0 means that the indexing has not begun or is in progress. 1 means indexing completed successfully. 2 means that the indexer failed to process this snapshot. 

        :return: The index_state of this SapHanaDatabaseSnapshotSummary.
        :rtype: int
        """
        return self._index_state

    @index_state.setter
    def index_state(self, index_state):
        """Sets the index_state of this SapHanaDatabaseSnapshotSummary.

        Integer value representing the state of the indexing job for a snapshot. 0 means that the indexing has not begun or is in progress. 1 means indexing completed successfully. 2 means that the indexer failed to process this snapshot. 

        :param index_state: The index_state of this SapHanaDatabaseSnapshotSummary.
        :type index_state: int
        """

        self._index_state = index_state

    @property
    def is_custom_retention_applied(self):
        """Gets the is_custom_retention_applied of this SapHanaDatabaseSnapshotSummary.

        A Boolean that indicates whether or not custom retention is applied to the snapshot. 

        :return: The is_custom_retention_applied of this SapHanaDatabaseSnapshotSummary.
        :rtype: bool
        """
        return self._is_custom_retention_applied

    @is_custom_retention_applied.setter
    def is_custom_retention_applied(self, is_custom_retention_applied):
        """Sets the is_custom_retention_applied of this SapHanaDatabaseSnapshotSummary.

        A Boolean that indicates whether or not custom retention is applied to the snapshot. 

        :param is_custom_retention_applied: The is_custom_retention_applied of this SapHanaDatabaseSnapshotSummary.
        :type is_custom_retention_applied: bool
        """
        if is_custom_retention_applied is None:
            raise ValueError("Invalid value for `is_custom_retention_applied`, must not be `None`")

        self._is_custom_retention_applied = is_custom_retention_applied

    @property
    def is_on_demand_snapshot(self):
        """Gets the is_on_demand_snapshot of this SapHanaDatabaseSnapshotSummary.


        :return: The is_on_demand_snapshot of this SapHanaDatabaseSnapshotSummary.
        :rtype: bool
        """
        return self._is_on_demand_snapshot

    @is_on_demand_snapshot.setter
    def is_on_demand_snapshot(self, is_on_demand_snapshot):
        """Sets the is_on_demand_snapshot of this SapHanaDatabaseSnapshotSummary.


        :param is_on_demand_snapshot: The is_on_demand_snapshot of this SapHanaDatabaseSnapshotSummary.
        :type is_on_demand_snapshot: bool
        """
        if is_on_demand_snapshot is None:
            raise ValueError("Invalid value for `is_on_demand_snapshot`, must not be `None`")

        self._is_on_demand_snapshot = is_on_demand_snapshot

    @property
    def is_placed_on_legal_hold(self):
        """Gets the is_placed_on_legal_hold of this SapHanaDatabaseSnapshotSummary.

        A Boolean that indicates whether the snapshot is placed on Legal Hold. When this value is 'true', the snapshot is placed on Legal Hold.

        :return: The is_placed_on_legal_hold of this SapHanaDatabaseSnapshotSummary.
        :rtype: bool
        """
        return self._is_placed_on_legal_hold

    @is_placed_on_legal_hold.setter
    def is_placed_on_legal_hold(self, is_placed_on_legal_hold):
        """Sets the is_placed_on_legal_hold of this SapHanaDatabaseSnapshotSummary.

        A Boolean that indicates whether the snapshot is placed on Legal Hold. When this value is 'true', the snapshot is placed on Legal Hold.

        :param is_placed_on_legal_hold: The is_placed_on_legal_hold of this SapHanaDatabaseSnapshotSummary.
        :type is_placed_on_legal_hold: bool
        """

        self._is_placed_on_legal_hold = is_placed_on_legal_hold

    @property
    def is_retained_by_retention_lock_sla(self):
        """Gets the is_retained_by_retention_lock_sla of this SapHanaDatabaseSnapshotSummary.

        A Boolean that indicates whether the snapshot is being retained under a Retention Lock SLA Domain. When this value is 'true', the snapshot is being retained under a Retention Lock SLA Domain.

        :return: The is_retained_by_retention_lock_sla of this SapHanaDatabaseSnapshotSummary.
        :rtype: bool
        """
        return self._is_retained_by_retention_lock_sla

    @is_retained_by_retention_lock_sla.setter
    def is_retained_by_retention_lock_sla(self, is_retained_by_retention_lock_sla):
        """Sets the is_retained_by_retention_lock_sla of this SapHanaDatabaseSnapshotSummary.

        A Boolean that indicates whether the snapshot is being retained under a Retention Lock SLA Domain. When this value is 'true', the snapshot is being retained under a Retention Lock SLA Domain.

        :param is_retained_by_retention_lock_sla: The is_retained_by_retention_lock_sla of this SapHanaDatabaseSnapshotSummary.
        :type is_retained_by_retention_lock_sla: bool
        """

        self._is_retained_by_retention_lock_sla = is_retained_by_retention_lock_sla

    @property
    def parent_snapshot_id(self):
        """Gets the parent_snapshot_id of this SapHanaDatabaseSnapshotSummary.

        ID of the parent snapshot if the current snapshot is a child snapshot. Child snapshots are snapshots of objects that are part of an app, either a vCloud Director vApp or an AppBlueprint. Snapshots of the app are parent snapshots. 

        :return: The parent_snapshot_id of this SapHanaDatabaseSnapshotSummary.
        :rtype: str
        """
        return self._parent_snapshot_id

    @parent_snapshot_id.setter
    def parent_snapshot_id(self, parent_snapshot_id):
        """Sets the parent_snapshot_id of this SapHanaDatabaseSnapshotSummary.

        ID of the parent snapshot if the current snapshot is a child snapshot. Child snapshots are snapshots of objects that are part of an app, either a vCloud Director vApp or an AppBlueprint. Snapshots of the app are parent snapshots. 

        :param parent_snapshot_id: The parent_snapshot_id of this SapHanaDatabaseSnapshotSummary.
        :type parent_snapshot_id: str
        """

        self._parent_snapshot_id = parent_snapshot_id

    @property
    def replication_location_ids(self):
        """Gets the replication_location_ids of this SapHanaDatabaseSnapshotSummary.


        :return: The replication_location_ids of this SapHanaDatabaseSnapshotSummary.
        :rtype: List[str]
        """
        return self._replication_location_ids

    @replication_location_ids.setter
    def replication_location_ids(self, replication_location_ids):
        """Sets the replication_location_ids of this SapHanaDatabaseSnapshotSummary.


        :param replication_location_ids: The replication_location_ids of this SapHanaDatabaseSnapshotSummary.
        :type replication_location_ids: List[str]
        """
        if replication_location_ids is None:
            raise ValueError("Invalid value for `replication_location_ids`, must not be `None`")

        self._replication_location_ids = replication_location_ids

    @property
    def sla_id(self):
        """Gets the sla_id of this SapHanaDatabaseSnapshotSummary.

        (Deprecated) For a policy based snapshot this parameter contains the ID of the SLA Domain currently assigned to the data source of that snapshot. For an on demand snapshot this field corresponds to the SLA Domain that was assigned when the snapshot was taken. A data source, and individual snapshots, can be reassigned to a different SLA Domain, or the SLA Domain can be modified. In any of these cases this parameter can contain a stale and incorrect value. To view retention information for this snapshot, use snapshotRetentionInfo instead.

        :return: The sla_id of this SapHanaDatabaseSnapshotSummary.
        :rtype: str
        """
        return self._sla_id

    @sla_id.setter
    def sla_id(self, sla_id):
        """Sets the sla_id of this SapHanaDatabaseSnapshotSummary.

        (Deprecated) For a policy based snapshot this parameter contains the ID of the SLA Domain currently assigned to the data source of that snapshot. For an on demand snapshot this field corresponds to the SLA Domain that was assigned when the snapshot was taken. A data source, and individual snapshots, can be reassigned to a different SLA Domain, or the SLA Domain can be modified. In any of these cases this parameter can contain a stale and incorrect value. To view retention information for this snapshot, use snapshotRetentionInfo instead.

        :param sla_id: The sla_id of this SapHanaDatabaseSnapshotSummary.
        :type sla_id: str
        """
        if sla_id is None:
            raise ValueError("Invalid value for `sla_id`, must not be `None`")

        self._sla_id = sla_id

    @property
    def sla_name(self):
        """Gets the sla_name of this SapHanaDatabaseSnapshotSummary.

        (Deprecated) For a policy based snapshot this parameter contains the name of the SLA Domain currently assigned to the data source of that snapshot. For an on demand snapshot this field corresponds to the SLA Domain that was assigned when the snapshot was taken. A data source, and individual snapshots, can be reassigned to a different SLA Domain, or the SLA Domain can be modified. In any of these cases this parameter can contain a stale and incorrect value. To view retention information for this snapshot, use snapshotRetentionInfo instead.

        :return: The sla_name of this SapHanaDatabaseSnapshotSummary.
        :rtype: str
        """
        return self._sla_name

    @sla_name.setter
    def sla_name(self, sla_name):
        """Sets the sla_name of this SapHanaDatabaseSnapshotSummary.

        (Deprecated) For a policy based snapshot this parameter contains the name of the SLA Domain currently assigned to the data source of that snapshot. For an on demand snapshot this field corresponds to the SLA Domain that was assigned when the snapshot was taken. A data source, and individual snapshots, can be reassigned to a different SLA Domain, or the SLA Domain can be modified. In any of these cases this parameter can contain a stale and incorrect value. To view retention information for this snapshot, use snapshotRetentionInfo instead.

        :param sla_name: The sla_name of this SapHanaDatabaseSnapshotSummary.
        :type sla_name: str
        """
        if sla_name is None:
            raise ValueError("Invalid value for `sla_name`, must not be `None`")

        self._sla_name = sla_name

    @property
    def snapshot_retention_info(self):
        """Gets the snapshot_retention_info of this SapHanaDatabaseSnapshotSummary.


        :return: The snapshot_retention_info of this SapHanaDatabaseSnapshotSummary.
        :rtype: SnapshotRetentionInfo
        """
        return self._snapshot_retention_info

    @snapshot_retention_info.setter
    def snapshot_retention_info(self, snapshot_retention_info):
        """Sets the snapshot_retention_info of this SapHanaDatabaseSnapshotSummary.


        :param snapshot_retention_info: The snapshot_retention_info of this SapHanaDatabaseSnapshotSummary.
        :type snapshot_retention_info: SnapshotRetentionInfo
        """

        self._snapshot_retention_info = snapshot_retention_info

    @property
    def source_object_type(self):
        """Gets the source_object_type of this SapHanaDatabaseSnapshotSummary.


        :return: The source_object_type of this SapHanaDatabaseSnapshotSummary.
        :rtype: str
        """
        return self._source_object_type

    @source_object_type.setter
    def source_object_type(self, source_object_type):
        """Sets the source_object_type of this SapHanaDatabaseSnapshotSummary.


        :param source_object_type: The source_object_type of this SapHanaDatabaseSnapshotSummary.
        :type source_object_type: str
        """

        self._source_object_type = source_object_type

    @property
    def backup_id(self):
        """Gets the backup_id of this SapHanaDatabaseSnapshotSummary.

        ID of the SAP HANA backup. This ID uniquely identifies a backup to SAP HANA. All backup files from a single backup share the same backup ID.

        :return: The backup_id of this SapHanaDatabaseSnapshotSummary.
        :rtype: int
        """
        return self._backup_id

    @backup_id.setter
    def backup_id(self, backup_id):
        """Sets the backup_id of this SapHanaDatabaseSnapshotSummary.

        ID of the SAP HANA backup. This ID uniquely identifies a backup to SAP HANA. All backup files from a single backup share the same backup ID.

        :param backup_id: The backup_id of this SapHanaDatabaseSnapshotSummary.
        :type backup_id: int
        """
        if backup_id is None:
            raise ValueError("Invalid value for `backup_id`, must not be `None`")

        self._backup_id = backup_id

    @property
    def backup_prefix(self):
        """Gets the backup_prefix of this SapHanaDatabaseSnapshotSummary.

        The backup prefix that was used while taking the backup.

        :return: The backup_prefix of this SapHanaDatabaseSnapshotSummary.
        :rtype: str
        """
        return self._backup_prefix

    @backup_prefix.setter
    def backup_prefix(self, backup_prefix):
        """Sets the backup_prefix of this SapHanaDatabaseSnapshotSummary.

        The backup prefix that was used while taking the backup.

        :param backup_prefix: The backup_prefix of this SapHanaDatabaseSnapshotSummary.
        :type backup_prefix: str
        """
        if backup_prefix is None:
            raise ValueError("Invalid value for `backup_prefix`, must not be `None`")

        self._backup_prefix = backup_prefix

    @property
    def backup_type(self):
        """Gets the backup_type of this SapHanaDatabaseSnapshotSummary.

        Type of the SAP HANA backup.

        :return: The backup_type of this SapHanaDatabaseSnapshotSummary.
        :rtype: str
        """
        return self._backup_type

    @backup_type.setter
    def backup_type(self, backup_type):
        """Sets the backup_type of this SapHanaDatabaseSnapshotSummary.

        Type of the SAP HANA backup.

        :param backup_type: The backup_type of this SapHanaDatabaseSnapshotSummary.
        :type backup_type: str
        """
        allowed_values = ["FULL", "INCREMENTAL"]  # noqa: E501
        if backup_type not in allowed_values:
            raise ValueError(
                "Invalid value for `backup_type` ({0}), must be one of {1}"
                .format(backup_type, allowed_values)
            )

        self._backup_type = backup_type

    @property
    def base_backup_id(self):
        """Gets the base_backup_id of this SapHanaDatabaseSnapshotSummary.

        The backup ID of the full data backup or the delta backup on which the current delta backup is based.

        :return: The base_backup_id of this SapHanaDatabaseSnapshotSummary.
        :rtype: int
        """
        return self._base_backup_id

    @base_backup_id.setter
    def base_backup_id(self, base_backup_id):
        """Sets the base_backup_id of this SapHanaDatabaseSnapshotSummary.

        The backup ID of the full data backup or the delta backup on which the current delta backup is based.

        :param base_backup_id: The base_backup_id of this SapHanaDatabaseSnapshotSummary.
        :type base_backup_id: int
        """

        self._base_backup_id = base_backup_id

    @property
    def is_external_backup(self):
        """Gets the is_external_backup of this SapHanaDatabaseSnapshotSummary.

        This specifies whether the backup was triggered by HANA studio, SAP HANA cockpit, or using HDBSQL commands.

        :return: The is_external_backup of this SapHanaDatabaseSnapshotSummary.
        :rtype: bool
        """
        return self._is_external_backup

    @is_external_backup.setter
    def is_external_backup(self, is_external_backup):
        """Sets the is_external_backup of this SapHanaDatabaseSnapshotSummary.

        This specifies whether the backup was triggered by HANA studio, SAP HANA cockpit, or using HDBSQL commands.

        :param is_external_backup: The is_external_backup of this SapHanaDatabaseSnapshotSummary.
        :type is_external_backup: bool
        """
        if is_external_backup is None:
            raise ValueError("Invalid value for `is_external_backup`, must not be `None`")

        self._is_external_backup = is_external_backup

    @property
    def is_rubrik_triggered_on_demand_backup(self):
        """Gets the is_rubrik_triggered_on_demand_backup of this SapHanaDatabaseSnapshotSummary.

        This specifies whether the backup was triggered by Rubrik and and whether the backup is an on-demand snapshot.

        :return: The is_rubrik_triggered_on_demand_backup of this SapHanaDatabaseSnapshotSummary.
        :rtype: bool
        """
        return self._is_rubrik_triggered_on_demand_backup

    @is_rubrik_triggered_on_demand_backup.setter
    def is_rubrik_triggered_on_demand_backup(self, is_rubrik_triggered_on_demand_backup):
        """Sets the is_rubrik_triggered_on_demand_backup of this SapHanaDatabaseSnapshotSummary.

        This specifies whether the backup was triggered by Rubrik and and whether the backup is an on-demand snapshot.

        :param is_rubrik_triggered_on_demand_backup: The is_rubrik_triggered_on_demand_backup of this SapHanaDatabaseSnapshotSummary.
        :type is_rubrik_triggered_on_demand_backup: bool
        """
        if is_rubrik_triggered_on_demand_backup is None:
            raise ValueError("Invalid value for `is_rubrik_triggered_on_demand_backup`, must not be `None`")

        self._is_rubrik_triggered_on_demand_backup = is_rubrik_triggered_on_demand_backup

    @property
    def rubrik_snapshot_end_time(self):
        """Gets the rubrik_snapshot_end_time of this SapHanaDatabaseSnapshotSummary.

        The end time, in UTC, of the backup with respect to the Rubrik cluster.

        :return: The rubrik_snapshot_end_time of this SapHanaDatabaseSnapshotSummary.
        :rtype: datetime
        """
        return self._rubrik_snapshot_end_time

    @rubrik_snapshot_end_time.setter
    def rubrik_snapshot_end_time(self, rubrik_snapshot_end_time):
        """Sets the rubrik_snapshot_end_time of this SapHanaDatabaseSnapshotSummary.

        The end time, in UTC, of the backup with respect to the Rubrik cluster.

        :param rubrik_snapshot_end_time: The rubrik_snapshot_end_time of this SapHanaDatabaseSnapshotSummary.
        :type rubrik_snapshot_end_time: datetime
        """
        if rubrik_snapshot_end_time is None:
            raise ValueError("Invalid value for `rubrik_snapshot_end_time`, must not be `None`")

        self._rubrik_snapshot_end_time = rubrik_snapshot_end_time

    @property
    def rubrik_snapshot_start_time(self):
        """Gets the rubrik_snapshot_start_time of this SapHanaDatabaseSnapshotSummary.

        The start time, in UTC, of the backup with respect to the Rubrik cluster.

        :return: The rubrik_snapshot_start_time of this SapHanaDatabaseSnapshotSummary.
        :rtype: datetime
        """
        return self._rubrik_snapshot_start_time

    @rubrik_snapshot_start_time.setter
    def rubrik_snapshot_start_time(self, rubrik_snapshot_start_time):
        """Sets the rubrik_snapshot_start_time of this SapHanaDatabaseSnapshotSummary.

        The start time, in UTC, of the backup with respect to the Rubrik cluster.

        :param rubrik_snapshot_start_time: The rubrik_snapshot_start_time of this SapHanaDatabaseSnapshotSummary.
        :type rubrik_snapshot_start_time: datetime
        """
        if rubrik_snapshot_start_time is None:
            raise ValueError("Invalid value for `rubrik_snapshot_start_time`, must not be `None`")

        self._rubrik_snapshot_start_time = rubrik_snapshot_start_time

    @property
    def sap_hana_end_time(self):
        """Gets the sap_hana_end_time of this SapHanaDatabaseSnapshotSummary.

        The end time, in UTC, of the backup with respect to the SAP HANA system.

        :return: The sap_hana_end_time of this SapHanaDatabaseSnapshotSummary.
        :rtype: datetime
        """
        return self._sap_hana_end_time

    @sap_hana_end_time.setter
    def sap_hana_end_time(self, sap_hana_end_time):
        """Sets the sap_hana_end_time of this SapHanaDatabaseSnapshotSummary.

        The end time, in UTC, of the backup with respect to the SAP HANA system.

        :param sap_hana_end_time: The sap_hana_end_time of this SapHanaDatabaseSnapshotSummary.
        :type sap_hana_end_time: datetime
        """
        if sap_hana_end_time is None:
            raise ValueError("Invalid value for `sap_hana_end_time`, must not be `None`")

        self._sap_hana_end_time = sap_hana_end_time

    @property
    def sap_hana_start_time(self):
        """Gets the sap_hana_start_time of this SapHanaDatabaseSnapshotSummary.

        The start time, in UTC, of the backup with respect to the SAP HANA system.

        :return: The sap_hana_start_time of this SapHanaDatabaseSnapshotSummary.
        :rtype: datetime
        """
        return self._sap_hana_start_time

    @sap_hana_start_time.setter
    def sap_hana_start_time(self, sap_hana_start_time):
        """Sets the sap_hana_start_time of this SapHanaDatabaseSnapshotSummary.

        The start time, in UTC, of the backup with respect to the SAP HANA system.

        :param sap_hana_start_time: The sap_hana_start_time of this SapHanaDatabaseSnapshotSummary.
        :type sap_hana_start_time: datetime
        """
        if sap_hana_start_time is None:
            raise ValueError("Invalid value for `sap_hana_start_time`, must not be `None`")

        self._sap_hana_start_time = sap_hana_start_time
