# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SlaFrequency(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, frequency: int=None, retention: int=None, time_unit: str=None):
        """SlaFrequency - a model defined in OpenAPI

        :param frequency: The frequency of this SlaFrequency.
        :param retention: The retention of this SlaFrequency.
        :param time_unit: The time_unit of this SlaFrequency.
        """
        self.openapi_types = {
            'frequency': int,
            'retention': int,
            'time_unit': str
        }

        self.attribute_map = {
            'frequency': 'frequency',
            'retention': 'retention',
            'time_unit': 'timeUnit'
        }

        self._frequency = frequency
        self._retention = retention
        self._time_unit = time_unit

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SlaFrequency':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SlaFrequency of this SlaFrequency.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def frequency(self):
        """Gets the frequency of this SlaFrequency.


        :return: The frequency of this SlaFrequency.
        :rtype: int
        """
        return self._frequency

    @frequency.setter
    def frequency(self, frequency):
        """Sets the frequency of this SlaFrequency.


        :param frequency: The frequency of this SlaFrequency.
        :type frequency: int
        """
        if frequency is None:
            raise ValueError("Invalid value for `frequency`, must not be `None`")

        self._frequency = frequency

    @property
    def retention(self):
        """Gets the retention of this SlaFrequency.


        :return: The retention of this SlaFrequency.
        :rtype: int
        """
        return self._retention

    @retention.setter
    def retention(self, retention):
        """Sets the retention of this SlaFrequency.


        :param retention: The retention of this SlaFrequency.
        :type retention: int
        """
        if retention is None:
            raise ValueError("Invalid value for `retention`, must not be `None`")

        self._retention = retention

    @property
    def time_unit(self):
        """Gets the time_unit of this SlaFrequency.

        Units for frequency and retention. Accepted values are Hourly, Daily, Weekly, Monthly, and Yearly.

        :return: The time_unit of this SlaFrequency.
        :rtype: str
        """
        return self._time_unit

    @time_unit.setter
    def time_unit(self, time_unit):
        """Sets the time_unit of this SlaFrequency.

        Units for frequency and retention. Accepted values are Hourly, Daily, Weekly, Monthly, and Yearly.

        :param time_unit: The time_unit of this SlaFrequency.
        :type time_unit: str
        """
        if time_unit is None:
            raise ValueError("Invalid value for `time_unit`, must not be `None`")

        self._time_unit = time_unit
