# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class VolumeGroupPatch(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, configured_sla_domain_id: str=None, force_full: bool=None, is_paused: bool=None, volume_ids_included_in_snapshots: List[str]=None):
        """VolumeGroupPatch - a model defined in OpenAPI

        :param configured_sla_domain_id: The configured_sla_domain_id of this VolumeGroupPatch.
        :param force_full: The force_full of this VolumeGroupPatch.
        :param is_paused: The is_paused of this VolumeGroupPatch.
        :param volume_ids_included_in_snapshots: The volume_ids_included_in_snapshots of this VolumeGroupPatch.
        """
        self.openapi_types = {
            'configured_sla_domain_id': str,
            'force_full': bool,
            'is_paused': bool,
            'volume_ids_included_in_snapshots': List[str]
        }

        self.attribute_map = {
            'configured_sla_domain_id': 'configuredSlaDomainId',
            'force_full': 'forceFull',
            'is_paused': 'isPaused',
            'volume_ids_included_in_snapshots': 'volumeIdsIncludedInSnapshots'
        }

        self._configured_sla_domain_id = configured_sla_domain_id
        self._force_full = force_full
        self._is_paused = is_paused
        self._volume_ids_included_in_snapshots = volume_ids_included_in_snapshots

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VolumeGroupPatch':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VolumeGroupPatch of this VolumeGroupPatch.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def configured_sla_domain_id(self):
        """Gets the configured_sla_domain_id of this VolumeGroupPatch.

        The ID of the SLA Domain policy to assign to the Volume Group.

        :return: The configured_sla_domain_id of this VolumeGroupPatch.
        :rtype: str
        """
        return self._configured_sla_domain_id

    @configured_sla_domain_id.setter
    def configured_sla_domain_id(self, configured_sla_domain_id):
        """Sets the configured_sla_domain_id of this VolumeGroupPatch.

        The ID of the SLA Domain policy to assign to the Volume Group.

        :param configured_sla_domain_id: The configured_sla_domain_id of this VolumeGroupPatch.
        :type configured_sla_domain_id: str
        """

        self._configured_sla_domain_id = configured_sla_domain_id

    @property
    def force_full(self):
        """Gets the force_full of this VolumeGroupPatch.

        Determines whether the next snapshot of the Volume Group is a full. After the snapshot has completed, this parameter will be reset to the default false value.

        :return: The force_full of this VolumeGroupPatch.
        :rtype: bool
        """
        return self._force_full

    @force_full.setter
    def force_full(self, force_full):
        """Sets the force_full of this VolumeGroupPatch.

        Determines whether the next snapshot of the Volume Group is a full. After the snapshot has completed, this parameter will be reset to the default false value.

        :param force_full: The force_full of this VolumeGroupPatch.
        :type force_full: bool
        """

        self._force_full = force_full

    @property
    def is_paused(self):
        """Gets the is_paused of this VolumeGroupPatch.

        Indicates whether backup, archival, and replicated is paused for this Volume Group.

        :return: The is_paused of this VolumeGroupPatch.
        :rtype: bool
        """
        return self._is_paused

    @is_paused.setter
    def is_paused(self, is_paused):
        """Sets the is_paused of this VolumeGroupPatch.

        Indicates whether backup, archival, and replicated is paused for this Volume Group.

        :param is_paused: The is_paused of this VolumeGroupPatch.
        :type is_paused: bool
        """

        self._is_paused = is_paused

    @property
    def volume_ids_included_in_snapshots(self):
        """Gets the volume_ids_included_in_snapshots of this VolumeGroupPatch.

        The unique ID of each volume included in the Volume Group.

        :return: The volume_ids_included_in_snapshots of this VolumeGroupPatch.
        :rtype: List[str]
        """
        return self._volume_ids_included_in_snapshots

    @volume_ids_included_in_snapshots.setter
    def volume_ids_included_in_snapshots(self, volume_ids_included_in_snapshots):
        """Sets the volume_ids_included_in_snapshots of this VolumeGroupPatch.

        The unique ID of each volume included in the Volume Group.

        :param volume_ids_included_in_snapshots: The volume_ids_included_in_snapshots of this VolumeGroupPatch.
        :type volume_ids_included_in_snapshots: List[str]
        """

        self._volume_ids_included_in_snapshots = volume_ids_included_in_snapshots
