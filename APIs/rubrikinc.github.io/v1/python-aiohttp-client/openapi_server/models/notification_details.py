# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.action_details import ActionDetails
from openapi_server import util


class NotificationDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, action: ActionDetails=None, failure_window: int=None, num_failures: int=None):
        """NotificationDetails - a model defined in OpenAPI

        :param action: The action of this NotificationDetails.
        :param failure_window: The failure_window of this NotificationDetails.
        :param num_failures: The num_failures of this NotificationDetails.
        """
        self.openapi_types = {
            'action': ActionDetails,
            'failure_window': int,
            'num_failures': int
        }

        self.attribute_map = {
            'action': 'action',
            'failure_window': 'failureWindow',
            'num_failures': 'numFailures'
        }

        self._action = action
        self._failure_window = failure_window
        self._num_failures = num_failures

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NotificationDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NotificationDetails of this NotificationDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def action(self):
        """Gets the action of this NotificationDetails.


        :return: The action of this NotificationDetails.
        :rtype: ActionDetails
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this NotificationDetails.


        :param action: The action of this NotificationDetails.
        :type action: ActionDetails
        """

        self._action = action

    @property
    def failure_window(self):
        """Gets the failure_window of this NotificationDetails.

        Window to check for number of failures.

        :return: The failure_window of this NotificationDetails.
        :rtype: int
        """
        return self._failure_window

    @failure_window.setter
    def failure_window(self, failure_window):
        """Sets the failure_window of this NotificationDetails.

        Window to check for number of failures.

        :param failure_window: The failure_window of this NotificationDetails.
        :type failure_window: int
        """
        if failure_window is None:
            raise ValueError("Invalid value for `failure_window`, must not be `None`")

        self._failure_window = failure_window

    @property
    def num_failures(self):
        """Gets the num_failures of this NotificationDetails.

        Number of failures before notification is triggered.

        :return: The num_failures of this NotificationDetails.
        :rtype: int
        """
        return self._num_failures

    @num_failures.setter
    def num_failures(self, num_failures):
        """Sets the num_failures of this NotificationDetails.

        Number of failures before notification is triggered.

        :param num_failures: The num_failures of this NotificationDetails.
        :type num_failures: int
        """
        if num_failures is None:
            raise ValueError("Invalid value for `num_failures`, must not be `None`")

        self._num_failures = num_failures
