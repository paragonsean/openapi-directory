# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EnvoySummary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, ip_address: str=None, organization_id: str=None, port: int=None, status: str=None):
        """EnvoySummary - a model defined in OpenAPI

        :param id: The id of this EnvoySummary.
        :param ip_address: The ip_address of this EnvoySummary.
        :param organization_id: The organization_id of this EnvoySummary.
        :param port: The port of this EnvoySummary.
        :param status: The status of this EnvoySummary.
        """
        self.openapi_types = {
            'id': str,
            'ip_address': str,
            'organization_id': str,
            'port': int,
            'status': str
        }

        self.attribute_map = {
            'id': 'id',
            'ip_address': 'ipAddress',
            'organization_id': 'organizationId',
            'port': 'port',
            'status': 'status'
        }

        self._id = id
        self._ip_address = ip_address
        self._organization_id = organization_id
        self._port = port
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EnvoySummary':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EnvoySummary of this EnvoySummary.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this EnvoySummary.

        ID assigned to a Rubrik Envoy object.

        :return: The id of this EnvoySummary.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EnvoySummary.

        ID assigned to a Rubrik Envoy object.

        :param id: The id of this EnvoySummary.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def ip_address(self):
        """Gets the ip_address of this EnvoySummary.

        IPv4 address of a specified Rubrik Envoy object that can be accessed by the specified Rubrik cluster.

        :return: The ip_address of this EnvoySummary.
        :rtype: str
        """
        return self._ip_address

    @ip_address.setter
    def ip_address(self, ip_address):
        """Sets the ip_address of this EnvoySummary.

        IPv4 address of a specified Rubrik Envoy object that can be accessed by the specified Rubrik cluster.

        :param ip_address: The ip_address of this EnvoySummary.
        :type ip_address: str
        """
        if ip_address is None:
            raise ValueError("Invalid value for `ip_address`, must not be `None`")

        self._ip_address = ip_address

    @property
    def organization_id(self):
        """Gets the organization_id of this EnvoySummary.

        ID assigned to the organization object that is associated with the specified Rubrik Envoy object.

        :return: The organization_id of this EnvoySummary.
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """Sets the organization_id of this EnvoySummary.

        ID assigned to the organization object that is associated with the specified Rubrik Envoy object.

        :param organization_id: The organization_id of this EnvoySummary.
        :type organization_id: str
        """
        if organization_id is None:
            raise ValueError("Invalid value for `organization_id`, must not be `None`")

        self._organization_id = organization_id

    @property
    def port(self):
        """Gets the port of this EnvoySummary.

        Rubrik cluster port assigned to the specified organization for tunnel connections to the Rubrik web UI.

        :return: The port of this EnvoySummary.
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this EnvoySummary.

        Rubrik cluster port assigned to the specified organization for tunnel connections to the Rubrik web UI.

        :param port: The port of this EnvoySummary.
        :type port: int
        """
        if port is None:
            raise ValueError("Invalid value for `port`, must not be `None`")

        self._port = port

    @property
    def status(self):
        """Gets the status of this EnvoySummary.

        Connection state of the specified Rubrik Envoy object.

        :return: The status of this EnvoySummary.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this EnvoySummary.

        Connection state of the specified Rubrik Envoy object.

        :param status: The status of this EnvoySummary.
        :type status: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status
