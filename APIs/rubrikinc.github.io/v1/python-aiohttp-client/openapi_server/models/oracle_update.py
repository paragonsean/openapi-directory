# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.oracle_node_order import OracleNodeOrder
from openapi_server import util


class OracleUpdate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, host_log_retention_hours: int=None, host_mount: str=None, log_backup_frequency_in_minutes: int=None, log_retention_hours: int=None, num_channels: int=None, configured_sla_domain_id_deprecated: str=None, node_order: List[OracleNodeOrder]=None):
        """OracleUpdate - a model defined in OpenAPI

        :param host_log_retention_hours: The host_log_retention_hours of this OracleUpdate.
        :param host_mount: The host_mount of this OracleUpdate.
        :param log_backup_frequency_in_minutes: The log_backup_frequency_in_minutes of this OracleUpdate.
        :param log_retention_hours: The log_retention_hours of this OracleUpdate.
        :param num_channels: The num_channels of this OracleUpdate.
        :param configured_sla_domain_id_deprecated: The configured_sla_domain_id_deprecated of this OracleUpdate.
        :param node_order: The node_order of this OracleUpdate.
        """
        self.openapi_types = {
            'host_log_retention_hours': int,
            'host_mount': str,
            'log_backup_frequency_in_minutes': int,
            'log_retention_hours': int,
            'num_channels': int,
            'configured_sla_domain_id_deprecated': str,
            'node_order': List[OracleNodeOrder]
        }

        self.attribute_map = {
            'host_log_retention_hours': 'hostLogRetentionHours',
            'host_mount': 'hostMount',
            'log_backup_frequency_in_minutes': 'logBackupFrequencyInMinutes',
            'log_retention_hours': 'logRetentionHours',
            'num_channels': 'numChannels',
            'configured_sla_domain_id_deprecated': 'configuredSlaDomainIdDeprecated',
            'node_order': 'nodeOrder'
        }

        self._host_log_retention_hours = host_log_retention_hours
        self._host_mount = host_mount
        self._log_backup_frequency_in_minutes = log_backup_frequency_in_minutes
        self._log_retention_hours = log_retention_hours
        self._num_channels = num_channels
        self._configured_sla_domain_id_deprecated = configured_sla_domain_id_deprecated
        self._node_order = node_order

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OracleUpdate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OracleUpdate of this OracleUpdate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def host_log_retention_hours(self):
        """Gets the host_log_retention_hours of this OracleUpdate.

        Specifies an interval in hours. For Oracle archived redo log files whose nextTime is before (now - interval), the next log snapshot job will delete them from the host. Set to 0 for inheriting the value from its parent; -1 for immediate deletion; and -2 to skip log deletion.

        :return: The host_log_retention_hours of this OracleUpdate.
        :rtype: int
        """
        return self._host_log_retention_hours

    @host_log_retention_hours.setter
    def host_log_retention_hours(self, host_log_retention_hours):
        """Sets the host_log_retention_hours of this OracleUpdate.

        Specifies an interval in hours. For Oracle archived redo log files whose nextTime is before (now - interval), the next log snapshot job will delete them from the host. Set to 0 for inheriting the value from its parent; -1 for immediate deletion; and -2 to skip log deletion.

        :param host_log_retention_hours: The host_log_retention_hours of this OracleUpdate.
        :type host_log_retention_hours: int
        """

        self._host_log_retention_hours = host_log_retention_hours

    @property
    def host_mount(self):
        """Gets the host_mount of this OracleUpdate.

        Path where the NFS share is mounted on the host.

        :return: The host_mount of this OracleUpdate.
        :rtype: str
        """
        return self._host_mount

    @host_mount.setter
    def host_mount(self, host_mount):
        """Sets the host_mount of this OracleUpdate.

        Path where the NFS share is mounted on the host.

        :param host_mount: The host_mount of this OracleUpdate.
        :type host_mount: str
        """

        self._host_mount = host_mount

    @property
    def log_backup_frequency_in_minutes(self):
        """Gets the log_backup_frequency_in_minutes of this OracleUpdate.

        Specifies an interval in minutes. This interval is the period between successive log backups.

        :return: The log_backup_frequency_in_minutes of this OracleUpdate.
        :rtype: int
        """
        return self._log_backup_frequency_in_minutes

    @log_backup_frequency_in_minutes.setter
    def log_backup_frequency_in_minutes(self, log_backup_frequency_in_minutes):
        """Sets the log_backup_frequency_in_minutes of this OracleUpdate.

        Specifies an interval in minutes. This interval is the period between successive log backups.

        :param log_backup_frequency_in_minutes: The log_backup_frequency_in_minutes of this OracleUpdate.
        :type log_backup_frequency_in_minutes: int
        """

        self._log_backup_frequency_in_minutes = log_backup_frequency_in_minutes

    @property
    def log_retention_hours(self):
        """Gets the log_retention_hours of this OracleUpdate.

        Specifies an interval in hours. Log backups are retained for the duration of the interval.

        :return: The log_retention_hours of this OracleUpdate.
        :rtype: int
        """
        return self._log_retention_hours

    @log_retention_hours.setter
    def log_retention_hours(self, log_retention_hours):
        """Sets the log_retention_hours of this OracleUpdate.

        Specifies an interval in hours. Log backups are retained for the duration of the interval.

        :param log_retention_hours: The log_retention_hours of this OracleUpdate.
        :type log_retention_hours: int
        """

        self._log_retention_hours = log_retention_hours

    @property
    def num_channels(self):
        """Gets the num_channels of this OracleUpdate.

        Number of channels used to backup the Oracle database.

        :return: The num_channels of this OracleUpdate.
        :rtype: int
        """
        return self._num_channels

    @num_channels.setter
    def num_channels(self, num_channels):
        """Sets the num_channels of this OracleUpdate.

        Number of channels used to backup the Oracle database.

        :param num_channels: The num_channels of this OracleUpdate.
        :type num_channels: int
        """

        self._num_channels = num_channels

    @property
    def configured_sla_domain_id_deprecated(self):
        """Gets the configured_sla_domain_id_deprecated of this OracleUpdate.

        ID of the SLA domain protecting the specified Oracle object. Log backup jobs are no longer scheduled if the SLA domain indicates the Oracle object is unprotected. The specified SLA domain is not used to configure the protection or retention for this Oracle object. This is a DEPRECATED field, and will be removed in later releases.

        :return: The configured_sla_domain_id_deprecated of this OracleUpdate.
        :rtype: str
        """
        return self._configured_sla_domain_id_deprecated

    @configured_sla_domain_id_deprecated.setter
    def configured_sla_domain_id_deprecated(self, configured_sla_domain_id_deprecated):
        """Sets the configured_sla_domain_id_deprecated of this OracleUpdate.

        ID of the SLA domain protecting the specified Oracle object. Log backup jobs are no longer scheduled if the SLA domain indicates the Oracle object is unprotected. The specified SLA domain is not used to configure the protection or retention for this Oracle object. This is a DEPRECATED field, and will be removed in later releases.

        :param configured_sla_domain_id_deprecated: The configured_sla_domain_id_deprecated of this OracleUpdate.
        :type configured_sla_domain_id_deprecated: str
        """

        self._configured_sla_domain_id_deprecated = configured_sla_domain_id_deprecated

    @property
    def node_order(self):
        """Gets the node_order of this OracleUpdate.

        Specifies an order for the RAC nodes. Automated Oracle backups use the RAC nodes in the specified order.

        :return: The node_order of this OracleUpdate.
        :rtype: List[OracleNodeOrder]
        """
        return self._node_order

    @node_order.setter
    def node_order(self, node_order):
        """Sets the node_order of this OracleUpdate.

        Specifies an order for the RAC nodes. Automated Oracle backups use the RAC nodes in the specified order.

        :param node_order: The node_order of this OracleUpdate.
        :type node_order: List[OracleNodeOrder]
        """

        self._node_order = node_order
