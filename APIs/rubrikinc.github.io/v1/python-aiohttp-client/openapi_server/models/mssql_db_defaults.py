# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MssqlDbDefaults(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cbt_status: bool=None, log_backup_frequency_in_seconds: int=None, log_retention_time_in_hours: int=None):
        """MssqlDbDefaults - a model defined in OpenAPI

        :param cbt_status: The cbt_status of this MssqlDbDefaults.
        :param log_backup_frequency_in_seconds: The log_backup_frequency_in_seconds of this MssqlDbDefaults.
        :param log_retention_time_in_hours: The log_retention_time_in_hours of this MssqlDbDefaults.
        """
        self.openapi_types = {
            'cbt_status': bool,
            'log_backup_frequency_in_seconds': int,
            'log_retention_time_in_hours': int
        }

        self.attribute_map = {
            'cbt_status': 'cbtStatus',
            'log_backup_frequency_in_seconds': 'logBackupFrequencyInSeconds',
            'log_retention_time_in_hours': 'logRetentionTimeInHours'
        }

        self._cbt_status = cbt_status
        self._log_backup_frequency_in_seconds = log_backup_frequency_in_seconds
        self._log_retention_time_in_hours = log_retention_time_in_hours

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MssqlDbDefaults':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MssqlDbDefaults of this MssqlDbDefaults.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cbt_status(self):
        """Gets the cbt_status of this MssqlDbDefaults.

        True to enable a CBT-based backup, false to disable a CBT-based backup.

        :return: The cbt_status of this MssqlDbDefaults.
        :rtype: bool
        """
        return self._cbt_status

    @cbt_status.setter
    def cbt_status(self, cbt_status):
        """Sets the cbt_status of this MssqlDbDefaults.

        True to enable a CBT-based backup, false to disable a CBT-based backup.

        :param cbt_status: The cbt_status of this MssqlDbDefaults.
        :type cbt_status: bool
        """
        if cbt_status is None:
            raise ValueError("Invalid value for `cbt_status`, must not be `None`")

        self._cbt_status = cbt_status

    @property
    def log_backup_frequency_in_seconds(self):
        """Gets the log_backup_frequency_in_seconds of this MssqlDbDefaults.


        :return: The log_backup_frequency_in_seconds of this MssqlDbDefaults.
        :rtype: int
        """
        return self._log_backup_frequency_in_seconds

    @log_backup_frequency_in_seconds.setter
    def log_backup_frequency_in_seconds(self, log_backup_frequency_in_seconds):
        """Sets the log_backup_frequency_in_seconds of this MssqlDbDefaults.


        :param log_backup_frequency_in_seconds: The log_backup_frequency_in_seconds of this MssqlDbDefaults.
        :type log_backup_frequency_in_seconds: int
        """
        if log_backup_frequency_in_seconds is None:
            raise ValueError("Invalid value for `log_backup_frequency_in_seconds`, must not be `None`")

        self._log_backup_frequency_in_seconds = log_backup_frequency_in_seconds

    @property
    def log_retention_time_in_hours(self):
        """Gets the log_retention_time_in_hours of this MssqlDbDefaults.


        :return: The log_retention_time_in_hours of this MssqlDbDefaults.
        :rtype: int
        """
        return self._log_retention_time_in_hours

    @log_retention_time_in_hours.setter
    def log_retention_time_in_hours(self, log_retention_time_in_hours):
        """Sets the log_retention_time_in_hours of this MssqlDbDefaults.


        :param log_retention_time_in_hours: The log_retention_time_in_hours of this MssqlDbDefaults.
        :type log_retention_time_in_hours: int
        """
        if log_retention_time_in_hours is None:
            raise ValueError("Invalid value for `log_retention_time_in_hours`, must not be `None`")

        self._log_retention_time_in_hours = log_retention_time_in_hours
