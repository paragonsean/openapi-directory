# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class InternalJobInstanceDetail(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, archived: bool=None, child_job_debug_info: str=None, end_time: str=None, error_info: str=None, id: str=None, is_disabled: bool=None, job_progress: float=None, job_type: str=None, node_id: str=None, result: str=None, start_time: str=None, status: str=None):
        """InternalJobInstanceDetail - a model defined in OpenAPI

        :param archived: The archived of this InternalJobInstanceDetail.
        :param child_job_debug_info: The child_job_debug_info of this InternalJobInstanceDetail.
        :param end_time: The end_time of this InternalJobInstanceDetail.
        :param error_info: The error_info of this InternalJobInstanceDetail.
        :param id: The id of this InternalJobInstanceDetail.
        :param is_disabled: The is_disabled of this InternalJobInstanceDetail.
        :param job_progress: The job_progress of this InternalJobInstanceDetail.
        :param job_type: The job_type of this InternalJobInstanceDetail.
        :param node_id: The node_id of this InternalJobInstanceDetail.
        :param result: The result of this InternalJobInstanceDetail.
        :param start_time: The start_time of this InternalJobInstanceDetail.
        :param status: The status of this InternalJobInstanceDetail.
        """
        self.openapi_types = {
            'archived': bool,
            'child_job_debug_info': str,
            'end_time': str,
            'error_info': str,
            'id': str,
            'is_disabled': bool,
            'job_progress': float,
            'job_type': str,
            'node_id': str,
            'result': str,
            'start_time': str,
            'status': str
        }

        self.attribute_map = {
            'archived': 'archived',
            'child_job_debug_info': 'childJobDebugInfo',
            'end_time': 'endTime',
            'error_info': 'errorInfo',
            'id': 'id',
            'is_disabled': 'isDisabled',
            'job_progress': 'jobProgress',
            'job_type': 'jobType',
            'node_id': 'nodeId',
            'result': 'result',
            'start_time': 'startTime',
            'status': 'status'
        }

        self._archived = archived
        self._child_job_debug_info = child_job_debug_info
        self._end_time = end_time
        self._error_info = error_info
        self._id = id
        self._is_disabled = is_disabled
        self._job_progress = job_progress
        self._job_type = job_type
        self._node_id = node_id
        self._result = result
        self._start_time = start_time
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InternalJobInstanceDetail':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InternalJobInstanceDetail of this InternalJobInstanceDetail.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def archived(self):
        """Gets the archived of this InternalJobInstanceDetail.

        Whether this job instance has been archived.

        :return: The archived of this InternalJobInstanceDetail.
        :rtype: bool
        """
        return self._archived

    @archived.setter
    def archived(self, archived):
        """Sets the archived of this InternalJobInstanceDetail.

        Whether this job instance has been archived.

        :param archived: The archived of this InternalJobInstanceDetail.
        :type archived: bool
        """
        if archived is None:
            raise ValueError("Invalid value for `archived`, must not be `None`")

        self._archived = archived

    @property
    def child_job_debug_info(self):
        """Gets the child_job_debug_info of this InternalJobInstanceDetail.

        Some job types create other 'child' jobs to perform their work. Here we show information on how this job is being affected by its child jobs (if any).

        :return: The child_job_debug_info of this InternalJobInstanceDetail.
        :rtype: str
        """
        return self._child_job_debug_info

    @child_job_debug_info.setter
    def child_job_debug_info(self, child_job_debug_info):
        """Sets the child_job_debug_info of this InternalJobInstanceDetail.

        Some job types create other 'child' jobs to perform their work. Here we show information on how this job is being affected by its child jobs (if any).

        :param child_job_debug_info: The child_job_debug_info of this InternalJobInstanceDetail.
        :type child_job_debug_info: str
        """

        self._child_job_debug_info = child_job_debug_info

    @property
    def end_time(self):
        """Gets the end_time of this InternalJobInstanceDetail.

        End time of the job instance.

        :return: The end_time of this InternalJobInstanceDetail.
        :rtype: str
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this InternalJobInstanceDetail.

        End time of the job instance.

        :param end_time: The end_time of this InternalJobInstanceDetail.
        :type end_time: str
        """

        self._end_time = end_time

    @property
    def error_info(self):
        """Gets the error_info of this InternalJobInstanceDetail.

        Error information of the job instance.

        :return: The error_info of this InternalJobInstanceDetail.
        :rtype: str
        """
        return self._error_info

    @error_info.setter
    def error_info(self, error_info):
        """Sets the error_info of this InternalJobInstanceDetail.

        Error information of the job instance.

        :param error_info: The error_info of this InternalJobInstanceDetail.
        :type error_info: str
        """

        self._error_info = error_info

    @property
    def id(self):
        """Gets the id of this InternalJobInstanceDetail.

        ID of the instance.

        :return: The id of this InternalJobInstanceDetail.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InternalJobInstanceDetail.

        ID of the instance.

        :param id: The id of this InternalJobInstanceDetail.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def is_disabled(self):
        """Gets the is_disabled of this InternalJobInstanceDetail.

        Whether this job is disabled or not.

        :return: The is_disabled of this InternalJobInstanceDetail.
        :rtype: bool
        """
        return self._is_disabled

    @is_disabled.setter
    def is_disabled(self, is_disabled):
        """Sets the is_disabled of this InternalJobInstanceDetail.

        Whether this job is disabled or not.

        :param is_disabled: The is_disabled of this InternalJobInstanceDetail.
        :type is_disabled: bool
        """
        if is_disabled is None:
            raise ValueError("Invalid value for `is_disabled`, must not be `None`")

        self._is_disabled = is_disabled

    @property
    def job_progress(self):
        """Gets the job_progress of this InternalJobInstanceDetail.

        The current progress in terms of percentage of the async request.

        :return: The job_progress of this InternalJobInstanceDetail.
        :rtype: float
        """
        return self._job_progress

    @job_progress.setter
    def job_progress(self, job_progress):
        """Sets the job_progress of this InternalJobInstanceDetail.

        The current progress in terms of percentage of the async request.

        :param job_progress: The job_progress of this InternalJobInstanceDetail.
        :type job_progress: float
        """

        self._job_progress = job_progress

    @property
    def job_type(self):
        """Gets the job_type of this InternalJobInstanceDetail.

        Type of the job.

        :return: The job_type of this InternalJobInstanceDetail.
        :rtype: str
        """
        return self._job_type

    @job_type.setter
    def job_type(self, job_type):
        """Sets the job_type of this InternalJobInstanceDetail.

        Type of the job.

        :param job_type: The job_type of this InternalJobInstanceDetail.
        :type job_type: str
        """
        if job_type is None:
            raise ValueError("Invalid value for `job_type`, must not be `None`")

        self._job_type = job_type

    @property
    def node_id(self):
        """Gets the node_id of this InternalJobInstanceDetail.

        ID of the node where the job runs.

        :return: The node_id of this InternalJobInstanceDetail.
        :rtype: str
        """
        return self._node_id

    @node_id.setter
    def node_id(self, node_id):
        """Sets the node_id of this InternalJobInstanceDetail.

        ID of the node where the job runs.

        :param node_id: The node_id of this InternalJobInstanceDetail.
        :type node_id: str
        """
        if node_id is None:
            raise ValueError("Invalid value for `node_id`, must not be `None`")

        self._node_id = node_id

    @property
    def result(self):
        """Gets the result of this InternalJobInstanceDetail.

        Result of the job instance. Its meaning depends on the job type but is usually an ID.

        :return: The result of this InternalJobInstanceDetail.
        :rtype: str
        """
        return self._result

    @result.setter
    def result(self, result):
        """Sets the result of this InternalJobInstanceDetail.

        Result of the job instance. Its meaning depends on the job type but is usually an ID.

        :param result: The result of this InternalJobInstanceDetail.
        :type result: str
        """

        self._result = result

    @property
    def start_time(self):
        """Gets the start_time of this InternalJobInstanceDetail.

        Start time of the job instance.

        :return: The start_time of this InternalJobInstanceDetail.
        :rtype: str
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this InternalJobInstanceDetail.

        Start time of the job instance.

        :param start_time: The start_time of this InternalJobInstanceDetail.
        :type start_time: str
        """

        self._start_time = start_time

    @property
    def status(self):
        """Gets the status of this InternalJobInstanceDetail.

        Status of the job instance.

        :return: The status of this InternalJobInstanceDetail.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this InternalJobInstanceDetail.

        Status of the job instance.

        :param status: The status of this InternalJobInstanceDetail.
        :type status: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status
