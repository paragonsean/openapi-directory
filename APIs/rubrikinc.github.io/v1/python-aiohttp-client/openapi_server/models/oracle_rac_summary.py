# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.configured_sla_type import ConfiguredSlaType
from openapi_server.models.oracle_node_order import OracleNodeOrder
from openapi_server.models.oracle_node_properties import OracleNodeProperties
from openapi_server import util


class OracleRacSummary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, configured_sla_domain_id: str=None, configured_sla_domain_name: str=None, configured_sla_domain_type: ConfiguredSlaType=None, id: str=None, is_configured_sla_domain_retention_locked: bool=None, name: str=None, primary_cluster_id: str=None, sla_last_update_time: datetime=None, node_order: List[OracleNodeOrder]=None, nodes: List[OracleNodeProperties]=None, num_dbs: int=None, num_nodes: int=None, status: str=None):
        """OracleRacSummary - a model defined in OpenAPI

        :param configured_sla_domain_id: The configured_sla_domain_id of this OracleRacSummary.
        :param configured_sla_domain_name: The configured_sla_domain_name of this OracleRacSummary.
        :param configured_sla_domain_type: The configured_sla_domain_type of this OracleRacSummary.
        :param id: The id of this OracleRacSummary.
        :param is_configured_sla_domain_retention_locked: The is_configured_sla_domain_retention_locked of this OracleRacSummary.
        :param name: The name of this OracleRacSummary.
        :param primary_cluster_id: The primary_cluster_id of this OracleRacSummary.
        :param sla_last_update_time: The sla_last_update_time of this OracleRacSummary.
        :param node_order: The node_order of this OracleRacSummary.
        :param nodes: The nodes of this OracleRacSummary.
        :param num_dbs: The num_dbs of this OracleRacSummary.
        :param num_nodes: The num_nodes of this OracleRacSummary.
        :param status: The status of this OracleRacSummary.
        """
        self.openapi_types = {
            'configured_sla_domain_id': str,
            'configured_sla_domain_name': str,
            'configured_sla_domain_type': ConfiguredSlaType,
            'id': str,
            'is_configured_sla_domain_retention_locked': bool,
            'name': str,
            'primary_cluster_id': str,
            'sla_last_update_time': datetime,
            'node_order': List[OracleNodeOrder],
            'nodes': List[OracleNodeProperties],
            'num_dbs': int,
            'num_nodes': int,
            'status': str
        }

        self.attribute_map = {
            'configured_sla_domain_id': 'configuredSlaDomainId',
            'configured_sla_domain_name': 'configuredSlaDomainName',
            'configured_sla_domain_type': 'configuredSlaDomainType',
            'id': 'id',
            'is_configured_sla_domain_retention_locked': 'isConfiguredSlaDomainRetentionLocked',
            'name': 'name',
            'primary_cluster_id': 'primaryClusterId',
            'sla_last_update_time': 'slaLastUpdateTime',
            'node_order': 'nodeOrder',
            'nodes': 'nodes',
            'num_dbs': 'numDbs',
            'num_nodes': 'numNodes',
            'status': 'status'
        }

        self._configured_sla_domain_id = configured_sla_domain_id
        self._configured_sla_domain_name = configured_sla_domain_name
        self._configured_sla_domain_type = configured_sla_domain_type
        self._id = id
        self._is_configured_sla_domain_retention_locked = is_configured_sla_domain_retention_locked
        self._name = name
        self._primary_cluster_id = primary_cluster_id
        self._sla_last_update_time = sla_last_update_time
        self._node_order = node_order
        self._nodes = nodes
        self._num_dbs = num_dbs
        self._num_nodes = num_nodes
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OracleRacSummary':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OracleRacSummary of this OracleRacSummary.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def configured_sla_domain_id(self):
        """Gets the configured_sla_domain_id of this OracleRacSummary.

        The ID of the SLA Domain configured directly on the Rubrik object.

        :return: The configured_sla_domain_id of this OracleRacSummary.
        :rtype: str
        """
        return self._configured_sla_domain_id

    @configured_sla_domain_id.setter
    def configured_sla_domain_id(self, configured_sla_domain_id):
        """Sets the configured_sla_domain_id of this OracleRacSummary.

        The ID of the SLA Domain configured directly on the Rubrik object.

        :param configured_sla_domain_id: The configured_sla_domain_id of this OracleRacSummary.
        :type configured_sla_domain_id: str
        """
        if configured_sla_domain_id is None:
            raise ValueError("Invalid value for `configured_sla_domain_id`, must not be `None`")

        self._configured_sla_domain_id = configured_sla_domain_id

    @property
    def configured_sla_domain_name(self):
        """Gets the configured_sla_domain_name of this OracleRacSummary.

        The name of the SLA Domain configured directly on the Rubrik object.

        :return: The configured_sla_domain_name of this OracleRacSummary.
        :rtype: str
        """
        return self._configured_sla_domain_name

    @configured_sla_domain_name.setter
    def configured_sla_domain_name(self, configured_sla_domain_name):
        """Sets the configured_sla_domain_name of this OracleRacSummary.

        The name of the SLA Domain configured directly on the Rubrik object.

        :param configured_sla_domain_name: The configured_sla_domain_name of this OracleRacSummary.
        :type configured_sla_domain_name: str
        """
        if configured_sla_domain_name is None:
            raise ValueError("Invalid value for `configured_sla_domain_name`, must not be `None`")

        self._configured_sla_domain_name = configured_sla_domain_name

    @property
    def configured_sla_domain_type(self):
        """Gets the configured_sla_domain_type of this OracleRacSummary.


        :return: The configured_sla_domain_type of this OracleRacSummary.
        :rtype: ConfiguredSlaType
        """
        return self._configured_sla_domain_type

    @configured_sla_domain_type.setter
    def configured_sla_domain_type(self, configured_sla_domain_type):
        """Sets the configured_sla_domain_type of this OracleRacSummary.


        :param configured_sla_domain_type: The configured_sla_domain_type of this OracleRacSummary.
        :type configured_sla_domain_type: ConfiguredSlaType
        """

        self._configured_sla_domain_type = configured_sla_domain_type

    @property
    def id(self):
        """Gets the id of this OracleRacSummary.

        ID assigned to the Oracle RAC.

        :return: The id of this OracleRacSummary.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this OracleRacSummary.

        ID assigned to the Oracle RAC.

        :param id: The id of this OracleRacSummary.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def is_configured_sla_domain_retention_locked(self):
        """Gets the is_configured_sla_domain_retention_locked of this OracleRacSummary.

        Indicates whether the configured SLA Domain is Retention Locked. When this value is 'true', the configured SLA Domain is a Retention Lock SLA Domain.

        :return: The is_configured_sla_domain_retention_locked of this OracleRacSummary.
        :rtype: bool
        """
        return self._is_configured_sla_domain_retention_locked

    @is_configured_sla_domain_retention_locked.setter
    def is_configured_sla_domain_retention_locked(self, is_configured_sla_domain_retention_locked):
        """Sets the is_configured_sla_domain_retention_locked of this OracleRacSummary.

        Indicates whether the configured SLA Domain is Retention Locked. When this value is 'true', the configured SLA Domain is a Retention Lock SLA Domain.

        :param is_configured_sla_domain_retention_locked: The is_configured_sla_domain_retention_locked of this OracleRacSummary.
        :type is_configured_sla_domain_retention_locked: bool
        """

        self._is_configured_sla_domain_retention_locked = is_configured_sla_domain_retention_locked

    @property
    def name(self):
        """Gets the name of this OracleRacSummary.

        Cluster name assigned to the Oracle RAC.

        :return: The name of this OracleRacSummary.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this OracleRacSummary.

        Cluster name assigned to the Oracle RAC.

        :param name: The name of this OracleRacSummary.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def primary_cluster_id(self):
        """Gets the primary_cluster_id of this OracleRacSummary.


        :return: The primary_cluster_id of this OracleRacSummary.
        :rtype: str
        """
        return self._primary_cluster_id

    @primary_cluster_id.setter
    def primary_cluster_id(self, primary_cluster_id):
        """Sets the primary_cluster_id of this OracleRacSummary.


        :param primary_cluster_id: The primary_cluster_id of this OracleRacSummary.
        :type primary_cluster_id: str
        """
        if primary_cluster_id is None:
            raise ValueError("Invalid value for `primary_cluster_id`, must not be `None`")

        self._primary_cluster_id = primary_cluster_id

    @property
    def sla_last_update_time(self):
        """Gets the sla_last_update_time of this OracleRacSummary.

        The UTC time when the SLA Domain was last updated.

        :return: The sla_last_update_time of this OracleRacSummary.
        :rtype: datetime
        """
        return self._sla_last_update_time

    @sla_last_update_time.setter
    def sla_last_update_time(self, sla_last_update_time):
        """Sets the sla_last_update_time of this OracleRacSummary.

        The UTC time when the SLA Domain was last updated.

        :param sla_last_update_time: The sla_last_update_time of this OracleRacSummary.
        :type sla_last_update_time: datetime
        """

        self._sla_last_update_time = sla_last_update_time

    @property
    def node_order(self):
        """Gets the node_order of this OracleRacSummary.

        Specifies an order for the RAC nodes. Automated Oracle backups use the RAC nodes in the specified order.

        :return: The node_order of this OracleRacSummary.
        :rtype: List[OracleNodeOrder]
        """
        return self._node_order

    @node_order.setter
    def node_order(self, node_order):
        """Sets the node_order of this OracleRacSummary.

        Specifies an order for the RAC nodes. Automated Oracle backups use the RAC nodes in the specified order.

        :param node_order: The node_order of this OracleRacSummary.
        :type node_order: List[OracleNodeOrder]
        """
        if node_order is None:
            raise ValueError("Invalid value for `node_order`, must not be `None`")

        self._node_order = node_order

    @property
    def nodes(self):
        """Gets the nodes of this OracleRacSummary.

        Details of the nodes of this Oracle RAC.

        :return: The nodes of this OracleRacSummary.
        :rtype: List[OracleNodeProperties]
        """
        return self._nodes

    @nodes.setter
    def nodes(self, nodes):
        """Sets the nodes of this OracleRacSummary.

        Details of the nodes of this Oracle RAC.

        :param nodes: The nodes of this OracleRacSummary.
        :type nodes: List[OracleNodeProperties]
        """
        if nodes is None:
            raise ValueError("Invalid value for `nodes`, must not be `None`")

        self._nodes = nodes

    @property
    def num_dbs(self):
        """Gets the num_dbs of this OracleRacSummary.

        Count of the number of databases on the Oracle RAC.

        :return: The num_dbs of this OracleRacSummary.
        :rtype: int
        """
        return self._num_dbs

    @num_dbs.setter
    def num_dbs(self, num_dbs):
        """Sets the num_dbs of this OracleRacSummary.

        Count of the number of databases on the Oracle RAC.

        :param num_dbs: The num_dbs of this OracleRacSummary.
        :type num_dbs: int
        """
        if num_dbs is None:
            raise ValueError("Invalid value for `num_dbs`, must not be `None`")

        self._num_dbs = num_dbs

    @property
    def num_nodes(self):
        """Gets the num_nodes of this OracleRacSummary.

        Count of the number of nodes on the Oracle RAC.

        :return: The num_nodes of this OracleRacSummary.
        :rtype: int
        """
        return self._num_nodes

    @num_nodes.setter
    def num_nodes(self, num_nodes):
        """Sets the num_nodes of this OracleRacSummary.

        Count of the number of nodes on the Oracle RAC.

        :param num_nodes: The num_nodes of this OracleRacSummary.
        :type num_nodes: int
        """
        if num_nodes is None:
            raise ValueError("Invalid value for `num_nodes`, must not be `None`")

        self._num_nodes = num_nodes

    @property
    def status(self):
        """Gets the status of this OracleRacSummary.

        Connectivity status of the Oracle RAC.

        :return: The status of this OracleRacSummary.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this OracleRacSummary.

        Connectivity status of the Oracle RAC.

        :param status: The status of this OracleRacSummary.
        :type status: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status
