# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EnvoyIdList(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, envoy_ids: List[str]=None):
        """EnvoyIdList - a model defined in OpenAPI

        :param envoy_ids: The envoy_ids of this EnvoyIdList.
        """
        self.openapi_types = {
            'envoy_ids': List[str]
        }

        self.attribute_map = {
            'envoy_ids': 'envoyIds'
        }

        self._envoy_ids = envoy_ids

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EnvoyIdList':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EnvoyIdList of this EnvoyIdList.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def envoy_ids(self):
        """Gets the envoy_ids of this EnvoyIdList.

        A list of Rubrik Envoy objects IDs.

        :return: The envoy_ids of this EnvoyIdList.
        :rtype: List[str]
        """
        return self._envoy_ids

    @envoy_ids.setter
    def envoy_ids(self, envoy_ids):
        """Sets the envoy_ids of this EnvoyIdList.

        A list of Rubrik Envoy objects IDs.

        :param envoy_ids: The envoy_ids of this EnvoyIdList.
        :type envoy_ids: List[str]
        """
        if envoy_ids is None:
            raise ValueError("Invalid value for `envoy_ids`, must not be `None`")

        self._envoy_ids = envoy_ids
