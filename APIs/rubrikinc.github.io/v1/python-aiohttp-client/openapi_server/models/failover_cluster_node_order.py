# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class FailoverClusterNodeOrder(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, node_id: str=None, node_name: str=None, order: int=None):
        """FailoverClusterNodeOrder - a model defined in OpenAPI

        :param node_id: The node_id of this FailoverClusterNodeOrder.
        :param node_name: The node_name of this FailoverClusterNodeOrder.
        :param order: The order of this FailoverClusterNodeOrder.
        """
        self.openapi_types = {
            'node_id': str,
            'node_name': str,
            'order': int
        }

        self.attribute_map = {
            'node_id': 'nodeId',
            'node_name': 'nodeName',
            'order': 'order'
        }

        self._node_id = node_id
        self._node_name = node_name
        self._order = order

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FailoverClusterNodeOrder':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FailoverClusterNodeOrder of this FailoverClusterNodeOrder.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def node_id(self):
        """Gets the node_id of this FailoverClusterNodeOrder.

        ID of the failover cluster node.

        :return: The node_id of this FailoverClusterNodeOrder.
        :rtype: str
        """
        return self._node_id

    @node_id.setter
    def node_id(self, node_id):
        """Sets the node_id of this FailoverClusterNodeOrder.

        ID of the failover cluster node.

        :param node_id: The node_id of this FailoverClusterNodeOrder.
        :type node_id: str
        """
        if node_id is None:
            raise ValueError("Invalid value for `node_id`, must not be `None`")

        self._node_id = node_id

    @property
    def node_name(self):
        """Gets the node_name of this FailoverClusterNodeOrder.

        The name of the failover cluster node.

        :return: The node_name of this FailoverClusterNodeOrder.
        :rtype: str
        """
        return self._node_name

    @node_name.setter
    def node_name(self, node_name):
        """Sets the node_name of this FailoverClusterNodeOrder.

        The name of the failover cluster node.

        :param node_name: The node_name of this FailoverClusterNodeOrder.
        :type node_name: str
        """
        if node_name is None:
            raise ValueError("Invalid value for `node_name`, must not be `None`")

        self._node_name = node_name

    @property
    def order(self):
        """Gets the order of this FailoverClusterNodeOrder.

        An integer that specifies the place occupied by this node in the failover cluster app backup order.

        :return: The order of this FailoverClusterNodeOrder.
        :rtype: int
        """
        return self._order

    @order.setter
    def order(self, order):
        """Sets the order of this FailoverClusterNodeOrder.

        An integer that specifies the place occupied by this node in the failover cluster app backup order.

        :param order: The order of this FailoverClusterNodeOrder.
        :type order: int
        """
        if order is None:
            raise ValueError("Invalid value for `order`, must not be `None`")

        self._order = order
