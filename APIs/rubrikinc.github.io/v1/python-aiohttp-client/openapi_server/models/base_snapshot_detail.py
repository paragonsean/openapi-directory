# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BaseSnapshotDetail(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, config: str=None, is_corrupt: bool=None):
        """BaseSnapshotDetail - a model defined in OpenAPI

        :param config: The config of this BaseSnapshotDetail.
        :param is_corrupt: The is_corrupt of this BaseSnapshotDetail.
        """
        self.openapi_types = {
            'config': str,
            'is_corrupt': bool
        }

        self.attribute_map = {
            'config': 'config',
            'is_corrupt': 'isCorrupt'
        }

        self._config = config
        self._is_corrupt = is_corrupt

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BaseSnapshotDetail':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BaseSnapshotDetail of this BaseSnapshotDetail.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def config(self):
        """Gets the config of this BaseSnapshotDetail.


        :return: The config of this BaseSnapshotDetail.
        :rtype: str
        """
        return self._config

    @config.setter
    def config(self, config):
        """Sets the config of this BaseSnapshotDetail.


        :param config: The config of this BaseSnapshotDetail.
        :type config: str
        """

        self._config = config

    @property
    def is_corrupt(self):
        """Gets the is_corrupt of this BaseSnapshotDetail.


        :return: The is_corrupt of this BaseSnapshotDetail.
        :rtype: bool
        """
        return self._is_corrupt

    @is_corrupt.setter
    def is_corrupt(self, is_corrupt):
        """Sets the is_corrupt of this BaseSnapshotDetail.


        :param is_corrupt: The is_corrupt of this BaseSnapshotDetail.
        :type is_corrupt: bool
        """

        self._is_corrupt = is_corrupt
