# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.backup_task_diagnostic_info import BackupTaskDiagnosticInfo
from openapi_server.models.configured_sla_type import ConfiguredSlaType
from openapi_server.models.managed_hierarchy_object_ancestor import ManagedHierarchyObjectAncestor
from openapi_server.models.managed_object_pending_sla_info import ManagedObjectPendingSlaInfo
from openapi_server import util


class VcdVappSummary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, configured_sla_domain_id: str=None, configured_sla_domain_name: str=None, configured_sla_domain_type: ConfiguredSlaType=None, id: str=None, is_configured_sla_domain_retention_locked: bool=None, name: str=None, primary_cluster_id: str=None, sla_last_update_time: datetime=None, effective_sla_domain_id: str=None, effective_sla_domain_name: str=None, effective_sla_domain_polaris_managed_id: str=None, effective_sla_source_object_id: str=None, effective_sla_source_object_name: str=None, is_effective_sla_domain_retention_locked: bool=None, retention_sla_domain_id: str=None, sla_assignment: str=None, catalog_id: str=None, current_backup_task_info: BackupTaskDiagnosticInfo=None, include_backup_task_info: bool=None, infra_path: List[ManagedHierarchyObjectAncestor]=None, is_relic: bool=None, is_template: bool=None, last_snapshot_time: datetime=None, num_missed_snapshot: int=None, pending_sla_domain: ManagedObjectPendingSlaInfo=None, vcd_cluster_id: str=None, vcd_cluster_name: str=None):
        """VcdVappSummary - a model defined in OpenAPI

        :param configured_sla_domain_id: The configured_sla_domain_id of this VcdVappSummary.
        :param configured_sla_domain_name: The configured_sla_domain_name of this VcdVappSummary.
        :param configured_sla_domain_type: The configured_sla_domain_type of this VcdVappSummary.
        :param id: The id of this VcdVappSummary.
        :param is_configured_sla_domain_retention_locked: The is_configured_sla_domain_retention_locked of this VcdVappSummary.
        :param name: The name of this VcdVappSummary.
        :param primary_cluster_id: The primary_cluster_id of this VcdVappSummary.
        :param sla_last_update_time: The sla_last_update_time of this VcdVappSummary.
        :param effective_sla_domain_id: The effective_sla_domain_id of this VcdVappSummary.
        :param effective_sla_domain_name: The effective_sla_domain_name of this VcdVappSummary.
        :param effective_sla_domain_polaris_managed_id: The effective_sla_domain_polaris_managed_id of this VcdVappSummary.
        :param effective_sla_source_object_id: The effective_sla_source_object_id of this VcdVappSummary.
        :param effective_sla_source_object_name: The effective_sla_source_object_name of this VcdVappSummary.
        :param is_effective_sla_domain_retention_locked: The is_effective_sla_domain_retention_locked of this VcdVappSummary.
        :param retention_sla_domain_id: The retention_sla_domain_id of this VcdVappSummary.
        :param sla_assignment: The sla_assignment of this VcdVappSummary.
        :param catalog_id: The catalog_id of this VcdVappSummary.
        :param current_backup_task_info: The current_backup_task_info of this VcdVappSummary.
        :param include_backup_task_info: The include_backup_task_info of this VcdVappSummary.
        :param infra_path: The infra_path of this VcdVappSummary.
        :param is_relic: The is_relic of this VcdVappSummary.
        :param is_template: The is_template of this VcdVappSummary.
        :param last_snapshot_time: The last_snapshot_time of this VcdVappSummary.
        :param num_missed_snapshot: The num_missed_snapshot of this VcdVappSummary.
        :param pending_sla_domain: The pending_sla_domain of this VcdVappSummary.
        :param vcd_cluster_id: The vcd_cluster_id of this VcdVappSummary.
        :param vcd_cluster_name: The vcd_cluster_name of this VcdVappSummary.
        """
        self.openapi_types = {
            'configured_sla_domain_id': str,
            'configured_sla_domain_name': str,
            'configured_sla_domain_type': ConfiguredSlaType,
            'id': str,
            'is_configured_sla_domain_retention_locked': bool,
            'name': str,
            'primary_cluster_id': str,
            'sla_last_update_time': datetime,
            'effective_sla_domain_id': str,
            'effective_sla_domain_name': str,
            'effective_sla_domain_polaris_managed_id': str,
            'effective_sla_source_object_id': str,
            'effective_sla_source_object_name': str,
            'is_effective_sla_domain_retention_locked': bool,
            'retention_sla_domain_id': str,
            'sla_assignment': str,
            'catalog_id': str,
            'current_backup_task_info': BackupTaskDiagnosticInfo,
            'include_backup_task_info': bool,
            'infra_path': List[ManagedHierarchyObjectAncestor],
            'is_relic': bool,
            'is_template': bool,
            'last_snapshot_time': datetime,
            'num_missed_snapshot': int,
            'pending_sla_domain': ManagedObjectPendingSlaInfo,
            'vcd_cluster_id': str,
            'vcd_cluster_name': str
        }

        self.attribute_map = {
            'configured_sla_domain_id': 'configuredSlaDomainId',
            'configured_sla_domain_name': 'configuredSlaDomainName',
            'configured_sla_domain_type': 'configuredSlaDomainType',
            'id': 'id',
            'is_configured_sla_domain_retention_locked': 'isConfiguredSlaDomainRetentionLocked',
            'name': 'name',
            'primary_cluster_id': 'primaryClusterId',
            'sla_last_update_time': 'slaLastUpdateTime',
            'effective_sla_domain_id': 'effectiveSlaDomainId',
            'effective_sla_domain_name': 'effectiveSlaDomainName',
            'effective_sla_domain_polaris_managed_id': 'effectiveSlaDomainPolarisManagedId',
            'effective_sla_source_object_id': 'effectiveSlaSourceObjectId',
            'effective_sla_source_object_name': 'effectiveSlaSourceObjectName',
            'is_effective_sla_domain_retention_locked': 'isEffectiveSlaDomainRetentionLocked',
            'retention_sla_domain_id': 'retentionSlaDomainId',
            'sla_assignment': 'slaAssignment',
            'catalog_id': 'catalogId',
            'current_backup_task_info': 'currentBackupTaskInfo',
            'include_backup_task_info': 'includeBackupTaskInfo',
            'infra_path': 'infraPath',
            'is_relic': 'isRelic',
            'is_template': 'isTemplate',
            'last_snapshot_time': 'lastSnapshotTime',
            'num_missed_snapshot': 'numMissedSnapshot',
            'pending_sla_domain': 'pendingSlaDomain',
            'vcd_cluster_id': 'vcdClusterId',
            'vcd_cluster_name': 'vcdClusterName'
        }

        self._configured_sla_domain_id = configured_sla_domain_id
        self._configured_sla_domain_name = configured_sla_domain_name
        self._configured_sla_domain_type = configured_sla_domain_type
        self._id = id
        self._is_configured_sla_domain_retention_locked = is_configured_sla_domain_retention_locked
        self._name = name
        self._primary_cluster_id = primary_cluster_id
        self._sla_last_update_time = sla_last_update_time
        self._effective_sla_domain_id = effective_sla_domain_id
        self._effective_sla_domain_name = effective_sla_domain_name
        self._effective_sla_domain_polaris_managed_id = effective_sla_domain_polaris_managed_id
        self._effective_sla_source_object_id = effective_sla_source_object_id
        self._effective_sla_source_object_name = effective_sla_source_object_name
        self._is_effective_sla_domain_retention_locked = is_effective_sla_domain_retention_locked
        self._retention_sla_domain_id = retention_sla_domain_id
        self._sla_assignment = sla_assignment
        self._catalog_id = catalog_id
        self._current_backup_task_info = current_backup_task_info
        self._include_backup_task_info = include_backup_task_info
        self._infra_path = infra_path
        self._is_relic = is_relic
        self._is_template = is_template
        self._last_snapshot_time = last_snapshot_time
        self._num_missed_snapshot = num_missed_snapshot
        self._pending_sla_domain = pending_sla_domain
        self._vcd_cluster_id = vcd_cluster_id
        self._vcd_cluster_name = vcd_cluster_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VcdVappSummary':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VcdVappSummary of this VcdVappSummary.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def configured_sla_domain_id(self):
        """Gets the configured_sla_domain_id of this VcdVappSummary.

        The ID of the SLA Domain configured directly on the Rubrik object.

        :return: The configured_sla_domain_id of this VcdVappSummary.
        :rtype: str
        """
        return self._configured_sla_domain_id

    @configured_sla_domain_id.setter
    def configured_sla_domain_id(self, configured_sla_domain_id):
        """Sets the configured_sla_domain_id of this VcdVappSummary.

        The ID of the SLA Domain configured directly on the Rubrik object.

        :param configured_sla_domain_id: The configured_sla_domain_id of this VcdVappSummary.
        :type configured_sla_domain_id: str
        """
        if configured_sla_domain_id is None:
            raise ValueError("Invalid value for `configured_sla_domain_id`, must not be `None`")

        self._configured_sla_domain_id = configured_sla_domain_id

    @property
    def configured_sla_domain_name(self):
        """Gets the configured_sla_domain_name of this VcdVappSummary.

        The name of the SLA Domain configured directly on the Rubrik object.

        :return: The configured_sla_domain_name of this VcdVappSummary.
        :rtype: str
        """
        return self._configured_sla_domain_name

    @configured_sla_domain_name.setter
    def configured_sla_domain_name(self, configured_sla_domain_name):
        """Sets the configured_sla_domain_name of this VcdVappSummary.

        The name of the SLA Domain configured directly on the Rubrik object.

        :param configured_sla_domain_name: The configured_sla_domain_name of this VcdVappSummary.
        :type configured_sla_domain_name: str
        """
        if configured_sla_domain_name is None:
            raise ValueError("Invalid value for `configured_sla_domain_name`, must not be `None`")

        self._configured_sla_domain_name = configured_sla_domain_name

    @property
    def configured_sla_domain_type(self):
        """Gets the configured_sla_domain_type of this VcdVappSummary.


        :return: The configured_sla_domain_type of this VcdVappSummary.
        :rtype: ConfiguredSlaType
        """
        return self._configured_sla_domain_type

    @configured_sla_domain_type.setter
    def configured_sla_domain_type(self, configured_sla_domain_type):
        """Sets the configured_sla_domain_type of this VcdVappSummary.


        :param configured_sla_domain_type: The configured_sla_domain_type of this VcdVappSummary.
        :type configured_sla_domain_type: ConfiguredSlaType
        """

        self._configured_sla_domain_type = configured_sla_domain_type

    @property
    def id(self):
        """Gets the id of this VcdVappSummary.

        ID assigned to a vCD vApp object.

        :return: The id of this VcdVappSummary.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this VcdVappSummary.

        ID assigned to a vCD vApp object.

        :param id: The id of this VcdVappSummary.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def is_configured_sla_domain_retention_locked(self):
        """Gets the is_configured_sla_domain_retention_locked of this VcdVappSummary.

        Indicates whether the configured SLA Domain is Retention Locked. When this value is 'true', the configured SLA Domain is a Retention Lock SLA Domain.

        :return: The is_configured_sla_domain_retention_locked of this VcdVappSummary.
        :rtype: bool
        """
        return self._is_configured_sla_domain_retention_locked

    @is_configured_sla_domain_retention_locked.setter
    def is_configured_sla_domain_retention_locked(self, is_configured_sla_domain_retention_locked):
        """Sets the is_configured_sla_domain_retention_locked of this VcdVappSummary.

        Indicates whether the configured SLA Domain is Retention Locked. When this value is 'true', the configured SLA Domain is a Retention Lock SLA Domain.

        :param is_configured_sla_domain_retention_locked: The is_configured_sla_domain_retention_locked of this VcdVappSummary.
        :type is_configured_sla_domain_retention_locked: bool
        """

        self._is_configured_sla_domain_retention_locked = is_configured_sla_domain_retention_locked

    @property
    def name(self):
        """Gets the name of this VcdVappSummary.

        Name assigned to a vCD vApp object.

        :return: The name of this VcdVappSummary.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this VcdVappSummary.

        Name assigned to a vCD vApp object.

        :param name: The name of this VcdVappSummary.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def primary_cluster_id(self):
        """Gets the primary_cluster_id of this VcdVappSummary.

        The ID of the cluster that manages the Rubrik object.

        :return: The primary_cluster_id of this VcdVappSummary.
        :rtype: str
        """
        return self._primary_cluster_id

    @primary_cluster_id.setter
    def primary_cluster_id(self, primary_cluster_id):
        """Sets the primary_cluster_id of this VcdVappSummary.

        The ID of the cluster that manages the Rubrik object.

        :param primary_cluster_id: The primary_cluster_id of this VcdVappSummary.
        :type primary_cluster_id: str
        """
        if primary_cluster_id is None:
            raise ValueError("Invalid value for `primary_cluster_id`, must not be `None`")

        self._primary_cluster_id = primary_cluster_id

    @property
    def sla_last_update_time(self):
        """Gets the sla_last_update_time of this VcdVappSummary.

        The UTC time when the SLA Domain was last updated.

        :return: The sla_last_update_time of this VcdVappSummary.
        :rtype: datetime
        """
        return self._sla_last_update_time

    @sla_last_update_time.setter
    def sla_last_update_time(self, sla_last_update_time):
        """Sets the sla_last_update_time of this VcdVappSummary.

        The UTC time when the SLA Domain was last updated.

        :param sla_last_update_time: The sla_last_update_time of this VcdVappSummary.
        :type sla_last_update_time: datetime
        """

        self._sla_last_update_time = sla_last_update_time

    @property
    def effective_sla_domain_id(self):
        """Gets the effective_sla_domain_id of this VcdVappSummary.

        The ID of the SLA Domain that controls the protection of the Rubrik object.

        :return: The effective_sla_domain_id of this VcdVappSummary.
        :rtype: str
        """
        return self._effective_sla_domain_id

    @effective_sla_domain_id.setter
    def effective_sla_domain_id(self, effective_sla_domain_id):
        """Sets the effective_sla_domain_id of this VcdVappSummary.

        The ID of the SLA Domain that controls the protection of the Rubrik object.

        :param effective_sla_domain_id: The effective_sla_domain_id of this VcdVappSummary.
        :type effective_sla_domain_id: str
        """
        if effective_sla_domain_id is None:
            raise ValueError("Invalid value for `effective_sla_domain_id`, must not be `None`")

        self._effective_sla_domain_id = effective_sla_domain_id

    @property
    def effective_sla_domain_name(self):
        """Gets the effective_sla_domain_name of this VcdVappSummary.

        The name of the SLA Domain that controls the protection of the Rubrik object.

        :return: The effective_sla_domain_name of this VcdVappSummary.
        :rtype: str
        """
        return self._effective_sla_domain_name

    @effective_sla_domain_name.setter
    def effective_sla_domain_name(self, effective_sla_domain_name):
        """Sets the effective_sla_domain_name of this VcdVappSummary.

        The name of the SLA Domain that controls the protection of the Rubrik object.

        :param effective_sla_domain_name: The effective_sla_domain_name of this VcdVappSummary.
        :type effective_sla_domain_name: str
        """
        if effective_sla_domain_name is None:
            raise ValueError("Invalid value for `effective_sla_domain_name`, must not be `None`")

        self._effective_sla_domain_name = effective_sla_domain_name

    @property
    def effective_sla_domain_polaris_managed_id(self):
        """Gets the effective_sla_domain_polaris_managed_id of this VcdVappSummary.

        Optional. This field contains the managed ID of of the Polaris-managed effective SLA Domain.

        :return: The effective_sla_domain_polaris_managed_id of this VcdVappSummary.
        :rtype: str
        """
        return self._effective_sla_domain_polaris_managed_id

    @effective_sla_domain_polaris_managed_id.setter
    def effective_sla_domain_polaris_managed_id(self, effective_sla_domain_polaris_managed_id):
        """Sets the effective_sla_domain_polaris_managed_id of this VcdVappSummary.

        Optional. This field contains the managed ID of of the Polaris-managed effective SLA Domain.

        :param effective_sla_domain_polaris_managed_id: The effective_sla_domain_polaris_managed_id of this VcdVappSummary.
        :type effective_sla_domain_polaris_managed_id: str
        """

        self._effective_sla_domain_polaris_managed_id = effective_sla_domain_polaris_managed_id

    @property
    def effective_sla_source_object_id(self):
        """Gets the effective_sla_source_object_id of this VcdVappSummary.

        The ID of the parent of the Rubrik object from which the SLA Domain that controls the protection of Rubrik object is inherited.

        :return: The effective_sla_source_object_id of this VcdVappSummary.
        :rtype: str
        """
        return self._effective_sla_source_object_id

    @effective_sla_source_object_id.setter
    def effective_sla_source_object_id(self, effective_sla_source_object_id):
        """Sets the effective_sla_source_object_id of this VcdVappSummary.

        The ID of the parent of the Rubrik object from which the SLA Domain that controls the protection of Rubrik object is inherited.

        :param effective_sla_source_object_id: The effective_sla_source_object_id of this VcdVappSummary.
        :type effective_sla_source_object_id: str
        """

        self._effective_sla_source_object_id = effective_sla_source_object_id

    @property
    def effective_sla_source_object_name(self):
        """Gets the effective_sla_source_object_name of this VcdVappSummary.

        The name of the parent of the Rubrik object from which the SLA Domain that controls the protection of Rubrik object is inherited.

        :return: The effective_sla_source_object_name of this VcdVappSummary.
        :rtype: str
        """
        return self._effective_sla_source_object_name

    @effective_sla_source_object_name.setter
    def effective_sla_source_object_name(self, effective_sla_source_object_name):
        """Sets the effective_sla_source_object_name of this VcdVappSummary.

        The name of the parent of the Rubrik object from which the SLA Domain that controls the protection of Rubrik object is inherited.

        :param effective_sla_source_object_name: The effective_sla_source_object_name of this VcdVappSummary.
        :type effective_sla_source_object_name: str
        """

        self._effective_sla_source_object_name = effective_sla_source_object_name

    @property
    def is_effective_sla_domain_retention_locked(self):
        """Gets the is_effective_sla_domain_retention_locked of this VcdVappSummary.

        Indicates whether the effective SLA Domain is Retention Locked. When this value is 'true', the effective SLA domain is a Retention Lock SLA Domain.

        :return: The is_effective_sla_domain_retention_locked of this VcdVappSummary.
        :rtype: bool
        """
        return self._is_effective_sla_domain_retention_locked

    @is_effective_sla_domain_retention_locked.setter
    def is_effective_sla_domain_retention_locked(self, is_effective_sla_domain_retention_locked):
        """Sets the is_effective_sla_domain_retention_locked of this VcdVappSummary.

        Indicates whether the effective SLA Domain is Retention Locked. When this value is 'true', the effective SLA domain is a Retention Lock SLA Domain.

        :param is_effective_sla_domain_retention_locked: The is_effective_sla_domain_retention_locked of this VcdVappSummary.
        :type is_effective_sla_domain_retention_locked: bool
        """

        self._is_effective_sla_domain_retention_locked = is_effective_sla_domain_retention_locked

    @property
    def retention_sla_domain_id(self):
        """Gets the retention_sla_domain_id of this VcdVappSummary.

        The ID of the SLA Domain whose retention policy is in use.

        :return: The retention_sla_domain_id of this VcdVappSummary.
        :rtype: str
        """
        return self._retention_sla_domain_id

    @retention_sla_domain_id.setter
    def retention_sla_domain_id(self, retention_sla_domain_id):
        """Sets the retention_sla_domain_id of this VcdVappSummary.

        The ID of the SLA Domain whose retention policy is in use.

        :param retention_sla_domain_id: The retention_sla_domain_id of this VcdVappSummary.
        :type retention_sla_domain_id: str
        """

        self._retention_sla_domain_id = retention_sla_domain_id

    @property
    def sla_assignment(self):
        """Gets the sla_assignment of this VcdVappSummary.

        The SLA assignment type. Direct SLA assignment means that a SLA Domain was configured directly on the Rubrik object by the user. Derived SLA assignment means that the Rubrik object inherits an SLA Domain from its parent Rubrik object.

        :return: The sla_assignment of this VcdVappSummary.
        :rtype: str
        """
        return self._sla_assignment

    @sla_assignment.setter
    def sla_assignment(self, sla_assignment):
        """Sets the sla_assignment of this VcdVappSummary.

        The SLA assignment type. Direct SLA assignment means that a SLA Domain was configured directly on the Rubrik object by the user. Derived SLA assignment means that the Rubrik object inherits an SLA Domain from its parent Rubrik object.

        :param sla_assignment: The sla_assignment of this VcdVappSummary.
        :type sla_assignment: str
        """
        allowed_values = ["Derived", "Direct", "Unassigned"]  # noqa: E501
        if sla_assignment not in allowed_values:
            raise ValueError(
                "Invalid value for `sla_assignment` ({0}), must be one of {1}"
                .format(sla_assignment, allowed_values)
            )

        self._sla_assignment = sla_assignment

    @property
    def catalog_id(self):
        """Gets the catalog_id of this VcdVappSummary.

        ID of the parent catalog if the vApp object is a template.

        :return: The catalog_id of this VcdVappSummary.
        :rtype: str
        """
        return self._catalog_id

    @catalog_id.setter
    def catalog_id(self, catalog_id):
        """Sets the catalog_id of this VcdVappSummary.

        ID of the parent catalog if the vApp object is a template.

        :param catalog_id: The catalog_id of this VcdVappSummary.
        :type catalog_id: str
        """

        self._catalog_id = catalog_id

    @property
    def current_backup_task_info(self):
        """Gets the current_backup_task_info of this VcdVappSummary.


        :return: The current_backup_task_info of this VcdVappSummary.
        :rtype: BackupTaskDiagnosticInfo
        """
        return self._current_backup_task_info

    @current_backup_task_info.setter
    def current_backup_task_info(self, current_backup_task_info):
        """Sets the current_backup_task_info of this VcdVappSummary.


        :param current_backup_task_info: The current_backup_task_info of this VcdVappSummary.
        :type current_backup_task_info: BackupTaskDiagnosticInfo
        """

        self._current_backup_task_info = current_backup_task_info

    @property
    def include_backup_task_info(self):
        """Gets the include_backup_task_info of this VcdVappSummary.

        Boolean value that indicates if backup task information isincluded in the response.

        :return: The include_backup_task_info of this VcdVappSummary.
        :rtype: bool
        """
        return self._include_backup_task_info

    @include_backup_task_info.setter
    def include_backup_task_info(self, include_backup_task_info):
        """Sets the include_backup_task_info of this VcdVappSummary.

        Boolean value that indicates if backup task information isincluded in the response.

        :param include_backup_task_info: The include_backup_task_info of this VcdVappSummary.
        :type include_backup_task_info: bool
        """

        self._include_backup_task_info = include_backup_task_info

    @property
    def infra_path(self):
        """Gets the infra_path of this VcdVappSummary.

        Brief information of all the objects in the infrastructure path to this vCD vApp object.

        :return: The infra_path of this VcdVappSummary.
        :rtype: List[ManagedHierarchyObjectAncestor]
        """
        return self._infra_path

    @infra_path.setter
    def infra_path(self, infra_path):
        """Sets the infra_path of this VcdVappSummary.

        Brief information of all the objects in the infrastructure path to this vCD vApp object.

        :param infra_path: The infra_path of this VcdVappSummary.
        :type infra_path: List[ManagedHierarchyObjectAncestor]
        """
        if infra_path is None:
            raise ValueError("Invalid value for `infra_path`, must not be `None`")

        self._infra_path = infra_path

    @property
    def is_relic(self):
        """Gets the is_relic of this VcdVappSummary.

        Boolean value that indicates whether a vApp is present on the specified vCD cluster. Set to 'true' when the vApp is present and 'false' when the vApp is not present.

        :return: The is_relic of this VcdVappSummary.
        :rtype: bool
        """
        return self._is_relic

    @is_relic.setter
    def is_relic(self, is_relic):
        """Sets the is_relic of this VcdVappSummary.

        Boolean value that indicates whether a vApp is present on the specified vCD cluster. Set to 'true' when the vApp is present and 'false' when the vApp is not present.

        :param is_relic: The is_relic of this VcdVappSummary.
        :type is_relic: bool
        """

        self._is_relic = is_relic

    @property
    def is_template(self):
        """Gets the is_template of this VcdVappSummary.

        A Boolean value that indicates whether the vApp object is a template. When this value is 'true,' the vApp object is a template. When this value is 'false,' the vApp object is not a template.

        :return: The is_template of this VcdVappSummary.
        :rtype: bool
        """
        return self._is_template

    @is_template.setter
    def is_template(self, is_template):
        """Sets the is_template of this VcdVappSummary.

        A Boolean value that indicates whether the vApp object is a template. When this value is 'true,' the vApp object is a template. When this value is 'false,' the vApp object is not a template.

        :param is_template: The is_template of this VcdVappSummary.
        :type is_template: bool
        """

        self._is_template = is_template

    @property
    def last_snapshot_time(self):
        """Gets the last_snapshot_time of this VcdVappSummary.

        The timestamp of the previous snapshot.

        :return: The last_snapshot_time of this VcdVappSummary.
        :rtype: datetime
        """
        return self._last_snapshot_time

    @last_snapshot_time.setter
    def last_snapshot_time(self, last_snapshot_time):
        """Sets the last_snapshot_time of this VcdVappSummary.

        The timestamp of the previous snapshot.

        :param last_snapshot_time: The last_snapshot_time of this VcdVappSummary.
        :type last_snapshot_time: datetime
        """

        self._last_snapshot_time = last_snapshot_time

    @property
    def num_missed_snapshot(self):
        """Gets the num_missed_snapshot of this VcdVappSummary.

        An integer that specifies the number of missed snapshots.

        :return: The num_missed_snapshot of this VcdVappSummary.
        :rtype: int
        """
        return self._num_missed_snapshot

    @num_missed_snapshot.setter
    def num_missed_snapshot(self, num_missed_snapshot):
        """Sets the num_missed_snapshot of this VcdVappSummary.

        An integer that specifies the number of missed snapshots.

        :param num_missed_snapshot: The num_missed_snapshot of this VcdVappSummary.
        :type num_missed_snapshot: int
        """
        if num_missed_snapshot is None:
            raise ValueError("Invalid value for `num_missed_snapshot`, must not be `None`")

        self._num_missed_snapshot = num_missed_snapshot

    @property
    def pending_sla_domain(self):
        """Gets the pending_sla_domain of this VcdVappSummary.


        :return: The pending_sla_domain of this VcdVappSummary.
        :rtype: ManagedObjectPendingSlaInfo
        """
        return self._pending_sla_domain

    @pending_sla_domain.setter
    def pending_sla_domain(self, pending_sla_domain):
        """Sets the pending_sla_domain of this VcdVappSummary.


        :param pending_sla_domain: The pending_sla_domain of this VcdVappSummary.
        :type pending_sla_domain: ManagedObjectPendingSlaInfo
        """

        self._pending_sla_domain = pending_sla_domain

    @property
    def vcd_cluster_id(self):
        """Gets the vcd_cluster_id of this VcdVappSummary.

        ID assigned to a vCD Cluster object that contains a specified vApp object.

        :return: The vcd_cluster_id of this VcdVappSummary.
        :rtype: str
        """
        return self._vcd_cluster_id

    @vcd_cluster_id.setter
    def vcd_cluster_id(self, vcd_cluster_id):
        """Sets the vcd_cluster_id of this VcdVappSummary.

        ID assigned to a vCD Cluster object that contains a specified vApp object.

        :param vcd_cluster_id: The vcd_cluster_id of this VcdVappSummary.
        :type vcd_cluster_id: str
        """

        self._vcd_cluster_id = vcd_cluster_id

    @property
    def vcd_cluster_name(self):
        """Gets the vcd_cluster_name of this VcdVappSummary.

        Name assigned to a vCD Cluster object that contains a specified vApp object.

        :return: The vcd_cluster_name of this VcdVappSummary.
        :rtype: str
        """
        return self._vcd_cluster_name

    @vcd_cluster_name.setter
    def vcd_cluster_name(self, vcd_cluster_name):
        """Sets the vcd_cluster_name of this VcdVappSummary.

        Name assigned to a vCD Cluster object that contains a specified vApp object.

        :param vcd_cluster_name: The vcd_cluster_name of this VcdVappSummary.
        :type vcd_cluster_name: str
        """

        self._vcd_cluster_name = vcd_cluster_name
