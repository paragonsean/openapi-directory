# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class StageCdmSoftwareInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, md5sum: str=None, package_url: str=None, size: int=None, skip_download: bool=False, version: str=None):
        """StageCdmSoftwareInfo - a model defined in OpenAPI

        :param md5sum: The md5sum of this StageCdmSoftwareInfo.
        :param package_url: The package_url of this StageCdmSoftwareInfo.
        :param size: The size of this StageCdmSoftwareInfo.
        :param skip_download: The skip_download of this StageCdmSoftwareInfo.
        :param version: The version of this StageCdmSoftwareInfo.
        """
        self.openapi_types = {
            'md5sum': str,
            'package_url': str,
            'size': int,
            'skip_download': bool,
            'version': str
        }

        self.attribute_map = {
            'md5sum': 'md5sum',
            'package_url': 'packageUrl',
            'size': 'size',
            'skip_download': 'skipDownload',
            'version': 'version'
        }

        self._md5sum = md5sum
        self._package_url = package_url
        self._size = size
        self._skip_download = skip_download
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StageCdmSoftwareInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StageCdmSoftwareInfo of this StageCdmSoftwareInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def md5sum(self):
        """Gets the md5sum of this StageCdmSoftwareInfo.

        The MD5 checksum for the CDM software package.

        :return: The md5sum of this StageCdmSoftwareInfo.
        :rtype: str
        """
        return self._md5sum

    @md5sum.setter
    def md5sum(self, md5sum):
        """Sets the md5sum of this StageCdmSoftwareInfo.

        The MD5 checksum for the CDM software package.

        :param md5sum: The md5sum of this StageCdmSoftwareInfo.
        :type md5sum: str
        """
        if md5sum is None:
            raise ValueError("Invalid value for `md5sum`, must not be `None`")

        self._md5sum = md5sum

    @property
    def package_url(self):
        """Gets the package_url of this StageCdmSoftwareInfo.

        The URL where the package that contains CDM software is located. 

        :return: The package_url of this StageCdmSoftwareInfo.
        :rtype: str
        """
        return self._package_url

    @package_url.setter
    def package_url(self, package_url):
        """Sets the package_url of this StageCdmSoftwareInfo.

        The URL where the package that contains CDM software is located. 

        :param package_url: The package_url of this StageCdmSoftwareInfo.
        :type package_url: str
        """
        if package_url is None:
            raise ValueError("Invalid value for `package_url`, must not be `None`")

        self._package_url = package_url

    @property
    def size(self):
        """Gets the size of this StageCdmSoftwareInfo.

        Size, in bytes, of the package containing CDM software.

        :return: The size of this StageCdmSoftwareInfo.
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this StageCdmSoftwareInfo.

        Size, in bytes, of the package containing CDM software.

        :param size: The size of this StageCdmSoftwareInfo.
        :type size: int
        """

        self._size = size

    @property
    def skip_download(self):
        """Gets the skip_download of this StageCdmSoftwareInfo.

        Specifies whether to download the CDM software externally. When this value is false, the CDM software package must be available on the cluster. When this value is true, provide the version.

        :return: The skip_download of this StageCdmSoftwareInfo.
        :rtype: bool
        """
        return self._skip_download

    @skip_download.setter
    def skip_download(self, skip_download):
        """Sets the skip_download of this StageCdmSoftwareInfo.

        Specifies whether to download the CDM software externally. When this value is false, the CDM software package must be available on the cluster. When this value is true, provide the version.

        :param skip_download: The skip_download of this StageCdmSoftwareInfo.
        :type skip_download: bool
        """

        self._skip_download = skip_download

    @property
    def version(self):
        """Gets the version of this StageCdmSoftwareInfo.

        The version of the CDM software package. If the version is not provided, an attempt is made to parse the version from the package URL. The version is not needed unless the Rubrik provided software package has been renamed. 

        :return: The version of this StageCdmSoftwareInfo.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this StageCdmSoftwareInfo.

        The version of the CDM software package. If the version is not provided, an attempt is made to parse the version from the package URL. The version is not needed unless the Rubrik provided software package has been renamed. 

        :param version: The version of this StageCdmSoftwareInfo.
        :type version: str
        """

        self._version = version
