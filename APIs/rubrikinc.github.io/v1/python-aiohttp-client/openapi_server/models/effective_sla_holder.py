# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EffectiveSlaHolder(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, effective_sla_domain_id: str=None, effective_sla_domain_name: str=None, effective_sla_domain_polaris_managed_id: str=None, effective_sla_source_object_id: str=None, effective_sla_source_object_name: str=None, is_effective_sla_domain_retention_locked: bool=None):
        """EffectiveSlaHolder - a model defined in OpenAPI

        :param effective_sla_domain_id: The effective_sla_domain_id of this EffectiveSlaHolder.
        :param effective_sla_domain_name: The effective_sla_domain_name of this EffectiveSlaHolder.
        :param effective_sla_domain_polaris_managed_id: The effective_sla_domain_polaris_managed_id of this EffectiveSlaHolder.
        :param effective_sla_source_object_id: The effective_sla_source_object_id of this EffectiveSlaHolder.
        :param effective_sla_source_object_name: The effective_sla_source_object_name of this EffectiveSlaHolder.
        :param is_effective_sla_domain_retention_locked: The is_effective_sla_domain_retention_locked of this EffectiveSlaHolder.
        """
        self.openapi_types = {
            'effective_sla_domain_id': str,
            'effective_sla_domain_name': str,
            'effective_sla_domain_polaris_managed_id': str,
            'effective_sla_source_object_id': str,
            'effective_sla_source_object_name': str,
            'is_effective_sla_domain_retention_locked': bool
        }

        self.attribute_map = {
            'effective_sla_domain_id': 'effectiveSlaDomainId',
            'effective_sla_domain_name': 'effectiveSlaDomainName',
            'effective_sla_domain_polaris_managed_id': 'effectiveSlaDomainPolarisManagedId',
            'effective_sla_source_object_id': 'effectiveSlaSourceObjectId',
            'effective_sla_source_object_name': 'effectiveSlaSourceObjectName',
            'is_effective_sla_domain_retention_locked': 'isEffectiveSlaDomainRetentionLocked'
        }

        self._effective_sla_domain_id = effective_sla_domain_id
        self._effective_sla_domain_name = effective_sla_domain_name
        self._effective_sla_domain_polaris_managed_id = effective_sla_domain_polaris_managed_id
        self._effective_sla_source_object_id = effective_sla_source_object_id
        self._effective_sla_source_object_name = effective_sla_source_object_name
        self._is_effective_sla_domain_retention_locked = is_effective_sla_domain_retention_locked

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EffectiveSlaHolder':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EffectiveSlaHolder of this EffectiveSlaHolder.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def effective_sla_domain_id(self):
        """Gets the effective_sla_domain_id of this EffectiveSlaHolder.

        The ID of the SLA Domain that controls the protection of the Rubrik object.

        :return: The effective_sla_domain_id of this EffectiveSlaHolder.
        :rtype: str
        """
        return self._effective_sla_domain_id

    @effective_sla_domain_id.setter
    def effective_sla_domain_id(self, effective_sla_domain_id):
        """Sets the effective_sla_domain_id of this EffectiveSlaHolder.

        The ID of the SLA Domain that controls the protection of the Rubrik object.

        :param effective_sla_domain_id: The effective_sla_domain_id of this EffectiveSlaHolder.
        :type effective_sla_domain_id: str
        """
        if effective_sla_domain_id is None:
            raise ValueError("Invalid value for `effective_sla_domain_id`, must not be `None`")

        self._effective_sla_domain_id = effective_sla_domain_id

    @property
    def effective_sla_domain_name(self):
        """Gets the effective_sla_domain_name of this EffectiveSlaHolder.

        The name of the SLA Domain that controls the protection of the Rubrik object.

        :return: The effective_sla_domain_name of this EffectiveSlaHolder.
        :rtype: str
        """
        return self._effective_sla_domain_name

    @effective_sla_domain_name.setter
    def effective_sla_domain_name(self, effective_sla_domain_name):
        """Sets the effective_sla_domain_name of this EffectiveSlaHolder.

        The name of the SLA Domain that controls the protection of the Rubrik object.

        :param effective_sla_domain_name: The effective_sla_domain_name of this EffectiveSlaHolder.
        :type effective_sla_domain_name: str
        """
        if effective_sla_domain_name is None:
            raise ValueError("Invalid value for `effective_sla_domain_name`, must not be `None`")

        self._effective_sla_domain_name = effective_sla_domain_name

    @property
    def effective_sla_domain_polaris_managed_id(self):
        """Gets the effective_sla_domain_polaris_managed_id of this EffectiveSlaHolder.

        Optional. This field contains the managed ID of of the Polaris-managed effective SLA Domain.

        :return: The effective_sla_domain_polaris_managed_id of this EffectiveSlaHolder.
        :rtype: str
        """
        return self._effective_sla_domain_polaris_managed_id

    @effective_sla_domain_polaris_managed_id.setter
    def effective_sla_domain_polaris_managed_id(self, effective_sla_domain_polaris_managed_id):
        """Sets the effective_sla_domain_polaris_managed_id of this EffectiveSlaHolder.

        Optional. This field contains the managed ID of of the Polaris-managed effective SLA Domain.

        :param effective_sla_domain_polaris_managed_id: The effective_sla_domain_polaris_managed_id of this EffectiveSlaHolder.
        :type effective_sla_domain_polaris_managed_id: str
        """

        self._effective_sla_domain_polaris_managed_id = effective_sla_domain_polaris_managed_id

    @property
    def effective_sla_source_object_id(self):
        """Gets the effective_sla_source_object_id of this EffectiveSlaHolder.

        The ID of the parent of the Rubrik object from which the SLA Domain that controls the protection of Rubrik object is inherited.

        :return: The effective_sla_source_object_id of this EffectiveSlaHolder.
        :rtype: str
        """
        return self._effective_sla_source_object_id

    @effective_sla_source_object_id.setter
    def effective_sla_source_object_id(self, effective_sla_source_object_id):
        """Sets the effective_sla_source_object_id of this EffectiveSlaHolder.

        The ID of the parent of the Rubrik object from which the SLA Domain that controls the protection of Rubrik object is inherited.

        :param effective_sla_source_object_id: The effective_sla_source_object_id of this EffectiveSlaHolder.
        :type effective_sla_source_object_id: str
        """

        self._effective_sla_source_object_id = effective_sla_source_object_id

    @property
    def effective_sla_source_object_name(self):
        """Gets the effective_sla_source_object_name of this EffectiveSlaHolder.

        The name of the parent of the Rubrik object from which the SLA Domain that controls the protection of Rubrik object is inherited.

        :return: The effective_sla_source_object_name of this EffectiveSlaHolder.
        :rtype: str
        """
        return self._effective_sla_source_object_name

    @effective_sla_source_object_name.setter
    def effective_sla_source_object_name(self, effective_sla_source_object_name):
        """Sets the effective_sla_source_object_name of this EffectiveSlaHolder.

        The name of the parent of the Rubrik object from which the SLA Domain that controls the protection of Rubrik object is inherited.

        :param effective_sla_source_object_name: The effective_sla_source_object_name of this EffectiveSlaHolder.
        :type effective_sla_source_object_name: str
        """

        self._effective_sla_source_object_name = effective_sla_source_object_name

    @property
    def is_effective_sla_domain_retention_locked(self):
        """Gets the is_effective_sla_domain_retention_locked of this EffectiveSlaHolder.

        Indicates whether the effective SLA Domain is Retention Locked. When this value is 'true', the effective SLA domain is a Retention Lock SLA Domain.

        :return: The is_effective_sla_domain_retention_locked of this EffectiveSlaHolder.
        :rtype: bool
        """
        return self._is_effective_sla_domain_retention_locked

    @is_effective_sla_domain_retention_locked.setter
    def is_effective_sla_domain_retention_locked(self, is_effective_sla_domain_retention_locked):
        """Sets the is_effective_sla_domain_retention_locked of this EffectiveSlaHolder.

        Indicates whether the effective SLA Domain is Retention Locked. When this value is 'true', the effective SLA domain is a Retention Lock SLA Domain.

        :param is_effective_sla_domain_retention_locked: The is_effective_sla_domain_retention_locked of this EffectiveSlaHolder.
        :type is_effective_sla_domain_retention_locked: bool
        """

        self._is_effective_sla_domain_retention_locked = is_effective_sla_domain_retention_locked
