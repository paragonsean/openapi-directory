# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.support_data_type_config import SupportDataTypeConfig
from openapi_server import util


class SupportDataConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data_type_to_config: List[SupportDataTypeConfig]=None):
        """SupportDataConfig - a model defined in OpenAPI

        :param data_type_to_config: The data_type_to_config of this SupportDataConfig.
        """
        self.openapi_types = {
            'data_type_to_config': List[SupportDataTypeConfig]
        }

        self.attribute_map = {
            'data_type_to_config': 'dataTypeToConfig'
        }

        self._data_type_to_config = data_type_to_config

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SupportDataConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SupportDataConfig of this SupportDataConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data_type_to_config(self):
        """Gets the data_type_to_config of this SupportDataConfig.


        :return: The data_type_to_config of this SupportDataConfig.
        :rtype: List[SupportDataTypeConfig]
        """
        return self._data_type_to_config

    @data_type_to_config.setter
    def data_type_to_config(self, data_type_to_config):
        """Sets the data_type_to_config of this SupportDataConfig.


        :param data_type_to_config: The data_type_to_config of this SupportDataConfig.
        :type data_type_to_config: List[SupportDataTypeConfig]
        """
        if data_type_to_config is None:
            raise ValueError("Invalid value for `data_type_to_config`, must not be `None`")

        self._data_type_to_config = data_type_to_config
