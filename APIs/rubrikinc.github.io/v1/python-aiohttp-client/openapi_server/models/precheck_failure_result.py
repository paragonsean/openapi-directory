# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PrecheckFailureResult(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cause: str=None, error_code: str=None, error_message: str=None, id: str=None, is_upgrade_blocker: bool=None, is_user_remediable: bool=None, precheck_name: str=None, remedy: str=None):
        """PrecheckFailureResult - a model defined in OpenAPI

        :param cause: The cause of this PrecheckFailureResult.
        :param error_code: The error_code of this PrecheckFailureResult.
        :param error_message: The error_message of this PrecheckFailureResult.
        :param id: The id of this PrecheckFailureResult.
        :param is_upgrade_blocker: The is_upgrade_blocker of this PrecheckFailureResult.
        :param is_user_remediable: The is_user_remediable of this PrecheckFailureResult.
        :param precheck_name: The precheck_name of this PrecheckFailureResult.
        :param remedy: The remedy of this PrecheckFailureResult.
        """
        self.openapi_types = {
            'cause': str,
            'error_code': str,
            'error_message': str,
            'id': str,
            'is_upgrade_blocker': bool,
            'is_user_remediable': bool,
            'precheck_name': str,
            'remedy': str
        }

        self.attribute_map = {
            'cause': 'cause',
            'error_code': 'errorCode',
            'error_message': 'errorMessage',
            'id': 'id',
            'is_upgrade_blocker': 'isUpgradeBlocker',
            'is_user_remediable': 'isUserRemediable',
            'precheck_name': 'precheckName',
            'remedy': 'remedy'
        }

        self._cause = cause
        self._error_code = error_code
        self._error_message = error_message
        self._id = id
        self._is_upgrade_blocker = is_upgrade_blocker
        self._is_user_remediable = is_user_remediable
        self._precheck_name = precheck_name
        self._remedy = remedy

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PrecheckFailureResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PrecheckFailureResult of this PrecheckFailureResult.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cause(self):
        """Gets the cause of this PrecheckFailureResult.

        The cause of the failure.

        :return: The cause of this PrecheckFailureResult.
        :rtype: str
        """
        return self._cause

    @cause.setter
    def cause(self, cause):
        """Sets the cause of this PrecheckFailureResult.

        The cause of the failure.

        :param cause: The cause of this PrecheckFailureResult.
        :type cause: str
        """

        self._cause = cause

    @property
    def error_code(self):
        """Gets the error_code of this PrecheckFailureResult.

        The precheck failure error code. This is used as a reference to a KB article about the error.

        :return: The error_code of this PrecheckFailureResult.
        :rtype: str
        """
        return self._error_code

    @error_code.setter
    def error_code(self, error_code):
        """Sets the error_code of this PrecheckFailureResult.

        The precheck failure error code. This is used as a reference to a KB article about the error.

        :param error_code: The error_code of this PrecheckFailureResult.
        :type error_code: str
        """
        if error_code is None:
            raise ValueError("Invalid value for `error_code`, must not be `None`")

        self._error_code = error_code

    @property
    def error_message(self):
        """Gets the error_message of this PrecheckFailureResult.

        The precheck failure message.

        :return: The error_message of this PrecheckFailureResult.
        :rtype: str
        """
        return self._error_message

    @error_message.setter
    def error_message(self, error_message):
        """Sets the error_message of this PrecheckFailureResult.

        The precheck failure message.

        :param error_message: The error_message of this PrecheckFailureResult.
        :type error_message: str
        """
        if error_message is None:
            raise ValueError("Invalid value for `error_message`, must not be `None`")

        self._error_message = error_message

    @property
    def id(self):
        """Gets the id of this PrecheckFailureResult.

        The ID of the precheck error message.

        :return: The id of this PrecheckFailureResult.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PrecheckFailureResult.

        The ID of the precheck error message.

        :param id: The id of this PrecheckFailureResult.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def is_upgrade_blocker(self):
        """Gets the is_upgrade_blocker of this PrecheckFailureResult.

        Specifies whether a failed precheck prevents an upgrade from starting.

        :return: The is_upgrade_blocker of this PrecheckFailureResult.
        :rtype: bool
        """
        return self._is_upgrade_blocker

    @is_upgrade_blocker.setter
    def is_upgrade_blocker(self, is_upgrade_blocker):
        """Sets the is_upgrade_blocker of this PrecheckFailureResult.

        Specifies whether a failed precheck prevents an upgrade from starting.

        :param is_upgrade_blocker: The is_upgrade_blocker of this PrecheckFailureResult.
        :type is_upgrade_blocker: bool
        """
        if is_upgrade_blocker is None:
            raise ValueError("Invalid value for `is_upgrade_blocker`, must not be `None`")

        self._is_upgrade_blocker = is_upgrade_blocker

    @property
    def is_user_remediable(self):
        """Gets the is_user_remediable of this PrecheckFailureResult.

        Can the user fix this precheck failure.

        :return: The is_user_remediable of this PrecheckFailureResult.
        :rtype: bool
        """
        return self._is_user_remediable

    @is_user_remediable.setter
    def is_user_remediable(self, is_user_remediable):
        """Sets the is_user_remediable of this PrecheckFailureResult.

        Can the user fix this precheck failure.

        :param is_user_remediable: The is_user_remediable of this PrecheckFailureResult.
        :type is_user_remediable: bool
        """
        if is_user_remediable is None:
            raise ValueError("Invalid value for `is_user_remediable`, must not be `None`")

        self._is_user_remediable = is_user_remediable

    @property
    def precheck_name(self):
        """Gets the precheck_name of this PrecheckFailureResult.

        The name of the failed upgrade precheck.

        :return: The precheck_name of this PrecheckFailureResult.
        :rtype: str
        """
        return self._precheck_name

    @precheck_name.setter
    def precheck_name(self, precheck_name):
        """Sets the precheck_name of this PrecheckFailureResult.

        The name of the failed upgrade precheck.

        :param precheck_name: The precheck_name of this PrecheckFailureResult.
        :type precheck_name: str
        """
        if precheck_name is None:
            raise ValueError("Invalid value for `precheck_name`, must not be `None`")

        self._precheck_name = precheck_name

    @property
    def remedy(self):
        """Gets the remedy of this PrecheckFailureResult.

        The user action needed to recover from this failure.

        :return: The remedy of this PrecheckFailureResult.
        :rtype: str
        """
        return self._remedy

    @remedy.setter
    def remedy(self, remedy):
        """Sets the remedy of this PrecheckFailureResult.

        The user action needed to recover from this failure.

        :param remedy: The remedy of this PrecheckFailureResult.
        :type remedy: str
        """

        self._remedy = remedy
