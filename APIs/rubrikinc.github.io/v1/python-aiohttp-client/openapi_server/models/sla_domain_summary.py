# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.archival_spec import ArchivalSpec
from openapi_server.models.backup_window import BackupWindow
from openapi_server.models.replication_spec import ReplicationSpec
from openapi_server.models.sla_frequency import SlaFrequency
from openapi_server import util


class SlaDomainSummary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, num_nutanix_vms: int=None, num_ec2_instances: int=None, num_hyperv_vms: int=None, num_managed_volumes: int=None, num_dbs: int=None, num_vcd_vapps: int=None, num_filesets: int=None, num_linux_hosts: int=None, num_oracle_dbs: int=None, num_protected_objects: int=None, num_shares: int=None, num_storage_array_volume_groups: int=None, num_vms: int=None, num_windows_hosts: int=None, num_windows_volume_groups: int=None, allowed_backup_windows: List[BackupWindow]=None, archival_specs: List[ArchivalSpec]=None, first_full_allowed_backup_windows: List[BackupWindow]=None, frequencies: List[SlaFrequency]=None, id: str=None, is_default: bool=None, is_paused: bool=None, is_retention_locked: bool=None, local_retention_limit: int=None, max_local_retention_limit: int=None, name: str=None, primary_cluster_id: str=None, replication_specs: List[ReplicationSpec]=None, ui_color: str=None):
        """SlaDomainSummary - a model defined in OpenAPI

        :param num_nutanix_vms: The num_nutanix_vms of this SlaDomainSummary.
        :param num_ec2_instances: The num_ec2_instances of this SlaDomainSummary.
        :param num_hyperv_vms: The num_hyperv_vms of this SlaDomainSummary.
        :param num_managed_volumes: The num_managed_volumes of this SlaDomainSummary.
        :param num_dbs: The num_dbs of this SlaDomainSummary.
        :param num_vcd_vapps: The num_vcd_vapps of this SlaDomainSummary.
        :param num_filesets: The num_filesets of this SlaDomainSummary.
        :param num_linux_hosts: The num_linux_hosts of this SlaDomainSummary.
        :param num_oracle_dbs: The num_oracle_dbs of this SlaDomainSummary.
        :param num_protected_objects: The num_protected_objects of this SlaDomainSummary.
        :param num_shares: The num_shares of this SlaDomainSummary.
        :param num_storage_array_volume_groups: The num_storage_array_volume_groups of this SlaDomainSummary.
        :param num_vms: The num_vms of this SlaDomainSummary.
        :param num_windows_hosts: The num_windows_hosts of this SlaDomainSummary.
        :param num_windows_volume_groups: The num_windows_volume_groups of this SlaDomainSummary.
        :param allowed_backup_windows: The allowed_backup_windows of this SlaDomainSummary.
        :param archival_specs: The archival_specs of this SlaDomainSummary.
        :param first_full_allowed_backup_windows: The first_full_allowed_backup_windows of this SlaDomainSummary.
        :param frequencies: The frequencies of this SlaDomainSummary.
        :param id: The id of this SlaDomainSummary.
        :param is_default: The is_default of this SlaDomainSummary.
        :param is_paused: The is_paused of this SlaDomainSummary.
        :param is_retention_locked: The is_retention_locked of this SlaDomainSummary.
        :param local_retention_limit: The local_retention_limit of this SlaDomainSummary.
        :param max_local_retention_limit: The max_local_retention_limit of this SlaDomainSummary.
        :param name: The name of this SlaDomainSummary.
        :param primary_cluster_id: The primary_cluster_id of this SlaDomainSummary.
        :param replication_specs: The replication_specs of this SlaDomainSummary.
        :param ui_color: The ui_color of this SlaDomainSummary.
        """
        self.openapi_types = {
            'num_nutanix_vms': int,
            'num_ec2_instances': int,
            'num_hyperv_vms': int,
            'num_managed_volumes': int,
            'num_dbs': int,
            'num_vcd_vapps': int,
            'num_filesets': int,
            'num_linux_hosts': int,
            'num_oracle_dbs': int,
            'num_protected_objects': int,
            'num_shares': int,
            'num_storage_array_volume_groups': int,
            'num_vms': int,
            'num_windows_hosts': int,
            'num_windows_volume_groups': int,
            'allowed_backup_windows': List[BackupWindow],
            'archival_specs': List[ArchivalSpec],
            'first_full_allowed_backup_windows': List[BackupWindow],
            'frequencies': List[SlaFrequency],
            'id': str,
            'is_default': bool,
            'is_paused': bool,
            'is_retention_locked': bool,
            'local_retention_limit': int,
            'max_local_retention_limit': int,
            'name': str,
            'primary_cluster_id': str,
            'replication_specs': List[ReplicationSpec],
            'ui_color': str
        }

        self.attribute_map = {
            'num_nutanix_vms': 'numNutanixVms',
            'num_ec2_instances': 'numEc2Instances',
            'num_hyperv_vms': 'numHypervVms',
            'num_managed_volumes': 'numManagedVolumes',
            'num_dbs': 'numDbs',
            'num_vcd_vapps': 'numVcdVapps',
            'num_filesets': 'numFilesets',
            'num_linux_hosts': 'numLinuxHosts',
            'num_oracle_dbs': 'numOracleDbs',
            'num_protected_objects': 'numProtectedObjects',
            'num_shares': 'numShares',
            'num_storage_array_volume_groups': 'numStorageArrayVolumeGroups',
            'num_vms': 'numVms',
            'num_windows_hosts': 'numWindowsHosts',
            'num_windows_volume_groups': 'numWindowsVolumeGroups',
            'allowed_backup_windows': 'allowedBackupWindows',
            'archival_specs': 'archivalSpecs',
            'first_full_allowed_backup_windows': 'firstFullAllowedBackupWindows',
            'frequencies': 'frequencies',
            'id': 'id',
            'is_default': 'isDefault',
            'is_paused': 'isPaused',
            'is_retention_locked': 'isRetentionLocked',
            'local_retention_limit': 'localRetentionLimit',
            'max_local_retention_limit': 'maxLocalRetentionLimit',
            'name': 'name',
            'primary_cluster_id': 'primaryClusterId',
            'replication_specs': 'replicationSpecs',
            'ui_color': 'uiColor'
        }

        self._num_nutanix_vms = num_nutanix_vms
        self._num_ec2_instances = num_ec2_instances
        self._num_hyperv_vms = num_hyperv_vms
        self._num_managed_volumes = num_managed_volumes
        self._num_dbs = num_dbs
        self._num_vcd_vapps = num_vcd_vapps
        self._num_filesets = num_filesets
        self._num_linux_hosts = num_linux_hosts
        self._num_oracle_dbs = num_oracle_dbs
        self._num_protected_objects = num_protected_objects
        self._num_shares = num_shares
        self._num_storage_array_volume_groups = num_storage_array_volume_groups
        self._num_vms = num_vms
        self._num_windows_hosts = num_windows_hosts
        self._num_windows_volume_groups = num_windows_volume_groups
        self._allowed_backup_windows = allowed_backup_windows
        self._archival_specs = archival_specs
        self._first_full_allowed_backup_windows = first_full_allowed_backup_windows
        self._frequencies = frequencies
        self._id = id
        self._is_default = is_default
        self._is_paused = is_paused
        self._is_retention_locked = is_retention_locked
        self._local_retention_limit = local_retention_limit
        self._max_local_retention_limit = max_local_retention_limit
        self._name = name
        self._primary_cluster_id = primary_cluster_id
        self._replication_specs = replication_specs
        self._ui_color = ui_color

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SlaDomainSummary':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SlaDomainSummary of this SlaDomainSummary.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def num_nutanix_vms(self):
        """Gets the num_nutanix_vms of this SlaDomainSummary.

        The number of Nutanix virtual machines protected under this SLA domain.

        :return: The num_nutanix_vms of this SlaDomainSummary.
        :rtype: int
        """
        return self._num_nutanix_vms

    @num_nutanix_vms.setter
    def num_nutanix_vms(self, num_nutanix_vms):
        """Sets the num_nutanix_vms of this SlaDomainSummary.

        The number of Nutanix virtual machines protected under this SLA domain.

        :param num_nutanix_vms: The num_nutanix_vms of this SlaDomainSummary.
        :type num_nutanix_vms: int
        """

        self._num_nutanix_vms = num_nutanix_vms

    @property
    def num_ec2_instances(self):
        """Gets the num_ec2_instances of this SlaDomainSummary.

        The number of EC2 instances protected under this SLA Domain.

        :return: The num_ec2_instances of this SlaDomainSummary.
        :rtype: int
        """
        return self._num_ec2_instances

    @num_ec2_instances.setter
    def num_ec2_instances(self, num_ec2_instances):
        """Sets the num_ec2_instances of this SlaDomainSummary.

        The number of EC2 instances protected under this SLA Domain.

        :param num_ec2_instances: The num_ec2_instances of this SlaDomainSummary.
        :type num_ec2_instances: int
        """

        self._num_ec2_instances = num_ec2_instances

    @property
    def num_hyperv_vms(self):
        """Gets the num_hyperv_vms of this SlaDomainSummary.

        The number of Hyper-V virtual machines protected under this SLA domain.

        :return: The num_hyperv_vms of this SlaDomainSummary.
        :rtype: int
        """
        return self._num_hyperv_vms

    @num_hyperv_vms.setter
    def num_hyperv_vms(self, num_hyperv_vms):
        """Sets the num_hyperv_vms of this SlaDomainSummary.

        The number of Hyper-V virtual machines protected under this SLA domain.

        :param num_hyperv_vms: The num_hyperv_vms of this SlaDomainSummary.
        :type num_hyperv_vms: int
        """

        self._num_hyperv_vms = num_hyperv_vms

    @property
    def num_managed_volumes(self):
        """Gets the num_managed_volumes of this SlaDomainSummary.

        The number of Managed volumes protected under this SLA Domain.

        :return: The num_managed_volumes of this SlaDomainSummary.
        :rtype: int
        """
        return self._num_managed_volumes

    @num_managed_volumes.setter
    def num_managed_volumes(self, num_managed_volumes):
        """Sets the num_managed_volumes of this SlaDomainSummary.

        The number of Managed volumes protected under this SLA Domain.

        :param num_managed_volumes: The num_managed_volumes of this SlaDomainSummary.
        :type num_managed_volumes: int
        """

        self._num_managed_volumes = num_managed_volumes

    @property
    def num_dbs(self):
        """Gets the num_dbs of this SlaDomainSummary.

        The number of actively protected databases under this SLA domain.

        :return: The num_dbs of this SlaDomainSummary.
        :rtype: int
        """
        return self._num_dbs

    @num_dbs.setter
    def num_dbs(self, num_dbs):
        """Sets the num_dbs of this SlaDomainSummary.

        The number of actively protected databases under this SLA domain.

        :param num_dbs: The num_dbs of this SlaDomainSummary.
        :type num_dbs: int
        """

        self._num_dbs = num_dbs

    @property
    def num_vcd_vapps(self):
        """Gets the num_vcd_vapps of this SlaDomainSummary.

        The number of vApps protected under this SLA Domain.

        :return: The num_vcd_vapps of this SlaDomainSummary.
        :rtype: int
        """
        return self._num_vcd_vapps

    @num_vcd_vapps.setter
    def num_vcd_vapps(self, num_vcd_vapps):
        """Sets the num_vcd_vapps of this SlaDomainSummary.

        The number of vApps protected under this SLA Domain.

        :param num_vcd_vapps: The num_vcd_vapps of this SlaDomainSummary.
        :type num_vcd_vapps: int
        """

        self._num_vcd_vapps = num_vcd_vapps

    @property
    def num_filesets(self):
        """Gets the num_filesets of this SlaDomainSummary.

        The number of filesets protected under this SLA Domain.

        :return: The num_filesets of this SlaDomainSummary.
        :rtype: int
        """
        return self._num_filesets

    @num_filesets.setter
    def num_filesets(self, num_filesets):
        """Sets the num_filesets of this SlaDomainSummary.

        The number of filesets protected under this SLA Domain.

        :param num_filesets: The num_filesets of this SlaDomainSummary.
        :type num_filesets: int
        """

        self._num_filesets = num_filesets

    @property
    def num_linux_hosts(self):
        """Gets the num_linux_hosts of this SlaDomainSummary.

        The number of Linux servers with filesets protected under this SLA Domain.

        :return: The num_linux_hosts of this SlaDomainSummary.
        :rtype: int
        """
        return self._num_linux_hosts

    @num_linux_hosts.setter
    def num_linux_hosts(self, num_linux_hosts):
        """Sets the num_linux_hosts of this SlaDomainSummary.

        The number of Linux servers with filesets protected under this SLA Domain.

        :param num_linux_hosts: The num_linux_hosts of this SlaDomainSummary.
        :type num_linux_hosts: int
        """

        self._num_linux_hosts = num_linux_hosts

    @property
    def num_oracle_dbs(self):
        """Gets the num_oracle_dbs of this SlaDomainSummary.

        The number of actively protected oracle databases under this SLA Domain.

        :return: The num_oracle_dbs of this SlaDomainSummary.
        :rtype: int
        """
        return self._num_oracle_dbs

    @num_oracle_dbs.setter
    def num_oracle_dbs(self, num_oracle_dbs):
        """Sets the num_oracle_dbs of this SlaDomainSummary.

        The number of actively protected oracle databases under this SLA Domain.

        :param num_oracle_dbs: The num_oracle_dbs of this SlaDomainSummary.
        :type num_oracle_dbs: int
        """

        self._num_oracle_dbs = num_oracle_dbs

    @property
    def num_protected_objects(self):
        """Gets the num_protected_objects of this SlaDomainSummary.

        The total number of protected ojects under this SLA Domain.

        :return: The num_protected_objects of this SlaDomainSummary.
        :rtype: int
        """
        return self._num_protected_objects

    @num_protected_objects.setter
    def num_protected_objects(self, num_protected_objects):
        """Sets the num_protected_objects of this SlaDomainSummary.

        The total number of protected ojects under this SLA Domain.

        :param num_protected_objects: The num_protected_objects of this SlaDomainSummary.
        :type num_protected_objects: int
        """

        self._num_protected_objects = num_protected_objects

    @property
    def num_shares(self):
        """Gets the num_shares of this SlaDomainSummary.

        The number of shares protected under this SLA Domain.

        :return: The num_shares of this SlaDomainSummary.
        :rtype: int
        """
        return self._num_shares

    @num_shares.setter
    def num_shares(self, num_shares):
        """Sets the num_shares of this SlaDomainSummary.

        The number of shares protected under this SLA Domain.

        :param num_shares: The num_shares of this SlaDomainSummary.
        :type num_shares: int
        """

        self._num_shares = num_shares

    @property
    def num_storage_array_volume_groups(self):
        """Gets the num_storage_array_volume_groups of this SlaDomainSummary.

        The number of storage array volume groups protected under this SLA Domain.

        :return: The num_storage_array_volume_groups of this SlaDomainSummary.
        :rtype: int
        """
        return self._num_storage_array_volume_groups

    @num_storage_array_volume_groups.setter
    def num_storage_array_volume_groups(self, num_storage_array_volume_groups):
        """Sets the num_storage_array_volume_groups of this SlaDomainSummary.

        The number of storage array volume groups protected under this SLA Domain.

        :param num_storage_array_volume_groups: The num_storage_array_volume_groups of this SlaDomainSummary.
        :type num_storage_array_volume_groups: int
        """

        self._num_storage_array_volume_groups = num_storage_array_volume_groups

    @property
    def num_vms(self):
        """Gets the num_vms of this SlaDomainSummary.


        :return: The num_vms of this SlaDomainSummary.
        :rtype: int
        """
        return self._num_vms

    @num_vms.setter
    def num_vms(self, num_vms):
        """Sets the num_vms of this SlaDomainSummary.


        :param num_vms: The num_vms of this SlaDomainSummary.
        :type num_vms: int
        """

        self._num_vms = num_vms

    @property
    def num_windows_hosts(self):
        """Gets the num_windows_hosts of this SlaDomainSummary.

        The number of Windows servers with filesets protected under this SLA Domain.

        :return: The num_windows_hosts of this SlaDomainSummary.
        :rtype: int
        """
        return self._num_windows_hosts

    @num_windows_hosts.setter
    def num_windows_hosts(self, num_windows_hosts):
        """Sets the num_windows_hosts of this SlaDomainSummary.

        The number of Windows servers with filesets protected under this SLA Domain.

        :param num_windows_hosts: The num_windows_hosts of this SlaDomainSummary.
        :type num_windows_hosts: int
        """

        self._num_windows_hosts = num_windows_hosts

    @property
    def num_windows_volume_groups(self):
        """Gets the num_windows_volume_groups of this SlaDomainSummary.

        The number of Windows volume groups protected under this SLA Domain.

        :return: The num_windows_volume_groups of this SlaDomainSummary.
        :rtype: int
        """
        return self._num_windows_volume_groups

    @num_windows_volume_groups.setter
    def num_windows_volume_groups(self, num_windows_volume_groups):
        """Sets the num_windows_volume_groups of this SlaDomainSummary.

        The number of Windows volume groups protected under this SLA Domain.

        :param num_windows_volume_groups: The num_windows_volume_groups of this SlaDomainSummary.
        :type num_windows_volume_groups: int
        """

        self._num_windows_volume_groups = num_windows_volume_groups

    @property
    def allowed_backup_windows(self):
        """Gets the allowed_backup_windows of this SlaDomainSummary.


        :return: The allowed_backup_windows of this SlaDomainSummary.
        :rtype: List[BackupWindow]
        """
        return self._allowed_backup_windows

    @allowed_backup_windows.setter
    def allowed_backup_windows(self, allowed_backup_windows):
        """Sets the allowed_backup_windows of this SlaDomainSummary.


        :param allowed_backup_windows: The allowed_backup_windows of this SlaDomainSummary.
        :type allowed_backup_windows: List[BackupWindow]
        """
        if allowed_backup_windows is None:
            raise ValueError("Invalid value for `allowed_backup_windows`, must not be `None`")

        self._allowed_backup_windows = allowed_backup_windows

    @property
    def archival_specs(self):
        """Gets the archival_specs of this SlaDomainSummary.

        Specification for archival locations on this SLA.

        :return: The archival_specs of this SlaDomainSummary.
        :rtype: List[ArchivalSpec]
        """
        return self._archival_specs

    @archival_specs.setter
    def archival_specs(self, archival_specs):
        """Sets the archival_specs of this SlaDomainSummary.

        Specification for archival locations on this SLA.

        :param archival_specs: The archival_specs of this SlaDomainSummary.
        :type archival_specs: List[ArchivalSpec]
        """

        self._archival_specs = archival_specs

    @property
    def first_full_allowed_backup_windows(self):
        """Gets the first_full_allowed_backup_windows of this SlaDomainSummary.


        :return: The first_full_allowed_backup_windows of this SlaDomainSummary.
        :rtype: List[BackupWindow]
        """
        return self._first_full_allowed_backup_windows

    @first_full_allowed_backup_windows.setter
    def first_full_allowed_backup_windows(self, first_full_allowed_backup_windows):
        """Sets the first_full_allowed_backup_windows of this SlaDomainSummary.


        :param first_full_allowed_backup_windows: The first_full_allowed_backup_windows of this SlaDomainSummary.
        :type first_full_allowed_backup_windows: List[BackupWindow]
        """
        if first_full_allowed_backup_windows is None:
            raise ValueError("Invalid value for `first_full_allowed_backup_windows`, must not be `None`")

        self._first_full_allowed_backup_windows = first_full_allowed_backup_windows

    @property
    def frequencies(self):
        """Gets the frequencies of this SlaDomainSummary.


        :return: The frequencies of this SlaDomainSummary.
        :rtype: List[SlaFrequency]
        """
        return self._frequencies

    @frequencies.setter
    def frequencies(self, frequencies):
        """Sets the frequencies of this SlaDomainSummary.


        :param frequencies: The frequencies of this SlaDomainSummary.
        :type frequencies: List[SlaFrequency]
        """
        if frequencies is None:
            raise ValueError("Invalid value for `frequencies`, must not be `None`")

        self._frequencies = frequencies

    @property
    def id(self):
        """Gets the id of this SlaDomainSummary.


        :return: The id of this SlaDomainSummary.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SlaDomainSummary.


        :param id: The id of this SlaDomainSummary.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def is_default(self):
        """Gets the is_default of this SlaDomainSummary.


        :return: The is_default of this SlaDomainSummary.
        :rtype: bool
        """
        return self._is_default

    @is_default.setter
    def is_default(self, is_default):
        """Sets the is_default of this SlaDomainSummary.


        :param is_default: The is_default of this SlaDomainSummary.
        :type is_default: bool
        """
        if is_default is None:
            raise ValueError("Invalid value for `is_default`, must not be `None`")

        self._is_default = is_default

    @property
    def is_paused(self):
        """Gets the is_paused of this SlaDomainSummary.

        A Boolean value that specifies whether protection for all the snappables that are protected by the specified SLA Domain is paused. When the value is 'true' protection is paused.

        :return: The is_paused of this SlaDomainSummary.
        :rtype: bool
        """
        return self._is_paused

    @is_paused.setter
    def is_paused(self, is_paused):
        """Sets the is_paused of this SlaDomainSummary.

        A Boolean value that specifies whether protection for all the snappables that are protected by the specified SLA Domain is paused. When the value is 'true' protection is paused.

        :param is_paused: The is_paused of this SlaDomainSummary.
        :type is_paused: bool
        """

        self._is_paused = is_paused

    @property
    def is_retention_locked(self):
        """Gets the is_retention_locked of this SlaDomainSummary.

        Boolean value that identifies a Retention Lock SLA Domain. Value is true when an SLA Domain is Retention Locked and false when it is not.

        :return: The is_retention_locked of this SlaDomainSummary.
        :rtype: bool
        """
        return self._is_retention_locked

    @is_retention_locked.setter
    def is_retention_locked(self, is_retention_locked):
        """Sets the is_retention_locked of this SlaDomainSummary.

        Boolean value that identifies a Retention Lock SLA Domain. Value is true when an SLA Domain is Retention Locked and false when it is not.

        :param is_retention_locked: The is_retention_locked of this SlaDomainSummary.
        :type is_retention_locked: bool
        """

        self._is_retention_locked = is_retention_locked

    @property
    def local_retention_limit(self):
        """Gets the local_retention_limit of this SlaDomainSummary.

        Retention limit for snapshots on the local Rubrik system. If none, they will remain as long as SLA requires.

        :return: The local_retention_limit of this SlaDomainSummary.
        :rtype: int
        """
        return self._local_retention_limit

    @local_retention_limit.setter
    def local_retention_limit(self, local_retention_limit):
        """Sets the local_retention_limit of this SlaDomainSummary.

        Retention limit for snapshots on the local Rubrik system. If none, they will remain as long as SLA requires.

        :param local_retention_limit: The local_retention_limit of this SlaDomainSummary.
        :type local_retention_limit: int
        """

        self._local_retention_limit = local_retention_limit

    @property
    def max_local_retention_limit(self):
        """Gets the max_local_retention_limit of this SlaDomainSummary.

        Maximum limit for snapshots to be retained on the local Rubrik system. For local sla, it would be max of frequencies but for remote sla, it would be the retentionLimit set on the replication target location. (Local location is the replication target location for remote sla).

        :return: The max_local_retention_limit of this SlaDomainSummary.
        :rtype: int
        """
        return self._max_local_retention_limit

    @max_local_retention_limit.setter
    def max_local_retention_limit(self, max_local_retention_limit):
        """Sets the max_local_retention_limit of this SlaDomainSummary.

        Maximum limit for snapshots to be retained on the local Rubrik system. For local sla, it would be max of frequencies but for remote sla, it would be the retentionLimit set on the replication target location. (Local location is the replication target location for remote sla).

        :param max_local_retention_limit: The max_local_retention_limit of this SlaDomainSummary.
        :type max_local_retention_limit: int
        """
        if max_local_retention_limit is None:
            raise ValueError("Invalid value for `max_local_retention_limit`, must not be `None`")

        self._max_local_retention_limit = max_local_retention_limit

    @property
    def name(self):
        """Gets the name of this SlaDomainSummary.


        :return: The name of this SlaDomainSummary.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SlaDomainSummary.


        :param name: The name of this SlaDomainSummary.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def primary_cluster_id(self):
        """Gets the primary_cluster_id of this SlaDomainSummary.


        :return: The primary_cluster_id of this SlaDomainSummary.
        :rtype: str
        """
        return self._primary_cluster_id

    @primary_cluster_id.setter
    def primary_cluster_id(self, primary_cluster_id):
        """Sets the primary_cluster_id of this SlaDomainSummary.


        :param primary_cluster_id: The primary_cluster_id of this SlaDomainSummary.
        :type primary_cluster_id: str
        """
        if primary_cluster_id is None:
            raise ValueError("Invalid value for `primary_cluster_id`, must not be `None`")

        self._primary_cluster_id = primary_cluster_id

    @property
    def replication_specs(self):
        """Gets the replication_specs of this SlaDomainSummary.

        Specification for replication locations on this SLA.

        :return: The replication_specs of this SlaDomainSummary.
        :rtype: List[ReplicationSpec]
        """
        return self._replication_specs

    @replication_specs.setter
    def replication_specs(self, replication_specs):
        """Sets the replication_specs of this SlaDomainSummary.

        Specification for replication locations on this SLA.

        :param replication_specs: The replication_specs of this SlaDomainSummary.
        :type replication_specs: List[ReplicationSpec]
        """

        self._replication_specs = replication_specs

    @property
    def ui_color(self):
        """Gets the ui_color of this SlaDomainSummary.


        :return: The ui_color of this SlaDomainSummary.
        :rtype: str
        """
        return self._ui_color

    @ui_color.setter
    def ui_color(self, ui_color):
        """Sets the ui_color of this SlaDomainSummary.


        :param ui_color: The ui_color of this SlaDomainSummary.
        :type ui_color: str
        """

        self._ui_color = ui_color
