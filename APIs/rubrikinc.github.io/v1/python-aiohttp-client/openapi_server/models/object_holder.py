# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ObjectHolder(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, object_id: str=None, object_name: str=None, object_type: str=None):
        """ObjectHolder - a model defined in OpenAPI

        :param object_id: The object_id of this ObjectHolder.
        :param object_name: The object_name of this ObjectHolder.
        :param object_type: The object_type of this ObjectHolder.
        """
        self.openapi_types = {
            'object_id': str,
            'object_name': str,
            'object_type': str
        }

        self.attribute_map = {
            'object_id': 'objectId',
            'object_name': 'objectName',
            'object_type': 'objectType'
        }

        self._object_id = object_id
        self._object_name = object_name
        self._object_type = object_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ObjectHolder':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ObjectHolder of this ObjectHolder.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def object_id(self):
        """Gets the object_id of this ObjectHolder.


        :return: The object_id of this ObjectHolder.
        :rtype: str
        """
        return self._object_id

    @object_id.setter
    def object_id(self, object_id):
        """Sets the object_id of this ObjectHolder.


        :param object_id: The object_id of this ObjectHolder.
        :type object_id: str
        """
        if object_id is None:
            raise ValueError("Invalid value for `object_id`, must not be `None`")

        self._object_id = object_id

    @property
    def object_name(self):
        """Gets the object_name of this ObjectHolder.


        :return: The object_name of this ObjectHolder.
        :rtype: str
        """
        return self._object_name

    @object_name.setter
    def object_name(self, object_name):
        """Sets the object_name of this ObjectHolder.


        :param object_name: The object_name of this ObjectHolder.
        :type object_name: str
        """
        if object_name is None:
            raise ValueError("Invalid value for `object_name`, must not be `None`")

        self._object_name = object_name

    @property
    def object_type(self):
        """Gets the object_type of this ObjectHolder.


        :return: The object_type of this ObjectHolder.
        :rtype: str
        """
        return self._object_type

    @object_type.setter
    def object_type(self, object_type):
        """Sets the object_type of this ObjectHolder.


        :param object_type: The object_type of this ObjectHolder.
        :type object_type: str
        """
        if object_type is None:
            raise ValueError("Invalid value for `object_type`, must not be `None`")

        self._object_type = object_type
