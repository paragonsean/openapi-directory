# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.hdfs_config import HdfsConfig
from openapi_server.models.nas_config import NasConfig
from openapi_server import util


class HostRegister(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, alias: str=None, has_agent: bool=None, hdfs_config: HdfsConfig=None, hostname: str=None, is_oracle_host: bool=None, nas_config: NasConfig=None, oracle_query_user: str=None, oracle_sys_dba_user: str=None, organization_id: str=None):
        """HostRegister - a model defined in OpenAPI

        :param alias: The alias of this HostRegister.
        :param has_agent: The has_agent of this HostRegister.
        :param hdfs_config: The hdfs_config of this HostRegister.
        :param hostname: The hostname of this HostRegister.
        :param is_oracle_host: The is_oracle_host of this HostRegister.
        :param nas_config: The nas_config of this HostRegister.
        :param oracle_query_user: The oracle_query_user of this HostRegister.
        :param oracle_sys_dba_user: The oracle_sys_dba_user of this HostRegister.
        :param organization_id: The organization_id of this HostRegister.
        """
        self.openapi_types = {
            'alias': str,
            'has_agent': bool,
            'hdfs_config': HdfsConfig,
            'hostname': str,
            'is_oracle_host': bool,
            'nas_config': NasConfig,
            'oracle_query_user': str,
            'oracle_sys_dba_user': str,
            'organization_id': str
        }

        self.attribute_map = {
            'alias': 'alias',
            'has_agent': 'hasAgent',
            'hdfs_config': 'hdfsConfig',
            'hostname': 'hostname',
            'is_oracle_host': 'isOracleHost',
            'nas_config': 'nasConfig',
            'oracle_query_user': 'oracleQueryUser',
            'oracle_sys_dba_user': 'oracleSysDbaUser',
            'organization_id': 'organizationId'
        }

        self._alias = alias
        self._has_agent = has_agent
        self._hdfs_config = hdfs_config
        self._hostname = hostname
        self._is_oracle_host = is_oracle_host
        self._nas_config = nas_config
        self._oracle_query_user = oracle_query_user
        self._oracle_sys_dba_user = oracle_sys_dba_user
        self._organization_id = organization_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'HostRegister':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The HostRegister of this HostRegister.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def alias(self):
        """Gets the alias of this HostRegister.

        A user-specified string that returns this host in searches.

        :return: The alias of this HostRegister.
        :rtype: str
        """
        return self._alias

    @alias.setter
    def alias(self, alias):
        """Sets the alias of this HostRegister.

        A user-specified string that returns this host in searches.

        :param alias: The alias of this HostRegister.
        :type alias: str
        """

        self._alias = alias

    @property
    def has_agent(self):
        """Gets the has_agent of this HostRegister.


        :return: The has_agent of this HostRegister.
        :rtype: bool
        """
        return self._has_agent

    @has_agent.setter
    def has_agent(self, has_agent):
        """Sets the has_agent of this HostRegister.


        :param has_agent: The has_agent of this HostRegister.
        :type has_agent: bool
        """

        self._has_agent = has_agent

    @property
    def hdfs_config(self):
        """Gets the hdfs_config of this HostRegister.


        :return: The hdfs_config of this HostRegister.
        :rtype: HdfsConfig
        """
        return self._hdfs_config

    @hdfs_config.setter
    def hdfs_config(self, hdfs_config):
        """Sets the hdfs_config of this HostRegister.


        :param hdfs_config: The hdfs_config of this HostRegister.
        :type hdfs_config: HdfsConfig
        """

        self._hdfs_config = hdfs_config

    @property
    def hostname(self):
        """Gets the hostname of this HostRegister.


        :return: The hostname of this HostRegister.
        :rtype: str
        """
        return self._hostname

    @hostname.setter
    def hostname(self, hostname):
        """Sets the hostname of this HostRegister.


        :param hostname: The hostname of this HostRegister.
        :type hostname: str
        """
        if hostname is None:
            raise ValueError("Invalid value for `hostname`, must not be `None`")

        self._hostname = hostname

    @property
    def is_oracle_host(self):
        """Gets the is_oracle_host of this HostRegister.

        A Boolean that specifies whether to discover Oracle information at registration. A value of 'true' discovers Oracle information at registration. 

        :return: The is_oracle_host of this HostRegister.
        :rtype: bool
        """
        return self._is_oracle_host

    @is_oracle_host.setter
    def is_oracle_host(self, is_oracle_host):
        """Sets the is_oracle_host of this HostRegister.

        A Boolean that specifies whether to discover Oracle information at registration. A value of 'true' discovers Oracle information at registration. 

        :param is_oracle_host: The is_oracle_host of this HostRegister.
        :type is_oracle_host: bool
        """

        self._is_oracle_host = is_oracle_host

    @property
    def nas_config(self):
        """Gets the nas_config of this HostRegister.


        :return: The nas_config of this HostRegister.
        :rtype: NasConfig
        """
        return self._nas_config

    @nas_config.setter
    def nas_config(self, nas_config):
        """Sets the nas_config of this HostRegister.


        :param nas_config: The nas_config of this HostRegister.
        :type nas_config: NasConfig
        """

        self._nas_config = nas_config

    @property
    def oracle_query_user(self):
        """Gets the oracle_query_user of this HostRegister.

        Specifies the Oracle username for an account with query privileges. The account must have query privileges for a specified Oracle installation to enable Oracle discovery queries for that installation. 

        :return: The oracle_query_user of this HostRegister.
        :rtype: str
        """
        return self._oracle_query_user

    @oracle_query_user.setter
    def oracle_query_user(self, oracle_query_user):
        """Sets the oracle_query_user of this HostRegister.

        Specifies the Oracle username for an account with query privileges. The account must have query privileges for a specified Oracle installation to enable Oracle discovery queries for that installation. 

        :param oracle_query_user: The oracle_query_user of this HostRegister.
        :type oracle_query_user: str
        """

        self._oracle_query_user = oracle_query_user

    @property
    def oracle_sys_dba_user(self):
        """Gets the oracle_sys_dba_user of this HostRegister.

        Specifies the Oracle username for an account with sysdba privileges. The account must have sysdba privileges for a specified Oracle installation to enable Oracle discovery queries for that installation. This field overrides the configured global sysdba user for the specified Oracle installation.

        :return: The oracle_sys_dba_user of this HostRegister.
        :rtype: str
        """
        return self._oracle_sys_dba_user

    @oracle_sys_dba_user.setter
    def oracle_sys_dba_user(self, oracle_sys_dba_user):
        """Sets the oracle_sys_dba_user of this HostRegister.

        Specifies the Oracle username for an account with sysdba privileges. The account must have sysdba privileges for a specified Oracle installation to enable Oracle discovery queries for that installation. This field overrides the configured global sysdba user for the specified Oracle installation.

        :param oracle_sys_dba_user: The oracle_sys_dba_user of this HostRegister.
        :type oracle_sys_dba_user: str
        """

        self._oracle_sys_dba_user = oracle_sys_dba_user

    @property
    def organization_id(self):
        """Gets the organization_id of this HostRegister.

        The ID of the organization to which the host is assigned.

        :return: The organization_id of this HostRegister.
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """Sets the organization_id of this HostRegister.

        The ID of the organization to which the host is assigned.

        :param organization_id: The organization_id of this HostRegister.
        :type organization_id: str
        """

        self._organization_id = organization_id
