# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class OracleAcoParameterList(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, parameters: List[str]=None):
        """OracleAcoParameterList - a model defined in OpenAPI

        :param parameters: The parameters of this OracleAcoParameterList.
        """
        self.openapi_types = {
            'parameters': List[str]
        }

        self.attribute_map = {
            'parameters': 'parameters'
        }

        self._parameters = parameters

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OracleAcoParameterList':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OracleAcoParameterList of this OracleAcoParameterList.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def parameters(self):
        """Gets the parameters of this OracleAcoParameterList.

        An array that contains the supported Advanced Cloning Options (ACO) parameters.

        :return: The parameters of this OracleAcoParameterList.
        :rtype: List[str]
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this OracleAcoParameterList.

        An array that contains the supported Advanced Cloning Options (ACO) parameters.

        :param parameters: The parameters of this OracleAcoParameterList.
        :type parameters: List[str]
        """
        if parameters is None:
            raise ValueError("Invalid value for `parameters`, must not be `None`")

        self._parameters = parameters
