# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.vmware_recoverable_range import VmwareRecoverableRange
from openapi_server import util


class VmwareVmRecoverableRanges(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, recoverable_ranges: List[VmwareRecoverableRange]=None, vm_id: str=None):
        """VmwareVmRecoverableRanges - a model defined in OpenAPI

        :param recoverable_ranges: The recoverable_ranges of this VmwareVmRecoverableRanges.
        :param vm_id: The vm_id of this VmwareVmRecoverableRanges.
        """
        self.openapi_types = {
            'recoverable_ranges': List[VmwareRecoverableRange],
            'vm_id': str
        }

        self.attribute_map = {
            'recoverable_ranges': 'recoverableRanges',
            'vm_id': 'vmId'
        }

        self._recoverable_ranges = recoverable_ranges
        self._vm_id = vm_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VmwareVmRecoverableRanges':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VmwareVmRecoverableRanges of this VmwareVmRecoverableRanges.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def recoverable_ranges(self):
        """Gets the recoverable_ranges of this VmwareVmRecoverableRanges.

        The recoverable ranges for the virtual machine.

        :return: The recoverable_ranges of this VmwareVmRecoverableRanges.
        :rtype: List[VmwareRecoverableRange]
        """
        return self._recoverable_ranges

    @recoverable_ranges.setter
    def recoverable_ranges(self, recoverable_ranges):
        """Sets the recoverable_ranges of this VmwareVmRecoverableRanges.

        The recoverable ranges for the virtual machine.

        :param recoverable_ranges: The recoverable_ranges of this VmwareVmRecoverableRanges.
        :type recoverable_ranges: List[VmwareRecoverableRange]
        """
        if recoverable_ranges is None:
            raise ValueError("Invalid value for `recoverable_ranges`, must not be `None`")

        self._recoverable_ranges = recoverable_ranges

    @property
    def vm_id(self):
        """Gets the vm_id of this VmwareVmRecoverableRanges.

        The ID of the virtual machine for which to retrieve recoverable ranges.

        :return: The vm_id of this VmwareVmRecoverableRanges.
        :rtype: str
        """
        return self._vm_id

    @vm_id.setter
    def vm_id(self, vm_id):
        """Sets the vm_id of this VmwareVmRecoverableRanges.

        The ID of the virtual machine for which to retrieve recoverable ranges.

        :param vm_id: The vm_id of this VmwareVmRecoverableRanges.
        :type vm_id: str
        """
        if vm_id is None:
            raise ValueError("Invalid value for `vm_id`, must not be `None`")

        self._vm_id = vm_id
