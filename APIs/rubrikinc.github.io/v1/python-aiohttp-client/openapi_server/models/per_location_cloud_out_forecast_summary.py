# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.cloud_out_compute_forecast_summaries import CloudOutComputeForecastSummaries
from openapi_server.models.cloud_out_storage_forecast_summaries import CloudOutStorageForecastSummaries
from openapi_server import util


class PerLocationCloudOutForecastSummary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, compute_forecast: CloudOutComputeForecastSummaries=None, instance_type: str=None, location_name: str=None, location_region: str=None, location_type: str=None, storage_forecast: CloudOutStorageForecastSummaries=None):
        """PerLocationCloudOutForecastSummary - a model defined in OpenAPI

        :param compute_forecast: The compute_forecast of this PerLocationCloudOutForecastSummary.
        :param instance_type: The instance_type of this PerLocationCloudOutForecastSummary.
        :param location_name: The location_name of this PerLocationCloudOutForecastSummary.
        :param location_region: The location_region of this PerLocationCloudOutForecastSummary.
        :param location_type: The location_type of this PerLocationCloudOutForecastSummary.
        :param storage_forecast: The storage_forecast of this PerLocationCloudOutForecastSummary.
        """
        self.openapi_types = {
            'compute_forecast': CloudOutComputeForecastSummaries,
            'instance_type': str,
            'location_name': str,
            'location_region': str,
            'location_type': str,
            'storage_forecast': CloudOutStorageForecastSummaries
        }

        self.attribute_map = {
            'compute_forecast': 'computeForecast',
            'instance_type': 'instanceType',
            'location_name': 'locationName',
            'location_region': 'locationRegion',
            'location_type': 'locationType',
            'storage_forecast': 'storageForecast'
        }

        self._compute_forecast = compute_forecast
        self._instance_type = instance_type
        self._location_name = location_name
        self._location_region = location_region
        self._location_type = location_type
        self._storage_forecast = storage_forecast

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PerLocationCloudOutForecastSummary':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PerLocationCloudOutForecastSummary of this PerLocationCloudOutForecastSummary.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def compute_forecast(self):
        """Gets the compute_forecast of this PerLocationCloudOutForecastSummary.


        :return: The compute_forecast of this PerLocationCloudOutForecastSummary.
        :rtype: CloudOutComputeForecastSummaries
        """
        return self._compute_forecast

    @compute_forecast.setter
    def compute_forecast(self, compute_forecast):
        """Sets the compute_forecast of this PerLocationCloudOutForecastSummary.


        :param compute_forecast: The compute_forecast of this PerLocationCloudOutForecastSummary.
        :type compute_forecast: CloudOutComputeForecastSummaries
        """

        self._compute_forecast = compute_forecast

    @property
    def instance_type(self):
        """Gets the instance_type of this PerLocationCloudOutForecastSummary.

        Type of compute instance used at the cloud archival location.

        :return: The instance_type of this PerLocationCloudOutForecastSummary.
        :rtype: str
        """
        return self._instance_type

    @instance_type.setter
    def instance_type(self, instance_type):
        """Sets the instance_type of this PerLocationCloudOutForecastSummary.

        Type of compute instance used at the cloud archival location.

        :param instance_type: The instance_type of this PerLocationCloudOutForecastSummary.
        :type instance_type: str
        """

        self._instance_type = instance_type

    @property
    def location_name(self):
        """Gets the location_name of this PerLocationCloudOutForecastSummary.

        Name of the cloud archival location.

        :return: The location_name of this PerLocationCloudOutForecastSummary.
        :rtype: str
        """
        return self._location_name

    @location_name.setter
    def location_name(self, location_name):
        """Sets the location_name of this PerLocationCloudOutForecastSummary.

        Name of the cloud archival location.

        :param location_name: The location_name of this PerLocationCloudOutForecastSummary.
        :type location_name: str
        """
        if location_name is None:
            raise ValueError("Invalid value for `location_name`, must not be `None`")

        self._location_name = location_name

    @property
    def location_region(self):
        """Gets the location_region of this PerLocationCloudOutForecastSummary.

        Region of the cloud archival location.

        :return: The location_region of this PerLocationCloudOutForecastSummary.
        :rtype: str
        """
        return self._location_region

    @location_region.setter
    def location_region(self, location_region):
        """Sets the location_region of this PerLocationCloudOutForecastSummary.

        Region of the cloud archival location.

        :param location_region: The location_region of this PerLocationCloudOutForecastSummary.
        :type location_region: str
        """

        self._location_region = location_region

    @property
    def location_type(self):
        """Gets the location_type of this PerLocationCloudOutForecastSummary.

        Type of cloud archival location.

        :return: The location_type of this PerLocationCloudOutForecastSummary.
        :rtype: str
        """
        return self._location_type

    @location_type.setter
    def location_type(self, location_type):
        """Sets the location_type of this PerLocationCloudOutForecastSummary.

        Type of cloud archival location.

        :param location_type: The location_type of this PerLocationCloudOutForecastSummary.
        :type location_type: str
        """
        if location_type is None:
            raise ValueError("Invalid value for `location_type`, must not be `None`")

        self._location_type = location_type

    @property
    def storage_forecast(self):
        """Gets the storage_forecast of this PerLocationCloudOutForecastSummary.


        :return: The storage_forecast of this PerLocationCloudOutForecastSummary.
        :rtype: CloudOutStorageForecastSummaries
        """
        return self._storage_forecast

    @storage_forecast.setter
    def storage_forecast(self, storage_forecast):
        """Sets the storage_forecast of this PerLocationCloudOutForecastSummary.


        :param storage_forecast: The storage_forecast of this PerLocationCloudOutForecastSummary.
        :type storage_forecast: CloudOutStorageForecastSummaries
        """
        if storage_forecast is None:
            raise ValueError("Invalid value for `storage_forecast`, must not be `None`")

        self._storage_forecast = storage_forecast
