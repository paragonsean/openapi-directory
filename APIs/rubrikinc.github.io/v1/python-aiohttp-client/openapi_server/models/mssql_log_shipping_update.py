# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.mssql_log_shipping_ok_state import MssqlLogShippingOkState
from openapi_server import util


class MssqlLogShippingUpdate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, should_disconnect_standby_users: bool=None, state: MssqlLogShippingOkState=None):
        """MssqlLogShippingUpdate - a model defined in OpenAPI

        :param should_disconnect_standby_users: The should_disconnect_standby_users of this MssqlLogShippingUpdate.
        :param state: The state of this MssqlLogShippingUpdate.
        """
        self.openapi_types = {
            'should_disconnect_standby_users': bool,
            'state': MssqlLogShippingOkState
        }

        self.attribute_map = {
            'should_disconnect_standby_users': 'shouldDisconnectStandbyUsers',
            'state': 'state'
        }

        self._should_disconnect_standby_users = should_disconnect_standby_users
        self._state = state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MssqlLogShippingUpdate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MssqlLogShippingUpdate of this MssqlLogShippingUpdate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def should_disconnect_standby_users(self):
        """Gets the should_disconnect_standby_users of this MssqlLogShippingUpdate.

        Specifies whether to automatically disconnect users from a secondary database in standby mode when a restore operation is performed. If this value is set to false and users remain connected, any scheduled restore operations fail. If the \"state\" field is `RESTORING`, this value can be omitted and is ignored.

        :return: The should_disconnect_standby_users of this MssqlLogShippingUpdate.
        :rtype: bool
        """
        return self._should_disconnect_standby_users

    @should_disconnect_standby_users.setter
    def should_disconnect_standby_users(self, should_disconnect_standby_users):
        """Sets the should_disconnect_standby_users of this MssqlLogShippingUpdate.

        Specifies whether to automatically disconnect users from a secondary database in standby mode when a restore operation is performed. If this value is set to false and users remain connected, any scheduled restore operations fail. If the \"state\" field is `RESTORING`, this value can be omitted and is ignored.

        :param should_disconnect_standby_users: The should_disconnect_standby_users of this MssqlLogShippingUpdate.
        :type should_disconnect_standby_users: bool
        """

        self._should_disconnect_standby_users = should_disconnect_standby_users

    @property
    def state(self):
        """Gets the state of this MssqlLogShippingUpdate.


        :return: The state of this MssqlLogShippingUpdate.
        :rtype: MssqlLogShippingOkState
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this MssqlLogShippingUpdate.


        :param state: The state of this MssqlLogShippingUpdate.
        :type state: MssqlLogShippingOkState
        """
        if state is None:
            raise ValueError("Invalid value for `state`, must not be `None`")

        self._state = state
