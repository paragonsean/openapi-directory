# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EventNotification(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, event: str=None, time: datetime=None):
        """EventNotification - a model defined in OpenAPI

        :param event: The event of this EventNotification.
        :param time: The time of this EventNotification.
        """
        self.openapi_types = {
            'event': str,
            'time': datetime
        }

        self.attribute_map = {
            'event': 'event',
            'time': 'time'
        }

        self._event = event
        self._time = time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EventNotification':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EventNotification of this EventNotification.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def event(self):
        """Gets the event of this EventNotification.

        An event name.

        :return: The event of this EventNotification.
        :rtype: str
        """
        return self._event

    @event.setter
    def event(self, event):
        """Sets the event of this EventNotification.

        An event name.

        :param event: The event of this EventNotification.
        :type event: str
        """
        allowed_values = ["upgradeStart", "periodicPrechecks", "stageCdmSoftware"]  # noqa: E501
        if event not in allowed_values:
            raise ValueError(
                "Invalid value for `event` ({0}), must be one of {1}"
                .format(event, allowed_values)
            )

        self._event = event

    @property
    def time(self):
        """Gets the time of this EventNotification.

        Timestamp of the event in ISO8601 format.

        :return: The time of this EventNotification.
        :rtype: datetime
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this EventNotification.

        Timestamp of the event in ISO8601 format.

        :param time: The time of this EventNotification.
        :type time: datetime
        """
        if time is None:
            raise ValueError("Invalid value for `time`, must not be `None`")

        self._time = time
