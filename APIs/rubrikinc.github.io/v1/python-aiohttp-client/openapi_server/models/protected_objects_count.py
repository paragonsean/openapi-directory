# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ProtectedObjectsCount(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, num_do_not_protect: int=None, num_no_sla: int=None, num_protected: int=None, num_total: int=None):
        """ProtectedObjectsCount - a model defined in OpenAPI

        :param num_do_not_protect: The num_do_not_protect of this ProtectedObjectsCount.
        :param num_no_sla: The num_no_sla of this ProtectedObjectsCount.
        :param num_protected: The num_protected of this ProtectedObjectsCount.
        :param num_total: The num_total of this ProtectedObjectsCount.
        """
        self.openapi_types = {
            'num_do_not_protect': int,
            'num_no_sla': int,
            'num_protected': int,
            'num_total': int
        }

        self.attribute_map = {
            'num_do_not_protect': 'numDoNotProtect',
            'num_no_sla': 'numNoSla',
            'num_protected': 'numProtected',
            'num_total': 'numTotal'
        }

        self._num_do_not_protect = num_do_not_protect
        self._num_no_sla = num_no_sla
        self._num_protected = num_protected
        self._num_total = num_total

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProtectedObjectsCount':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ProtectedObjectsCount of this ProtectedObjectsCount.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def num_do_not_protect(self):
        """Gets the num_do_not_protect of this ProtectedObjectsCount.


        :return: The num_do_not_protect of this ProtectedObjectsCount.
        :rtype: int
        """
        return self._num_do_not_protect

    @num_do_not_protect.setter
    def num_do_not_protect(self, num_do_not_protect):
        """Sets the num_do_not_protect of this ProtectedObjectsCount.


        :param num_do_not_protect: The num_do_not_protect of this ProtectedObjectsCount.
        :type num_do_not_protect: int
        """

        self._num_do_not_protect = num_do_not_protect

    @property
    def num_no_sla(self):
        """Gets the num_no_sla of this ProtectedObjectsCount.


        :return: The num_no_sla of this ProtectedObjectsCount.
        :rtype: int
        """
        return self._num_no_sla

    @num_no_sla.setter
    def num_no_sla(self, num_no_sla):
        """Sets the num_no_sla of this ProtectedObjectsCount.


        :param num_no_sla: The num_no_sla of this ProtectedObjectsCount.
        :type num_no_sla: int
        """

        self._num_no_sla = num_no_sla

    @property
    def num_protected(self):
        """Gets the num_protected of this ProtectedObjectsCount.


        :return: The num_protected of this ProtectedObjectsCount.
        :rtype: int
        """
        return self._num_protected

    @num_protected.setter
    def num_protected(self, num_protected):
        """Sets the num_protected of this ProtectedObjectsCount.


        :param num_protected: The num_protected of this ProtectedObjectsCount.
        :type num_protected: int
        """
        if num_protected is None:
            raise ValueError("Invalid value for `num_protected`, must not be `None`")

        self._num_protected = num_protected

    @property
    def num_total(self):
        """Gets the num_total of this ProtectedObjectsCount.


        :return: The num_total of this ProtectedObjectsCount.
        :rtype: int
        """
        return self._num_total

    @num_total.setter
    def num_total(self, num_total):
        """Sets the num_total of this ProtectedObjectsCount.


        :param num_total: The num_total of this ProtectedObjectsCount.
        :type num_total: int
        """
        if num_total is None:
            raise ValueError("Invalid value for `num_total`, must not be `None`")

        self._num_total = num_total
