# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.base_guest_credential import BaseGuestCredential
from openapi_server.models.cloud_instantiation_spec import CloudInstantiationSpec
from openapi_server.models.virtual_machine_script_detail import VirtualMachineScriptDetail
from openapi_server.models.vmware_adaptive_throttling_settings import VmwareAdaptiveThrottlingSettings
from openapi_server import util


class VirtualMachineUpdateWithSecret(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cloud_instantiation_spec: CloudInstantiationSpec=None, configured_sla_domain_id: str=None, is_array_integration_enabled: bool=None, is_vm_paused: bool=None, max_nested_vsphere_snapshots: int=None, post_backup_script: VirtualMachineScriptDetail=None, post_snap_script: VirtualMachineScriptDetail=None, pre_backup_script: VirtualMachineScriptDetail=None, snapshot_consistency_mandate: str=None, throttling_settings: VmwareAdaptiveThrottlingSettings=None, guest_credential: BaseGuestCredential=None, should_refresh_cache_after_update: bool=None):
        """VirtualMachineUpdateWithSecret - a model defined in OpenAPI

        :param cloud_instantiation_spec: The cloud_instantiation_spec of this VirtualMachineUpdateWithSecret.
        :param configured_sla_domain_id: The configured_sla_domain_id of this VirtualMachineUpdateWithSecret.
        :param is_array_integration_enabled: The is_array_integration_enabled of this VirtualMachineUpdateWithSecret.
        :param is_vm_paused: The is_vm_paused of this VirtualMachineUpdateWithSecret.
        :param max_nested_vsphere_snapshots: The max_nested_vsphere_snapshots of this VirtualMachineUpdateWithSecret.
        :param post_backup_script: The post_backup_script of this VirtualMachineUpdateWithSecret.
        :param post_snap_script: The post_snap_script of this VirtualMachineUpdateWithSecret.
        :param pre_backup_script: The pre_backup_script of this VirtualMachineUpdateWithSecret.
        :param snapshot_consistency_mandate: The snapshot_consistency_mandate of this VirtualMachineUpdateWithSecret.
        :param throttling_settings: The throttling_settings of this VirtualMachineUpdateWithSecret.
        :param guest_credential: The guest_credential of this VirtualMachineUpdateWithSecret.
        :param should_refresh_cache_after_update: The should_refresh_cache_after_update of this VirtualMachineUpdateWithSecret.
        """
        self.openapi_types = {
            'cloud_instantiation_spec': CloudInstantiationSpec,
            'configured_sla_domain_id': str,
            'is_array_integration_enabled': bool,
            'is_vm_paused': bool,
            'max_nested_vsphere_snapshots': int,
            'post_backup_script': VirtualMachineScriptDetail,
            'post_snap_script': VirtualMachineScriptDetail,
            'pre_backup_script': VirtualMachineScriptDetail,
            'snapshot_consistency_mandate': str,
            'throttling_settings': VmwareAdaptiveThrottlingSettings,
            'guest_credential': BaseGuestCredential,
            'should_refresh_cache_after_update': bool
        }

        self.attribute_map = {
            'cloud_instantiation_spec': 'cloudInstantiationSpec',
            'configured_sla_domain_id': 'configuredSlaDomainId',
            'is_array_integration_enabled': 'isArrayIntegrationEnabled',
            'is_vm_paused': 'isVmPaused',
            'max_nested_vsphere_snapshots': 'maxNestedVsphereSnapshots',
            'post_backup_script': 'postBackupScript',
            'post_snap_script': 'postSnapScript',
            'pre_backup_script': 'preBackupScript',
            'snapshot_consistency_mandate': 'snapshotConsistencyMandate',
            'throttling_settings': 'throttlingSettings',
            'guest_credential': 'guestCredential',
            'should_refresh_cache_after_update': 'shouldRefreshCacheAfterUpdate'
        }

        self._cloud_instantiation_spec = cloud_instantiation_spec
        self._configured_sla_domain_id = configured_sla_domain_id
        self._is_array_integration_enabled = is_array_integration_enabled
        self._is_vm_paused = is_vm_paused
        self._max_nested_vsphere_snapshots = max_nested_vsphere_snapshots
        self._post_backup_script = post_backup_script
        self._post_snap_script = post_snap_script
        self._pre_backup_script = pre_backup_script
        self._snapshot_consistency_mandate = snapshot_consistency_mandate
        self._throttling_settings = throttling_settings
        self._guest_credential = guest_credential
        self._should_refresh_cache_after_update = should_refresh_cache_after_update

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VirtualMachineUpdateWithSecret':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VirtualMachineUpdateWithSecret of this VirtualMachineUpdateWithSecret.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cloud_instantiation_spec(self):
        """Gets the cloud_instantiation_spec of this VirtualMachineUpdateWithSecret.


        :return: The cloud_instantiation_spec of this VirtualMachineUpdateWithSecret.
        :rtype: CloudInstantiationSpec
        """
        return self._cloud_instantiation_spec

    @cloud_instantiation_spec.setter
    def cloud_instantiation_spec(self, cloud_instantiation_spec):
        """Sets the cloud_instantiation_spec of this VirtualMachineUpdateWithSecret.


        :param cloud_instantiation_spec: The cloud_instantiation_spec of this VirtualMachineUpdateWithSecret.
        :type cloud_instantiation_spec: CloudInstantiationSpec
        """

        self._cloud_instantiation_spec = cloud_instantiation_spec

    @property
    def configured_sla_domain_id(self):
        """Gets the configured_sla_domain_id of this VirtualMachineUpdateWithSecret.

        Assign this VM to the given SLA domain. Existing snapshots of the object will be retained with the configuration of specified SLA Domain.

        :return: The configured_sla_domain_id of this VirtualMachineUpdateWithSecret.
        :rtype: str
        """
        return self._configured_sla_domain_id

    @configured_sla_domain_id.setter
    def configured_sla_domain_id(self, configured_sla_domain_id):
        """Sets the configured_sla_domain_id of this VirtualMachineUpdateWithSecret.

        Assign this VM to the given SLA domain. Existing snapshots of the object will be retained with the configuration of specified SLA Domain.

        :param configured_sla_domain_id: The configured_sla_domain_id of this VirtualMachineUpdateWithSecret.
        :type configured_sla_domain_id: str
        """

        self._configured_sla_domain_id = configured_sla_domain_id

    @property
    def is_array_integration_enabled(self):
        """Gets the is_array_integration_enabled of this VirtualMachineUpdateWithSecret.

        User setting to dictate whether to use storage array snaphots for ingest. This setting only makes sense for VMs where array based ingest is possible.

        :return: The is_array_integration_enabled of this VirtualMachineUpdateWithSecret.
        :rtype: bool
        """
        return self._is_array_integration_enabled

    @is_array_integration_enabled.setter
    def is_array_integration_enabled(self, is_array_integration_enabled):
        """Sets the is_array_integration_enabled of this VirtualMachineUpdateWithSecret.

        User setting to dictate whether to use storage array snaphots for ingest. This setting only makes sense for VMs where array based ingest is possible.

        :param is_array_integration_enabled: The is_array_integration_enabled of this VirtualMachineUpdateWithSecret.
        :type is_array_integration_enabled: bool
        """

        self._is_array_integration_enabled = is_array_integration_enabled

    @property
    def is_vm_paused(self):
        """Gets the is_vm_paused of this VirtualMachineUpdateWithSecret.

        Whether to pause or resume backups/archival for this VM.

        :return: The is_vm_paused of this VirtualMachineUpdateWithSecret.
        :rtype: bool
        """
        return self._is_vm_paused

    @is_vm_paused.setter
    def is_vm_paused(self, is_vm_paused):
        """Sets the is_vm_paused of this VirtualMachineUpdateWithSecret.

        Whether to pause or resume backups/archival for this VM.

        :param is_vm_paused: The is_vm_paused of this VirtualMachineUpdateWithSecret.
        :type is_vm_paused: bool
        """

        self._is_vm_paused = is_vm_paused

    @property
    def max_nested_vsphere_snapshots(self):
        """Gets the max_nested_vsphere_snapshots of this VirtualMachineUpdateWithSecret.


        :return: The max_nested_vsphere_snapshots of this VirtualMachineUpdateWithSecret.
        :rtype: int
        """
        return self._max_nested_vsphere_snapshots

    @max_nested_vsphere_snapshots.setter
    def max_nested_vsphere_snapshots(self, max_nested_vsphere_snapshots):
        """Sets the max_nested_vsphere_snapshots of this VirtualMachineUpdateWithSecret.


        :param max_nested_vsphere_snapshots: The max_nested_vsphere_snapshots of this VirtualMachineUpdateWithSecret.
        :type max_nested_vsphere_snapshots: int
        """

        self._max_nested_vsphere_snapshots = max_nested_vsphere_snapshots

    @property
    def post_backup_script(self):
        """Gets the post_backup_script of this VirtualMachineUpdateWithSecret.


        :return: The post_backup_script of this VirtualMachineUpdateWithSecret.
        :rtype: VirtualMachineScriptDetail
        """
        return self._post_backup_script

    @post_backup_script.setter
    def post_backup_script(self, post_backup_script):
        """Sets the post_backup_script of this VirtualMachineUpdateWithSecret.


        :param post_backup_script: The post_backup_script of this VirtualMachineUpdateWithSecret.
        :type post_backup_script: VirtualMachineScriptDetail
        """

        self._post_backup_script = post_backup_script

    @property
    def post_snap_script(self):
        """Gets the post_snap_script of this VirtualMachineUpdateWithSecret.


        :return: The post_snap_script of this VirtualMachineUpdateWithSecret.
        :rtype: VirtualMachineScriptDetail
        """
        return self._post_snap_script

    @post_snap_script.setter
    def post_snap_script(self, post_snap_script):
        """Sets the post_snap_script of this VirtualMachineUpdateWithSecret.


        :param post_snap_script: The post_snap_script of this VirtualMachineUpdateWithSecret.
        :type post_snap_script: VirtualMachineScriptDetail
        """

        self._post_snap_script = post_snap_script

    @property
    def pre_backup_script(self):
        """Gets the pre_backup_script of this VirtualMachineUpdateWithSecret.


        :return: The pre_backup_script of this VirtualMachineUpdateWithSecret.
        :rtype: VirtualMachineScriptDetail
        """
        return self._pre_backup_script

    @pre_backup_script.setter
    def pre_backup_script(self, pre_backup_script):
        """Sets the pre_backup_script of this VirtualMachineUpdateWithSecret.


        :param pre_backup_script: The pre_backup_script of this VirtualMachineUpdateWithSecret.
        :type pre_backup_script: VirtualMachineScriptDetail
        """

        self._pre_backup_script = pre_backup_script

    @property
    def snapshot_consistency_mandate(self):
        """Gets the snapshot_consistency_mandate of this VirtualMachineUpdateWithSecret.

        Consistency level mandated for this VM or empty string for none.

        :return: The snapshot_consistency_mandate of this VirtualMachineUpdateWithSecret.
        :rtype: str
        """
        return self._snapshot_consistency_mandate

    @snapshot_consistency_mandate.setter
    def snapshot_consistency_mandate(self, snapshot_consistency_mandate):
        """Sets the snapshot_consistency_mandate of this VirtualMachineUpdateWithSecret.

        Consistency level mandated for this VM or empty string for none.

        :param snapshot_consistency_mandate: The snapshot_consistency_mandate of this VirtualMachineUpdateWithSecret.
        :type snapshot_consistency_mandate: str
        """
        allowed_values = ["UNKNOWN", "INCONSISTENT", "CRASH_CONSISTENT", "FILE_SYSTEM_CONSISTENT", "VSS_CONSISTENT", "APP_CONSISTENT"]  # noqa: E501
        if snapshot_consistency_mandate not in allowed_values:
            raise ValueError(
                "Invalid value for `snapshot_consistency_mandate` ({0}), must be one of {1}"
                .format(snapshot_consistency_mandate, allowed_values)
            )

        self._snapshot_consistency_mandate = snapshot_consistency_mandate

    @property
    def throttling_settings(self):
        """Gets the throttling_settings of this VirtualMachineUpdateWithSecret.


        :return: The throttling_settings of this VirtualMachineUpdateWithSecret.
        :rtype: VmwareAdaptiveThrottlingSettings
        """
        return self._throttling_settings

    @throttling_settings.setter
    def throttling_settings(self, throttling_settings):
        """Sets the throttling_settings of this VirtualMachineUpdateWithSecret.


        :param throttling_settings: The throttling_settings of this VirtualMachineUpdateWithSecret.
        :type throttling_settings: VmwareAdaptiveThrottlingSettings
        """

        self._throttling_settings = throttling_settings

    @property
    def guest_credential(self):
        """Gets the guest_credential of this VirtualMachineUpdateWithSecret.


        :return: The guest_credential of this VirtualMachineUpdateWithSecret.
        :rtype: BaseGuestCredential
        """
        return self._guest_credential

    @guest_credential.setter
    def guest_credential(self, guest_credential):
        """Sets the guest_credential of this VirtualMachineUpdateWithSecret.


        :param guest_credential: The guest_credential of this VirtualMachineUpdateWithSecret.
        :type guest_credential: BaseGuestCredential
        """

        self._guest_credential = guest_credential

    @property
    def should_refresh_cache_after_update(self):
        """Gets the should_refresh_cache_after_update of this VirtualMachineUpdateWithSecret.

        A boolean value that specifies whether an update also refreshes the in-memory cache. When 'false' updates do not refresh the in-memory cache. When 'true' updates refresh the in-memory cache. By default, this value is 'true'. Setting this value to 'false' reduces the time required for updates to complete.

        :return: The should_refresh_cache_after_update of this VirtualMachineUpdateWithSecret.
        :rtype: bool
        """
        return self._should_refresh_cache_after_update

    @should_refresh_cache_after_update.setter
    def should_refresh_cache_after_update(self, should_refresh_cache_after_update):
        """Sets the should_refresh_cache_after_update of this VirtualMachineUpdateWithSecret.

        A boolean value that specifies whether an update also refreshes the in-memory cache. When 'false' updates do not refresh the in-memory cache. When 'true' updates refresh the in-memory cache. By default, this value is 'true'. Setting this value to 'false' reduces the time required for updates to complete.

        :param should_refresh_cache_after_update: The should_refresh_cache_after_update of this VirtualMachineUpdateWithSecret.
        :type should_refresh_cache_after_update: bool
        """

        self._should_refresh_cache_after_update = should_refresh_cache_after_update
