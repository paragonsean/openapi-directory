# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.hdfs_base_config import HdfsBaseConfig
from openapi_server.models.mssql_cbt_effective_status_type import MssqlCbtEffectiveStatusType
from openapi_server.models.mssql_cbt_status_type import MssqlCbtStatusType
from openapi_server.models.nas_base_config import NasBaseConfig
from openapi_server import util


class HostSummary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, alias: str=None, hdfs_base_config: HdfsBaseConfig=None, hostname: str=None, id: str=None, mssql_cbt_effective_status: MssqlCbtEffectiveStatusType=None, mssql_cbt_enabled: MssqlCbtStatusType=None, name: str=None, nas_base_config: NasBaseConfig=None, operating_system: str=None, operating_system_type: str=None, organization_id: str=None, organization_name: str=None, primary_cluster_id: str=None, status: str=None):
        """HostSummary - a model defined in OpenAPI

        :param alias: The alias of this HostSummary.
        :param hdfs_base_config: The hdfs_base_config of this HostSummary.
        :param hostname: The hostname of this HostSummary.
        :param id: The id of this HostSummary.
        :param mssql_cbt_effective_status: The mssql_cbt_effective_status of this HostSummary.
        :param mssql_cbt_enabled: The mssql_cbt_enabled of this HostSummary.
        :param name: The name of this HostSummary.
        :param nas_base_config: The nas_base_config of this HostSummary.
        :param operating_system: The operating_system of this HostSummary.
        :param operating_system_type: The operating_system_type of this HostSummary.
        :param organization_id: The organization_id of this HostSummary.
        :param organization_name: The organization_name of this HostSummary.
        :param primary_cluster_id: The primary_cluster_id of this HostSummary.
        :param status: The status of this HostSummary.
        """
        self.openapi_types = {
            'alias': str,
            'hdfs_base_config': HdfsBaseConfig,
            'hostname': str,
            'id': str,
            'mssql_cbt_effective_status': MssqlCbtEffectiveStatusType,
            'mssql_cbt_enabled': MssqlCbtStatusType,
            'name': str,
            'nas_base_config': NasBaseConfig,
            'operating_system': str,
            'operating_system_type': str,
            'organization_id': str,
            'organization_name': str,
            'primary_cluster_id': str,
            'status': str
        }

        self.attribute_map = {
            'alias': 'alias',
            'hdfs_base_config': 'hdfsBaseConfig',
            'hostname': 'hostname',
            'id': 'id',
            'mssql_cbt_effective_status': 'mssqlCbtEffectiveStatus',
            'mssql_cbt_enabled': 'mssqlCbtEnabled',
            'name': 'name',
            'nas_base_config': 'nasBaseConfig',
            'operating_system': 'operatingSystem',
            'operating_system_type': 'operatingSystemType',
            'organization_id': 'organizationId',
            'organization_name': 'organizationName',
            'primary_cluster_id': 'primaryClusterId',
            'status': 'status'
        }

        self._alias = alias
        self._hdfs_base_config = hdfs_base_config
        self._hostname = hostname
        self._id = id
        self._mssql_cbt_effective_status = mssql_cbt_effective_status
        self._mssql_cbt_enabled = mssql_cbt_enabled
        self._name = name
        self._nas_base_config = nas_base_config
        self._operating_system = operating_system
        self._operating_system_type = operating_system_type
        self._organization_id = organization_id
        self._organization_name = organization_name
        self._primary_cluster_id = primary_cluster_id
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'HostSummary':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The HostSummary of this HostSummary.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def alias(self):
        """Gets the alias of this HostSummary.

        A user-specified string that returns this host in searches.

        :return: The alias of this HostSummary.
        :rtype: str
        """
        return self._alias

    @alias.setter
    def alias(self, alias):
        """Sets the alias of this HostSummary.

        A user-specified string that returns this host in searches.

        :param alias: The alias of this HostSummary.
        :type alias: str
        """

        self._alias = alias

    @property
    def hdfs_base_config(self):
        """Gets the hdfs_base_config of this HostSummary.


        :return: The hdfs_base_config of this HostSummary.
        :rtype: HdfsBaseConfig
        """
        return self._hdfs_base_config

    @hdfs_base_config.setter
    def hdfs_base_config(self, hdfs_base_config):
        """Sets the hdfs_base_config of this HostSummary.


        :param hdfs_base_config: The hdfs_base_config of this HostSummary.
        :type hdfs_base_config: HdfsBaseConfig
        """

        self._hdfs_base_config = hdfs_base_config

    @property
    def hostname(self):
        """Gets the hostname of this HostSummary.

        Deprecated. Please use 'name' instead.

        :return: The hostname of this HostSummary.
        :rtype: str
        """
        return self._hostname

    @hostname.setter
    def hostname(self, hostname):
        """Sets the hostname of this HostSummary.

        Deprecated. Please use 'name' instead.

        :param hostname: The hostname of this HostSummary.
        :type hostname: str
        """
        if hostname is None:
            raise ValueError("Invalid value for `hostname`, must not be `None`")

        self._hostname = hostname

    @property
    def id(self):
        """Gets the id of this HostSummary.

        Unique identifier for host.

        :return: The id of this HostSummary.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this HostSummary.

        Unique identifier for host.

        :param id: The id of this HostSummary.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def mssql_cbt_effective_status(self):
        """Gets the mssql_cbt_effective_status of this HostSummary.


        :return: The mssql_cbt_effective_status of this HostSummary.
        :rtype: MssqlCbtEffectiveStatusType
        """
        return self._mssql_cbt_effective_status

    @mssql_cbt_effective_status.setter
    def mssql_cbt_effective_status(self, mssql_cbt_effective_status):
        """Sets the mssql_cbt_effective_status of this HostSummary.


        :param mssql_cbt_effective_status: The mssql_cbt_effective_status of this HostSummary.
        :type mssql_cbt_effective_status: MssqlCbtEffectiveStatusType
        """

        self._mssql_cbt_effective_status = mssql_cbt_effective_status

    @property
    def mssql_cbt_enabled(self):
        """Gets the mssql_cbt_enabled of this HostSummary.


        :return: The mssql_cbt_enabled of this HostSummary.
        :rtype: MssqlCbtStatusType
        """
        return self._mssql_cbt_enabled

    @mssql_cbt_enabled.setter
    def mssql_cbt_enabled(self, mssql_cbt_enabled):
        """Sets the mssql_cbt_enabled of this HostSummary.


        :param mssql_cbt_enabled: The mssql_cbt_enabled of this HostSummary.
        :type mssql_cbt_enabled: MssqlCbtStatusType
        """

        self._mssql_cbt_enabled = mssql_cbt_enabled

    @property
    def name(self):
        """Gets the name of this HostSummary.

        IP address or hostname of the host.

        :return: The name of this HostSummary.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this HostSummary.

        IP address or hostname of the host.

        :param name: The name of this HostSummary.
        :type name: str
        """

        self._name = name

    @property
    def nas_base_config(self):
        """Gets the nas_base_config of this HostSummary.


        :return: The nas_base_config of this HostSummary.
        :rtype: NasBaseConfig
        """
        return self._nas_base_config

    @nas_base_config.setter
    def nas_base_config(self, nas_base_config):
        """Sets the nas_base_config of this HostSummary.


        :param nas_base_config: The nas_base_config of this HostSummary.
        :type nas_base_config: NasBaseConfig
        """

        self._nas_base_config = nas_base_config

    @property
    def operating_system(self):
        """Gets the operating_system of this HostSummary.

        Operating system of the host. One of Windows, Linux, AIX, HPUX, and SunOS.

        :return: The operating_system of this HostSummary.
        :rtype: str
        """
        return self._operating_system

    @operating_system.setter
    def operating_system(self, operating_system):
        """Sets the operating_system of this HostSummary.

        Operating system of the host. One of Windows, Linux, AIX, HPUX, and SunOS.

        :param operating_system: The operating_system of this HostSummary.
        :type operating_system: str
        """

        self._operating_system = operating_system

    @property
    def operating_system_type(self):
        """Gets the operating_system_type of this HostSummary.

        The operating system of the host. Possible choices are Windows, Linux, AIX, HPUX, SunOS.

        :return: The operating_system_type of this HostSummary.
        :rtype: str
        """
        return self._operating_system_type

    @operating_system_type.setter
    def operating_system_type(self, operating_system_type):
        """Sets the operating_system_type of this HostSummary.

        The operating system of the host. Possible choices are Windows, Linux, AIX, HPUX, SunOS.

        :param operating_system_type: The operating_system_type of this HostSummary.
        :type operating_system_type: str
        """

        self._operating_system_type = operating_system_type

    @property
    def organization_id(self):
        """Gets the organization_id of this HostSummary.

        The ID of the organization to which the host is assigned (set by envoy).

        :return: The organization_id of this HostSummary.
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """Sets the organization_id of this HostSummary.

        The ID of the organization to which the host is assigned (set by envoy).

        :param organization_id: The organization_id of this HostSummary.
        :type organization_id: str
        """

        self._organization_id = organization_id

    @property
    def organization_name(self):
        """Gets the organization_name of this HostSummary.

        The name of the organization to which the host is assigned (set by envoy).

        :return: The organization_name of this HostSummary.
        :rtype: str
        """
        return self._organization_name

    @organization_name.setter
    def organization_name(self, organization_name):
        """Sets the organization_name of this HostSummary.

        The name of the organization to which the host is assigned (set by envoy).

        :param organization_name: The organization_name of this HostSummary.
        :type organization_name: str
        """

        self._organization_name = organization_name

    @property
    def primary_cluster_id(self):
        """Gets the primary_cluster_id of this HostSummary.

        ID of the Rubrik cluster to which the host belongs.

        :return: The primary_cluster_id of this HostSummary.
        :rtype: str
        """
        return self._primary_cluster_id

    @primary_cluster_id.setter
    def primary_cluster_id(self, primary_cluster_id):
        """Sets the primary_cluster_id of this HostSummary.

        ID of the Rubrik cluster to which the host belongs.

        :param primary_cluster_id: The primary_cluster_id of this HostSummary.
        :type primary_cluster_id: str
        """

        self._primary_cluster_id = primary_cluster_id

    @property
    def status(self):
        """Gets the status of this HostSummary.

        Specifies the connect status for the host. Status is Refreshing while discovery is running or Connected once discovery was successful and the host is available.

        :return: The status of this HostSummary.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this HostSummary.

        Specifies the connect status for the host. Status is Refreshing while discovery is running or Connected once discovery was successful and the host is available.

        :param status: The status of this HostSummary.
        :type status: str
        """

        self._status = status
