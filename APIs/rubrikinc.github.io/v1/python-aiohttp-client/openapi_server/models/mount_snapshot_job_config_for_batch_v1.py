# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.mount_snapshot_job_config_v1 import MountSnapshotJobConfigV1
from openapi_server import util


class MountSnapshotJobConfigForBatchV1(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, config: MountSnapshotJobConfigV1=None, snapshot_after_date: datetime=None, snapshot_before_date: datetime=None, snapshot_id: str=None, vm_id: str=None):
        """MountSnapshotJobConfigForBatchV1 - a model defined in OpenAPI

        :param config: The config of this MountSnapshotJobConfigForBatchV1.
        :param snapshot_after_date: The snapshot_after_date of this MountSnapshotJobConfigForBatchV1.
        :param snapshot_before_date: The snapshot_before_date of this MountSnapshotJobConfigForBatchV1.
        :param snapshot_id: The snapshot_id of this MountSnapshotJobConfigForBatchV1.
        :param vm_id: The vm_id of this MountSnapshotJobConfigForBatchV1.
        """
        self.openapi_types = {
            'config': MountSnapshotJobConfigV1,
            'snapshot_after_date': datetime,
            'snapshot_before_date': datetime,
            'snapshot_id': str,
            'vm_id': str
        }

        self.attribute_map = {
            'config': 'config',
            'snapshot_after_date': 'snapshotAfterDate',
            'snapshot_before_date': 'snapshotBeforeDate',
            'snapshot_id': 'snapshotId',
            'vm_id': 'vmId'
        }

        self._config = config
        self._snapshot_after_date = snapshot_after_date
        self._snapshot_before_date = snapshot_before_date
        self._snapshot_id = snapshot_id
        self._vm_id = vm_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MountSnapshotJobConfigForBatchV1':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MountSnapshotJobConfigForBatchV1 of this MountSnapshotJobConfigForBatchV1.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def config(self):
        """Gets the config of this MountSnapshotJobConfigForBatchV1.


        :return: The config of this MountSnapshotJobConfigForBatchV1.
        :rtype: MountSnapshotJobConfigV1
        """
        return self._config

    @config.setter
    def config(self, config):
        """Sets the config of this MountSnapshotJobConfigForBatchV1.


        :param config: The config of this MountSnapshotJobConfigForBatchV1.
        :type config: MountSnapshotJobConfigV1
        """
        if config is None:
            raise ValueError("Invalid value for `config`, must not be `None`")

        self._config = config

    @property
    def snapshot_after_date(self):
        """Gets the snapshot_after_date of this MountSnapshotJobConfigForBatchV1.

        Mounts the oldest snapshot taken after the specified date. This parameter is only evaluated when no values are set for snapshotId and snapshotBeforeDate.

        :return: The snapshot_after_date of this MountSnapshotJobConfigForBatchV1.
        :rtype: datetime
        """
        return self._snapshot_after_date

    @snapshot_after_date.setter
    def snapshot_after_date(self, snapshot_after_date):
        """Sets the snapshot_after_date of this MountSnapshotJobConfigForBatchV1.

        Mounts the oldest snapshot taken after the specified date. This parameter is only evaluated when no values are set for snapshotId and snapshotBeforeDate.

        :param snapshot_after_date: The snapshot_after_date of this MountSnapshotJobConfigForBatchV1.
        :type snapshot_after_date: datetime
        """

        self._snapshot_after_date = snapshot_after_date

    @property
    def snapshot_before_date(self):
        """Gets the snapshot_before_date of this MountSnapshotJobConfigForBatchV1.

        Mounts the most recent snapshot taken prior to the specified date. This parameter is only evaluated when no value is set for snapshotId.

        :return: The snapshot_before_date of this MountSnapshotJobConfigForBatchV1.
        :rtype: datetime
        """
        return self._snapshot_before_date

    @snapshot_before_date.setter
    def snapshot_before_date(self, snapshot_before_date):
        """Sets the snapshot_before_date of this MountSnapshotJobConfigForBatchV1.

        Mounts the most recent snapshot taken prior to the specified date. This parameter is only evaluated when no value is set for snapshotId.

        :param snapshot_before_date: The snapshot_before_date of this MountSnapshotJobConfigForBatchV1.
        :type snapshot_before_date: datetime
        """

        self._snapshot_before_date = snapshot_before_date

    @property
    def snapshot_id(self):
        """Gets the snapshot_id of this MountSnapshotJobConfigForBatchV1.

        The ID of the snapshot to export. This parameter is optional if either of the `snapshotBeforeDate` or `snapshotAfterDate` parameters is configured.

        :return: The snapshot_id of this MountSnapshotJobConfigForBatchV1.
        :rtype: str
        """
        return self._snapshot_id

    @snapshot_id.setter
    def snapshot_id(self, snapshot_id):
        """Sets the snapshot_id of this MountSnapshotJobConfigForBatchV1.

        The ID of the snapshot to export. This parameter is optional if either of the `snapshotBeforeDate` or `snapshotAfterDate` parameters is configured.

        :param snapshot_id: The snapshot_id of this MountSnapshotJobConfigForBatchV1.
        :type snapshot_id: str
        """

        self._snapshot_id = snapshot_id

    @property
    def vm_id(self):
        """Gets the vm_id of this MountSnapshotJobConfigForBatchV1.

        ID of the virtual machine whose snapshot needs to be mounted.

        :return: The vm_id of this MountSnapshotJobConfigForBatchV1.
        :rtype: str
        """
        return self._vm_id

    @vm_id.setter
    def vm_id(self, vm_id):
        """Sets the vm_id of this MountSnapshotJobConfigForBatchV1.

        ID of the virtual machine whose snapshot needs to be mounted.

        :param vm_id: The vm_id of this MountSnapshotJobConfigForBatchV1.
        :type vm_id: str
        """
        if vm_id is None:
            raise ValueError("Invalid value for `vm_id`, must not be `None`")

        self._vm_id = vm_id
