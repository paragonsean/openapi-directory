# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.sla_time_unit import SlaTimeUnit
from openapi_server import util


class AdvancedUiConfigAttributes(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, retention_type: SlaTimeUnit=None, time_unit: SlaTimeUnit=None):
        """AdvancedUiConfigAttributes - a model defined in OpenAPI

        :param retention_type: The retention_type of this AdvancedUiConfigAttributes.
        :param time_unit: The time_unit of this AdvancedUiConfigAttributes.
        """
        self.openapi_types = {
            'retention_type': SlaTimeUnit,
            'time_unit': SlaTimeUnit
        }

        self.attribute_map = {
            'retention_type': 'retentionType',
            'time_unit': 'timeUnit'
        }

        self._retention_type = retention_type
        self._time_unit = time_unit

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AdvancedUiConfigAttributes':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AdvancedUiConfigAttributes of this AdvancedUiConfigAttributes.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def retention_type(self):
        """Gets the retention_type of this AdvancedUiConfigAttributes.


        :return: The retention_type of this AdvancedUiConfigAttributes.
        :rtype: SlaTimeUnit
        """
        return self._retention_type

    @retention_type.setter
    def retention_type(self, retention_type):
        """Sets the retention_type of this AdvancedUiConfigAttributes.


        :param retention_type: The retention_type of this AdvancedUiConfigAttributes.
        :type retention_type: SlaTimeUnit
        """
        if retention_type is None:
            raise ValueError("Invalid value for `retention_type`, must not be `None`")

        self._retention_type = retention_type

    @property
    def time_unit(self):
        """Gets the time_unit of this AdvancedUiConfigAttributes.


        :return: The time_unit of this AdvancedUiConfigAttributes.
        :rtype: SlaTimeUnit
        """
        return self._time_unit

    @time_unit.setter
    def time_unit(self, time_unit):
        """Sets the time_unit of this AdvancedUiConfigAttributes.


        :param time_unit: The time_unit of this AdvancedUiConfigAttributes.
        :type time_unit: SlaTimeUnit
        """
        if time_unit is None:
            raise ValueError("Invalid value for `time_unit`, must not be `None`")

        self._time_unit = time_unit
