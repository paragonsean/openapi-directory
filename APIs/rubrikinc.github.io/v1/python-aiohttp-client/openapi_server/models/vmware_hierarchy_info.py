# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.data_store_summary import DataStoreSummary
from openapi_server.models.vmware_hierarchy_object_type import VmwareHierarchyObjectType
from openapi_server import util


class VmwareHierarchyInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, datastores: List[DataStoreSummary]=None, has_children: bool=None, id: str=None, location: str=None, name: str=None, object_type: VmwareHierarchyObjectType=None, recoverable_to: bool=None, root_id: str=None):
        """VmwareHierarchyInfo - a model defined in OpenAPI

        :param datastores: The datastores of this VmwareHierarchyInfo.
        :param has_children: The has_children of this VmwareHierarchyInfo.
        :param id: The id of this VmwareHierarchyInfo.
        :param location: The location of this VmwareHierarchyInfo.
        :param name: The name of this VmwareHierarchyInfo.
        :param object_type: The object_type of this VmwareHierarchyInfo.
        :param recoverable_to: The recoverable_to of this VmwareHierarchyInfo.
        :param root_id: The root_id of this VmwareHierarchyInfo.
        """
        self.openapi_types = {
            'datastores': List[DataStoreSummary],
            'has_children': bool,
            'id': str,
            'location': str,
            'name': str,
            'object_type': VmwareHierarchyObjectType,
            'recoverable_to': bool,
            'root_id': str
        }

        self.attribute_map = {
            'datastores': 'datastores',
            'has_children': 'hasChildren',
            'id': 'id',
            'location': 'location',
            'name': 'name',
            'object_type': 'objectType',
            'recoverable_to': 'recoverableTo',
            'root_id': 'rootId'
        }

        self._datastores = datastores
        self._has_children = has_children
        self._id = id
        self._location = location
        self._name = name
        self._object_type = object_type
        self._recoverable_to = recoverable_to
        self._root_id = root_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VmwareHierarchyInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VmwareHierarchyInfo of this VmwareHierarchyInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def datastores(self):
        """Gets the datastores of this VmwareHierarchyInfo.


        :return: The datastores of this VmwareHierarchyInfo.
        :rtype: List[DataStoreSummary]
        """
        return self._datastores

    @datastores.setter
    def datastores(self, datastores):
        """Sets the datastores of this VmwareHierarchyInfo.


        :param datastores: The datastores of this VmwareHierarchyInfo.
        :type datastores: List[DataStoreSummary]
        """
        if datastores is None:
            raise ValueError("Invalid value for `datastores`, must not be `None`")

        self._datastores = datastores

    @property
    def has_children(self):
        """Gets the has_children of this VmwareHierarchyInfo.


        :return: The has_children of this VmwareHierarchyInfo.
        :rtype: bool
        """
        return self._has_children

    @has_children.setter
    def has_children(self, has_children):
        """Sets the has_children of this VmwareHierarchyInfo.


        :param has_children: The has_children of this VmwareHierarchyInfo.
        :type has_children: bool
        """
        if has_children is None:
            raise ValueError("Invalid value for `has_children`, must not be `None`")

        self._has_children = has_children

    @property
    def id(self):
        """Gets the id of this VmwareHierarchyInfo.


        :return: The id of this VmwareHierarchyInfo.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this VmwareHierarchyInfo.


        :param id: The id of this VmwareHierarchyInfo.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def location(self):
        """Gets the location of this VmwareHierarchyInfo.


        :return: The location of this VmwareHierarchyInfo.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this VmwareHierarchyInfo.


        :param location: The location of this VmwareHierarchyInfo.
        :type location: str
        """
        if location is None:
            raise ValueError("Invalid value for `location`, must not be `None`")

        self._location = location

    @property
    def name(self):
        """Gets the name of this VmwareHierarchyInfo.


        :return: The name of this VmwareHierarchyInfo.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this VmwareHierarchyInfo.


        :param name: The name of this VmwareHierarchyInfo.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def object_type(self):
        """Gets the object_type of this VmwareHierarchyInfo.


        :return: The object_type of this VmwareHierarchyInfo.
        :rtype: VmwareHierarchyObjectType
        """
        return self._object_type

    @object_type.setter
    def object_type(self, object_type):
        """Sets the object_type of this VmwareHierarchyInfo.


        :param object_type: The object_type of this VmwareHierarchyInfo.
        :type object_type: VmwareHierarchyObjectType
        """
        if object_type is None:
            raise ValueError("Invalid value for `object_type`, must not be `None`")

        self._object_type = object_type

    @property
    def recoverable_to(self):
        """Gets the recoverable_to of this VmwareHierarchyInfo.


        :return: The recoverable_to of this VmwareHierarchyInfo.
        :rtype: bool
        """
        return self._recoverable_to

    @recoverable_to.setter
    def recoverable_to(self, recoverable_to):
        """Sets the recoverable_to of this VmwareHierarchyInfo.


        :param recoverable_to: The recoverable_to of this VmwareHierarchyInfo.
        :type recoverable_to: bool
        """
        if recoverable_to is None:
            raise ValueError("Invalid value for `recoverable_to`, must not be `None`")

        self._recoverable_to = recoverable_to

    @property
    def root_id(self):
        """Gets the root_id of this VmwareHierarchyInfo.


        :return: The root_id of this VmwareHierarchyInfo.
        :rtype: str
        """
        return self._root_id

    @root_id.setter
    def root_id(self, root_id):
        """Sets the root_id of this VmwareHierarchyInfo.


        :param root_id: The root_id of this VmwareHierarchyInfo.
        :type root_id: str
        """

        self._root_id = root_id
