# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SessionSummary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, expiration: str=None, groups: List[str]=None, id: str=None, organization_id: str=None, tag: str=None, token: str=None, user_id: str=None):
        """SessionSummary - a model defined in OpenAPI

        :param expiration: The expiration of this SessionSummary.
        :param groups: The groups of this SessionSummary.
        :param id: The id of this SessionSummary.
        :param organization_id: The organization_id of this SessionSummary.
        :param tag: The tag of this SessionSummary.
        :param token: The token of this SessionSummary.
        :param user_id: The user_id of this SessionSummary.
        """
        self.openapi_types = {
            'expiration': str,
            'groups': List[str],
            'id': str,
            'organization_id': str,
            'tag': str,
            'token': str,
            'user_id': str
        }

        self.attribute_map = {
            'expiration': 'expiration',
            'groups': 'groups',
            'id': 'id',
            'organization_id': 'organizationId',
            'tag': 'tag',
            'token': 'token',
            'user_id': 'userId'
        }

        self._expiration = expiration
        self._groups = groups
        self._id = id
        self._organization_id = organization_id
        self._tag = tag
        self._token = token
        self._user_id = user_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SessionSummary':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SessionSummary of this SessionSummary.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def expiration(self):
        """Gets the expiration of this SessionSummary.


        :return: The expiration of this SessionSummary.
        :rtype: str
        """
        return self._expiration

    @expiration.setter
    def expiration(self, expiration):
        """Sets the expiration of this SessionSummary.


        :param expiration: The expiration of this SessionSummary.
        :type expiration: str
        """

        self._expiration = expiration

    @property
    def groups(self):
        """Gets the groups of this SessionSummary.


        :return: The groups of this SessionSummary.
        :rtype: List[str]
        """
        return self._groups

    @groups.setter
    def groups(self, groups):
        """Sets the groups of this SessionSummary.


        :param groups: The groups of this SessionSummary.
        :type groups: List[str]
        """

        self._groups = groups

    @property
    def id(self):
        """Gets the id of this SessionSummary.


        :return: The id of this SessionSummary.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SessionSummary.


        :param id: The id of this SessionSummary.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def organization_id(self):
        """Gets the organization_id of this SessionSummary.


        :return: The organization_id of this SessionSummary.
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """Sets the organization_id of this SessionSummary.


        :param organization_id: The organization_id of this SessionSummary.
        :type organization_id: str
        """
        if organization_id is None:
            raise ValueError("Invalid value for `organization_id`, must not be `None`")

        self._organization_id = organization_id

    @property
    def tag(self):
        """Gets the tag of this SessionSummary.


        :return: The tag of this SessionSummary.
        :rtype: str
        """
        return self._tag

    @tag.setter
    def tag(self, tag):
        """Sets the tag of this SessionSummary.


        :param tag: The tag of this SessionSummary.
        :type tag: str
        """

        self._tag = tag

    @property
    def token(self):
        """Gets the token of this SessionSummary.


        :return: The token of this SessionSummary.
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this SessionSummary.


        :param token: The token of this SessionSummary.
        :type token: str
        """
        if token is None:
            raise ValueError("Invalid value for `token`, must not be `None`")

        self._token = token

    @property
    def user_id(self):
        """Gets the user_id of this SessionSummary.


        :return: The user_id of this SessionSummary.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this SessionSummary.


        :param user_id: The user_id of this SessionSummary.
        :type user_id: str
        """
        if user_id is None:
            raise ValueError("Invalid value for `user_id`, must not be `None`")

        self._user_id = user_id
