# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.resource_tag_detail import ResourceTagDetail
from openapi_server import util


class ResourceTagGetResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, resource_tags: List[ResourceTagDetail]=None):
        """ResourceTagGetResponse - a model defined in OpenAPI

        :param resource_tags: The resource_tags of this ResourceTagGetResponse.
        """
        self.openapi_types = {
            'resource_tags': List[ResourceTagDetail]
        }

        self.attribute_map = {
            'resource_tags': 'resourceTags'
        }

        self._resource_tags = resource_tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ResourceTagGetResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ResourceTagGetResponse of this ResourceTagGetResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def resource_tags(self):
        """Gets the resource_tags of this ResourceTagGetResponse.

        List of resource tags.

        :return: The resource_tags of this ResourceTagGetResponse.
        :rtype: List[ResourceTagDetail]
        """
        return self._resource_tags

    @resource_tags.setter
    def resource_tags(self, resource_tags):
        """Sets the resource_tags of this ResourceTagGetResponse.

        List of resource tags.

        :param resource_tags: The resource_tags of this ResourceTagGetResponse.
        :type resource_tags: List[ResourceTagDetail]
        """
        if resource_tags is None:
            raise ValueError("Invalid value for `resource_tags`, must not be `None`")

        self._resource_tags = resource_tags
