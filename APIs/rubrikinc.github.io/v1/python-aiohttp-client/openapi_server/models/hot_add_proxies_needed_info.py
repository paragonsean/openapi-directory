# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class HotAddProxiesNeededInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, needed: int=None):
        """HotAddProxiesNeededInfo - a model defined in OpenAPI

        :param needed: The needed of this HotAddProxiesNeededInfo.
        """
        self.openapi_types = {
            'needed': int
        }

        self.attribute_map = {
            'needed': 'needed'
        }

        self._needed = needed

    @classmethod
    def from_dict(cls, dikt: dict) -> 'HotAddProxiesNeededInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The HotAddProxiesNeededInfo of this HotAddProxiesNeededInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def needed(self):
        """Gets the needed of this HotAddProxiesNeededInfo.

        The number of HotAdd proxies the vCenter requires.

        :return: The needed of this HotAddProxiesNeededInfo.
        :rtype: int
        """
        return self._needed

    @needed.setter
    def needed(self, needed):
        """Sets the needed of this HotAddProxiesNeededInfo.

        The number of HotAdd proxies the vCenter requires.

        :param needed: The needed of this HotAddProxiesNeededInfo.
        :type needed: int
        """
        if needed is None:
            raise ValueError("Invalid value for `needed`, must not be `None`")

        self._needed = needed
