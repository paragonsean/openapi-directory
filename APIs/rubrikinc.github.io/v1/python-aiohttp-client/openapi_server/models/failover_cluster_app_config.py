# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.failover_cluster_app_source import FailoverClusterAppSource
from openapi_server.models.failover_cluster_type import FailoverClusterType
from openapi_server import util


class FailoverClusterAppConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, configured_sla_domain_id: str=None, failover_cluster_app_source: FailoverClusterAppSource=None, failover_cluster_id: str=None, failover_cluster_type: FailoverClusterType=None, name: str=None):
        """FailoverClusterAppConfig - a model defined in OpenAPI

        :param configured_sla_domain_id: The configured_sla_domain_id of this FailoverClusterAppConfig.
        :param failover_cluster_app_source: The failover_cluster_app_source of this FailoverClusterAppConfig.
        :param failover_cluster_id: The failover_cluster_id of this FailoverClusterAppConfig.
        :param failover_cluster_type: The failover_cluster_type of this FailoverClusterAppConfig.
        :param name: The name of this FailoverClusterAppConfig.
        """
        self.openapi_types = {
            'configured_sla_domain_id': str,
            'failover_cluster_app_source': FailoverClusterAppSource,
            'failover_cluster_id': str,
            'failover_cluster_type': FailoverClusterType,
            'name': str
        }

        self.attribute_map = {
            'configured_sla_domain_id': 'configuredSlaDomainId',
            'failover_cluster_app_source': 'failoverClusterAppSource',
            'failover_cluster_id': 'failoverClusterId',
            'failover_cluster_type': 'failoverClusterType',
            'name': 'name'
        }

        self._configured_sla_domain_id = configured_sla_domain_id
        self._failover_cluster_app_source = failover_cluster_app_source
        self._failover_cluster_id = failover_cluster_id
        self._failover_cluster_type = failover_cluster_type
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FailoverClusterAppConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FailoverClusterAppConfig of this FailoverClusterAppConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def configured_sla_domain_id(self):
        """Gets the configured_sla_domain_id of this FailoverClusterAppConfig.

        ID of the SLA Domain that is assigned to the specified failover cluster app. Existing snapshots of the object will be retained with the configuration of specified SLA Domain.

        :return: The configured_sla_domain_id of this FailoverClusterAppConfig.
        :rtype: str
        """
        return self._configured_sla_domain_id

    @configured_sla_domain_id.setter
    def configured_sla_domain_id(self, configured_sla_domain_id):
        """Sets the configured_sla_domain_id of this FailoverClusterAppConfig.

        ID of the SLA Domain that is assigned to the specified failover cluster app. Existing snapshots of the object will be retained with the configuration of specified SLA Domain.

        :param configured_sla_domain_id: The configured_sla_domain_id of this FailoverClusterAppConfig.
        :type configured_sla_domain_id: str
        """

        self._configured_sla_domain_id = configured_sla_domain_id

    @property
    def failover_cluster_app_source(self):
        """Gets the failover_cluster_app_source of this FailoverClusterAppConfig.


        :return: The failover_cluster_app_source of this FailoverClusterAppConfig.
        :rtype: FailoverClusterAppSource
        """
        return self._failover_cluster_app_source

    @failover_cluster_app_source.setter
    def failover_cluster_app_source(self, failover_cluster_app_source):
        """Sets the failover_cluster_app_source of this FailoverClusterAppConfig.


        :param failover_cluster_app_source: The failover_cluster_app_source of this FailoverClusterAppConfig.
        :type failover_cluster_app_source: FailoverClusterAppSource
        """
        if failover_cluster_app_source is None:
            raise ValueError("Invalid value for `failover_cluster_app_source`, must not be `None`")

        self._failover_cluster_app_source = failover_cluster_app_source

    @property
    def failover_cluster_id(self):
        """Gets the failover_cluster_id of this FailoverClusterAppConfig.

        Cluster ID of the failover cluster app.

        :return: The failover_cluster_id of this FailoverClusterAppConfig.
        :rtype: str
        """
        return self._failover_cluster_id

    @failover_cluster_id.setter
    def failover_cluster_id(self, failover_cluster_id):
        """Sets the failover_cluster_id of this FailoverClusterAppConfig.

        Cluster ID of the failover cluster app.

        :param failover_cluster_id: The failover_cluster_id of this FailoverClusterAppConfig.
        :type failover_cluster_id: str
        """
        if failover_cluster_id is None:
            raise ValueError("Invalid value for `failover_cluster_id`, must not be `None`")

        self._failover_cluster_id = failover_cluster_id

    @property
    def failover_cluster_type(self):
        """Gets the failover_cluster_type of this FailoverClusterAppConfig.


        :return: The failover_cluster_type of this FailoverClusterAppConfig.
        :rtype: FailoverClusterType
        """
        return self._failover_cluster_type

    @failover_cluster_type.setter
    def failover_cluster_type(self, failover_cluster_type):
        """Sets the failover_cluster_type of this FailoverClusterAppConfig.


        :param failover_cluster_type: The failover_cluster_type of this FailoverClusterAppConfig.
        :type failover_cluster_type: FailoverClusterType
        """
        if failover_cluster_type is None:
            raise ValueError("Invalid value for `failover_cluster_type`, must not be `None`")

        self._failover_cluster_type = failover_cluster_type

    @property
    def name(self):
        """Gets the name of this FailoverClusterAppConfig.

        Name of the failover cluster app.

        :return: The name of this FailoverClusterAppConfig.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this FailoverClusterAppConfig.

        Name of the failover cluster app.

        :param name: The name of this FailoverClusterAppConfig.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name
