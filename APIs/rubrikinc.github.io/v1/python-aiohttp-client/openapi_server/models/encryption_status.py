# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EncryptionStatus(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cipher: str=None, is_encrypted: bool=None, key_length: int=None, key_protection: str=None):
        """EncryptionStatus - a model defined in OpenAPI

        :param cipher: The cipher of this EncryptionStatus.
        :param is_encrypted: The is_encrypted of this EncryptionStatus.
        :param key_length: The key_length of this EncryptionStatus.
        :param key_protection: The key_protection of this EncryptionStatus.
        """
        self.openapi_types = {
            'cipher': str,
            'is_encrypted': bool,
            'key_length': int,
            'key_protection': str
        }

        self.attribute_map = {
            'cipher': 'cipher',
            'is_encrypted': 'isEncrypted',
            'key_length': 'keyLength',
            'key_protection': 'keyProtection'
        }

        self._cipher = cipher
        self._is_encrypted = is_encrypted
        self._key_length = key_length
        self._key_protection = key_protection

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EncryptionStatus':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EncryptionStatus of this EncryptionStatus.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cipher(self):
        """Gets the cipher of this EncryptionStatus.

        Cipher method for encryption at rest.

        :return: The cipher of this EncryptionStatus.
        :rtype: str
        """
        return self._cipher

    @cipher.setter
    def cipher(self, cipher):
        """Sets the cipher of this EncryptionStatus.

        Cipher method for encryption at rest.

        :param cipher: The cipher of this EncryptionStatus.
        :type cipher: str
        """

        self._cipher = cipher

    @property
    def is_encrypted(self):
        """Gets the is_encrypted of this EncryptionStatus.

        A Boolean value that specifies whether data on the cluster is encrypted at rest. When this value is 'true,' data stored on the cluster is encrypted. When this value is 'false,' data stored on the cluster is not encrypted.

        :return: The is_encrypted of this EncryptionStatus.
        :rtype: bool
        """
        return self._is_encrypted

    @is_encrypted.setter
    def is_encrypted(self, is_encrypted):
        """Sets the is_encrypted of this EncryptionStatus.

        A Boolean value that specifies whether data on the cluster is encrypted at rest. When this value is 'true,' data stored on the cluster is encrypted. When this value is 'false,' data stored on the cluster is not encrypted.

        :param is_encrypted: The is_encrypted of this EncryptionStatus.
        :type is_encrypted: bool
        """
        if is_encrypted is None:
            raise ValueError("Invalid value for `is_encrypted`, must not be `None`")

        self._is_encrypted = is_encrypted

    @property
    def key_length(self):
        """Gets the key_length of this EncryptionStatus.

        Key length for encryption at rest.

        :return: The key_length of this EncryptionStatus.
        :rtype: int
        """
        return self._key_length

    @key_length.setter
    def key_length(self, key_length):
        """Sets the key_length of this EncryptionStatus.

        Key length for encryption at rest.

        :param key_length: The key_length of this EncryptionStatus.
        :type key_length: int
        """

        self._key_length = key_length

    @property
    def key_protection(self):
        """Gets the key_protection of this EncryptionStatus.

        Key protection method for encryption at rest.

        :return: The key_protection of this EncryptionStatus.
        :rtype: str
        """
        return self._key_protection

    @key_protection.setter
    def key_protection(self, key_protection):
        """Sets the key_protection of this EncryptionStatus.

        Key protection method for encryption at rest.

        :param key_protection: The key_protection of this EncryptionStatus.
        :type key_protection: str
        """

        self._key_protection = key_protection
