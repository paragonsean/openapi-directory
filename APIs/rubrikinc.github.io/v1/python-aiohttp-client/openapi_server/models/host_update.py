# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.hdfs_config import HdfsConfig
from openapi_server.models.host_vfd_install_config import HostVfdInstallConfig
from openapi_server.models.mssql_cbt_status_type import MssqlCbtStatusType
from openapi_server.models.nas_config import NasConfig
from openapi_server import util


class HostUpdate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, alias: str=None, compression_enabled: bool=None, hdfs_config: HdfsConfig=None, host_vfd_driver_installed: bool=None, host_vfd_enabled: HostVfdInstallConfig=None, hostname: str=None, is_oracle_host: bool=None, mssql_cbt_driver_installed: bool=None, mssql_cbt_enabled: MssqlCbtStatusType=None, nas_config: NasConfig=None, oracle_query_user: str=None, oracle_sys_dba_user: str=None):
        """HostUpdate - a model defined in OpenAPI

        :param alias: The alias of this HostUpdate.
        :param compression_enabled: The compression_enabled of this HostUpdate.
        :param hdfs_config: The hdfs_config of this HostUpdate.
        :param host_vfd_driver_installed: The host_vfd_driver_installed of this HostUpdate.
        :param host_vfd_enabled: The host_vfd_enabled of this HostUpdate.
        :param hostname: The hostname of this HostUpdate.
        :param is_oracle_host: The is_oracle_host of this HostUpdate.
        :param mssql_cbt_driver_installed: The mssql_cbt_driver_installed of this HostUpdate.
        :param mssql_cbt_enabled: The mssql_cbt_enabled of this HostUpdate.
        :param nas_config: The nas_config of this HostUpdate.
        :param oracle_query_user: The oracle_query_user of this HostUpdate.
        :param oracle_sys_dba_user: The oracle_sys_dba_user of this HostUpdate.
        """
        self.openapi_types = {
            'alias': str,
            'compression_enabled': bool,
            'hdfs_config': HdfsConfig,
            'host_vfd_driver_installed': bool,
            'host_vfd_enabled': HostVfdInstallConfig,
            'hostname': str,
            'is_oracle_host': bool,
            'mssql_cbt_driver_installed': bool,
            'mssql_cbt_enabled': MssqlCbtStatusType,
            'nas_config': NasConfig,
            'oracle_query_user': str,
            'oracle_sys_dba_user': str
        }

        self.attribute_map = {
            'alias': 'alias',
            'compression_enabled': 'compressionEnabled',
            'hdfs_config': 'hdfsConfig',
            'host_vfd_driver_installed': 'hostVfdDriverInstalled',
            'host_vfd_enabled': 'hostVfdEnabled',
            'hostname': 'hostname',
            'is_oracle_host': 'isOracleHost',
            'mssql_cbt_driver_installed': 'mssqlCbtDriverInstalled',
            'mssql_cbt_enabled': 'mssqlCbtEnabled',
            'nas_config': 'nasConfig',
            'oracle_query_user': 'oracleQueryUser',
            'oracle_sys_dba_user': 'oracleSysDbaUser'
        }

        self._alias = alias
        self._compression_enabled = compression_enabled
        self._hdfs_config = hdfs_config
        self._host_vfd_driver_installed = host_vfd_driver_installed
        self._host_vfd_enabled = host_vfd_enabled
        self._hostname = hostname
        self._is_oracle_host = is_oracle_host
        self._mssql_cbt_driver_installed = mssql_cbt_driver_installed
        self._mssql_cbt_enabled = mssql_cbt_enabled
        self._nas_config = nas_config
        self._oracle_query_user = oracle_query_user
        self._oracle_sys_dba_user = oracle_sys_dba_user

    @classmethod
    def from_dict(cls, dikt: dict) -> 'HostUpdate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The HostUpdate of this HostUpdate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def alias(self):
        """Gets the alias of this HostUpdate.

        A user-specified string that returns this host in searches.

        :return: The alias of this HostUpdate.
        :rtype: str
        """
        return self._alias

    @alias.setter
    def alias(self, alias):
        """Sets the alias of this HostUpdate.

        A user-specified string that returns this host in searches.

        :param alias: The alias of this HostUpdate.
        :type alias: str
        """

        self._alias = alias

    @property
    def compression_enabled(self):
        """Gets the compression_enabled of this HostUpdate.


        :return: The compression_enabled of this HostUpdate.
        :rtype: bool
        """
        return self._compression_enabled

    @compression_enabled.setter
    def compression_enabled(self, compression_enabled):
        """Sets the compression_enabled of this HostUpdate.


        :param compression_enabled: The compression_enabled of this HostUpdate.
        :type compression_enabled: bool
        """

        self._compression_enabled = compression_enabled

    @property
    def hdfs_config(self):
        """Gets the hdfs_config of this HostUpdate.


        :return: The hdfs_config of this HostUpdate.
        :rtype: HdfsConfig
        """
        return self._hdfs_config

    @hdfs_config.setter
    def hdfs_config(self, hdfs_config):
        """Sets the hdfs_config of this HostUpdate.


        :param hdfs_config: The hdfs_config of this HostUpdate.
        :type hdfs_config: HdfsConfig
        """

        self._hdfs_config = hdfs_config

    @property
    def host_vfd_driver_installed(self):
        """Gets the host_vfd_driver_installed of this HostUpdate.

        When VFD is disabled on the specified Windows host, set this property to false to instruct the Rubrik cluster to remove the VFD driver from a specified Windows host. Before using this property, disable VFD on the specified Windows host by setting the value of HostVfdEnabled to Disabled.

        :return: The host_vfd_driver_installed of this HostUpdate.
        :rtype: bool
        """
        return self._host_vfd_driver_installed

    @host_vfd_driver_installed.setter
    def host_vfd_driver_installed(self, host_vfd_driver_installed):
        """Sets the host_vfd_driver_installed of this HostUpdate.

        When VFD is disabled on the specified Windows host, set this property to false to instruct the Rubrik cluster to remove the VFD driver from a specified Windows host. Before using this property, disable VFD on the specified Windows host by setting the value of HostVfdEnabled to Disabled.

        :param host_vfd_driver_installed: The host_vfd_driver_installed of this HostUpdate.
        :type host_vfd_driver_installed: bool
        """

        self._host_vfd_driver_installed = host_vfd_driver_installed

    @property
    def host_vfd_enabled(self):
        """Gets the host_vfd_enabled of this HostUpdate.


        :return: The host_vfd_enabled of this HostUpdate.
        :rtype: HostVfdInstallConfig
        """
        return self._host_vfd_enabled

    @host_vfd_enabled.setter
    def host_vfd_enabled(self, host_vfd_enabled):
        """Sets the host_vfd_enabled of this HostUpdate.


        :param host_vfd_enabled: The host_vfd_enabled of this HostUpdate.
        :type host_vfd_enabled: HostVfdInstallConfig
        """

        self._host_vfd_enabled = host_vfd_enabled

    @property
    def hostname(self):
        """Gets the hostname of this HostUpdate.


        :return: The hostname of this HostUpdate.
        :rtype: str
        """
        return self._hostname

    @hostname.setter
    def hostname(self, hostname):
        """Sets the hostname of this HostUpdate.


        :param hostname: The hostname of this HostUpdate.
        :type hostname: str
        """

        self._hostname = hostname

    @property
    def is_oracle_host(self):
        """Gets the is_oracle_host of this HostUpdate.

        A Boolean that specifies whether to discover Oracle information during host refresh. A value of 'true' discovers Oracle information during host refresh. 

        :return: The is_oracle_host of this HostUpdate.
        :rtype: bool
        """
        return self._is_oracle_host

    @is_oracle_host.setter
    def is_oracle_host(self, is_oracle_host):
        """Sets the is_oracle_host of this HostUpdate.

        A Boolean that specifies whether to discover Oracle information during host refresh. A value of 'true' discovers Oracle information during host refresh. 

        :param is_oracle_host: The is_oracle_host of this HostUpdate.
        :type is_oracle_host: bool
        """

        self._is_oracle_host = is_oracle_host

    @property
    def mssql_cbt_driver_installed(self):
        """Gets the mssql_cbt_driver_installed of this HostUpdate.

        When CBT is disabled on the specified Windows host, set this property to false to instruct the Rubrik cluster to remove the CBT driver from a specified Windows host. Before using this property, disable CBT on the specified Windows host by setting the value of mssqlCbtEnabled to Disabled.

        :return: The mssql_cbt_driver_installed of this HostUpdate.
        :rtype: bool
        """
        return self._mssql_cbt_driver_installed

    @mssql_cbt_driver_installed.setter
    def mssql_cbt_driver_installed(self, mssql_cbt_driver_installed):
        """Sets the mssql_cbt_driver_installed of this HostUpdate.

        When CBT is disabled on the specified Windows host, set this property to false to instruct the Rubrik cluster to remove the CBT driver from a specified Windows host. Before using this property, disable CBT on the specified Windows host by setting the value of mssqlCbtEnabled to Disabled.

        :param mssql_cbt_driver_installed: The mssql_cbt_driver_installed of this HostUpdate.
        :type mssql_cbt_driver_installed: bool
        """

        self._mssql_cbt_driver_installed = mssql_cbt_driver_installed

    @property
    def mssql_cbt_enabled(self):
        """Gets the mssql_cbt_enabled of this HostUpdate.


        :return: The mssql_cbt_enabled of this HostUpdate.
        :rtype: MssqlCbtStatusType
        """
        return self._mssql_cbt_enabled

    @mssql_cbt_enabled.setter
    def mssql_cbt_enabled(self, mssql_cbt_enabled):
        """Sets the mssql_cbt_enabled of this HostUpdate.


        :param mssql_cbt_enabled: The mssql_cbt_enabled of this HostUpdate.
        :type mssql_cbt_enabled: MssqlCbtStatusType
        """

        self._mssql_cbt_enabled = mssql_cbt_enabled

    @property
    def nas_config(self):
        """Gets the nas_config of this HostUpdate.


        :return: The nas_config of this HostUpdate.
        :rtype: NasConfig
        """
        return self._nas_config

    @nas_config.setter
    def nas_config(self, nas_config):
        """Sets the nas_config of this HostUpdate.


        :param nas_config: The nas_config of this HostUpdate.
        :type nas_config: NasConfig
        """

        self._nas_config = nas_config

    @property
    def oracle_query_user(self):
        """Gets the oracle_query_user of this HostUpdate.

        Specifies the Oracle username for an account with query privileges. The account must have query privileges for a specified Oracle installation to enable Oracle discovery queries for that installation. 

        :return: The oracle_query_user of this HostUpdate.
        :rtype: str
        """
        return self._oracle_query_user

    @oracle_query_user.setter
    def oracle_query_user(self, oracle_query_user):
        """Sets the oracle_query_user of this HostUpdate.

        Specifies the Oracle username for an account with query privileges. The account must have query privileges for a specified Oracle installation to enable Oracle discovery queries for that installation. 

        :param oracle_query_user: The oracle_query_user of this HostUpdate.
        :type oracle_query_user: str
        """

        self._oracle_query_user = oracle_query_user

    @property
    def oracle_sys_dba_user(self):
        """Gets the oracle_sys_dba_user of this HostUpdate.

        Specifies the Oracle username for an account with sysdba privileges. The account must have sysdba privileges for a specified Oracle installation to enable Oracle discovery queries for that installation. This field overrides the configured global sysdba user for the specified Oracle installation. 

        :return: The oracle_sys_dba_user of this HostUpdate.
        :rtype: str
        """
        return self._oracle_sys_dba_user

    @oracle_sys_dba_user.setter
    def oracle_sys_dba_user(self, oracle_sys_dba_user):
        """Sets the oracle_sys_dba_user of this HostUpdate.

        Specifies the Oracle username for an account with sysdba privileges. The account must have sysdba privileges for a specified Oracle installation to enable Oracle discovery queries for that installation. This field overrides the configured global sysdba user for the specified Oracle installation. 

        :param oracle_sys_dba_user: The oracle_sys_dba_user of this HostUpdate.
        :type oracle_sys_dba_user: str
        """

        self._oracle_sys_dba_user = oracle_sys_dba_user
