# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.hdfs_base_config import HdfsBaseConfig
from openapi_server.models.host_vfd_install_config import HostVfdInstallConfig
from openapi_server.models.host_vfd_state import HostVfdState
from openapi_server.models.mssql_cbt_effective_status_type import MssqlCbtEffectiveStatusType
from openapi_server.models.mssql_cbt_status_type import MssqlCbtStatusType
from openapi_server.models.nas_base_config import NasBaseConfig
from openapi_server import util


class HostDetail(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, alias: str=None, hdfs_base_config: HdfsBaseConfig=None, hostname: str=None, id: str=None, mssql_cbt_effective_status: MssqlCbtEffectiveStatusType=None, mssql_cbt_enabled: MssqlCbtStatusType=None, name: str=None, nas_base_config: NasBaseConfig=None, operating_system: str=None, operating_system_type: str=None, organization_id: str=None, organization_name: str=None, primary_cluster_id: str=None, status: str=None, agent_id: str=None, compression_enabled: bool=None, host_vfd_driver_state: HostVfdState=None, host_vfd_enabled: HostVfdInstallConfig=None, is_oracle_host: bool=None, is_relic: bool=None, mssql_cbt_driver_installed: bool=None, oracle_query_user: str=None, oracle_sys_dba_user: str=None):
        """HostDetail - a model defined in OpenAPI

        :param alias: The alias of this HostDetail.
        :param hdfs_base_config: The hdfs_base_config of this HostDetail.
        :param hostname: The hostname of this HostDetail.
        :param id: The id of this HostDetail.
        :param mssql_cbt_effective_status: The mssql_cbt_effective_status of this HostDetail.
        :param mssql_cbt_enabled: The mssql_cbt_enabled of this HostDetail.
        :param name: The name of this HostDetail.
        :param nas_base_config: The nas_base_config of this HostDetail.
        :param operating_system: The operating_system of this HostDetail.
        :param operating_system_type: The operating_system_type of this HostDetail.
        :param organization_id: The organization_id of this HostDetail.
        :param organization_name: The organization_name of this HostDetail.
        :param primary_cluster_id: The primary_cluster_id of this HostDetail.
        :param status: The status of this HostDetail.
        :param agent_id: The agent_id of this HostDetail.
        :param compression_enabled: The compression_enabled of this HostDetail.
        :param host_vfd_driver_state: The host_vfd_driver_state of this HostDetail.
        :param host_vfd_enabled: The host_vfd_enabled of this HostDetail.
        :param is_oracle_host: The is_oracle_host of this HostDetail.
        :param is_relic: The is_relic of this HostDetail.
        :param mssql_cbt_driver_installed: The mssql_cbt_driver_installed of this HostDetail.
        :param oracle_query_user: The oracle_query_user of this HostDetail.
        :param oracle_sys_dba_user: The oracle_sys_dba_user of this HostDetail.
        """
        self.openapi_types = {
            'alias': str,
            'hdfs_base_config': HdfsBaseConfig,
            'hostname': str,
            'id': str,
            'mssql_cbt_effective_status': MssqlCbtEffectiveStatusType,
            'mssql_cbt_enabled': MssqlCbtStatusType,
            'name': str,
            'nas_base_config': NasBaseConfig,
            'operating_system': str,
            'operating_system_type': str,
            'organization_id': str,
            'organization_name': str,
            'primary_cluster_id': str,
            'status': str,
            'agent_id': str,
            'compression_enabled': bool,
            'host_vfd_driver_state': HostVfdState,
            'host_vfd_enabled': HostVfdInstallConfig,
            'is_oracle_host': bool,
            'is_relic': bool,
            'mssql_cbt_driver_installed': bool,
            'oracle_query_user': str,
            'oracle_sys_dba_user': str
        }

        self.attribute_map = {
            'alias': 'alias',
            'hdfs_base_config': 'hdfsBaseConfig',
            'hostname': 'hostname',
            'id': 'id',
            'mssql_cbt_effective_status': 'mssqlCbtEffectiveStatus',
            'mssql_cbt_enabled': 'mssqlCbtEnabled',
            'name': 'name',
            'nas_base_config': 'nasBaseConfig',
            'operating_system': 'operatingSystem',
            'operating_system_type': 'operatingSystemType',
            'organization_id': 'organizationId',
            'organization_name': 'organizationName',
            'primary_cluster_id': 'primaryClusterId',
            'status': 'status',
            'agent_id': 'agentId',
            'compression_enabled': 'compressionEnabled',
            'host_vfd_driver_state': 'hostVfdDriverState',
            'host_vfd_enabled': 'hostVfdEnabled',
            'is_oracle_host': 'isOracleHost',
            'is_relic': 'isRelic',
            'mssql_cbt_driver_installed': 'mssqlCbtDriverInstalled',
            'oracle_query_user': 'oracleQueryUser',
            'oracle_sys_dba_user': 'oracleSysDbaUser'
        }

        self._alias = alias
        self._hdfs_base_config = hdfs_base_config
        self._hostname = hostname
        self._id = id
        self._mssql_cbt_effective_status = mssql_cbt_effective_status
        self._mssql_cbt_enabled = mssql_cbt_enabled
        self._name = name
        self._nas_base_config = nas_base_config
        self._operating_system = operating_system
        self._operating_system_type = operating_system_type
        self._organization_id = organization_id
        self._organization_name = organization_name
        self._primary_cluster_id = primary_cluster_id
        self._status = status
        self._agent_id = agent_id
        self._compression_enabled = compression_enabled
        self._host_vfd_driver_state = host_vfd_driver_state
        self._host_vfd_enabled = host_vfd_enabled
        self._is_oracle_host = is_oracle_host
        self._is_relic = is_relic
        self._mssql_cbt_driver_installed = mssql_cbt_driver_installed
        self._oracle_query_user = oracle_query_user
        self._oracle_sys_dba_user = oracle_sys_dba_user

    @classmethod
    def from_dict(cls, dikt: dict) -> 'HostDetail':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The HostDetail of this HostDetail.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def alias(self):
        """Gets the alias of this HostDetail.

        A user-specified string that returns this host in searches.

        :return: The alias of this HostDetail.
        :rtype: str
        """
        return self._alias

    @alias.setter
    def alias(self, alias):
        """Sets the alias of this HostDetail.

        A user-specified string that returns this host in searches.

        :param alias: The alias of this HostDetail.
        :type alias: str
        """

        self._alias = alias

    @property
    def hdfs_base_config(self):
        """Gets the hdfs_base_config of this HostDetail.


        :return: The hdfs_base_config of this HostDetail.
        :rtype: HdfsBaseConfig
        """
        return self._hdfs_base_config

    @hdfs_base_config.setter
    def hdfs_base_config(self, hdfs_base_config):
        """Sets the hdfs_base_config of this HostDetail.


        :param hdfs_base_config: The hdfs_base_config of this HostDetail.
        :type hdfs_base_config: HdfsBaseConfig
        """

        self._hdfs_base_config = hdfs_base_config

    @property
    def hostname(self):
        """Gets the hostname of this HostDetail.

        Deprecated. Please use 'name' instead.

        :return: The hostname of this HostDetail.
        :rtype: str
        """
        return self._hostname

    @hostname.setter
    def hostname(self, hostname):
        """Sets the hostname of this HostDetail.

        Deprecated. Please use 'name' instead.

        :param hostname: The hostname of this HostDetail.
        :type hostname: str
        """
        if hostname is None:
            raise ValueError("Invalid value for `hostname`, must not be `None`")

        self._hostname = hostname

    @property
    def id(self):
        """Gets the id of this HostDetail.

        Unique identifier for host.

        :return: The id of this HostDetail.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this HostDetail.

        Unique identifier for host.

        :param id: The id of this HostDetail.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def mssql_cbt_effective_status(self):
        """Gets the mssql_cbt_effective_status of this HostDetail.


        :return: The mssql_cbt_effective_status of this HostDetail.
        :rtype: MssqlCbtEffectiveStatusType
        """
        return self._mssql_cbt_effective_status

    @mssql_cbt_effective_status.setter
    def mssql_cbt_effective_status(self, mssql_cbt_effective_status):
        """Sets the mssql_cbt_effective_status of this HostDetail.


        :param mssql_cbt_effective_status: The mssql_cbt_effective_status of this HostDetail.
        :type mssql_cbt_effective_status: MssqlCbtEffectiveStatusType
        """

        self._mssql_cbt_effective_status = mssql_cbt_effective_status

    @property
    def mssql_cbt_enabled(self):
        """Gets the mssql_cbt_enabled of this HostDetail.


        :return: The mssql_cbt_enabled of this HostDetail.
        :rtype: MssqlCbtStatusType
        """
        return self._mssql_cbt_enabled

    @mssql_cbt_enabled.setter
    def mssql_cbt_enabled(self, mssql_cbt_enabled):
        """Sets the mssql_cbt_enabled of this HostDetail.


        :param mssql_cbt_enabled: The mssql_cbt_enabled of this HostDetail.
        :type mssql_cbt_enabled: MssqlCbtStatusType
        """

        self._mssql_cbt_enabled = mssql_cbt_enabled

    @property
    def name(self):
        """Gets the name of this HostDetail.

        IP address or hostname of the host.

        :return: The name of this HostDetail.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this HostDetail.

        IP address or hostname of the host.

        :param name: The name of this HostDetail.
        :type name: str
        """

        self._name = name

    @property
    def nas_base_config(self):
        """Gets the nas_base_config of this HostDetail.


        :return: The nas_base_config of this HostDetail.
        :rtype: NasBaseConfig
        """
        return self._nas_base_config

    @nas_base_config.setter
    def nas_base_config(self, nas_base_config):
        """Sets the nas_base_config of this HostDetail.


        :param nas_base_config: The nas_base_config of this HostDetail.
        :type nas_base_config: NasBaseConfig
        """

        self._nas_base_config = nas_base_config

    @property
    def operating_system(self):
        """Gets the operating_system of this HostDetail.

        Operating system of the host. One of Windows, Linux, AIX, HPUX, and SunOS.

        :return: The operating_system of this HostDetail.
        :rtype: str
        """
        return self._operating_system

    @operating_system.setter
    def operating_system(self, operating_system):
        """Sets the operating_system of this HostDetail.

        Operating system of the host. One of Windows, Linux, AIX, HPUX, and SunOS.

        :param operating_system: The operating_system of this HostDetail.
        :type operating_system: str
        """

        self._operating_system = operating_system

    @property
    def operating_system_type(self):
        """Gets the operating_system_type of this HostDetail.

        The operating system of the host. Possible choices are Windows, Linux, AIX, HPUX, SunOS.

        :return: The operating_system_type of this HostDetail.
        :rtype: str
        """
        return self._operating_system_type

    @operating_system_type.setter
    def operating_system_type(self, operating_system_type):
        """Sets the operating_system_type of this HostDetail.

        The operating system of the host. Possible choices are Windows, Linux, AIX, HPUX, SunOS.

        :param operating_system_type: The operating_system_type of this HostDetail.
        :type operating_system_type: str
        """

        self._operating_system_type = operating_system_type

    @property
    def organization_id(self):
        """Gets the organization_id of this HostDetail.

        The ID of the organization to which the host is assigned (set by envoy).

        :return: The organization_id of this HostDetail.
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """Sets the organization_id of this HostDetail.

        The ID of the organization to which the host is assigned (set by envoy).

        :param organization_id: The organization_id of this HostDetail.
        :type organization_id: str
        """

        self._organization_id = organization_id

    @property
    def organization_name(self):
        """Gets the organization_name of this HostDetail.

        The name of the organization to which the host is assigned (set by envoy).

        :return: The organization_name of this HostDetail.
        :rtype: str
        """
        return self._organization_name

    @organization_name.setter
    def organization_name(self, organization_name):
        """Sets the organization_name of this HostDetail.

        The name of the organization to which the host is assigned (set by envoy).

        :param organization_name: The organization_name of this HostDetail.
        :type organization_name: str
        """

        self._organization_name = organization_name

    @property
    def primary_cluster_id(self):
        """Gets the primary_cluster_id of this HostDetail.

        ID of the Rubrik cluster to which the host belongs.

        :return: The primary_cluster_id of this HostDetail.
        :rtype: str
        """
        return self._primary_cluster_id

    @primary_cluster_id.setter
    def primary_cluster_id(self, primary_cluster_id):
        """Sets the primary_cluster_id of this HostDetail.

        ID of the Rubrik cluster to which the host belongs.

        :param primary_cluster_id: The primary_cluster_id of this HostDetail.
        :type primary_cluster_id: str
        """

        self._primary_cluster_id = primary_cluster_id

    @property
    def status(self):
        """Gets the status of this HostDetail.

        Specifies the connect status for the host. Status is Refreshing while discovery is running or Connected once discovery was successful and the host is available.

        :return: The status of this HostDetail.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this HostDetail.

        Specifies the connect status for the host. Status is Refreshing while discovery is running or Connected once discovery was successful and the host is available.

        :param status: The status of this HostDetail.
        :type status: str
        """

        self._status = status

    @property
    def agent_id(self):
        """Gets the agent_id of this HostDetail.

        ID of the Rubrik Backup Service (RBS) installed on the host.

        :return: The agent_id of this HostDetail.
        :rtype: str
        """
        return self._agent_id

    @agent_id.setter
    def agent_id(self, agent_id):
        """Sets the agent_id of this HostDetail.

        ID of the Rubrik Backup Service (RBS) installed on the host.

        :param agent_id: The agent_id of this HostDetail.
        :type agent_id: str
        """

        self._agent_id = agent_id

    @property
    def compression_enabled(self):
        """Gets the compression_enabled of this HostDetail.

        Indicates if compression is enabled while transferring data between the host and the Rubrik cluster.

        :return: The compression_enabled of this HostDetail.
        :rtype: bool
        """
        return self._compression_enabled

    @compression_enabled.setter
    def compression_enabled(self, compression_enabled):
        """Sets the compression_enabled of this HostDetail.

        Indicates if compression is enabled while transferring data between the host and the Rubrik cluster.

        :param compression_enabled: The compression_enabled of this HostDetail.
        :type compression_enabled: bool
        """

        self._compression_enabled = compression_enabled

    @property
    def host_vfd_driver_state(self):
        """Gets the host_vfd_driver_state of this HostDetail.


        :return: The host_vfd_driver_state of this HostDetail.
        :rtype: HostVfdState
        """
        return self._host_vfd_driver_state

    @host_vfd_driver_state.setter
    def host_vfd_driver_state(self, host_vfd_driver_state):
        """Sets the host_vfd_driver_state of this HostDetail.


        :param host_vfd_driver_state: The host_vfd_driver_state of this HostDetail.
        :type host_vfd_driver_state: HostVfdState
        """
        if host_vfd_driver_state is None:
            raise ValueError("Invalid value for `host_vfd_driver_state`, must not be `None`")

        self._host_vfd_driver_state = host_vfd_driver_state

    @property
    def host_vfd_enabled(self):
        """Gets the host_vfd_enabled of this HostDetail.


        :return: The host_vfd_enabled of this HostDetail.
        :rtype: HostVfdInstallConfig
        """
        return self._host_vfd_enabled

    @host_vfd_enabled.setter
    def host_vfd_enabled(self, host_vfd_enabled):
        """Sets the host_vfd_enabled of this HostDetail.


        :param host_vfd_enabled: The host_vfd_enabled of this HostDetail.
        :type host_vfd_enabled: HostVfdInstallConfig
        """

        self._host_vfd_enabled = host_vfd_enabled

    @property
    def is_oracle_host(self):
        """Gets the is_oracle_host of this HostDetail.

        Specifies whether this is an Oracle host. This indicates whether to show Oracle discovery fields in the UI. 

        :return: The is_oracle_host of this HostDetail.
        :rtype: bool
        """
        return self._is_oracle_host

    @is_oracle_host.setter
    def is_oracle_host(self, is_oracle_host):
        """Sets the is_oracle_host of this HostDetail.

        Specifies whether this is an Oracle host. This indicates whether to show Oracle discovery fields in the UI. 

        :param is_oracle_host: The is_oracle_host of this HostDetail.
        :type is_oracle_host: bool
        """

        self._is_oracle_host = is_oracle_host

    @property
    def is_relic(self):
        """Gets the is_relic of this HostDetail.

        A relic host is deleted, but still may have snapshots associated with its children (e.g. Fileset).

        :return: The is_relic of this HostDetail.
        :rtype: bool
        """
        return self._is_relic

    @is_relic.setter
    def is_relic(self, is_relic):
        """Sets the is_relic of this HostDetail.

        A relic host is deleted, but still may have snapshots associated with its children (e.g. Fileset).

        :param is_relic: The is_relic of this HostDetail.
        :type is_relic: bool
        """
        if is_relic is None:
            raise ValueError("Invalid value for `is_relic`, must not be `None`")

        self._is_relic = is_relic

    @property
    def mssql_cbt_driver_installed(self):
        """Gets the mssql_cbt_driver_installed of this HostDetail.

        Indicates if the CBT driver is installed for SQL Server instances on the specified Windows host. Set to true when the CBT driver is installed. Set to false when the CBT driver is not installed.

        :return: The mssql_cbt_driver_installed of this HostDetail.
        :rtype: bool
        """
        return self._mssql_cbt_driver_installed

    @mssql_cbt_driver_installed.setter
    def mssql_cbt_driver_installed(self, mssql_cbt_driver_installed):
        """Sets the mssql_cbt_driver_installed of this HostDetail.

        Indicates if the CBT driver is installed for SQL Server instances on the specified Windows host. Set to true when the CBT driver is installed. Set to false when the CBT driver is not installed.

        :param mssql_cbt_driver_installed: The mssql_cbt_driver_installed of this HostDetail.
        :type mssql_cbt_driver_installed: bool
        """
        if mssql_cbt_driver_installed is None:
            raise ValueError("Invalid value for `mssql_cbt_driver_installed`, must not be `None`")

        self._mssql_cbt_driver_installed = mssql_cbt_driver_installed

    @property
    def oracle_query_user(self):
        """Gets the oracle_query_user of this HostDetail.

        Specifies the Oracle username for an account with query privileges.

        :return: The oracle_query_user of this HostDetail.
        :rtype: str
        """
        return self._oracle_query_user

    @oracle_query_user.setter
    def oracle_query_user(self, oracle_query_user):
        """Sets the oracle_query_user of this HostDetail.

        Specifies the Oracle username for an account with query privileges.

        :param oracle_query_user: The oracle_query_user of this HostDetail.
        :type oracle_query_user: str
        """

        self._oracle_query_user = oracle_query_user

    @property
    def oracle_sys_dba_user(self):
        """Gets the oracle_sys_dba_user of this HostDetail.

        Specifies the Oracle username for an account with sysdba privileges. 

        :return: The oracle_sys_dba_user of this HostDetail.
        :rtype: str
        """
        return self._oracle_sys_dba_user

    @oracle_sys_dba_user.setter
    def oracle_sys_dba_user(self, oracle_sys_dba_user):
        """Sets the oracle_sys_dba_user of this HostDetail.

        Specifies the Oracle username for an account with sysdba privileges. 

        :param oracle_sys_dba_user: The oracle_sys_dba_user of this HostDetail.
        :type oracle_sys_dba_user: str
        """

        self._oracle_sys_dba_user = oracle_sys_dba_user
