# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class VmwareVdiskForceFullInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, should_dedupe: bool=True, virtual_disk_id: str=None):
        """VmwareVdiskForceFullInfo - a model defined in OpenAPI

        :param should_dedupe: The should_dedupe of this VmwareVdiskForceFullInfo.
        :param virtual_disk_id: The virtual_disk_id of this VmwareVdiskForceFullInfo.
        """
        self.openapi_types = {
            'should_dedupe': bool,
            'virtual_disk_id': str
        }

        self.attribute_map = {
            'should_dedupe': 'shouldDedupe',
            'virtual_disk_id': 'virtualDiskId'
        }

        self._should_dedupe = should_dedupe
        self._virtual_disk_id = virtual_disk_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VmwareVdiskForceFullInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VmwareVdiskForceFullInfo of this VmwareVdiskForceFullInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def should_dedupe(self):
        """Gets the should_dedupe of this VmwareVdiskForceFullInfo.

        Specifies whether deduplication should be enabled for the forced full snapshot of the virtual disk.

        :return: The should_dedupe of this VmwareVdiskForceFullInfo.
        :rtype: bool
        """
        return self._should_dedupe

    @should_dedupe.setter
    def should_dedupe(self, should_dedupe):
        """Sets the should_dedupe of this VmwareVdiskForceFullInfo.

        Specifies whether deduplication should be enabled for the forced full snapshot of the virtual disk.

        :param should_dedupe: The should_dedupe of this VmwareVdiskForceFullInfo.
        :type should_dedupe: bool
        """
        if should_dedupe is None:
            raise ValueError("Invalid value for `should_dedupe`, must not be `None`")

        self._should_dedupe = should_dedupe

    @property
    def virtual_disk_id(self):
        """Gets the virtual_disk_id of this VmwareVdiskForceFullInfo.

        Virtual disk ID within the VMware virtual machine.

        :return: The virtual_disk_id of this VmwareVdiskForceFullInfo.
        :rtype: str
        """
        return self._virtual_disk_id

    @virtual_disk_id.setter
    def virtual_disk_id(self, virtual_disk_id):
        """Sets the virtual_disk_id of this VmwareVdiskForceFullInfo.

        Virtual disk ID within the VMware virtual machine.

        :param virtual_disk_id: The virtual_disk_id of this VmwareVdiskForceFullInfo.
        :type virtual_disk_id: str
        """
        if virtual_disk_id is None:
            raise ValueError("Invalid value for `virtual_disk_id`, must not be `None`")

        self._virtual_disk_id = virtual_disk_id
