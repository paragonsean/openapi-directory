# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.sap_hana_system_data_path_spec import SapHanaSystemDataPathSpec
from openapi_server import util


class SapHanaSystemConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data_path_spec: SapHanaSystemDataPathSpec=None, host_ids: List[str]=None, instance_number: str=None, password: str=None, sid: str=None, username: str=None):
        """SapHanaSystemConfig - a model defined in OpenAPI

        :param data_path_spec: The data_path_spec of this SapHanaSystemConfig.
        :param host_ids: The host_ids of this SapHanaSystemConfig.
        :param instance_number: The instance_number of this SapHanaSystemConfig.
        :param password: The password of this SapHanaSystemConfig.
        :param sid: The sid of this SapHanaSystemConfig.
        :param username: The username of this SapHanaSystemConfig.
        """
        self.openapi_types = {
            'data_path_spec': SapHanaSystemDataPathSpec,
            'host_ids': List[str],
            'instance_number': str,
            'password': str,
            'sid': str,
            'username': str
        }

        self.attribute_map = {
            'data_path_spec': 'dataPathSpec',
            'host_ids': 'hostIds',
            'instance_number': 'instanceNumber',
            'password': 'password',
            'sid': 'sid',
            'username': 'username'
        }

        self._data_path_spec = data_path_spec
        self._host_ids = host_ids
        self._instance_number = instance_number
        self._password = password
        self._sid = sid
        self._username = username

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SapHanaSystemConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SapHanaSystemConfig of this SapHanaSystemConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data_path_spec(self):
        """Gets the data_path_spec of this SapHanaSystemConfig.


        :return: The data_path_spec of this SapHanaSystemConfig.
        :rtype: SapHanaSystemDataPathSpec
        """
        return self._data_path_spec

    @data_path_spec.setter
    def data_path_spec(self, data_path_spec):
        """Sets the data_path_spec of this SapHanaSystemConfig.


        :param data_path_spec: The data_path_spec of this SapHanaSystemConfig.
        :type data_path_spec: SapHanaSystemDataPathSpec
        """

        self._data_path_spec = data_path_spec

    @property
    def host_ids(self):
        """Gets the host_ids of this SapHanaSystemConfig.

        The SAP HANA system hosts.

        :return: The host_ids of this SapHanaSystemConfig.
        :rtype: List[str]
        """
        return self._host_ids

    @host_ids.setter
    def host_ids(self, host_ids):
        """Sets the host_ids of this SapHanaSystemConfig.

        The SAP HANA system hosts.

        :param host_ids: The host_ids of this SapHanaSystemConfig.
        :type host_ids: List[str]
        """
        if host_ids is None:
            raise ValueError("Invalid value for `host_ids`, must not be `None`")

        self._host_ids = host_ids

    @property
    def instance_number(self):
        """Gets the instance_number of this SapHanaSystemConfig.

        The instance number of the SAP HANA system.

        :return: The instance_number of this SapHanaSystemConfig.
        :rtype: str
        """
        return self._instance_number

    @instance_number.setter
    def instance_number(self, instance_number):
        """Sets the instance_number of this SapHanaSystemConfig.

        The instance number of the SAP HANA system.

        :param instance_number: The instance_number of this SapHanaSystemConfig.
        :type instance_number: str
        """
        if instance_number is None:
            raise ValueError("Invalid value for `instance_number`, must not be `None`")

        self._instance_number = instance_number

    @property
    def password(self):
        """Gets the password of this SapHanaSystemConfig.

        The password of the SAP HANA system.

        :return: The password of this SapHanaSystemConfig.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this SapHanaSystemConfig.

        The password of the SAP HANA system.

        :param password: The password of this SapHanaSystemConfig.
        :type password: str
        """
        if password is None:
            raise ValueError("Invalid value for `password`, must not be `None`")

        self._password = password

    @property
    def sid(self):
        """Gets the sid of this SapHanaSystemConfig.

        The SAP System Identification (SID) code for the SAP HANA system.

        :return: The sid of this SapHanaSystemConfig.
        :rtype: str
        """
        return self._sid

    @sid.setter
    def sid(self, sid):
        """Sets the sid of this SapHanaSystemConfig.

        The SAP System Identification (SID) code for the SAP HANA system.

        :param sid: The sid of this SapHanaSystemConfig.
        :type sid: str
        """
        if sid is None:
            raise ValueError("Invalid value for `sid`, must not be `None`")

        self._sid = sid

    @property
    def username(self):
        """Gets the username of this SapHanaSystemConfig.

        The username of the SAP HANA system.

        :return: The username of this SapHanaSystemConfig.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this SapHanaSystemConfig.

        The username of the SAP HANA system.

        :param username: The username of this SapHanaSystemConfig.
        :type username: str
        """
        if username is None:
            raise ValueError("Invalid value for `username`, must not be `None`")

        self._username = username
