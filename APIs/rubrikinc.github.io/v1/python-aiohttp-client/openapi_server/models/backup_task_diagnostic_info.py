# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.diagnostic_task_status import DiagnosticTaskStatus
from openapi_server import util


class BackupTaskDiagnosticInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, expected_end_time: datetime=None, queue_time: datetime=None, task_status: DiagnosticTaskStatus=None):
        """BackupTaskDiagnosticInfo - a model defined in OpenAPI

        :param expected_end_time: The expected_end_time of this BackupTaskDiagnosticInfo.
        :param queue_time: The queue_time of this BackupTaskDiagnosticInfo.
        :param task_status: The task_status of this BackupTaskDiagnosticInfo.
        """
        self.openapi_types = {
            'expected_end_time': datetime,
            'queue_time': datetime,
            'task_status': DiagnosticTaskStatus
        }

        self.attribute_map = {
            'expected_end_time': 'expectedEndTime',
            'queue_time': 'queueTime',
            'task_status': 'taskStatus'
        }

        self._expected_end_time = expected_end_time
        self._queue_time = queue_time
        self._task_status = task_status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BackupTaskDiagnosticInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BackupTaskDiagnosticInfo of this BackupTaskDiagnosticInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def expected_end_time(self):
        """Gets the expected_end_time of this BackupTaskDiagnosticInfo.

        The expected completion time of the task.

        :return: The expected_end_time of this BackupTaskDiagnosticInfo.
        :rtype: datetime
        """
        return self._expected_end_time

    @expected_end_time.setter
    def expected_end_time(self, expected_end_time):
        """Sets the expected_end_time of this BackupTaskDiagnosticInfo.

        The expected completion time of the task.

        :param expected_end_time: The expected_end_time of this BackupTaskDiagnosticInfo.
        :type expected_end_time: datetime
        """

        self._expected_end_time = expected_end_time

    @property
    def queue_time(self):
        """Gets the queue_time of this BackupTaskDiagnosticInfo.

        The scheduled start time of the task.

        :return: The queue_time of this BackupTaskDiagnosticInfo.
        :rtype: datetime
        """
        return self._queue_time

    @queue_time.setter
    def queue_time(self, queue_time):
        """Sets the queue_time of this BackupTaskDiagnosticInfo.

        The scheduled start time of the task.

        :param queue_time: The queue_time of this BackupTaskDiagnosticInfo.
        :type queue_time: datetime
        """

        self._queue_time = queue_time

    @property
    def task_status(self):
        """Gets the task_status of this BackupTaskDiagnosticInfo.


        :return: The task_status of this BackupTaskDiagnosticInfo.
        :rtype: DiagnosticTaskStatus
        """
        return self._task_status

    @task_status.setter
    def task_status(self, task_status):
        """Sets the task_status of this BackupTaskDiagnosticInfo.


        :param task_status: The task_status of this BackupTaskDiagnosticInfo.
        :type task_status: DiagnosticTaskStatus
        """
        if task_status is None:
            raise ValueError("Invalid value for `task_status`, must not be `None`")

        self._task_status = task_status
