# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.fileset_array_spec import FilesetArraySpec
from openapi_server import util


class FilesetCreate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, array_spec: FilesetArraySpec=None, enable_hardlink_support: bool=None, enable_symlink_resolution: bool=None, failover_cluster_app_id: str=None, host_id: str=None, is_passthrough: bool=None, share_id: str=None, snap_mirror_label_for_full_backup: str=None, snap_mirror_label_for_incremental_backup: str=None, template_id: str=None):
        """FilesetCreate - a model defined in OpenAPI

        :param array_spec: The array_spec of this FilesetCreate.
        :param enable_hardlink_support: The enable_hardlink_support of this FilesetCreate.
        :param enable_symlink_resolution: The enable_symlink_resolution of this FilesetCreate.
        :param failover_cluster_app_id: The failover_cluster_app_id of this FilesetCreate.
        :param host_id: The host_id of this FilesetCreate.
        :param is_passthrough: The is_passthrough of this FilesetCreate.
        :param share_id: The share_id of this FilesetCreate.
        :param snap_mirror_label_for_full_backup: The snap_mirror_label_for_full_backup of this FilesetCreate.
        :param snap_mirror_label_for_incremental_backup: The snap_mirror_label_for_incremental_backup of this FilesetCreate.
        :param template_id: The template_id of this FilesetCreate.
        """
        self.openapi_types = {
            'array_spec': FilesetArraySpec,
            'enable_hardlink_support': bool,
            'enable_symlink_resolution': bool,
            'failover_cluster_app_id': str,
            'host_id': str,
            'is_passthrough': bool,
            'share_id': str,
            'snap_mirror_label_for_full_backup': str,
            'snap_mirror_label_for_incremental_backup': str,
            'template_id': str
        }

        self.attribute_map = {
            'array_spec': 'arraySpec',
            'enable_hardlink_support': 'enableHardlinkSupport',
            'enable_symlink_resolution': 'enableSymlinkResolution',
            'failover_cluster_app_id': 'failoverClusterAppId',
            'host_id': 'hostId',
            'is_passthrough': 'isPassthrough',
            'share_id': 'shareId',
            'snap_mirror_label_for_full_backup': 'snapMirrorLabelForFullBackup',
            'snap_mirror_label_for_incremental_backup': 'snapMirrorLabelForIncrementalBackup',
            'template_id': 'templateId'
        }

        self._array_spec = array_spec
        self._enable_hardlink_support = enable_hardlink_support
        self._enable_symlink_resolution = enable_symlink_resolution
        self._failover_cluster_app_id = failover_cluster_app_id
        self._host_id = host_id
        self._is_passthrough = is_passthrough
        self._share_id = share_id
        self._snap_mirror_label_for_full_backup = snap_mirror_label_for_full_backup
        self._snap_mirror_label_for_incremental_backup = snap_mirror_label_for_incremental_backup
        self._template_id = template_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FilesetCreate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FilesetCreate of this FilesetCreate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def array_spec(self):
        """Gets the array_spec of this FilesetCreate.


        :return: The array_spec of this FilesetCreate.
        :rtype: FilesetArraySpec
        """
        return self._array_spec

    @array_spec.setter
    def array_spec(self, array_spec):
        """Sets the array_spec of this FilesetCreate.


        :param array_spec: The array_spec of this FilesetCreate.
        :type array_spec: FilesetArraySpec
        """

        self._array_spec = array_spec

    @property
    def enable_hardlink_support(self):
        """Gets the enable_hardlink_support of this FilesetCreate.

        A Boolean value that determines whether to recognize and dedupe hardlinks in a fileset. When 'true,' performs a hardlink deduplication. When 'false,' performs a normal backup that treats hardlinks as normal files. If not specified, this defaults to false.

        :return: The enable_hardlink_support of this FilesetCreate.
        :rtype: bool
        """
        return self._enable_hardlink_support

    @enable_hardlink_support.setter
    def enable_hardlink_support(self, enable_hardlink_support):
        """Sets the enable_hardlink_support of this FilesetCreate.

        A Boolean value that determines whether to recognize and dedupe hardlinks in a fileset. When 'true,' performs a hardlink deduplication. When 'false,' performs a normal backup that treats hardlinks as normal files. If not specified, this defaults to false.

        :param enable_hardlink_support: The enable_hardlink_support of this FilesetCreate.
        :type enable_hardlink_support: bool
        """

        self._enable_hardlink_support = enable_hardlink_support

    @property
    def enable_symlink_resolution(self):
        """Gets the enable_symlink_resolution of this FilesetCreate.

        A Boolean value that determines whether to resolve symlink in a fileset. When 'true,' performs a symlink resolution. When 'false,' performs no symlink resolution. If not specified, this defaults to false.

        :return: The enable_symlink_resolution of this FilesetCreate.
        :rtype: bool
        """
        return self._enable_symlink_resolution

    @enable_symlink_resolution.setter
    def enable_symlink_resolution(self, enable_symlink_resolution):
        """Sets the enable_symlink_resolution of this FilesetCreate.

        A Boolean value that determines whether to resolve symlink in a fileset. When 'true,' performs a symlink resolution. When 'false,' performs no symlink resolution. If not specified, this defaults to false.

        :param enable_symlink_resolution: The enable_symlink_resolution of this FilesetCreate.
        :type enable_symlink_resolution: bool
        """

        self._enable_symlink_resolution = enable_symlink_resolution

    @property
    def failover_cluster_app_id(self):
        """Gets the failover_cluster_app_id of this FilesetCreate.

        ID of the failover cluster app.

        :return: The failover_cluster_app_id of this FilesetCreate.
        :rtype: str
        """
        return self._failover_cluster_app_id

    @failover_cluster_app_id.setter
    def failover_cluster_app_id(self, failover_cluster_app_id):
        """Sets the failover_cluster_app_id of this FilesetCreate.

        ID of the failover cluster app.

        :param failover_cluster_app_id: The failover_cluster_app_id of this FilesetCreate.
        :type failover_cluster_app_id: str
        """

        self._failover_cluster_app_id = failover_cluster_app_id

    @property
    def host_id(self):
        """Gets the host_id of this FilesetCreate.


        :return: The host_id of this FilesetCreate.
        :rtype: str
        """
        return self._host_id

    @host_id.setter
    def host_id(self, host_id):
        """Sets the host_id of this FilesetCreate.


        :param host_id: The host_id of this FilesetCreate.
        :type host_id: str
        """

        self._host_id = host_id

    @property
    def is_passthrough(self):
        """Gets the is_passthrough of this FilesetCreate.

        A Boolean value that determines whether to take a direct archive backup. When 'true,' performs a direct archive backup. When 'false,' performs a normal backup. If not specified, this defaults to false.

        :return: The is_passthrough of this FilesetCreate.
        :rtype: bool
        """
        return self._is_passthrough

    @is_passthrough.setter
    def is_passthrough(self, is_passthrough):
        """Sets the is_passthrough of this FilesetCreate.

        A Boolean value that determines whether to take a direct archive backup. When 'true,' performs a direct archive backup. When 'false,' performs a normal backup. If not specified, this defaults to false.

        :param is_passthrough: The is_passthrough of this FilesetCreate.
        :type is_passthrough: bool
        """

        self._is_passthrough = is_passthrough

    @property
    def share_id(self):
        """Gets the share_id of this FilesetCreate.


        :return: The share_id of this FilesetCreate.
        :rtype: str
        """
        return self._share_id

    @share_id.setter
    def share_id(self, share_id):
        """Sets the share_id of this FilesetCreate.


        :param share_id: The share_id of this FilesetCreate.
        :type share_id: str
        """

        self._share_id = share_id

    @property
    def snap_mirror_label_for_full_backup(self):
        """Gets the snap_mirror_label_for_full_backup of this FilesetCreate.

        Rubrik CDM uses a prefix match to select the latest SnapMirror snapshot that matches this value during a full backup of a SnapMirror destination share.

        :return: The snap_mirror_label_for_full_backup of this FilesetCreate.
        :rtype: str
        """
        return self._snap_mirror_label_for_full_backup

    @snap_mirror_label_for_full_backup.setter
    def snap_mirror_label_for_full_backup(self, snap_mirror_label_for_full_backup):
        """Sets the snap_mirror_label_for_full_backup of this FilesetCreate.

        Rubrik CDM uses a prefix match to select the latest SnapMirror snapshot that matches this value during a full backup of a SnapMirror destination share.

        :param snap_mirror_label_for_full_backup: The snap_mirror_label_for_full_backup of this FilesetCreate.
        :type snap_mirror_label_for_full_backup: str
        """

        self._snap_mirror_label_for_full_backup = snap_mirror_label_for_full_backup

    @property
    def snap_mirror_label_for_incremental_backup(self):
        """Gets the snap_mirror_label_for_incremental_backup of this FilesetCreate.

        Rubrik CDM selects the latest SnapMirror snapshot that matches this value using a prefix match during an incremental backup of a SnapMirror destination share.

        :return: The snap_mirror_label_for_incremental_backup of this FilesetCreate.
        :rtype: str
        """
        return self._snap_mirror_label_for_incremental_backup

    @snap_mirror_label_for_incremental_backup.setter
    def snap_mirror_label_for_incremental_backup(self, snap_mirror_label_for_incremental_backup):
        """Sets the snap_mirror_label_for_incremental_backup of this FilesetCreate.

        Rubrik CDM selects the latest SnapMirror snapshot that matches this value using a prefix match during an incremental backup of a SnapMirror destination share.

        :param snap_mirror_label_for_incremental_backup: The snap_mirror_label_for_incremental_backup of this FilesetCreate.
        :type snap_mirror_label_for_incremental_backup: str
        """

        self._snap_mirror_label_for_incremental_backup = snap_mirror_label_for_incremental_backup

    @property
    def template_id(self):
        """Gets the template_id of this FilesetCreate.


        :return: The template_id of this FilesetCreate.
        :rtype: str
        """
        return self._template_id

    @template_id.setter
    def template_id(self, template_id):
        """Sets the template_id of this FilesetCreate.


        :param template_id: The template_id of this FilesetCreate.
        :type template_id: str
        """
        if template_id is None:
            raise ValueError("Invalid value for `template_id`, must not be `None`")

        self._template_id = template_id
