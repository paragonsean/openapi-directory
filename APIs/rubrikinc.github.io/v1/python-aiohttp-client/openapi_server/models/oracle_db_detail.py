# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.backup_task_diagnostic_info import BackupTaskDiagnosticInfo
from openapi_server.models.configured_sla_type import ConfiguredSlaType
from openapi_server.models.data_guard_group_member import DataGuardGroupMember
from openapi_server.models.data_guard_type import DataGuardType
from openapi_server.models.host_info import HostInfo
from openapi_server.models.managed_hierarchy_object_ancestor import ManagedHierarchyObjectAncestor
from openapi_server.models.managed_object_pending_sla_info import ManagedObjectPendingSlaInfo
from openapi_server.models.oracle_instance_properties import OracleInstanceProperties
from openapi_server.models.oracle_last_validation_result import OracleLastValidationResult
from openapi_server import util


class OracleDbDetail(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, configured_sla_domain_id: str=None, configured_sla_domain_name: str=None, configured_sla_domain_type: ConfiguredSlaType=None, id: str=None, is_configured_sla_domain_retention_locked: bool=None, name: str=None, primary_cluster_id: str=None, sla_last_update_time: datetime=None, effective_sla_domain_id: str=None, effective_sla_domain_name: str=None, effective_sla_domain_polaris_managed_id: str=None, effective_sla_source_object_id: str=None, effective_sla_source_object_name: str=None, is_effective_sla_domain_retention_locked: bool=None, retention_sla_domain_id: str=None, sla_assignment: str=None, archive_log_destinations: List[str]=None, current_backup_task_info: BackupTaskDiagnosticInfo=None, data_guard_group_id: str=None, data_guard_group_members: List[DataGuardGroupMember]=None, data_guard_group_name: str=None, data_guard_type: DataGuardType=None, database_role: str=None, db_unique_name: str=None, host_log_retention_hours: int=None, include_backup_task_info: bool=None, infra_path: List[ManagedHierarchyObjectAncestor]=None, instances: List[OracleInstanceProperties]=None, is_archive_log_mode_enabled: bool=None, is_db_local_to_the_cluster: bool=None, is_primary: bool=None, is_relic: bool=None, last_snapshot_time: datetime=None, log_backup_frequency_in_minutes: int=None, num_instances: int=None, num_missed_snapshot: int=None, num_tablespaces: int=None, rac_id: str=None, rac_name: str=None, sid: str=None, standalone_host_id: str=None, standalone_host_name: str=None, host_mount: str=None, log_retention_hours: int=None, num_channels: int=None, hosts_info: List[HostInfo]=None, is_live_mount: bool=None, last_validation_result: OracleLastValidationResult=None, latest_recovery_point: date=None, oldest_recovery_point: date=None, oracle_home: str=None, pending_sla_domain: ManagedObjectPendingSlaInfo=None, preferred_dg_member_unique_names: List[str]=None, should_backup_from_primary_dg_group_member_only: bool=None, snapshot_count: int=None, tablespaces: List[str]=None):
        """OracleDbDetail - a model defined in OpenAPI

        :param configured_sla_domain_id: The configured_sla_domain_id of this OracleDbDetail.
        :param configured_sla_domain_name: The configured_sla_domain_name of this OracleDbDetail.
        :param configured_sla_domain_type: The configured_sla_domain_type of this OracleDbDetail.
        :param id: The id of this OracleDbDetail.
        :param is_configured_sla_domain_retention_locked: The is_configured_sla_domain_retention_locked of this OracleDbDetail.
        :param name: The name of this OracleDbDetail.
        :param primary_cluster_id: The primary_cluster_id of this OracleDbDetail.
        :param sla_last_update_time: The sla_last_update_time of this OracleDbDetail.
        :param effective_sla_domain_id: The effective_sla_domain_id of this OracleDbDetail.
        :param effective_sla_domain_name: The effective_sla_domain_name of this OracleDbDetail.
        :param effective_sla_domain_polaris_managed_id: The effective_sla_domain_polaris_managed_id of this OracleDbDetail.
        :param effective_sla_source_object_id: The effective_sla_source_object_id of this OracleDbDetail.
        :param effective_sla_source_object_name: The effective_sla_source_object_name of this OracleDbDetail.
        :param is_effective_sla_domain_retention_locked: The is_effective_sla_domain_retention_locked of this OracleDbDetail.
        :param retention_sla_domain_id: The retention_sla_domain_id of this OracleDbDetail.
        :param sla_assignment: The sla_assignment of this OracleDbDetail.
        :param archive_log_destinations: The archive_log_destinations of this OracleDbDetail.
        :param current_backup_task_info: The current_backup_task_info of this OracleDbDetail.
        :param data_guard_group_id: The data_guard_group_id of this OracleDbDetail.
        :param data_guard_group_members: The data_guard_group_members of this OracleDbDetail.
        :param data_guard_group_name: The data_guard_group_name of this OracleDbDetail.
        :param data_guard_type: The data_guard_type of this OracleDbDetail.
        :param database_role: The database_role of this OracleDbDetail.
        :param db_unique_name: The db_unique_name of this OracleDbDetail.
        :param host_log_retention_hours: The host_log_retention_hours of this OracleDbDetail.
        :param include_backup_task_info: The include_backup_task_info of this OracleDbDetail.
        :param infra_path: The infra_path of this OracleDbDetail.
        :param instances: The instances of this OracleDbDetail.
        :param is_archive_log_mode_enabled: The is_archive_log_mode_enabled of this OracleDbDetail.
        :param is_db_local_to_the_cluster: The is_db_local_to_the_cluster of this OracleDbDetail.
        :param is_primary: The is_primary of this OracleDbDetail.
        :param is_relic: The is_relic of this OracleDbDetail.
        :param last_snapshot_time: The last_snapshot_time of this OracleDbDetail.
        :param log_backup_frequency_in_minutes: The log_backup_frequency_in_minutes of this OracleDbDetail.
        :param num_instances: The num_instances of this OracleDbDetail.
        :param num_missed_snapshot: The num_missed_snapshot of this OracleDbDetail.
        :param num_tablespaces: The num_tablespaces of this OracleDbDetail.
        :param rac_id: The rac_id of this OracleDbDetail.
        :param rac_name: The rac_name of this OracleDbDetail.
        :param sid: The sid of this OracleDbDetail.
        :param standalone_host_id: The standalone_host_id of this OracleDbDetail.
        :param standalone_host_name: The standalone_host_name of this OracleDbDetail.
        :param host_mount: The host_mount of this OracleDbDetail.
        :param log_retention_hours: The log_retention_hours of this OracleDbDetail.
        :param num_channels: The num_channels of this OracleDbDetail.
        :param hosts_info: The hosts_info of this OracleDbDetail.
        :param is_live_mount: The is_live_mount of this OracleDbDetail.
        :param last_validation_result: The last_validation_result of this OracleDbDetail.
        :param latest_recovery_point: The latest_recovery_point of this OracleDbDetail.
        :param oldest_recovery_point: The oldest_recovery_point of this OracleDbDetail.
        :param oracle_home: The oracle_home of this OracleDbDetail.
        :param pending_sla_domain: The pending_sla_domain of this OracleDbDetail.
        :param preferred_dg_member_unique_names: The preferred_dg_member_unique_names of this OracleDbDetail.
        :param should_backup_from_primary_dg_group_member_only: The should_backup_from_primary_dg_group_member_only of this OracleDbDetail.
        :param snapshot_count: The snapshot_count of this OracleDbDetail.
        :param tablespaces: The tablespaces of this OracleDbDetail.
        """
        self.openapi_types = {
            'configured_sla_domain_id': str,
            'configured_sla_domain_name': str,
            'configured_sla_domain_type': ConfiguredSlaType,
            'id': str,
            'is_configured_sla_domain_retention_locked': bool,
            'name': str,
            'primary_cluster_id': str,
            'sla_last_update_time': datetime,
            'effective_sla_domain_id': str,
            'effective_sla_domain_name': str,
            'effective_sla_domain_polaris_managed_id': str,
            'effective_sla_source_object_id': str,
            'effective_sla_source_object_name': str,
            'is_effective_sla_domain_retention_locked': bool,
            'retention_sla_domain_id': str,
            'sla_assignment': str,
            'archive_log_destinations': List[str],
            'current_backup_task_info': BackupTaskDiagnosticInfo,
            'data_guard_group_id': str,
            'data_guard_group_members': List[DataGuardGroupMember],
            'data_guard_group_name': str,
            'data_guard_type': DataGuardType,
            'database_role': str,
            'db_unique_name': str,
            'host_log_retention_hours': int,
            'include_backup_task_info': bool,
            'infra_path': List[ManagedHierarchyObjectAncestor],
            'instances': List[OracleInstanceProperties],
            'is_archive_log_mode_enabled': bool,
            'is_db_local_to_the_cluster': bool,
            'is_primary': bool,
            'is_relic': bool,
            'last_snapshot_time': datetime,
            'log_backup_frequency_in_minutes': int,
            'num_instances': int,
            'num_missed_snapshot': int,
            'num_tablespaces': int,
            'rac_id': str,
            'rac_name': str,
            'sid': str,
            'standalone_host_id': str,
            'standalone_host_name': str,
            'host_mount': str,
            'log_retention_hours': int,
            'num_channels': int,
            'hosts_info': List[HostInfo],
            'is_live_mount': bool,
            'last_validation_result': OracleLastValidationResult,
            'latest_recovery_point': date,
            'oldest_recovery_point': date,
            'oracle_home': str,
            'pending_sla_domain': ManagedObjectPendingSlaInfo,
            'preferred_dg_member_unique_names': List[str],
            'should_backup_from_primary_dg_group_member_only': bool,
            'snapshot_count': int,
            'tablespaces': List[str]
        }

        self.attribute_map = {
            'configured_sla_domain_id': 'configuredSlaDomainId',
            'configured_sla_domain_name': 'configuredSlaDomainName',
            'configured_sla_domain_type': 'configuredSlaDomainType',
            'id': 'id',
            'is_configured_sla_domain_retention_locked': 'isConfiguredSlaDomainRetentionLocked',
            'name': 'name',
            'primary_cluster_id': 'primaryClusterId',
            'sla_last_update_time': 'slaLastUpdateTime',
            'effective_sla_domain_id': 'effectiveSlaDomainId',
            'effective_sla_domain_name': 'effectiveSlaDomainName',
            'effective_sla_domain_polaris_managed_id': 'effectiveSlaDomainPolarisManagedId',
            'effective_sla_source_object_id': 'effectiveSlaSourceObjectId',
            'effective_sla_source_object_name': 'effectiveSlaSourceObjectName',
            'is_effective_sla_domain_retention_locked': 'isEffectiveSlaDomainRetentionLocked',
            'retention_sla_domain_id': 'retentionSlaDomainId',
            'sla_assignment': 'slaAssignment',
            'archive_log_destinations': 'archiveLogDestinations',
            'current_backup_task_info': 'currentBackupTaskInfo',
            'data_guard_group_id': 'dataGuardGroupId',
            'data_guard_group_members': 'dataGuardGroupMembers',
            'data_guard_group_name': 'dataGuardGroupName',
            'data_guard_type': 'dataGuardType',
            'database_role': 'databaseRole',
            'db_unique_name': 'dbUniqueName',
            'host_log_retention_hours': 'hostLogRetentionHours',
            'include_backup_task_info': 'includeBackupTaskInfo',
            'infra_path': 'infraPath',
            'instances': 'instances',
            'is_archive_log_mode_enabled': 'isArchiveLogModeEnabled',
            'is_db_local_to_the_cluster': 'isDbLocalToTheCluster',
            'is_primary': 'isPrimary',
            'is_relic': 'isRelic',
            'last_snapshot_time': 'lastSnapshotTime',
            'log_backup_frequency_in_minutes': 'logBackupFrequencyInMinutes',
            'num_instances': 'numInstances',
            'num_missed_snapshot': 'numMissedSnapshot',
            'num_tablespaces': 'numTablespaces',
            'rac_id': 'racId',
            'rac_name': 'racName',
            'sid': 'sid',
            'standalone_host_id': 'standaloneHostId',
            'standalone_host_name': 'standaloneHostName',
            'host_mount': 'hostMount',
            'log_retention_hours': 'logRetentionHours',
            'num_channels': 'numChannels',
            'hosts_info': 'hostsInfo',
            'is_live_mount': 'isLiveMount',
            'last_validation_result': 'lastValidationResult',
            'latest_recovery_point': 'latestRecoveryPoint',
            'oldest_recovery_point': 'oldestRecoveryPoint',
            'oracle_home': 'oracleHome',
            'pending_sla_domain': 'pendingSlaDomain',
            'preferred_dg_member_unique_names': 'preferredDGMemberUniqueNames',
            'should_backup_from_primary_dg_group_member_only': 'shouldBackupFromPrimaryDGGroupMemberOnly',
            'snapshot_count': 'snapshotCount',
            'tablespaces': 'tablespaces'
        }

        self._configured_sla_domain_id = configured_sla_domain_id
        self._configured_sla_domain_name = configured_sla_domain_name
        self._configured_sla_domain_type = configured_sla_domain_type
        self._id = id
        self._is_configured_sla_domain_retention_locked = is_configured_sla_domain_retention_locked
        self._name = name
        self._primary_cluster_id = primary_cluster_id
        self._sla_last_update_time = sla_last_update_time
        self._effective_sla_domain_id = effective_sla_domain_id
        self._effective_sla_domain_name = effective_sla_domain_name
        self._effective_sla_domain_polaris_managed_id = effective_sla_domain_polaris_managed_id
        self._effective_sla_source_object_id = effective_sla_source_object_id
        self._effective_sla_source_object_name = effective_sla_source_object_name
        self._is_effective_sla_domain_retention_locked = is_effective_sla_domain_retention_locked
        self._retention_sla_domain_id = retention_sla_domain_id
        self._sla_assignment = sla_assignment
        self._archive_log_destinations = archive_log_destinations
        self._current_backup_task_info = current_backup_task_info
        self._data_guard_group_id = data_guard_group_id
        self._data_guard_group_members = data_guard_group_members
        self._data_guard_group_name = data_guard_group_name
        self._data_guard_type = data_guard_type
        self._database_role = database_role
        self._db_unique_name = db_unique_name
        self._host_log_retention_hours = host_log_retention_hours
        self._include_backup_task_info = include_backup_task_info
        self._infra_path = infra_path
        self._instances = instances
        self._is_archive_log_mode_enabled = is_archive_log_mode_enabled
        self._is_db_local_to_the_cluster = is_db_local_to_the_cluster
        self._is_primary = is_primary
        self._is_relic = is_relic
        self._last_snapshot_time = last_snapshot_time
        self._log_backup_frequency_in_minutes = log_backup_frequency_in_minutes
        self._num_instances = num_instances
        self._num_missed_snapshot = num_missed_snapshot
        self._num_tablespaces = num_tablespaces
        self._rac_id = rac_id
        self._rac_name = rac_name
        self._sid = sid
        self._standalone_host_id = standalone_host_id
        self._standalone_host_name = standalone_host_name
        self._host_mount = host_mount
        self._log_retention_hours = log_retention_hours
        self._num_channels = num_channels
        self._hosts_info = hosts_info
        self._is_live_mount = is_live_mount
        self._last_validation_result = last_validation_result
        self._latest_recovery_point = latest_recovery_point
        self._oldest_recovery_point = oldest_recovery_point
        self._oracle_home = oracle_home
        self._pending_sla_domain = pending_sla_domain
        self._preferred_dg_member_unique_names = preferred_dg_member_unique_names
        self._should_backup_from_primary_dg_group_member_only = should_backup_from_primary_dg_group_member_only
        self._snapshot_count = snapshot_count
        self._tablespaces = tablespaces

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OracleDbDetail':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OracleDbDetail of this OracleDbDetail.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def configured_sla_domain_id(self):
        """Gets the configured_sla_domain_id of this OracleDbDetail.

        The ID of the SLA Domain configured directly on the Rubrik object.

        :return: The configured_sla_domain_id of this OracleDbDetail.
        :rtype: str
        """
        return self._configured_sla_domain_id

    @configured_sla_domain_id.setter
    def configured_sla_domain_id(self, configured_sla_domain_id):
        """Sets the configured_sla_domain_id of this OracleDbDetail.

        The ID of the SLA Domain configured directly on the Rubrik object.

        :param configured_sla_domain_id: The configured_sla_domain_id of this OracleDbDetail.
        :type configured_sla_domain_id: str
        """
        if configured_sla_domain_id is None:
            raise ValueError("Invalid value for `configured_sla_domain_id`, must not be `None`")

        self._configured_sla_domain_id = configured_sla_domain_id

    @property
    def configured_sla_domain_name(self):
        """Gets the configured_sla_domain_name of this OracleDbDetail.

        The name of the SLA Domain configured directly on the Rubrik object.

        :return: The configured_sla_domain_name of this OracleDbDetail.
        :rtype: str
        """
        return self._configured_sla_domain_name

    @configured_sla_domain_name.setter
    def configured_sla_domain_name(self, configured_sla_domain_name):
        """Sets the configured_sla_domain_name of this OracleDbDetail.

        The name of the SLA Domain configured directly on the Rubrik object.

        :param configured_sla_domain_name: The configured_sla_domain_name of this OracleDbDetail.
        :type configured_sla_domain_name: str
        """
        if configured_sla_domain_name is None:
            raise ValueError("Invalid value for `configured_sla_domain_name`, must not be `None`")

        self._configured_sla_domain_name = configured_sla_domain_name

    @property
    def configured_sla_domain_type(self):
        """Gets the configured_sla_domain_type of this OracleDbDetail.


        :return: The configured_sla_domain_type of this OracleDbDetail.
        :rtype: ConfiguredSlaType
        """
        return self._configured_sla_domain_type

    @configured_sla_domain_type.setter
    def configured_sla_domain_type(self, configured_sla_domain_type):
        """Sets the configured_sla_domain_type of this OracleDbDetail.


        :param configured_sla_domain_type: The configured_sla_domain_type of this OracleDbDetail.
        :type configured_sla_domain_type: ConfiguredSlaType
        """

        self._configured_sla_domain_type = configured_sla_domain_type

    @property
    def id(self):
        """Gets the id of this OracleDbDetail.

        ID assigned to the Oracle database.

        :return: The id of this OracleDbDetail.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this OracleDbDetail.

        ID assigned to the Oracle database.

        :param id: The id of this OracleDbDetail.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def is_configured_sla_domain_retention_locked(self):
        """Gets the is_configured_sla_domain_retention_locked of this OracleDbDetail.

        Indicates whether the configured SLA Domain is Retention Locked. When this value is 'true', the configured SLA Domain is a Retention Lock SLA Domain.

        :return: The is_configured_sla_domain_retention_locked of this OracleDbDetail.
        :rtype: bool
        """
        return self._is_configured_sla_domain_retention_locked

    @is_configured_sla_domain_retention_locked.setter
    def is_configured_sla_domain_retention_locked(self, is_configured_sla_domain_retention_locked):
        """Sets the is_configured_sla_domain_retention_locked of this OracleDbDetail.

        Indicates whether the configured SLA Domain is Retention Locked. When this value is 'true', the configured SLA Domain is a Retention Lock SLA Domain.

        :param is_configured_sla_domain_retention_locked: The is_configured_sla_domain_retention_locked of this OracleDbDetail.
        :type is_configured_sla_domain_retention_locked: bool
        """

        self._is_configured_sla_domain_retention_locked = is_configured_sla_domain_retention_locked

    @property
    def name(self):
        """Gets the name of this OracleDbDetail.

        Service name of the Oracle database.

        :return: The name of this OracleDbDetail.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this OracleDbDetail.

        Service name of the Oracle database.

        :param name: The name of this OracleDbDetail.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def primary_cluster_id(self):
        """Gets the primary_cluster_id of this OracleDbDetail.


        :return: The primary_cluster_id of this OracleDbDetail.
        :rtype: str
        """
        return self._primary_cluster_id

    @primary_cluster_id.setter
    def primary_cluster_id(self, primary_cluster_id):
        """Sets the primary_cluster_id of this OracleDbDetail.


        :param primary_cluster_id: The primary_cluster_id of this OracleDbDetail.
        :type primary_cluster_id: str
        """
        if primary_cluster_id is None:
            raise ValueError("Invalid value for `primary_cluster_id`, must not be `None`")

        self._primary_cluster_id = primary_cluster_id

    @property
    def sla_last_update_time(self):
        """Gets the sla_last_update_time of this OracleDbDetail.

        The UTC time when the SLA Domain was last updated.

        :return: The sla_last_update_time of this OracleDbDetail.
        :rtype: datetime
        """
        return self._sla_last_update_time

    @sla_last_update_time.setter
    def sla_last_update_time(self, sla_last_update_time):
        """Sets the sla_last_update_time of this OracleDbDetail.

        The UTC time when the SLA Domain was last updated.

        :param sla_last_update_time: The sla_last_update_time of this OracleDbDetail.
        :type sla_last_update_time: datetime
        """

        self._sla_last_update_time = sla_last_update_time

    @property
    def effective_sla_domain_id(self):
        """Gets the effective_sla_domain_id of this OracleDbDetail.

        The ID of the SLA Domain that controls the protection of the Rubrik object.

        :return: The effective_sla_domain_id of this OracleDbDetail.
        :rtype: str
        """
        return self._effective_sla_domain_id

    @effective_sla_domain_id.setter
    def effective_sla_domain_id(self, effective_sla_domain_id):
        """Sets the effective_sla_domain_id of this OracleDbDetail.

        The ID of the SLA Domain that controls the protection of the Rubrik object.

        :param effective_sla_domain_id: The effective_sla_domain_id of this OracleDbDetail.
        :type effective_sla_domain_id: str
        """
        if effective_sla_domain_id is None:
            raise ValueError("Invalid value for `effective_sla_domain_id`, must not be `None`")

        self._effective_sla_domain_id = effective_sla_domain_id

    @property
    def effective_sla_domain_name(self):
        """Gets the effective_sla_domain_name of this OracleDbDetail.

        The name of the SLA Domain that controls the protection of the Rubrik object.

        :return: The effective_sla_domain_name of this OracleDbDetail.
        :rtype: str
        """
        return self._effective_sla_domain_name

    @effective_sla_domain_name.setter
    def effective_sla_domain_name(self, effective_sla_domain_name):
        """Sets the effective_sla_domain_name of this OracleDbDetail.

        The name of the SLA Domain that controls the protection of the Rubrik object.

        :param effective_sla_domain_name: The effective_sla_domain_name of this OracleDbDetail.
        :type effective_sla_domain_name: str
        """
        if effective_sla_domain_name is None:
            raise ValueError("Invalid value for `effective_sla_domain_name`, must not be `None`")

        self._effective_sla_domain_name = effective_sla_domain_name

    @property
    def effective_sla_domain_polaris_managed_id(self):
        """Gets the effective_sla_domain_polaris_managed_id of this OracleDbDetail.

        Optional. This field contains the managed ID of of the Polaris-managed effective SLA Domain.

        :return: The effective_sla_domain_polaris_managed_id of this OracleDbDetail.
        :rtype: str
        """
        return self._effective_sla_domain_polaris_managed_id

    @effective_sla_domain_polaris_managed_id.setter
    def effective_sla_domain_polaris_managed_id(self, effective_sla_domain_polaris_managed_id):
        """Sets the effective_sla_domain_polaris_managed_id of this OracleDbDetail.

        Optional. This field contains the managed ID of of the Polaris-managed effective SLA Domain.

        :param effective_sla_domain_polaris_managed_id: The effective_sla_domain_polaris_managed_id of this OracleDbDetail.
        :type effective_sla_domain_polaris_managed_id: str
        """

        self._effective_sla_domain_polaris_managed_id = effective_sla_domain_polaris_managed_id

    @property
    def effective_sla_source_object_id(self):
        """Gets the effective_sla_source_object_id of this OracleDbDetail.

        The ID of the parent of the Rubrik object from which the SLA Domain that controls the protection of Rubrik object is inherited.

        :return: The effective_sla_source_object_id of this OracleDbDetail.
        :rtype: str
        """
        return self._effective_sla_source_object_id

    @effective_sla_source_object_id.setter
    def effective_sla_source_object_id(self, effective_sla_source_object_id):
        """Sets the effective_sla_source_object_id of this OracleDbDetail.

        The ID of the parent of the Rubrik object from which the SLA Domain that controls the protection of Rubrik object is inherited.

        :param effective_sla_source_object_id: The effective_sla_source_object_id of this OracleDbDetail.
        :type effective_sla_source_object_id: str
        """

        self._effective_sla_source_object_id = effective_sla_source_object_id

    @property
    def effective_sla_source_object_name(self):
        """Gets the effective_sla_source_object_name of this OracleDbDetail.

        The name of the parent of the Rubrik object from which the SLA Domain that controls the protection of Rubrik object is inherited.

        :return: The effective_sla_source_object_name of this OracleDbDetail.
        :rtype: str
        """
        return self._effective_sla_source_object_name

    @effective_sla_source_object_name.setter
    def effective_sla_source_object_name(self, effective_sla_source_object_name):
        """Sets the effective_sla_source_object_name of this OracleDbDetail.

        The name of the parent of the Rubrik object from which the SLA Domain that controls the protection of Rubrik object is inherited.

        :param effective_sla_source_object_name: The effective_sla_source_object_name of this OracleDbDetail.
        :type effective_sla_source_object_name: str
        """

        self._effective_sla_source_object_name = effective_sla_source_object_name

    @property
    def is_effective_sla_domain_retention_locked(self):
        """Gets the is_effective_sla_domain_retention_locked of this OracleDbDetail.

        Indicates whether the effective SLA Domain is Retention Locked. When this value is 'true', the effective SLA domain is a Retention Lock SLA Domain.

        :return: The is_effective_sla_domain_retention_locked of this OracleDbDetail.
        :rtype: bool
        """
        return self._is_effective_sla_domain_retention_locked

    @is_effective_sla_domain_retention_locked.setter
    def is_effective_sla_domain_retention_locked(self, is_effective_sla_domain_retention_locked):
        """Sets the is_effective_sla_domain_retention_locked of this OracleDbDetail.

        Indicates whether the effective SLA Domain is Retention Locked. When this value is 'true', the effective SLA domain is a Retention Lock SLA Domain.

        :param is_effective_sla_domain_retention_locked: The is_effective_sla_domain_retention_locked of this OracleDbDetail.
        :type is_effective_sla_domain_retention_locked: bool
        """

        self._is_effective_sla_domain_retention_locked = is_effective_sla_domain_retention_locked

    @property
    def retention_sla_domain_id(self):
        """Gets the retention_sla_domain_id of this OracleDbDetail.

        The ID of the SLA Domain whose retention policy is in use.

        :return: The retention_sla_domain_id of this OracleDbDetail.
        :rtype: str
        """
        return self._retention_sla_domain_id

    @retention_sla_domain_id.setter
    def retention_sla_domain_id(self, retention_sla_domain_id):
        """Sets the retention_sla_domain_id of this OracleDbDetail.

        The ID of the SLA Domain whose retention policy is in use.

        :param retention_sla_domain_id: The retention_sla_domain_id of this OracleDbDetail.
        :type retention_sla_domain_id: str
        """

        self._retention_sla_domain_id = retention_sla_domain_id

    @property
    def sla_assignment(self):
        """Gets the sla_assignment of this OracleDbDetail.

        The SLA assignment type. Direct SLA assignment means that a SLA Domain was configured directly on the Rubrik object by the user. Derived SLA assignment means that the Rubrik object inherits an SLA Domain from its parent Rubrik object.

        :return: The sla_assignment of this OracleDbDetail.
        :rtype: str
        """
        return self._sla_assignment

    @sla_assignment.setter
    def sla_assignment(self, sla_assignment):
        """Sets the sla_assignment of this OracleDbDetail.

        The SLA assignment type. Direct SLA assignment means that a SLA Domain was configured directly on the Rubrik object by the user. Derived SLA assignment means that the Rubrik object inherits an SLA Domain from its parent Rubrik object.

        :param sla_assignment: The sla_assignment of this OracleDbDetail.
        :type sla_assignment: str
        """
        allowed_values = ["Derived", "Direct", "Unassigned"]  # noqa: E501
        if sla_assignment not in allowed_values:
            raise ValueError(
                "Invalid value for `sla_assignment` ({0}), must be one of {1}"
                .format(sla_assignment, allowed_values)
            )

        self._sla_assignment = sla_assignment

    @property
    def archive_log_destinations(self):
        """Gets the archive_log_destinations of this OracleDbDetail.

        An array that contains the archive log destinations for the specified Oracle database.

        :return: The archive_log_destinations of this OracleDbDetail.
        :rtype: List[str]
        """
        return self._archive_log_destinations

    @archive_log_destinations.setter
    def archive_log_destinations(self, archive_log_destinations):
        """Sets the archive_log_destinations of this OracleDbDetail.

        An array that contains the archive log destinations for the specified Oracle database.

        :param archive_log_destinations: The archive_log_destinations of this OracleDbDetail.
        :type archive_log_destinations: List[str]
        """

        self._archive_log_destinations = archive_log_destinations

    @property
    def current_backup_task_info(self):
        """Gets the current_backup_task_info of this OracleDbDetail.


        :return: The current_backup_task_info of this OracleDbDetail.
        :rtype: BackupTaskDiagnosticInfo
        """
        return self._current_backup_task_info

    @current_backup_task_info.setter
    def current_backup_task_info(self, current_backup_task_info):
        """Sets the current_backup_task_info of this OracleDbDetail.


        :param current_backup_task_info: The current_backup_task_info of this OracleDbDetail.
        :type current_backup_task_info: BackupTaskDiagnosticInfo
        """

        self._current_backup_task_info = current_backup_task_info

    @property
    def data_guard_group_id(self):
        """Gets the data_guard_group_id of this OracleDbDetail.

        Rubrik ID of the Data Guard group to which this database belongs.

        :return: The data_guard_group_id of this OracleDbDetail.
        :rtype: str
        """
        return self._data_guard_group_id

    @data_guard_group_id.setter
    def data_guard_group_id(self, data_guard_group_id):
        """Sets the data_guard_group_id of this OracleDbDetail.

        Rubrik ID of the Data Guard group to which this database belongs.

        :param data_guard_group_id: The data_guard_group_id of this OracleDbDetail.
        :type data_guard_group_id: str
        """

        self._data_guard_group_id = data_guard_group_id

    @property
    def data_guard_group_members(self):
        """Gets the data_guard_group_members of this OracleDbDetail.

        List of Data Guard group members.

        :return: The data_guard_group_members of this OracleDbDetail.
        :rtype: List[DataGuardGroupMember]
        """
        return self._data_guard_group_members

    @data_guard_group_members.setter
    def data_guard_group_members(self, data_guard_group_members):
        """Sets the data_guard_group_members of this OracleDbDetail.

        List of Data Guard group members.

        :param data_guard_group_members: The data_guard_group_members of this OracleDbDetail.
        :type data_guard_group_members: List[DataGuardGroupMember]
        """

        self._data_guard_group_members = data_guard_group_members

    @property
    def data_guard_group_name(self):
        """Gets the data_guard_group_name of this OracleDbDetail.

        Name of the Data Guard group to which this database belongs.

        :return: The data_guard_group_name of this OracleDbDetail.
        :rtype: str
        """
        return self._data_guard_group_name

    @data_guard_group_name.setter
    def data_guard_group_name(self, data_guard_group_name):
        """Sets the data_guard_group_name of this OracleDbDetail.

        Name of the Data Guard group to which this database belongs.

        :param data_guard_group_name: The data_guard_group_name of this OracleDbDetail.
        :type data_guard_group_name: str
        """

        self._data_guard_group_name = data_guard_group_name

    @property
    def data_guard_type(self):
        """Gets the data_guard_type of this OracleDbDetail.


        :return: The data_guard_type of this OracleDbDetail.
        :rtype: DataGuardType
        """
        return self._data_guard_type

    @data_guard_type.setter
    def data_guard_type(self, data_guard_type):
        """Sets the data_guard_type of this OracleDbDetail.


        :param data_guard_type: The data_guard_type of this OracleDbDetail.
        :type data_guard_type: DataGuardType
        """

        self._data_guard_type = data_guard_type

    @property
    def database_role(self):
        """Gets the database_role of this OracleDbDetail.

        Current role of the database.

        :return: The database_role of this OracleDbDetail.
        :rtype: str
        """
        return self._database_role

    @database_role.setter
    def database_role(self, database_role):
        """Sets the database_role of this OracleDbDetail.

        Current role of the database.

        :param database_role: The database_role of this OracleDbDetail.
        :type database_role: str
        """

        self._database_role = database_role

    @property
    def db_unique_name(self):
        """Gets the db_unique_name of this OracleDbDetail.

        Unique name for the Oracle database (DB_UNIQUE_NAME).

        :return: The db_unique_name of this OracleDbDetail.
        :rtype: str
        """
        return self._db_unique_name

    @db_unique_name.setter
    def db_unique_name(self, db_unique_name):
        """Sets the db_unique_name of this OracleDbDetail.

        Unique name for the Oracle database (DB_UNIQUE_NAME).

        :param db_unique_name: The db_unique_name of this OracleDbDetail.
        :type db_unique_name: str
        """

        self._db_unique_name = db_unique_name

    @property
    def host_log_retention_hours(self):
        """Gets the host_log_retention_hours of this OracleDbDetail.

        Specifies an interval in hours. The next log snapshot job deletes archived Oracle redo log files whose 'nextTime' field specifies a time more than the specified number of hours ago. To immediately delete archived redo log files regardless of age, specify an interval of -1. To preserve all archived redo log files, specify an interval of -2.

        :return: The host_log_retention_hours of this OracleDbDetail.
        :rtype: int
        """
        return self._host_log_retention_hours

    @host_log_retention_hours.setter
    def host_log_retention_hours(self, host_log_retention_hours):
        """Sets the host_log_retention_hours of this OracleDbDetail.

        Specifies an interval in hours. The next log snapshot job deletes archived Oracle redo log files whose 'nextTime' field specifies a time more than the specified number of hours ago. To immediately delete archived redo log files regardless of age, specify an interval of -1. To preserve all archived redo log files, specify an interval of -2.

        :param host_log_retention_hours: The host_log_retention_hours of this OracleDbDetail.
        :type host_log_retention_hours: int
        """
        if host_log_retention_hours is None:
            raise ValueError("Invalid value for `host_log_retention_hours`, must not be `None`")

        self._host_log_retention_hours = host_log_retention_hours

    @property
    def include_backup_task_info(self):
        """Gets the include_backup_task_info of this OracleDbDetail.

        True/false value indicating if backup task information is included in the response.

        :return: The include_backup_task_info of this OracleDbDetail.
        :rtype: bool
        """
        return self._include_backup_task_info

    @include_backup_task_info.setter
    def include_backup_task_info(self, include_backup_task_info):
        """Sets the include_backup_task_info of this OracleDbDetail.

        True/false value indicating if backup task information is included in the response.

        :param include_backup_task_info: The include_backup_task_info of this OracleDbDetail.
        :type include_backup_task_info: bool
        """

        self._include_backup_task_info = include_backup_task_info

    @property
    def infra_path(self):
        """Gets the infra_path of this OracleDbDetail.

        An array that contains information about the objects in the infrastructure path of a specified Oracle database.

        :return: The infra_path of this OracleDbDetail.
        :rtype: List[ManagedHierarchyObjectAncestor]
        """
        return self._infra_path

    @infra_path.setter
    def infra_path(self, infra_path):
        """Sets the infra_path of this OracleDbDetail.

        An array that contains information about the objects in the infrastructure path of a specified Oracle database.

        :param infra_path: The infra_path of this OracleDbDetail.
        :type infra_path: List[ManagedHierarchyObjectAncestor]
        """
        if infra_path is None:
            raise ValueError("Invalid value for `infra_path`, must not be `None`")

        self._infra_path = infra_path

    @property
    def instances(self):
        """Gets the instances of this OracleDbDetail.

        Details of the instances of the Oracle database.

        :return: The instances of this OracleDbDetail.
        :rtype: List[OracleInstanceProperties]
        """
        return self._instances

    @instances.setter
    def instances(self, instances):
        """Sets the instances of this OracleDbDetail.

        Details of the instances of the Oracle database.

        :param instances: The instances of this OracleDbDetail.
        :type instances: List[OracleInstanceProperties]
        """

        self._instances = instances

    @property
    def is_archive_log_mode_enabled(self):
        """Gets the is_archive_log_mode_enabled of this OracleDbDetail.

        Boolean value that indicates whether the ARCHIVELOG mode is enabled on the Oracle database or not.

        :return: The is_archive_log_mode_enabled of this OracleDbDetail.
        :rtype: bool
        """
        return self._is_archive_log_mode_enabled

    @is_archive_log_mode_enabled.setter
    def is_archive_log_mode_enabled(self, is_archive_log_mode_enabled):
        """Sets the is_archive_log_mode_enabled of this OracleDbDetail.

        Boolean value that indicates whether the ARCHIVELOG mode is enabled on the Oracle database or not.

        :param is_archive_log_mode_enabled: The is_archive_log_mode_enabled of this OracleDbDetail.
        :type is_archive_log_mode_enabled: bool
        """

        self._is_archive_log_mode_enabled = is_archive_log_mode_enabled

    @property
    def is_db_local_to_the_cluster(self):
        """Gets the is_db_local_to_the_cluster of this OracleDbDetail.

        A Boolean value that specifies whether the Oracle database is local to the cluster. When this value is 'true', the Oracle database is local to the cluster.

        :return: The is_db_local_to_the_cluster of this OracleDbDetail.
        :rtype: bool
        """
        return self._is_db_local_to_the_cluster

    @is_db_local_to_the_cluster.setter
    def is_db_local_to_the_cluster(self, is_db_local_to_the_cluster):
        """Sets the is_db_local_to_the_cluster of this OracleDbDetail.

        A Boolean value that specifies whether the Oracle database is local to the cluster. When this value is 'true', the Oracle database is local to the cluster.

        :param is_db_local_to_the_cluster: The is_db_local_to_the_cluster of this OracleDbDetail.
        :type is_db_local_to_the_cluster: bool
        """
        if is_db_local_to_the_cluster is None:
            raise ValueError("Invalid value for `is_db_local_to_the_cluster`, must not be `None`")

        self._is_db_local_to_the_cluster = is_db_local_to_the_cluster

    @property
    def is_primary(self):
        """Gets the is_primary of this OracleDbDetail.

        Indicates whether the current DATABASE_ROLE is PRIMARY which specifies the database is accepting read/write transactions as the primary database in a Data Guard configuration.

        :return: The is_primary of this OracleDbDetail.
        :rtype: bool
        """
        return self._is_primary

    @is_primary.setter
    def is_primary(self, is_primary):
        """Sets the is_primary of this OracleDbDetail.

        Indicates whether the current DATABASE_ROLE is PRIMARY which specifies the database is accepting read/write transactions as the primary database in a Data Guard configuration.

        :param is_primary: The is_primary of this OracleDbDetail.
        :type is_primary: bool
        """

        self._is_primary = is_primary

    @property
    def is_relic(self):
        """Gets the is_relic of this OracleDbDetail.

        Boolean value that indicates whether a Oracle database object is in an archived state and has retained snapshots. Value is true when the object is archived with retained snapshots.

        :return: The is_relic of this OracleDbDetail.
        :rtype: bool
        """
        return self._is_relic

    @is_relic.setter
    def is_relic(self, is_relic):
        """Sets the is_relic of this OracleDbDetail.

        Boolean value that indicates whether a Oracle database object is in an archived state and has retained snapshots. Value is true when the object is archived with retained snapshots.

        :param is_relic: The is_relic of this OracleDbDetail.
        :type is_relic: bool
        """
        if is_relic is None:
            raise ValueError("Invalid value for `is_relic`, must not be `None`")

        self._is_relic = is_relic

    @property
    def last_snapshot_time(self):
        """Gets the last_snapshot_time of this OracleDbDetail.

        The timestamp of the previous snapshot.

        :return: The last_snapshot_time of this OracleDbDetail.
        :rtype: datetime
        """
        return self._last_snapshot_time

    @last_snapshot_time.setter
    def last_snapshot_time(self, last_snapshot_time):
        """Sets the last_snapshot_time of this OracleDbDetail.

        The timestamp of the previous snapshot.

        :param last_snapshot_time: The last_snapshot_time of this OracleDbDetail.
        :type last_snapshot_time: datetime
        """

        self._last_snapshot_time = last_snapshot_time

    @property
    def log_backup_frequency_in_minutes(self):
        """Gets the log_backup_frequency_in_minutes of this OracleDbDetail.

        Specifies an interval in minutes. This interval is the period between successive log backups.

        :return: The log_backup_frequency_in_minutes of this OracleDbDetail.
        :rtype: int
        """
        return self._log_backup_frequency_in_minutes

    @log_backup_frequency_in_minutes.setter
    def log_backup_frequency_in_minutes(self, log_backup_frequency_in_minutes):
        """Sets the log_backup_frequency_in_minutes of this OracleDbDetail.

        Specifies an interval in minutes. This interval is the period between successive log backups.

        :param log_backup_frequency_in_minutes: The log_backup_frequency_in_minutes of this OracleDbDetail.
        :type log_backup_frequency_in_minutes: int
        """
        if log_backup_frequency_in_minutes is None:
            raise ValueError("Invalid value for `log_backup_frequency_in_minutes`, must not be `None`")

        self._log_backup_frequency_in_minutes = log_backup_frequency_in_minutes

    @property
    def num_instances(self):
        """Gets the num_instances of this OracleDbDetail.

        Count of the number of instances of the Oracle database.

        :return: The num_instances of this OracleDbDetail.
        :rtype: int
        """
        return self._num_instances

    @num_instances.setter
    def num_instances(self, num_instances):
        """Sets the num_instances of this OracleDbDetail.

        Count of the number of instances of the Oracle database.

        :param num_instances: The num_instances of this OracleDbDetail.
        :type num_instances: int
        """

        self._num_instances = num_instances

    @property
    def num_missed_snapshot(self):
        """Gets the num_missed_snapshot of this OracleDbDetail.

        An integer that specifies the number of missed snapshots.

        :return: The num_missed_snapshot of this OracleDbDetail.
        :rtype: int
        """
        return self._num_missed_snapshot

    @num_missed_snapshot.setter
    def num_missed_snapshot(self, num_missed_snapshot):
        """Sets the num_missed_snapshot of this OracleDbDetail.

        An integer that specifies the number of missed snapshots.

        :param num_missed_snapshot: The num_missed_snapshot of this OracleDbDetail.
        :type num_missed_snapshot: int
        """
        if num_missed_snapshot is None:
            raise ValueError("Invalid value for `num_missed_snapshot`, must not be `None`")

        self._num_missed_snapshot = num_missed_snapshot

    @property
    def num_tablespaces(self):
        """Gets the num_tablespaces of this OracleDbDetail.

        Count of the number of table spaces in Oracle database.

        :return: The num_tablespaces of this OracleDbDetail.
        :rtype: int
        """
        return self._num_tablespaces

    @num_tablespaces.setter
    def num_tablespaces(self, num_tablespaces):
        """Sets the num_tablespaces of this OracleDbDetail.

        Count of the number of table spaces in Oracle database.

        :param num_tablespaces: The num_tablespaces of this OracleDbDetail.
        :type num_tablespaces: int
        """
        if num_tablespaces is None:
            raise ValueError("Invalid value for `num_tablespaces`, must not be `None`")

        self._num_tablespaces = num_tablespaces

    @property
    def rac_id(self):
        """Gets the rac_id of this OracleDbDetail.

        Rubrik ID of the RAC on which this database is hosted. This field will be empty if the database is not hosted on a RAC environment.

        :return: The rac_id of this OracleDbDetail.
        :rtype: str
        """
        return self._rac_id

    @rac_id.setter
    def rac_id(self, rac_id):
        """Sets the rac_id of this OracleDbDetail.

        Rubrik ID of the RAC on which this database is hosted. This field will be empty if the database is not hosted on a RAC environment.

        :param rac_id: The rac_id of this OracleDbDetail.
        :type rac_id: str
        """

        self._rac_id = rac_id

    @property
    def rac_name(self):
        """Gets the rac_name of this OracleDbDetail.

        RAC name of the cluster database.

        :return: The rac_name of this OracleDbDetail.
        :rtype: str
        """
        return self._rac_name

    @rac_name.setter
    def rac_name(self, rac_name):
        """Sets the rac_name of this OracleDbDetail.

        RAC name of the cluster database.

        :param rac_name: The rac_name of this OracleDbDetail.
        :type rac_name: str
        """

        self._rac_name = rac_name

    @property
    def sid(self):
        """Gets the sid of this OracleDbDetail.

        System identifier (SID) of the Oracle database.

        :return: The sid of this OracleDbDetail.
        :rtype: str
        """
        return self._sid

    @sid.setter
    def sid(self, sid):
        """Sets the sid of this OracleDbDetail.

        System identifier (SID) of the Oracle database.

        :param sid: The sid of this OracleDbDetail.
        :type sid: str
        """

        self._sid = sid

    @property
    def standalone_host_id(self):
        """Gets the standalone_host_id of this OracleDbDetail.

        Rubrik ID of the standalone Oracle host on which this database is hosted. This field will be empty if the database is not hosted on a standalone system.

        :return: The standalone_host_id of this OracleDbDetail.
        :rtype: str
        """
        return self._standalone_host_id

    @standalone_host_id.setter
    def standalone_host_id(self, standalone_host_id):
        """Sets the standalone_host_id of this OracleDbDetail.

        Rubrik ID of the standalone Oracle host on which this database is hosted. This field will be empty if the database is not hosted on a standalone system.

        :param standalone_host_id: The standalone_host_id of this OracleDbDetail.
        :type standalone_host_id: str
        """

        self._standalone_host_id = standalone_host_id

    @property
    def standalone_host_name(self):
        """Gets the standalone_host_name of this OracleDbDetail.

        Hostname of the standalone Oracle database host.

        :return: The standalone_host_name of this OracleDbDetail.
        :rtype: str
        """
        return self._standalone_host_name

    @standalone_host_name.setter
    def standalone_host_name(self, standalone_host_name):
        """Sets the standalone_host_name of this OracleDbDetail.

        Hostname of the standalone Oracle database host.

        :param standalone_host_name: The standalone_host_name of this OracleDbDetail.
        :type standalone_host_name: str
        """

        self._standalone_host_name = standalone_host_name

    @property
    def host_mount(self):
        """Gets the host_mount of this OracleDbDetail.

        Path where the NFS share is mounted on the host.

        :return: The host_mount of this OracleDbDetail.
        :rtype: str
        """
        return self._host_mount

    @host_mount.setter
    def host_mount(self, host_mount):
        """Sets the host_mount of this OracleDbDetail.

        Path where the NFS share is mounted on the host.

        :param host_mount: The host_mount of this OracleDbDetail.
        :type host_mount: str
        """
        if host_mount is None:
            raise ValueError("Invalid value for `host_mount`, must not be `None`")

        self._host_mount = host_mount

    @property
    def log_retention_hours(self):
        """Gets the log_retention_hours of this OracleDbDetail.

        Specifies an interval in hours. Log backups are retained for the duration of the interval.

        :return: The log_retention_hours of this OracleDbDetail.
        :rtype: int
        """
        return self._log_retention_hours

    @log_retention_hours.setter
    def log_retention_hours(self, log_retention_hours):
        """Sets the log_retention_hours of this OracleDbDetail.

        Specifies an interval in hours. Log backups are retained for the duration of the interval.

        :param log_retention_hours: The log_retention_hours of this OracleDbDetail.
        :type log_retention_hours: int
        """
        if log_retention_hours is None:
            raise ValueError("Invalid value for `log_retention_hours`, must not be `None`")

        self._log_retention_hours = log_retention_hours

    @property
    def num_channels(self):
        """Gets the num_channels of this OracleDbDetail.

        Number of channels used to backup the Oracle database.

        :return: The num_channels of this OracleDbDetail.
        :rtype: int
        """
        return self._num_channels

    @num_channels.setter
    def num_channels(self, num_channels):
        """Sets the num_channels of this OracleDbDetail.

        Number of channels used to backup the Oracle database.

        :param num_channels: The num_channels of this OracleDbDetail.
        :type num_channels: int
        """
        if num_channels is None:
            raise ValueError("Invalid value for `num_channels`, must not be `None`")

        self._num_channels = num_channels

    @property
    def hosts_info(self):
        """Gets the hosts_info of this OracleDbDetail.

        An array that contains the host info for each instance.

        :return: The hosts_info of this OracleDbDetail.
        :rtype: List[HostInfo]
        """
        return self._hosts_info

    @hosts_info.setter
    def hosts_info(self, hosts_info):
        """Sets the hosts_info of this OracleDbDetail.

        An array that contains the host info for each instance.

        :param hosts_info: The hosts_info of this OracleDbDetail.
        :type hosts_info: List[HostInfo]
        """

        self._hosts_info = hosts_info

    @property
    def is_live_mount(self):
        """Gets the is_live_mount of this OracleDbDetail.

        Value that indicates whether an Oracle database object is a Live Mount or not. A true value indicates that the object is a Live Mount.

        :return: The is_live_mount of this OracleDbDetail.
        :rtype: bool
        """
        return self._is_live_mount

    @is_live_mount.setter
    def is_live_mount(self, is_live_mount):
        """Sets the is_live_mount of this OracleDbDetail.

        Value that indicates whether an Oracle database object is a Live Mount or not. A true value indicates that the object is a Live Mount.

        :param is_live_mount: The is_live_mount of this OracleDbDetail.
        :type is_live_mount: bool
        """

        self._is_live_mount = is_live_mount

    @property
    def last_validation_result(self):
        """Gets the last_validation_result of this OracleDbDetail.


        :return: The last_validation_result of this OracleDbDetail.
        :rtype: OracleLastValidationResult
        """
        return self._last_validation_result

    @last_validation_result.setter
    def last_validation_result(self, last_validation_result):
        """Sets the last_validation_result of this OracleDbDetail.


        :param last_validation_result: The last_validation_result of this OracleDbDetail.
        :type last_validation_result: OracleLastValidationResult
        """

        self._last_validation_result = last_validation_result

    @property
    def latest_recovery_point(self):
        """Gets the latest_recovery_point of this OracleDbDetail.

        The time stamp of the most recent recovery point for this database.

        :return: The latest_recovery_point of this OracleDbDetail.
        :rtype: date
        """
        return self._latest_recovery_point

    @latest_recovery_point.setter
    def latest_recovery_point(self, latest_recovery_point):
        """Sets the latest_recovery_point of this OracleDbDetail.

        The time stamp of the most recent recovery point for this database.

        :param latest_recovery_point: The latest_recovery_point of this OracleDbDetail.
        :type latest_recovery_point: date
        """

        self._latest_recovery_point = latest_recovery_point

    @property
    def oldest_recovery_point(self):
        """Gets the oldest_recovery_point of this OracleDbDetail.

        The time stamp of the earliest recovery point for this database.

        :return: The oldest_recovery_point of this OracleDbDetail.
        :rtype: date
        """
        return self._oldest_recovery_point

    @oldest_recovery_point.setter
    def oldest_recovery_point(self, oldest_recovery_point):
        """Sets the oldest_recovery_point of this OracleDbDetail.

        The time stamp of the earliest recovery point for this database.

        :param oldest_recovery_point: The oldest_recovery_point of this OracleDbDetail.
        :type oldest_recovery_point: date
        """

        self._oldest_recovery_point = oldest_recovery_point

    @property
    def oracle_home(self):
        """Gets the oracle_home of this OracleDbDetail.

        Oracle Home of the Oracle database.

        :return: The oracle_home of this OracleDbDetail.
        :rtype: str
        """
        return self._oracle_home

    @oracle_home.setter
    def oracle_home(self, oracle_home):
        """Sets the oracle_home of this OracleDbDetail.

        Oracle Home of the Oracle database.

        :param oracle_home: The oracle_home of this OracleDbDetail.
        :type oracle_home: str
        """

        self._oracle_home = oracle_home

    @property
    def pending_sla_domain(self):
        """Gets the pending_sla_domain of this OracleDbDetail.


        :return: The pending_sla_domain of this OracleDbDetail.
        :rtype: ManagedObjectPendingSlaInfo
        """
        return self._pending_sla_domain

    @pending_sla_domain.setter
    def pending_sla_domain(self, pending_sla_domain):
        """Sets the pending_sla_domain of this OracleDbDetail.


        :param pending_sla_domain: The pending_sla_domain of this OracleDbDetail.
        :type pending_sla_domain: ManagedObjectPendingSlaInfo
        """

        self._pending_sla_domain = pending_sla_domain

    @property
    def preferred_dg_member_unique_names(self):
        """Gets the preferred_dg_member_unique_names of this OracleDbDetail.

        Ordered list of database unique names to use for backup in a Data Guard group.

        :return: The preferred_dg_member_unique_names of this OracleDbDetail.
        :rtype: List[str]
        """
        return self._preferred_dg_member_unique_names

    @preferred_dg_member_unique_names.setter
    def preferred_dg_member_unique_names(self, preferred_dg_member_unique_names):
        """Sets the preferred_dg_member_unique_names of this OracleDbDetail.

        Ordered list of database unique names to use for backup in a Data Guard group.

        :param preferred_dg_member_unique_names: The preferred_dg_member_unique_names of this OracleDbDetail.
        :type preferred_dg_member_unique_names: List[str]
        """

        self._preferred_dg_member_unique_names = preferred_dg_member_unique_names

    @property
    def should_backup_from_primary_dg_group_member_only(self):
        """Gets the should_backup_from_primary_dg_group_member_only of this OracleDbDetail.

        Indicates whether to backup only from the PRIMARY Data Guard member or from any available member.

        :return: The should_backup_from_primary_dg_group_member_only of this OracleDbDetail.
        :rtype: bool
        """
        return self._should_backup_from_primary_dg_group_member_only

    @should_backup_from_primary_dg_group_member_only.setter
    def should_backup_from_primary_dg_group_member_only(self, should_backup_from_primary_dg_group_member_only):
        """Sets the should_backup_from_primary_dg_group_member_only of this OracleDbDetail.

        Indicates whether to backup only from the PRIMARY Data Guard member or from any available member.

        :param should_backup_from_primary_dg_group_member_only: The should_backup_from_primary_dg_group_member_only of this OracleDbDetail.
        :type should_backup_from_primary_dg_group_member_only: bool
        """

        self._should_backup_from_primary_dg_group_member_only = should_backup_from_primary_dg_group_member_only

    @property
    def snapshot_count(self):
        """Gets the snapshot_count of this OracleDbDetail.


        :return: The snapshot_count of this OracleDbDetail.
        :rtype: int
        """
        return self._snapshot_count

    @snapshot_count.setter
    def snapshot_count(self, snapshot_count):
        """Sets the snapshot_count of this OracleDbDetail.


        :param snapshot_count: The snapshot_count of this OracleDbDetail.
        :type snapshot_count: int
        """
        if snapshot_count is None:
            raise ValueError("Invalid value for `snapshot_count`, must not be `None`")

        self._snapshot_count = snapshot_count

    @property
    def tablespaces(self):
        """Gets the tablespaces of this OracleDbDetail.

        An array that contains tablespace names of the specified Oracle database.

        :return: The tablespaces of this OracleDbDetail.
        :rtype: List[str]
        """
        return self._tablespaces

    @tablespaces.setter
    def tablespaces(self, tablespaces):
        """Sets the tablespaces of this OracleDbDetail.

        An array that contains tablespace names of the specified Oracle database.

        :param tablespaces: The tablespaces of this OracleDbDetail.
        :type tablespaces: List[str]
        """
        if tablespaces is None:
            raise ValueError("Invalid value for `tablespaces`, must not be `None`")

        self._tablespaces = tablespaces
