# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class VcdHierarchyObjectDescendantCount(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, catalog: int=None, connected_vim_server: int=None, disconnected_vim_server: int=None, org: int=None, org_vdc: int=None, v_app: int=None, vcd_cluster: int=None):
        """VcdHierarchyObjectDescendantCount - a model defined in OpenAPI

        :param catalog: The catalog of this VcdHierarchyObjectDescendantCount.
        :param connected_vim_server: The connected_vim_server of this VcdHierarchyObjectDescendantCount.
        :param disconnected_vim_server: The disconnected_vim_server of this VcdHierarchyObjectDescendantCount.
        :param org: The org of this VcdHierarchyObjectDescendantCount.
        :param org_vdc: The org_vdc of this VcdHierarchyObjectDescendantCount.
        :param v_app: The v_app of this VcdHierarchyObjectDescendantCount.
        :param vcd_cluster: The vcd_cluster of this VcdHierarchyObjectDescendantCount.
        """
        self.openapi_types = {
            'catalog': int,
            'connected_vim_server': int,
            'disconnected_vim_server': int,
            'org': int,
            'org_vdc': int,
            'v_app': int,
            'vcd_cluster': int
        }

        self.attribute_map = {
            'catalog': 'catalog',
            'connected_vim_server': 'connectedVimServer',
            'disconnected_vim_server': 'disconnectedVimServer',
            'org': 'org',
            'org_vdc': 'orgVdc',
            'v_app': 'vApp',
            'vcd_cluster': 'vcdCluster'
        }

        self._catalog = catalog
        self._connected_vim_server = connected_vim_server
        self._disconnected_vim_server = disconnected_vim_server
        self._org = org
        self._org_vdc = org_vdc
        self._v_app = v_app
        self._vcd_cluster = vcd_cluster

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VcdHierarchyObjectDescendantCount':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VcdHierarchyObjectDescendantCount of this VcdHierarchyObjectDescendantCount.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def catalog(self):
        """Gets the catalog of this VcdHierarchyObjectDescendantCount.

        Number of descendant vCD catalog objects in a specified; hierarchy.

        :return: The catalog of this VcdHierarchyObjectDescendantCount.
        :rtype: int
        """
        return self._catalog

    @catalog.setter
    def catalog(self, catalog):
        """Sets the catalog of this VcdHierarchyObjectDescendantCount.

        Number of descendant vCD catalog objects in a specified; hierarchy.

        :param catalog: The catalog of this VcdHierarchyObjectDescendantCount.
        :type catalog: int
        """

        self._catalog = catalog

    @property
    def connected_vim_server(self):
        """Gets the connected_vim_server of this VcdHierarchyObjectDescendantCount.

        Number of descendant VIM Server objects that are linked to a vCenter Server object.

        :return: The connected_vim_server of this VcdHierarchyObjectDescendantCount.
        :rtype: int
        """
        return self._connected_vim_server

    @connected_vim_server.setter
    def connected_vim_server(self, connected_vim_server):
        """Sets the connected_vim_server of this VcdHierarchyObjectDescendantCount.

        Number of descendant VIM Server objects that are linked to a vCenter Server object.

        :param connected_vim_server: The connected_vim_server of this VcdHierarchyObjectDescendantCount.
        :type connected_vim_server: int
        """

        self._connected_vim_server = connected_vim_server

    @property
    def disconnected_vim_server(self):
        """Gets the disconnected_vim_server of this VcdHierarchyObjectDescendantCount.

        Number of descendant VIM Server objects that are not linked to a vCenter Server object.

        :return: The disconnected_vim_server of this VcdHierarchyObjectDescendantCount.
        :rtype: int
        """
        return self._disconnected_vim_server

    @disconnected_vim_server.setter
    def disconnected_vim_server(self, disconnected_vim_server):
        """Sets the disconnected_vim_server of this VcdHierarchyObjectDescendantCount.

        Number of descendant VIM Server objects that are not linked to a vCenter Server object.

        :param disconnected_vim_server: The disconnected_vim_server of this VcdHierarchyObjectDescendantCount.
        :type disconnected_vim_server: int
        """

        self._disconnected_vim_server = disconnected_vim_server

    @property
    def org(self):
        """Gets the org of this VcdHierarchyObjectDescendantCount.

        Number of descendant Organization objects in a specified hierarchy.

        :return: The org of this VcdHierarchyObjectDescendantCount.
        :rtype: int
        """
        return self._org

    @org.setter
    def org(self, org):
        """Sets the org of this VcdHierarchyObjectDescendantCount.

        Number of descendant Organization objects in a specified hierarchy.

        :param org: The org of this VcdHierarchyObjectDescendantCount.
        :type org: int
        """

        self._org = org

    @property
    def org_vdc(self):
        """Gets the org_vdc of this VcdHierarchyObjectDescendantCount.

        Number of descendant virtual data center objects in a specified hierarchy.

        :return: The org_vdc of this VcdHierarchyObjectDescendantCount.
        :rtype: int
        """
        return self._org_vdc

    @org_vdc.setter
    def org_vdc(self, org_vdc):
        """Sets the org_vdc of this VcdHierarchyObjectDescendantCount.

        Number of descendant virtual data center objects in a specified hierarchy.

        :param org_vdc: The org_vdc of this VcdHierarchyObjectDescendantCount.
        :type org_vdc: int
        """

        self._org_vdc = org_vdc

    @property
    def v_app(self):
        """Gets the v_app of this VcdHierarchyObjectDescendantCount.

        Number of descendant vApp objects in a specified hierarchy.

        :return: The v_app of this VcdHierarchyObjectDescendantCount.
        :rtype: int
        """
        return self._v_app

    @v_app.setter
    def v_app(self, v_app):
        """Sets the v_app of this VcdHierarchyObjectDescendantCount.

        Number of descendant vApp objects in a specified hierarchy.

        :param v_app: The v_app of this VcdHierarchyObjectDescendantCount.
        :type v_app: int
        """

        self._v_app = v_app

    @property
    def vcd_cluster(self):
        """Gets the vcd_cluster of this VcdHierarchyObjectDescendantCount.

        Number of descendant vCD cluster objects in a specified hierarchy.

        :return: The vcd_cluster of this VcdHierarchyObjectDescendantCount.
        :rtype: int
        """
        return self._vcd_cluster

    @vcd_cluster.setter
    def vcd_cluster(self, vcd_cluster):
        """Sets the vcd_cluster of this VcdHierarchyObjectDescendantCount.

        Number of descendant vCD cluster objects in a specified hierarchy.

        :param vcd_cluster: The vcd_cluster of this VcdHierarchyObjectDescendantCount.
        :type vcd_cluster: int
        """

        self._vcd_cluster = vcd_cluster
