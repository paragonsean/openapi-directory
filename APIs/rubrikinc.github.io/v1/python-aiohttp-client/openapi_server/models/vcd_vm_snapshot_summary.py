# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class VcdVmSnapshotSummary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, index_state: int=None, vcd_vm_moid: str=None, vcenter_vm_id: str=None, vm_name: str=None, vm_snapshot_id: str=None):
        """VcdVmSnapshotSummary - a model defined in OpenAPI

        :param index_state: The index_state of this VcdVmSnapshotSummary.
        :param vcd_vm_moid: The vcd_vm_moid of this VcdVmSnapshotSummary.
        :param vcenter_vm_id: The vcenter_vm_id of this VcdVmSnapshotSummary.
        :param vm_name: The vm_name of this VcdVmSnapshotSummary.
        :param vm_snapshot_id: The vm_snapshot_id of this VcdVmSnapshotSummary.
        """
        self.openapi_types = {
            'index_state': int,
            'vcd_vm_moid': str,
            'vcenter_vm_id': str,
            'vm_name': str,
            'vm_snapshot_id': str
        }

        self.attribute_map = {
            'index_state': 'indexState',
            'vcd_vm_moid': 'vcdVmMoid',
            'vcenter_vm_id': 'vcenterVmId',
            'vm_name': 'vmName',
            'vm_snapshot_id': 'vmSnapshotId'
        }

        self._index_state = index_state
        self._vcd_vm_moid = vcd_vm_moid
        self._vcenter_vm_id = vcenter_vm_id
        self._vm_name = vm_name
        self._vm_snapshot_id = vm_snapshot_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VcdVmSnapshotSummary':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VcdVmSnapshotSummary of this VcdVmSnapshotSummary.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def index_state(self):
        """Gets the index_state of this VcdVmSnapshotSummary.

        Integer value representing the state of the indexing job for a snapshot. 0 means that the indexing has not begun or is in progress. 1 means indexing completed successfully. 2 means that the indexer failed to process this snapshot. 

        :return: The index_state of this VcdVmSnapshotSummary.
        :rtype: int
        """
        return self._index_state

    @index_state.setter
    def index_state(self, index_state):
        """Sets the index_state of this VcdVmSnapshotSummary.

        Integer value representing the state of the indexing job for a snapshot. 0 means that the indexing has not begun or is in progress. 1 means indexing completed successfully. 2 means that the indexer failed to process this snapshot. 

        :param index_state: The index_state of this VcdVmSnapshotSummary.
        :type index_state: int
        """

        self._index_state = index_state

    @property
    def vcd_vm_moid(self):
        """Gets the vcd_vm_moid of this VcdVmSnapshotSummary.

        Id assigned by vCloud Director to the virtual machine of the specified snapshot.

        :return: The vcd_vm_moid of this VcdVmSnapshotSummary.
        :rtype: str
        """
        return self._vcd_vm_moid

    @vcd_vm_moid.setter
    def vcd_vm_moid(self, vcd_vm_moid):
        """Sets the vcd_vm_moid of this VcdVmSnapshotSummary.

        Id assigned by vCloud Director to the virtual machine of the specified snapshot.

        :param vcd_vm_moid: The vcd_vm_moid of this VcdVmSnapshotSummary.
        :type vcd_vm_moid: str
        """
        if vcd_vm_moid is None:
            raise ValueError("Invalid value for `vcd_vm_moid`, must not be `None`")

        self._vcd_vm_moid = vcd_vm_moid

    @property
    def vcenter_vm_id(self):
        """Gets the vcenter_vm_id of this VcdVmSnapshotSummary.

        ID assigned to the object that represents the virtual machine that is the source of a specified snapshot object.

        :return: The vcenter_vm_id of this VcdVmSnapshotSummary.
        :rtype: str
        """
        return self._vcenter_vm_id

    @vcenter_vm_id.setter
    def vcenter_vm_id(self, vcenter_vm_id):
        """Sets the vcenter_vm_id of this VcdVmSnapshotSummary.

        ID assigned to the object that represents the virtual machine that is the source of a specified snapshot object.

        :param vcenter_vm_id: The vcenter_vm_id of this VcdVmSnapshotSummary.
        :type vcenter_vm_id: str
        """
        if vcenter_vm_id is None:
            raise ValueError("Invalid value for `vcenter_vm_id`, must not be `None`")

        self._vcenter_vm_id = vcenter_vm_id

    @property
    def vm_name(self):
        """Gets the vm_name of this VcdVmSnapshotSummary.

        Name of the virtual machine object of the snapshot.

        :return: The vm_name of this VcdVmSnapshotSummary.
        :rtype: str
        """
        return self._vm_name

    @vm_name.setter
    def vm_name(self, vm_name):
        """Sets the vm_name of this VcdVmSnapshotSummary.

        Name of the virtual machine object of the snapshot.

        :param vm_name: The vm_name of this VcdVmSnapshotSummary.
        :type vm_name: str
        """
        if vm_name is None:
            raise ValueError("Invalid value for `vm_name`, must not be `None`")

        self._vm_name = vm_name

    @property
    def vm_snapshot_id(self):
        """Gets the vm_snapshot_id of this VcdVmSnapshotSummary.

        ID assigned to the object that represents a virtual machine snapshot.

        :return: The vm_snapshot_id of this VcdVmSnapshotSummary.
        :rtype: str
        """
        return self._vm_snapshot_id

    @vm_snapshot_id.setter
    def vm_snapshot_id(self, vm_snapshot_id):
        """Sets the vm_snapshot_id of this VcdVmSnapshotSummary.

        ID assigned to the object that represents a virtual machine snapshot.

        :param vm_snapshot_id: The vm_snapshot_id of this VcdVmSnapshotSummary.
        :type vm_snapshot_id: str
        """
        if vm_snapshot_id is None:
            raise ValueError("Invalid value for `vm_snapshot_id`, must not be `None`")

        self._vm_snapshot_id = vm_snapshot_id
