# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.vcd_connection_status import VcdConnectionStatus
from openapi_server import util


class VimserverSummary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, connection_status: VcdConnectionStatus=None, hostname: str=None, id: str=None, name: str=None, vcd_cluster_id: str=None, vcd_cluster_name: str=None, vcenter_id: str=None):
        """VimserverSummary - a model defined in OpenAPI

        :param connection_status: The connection_status of this VimserverSummary.
        :param hostname: The hostname of this VimserverSummary.
        :param id: The id of this VimserverSummary.
        :param name: The name of this VimserverSummary.
        :param vcd_cluster_id: The vcd_cluster_id of this VimserverSummary.
        :param vcd_cluster_name: The vcd_cluster_name of this VimserverSummary.
        :param vcenter_id: The vcenter_id of this VimserverSummary.
        """
        self.openapi_types = {
            'connection_status': VcdConnectionStatus,
            'hostname': str,
            'id': str,
            'name': str,
            'vcd_cluster_id': str,
            'vcd_cluster_name': str,
            'vcenter_id': str
        }

        self.attribute_map = {
            'connection_status': 'connectionStatus',
            'hostname': 'hostname',
            'id': 'id',
            'name': 'name',
            'vcd_cluster_id': 'vcdClusterId',
            'vcd_cluster_name': 'vcdClusterName',
            'vcenter_id': 'vcenterId'
        }

        self._connection_status = connection_status
        self._hostname = hostname
        self._id = id
        self._name = name
        self._vcd_cluster_id = vcd_cluster_id
        self._vcd_cluster_name = vcd_cluster_name
        self._vcenter_id = vcenter_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VimserverSummary':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VimserverSummary of this VimserverSummary.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def connection_status(self):
        """Gets the connection_status of this VimserverSummary.


        :return: The connection_status of this VimserverSummary.
        :rtype: VcdConnectionStatus
        """
        return self._connection_status

    @connection_status.setter
    def connection_status(self, connection_status):
        """Sets the connection_status of this VimserverSummary.


        :param connection_status: The connection_status of this VimserverSummary.
        :type connection_status: VcdConnectionStatus
        """
        if connection_status is None:
            raise ValueError("Invalid value for `connection_status`, must not be `None`")

        self._connection_status = connection_status

    @property
    def hostname(self):
        """Gets the hostname of this VimserverSummary.

        Hostname of a vCenter Server that is the target of a connection from a specified VimServer object.

        :return: The hostname of this VimserverSummary.
        :rtype: str
        """
        return self._hostname

    @hostname.setter
    def hostname(self, hostname):
        """Sets the hostname of this VimserverSummary.

        Hostname of a vCenter Server that is the target of a connection from a specified VimServer object.

        :param hostname: The hostname of this VimserverSummary.
        :type hostname: str
        """
        if hostname is None:
            raise ValueError("Invalid value for `hostname`, must not be `None`")

        self._hostname = hostname

    @property
    def id(self):
        """Gets the id of this VimserverSummary.

        ID assigned to a VimServer object.

        :return: The id of this VimserverSummary.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this VimserverSummary.

        ID assigned to a VimServer object.

        :param id: The id of this VimserverSummary.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def name(self):
        """Gets the name of this VimserverSummary.

        Name of a VimServer object.

        :return: The name of this VimserverSummary.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this VimserverSummary.

        Name of a VimServer object.

        :param name: The name of this VimserverSummary.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def vcd_cluster_id(self):
        """Gets the vcd_cluster_id of this VimserverSummary.

        ID assigned to a vCD Cluster object that contains a specified VimServer object.

        :return: The vcd_cluster_id of this VimserverSummary.
        :rtype: str
        """
        return self._vcd_cluster_id

    @vcd_cluster_id.setter
    def vcd_cluster_id(self, vcd_cluster_id):
        """Sets the vcd_cluster_id of this VimserverSummary.

        ID assigned to a vCD Cluster object that contains a specified VimServer object.

        :param vcd_cluster_id: The vcd_cluster_id of this VimserverSummary.
        :type vcd_cluster_id: str
        """
        if vcd_cluster_id is None:
            raise ValueError("Invalid value for `vcd_cluster_id`, must not be `None`")

        self._vcd_cluster_id = vcd_cluster_id

    @property
    def vcd_cluster_name(self):
        """Gets the vcd_cluster_name of this VimserverSummary.

        Name of a vCD Cluster object that contains a specified VimServer object.

        :return: The vcd_cluster_name of this VimserverSummary.
        :rtype: str
        """
        return self._vcd_cluster_name

    @vcd_cluster_name.setter
    def vcd_cluster_name(self, vcd_cluster_name):
        """Sets the vcd_cluster_name of this VimserverSummary.

        Name of a vCD Cluster object that contains a specified VimServer object.

        :param vcd_cluster_name: The vcd_cluster_name of this VimserverSummary.
        :type vcd_cluster_name: str
        """
        if vcd_cluster_name is None:
            raise ValueError("Invalid value for `vcd_cluster_name`, must not be `None`")

        self._vcd_cluster_name = vcd_cluster_name

    @property
    def vcenter_id(self):
        """Gets the vcenter_id of this VimserverSummary.

        ID assigned to a vCenter Server object that is attached to a specified VimServer object.

        :return: The vcenter_id of this VimserverSummary.
        :rtype: str
        """
        return self._vcenter_id

    @vcenter_id.setter
    def vcenter_id(self, vcenter_id):
        """Sets the vcenter_id of this VimserverSummary.

        ID assigned to a vCenter Server object that is attached to a specified VimServer object.

        :param vcenter_id: The vcenter_id of this VimserverSummary.
        :type vcenter_id: str
        """

        self._vcenter_id = vcenter_id
