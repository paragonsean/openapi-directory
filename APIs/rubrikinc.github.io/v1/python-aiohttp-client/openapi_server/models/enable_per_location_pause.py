# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EnablePerLocationPause(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, should_cancel_immediately: bool=None, source_cluster_uuids: List[str]=None):
        """EnablePerLocationPause - a model defined in OpenAPI

        :param should_cancel_immediately: The should_cancel_immediately of this EnablePerLocationPause.
        :param source_cluster_uuids: The source_cluster_uuids of this EnablePerLocationPause.
        """
        self.openapi_types = {
            'should_cancel_immediately': bool,
            'source_cluster_uuids': List[str]
        }

        self.attribute_map = {
            'should_cancel_immediately': 'shouldCancelImmediately',
            'source_cluster_uuids': 'sourceClusterUuids'
        }

        self._should_cancel_immediately = should_cancel_immediately
        self._source_cluster_uuids = source_cluster_uuids

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EnablePerLocationPause':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EnablePerLocationPause of this EnablePerLocationPause.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def should_cancel_immediately(self):
        """Gets the should_cancel_immediately of this EnablePerLocationPause.

        Specifies whether replication jobs are canceled immediately. When this value is 'true,' replication jobs will be canceled immediately. In all other cases, current running replication jobs will be allowed to finish before pausing. 

        :return: The should_cancel_immediately of this EnablePerLocationPause.
        :rtype: bool
        """
        return self._should_cancel_immediately

    @should_cancel_immediately.setter
    def should_cancel_immediately(self, should_cancel_immediately):
        """Sets the should_cancel_immediately of this EnablePerLocationPause.

        Specifies whether replication jobs are canceled immediately. When this value is 'true,' replication jobs will be canceled immediately. In all other cases, current running replication jobs will be allowed to finish before pausing. 

        :param should_cancel_immediately: The should_cancel_immediately of this EnablePerLocationPause.
        :type should_cancel_immediately: bool
        """
        if should_cancel_immediately is None:
            raise ValueError("Invalid value for `should_cancel_immediately`, must not be `None`")

        self._should_cancel_immediately = should_cancel_immediately

    @property
    def source_cluster_uuids(self):
        """Gets the source_cluster_uuids of this EnablePerLocationPause.

        Replication from specified Rubrik clusters are paused. Specified Rubrik clusters must be active replication sources of local Rubrik cluster. 

        :return: The source_cluster_uuids of this EnablePerLocationPause.
        :rtype: List[str]
        """
        return self._source_cluster_uuids

    @source_cluster_uuids.setter
    def source_cluster_uuids(self, source_cluster_uuids):
        """Sets the source_cluster_uuids of this EnablePerLocationPause.

        Replication from specified Rubrik clusters are paused. Specified Rubrik clusters must be active replication sources of local Rubrik cluster. 

        :param source_cluster_uuids: The source_cluster_uuids of this EnablePerLocationPause.
        :type source_cluster_uuids: List[str]
        """
        if source_cluster_uuids is None:
            raise ValueError("Invalid value for `source_cluster_uuids`, must not be `None`")

        self._source_cluster_uuids = source_cluster_uuids
