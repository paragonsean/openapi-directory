# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TotpConfigUpdateRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, otp_for_validation: str=None, secret: str=None):
        """TotpConfigUpdateRequest - a model defined in OpenAPI

        :param otp_for_validation: The otp_for_validation of this TotpConfigUpdateRequest.
        :param secret: The secret of this TotpConfigUpdateRequest.
        """
        self.openapi_types = {
            'otp_for_validation': str,
            'secret': str
        }

        self.attribute_map = {
            'otp_for_validation': 'otpForValidation',
            'secret': 'secret'
        }

        self._otp_for_validation = otp_for_validation
        self._secret = secret

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TotpConfigUpdateRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TotpConfigUpdateRequest of this TotpConfigUpdateRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def otp_for_validation(self):
        """Gets the otp_for_validation of this TotpConfigUpdateRequest.

        String containing a one time password for the time-based one time password (TOTP) authentication method. 

        :return: The otp_for_validation of this TotpConfigUpdateRequest.
        :rtype: str
        """
        return self._otp_for_validation

    @otp_for_validation.setter
    def otp_for_validation(self, otp_for_validation):
        """Sets the otp_for_validation of this TotpConfigUpdateRequest.

        String containing a one time password for the time-based one time password (TOTP) authentication method. 

        :param otp_for_validation: The otp_for_validation of this TotpConfigUpdateRequest.
        :type otp_for_validation: str
        """
        if otp_for_validation is None:
            raise ValueError("Invalid value for `otp_for_validation`, must not be `None`")

        self._otp_for_validation = otp_for_validation

    @property
    def secret(self):
        """Gets the secret of this TotpConfigUpdateRequest.

        String containing a secret key for the time-based one time password (TOTP) authentication method. 

        :return: The secret of this TotpConfigUpdateRequest.
        :rtype: str
        """
        return self._secret

    @secret.setter
    def secret(self, secret):
        """Sets the secret of this TotpConfigUpdateRequest.

        String containing a secret key for the time-based one time password (TOTP) authentication method. 

        :param secret: The secret of this TotpConfigUpdateRequest.
        :type secret: str
        """
        if secret is None:
            raise ValueError("Invalid value for `secret`, must not be `None`")

        self._secret = secret
