# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.configured_sla_type import ConfiguredSlaType
from openapi_server.models.managed_hierarchy_object_ancestor import ManagedHierarchyObjectAncestor
from openapi_server import util


class OracleHostSummary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, configured_sla_domain_id: str=None, configured_sla_domain_name: str=None, configured_sla_domain_type: ConfiguredSlaType=None, id: str=None, is_configured_sla_domain_retention_locked: bool=None, name: str=None, primary_cluster_id: str=None, sla_last_update_time: datetime=None, infra_path: List[ManagedHierarchyObjectAncestor]=None, num_dbs: int=None, status: str=None):
        """OracleHostSummary - a model defined in OpenAPI

        :param configured_sla_domain_id: The configured_sla_domain_id of this OracleHostSummary.
        :param configured_sla_domain_name: The configured_sla_domain_name of this OracleHostSummary.
        :param configured_sla_domain_type: The configured_sla_domain_type of this OracleHostSummary.
        :param id: The id of this OracleHostSummary.
        :param is_configured_sla_domain_retention_locked: The is_configured_sla_domain_retention_locked of this OracleHostSummary.
        :param name: The name of this OracleHostSummary.
        :param primary_cluster_id: The primary_cluster_id of this OracleHostSummary.
        :param sla_last_update_time: The sla_last_update_time of this OracleHostSummary.
        :param infra_path: The infra_path of this OracleHostSummary.
        :param num_dbs: The num_dbs of this OracleHostSummary.
        :param status: The status of this OracleHostSummary.
        """
        self.openapi_types = {
            'configured_sla_domain_id': str,
            'configured_sla_domain_name': str,
            'configured_sla_domain_type': ConfiguredSlaType,
            'id': str,
            'is_configured_sla_domain_retention_locked': bool,
            'name': str,
            'primary_cluster_id': str,
            'sla_last_update_time': datetime,
            'infra_path': List[ManagedHierarchyObjectAncestor],
            'num_dbs': int,
            'status': str
        }

        self.attribute_map = {
            'configured_sla_domain_id': 'configuredSlaDomainId',
            'configured_sla_domain_name': 'configuredSlaDomainName',
            'configured_sla_domain_type': 'configuredSlaDomainType',
            'id': 'id',
            'is_configured_sla_domain_retention_locked': 'isConfiguredSlaDomainRetentionLocked',
            'name': 'name',
            'primary_cluster_id': 'primaryClusterId',
            'sla_last_update_time': 'slaLastUpdateTime',
            'infra_path': 'infraPath',
            'num_dbs': 'numDbs',
            'status': 'status'
        }

        self._configured_sla_domain_id = configured_sla_domain_id
        self._configured_sla_domain_name = configured_sla_domain_name
        self._configured_sla_domain_type = configured_sla_domain_type
        self._id = id
        self._is_configured_sla_domain_retention_locked = is_configured_sla_domain_retention_locked
        self._name = name
        self._primary_cluster_id = primary_cluster_id
        self._sla_last_update_time = sla_last_update_time
        self._infra_path = infra_path
        self._num_dbs = num_dbs
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OracleHostSummary':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OracleHostSummary of this OracleHostSummary.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def configured_sla_domain_id(self):
        """Gets the configured_sla_domain_id of this OracleHostSummary.

        The ID of the SLA Domain configured directly on the Rubrik object.

        :return: The configured_sla_domain_id of this OracleHostSummary.
        :rtype: str
        """
        return self._configured_sla_domain_id

    @configured_sla_domain_id.setter
    def configured_sla_domain_id(self, configured_sla_domain_id):
        """Sets the configured_sla_domain_id of this OracleHostSummary.

        The ID of the SLA Domain configured directly on the Rubrik object.

        :param configured_sla_domain_id: The configured_sla_domain_id of this OracleHostSummary.
        :type configured_sla_domain_id: str
        """
        if configured_sla_domain_id is None:
            raise ValueError("Invalid value for `configured_sla_domain_id`, must not be `None`")

        self._configured_sla_domain_id = configured_sla_domain_id

    @property
    def configured_sla_domain_name(self):
        """Gets the configured_sla_domain_name of this OracleHostSummary.

        The name of the SLA Domain configured directly on the Rubrik object.

        :return: The configured_sla_domain_name of this OracleHostSummary.
        :rtype: str
        """
        return self._configured_sla_domain_name

    @configured_sla_domain_name.setter
    def configured_sla_domain_name(self, configured_sla_domain_name):
        """Sets the configured_sla_domain_name of this OracleHostSummary.

        The name of the SLA Domain configured directly on the Rubrik object.

        :param configured_sla_domain_name: The configured_sla_domain_name of this OracleHostSummary.
        :type configured_sla_domain_name: str
        """
        if configured_sla_domain_name is None:
            raise ValueError("Invalid value for `configured_sla_domain_name`, must not be `None`")

        self._configured_sla_domain_name = configured_sla_domain_name

    @property
    def configured_sla_domain_type(self):
        """Gets the configured_sla_domain_type of this OracleHostSummary.


        :return: The configured_sla_domain_type of this OracleHostSummary.
        :rtype: ConfiguredSlaType
        """
        return self._configured_sla_domain_type

    @configured_sla_domain_type.setter
    def configured_sla_domain_type(self, configured_sla_domain_type):
        """Sets the configured_sla_domain_type of this OracleHostSummary.


        :param configured_sla_domain_type: The configured_sla_domain_type of this OracleHostSummary.
        :type configured_sla_domain_type: ConfiguredSlaType
        """

        self._configured_sla_domain_type = configured_sla_domain_type

    @property
    def id(self):
        """Gets the id of this OracleHostSummary.

        ID assigned to the standalone Oracle host.

        :return: The id of this OracleHostSummary.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this OracleHostSummary.

        ID assigned to the standalone Oracle host.

        :param id: The id of this OracleHostSummary.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def is_configured_sla_domain_retention_locked(self):
        """Gets the is_configured_sla_domain_retention_locked of this OracleHostSummary.

        Indicates whether the configured SLA Domain is Retention Locked. When this value is 'true', the configured SLA Domain is a Retention Lock SLA Domain.

        :return: The is_configured_sla_domain_retention_locked of this OracleHostSummary.
        :rtype: bool
        """
        return self._is_configured_sla_domain_retention_locked

    @is_configured_sla_domain_retention_locked.setter
    def is_configured_sla_domain_retention_locked(self, is_configured_sla_domain_retention_locked):
        """Sets the is_configured_sla_domain_retention_locked of this OracleHostSummary.

        Indicates whether the configured SLA Domain is Retention Locked. When this value is 'true', the configured SLA Domain is a Retention Lock SLA Domain.

        :param is_configured_sla_domain_retention_locked: The is_configured_sla_domain_retention_locked of this OracleHostSummary.
        :type is_configured_sla_domain_retention_locked: bool
        """

        self._is_configured_sla_domain_retention_locked = is_configured_sla_domain_retention_locked

    @property
    def name(self):
        """Gets the name of this OracleHostSummary.

        Hostname of the standalone Oracle host.

        :return: The name of this OracleHostSummary.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this OracleHostSummary.

        Hostname of the standalone Oracle host.

        :param name: The name of this OracleHostSummary.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def primary_cluster_id(self):
        """Gets the primary_cluster_id of this OracleHostSummary.


        :return: The primary_cluster_id of this OracleHostSummary.
        :rtype: str
        """
        return self._primary_cluster_id

    @primary_cluster_id.setter
    def primary_cluster_id(self, primary_cluster_id):
        """Sets the primary_cluster_id of this OracleHostSummary.


        :param primary_cluster_id: The primary_cluster_id of this OracleHostSummary.
        :type primary_cluster_id: str
        """
        if primary_cluster_id is None:
            raise ValueError("Invalid value for `primary_cluster_id`, must not be `None`")

        self._primary_cluster_id = primary_cluster_id

    @property
    def sla_last_update_time(self):
        """Gets the sla_last_update_time of this OracleHostSummary.

        The UTC time when the SLA Domain was last updated.

        :return: The sla_last_update_time of this OracleHostSummary.
        :rtype: datetime
        """
        return self._sla_last_update_time

    @sla_last_update_time.setter
    def sla_last_update_time(self, sla_last_update_time):
        """Sets the sla_last_update_time of this OracleHostSummary.

        The UTC time when the SLA Domain was last updated.

        :param sla_last_update_time: The sla_last_update_time of this OracleHostSummary.
        :type sla_last_update_time: datetime
        """

        self._sla_last_update_time = sla_last_update_time

    @property
    def infra_path(self):
        """Gets the infra_path of this OracleHostSummary.

        An array that contains information about the objects in the infrastructure path of a specified Oracle database.

        :return: The infra_path of this OracleHostSummary.
        :rtype: List[ManagedHierarchyObjectAncestor]
        """
        return self._infra_path

    @infra_path.setter
    def infra_path(self, infra_path):
        """Sets the infra_path of this OracleHostSummary.

        An array that contains information about the objects in the infrastructure path of a specified Oracle database.

        :param infra_path: The infra_path of this OracleHostSummary.
        :type infra_path: List[ManagedHierarchyObjectAncestor]
        """
        if infra_path is None:
            raise ValueError("Invalid value for `infra_path`, must not be `None`")

        self._infra_path = infra_path

    @property
    def num_dbs(self):
        """Gets the num_dbs of this OracleHostSummary.

        Count of the number of databases on the Oracle RAC.

        :return: The num_dbs of this OracleHostSummary.
        :rtype: int
        """
        return self._num_dbs

    @num_dbs.setter
    def num_dbs(self, num_dbs):
        """Sets the num_dbs of this OracleHostSummary.

        Count of the number of databases on the Oracle RAC.

        :param num_dbs: The num_dbs of this OracleHostSummary.
        :type num_dbs: int
        """
        if num_dbs is None:
            raise ValueError("Invalid value for `num_dbs`, must not be `None`")

        self._num_dbs = num_dbs

    @property
    def status(self):
        """Gets the status of this OracleHostSummary.

        Connectivity status of the Oracle RAC.

        :return: The status of this OracleHostSummary.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this OracleHostSummary.

        Connectivity status of the Oracle RAC.

        :param status: The status of this OracleHostSummary.
        :type status: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status
