# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.database_type import DatabaseType
from openapi_server import util


class DbLogReportSummary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, database_type: DatabaseType=None, effective_sla_domain_id: str=None, effective_sla_domain_name: str=None, id: str=None, last_snapshot_time: datetime=None, latest_recovery_time: datetime=None, location: str=None, log_backup_delay: int=None, log_backup_frequency: int=None, name: str=None, primary_cluster_id: str=None):
        """DbLogReportSummary - a model defined in OpenAPI

        :param database_type: The database_type of this DbLogReportSummary.
        :param effective_sla_domain_id: The effective_sla_domain_id of this DbLogReportSummary.
        :param effective_sla_domain_name: The effective_sla_domain_name of this DbLogReportSummary.
        :param id: The id of this DbLogReportSummary.
        :param last_snapshot_time: The last_snapshot_time of this DbLogReportSummary.
        :param latest_recovery_time: The latest_recovery_time of this DbLogReportSummary.
        :param location: The location of this DbLogReportSummary.
        :param log_backup_delay: The log_backup_delay of this DbLogReportSummary.
        :param log_backup_frequency: The log_backup_frequency of this DbLogReportSummary.
        :param name: The name of this DbLogReportSummary.
        :param primary_cluster_id: The primary_cluster_id of this DbLogReportSummary.
        """
        self.openapi_types = {
            'database_type': DatabaseType,
            'effective_sla_domain_id': str,
            'effective_sla_domain_name': str,
            'id': str,
            'last_snapshot_time': datetime,
            'latest_recovery_time': datetime,
            'location': str,
            'log_backup_delay': int,
            'log_backup_frequency': int,
            'name': str,
            'primary_cluster_id': str
        }

        self.attribute_map = {
            'database_type': 'databaseType',
            'effective_sla_domain_id': 'effectiveSlaDomainId',
            'effective_sla_domain_name': 'effectiveSlaDomainName',
            'id': 'id',
            'last_snapshot_time': 'lastSnapshotTime',
            'latest_recovery_time': 'latestRecoveryTime',
            'location': 'location',
            'log_backup_delay': 'logBackupDelay',
            'log_backup_frequency': 'logBackupFrequency',
            'name': 'name',
            'primary_cluster_id': 'primaryClusterId'
        }

        self._database_type = database_type
        self._effective_sla_domain_id = effective_sla_domain_id
        self._effective_sla_domain_name = effective_sla_domain_name
        self._id = id
        self._last_snapshot_time = last_snapshot_time
        self._latest_recovery_time = latest_recovery_time
        self._location = location
        self._log_backup_delay = log_backup_delay
        self._log_backup_frequency = log_backup_frequency
        self._name = name
        self._primary_cluster_id = primary_cluster_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DbLogReportSummary':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DbLogReportSummary of this DbLogReportSummary.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def database_type(self):
        """Gets the database_type of this DbLogReportSummary.


        :return: The database_type of this DbLogReportSummary.
        :rtype: DatabaseType
        """
        return self._database_type

    @database_type.setter
    def database_type(self, database_type):
        """Sets the database_type of this DbLogReportSummary.


        :param database_type: The database_type of this DbLogReportSummary.
        :type database_type: DatabaseType
        """
        if database_type is None:
            raise ValueError("Invalid value for `database_type`, must not be `None`")

        self._database_type = database_type

    @property
    def effective_sla_domain_id(self):
        """Gets the effective_sla_domain_id of this DbLogReportSummary.

        ID of the SLA Domain controlling the database protection.

        :return: The effective_sla_domain_id of this DbLogReportSummary.
        :rtype: str
        """
        return self._effective_sla_domain_id

    @effective_sla_domain_id.setter
    def effective_sla_domain_id(self, effective_sla_domain_id):
        """Sets the effective_sla_domain_id of this DbLogReportSummary.

        ID of the SLA Domain controlling the database protection.

        :param effective_sla_domain_id: The effective_sla_domain_id of this DbLogReportSummary.
        :type effective_sla_domain_id: str
        """
        if effective_sla_domain_id is None:
            raise ValueError("Invalid value for `effective_sla_domain_id`, must not be `None`")

        self._effective_sla_domain_id = effective_sla_domain_id

    @property
    def effective_sla_domain_name(self):
        """Gets the effective_sla_domain_name of this DbLogReportSummary.

        Name of the SLA Domain controlling the database protection.

        :return: The effective_sla_domain_name of this DbLogReportSummary.
        :rtype: str
        """
        return self._effective_sla_domain_name

    @effective_sla_domain_name.setter
    def effective_sla_domain_name(self, effective_sla_domain_name):
        """Sets the effective_sla_domain_name of this DbLogReportSummary.

        Name of the SLA Domain controlling the database protection.

        :param effective_sla_domain_name: The effective_sla_domain_name of this DbLogReportSummary.
        :type effective_sla_domain_name: str
        """
        if effective_sla_domain_name is None:
            raise ValueError("Invalid value for `effective_sla_domain_name`, must not be `None`")

        self._effective_sla_domain_name = effective_sla_domain_name

    @property
    def id(self):
        """Gets the id of this DbLogReportSummary.


        :return: The id of this DbLogReportSummary.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DbLogReportSummary.


        :param id: The id of this DbLogReportSummary.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def last_snapshot_time(self):
        """Gets the last_snapshot_time of this DbLogReportSummary.

        Time, in UTC, of the last database backup.

        :return: The last_snapshot_time of this DbLogReportSummary.
        :rtype: datetime
        """
        return self._last_snapshot_time

    @last_snapshot_time.setter
    def last_snapshot_time(self, last_snapshot_time):
        """Sets the last_snapshot_time of this DbLogReportSummary.

        Time, in UTC, of the last database backup.

        :param last_snapshot_time: The last_snapshot_time of this DbLogReportSummary.
        :type last_snapshot_time: datetime
        """

        self._last_snapshot_time = last_snapshot_time

    @property
    def latest_recovery_time(self):
        """Gets the latest_recovery_time of this DbLogReportSummary.

        Latest point in time, in UTC, to which the database can be restored.

        :return: The latest_recovery_time of this DbLogReportSummary.
        :rtype: datetime
        """
        return self._latest_recovery_time

    @latest_recovery_time.setter
    def latest_recovery_time(self, latest_recovery_time):
        """Sets the latest_recovery_time of this DbLogReportSummary.

        Latest point in time, in UTC, to which the database can be restored.

        :param latest_recovery_time: The latest_recovery_time of this DbLogReportSummary.
        :type latest_recovery_time: datetime
        """

        self._latest_recovery_time = latest_recovery_time

    @property
    def location(self):
        """Gets the location of this DbLogReportSummary.

        Location of the customer database. For a standalone SQL database, this includes the host and instance name.

        :return: The location of this DbLogReportSummary.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this DbLogReportSummary.

        Location of the customer database. For a standalone SQL database, this includes the host and instance name.

        :param location: The location of this DbLogReportSummary.
        :type location: str
        """
        if location is None:
            raise ValueError("Invalid value for `location`, must not be `None`")

        self._location = location

    @property
    def log_backup_delay(self):
        """Gets the log_backup_delay of this DbLogReportSummary.

        Amount of time, in seconds, that has elapsed since the next expected log backup.

        :return: The log_backup_delay of this DbLogReportSummary.
        :rtype: int
        """
        return self._log_backup_delay

    @log_backup_delay.setter
    def log_backup_delay(self, log_backup_delay):
        """Sets the log_backup_delay of this DbLogReportSummary.

        Amount of time, in seconds, that has elapsed since the next expected log backup.

        :param log_backup_delay: The log_backup_delay of this DbLogReportSummary.
        :type log_backup_delay: int
        """

        self._log_backup_delay = log_backup_delay

    @property
    def log_backup_frequency(self):
        """Gets the log_backup_frequency of this DbLogReportSummary.

        Frequency, in seconds, of the database log backup.

        :return: The log_backup_frequency of this DbLogReportSummary.
        :rtype: int
        """
        return self._log_backup_frequency

    @log_backup_frequency.setter
    def log_backup_frequency(self, log_backup_frequency):
        """Sets the log_backup_frequency of this DbLogReportSummary.

        Frequency, in seconds, of the database log backup.

        :param log_backup_frequency: The log_backup_frequency of this DbLogReportSummary.
        :type log_backup_frequency: int
        """

        self._log_backup_frequency = log_backup_frequency

    @property
    def name(self):
        """Gets the name of this DbLogReportSummary.

        Name of the database.

        :return: The name of this DbLogReportSummary.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DbLogReportSummary.

        Name of the database.

        :param name: The name of this DbLogReportSummary.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def primary_cluster_id(self):
        """Gets the primary_cluster_id of this DbLogReportSummary.

        ID of the primary Rubrik cluster on which the database is located.

        :return: The primary_cluster_id of this DbLogReportSummary.
        :rtype: str
        """
        return self._primary_cluster_id

    @primary_cluster_id.setter
    def primary_cluster_id(self, primary_cluster_id):
        """Sets the primary_cluster_id of this DbLogReportSummary.

        ID of the primary Rubrik cluster on which the database is located.

        :param primary_cluster_id: The primary_cluster_id of this DbLogReportSummary.
        :type primary_cluster_id: str
        """
        if primary_cluster_id is None:
            raise ValueError("Invalid value for `primary_cluster_id`, must not be `None`")

        self._primary_cluster_id = primary_cluster_id
