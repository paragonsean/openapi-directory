# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CertificateSummary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cert_id: str=None, description: str=None, expiration: datetime=None, has_key: bool=None, name: str=None, pem_file: str=None, used_by: str=None):
        """CertificateSummary - a model defined in OpenAPI

        :param cert_id: The cert_id of this CertificateSummary.
        :param description: The description of this CertificateSummary.
        :param expiration: The expiration of this CertificateSummary.
        :param has_key: The has_key of this CertificateSummary.
        :param name: The name of this CertificateSummary.
        :param pem_file: The pem_file of this CertificateSummary.
        :param used_by: The used_by of this CertificateSummary.
        """
        self.openapi_types = {
            'cert_id': str,
            'description': str,
            'expiration': datetime,
            'has_key': bool,
            'name': str,
            'pem_file': str,
            'used_by': str
        }

        self.attribute_map = {
            'cert_id': 'certId',
            'description': 'description',
            'expiration': 'expiration',
            'has_key': 'hasKey',
            'name': 'name',
            'pem_file': 'pemFile',
            'used_by': 'usedBy'
        }

        self._cert_id = cert_id
        self._description = description
        self._expiration = expiration
        self._has_key = has_key
        self._name = name
        self._pem_file = pem_file
        self._used_by = used_by

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CertificateSummary':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CertificateSummary of this CertificateSummary.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cert_id(self):
        """Gets the cert_id of this CertificateSummary.

        ID of the certificate.

        :return: The cert_id of this CertificateSummary.
        :rtype: str
        """
        return self._cert_id

    @cert_id.setter
    def cert_id(self, cert_id):
        """Sets the cert_id of this CertificateSummary.

        ID of the certificate.

        :param cert_id: The cert_id of this CertificateSummary.
        :type cert_id: str
        """
        if cert_id is None:
            raise ValueError("Invalid value for `cert_id`, must not be `None`")

        self._cert_id = cert_id

    @property
    def description(self):
        """Gets the description of this CertificateSummary.

        User-friendly description for the certificate.

        :return: The description of this CertificateSummary.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CertificateSummary.

        User-friendly description for the certificate.

        :param description: The description of this CertificateSummary.
        :type description: str
        """

        self._description = description

    @property
    def expiration(self):
        """Gets the expiration of this CertificateSummary.

        The expiration date for the certificate.

        :return: The expiration of this CertificateSummary.
        :rtype: datetime
        """
        return self._expiration

    @expiration.setter
    def expiration(self, expiration):
        """Sets the expiration of this CertificateSummary.

        The expiration date for the certificate.

        :param expiration: The expiration of this CertificateSummary.
        :type expiration: datetime
        """
        if expiration is None:
            raise ValueError("Invalid value for `expiration`, must not be `None`")

        self._expiration = expiration

    @property
    def has_key(self):
        """Gets the has_key of this CertificateSummary.

        A Boolean value that specifies whether or not the certificate is associated with a stored private key. When this value is 'true,' the private key for the certificate is stored. When this value is 'false,' the private key for the certificate is not stored.

        :return: The has_key of this CertificateSummary.
        :rtype: bool
        """
        return self._has_key

    @has_key.setter
    def has_key(self, has_key):
        """Sets the has_key of this CertificateSummary.

        A Boolean value that specifies whether or not the certificate is associated with a stored private key. When this value is 'true,' the private key for the certificate is stored. When this value is 'false,' the private key for the certificate is not stored.

        :param has_key: The has_key of this CertificateSummary.
        :type has_key: bool
        """
        if has_key is None:
            raise ValueError("Invalid value for `has_key`, must not be `None`")

        self._has_key = has_key

    @property
    def name(self):
        """Gets the name of this CertificateSummary.

        Display name for the certificate.

        :return: The name of this CertificateSummary.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CertificateSummary.

        Display name for the certificate.

        :param name: The name of this CertificateSummary.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def pem_file(self):
        """Gets the pem_file of this CertificateSummary.

        The certificates, in PEM format.

        :return: The pem_file of this CertificateSummary.
        :rtype: str
        """
        return self._pem_file

    @pem_file.setter
    def pem_file(self, pem_file):
        """Sets the pem_file of this CertificateSummary.

        The certificates, in PEM format.

        :param pem_file: The pem_file of this CertificateSummary.
        :type pem_file: str
        """
        if pem_file is None:
            raise ValueError("Invalid value for `pem_file`, must not be `None`")

        self._pem_file = pem_file

    @property
    def used_by(self):
        """Gets the used_by of this CertificateSummary.

        A list of components using the certificate.

        :return: The used_by of this CertificateSummary.
        :rtype: str
        """
        return self._used_by

    @used_by.setter
    def used_by(self, used_by):
        """Sets the used_by of this CertificateSummary.

        A list of components using the certificate.

        :param used_by: The used_by of this CertificateSummary.
        :type used_by: str
        """
        if used_by is None:
            raise ValueError("Invalid value for `used_by`, must not be `None`")

        self._used_by = used_by
