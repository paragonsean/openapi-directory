# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class KmipServerDetail(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, server_address: str=None, server_certificate_id: str=None, server_port: int=None):
        """KmipServerDetail - a model defined in OpenAPI

        :param server_address: The server_address of this KmipServerDetail.
        :param server_certificate_id: The server_certificate_id of this KmipServerDetail.
        :param server_port: The server_port of this KmipServerDetail.
        """
        self.openapi_types = {
            'server_address': str,
            'server_certificate_id': str,
            'server_port': int
        }

        self.attribute_map = {
            'server_address': 'serverAddress',
            'server_certificate_id': 'serverCertificateId',
            'server_port': 'serverPort'
        }

        self._server_address = server_address
        self._server_certificate_id = server_certificate_id
        self._server_port = server_port

    @classmethod
    def from_dict(cls, dikt: dict) -> 'KmipServerDetail':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The KmipServerDetail of this KmipServerDetail.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def server_address(self):
        """Gets the server_address of this KmipServerDetail.

        The KMIP server's address.

        :return: The server_address of this KmipServerDetail.
        :rtype: str
        """
        return self._server_address

    @server_address.setter
    def server_address(self, server_address):
        """Sets the server_address of this KmipServerDetail.

        The KMIP server's address.

        :param server_address: The server_address of this KmipServerDetail.
        :type server_address: str
        """
        if server_address is None:
            raise ValueError("Invalid value for `server_address`, must not be `None`")

        self._server_address = server_address

    @property
    def server_certificate_id(self):
        """Gets the server_certificate_id of this KmipServerDetail.

        ID corresponding to KMIP server's X.509 certificate in Base64 encoded DER format.

        :return: The server_certificate_id of this KmipServerDetail.
        :rtype: str
        """
        return self._server_certificate_id

    @server_certificate_id.setter
    def server_certificate_id(self, server_certificate_id):
        """Sets the server_certificate_id of this KmipServerDetail.

        ID corresponding to KMIP server's X.509 certificate in Base64 encoded DER format.

        :param server_certificate_id: The server_certificate_id of this KmipServerDetail.
        :type server_certificate_id: str
        """
        if server_certificate_id is None:
            raise ValueError("Invalid value for `server_certificate_id`, must not be `None`")

        self._server_certificate_id = server_certificate_id

    @property
    def server_port(self):
        """Gets the server_port of this KmipServerDetail.

        The KMIP server's port number.

        :return: The server_port of this KmipServerDetail.
        :rtype: int
        """
        return self._server_port

    @server_port.setter
    def server_port(self, server_port):
        """Sets the server_port of this KmipServerDetail.

        The KMIP server's port number.

        :param server_port: The server_port of this KmipServerDetail.
        :type server_port: int
        """
        if server_port is not None and server_port < 0:
            raise ValueError("Invalid value for `server_port`, must be a value greater than or equal to `0`")

        self._server_port = server_port
