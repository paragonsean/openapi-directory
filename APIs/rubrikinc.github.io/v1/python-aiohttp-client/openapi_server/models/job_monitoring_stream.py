# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.job_monitoring_info import JobMonitoringInfo
from openapi_server.models.monitoring_row_type import MonitoringRowType
from openapi_server import util


class JobMonitoringStream(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, after_id: str=None, job_monitoring_response: JobMonitoringInfo=None, monitoring_id: str=None, row_type: MonitoringRowType=None):
        """JobMonitoringStream - a model defined in OpenAPI

        :param after_id: The after_id of this JobMonitoringStream.
        :param job_monitoring_response: The job_monitoring_response of this JobMonitoringStream.
        :param monitoring_id: The monitoring_id of this JobMonitoringStream.
        :param row_type: The row_type of this JobMonitoringStream.
        """
        self.openapi_types = {
            'after_id': str,
            'job_monitoring_response': JobMonitoringInfo,
            'monitoring_id': str,
            'row_type': MonitoringRowType
        }

        self.attribute_map = {
            'after_id': 'afterId',
            'job_monitoring_response': 'jobMonitoringResponse',
            'monitoring_id': 'monitoringId',
            'row_type': 'rowType'
        }

        self._after_id = after_id
        self._job_monitoring_response = job_monitoring_response
        self._monitoring_id = monitoring_id
        self._row_type = row_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'JobMonitoringStream':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The JobMonitoringStream of this JobMonitoringStream.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def after_id(self):
        """Gets the after_id of this JobMonitoringStream.

        The ID to use with subsequent queries to get entires after this entry.

        :return: The after_id of this JobMonitoringStream.
        :rtype: str
        """
        return self._after_id

    @after_id.setter
    def after_id(self, after_id):
        """Sets the after_id of this JobMonitoringStream.

        The ID to use with subsequent queries to get entires after this entry.

        :param after_id: The after_id of this JobMonitoringStream.
        :type after_id: str
        """
        if after_id is None:
            raise ValueError("Invalid value for `after_id`, must not be `None`")

        self._after_id = after_id

    @property
    def job_monitoring_response(self):
        """Gets the job_monitoring_response of this JobMonitoringStream.


        :return: The job_monitoring_response of this JobMonitoringStream.
        :rtype: JobMonitoringInfo
        """
        return self._job_monitoring_response

    @job_monitoring_response.setter
    def job_monitoring_response(self, job_monitoring_response):
        """Sets the job_monitoring_response of this JobMonitoringStream.


        :param job_monitoring_response: The job_monitoring_response of this JobMonitoringStream.
        :type job_monitoring_response: JobMonitoringInfo
        """

        self._job_monitoring_response = job_monitoring_response

    @property
    def monitoring_id(self):
        """Gets the monitoring_id of this JobMonitoringStream.

        Monitoring ID of the row.

        :return: The monitoring_id of this JobMonitoringStream.
        :rtype: str
        """
        return self._monitoring_id

    @monitoring_id.setter
    def monitoring_id(self, monitoring_id):
        """Sets the monitoring_id of this JobMonitoringStream.

        Monitoring ID of the row.

        :param monitoring_id: The monitoring_id of this JobMonitoringStream.
        :type monitoring_id: str
        """
        if monitoring_id is None:
            raise ValueError("Invalid value for `monitoring_id`, must not be `None`")

        self._monitoring_id = monitoring_id

    @property
    def row_type(self):
        """Gets the row_type of this JobMonitoringStream.


        :return: The row_type of this JobMonitoringStream.
        :rtype: MonitoringRowType
        """
        return self._row_type

    @row_type.setter
    def row_type(self, row_type):
        """Sets the row_type of this JobMonitoringStream.


        :param row_type: The row_type of this JobMonitoringStream.
        :type row_type: MonitoringRowType
        """
        if row_type is None:
            raise ValueError("Invalid value for `row_type`, must not be `None`")

        self._row_type = row_type
