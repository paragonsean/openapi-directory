# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.host_share_parameters import HostShareParameters
from openapi_server.models.nas_vendor_type import NasVendorType
from openapi_server import util


class HostShareDetail(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, domain: str=None, export_point: str=None, host_id: str=None, host_share_parameters: HostShareParameters=None, hostname: str=None, id: str=None, primary_cluster_id: str=None, share_type: str=None, status: str=None, username: str=None, vendor_type: NasVendorType=None):
        """HostShareDetail - a model defined in OpenAPI

        :param domain: The domain of this HostShareDetail.
        :param export_point: The export_point of this HostShareDetail.
        :param host_id: The host_id of this HostShareDetail.
        :param host_share_parameters: The host_share_parameters of this HostShareDetail.
        :param hostname: The hostname of this HostShareDetail.
        :param id: The id of this HostShareDetail.
        :param primary_cluster_id: The primary_cluster_id of this HostShareDetail.
        :param share_type: The share_type of this HostShareDetail.
        :param status: The status of this HostShareDetail.
        :param username: The username of this HostShareDetail.
        :param vendor_type: The vendor_type of this HostShareDetail.
        """
        self.openapi_types = {
            'domain': str,
            'export_point': str,
            'host_id': str,
            'host_share_parameters': HostShareParameters,
            'hostname': str,
            'id': str,
            'primary_cluster_id': str,
            'share_type': str,
            'status': str,
            'username': str,
            'vendor_type': NasVendorType
        }

        self.attribute_map = {
            'domain': 'domain',
            'export_point': 'exportPoint',
            'host_id': 'hostId',
            'host_share_parameters': 'hostShareParameters',
            'hostname': 'hostname',
            'id': 'id',
            'primary_cluster_id': 'primaryClusterId',
            'share_type': 'shareType',
            'status': 'status',
            'username': 'username',
            'vendor_type': 'vendorType'
        }

        self._domain = domain
        self._export_point = export_point
        self._host_id = host_id
        self._host_share_parameters = host_share_parameters
        self._hostname = hostname
        self._id = id
        self._primary_cluster_id = primary_cluster_id
        self._share_type = share_type
        self._status = status
        self._username = username
        self._vendor_type = vendor_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'HostShareDetail':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The HostShareDetail of this HostShareDetail.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def domain(self):
        """Gets the domain of this HostShareDetail.

        The domain of the SMB share.

        :return: The domain of this HostShareDetail.
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this HostShareDetail.

        The domain of the SMB share.

        :param domain: The domain of this HostShareDetail.
        :type domain: str
        """

        self._domain = domain

    @property
    def export_point(self):
        """Gets the export_point of this HostShareDetail.

        The NFS export point or SMB share name for the NAS share.

        :return: The export_point of this HostShareDetail.
        :rtype: str
        """
        return self._export_point

    @export_point.setter
    def export_point(self, export_point):
        """Sets the export_point of this HostShareDetail.

        The NFS export point or SMB share name for the NAS share.

        :param export_point: The export_point of this HostShareDetail.
        :type export_point: str
        """
        if export_point is None:
            raise ValueError("Invalid value for `export_point`, must not be `None`")

        self._export_point = export_point

    @property
    def host_id(self):
        """Gets the host_id of this HostShareDetail.

        The host ID of the NAS Share host.

        :return: The host_id of this HostShareDetail.
        :rtype: str
        """
        return self._host_id

    @host_id.setter
    def host_id(self, host_id):
        """Sets the host_id of this HostShareDetail.

        The host ID of the NAS Share host.

        :param host_id: The host_id of this HostShareDetail.
        :type host_id: str
        """

        self._host_id = host_id

    @property
    def host_share_parameters(self):
        """Gets the host_share_parameters of this HostShareDetail.


        :return: The host_share_parameters of this HostShareDetail.
        :rtype: HostShareParameters
        """
        return self._host_share_parameters

    @host_share_parameters.setter
    def host_share_parameters(self, host_share_parameters):
        """Sets the host_share_parameters of this HostShareDetail.


        :param host_share_parameters: The host_share_parameters of this HostShareDetail.
        :type host_share_parameters: HostShareParameters
        """

        self._host_share_parameters = host_share_parameters

    @property
    def hostname(self):
        """Gets the hostname of this HostShareDetail.

        The hostname of the NAS host.

        :return: The hostname of this HostShareDetail.
        :rtype: str
        """
        return self._hostname

    @hostname.setter
    def hostname(self, hostname):
        """Sets the hostname of this HostShareDetail.

        The hostname of the NAS host.

        :param hostname: The hostname of this HostShareDetail.
        :type hostname: str
        """
        if hostname is None:
            raise ValueError("Invalid value for `hostname`, must not be `None`")

        self._hostname = hostname

    @property
    def id(self):
        """Gets the id of this HostShareDetail.

        The unique ID of the NAS Share.

        :return: The id of this HostShareDetail.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this HostShareDetail.

        The unique ID of the NAS Share.

        :param id: The id of this HostShareDetail.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def primary_cluster_id(self):
        """Gets the primary_cluster_id of this HostShareDetail.

        The ID of the primary Rubrik cluster.

        :return: The primary_cluster_id of this HostShareDetail.
        :rtype: str
        """
        return self._primary_cluster_id

    @primary_cluster_id.setter
    def primary_cluster_id(self, primary_cluster_id):
        """Sets the primary_cluster_id of this HostShareDetail.

        The ID of the primary Rubrik cluster.

        :param primary_cluster_id: The primary_cluster_id of this HostShareDetail.
        :type primary_cluster_id: str
        """
        if primary_cluster_id is None:
            raise ValueError("Invalid value for `primary_cluster_id`, must not be `None`")

        self._primary_cluster_id = primary_cluster_id

    @property
    def share_type(self):
        """Gets the share_type of this HostShareDetail.

        The type of NAS share.

        :return: The share_type of this HostShareDetail.
        :rtype: str
        """
        return self._share_type

    @share_type.setter
    def share_type(self, share_type):
        """Sets the share_type of this HostShareDetail.

        The type of NAS share.

        :param share_type: The share_type of this HostShareDetail.
        :type share_type: str
        """
        allowed_values = ["NFS", "SMB"]  # noqa: E501
        if share_type not in allowed_values:
            raise ValueError(
                "Invalid value for `share_type` ({0}), must be one of {1}"
                .format(share_type, allowed_values)
            )

        self._share_type = share_type

    @property
    def status(self):
        """Gets the status of this HostShareDetail.

        The status of connection between the Rubrik cluster and the NAS Share. Possible responses are Connected and Disconnected.

        :return: The status of this HostShareDetail.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this HostShareDetail.

        The status of connection between the Rubrik cluster and the NAS Share. Possible responses are Connected and Disconnected.

        :param status: The status of this HostShareDetail.
        :type status: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status

    @property
    def username(self):
        """Gets the username of this HostShareDetail.

        The username to access the NAS share.

        :return: The username of this HostShareDetail.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this HostShareDetail.

        The username to access the NAS share.

        :param username: The username of this HostShareDetail.
        :type username: str
        """

        self._username = username

    @property
    def vendor_type(self):
        """Gets the vendor_type of this HostShareDetail.


        :return: The vendor_type of this HostShareDetail.
        :rtype: NasVendorType
        """
        return self._vendor_type

    @vendor_type.setter
    def vendor_type(self, vendor_type):
        """Sets the vendor_type of this HostShareDetail.


        :param vendor_type: The vendor_type of this HostShareDetail.
        :type vendor_type: NasVendorType
        """

        self._vendor_type = vendor_type
