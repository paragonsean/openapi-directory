# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.per_storage_class_cloud_out_storage_forecast_summary import PerStorageClassCloudOutStorageForecastSummary
from openapi_server import util


class CloudOutStorageForecastSummary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data_retrieval_cost_in_usd: List[int]=None, early_deletion_cost_in_usd: List[int]=None, per_storage_class_forecast: List[PerStorageClassCloudOutStorageForecastSummary]=None, storage_cost_in_usd: List[int]=None, storage_used_in_gb: List[int]=None):
        """CloudOutStorageForecastSummary - a model defined in OpenAPI

        :param data_retrieval_cost_in_usd: The data_retrieval_cost_in_usd of this CloudOutStorageForecastSummary.
        :param early_deletion_cost_in_usd: The early_deletion_cost_in_usd of this CloudOutStorageForecastSummary.
        :param per_storage_class_forecast: The per_storage_class_forecast of this CloudOutStorageForecastSummary.
        :param storage_cost_in_usd: The storage_cost_in_usd of this CloudOutStorageForecastSummary.
        :param storage_used_in_gb: The storage_used_in_gb of this CloudOutStorageForecastSummary.
        """
        self.openapi_types = {
            'data_retrieval_cost_in_usd': List[int],
            'early_deletion_cost_in_usd': List[int],
            'per_storage_class_forecast': List[PerStorageClassCloudOutStorageForecastSummary],
            'storage_cost_in_usd': List[int],
            'storage_used_in_gb': List[int]
        }

        self.attribute_map = {
            'data_retrieval_cost_in_usd': 'dataRetrievalCostInUSD',
            'early_deletion_cost_in_usd': 'earlyDeletionCostInUSD',
            'per_storage_class_forecast': 'perStorageClassForecast',
            'storage_cost_in_usd': 'storageCostInUSD',
            'storage_used_in_gb': 'storageUsedInGB'
        }

        self._data_retrieval_cost_in_usd = data_retrieval_cost_in_usd
        self._early_deletion_cost_in_usd = early_deletion_cost_in_usd
        self._per_storage_class_forecast = per_storage_class_forecast
        self._storage_cost_in_usd = storage_cost_in_usd
        self._storage_used_in_gb = storage_used_in_gb

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CloudOutStorageForecastSummary':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CloudOutStorageForecastSummary of this CloudOutStorageForecastSummary.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data_retrieval_cost_in_usd(self):
        """Gets the data_retrieval_cost_in_usd of this CloudOutStorageForecastSummary.

        Data retrieval costs, in USD, for the cloud archival location. The list contains forecastPeriodInGranularityUnit values, one for each granularity period. For example, for a 3-year forecast period with a granularity of 'year', the list contains 3 values. The first value corresponds to the first year, the second value corresponds to the second year, and the third value corresponds to the third year.

        :return: The data_retrieval_cost_in_usd of this CloudOutStorageForecastSummary.
        :rtype: List[int]
        """
        return self._data_retrieval_cost_in_usd

    @data_retrieval_cost_in_usd.setter
    def data_retrieval_cost_in_usd(self, data_retrieval_cost_in_usd):
        """Sets the data_retrieval_cost_in_usd of this CloudOutStorageForecastSummary.

        Data retrieval costs, in USD, for the cloud archival location. The list contains forecastPeriodInGranularityUnit values, one for each granularity period. For example, for a 3-year forecast period with a granularity of 'year', the list contains 3 values. The first value corresponds to the first year, the second value corresponds to the second year, and the third value corresponds to the third year.

        :param data_retrieval_cost_in_usd: The data_retrieval_cost_in_usd of this CloudOutStorageForecastSummary.
        :type data_retrieval_cost_in_usd: List[int]
        """

        self._data_retrieval_cost_in_usd = data_retrieval_cost_in_usd

    @property
    def early_deletion_cost_in_usd(self):
        """Gets the early_deletion_cost_in_usd of this CloudOutStorageForecastSummary.

        Early deletion costs, in USD, for the cloud archival location. The list contains forecastPeriodInGranularityUnit values, one for each granularity period. For example, for a 3-year forecast period with a granularity of 'year', the list contains 3 values. The first value corresponds to the first year, the second value corresponds to the second year, and the third value corresponds to the third year.

        :return: The early_deletion_cost_in_usd of this CloudOutStorageForecastSummary.
        :rtype: List[int]
        """
        return self._early_deletion_cost_in_usd

    @early_deletion_cost_in_usd.setter
    def early_deletion_cost_in_usd(self, early_deletion_cost_in_usd):
        """Sets the early_deletion_cost_in_usd of this CloudOutStorageForecastSummary.

        Early deletion costs, in USD, for the cloud archival location. The list contains forecastPeriodInGranularityUnit values, one for each granularity period. For example, for a 3-year forecast period with a granularity of 'year', the list contains 3 values. The first value corresponds to the first year, the second value corresponds to the second year, and the third value corresponds to the third year.

        :param early_deletion_cost_in_usd: The early_deletion_cost_in_usd of this CloudOutStorageForecastSummary.
        :type early_deletion_cost_in_usd: List[int]
        """

        self._early_deletion_cost_in_usd = early_deletion_cost_in_usd

    @property
    def per_storage_class_forecast(self):
        """Gets the per_storage_class_forecast of this CloudOutStorageForecastSummary.

        Storage utilization forecast for cloud archival location across various storage classes. The list contains one object per storage class that is used on the cloud archival location.

        :return: The per_storage_class_forecast of this CloudOutStorageForecastSummary.
        :rtype: List[PerStorageClassCloudOutStorageForecastSummary]
        """
        return self._per_storage_class_forecast

    @per_storage_class_forecast.setter
    def per_storage_class_forecast(self, per_storage_class_forecast):
        """Sets the per_storage_class_forecast of this CloudOutStorageForecastSummary.

        Storage utilization forecast for cloud archival location across various storage classes. The list contains one object per storage class that is used on the cloud archival location.

        :param per_storage_class_forecast: The per_storage_class_forecast of this CloudOutStorageForecastSummary.
        :type per_storage_class_forecast: List[PerStorageClassCloudOutStorageForecastSummary]
        """

        self._per_storage_class_forecast = per_storage_class_forecast

    @property
    def storage_cost_in_usd(self):
        """Gets the storage_cost_in_usd of this CloudOutStorageForecastSummary.

        Storage costs, in USD, for the cloud archival location. The list contains forecastPeriodInGranularityUnit values, one for each granularity period. For example, for a 3-year forecast period with a granularity of 'year', the list contains 3 values. The first value corresponds to the first year, the second value corresponds to the second year, and the third value corresponds to the third year.

        :return: The storage_cost_in_usd of this CloudOutStorageForecastSummary.
        :rtype: List[int]
        """
        return self._storage_cost_in_usd

    @storage_cost_in_usd.setter
    def storage_cost_in_usd(self, storage_cost_in_usd):
        """Sets the storage_cost_in_usd of this CloudOutStorageForecastSummary.

        Storage costs, in USD, for the cloud archival location. The list contains forecastPeriodInGranularityUnit values, one for each granularity period. For example, for a 3-year forecast period with a granularity of 'year', the list contains 3 values. The first value corresponds to the first year, the second value corresponds to the second year, and the third value corresponds to the third year.

        :param storage_cost_in_usd: The storage_cost_in_usd of this CloudOutStorageForecastSummary.
        :type storage_cost_in_usd: List[int]
        """

        self._storage_cost_in_usd = storage_cost_in_usd

    @property
    def storage_used_in_gb(self):
        """Gets the storage_used_in_gb of this CloudOutStorageForecastSummary.

        Storage values, in GBs, used on the cloud archival location. The number of values in the list is specified by the value of the forecastPeriodInGranularityUnit parameter. Each value in the list is for the last day of the granularity period. For example, for a 3-year forecast period with a granularity of 'year', the list contains 3 values. First value corresponds to the last day of the first year. Second value corresponds to the last day of the second year. Third value corresponds to the last day of the third year.

        :return: The storage_used_in_gb of this CloudOutStorageForecastSummary.
        :rtype: List[int]
        """
        return self._storage_used_in_gb

    @storage_used_in_gb.setter
    def storage_used_in_gb(self, storage_used_in_gb):
        """Sets the storage_used_in_gb of this CloudOutStorageForecastSummary.

        Storage values, in GBs, used on the cloud archival location. The number of values in the list is specified by the value of the forecastPeriodInGranularityUnit parameter. Each value in the list is for the last day of the granularity period. For example, for a 3-year forecast period with a granularity of 'year', the list contains 3 values. First value corresponds to the last day of the first year. Second value corresponds to the last day of the second year. Third value corresponds to the last day of the third year.

        :param storage_used_in_gb: The storage_used_in_gb of this CloudOutStorageForecastSummary.
        :type storage_used_in_gb: List[int]
        """
        if storage_used_in_gb is None:
            raise ValueError("Invalid value for `storage_used_in_gb`, must not be `None`")

        self._storage_used_in_gb = storage_used_in_gb
