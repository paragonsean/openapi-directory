# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.replication_type import ReplicationType
from openapi_server import util


class ReplicationSpec(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, location_id: str=None, location_name: str=None, log_retention_limit: int=None, replication_type: ReplicationType=None, retention_limit: int=None):
        """ReplicationSpec - a model defined in OpenAPI

        :param location_id: The location_id of this ReplicationSpec.
        :param location_name: The location_name of this ReplicationSpec.
        :param log_retention_limit: The log_retention_limit of this ReplicationSpec.
        :param replication_type: The replication_type of this ReplicationSpec.
        :param retention_limit: The retention_limit of this ReplicationSpec.
        """
        self.openapi_types = {
            'location_id': str,
            'location_name': str,
            'log_retention_limit': int,
            'replication_type': ReplicationType,
            'retention_limit': int
        }

        self.attribute_map = {
            'location_id': 'locationId',
            'location_name': 'locationName',
            'log_retention_limit': 'logRetentionLimit',
            'replication_type': 'replicationType',
            'retention_limit': 'retentionLimit'
        }

        self._location_id = location_id
        self._location_name = location_name
        self._log_retention_limit = log_retention_limit
        self._replication_type = replication_type
        self._retention_limit = retention_limit

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReplicationSpec':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ReplicationSpec of this ReplicationSpec.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def location_id(self):
        """Gets the location_id of this ReplicationSpec.


        :return: The location_id of this ReplicationSpec.
        :rtype: str
        """
        return self._location_id

    @location_id.setter
    def location_id(self, location_id):
        """Sets the location_id of this ReplicationSpec.


        :param location_id: The location_id of this ReplicationSpec.
        :type location_id: str
        """
        if location_id is None:
            raise ValueError("Invalid value for `location_id`, must not be `None`")

        self._location_id = location_id

    @property
    def location_name(self):
        """Gets the location_name of this ReplicationSpec.


        :return: The location_name of this ReplicationSpec.
        :rtype: str
        """
        return self._location_name

    @location_name.setter
    def location_name(self, location_name):
        """Sets the location_name of this ReplicationSpec.


        :param location_name: The location_name of this ReplicationSpec.
        :type location_name: str
        """

        self._location_name = location_name

    @property
    def log_retention_limit(self):
        """Gets the log_retention_limit of this ReplicationSpec.

        Specifies an interval in seconds. Logs are retained at the replication location until the specified interval expires.

        :return: The log_retention_limit of this ReplicationSpec.
        :rtype: int
        """
        return self._log_retention_limit

    @log_retention_limit.setter
    def log_retention_limit(self, log_retention_limit):
        """Sets the log_retention_limit of this ReplicationSpec.

        Specifies an interval in seconds. Logs are retained at the replication location until the specified interval expires.

        :param log_retention_limit: The log_retention_limit of this ReplicationSpec.
        :type log_retention_limit: int
        """

        self._log_retention_limit = log_retention_limit

    @property
    def replication_type(self):
        """Gets the replication_type of this ReplicationSpec.


        :return: The replication_type of this ReplicationSpec.
        :rtype: ReplicationType
        """
        return self._replication_type

    @replication_type.setter
    def replication_type(self, replication_type):
        """Sets the replication_type of this ReplicationSpec.


        :param replication_type: The replication_type of this ReplicationSpec.
        :type replication_type: ReplicationType
        """

        self._replication_type = replication_type

    @property
    def retention_limit(self):
        """Gets the retention_limit of this ReplicationSpec.


        :return: The retention_limit of this ReplicationSpec.
        :rtype: int
        """
        return self._retention_limit

    @retention_limit.setter
    def retention_limit(self, retention_limit):
        """Sets the retention_limit of this ReplicationSpec.


        :param retention_limit: The retention_limit of this ReplicationSpec.
        :type retention_limit: int
        """
        if retention_limit is None:
            raise ValueError("Invalid value for `retention_limit`, must not be `None`")

        self._retention_limit = retention_limit
