# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.link import Link
from openapi_server import util


class MssqlMountLinks(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, mount_request: Link=None, mounted_database: Link=None, source_database: Link=None, target_instance: Link=None, unmount_request: Link=None):
        """MssqlMountLinks - a model defined in OpenAPI

        :param mount_request: The mount_request of this MssqlMountLinks.
        :param mounted_database: The mounted_database of this MssqlMountLinks.
        :param source_database: The source_database of this MssqlMountLinks.
        :param target_instance: The target_instance of this MssqlMountLinks.
        :param unmount_request: The unmount_request of this MssqlMountLinks.
        """
        self.openapi_types = {
            'mount_request': Link,
            'mounted_database': Link,
            'source_database': Link,
            'target_instance': Link,
            'unmount_request': Link
        }

        self.attribute_map = {
            'mount_request': 'mountRequest',
            'mounted_database': 'mountedDatabase',
            'source_database': 'sourceDatabase',
            'target_instance': 'targetInstance',
            'unmount_request': 'unmountRequest'
        }

        self._mount_request = mount_request
        self._mounted_database = mounted_database
        self._source_database = source_database
        self._target_instance = target_instance
        self._unmount_request = unmount_request

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MssqlMountLinks':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MssqlMountLinks of this MssqlMountLinks.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def mount_request(self):
        """Gets the mount_request of this MssqlMountLinks.


        :return: The mount_request of this MssqlMountLinks.
        :rtype: Link
        """
        return self._mount_request

    @mount_request.setter
    def mount_request(self, mount_request):
        """Sets the mount_request of this MssqlMountLinks.


        :param mount_request: The mount_request of this MssqlMountLinks.
        :type mount_request: Link
        """

        self._mount_request = mount_request

    @property
    def mounted_database(self):
        """Gets the mounted_database of this MssqlMountLinks.


        :return: The mounted_database of this MssqlMountLinks.
        :rtype: Link
        """
        return self._mounted_database

    @mounted_database.setter
    def mounted_database(self, mounted_database):
        """Sets the mounted_database of this MssqlMountLinks.


        :param mounted_database: The mounted_database of this MssqlMountLinks.
        :type mounted_database: Link
        """

        self._mounted_database = mounted_database

    @property
    def source_database(self):
        """Gets the source_database of this MssqlMountLinks.


        :return: The source_database of this MssqlMountLinks.
        :rtype: Link
        """
        return self._source_database

    @source_database.setter
    def source_database(self, source_database):
        """Sets the source_database of this MssqlMountLinks.


        :param source_database: The source_database of this MssqlMountLinks.
        :type source_database: Link
        """
        if source_database is None:
            raise ValueError("Invalid value for `source_database`, must not be `None`")

        self._source_database = source_database

    @property
    def target_instance(self):
        """Gets the target_instance of this MssqlMountLinks.


        :return: The target_instance of this MssqlMountLinks.
        :rtype: Link
        """
        return self._target_instance

    @target_instance.setter
    def target_instance(self, target_instance):
        """Sets the target_instance of this MssqlMountLinks.


        :param target_instance: The target_instance of this MssqlMountLinks.
        :type target_instance: Link
        """
        if target_instance is None:
            raise ValueError("Invalid value for `target_instance`, must not be `None`")

        self._target_instance = target_instance

    @property
    def unmount_request(self):
        """Gets the unmount_request of this MssqlMountLinks.


        :return: The unmount_request of this MssqlMountLinks.
        :rtype: Link
        """
        return self._unmount_request

    @unmount_request.setter
    def unmount_request(self, unmount_request):
        """Sets the unmount_request of this MssqlMountLinks.


        :param unmount_request: The unmount_request of this MssqlMountLinks.
        :type unmount_request: Link
        """

        self._unmount_request = unmount_request
