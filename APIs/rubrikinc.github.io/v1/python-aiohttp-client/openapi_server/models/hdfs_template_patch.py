# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class HdfsTemplatePatch(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, exceptions: List[str]=None, excludes: List[str]=None, id: str=None, includes: List[str]=None, name: str=None):
        """HdfsTemplatePatch - a model defined in OpenAPI

        :param exceptions: The exceptions of this HdfsTemplatePatch.
        :param excludes: The excludes of this HdfsTemplatePatch.
        :param id: The id of this HdfsTemplatePatch.
        :param includes: The includes of this HdfsTemplatePatch.
        :param name: The name of this HdfsTemplatePatch.
        """
        self.openapi_types = {
            'exceptions': List[str],
            'excludes': List[str],
            'id': str,
            'includes': List[str],
            'name': str
        }

        self.attribute_map = {
            'exceptions': 'exceptions',
            'excludes': 'excludes',
            'id': 'id',
            'includes': 'includes',
            'name': 'name'
        }

        self._exceptions = exceptions
        self._excludes = excludes
        self._id = id
        self._includes = includes
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'HdfsTemplatePatch':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The HdfsTemplatePatch of this HdfsTemplatePatch.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def exceptions(self):
        """Gets the exceptions of this HdfsTemplatePatch.


        :return: The exceptions of this HdfsTemplatePatch.
        :rtype: List[str]
        """
        return self._exceptions

    @exceptions.setter
    def exceptions(self, exceptions):
        """Sets the exceptions of this HdfsTemplatePatch.


        :param exceptions: The exceptions of this HdfsTemplatePatch.
        :type exceptions: List[str]
        """

        self._exceptions = exceptions

    @property
    def excludes(self):
        """Gets the excludes of this HdfsTemplatePatch.


        :return: The excludes of this HdfsTemplatePatch.
        :rtype: List[str]
        """
        return self._excludes

    @excludes.setter
    def excludes(self, excludes):
        """Sets the excludes of this HdfsTemplatePatch.


        :param excludes: The excludes of this HdfsTemplatePatch.
        :type excludes: List[str]
        """

        self._excludes = excludes

    @property
    def id(self):
        """Gets the id of this HdfsTemplatePatch.


        :return: The id of this HdfsTemplatePatch.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this HdfsTemplatePatch.


        :param id: The id of this HdfsTemplatePatch.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def includes(self):
        """Gets the includes of this HdfsTemplatePatch.


        :return: The includes of this HdfsTemplatePatch.
        :rtype: List[str]
        """
        return self._includes

    @includes.setter
    def includes(self, includes):
        """Sets the includes of this HdfsTemplatePatch.


        :param includes: The includes of this HdfsTemplatePatch.
        :type includes: List[str]
        """

        self._includes = includes

    @property
    def name(self):
        """Gets the name of this HdfsTemplatePatch.


        :return: The name of this HdfsTemplatePatch.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this HdfsTemplatePatch.


        :param name: The name of this HdfsTemplatePatch.
        :type name: str
        """

        self._name = name
