# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.job_monitoring_state import JobMonitoringState
from openapi_server.models.job_monitoring_status import JobMonitoringStatus
from openapi_server.models.job_monitoring_task_type import JobMonitoringTaskType
from openapi_server.models.reportable_object_type import ReportableObjectType
from openapi_server import util


class JobMonitoringCsvDownloadResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, download_link: str=None, job_event_status: JobMonitoringStatus=None, job_monitoring_state: JobMonitoringState=None, job_task_type: JobMonitoringTaskType=None, object_name: str=None, object_type: ReportableObjectType=None, should_include_log_related_job: bool=None):
        """JobMonitoringCsvDownloadResponse - a model defined in OpenAPI

        :param download_link: The download_link of this JobMonitoringCsvDownloadResponse.
        :param job_event_status: The job_event_status of this JobMonitoringCsvDownloadResponse.
        :param job_monitoring_state: The job_monitoring_state of this JobMonitoringCsvDownloadResponse.
        :param job_task_type: The job_task_type of this JobMonitoringCsvDownloadResponse.
        :param object_name: The object_name of this JobMonitoringCsvDownloadResponse.
        :param object_type: The object_type of this JobMonitoringCsvDownloadResponse.
        :param should_include_log_related_job: The should_include_log_related_job of this JobMonitoringCsvDownloadResponse.
        """
        self.openapi_types = {
            'download_link': str,
            'job_event_status': JobMonitoringStatus,
            'job_monitoring_state': JobMonitoringState,
            'job_task_type': JobMonitoringTaskType,
            'object_name': str,
            'object_type': ReportableObjectType,
            'should_include_log_related_job': bool
        }

        self.attribute_map = {
            'download_link': 'downloadLink',
            'job_event_status': 'jobEventStatus',
            'job_monitoring_state': 'jobMonitoringState',
            'job_task_type': 'jobTaskType',
            'object_name': 'objectName',
            'object_type': 'objectType',
            'should_include_log_related_job': 'shouldIncludeLogRelatedJob'
        }

        self._download_link = download_link
        self._job_event_status = job_event_status
        self._job_monitoring_state = job_monitoring_state
        self._job_task_type = job_task_type
        self._object_name = object_name
        self._object_type = object_type
        self._should_include_log_related_job = should_include_log_related_job

    @classmethod
    def from_dict(cls, dikt: dict) -> 'JobMonitoringCsvDownloadResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The JobMonitoringCsvDownloadResponse of this JobMonitoringCsvDownloadResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def download_link(self):
        """Gets the download_link of this JobMonitoringCsvDownloadResponse.

        The download link for the CSV file.

        :return: The download_link of this JobMonitoringCsvDownloadResponse.
        :rtype: str
        """
        return self._download_link

    @download_link.setter
    def download_link(self, download_link):
        """Sets the download_link of this JobMonitoringCsvDownloadResponse.

        The download link for the CSV file.

        :param download_link: The download_link of this JobMonitoringCsvDownloadResponse.
        :type download_link: str
        """
        if download_link is None:
            raise ValueError("Invalid value for `download_link`, must not be `None`")

        self._download_link = download_link

    @property
    def job_event_status(self):
        """Gets the job_event_status of this JobMonitoringCsvDownloadResponse.


        :return: The job_event_status of this JobMonitoringCsvDownloadResponse.
        :rtype: JobMonitoringStatus
        """
        return self._job_event_status

    @job_event_status.setter
    def job_event_status(self, job_event_status):
        """Sets the job_event_status of this JobMonitoringCsvDownloadResponse.


        :param job_event_status: The job_event_status of this JobMonitoringCsvDownloadResponse.
        :type job_event_status: JobMonitoringStatus
        """

        self._job_event_status = job_event_status

    @property
    def job_monitoring_state(self):
        """Gets the job_monitoring_state of this JobMonitoringCsvDownloadResponse.


        :return: The job_monitoring_state of this JobMonitoringCsvDownloadResponse.
        :rtype: JobMonitoringState
        """
        return self._job_monitoring_state

    @job_monitoring_state.setter
    def job_monitoring_state(self, job_monitoring_state):
        """Sets the job_monitoring_state of this JobMonitoringCsvDownloadResponse.


        :param job_monitoring_state: The job_monitoring_state of this JobMonitoringCsvDownloadResponse.
        :type job_monitoring_state: JobMonitoringState
        """
        if job_monitoring_state is None:
            raise ValueError("Invalid value for `job_monitoring_state`, must not be `None`")

        self._job_monitoring_state = job_monitoring_state

    @property
    def job_task_type(self):
        """Gets the job_task_type of this JobMonitoringCsvDownloadResponse.


        :return: The job_task_type of this JobMonitoringCsvDownloadResponse.
        :rtype: JobMonitoringTaskType
        """
        return self._job_task_type

    @job_task_type.setter
    def job_task_type(self, job_task_type):
        """Sets the job_task_type of this JobMonitoringCsvDownloadResponse.


        :param job_task_type: The job_task_type of this JobMonitoringCsvDownloadResponse.
        :type job_task_type: JobMonitoringTaskType
        """

        self._job_task_type = job_task_type

    @property
    def object_name(self):
        """Gets the object_name of this JobMonitoringCsvDownloadResponse.

        The requested object name (if applicable).

        :return: The object_name of this JobMonitoringCsvDownloadResponse.
        :rtype: str
        """
        return self._object_name

    @object_name.setter
    def object_name(self, object_name):
        """Sets the object_name of this JobMonitoringCsvDownloadResponse.

        The requested object name (if applicable).

        :param object_name: The object_name of this JobMonitoringCsvDownloadResponse.
        :type object_name: str
        """

        self._object_name = object_name

    @property
    def object_type(self):
        """Gets the object_type of this JobMonitoringCsvDownloadResponse.


        :return: The object_type of this JobMonitoringCsvDownloadResponse.
        :rtype: ReportableObjectType
        """
        return self._object_type

    @object_type.setter
    def object_type(self, object_type):
        """Sets the object_type of this JobMonitoringCsvDownloadResponse.


        :param object_type: The object_type of this JobMonitoringCsvDownloadResponse.
        :type object_type: ReportableObjectType
        """

        self._object_type = object_type

    @property
    def should_include_log_related_job(self):
        """Gets the should_include_log_related_job of this JobMonitoringCsvDownloadResponse.

        A Boolean that specifies whether log-related jobs are included. When this value is 'true,' log-related jobs are included.

        :return: The should_include_log_related_job of this JobMonitoringCsvDownloadResponse.
        :rtype: bool
        """
        return self._should_include_log_related_job

    @should_include_log_related_job.setter
    def should_include_log_related_job(self, should_include_log_related_job):
        """Sets the should_include_log_related_job of this JobMonitoringCsvDownloadResponse.

        A Boolean that specifies whether log-related jobs are included. When this value is 'true,' log-related jobs are included.

        :param should_include_log_related_job: The should_include_log_related_job of this JobMonitoringCsvDownloadResponse.
        :type should_include_log_related_job: bool
        """
        if should_include_log_related_job is None:
            raise ValueError("Invalid value for `should_include_log_related_job`, must not be `None`")

        self._should_include_log_related_job = should_include_log_related_job
