# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.certificate_summary import CertificateSummary
from openapi_server import util


class WebServerCertificateSummary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cert: CertificateSummary=None, web_server_configured_with_ca_signed_certificate: bool=None):
        """WebServerCertificateSummary - a model defined in OpenAPI

        :param cert: The cert of this WebServerCertificateSummary.
        :param web_server_configured_with_ca_signed_certificate: The web_server_configured_with_ca_signed_certificate of this WebServerCertificateSummary.
        """
        self.openapi_types = {
            'cert': CertificateSummary,
            'web_server_configured_with_ca_signed_certificate': bool
        }

        self.attribute_map = {
            'cert': 'cert',
            'web_server_configured_with_ca_signed_certificate': 'webServerConfiguredWithCASignedCertificate'
        }

        self._cert = cert
        self._web_server_configured_with_ca_signed_certificate = web_server_configured_with_ca_signed_certificate

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WebServerCertificateSummary':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WebServerCertificateSummary of this WebServerCertificateSummary.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cert(self):
        """Gets the cert of this WebServerCertificateSummary.


        :return: The cert of this WebServerCertificateSummary.
        :rtype: CertificateSummary
        """
        return self._cert

    @cert.setter
    def cert(self, cert):
        """Sets the cert of this WebServerCertificateSummary.


        :param cert: The cert of this WebServerCertificateSummary.
        :type cert: CertificateSummary
        """

        self._cert = cert

    @property
    def web_server_configured_with_ca_signed_certificate(self):
        """Gets the web_server_configured_with_ca_signed_certificate of this WebServerCertificateSummary.

        A Boolean value that indicates if the web server is configured to use a certificate signed by an external CA.

        :return: The web_server_configured_with_ca_signed_certificate of this WebServerCertificateSummary.
        :rtype: bool
        """
        return self._web_server_configured_with_ca_signed_certificate

    @web_server_configured_with_ca_signed_certificate.setter
    def web_server_configured_with_ca_signed_certificate(self, web_server_configured_with_ca_signed_certificate):
        """Sets the web_server_configured_with_ca_signed_certificate of this WebServerCertificateSummary.

        A Boolean value that indicates if the web server is configured to use a certificate signed by an external CA.

        :param web_server_configured_with_ca_signed_certificate: The web_server_configured_with_ca_signed_certificate of this WebServerCertificateSummary.
        :type web_server_configured_with_ca_signed_certificate: bool
        """
        if web_server_configured_with_ca_signed_certificate is None:
            raise ValueError("Invalid value for `web_server_configured_with_ca_signed_certificate`, must not be `None`")

        self._web_server_configured_with_ca_signed_certificate = web_server_configured_with_ca_signed_certificate
