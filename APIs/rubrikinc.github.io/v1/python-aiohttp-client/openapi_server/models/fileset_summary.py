# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.configured_sla_type import ConfiguredSlaType
from openapi_server.models.fileset_array_spec import FilesetArraySpec
from openapi_server.models.managed_object_pending_sla_info import ManagedObjectPendingSlaInfo
from openapi_server import util


class FilesetSummary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allow_backup_hidden_folders_in_network_mounts: bool=None, allow_backup_network_mounts: bool=None, use_windows_vss: bool=None, configured_sla_domain_id: str=None, configured_sla_domain_name: str=None, configured_sla_domain_type: ConfiguredSlaType=None, id: str=None, is_configured_sla_domain_retention_locked: bool=None, name: str=None, primary_cluster_id: str=None, sla_last_update_time: datetime=None, array_spec: FilesetArraySpec=None, effective_sla_domain_id: str=None, effective_sla_domain_name: str=None, effective_sla_domain_polaris_managed_id: str=None, enable_hardlink_support: bool=None, enable_symlink_resolution: bool=None, exceptions: List[str]=None, excludes: List[str]=None, failover_cluster_app_id: str=None, failover_cluster_app_name: str=None, host_id: str=None, host_name: str=None, includes: List[str]=None, is_effective_sla_domain_retention_locked: bool=None, is_passthrough: bool=None, is_relic: bool=None, operating_system_type: str=None, pending_sla_domain: ManagedObjectPendingSlaInfo=None, share_id: str=None, snap_mirror_label_for_full_backup: str=None, snap_mirror_label_for_incremental_backup: str=None, template_id: str=None, template_name: str=None):
        """FilesetSummary - a model defined in OpenAPI

        :param allow_backup_hidden_folders_in_network_mounts: The allow_backup_hidden_folders_in_network_mounts of this FilesetSummary.
        :param allow_backup_network_mounts: The allow_backup_network_mounts of this FilesetSummary.
        :param use_windows_vss: The use_windows_vss of this FilesetSummary.
        :param configured_sla_domain_id: The configured_sla_domain_id of this FilesetSummary.
        :param configured_sla_domain_name: The configured_sla_domain_name of this FilesetSummary.
        :param configured_sla_domain_type: The configured_sla_domain_type of this FilesetSummary.
        :param id: The id of this FilesetSummary.
        :param is_configured_sla_domain_retention_locked: The is_configured_sla_domain_retention_locked of this FilesetSummary.
        :param name: The name of this FilesetSummary.
        :param primary_cluster_id: The primary_cluster_id of this FilesetSummary.
        :param sla_last_update_time: The sla_last_update_time of this FilesetSummary.
        :param array_spec: The array_spec of this FilesetSummary.
        :param effective_sla_domain_id: The effective_sla_domain_id of this FilesetSummary.
        :param effective_sla_domain_name: The effective_sla_domain_name of this FilesetSummary.
        :param effective_sla_domain_polaris_managed_id: The effective_sla_domain_polaris_managed_id of this FilesetSummary.
        :param enable_hardlink_support: The enable_hardlink_support of this FilesetSummary.
        :param enable_symlink_resolution: The enable_symlink_resolution of this FilesetSummary.
        :param exceptions: The exceptions of this FilesetSummary.
        :param excludes: The excludes of this FilesetSummary.
        :param failover_cluster_app_id: The failover_cluster_app_id of this FilesetSummary.
        :param failover_cluster_app_name: The failover_cluster_app_name of this FilesetSummary.
        :param host_id: The host_id of this FilesetSummary.
        :param host_name: The host_name of this FilesetSummary.
        :param includes: The includes of this FilesetSummary.
        :param is_effective_sla_domain_retention_locked: The is_effective_sla_domain_retention_locked of this FilesetSummary.
        :param is_passthrough: The is_passthrough of this FilesetSummary.
        :param is_relic: The is_relic of this FilesetSummary.
        :param operating_system_type: The operating_system_type of this FilesetSummary.
        :param pending_sla_domain: The pending_sla_domain of this FilesetSummary.
        :param share_id: The share_id of this FilesetSummary.
        :param snap_mirror_label_for_full_backup: The snap_mirror_label_for_full_backup of this FilesetSummary.
        :param snap_mirror_label_for_incremental_backup: The snap_mirror_label_for_incremental_backup of this FilesetSummary.
        :param template_id: The template_id of this FilesetSummary.
        :param template_name: The template_name of this FilesetSummary.
        """
        self.openapi_types = {
            'allow_backup_hidden_folders_in_network_mounts': bool,
            'allow_backup_network_mounts': bool,
            'use_windows_vss': bool,
            'configured_sla_domain_id': str,
            'configured_sla_domain_name': str,
            'configured_sla_domain_type': ConfiguredSlaType,
            'id': str,
            'is_configured_sla_domain_retention_locked': bool,
            'name': str,
            'primary_cluster_id': str,
            'sla_last_update_time': datetime,
            'array_spec': FilesetArraySpec,
            'effective_sla_domain_id': str,
            'effective_sla_domain_name': str,
            'effective_sla_domain_polaris_managed_id': str,
            'enable_hardlink_support': bool,
            'enable_symlink_resolution': bool,
            'exceptions': List[str],
            'excludes': List[str],
            'failover_cluster_app_id': str,
            'failover_cluster_app_name': str,
            'host_id': str,
            'host_name': str,
            'includes': List[str],
            'is_effective_sla_domain_retention_locked': bool,
            'is_passthrough': bool,
            'is_relic': bool,
            'operating_system_type': str,
            'pending_sla_domain': ManagedObjectPendingSlaInfo,
            'share_id': str,
            'snap_mirror_label_for_full_backup': str,
            'snap_mirror_label_for_incremental_backup': str,
            'template_id': str,
            'template_name': str
        }

        self.attribute_map = {
            'allow_backup_hidden_folders_in_network_mounts': 'allowBackupHiddenFoldersInNetworkMounts',
            'allow_backup_network_mounts': 'allowBackupNetworkMounts',
            'use_windows_vss': 'useWindowsVss',
            'configured_sla_domain_id': 'configuredSlaDomainId',
            'configured_sla_domain_name': 'configuredSlaDomainName',
            'configured_sla_domain_type': 'configuredSlaDomainType',
            'id': 'id',
            'is_configured_sla_domain_retention_locked': 'isConfiguredSlaDomainRetentionLocked',
            'name': 'name',
            'primary_cluster_id': 'primaryClusterId',
            'sla_last_update_time': 'slaLastUpdateTime',
            'array_spec': 'arraySpec',
            'effective_sla_domain_id': 'effectiveSlaDomainId',
            'effective_sla_domain_name': 'effectiveSlaDomainName',
            'effective_sla_domain_polaris_managed_id': 'effectiveSlaDomainPolarisManagedId',
            'enable_hardlink_support': 'enableHardlinkSupport',
            'enable_symlink_resolution': 'enableSymlinkResolution',
            'exceptions': 'exceptions',
            'excludes': 'excludes',
            'failover_cluster_app_id': 'failoverClusterAppId',
            'failover_cluster_app_name': 'failoverClusterAppName',
            'host_id': 'hostId',
            'host_name': 'hostName',
            'includes': 'includes',
            'is_effective_sla_domain_retention_locked': 'isEffectiveSlaDomainRetentionLocked',
            'is_passthrough': 'isPassthrough',
            'is_relic': 'isRelic',
            'operating_system_type': 'operatingSystemType',
            'pending_sla_domain': 'pendingSlaDomain',
            'share_id': 'shareId',
            'snap_mirror_label_for_full_backup': 'snapMirrorLabelForFullBackup',
            'snap_mirror_label_for_incremental_backup': 'snapMirrorLabelForIncrementalBackup',
            'template_id': 'templateId',
            'template_name': 'templateName'
        }

        self._allow_backup_hidden_folders_in_network_mounts = allow_backup_hidden_folders_in_network_mounts
        self._allow_backup_network_mounts = allow_backup_network_mounts
        self._use_windows_vss = use_windows_vss
        self._configured_sla_domain_id = configured_sla_domain_id
        self._configured_sla_domain_name = configured_sla_domain_name
        self._configured_sla_domain_type = configured_sla_domain_type
        self._id = id
        self._is_configured_sla_domain_retention_locked = is_configured_sla_domain_retention_locked
        self._name = name
        self._primary_cluster_id = primary_cluster_id
        self._sla_last_update_time = sla_last_update_time
        self._array_spec = array_spec
        self._effective_sla_domain_id = effective_sla_domain_id
        self._effective_sla_domain_name = effective_sla_domain_name
        self._effective_sla_domain_polaris_managed_id = effective_sla_domain_polaris_managed_id
        self._enable_hardlink_support = enable_hardlink_support
        self._enable_symlink_resolution = enable_symlink_resolution
        self._exceptions = exceptions
        self._excludes = excludes
        self._failover_cluster_app_id = failover_cluster_app_id
        self._failover_cluster_app_name = failover_cluster_app_name
        self._host_id = host_id
        self._host_name = host_name
        self._includes = includes
        self._is_effective_sla_domain_retention_locked = is_effective_sla_domain_retention_locked
        self._is_passthrough = is_passthrough
        self._is_relic = is_relic
        self._operating_system_type = operating_system_type
        self._pending_sla_domain = pending_sla_domain
        self._share_id = share_id
        self._snap_mirror_label_for_full_backup = snap_mirror_label_for_full_backup
        self._snap_mirror_label_for_incremental_backup = snap_mirror_label_for_incremental_backup
        self._template_id = template_id
        self._template_name = template_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FilesetSummary':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FilesetSummary of this FilesetSummary.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allow_backup_hidden_folders_in_network_mounts(self):
        """Gets the allow_backup_hidden_folders_in_network_mounts of this FilesetSummary.

        Include or exclude hidden folders inside locally-mounted remote file systems from backups.

        :return: The allow_backup_hidden_folders_in_network_mounts of this FilesetSummary.
        :rtype: bool
        """
        return self._allow_backup_hidden_folders_in_network_mounts

    @allow_backup_hidden_folders_in_network_mounts.setter
    def allow_backup_hidden_folders_in_network_mounts(self, allow_backup_hidden_folders_in_network_mounts):
        """Sets the allow_backup_hidden_folders_in_network_mounts of this FilesetSummary.

        Include or exclude hidden folders inside locally-mounted remote file systems from backups.

        :param allow_backup_hidden_folders_in_network_mounts: The allow_backup_hidden_folders_in_network_mounts of this FilesetSummary.
        :type allow_backup_hidden_folders_in_network_mounts: bool
        """

        self._allow_backup_hidden_folders_in_network_mounts = allow_backup_hidden_folders_in_network_mounts

    @property
    def allow_backup_network_mounts(self):
        """Gets the allow_backup_network_mounts of this FilesetSummary.

        Include or exclude locally-mounted remote file systems from backups.

        :return: The allow_backup_network_mounts of this FilesetSummary.
        :rtype: bool
        """
        return self._allow_backup_network_mounts

    @allow_backup_network_mounts.setter
    def allow_backup_network_mounts(self, allow_backup_network_mounts):
        """Sets the allow_backup_network_mounts of this FilesetSummary.

        Include or exclude locally-mounted remote file systems from backups.

        :param allow_backup_network_mounts: The allow_backup_network_mounts of this FilesetSummary.
        :type allow_backup_network_mounts: bool
        """

        self._allow_backup_network_mounts = allow_backup_network_mounts

    @property
    def use_windows_vss(self):
        """Gets the use_windows_vss of this FilesetSummary.

        Use VSS during Windows backups.

        :return: The use_windows_vss of this FilesetSummary.
        :rtype: bool
        """
        return self._use_windows_vss

    @use_windows_vss.setter
    def use_windows_vss(self, use_windows_vss):
        """Sets the use_windows_vss of this FilesetSummary.

        Use VSS during Windows backups.

        :param use_windows_vss: The use_windows_vss of this FilesetSummary.
        :type use_windows_vss: bool
        """

        self._use_windows_vss = use_windows_vss

    @property
    def configured_sla_domain_id(self):
        """Gets the configured_sla_domain_id of this FilesetSummary.

        The ID of the SLA Domain configured directly on the Rubrik object.

        :return: The configured_sla_domain_id of this FilesetSummary.
        :rtype: str
        """
        return self._configured_sla_domain_id

    @configured_sla_domain_id.setter
    def configured_sla_domain_id(self, configured_sla_domain_id):
        """Sets the configured_sla_domain_id of this FilesetSummary.

        The ID of the SLA Domain configured directly on the Rubrik object.

        :param configured_sla_domain_id: The configured_sla_domain_id of this FilesetSummary.
        :type configured_sla_domain_id: str
        """
        if configured_sla_domain_id is None:
            raise ValueError("Invalid value for `configured_sla_domain_id`, must not be `None`")

        self._configured_sla_domain_id = configured_sla_domain_id

    @property
    def configured_sla_domain_name(self):
        """Gets the configured_sla_domain_name of this FilesetSummary.

        The name of the SLA Domain configured directly on the Rubrik object.

        :return: The configured_sla_domain_name of this FilesetSummary.
        :rtype: str
        """
        return self._configured_sla_domain_name

    @configured_sla_domain_name.setter
    def configured_sla_domain_name(self, configured_sla_domain_name):
        """Sets the configured_sla_domain_name of this FilesetSummary.

        The name of the SLA Domain configured directly on the Rubrik object.

        :param configured_sla_domain_name: The configured_sla_domain_name of this FilesetSummary.
        :type configured_sla_domain_name: str
        """
        if configured_sla_domain_name is None:
            raise ValueError("Invalid value for `configured_sla_domain_name`, must not be `None`")

        self._configured_sla_domain_name = configured_sla_domain_name

    @property
    def configured_sla_domain_type(self):
        """Gets the configured_sla_domain_type of this FilesetSummary.


        :return: The configured_sla_domain_type of this FilesetSummary.
        :rtype: ConfiguredSlaType
        """
        return self._configured_sla_domain_type

    @configured_sla_domain_type.setter
    def configured_sla_domain_type(self, configured_sla_domain_type):
        """Sets the configured_sla_domain_type of this FilesetSummary.


        :param configured_sla_domain_type: The configured_sla_domain_type of this FilesetSummary.
        :type configured_sla_domain_type: ConfiguredSlaType
        """

        self._configured_sla_domain_type = configured_sla_domain_type

    @property
    def id(self):
        """Gets the id of this FilesetSummary.

        The ID of the Rubrik object.

        :return: The id of this FilesetSummary.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this FilesetSummary.

        The ID of the Rubrik object.

        :param id: The id of this FilesetSummary.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def is_configured_sla_domain_retention_locked(self):
        """Gets the is_configured_sla_domain_retention_locked of this FilesetSummary.

        Indicates whether the configured SLA Domain is Retention Locked. When this value is 'true', the configured SLA Domain is a Retention Lock SLA Domain.

        :return: The is_configured_sla_domain_retention_locked of this FilesetSummary.
        :rtype: bool
        """
        return self._is_configured_sla_domain_retention_locked

    @is_configured_sla_domain_retention_locked.setter
    def is_configured_sla_domain_retention_locked(self, is_configured_sla_domain_retention_locked):
        """Sets the is_configured_sla_domain_retention_locked of this FilesetSummary.

        Indicates whether the configured SLA Domain is Retention Locked. When this value is 'true', the configured SLA Domain is a Retention Lock SLA Domain.

        :param is_configured_sla_domain_retention_locked: The is_configured_sla_domain_retention_locked of this FilesetSummary.
        :type is_configured_sla_domain_retention_locked: bool
        """

        self._is_configured_sla_domain_retention_locked = is_configured_sla_domain_retention_locked

    @property
    def name(self):
        """Gets the name of this FilesetSummary.

        The name of the Rubrik object.

        :return: The name of this FilesetSummary.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this FilesetSummary.

        The name of the Rubrik object.

        :param name: The name of this FilesetSummary.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def primary_cluster_id(self):
        """Gets the primary_cluster_id of this FilesetSummary.

        The ID of the cluster that manages the Rubrik object.

        :return: The primary_cluster_id of this FilesetSummary.
        :rtype: str
        """
        return self._primary_cluster_id

    @primary_cluster_id.setter
    def primary_cluster_id(self, primary_cluster_id):
        """Sets the primary_cluster_id of this FilesetSummary.

        The ID of the cluster that manages the Rubrik object.

        :param primary_cluster_id: The primary_cluster_id of this FilesetSummary.
        :type primary_cluster_id: str
        """
        if primary_cluster_id is None:
            raise ValueError("Invalid value for `primary_cluster_id`, must not be `None`")

        self._primary_cluster_id = primary_cluster_id

    @property
    def sla_last_update_time(self):
        """Gets the sla_last_update_time of this FilesetSummary.

        The UTC time when the SLA Domain was last updated.

        :return: The sla_last_update_time of this FilesetSummary.
        :rtype: datetime
        """
        return self._sla_last_update_time

    @sla_last_update_time.setter
    def sla_last_update_time(self, sla_last_update_time):
        """Sets the sla_last_update_time of this FilesetSummary.

        The UTC time when the SLA Domain was last updated.

        :param sla_last_update_time: The sla_last_update_time of this FilesetSummary.
        :type sla_last_update_time: datetime
        """

        self._sla_last_update_time = sla_last_update_time

    @property
    def array_spec(self):
        """Gets the array_spec of this FilesetSummary.


        :return: The array_spec of this FilesetSummary.
        :rtype: FilesetArraySpec
        """
        return self._array_spec

    @array_spec.setter
    def array_spec(self, array_spec):
        """Sets the array_spec of this FilesetSummary.


        :param array_spec: The array_spec of this FilesetSummary.
        :type array_spec: FilesetArraySpec
        """

        self._array_spec = array_spec

    @property
    def effective_sla_domain_id(self):
        """Gets the effective_sla_domain_id of this FilesetSummary.

        The ID of the effective SLA Domain for this fileset.

        :return: The effective_sla_domain_id of this FilesetSummary.
        :rtype: str
        """
        return self._effective_sla_domain_id

    @effective_sla_domain_id.setter
    def effective_sla_domain_id(self, effective_sla_domain_id):
        """Sets the effective_sla_domain_id of this FilesetSummary.

        The ID of the effective SLA Domain for this fileset.

        :param effective_sla_domain_id: The effective_sla_domain_id of this FilesetSummary.
        :type effective_sla_domain_id: str
        """

        self._effective_sla_domain_id = effective_sla_domain_id

    @property
    def effective_sla_domain_name(self):
        """Gets the effective_sla_domain_name of this FilesetSummary.

        The name of the effective SLA Domain for this fileset.

        :return: The effective_sla_domain_name of this FilesetSummary.
        :rtype: str
        """
        return self._effective_sla_domain_name

    @effective_sla_domain_name.setter
    def effective_sla_domain_name(self, effective_sla_domain_name):
        """Sets the effective_sla_domain_name of this FilesetSummary.

        The name of the effective SLA Domain for this fileset.

        :param effective_sla_domain_name: The effective_sla_domain_name of this FilesetSummary.
        :type effective_sla_domain_name: str
        """

        self._effective_sla_domain_name = effective_sla_domain_name

    @property
    def effective_sla_domain_polaris_managed_id(self):
        """Gets the effective_sla_domain_polaris_managed_id of this FilesetSummary.

        Optional field containing Polaris managed ID of the effective SLA domain if it is Polaris managed.

        :return: The effective_sla_domain_polaris_managed_id of this FilesetSummary.
        :rtype: str
        """
        return self._effective_sla_domain_polaris_managed_id

    @effective_sla_domain_polaris_managed_id.setter
    def effective_sla_domain_polaris_managed_id(self, effective_sla_domain_polaris_managed_id):
        """Sets the effective_sla_domain_polaris_managed_id of this FilesetSummary.

        Optional field containing Polaris managed ID of the effective SLA domain if it is Polaris managed.

        :param effective_sla_domain_polaris_managed_id: The effective_sla_domain_polaris_managed_id of this FilesetSummary.
        :type effective_sla_domain_polaris_managed_id: str
        """

        self._effective_sla_domain_polaris_managed_id = effective_sla_domain_polaris_managed_id

    @property
    def enable_hardlink_support(self):
        """Gets the enable_hardlink_support of this FilesetSummary.

        A Boolean value that determines whether to recognize and dedupe hardlinks in a fileset. When 'true,' performs a hardlink deduplication. When 'false,' performs a normal backup that treats hardlinks as normal files. If not specified, this defaults to false.

        :return: The enable_hardlink_support of this FilesetSummary.
        :rtype: bool
        """
        return self._enable_hardlink_support

    @enable_hardlink_support.setter
    def enable_hardlink_support(self, enable_hardlink_support):
        """Sets the enable_hardlink_support of this FilesetSummary.

        A Boolean value that determines whether to recognize and dedupe hardlinks in a fileset. When 'true,' performs a hardlink deduplication. When 'false,' performs a normal backup that treats hardlinks as normal files. If not specified, this defaults to false.

        :param enable_hardlink_support: The enable_hardlink_support of this FilesetSummary.
        :type enable_hardlink_support: bool
        """

        self._enable_hardlink_support = enable_hardlink_support

    @property
    def enable_symlink_resolution(self):
        """Gets the enable_symlink_resolution of this FilesetSummary.

        A Boolean value that determines whether to resolve symlink in a fileset. When 'true,' performs a symlink resolution. When 'false,' performs no symlink resolution. If not specified, this defaults to false.

        :return: The enable_symlink_resolution of this FilesetSummary.
        :rtype: bool
        """
        return self._enable_symlink_resolution

    @enable_symlink_resolution.setter
    def enable_symlink_resolution(self, enable_symlink_resolution):
        """Sets the enable_symlink_resolution of this FilesetSummary.

        A Boolean value that determines whether to resolve symlink in a fileset. When 'true,' performs a symlink resolution. When 'false,' performs no symlink resolution. If not specified, this defaults to false.

        :param enable_symlink_resolution: The enable_symlink_resolution of this FilesetSummary.
        :type enable_symlink_resolution: bool
        """

        self._enable_symlink_resolution = enable_symlink_resolution

    @property
    def exceptions(self):
        """Gets the exceptions of this FilesetSummary.


        :return: The exceptions of this FilesetSummary.
        :rtype: List[str]
        """
        return self._exceptions

    @exceptions.setter
    def exceptions(self, exceptions):
        """Sets the exceptions of this FilesetSummary.


        :param exceptions: The exceptions of this FilesetSummary.
        :type exceptions: List[str]
        """

        self._exceptions = exceptions

    @property
    def excludes(self):
        """Gets the excludes of this FilesetSummary.


        :return: The excludes of this FilesetSummary.
        :rtype: List[str]
        """
        return self._excludes

    @excludes.setter
    def excludes(self, excludes):
        """Sets the excludes of this FilesetSummary.


        :param excludes: The excludes of this FilesetSummary.
        :type excludes: List[str]
        """

        self._excludes = excludes

    @property
    def failover_cluster_app_id(self):
        """Gets the failover_cluster_app_id of this FilesetSummary.

        ID of the failover cluster app.

        :return: The failover_cluster_app_id of this FilesetSummary.
        :rtype: str
        """
        return self._failover_cluster_app_id

    @failover_cluster_app_id.setter
    def failover_cluster_app_id(self, failover_cluster_app_id):
        """Sets the failover_cluster_app_id of this FilesetSummary.

        ID of the failover cluster app.

        :param failover_cluster_app_id: The failover_cluster_app_id of this FilesetSummary.
        :type failover_cluster_app_id: str
        """

        self._failover_cluster_app_id = failover_cluster_app_id

    @property
    def failover_cluster_app_name(self):
        """Gets the failover_cluster_app_name of this FilesetSummary.

        The name of the failover cluster app.

        :return: The failover_cluster_app_name of this FilesetSummary.
        :rtype: str
        """
        return self._failover_cluster_app_name

    @failover_cluster_app_name.setter
    def failover_cluster_app_name(self, failover_cluster_app_name):
        """Sets the failover_cluster_app_name of this FilesetSummary.

        The name of the failover cluster app.

        :param failover_cluster_app_name: The failover_cluster_app_name of this FilesetSummary.
        :type failover_cluster_app_name: str
        """

        self._failover_cluster_app_name = failover_cluster_app_name

    @property
    def host_id(self):
        """Gets the host_id of this FilesetSummary.


        :return: The host_id of this FilesetSummary.
        :rtype: str
        """
        return self._host_id

    @host_id.setter
    def host_id(self, host_id):
        """Sets the host_id of this FilesetSummary.


        :param host_id: The host_id of this FilesetSummary.
        :type host_id: str
        """

        self._host_id = host_id

    @property
    def host_name(self):
        """Gets the host_name of this FilesetSummary.


        :return: The host_name of this FilesetSummary.
        :rtype: str
        """
        return self._host_name

    @host_name.setter
    def host_name(self, host_name):
        """Sets the host_name of this FilesetSummary.


        :param host_name: The host_name of this FilesetSummary.
        :type host_name: str
        """
        if host_name is None:
            raise ValueError("Invalid value for `host_name`, must not be `None`")

        self._host_name = host_name

    @property
    def includes(self):
        """Gets the includes of this FilesetSummary.


        :return: The includes of this FilesetSummary.
        :rtype: List[str]
        """
        return self._includes

    @includes.setter
    def includes(self, includes):
        """Sets the includes of this FilesetSummary.


        :param includes: The includes of this FilesetSummary.
        :type includes: List[str]
        """
        if includes is None:
            raise ValueError("Invalid value for `includes`, must not be `None`")

        self._includes = includes

    @property
    def is_effective_sla_domain_retention_locked(self):
        """Gets the is_effective_sla_domain_retention_locked of this FilesetSummary.

        An optional Boolean value that specifies whether the effective SLA Domain of a fileset is Retention Locked. When this value is 'true,' the SLA Domain is retention locked. When this value is 'false,' the SLA Domain is not Retention Locked.

        :return: The is_effective_sla_domain_retention_locked of this FilesetSummary.
        :rtype: bool
        """
        return self._is_effective_sla_domain_retention_locked

    @is_effective_sla_domain_retention_locked.setter
    def is_effective_sla_domain_retention_locked(self, is_effective_sla_domain_retention_locked):
        """Sets the is_effective_sla_domain_retention_locked of this FilesetSummary.

        An optional Boolean value that specifies whether the effective SLA Domain of a fileset is Retention Locked. When this value is 'true,' the SLA Domain is retention locked. When this value is 'false,' the SLA Domain is not Retention Locked.

        :param is_effective_sla_domain_retention_locked: The is_effective_sla_domain_retention_locked of this FilesetSummary.
        :type is_effective_sla_domain_retention_locked: bool
        """

        self._is_effective_sla_domain_retention_locked = is_effective_sla_domain_retention_locked

    @property
    def is_passthrough(self):
        """Gets the is_passthrough of this FilesetSummary.

        A Boolean value that determines whether to take a direct archive backup. When 'true,' performs a direct archive backup. When 'false,' performs a normal backup. If not specified, this defaults to false.

        :return: The is_passthrough of this FilesetSummary.
        :rtype: bool
        """
        return self._is_passthrough

    @is_passthrough.setter
    def is_passthrough(self, is_passthrough):
        """Sets the is_passthrough of this FilesetSummary.

        A Boolean value that determines whether to take a direct archive backup. When 'true,' performs a direct archive backup. When 'false,' performs a normal backup. If not specified, this defaults to false.

        :param is_passthrough: The is_passthrough of this FilesetSummary.
        :type is_passthrough: bool
        """

        self._is_passthrough = is_passthrough

    @property
    def is_relic(self):
        """Gets the is_relic of this FilesetSummary.


        :return: The is_relic of this FilesetSummary.
        :rtype: bool
        """
        return self._is_relic

    @is_relic.setter
    def is_relic(self, is_relic):
        """Sets the is_relic of this FilesetSummary.


        :param is_relic: The is_relic of this FilesetSummary.
        :type is_relic: bool
        """
        if is_relic is None:
            raise ValueError("Invalid value for `is_relic`, must not be `None`")

        self._is_relic = is_relic

    @property
    def operating_system_type(self):
        """Gets the operating_system_type of this FilesetSummary.


        :return: The operating_system_type of this FilesetSummary.
        :rtype: str
        """
        return self._operating_system_type

    @operating_system_type.setter
    def operating_system_type(self, operating_system_type):
        """Sets the operating_system_type of this FilesetSummary.


        :param operating_system_type: The operating_system_type of this FilesetSummary.
        :type operating_system_type: str
        """

        self._operating_system_type = operating_system_type

    @property
    def pending_sla_domain(self):
        """Gets the pending_sla_domain of this FilesetSummary.


        :return: The pending_sla_domain of this FilesetSummary.
        :rtype: ManagedObjectPendingSlaInfo
        """
        return self._pending_sla_domain

    @pending_sla_domain.setter
    def pending_sla_domain(self, pending_sla_domain):
        """Sets the pending_sla_domain of this FilesetSummary.


        :param pending_sla_domain: The pending_sla_domain of this FilesetSummary.
        :type pending_sla_domain: ManagedObjectPendingSlaInfo
        """

        self._pending_sla_domain = pending_sla_domain

    @property
    def share_id(self):
        """Gets the share_id of this FilesetSummary.


        :return: The share_id of this FilesetSummary.
        :rtype: str
        """
        return self._share_id

    @share_id.setter
    def share_id(self, share_id):
        """Sets the share_id of this FilesetSummary.


        :param share_id: The share_id of this FilesetSummary.
        :type share_id: str
        """

        self._share_id = share_id

    @property
    def snap_mirror_label_for_full_backup(self):
        """Gets the snap_mirror_label_for_full_backup of this FilesetSummary.

        Rubrik CDM uses a prefix match to select the latest SnapMirror snapshot that matches this value during a full backup of a SnapMirror destination share.

        :return: The snap_mirror_label_for_full_backup of this FilesetSummary.
        :rtype: str
        """
        return self._snap_mirror_label_for_full_backup

    @snap_mirror_label_for_full_backup.setter
    def snap_mirror_label_for_full_backup(self, snap_mirror_label_for_full_backup):
        """Sets the snap_mirror_label_for_full_backup of this FilesetSummary.

        Rubrik CDM uses a prefix match to select the latest SnapMirror snapshot that matches this value during a full backup of a SnapMirror destination share.

        :param snap_mirror_label_for_full_backup: The snap_mirror_label_for_full_backup of this FilesetSummary.
        :type snap_mirror_label_for_full_backup: str
        """

        self._snap_mirror_label_for_full_backup = snap_mirror_label_for_full_backup

    @property
    def snap_mirror_label_for_incremental_backup(self):
        """Gets the snap_mirror_label_for_incremental_backup of this FilesetSummary.

        Rubrik CDM selects the latest SnapMirror snapshot that matches this value using a prefix match during an incremental backup of a SnapMirror destination share.

        :return: The snap_mirror_label_for_incremental_backup of this FilesetSummary.
        :rtype: str
        """
        return self._snap_mirror_label_for_incremental_backup

    @snap_mirror_label_for_incremental_backup.setter
    def snap_mirror_label_for_incremental_backup(self, snap_mirror_label_for_incremental_backup):
        """Sets the snap_mirror_label_for_incremental_backup of this FilesetSummary.

        Rubrik CDM selects the latest SnapMirror snapshot that matches this value using a prefix match during an incremental backup of a SnapMirror destination share.

        :param snap_mirror_label_for_incremental_backup: The snap_mirror_label_for_incremental_backup of this FilesetSummary.
        :type snap_mirror_label_for_incremental_backup: str
        """

        self._snap_mirror_label_for_incremental_backup = snap_mirror_label_for_incremental_backup

    @property
    def template_id(self):
        """Gets the template_id of this FilesetSummary.


        :return: The template_id of this FilesetSummary.
        :rtype: str
        """
        return self._template_id

    @template_id.setter
    def template_id(self, template_id):
        """Sets the template_id of this FilesetSummary.


        :param template_id: The template_id of this FilesetSummary.
        :type template_id: str
        """
        if template_id is None:
            raise ValueError("Invalid value for `template_id`, must not be `None`")

        self._template_id = template_id

    @property
    def template_name(self):
        """Gets the template_name of this FilesetSummary.


        :return: The template_name of this FilesetSummary.
        :rtype: str
        """
        return self._template_name

    @template_name.setter
    def template_name(self, template_name):
        """Sets the template_name of this FilesetSummary.


        :param template_name: The template_name of this FilesetSummary.
        :type template_name: str
        """
        if template_name is None:
            raise ValueError("Invalid value for `template_name`, must not be `None`")

        self._template_name = template_name
