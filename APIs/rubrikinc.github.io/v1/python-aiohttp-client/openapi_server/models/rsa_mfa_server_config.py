# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RsaMfaServerConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, timeout: int=120, assurance_policy_name: str=None, base_url: str=None, certificate_id: str=None, client_id: str=None, ldap_username_attribute: str=None, rest_api_access_id: str=None, rest_api_key: str=None):
        """RsaMfaServerConfig - a model defined in OpenAPI

        :param name: The name of this RsaMfaServerConfig.
        :param timeout: The timeout of this RsaMfaServerConfig.
        :param assurance_policy_name: The assurance_policy_name of this RsaMfaServerConfig.
        :param base_url: The base_url of this RsaMfaServerConfig.
        :param certificate_id: The certificate_id of this RsaMfaServerConfig.
        :param client_id: The client_id of this RsaMfaServerConfig.
        :param ldap_username_attribute: The ldap_username_attribute of this RsaMfaServerConfig.
        :param rest_api_access_id: The rest_api_access_id of this RsaMfaServerConfig.
        :param rest_api_key: The rest_api_key of this RsaMfaServerConfig.
        """
        self.openapi_types = {
            'name': str,
            'timeout': int,
            'assurance_policy_name': str,
            'base_url': str,
            'certificate_id': str,
            'client_id': str,
            'ldap_username_attribute': str,
            'rest_api_access_id': str,
            'rest_api_key': str
        }

        self.attribute_map = {
            'name': 'name',
            'timeout': 'timeout',
            'assurance_policy_name': 'assurancePolicyName',
            'base_url': 'baseUrl',
            'certificate_id': 'certificateId',
            'client_id': 'clientId',
            'ldap_username_attribute': 'ldapUsernameAttribute',
            'rest_api_access_id': 'restApiAccessId',
            'rest_api_key': 'restApiKey'
        }

        self._name = name
        self._timeout = timeout
        self._assurance_policy_name = assurance_policy_name
        self._base_url = base_url
        self._certificate_id = certificate_id
        self._client_id = client_id
        self._ldap_username_attribute = ldap_username_attribute
        self._rest_api_access_id = rest_api_access_id
        self._rest_api_key = rest_api_key

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RsaMfaServerConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RsaMfaServerConfig of this RsaMfaServerConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this RsaMfaServerConfig.

        Specifies the name to identify MFA server configuration. 

        :return: The name of this RsaMfaServerConfig.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this RsaMfaServerConfig.

        Specifies the name to identify MFA server configuration. 

        :param name: The name of this RsaMfaServerConfig.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def timeout(self):
        """Gets the timeout of this RsaMfaServerConfig.

        Specifies a number of seconds to wait for server response to a given authentication method. 

        :return: The timeout of this RsaMfaServerConfig.
        :rtype: int
        """
        return self._timeout

    @timeout.setter
    def timeout(self, timeout):
        """Sets the timeout of this RsaMfaServerConfig.

        Specifies a number of seconds to wait for server response to a given authentication method. 

        :param timeout: The timeout of this RsaMfaServerConfig.
        :type timeout: int
        """

        self._timeout = timeout

    @property
    def assurance_policy_name(self):
        """Gets the assurance_policy_name of this RsaMfaServerConfig.

        The name of a Cloud Authentication Service policy. This setting is only required for RSA Cloud Service configurations. 

        :return: The assurance_policy_name of this RsaMfaServerConfig.
        :rtype: str
        """
        return self._assurance_policy_name

    @assurance_policy_name.setter
    def assurance_policy_name(self, assurance_policy_name):
        """Sets the assurance_policy_name of this RsaMfaServerConfig.

        The name of a Cloud Authentication Service policy. This setting is only required for RSA Cloud Service configurations. 

        :param assurance_policy_name: The assurance_policy_name of this RsaMfaServerConfig.
        :type assurance_policy_name: str
        """

        self._assurance_policy_name = assurance_policy_name

    @property
    def base_url(self):
        """Gets the base_url of this RsaMfaServerConfig.

        The base url for RSA REST API server including the host name and port number. A valid input looks like https://<SECURID_ACCESS_HOST >:<REST_API_PORT>/mfa/v1_1. 

        :return: The base_url of this RsaMfaServerConfig.
        :rtype: str
        """
        return self._base_url

    @base_url.setter
    def base_url(self, base_url):
        """Sets the base_url of this RsaMfaServerConfig.

        The base url for RSA REST API server including the host name and port number. A valid input looks like https://<SECURID_ACCESS_HOST >:<REST_API_PORT>/mfa/v1_1. 

        :param base_url: The base_url of this RsaMfaServerConfig.
        :type base_url: str
        """
        if base_url is None:
            raise ValueError("Invalid value for `base_url`, must not be `None`")

        self._base_url = base_url

    @property
    def certificate_id(self):
        """Gets the certificate_id of this RsaMfaServerConfig.

        ID corresponding to the imported certificate.

        :return: The certificate_id of this RsaMfaServerConfig.
        :rtype: str
        """
        return self._certificate_id

    @certificate_id.setter
    def certificate_id(self, certificate_id):
        """Sets the certificate_id of this RsaMfaServerConfig.

        ID corresponding to the imported certificate.

        :param certificate_id: The certificate_id of this RsaMfaServerConfig.
        :type certificate_id: str
        """

        self._certificate_id = certificate_id

    @property
    def client_id(self):
        """Gets the client_id of this RsaMfaServerConfig.

        A unique name to identify the client. When the client is configured to use RSA Authentication Manager, the client ID must match an authentication agent name. 

        :return: The client_id of this RsaMfaServerConfig.
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this RsaMfaServerConfig.

        A unique name to identify the client. When the client is configured to use RSA Authentication Manager, the client ID must match an authentication agent name. 

        :param client_id: The client_id of this RsaMfaServerConfig.
        :type client_id: str
        """

        self._client_id = client_id

    @property
    def ldap_username_attribute(self):
        """Gets the ldap_username_attribute of this RsaMfaServerConfig.

        LDAP attribute to query the username used for performing MFA. 

        :return: The ldap_username_attribute of this RsaMfaServerConfig.
        :rtype: str
        """
        return self._ldap_username_attribute

    @ldap_username_attribute.setter
    def ldap_username_attribute(self, ldap_username_attribute):
        """Sets the ldap_username_attribute of this RsaMfaServerConfig.

        LDAP attribute to query the username used for performing MFA. 

        :param ldap_username_attribute: The ldap_username_attribute of this RsaMfaServerConfig.
        :type ldap_username_attribute: str
        """

        self._ldap_username_attribute = ldap_username_attribute

    @property
    def rest_api_access_id(self):
        """Gets the rest_api_access_id of this RsaMfaServerConfig.

        A unique string that RSA SecurID Access uses to identify individual REST API clients (not to be confused with a REST API Key described above). 

        :return: The rest_api_access_id of this RsaMfaServerConfig.
        :rtype: str
        """
        return self._rest_api_access_id

    @rest_api_access_id.setter
    def rest_api_access_id(self, rest_api_access_id):
        """Sets the rest_api_access_id of this RsaMfaServerConfig.

        A unique string that RSA SecurID Access uses to identify individual REST API clients (not to be confused with a REST API Key described above). 

        :param rest_api_access_id: The rest_api_access_id of this RsaMfaServerConfig.
        :type rest_api_access_id: str
        """

        self._rest_api_access_id = rest_api_access_id

    @property
    def rest_api_key(self):
        """Gets the rest_api_key of this RsaMfaServerConfig.

        A unique string that RSA SecurID Access generates and uses as a shared secret with REST API clients. 

        :return: The rest_api_key of this RsaMfaServerConfig.
        :rtype: str
        """
        return self._rest_api_key

    @rest_api_key.setter
    def rest_api_key(self, rest_api_key):
        """Sets the rest_api_key of this RsaMfaServerConfig.

        A unique string that RSA SecurID Access generates and uses as a shared secret with REST API clients. 

        :param rest_api_key: The rest_api_key of this RsaMfaServerConfig.
        :type rest_api_key: str
        """
        if rest_api_key is None:
            raise ValueError("Invalid value for `rest_api_key`, must not be `None`")

        self._rest_api_key = rest_api_key
