# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DbLogReportPropertiesUpdate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, enable_delay_notification: bool=None, log_delay_notification_frequency_in_min: int=None, log_delay_threshold_in_min: int=None):
        """DbLogReportPropertiesUpdate - a model defined in OpenAPI

        :param enable_delay_notification: The enable_delay_notification of this DbLogReportPropertiesUpdate.
        :param log_delay_notification_frequency_in_min: The log_delay_notification_frequency_in_min of this DbLogReportPropertiesUpdate.
        :param log_delay_threshold_in_min: The log_delay_threshold_in_min of this DbLogReportPropertiesUpdate.
        """
        self.openapi_types = {
            'enable_delay_notification': bool,
            'log_delay_notification_frequency_in_min': int,
            'log_delay_threshold_in_min': int
        }

        self.attribute_map = {
            'enable_delay_notification': 'enableDelayNotification',
            'log_delay_notification_frequency_in_min': 'logDelayNotificationFrequencyInMin',
            'log_delay_threshold_in_min': 'logDelayThresholdInMin'
        }

        self._enable_delay_notification = enable_delay_notification
        self._log_delay_notification_frequency_in_min = log_delay_notification_frequency_in_min
        self._log_delay_threshold_in_min = log_delay_threshold_in_min

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DbLogReportPropertiesUpdate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DbLogReportPropertiesUpdate of this DbLogReportPropertiesUpdate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def enable_delay_notification(self):
        """Gets the enable_delay_notification of this DbLogReportPropertiesUpdate.

        Indicates whether the database log backup delay notification is enabled. Set to 'true' to send an email notification when the log backup delay is more than the configured threshold, and 'false' to disable the behavior.

        :return: The enable_delay_notification of this DbLogReportPropertiesUpdate.
        :rtype: bool
        """
        return self._enable_delay_notification

    @enable_delay_notification.setter
    def enable_delay_notification(self, enable_delay_notification):
        """Sets the enable_delay_notification of this DbLogReportPropertiesUpdate.

        Indicates whether the database log backup delay notification is enabled. Set to 'true' to send an email notification when the log backup delay is more than the configured threshold, and 'false' to disable the behavior.

        :param enable_delay_notification: The enable_delay_notification of this DbLogReportPropertiesUpdate.
        :type enable_delay_notification: bool
        """

        self._enable_delay_notification = enable_delay_notification

    @property
    def log_delay_notification_frequency_in_min(self):
        """Gets the log_delay_notification_frequency_in_min of this DbLogReportPropertiesUpdate.

        An integer that specifies an interval in minutes. Email notifications about the log backup delay exceeding the specified threshold are sent at a maximum frequency specified by the interval.

        :return: The log_delay_notification_frequency_in_min of this DbLogReportPropertiesUpdate.
        :rtype: int
        """
        return self._log_delay_notification_frequency_in_min

    @log_delay_notification_frequency_in_min.setter
    def log_delay_notification_frequency_in_min(self, log_delay_notification_frequency_in_min):
        """Sets the log_delay_notification_frequency_in_min of this DbLogReportPropertiesUpdate.

        An integer that specifies an interval in minutes. Email notifications about the log backup delay exceeding the specified threshold are sent at a maximum frequency specified by the interval.

        :param log_delay_notification_frequency_in_min: The log_delay_notification_frequency_in_min of this DbLogReportPropertiesUpdate.
        :type log_delay_notification_frequency_in_min: int
        """

        self._log_delay_notification_frequency_in_min = log_delay_notification_frequency_in_min

    @property
    def log_delay_threshold_in_min(self):
        """Gets the log_delay_threshold_in_min of this DbLogReportPropertiesUpdate.

        An integer that specifies an interval in minutes. The CDM cluster sends an email notification when a log backup is delayed for longer than the specified interval.

        :return: The log_delay_threshold_in_min of this DbLogReportPropertiesUpdate.
        :rtype: int
        """
        return self._log_delay_threshold_in_min

    @log_delay_threshold_in_min.setter
    def log_delay_threshold_in_min(self, log_delay_threshold_in_min):
        """Sets the log_delay_threshold_in_min of this DbLogReportPropertiesUpdate.

        An integer that specifies an interval in minutes. The CDM cluster sends an email notification when a log backup is delayed for longer than the specified interval.

        :param log_delay_threshold_in_min: The log_delay_threshold_in_min of this DbLogReportPropertiesUpdate.
        :type log_delay_threshold_in_min: int
        """

        self._log_delay_threshold_in_min = log_delay_threshold_in_min
