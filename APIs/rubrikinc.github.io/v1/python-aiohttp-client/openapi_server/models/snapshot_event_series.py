# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SnapshotEventSeries(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, event_series_id: str=None, snapshot_id: str=None):
        """SnapshotEventSeries - a model defined in OpenAPI

        :param event_series_id: The event_series_id of this SnapshotEventSeries.
        :param snapshot_id: The snapshot_id of this SnapshotEventSeries.
        """
        self.openapi_types = {
            'event_series_id': str,
            'snapshot_id': str
        }

        self.attribute_map = {
            'event_series_id': 'eventSeriesId',
            'snapshot_id': 'snapshotId'
        }

        self._event_series_id = event_series_id
        self._snapshot_id = snapshot_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SnapshotEventSeries':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SnapshotEventSeries of this SnapshotEventSeries.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def event_series_id(self):
        """Gets the event_series_id of this SnapshotEventSeries.

        The event series ID for the events triggered during the verification process for that snapshot.

        :return: The event_series_id of this SnapshotEventSeries.
        :rtype: str
        """
        return self._event_series_id

    @event_series_id.setter
    def event_series_id(self, event_series_id):
        """Sets the event_series_id of this SnapshotEventSeries.

        The event series ID for the events triggered during the verification process for that snapshot.

        :param event_series_id: The event_series_id of this SnapshotEventSeries.
        :type event_series_id: str
        """
        if event_series_id is None:
            raise ValueError("Invalid value for `event_series_id`, must not be `None`")

        self._event_series_id = event_series_id

    @property
    def snapshot_id(self):
        """Gets the snapshot_id of this SnapshotEventSeries.

        The ID of the snapshot.

        :return: The snapshot_id of this SnapshotEventSeries.
        :rtype: str
        """
        return self._snapshot_id

    @snapshot_id.setter
    def snapshot_id(self, snapshot_id):
        """Sets the snapshot_id of this SnapshotEventSeries.

        The ID of the snapshot.

        :param snapshot_id: The snapshot_id of this SnapshotEventSeries.
        :type snapshot_id: str
        """
        if snapshot_id is None:
            raise ValueError("Invalid value for `snapshot_id`, must not be `None`")

        self._snapshot_id = snapshot_id
