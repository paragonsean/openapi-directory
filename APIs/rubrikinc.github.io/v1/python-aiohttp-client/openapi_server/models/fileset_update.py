# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class FilesetUpdate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, configured_sla_domain_id: str=None, force_full: bool=None, force_full_partition_ids: List[int]=None, snap_mirror_label_for_full_backup: str=None, snap_mirror_label_for_incremental_backup: str=None):
        """FilesetUpdate - a model defined in OpenAPI

        :param configured_sla_domain_id: The configured_sla_domain_id of this FilesetUpdate.
        :param force_full: The force_full of this FilesetUpdate.
        :param force_full_partition_ids: The force_full_partition_ids of this FilesetUpdate.
        :param snap_mirror_label_for_full_backup: The snap_mirror_label_for_full_backup of this FilesetUpdate.
        :param snap_mirror_label_for_incremental_backup: The snap_mirror_label_for_incremental_backup of this FilesetUpdate.
        """
        self.openapi_types = {
            'configured_sla_domain_id': str,
            'force_full': bool,
            'force_full_partition_ids': List[int],
            'snap_mirror_label_for_full_backup': str,
            'snap_mirror_label_for_incremental_backup': str
        }

        self.attribute_map = {
            'configured_sla_domain_id': 'configuredSlaDomainId',
            'force_full': 'forceFull',
            'force_full_partition_ids': 'forceFullPartitionIds',
            'snap_mirror_label_for_full_backup': 'snapMirrorLabelForFullBackup',
            'snap_mirror_label_for_incremental_backup': 'snapMirrorLabelForIncrementalBackup'
        }

        self._configured_sla_domain_id = configured_sla_domain_id
        self._force_full = force_full
        self._force_full_partition_ids = force_full_partition_ids
        self._snap_mirror_label_for_full_backup = snap_mirror_label_for_full_backup
        self._snap_mirror_label_for_incremental_backup = snap_mirror_label_for_incremental_backup

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FilesetUpdate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FilesetUpdate of this FilesetUpdate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def configured_sla_domain_id(self):
        """Gets the configured_sla_domain_id of this FilesetUpdate.

        Assign Fileset to SLA domain. Existing snapshots of the object will be retained with the configuration of specified SLA Domain.

        :return: The configured_sla_domain_id of this FilesetUpdate.
        :rtype: str
        """
        return self._configured_sla_domain_id

    @configured_sla_domain_id.setter
    def configured_sla_domain_id(self, configured_sla_domain_id):
        """Sets the configured_sla_domain_id of this FilesetUpdate.

        Assign Fileset to SLA domain. Existing snapshots of the object will be retained with the configuration of specified SLA Domain.

        :param configured_sla_domain_id: The configured_sla_domain_id of this FilesetUpdate.
        :type configured_sla_domain_id: str
        """

        self._configured_sla_domain_id = configured_sla_domain_id

    @property
    def force_full(self):
        """Gets the force_full of this FilesetUpdate.

        Whether to force a full on the whole fileset or certain partitions of the fileset. If this is set to true and no partitionIds are provided, then a full will be forced on the whole fileset. If set to true and partitionIds are provided, then we will force a full on only those partitions.

        :return: The force_full of this FilesetUpdate.
        :rtype: bool
        """
        return self._force_full

    @force_full.setter
    def force_full(self, force_full):
        """Sets the force_full of this FilesetUpdate.

        Whether to force a full on the whole fileset or certain partitions of the fileset. If this is set to true and no partitionIds are provided, then a full will be forced on the whole fileset. If set to true and partitionIds are provided, then we will force a full on only those partitions.

        :param force_full: The force_full of this FilesetUpdate.
        :type force_full: bool
        """

        self._force_full = force_full

    @property
    def force_full_partition_ids(self):
        """Gets the force_full_partition_ids of this FilesetUpdate.

        Assign partition ids to set the force full. In order for this to be valid input, forceFull must be set to true.

        :return: The force_full_partition_ids of this FilesetUpdate.
        :rtype: List[int]
        """
        return self._force_full_partition_ids

    @force_full_partition_ids.setter
    def force_full_partition_ids(self, force_full_partition_ids):
        """Sets the force_full_partition_ids of this FilesetUpdate.

        Assign partition ids to set the force full. In order for this to be valid input, forceFull must be set to true.

        :param force_full_partition_ids: The force_full_partition_ids of this FilesetUpdate.
        :type force_full_partition_ids: List[int]
        """

        self._force_full_partition_ids = force_full_partition_ids

    @property
    def snap_mirror_label_for_full_backup(self):
        """Gets the snap_mirror_label_for_full_backup of this FilesetUpdate.

        Rubrik CDM uses a prefix match to select the latest SnapMirror snapshot that matches this value during a full backup of a SnapMirror destination share.

        :return: The snap_mirror_label_for_full_backup of this FilesetUpdate.
        :rtype: str
        """
        return self._snap_mirror_label_for_full_backup

    @snap_mirror_label_for_full_backup.setter
    def snap_mirror_label_for_full_backup(self, snap_mirror_label_for_full_backup):
        """Sets the snap_mirror_label_for_full_backup of this FilesetUpdate.

        Rubrik CDM uses a prefix match to select the latest SnapMirror snapshot that matches this value during a full backup of a SnapMirror destination share.

        :param snap_mirror_label_for_full_backup: The snap_mirror_label_for_full_backup of this FilesetUpdate.
        :type snap_mirror_label_for_full_backup: str
        """

        self._snap_mirror_label_for_full_backup = snap_mirror_label_for_full_backup

    @property
    def snap_mirror_label_for_incremental_backup(self):
        """Gets the snap_mirror_label_for_incremental_backup of this FilesetUpdate.

        Rubrik CDM selects the latest SnapMirror snapshot that matches this value using a prefix match during an incremental backup of a SnapMirror destination share.

        :return: The snap_mirror_label_for_incremental_backup of this FilesetUpdate.
        :rtype: str
        """
        return self._snap_mirror_label_for_incremental_backup

    @snap_mirror_label_for_incremental_backup.setter
    def snap_mirror_label_for_incremental_backup(self, snap_mirror_label_for_incremental_backup):
        """Sets the snap_mirror_label_for_incremental_backup of this FilesetUpdate.

        Rubrik CDM selects the latest SnapMirror snapshot that matches this value using a prefix match during an incremental backup of a SnapMirror destination share.

        :param snap_mirror_label_for_incremental_backup: The snap_mirror_label_for_incremental_backup of this FilesetUpdate.
        :type snap_mirror_label_for_incremental_backup: str
        """

        self._snap_mirror_label_for_incremental_backup = snap_mirror_label_for_incremental_backup
