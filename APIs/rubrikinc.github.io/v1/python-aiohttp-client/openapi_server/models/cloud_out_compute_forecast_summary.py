# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CloudOutComputeForecastSummary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, compute_cost_in_usd: List[int]=None, compute_duration_in_hrs: List[int]=None):
        """CloudOutComputeForecastSummary - a model defined in OpenAPI

        :param compute_cost_in_usd: The compute_cost_in_usd of this CloudOutComputeForecastSummary.
        :param compute_duration_in_hrs: The compute_duration_in_hrs of this CloudOutComputeForecastSummary.
        """
        self.openapi_types = {
            'compute_cost_in_usd': List[int],
            'compute_duration_in_hrs': List[int]
        }

        self.attribute_map = {
            'compute_cost_in_usd': 'computeCostInUSD',
            'compute_duration_in_hrs': 'computeDurationInHrs'
        }

        self._compute_cost_in_usd = compute_cost_in_usd
        self._compute_duration_in_hrs = compute_duration_in_hrs

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CloudOutComputeForecastSummary':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CloudOutComputeForecastSummary of this CloudOutComputeForecastSummary.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def compute_cost_in_usd(self):
        """Gets the compute_cost_in_usd of this CloudOutComputeForecastSummary.

        The cost of running a compute instance. The list contains up to forecastPeriodInGranularityUnit values, one for each granularity. For example, for a 3-year forecast period with a granularity of 'year', the list contains 3 values, the first value for the first year, the second value for the second year, and the third value for the third year.

        :return: The compute_cost_in_usd of this CloudOutComputeForecastSummary.
        :rtype: List[int]
        """
        return self._compute_cost_in_usd

    @compute_cost_in_usd.setter
    def compute_cost_in_usd(self, compute_cost_in_usd):
        """Sets the compute_cost_in_usd of this CloudOutComputeForecastSummary.

        The cost of running a compute instance. The list contains up to forecastPeriodInGranularityUnit values, one for each granularity. For example, for a 3-year forecast period with a granularity of 'year', the list contains 3 values, the first value for the first year, the second value for the second year, and the third value for the third year.

        :param compute_cost_in_usd: The compute_cost_in_usd of this CloudOutComputeForecastSummary.
        :type compute_cost_in_usd: List[int]
        """
        if compute_cost_in_usd is None:
            raise ValueError("Invalid value for `compute_cost_in_usd`, must not be `None`")

        self._compute_cost_in_usd = compute_cost_in_usd

    @property
    def compute_duration_in_hrs(self):
        """Gets the compute_duration_in_hrs of this CloudOutComputeForecastSummary.

        Number of hours for which a compute instance is used. The list contains up to forecastPeriodInGranularityUnit values, one for each granularity. For example, for a 3-year forecast period with a granularity of 'year', the list contains 3 values, the first value for the first year, the second value for the second year, and the third value for the third year.

        :return: The compute_duration_in_hrs of this CloudOutComputeForecastSummary.
        :rtype: List[int]
        """
        return self._compute_duration_in_hrs

    @compute_duration_in_hrs.setter
    def compute_duration_in_hrs(self, compute_duration_in_hrs):
        """Sets the compute_duration_in_hrs of this CloudOutComputeForecastSummary.

        Number of hours for which a compute instance is used. The list contains up to forecastPeriodInGranularityUnit values, one for each granularity. For example, for a 3-year forecast period with a granularity of 'year', the list contains 3 values, the first value for the first year, the second value for the second year, and the third value for the third year.

        :param compute_duration_in_hrs: The compute_duration_in_hrs of this CloudOutComputeForecastSummary.
        :type compute_duration_in_hrs: List[int]
        """
        if compute_duration_in_hrs is None:
            raise ValueError("Invalid value for `compute_duration_in_hrs`, must not be `None`")

        self._compute_duration_in_hrs = compute_duration_in_hrs
