# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.force_full_volume_info import ForceFullVolumeInfo
from openapi_server import util


class VolumeGroupForceFullResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, volume_group_id: str=None, volume_infos: List[ForceFullVolumeInfo]=None):
        """VolumeGroupForceFullResponse - a model defined in OpenAPI

        :param volume_group_id: The volume_group_id of this VolumeGroupForceFullResponse.
        :param volume_infos: The volume_infos of this VolumeGroupForceFullResponse.
        """
        self.openapi_types = {
            'volume_group_id': str,
            'volume_infos': List[ForceFullVolumeInfo]
        }

        self.attribute_map = {
            'volume_group_id': 'volumeGroupId',
            'volume_infos': 'volumeInfos'
        }

        self._volume_group_id = volume_group_id
        self._volume_infos = volume_infos

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VolumeGroupForceFullResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VolumeGroupForceFullResponse of this VolumeGroupForceFullResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def volume_group_id(self):
        """Gets the volume_group_id of this VolumeGroupForceFullResponse.

        The ID of the Volume group.

        :return: The volume_group_id of this VolumeGroupForceFullResponse.
        :rtype: str
        """
        return self._volume_group_id

    @volume_group_id.setter
    def volume_group_id(self, volume_group_id):
        """Sets the volume_group_id of this VolumeGroupForceFullResponse.

        The ID of the Volume group.

        :param volume_group_id: The volume_group_id of this VolumeGroupForceFullResponse.
        :type volume_group_id: str
        """
        if volume_group_id is None:
            raise ValueError("Invalid value for `volume_group_id`, must not be `None`")

        self._volume_group_id = volume_group_id

    @property
    def volume_infos(self):
        """Gets the volume_infos of this VolumeGroupForceFullResponse.

        Configuration for each volume that has requested a forced full snapshot. If the configuration is absent, that means either a forced full snapshot has not been requested for the Volume Group, or a backup job has taken the requested full snapshot and cleared the configuration.

        :return: The volume_infos of this VolumeGroupForceFullResponse.
        :rtype: List[ForceFullVolumeInfo]
        """
        return self._volume_infos

    @volume_infos.setter
    def volume_infos(self, volume_infos):
        """Sets the volume_infos of this VolumeGroupForceFullResponse.

        Configuration for each volume that has requested a forced full snapshot. If the configuration is absent, that means either a forced full snapshot has not been requested for the Volume Group, or a backup job has taken the requested full snapshot and cleared the configuration.

        :param volume_infos: The volume_infos of this VolumeGroupForceFullResponse.
        :type volume_infos: List[ForceFullVolumeInfo]
        """

        self._volume_infos = volume_infos
