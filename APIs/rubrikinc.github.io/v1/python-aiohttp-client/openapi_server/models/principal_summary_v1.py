# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.auth_domain_type import AuthDomainType
from openapi_server.models.principal_type import PrincipalType
from openapi_server.models.role_info import RoleInfo
from openapi_server import util


class PrincipalSummaryV1(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, auth_domain_id: str=None, auth_domain_type: AuthDomainType=None, description: str=None, email_address: str=None, first_name: str=None, id: str=None, is_assigned_roles: bool=None, is_assigned_roles_or_is_local: bool=None, is_locked: bool=None, is_totp_enabled: bool=None, is_totp_enforced: bool=None, last_name: str=None, mfa_server_name: str=None, name: str=None, principal_type: PrincipalType=None, roles: List[RoleInfo]=None):
        """PrincipalSummaryV1 - a model defined in OpenAPI

        :param auth_domain_id: The auth_domain_id of this PrincipalSummaryV1.
        :param auth_domain_type: The auth_domain_type of this PrincipalSummaryV1.
        :param description: The description of this PrincipalSummaryV1.
        :param email_address: The email_address of this PrincipalSummaryV1.
        :param first_name: The first_name of this PrincipalSummaryV1.
        :param id: The id of this PrincipalSummaryV1.
        :param is_assigned_roles: The is_assigned_roles of this PrincipalSummaryV1.
        :param is_assigned_roles_or_is_local: The is_assigned_roles_or_is_local of this PrincipalSummaryV1.
        :param is_locked: The is_locked of this PrincipalSummaryV1.
        :param is_totp_enabled: The is_totp_enabled of this PrincipalSummaryV1.
        :param is_totp_enforced: The is_totp_enforced of this PrincipalSummaryV1.
        :param last_name: The last_name of this PrincipalSummaryV1.
        :param mfa_server_name: The mfa_server_name of this PrincipalSummaryV1.
        :param name: The name of this PrincipalSummaryV1.
        :param principal_type: The principal_type of this PrincipalSummaryV1.
        :param roles: The roles of this PrincipalSummaryV1.
        """
        self.openapi_types = {
            'auth_domain_id': str,
            'auth_domain_type': AuthDomainType,
            'description': str,
            'email_address': str,
            'first_name': str,
            'id': str,
            'is_assigned_roles': bool,
            'is_assigned_roles_or_is_local': bool,
            'is_locked': bool,
            'is_totp_enabled': bool,
            'is_totp_enforced': bool,
            'last_name': str,
            'mfa_server_name': str,
            'name': str,
            'principal_type': PrincipalType,
            'roles': List[RoleInfo]
        }

        self.attribute_map = {
            'auth_domain_id': 'authDomainId',
            'auth_domain_type': 'authDomainType',
            'description': 'description',
            'email_address': 'emailAddress',
            'first_name': 'firstName',
            'id': 'id',
            'is_assigned_roles': 'isAssignedRoles',
            'is_assigned_roles_or_is_local': 'isAssignedRolesOrIsLocal',
            'is_locked': 'isLocked',
            'is_totp_enabled': 'isTotpEnabled',
            'is_totp_enforced': 'isTotpEnforced',
            'last_name': 'lastName',
            'mfa_server_name': 'mfaServerName',
            'name': 'name',
            'principal_type': 'principalType',
            'roles': 'roles'
        }

        self._auth_domain_id = auth_domain_id
        self._auth_domain_type = auth_domain_type
        self._description = description
        self._email_address = email_address
        self._first_name = first_name
        self._id = id
        self._is_assigned_roles = is_assigned_roles
        self._is_assigned_roles_or_is_local = is_assigned_roles_or_is_local
        self._is_locked = is_locked
        self._is_totp_enabled = is_totp_enabled
        self._is_totp_enforced = is_totp_enforced
        self._last_name = last_name
        self._mfa_server_name = mfa_server_name
        self._name = name
        self._principal_type = principal_type
        self._roles = roles

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PrincipalSummaryV1':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PrincipalSummaryV1 of this PrincipalSummaryV1.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def auth_domain_id(self):
        """Gets the auth_domain_id of this PrincipalSummaryV1.

        ID of the authentication domain for a specified principal.

        :return: The auth_domain_id of this PrincipalSummaryV1.
        :rtype: str
        """
        return self._auth_domain_id

    @auth_domain_id.setter
    def auth_domain_id(self, auth_domain_id):
        """Sets the auth_domain_id of this PrincipalSummaryV1.

        ID of the authentication domain for a specified principal.

        :param auth_domain_id: The auth_domain_id of this PrincipalSummaryV1.
        :type auth_domain_id: str
        """
        if auth_domain_id is None:
            raise ValueError("Invalid value for `auth_domain_id`, must not be `None`")

        self._auth_domain_id = auth_domain_id

    @property
    def auth_domain_type(self):
        """Gets the auth_domain_type of this PrincipalSummaryV1.


        :return: The auth_domain_type of this PrincipalSummaryV1.
        :rtype: AuthDomainType
        """
        return self._auth_domain_type

    @auth_domain_type.setter
    def auth_domain_type(self, auth_domain_type):
        """Sets the auth_domain_type of this PrincipalSummaryV1.


        :param auth_domain_type: The auth_domain_type of this PrincipalSummaryV1.
        :type auth_domain_type: AuthDomainType
        """
        if auth_domain_type is None:
            raise ValueError("Invalid value for `auth_domain_type`, must not be `None`")

        self._auth_domain_type = auth_domain_type

    @property
    def description(self):
        """Gets the description of this PrincipalSummaryV1.

        Short description for a principal of type group. For all other types the value is null. 

        :return: The description of this PrincipalSummaryV1.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this PrincipalSummaryV1.

        Short description for a principal of type group. For all other types the value is null. 

        :param description: The description of this PrincipalSummaryV1.
        :type description: str
        """

        self._description = description

    @property
    def email_address(self):
        """Gets the email_address of this PrincipalSummaryV1.

        Email address associated with a principal.

        :return: The email_address of this PrincipalSummaryV1.
        :rtype: str
        """
        return self._email_address

    @email_address.setter
    def email_address(self, email_address):
        """Sets the email_address of this PrincipalSummaryV1.

        Email address associated with a principal.

        :param email_address: The email_address of this PrincipalSummaryV1.
        :type email_address: str
        """

        self._email_address = email_address

    @property
    def first_name(self):
        """Gets the first_name of this PrincipalSummaryV1.

        First name of a principal of type user. For all other types the value is null. 

        :return: The first_name of this PrincipalSummaryV1.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this PrincipalSummaryV1.

        First name of a principal of type user. For all other types the value is null. 

        :param first_name: The first_name of this PrincipalSummaryV1.
        :type first_name: str
        """

        self._first_name = first_name

    @property
    def id(self):
        """Gets the id of this PrincipalSummaryV1.

        ID of a principal in an authentication domain.

        :return: The id of this PrincipalSummaryV1.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PrincipalSummaryV1.

        ID of a principal in an authentication domain.

        :param id: The id of this PrincipalSummaryV1.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def is_assigned_roles(self):
        """Gets the is_assigned_roles of this PrincipalSummaryV1.

        A Boolean that specifies whether the principal has any roles assigned. When this value is 'true,' the principal has one or more roles assigned. 

        :return: The is_assigned_roles of this PrincipalSummaryV1.
        :rtype: bool
        """
        return self._is_assigned_roles

    @is_assigned_roles.setter
    def is_assigned_roles(self, is_assigned_roles):
        """Sets the is_assigned_roles of this PrincipalSummaryV1.

        A Boolean that specifies whether the principal has any roles assigned. When this value is 'true,' the principal has one or more roles assigned. 

        :param is_assigned_roles: The is_assigned_roles of this PrincipalSummaryV1.
        :type is_assigned_roles: bool
        """
        if is_assigned_roles is None:
            raise ValueError("Invalid value for `is_assigned_roles`, must not be `None`")

        self._is_assigned_roles = is_assigned_roles

    @property
    def is_assigned_roles_or_is_local(self):
        """Gets the is_assigned_roles_or_is_local of this PrincipalSummaryV1.

        A Boolean that specifies whether the principal is a local user or has any roles assigned. When this value is 'true,' the principal either has one or more roles assigned or is a local user. 

        :return: The is_assigned_roles_or_is_local of this PrincipalSummaryV1.
        :rtype: bool
        """
        return self._is_assigned_roles_or_is_local

    @is_assigned_roles_or_is_local.setter
    def is_assigned_roles_or_is_local(self, is_assigned_roles_or_is_local):
        """Sets the is_assigned_roles_or_is_local of this PrincipalSummaryV1.

        A Boolean that specifies whether the principal is a local user or has any roles assigned. When this value is 'true,' the principal either has one or more roles assigned or is a local user. 

        :param is_assigned_roles_or_is_local: The is_assigned_roles_or_is_local of this PrincipalSummaryV1.
        :type is_assigned_roles_or_is_local: bool
        """
        if is_assigned_roles_or_is_local is None:
            raise ValueError("Invalid value for `is_assigned_roles_or_is_local`, must not be `None`")

        self._is_assigned_roles_or_is_local = is_assigned_roles_or_is_local

    @property
    def is_locked(self):
        """Gets the is_locked of this PrincipalSummaryV1.

        Boolean value that shows the lock state of a user account. Value is true when the account is locked and false when the account is not locked. 

        :return: The is_locked of this PrincipalSummaryV1.
        :rtype: bool
        """
        return self._is_locked

    @is_locked.setter
    def is_locked(self, is_locked):
        """Sets the is_locked of this PrincipalSummaryV1.

        Boolean value that shows the lock state of a user account. Value is true when the account is locked and false when the account is not locked. 

        :param is_locked: The is_locked of this PrincipalSummaryV1.
        :type is_locked: bool
        """
        if is_locked is None:
            raise ValueError("Invalid value for `is_locked`, must not be `None`")

        self._is_locked = is_locked

    @property
    def is_totp_enabled(self):
        """Gets the is_totp_enabled of this PrincipalSummaryV1.

        Indicates if the principal has TOTP authentication enabled. Returns true when TOTP is enabled, returns false when TOTP is not enabled. 

        :return: The is_totp_enabled of this PrincipalSummaryV1.
        :rtype: bool
        """
        return self._is_totp_enabled

    @is_totp_enabled.setter
    def is_totp_enabled(self, is_totp_enabled):
        """Sets the is_totp_enabled of this PrincipalSummaryV1.

        Indicates if the principal has TOTP authentication enabled. Returns true when TOTP is enabled, returns false when TOTP is not enabled. 

        :param is_totp_enabled: The is_totp_enabled of this PrincipalSummaryV1.
        :type is_totp_enabled: bool
        """

        self._is_totp_enabled = is_totp_enabled

    @property
    def is_totp_enforced(self):
        """Gets the is_totp_enforced of this PrincipalSummaryV1.

        Indicates if the TOTP authentication is enforced. Returns true when TOTP is enforced, returns false when TOTP is not enforced. 

        :return: The is_totp_enforced of this PrincipalSummaryV1.
        :rtype: bool
        """
        return self._is_totp_enforced

    @is_totp_enforced.setter
    def is_totp_enforced(self, is_totp_enforced):
        """Sets the is_totp_enforced of this PrincipalSummaryV1.

        Indicates if the TOTP authentication is enforced. Returns true when TOTP is enforced, returns false when TOTP is not enforced. 

        :param is_totp_enforced: The is_totp_enforced of this PrincipalSummaryV1.
        :type is_totp_enforced: bool
        """

        self._is_totp_enforced = is_totp_enforced

    @property
    def last_name(self):
        """Gets the last_name of this PrincipalSummaryV1.

        Last name of a principal of type user. For all other types the value is null. 

        :return: The last_name of this PrincipalSummaryV1.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this PrincipalSummaryV1.

        Last name of a principal of type user. For all other types the value is null. 

        :param last_name: The last_name of this PrincipalSummaryV1.
        :type last_name: str
        """

        self._last_name = last_name

    @property
    def mfa_server_name(self):
        """Gets the mfa_server_name of this PrincipalSummaryV1.

        Name of the MFA server assgined to the user. 

        :return: The mfa_server_name of this PrincipalSummaryV1.
        :rtype: str
        """
        return self._mfa_server_name

    @mfa_server_name.setter
    def mfa_server_name(self, mfa_server_name):
        """Sets the mfa_server_name of this PrincipalSummaryV1.

        Name of the MFA server assgined to the user. 

        :param mfa_server_name: The mfa_server_name of this PrincipalSummaryV1.
        :type mfa_server_name: str
        """

        self._mfa_server_name = mfa_server_name

    @property
    def name(self):
        """Gets the name of this PrincipalSummaryV1.

        The name of a principal in an authentication domain.

        :return: The name of this PrincipalSummaryV1.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PrincipalSummaryV1.

        The name of a principal in an authentication domain.

        :param name: The name of this PrincipalSummaryV1.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def principal_type(self):
        """Gets the principal_type of this PrincipalSummaryV1.


        :return: The principal_type of this PrincipalSummaryV1.
        :rtype: PrincipalType
        """
        return self._principal_type

    @principal_type.setter
    def principal_type(self, principal_type):
        """Sets the principal_type of this PrincipalSummaryV1.


        :param principal_type: The principal_type of this PrincipalSummaryV1.
        :type principal_type: PrincipalType
        """
        if principal_type is None:
            raise ValueError("Invalid value for `principal_type`, must not be `None`")

        self._principal_type = principal_type

    @property
    def roles(self):
        """Gets the roles of this PrincipalSummaryV1.

        Roles assigned to this principal.

        :return: The roles of this PrincipalSummaryV1.
        :rtype: List[RoleInfo]
        """
        return self._roles

    @roles.setter
    def roles(self, roles):
        """Sets the roles of this PrincipalSummaryV1.

        Roles assigned to this principal.

        :param roles: The roles of this PrincipalSummaryV1.
        :type roles: List[RoleInfo]
        """
        if roles is None:
            raise ValueError("Invalid value for `roles`, must not be `None`")

        self._roles = roles
