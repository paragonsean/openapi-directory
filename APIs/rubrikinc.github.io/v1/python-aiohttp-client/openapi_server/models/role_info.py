# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RoleInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, name: str=None, organization_id: str=None, role_id: str=None, role_template: str=None):
        """RoleInfo - a model defined in OpenAPI

        :param description: The description of this RoleInfo.
        :param name: The name of this RoleInfo.
        :param organization_id: The organization_id of this RoleInfo.
        :param role_id: The role_id of this RoleInfo.
        :param role_template: The role_template of this RoleInfo.
        """
        self.openapi_types = {
            'description': str,
            'name': str,
            'organization_id': str,
            'role_id': str,
            'role_template': str
        }

        self.attribute_map = {
            'description': 'description',
            'name': 'name',
            'organization_id': 'organizationId',
            'role_id': 'roleId',
            'role_template': 'roleTemplate'
        }

        self._description = description
        self._name = name
        self._organization_id = organization_id
        self._role_id = role_id
        self._role_template = role_template

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RoleInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RoleInfo of this RoleInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this RoleInfo.

        The description of the role.

        :return: The description of this RoleInfo.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this RoleInfo.

        The description of the role.

        :param description: The description of this RoleInfo.
        :type description: str
        """

        self._description = description

    @property
    def name(self):
        """Gets the name of this RoleInfo.

        The name of the role.

        :return: The name of this RoleInfo.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this RoleInfo.

        The name of the role.

        :param name: The name of this RoleInfo.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def organization_id(self):
        """Gets the organization_id of this RoleInfo.

        The ID of the organization that owns the role.

        :return: The organization_id of this RoleInfo.
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """Sets the organization_id of this RoleInfo.

        The ID of the organization that owns the role.

        :param organization_id: The organization_id of this RoleInfo.
        :type organization_id: str
        """
        if organization_id is None:
            raise ValueError("Invalid value for `organization_id`, must not be `None`")

        self._organization_id = organization_id

    @property
    def role_id(self):
        """Gets the role_id of this RoleInfo.

        The ID of the role.

        :return: The role_id of this RoleInfo.
        :rtype: str
        """
        return self._role_id

    @role_id.setter
    def role_id(self, role_id):
        """Sets the role_id of this RoleInfo.

        The ID of the role.

        :param role_id: The role_id of this RoleInfo.
        :type role_id: str
        """
        if role_id is None:
            raise ValueError("Invalid value for `role_id`, must not be `None`")

        self._role_id = role_id

    @property
    def role_template(self):
        """Gets the role_template of this RoleInfo.

        The role template associated with the role.

        :return: The role_template of this RoleInfo.
        :rtype: str
        """
        return self._role_template

    @role_template.setter
    def role_template(self, role_template):
        """Sets the role_template of this RoleInfo.

        The role template associated with the role.

        :param role_template: The role_template of this RoleInfo.
        :type role_template: str
        """

        self._role_template = role_template
