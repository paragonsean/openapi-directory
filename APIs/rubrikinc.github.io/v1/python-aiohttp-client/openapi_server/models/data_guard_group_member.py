# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DataGuardGroupMember(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, db_unique_name: str=None, rac_id: str=None, rac_name: str=None, role: str=None, standalone_host_id: str=None, standalone_host_name: str=None):
        """DataGuardGroupMember - a model defined in OpenAPI

        :param db_unique_name: The db_unique_name of this DataGuardGroupMember.
        :param rac_id: The rac_id of this DataGuardGroupMember.
        :param rac_name: The rac_name of this DataGuardGroupMember.
        :param role: The role of this DataGuardGroupMember.
        :param standalone_host_id: The standalone_host_id of this DataGuardGroupMember.
        :param standalone_host_name: The standalone_host_name of this DataGuardGroupMember.
        """
        self.openapi_types = {
            'db_unique_name': str,
            'rac_id': str,
            'rac_name': str,
            'role': str,
            'standalone_host_id': str,
            'standalone_host_name': str
        }

        self.attribute_map = {
            'db_unique_name': 'dbUniqueName',
            'rac_id': 'racId',
            'rac_name': 'racName',
            'role': 'role',
            'standalone_host_id': 'standaloneHostId',
            'standalone_host_name': 'standaloneHostName'
        }

        self._db_unique_name = db_unique_name
        self._rac_id = rac_id
        self._rac_name = rac_name
        self._role = role
        self._standalone_host_id = standalone_host_id
        self._standalone_host_name = standalone_host_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DataGuardGroupMember':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DataGuardGroupMember of this DataGuardGroupMember.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def db_unique_name(self):
        """Gets the db_unique_name of this DataGuardGroupMember.

        Unique name of the member Oracle database.

        :return: The db_unique_name of this DataGuardGroupMember.
        :rtype: str
        """
        return self._db_unique_name

    @db_unique_name.setter
    def db_unique_name(self, db_unique_name):
        """Sets the db_unique_name of this DataGuardGroupMember.

        Unique name of the member Oracle database.

        :param db_unique_name: The db_unique_name of this DataGuardGroupMember.
        :type db_unique_name: str
        """
        if db_unique_name is None:
            raise ValueError("Invalid value for `db_unique_name`, must not be `None`")

        self._db_unique_name = db_unique_name

    @property
    def rac_id(self):
        """Gets the rac_id of this DataGuardGroupMember.

        Rubrik ID of the RAC on which this database is hosted. This field is empty when the database is not hosted on a RAC environment.

        :return: The rac_id of this DataGuardGroupMember.
        :rtype: str
        """
        return self._rac_id

    @rac_id.setter
    def rac_id(self, rac_id):
        """Sets the rac_id of this DataGuardGroupMember.

        Rubrik ID of the RAC on which this database is hosted. This field is empty when the database is not hosted on a RAC environment.

        :param rac_id: The rac_id of this DataGuardGroupMember.
        :type rac_id: str
        """

        self._rac_id = rac_id

    @property
    def rac_name(self):
        """Gets the rac_name of this DataGuardGroupMember.

        Cluster name assigned to the Oracle RAC.

        :return: The rac_name of this DataGuardGroupMember.
        :rtype: str
        """
        return self._rac_name

    @rac_name.setter
    def rac_name(self, rac_name):
        """Sets the rac_name of this DataGuardGroupMember.

        Cluster name assigned to the Oracle RAC.

        :param rac_name: The rac_name of this DataGuardGroupMember.
        :type rac_name: str
        """

        self._rac_name = rac_name

    @property
    def role(self):
        """Gets the role of this DataGuardGroupMember.

        Current role of the member Oracle database.

        :return: The role of this DataGuardGroupMember.
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this DataGuardGroupMember.

        Current role of the member Oracle database.

        :param role: The role of this DataGuardGroupMember.
        :type role: str
        """
        if role is None:
            raise ValueError("Invalid value for `role`, must not be `None`")

        self._role = role

    @property
    def standalone_host_id(self):
        """Gets the standalone_host_id of this DataGuardGroupMember.

        Rubrik ID of the standalone Oracle host on which this database is hosted. This field is empty when the database is not hosted on a standalone system.

        :return: The standalone_host_id of this DataGuardGroupMember.
        :rtype: str
        """
        return self._standalone_host_id

    @standalone_host_id.setter
    def standalone_host_id(self, standalone_host_id):
        """Sets the standalone_host_id of this DataGuardGroupMember.

        Rubrik ID of the standalone Oracle host on which this database is hosted. This field is empty when the database is not hosted on a standalone system.

        :param standalone_host_id: The standalone_host_id of this DataGuardGroupMember.
        :type standalone_host_id: str
        """

        self._standalone_host_id = standalone_host_id

    @property
    def standalone_host_name(self):
        """Gets the standalone_host_name of this DataGuardGroupMember.

        Name of the standalone Oracle database host.

        :return: The standalone_host_name of this DataGuardGroupMember.
        :rtype: str
        """
        return self._standalone_host_name

    @standalone_host_name.setter
    def standalone_host_name(self, standalone_host_name):
        """Sets the standalone_host_name of this DataGuardGroupMember.

        Name of the standalone Oracle database host.

        :param standalone_host_name: The standalone_host_name of this DataGuardGroupMember.
        :type standalone_host_name: str
        """

        self._standalone_host_name = standalone_host_name
