# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class JobMonitoringObjectsCountByType(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, archival: int=None, backup: int=None, conversion: int=None, index: int=None, log_archival: int=None, log_backup: int=None, log_replication: int=None, log_shipping: int=None, recovery: int=None, replication: int=None, total: int=None):
        """JobMonitoringObjectsCountByType - a model defined in OpenAPI

        :param archival: The archival of this JobMonitoringObjectsCountByType.
        :param backup: The backup of this JobMonitoringObjectsCountByType.
        :param conversion: The conversion of this JobMonitoringObjectsCountByType.
        :param index: The index of this JobMonitoringObjectsCountByType.
        :param log_archival: The log_archival of this JobMonitoringObjectsCountByType.
        :param log_backup: The log_backup of this JobMonitoringObjectsCountByType.
        :param log_replication: The log_replication of this JobMonitoringObjectsCountByType.
        :param log_shipping: The log_shipping of this JobMonitoringObjectsCountByType.
        :param recovery: The recovery of this JobMonitoringObjectsCountByType.
        :param replication: The replication of this JobMonitoringObjectsCountByType.
        :param total: The total of this JobMonitoringObjectsCountByType.
        """
        self.openapi_types = {
            'archival': int,
            'backup': int,
            'conversion': int,
            'index': int,
            'log_archival': int,
            'log_backup': int,
            'log_replication': int,
            'log_shipping': int,
            'recovery': int,
            'replication': int,
            'total': int
        }

        self.attribute_map = {
            'archival': 'archival',
            'backup': 'backup',
            'conversion': 'conversion',
            'index': 'index',
            'log_archival': 'logArchival',
            'log_backup': 'logBackup',
            'log_replication': 'logReplication',
            'log_shipping': 'logShipping',
            'recovery': 'recovery',
            'replication': 'replication',
            'total': 'total'
        }

        self._archival = archival
        self._backup = backup
        self._conversion = conversion
        self._index = index
        self._log_archival = log_archival
        self._log_backup = log_backup
        self._log_replication = log_replication
        self._log_shipping = log_shipping
        self._recovery = recovery
        self._replication = replication
        self._total = total

    @classmethod
    def from_dict(cls, dikt: dict) -> 'JobMonitoringObjectsCountByType':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The JobMonitoringObjectsCountByType of this JobMonitoringObjectsCountByType.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def archival(self):
        """Gets the archival of this JobMonitoringObjectsCountByType.

        The total count of all Archival jobs.

        :return: The archival of this JobMonitoringObjectsCountByType.
        :rtype: int
        """
        return self._archival

    @archival.setter
    def archival(self, archival):
        """Sets the archival of this JobMonitoringObjectsCountByType.

        The total count of all Archival jobs.

        :param archival: The archival of this JobMonitoringObjectsCountByType.
        :type archival: int
        """
        if archival is None:
            raise ValueError("Invalid value for `archival`, must not be `None`")

        self._archival = archival

    @property
    def backup(self):
        """Gets the backup of this JobMonitoringObjectsCountByType.

        The total count of all Backup jobs.

        :return: The backup of this JobMonitoringObjectsCountByType.
        :rtype: int
        """
        return self._backup

    @backup.setter
    def backup(self, backup):
        """Sets the backup of this JobMonitoringObjectsCountByType.

        The total count of all Backup jobs.

        :param backup: The backup of this JobMonitoringObjectsCountByType.
        :type backup: int
        """
        if backup is None:
            raise ValueError("Invalid value for `backup`, must not be `None`")

        self._backup = backup

    @property
    def conversion(self):
        """Gets the conversion of this JobMonitoringObjectsCountByType.

        The total count of all Conversion jobs.

        :return: The conversion of this JobMonitoringObjectsCountByType.
        :rtype: int
        """
        return self._conversion

    @conversion.setter
    def conversion(self, conversion):
        """Sets the conversion of this JobMonitoringObjectsCountByType.

        The total count of all Conversion jobs.

        :param conversion: The conversion of this JobMonitoringObjectsCountByType.
        :type conversion: int
        """
        if conversion is None:
            raise ValueError("Invalid value for `conversion`, must not be `None`")

        self._conversion = conversion

    @property
    def index(self):
        """Gets the index of this JobMonitoringObjectsCountByType.

        The total count of all Index jobs.

        :return: The index of this JobMonitoringObjectsCountByType.
        :rtype: int
        """
        return self._index

    @index.setter
    def index(self, index):
        """Sets the index of this JobMonitoringObjectsCountByType.

        The total count of all Index jobs.

        :param index: The index of this JobMonitoringObjectsCountByType.
        :type index: int
        """
        if index is None:
            raise ValueError("Invalid value for `index`, must not be `None`")

        self._index = index

    @property
    def log_archival(self):
        """Gets the log_archival of this JobMonitoringObjectsCountByType.

        The total count of all Log Archival jobs.

        :return: The log_archival of this JobMonitoringObjectsCountByType.
        :rtype: int
        """
        return self._log_archival

    @log_archival.setter
    def log_archival(self, log_archival):
        """Sets the log_archival of this JobMonitoringObjectsCountByType.

        The total count of all Log Archival jobs.

        :param log_archival: The log_archival of this JobMonitoringObjectsCountByType.
        :type log_archival: int
        """
        if log_archival is None:
            raise ValueError("Invalid value for `log_archival`, must not be `None`")

        self._log_archival = log_archival

    @property
    def log_backup(self):
        """Gets the log_backup of this JobMonitoringObjectsCountByType.

        The total count of all Log Backup jobs.

        :return: The log_backup of this JobMonitoringObjectsCountByType.
        :rtype: int
        """
        return self._log_backup

    @log_backup.setter
    def log_backup(self, log_backup):
        """Sets the log_backup of this JobMonitoringObjectsCountByType.

        The total count of all Log Backup jobs.

        :param log_backup: The log_backup of this JobMonitoringObjectsCountByType.
        :type log_backup: int
        """
        if log_backup is None:
            raise ValueError("Invalid value for `log_backup`, must not be `None`")

        self._log_backup = log_backup

    @property
    def log_replication(self):
        """Gets the log_replication of this JobMonitoringObjectsCountByType.

        The total count of all Log Replication jobs.

        :return: The log_replication of this JobMonitoringObjectsCountByType.
        :rtype: int
        """
        return self._log_replication

    @log_replication.setter
    def log_replication(self, log_replication):
        """Sets the log_replication of this JobMonitoringObjectsCountByType.

        The total count of all Log Replication jobs.

        :param log_replication: The log_replication of this JobMonitoringObjectsCountByType.
        :type log_replication: int
        """
        if log_replication is None:
            raise ValueError("Invalid value for `log_replication`, must not be `None`")

        self._log_replication = log_replication

    @property
    def log_shipping(self):
        """Gets the log_shipping of this JobMonitoringObjectsCountByType.

        The total count of all Log Shipping jobs.

        :return: The log_shipping of this JobMonitoringObjectsCountByType.
        :rtype: int
        """
        return self._log_shipping

    @log_shipping.setter
    def log_shipping(self, log_shipping):
        """Sets the log_shipping of this JobMonitoringObjectsCountByType.

        The total count of all Log Shipping jobs.

        :param log_shipping: The log_shipping of this JobMonitoringObjectsCountByType.
        :type log_shipping: int
        """
        if log_shipping is None:
            raise ValueError("Invalid value for `log_shipping`, must not be `None`")

        self._log_shipping = log_shipping

    @property
    def recovery(self):
        """Gets the recovery of this JobMonitoringObjectsCountByType.

        The total count of all Recovery jobs.

        :return: The recovery of this JobMonitoringObjectsCountByType.
        :rtype: int
        """
        return self._recovery

    @recovery.setter
    def recovery(self, recovery):
        """Sets the recovery of this JobMonitoringObjectsCountByType.

        The total count of all Recovery jobs.

        :param recovery: The recovery of this JobMonitoringObjectsCountByType.
        :type recovery: int
        """
        if recovery is None:
            raise ValueError("Invalid value for `recovery`, must not be `None`")

        self._recovery = recovery

    @property
    def replication(self):
        """Gets the replication of this JobMonitoringObjectsCountByType.

        The total count of all Replication jobs.

        :return: The replication of this JobMonitoringObjectsCountByType.
        :rtype: int
        """
        return self._replication

    @replication.setter
    def replication(self, replication):
        """Sets the replication of this JobMonitoringObjectsCountByType.

        The total count of all Replication jobs.

        :param replication: The replication of this JobMonitoringObjectsCountByType.
        :type replication: int
        """
        if replication is None:
            raise ValueError("Invalid value for `replication`, must not be `None`")

        self._replication = replication

    @property
    def total(self):
        """Gets the total of this JobMonitoringObjectsCountByType.

        The total count of all jobs.

        :return: The total of this JobMonitoringObjectsCountByType.
        :rtype: int
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this JobMonitoringObjectsCountByType.

        The total count of all jobs.

        :param total: The total of this JobMonitoringObjectsCountByType.
        :type total: int
        """
        if total is None:
            raise ValueError("Invalid value for `total`, must not be `None`")

        self._total = total
