# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class FilesetSnapshotVerbose(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, has_fingerprint: bool=None, partition_paths: List[str]=None):
        """FilesetSnapshotVerbose - a model defined in OpenAPI

        :param has_fingerprint: The has_fingerprint of this FilesetSnapshotVerbose.
        :param partition_paths: The partition_paths of this FilesetSnapshotVerbose.
        """
        self.openapi_types = {
            'has_fingerprint': bool,
            'partition_paths': List[str]
        }

        self.attribute_map = {
            'has_fingerprint': 'hasFingerprint',
            'partition_paths': 'partitionPaths'
        }

        self._has_fingerprint = has_fingerprint
        self._partition_paths = partition_paths

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FilesetSnapshotVerbose':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FilesetSnapshotVerbose of this FilesetSnapshotVerbose.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def has_fingerprint(self):
        """Gets the has_fingerprint of this FilesetSnapshotVerbose.

        Whether or not the fileset snapshot has fingerprint info.

        :return: The has_fingerprint of this FilesetSnapshotVerbose.
        :rtype: bool
        """
        return self._has_fingerprint

    @has_fingerprint.setter
    def has_fingerprint(self, has_fingerprint):
        """Sets the has_fingerprint of this FilesetSnapshotVerbose.

        Whether or not the fileset snapshot has fingerprint info.

        :param has_fingerprint: The has_fingerprint of this FilesetSnapshotVerbose.
        :type has_fingerprint: bool
        """
        if has_fingerprint is None:
            raise ValueError("Invalid value for `has_fingerprint`, must not be `None`")

        self._has_fingerprint = has_fingerprint

    @property
    def partition_paths(self):
        """Gets the partition_paths of this FilesetSnapshotVerbose.

        List a partition paths for the fileset snapshot.

        :return: The partition_paths of this FilesetSnapshotVerbose.
        :rtype: List[str]
        """
        return self._partition_paths

    @partition_paths.setter
    def partition_paths(self, partition_paths):
        """Sets the partition_paths of this FilesetSnapshotVerbose.

        List a partition paths for the fileset snapshot.

        :param partition_paths: The partition_paths of this FilesetSnapshotVerbose.
        :type partition_paths: List[str]
        """
        if partition_paths is None:
            raise ValueError("Invalid value for `partition_paths`, must not be `None`")

        self._partition_paths = partition_paths
