# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.host_rbs_status import HostRbsStatus
from openapi_server import util


class RbsHostSummary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, agent_id: str=None, agent_version: str=None, name: str=None, os_info: str=None, os_type: str=None, status: HostRbsStatus=None):
        """RbsHostSummary - a model defined in OpenAPI

        :param agent_id: The agent_id of this RbsHostSummary.
        :param agent_version: The agent_version of this RbsHostSummary.
        :param name: The name of this RbsHostSummary.
        :param os_info: The os_info of this RbsHostSummary.
        :param os_type: The os_type of this RbsHostSummary.
        :param status: The status of this RbsHostSummary.
        """
        self.openapi_types = {
            'agent_id': str,
            'agent_version': str,
            'name': str,
            'os_info': str,
            'os_type': str,
            'status': HostRbsStatus
        }

        self.attribute_map = {
            'agent_id': 'agentId',
            'agent_version': 'agentVersion',
            'name': 'name',
            'os_info': 'osInfo',
            'os_type': 'osType',
            'status': 'status'
        }

        self._agent_id = agent_id
        self._agent_version = agent_version
        self._name = name
        self._os_info = os_info
        self._os_type = os_type
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RbsHostSummary':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RbsHostSummary of this RbsHostSummary.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def agent_id(self):
        """Gets the agent_id of this RbsHostSummary.

        UUID that uniquely identifies the Rubrik Backup Service on the Rubrik cluster.

        :return: The agent_id of this RbsHostSummary.
        :rtype: str
        """
        return self._agent_id

    @agent_id.setter
    def agent_id(self, agent_id):
        """Sets the agent_id of this RbsHostSummary.

        UUID that uniquely identifies the Rubrik Backup Service on the Rubrik cluster.

        :param agent_id: The agent_id of this RbsHostSummary.
        :type agent_id: str
        """

        self._agent_id = agent_id

    @property
    def agent_version(self):
        """Gets the agent_version of this RbsHostSummary.

        Version of the Rubrik Backup Service.

        :return: The agent_version of this RbsHostSummary.
        :rtype: str
        """
        return self._agent_version

    @agent_version.setter
    def agent_version(self, agent_version):
        """Sets the agent_version of this RbsHostSummary.

        Version of the Rubrik Backup Service.

        :param agent_version: The agent_version of this RbsHostSummary.
        :type agent_version: str
        """

        self._agent_version = agent_version

    @property
    def name(self):
        """Gets the name of this RbsHostSummary.

        IP address or hostname of the host.

        :return: The name of this RbsHostSummary.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this RbsHostSummary.

        IP address or hostname of the host.

        :param name: The name of this RbsHostSummary.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def os_info(self):
        """Gets the os_info of this RbsHostSummary.

        Version of the operating system that the host is running.

        :return: The os_info of this RbsHostSummary.
        :rtype: str
        """
        return self._os_info

    @os_info.setter
    def os_info(self, os_info):
        """Sets the os_info of this RbsHostSummary.

        Version of the operating system that the host is running.

        :param os_info: The os_info of this RbsHostSummary.
        :type os_info: str
        """

        self._os_info = os_info

    @property
    def os_type(self):
        """Gets the os_type of this RbsHostSummary.

        Type of the operating system that the host is running.

        :return: The os_type of this RbsHostSummary.
        :rtype: str
        """
        return self._os_type

    @os_type.setter
    def os_type(self, os_type):
        """Sets the os_type of this RbsHostSummary.

        Type of the operating system that the host is running.

        :param os_type: The os_type of this RbsHostSummary.
        :type os_type: str
        """

        self._os_type = os_type

    @property
    def status(self):
        """Gets the status of this RbsHostSummary.


        :return: The status of this RbsHostSummary.
        :rtype: HostRbsStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this RbsHostSummary.


        :param status: The status of this RbsHostSummary.
        :type status: HostRbsStatus
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status
