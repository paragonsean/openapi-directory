# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class HotAddBandwidthInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, export_limit: int=None, ingest_limit: int=None):
        """HotAddBandwidthInfo - a model defined in OpenAPI

        :param export_limit: The export_limit of this HotAddBandwidthInfo.
        :param ingest_limit: The ingest_limit of this HotAddBandwidthInfo.
        """
        self.openapi_types = {
            'export_limit': int,
            'ingest_limit': int
        }

        self.attribute_map = {
            'export_limit': 'exportLimit',
            'ingest_limit': 'ingestLimit'
        }

        self._export_limit = export_limit
        self._ingest_limit = ingest_limit

    @classmethod
    def from_dict(cls, dikt: dict) -> 'HotAddBandwidthInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The HotAddBandwidthInfo of this HotAddBandwidthInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def export_limit(self):
        """Gets the export_limit of this HotAddBandwidthInfo.

        The HotAdd bandwidth limit in Mbps for export.

        :return: The export_limit of this HotAddBandwidthInfo.
        :rtype: int
        """
        return self._export_limit

    @export_limit.setter
    def export_limit(self, export_limit):
        """Sets the export_limit of this HotAddBandwidthInfo.

        The HotAdd bandwidth limit in Mbps for export.

        :param export_limit: The export_limit of this HotAddBandwidthInfo.
        :type export_limit: int
        """
        if export_limit is None:
            raise ValueError("Invalid value for `export_limit`, must not be `None`")

        self._export_limit = export_limit

    @property
    def ingest_limit(self):
        """Gets the ingest_limit of this HotAddBandwidthInfo.

        The HotAdd bandwidth limit in Mbps for ingest.

        :return: The ingest_limit of this HotAddBandwidthInfo.
        :rtype: int
        """
        return self._ingest_limit

    @ingest_limit.setter
    def ingest_limit(self, ingest_limit):
        """Sets the ingest_limit of this HotAddBandwidthInfo.

        The HotAdd bandwidth limit in Mbps for ingest.

        :param ingest_limit: The ingest_limit of this HotAddBandwidthInfo.
        :type ingest_limit: int
        """
        if ingest_limit is None:
            raise ValueError("Invalid value for `ingest_limit`, must not be `None`")

        self._ingest_limit = ingest_limit
