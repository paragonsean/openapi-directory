# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ForceFullVolumeInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, should_dedupe: bool=True, volume_id: str=None):
        """ForceFullVolumeInfo - a model defined in OpenAPI

        :param should_dedupe: The should_dedupe of this ForceFullVolumeInfo.
        :param volume_id: The volume_id of this ForceFullVolumeInfo.
        """
        self.openapi_types = {
            'should_dedupe': bool,
            'volume_id': str
        }

        self.attribute_map = {
            'should_dedupe': 'shouldDedupe',
            'volume_id': 'volumeId'
        }

        self._should_dedupe = should_dedupe
        self._volume_id = volume_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ForceFullVolumeInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ForceFullVolumeInfo of this ForceFullVolumeInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def should_dedupe(self):
        """Gets the should_dedupe of this ForceFullVolumeInfo.

        Specifies whether deduplication should be enabled for the forced full snapshot of the Volume. When set to true, deduplication is performed against local data on the cluster.

        :return: The should_dedupe of this ForceFullVolumeInfo.
        :rtype: bool
        """
        return self._should_dedupe

    @should_dedupe.setter
    def should_dedupe(self, should_dedupe):
        """Sets the should_dedupe of this ForceFullVolumeInfo.

        Specifies whether deduplication should be enabled for the forced full snapshot of the Volume. When set to true, deduplication is performed against local data on the cluster.

        :param should_dedupe: The should_dedupe of this ForceFullVolumeInfo.
        :type should_dedupe: bool
        """
        if should_dedupe is None:
            raise ValueError("Invalid value for `should_dedupe`, must not be `None`")

        self._should_dedupe = should_dedupe

    @property
    def volume_id(self):
        """Gets the volume_id of this ForceFullVolumeInfo.

        The unique ID of the volume within the Volume Group.

        :return: The volume_id of this ForceFullVolumeInfo.
        :rtype: str
        """
        return self._volume_id

    @volume_id.setter
    def volume_id(self, volume_id):
        """Sets the volume_id of this ForceFullVolumeInfo.

        The unique ID of the volume within the Volume Group.

        :param volume_id: The volume_id of this ForceFullVolumeInfo.
        :type volume_id: str
        """
        if volume_id is None:
            raise ValueError("Invalid value for `volume_id`, must not be `None`")

        self._volume_id = volume_id
