# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class VcdVappPatch(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, configured_sla_domain_id: str=None, is_best_effort_synchronization_enabled: bool=None, is_paused: bool=None, vcd_vm_moids_to_exclude_from_snapshot: List[str]=None):
        """VcdVappPatch - a model defined in OpenAPI

        :param configured_sla_domain_id: The configured_sla_domain_id of this VcdVappPatch.
        :param is_best_effort_synchronization_enabled: The is_best_effort_synchronization_enabled of this VcdVappPatch.
        :param is_paused: The is_paused of this VcdVappPatch.
        :param vcd_vm_moids_to_exclude_from_snapshot: The vcd_vm_moids_to_exclude_from_snapshot of this VcdVappPatch.
        """
        self.openapi_types = {
            'configured_sla_domain_id': str,
            'is_best_effort_synchronization_enabled': bool,
            'is_paused': bool,
            'vcd_vm_moids_to_exclude_from_snapshot': List[str]
        }

        self.attribute_map = {
            'configured_sla_domain_id': 'configuredSlaDomainId',
            'is_best_effort_synchronization_enabled': 'isBestEffortSynchronizationEnabled',
            'is_paused': 'isPaused',
            'vcd_vm_moids_to_exclude_from_snapshot': 'vcdVmMoidsToExcludeFromSnapshot'
        }

        self._configured_sla_domain_id = configured_sla_domain_id
        self._is_best_effort_synchronization_enabled = is_best_effort_synchronization_enabled
        self._is_paused = is_paused
        self._vcd_vm_moids_to_exclude_from_snapshot = vcd_vm_moids_to_exclude_from_snapshot

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VcdVappPatch':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VcdVappPatch of this VcdVappPatch.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def configured_sla_domain_id(self):
        """Gets the configured_sla_domain_id of this VcdVappPatch.

        ID assigned to the SLA Domain object that manages protection for the specified vApp object. Existing snapshots of the object will be retained with the configuration of the specified SLA Domain.

        :return: The configured_sla_domain_id of this VcdVappPatch.
        :rtype: str
        """
        return self._configured_sla_domain_id

    @configured_sla_domain_id.setter
    def configured_sla_domain_id(self, configured_sla_domain_id):
        """Sets the configured_sla_domain_id of this VcdVappPatch.

        ID assigned to the SLA Domain object that manages protection for the specified vApp object. Existing snapshots of the object will be retained with the configuration of the specified SLA Domain.

        :param configured_sla_domain_id: The configured_sla_domain_id of this VcdVappPatch.
        :type configured_sla_domain_id: str
        """

        self._configured_sla_domain_id = configured_sla_domain_id

    @property
    def is_best_effort_synchronization_enabled(self):
        """Gets the is_best_effort_synchronization_enabled of this VcdVappPatch.

        Boolean value that indicates whether the Rubrik cluster should attempt taking synchronized snapshots across all child virtual machines of the vApp.

        :return: The is_best_effort_synchronization_enabled of this VcdVappPatch.
        :rtype: bool
        """
        return self._is_best_effort_synchronization_enabled

    @is_best_effort_synchronization_enabled.setter
    def is_best_effort_synchronization_enabled(self, is_best_effort_synchronization_enabled):
        """Sets the is_best_effort_synchronization_enabled of this VcdVappPatch.

        Boolean value that indicates whether the Rubrik cluster should attempt taking synchronized snapshots across all child virtual machines of the vApp.

        :param is_best_effort_synchronization_enabled: The is_best_effort_synchronization_enabled of this VcdVappPatch.
        :type is_best_effort_synchronization_enabled: bool
        """

        self._is_best_effort_synchronization_enabled = is_best_effort_synchronization_enabled

    @property
    def is_paused(self):
        """Gets the is_paused of this VcdVappPatch.

        Boolean value that indicates whether protection activity is paused for the specified vApp. Set to 'true' when protection activity is paused and 'false' when protection activity is not paused. Protection activity includes backup, replication, and archiving.

        :return: The is_paused of this VcdVappPatch.
        :rtype: bool
        """
        return self._is_paused

    @is_paused.setter
    def is_paused(self, is_paused):
        """Sets the is_paused of this VcdVappPatch.

        Boolean value that indicates whether protection activity is paused for the specified vApp. Set to 'true' when protection activity is paused and 'false' when protection activity is not paused. Protection activity includes backup, replication, and archiving.

        :param is_paused: The is_paused of this VcdVappPatch.
        :type is_paused: bool
        """

        self._is_paused = is_paused

    @property
    def vcd_vm_moids_to_exclude_from_snapshot(self):
        """Gets the vcd_vm_moids_to_exclude_from_snapshot of this VcdVappPatch.

        Array containing vCloud Director virtual machine moids that will be excluded from vApp snapshots.

        :return: The vcd_vm_moids_to_exclude_from_snapshot of this VcdVappPatch.
        :rtype: List[str]
        """
        return self._vcd_vm_moids_to_exclude_from_snapshot

    @vcd_vm_moids_to_exclude_from_snapshot.setter
    def vcd_vm_moids_to_exclude_from_snapshot(self, vcd_vm_moids_to_exclude_from_snapshot):
        """Sets the vcd_vm_moids_to_exclude_from_snapshot of this VcdVappPatch.

        Array containing vCloud Director virtual machine moids that will be excluded from vApp snapshots.

        :param vcd_vm_moids_to_exclude_from_snapshot: The vcd_vm_moids_to_exclude_from_snapshot of this VcdVappPatch.
        :type vcd_vm_moids_to_exclude_from_snapshot: List[str]
        """

        self._vcd_vm_moids_to_exclude_from_snapshot = vcd_vm_moids_to_exclude_from_snapshot
