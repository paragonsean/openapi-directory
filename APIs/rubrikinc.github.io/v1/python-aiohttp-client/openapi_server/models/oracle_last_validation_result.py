# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class OracleLastValidationResult(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, event_series_id: str=None, is_success: bool=None, validation_time: datetime=None):
        """OracleLastValidationResult - a model defined in OpenAPI

        :param event_series_id: The event_series_id of this OracleLastValidationResult.
        :param is_success: The is_success of this OracleLastValidationResult.
        :param validation_time: The validation_time of this OracleLastValidationResult.
        """
        self.openapi_types = {
            'event_series_id': str,
            'is_success': bool,
            'validation_time': datetime
        }

        self.attribute_map = {
            'event_series_id': 'eventSeriesId',
            'is_success': 'isSuccess',
            'validation_time': 'validationTime'
        }

        self._event_series_id = event_series_id
        self._is_success = is_success
        self._validation_time = validation_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OracleLastValidationResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OracleLastValidationResult of this OracleLastValidationResult.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def event_series_id(self):
        """Gets the event_series_id of this OracleLastValidationResult.

        The eventseries ID for the last validation job.

        :return: The event_series_id of this OracleLastValidationResult.
        :rtype: str
        """
        return self._event_series_id

    @event_series_id.setter
    def event_series_id(self, event_series_id):
        """Sets the event_series_id of this OracleLastValidationResult.

        The eventseries ID for the last validation job.

        :param event_series_id: The event_series_id of this OracleLastValidationResult.
        :type event_series_id: str
        """
        if event_series_id is None:
            raise ValueError("Invalid value for `event_series_id`, must not be `None`")

        self._event_series_id = event_series_id

    @property
    def is_success(self):
        """Gets the is_success of this OracleLastValidationResult.

        A Boolean that specifies whether the last validation successfully completed.

        :return: The is_success of this OracleLastValidationResult.
        :rtype: bool
        """
        return self._is_success

    @is_success.setter
    def is_success(self, is_success):
        """Sets the is_success of this OracleLastValidationResult.

        A Boolean that specifies whether the last validation successfully completed.

        :param is_success: The is_success of this OracleLastValidationResult.
        :type is_success: bool
        """
        if is_success is None:
            raise ValueError("Invalid value for `is_success`, must not be `None`")

        self._is_success = is_success

    @property
    def validation_time(self):
        """Gets the validation_time of this OracleLastValidationResult.

        The timestamp of the recovery point to validate.

        :return: The validation_time of this OracleLastValidationResult.
        :rtype: datetime
        """
        return self._validation_time

    @validation_time.setter
    def validation_time(self, validation_time):
        """Sets the validation_time of this OracleLastValidationResult.

        The timestamp of the recovery point to validate.

        :param validation_time: The validation_time of this OracleLastValidationResult.
        :type validation_time: datetime
        """
        if validation_time is None:
            raise ValueError("Invalid value for `validation_time`, must not be `None`")

        self._validation_time = validation_time
