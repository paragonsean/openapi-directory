# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RestoreFileJobConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, domain_name: str=None, ignore_errors: bool=False, password: str=None, path: str=None, restore_path: str=None, should_restore_x_attrs: bool=None, should_save_credentials: bool=None, should_use_agent: bool=True, username: str=None):
        """RestoreFileJobConfig - a model defined in OpenAPI

        :param domain_name: The domain_name of this RestoreFileJobConfig.
        :param ignore_errors: The ignore_errors of this RestoreFileJobConfig.
        :param password: The password of this RestoreFileJobConfig.
        :param path: The path of this RestoreFileJobConfig.
        :param restore_path: The restore_path of this RestoreFileJobConfig.
        :param should_restore_x_attrs: The should_restore_x_attrs of this RestoreFileJobConfig.
        :param should_save_credentials: The should_save_credentials of this RestoreFileJobConfig.
        :param should_use_agent: The should_use_agent of this RestoreFileJobConfig.
        :param username: The username of this RestoreFileJobConfig.
        """
        self.openapi_types = {
            'domain_name': str,
            'ignore_errors': bool,
            'password': str,
            'path': str,
            'restore_path': str,
            'should_restore_x_attrs': bool,
            'should_save_credentials': bool,
            'should_use_agent': bool,
            'username': str
        }

        self.attribute_map = {
            'domain_name': 'domainName',
            'ignore_errors': 'ignoreErrors',
            'password': 'password',
            'path': 'path',
            'restore_path': 'restorePath',
            'should_restore_x_attrs': 'shouldRestoreXAttrs',
            'should_save_credentials': 'shouldSaveCredentials',
            'should_use_agent': 'shouldUseAgent',
            'username': 'username'
        }

        self._domain_name = domain_name
        self._ignore_errors = ignore_errors
        self._password = password
        self._path = path
        self._restore_path = restore_path
        self._should_restore_x_attrs = should_restore_x_attrs
        self._should_save_credentials = should_save_credentials
        self._should_use_agent = should_use_agent
        self._username = username

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RestoreFileJobConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RestoreFileJobConfig of this RestoreFileJobConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def domain_name(self):
        """Gets the domain_name of this RestoreFileJobConfig.

        Domain name (Use . for local admin).

        :return: The domain_name of this RestoreFileJobConfig.
        :rtype: str
        """
        return self._domain_name

    @domain_name.setter
    def domain_name(self, domain_name):
        """Sets the domain_name of this RestoreFileJobConfig.

        Domain name (Use . for local admin).

        :param domain_name: The domain_name of this RestoreFileJobConfig.
        :type domain_name: str
        """

        self._domain_name = domain_name

    @property
    def ignore_errors(self):
        """Gets the ignore_errors of this RestoreFileJobConfig.

        Optional Boolean field to determine whether to ignore errors during restore jobs that use the Rubrik Backup Service. When 'true', errors are ignored. Default value is 'false', errors are not ignored.

        :return: The ignore_errors of this RestoreFileJobConfig.
        :rtype: bool
        """
        return self._ignore_errors

    @ignore_errors.setter
    def ignore_errors(self, ignore_errors):
        """Sets the ignore_errors of this RestoreFileJobConfig.

        Optional Boolean field to determine whether to ignore errors during restore jobs that use the Rubrik Backup Service. When 'true', errors are ignored. Default value is 'false', errors are not ignored.

        :param ignore_errors: The ignore_errors of this RestoreFileJobConfig.
        :type ignore_errors: bool
        """

        self._ignore_errors = ignore_errors

    @property
    def password(self):
        """Gets the password of this RestoreFileJobConfig.

        Password.

        :return: The password of this RestoreFileJobConfig.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this RestoreFileJobConfig.

        Password.

        :param password: The password of this RestoreFileJobConfig.
        :type password: str
        """

        self._password = password

    @property
    def path(self):
        """Gets the path of this RestoreFileJobConfig.

        Absolute file path.

        :return: The path of this RestoreFileJobConfig.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this RestoreFileJobConfig.

        Absolute file path.

        :param path: The path of this RestoreFileJobConfig.
        :type path: str
        """
        if path is None:
            raise ValueError("Invalid value for `path`, must not be `None`")

        self._path = path

    @property
    def restore_path(self):
        """Gets the restore_path of this RestoreFileJobConfig.

        Directory of folder to copy files into.

        :return: The restore_path of this RestoreFileJobConfig.
        :rtype: str
        """
        return self._restore_path

    @restore_path.setter
    def restore_path(self, restore_path):
        """Sets the restore_path of this RestoreFileJobConfig.

        Directory of folder to copy files into.

        :param restore_path: The restore_path of this RestoreFileJobConfig.
        :type restore_path: str
        """
        if restore_path is None:
            raise ValueError("Invalid value for `restore_path`, must not be `None`")

        self._restore_path = restore_path

    @property
    def should_restore_x_attrs(self):
        """Gets the should_restore_x_attrs of this RestoreFileJobConfig.

        Boolean value that determines restore file settings for Linux systems and for Windows systems. For Linux, use 'true' to include the extended attributes of restored files. For Window, use 'true' to include alternate data streams for restored files. For both, use 'false' to exclude this additional metadata.

        :return: The should_restore_x_attrs of this RestoreFileJobConfig.
        :rtype: bool
        """
        return self._should_restore_x_attrs

    @should_restore_x_attrs.setter
    def should_restore_x_attrs(self, should_restore_x_attrs):
        """Sets the should_restore_x_attrs of this RestoreFileJobConfig.

        Boolean value that determines restore file settings for Linux systems and for Windows systems. For Linux, use 'true' to include the extended attributes of restored files. For Window, use 'true' to include alternate data streams for restored files. For both, use 'false' to exclude this additional metadata.

        :param should_restore_x_attrs: The should_restore_x_attrs of this RestoreFileJobConfig.
        :type should_restore_x_attrs: bool
        """

        self._should_restore_x_attrs = should_restore_x_attrs

    @property
    def should_save_credentials(self):
        """Gets the should_save_credentials of this RestoreFileJobConfig.

        A Boolean value that specifies whether to save the user-entered credentials. When 'true', the user-entered credentials are saved.

        :return: The should_save_credentials of this RestoreFileJobConfig.
        :rtype: bool
        """
        return self._should_save_credentials

    @should_save_credentials.setter
    def should_save_credentials(self, should_save_credentials):
        """Sets the should_save_credentials of this RestoreFileJobConfig.

        A Boolean value that specifies whether to save the user-entered credentials. When 'true', the user-entered credentials are saved.

        :param should_save_credentials: The should_save_credentials of this RestoreFileJobConfig.
        :type should_save_credentials: bool
        """

        self._should_save_credentials = should_save_credentials

    @property
    def should_use_agent(self):
        """Gets the should_use_agent of this RestoreFileJobConfig.

        A Boolean that specifies whether to use the Rubrik Backup Service or VMware tools to restore file. When 'true', the RBS restores file. When 'false', the VMware tools restores file.

        :return: The should_use_agent of this RestoreFileJobConfig.
        :rtype: bool
        """
        return self._should_use_agent

    @should_use_agent.setter
    def should_use_agent(self, should_use_agent):
        """Sets the should_use_agent of this RestoreFileJobConfig.

        A Boolean that specifies whether to use the Rubrik Backup Service or VMware tools to restore file. When 'true', the RBS restores file. When 'false', the VMware tools restores file.

        :param should_use_agent: The should_use_agent of this RestoreFileJobConfig.
        :type should_use_agent: bool
        """

        self._should_use_agent = should_use_agent

    @property
    def username(self):
        """Gets the username of this RestoreFileJobConfig.

        Username.

        :return: The username of this RestoreFileJobConfig.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this RestoreFileJobConfig.

        Username.

        :param username: The username of this RestoreFileJobConfig.
        :type username: str
        """

        self._username = username
