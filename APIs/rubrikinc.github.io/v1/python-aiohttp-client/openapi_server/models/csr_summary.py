# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CsrSummary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, csr: str=None, csr_id: str=None, hostnames: List[str]=None, name: str=None, subject: str=None):
        """CsrSummary - a model defined in OpenAPI

        :param csr: The csr of this CsrSummary.
        :param csr_id: The csr_id of this CsrSummary.
        :param hostnames: The hostnames of this CsrSummary.
        :param name: The name of this CsrSummary.
        :param subject: The subject of this CsrSummary.
        """
        self.openapi_types = {
            'csr': str,
            'csr_id': str,
            'hostnames': List[str],
            'name': str,
            'subject': str
        }

        self.attribute_map = {
            'csr': 'csr',
            'csr_id': 'csrId',
            'hostnames': 'hostnames',
            'name': 'name',
            'subject': 'subject'
        }

        self._csr = csr
        self._csr_id = csr_id
        self._hostnames = hostnames
        self._name = name
        self._subject = subject

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CsrSummary':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CsrSummary of this CsrSummary.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def csr(self):
        """Gets the csr of this CsrSummary.

        Base64 encoded PKCS#10 certificate signing request. The request should start with -----BEGIN CERTIFICATE REQUEST-----.

        :return: The csr of this CsrSummary.
        :rtype: str
        """
        return self._csr

    @csr.setter
    def csr(self, csr):
        """Sets the csr of this CsrSummary.

        Base64 encoded PKCS#10 certificate signing request. The request should start with -----BEGIN CERTIFICATE REQUEST-----.

        :param csr: The csr of this CsrSummary.
        :type csr: str
        """
        if csr is None:
            raise ValueError("Invalid value for `csr`, must not be `None`")

        self._csr = csr

    @property
    def csr_id(self):
        """Gets the csr_id of this CsrSummary.

        ID of the generated CSR.

        :return: The csr_id of this CsrSummary.
        :rtype: str
        """
        return self._csr_id

    @csr_id.setter
    def csr_id(self, csr_id):
        """Sets the csr_id of this CsrSummary.

        ID of the generated CSR.

        :param csr_id: The csr_id of this CsrSummary.
        :type csr_id: str
        """
        if csr_id is None:
            raise ValueError("Invalid value for `csr_id`, must not be `None`")

        self._csr_id = csr_id

    @property
    def hostnames(self):
        """Gets the hostnames of this CsrSummary.

        A comma-separated list of host names that are associated with the certificate. This list accepts wildcard hostnames, such as '*.rubrik.example.com', in addition to fully-qualified domain names.

        :return: The hostnames of this CsrSummary.
        :rtype: List[str]
        """
        return self._hostnames

    @hostnames.setter
    def hostnames(self, hostnames):
        """Sets the hostnames of this CsrSummary.

        A comma-separated list of host names that are associated with the certificate. This list accepts wildcard hostnames, such as '*.rubrik.example.com', in addition to fully-qualified domain names.

        :param hostnames: The hostnames of this CsrSummary.
        :type hostnames: List[str]
        """
        if hostnames is None:
            raise ValueError("Invalid value for `hostnames`, must not be `None`")

        self._hostnames = hostnames

    @property
    def name(self):
        """Gets the name of this CsrSummary.

        Display name for the generated CSR.

        :return: The name of this CsrSummary.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CsrSummary.

        Display name for the generated CSR.

        :param name: The name of this CsrSummary.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def subject(self):
        """Gets the subject of this CsrSummary.

        Subject line of the CSR.

        :return: The subject of this CsrSummary.
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this CsrSummary.

        Subject line of the CSR.

        :param subject: The subject of this CsrSummary.
        :type subject: str
        """
        if subject is None:
            raise ValueError("Invalid value for `subject`, must not be `None`")

        self._subject = subject
