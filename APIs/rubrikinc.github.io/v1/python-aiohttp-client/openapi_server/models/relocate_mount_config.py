# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RelocateMountConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, datastore_id: str=None):
        """RelocateMountConfig - a model defined in OpenAPI

        :param datastore_id: The datastore_id of this RelocateMountConfig.
        """
        self.openapi_types = {
            'datastore_id': str
        }

        self.attribute_map = {
            'datastore_id': 'datastoreId'
        }

        self._datastore_id = datastore_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RelocateMountConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RelocateMountConfig of this RelocateMountConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def datastore_id(self):
        """Gets the datastore_id of this RelocateMountConfig.

        The ID of the datastore that is the target of relocation.

        :return: The datastore_id of this RelocateMountConfig.
        :rtype: str
        """
        return self._datastore_id

    @datastore_id.setter
    def datastore_id(self, datastore_id):
        """Sets the datastore_id of this RelocateMountConfig.

        The ID of the datastore that is the target of relocation.

        :param datastore_id: The datastore_id of this RelocateMountConfig.
        :type datastore_id: str
        """
        if datastore_id is None:
            raise ValueError("Invalid value for `datastore_id`, must not be `None`")

        self._datastore_id = datastore_id
