# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.job_monitoring_retry_status import JobMonitoringRetryStatus
from openapi_server.models.job_monitoring_state import JobMonitoringState
from openapi_server.models.job_monitoring_status import JobMonitoringStatus
from openapi_server.models.job_monitoring_task_type import JobMonitoringTaskType
from openapi_server.models.reportable_object_type import ReportableObjectType
from openapi_server import util


class JobMonitoringInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data_to_transfer: int=None, data_transferred: int=None, duration: int=None, end_time: datetime=None, error_info: str=None, event_series_id: str=None, is_first_full_snapshot: bool=None, is_log_task: bool=None, is_on_demand: bool=None, job_monitoring_state: JobMonitoringState=None, job_status: JobMonitoringStatus=None, job_type: JobMonitoringTaskType=None, last_successful_job_time: datetime=None, last_updated_time: datetime=None, location_id: str=None, location_name: str=None, maximum_attempts_for_job: int=None, next_job_time: datetime=None, node_id: str=None, object_id: str=None, object_logical_size: int=None, object_name: str=None, object_type: ReportableObjectType=None, retry_count: int=None, retry_status: JobMonitoringRetryStatus=None, sla_domain_id: str=None, sla_domain_name: str=None, source_cluster_name: str=None, start_time: datetime=None, throughput: int=None, warning_count: int=None):
        """JobMonitoringInfo - a model defined in OpenAPI

        :param data_to_transfer: The data_to_transfer of this JobMonitoringInfo.
        :param data_transferred: The data_transferred of this JobMonitoringInfo.
        :param duration: The duration of this JobMonitoringInfo.
        :param end_time: The end_time of this JobMonitoringInfo.
        :param error_info: The error_info of this JobMonitoringInfo.
        :param event_series_id: The event_series_id of this JobMonitoringInfo.
        :param is_first_full_snapshot: The is_first_full_snapshot of this JobMonitoringInfo.
        :param is_log_task: The is_log_task of this JobMonitoringInfo.
        :param is_on_demand: The is_on_demand of this JobMonitoringInfo.
        :param job_monitoring_state: The job_monitoring_state of this JobMonitoringInfo.
        :param job_status: The job_status of this JobMonitoringInfo.
        :param job_type: The job_type of this JobMonitoringInfo.
        :param last_successful_job_time: The last_successful_job_time of this JobMonitoringInfo.
        :param last_updated_time: The last_updated_time of this JobMonitoringInfo.
        :param location_id: The location_id of this JobMonitoringInfo.
        :param location_name: The location_name of this JobMonitoringInfo.
        :param maximum_attempts_for_job: The maximum_attempts_for_job of this JobMonitoringInfo.
        :param next_job_time: The next_job_time of this JobMonitoringInfo.
        :param node_id: The node_id of this JobMonitoringInfo.
        :param object_id: The object_id of this JobMonitoringInfo.
        :param object_logical_size: The object_logical_size of this JobMonitoringInfo.
        :param object_name: The object_name of this JobMonitoringInfo.
        :param object_type: The object_type of this JobMonitoringInfo.
        :param retry_count: The retry_count of this JobMonitoringInfo.
        :param retry_status: The retry_status of this JobMonitoringInfo.
        :param sla_domain_id: The sla_domain_id of this JobMonitoringInfo.
        :param sla_domain_name: The sla_domain_name of this JobMonitoringInfo.
        :param source_cluster_name: The source_cluster_name of this JobMonitoringInfo.
        :param start_time: The start_time of this JobMonitoringInfo.
        :param throughput: The throughput of this JobMonitoringInfo.
        :param warning_count: The warning_count of this JobMonitoringInfo.
        """
        self.openapi_types = {
            'data_to_transfer': int,
            'data_transferred': int,
            'duration': int,
            'end_time': datetime,
            'error_info': str,
            'event_series_id': str,
            'is_first_full_snapshot': bool,
            'is_log_task': bool,
            'is_on_demand': bool,
            'job_monitoring_state': JobMonitoringState,
            'job_status': JobMonitoringStatus,
            'job_type': JobMonitoringTaskType,
            'last_successful_job_time': datetime,
            'last_updated_time': datetime,
            'location_id': str,
            'location_name': str,
            'maximum_attempts_for_job': int,
            'next_job_time': datetime,
            'node_id': str,
            'object_id': str,
            'object_logical_size': int,
            'object_name': str,
            'object_type': ReportableObjectType,
            'retry_count': int,
            'retry_status': JobMonitoringRetryStatus,
            'sla_domain_id': str,
            'sla_domain_name': str,
            'source_cluster_name': str,
            'start_time': datetime,
            'throughput': int,
            'warning_count': int
        }

        self.attribute_map = {
            'data_to_transfer': 'dataToTransfer',
            'data_transferred': 'dataTransferred',
            'duration': 'duration',
            'end_time': 'endTime',
            'error_info': 'errorInfo',
            'event_series_id': 'eventSeriesId',
            'is_first_full_snapshot': 'isFirstFullSnapshot',
            'is_log_task': 'isLogTask',
            'is_on_demand': 'isOnDemand',
            'job_monitoring_state': 'jobMonitoringState',
            'job_status': 'jobStatus',
            'job_type': 'jobType',
            'last_successful_job_time': 'lastSuccessfulJobTime',
            'last_updated_time': 'lastUpdatedTime',
            'location_id': 'locationId',
            'location_name': 'locationName',
            'maximum_attempts_for_job': 'maximumAttemptsForJob',
            'next_job_time': 'nextJobTime',
            'node_id': 'nodeId',
            'object_id': 'objectId',
            'object_logical_size': 'objectLogicalSize',
            'object_name': 'objectName',
            'object_type': 'objectType',
            'retry_count': 'retryCount',
            'retry_status': 'retryStatus',
            'sla_domain_id': 'slaDomainId',
            'sla_domain_name': 'slaDomainName',
            'source_cluster_name': 'sourceClusterName',
            'start_time': 'startTime',
            'throughput': 'throughput',
            'warning_count': 'warningCount'
        }

        self._data_to_transfer = data_to_transfer
        self._data_transferred = data_transferred
        self._duration = duration
        self._end_time = end_time
        self._error_info = error_info
        self._event_series_id = event_series_id
        self._is_first_full_snapshot = is_first_full_snapshot
        self._is_log_task = is_log_task
        self._is_on_demand = is_on_demand
        self._job_monitoring_state = job_monitoring_state
        self._job_status = job_status
        self._job_type = job_type
        self._last_successful_job_time = last_successful_job_time
        self._last_updated_time = last_updated_time
        self._location_id = location_id
        self._location_name = location_name
        self._maximum_attempts_for_job = maximum_attempts_for_job
        self._next_job_time = next_job_time
        self._node_id = node_id
        self._object_id = object_id
        self._object_logical_size = object_logical_size
        self._object_name = object_name
        self._object_type = object_type
        self._retry_count = retry_count
        self._retry_status = retry_status
        self._sla_domain_id = sla_domain_id
        self._sla_domain_name = sla_domain_name
        self._source_cluster_name = source_cluster_name
        self._start_time = start_time
        self._throughput = throughput
        self._warning_count = warning_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'JobMonitoringInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The JobMonitoringInfo of this JobMonitoringInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data_to_transfer(self):
        """Gets the data_to_transfer of this JobMonitoringInfo.

        Amount of data to transfer in bytes.

        :return: The data_to_transfer of this JobMonitoringInfo.
        :rtype: int
        """
        return self._data_to_transfer

    @data_to_transfer.setter
    def data_to_transfer(self, data_to_transfer):
        """Sets the data_to_transfer of this JobMonitoringInfo.

        Amount of data to transfer in bytes.

        :param data_to_transfer: The data_to_transfer of this JobMonitoringInfo.
        :type data_to_transfer: int
        """

        self._data_to_transfer = data_to_transfer

    @property
    def data_transferred(self):
        """Gets the data_transferred of this JobMonitoringInfo.

        The amount of data transferred as part of the job in bytes.

        :return: The data_transferred of this JobMonitoringInfo.
        :rtype: int
        """
        return self._data_transferred

    @data_transferred.setter
    def data_transferred(self, data_transferred):
        """Sets the data_transferred of this JobMonitoringInfo.

        The amount of data transferred as part of the job in bytes.

        :param data_transferred: The data_transferred of this JobMonitoringInfo.
        :type data_transferred: int
        """

        self._data_transferred = data_transferred

    @property
    def duration(self):
        """Gets the duration of this JobMonitoringInfo.

        The number of seconds since the job started to active jobs. The number of seconds the job ran for completed jobs.

        :return: The duration of this JobMonitoringInfo.
        :rtype: int
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this JobMonitoringInfo.

        The number of seconds since the job started to active jobs. The number of seconds the job ran for completed jobs.

        :param duration: The duration of this JobMonitoringInfo.
        :type duration: int
        """

        self._duration = duration

    @property
    def end_time(self):
        """Gets the end_time of this JobMonitoringInfo.

        End time of the job. Leave this value empty for queued and running jobs.

        :return: The end_time of this JobMonitoringInfo.
        :rtype: datetime
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this JobMonitoringInfo.

        End time of the job. Leave this value empty for queued and running jobs.

        :param end_time: The end_time of this JobMonitoringInfo.
        :type end_time: datetime
        """

        self._end_time = end_time

    @property
    def error_info(self):
        """Gets the error_info of this JobMonitoringInfo.

        Description of error information for the job.

        :return: The error_info of this JobMonitoringInfo.
        :rtype: str
        """
        return self._error_info

    @error_info.setter
    def error_info(self, error_info):
        """Sets the error_info of this JobMonitoringInfo.

        Description of error information for the job.

        :param error_info: The error_info of this JobMonitoringInfo.
        :type error_info: str
        """

        self._error_info = error_info

    @property
    def event_series_id(self):
        """Gets the event_series_id of this JobMonitoringInfo.

        The event series id associated with the job.

        :return: The event_series_id of this JobMonitoringInfo.
        :rtype: str
        """
        return self._event_series_id

    @event_series_id.setter
    def event_series_id(self, event_series_id):
        """Sets the event_series_id of this JobMonitoringInfo.

        The event series id associated with the job.

        :param event_series_id: The event_series_id of this JobMonitoringInfo.
        :type event_series_id: str
        """
        if event_series_id is None:
            raise ValueError("Invalid value for `event_series_id`, must not be `None`")

        self._event_series_id = event_series_id

    @property
    def is_first_full_snapshot(self):
        """Gets the is_first_full_snapshot of this JobMonitoringInfo.

        A Boolean value that determines whether or not the job associated with the event is a first full snapshot backup.

        :return: The is_first_full_snapshot of this JobMonitoringInfo.
        :rtype: bool
        """
        return self._is_first_full_snapshot

    @is_first_full_snapshot.setter
    def is_first_full_snapshot(self, is_first_full_snapshot):
        """Sets the is_first_full_snapshot of this JobMonitoringInfo.

        A Boolean value that determines whether or not the job associated with the event is a first full snapshot backup.

        :param is_first_full_snapshot: The is_first_full_snapshot of this JobMonitoringInfo.
        :type is_first_full_snapshot: bool
        """

        self._is_first_full_snapshot = is_first_full_snapshot

    @property
    def is_log_task(self):
        """Gets the is_log_task of this JobMonitoringInfo.

        A boolean value indication if the job is a log related job.

        :return: The is_log_task of this JobMonitoringInfo.
        :rtype: bool
        """
        return self._is_log_task

    @is_log_task.setter
    def is_log_task(self, is_log_task):
        """Sets the is_log_task of this JobMonitoringInfo.

        A boolean value indication if the job is a log related job.

        :param is_log_task: The is_log_task of this JobMonitoringInfo.
        :type is_log_task: bool
        """
        if is_log_task is None:
            raise ValueError("Invalid value for `is_log_task`, must not be `None`")

        self._is_log_task = is_log_task

    @property
    def is_on_demand(self):
        """Gets the is_on_demand of this JobMonitoringInfo.

        A boolean value indication if the job is a an on demand job.

        :return: The is_on_demand of this JobMonitoringInfo.
        :rtype: bool
        """
        return self._is_on_demand

    @is_on_demand.setter
    def is_on_demand(self, is_on_demand):
        """Sets the is_on_demand of this JobMonitoringInfo.

        A boolean value indication if the job is a an on demand job.

        :param is_on_demand: The is_on_demand of this JobMonitoringInfo.
        :type is_on_demand: bool
        """
        if is_on_demand is None:
            raise ValueError("Invalid value for `is_on_demand`, must not be `None`")

        self._is_on_demand = is_on_demand

    @property
    def job_monitoring_state(self):
        """Gets the job_monitoring_state of this JobMonitoringInfo.


        :return: The job_monitoring_state of this JobMonitoringInfo.
        :rtype: JobMonitoringState
        """
        return self._job_monitoring_state

    @job_monitoring_state.setter
    def job_monitoring_state(self, job_monitoring_state):
        """Sets the job_monitoring_state of this JobMonitoringInfo.


        :param job_monitoring_state: The job_monitoring_state of this JobMonitoringInfo.
        :type job_monitoring_state: JobMonitoringState
        """
        if job_monitoring_state is None:
            raise ValueError("Invalid value for `job_monitoring_state`, must not be `None`")

        self._job_monitoring_state = job_monitoring_state

    @property
    def job_status(self):
        """Gets the job_status of this JobMonitoringInfo.


        :return: The job_status of this JobMonitoringInfo.
        :rtype: JobMonitoringStatus
        """
        return self._job_status

    @job_status.setter
    def job_status(self, job_status):
        """Sets the job_status of this JobMonitoringInfo.


        :param job_status: The job_status of this JobMonitoringInfo.
        :type job_status: JobMonitoringStatus
        """
        if job_status is None:
            raise ValueError("Invalid value for `job_status`, must not be `None`")

        self._job_status = job_status

    @property
    def job_type(self):
        """Gets the job_type of this JobMonitoringInfo.


        :return: The job_type of this JobMonitoringInfo.
        :rtype: JobMonitoringTaskType
        """
        return self._job_type

    @job_type.setter
    def job_type(self, job_type):
        """Sets the job_type of this JobMonitoringInfo.


        :param job_type: The job_type of this JobMonitoringInfo.
        :type job_type: JobMonitoringTaskType
        """
        if job_type is None:
            raise ValueError("Invalid value for `job_type`, must not be `None`")

        self._job_type = job_type

    @property
    def last_successful_job_time(self):
        """Gets the last_successful_job_time of this JobMonitoringInfo.

        Time of the last successful job of the same job type. The return value is None if no successful jobs are present.

        :return: The last_successful_job_time of this JobMonitoringInfo.
        :rtype: datetime
        """
        return self._last_successful_job_time

    @last_successful_job_time.setter
    def last_successful_job_time(self, last_successful_job_time):
        """Sets the last_successful_job_time of this JobMonitoringInfo.

        Time of the last successful job of the same job type. The return value is None if no successful jobs are present.

        :param last_successful_job_time: The last_successful_job_time of this JobMonitoringInfo.
        :type last_successful_job_time: datetime
        """

        self._last_successful_job_time = last_successful_job_time

    @property
    def last_updated_time(self):
        """Gets the last_updated_time of this JobMonitoringInfo.

        The time the status for the job has been updated.

        :return: The last_updated_time of this JobMonitoringInfo.
        :rtype: datetime
        """
        return self._last_updated_time

    @last_updated_time.setter
    def last_updated_time(self, last_updated_time):
        """Sets the last_updated_time of this JobMonitoringInfo.

        The time the status for the job has been updated.

        :param last_updated_time: The last_updated_time of this JobMonitoringInfo.
        :type last_updated_time: datetime
        """
        if last_updated_time is None:
            raise ValueError("Invalid value for `last_updated_time`, must not be `None`")

        self._last_updated_time = last_updated_time

    @property
    def location_id(self):
        """Gets the location_id of this JobMonitoringInfo.

        Id of the location of the object.

        :return: The location_id of this JobMonitoringInfo.
        :rtype: str
        """
        return self._location_id

    @location_id.setter
    def location_id(self, location_id):
        """Sets the location_id of this JobMonitoringInfo.

        Id of the location of the object.

        :param location_id: The location_id of this JobMonitoringInfo.
        :type location_id: str
        """

        self._location_id = location_id

    @property
    def location_name(self):
        """Gets the location_name of this JobMonitoringInfo.

        Location Name.

        :return: The location_name of this JobMonitoringInfo.
        :rtype: str
        """
        return self._location_name

    @location_name.setter
    def location_name(self, location_name):
        """Sets the location_name of this JobMonitoringInfo.

        Location Name.

        :param location_name: The location_name of this JobMonitoringInfo.
        :type location_name: str
        """

        self._location_name = location_name

    @property
    def maximum_attempts_for_job(self):
        """Gets the maximum_attempts_for_job of this JobMonitoringInfo.

        The maximum number of times the job will run in case of a failure.

        :return: The maximum_attempts_for_job of this JobMonitoringInfo.
        :rtype: int
        """
        return self._maximum_attempts_for_job

    @maximum_attempts_for_job.setter
    def maximum_attempts_for_job(self, maximum_attempts_for_job):
        """Sets the maximum_attempts_for_job of this JobMonitoringInfo.

        The maximum number of times the job will run in case of a failure.

        :param maximum_attempts_for_job: The maximum_attempts_for_job of this JobMonitoringInfo.
        :type maximum_attempts_for_job: int
        """

        self._maximum_attempts_for_job = maximum_attempts_for_job

    @property
    def next_job_time(self):
        """Gets the next_job_time of this JobMonitoringInfo.

        Expected start time of the next job of the same job type. The return value is None if no new job is scheduled.

        :return: The next_job_time of this JobMonitoringInfo.
        :rtype: datetime
        """
        return self._next_job_time

    @next_job_time.setter
    def next_job_time(self, next_job_time):
        """Sets the next_job_time of this JobMonitoringInfo.

        Expected start time of the next job of the same job type. The return value is None if no new job is scheduled.

        :param next_job_time: The next_job_time of this JobMonitoringInfo.
        :type next_job_time: datetime
        """

        self._next_job_time = next_job_time

    @property
    def node_id(self):
        """Gets the node_id of this JobMonitoringInfo.

        Id of the node the job is running on.

        :return: The node_id of this JobMonitoringInfo.
        :rtype: str
        """
        return self._node_id

    @node_id.setter
    def node_id(self, node_id):
        """Sets the node_id of this JobMonitoringInfo.

        Id of the node the job is running on.

        :param node_id: The node_id of this JobMonitoringInfo.
        :type node_id: str
        """

        self._node_id = node_id

    @property
    def object_id(self):
        """Gets the object_id of this JobMonitoringInfo.

        The managed id of the object.

        :return: The object_id of this JobMonitoringInfo.
        :rtype: str
        """
        return self._object_id

    @object_id.setter
    def object_id(self, object_id):
        """Sets the object_id of this JobMonitoringInfo.

        The managed id of the object.

        :param object_id: The object_id of this JobMonitoringInfo.
        :type object_id: str
        """
        if object_id is None:
            raise ValueError("Invalid value for `object_id`, must not be `None`")

        self._object_id = object_id

    @property
    def object_logical_size(self):
        """Gets the object_logical_size of this JobMonitoringInfo.

        The object size in bytes.

        :return: The object_logical_size of this JobMonitoringInfo.
        :rtype: int
        """
        return self._object_logical_size

    @object_logical_size.setter
    def object_logical_size(self, object_logical_size):
        """Sets the object_logical_size of this JobMonitoringInfo.

        The object size in bytes.

        :param object_logical_size: The object_logical_size of this JobMonitoringInfo.
        :type object_logical_size: int
        """

        self._object_logical_size = object_logical_size

    @property
    def object_name(self):
        """Gets the object_name of this JobMonitoringInfo.

        The name of the object in the job.

        :return: The object_name of this JobMonitoringInfo.
        :rtype: str
        """
        return self._object_name

    @object_name.setter
    def object_name(self, object_name):
        """Sets the object_name of this JobMonitoringInfo.

        The name of the object in the job.

        :param object_name: The object_name of this JobMonitoringInfo.
        :type object_name: str
        """

        self._object_name = object_name

    @property
    def object_type(self):
        """Gets the object_type of this JobMonitoringInfo.


        :return: The object_type of this JobMonitoringInfo.
        :rtype: ReportableObjectType
        """
        return self._object_type

    @object_type.setter
    def object_type(self, object_type):
        """Sets the object_type of this JobMonitoringInfo.


        :param object_type: The object_type of this JobMonitoringInfo.
        :type object_type: ReportableObjectType
        """

        self._object_type = object_type

    @property
    def retry_count(self):
        """Gets the retry_count of this JobMonitoringInfo.

        The number of times the job has retired.

        :return: The retry_count of this JobMonitoringInfo.
        :rtype: int
        """
        return self._retry_count

    @retry_count.setter
    def retry_count(self, retry_count):
        """Sets the retry_count of this JobMonitoringInfo.

        The number of times the job has retired.

        :param retry_count: The retry_count of this JobMonitoringInfo.
        :type retry_count: int
        """

        self._retry_count = retry_count

    @property
    def retry_status(self):
        """Gets the retry_status of this JobMonitoringInfo.


        :return: The retry_status of this JobMonitoringInfo.
        :rtype: JobMonitoringRetryStatus
        """
        return self._retry_status

    @retry_status.setter
    def retry_status(self, retry_status):
        """Sets the retry_status of this JobMonitoringInfo.


        :param retry_status: The retry_status of this JobMonitoringInfo.
        :type retry_status: JobMonitoringRetryStatus
        """
        if retry_status is None:
            raise ValueError("Invalid value for `retry_status`, must not be `None`")

        self._retry_status = retry_status

    @property
    def sla_domain_id(self):
        """Gets the sla_domain_id of this JobMonitoringInfo.

        Sla Domain Id.

        :return: The sla_domain_id of this JobMonitoringInfo.
        :rtype: str
        """
        return self._sla_domain_id

    @sla_domain_id.setter
    def sla_domain_id(self, sla_domain_id):
        """Sets the sla_domain_id of this JobMonitoringInfo.

        Sla Domain Id.

        :param sla_domain_id: The sla_domain_id of this JobMonitoringInfo.
        :type sla_domain_id: str
        """

        self._sla_domain_id = sla_domain_id

    @property
    def sla_domain_name(self):
        """Gets the sla_domain_name of this JobMonitoringInfo.

        Sla Domain name.

        :return: The sla_domain_name of this JobMonitoringInfo.
        :rtype: str
        """
        return self._sla_domain_name

    @sla_domain_name.setter
    def sla_domain_name(self, sla_domain_name):
        """Sets the sla_domain_name of this JobMonitoringInfo.

        Sla Domain name.

        :param sla_domain_name: The sla_domain_name of this JobMonitoringInfo.
        :type sla_domain_name: str
        """

        self._sla_domain_name = sla_domain_name

    @property
    def source_cluster_name(self):
        """Gets the source_cluster_name of this JobMonitoringInfo.

        For replication jobs, this stores the source cluster name. Leave this value empty for other jobs.

        :return: The source_cluster_name of this JobMonitoringInfo.
        :rtype: str
        """
        return self._source_cluster_name

    @source_cluster_name.setter
    def source_cluster_name(self, source_cluster_name):
        """Sets the source_cluster_name of this JobMonitoringInfo.

        For replication jobs, this stores the source cluster name. Leave this value empty for other jobs.

        :param source_cluster_name: The source_cluster_name of this JobMonitoringInfo.
        :type source_cluster_name: str
        """

        self._source_cluster_name = source_cluster_name

    @property
    def start_time(self):
        """Gets the start_time of this JobMonitoringInfo.

        Start time for running or completed jobs. It is the scheduled start time for Queued jobs.

        :return: The start_time of this JobMonitoringInfo.
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this JobMonitoringInfo.

        Start time for running or completed jobs. It is the scheduled start time for Queued jobs.

        :param start_time: The start_time of this JobMonitoringInfo.
        :type start_time: datetime
        """
        if start_time is None:
            raise ValueError("Invalid value for `start_time`, must not be `None`")

        self._start_time = start_time

    @property
    def throughput(self):
        """Gets the throughput of this JobMonitoringInfo.

        The throughput for running or completed jobs (measured in bytes/s). When no running or completed jobs exist no value is provided.

        :return: The throughput of this JobMonitoringInfo.
        :rtype: int
        """
        return self._throughput

    @throughput.setter
    def throughput(self, throughput):
        """Sets the throughput of this JobMonitoringInfo.

        The throughput for running or completed jobs (measured in bytes/s). When no running or completed jobs exist no value is provided.

        :param throughput: The throughput of this JobMonitoringInfo.
        :type throughput: int
        """

        self._throughput = throughput

    @property
    def warning_count(self):
        """Gets the warning_count of this JobMonitoringInfo.

        The number of warning events in the event series associated with the job.

        :return: The warning_count of this JobMonitoringInfo.
        :rtype: int
        """
        return self._warning_count

    @warning_count.setter
    def warning_count(self, warning_count):
        """Sets the warning_count of this JobMonitoringInfo.

        The number of warning events in the event series associated with the job.

        :param warning_count: The warning_count of this JobMonitoringInfo.
        :type warning_count: int
        """

        self._warning_count = warning_count
