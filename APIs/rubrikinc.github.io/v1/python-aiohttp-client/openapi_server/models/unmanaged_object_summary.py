# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.location_path_point import LocationPathPoint
from openapi_server.models.managed_object_pending_sla_info import ManagedObjectPendingSlaInfo
from openapi_server.models.snappable_recovery_info import SnappableRecoveryInfo
from openapi_server import util


class UnmanagedObjectSummary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, archive_storage: int=None, auto_snapshot_count: int=None, has_snapshots_with_policy: bool=None, id: str=None, is_remote: bool=None, local_storage: int=None, manual_snapshot_count: int=None, name: str=None, object_type: str=None, pending_sla_domain: ManagedObjectPendingSlaInfo=None, physical_location: List[LocationPathPoint]=None, recovery_info: SnappableRecoveryInfo=None, retention_sla_domain_id: str=None, retention_sla_domain_name: str=None, retention_sla_domain_polaris_managed_id: str=None, unmanaged_status: str=None):
        """UnmanagedObjectSummary - a model defined in OpenAPI

        :param archive_storage: The archive_storage of this UnmanagedObjectSummary.
        :param auto_snapshot_count: The auto_snapshot_count of this UnmanagedObjectSummary.
        :param has_snapshots_with_policy: The has_snapshots_with_policy of this UnmanagedObjectSummary.
        :param id: The id of this UnmanagedObjectSummary.
        :param is_remote: The is_remote of this UnmanagedObjectSummary.
        :param local_storage: The local_storage of this UnmanagedObjectSummary.
        :param manual_snapshot_count: The manual_snapshot_count of this UnmanagedObjectSummary.
        :param name: The name of this UnmanagedObjectSummary.
        :param object_type: The object_type of this UnmanagedObjectSummary.
        :param pending_sla_domain: The pending_sla_domain of this UnmanagedObjectSummary.
        :param physical_location: The physical_location of this UnmanagedObjectSummary.
        :param recovery_info: The recovery_info of this UnmanagedObjectSummary.
        :param retention_sla_domain_id: The retention_sla_domain_id of this UnmanagedObjectSummary.
        :param retention_sla_domain_name: The retention_sla_domain_name of this UnmanagedObjectSummary.
        :param retention_sla_domain_polaris_managed_id: The retention_sla_domain_polaris_managed_id of this UnmanagedObjectSummary.
        :param unmanaged_status: The unmanaged_status of this UnmanagedObjectSummary.
        """
        self.openapi_types = {
            'archive_storage': int,
            'auto_snapshot_count': int,
            'has_snapshots_with_policy': bool,
            'id': str,
            'is_remote': bool,
            'local_storage': int,
            'manual_snapshot_count': int,
            'name': str,
            'object_type': str,
            'pending_sla_domain': ManagedObjectPendingSlaInfo,
            'physical_location': List[LocationPathPoint],
            'recovery_info': SnappableRecoveryInfo,
            'retention_sla_domain_id': str,
            'retention_sla_domain_name': str,
            'retention_sla_domain_polaris_managed_id': str,
            'unmanaged_status': str
        }

        self.attribute_map = {
            'archive_storage': 'archiveStorage',
            'auto_snapshot_count': 'autoSnapshotCount',
            'has_snapshots_with_policy': 'hasSnapshotsWithPolicy',
            'id': 'id',
            'is_remote': 'isRemote',
            'local_storage': 'localStorage',
            'manual_snapshot_count': 'manualSnapshotCount',
            'name': 'name',
            'object_type': 'objectType',
            'pending_sla_domain': 'pendingSlaDomain',
            'physical_location': 'physicalLocation',
            'recovery_info': 'recoveryInfo',
            'retention_sla_domain_id': 'retentionSlaDomainId',
            'retention_sla_domain_name': 'retentionSlaDomainName',
            'retention_sla_domain_polaris_managed_id': 'retentionSlaDomainPolarisManagedId',
            'unmanaged_status': 'unmanagedStatus'
        }

        self._archive_storage = archive_storage
        self._auto_snapshot_count = auto_snapshot_count
        self._has_snapshots_with_policy = has_snapshots_with_policy
        self._id = id
        self._is_remote = is_remote
        self._local_storage = local_storage
        self._manual_snapshot_count = manual_snapshot_count
        self._name = name
        self._object_type = object_type
        self._pending_sla_domain = pending_sla_domain
        self._physical_location = physical_location
        self._recovery_info = recovery_info
        self._retention_sla_domain_id = retention_sla_domain_id
        self._retention_sla_domain_name = retention_sla_domain_name
        self._retention_sla_domain_polaris_managed_id = retention_sla_domain_polaris_managed_id
        self._unmanaged_status = unmanaged_status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UnmanagedObjectSummary':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UnmanagedObjectSummary of this UnmanagedObjectSummary.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def archive_storage(self):
        """Gets the archive_storage of this UnmanagedObjectSummary.

        Storage being taken up in the archival location by unmanaged snapshots.

        :return: The archive_storage of this UnmanagedObjectSummary.
        :rtype: int
        """
        return self._archive_storage

    @archive_storage.setter
    def archive_storage(self, archive_storage):
        """Sets the archive_storage of this UnmanagedObjectSummary.

        Storage being taken up in the archival location by unmanaged snapshots.

        :param archive_storage: The archive_storage of this UnmanagedObjectSummary.
        :type archive_storage: int
        """
        if archive_storage is None:
            raise ValueError("Invalid value for `archive_storage`, must not be `None`")

        self._archive_storage = archive_storage

    @property
    def auto_snapshot_count(self):
        """Gets the auto_snapshot_count of this UnmanagedObjectSummary.

        Number of policy-based snapshots to retain for the specified object.

        :return: The auto_snapshot_count of this UnmanagedObjectSummary.
        :rtype: int
        """
        return self._auto_snapshot_count

    @auto_snapshot_count.setter
    def auto_snapshot_count(self, auto_snapshot_count):
        """Sets the auto_snapshot_count of this UnmanagedObjectSummary.

        Number of policy-based snapshots to retain for the specified object.

        :param auto_snapshot_count: The auto_snapshot_count of this UnmanagedObjectSummary.
        :type auto_snapshot_count: int
        """
        if auto_snapshot_count is None:
            raise ValueError("Invalid value for `auto_snapshot_count`, must not be `None`")

        self._auto_snapshot_count = auto_snapshot_count

    @property
    def has_snapshots_with_policy(self):
        """Gets the has_snapshots_with_policy of this UnmanagedObjectSummary.

        A boolean that specifies whether any of the snapshots for this object are being retained by a SLA  at any location. 

        :return: The has_snapshots_with_policy of this UnmanagedObjectSummary.
        :rtype: bool
        """
        return self._has_snapshots_with_policy

    @has_snapshots_with_policy.setter
    def has_snapshots_with_policy(self, has_snapshots_with_policy):
        """Sets the has_snapshots_with_policy of this UnmanagedObjectSummary.

        A boolean that specifies whether any of the snapshots for this object are being retained by a SLA  at any location. 

        :param has_snapshots_with_policy: The has_snapshots_with_policy of this UnmanagedObjectSummary.
        :type has_snapshots_with_policy: bool
        """
        if has_snapshots_with_policy is None:
            raise ValueError("Invalid value for `has_snapshots_with_policy`, must not be `None`")

        self._has_snapshots_with_policy = has_snapshots_with_policy

    @property
    def id(self):
        """Gets the id of this UnmanagedObjectSummary.


        :return: The id of this UnmanagedObjectSummary.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this UnmanagedObjectSummary.


        :param id: The id of this UnmanagedObjectSummary.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def is_remote(self):
        """Gets the is_remote of this UnmanagedObjectSummary.

        A boolean that specifies if the object is remote or local. When this value is true, the object is remote.

        :return: The is_remote of this UnmanagedObjectSummary.
        :rtype: bool
        """
        return self._is_remote

    @is_remote.setter
    def is_remote(self, is_remote):
        """Sets the is_remote of this UnmanagedObjectSummary.

        A boolean that specifies if the object is remote or local. When this value is true, the object is remote.

        :param is_remote: The is_remote of this UnmanagedObjectSummary.
        :type is_remote: bool
        """

        self._is_remote = is_remote

    @property
    def local_storage(self):
        """Gets the local_storage of this UnmanagedObjectSummary.

        Storage being taken up on the local cluster by unmanaged snapshots.

        :return: The local_storage of this UnmanagedObjectSummary.
        :rtype: int
        """
        return self._local_storage

    @local_storage.setter
    def local_storage(self, local_storage):
        """Sets the local_storage of this UnmanagedObjectSummary.

        Storage being taken up on the local cluster by unmanaged snapshots.

        :param local_storage: The local_storage of this UnmanagedObjectSummary.
        :type local_storage: int
        """
        if local_storage is None:
            raise ValueError("Invalid value for `local_storage`, must not be `None`")

        self._local_storage = local_storage

    @property
    def manual_snapshot_count(self):
        """Gets the manual_snapshot_count of this UnmanagedObjectSummary.

        Number of on-demand snapshots and snapshots retrieved from an archival location for specified object.

        :return: The manual_snapshot_count of this UnmanagedObjectSummary.
        :rtype: int
        """
        return self._manual_snapshot_count

    @manual_snapshot_count.setter
    def manual_snapshot_count(self, manual_snapshot_count):
        """Sets the manual_snapshot_count of this UnmanagedObjectSummary.

        Number of on-demand snapshots and snapshots retrieved from an archival location for specified object.

        :param manual_snapshot_count: The manual_snapshot_count of this UnmanagedObjectSummary.
        :type manual_snapshot_count: int
        """
        if manual_snapshot_count is None:
            raise ValueError("Invalid value for `manual_snapshot_count`, must not be `None`")

        self._manual_snapshot_count = manual_snapshot_count

    @property
    def name(self):
        """Gets the name of this UnmanagedObjectSummary.


        :return: The name of this UnmanagedObjectSummary.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UnmanagedObjectSummary.


        :param name: The name of this UnmanagedObjectSummary.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def object_type(self):
        """Gets the object_type of this UnmanagedObjectSummary.

        The type of the unmanaged object. This may be VirtualMachine, MssqlDatabase, LinuxFileset, ShareFileset, WindowsFileset, NutanixVirtualMachine, Ec2Instance or StorageArrayVolumeGroup.

        :return: The object_type of this UnmanagedObjectSummary.
        :rtype: str
        """
        return self._object_type

    @object_type.setter
    def object_type(self, object_type):
        """Sets the object_type of this UnmanagedObjectSummary.

        The type of the unmanaged object. This may be VirtualMachine, MssqlDatabase, LinuxFileset, ShareFileset, WindowsFileset, NutanixVirtualMachine, Ec2Instance or StorageArrayVolumeGroup.

        :param object_type: The object_type of this UnmanagedObjectSummary.
        :type object_type: str
        """
        allowed_values = ["VirtualMachine", "MssqlDatabase", "LinuxFileset", "WindowsFileset", "ShareFileset", "NutanixVirtualMachine", "HypervVirtualMachine", "ManagedVolume", "Ec2Instance", "StorageArrayVolumeGroup", "VcdVapp", "LinuxHost", "WindowsHost", "OracleDatabase", "VolumeGroup", "AppBlueprint"]  # noqa: E501
        if object_type not in allowed_values:
            raise ValueError(
                "Invalid value for `object_type` ({0}), must be one of {1}"
                .format(object_type, allowed_values)
            )

        self._object_type = object_type

    @property
    def pending_sla_domain(self):
        """Gets the pending_sla_domain of this UnmanagedObjectSummary.


        :return: The pending_sla_domain of this UnmanagedObjectSummary.
        :rtype: ManagedObjectPendingSlaInfo
        """
        return self._pending_sla_domain

    @pending_sla_domain.setter
    def pending_sla_domain(self, pending_sla_domain):
        """Sets the pending_sla_domain of this UnmanagedObjectSummary.


        :param pending_sla_domain: The pending_sla_domain of this UnmanagedObjectSummary.
        :type pending_sla_domain: ManagedObjectPendingSlaInfo
        """

        self._pending_sla_domain = pending_sla_domain

    @property
    def physical_location(self):
        """Gets the physical_location of this UnmanagedObjectSummary.

        Brief info of all the objects in the physical path to this Object.

        :return: The physical_location of this UnmanagedObjectSummary.
        :rtype: List[LocationPathPoint]
        """
        return self._physical_location

    @physical_location.setter
    def physical_location(self, physical_location):
        """Sets the physical_location of this UnmanagedObjectSummary.

        Brief info of all the objects in the physical path to this Object.

        :param physical_location: The physical_location of this UnmanagedObjectSummary.
        :type physical_location: List[LocationPathPoint]
        """
        if physical_location is None:
            raise ValueError("Invalid value for `physical_location`, must not be `None`")

        self._physical_location = physical_location

    @property
    def recovery_info(self):
        """Gets the recovery_info of this UnmanagedObjectSummary.


        :return: The recovery_info of this UnmanagedObjectSummary.
        :rtype: SnappableRecoveryInfo
        """
        return self._recovery_info

    @recovery_info.setter
    def recovery_info(self, recovery_info):
        """Sets the recovery_info of this UnmanagedObjectSummary.


        :param recovery_info: The recovery_info of this UnmanagedObjectSummary.
        :type recovery_info: SnappableRecoveryInfo
        """

        self._recovery_info = recovery_info

    @property
    def retention_sla_domain_id(self):
        """Gets the retention_sla_domain_id of this UnmanagedObjectSummary.

        ID assigned to an SLA retention policy.

        :return: The retention_sla_domain_id of this UnmanagedObjectSummary.
        :rtype: str
        """
        return self._retention_sla_domain_id

    @retention_sla_domain_id.setter
    def retention_sla_domain_id(self, retention_sla_domain_id):
        """Sets the retention_sla_domain_id of this UnmanagedObjectSummary.

        ID assigned to an SLA retention policy.

        :param retention_sla_domain_id: The retention_sla_domain_id of this UnmanagedObjectSummary.
        :type retention_sla_domain_id: str
        """
        if retention_sla_domain_id is None:
            raise ValueError("Invalid value for `retention_sla_domain_id`, must not be `None`")

        self._retention_sla_domain_id = retention_sla_domain_id

    @property
    def retention_sla_domain_name(self):
        """Gets the retention_sla_domain_name of this UnmanagedObjectSummary.

        Name of an SLA retention policy.

        :return: The retention_sla_domain_name of this UnmanagedObjectSummary.
        :rtype: str
        """
        return self._retention_sla_domain_name

    @retention_sla_domain_name.setter
    def retention_sla_domain_name(self, retention_sla_domain_name):
        """Sets the retention_sla_domain_name of this UnmanagedObjectSummary.

        Name of an SLA retention policy.

        :param retention_sla_domain_name: The retention_sla_domain_name of this UnmanagedObjectSummary.
        :type retention_sla_domain_name: str
        """
        if retention_sla_domain_name is None:
            raise ValueError("Invalid value for `retention_sla_domain_name`, must not be `None`")

        self._retention_sla_domain_name = retention_sla_domain_name

    @property
    def retention_sla_domain_polaris_managed_id(self):
        """Gets the retention_sla_domain_polaris_managed_id of this UnmanagedObjectSummary.

        Optional field with the ID assigned to an SLA Domain by Polaris.

        :return: The retention_sla_domain_polaris_managed_id of this UnmanagedObjectSummary.
        :rtype: str
        """
        return self._retention_sla_domain_polaris_managed_id

    @retention_sla_domain_polaris_managed_id.setter
    def retention_sla_domain_polaris_managed_id(self, retention_sla_domain_polaris_managed_id):
        """Sets the retention_sla_domain_polaris_managed_id of this UnmanagedObjectSummary.

        Optional field with the ID assigned to an SLA Domain by Polaris.

        :param retention_sla_domain_polaris_managed_id: The retention_sla_domain_polaris_managed_id of this UnmanagedObjectSummary.
        :type retention_sla_domain_polaris_managed_id: str
        """

        self._retention_sla_domain_polaris_managed_id = retention_sla_domain_polaris_managed_id

    @property
    def unmanaged_status(self):
        """Gets the unmanaged_status of this UnmanagedObjectSummary.

        Unmanaged Status of this object. Protected means that this object is still protected by an SLA Policy. Unprotected means that this object has become unprotected. Relic means that Rubrik has lost contact with this object.

        :return: The unmanaged_status of this UnmanagedObjectSummary.
        :rtype: str
        """
        return self._unmanaged_status

    @unmanaged_status.setter
    def unmanaged_status(self, unmanaged_status):
        """Sets the unmanaged_status of this UnmanagedObjectSummary.

        Unmanaged Status of this object. Protected means that this object is still protected by an SLA Policy. Unprotected means that this object has become unprotected. Relic means that Rubrik has lost contact with this object.

        :param unmanaged_status: The unmanaged_status of this UnmanagedObjectSummary.
        :type unmanaged_status: str
        """
        allowed_values = ["Protected", "Relic", "Unprotected", "ReplicatedRelic", "RemoteUnprotected"]  # noqa: E501
        if unmanaged_status not in allowed_values:
            raise ValueError(
                "Invalid value for `unmanaged_status` ({0}), must be one of {1}"
                .format(unmanaged_status, allowed_values)
            )

        self._unmanaged_status = unmanaged_status
