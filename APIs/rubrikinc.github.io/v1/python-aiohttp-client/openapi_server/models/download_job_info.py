# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DownloadJobInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, event_id: str=None, job_instance_id: str=None, progress: float=None, remaining_time_estimate_in_seconds: int=None, status: str=None):
        """DownloadJobInfo - a model defined in OpenAPI

        :param event_id: The event_id of this DownloadJobInfo.
        :param job_instance_id: The job_instance_id of this DownloadJobInfo.
        :param progress: The progress of this DownloadJobInfo.
        :param remaining_time_estimate_in_seconds: The remaining_time_estimate_in_seconds of this DownloadJobInfo.
        :param status: The status of this DownloadJobInfo.
        """
        self.openapi_types = {
            'event_id': str,
            'job_instance_id': str,
            'progress': float,
            'remaining_time_estimate_in_seconds': int,
            'status': str
        }

        self.attribute_map = {
            'event_id': 'eventId',
            'job_instance_id': 'jobInstanceId',
            'progress': 'progress',
            'remaining_time_estimate_in_seconds': 'remainingTimeEstimateInSeconds',
            'status': 'status'
        }

        self._event_id = event_id
        self._job_instance_id = job_instance_id
        self._progress = progress
        self._remaining_time_estimate_in_seconds = remaining_time_estimate_in_seconds
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DownloadJobInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DownloadJobInfo of this DownloadJobInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def event_id(self):
        """Gets the event_id of this DownloadJobInfo.

        Event identifier corresponding to the job instance.

        :return: The event_id of this DownloadJobInfo.
        :rtype: str
        """
        return self._event_id

    @event_id.setter
    def event_id(self, event_id):
        """Sets the event_id of this DownloadJobInfo.

        Event identifier corresponding to the job instance.

        :param event_id: The event_id of this DownloadJobInfo.
        :type event_id: str
        """
        if event_id is None:
            raise ValueError("Invalid value for `event_id`, must not be `None`")

        self._event_id = event_id

    @property
    def job_instance_id(self):
        """Gets the job_instance_id of this DownloadJobInfo.

        Identifier corresponding to the download job instance. 

        :return: The job_instance_id of this DownloadJobInfo.
        :rtype: str
        """
        return self._job_instance_id

    @job_instance_id.setter
    def job_instance_id(self, job_instance_id):
        """Sets the job_instance_id of this DownloadJobInfo.

        Identifier corresponding to the download job instance. 

        :param job_instance_id: The job_instance_id of this DownloadJobInfo.
        :type job_instance_id: str
        """
        if job_instance_id is None:
            raise ValueError("Invalid value for `job_instance_id`, must not be `None`")

        self._job_instance_id = job_instance_id

    @property
    def progress(self):
        """Gets the progress of this DownloadJobInfo.

        Progress, as a percentage, of the job. Only populated if the job is currently running.

        :return: The progress of this DownloadJobInfo.
        :rtype: float
        """
        return self._progress

    @progress.setter
    def progress(self, progress):
        """Sets the progress of this DownloadJobInfo.

        Progress, as a percentage, of the job. Only populated if the job is currently running.

        :param progress: The progress of this DownloadJobInfo.
        :type progress: float
        """

        self._progress = progress

    @property
    def remaining_time_estimate_in_seconds(self):
        """Gets the remaining_time_estimate_in_seconds of this DownloadJobInfo.

        Remaining time estimate for the job to complete. Only populated if the job is currently running.

        :return: The remaining_time_estimate_in_seconds of this DownloadJobInfo.
        :rtype: int
        """
        return self._remaining_time_estimate_in_seconds

    @remaining_time_estimate_in_seconds.setter
    def remaining_time_estimate_in_seconds(self, remaining_time_estimate_in_seconds):
        """Sets the remaining_time_estimate_in_seconds of this DownloadJobInfo.

        Remaining time estimate for the job to complete. Only populated if the job is currently running.

        :param remaining_time_estimate_in_seconds: The remaining_time_estimate_in_seconds of this DownloadJobInfo.
        :type remaining_time_estimate_in_seconds: int
        """

        self._remaining_time_estimate_in_seconds = remaining_time_estimate_in_seconds

    @property
    def status(self):
        """Gets the status of this DownloadJobInfo.

        Status of the download job instance. 

        :return: The status of this DownloadJobInfo.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this DownloadJobInfo.

        Status of the download job instance. 

        :param status: The status of this DownloadJobInfo.
        :type status: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status
