# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.telemetry_level import TelemetryLevel
from openapi_server import util


class TelemetryConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, telemetry_level: TelemetryLevel=None):
        """TelemetryConfig - a model defined in OpenAPI

        :param telemetry_level: The telemetry_level of this TelemetryConfig.
        """
        self.openapi_types = {
            'telemetry_level': TelemetryLevel
        }

        self.attribute_map = {
            'telemetry_level': 'telemetryLevel'
        }

        self._telemetry_level = telemetry_level

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TelemetryConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TelemetryConfig of this TelemetryConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def telemetry_level(self):
        """Gets the telemetry_level of this TelemetryConfig.


        :return: The telemetry_level of this TelemetryConfig.
        :rtype: TelemetryLevel
        """
        return self._telemetry_level

    @telemetry_level.setter
    def telemetry_level(self, telemetry_level):
        """Sets the telemetry_level of this TelemetryConfig.


        :param telemetry_level: The telemetry_level of this TelemetryConfig.
        :type telemetry_level: TelemetryLevel
        """
        if telemetry_level is None:
            raise ValueError("Invalid value for `telemetry_level`, must not be `None`")

        self._telemetry_level = telemetry_level
