# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.cluster_visibility_config import ClusterVisibilityConfig
from openapi_server import util


class VcenterConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ca_certs: str=None, compute_visibility_filter: List[ClusterVisibilityConfig]=None, conflict_resolution_authz: str=None, hostname: str=None, password: str=None, username: str=None):
        """VcenterConfig - a model defined in OpenAPI

        :param ca_certs: The ca_certs of this VcenterConfig.
        :param compute_visibility_filter: The compute_visibility_filter of this VcenterConfig.
        :param conflict_resolution_authz: The conflict_resolution_authz of this VcenterConfig.
        :param hostname: The hostname of this VcenterConfig.
        :param password: The password of this VcenterConfig.
        :param username: The username of this VcenterConfig.
        """
        self.openapi_types = {
            'ca_certs': str,
            'compute_visibility_filter': List[ClusterVisibilityConfig],
            'conflict_resolution_authz': str,
            'hostname': str,
            'password': str,
            'username': str
        }

        self.attribute_map = {
            'ca_certs': 'caCerts',
            'compute_visibility_filter': 'computeVisibilityFilter',
            'conflict_resolution_authz': 'conflictResolutionAuthz',
            'hostname': 'hostname',
            'password': 'password',
            'username': 'username'
        }

        self._ca_certs = ca_certs
        self._compute_visibility_filter = compute_visibility_filter
        self._conflict_resolution_authz = conflict_resolution_authz
        self._hostname = hostname
        self._password = password
        self._username = username

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VcenterConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VcenterConfig of this VcenterConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ca_certs(self):
        """Gets the ca_certs of this VcenterConfig.

        Concatenated X.509 certificates in Base64 encoded DER format. Each certificate must start with -----BEGIN CERTIFICATE----- and end with -----END CERTIFICATE-----.

        :return: The ca_certs of this VcenterConfig.
        :rtype: str
        """
        return self._ca_certs

    @ca_certs.setter
    def ca_certs(self, ca_certs):
        """Sets the ca_certs of this VcenterConfig.

        Concatenated X.509 certificates in Base64 encoded DER format. Each certificate must start with -----BEGIN CERTIFICATE----- and end with -----END CERTIFICATE-----.

        :param ca_certs: The ca_certs of this VcenterConfig.
        :type ca_certs: str
        """

        self._ca_certs = ca_certs

    @property
    def compute_visibility_filter(self):
        """Gets the compute_visibility_filter of this VcenterConfig.

        Select compute clusters that must be visible to this Rubrik cluster. All other compute resources are hidden. If 'computeVisibilityFilter' is not specified, all resources are visible. If 'hostGroupFilter' is not specified for a compute cluster, all compute resources in the compute cluster are visible. If 'hostGroupFilter' is specified for a compute cluster, only virtual machinesthat currently reside on these hosts are visible. For the stretched cluster configuration (vMSC), specify the appropriate host groups.

        :return: The compute_visibility_filter of this VcenterConfig.
        :rtype: List[ClusterVisibilityConfig]
        """
        return self._compute_visibility_filter

    @compute_visibility_filter.setter
    def compute_visibility_filter(self, compute_visibility_filter):
        """Sets the compute_visibility_filter of this VcenterConfig.

        Select compute clusters that must be visible to this Rubrik cluster. All other compute resources are hidden. If 'computeVisibilityFilter' is not specified, all resources are visible. If 'hostGroupFilter' is not specified for a compute cluster, all compute resources in the compute cluster are visible. If 'hostGroupFilter' is specified for a compute cluster, only virtual machinesthat currently reside on these hosts are visible. For the stretched cluster configuration (vMSC), specify the appropriate host groups.

        :param compute_visibility_filter: The compute_visibility_filter of this VcenterConfig.
        :type compute_visibility_filter: List[ClusterVisibilityConfig]
        """

        self._compute_visibility_filter = compute_visibility_filter

    @property
    def conflict_resolution_authz(self):
        """Gets the conflict_resolution_authz of this VcenterConfig.

        Set to 'AllowAutoConflictResolution' to link the relic virtual machine objects of a virtual machine to the current object for the virtual machine or to 'NoConflictResolution' to prevent linking. The Rubrik cluster generates a unique ID for each virtual machine when a vCenter Server is added. When a virtual machine changes to another vCenter Server or unregisters and registers with the same vCenter Server, a new unique ID is generated for that virtual machine. When this happens, the virtual machine object associated with the original ID becomes a relic. This option links relic virtual machine objects with the current virtual machine object of a specific virtual machine, and makes the collective snapshot history available through the current object. Default value is 'NoConflictResolution'.

        :return: The conflict_resolution_authz of this VcenterConfig.
        :rtype: str
        """
        return self._conflict_resolution_authz

    @conflict_resolution_authz.setter
    def conflict_resolution_authz(self, conflict_resolution_authz):
        """Sets the conflict_resolution_authz of this VcenterConfig.

        Set to 'AllowAutoConflictResolution' to link the relic virtual machine objects of a virtual machine to the current object for the virtual machine or to 'NoConflictResolution' to prevent linking. The Rubrik cluster generates a unique ID for each virtual machine when a vCenter Server is added. When a virtual machine changes to another vCenter Server or unregisters and registers with the same vCenter Server, a new unique ID is generated for that virtual machine. When this happens, the virtual machine object associated with the original ID becomes a relic. This option links relic virtual machine objects with the current virtual machine object of a specific virtual machine, and makes the collective snapshot history available through the current object. Default value is 'NoConflictResolution'.

        :param conflict_resolution_authz: The conflict_resolution_authz of this VcenterConfig.
        :type conflict_resolution_authz: str
        """
        allowed_values = ["AllowAutoConflictResolution", "NoConflictResolution"]  # noqa: E501
        if conflict_resolution_authz not in allowed_values:
            raise ValueError(
                "Invalid value for `conflict_resolution_authz` ({0}), must be one of {1}"
                .format(conflict_resolution_authz, allowed_values)
            )

        self._conflict_resolution_authz = conflict_resolution_authz

    @property
    def hostname(self):
        """Gets the hostname of this VcenterConfig.


        :return: The hostname of this VcenterConfig.
        :rtype: str
        """
        return self._hostname

    @hostname.setter
    def hostname(self, hostname):
        """Sets the hostname of this VcenterConfig.


        :param hostname: The hostname of this VcenterConfig.
        :type hostname: str
        """
        if hostname is None:
            raise ValueError("Invalid value for `hostname`, must not be `None`")

        self._hostname = hostname

    @property
    def password(self):
        """Gets the password of this VcenterConfig.


        :return: The password of this VcenterConfig.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this VcenterConfig.


        :param password: The password of this VcenterConfig.
        :type password: str
        """
        if password is None:
            raise ValueError("Invalid value for `password`, must not be `None`")

        self._password = password

    @property
    def username(self):
        """Gets the username of this VcenterConfig.


        :return: The username of this VcenterConfig.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this VcenterConfig.


        :param username: The username of this VcenterConfig.
        :type username: str
        """
        if username is None:
            raise ValueError("Invalid value for `username`, must not be `None`")

        self._username = username
