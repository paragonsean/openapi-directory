# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ClusterTimezone(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, timezone: str=None):
        """ClusterTimezone - a model defined in OpenAPI

        :param timezone: The timezone of this ClusterTimezone.
        """
        self.openapi_types = {
            'timezone': str
        }

        self.attribute_map = {
            'timezone': 'timezone'
        }

        self._timezone = timezone

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ClusterTimezone':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ClusterTimezone of this ClusterTimezone.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def timezone(self):
        """Gets the timezone of this ClusterTimezone.

        Cluster time zone.

        :return: The timezone of this ClusterTimezone.
        :rtype: str
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone):
        """Sets the timezone of this ClusterTimezone.

        Cluster time zone.

        :param timezone: The timezone of this ClusterTimezone.
        :type timezone: str
        """
        allowed_values = ["Africa/Johannesburg", "Africa/Lagos", "Africa/Nairobi", "America/Anchorage", "America/Araguaina", "America/Barbados", "America/Chicago", "America/Costa_Rica", "America/Bogota", "America/Panama", "America/Atikokan", "America/Denver", "America/Los_Angeles", "America/Mexico_City", "America/New_York", "America/Noronha", "America/Phoenix", "America/Santiago", "America/St_Johns", "America/Toronto", "America/Vancouver", "Asia/Bangkok", "Asia/Dhaka", "Asia/Dubai", "Asia/Hong_Kong", "Asia/Karachi", "Asia/Kathmandu", "Asia/Kolkata", "Asia/Magadan", "Asia/Singapore", "Asia/Tokyo", "Atlantic/Cape_Verde", "Australia/Adelaide", "Australia/Brisbane", "Australia/Perth", "Australia/Sydney", "Europe/Amsterdam", "Europe/Athens", "Europe/London", "Europe/Moscow", "Pacific/Auckland", "Pacific/Honolulu", "Pacific/Midway", "UTC"]  # noqa: E501
        if timezone not in allowed_values:
            raise ValueError(
                "Invalid value for `timezone` ({0}), must be one of {1}"
                .format(timezone, allowed_values)
            )

        self._timezone = timezone
