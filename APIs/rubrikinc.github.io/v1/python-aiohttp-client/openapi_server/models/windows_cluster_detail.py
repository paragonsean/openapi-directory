# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class WindowsClusterDetail(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, fqdn: str=None, host_ids: List[str]=None, id: str=None, is_agentless: bool=None, name: str=None, primary_cluster_id: str=None, natural_id: str=None):
        """WindowsClusterDetail - a model defined in OpenAPI

        :param fqdn: The fqdn of this WindowsClusterDetail.
        :param host_ids: The host_ids of this WindowsClusterDetail.
        :param id: The id of this WindowsClusterDetail.
        :param is_agentless: The is_agentless of this WindowsClusterDetail.
        :param name: The name of this WindowsClusterDetail.
        :param primary_cluster_id: The primary_cluster_id of this WindowsClusterDetail.
        :param natural_id: The natural_id of this WindowsClusterDetail.
        """
        self.openapi_types = {
            'fqdn': str,
            'host_ids': List[str],
            'id': str,
            'is_agentless': bool,
            'name': str,
            'primary_cluster_id': str,
            'natural_id': str
        }

        self.attribute_map = {
            'fqdn': 'fqdn',
            'host_ids': 'hostIds',
            'id': 'id',
            'is_agentless': 'isAgentless',
            'name': 'name',
            'primary_cluster_id': 'primaryClusterId',
            'natural_id': 'naturalId'
        }

        self._fqdn = fqdn
        self._host_ids = host_ids
        self._id = id
        self._is_agentless = is_agentless
        self._name = name
        self._primary_cluster_id = primary_cluster_id
        self._natural_id = natural_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WindowsClusterDetail':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WindowsClusterDetail of this WindowsClusterDetail.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def fqdn(self):
        """Gets the fqdn of this WindowsClusterDetail.

        Fully qualified domain name of this cluster.

        :return: The fqdn of this WindowsClusterDetail.
        :rtype: str
        """
        return self._fqdn

    @fqdn.setter
    def fqdn(self, fqdn):
        """Sets the fqdn of this WindowsClusterDetail.

        Fully qualified domain name of this cluster.

        :param fqdn: The fqdn of this WindowsClusterDetail.
        :type fqdn: str
        """
        if fqdn is None:
            raise ValueError("Invalid value for `fqdn`, must not be `None`")

        self._fqdn = fqdn

    @property
    def host_ids(self):
        """Gets the host_ids of this WindowsClusterDetail.

        IDs of the hosts in this cluster.

        :return: The host_ids of this WindowsClusterDetail.
        :rtype: List[str]
        """
        return self._host_ids

    @host_ids.setter
    def host_ids(self, host_ids):
        """Sets the host_ids of this WindowsClusterDetail.

        IDs of the hosts in this cluster.

        :param host_ids: The host_ids of this WindowsClusterDetail.
        :type host_ids: List[str]
        """
        if host_ids is None:
            raise ValueError("Invalid value for `host_ids`, must not be `None`")

        self._host_ids = host_ids

    @property
    def id(self):
        """Gets the id of this WindowsClusterDetail.


        :return: The id of this WindowsClusterDetail.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this WindowsClusterDetail.


        :param id: The id of this WindowsClusterDetail.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def is_agentless(self):
        """Gets the is_agentless of this WindowsClusterDetail.

        Indicates whether the Rubrik Backup Service is installed on hosts in a Windows cluster. The value is true when all hosts in the cluster do not have the Rubrik Backup Service installed. The value is false when one or more of the hosts in the cluster have the Rubrik Backup Service installed.

        :return: The is_agentless of this WindowsClusterDetail.
        :rtype: bool
        """
        return self._is_agentless

    @is_agentless.setter
    def is_agentless(self, is_agentless):
        """Sets the is_agentless of this WindowsClusterDetail.

        Indicates whether the Rubrik Backup Service is installed on hosts in a Windows cluster. The value is true when all hosts in the cluster do not have the Rubrik Backup Service installed. The value is false when one or more of the hosts in the cluster have the Rubrik Backup Service installed.

        :param is_agentless: The is_agentless of this WindowsClusterDetail.
        :type is_agentless: bool
        """
        if is_agentless is None:
            raise ValueError("Invalid value for `is_agentless`, must not be `None`")

        self._is_agentless = is_agentless

    @property
    def name(self):
        """Gets the name of this WindowsClusterDetail.


        :return: The name of this WindowsClusterDetail.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this WindowsClusterDetail.


        :param name: The name of this WindowsClusterDetail.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def primary_cluster_id(self):
        """Gets the primary_cluster_id of this WindowsClusterDetail.


        :return: The primary_cluster_id of this WindowsClusterDetail.
        :rtype: str
        """
        return self._primary_cluster_id

    @primary_cluster_id.setter
    def primary_cluster_id(self, primary_cluster_id):
        """Sets the primary_cluster_id of this WindowsClusterDetail.


        :param primary_cluster_id: The primary_cluster_id of this WindowsClusterDetail.
        :type primary_cluster_id: str
        """
        if primary_cluster_id is None:
            raise ValueError("Invalid value for `primary_cluster_id`, must not be `None`")

        self._primary_cluster_id = primary_cluster_id

    @property
    def natural_id(self):
        """Gets the natural_id of this WindowsClusterDetail.

        Obtained from ClusterInstanceID under the registry key HKLM\\Cluster.

        :return: The natural_id of this WindowsClusterDetail.
        :rtype: str
        """
        return self._natural_id

    @natural_id.setter
    def natural_id(self, natural_id):
        """Sets the natural_id of this WindowsClusterDetail.

        Obtained from ClusterInstanceID under the registry key HKLM\\Cluster.

        :param natural_id: The natural_id of this WindowsClusterDetail.
        :type natural_id: str
        """
        if natural_id is None:
            raise ValueError("Invalid value for `natural_id`, must not be `None`")

        self._natural_id = natural_id
