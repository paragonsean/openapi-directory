# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.snapshot_cloud_storage_tier import SnapshotCloudStorageTier
from openapi_server.models.snapshot_retention_info import SnapshotRetentionInfo
from openapi_server.models.volume_group_snapshot_volume_summary import VolumeGroupSnapshotVolumeSummary
from openapi_server import util


class VolumeGroupSnapshotDetail(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, archival_location_ids: List[str]=None, cloud_state: int=None, cloud_storage_tier: SnapshotCloudStorageTier=None, consistency_level: str=None, _date: datetime=None, expiration_date: datetime=None, id: str=None, index_state: int=None, is_custom_retention_applied: bool=None, is_on_demand_snapshot: bool=None, is_placed_on_legal_hold: bool=None, is_retained_by_retention_lock_sla: bool=None, parent_snapshot_id: str=None, replication_location_ids: List[str]=None, sla_id: str=None, sla_name: str=None, snapshot_retention_info: SnapshotRetentionInfo=None, source_object_type: str=None, file_size_in_bytes: int=None, included_volumes: List[VolumeGroupSnapshotVolumeSummary]=None, name: str=None, used_fast_vhdx: bool=None, volume_group_id: str=None):
        """VolumeGroupSnapshotDetail - a model defined in OpenAPI

        :param archival_location_ids: The archival_location_ids of this VolumeGroupSnapshotDetail.
        :param cloud_state: The cloud_state of this VolumeGroupSnapshotDetail.
        :param cloud_storage_tier: The cloud_storage_tier of this VolumeGroupSnapshotDetail.
        :param consistency_level: The consistency_level of this VolumeGroupSnapshotDetail.
        :param _date: The _date of this VolumeGroupSnapshotDetail.
        :param expiration_date: The expiration_date of this VolumeGroupSnapshotDetail.
        :param id: The id of this VolumeGroupSnapshotDetail.
        :param index_state: The index_state of this VolumeGroupSnapshotDetail.
        :param is_custom_retention_applied: The is_custom_retention_applied of this VolumeGroupSnapshotDetail.
        :param is_on_demand_snapshot: The is_on_demand_snapshot of this VolumeGroupSnapshotDetail.
        :param is_placed_on_legal_hold: The is_placed_on_legal_hold of this VolumeGroupSnapshotDetail.
        :param is_retained_by_retention_lock_sla: The is_retained_by_retention_lock_sla of this VolumeGroupSnapshotDetail.
        :param parent_snapshot_id: The parent_snapshot_id of this VolumeGroupSnapshotDetail.
        :param replication_location_ids: The replication_location_ids of this VolumeGroupSnapshotDetail.
        :param sla_id: The sla_id of this VolumeGroupSnapshotDetail.
        :param sla_name: The sla_name of this VolumeGroupSnapshotDetail.
        :param snapshot_retention_info: The snapshot_retention_info of this VolumeGroupSnapshotDetail.
        :param source_object_type: The source_object_type of this VolumeGroupSnapshotDetail.
        :param file_size_in_bytes: The file_size_in_bytes of this VolumeGroupSnapshotDetail.
        :param included_volumes: The included_volumes of this VolumeGroupSnapshotDetail.
        :param name: The name of this VolumeGroupSnapshotDetail.
        :param used_fast_vhdx: The used_fast_vhdx of this VolumeGroupSnapshotDetail.
        :param volume_group_id: The volume_group_id of this VolumeGroupSnapshotDetail.
        """
        self.openapi_types = {
            'archival_location_ids': List[str],
            'cloud_state': int,
            'cloud_storage_tier': SnapshotCloudStorageTier,
            'consistency_level': str,
            '_date': datetime,
            'expiration_date': datetime,
            'id': str,
            'index_state': int,
            'is_custom_retention_applied': bool,
            'is_on_demand_snapshot': bool,
            'is_placed_on_legal_hold': bool,
            'is_retained_by_retention_lock_sla': bool,
            'parent_snapshot_id': str,
            'replication_location_ids': List[str],
            'sla_id': str,
            'sla_name': str,
            'snapshot_retention_info': SnapshotRetentionInfo,
            'source_object_type': str,
            'file_size_in_bytes': int,
            'included_volumes': List[VolumeGroupSnapshotVolumeSummary],
            'name': str,
            'used_fast_vhdx': bool,
            'volume_group_id': str
        }

        self.attribute_map = {
            'archival_location_ids': 'archivalLocationIds',
            'cloud_state': 'cloudState',
            'cloud_storage_tier': 'cloudStorageTier',
            'consistency_level': 'consistencyLevel',
            '_date': 'date',
            'expiration_date': 'expirationDate',
            'id': 'id',
            'index_state': 'indexState',
            'is_custom_retention_applied': 'isCustomRetentionApplied',
            'is_on_demand_snapshot': 'isOnDemandSnapshot',
            'is_placed_on_legal_hold': 'isPlacedOnLegalHold',
            'is_retained_by_retention_lock_sla': 'isRetainedByRetentionLockSla',
            'parent_snapshot_id': 'parentSnapshotId',
            'replication_location_ids': 'replicationLocationIds',
            'sla_id': 'slaId',
            'sla_name': 'slaName',
            'snapshot_retention_info': 'snapshotRetentionInfo',
            'source_object_type': 'sourceObjectType',
            'file_size_in_bytes': 'fileSizeInBytes',
            'included_volumes': 'includedVolumes',
            'name': 'name',
            'used_fast_vhdx': 'usedFastVhdx',
            'volume_group_id': 'volumeGroupId'
        }

        self._archival_location_ids = archival_location_ids
        self._cloud_state = cloud_state
        self._cloud_storage_tier = cloud_storage_tier
        self._consistency_level = consistency_level
        self.__date = _date
        self._expiration_date = expiration_date
        self._id = id
        self._index_state = index_state
        self._is_custom_retention_applied = is_custom_retention_applied
        self._is_on_demand_snapshot = is_on_demand_snapshot
        self._is_placed_on_legal_hold = is_placed_on_legal_hold
        self._is_retained_by_retention_lock_sla = is_retained_by_retention_lock_sla
        self._parent_snapshot_id = parent_snapshot_id
        self._replication_location_ids = replication_location_ids
        self._sla_id = sla_id
        self._sla_name = sla_name
        self._snapshot_retention_info = snapshot_retention_info
        self._source_object_type = source_object_type
        self._file_size_in_bytes = file_size_in_bytes
        self._included_volumes = included_volumes
        self._name = name
        self._used_fast_vhdx = used_fast_vhdx
        self._volume_group_id = volume_group_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VolumeGroupSnapshotDetail':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VolumeGroupSnapshotDetail of this VolumeGroupSnapshotDetail.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def archival_location_ids(self):
        """Gets the archival_location_ids of this VolumeGroupSnapshotDetail.


        :return: The archival_location_ids of this VolumeGroupSnapshotDetail.
        :rtype: List[str]
        """
        return self._archival_location_ids

    @archival_location_ids.setter
    def archival_location_ids(self, archival_location_ids):
        """Sets the archival_location_ids of this VolumeGroupSnapshotDetail.


        :param archival_location_ids: The archival_location_ids of this VolumeGroupSnapshotDetail.
        :type archival_location_ids: List[str]
        """

        self._archival_location_ids = archival_location_ids

    @property
    def cloud_state(self):
        """Gets the cloud_state of this VolumeGroupSnapshotDetail.

        Integer value that represents the archival state of a snapshot. 0 means the snapshot is not archived. 2 means the snapshot is archived. 3 means the snapshot is downloaded from the archival location. 4 means the snapshot is in the process of being downloaded from the archival location. 6 means the snapshot is stored locally and at the archival location. 

        :return: The cloud_state of this VolumeGroupSnapshotDetail.
        :rtype: int
        """
        return self._cloud_state

    @cloud_state.setter
    def cloud_state(self, cloud_state):
        """Sets the cloud_state of this VolumeGroupSnapshotDetail.

        Integer value that represents the archival state of a snapshot. 0 means the snapshot is not archived. 2 means the snapshot is archived. 3 means the snapshot is downloaded from the archival location. 4 means the snapshot is in the process of being downloaded from the archival location. 6 means the snapshot is stored locally and at the archival location. 

        :param cloud_state: The cloud_state of this VolumeGroupSnapshotDetail.
        :type cloud_state: int
        """

        self._cloud_state = cloud_state

    @property
    def cloud_storage_tier(self):
        """Gets the cloud_storage_tier of this VolumeGroupSnapshotDetail.


        :return: The cloud_storage_tier of this VolumeGroupSnapshotDetail.
        :rtype: SnapshotCloudStorageTier
        """
        return self._cloud_storage_tier

    @cloud_storage_tier.setter
    def cloud_storage_tier(self, cloud_storage_tier):
        """Sets the cloud_storage_tier of this VolumeGroupSnapshotDetail.


        :param cloud_storage_tier: The cloud_storage_tier of this VolumeGroupSnapshotDetail.
        :type cloud_storage_tier: SnapshotCloudStorageTier
        """

        self._cloud_storage_tier = cloud_storage_tier

    @property
    def consistency_level(self):
        """Gets the consistency_level of this VolumeGroupSnapshotDetail.


        :return: The consistency_level of this VolumeGroupSnapshotDetail.
        :rtype: str
        """
        return self._consistency_level

    @consistency_level.setter
    def consistency_level(self, consistency_level):
        """Sets the consistency_level of this VolumeGroupSnapshotDetail.


        :param consistency_level: The consistency_level of this VolumeGroupSnapshotDetail.
        :type consistency_level: str
        """

        self._consistency_level = consistency_level

    @property
    def _date(self):
        """Gets the _date of this VolumeGroupSnapshotDetail.


        :return: The _date of this VolumeGroupSnapshotDetail.
        :rtype: datetime
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this VolumeGroupSnapshotDetail.


        :param _date: The _date of this VolumeGroupSnapshotDetail.
        :type _date: datetime
        """
        if _date is None:
            raise ValueError("Invalid value for `_date`, must not be `None`")

        self.__date = _date

    @property
    def expiration_date(self):
        """Gets the expiration_date of this VolumeGroupSnapshotDetail.


        :return: The expiration_date of this VolumeGroupSnapshotDetail.
        :rtype: datetime
        """
        return self._expiration_date

    @expiration_date.setter
    def expiration_date(self, expiration_date):
        """Sets the expiration_date of this VolumeGroupSnapshotDetail.


        :param expiration_date: The expiration_date of this VolumeGroupSnapshotDetail.
        :type expiration_date: datetime
        """

        self._expiration_date = expiration_date

    @property
    def id(self):
        """Gets the id of this VolumeGroupSnapshotDetail.


        :return: The id of this VolumeGroupSnapshotDetail.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this VolumeGroupSnapshotDetail.


        :param id: The id of this VolumeGroupSnapshotDetail.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def index_state(self):
        """Gets the index_state of this VolumeGroupSnapshotDetail.

        Integer value representing the state of the indexing job for a snapshot. 0 means that the indexing has not begun or is in progress. 1 means indexing completed successfully. 2 means that the indexer failed to process this snapshot. 

        :return: The index_state of this VolumeGroupSnapshotDetail.
        :rtype: int
        """
        return self._index_state

    @index_state.setter
    def index_state(self, index_state):
        """Sets the index_state of this VolumeGroupSnapshotDetail.

        Integer value representing the state of the indexing job for a snapshot. 0 means that the indexing has not begun or is in progress. 1 means indexing completed successfully. 2 means that the indexer failed to process this snapshot. 

        :param index_state: The index_state of this VolumeGroupSnapshotDetail.
        :type index_state: int
        """

        self._index_state = index_state

    @property
    def is_custom_retention_applied(self):
        """Gets the is_custom_retention_applied of this VolumeGroupSnapshotDetail.

        A Boolean that indicates whether or not custom retention is applied to the snapshot. 

        :return: The is_custom_retention_applied of this VolumeGroupSnapshotDetail.
        :rtype: bool
        """
        return self._is_custom_retention_applied

    @is_custom_retention_applied.setter
    def is_custom_retention_applied(self, is_custom_retention_applied):
        """Sets the is_custom_retention_applied of this VolumeGroupSnapshotDetail.

        A Boolean that indicates whether or not custom retention is applied to the snapshot. 

        :param is_custom_retention_applied: The is_custom_retention_applied of this VolumeGroupSnapshotDetail.
        :type is_custom_retention_applied: bool
        """
        if is_custom_retention_applied is None:
            raise ValueError("Invalid value for `is_custom_retention_applied`, must not be `None`")

        self._is_custom_retention_applied = is_custom_retention_applied

    @property
    def is_on_demand_snapshot(self):
        """Gets the is_on_demand_snapshot of this VolumeGroupSnapshotDetail.


        :return: The is_on_demand_snapshot of this VolumeGroupSnapshotDetail.
        :rtype: bool
        """
        return self._is_on_demand_snapshot

    @is_on_demand_snapshot.setter
    def is_on_demand_snapshot(self, is_on_demand_snapshot):
        """Sets the is_on_demand_snapshot of this VolumeGroupSnapshotDetail.


        :param is_on_demand_snapshot: The is_on_demand_snapshot of this VolumeGroupSnapshotDetail.
        :type is_on_demand_snapshot: bool
        """
        if is_on_demand_snapshot is None:
            raise ValueError("Invalid value for `is_on_demand_snapshot`, must not be `None`")

        self._is_on_demand_snapshot = is_on_demand_snapshot

    @property
    def is_placed_on_legal_hold(self):
        """Gets the is_placed_on_legal_hold of this VolumeGroupSnapshotDetail.

        A Boolean that indicates whether the snapshot is placed on Legal Hold. When this value is 'true', the snapshot is placed on Legal Hold.

        :return: The is_placed_on_legal_hold of this VolumeGroupSnapshotDetail.
        :rtype: bool
        """
        return self._is_placed_on_legal_hold

    @is_placed_on_legal_hold.setter
    def is_placed_on_legal_hold(self, is_placed_on_legal_hold):
        """Sets the is_placed_on_legal_hold of this VolumeGroupSnapshotDetail.

        A Boolean that indicates whether the snapshot is placed on Legal Hold. When this value is 'true', the snapshot is placed on Legal Hold.

        :param is_placed_on_legal_hold: The is_placed_on_legal_hold of this VolumeGroupSnapshotDetail.
        :type is_placed_on_legal_hold: bool
        """

        self._is_placed_on_legal_hold = is_placed_on_legal_hold

    @property
    def is_retained_by_retention_lock_sla(self):
        """Gets the is_retained_by_retention_lock_sla of this VolumeGroupSnapshotDetail.

        A Boolean that indicates whether the snapshot is being retained under a Retention Lock SLA Domain. When this value is 'true', the snapshot is being retained under a Retention Lock SLA Domain.

        :return: The is_retained_by_retention_lock_sla of this VolumeGroupSnapshotDetail.
        :rtype: bool
        """
        return self._is_retained_by_retention_lock_sla

    @is_retained_by_retention_lock_sla.setter
    def is_retained_by_retention_lock_sla(self, is_retained_by_retention_lock_sla):
        """Sets the is_retained_by_retention_lock_sla of this VolumeGroupSnapshotDetail.

        A Boolean that indicates whether the snapshot is being retained under a Retention Lock SLA Domain. When this value is 'true', the snapshot is being retained under a Retention Lock SLA Domain.

        :param is_retained_by_retention_lock_sla: The is_retained_by_retention_lock_sla of this VolumeGroupSnapshotDetail.
        :type is_retained_by_retention_lock_sla: bool
        """

        self._is_retained_by_retention_lock_sla = is_retained_by_retention_lock_sla

    @property
    def parent_snapshot_id(self):
        """Gets the parent_snapshot_id of this VolumeGroupSnapshotDetail.

        ID of the parent snapshot if the current snapshot is a child snapshot. Child snapshots are snapshots of objects that are part of an app, either a vCloud Director vApp or an AppBlueprint. Snapshots of the app are parent snapshots. 

        :return: The parent_snapshot_id of this VolumeGroupSnapshotDetail.
        :rtype: str
        """
        return self._parent_snapshot_id

    @parent_snapshot_id.setter
    def parent_snapshot_id(self, parent_snapshot_id):
        """Sets the parent_snapshot_id of this VolumeGroupSnapshotDetail.

        ID of the parent snapshot if the current snapshot is a child snapshot. Child snapshots are snapshots of objects that are part of an app, either a vCloud Director vApp or an AppBlueprint. Snapshots of the app are parent snapshots. 

        :param parent_snapshot_id: The parent_snapshot_id of this VolumeGroupSnapshotDetail.
        :type parent_snapshot_id: str
        """

        self._parent_snapshot_id = parent_snapshot_id

    @property
    def replication_location_ids(self):
        """Gets the replication_location_ids of this VolumeGroupSnapshotDetail.


        :return: The replication_location_ids of this VolumeGroupSnapshotDetail.
        :rtype: List[str]
        """
        return self._replication_location_ids

    @replication_location_ids.setter
    def replication_location_ids(self, replication_location_ids):
        """Sets the replication_location_ids of this VolumeGroupSnapshotDetail.


        :param replication_location_ids: The replication_location_ids of this VolumeGroupSnapshotDetail.
        :type replication_location_ids: List[str]
        """
        if replication_location_ids is None:
            raise ValueError("Invalid value for `replication_location_ids`, must not be `None`")

        self._replication_location_ids = replication_location_ids

    @property
    def sla_id(self):
        """Gets the sla_id of this VolumeGroupSnapshotDetail.

        (Deprecated) For a policy based snapshot this parameter contains the ID of the SLA Domain currently assigned to the data source of that snapshot. For an on demand snapshot this field corresponds to the SLA Domain that was assigned when the snapshot was taken. A data source, and individual snapshots, can be reassigned to a different SLA Domain, or the SLA Domain can be modified. In any of these cases this parameter can contain a stale and incorrect value. To view retention information for this snapshot, use snapshotRetentionInfo instead.

        :return: The sla_id of this VolumeGroupSnapshotDetail.
        :rtype: str
        """
        return self._sla_id

    @sla_id.setter
    def sla_id(self, sla_id):
        """Sets the sla_id of this VolumeGroupSnapshotDetail.

        (Deprecated) For a policy based snapshot this parameter contains the ID of the SLA Domain currently assigned to the data source of that snapshot. For an on demand snapshot this field corresponds to the SLA Domain that was assigned when the snapshot was taken. A data source, and individual snapshots, can be reassigned to a different SLA Domain, or the SLA Domain can be modified. In any of these cases this parameter can contain a stale and incorrect value. To view retention information for this snapshot, use snapshotRetentionInfo instead.

        :param sla_id: The sla_id of this VolumeGroupSnapshotDetail.
        :type sla_id: str
        """
        if sla_id is None:
            raise ValueError("Invalid value for `sla_id`, must not be `None`")

        self._sla_id = sla_id

    @property
    def sla_name(self):
        """Gets the sla_name of this VolumeGroupSnapshotDetail.

        (Deprecated) For a policy based snapshot this parameter contains the name of the SLA Domain currently assigned to the data source of that snapshot. For an on demand snapshot this field corresponds to the SLA Domain that was assigned when the snapshot was taken. A data source, and individual snapshots, can be reassigned to a different SLA Domain, or the SLA Domain can be modified. In any of these cases this parameter can contain a stale and incorrect value. To view retention information for this snapshot, use snapshotRetentionInfo instead.

        :return: The sla_name of this VolumeGroupSnapshotDetail.
        :rtype: str
        """
        return self._sla_name

    @sla_name.setter
    def sla_name(self, sla_name):
        """Sets the sla_name of this VolumeGroupSnapshotDetail.

        (Deprecated) For a policy based snapshot this parameter contains the name of the SLA Domain currently assigned to the data source of that snapshot. For an on demand snapshot this field corresponds to the SLA Domain that was assigned when the snapshot was taken. A data source, and individual snapshots, can be reassigned to a different SLA Domain, or the SLA Domain can be modified. In any of these cases this parameter can contain a stale and incorrect value. To view retention information for this snapshot, use snapshotRetentionInfo instead.

        :param sla_name: The sla_name of this VolumeGroupSnapshotDetail.
        :type sla_name: str
        """
        if sla_name is None:
            raise ValueError("Invalid value for `sla_name`, must not be `None`")

        self._sla_name = sla_name

    @property
    def snapshot_retention_info(self):
        """Gets the snapshot_retention_info of this VolumeGroupSnapshotDetail.


        :return: The snapshot_retention_info of this VolumeGroupSnapshotDetail.
        :rtype: SnapshotRetentionInfo
        """
        return self._snapshot_retention_info

    @snapshot_retention_info.setter
    def snapshot_retention_info(self, snapshot_retention_info):
        """Sets the snapshot_retention_info of this VolumeGroupSnapshotDetail.


        :param snapshot_retention_info: The snapshot_retention_info of this VolumeGroupSnapshotDetail.
        :type snapshot_retention_info: SnapshotRetentionInfo
        """

        self._snapshot_retention_info = snapshot_retention_info

    @property
    def source_object_type(self):
        """Gets the source_object_type of this VolumeGroupSnapshotDetail.


        :return: The source_object_type of this VolumeGroupSnapshotDetail.
        :rtype: str
        """
        return self._source_object_type

    @source_object_type.setter
    def source_object_type(self, source_object_type):
        """Sets the source_object_type of this VolumeGroupSnapshotDetail.


        :param source_object_type: The source_object_type of this VolumeGroupSnapshotDetail.
        :type source_object_type: str
        """

        self._source_object_type = source_object_type

    @property
    def file_size_in_bytes(self):
        """Gets the file_size_in_bytes of this VolumeGroupSnapshotDetail.

        The logical size of the Volume Group snapshot in bytes.

        :return: The file_size_in_bytes of this VolumeGroupSnapshotDetail.
        :rtype: int
        """
        return self._file_size_in_bytes

    @file_size_in_bytes.setter
    def file_size_in_bytes(self, file_size_in_bytes):
        """Sets the file_size_in_bytes of this VolumeGroupSnapshotDetail.

        The logical size of the Volume Group snapshot in bytes.

        :param file_size_in_bytes: The file_size_in_bytes of this VolumeGroupSnapshotDetail.
        :type file_size_in_bytes: int
        """

        self._file_size_in_bytes = file_size_in_bytes

    @property
    def included_volumes(self):
        """Gets the included_volumes of this VolumeGroupSnapshotDetail.

        Configuration details of the volume(s) included in the snapshot.

        :return: The included_volumes of this VolumeGroupSnapshotDetail.
        :rtype: List[VolumeGroupSnapshotVolumeSummary]
        """
        return self._included_volumes

    @included_volumes.setter
    def included_volumes(self, included_volumes):
        """Sets the included_volumes of this VolumeGroupSnapshotDetail.

        Configuration details of the volume(s) included in the snapshot.

        :param included_volumes: The included_volumes of this VolumeGroupSnapshotDetail.
        :type included_volumes: List[VolumeGroupSnapshotVolumeSummary]
        """
        if included_volumes is None:
            raise ValueError("Invalid value for `included_volumes`, must not be `None`")

        self._included_volumes = included_volumes

    @property
    def name(self):
        """Gets the name of this VolumeGroupSnapshotDetail.

        A human-readable name of the mount points included in the snapshot.

        :return: The name of this VolumeGroupSnapshotDetail.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this VolumeGroupSnapshotDetail.

        A human-readable name of the mount points included in the snapshot.

        :param name: The name of this VolumeGroupSnapshotDetail.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def used_fast_vhdx(self):
        """Gets the used_fast_vhdx of this VolumeGroupSnapshotDetail.

        Specifies whether the snapshot was taken using the fast VHDX builder, which became available in the Rubrik CDM 5.1 release.

        :return: The used_fast_vhdx of this VolumeGroupSnapshotDetail.
        :rtype: bool
        """
        return self._used_fast_vhdx

    @used_fast_vhdx.setter
    def used_fast_vhdx(self, used_fast_vhdx):
        """Sets the used_fast_vhdx of this VolumeGroupSnapshotDetail.

        Specifies whether the snapshot was taken using the fast VHDX builder, which became available in the Rubrik CDM 5.1 release.

        :param used_fast_vhdx: The used_fast_vhdx of this VolumeGroupSnapshotDetail.
        :type used_fast_vhdx: bool
        """

        self._used_fast_vhdx = used_fast_vhdx

    @property
    def volume_group_id(self):
        """Gets the volume_group_id of this VolumeGroupSnapshotDetail.

        The unique ID of the Volume Group that was snapshoted.

        :return: The volume_group_id of this VolumeGroupSnapshotDetail.
        :rtype: str
        """
        return self._volume_group_id

    @volume_group_id.setter
    def volume_group_id(self, volume_group_id):
        """Sets the volume_group_id of this VolumeGroupSnapshotDetail.

        The unique ID of the Volume Group that was snapshoted.

        :param volume_group_id: The volume_group_id of this VolumeGroupSnapshotDetail.
        :type volume_group_id: str
        """
        if volume_group_id is None:
            raise ValueError("Invalid value for `volume_group_id`, must not be `None`")

        self._volume_group_id = volume_group_id
