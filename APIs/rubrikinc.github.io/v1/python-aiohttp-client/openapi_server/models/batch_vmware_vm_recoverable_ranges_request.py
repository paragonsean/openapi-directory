# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BatchVmwareVmRecoverableRangesRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, after_time: datetime=None, before_time: datetime=None, vm_ids: List[str]=None):
        """BatchVmwareVmRecoverableRangesRequest - a model defined in OpenAPI

        :param after_time: The after_time of this BatchVmwareVmRecoverableRangesRequest.
        :param before_time: The before_time of this BatchVmwareVmRecoverableRangesRequest.
        :param vm_ids: The vm_ids of this BatchVmwareVmRecoverableRangesRequest.
        """
        self.openapi_types = {
            'after_time': datetime,
            'before_time': datetime,
            'vm_ids': List[str]
        }

        self.attribute_map = {
            'after_time': 'after_time',
            'before_time': 'before_time',
            'vm_ids': 'vmIds'
        }

        self._after_time = after_time
        self._before_time = before_time
        self._vm_ids = vm_ids

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BatchVmwareVmRecoverableRangesRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BatchVmwareVmRecoverableRangesRequest of this BatchVmwareVmRecoverableRangesRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def after_time(self):
        """Gets the after_time of this BatchVmwareVmRecoverableRangesRequest.

        Query filter - only ranges after this time will be included. The date-time string should be in ISO8601 format, such as `2018-01-01T01:23:45.678Z`.

        :return: The after_time of this BatchVmwareVmRecoverableRangesRequest.
        :rtype: datetime
        """
        return self._after_time

    @after_time.setter
    def after_time(self, after_time):
        """Sets the after_time of this BatchVmwareVmRecoverableRangesRequest.

        Query filter - only ranges after this time will be included. The date-time string should be in ISO8601 format, such as `2018-01-01T01:23:45.678Z`.

        :param after_time: The after_time of this BatchVmwareVmRecoverableRangesRequest.
        :type after_time: datetime
        """

        self._after_time = after_time

    @property
    def before_time(self):
        """Gets the before_time of this BatchVmwareVmRecoverableRangesRequest.

        Query filter - only ranges before this time will be included. The date-time string should be in ISO8601 format, such as `2018-01-01T01:23:45.678Z`.

        :return: The before_time of this BatchVmwareVmRecoverableRangesRequest.
        :rtype: datetime
        """
        return self._before_time

    @before_time.setter
    def before_time(self, before_time):
        """Sets the before_time of this BatchVmwareVmRecoverableRangesRequest.

        Query filter - only ranges before this time will be included. The date-time string should be in ISO8601 format, such as `2018-01-01T01:23:45.678Z`.

        :param before_time: The before_time of this BatchVmwareVmRecoverableRangesRequest.
        :type before_time: datetime
        """

        self._before_time = before_time

    @property
    def vm_ids(self):
        """Gets the vm_ids of this BatchVmwareVmRecoverableRangesRequest.

        The ID of each CDP-enabled virtual machine for which recoverable ranges are being retrieved.

        :return: The vm_ids of this BatchVmwareVmRecoverableRangesRequest.
        :rtype: List[str]
        """
        return self._vm_ids

    @vm_ids.setter
    def vm_ids(self, vm_ids):
        """Sets the vm_ids of this BatchVmwareVmRecoverableRangesRequest.

        The ID of each CDP-enabled virtual machine for which recoverable ranges are being retrieved.

        :param vm_ids: The vm_ids of this BatchVmwareVmRecoverableRangesRequest.
        :type vm_ids: List[str]
        """
        if vm_ids is None:
            raise ValueError("Invalid value for `vm_ids`, must not be `None`")

        self._vm_ids = vm_ids
