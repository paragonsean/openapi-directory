# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PasswordRequirementsPatchRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, block_previous_passwords: bool=None, clear_api_tokens: bool=None, clear_web_sessions: bool=None, min_length: int=None, min_lower_case: int=None, min_numerics: int=None, min_special: int=None, min_upper_case: int=None, use_zxcvbn: bool=None):
        """PasswordRequirementsPatchRequest - a model defined in OpenAPI

        :param block_previous_passwords: The block_previous_passwords of this PasswordRequirementsPatchRequest.
        :param clear_api_tokens: The clear_api_tokens of this PasswordRequirementsPatchRequest.
        :param clear_web_sessions: The clear_web_sessions of this PasswordRequirementsPatchRequest.
        :param min_length: The min_length of this PasswordRequirementsPatchRequest.
        :param min_lower_case: The min_lower_case of this PasswordRequirementsPatchRequest.
        :param min_numerics: The min_numerics of this PasswordRequirementsPatchRequest.
        :param min_special: The min_special of this PasswordRequirementsPatchRequest.
        :param min_upper_case: The min_upper_case of this PasswordRequirementsPatchRequest.
        :param use_zxcvbn: The use_zxcvbn of this PasswordRequirementsPatchRequest.
        """
        self.openapi_types = {
            'block_previous_passwords': bool,
            'clear_api_tokens': bool,
            'clear_web_sessions': bool,
            'min_length': int,
            'min_lower_case': int,
            'min_numerics': int,
            'min_special': int,
            'min_upper_case': int,
            'use_zxcvbn': bool
        }

        self.attribute_map = {
            'block_previous_passwords': 'blockPreviousPasswords',
            'clear_api_tokens': 'clearApiTokens',
            'clear_web_sessions': 'clearWebSessions',
            'min_length': 'minLength',
            'min_lower_case': 'minLowerCase',
            'min_numerics': 'minNumerics',
            'min_special': 'minSpecial',
            'min_upper_case': 'minUpperCase',
            'use_zxcvbn': 'useZxcvbn'
        }

        self._block_previous_passwords = block_previous_passwords
        self._clear_api_tokens = clear_api_tokens
        self._clear_web_sessions = clear_web_sessions
        self._min_length = min_length
        self._min_lower_case = min_lower_case
        self._min_numerics = min_numerics
        self._min_special = min_special
        self._min_upper_case = min_upper_case
        self._use_zxcvbn = use_zxcvbn

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PasswordRequirementsPatchRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PasswordRequirementsPatchRequest of this PasswordRequirementsPatchRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def block_previous_passwords(self):
        """Gets the block_previous_passwords of this PasswordRequirementsPatchRequest.


        :return: The block_previous_passwords of this PasswordRequirementsPatchRequest.
        :rtype: bool
        """
        return self._block_previous_passwords

    @block_previous_passwords.setter
    def block_previous_passwords(self, block_previous_passwords):
        """Sets the block_previous_passwords of this PasswordRequirementsPatchRequest.


        :param block_previous_passwords: The block_previous_passwords of this PasswordRequirementsPatchRequest.
        :type block_previous_passwords: bool
        """

        self._block_previous_passwords = block_previous_passwords

    @property
    def clear_api_tokens(self):
        """Gets the clear_api_tokens of this PasswordRequirementsPatchRequest.


        :return: The clear_api_tokens of this PasswordRequirementsPatchRequest.
        :rtype: bool
        """
        return self._clear_api_tokens

    @clear_api_tokens.setter
    def clear_api_tokens(self, clear_api_tokens):
        """Sets the clear_api_tokens of this PasswordRequirementsPatchRequest.


        :param clear_api_tokens: The clear_api_tokens of this PasswordRequirementsPatchRequest.
        :type clear_api_tokens: bool
        """

        self._clear_api_tokens = clear_api_tokens

    @property
    def clear_web_sessions(self):
        """Gets the clear_web_sessions of this PasswordRequirementsPatchRequest.


        :return: The clear_web_sessions of this PasswordRequirementsPatchRequest.
        :rtype: bool
        """
        return self._clear_web_sessions

    @clear_web_sessions.setter
    def clear_web_sessions(self, clear_web_sessions):
        """Sets the clear_web_sessions of this PasswordRequirementsPatchRequest.


        :param clear_web_sessions: The clear_web_sessions of this PasswordRequirementsPatchRequest.
        :type clear_web_sessions: bool
        """

        self._clear_web_sessions = clear_web_sessions

    @property
    def min_length(self):
        """Gets the min_length of this PasswordRequirementsPatchRequest.


        :return: The min_length of this PasswordRequirementsPatchRequest.
        :rtype: int
        """
        return self._min_length

    @min_length.setter
    def min_length(self, min_length):
        """Sets the min_length of this PasswordRequirementsPatchRequest.


        :param min_length: The min_length of this PasswordRequirementsPatchRequest.
        :type min_length: int
        """

        self._min_length = min_length

    @property
    def min_lower_case(self):
        """Gets the min_lower_case of this PasswordRequirementsPatchRequest.


        :return: The min_lower_case of this PasswordRequirementsPatchRequest.
        :rtype: int
        """
        return self._min_lower_case

    @min_lower_case.setter
    def min_lower_case(self, min_lower_case):
        """Sets the min_lower_case of this PasswordRequirementsPatchRequest.


        :param min_lower_case: The min_lower_case of this PasswordRequirementsPatchRequest.
        :type min_lower_case: int
        """

        self._min_lower_case = min_lower_case

    @property
    def min_numerics(self):
        """Gets the min_numerics of this PasswordRequirementsPatchRequest.


        :return: The min_numerics of this PasswordRequirementsPatchRequest.
        :rtype: int
        """
        return self._min_numerics

    @min_numerics.setter
    def min_numerics(self, min_numerics):
        """Sets the min_numerics of this PasswordRequirementsPatchRequest.


        :param min_numerics: The min_numerics of this PasswordRequirementsPatchRequest.
        :type min_numerics: int
        """

        self._min_numerics = min_numerics

    @property
    def min_special(self):
        """Gets the min_special of this PasswordRequirementsPatchRequest.


        :return: The min_special of this PasswordRequirementsPatchRequest.
        :rtype: int
        """
        return self._min_special

    @min_special.setter
    def min_special(self, min_special):
        """Sets the min_special of this PasswordRequirementsPatchRequest.


        :param min_special: The min_special of this PasswordRequirementsPatchRequest.
        :type min_special: int
        """

        self._min_special = min_special

    @property
    def min_upper_case(self):
        """Gets the min_upper_case of this PasswordRequirementsPatchRequest.


        :return: The min_upper_case of this PasswordRequirementsPatchRequest.
        :rtype: int
        """
        return self._min_upper_case

    @min_upper_case.setter
    def min_upper_case(self, min_upper_case):
        """Sets the min_upper_case of this PasswordRequirementsPatchRequest.


        :param min_upper_case: The min_upper_case of this PasswordRequirementsPatchRequest.
        :type min_upper_case: int
        """

        self._min_upper_case = min_upper_case

    @property
    def use_zxcvbn(self):
        """Gets the use_zxcvbn of this PasswordRequirementsPatchRequest.


        :return: The use_zxcvbn of this PasswordRequirementsPatchRequest.
        :rtype: bool
        """
        return self._use_zxcvbn

    @use_zxcvbn.setter
    def use_zxcvbn(self, use_zxcvbn):
        """Sets the use_zxcvbn of this PasswordRequirementsPatchRequest.


        :param use_zxcvbn: The use_zxcvbn of this PasswordRequirementsPatchRequest.
        :type use_zxcvbn: bool
        """

        self._use_zxcvbn = use_zxcvbn
