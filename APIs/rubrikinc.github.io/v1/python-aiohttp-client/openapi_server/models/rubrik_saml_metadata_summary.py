# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RubrikSamlMetadataSummary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, metadata_url: str=None):
        """RubrikSamlMetadataSummary - a model defined in OpenAPI

        :param metadata_url: The metadata_url of this RubrikSamlMetadataSummary.
        """
        self.openapi_types = {
            'metadata_url': str
        }

        self.attribute_map = {
            'metadata_url': 'metadataUrl'
        }

        self._metadata_url = metadata_url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RubrikSamlMetadataSummary':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RubrikSamlMetadataSummary of this RubrikSamlMetadataSummary.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def metadata_url(self):
        """Gets the metadata_url of this RubrikSamlMetadataSummary.

        URL of the metadata file for downloading.

        :return: The metadata_url of this RubrikSamlMetadataSummary.
        :rtype: str
        """
        return self._metadata_url

    @metadata_url.setter
    def metadata_url(self, metadata_url):
        """Sets the metadata_url of this RubrikSamlMetadataSummary.

        URL of the metadata file for downloading.

        :param metadata_url: The metadata_url of this RubrikSamlMetadataSummary.
        :type metadata_url: str
        """
        if metadata_url is None:
            raise ValueError("Invalid value for `metadata_url`, must not be `None`")

        self._metadata_url = metadata_url
