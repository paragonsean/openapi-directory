# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.cloud_storage_cold_tier import CloudStorageColdTier
from openapi_server import util


class ArchivalTieringSpec(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cold_storage_class: CloudStorageColdTier=None, is_instant_tiering_enabled: bool=None, min_accessible_duration_in_seconds: int=None, should_tier_existing_snapshots: bool=None):
        """ArchivalTieringSpec - a model defined in OpenAPI

        :param cold_storage_class: The cold_storage_class of this ArchivalTieringSpec.
        :param is_instant_tiering_enabled: The is_instant_tiering_enabled of this ArchivalTieringSpec.
        :param min_accessible_duration_in_seconds: The min_accessible_duration_in_seconds of this ArchivalTieringSpec.
        :param should_tier_existing_snapshots: The should_tier_existing_snapshots of this ArchivalTieringSpec.
        """
        self.openapi_types = {
            'cold_storage_class': CloudStorageColdTier,
            'is_instant_tiering_enabled': bool,
            'min_accessible_duration_in_seconds': int,
            'should_tier_existing_snapshots': bool
        }

        self.attribute_map = {
            'cold_storage_class': 'coldStorageClass',
            'is_instant_tiering_enabled': 'isInstantTieringEnabled',
            'min_accessible_duration_in_seconds': 'minAccessibleDurationInSeconds',
            'should_tier_existing_snapshots': 'shouldTierExistingSnapshots'
        }

        self._cold_storage_class = cold_storage_class
        self._is_instant_tiering_enabled = is_instant_tiering_enabled
        self._min_accessible_duration_in_seconds = min_accessible_duration_in_seconds
        self._should_tier_existing_snapshots = should_tier_existing_snapshots

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ArchivalTieringSpec':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ArchivalTieringSpec of this ArchivalTieringSpec.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cold_storage_class(self):
        """Gets the cold_storage_class of this ArchivalTieringSpec.


        :return: The cold_storage_class of this ArchivalTieringSpec.
        :rtype: CloudStorageColdTier
        """
        return self._cold_storage_class

    @cold_storage_class.setter
    def cold_storage_class(self, cold_storage_class):
        """Sets the cold_storage_class of this ArchivalTieringSpec.


        :param cold_storage_class: The cold_storage_class of this ArchivalTieringSpec.
        :type cold_storage_class: CloudStorageColdTier
        """

        self._cold_storage_class = cold_storage_class

    @property
    def is_instant_tiering_enabled(self):
        """Gets the is_instant_tiering_enabled of this ArchivalTieringSpec.

        A Boolean value that determines whether to immediately tier uploaded snapshots to cold storage. When this value is 'true,' uploaded snapshots are immediately tiered to cold storage. When this value is 'false,' snapshots are marked as eligible for tiering to cold storage after their time on the archival location exceeds the configured minimum accessible duration. 

        :return: The is_instant_tiering_enabled of this ArchivalTieringSpec.
        :rtype: bool
        """
        return self._is_instant_tiering_enabled

    @is_instant_tiering_enabled.setter
    def is_instant_tiering_enabled(self, is_instant_tiering_enabled):
        """Sets the is_instant_tiering_enabled of this ArchivalTieringSpec.

        A Boolean value that determines whether to immediately tier uploaded snapshots to cold storage. When this value is 'true,' uploaded snapshots are immediately tiered to cold storage. When this value is 'false,' snapshots are marked as eligible for tiering to cold storage after their time on the archival location exceeds the configured minimum accessible duration. 

        :param is_instant_tiering_enabled: The is_instant_tiering_enabled of this ArchivalTieringSpec.
        :type is_instant_tiering_enabled: bool
        """
        if is_instant_tiering_enabled is None:
            raise ValueError("Invalid value for `is_instant_tiering_enabled`, must not be `None`")

        self._is_instant_tiering_enabled = is_instant_tiering_enabled

    @property
    def min_accessible_duration_in_seconds(self):
        """Gets the min_accessible_duration_in_seconds of this ArchivalTieringSpec.

        Specifies an interval in seconds. Uploaded snapshots are accessible for instant recovery for the duration of the specified interval. This value is ignored when Instant Tiering is enabled. 

        :return: The min_accessible_duration_in_seconds of this ArchivalTieringSpec.
        :rtype: int
        """
        return self._min_accessible_duration_in_seconds

    @min_accessible_duration_in_seconds.setter
    def min_accessible_duration_in_seconds(self, min_accessible_duration_in_seconds):
        """Sets the min_accessible_duration_in_seconds of this ArchivalTieringSpec.

        Specifies an interval in seconds. Uploaded snapshots are accessible for instant recovery for the duration of the specified interval. This value is ignored when Instant Tiering is enabled. 

        :param min_accessible_duration_in_seconds: The min_accessible_duration_in_seconds of this ArchivalTieringSpec.
        :type min_accessible_duration_in_seconds: int
        """

        self._min_accessible_duration_in_seconds = min_accessible_duration_in_seconds

    @property
    def should_tier_existing_snapshots(self):
        """Gets the should_tier_existing_snapshots of this ArchivalTieringSpec.

        Indicates if existing snapshots for all objects protected by the SLA should be tiered. If not specified, this defaults to false. Only the snapshots that exist in the archival location associated with the SLA will be tiered. 

        :return: The should_tier_existing_snapshots of this ArchivalTieringSpec.
        :rtype: bool
        """
        return self._should_tier_existing_snapshots

    @should_tier_existing_snapshots.setter
    def should_tier_existing_snapshots(self, should_tier_existing_snapshots):
        """Sets the should_tier_existing_snapshots of this ArchivalTieringSpec.

        Indicates if existing snapshots for all objects protected by the SLA should be tiered. If not specified, this defaults to false. Only the snapshots that exist in the archival location associated with the SLA will be tiered. 

        :param should_tier_existing_snapshots: The should_tier_existing_snapshots of this ArchivalTieringSpec.
        :type should_tier_existing_snapshots: bool
        """

        self._should_tier_existing_snapshots = should_tier_existing_snapshots
