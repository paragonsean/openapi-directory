# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.file_system_type import FileSystemType
from openapi_server import util


class VolumeMountInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, file_system_type: FileSystemType=None, host_mounted_path: str=None, id: str=None, original_mount_points: List[str]=None, size: int=None, smb_path: str=None):
        """VolumeMountInfo - a model defined in OpenAPI

        :param file_system_type: The file_system_type of this VolumeMountInfo.
        :param host_mounted_path: The host_mounted_path of this VolumeMountInfo.
        :param id: The id of this VolumeMountInfo.
        :param original_mount_points: The original_mount_points of this VolumeMountInfo.
        :param size: The size of this VolumeMountInfo.
        :param smb_path: The smb_path of this VolumeMountInfo.
        """
        self.openapi_types = {
            'file_system_type': FileSystemType,
            'host_mounted_path': str,
            'id': str,
            'original_mount_points': List[str],
            'size': int,
            'smb_path': str
        }

        self.attribute_map = {
            'file_system_type': 'fileSystemType',
            'host_mounted_path': 'hostMountedPath',
            'id': 'id',
            'original_mount_points': 'originalMountPoints',
            'size': 'size',
            'smb_path': 'smbPath'
        }

        self._file_system_type = file_system_type
        self._host_mounted_path = host_mounted_path
        self._id = id
        self._original_mount_points = original_mount_points
        self._size = size
        self._smb_path = smb_path

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VolumeMountInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VolumeMountInfo of this VolumeMountInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def file_system_type(self):
        """Gets the file_system_type of this VolumeMountInfo.


        :return: The file_system_type of this VolumeMountInfo.
        :rtype: FileSystemType
        """
        return self._file_system_type

    @file_system_type.setter
    def file_system_type(self, file_system_type):
        """Sets the file_system_type of this VolumeMountInfo.


        :param file_system_type: The file_system_type of this VolumeMountInfo.
        :type file_system_type: FileSystemType
        """
        if file_system_type is None:
            raise ValueError("Invalid value for `file_system_type`, must not be `None`")

        self._file_system_type = file_system_type

    @property
    def host_mounted_path(self):
        """Gets the host_mounted_path of this VolumeMountInfo.

        The mount path of volume on the new host.

        :return: The host_mounted_path of this VolumeMountInfo.
        :rtype: str
        """
        return self._host_mounted_path

    @host_mounted_path.setter
    def host_mounted_path(self, host_mounted_path):
        """Sets the host_mounted_path of this VolumeMountInfo.

        The mount path of volume on the new host.

        :param host_mounted_path: The host_mounted_path of this VolumeMountInfo.
        :type host_mounted_path: str
        """

        self._host_mounted_path = host_mounted_path

    @property
    def id(self):
        """Gets the id of this VolumeMountInfo.

        The unique ID of the mount.

        :return: The id of this VolumeMountInfo.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this VolumeMountInfo.

        The unique ID of the mount.

        :param id: The id of this VolumeMountInfo.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def original_mount_points(self):
        """Gets the original_mount_points of this VolumeMountInfo.

        The source host mount points of the specified volume.

        :return: The original_mount_points of this VolumeMountInfo.
        :rtype: List[str]
        """
        return self._original_mount_points

    @original_mount_points.setter
    def original_mount_points(self, original_mount_points):
        """Sets the original_mount_points of this VolumeMountInfo.

        The source host mount points of the specified volume.

        :param original_mount_points: The original_mount_points of this VolumeMountInfo.
        :type original_mount_points: List[str]
        """
        if original_mount_points is None:
            raise ValueError("Invalid value for `original_mount_points`, must not be `None`")

        self._original_mount_points = original_mount_points

    @property
    def size(self):
        """Gets the size of this VolumeMountInfo.

        The size of the volume in bytes.

        :return: The size of this VolumeMountInfo.
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this VolumeMountInfo.

        The size of the volume in bytes.

        :param size: The size of this VolumeMountInfo.
        :type size: int
        """
        if size is None:
            raise ValueError("Invalid value for `size`, must not be `None`")

        self._size = size

    @property
    def smb_path(self):
        """Gets the smb_path of this VolumeMountInfo.

        The SMB path to the VHD file that contains the snapshot volume. This path is available when the mount is ready.

        :return: The smb_path of this VolumeMountInfo.
        :rtype: str
        """
        return self._smb_path

    @smb_path.setter
    def smb_path(self, smb_path):
        """Sets the smb_path of this VolumeMountInfo.

        The SMB path to the VHD file that contains the snapshot volume. This path is available when the mount is ready.

        :param smb_path: The smb_path of this VolumeMountInfo.
        :type smb_path: str
        """

        self._smb_path = smb_path
