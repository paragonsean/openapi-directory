# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.link import Link
from openapi_server import util


class MssqlLogShippingLinks(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, primary_database: Link=None, secondary_database: Link=None, secondary_instance: Link=None, seed_request: Link=None):
        """MssqlLogShippingLinks - a model defined in OpenAPI

        :param primary_database: The primary_database of this MssqlLogShippingLinks.
        :param secondary_database: The secondary_database of this MssqlLogShippingLinks.
        :param secondary_instance: The secondary_instance of this MssqlLogShippingLinks.
        :param seed_request: The seed_request of this MssqlLogShippingLinks.
        """
        self.openapi_types = {
            'primary_database': Link,
            'secondary_database': Link,
            'secondary_instance': Link,
            'seed_request': Link
        }

        self.attribute_map = {
            'primary_database': 'primaryDatabase',
            'secondary_database': 'secondaryDatabase',
            'secondary_instance': 'secondaryInstance',
            'seed_request': 'seedRequest'
        }

        self._primary_database = primary_database
        self._secondary_database = secondary_database
        self._secondary_instance = secondary_instance
        self._seed_request = seed_request

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MssqlLogShippingLinks':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MssqlLogShippingLinks of this MssqlLogShippingLinks.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def primary_database(self):
        """Gets the primary_database of this MssqlLogShippingLinks.


        :return: The primary_database of this MssqlLogShippingLinks.
        :rtype: Link
        """
        return self._primary_database

    @primary_database.setter
    def primary_database(self, primary_database):
        """Sets the primary_database of this MssqlLogShippingLinks.


        :param primary_database: The primary_database of this MssqlLogShippingLinks.
        :type primary_database: Link
        """
        if primary_database is None:
            raise ValueError("Invalid value for `primary_database`, must not be `None`")

        self._primary_database = primary_database

    @property
    def secondary_database(self):
        """Gets the secondary_database of this MssqlLogShippingLinks.


        :return: The secondary_database of this MssqlLogShippingLinks.
        :rtype: Link
        """
        return self._secondary_database

    @secondary_database.setter
    def secondary_database(self, secondary_database):
        """Sets the secondary_database of this MssqlLogShippingLinks.


        :param secondary_database: The secondary_database of this MssqlLogShippingLinks.
        :type secondary_database: Link
        """

        self._secondary_database = secondary_database

    @property
    def secondary_instance(self):
        """Gets the secondary_instance of this MssqlLogShippingLinks.


        :return: The secondary_instance of this MssqlLogShippingLinks.
        :rtype: Link
        """
        return self._secondary_instance

    @secondary_instance.setter
    def secondary_instance(self, secondary_instance):
        """Sets the secondary_instance of this MssqlLogShippingLinks.


        :param secondary_instance: The secondary_instance of this MssqlLogShippingLinks.
        :type secondary_instance: Link
        """
        if secondary_instance is None:
            raise ValueError("Invalid value for `secondary_instance`, must not be `None`")

        self._secondary_instance = secondary_instance

    @property
    def seed_request(self):
        """Gets the seed_request of this MssqlLogShippingLinks.


        :return: The seed_request of this MssqlLogShippingLinks.
        :rtype: Link
        """
        return self._seed_request

    @seed_request.setter
    def seed_request(self, seed_request):
        """Sets the seed_request of this MssqlLogShippingLinks.


        :param seed_request: The seed_request of this MssqlLogShippingLinks.
        :type seed_request: Link
        """

        self._seed_request = seed_request
