# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BootstrappableNodeInfoV1(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, hostname: str=None, ipv6: str=None):
        """BootstrappableNodeInfoV1 - a model defined in OpenAPI

        :param hostname: The hostname of this BootstrappableNodeInfoV1.
        :param ipv6: The ipv6 of this BootstrappableNodeInfoV1.
        """
        self.openapi_types = {
            'hostname': str,
            'ipv6': str
        }

        self.attribute_map = {
            'hostname': 'hostname',
            'ipv6': 'ipv6'
        }

        self._hostname = hostname
        self._ipv6 = ipv6

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BootstrappableNodeInfoV1':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BootstrappableNodeInfoV1 of this BootstrappableNodeInfoV1.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def hostname(self):
        """Gets the hostname of this BootstrappableNodeInfoV1.

        Hostname of a Rubrik node.

        :return: The hostname of this BootstrappableNodeInfoV1.
        :rtype: str
        """
        return self._hostname

    @hostname.setter
    def hostname(self, hostname):
        """Sets the hostname of this BootstrappableNodeInfoV1.

        Hostname of a Rubrik node.

        :param hostname: The hostname of this BootstrappableNodeInfoV1.
        :type hostname: str
        """
        if hostname is None:
            raise ValueError("Invalid value for `hostname`, must not be `None`")

        self._hostname = hostname

    @property
    def ipv6(self):
        """Gets the ipv6 of this BootstrappableNodeInfoV1.

        IPv6 address of a Rubrik node.

        :return: The ipv6 of this BootstrappableNodeInfoV1.
        :rtype: str
        """
        return self._ipv6

    @ipv6.setter
    def ipv6(self, ipv6):
        """Sets the ipv6 of this BootstrappableNodeInfoV1.

        IPv6 address of a Rubrik node.

        :param ipv6: The ipv6 of this BootstrappableNodeInfoV1.
        :type ipv6: str
        """
        if ipv6 is None:
            raise ValueError("Invalid value for `ipv6`, must not be `None`")

        self._ipv6 = ipv6
