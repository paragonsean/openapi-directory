# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.sla_day_of_month import SlaDayOfMonth
from openapi_server import util


class MonthlyConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, frequency: int=None, retention: int=None, day_of_month: SlaDayOfMonth=None):
        """MonthlyConfig - a model defined in OpenAPI

        :param frequency: The frequency of this MonthlyConfig.
        :param retention: The retention of this MonthlyConfig.
        :param day_of_month: The day_of_month of this MonthlyConfig.
        """
        self.openapi_types = {
            'frequency': int,
            'retention': int,
            'day_of_month': SlaDayOfMonth
        }

        self.attribute_map = {
            'frequency': 'frequency',
            'retention': 'retention',
            'day_of_month': 'dayOfMonth'
        }

        self._frequency = frequency
        self._retention = retention
        self._day_of_month = day_of_month

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MonthlyConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MonthlyConfig of this MonthlyConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def frequency(self):
        """Gets the frequency of this MonthlyConfig.


        :return: The frequency of this MonthlyConfig.
        :rtype: int
        """
        return self._frequency

    @frequency.setter
    def frequency(self, frequency):
        """Sets the frequency of this MonthlyConfig.


        :param frequency: The frequency of this MonthlyConfig.
        :type frequency: int
        """
        if frequency is None:
            raise ValueError("Invalid value for `frequency`, must not be `None`")

        self._frequency = frequency

    @property
    def retention(self):
        """Gets the retention of this MonthlyConfig.


        :return: The retention of this MonthlyConfig.
        :rtype: int
        """
        return self._retention

    @retention.setter
    def retention(self, retention):
        """Sets the retention of this MonthlyConfig.


        :param retention: The retention of this MonthlyConfig.
        :type retention: int
        """
        if retention is None:
            raise ValueError("Invalid value for `retention`, must not be `None`")

        self._retention = retention

    @property
    def day_of_month(self):
        """Gets the day_of_month of this MonthlyConfig.


        :return: The day_of_month of this MonthlyConfig.
        :rtype: SlaDayOfMonth
        """
        return self._day_of_month

    @day_of_month.setter
    def day_of_month(self, day_of_month):
        """Sets the day_of_month of this MonthlyConfig.


        :param day_of_month: The day_of_month of this MonthlyConfig.
        :type day_of_month: SlaDayOfMonth
        """
        if day_of_month is None:
            raise ValueError("Invalid value for `day_of_month`, must not be `None`")

        self._day_of_month = day_of_month
