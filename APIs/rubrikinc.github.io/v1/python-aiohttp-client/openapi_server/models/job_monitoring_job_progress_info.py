# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class JobMonitoringJobProgressInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data_to_transfer: int=None, data_transferred: int=None, monitoring_id: str=None, throughput: int=None):
        """JobMonitoringJobProgressInfo - a model defined in OpenAPI

        :param data_to_transfer: The data_to_transfer of this JobMonitoringJobProgressInfo.
        :param data_transferred: The data_transferred of this JobMonitoringJobProgressInfo.
        :param monitoring_id: The monitoring_id of this JobMonitoringJobProgressInfo.
        :param throughput: The throughput of this JobMonitoringJobProgressInfo.
        """
        self.openapi_types = {
            'data_to_transfer': int,
            'data_transferred': int,
            'monitoring_id': str,
            'throughput': int
        }

        self.attribute_map = {
            'data_to_transfer': 'dataToTransfer',
            'data_transferred': 'dataTransferred',
            'monitoring_id': 'monitoring_id',
            'throughput': 'throughput'
        }

        self._data_to_transfer = data_to_transfer
        self._data_transferred = data_transferred
        self._monitoring_id = monitoring_id
        self._throughput = throughput

    @classmethod
    def from_dict(cls, dikt: dict) -> 'JobMonitoringJobProgressInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The JobMonitoringJobProgressInfo of this JobMonitoringJobProgressInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data_to_transfer(self):
        """Gets the data_to_transfer of this JobMonitoringJobProgressInfo.

        Amount of data to transfer in bytes.

        :return: The data_to_transfer of this JobMonitoringJobProgressInfo.
        :rtype: int
        """
        return self._data_to_transfer

    @data_to_transfer.setter
    def data_to_transfer(self, data_to_transfer):
        """Sets the data_to_transfer of this JobMonitoringJobProgressInfo.

        Amount of data to transfer in bytes.

        :param data_to_transfer: The data_to_transfer of this JobMonitoringJobProgressInfo.
        :type data_to_transfer: int
        """

        self._data_to_transfer = data_to_transfer

    @property
    def data_transferred(self):
        """Gets the data_transferred of this JobMonitoringJobProgressInfo.

        The amount of data transferred in bytes.

        :return: The data_transferred of this JobMonitoringJobProgressInfo.
        :rtype: int
        """
        return self._data_transferred

    @data_transferred.setter
    def data_transferred(self, data_transferred):
        """Sets the data_transferred of this JobMonitoringJobProgressInfo.

        The amount of data transferred in bytes.

        :param data_transferred: The data_transferred of this JobMonitoringJobProgressInfo.
        :type data_transferred: int
        """

        self._data_transferred = data_transferred

    @property
    def monitoring_id(self):
        """Gets the monitoring_id of this JobMonitoringJobProgressInfo.

        Monitoring ID of the row.

        :return: The monitoring_id of this JobMonitoringJobProgressInfo.
        :rtype: str
        """
        return self._monitoring_id

    @monitoring_id.setter
    def monitoring_id(self, monitoring_id):
        """Sets the monitoring_id of this JobMonitoringJobProgressInfo.

        Monitoring ID of the row.

        :param monitoring_id: The monitoring_id of this JobMonitoringJobProgressInfo.
        :type monitoring_id: str
        """
        if monitoring_id is None:
            raise ValueError("Invalid value for `monitoring_id`, must not be `None`")

        self._monitoring_id = monitoring_id

    @property
    def throughput(self):
        """Gets the throughput of this JobMonitoringJobProgressInfo.

        The throughput for active jobs (measured in bytes/s). When no active jobs exist, no value is provided.

        :return: The throughput of this JobMonitoringJobProgressInfo.
        :rtype: int
        """
        return self._throughput

    @throughput.setter
    def throughput(self, throughput):
        """Sets the throughput of this JobMonitoringJobProgressInfo.

        The throughput for active jobs (measured in bytes/s). When no active jobs exist, no value is provided.

        :param throughput: The throughput of this JobMonitoringJobProgressInfo.
        :type throughput: int
        """

        self._throughput = throughput
