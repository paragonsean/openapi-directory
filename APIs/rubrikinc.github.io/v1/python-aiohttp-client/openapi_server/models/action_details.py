# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ActionDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, action_string: str=None, is_enabled: bool=None):
        """ActionDetails - a model defined in OpenAPI

        :param action_string: The action_string of this ActionDetails.
        :param is_enabled: The is_enabled of this ActionDetails.
        """
        self.openapi_types = {
            'action_string': str,
            'is_enabled': bool
        }

        self.attribute_map = {
            'action_string': 'actionString',
            'is_enabled': 'isEnabled'
        }

        self._action_string = action_string
        self._is_enabled = is_enabled

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ActionDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ActionDetails of this ActionDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def action_string(self):
        """Gets the action_string of this ActionDetails.

        Action script to run.

        :return: The action_string of this ActionDetails.
        :rtype: str
        """
        return self._action_string

    @action_string.setter
    def action_string(self, action_string):
        """Sets the action_string of this ActionDetails.

        Action script to run.

        :param action_string: The action_string of this ActionDetails.
        :type action_string: str
        """
        if action_string is None:
            raise ValueError("Invalid value for `action_string`, must not be `None`")

        self._action_string = action_string

    @property
    def is_enabled(self):
        """Gets the is_enabled of this ActionDetails.

        Flag to determine whether action script needs to be run.

        :return: The is_enabled of this ActionDetails.
        :rtype: bool
        """
        return self._is_enabled

    @is_enabled.setter
    def is_enabled(self, is_enabled):
        """Sets the is_enabled of this ActionDetails.

        Flag to determine whether action script needs to be run.

        :param is_enabled: The is_enabled of this ActionDetails.
        :type is_enabled: bool
        """
        if is_enabled is None:
            raise ValueError("Invalid value for `is_enabled`, must not be `None`")

        self._is_enabled = is_enabled
