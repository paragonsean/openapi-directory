# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.vapp_network_summary import VappNetworkSummary
from openapi_server.models.vapp_vm_restore_spec import VappVmRestoreSpec
from openapi_server import util


class VappInstantRecoveryOptions(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, available_vapp_networks: List[VappNetworkSummary]=None, restorable_vms: List[VappVmRestoreSpec]=None):
        """VappInstantRecoveryOptions - a model defined in OpenAPI

        :param available_vapp_networks: The available_vapp_networks of this VappInstantRecoveryOptions.
        :param restorable_vms: The restorable_vms of this VappInstantRecoveryOptions.
        """
        self.openapi_types = {
            'available_vapp_networks': List[VappNetworkSummary],
            'restorable_vms': List[VappVmRestoreSpec]
        }

        self.attribute_map = {
            'available_vapp_networks': 'availableVappNetworks',
            'restorable_vms': 'restorableVms'
        }

        self._available_vapp_networks = available_vapp_networks
        self._restorable_vms = restorable_vms

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VappInstantRecoveryOptions':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VappInstantRecoveryOptions of this VappInstantRecoveryOptions.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def available_vapp_networks(self):
        """Gets the available_vapp_networks of this VappInstantRecoveryOptions.

        An array of network connections available through the specified vApp object.

        :return: The available_vapp_networks of this VappInstantRecoveryOptions.
        :rtype: List[VappNetworkSummary]
        """
        return self._available_vapp_networks

    @available_vapp_networks.setter
    def available_vapp_networks(self, available_vapp_networks):
        """Sets the available_vapp_networks of this VappInstantRecoveryOptions.

        An array of network connections available through the specified vApp object.

        :param available_vapp_networks: The available_vapp_networks of this VappInstantRecoveryOptions.
        :type available_vapp_networks: List[VappNetworkSummary]
        """
        if available_vapp_networks is None:
            raise ValueError("Invalid value for `available_vapp_networks`, must not be `None`")

        self._available_vapp_networks = available_vapp_networks

    @property
    def restorable_vms(self):
        """Gets the restorable_vms of this VappInstantRecoveryOptions.

        An array of virtual machines that can be restored and their associated default network connections.

        :return: The restorable_vms of this VappInstantRecoveryOptions.
        :rtype: List[VappVmRestoreSpec]
        """
        return self._restorable_vms

    @restorable_vms.setter
    def restorable_vms(self, restorable_vms):
        """Sets the restorable_vms of this VappInstantRecoveryOptions.

        An array of virtual machines that can be restored and their associated default network connections.

        :param restorable_vms: The restorable_vms of this VappInstantRecoveryOptions.
        :type restorable_vms: List[VappVmRestoreSpec]
        """
        if restorable_vms is None:
            raise ValueError("Invalid value for `restorable_vms`, must not be `None`")

        self._restorable_vms = restorable_vms
