# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CsrRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, city: str=None, country: str=None, email_address: str=None, hostnames: List[str]=None, organization: str=None, organization_unit: str=None, state: str=None, surname: str=None, uid: str=None):
        """CsrRequest - a model defined in OpenAPI

        :param city: The city of this CsrRequest.
        :param country: The country of this CsrRequest.
        :param email_address: The email_address of this CsrRequest.
        :param hostnames: The hostnames of this CsrRequest.
        :param organization: The organization of this CsrRequest.
        :param organization_unit: The organization_unit of this CsrRequest.
        :param state: The state of this CsrRequest.
        :param surname: The surname of this CsrRequest.
        :param uid: The uid of this CsrRequest.
        """
        self.openapi_types = {
            'city': str,
            'country': str,
            'email_address': str,
            'hostnames': List[str],
            'organization': str,
            'organization_unit': str,
            'state': str,
            'surname': str,
            'uid': str
        }

        self.attribute_map = {
            'city': 'city',
            'country': 'country',
            'email_address': 'emailAddress',
            'hostnames': 'hostnames',
            'organization': 'organization',
            'organization_unit': 'organizationUnit',
            'state': 'state',
            'surname': 'surname',
            'uid': 'uid'
        }

        self._city = city
        self._country = country
        self._email_address = email_address
        self._hostnames = hostnames
        self._organization = organization
        self._organization_unit = organization_unit
        self._state = state
        self._surname = surname
        self._uid = uid

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CsrRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CsrRequest of this CsrRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def city(self):
        """Gets the city of this CsrRequest.

        The city where the provided organization is located, for example, New York or London.

        :return: The city of this CsrRequest.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this CsrRequest.

        The city where the provided organization is located, for example, New York or London.

        :param city: The city of this CsrRequest.
        :type city: str
        """

        self._city = city

    @property
    def country(self):
        """Gets the country of this CsrRequest.

        The two-letter ISO code for the country where the provided organization is located, for example US, GB, or FR.

        :return: The country of this CsrRequest.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this CsrRequest.

        The two-letter ISO code for the country where the provided organization is located, for example US, GB, or FR.

        :param country: The country of this CsrRequest.
        :type country: str
        """

        self._country = country

    @property
    def email_address(self):
        """Gets the email_address of this CsrRequest.

        An email address associated with the organization, if applicable.

        :return: The email_address of this CsrRequest.
        :rtype: str
        """
        return self._email_address

    @email_address.setter
    def email_address(self, email_address):
        """Sets the email_address of this CsrRequest.

        An email address associated with the organization, if applicable.

        :param email_address: The email_address of this CsrRequest.
        :type email_address: str
        """

        self._email_address = email_address

    @property
    def hostnames(self):
        """Gets the hostnames of this CsrRequest.

        A comma-separated list of host names that are associated with the certificate. This list accepts wildcard hostnames, such as '*.rubrik.example.com', in addition to fully-qualified domain names.

        :return: The hostnames of this CsrRequest.
        :rtype: List[str]
        """
        return self._hostnames

    @hostnames.setter
    def hostnames(self, hostnames):
        """Sets the hostnames of this CsrRequest.

        A comma-separated list of host names that are associated with the certificate. This list accepts wildcard hostnames, such as '*.rubrik.example.com', in addition to fully-qualified domain names.

        :param hostnames: The hostnames of this CsrRequest.
        :type hostnames: List[str]
        """
        if hostnames is None:
            raise ValueError("Invalid value for `hostnames`, must not be `None`")

        self._hostnames = hostnames

    @property
    def organization(self):
        """Gets the organization of this CsrRequest.

        The name of the organization associated with the certificate, for example 'Rubrik, Inc.'.

        :return: The organization of this CsrRequest.
        :rtype: str
        """
        return self._organization

    @organization.setter
    def organization(self, organization):
        """Sets the organization of this CsrRequest.

        The name of the organization associated with the certificate, for example 'Rubrik, Inc.'.

        :param organization: The organization of this CsrRequest.
        :type organization: str
        """

        self._organization = organization

    @property
    def organization_unit(self):
        """Gets the organization_unit of this CsrRequest.

        The name of the organizational unit associated with the certificate, for example, Engineering.

        :return: The organization_unit of this CsrRequest.
        :rtype: str
        """
        return self._organization_unit

    @organization_unit.setter
    def organization_unit(self, organization_unit):
        """Sets the organization_unit of this CsrRequest.

        The name of the organizational unit associated with the certificate, for example, Engineering.

        :param organization_unit: The organization_unit of this CsrRequest.
        :type organization_unit: str
        """

        self._organization_unit = organization_unit

    @property
    def state(self):
        """Gets the state of this CsrRequest.

        If applicable, the name of the state where the provided organization is located, for example, California.

        :return: The state of this CsrRequest.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this CsrRequest.

        If applicable, the name of the state where the provided organization is located, for example, California.

        :param state: The state of this CsrRequest.
        :type state: str
        """

        self._state = state

    @property
    def surname(self):
        """Gets the surname of this CsrRequest.

        The surname associated with the certificate, if applicable.

        :return: The surname of this CsrRequest.
        :rtype: str
        """
        return self._surname

    @surname.setter
    def surname(self, surname):
        """Sets the surname of this CsrRequest.

        The surname associated with the certificate, if applicable.

        :param surname: The surname of this CsrRequest.
        :type surname: str
        """

        self._surname = surname

    @property
    def uid(self):
        """Gets the uid of this CsrRequest.

        The user ID associated with the certificate, if applicable.

        :return: The uid of this CsrRequest.
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this CsrRequest.

        The user ID associated with the certificate, if applicable.

        :param uid: The uid of this CsrRequest.
        :type uid: str
        """

        self._uid = uid
