# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.remediation_request_run_config import RemediationRequestRunConfig
from openapi_server.models.remediation_request_spec import RemediationRequestSpec
from openapi_server import util


class RemediationRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, config: RemediationRequestRunConfig=None, spec: List[RemediationRequestSpec]=None):
        """RemediationRequest - a model defined in OpenAPI

        :param config: The config of this RemediationRequest.
        :param spec: The spec of this RemediationRequest.
        """
        self.openapi_types = {
            'config': RemediationRequestRunConfig,
            'spec': List[RemediationRequestSpec]
        }

        self.attribute_map = {
            'config': 'config',
            'spec': 'spec'
        }

        self._config = config
        self._spec = spec

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RemediationRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RemediationRequest of this RemediationRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def config(self):
        """Gets the config of this RemediationRequest.


        :return: The config of this RemediationRequest.
        :rtype: RemediationRequestRunConfig
        """
        return self._config

    @config.setter
    def config(self, config):
        """Sets the config of this RemediationRequest.


        :param config: The config of this RemediationRequest.
        :type config: RemediationRequestRunConfig
        """
        if config is None:
            raise ValueError("Invalid value for `config`, must not be `None`")

        self._config = config

    @property
    def spec(self):
        """Gets the spec of this RemediationRequest.

        List of identifiers to uniquely identify failed tasks. 

        :return: The spec of this RemediationRequest.
        :rtype: List[RemediationRequestSpec]
        """
        return self._spec

    @spec.setter
    def spec(self, spec):
        """Sets the spec of this RemediationRequest.

        List of identifiers to uniquely identify failed tasks. 

        :param spec: The spec of this RemediationRequest.
        :type spec: List[RemediationRequestSpec]
        """
        if spec is None:
            raise ValueError("Invalid value for `spec`, must not be `None`")

        self._spec = spec
