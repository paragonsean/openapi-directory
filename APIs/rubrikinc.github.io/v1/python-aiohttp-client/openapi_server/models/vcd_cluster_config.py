# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class VcdClusterConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ca_certs: str=None, hostname: str=None, username: str=None, password: str=None):
        """VcdClusterConfig - a model defined in OpenAPI

        :param ca_certs: The ca_certs of this VcdClusterConfig.
        :param hostname: The hostname of this VcdClusterConfig.
        :param username: The username of this VcdClusterConfig.
        :param password: The password of this VcdClusterConfig.
        """
        self.openapi_types = {
            'ca_certs': str,
            'hostname': str,
            'username': str,
            'password': str
        }

        self.attribute_map = {
            'ca_certs': 'caCerts',
            'hostname': 'hostname',
            'username': 'username',
            'password': 'password'
        }

        self._ca_certs = ca_certs
        self._hostname = hostname
        self._username = username
        self._password = password

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VcdClusterConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VcdClusterConfig of this VcdClusterConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ca_certs(self):
        """Gets the ca_certs of this VcdClusterConfig.

        Concatenated X.509 certificates in Base64 encoded DER format. Each certificate must start with -----BEGIN CERTIFICATE----- and end with -----END CERTIFICATE-----.

        :return: The ca_certs of this VcdClusterConfig.
        :rtype: str
        """
        return self._ca_certs

    @ca_certs.setter
    def ca_certs(self, ca_certs):
        """Sets the ca_certs of this VcdClusterConfig.

        Concatenated X.509 certificates in Base64 encoded DER format. Each certificate must start with -----BEGIN CERTIFICATE----- and end with -----END CERTIFICATE-----.

        :param ca_certs: The ca_certs of this VcdClusterConfig.
        :type ca_certs: str
        """

        self._ca_certs = ca_certs

    @property
    def hostname(self):
        """Gets the hostname of this VcdClusterConfig.


        :return: The hostname of this VcdClusterConfig.
        :rtype: str
        """
        return self._hostname

    @hostname.setter
    def hostname(self, hostname):
        """Sets the hostname of this VcdClusterConfig.


        :param hostname: The hostname of this VcdClusterConfig.
        :type hostname: str
        """
        if hostname is None:
            raise ValueError("Invalid value for `hostname`, must not be `None`")

        self._hostname = hostname

    @property
    def username(self):
        """Gets the username of this VcdClusterConfig.


        :return: The username of this VcdClusterConfig.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this VcdClusterConfig.


        :param username: The username of this VcdClusterConfig.
        :type username: str
        """
        if username is None:
            raise ValueError("Invalid value for `username`, must not be `None`")

        self._username = username

    @property
    def password(self):
        """Gets the password of this VcdClusterConfig.


        :return: The password of this VcdClusterConfig.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this VcdClusterConfig.


        :param password: The password of this VcdClusterConfig.
        :type password: str
        """
        if password is None:
            raise ValueError("Invalid value for `password`, must not be `None`")

        self._password = password
