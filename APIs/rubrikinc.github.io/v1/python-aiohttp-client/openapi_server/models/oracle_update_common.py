# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class OracleUpdateCommon(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, host_log_retention_hours: int=None, host_mount: str=None, log_backup_frequency_in_minutes: int=None, log_retention_hours: int=None, num_channels: int=None):
        """OracleUpdateCommon - a model defined in OpenAPI

        :param host_log_retention_hours: The host_log_retention_hours of this OracleUpdateCommon.
        :param host_mount: The host_mount of this OracleUpdateCommon.
        :param log_backup_frequency_in_minutes: The log_backup_frequency_in_minutes of this OracleUpdateCommon.
        :param log_retention_hours: The log_retention_hours of this OracleUpdateCommon.
        :param num_channels: The num_channels of this OracleUpdateCommon.
        """
        self.openapi_types = {
            'host_log_retention_hours': int,
            'host_mount': str,
            'log_backup_frequency_in_minutes': int,
            'log_retention_hours': int,
            'num_channels': int
        }

        self.attribute_map = {
            'host_log_retention_hours': 'hostLogRetentionHours',
            'host_mount': 'hostMount',
            'log_backup_frequency_in_minutes': 'logBackupFrequencyInMinutes',
            'log_retention_hours': 'logRetentionHours',
            'num_channels': 'numChannels'
        }

        self._host_log_retention_hours = host_log_retention_hours
        self._host_mount = host_mount
        self._log_backup_frequency_in_minutes = log_backup_frequency_in_minutes
        self._log_retention_hours = log_retention_hours
        self._num_channels = num_channels

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OracleUpdateCommon':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OracleUpdateCommon of this OracleUpdateCommon.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def host_log_retention_hours(self):
        """Gets the host_log_retention_hours of this OracleUpdateCommon.

        Specifies an interval in hours. For Oracle archived redo log files whose nextTime is before (now - interval), the next log snapshot job will delete them from the host. Set to 0 for inheriting the value from its parent; -1 for immediate deletion; and -2 to skip log deletion.

        :return: The host_log_retention_hours of this OracleUpdateCommon.
        :rtype: int
        """
        return self._host_log_retention_hours

    @host_log_retention_hours.setter
    def host_log_retention_hours(self, host_log_retention_hours):
        """Sets the host_log_retention_hours of this OracleUpdateCommon.

        Specifies an interval in hours. For Oracle archived redo log files whose nextTime is before (now - interval), the next log snapshot job will delete them from the host. Set to 0 for inheriting the value from its parent; -1 for immediate deletion; and -2 to skip log deletion.

        :param host_log_retention_hours: The host_log_retention_hours of this OracleUpdateCommon.
        :type host_log_retention_hours: int
        """

        self._host_log_retention_hours = host_log_retention_hours

    @property
    def host_mount(self):
        """Gets the host_mount of this OracleUpdateCommon.

        Path where the NFS share is mounted on the host.

        :return: The host_mount of this OracleUpdateCommon.
        :rtype: str
        """
        return self._host_mount

    @host_mount.setter
    def host_mount(self, host_mount):
        """Sets the host_mount of this OracleUpdateCommon.

        Path where the NFS share is mounted on the host.

        :param host_mount: The host_mount of this OracleUpdateCommon.
        :type host_mount: str
        """

        self._host_mount = host_mount

    @property
    def log_backup_frequency_in_minutes(self):
        """Gets the log_backup_frequency_in_minutes of this OracleUpdateCommon.

        Specifies an interval in minutes. This interval is the period between successive log backups.

        :return: The log_backup_frequency_in_minutes of this OracleUpdateCommon.
        :rtype: int
        """
        return self._log_backup_frequency_in_minutes

    @log_backup_frequency_in_minutes.setter
    def log_backup_frequency_in_minutes(self, log_backup_frequency_in_minutes):
        """Sets the log_backup_frequency_in_minutes of this OracleUpdateCommon.

        Specifies an interval in minutes. This interval is the period between successive log backups.

        :param log_backup_frequency_in_minutes: The log_backup_frequency_in_minutes of this OracleUpdateCommon.
        :type log_backup_frequency_in_minutes: int
        """

        self._log_backup_frequency_in_minutes = log_backup_frequency_in_minutes

    @property
    def log_retention_hours(self):
        """Gets the log_retention_hours of this OracleUpdateCommon.

        Specifies an interval in hours. Log backups are retained for the duration of the interval.

        :return: The log_retention_hours of this OracleUpdateCommon.
        :rtype: int
        """
        return self._log_retention_hours

    @log_retention_hours.setter
    def log_retention_hours(self, log_retention_hours):
        """Sets the log_retention_hours of this OracleUpdateCommon.

        Specifies an interval in hours. Log backups are retained for the duration of the interval.

        :param log_retention_hours: The log_retention_hours of this OracleUpdateCommon.
        :type log_retention_hours: int
        """

        self._log_retention_hours = log_retention_hours

    @property
    def num_channels(self):
        """Gets the num_channels of this OracleUpdateCommon.

        Number of channels used to backup the Oracle database.

        :return: The num_channels of this OracleUpdateCommon.
        :rtype: int
        """
        return self._num_channels

    @num_channels.setter
    def num_channels(self, num_channels):
        """Sets the num_channels of this OracleUpdateCommon.

        Number of channels used to backup the Oracle database.

        :param num_channels: The num_channels of this OracleUpdateCommon.
        :type num_channels: int
        """

        self._num_channels = num_channels
