# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class HdfsTemplateDetail(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, exceptions: List[str]=None, excludes: List[str]=None, includes: List[str]=None, name: str=None, host_count: int=None, id: str=None, primary_cluster_id: str=None):
        """HdfsTemplateDetail - a model defined in OpenAPI

        :param exceptions: The exceptions of this HdfsTemplateDetail.
        :param excludes: The excludes of this HdfsTemplateDetail.
        :param includes: The includes of this HdfsTemplateDetail.
        :param name: The name of this HdfsTemplateDetail.
        :param host_count: The host_count of this HdfsTemplateDetail.
        :param id: The id of this HdfsTemplateDetail.
        :param primary_cluster_id: The primary_cluster_id of this HdfsTemplateDetail.
        """
        self.openapi_types = {
            'exceptions': List[str],
            'excludes': List[str],
            'includes': List[str],
            'name': str,
            'host_count': int,
            'id': str,
            'primary_cluster_id': str
        }

        self.attribute_map = {
            'exceptions': 'exceptions',
            'excludes': 'excludes',
            'includes': 'includes',
            'name': 'name',
            'host_count': 'hostCount',
            'id': 'id',
            'primary_cluster_id': 'primaryClusterId'
        }

        self._exceptions = exceptions
        self._excludes = excludes
        self._includes = includes
        self._name = name
        self._host_count = host_count
        self._id = id
        self._primary_cluster_id = primary_cluster_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'HdfsTemplateDetail':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The HdfsTemplateDetail of this HdfsTemplateDetail.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def exceptions(self):
        """Gets the exceptions of this HdfsTemplateDetail.


        :return: The exceptions of this HdfsTemplateDetail.
        :rtype: List[str]
        """
        return self._exceptions

    @exceptions.setter
    def exceptions(self, exceptions):
        """Sets the exceptions of this HdfsTemplateDetail.


        :param exceptions: The exceptions of this HdfsTemplateDetail.
        :type exceptions: List[str]
        """

        self._exceptions = exceptions

    @property
    def excludes(self):
        """Gets the excludes of this HdfsTemplateDetail.


        :return: The excludes of this HdfsTemplateDetail.
        :rtype: List[str]
        """
        return self._excludes

    @excludes.setter
    def excludes(self, excludes):
        """Sets the excludes of this HdfsTemplateDetail.


        :param excludes: The excludes of this HdfsTemplateDetail.
        :type excludes: List[str]
        """

        self._excludes = excludes

    @property
    def includes(self):
        """Gets the includes of this HdfsTemplateDetail.


        :return: The includes of this HdfsTemplateDetail.
        :rtype: List[str]
        """
        return self._includes

    @includes.setter
    def includes(self, includes):
        """Sets the includes of this HdfsTemplateDetail.


        :param includes: The includes of this HdfsTemplateDetail.
        :type includes: List[str]
        """
        if includes is None:
            raise ValueError("Invalid value for `includes`, must not be `None`")

        self._includes = includes

    @property
    def name(self):
        """Gets the name of this HdfsTemplateDetail.


        :return: The name of this HdfsTemplateDetail.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this HdfsTemplateDetail.


        :param name: The name of this HdfsTemplateDetail.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def host_count(self):
        """Gets the host_count of this HdfsTemplateDetail.

        Number of hosts where this template has been applied.

        :return: The host_count of this HdfsTemplateDetail.
        :rtype: int
        """
        return self._host_count

    @host_count.setter
    def host_count(self, host_count):
        """Sets the host_count of this HdfsTemplateDetail.

        Number of hosts where this template has been applied.

        :param host_count: The host_count of this HdfsTemplateDetail.
        :type host_count: int
        """

        self._host_count = host_count

    @property
    def id(self):
        """Gets the id of this HdfsTemplateDetail.


        :return: The id of this HdfsTemplateDetail.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this HdfsTemplateDetail.


        :param id: The id of this HdfsTemplateDetail.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def primary_cluster_id(self):
        """Gets the primary_cluster_id of this HdfsTemplateDetail.


        :return: The primary_cluster_id of this HdfsTemplateDetail.
        :rtype: str
        """
        return self._primary_cluster_id

    @primary_cluster_id.setter
    def primary_cluster_id(self, primary_cluster_id):
        """Sets the primary_cluster_id of this HdfsTemplateDetail.


        :param primary_cluster_id: The primary_cluster_id of this HdfsTemplateDetail.
        :type primary_cluster_id: str
        """
        if primary_cluster_id is None:
            raise ValueError("Invalid value for `primary_cluster_id`, must not be `None`")

        self._primary_cluster_id = primary_cluster_id
