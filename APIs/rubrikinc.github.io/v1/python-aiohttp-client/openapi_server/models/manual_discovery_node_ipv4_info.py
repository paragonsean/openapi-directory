# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.bootstrappable_node_ipv4_info import BootstrappableNodeIpv4Info
from openapi_server import util


class ManualDiscoveryNodeIpv4Info(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, node_info: List[BootstrappableNodeIpv4Info]=None):
        """ManualDiscoveryNodeIpv4Info - a model defined in OpenAPI

        :param node_info: The node_info of this ManualDiscoveryNodeIpv4Info.
        """
        self.openapi_types = {
            'node_info': List[BootstrappableNodeIpv4Info]
        }

        self.attribute_map = {
            'node_info': 'nodeInfo'
        }

        self._node_info = node_info

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ManualDiscoveryNodeIpv4Info':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ManualDiscoveryNodeIpv4Info of this ManualDiscoveryNodeIpv4Info.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def node_info(self):
        """Gets the node_info of this ManualDiscoveryNodeIpv4Info.


        :return: The node_info of this ManualDiscoveryNodeIpv4Info.
        :rtype: List[BootstrappableNodeIpv4Info]
        """
        return self._node_info

    @node_info.setter
    def node_info(self, node_info):
        """Sets the node_info of this ManualDiscoveryNodeIpv4Info.


        :param node_info: The node_info of this ManualDiscoveryNodeIpv4Info.
        :type node_info: List[BootstrappableNodeIpv4Info]
        """
        if node_info is None:
            raise ValueError("Invalid value for `node_info`, must not be `None`")

        self._node_info = node_info
