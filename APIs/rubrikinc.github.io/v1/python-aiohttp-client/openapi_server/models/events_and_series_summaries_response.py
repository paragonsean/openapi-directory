# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.event_series_summary_v1 import EventSeriesSummaryV1
from openapi_server.models.event_summary_v1 import EventSummaryV1
from openapi_server import util


class EventsAndSeriesSummariesResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, events: List[EventSummaryV1]=None, series_summaries: List[EventSeriesSummaryV1]=None):
        """EventsAndSeriesSummariesResponse - a model defined in OpenAPI

        :param events: The events of this EventsAndSeriesSummariesResponse.
        :param series_summaries: The series_summaries of this EventsAndSeriesSummariesResponse.
        """
        self.openapi_types = {
            'events': List[EventSummaryV1],
            'series_summaries': List[EventSeriesSummaryV1]
        }

        self.attribute_map = {
            'events': 'events',
            'series_summaries': 'seriesSummaries'
        }

        self._events = events
        self._series_summaries = series_summaries

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EventsAndSeriesSummariesResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EventsAndSeriesSummariesResponse of this EventsAndSeriesSummariesResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def events(self):
        """Gets the events of this EventsAndSeriesSummariesResponse.

        List of the events.

        :return: The events of this EventsAndSeriesSummariesResponse.
        :rtype: List[EventSummaryV1]
        """
        return self._events

    @events.setter
    def events(self, events):
        """Sets the events of this EventsAndSeriesSummariesResponse.

        List of the events.

        :param events: The events of this EventsAndSeriesSummariesResponse.
        :type events: List[EventSummaryV1]
        """
        if events is None:
            raise ValueError("Invalid value for `events`, must not be `None`")

        self._events = events

    @property
    def series_summaries(self):
        """Gets the series_summaries of this EventsAndSeriesSummariesResponse.

        The event series summaries of all events.

        :return: The series_summaries of this EventsAndSeriesSummariesResponse.
        :rtype: List[EventSeriesSummaryV1]
        """
        return self._series_summaries

    @series_summaries.setter
    def series_summaries(self, series_summaries):
        """Sets the series_summaries of this EventsAndSeriesSummariesResponse.

        The event series summaries of all events.

        :param series_summaries: The series_summaries of this EventsAndSeriesSummariesResponse.
        :type series_summaries: List[EventSeriesSummaryV1]
        """

        self._series_summaries = series_summaries
