# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MssqlRestoreEstimateResult(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bytes_from_cloud: int=None):
        """MssqlRestoreEstimateResult - a model defined in OpenAPI

        :param bytes_from_cloud: The bytes_from_cloud of this MssqlRestoreEstimateResult.
        """
        self.openapi_types = {
            'bytes_from_cloud': int
        }

        self.attribute_map = {
            'bytes_from_cloud': 'bytesFromCloud'
        }

        self._bytes_from_cloud = bytes_from_cloud

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MssqlRestoreEstimateResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MssqlRestoreEstimateResult of this MssqlRestoreEstimateResult.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bytes_from_cloud(self):
        """Gets the bytes_from_cloud of this MssqlRestoreEstimateResult.

        Estimate of the number of bytes to be downloaded from the cloud.

        :return: The bytes_from_cloud of this MssqlRestoreEstimateResult.
        :rtype: int
        """
        return self._bytes_from_cloud

    @bytes_from_cloud.setter
    def bytes_from_cloud(self, bytes_from_cloud):
        """Sets the bytes_from_cloud of this MssqlRestoreEstimateResult.

        Estimate of the number of bytes to be downloaded from the cloud.

        :param bytes_from_cloud: The bytes_from_cloud of this MssqlRestoreEstimateResult.
        :type bytes_from_cloud: int
        """
        if bytes_from_cloud is None:
            raise ValueError("Invalid value for `bytes_from_cloud`, must not be `None`")

        self._bytes_from_cloud = bytes_from_cloud
