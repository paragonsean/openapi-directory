# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.mssql_log_shipping_status_info import MssqlLogShippingStatusInfo
from openapi_server import util


class MssqlLogShippingSummary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, lag_time: int=None, last_applied_point: datetime=None, location: str=None, primary_database_id: str=None, primary_database_log_backup_frequency: int=None, primary_database_name: str=None, secondary_database_id: str=None, secondary_database_name: str=None, state: str=None, status: MssqlLogShippingStatusInfo=None):
        """MssqlLogShippingSummary - a model defined in OpenAPI

        :param id: The id of this MssqlLogShippingSummary.
        :param lag_time: The lag_time of this MssqlLogShippingSummary.
        :param last_applied_point: The last_applied_point of this MssqlLogShippingSummary.
        :param location: The location of this MssqlLogShippingSummary.
        :param primary_database_id: The primary_database_id of this MssqlLogShippingSummary.
        :param primary_database_log_backup_frequency: The primary_database_log_backup_frequency of this MssqlLogShippingSummary.
        :param primary_database_name: The primary_database_name of this MssqlLogShippingSummary.
        :param secondary_database_id: The secondary_database_id of this MssqlLogShippingSummary.
        :param secondary_database_name: The secondary_database_name of this MssqlLogShippingSummary.
        :param state: The state of this MssqlLogShippingSummary.
        :param status: The status of this MssqlLogShippingSummary.
        """
        self.openapi_types = {
            'id': str,
            'lag_time': int,
            'last_applied_point': datetime,
            'location': str,
            'primary_database_id': str,
            'primary_database_log_backup_frequency': int,
            'primary_database_name': str,
            'secondary_database_id': str,
            'secondary_database_name': str,
            'state': str,
            'status': MssqlLogShippingStatusInfo
        }

        self.attribute_map = {
            'id': 'id',
            'lag_time': 'lagTime',
            'last_applied_point': 'lastAppliedPoint',
            'location': 'location',
            'primary_database_id': 'primaryDatabaseId',
            'primary_database_log_backup_frequency': 'primaryDatabaseLogBackupFrequency',
            'primary_database_name': 'primaryDatabaseName',
            'secondary_database_id': 'secondaryDatabaseId',
            'secondary_database_name': 'secondaryDatabaseName',
            'state': 'state',
            'status': 'status'
        }

        self._id = id
        self._lag_time = lag_time
        self._last_applied_point = last_applied_point
        self._location = location
        self._primary_database_id = primary_database_id
        self._primary_database_log_backup_frequency = primary_database_log_backup_frequency
        self._primary_database_name = primary_database_name
        self._secondary_database_id = secondary_database_id
        self._secondary_database_name = secondary_database_name
        self._state = state
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MssqlLogShippingSummary':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MssqlLogShippingSummary of this MssqlLogShippingSummary.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this MssqlLogShippingSummary.

        ID assigned to the log shipping configuration object.

        :return: The id of this MssqlLogShippingSummary.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this MssqlLogShippingSummary.

        ID assigned to the log shipping configuration object.

        :param id: The id of this MssqlLogShippingSummary.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def lag_time(self):
        """Gets the lag_time of this MssqlLogShippingSummary.

        Number of milliseconds elapsed since the latest backup was applied to the secondary database and the time the backup was taken on the primary database.

        :return: The lag_time of this MssqlLogShippingSummary.
        :rtype: int
        """
        return self._lag_time

    @lag_time.setter
    def lag_time(self, lag_time):
        """Sets the lag_time of this MssqlLogShippingSummary.

        Number of milliseconds elapsed since the latest backup was applied to the secondary database and the time the backup was taken on the primary database.

        :param lag_time: The lag_time of this MssqlLogShippingSummary.
        :type lag_time: int
        """

        self._lag_time = lag_time

    @property
    def last_applied_point(self):
        """Gets the last_applied_point of this MssqlLogShippingSummary.

        Timestamp of the last transaction applied using the specified log shipping configuration object.

        :return: The last_applied_point of this MssqlLogShippingSummary.
        :rtype: datetime
        """
        return self._last_applied_point

    @last_applied_point.setter
    def last_applied_point(self, last_applied_point):
        """Sets the last_applied_point of this MssqlLogShippingSummary.

        Timestamp of the last transaction applied using the specified log shipping configuration object.

        :param last_applied_point: The last_applied_point of this MssqlLogShippingSummary.
        :type last_applied_point: datetime
        """

        self._last_applied_point = last_applied_point

    @property
    def location(self):
        """Gets the location of this MssqlLogShippingSummary.

        Location of a specified secondary database. Location uses this format: \"host/instance\".

        :return: The location of this MssqlLogShippingSummary.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this MssqlLogShippingSummary.

        Location of a specified secondary database. Location uses this format: \"host/instance\".

        :param location: The location of this MssqlLogShippingSummary.
        :type location: str
        """
        if location is None:
            raise ValueError("Invalid value for `location`, must not be `None`")

        self._location = location

    @property
    def primary_database_id(self):
        """Gets the primary_database_id of this MssqlLogShippingSummary.

        ID of the primary database.

        :return: The primary_database_id of this MssqlLogShippingSummary.
        :rtype: str
        """
        return self._primary_database_id

    @primary_database_id.setter
    def primary_database_id(self, primary_database_id):
        """Sets the primary_database_id of this MssqlLogShippingSummary.

        ID of the primary database.

        :param primary_database_id: The primary_database_id of this MssqlLogShippingSummary.
        :type primary_database_id: str
        """
        if primary_database_id is None:
            raise ValueError("Invalid value for `primary_database_id`, must not be `None`")

        self._primary_database_id = primary_database_id

    @property
    def primary_database_log_backup_frequency(self):
        """Gets the primary_database_log_backup_frequency of this MssqlLogShippingSummary.

        Log backup frequency, in seconds, of the primary database.

        :return: The primary_database_log_backup_frequency of this MssqlLogShippingSummary.
        :rtype: int
        """
        return self._primary_database_log_backup_frequency

    @primary_database_log_backup_frequency.setter
    def primary_database_log_backup_frequency(self, primary_database_log_backup_frequency):
        """Sets the primary_database_log_backup_frequency of this MssqlLogShippingSummary.

        Log backup frequency, in seconds, of the primary database.

        :param primary_database_log_backup_frequency: The primary_database_log_backup_frequency of this MssqlLogShippingSummary.
        :type primary_database_log_backup_frequency: int
        """
        if primary_database_log_backup_frequency is None:
            raise ValueError("Invalid value for `primary_database_log_backup_frequency`, must not be `None`")

        self._primary_database_log_backup_frequency = primary_database_log_backup_frequency

    @property
    def primary_database_name(self):
        """Gets the primary_database_name of this MssqlLogShippingSummary.

        Name of the primary database.

        :return: The primary_database_name of this MssqlLogShippingSummary.
        :rtype: str
        """
        return self._primary_database_name

    @primary_database_name.setter
    def primary_database_name(self, primary_database_name):
        """Sets the primary_database_name of this MssqlLogShippingSummary.

        Name of the primary database.

        :param primary_database_name: The primary_database_name of this MssqlLogShippingSummary.
        :type primary_database_name: str
        """
        if primary_database_name is None:
            raise ValueError("Invalid value for `primary_database_name`, must not be `None`")

        self._primary_database_name = primary_database_name

    @property
    def secondary_database_id(self):
        """Gets the secondary_database_id of this MssqlLogShippingSummary.

        ID of the secondary database.

        :return: The secondary_database_id of this MssqlLogShippingSummary.
        :rtype: str
        """
        return self._secondary_database_id

    @secondary_database_id.setter
    def secondary_database_id(self, secondary_database_id):
        """Sets the secondary_database_id of this MssqlLogShippingSummary.

        ID of the secondary database.

        :param secondary_database_id: The secondary_database_id of this MssqlLogShippingSummary.
        :type secondary_database_id: str
        """

        self._secondary_database_id = secondary_database_id

    @property
    def secondary_database_name(self):
        """Gets the secondary_database_name of this MssqlLogShippingSummary.

        Name of the secondary database.

        :return: The secondary_database_name of this MssqlLogShippingSummary.
        :rtype: str
        """
        return self._secondary_database_name

    @secondary_database_name.setter
    def secondary_database_name(self, secondary_database_name):
        """Sets the secondary_database_name of this MssqlLogShippingSummary.

        Name of the secondary database.

        :param secondary_database_name: The secondary_database_name of this MssqlLogShippingSummary.
        :type secondary_database_name: str
        """
        if secondary_database_name is None:
            raise ValueError("Invalid value for `secondary_database_name`, must not be `None`")

        self._secondary_database_name = secondary_database_name

    @property
    def state(self):
        """Gets the state of this MssqlLogShippingSummary.

        The current state of the secondary database.

        :return: The state of this MssqlLogShippingSummary.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this MssqlLogShippingSummary.

        The current state of the secondary database.

        :param state: The state of this MssqlLogShippingSummary.
        :type state: str
        """

        self._state = state

    @property
    def status(self):
        """Gets the status of this MssqlLogShippingSummary.


        :return: The status of this MssqlLogShippingSummary.
        :rtype: MssqlLogShippingStatusInfo
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this MssqlLogShippingSummary.


        :param status: The status of this MssqlLogShippingSummary.
        :type status: MssqlLogShippingStatusInfo
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status
