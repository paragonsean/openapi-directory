# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LegalHoldSummary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, object_id: str=None, object_name: str=None, object_type: str=None, expected_expiration_date_without_legal_hold: datetime=None, is_custom_retention_applied: bool=None, is_on_demand_snapshot: bool=None, locations_present: List[str]=None, place_on_hold_time: datetime=None, snapshot_id: str=None, snapshot_time: datetime=None):
        """LegalHoldSummary - a model defined in OpenAPI

        :param object_id: The object_id of this LegalHoldSummary.
        :param object_name: The object_name of this LegalHoldSummary.
        :param object_type: The object_type of this LegalHoldSummary.
        :param expected_expiration_date_without_legal_hold: The expected_expiration_date_without_legal_hold of this LegalHoldSummary.
        :param is_custom_retention_applied: The is_custom_retention_applied of this LegalHoldSummary.
        :param is_on_demand_snapshot: The is_on_demand_snapshot of this LegalHoldSummary.
        :param locations_present: The locations_present of this LegalHoldSummary.
        :param place_on_hold_time: The place_on_hold_time of this LegalHoldSummary.
        :param snapshot_id: The snapshot_id of this LegalHoldSummary.
        :param snapshot_time: The snapshot_time of this LegalHoldSummary.
        """
        self.openapi_types = {
            'object_id': str,
            'object_name': str,
            'object_type': str,
            'expected_expiration_date_without_legal_hold': datetime,
            'is_custom_retention_applied': bool,
            'is_on_demand_snapshot': bool,
            'locations_present': List[str],
            'place_on_hold_time': datetime,
            'snapshot_id': str,
            'snapshot_time': datetime
        }

        self.attribute_map = {
            'object_id': 'objectId',
            'object_name': 'objectName',
            'object_type': 'objectType',
            'expected_expiration_date_without_legal_hold': 'expectedExpirationDateWithoutLegalHold',
            'is_custom_retention_applied': 'isCustomRetentionApplied',
            'is_on_demand_snapshot': 'isOnDemandSnapshot',
            'locations_present': 'locationsPresent',
            'place_on_hold_time': 'placeOnHoldTime',
            'snapshot_id': 'snapshotId',
            'snapshot_time': 'snapshotTime'
        }

        self._object_id = object_id
        self._object_name = object_name
        self._object_type = object_type
        self._expected_expiration_date_without_legal_hold = expected_expiration_date_without_legal_hold
        self._is_custom_retention_applied = is_custom_retention_applied
        self._is_on_demand_snapshot = is_on_demand_snapshot
        self._locations_present = locations_present
        self._place_on_hold_time = place_on_hold_time
        self._snapshot_id = snapshot_id
        self._snapshot_time = snapshot_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LegalHoldSummary':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LegalHoldSummary of this LegalHoldSummary.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def object_id(self):
        """Gets the object_id of this LegalHoldSummary.


        :return: The object_id of this LegalHoldSummary.
        :rtype: str
        """
        return self._object_id

    @object_id.setter
    def object_id(self, object_id):
        """Sets the object_id of this LegalHoldSummary.


        :param object_id: The object_id of this LegalHoldSummary.
        :type object_id: str
        """
        if object_id is None:
            raise ValueError("Invalid value for `object_id`, must not be `None`")

        self._object_id = object_id

    @property
    def object_name(self):
        """Gets the object_name of this LegalHoldSummary.


        :return: The object_name of this LegalHoldSummary.
        :rtype: str
        """
        return self._object_name

    @object_name.setter
    def object_name(self, object_name):
        """Sets the object_name of this LegalHoldSummary.


        :param object_name: The object_name of this LegalHoldSummary.
        :type object_name: str
        """
        if object_name is None:
            raise ValueError("Invalid value for `object_name`, must not be `None`")

        self._object_name = object_name

    @property
    def object_type(self):
        """Gets the object_type of this LegalHoldSummary.


        :return: The object_type of this LegalHoldSummary.
        :rtype: str
        """
        return self._object_type

    @object_type.setter
    def object_type(self, object_type):
        """Sets the object_type of this LegalHoldSummary.


        :param object_type: The object_type of this LegalHoldSummary.
        :type object_type: str
        """
        if object_type is None:
            raise ValueError("Invalid value for `object_type`, must not be `None`")

        self._object_type = object_type

    @property
    def expected_expiration_date_without_legal_hold(self):
        """Gets the expected_expiration_date_without_legal_hold of this LegalHoldSummary.

        Date at which the snapshot will expire if the legal hold is dissolved. 

        :return: The expected_expiration_date_without_legal_hold of this LegalHoldSummary.
        :rtype: datetime
        """
        return self._expected_expiration_date_without_legal_hold

    @expected_expiration_date_without_legal_hold.setter
    def expected_expiration_date_without_legal_hold(self, expected_expiration_date_without_legal_hold):
        """Sets the expected_expiration_date_without_legal_hold of this LegalHoldSummary.

        Date at which the snapshot will expire if the legal hold is dissolved. 

        :param expected_expiration_date_without_legal_hold: The expected_expiration_date_without_legal_hold of this LegalHoldSummary.
        :type expected_expiration_date_without_legal_hold: datetime
        """

        self._expected_expiration_date_without_legal_hold = expected_expiration_date_without_legal_hold

    @property
    def is_custom_retention_applied(self):
        """Gets the is_custom_retention_applied of this LegalHoldSummary.

        A Boolean value that indicates whether custom retention is applied to the specified snapshot. Value is true when custom retention is applied to the snapshot. 

        :return: The is_custom_retention_applied of this LegalHoldSummary.
        :rtype: bool
        """
        return self._is_custom_retention_applied

    @is_custom_retention_applied.setter
    def is_custom_retention_applied(self, is_custom_retention_applied):
        """Sets the is_custom_retention_applied of this LegalHoldSummary.

        A Boolean value that indicates whether custom retention is applied to the specified snapshot. Value is true when custom retention is applied to the snapshot. 

        :param is_custom_retention_applied: The is_custom_retention_applied of this LegalHoldSummary.
        :type is_custom_retention_applied: bool
        """
        if is_custom_retention_applied is None:
            raise ValueError("Invalid value for `is_custom_retention_applied`, must not be `None`")

        self._is_custom_retention_applied = is_custom_retention_applied

    @property
    def is_on_demand_snapshot(self):
        """Gets the is_on_demand_snapshot of this LegalHoldSummary.

        A Boolean that specifies whether a snapshot is an On Demand snapshot. When this value is 'true,' the snapshot is an On Demand snapshot.

        :return: The is_on_demand_snapshot of this LegalHoldSummary.
        :rtype: bool
        """
        return self._is_on_demand_snapshot

    @is_on_demand_snapshot.setter
    def is_on_demand_snapshot(self, is_on_demand_snapshot):
        """Sets the is_on_demand_snapshot of this LegalHoldSummary.

        A Boolean that specifies whether a snapshot is an On Demand snapshot. When this value is 'true,' the snapshot is an On Demand snapshot.

        :param is_on_demand_snapshot: The is_on_demand_snapshot of this LegalHoldSummary.
        :type is_on_demand_snapshot: bool
        """
        if is_on_demand_snapshot is None:
            raise ValueError("Invalid value for `is_on_demand_snapshot`, must not be `None`")

        self._is_on_demand_snapshot = is_on_demand_snapshot

    @property
    def locations_present(self):
        """Gets the locations_present of this LegalHoldSummary.

        Current locations of the snapshot.

        :return: The locations_present of this LegalHoldSummary.
        :rtype: List[str]
        """
        return self._locations_present

    @locations_present.setter
    def locations_present(self, locations_present):
        """Sets the locations_present of this LegalHoldSummary.

        Current locations of the snapshot.

        :param locations_present: The locations_present of this LegalHoldSummary.
        :type locations_present: List[str]
        """
        if locations_present is None:
            raise ValueError("Invalid value for `locations_present`, must not be `None`")

        self._locations_present = locations_present

    @property
    def place_on_hold_time(self):
        """Gets the place_on_hold_time of this LegalHoldSummary.

        Time at which the snapshot was put on hold.

        :return: The place_on_hold_time of this LegalHoldSummary.
        :rtype: datetime
        """
        return self._place_on_hold_time

    @place_on_hold_time.setter
    def place_on_hold_time(self, place_on_hold_time):
        """Sets the place_on_hold_time of this LegalHoldSummary.

        Time at which the snapshot was put on hold.

        :param place_on_hold_time: The place_on_hold_time of this LegalHoldSummary.
        :type place_on_hold_time: datetime
        """
        if place_on_hold_time is None:
            raise ValueError("Invalid value for `place_on_hold_time`, must not be `None`")

        self._place_on_hold_time = place_on_hold_time

    @property
    def snapshot_id(self):
        """Gets the snapshot_id of this LegalHoldSummary.


        :return: The snapshot_id of this LegalHoldSummary.
        :rtype: str
        """
        return self._snapshot_id

    @snapshot_id.setter
    def snapshot_id(self, snapshot_id):
        """Sets the snapshot_id of this LegalHoldSummary.


        :param snapshot_id: The snapshot_id of this LegalHoldSummary.
        :type snapshot_id: str
        """
        if snapshot_id is None:
            raise ValueError("Invalid value for `snapshot_id`, must not be `None`")

        self._snapshot_id = snapshot_id

    @property
    def snapshot_time(self):
        """Gets the snapshot_time of this LegalHoldSummary.

        Time at which the snapshot was taken.

        :return: The snapshot_time of this LegalHoldSummary.
        :rtype: datetime
        """
        return self._snapshot_time

    @snapshot_time.setter
    def snapshot_time(self, snapshot_time):
        """Sets the snapshot_time of this LegalHoldSummary.

        Time at which the snapshot was taken.

        :param snapshot_time: The snapshot_time of this LegalHoldSummary.
        :type snapshot_time: datetime
        """
        if snapshot_time is None:
            raise ValueError("Invalid value for `snapshot_time`, must not be `None`")

        self._snapshot_time = snapshot_time
