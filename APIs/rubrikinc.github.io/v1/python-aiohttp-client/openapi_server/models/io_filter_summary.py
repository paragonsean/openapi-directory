# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class IoFilterSummary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, name: str=None, release_date: str=None, summary: str=None, vendor: str=None, version: str=None):
        """IoFilterSummary - a model defined in OpenAPI

        :param id: The id of this IoFilterSummary.
        :param name: The name of this IoFilterSummary.
        :param release_date: The release_date of this IoFilterSummary.
        :param summary: The summary of this IoFilterSummary.
        :param vendor: The vendor of this IoFilterSummary.
        :param version: The version of this IoFilterSummary.
        """
        self.openapi_types = {
            'id': str,
            'name': str,
            'release_date': str,
            'summary': str,
            'vendor': str,
            'version': str
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'release_date': 'releaseDate',
            'summary': 'summary',
            'vendor': 'vendor',
            'version': 'version'
        }

        self._id = id
        self._name = name
        self._release_date = release_date
        self._summary = summary
        self._vendor = vendor
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IoFilterSummary':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The IoFilterSummary of this IoFilterSummary.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this IoFilterSummary.


        :return: The id of this IoFilterSummary.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this IoFilterSummary.


        :param id: The id of this IoFilterSummary.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def name(self):
        """Gets the name of this IoFilterSummary.


        :return: The name of this IoFilterSummary.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this IoFilterSummary.


        :param name: The name of this IoFilterSummary.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def release_date(self):
        """Gets the release_date of this IoFilterSummary.


        :return: The release_date of this IoFilterSummary.
        :rtype: str
        """
        return self._release_date

    @release_date.setter
    def release_date(self, release_date):
        """Sets the release_date of this IoFilterSummary.


        :param release_date: The release_date of this IoFilterSummary.
        :type release_date: str
        """

        self._release_date = release_date

    @property
    def summary(self):
        """Gets the summary of this IoFilterSummary.


        :return: The summary of this IoFilterSummary.
        :rtype: str
        """
        return self._summary

    @summary.setter
    def summary(self, summary):
        """Sets the summary of this IoFilterSummary.


        :param summary: The summary of this IoFilterSummary.
        :type summary: str
        """

        self._summary = summary

    @property
    def vendor(self):
        """Gets the vendor of this IoFilterSummary.


        :return: The vendor of this IoFilterSummary.
        :rtype: str
        """
        return self._vendor

    @vendor.setter
    def vendor(self, vendor):
        """Sets the vendor of this IoFilterSummary.


        :param vendor: The vendor of this IoFilterSummary.
        :type vendor: str
        """
        if vendor is None:
            raise ValueError("Invalid value for `vendor`, must not be `None`")

        self._vendor = vendor

    @property
    def version(self):
        """Gets the version of this IoFilterSummary.


        :return: The version of this IoFilterSummary.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this IoFilterSummary.


        :param version: The version of this IoFilterSummary.
        :type version: str
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")

        self._version = version
