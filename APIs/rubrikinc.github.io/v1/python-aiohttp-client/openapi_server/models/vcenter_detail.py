# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.cluster_visibility_info import ClusterVisibilityInfo
from openapi_server.models.configured_sla_type import ConfiguredSlaType
from openapi_server.models.refreshable_object_connection_status import RefreshableObjectConnectionStatus
from openapi_server import util


class VcenterDetail(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ca_certs: str=None, configured_sla_domain_id: str=None, configured_sla_domain_name: str=None, configured_sla_domain_type: ConfiguredSlaType=None, id: str=None, is_configured_sla_domain_retention_locked: bool=None, name: str=None, primary_cluster_id: str=None, sla_last_update_time: datetime=None, compute_visibility_filter: List[ClusterVisibilityInfo]=None, configured_sla_domain_polaris_managed_id: str=None, conflict_resolution_authz: str=None, connection_status: RefreshableObjectConnectionStatus=None, hostname: str=None, is_io_filter_installed: bool=None, is_vmc: bool=None, last_refresh_time: datetime=None, username: str=None, version: str=None, status: str=None):
        """VcenterDetail - a model defined in OpenAPI

        :param ca_certs: The ca_certs of this VcenterDetail.
        :param configured_sla_domain_id: The configured_sla_domain_id of this VcenterDetail.
        :param configured_sla_domain_name: The configured_sla_domain_name of this VcenterDetail.
        :param configured_sla_domain_type: The configured_sla_domain_type of this VcenterDetail.
        :param id: The id of this VcenterDetail.
        :param is_configured_sla_domain_retention_locked: The is_configured_sla_domain_retention_locked of this VcenterDetail.
        :param name: The name of this VcenterDetail.
        :param primary_cluster_id: The primary_cluster_id of this VcenterDetail.
        :param sla_last_update_time: The sla_last_update_time of this VcenterDetail.
        :param compute_visibility_filter: The compute_visibility_filter of this VcenterDetail.
        :param configured_sla_domain_polaris_managed_id: The configured_sla_domain_polaris_managed_id of this VcenterDetail.
        :param conflict_resolution_authz: The conflict_resolution_authz of this VcenterDetail.
        :param connection_status: The connection_status of this VcenterDetail.
        :param hostname: The hostname of this VcenterDetail.
        :param is_io_filter_installed: The is_io_filter_installed of this VcenterDetail.
        :param is_vmc: The is_vmc of this VcenterDetail.
        :param last_refresh_time: The last_refresh_time of this VcenterDetail.
        :param username: The username of this VcenterDetail.
        :param version: The version of this VcenterDetail.
        :param status: The status of this VcenterDetail.
        """
        self.openapi_types = {
            'ca_certs': str,
            'configured_sla_domain_id': str,
            'configured_sla_domain_name': str,
            'configured_sla_domain_type': ConfiguredSlaType,
            'id': str,
            'is_configured_sla_domain_retention_locked': bool,
            'name': str,
            'primary_cluster_id': str,
            'sla_last_update_time': datetime,
            'compute_visibility_filter': List[ClusterVisibilityInfo],
            'configured_sla_domain_polaris_managed_id': str,
            'conflict_resolution_authz': str,
            'connection_status': RefreshableObjectConnectionStatus,
            'hostname': str,
            'is_io_filter_installed': bool,
            'is_vmc': bool,
            'last_refresh_time': datetime,
            'username': str,
            'version': str,
            'status': str
        }

        self.attribute_map = {
            'ca_certs': 'caCerts',
            'configured_sla_domain_id': 'configuredSlaDomainId',
            'configured_sla_domain_name': 'configuredSlaDomainName',
            'configured_sla_domain_type': 'configuredSlaDomainType',
            'id': 'id',
            'is_configured_sla_domain_retention_locked': 'isConfiguredSlaDomainRetentionLocked',
            'name': 'name',
            'primary_cluster_id': 'primaryClusterId',
            'sla_last_update_time': 'slaLastUpdateTime',
            'compute_visibility_filter': 'computeVisibilityFilter',
            'configured_sla_domain_polaris_managed_id': 'configuredSlaDomainPolarisManagedId',
            'conflict_resolution_authz': 'conflictResolutionAuthz',
            'connection_status': 'connectionStatus',
            'hostname': 'hostname',
            'is_io_filter_installed': 'isIoFilterInstalled',
            'is_vmc': 'isVmc',
            'last_refresh_time': 'lastRefreshTime',
            'username': 'username',
            'version': 'version',
            'status': 'status'
        }

        self._ca_certs = ca_certs
        self._configured_sla_domain_id = configured_sla_domain_id
        self._configured_sla_domain_name = configured_sla_domain_name
        self._configured_sla_domain_type = configured_sla_domain_type
        self._id = id
        self._is_configured_sla_domain_retention_locked = is_configured_sla_domain_retention_locked
        self._name = name
        self._primary_cluster_id = primary_cluster_id
        self._sla_last_update_time = sla_last_update_time
        self._compute_visibility_filter = compute_visibility_filter
        self._configured_sla_domain_polaris_managed_id = configured_sla_domain_polaris_managed_id
        self._conflict_resolution_authz = conflict_resolution_authz
        self._connection_status = connection_status
        self._hostname = hostname
        self._is_io_filter_installed = is_io_filter_installed
        self._is_vmc = is_vmc
        self._last_refresh_time = last_refresh_time
        self._username = username
        self._version = version
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VcenterDetail':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VcenterDetail of this VcenterDetail.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ca_certs(self):
        """Gets the ca_certs of this VcenterDetail.

        Concatenated X.509 certificates in Base64 encoded DER format. Each certificate must start with -----BEGIN CERTIFICATE----- and end with -----END CERTIFICATE-----. Use an empty string to remove the existing certificates for the vCenter.

        :return: The ca_certs of this VcenterDetail.
        :rtype: str
        """
        return self._ca_certs

    @ca_certs.setter
    def ca_certs(self, ca_certs):
        """Sets the ca_certs of this VcenterDetail.

        Concatenated X.509 certificates in Base64 encoded DER format. Each certificate must start with -----BEGIN CERTIFICATE----- and end with -----END CERTIFICATE-----. Use an empty string to remove the existing certificates for the vCenter.

        :param ca_certs: The ca_certs of this VcenterDetail.
        :type ca_certs: str
        """

        self._ca_certs = ca_certs

    @property
    def configured_sla_domain_id(self):
        """Gets the configured_sla_domain_id of this VcenterDetail.

        The ID of the SLA Domain configured directly on the Rubrik object.

        :return: The configured_sla_domain_id of this VcenterDetail.
        :rtype: str
        """
        return self._configured_sla_domain_id

    @configured_sla_domain_id.setter
    def configured_sla_domain_id(self, configured_sla_domain_id):
        """Sets the configured_sla_domain_id of this VcenterDetail.

        The ID of the SLA Domain configured directly on the Rubrik object.

        :param configured_sla_domain_id: The configured_sla_domain_id of this VcenterDetail.
        :type configured_sla_domain_id: str
        """
        if configured_sla_domain_id is None:
            raise ValueError("Invalid value for `configured_sla_domain_id`, must not be `None`")

        self._configured_sla_domain_id = configured_sla_domain_id

    @property
    def configured_sla_domain_name(self):
        """Gets the configured_sla_domain_name of this VcenterDetail.

        The name of the SLA Domain configured directly on the Rubrik object.

        :return: The configured_sla_domain_name of this VcenterDetail.
        :rtype: str
        """
        return self._configured_sla_domain_name

    @configured_sla_domain_name.setter
    def configured_sla_domain_name(self, configured_sla_domain_name):
        """Sets the configured_sla_domain_name of this VcenterDetail.

        The name of the SLA Domain configured directly on the Rubrik object.

        :param configured_sla_domain_name: The configured_sla_domain_name of this VcenterDetail.
        :type configured_sla_domain_name: str
        """
        if configured_sla_domain_name is None:
            raise ValueError("Invalid value for `configured_sla_domain_name`, must not be `None`")

        self._configured_sla_domain_name = configured_sla_domain_name

    @property
    def configured_sla_domain_type(self):
        """Gets the configured_sla_domain_type of this VcenterDetail.


        :return: The configured_sla_domain_type of this VcenterDetail.
        :rtype: ConfiguredSlaType
        """
        return self._configured_sla_domain_type

    @configured_sla_domain_type.setter
    def configured_sla_domain_type(self, configured_sla_domain_type):
        """Sets the configured_sla_domain_type of this VcenterDetail.


        :param configured_sla_domain_type: The configured_sla_domain_type of this VcenterDetail.
        :type configured_sla_domain_type: ConfiguredSlaType
        """

        self._configured_sla_domain_type = configured_sla_domain_type

    @property
    def id(self):
        """Gets the id of this VcenterDetail.

        The ID of the Rubrik object.

        :return: The id of this VcenterDetail.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this VcenterDetail.

        The ID of the Rubrik object.

        :param id: The id of this VcenterDetail.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def is_configured_sla_domain_retention_locked(self):
        """Gets the is_configured_sla_domain_retention_locked of this VcenterDetail.

        Indicates whether the configured SLA Domain is Retention Locked. When this value is 'true', the configured SLA Domain is a Retention Lock SLA Domain.

        :return: The is_configured_sla_domain_retention_locked of this VcenterDetail.
        :rtype: bool
        """
        return self._is_configured_sla_domain_retention_locked

    @is_configured_sla_domain_retention_locked.setter
    def is_configured_sla_domain_retention_locked(self, is_configured_sla_domain_retention_locked):
        """Sets the is_configured_sla_domain_retention_locked of this VcenterDetail.

        Indicates whether the configured SLA Domain is Retention Locked. When this value is 'true', the configured SLA Domain is a Retention Lock SLA Domain.

        :param is_configured_sla_domain_retention_locked: The is_configured_sla_domain_retention_locked of this VcenterDetail.
        :type is_configured_sla_domain_retention_locked: bool
        """

        self._is_configured_sla_domain_retention_locked = is_configured_sla_domain_retention_locked

    @property
    def name(self):
        """Gets the name of this VcenterDetail.

        The name of the Rubrik object.

        :return: The name of this VcenterDetail.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this VcenterDetail.

        The name of the Rubrik object.

        :param name: The name of this VcenterDetail.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def primary_cluster_id(self):
        """Gets the primary_cluster_id of this VcenterDetail.

        The ID of the cluster that manages the Rubrik object.

        :return: The primary_cluster_id of this VcenterDetail.
        :rtype: str
        """
        return self._primary_cluster_id

    @primary_cluster_id.setter
    def primary_cluster_id(self, primary_cluster_id):
        """Sets the primary_cluster_id of this VcenterDetail.

        The ID of the cluster that manages the Rubrik object.

        :param primary_cluster_id: The primary_cluster_id of this VcenterDetail.
        :type primary_cluster_id: str
        """
        if primary_cluster_id is None:
            raise ValueError("Invalid value for `primary_cluster_id`, must not be `None`")

        self._primary_cluster_id = primary_cluster_id

    @property
    def sla_last_update_time(self):
        """Gets the sla_last_update_time of this VcenterDetail.

        The UTC time when the SLA Domain was last updated.

        :return: The sla_last_update_time of this VcenterDetail.
        :rtype: datetime
        """
        return self._sla_last_update_time

    @sla_last_update_time.setter
    def sla_last_update_time(self, sla_last_update_time):
        """Sets the sla_last_update_time of this VcenterDetail.

        The UTC time when the SLA Domain was last updated.

        :param sla_last_update_time: The sla_last_update_time of this VcenterDetail.
        :type sla_last_update_time: datetime
        """

        self._sla_last_update_time = sla_last_update_time

    @property
    def compute_visibility_filter(self):
        """Gets the compute_visibility_filter of this VcenterDetail.

        Compute clusters that are visible to this Rubrik Cluster. All other compute resources are hidden. If 'computeVisibilityFilter' is not specified, all resources are visible. If 'hostGroupFilter' is not specified for a compute cluster, all compute resources in the compute cluster are visible. If a 'hostGroupFilter' is specified for a compute cluster, only vms that currently reside on these hosts are visible.

        :return: The compute_visibility_filter of this VcenterDetail.
        :rtype: List[ClusterVisibilityInfo]
        """
        return self._compute_visibility_filter

    @compute_visibility_filter.setter
    def compute_visibility_filter(self, compute_visibility_filter):
        """Sets the compute_visibility_filter of this VcenterDetail.

        Compute clusters that are visible to this Rubrik Cluster. All other compute resources are hidden. If 'computeVisibilityFilter' is not specified, all resources are visible. If 'hostGroupFilter' is not specified for a compute cluster, all compute resources in the compute cluster are visible. If a 'hostGroupFilter' is specified for a compute cluster, only vms that currently reside on these hosts are visible.

        :param compute_visibility_filter: The compute_visibility_filter of this VcenterDetail.
        :type compute_visibility_filter: List[ClusterVisibilityInfo]
        """
        if compute_visibility_filter is None:
            raise ValueError("Invalid value for `compute_visibility_filter`, must not be `None`")

        self._compute_visibility_filter = compute_visibility_filter

    @property
    def configured_sla_domain_polaris_managed_id(self):
        """Gets the configured_sla_domain_polaris_managed_id of this VcenterDetail.

        Optional field containing Polaris managed id of the configured SLA domain if it is Polaris managed.

        :return: The configured_sla_domain_polaris_managed_id of this VcenterDetail.
        :rtype: str
        """
        return self._configured_sla_domain_polaris_managed_id

    @configured_sla_domain_polaris_managed_id.setter
    def configured_sla_domain_polaris_managed_id(self, configured_sla_domain_polaris_managed_id):
        """Sets the configured_sla_domain_polaris_managed_id of this VcenterDetail.

        Optional field containing Polaris managed id of the configured SLA domain if it is Polaris managed.

        :param configured_sla_domain_polaris_managed_id: The configured_sla_domain_polaris_managed_id of this VcenterDetail.
        :type configured_sla_domain_polaris_managed_id: str
        """

        self._configured_sla_domain_polaris_managed_id = configured_sla_domain_polaris_managed_id

    @property
    def conflict_resolution_authz(self):
        """Gets the conflict_resolution_authz of this VcenterDetail.

        Set to 'AllowAutoConflictResolution' to link the relic virtual machine objects of a virtual machine to the current object for the virtual machine or to 'NoConflictResolution' to prevent linking. The Rubrik cluster generates a unique ID for each virtual machine when a vCenter Server is added. When a virtual machine changes to another vCenter Server or unregisters and registers with the same vCenter Server, a new unique ID is generated for that virtual machine. When this happens, the virtual machine object associated with the original ID becomes a relic. This option links relic virtual machine objects with the current virtual machine object of a specific virtual machine, and makes the collective snapshot history available through the current object. Default value is 'NoConflictResolution'.

        :return: The conflict_resolution_authz of this VcenterDetail.
        :rtype: str
        """
        return self._conflict_resolution_authz

    @conflict_resolution_authz.setter
    def conflict_resolution_authz(self, conflict_resolution_authz):
        """Sets the conflict_resolution_authz of this VcenterDetail.

        Set to 'AllowAutoConflictResolution' to link the relic virtual machine objects of a virtual machine to the current object for the virtual machine or to 'NoConflictResolution' to prevent linking. The Rubrik cluster generates a unique ID for each virtual machine when a vCenter Server is added. When a virtual machine changes to another vCenter Server or unregisters and registers with the same vCenter Server, a new unique ID is generated for that virtual machine. When this happens, the virtual machine object associated with the original ID becomes a relic. This option links relic virtual machine objects with the current virtual machine object of a specific virtual machine, and makes the collective snapshot history available through the current object. Default value is 'NoConflictResolution'.

        :param conflict_resolution_authz: The conflict_resolution_authz of this VcenterDetail.
        :type conflict_resolution_authz: str
        """
        allowed_values = ["AllowAutoConflictResolution", "NoConflictResolution"]  # noqa: E501
        if conflict_resolution_authz not in allowed_values:
            raise ValueError(
                "Invalid value for `conflict_resolution_authz` ({0}), must be one of {1}"
                .format(conflict_resolution_authz, allowed_values)
            )

        self._conflict_resolution_authz = conflict_resolution_authz

    @property
    def connection_status(self):
        """Gets the connection_status of this VcenterDetail.


        :return: The connection_status of this VcenterDetail.
        :rtype: RefreshableObjectConnectionStatus
        """
        return self._connection_status

    @connection_status.setter
    def connection_status(self, connection_status):
        """Sets the connection_status of this VcenterDetail.


        :param connection_status: The connection_status of this VcenterDetail.
        :type connection_status: RefreshableObjectConnectionStatus
        """
        if connection_status is None:
            raise ValueError("Invalid value for `connection_status`, must not be `None`")

        self._connection_status = connection_status

    @property
    def hostname(self):
        """Gets the hostname of this VcenterDetail.


        :return: The hostname of this VcenterDetail.
        :rtype: str
        """
        return self._hostname

    @hostname.setter
    def hostname(self, hostname):
        """Sets the hostname of this VcenterDetail.


        :param hostname: The hostname of this VcenterDetail.
        :type hostname: str
        """
        if hostname is None:
            raise ValueError("Invalid value for `hostname`, must not be `None`")

        self._hostname = hostname

    @property
    def is_io_filter_installed(self):
        """Gets the is_io_filter_installed of this VcenterDetail.

        A Boolean value that specifies whether Rubrik IO filters are installed on any compute clusters in the vCenter. When this value is 'true,' Rubrik IO filters are present on at least one compute cluster in the vCenter. When this value is 'false,' no Rubrik IO filters are present on any compute clusters in the vCenter.

        :return: The is_io_filter_installed of this VcenterDetail.
        :rtype: bool
        """
        return self._is_io_filter_installed

    @is_io_filter_installed.setter
    def is_io_filter_installed(self, is_io_filter_installed):
        """Sets the is_io_filter_installed of this VcenterDetail.

        A Boolean value that specifies whether Rubrik IO filters are installed on any compute clusters in the vCenter. When this value is 'true,' Rubrik IO filters are present on at least one compute cluster in the vCenter. When this value is 'false,' no Rubrik IO filters are present on any compute clusters in the vCenter.

        :param is_io_filter_installed: The is_io_filter_installed of this VcenterDetail.
        :type is_io_filter_installed: bool
        """

        self._is_io_filter_installed = is_io_filter_installed

    @property
    def is_vmc(self):
        """Gets the is_vmc of this VcenterDetail.

        Indicates if the vCenter is a VMC instance.

        :return: The is_vmc of this VcenterDetail.
        :rtype: bool
        """
        return self._is_vmc

    @is_vmc.setter
    def is_vmc(self, is_vmc):
        """Sets the is_vmc of this VcenterDetail.

        Indicates if the vCenter is a VMC instance.

        :param is_vmc: The is_vmc of this VcenterDetail.
        :type is_vmc: bool
        """

        self._is_vmc = is_vmc

    @property
    def last_refresh_time(self):
        """Gets the last_refresh_time of this VcenterDetail.

        Optional field containing the last time that a vcenter was refreshed (either lite or full).

        :return: The last_refresh_time of this VcenterDetail.
        :rtype: datetime
        """
        return self._last_refresh_time

    @last_refresh_time.setter
    def last_refresh_time(self, last_refresh_time):
        """Sets the last_refresh_time of this VcenterDetail.

        Optional field containing the last time that a vcenter was refreshed (either lite or full).

        :param last_refresh_time: The last_refresh_time of this VcenterDetail.
        :type last_refresh_time: datetime
        """

        self._last_refresh_time = last_refresh_time

    @property
    def username(self):
        """Gets the username of this VcenterDetail.


        :return: The username of this VcenterDetail.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this VcenterDetail.


        :param username: The username of this VcenterDetail.
        :type username: str
        """
        if username is None:
            raise ValueError("Invalid value for `username`, must not be `None`")

        self._username = username

    @property
    def version(self):
        """Gets the version of this VcenterDetail.

        Version of vCenter.

        :return: The version of this VcenterDetail.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this VcenterDetail.

        Version of vCenter.

        :param version: The version of this VcenterDetail.
        :type version: str
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")

        self._version = version

    @property
    def status(self):
        """Gets the status of this VcenterDetail.

        Status of a vCenter. DEPRECATED. Please use connectionStatus.

        :return: The status of this VcenterDetail.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this VcenterDetail.

        Status of a vCenter. DEPRECATED. Please use connectionStatus.

        :param status: The status of this VcenterDetail.
        :type status: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status
