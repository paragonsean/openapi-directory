# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class HdfsExportFileJobConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, destination_dir: str=None, should_ignore_errors: bool=None, source_dir: str=None, host_id: str=None):
        """HdfsExportFileJobConfig - a model defined in OpenAPI

        :param destination_dir: The destination_dir of this HdfsExportFileJobConfig.
        :param should_ignore_errors: The should_ignore_errors of this HdfsExportFileJobConfig.
        :param source_dir: The source_dir of this HdfsExportFileJobConfig.
        :param host_id: The host_id of this HdfsExportFileJobConfig.
        """
        self.openapi_types = {
            'destination_dir': str,
            'should_ignore_errors': bool,
            'source_dir': str,
            'host_id': str
        }

        self.attribute_map = {
            'destination_dir': 'destinationDir',
            'should_ignore_errors': 'shouldIgnoreErrors',
            'source_dir': 'sourceDir',
            'host_id': 'hostId'
        }

        self._destination_dir = destination_dir
        self._should_ignore_errors = should_ignore_errors
        self._source_dir = source_dir
        self._host_id = host_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'HdfsExportFileJobConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The HdfsExportFileJobConfig of this HdfsExportFileJobConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def destination_dir(self):
        """Gets the destination_dir of this HdfsExportFileJobConfig.

        The destination directory.

        :return: The destination_dir of this HdfsExportFileJobConfig.
        :rtype: str
        """
        return self._destination_dir

    @destination_dir.setter
    def destination_dir(self, destination_dir):
        """Sets the destination_dir of this HdfsExportFileJobConfig.

        The destination directory.

        :param destination_dir: The destination_dir of this HdfsExportFileJobConfig.
        :type destination_dir: str
        """
        if destination_dir is None:
            raise ValueError("Invalid value for `destination_dir`, must not be `None`")

        self._destination_dir = destination_dir

    @property
    def should_ignore_errors(self):
        """Gets the should_ignore_errors of this HdfsExportFileJobConfig.

        An optional Boolean that determines whether to ignore single errors during the restore process. When this value is 'true', single errors are ignored. This field is 'false' by default.

        :return: The should_ignore_errors of this HdfsExportFileJobConfig.
        :rtype: bool
        """
        return self._should_ignore_errors

    @should_ignore_errors.setter
    def should_ignore_errors(self, should_ignore_errors):
        """Sets the should_ignore_errors of this HdfsExportFileJobConfig.

        An optional Boolean that determines whether to ignore single errors during the restore process. When this value is 'true', single errors are ignored. This field is 'false' by default.

        :param should_ignore_errors: The should_ignore_errors of this HdfsExportFileJobConfig.
        :type should_ignore_errors: bool
        """

        self._should_ignore_errors = should_ignore_errors

    @property
    def source_dir(self):
        """Gets the source_dir of this HdfsExportFileJobConfig.

        The source directory being restored.

        :return: The source_dir of this HdfsExportFileJobConfig.
        :rtype: str
        """
        return self._source_dir

    @source_dir.setter
    def source_dir(self, source_dir):
        """Sets the source_dir of this HdfsExportFileJobConfig.

        The source directory being restored.

        :param source_dir: The source_dir of this HdfsExportFileJobConfig.
        :type source_dir: str
        """
        if source_dir is None:
            raise ValueError("Invalid value for `source_dir`, must not be `None`")

        self._source_dir = source_dir

    @property
    def host_id(self):
        """Gets the host_id of this HdfsExportFileJobConfig.

        Host ID.

        :return: The host_id of this HdfsExportFileJobConfig.
        :rtype: str
        """
        return self._host_id

    @host_id.setter
    def host_id(self, host_id):
        """Sets the host_id of this HdfsExportFileJobConfig.

        Host ID.

        :param host_id: The host_id of this HdfsExportFileJobConfig.
        :type host_id: str
        """
        if host_id is None:
            raise ValueError("Invalid value for `host_id`, must not be `None`")

        self._host_id = host_id
