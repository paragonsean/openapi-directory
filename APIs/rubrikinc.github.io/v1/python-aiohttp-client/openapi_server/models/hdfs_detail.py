# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.configured_sla_type import ConfiguredSlaType
from openapi_server.models.hdfs_snapshot_summary import HdfsSnapshotSummary
from openapi_server import util


class HdfsDetail(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, configured_sla_domain_id: str=None, configured_sla_domain_name: str=None, configured_sla_domain_type: ConfiguredSlaType=None, id: str=None, is_configured_sla_domain_retention_locked: bool=None, name: str=None, primary_cluster_id: str=None, sla_last_update_time: datetime=None, effective_sla_domain_id: str=None, effective_sla_domain_name: str=None, effective_sla_domain_polaris_managed_id: str=None, exceptions: List[str]=None, excludes: List[str]=None, host_id: str=None, host_name: str=None, includes: List[str]=None, is_effective_sla_domain_retention_locked: bool=None, is_relic: bool=None, template_id: str=None, template_name: str=None, local_storage: int=None, protection_date: datetime=None, snapshot_count: int=None, snapshots: List[HdfsSnapshotSummary]=None):
        """HdfsDetail - a model defined in OpenAPI

        :param configured_sla_domain_id: The configured_sla_domain_id of this HdfsDetail.
        :param configured_sla_domain_name: The configured_sla_domain_name of this HdfsDetail.
        :param configured_sla_domain_type: The configured_sla_domain_type of this HdfsDetail.
        :param id: The id of this HdfsDetail.
        :param is_configured_sla_domain_retention_locked: The is_configured_sla_domain_retention_locked of this HdfsDetail.
        :param name: The name of this HdfsDetail.
        :param primary_cluster_id: The primary_cluster_id of this HdfsDetail.
        :param sla_last_update_time: The sla_last_update_time of this HdfsDetail.
        :param effective_sla_domain_id: The effective_sla_domain_id of this HdfsDetail.
        :param effective_sla_domain_name: The effective_sla_domain_name of this HdfsDetail.
        :param effective_sla_domain_polaris_managed_id: The effective_sla_domain_polaris_managed_id of this HdfsDetail.
        :param exceptions: The exceptions of this HdfsDetail.
        :param excludes: The excludes of this HdfsDetail.
        :param host_id: The host_id of this HdfsDetail.
        :param host_name: The host_name of this HdfsDetail.
        :param includes: The includes of this HdfsDetail.
        :param is_effective_sla_domain_retention_locked: The is_effective_sla_domain_retention_locked of this HdfsDetail.
        :param is_relic: The is_relic of this HdfsDetail.
        :param template_id: The template_id of this HdfsDetail.
        :param template_name: The template_name of this HdfsDetail.
        :param local_storage: The local_storage of this HdfsDetail.
        :param protection_date: The protection_date of this HdfsDetail.
        :param snapshot_count: The snapshot_count of this HdfsDetail.
        :param snapshots: The snapshots of this HdfsDetail.
        """
        self.openapi_types = {
            'configured_sla_domain_id': str,
            'configured_sla_domain_name': str,
            'configured_sla_domain_type': ConfiguredSlaType,
            'id': str,
            'is_configured_sla_domain_retention_locked': bool,
            'name': str,
            'primary_cluster_id': str,
            'sla_last_update_time': datetime,
            'effective_sla_domain_id': str,
            'effective_sla_domain_name': str,
            'effective_sla_domain_polaris_managed_id': str,
            'exceptions': List[str],
            'excludes': List[str],
            'host_id': str,
            'host_name': str,
            'includes': List[str],
            'is_effective_sla_domain_retention_locked': bool,
            'is_relic': bool,
            'template_id': str,
            'template_name': str,
            'local_storage': int,
            'protection_date': datetime,
            'snapshot_count': int,
            'snapshots': List[HdfsSnapshotSummary]
        }

        self.attribute_map = {
            'configured_sla_domain_id': 'configuredSlaDomainId',
            'configured_sla_domain_name': 'configuredSlaDomainName',
            'configured_sla_domain_type': 'configuredSlaDomainType',
            'id': 'id',
            'is_configured_sla_domain_retention_locked': 'isConfiguredSlaDomainRetentionLocked',
            'name': 'name',
            'primary_cluster_id': 'primaryClusterId',
            'sla_last_update_time': 'slaLastUpdateTime',
            'effective_sla_domain_id': 'effectiveSlaDomainId',
            'effective_sla_domain_name': 'effectiveSlaDomainName',
            'effective_sla_domain_polaris_managed_id': 'effectiveSlaDomainPolarisManagedId',
            'exceptions': 'exceptions',
            'excludes': 'excludes',
            'host_id': 'hostId',
            'host_name': 'hostName',
            'includes': 'includes',
            'is_effective_sla_domain_retention_locked': 'isEffectiveSlaDomainRetentionLocked',
            'is_relic': 'isRelic',
            'template_id': 'templateId',
            'template_name': 'templateName',
            'local_storage': 'localStorage',
            'protection_date': 'protectionDate',
            'snapshot_count': 'snapshotCount',
            'snapshots': 'snapshots'
        }

        self._configured_sla_domain_id = configured_sla_domain_id
        self._configured_sla_domain_name = configured_sla_domain_name
        self._configured_sla_domain_type = configured_sla_domain_type
        self._id = id
        self._is_configured_sla_domain_retention_locked = is_configured_sla_domain_retention_locked
        self._name = name
        self._primary_cluster_id = primary_cluster_id
        self._sla_last_update_time = sla_last_update_time
        self._effective_sla_domain_id = effective_sla_domain_id
        self._effective_sla_domain_name = effective_sla_domain_name
        self._effective_sla_domain_polaris_managed_id = effective_sla_domain_polaris_managed_id
        self._exceptions = exceptions
        self._excludes = excludes
        self._host_id = host_id
        self._host_name = host_name
        self._includes = includes
        self._is_effective_sla_domain_retention_locked = is_effective_sla_domain_retention_locked
        self._is_relic = is_relic
        self._template_id = template_id
        self._template_name = template_name
        self._local_storage = local_storage
        self._protection_date = protection_date
        self._snapshot_count = snapshot_count
        self._snapshots = snapshots

    @classmethod
    def from_dict(cls, dikt: dict) -> 'HdfsDetail':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The HdfsDetail of this HdfsDetail.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def configured_sla_domain_id(self):
        """Gets the configured_sla_domain_id of this HdfsDetail.

        The ID of the SLA Domain configured directly on the Rubrik object.

        :return: The configured_sla_domain_id of this HdfsDetail.
        :rtype: str
        """
        return self._configured_sla_domain_id

    @configured_sla_domain_id.setter
    def configured_sla_domain_id(self, configured_sla_domain_id):
        """Sets the configured_sla_domain_id of this HdfsDetail.

        The ID of the SLA Domain configured directly on the Rubrik object.

        :param configured_sla_domain_id: The configured_sla_domain_id of this HdfsDetail.
        :type configured_sla_domain_id: str
        """
        if configured_sla_domain_id is None:
            raise ValueError("Invalid value for `configured_sla_domain_id`, must not be `None`")

        self._configured_sla_domain_id = configured_sla_domain_id

    @property
    def configured_sla_domain_name(self):
        """Gets the configured_sla_domain_name of this HdfsDetail.

        The name of the SLA Domain configured directly on the Rubrik object.

        :return: The configured_sla_domain_name of this HdfsDetail.
        :rtype: str
        """
        return self._configured_sla_domain_name

    @configured_sla_domain_name.setter
    def configured_sla_domain_name(self, configured_sla_domain_name):
        """Sets the configured_sla_domain_name of this HdfsDetail.

        The name of the SLA Domain configured directly on the Rubrik object.

        :param configured_sla_domain_name: The configured_sla_domain_name of this HdfsDetail.
        :type configured_sla_domain_name: str
        """
        if configured_sla_domain_name is None:
            raise ValueError("Invalid value for `configured_sla_domain_name`, must not be `None`")

        self._configured_sla_domain_name = configured_sla_domain_name

    @property
    def configured_sla_domain_type(self):
        """Gets the configured_sla_domain_type of this HdfsDetail.


        :return: The configured_sla_domain_type of this HdfsDetail.
        :rtype: ConfiguredSlaType
        """
        return self._configured_sla_domain_type

    @configured_sla_domain_type.setter
    def configured_sla_domain_type(self, configured_sla_domain_type):
        """Sets the configured_sla_domain_type of this HdfsDetail.


        :param configured_sla_domain_type: The configured_sla_domain_type of this HdfsDetail.
        :type configured_sla_domain_type: ConfiguredSlaType
        """

        self._configured_sla_domain_type = configured_sla_domain_type

    @property
    def id(self):
        """Gets the id of this HdfsDetail.

        The ID of the Rubrik object.

        :return: The id of this HdfsDetail.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this HdfsDetail.

        The ID of the Rubrik object.

        :param id: The id of this HdfsDetail.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def is_configured_sla_domain_retention_locked(self):
        """Gets the is_configured_sla_domain_retention_locked of this HdfsDetail.

        Indicates whether the configured SLA Domain is Retention Locked. When this value is 'true', the configured SLA Domain is a Retention Lock SLA Domain.

        :return: The is_configured_sla_domain_retention_locked of this HdfsDetail.
        :rtype: bool
        """
        return self._is_configured_sla_domain_retention_locked

    @is_configured_sla_domain_retention_locked.setter
    def is_configured_sla_domain_retention_locked(self, is_configured_sla_domain_retention_locked):
        """Sets the is_configured_sla_domain_retention_locked of this HdfsDetail.

        Indicates whether the configured SLA Domain is Retention Locked. When this value is 'true', the configured SLA Domain is a Retention Lock SLA Domain.

        :param is_configured_sla_domain_retention_locked: The is_configured_sla_domain_retention_locked of this HdfsDetail.
        :type is_configured_sla_domain_retention_locked: bool
        """

        self._is_configured_sla_domain_retention_locked = is_configured_sla_domain_retention_locked

    @property
    def name(self):
        """Gets the name of this HdfsDetail.

        The name of the Rubrik object.

        :return: The name of this HdfsDetail.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this HdfsDetail.

        The name of the Rubrik object.

        :param name: The name of this HdfsDetail.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def primary_cluster_id(self):
        """Gets the primary_cluster_id of this HdfsDetail.

        The ID of the cluster that manages the Rubrik object.

        :return: The primary_cluster_id of this HdfsDetail.
        :rtype: str
        """
        return self._primary_cluster_id

    @primary_cluster_id.setter
    def primary_cluster_id(self, primary_cluster_id):
        """Sets the primary_cluster_id of this HdfsDetail.

        The ID of the cluster that manages the Rubrik object.

        :param primary_cluster_id: The primary_cluster_id of this HdfsDetail.
        :type primary_cluster_id: str
        """
        if primary_cluster_id is None:
            raise ValueError("Invalid value for `primary_cluster_id`, must not be `None`")

        self._primary_cluster_id = primary_cluster_id

    @property
    def sla_last_update_time(self):
        """Gets the sla_last_update_time of this HdfsDetail.

        The UTC time when the SLA Domain was last updated.

        :return: The sla_last_update_time of this HdfsDetail.
        :rtype: datetime
        """
        return self._sla_last_update_time

    @sla_last_update_time.setter
    def sla_last_update_time(self, sla_last_update_time):
        """Sets the sla_last_update_time of this HdfsDetail.

        The UTC time when the SLA Domain was last updated.

        :param sla_last_update_time: The sla_last_update_time of this HdfsDetail.
        :type sla_last_update_time: datetime
        """

        self._sla_last_update_time = sla_last_update_time

    @property
    def effective_sla_domain_id(self):
        """Gets the effective_sla_domain_id of this HdfsDetail.

        The ID of the effective SLA Domain for a HDFS directory.

        :return: The effective_sla_domain_id of this HdfsDetail.
        :rtype: str
        """
        return self._effective_sla_domain_id

    @effective_sla_domain_id.setter
    def effective_sla_domain_id(self, effective_sla_domain_id):
        """Sets the effective_sla_domain_id of this HdfsDetail.

        The ID of the effective SLA Domain for a HDFS directory.

        :param effective_sla_domain_id: The effective_sla_domain_id of this HdfsDetail.
        :type effective_sla_domain_id: str
        """

        self._effective_sla_domain_id = effective_sla_domain_id

    @property
    def effective_sla_domain_name(self):
        """Gets the effective_sla_domain_name of this HdfsDetail.

        The name of the effective SLA Domain for this HDFS directory.

        :return: The effective_sla_domain_name of this HdfsDetail.
        :rtype: str
        """
        return self._effective_sla_domain_name

    @effective_sla_domain_name.setter
    def effective_sla_domain_name(self, effective_sla_domain_name):
        """Sets the effective_sla_domain_name of this HdfsDetail.

        The name of the effective SLA Domain for this HDFS directory.

        :param effective_sla_domain_name: The effective_sla_domain_name of this HdfsDetail.
        :type effective_sla_domain_name: str
        """

        self._effective_sla_domain_name = effective_sla_domain_name

    @property
    def effective_sla_domain_polaris_managed_id(self):
        """Gets the effective_sla_domain_polaris_managed_id of this HdfsDetail.

        An optional field that contains the Polaris managed ID of the effective SLA Domain. Only applicable to SLA Domains managed by Polaris.

        :return: The effective_sla_domain_polaris_managed_id of this HdfsDetail.
        :rtype: str
        """
        return self._effective_sla_domain_polaris_managed_id

    @effective_sla_domain_polaris_managed_id.setter
    def effective_sla_domain_polaris_managed_id(self, effective_sla_domain_polaris_managed_id):
        """Sets the effective_sla_domain_polaris_managed_id of this HdfsDetail.

        An optional field that contains the Polaris managed ID of the effective SLA Domain. Only applicable to SLA Domains managed by Polaris.

        :param effective_sla_domain_polaris_managed_id: The effective_sla_domain_polaris_managed_id of this HdfsDetail.
        :type effective_sla_domain_polaris_managed_id: str
        """

        self._effective_sla_domain_polaris_managed_id = effective_sla_domain_polaris_managed_id

    @property
    def exceptions(self):
        """Gets the exceptions of this HdfsDetail.


        :return: The exceptions of this HdfsDetail.
        :rtype: List[str]
        """
        return self._exceptions

    @exceptions.setter
    def exceptions(self, exceptions):
        """Sets the exceptions of this HdfsDetail.


        :param exceptions: The exceptions of this HdfsDetail.
        :type exceptions: List[str]
        """

        self._exceptions = exceptions

    @property
    def excludes(self):
        """Gets the excludes of this HdfsDetail.


        :return: The excludes of this HdfsDetail.
        :rtype: List[str]
        """
        return self._excludes

    @excludes.setter
    def excludes(self, excludes):
        """Sets the excludes of this HdfsDetail.


        :param excludes: The excludes of this HdfsDetail.
        :type excludes: List[str]
        """

        self._excludes = excludes

    @property
    def host_id(self):
        """Gets the host_id of this HdfsDetail.


        :return: The host_id of this HdfsDetail.
        :rtype: str
        """
        return self._host_id

    @host_id.setter
    def host_id(self, host_id):
        """Sets the host_id of this HdfsDetail.


        :param host_id: The host_id of this HdfsDetail.
        :type host_id: str
        """

        self._host_id = host_id

    @property
    def host_name(self):
        """Gets the host_name of this HdfsDetail.


        :return: The host_name of this HdfsDetail.
        :rtype: str
        """
        return self._host_name

    @host_name.setter
    def host_name(self, host_name):
        """Sets the host_name of this HdfsDetail.


        :param host_name: The host_name of this HdfsDetail.
        :type host_name: str
        """
        if host_name is None:
            raise ValueError("Invalid value for `host_name`, must not be `None`")

        self._host_name = host_name

    @property
    def includes(self):
        """Gets the includes of this HdfsDetail.


        :return: The includes of this HdfsDetail.
        :rtype: List[str]
        """
        return self._includes

    @includes.setter
    def includes(self, includes):
        """Sets the includes of this HdfsDetail.


        :param includes: The includes of this HdfsDetail.
        :type includes: List[str]
        """
        if includes is None:
            raise ValueError("Invalid value for `includes`, must not be `None`")

        self._includes = includes

    @property
    def is_effective_sla_domain_retention_locked(self):
        """Gets the is_effective_sla_domain_retention_locked of this HdfsDetail.

        An optional Boolean value that specifies whether the effective SLA Domain of a HDFS directory is Retention Locked. When this value is 'true,' the SLA Domain is retention locked. When this value is 'false,' the SLA Domain is not Retention Locked.

        :return: The is_effective_sla_domain_retention_locked of this HdfsDetail.
        :rtype: bool
        """
        return self._is_effective_sla_domain_retention_locked

    @is_effective_sla_domain_retention_locked.setter
    def is_effective_sla_domain_retention_locked(self, is_effective_sla_domain_retention_locked):
        """Sets the is_effective_sla_domain_retention_locked of this HdfsDetail.

        An optional Boolean value that specifies whether the effective SLA Domain of a HDFS directory is Retention Locked. When this value is 'true,' the SLA Domain is retention locked. When this value is 'false,' the SLA Domain is not Retention Locked.

        :param is_effective_sla_domain_retention_locked: The is_effective_sla_domain_retention_locked of this HdfsDetail.
        :type is_effective_sla_domain_retention_locked: bool
        """

        self._is_effective_sla_domain_retention_locked = is_effective_sla_domain_retention_locked

    @property
    def is_relic(self):
        """Gets the is_relic of this HdfsDetail.


        :return: The is_relic of this HdfsDetail.
        :rtype: bool
        """
        return self._is_relic

    @is_relic.setter
    def is_relic(self, is_relic):
        """Sets the is_relic of this HdfsDetail.


        :param is_relic: The is_relic of this HdfsDetail.
        :type is_relic: bool
        """
        if is_relic is None:
            raise ValueError("Invalid value for `is_relic`, must not be `None`")

        self._is_relic = is_relic

    @property
    def template_id(self):
        """Gets the template_id of this HdfsDetail.


        :return: The template_id of this HdfsDetail.
        :rtype: str
        """
        return self._template_id

    @template_id.setter
    def template_id(self, template_id):
        """Sets the template_id of this HdfsDetail.


        :param template_id: The template_id of this HdfsDetail.
        :type template_id: str
        """
        if template_id is None:
            raise ValueError("Invalid value for `template_id`, must not be `None`")

        self._template_id = template_id

    @property
    def template_name(self):
        """Gets the template_name of this HdfsDetail.


        :return: The template_name of this HdfsDetail.
        :rtype: str
        """
        return self._template_name

    @template_name.setter
    def template_name(self, template_name):
        """Sets the template_name of this HdfsDetail.


        :param template_name: The template_name of this HdfsDetail.
        :type template_name: str
        """
        if template_name is None:
            raise ValueError("Invalid value for `template_name`, must not be `None`")

        self._template_name = template_name

    @property
    def local_storage(self):
        """Gets the local_storage of this HdfsDetail.


        :return: The local_storage of this HdfsDetail.
        :rtype: int
        """
        return self._local_storage

    @local_storage.setter
    def local_storage(self, local_storage):
        """Sets the local_storage of this HdfsDetail.


        :param local_storage: The local_storage of this HdfsDetail.
        :type local_storage: int
        """

        self._local_storage = local_storage

    @property
    def protection_date(self):
        """Gets the protection_date of this HdfsDetail.


        :return: The protection_date of this HdfsDetail.
        :rtype: datetime
        """
        return self._protection_date

    @protection_date.setter
    def protection_date(self, protection_date):
        """Sets the protection_date of this HdfsDetail.


        :param protection_date: The protection_date of this HdfsDetail.
        :type protection_date: datetime
        """

        self._protection_date = protection_date

    @property
    def snapshot_count(self):
        """Gets the snapshot_count of this HdfsDetail.


        :return: The snapshot_count of this HdfsDetail.
        :rtype: int
        """
        return self._snapshot_count

    @snapshot_count.setter
    def snapshot_count(self, snapshot_count):
        """Sets the snapshot_count of this HdfsDetail.


        :param snapshot_count: The snapshot_count of this HdfsDetail.
        :type snapshot_count: int
        """
        if snapshot_count is None:
            raise ValueError("Invalid value for `snapshot_count`, must not be `None`")

        self._snapshot_count = snapshot_count

    @property
    def snapshots(self):
        """Gets the snapshots of this HdfsDetail.


        :return: The snapshots of this HdfsDetail.
        :rtype: List[HdfsSnapshotSummary]
        """
        return self._snapshots

    @snapshots.setter
    def snapshots(self, snapshots):
        """Sets the snapshots of this HdfsDetail.


        :param snapshots: The snapshots of this HdfsDetail.
        :type snapshots: List[HdfsSnapshotSummary]
        """

        self._snapshots = snapshots
