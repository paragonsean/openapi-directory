# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.configured_sla_type import ConfiguredSlaType
from openapi_server.models.managed_hierarchy_object_ancestor import ManagedHierarchyObjectAncestor
from openapi_server import util


class ManagedHierarchyObjectSummary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, configured_sla_domain_id: str=None, configured_sla_domain_name: str=None, configured_sla_domain_type: ConfiguredSlaType=None, id: str=None, is_configured_sla_domain_retention_locked: bool=None, name: str=None, primary_cluster_id: str=None, sla_last_update_time: datetime=None, effective_sla_domain_id: str=None, effective_sla_domain_name: str=None, effective_sla_domain_polaris_managed_id: str=None, effective_sla_source_object_id: str=None, effective_sla_source_object_name: str=None, is_effective_sla_domain_retention_locked: bool=None, retention_sla_domain_id: str=None, sla_assignment: str=None, infra_path: List[ManagedHierarchyObjectAncestor]=None, is_deleted: bool=None, is_relic: bool=None, sla_path: List[ManagedHierarchyObjectAncestor]=None):
        """ManagedHierarchyObjectSummary - a model defined in OpenAPI

        :param configured_sla_domain_id: The configured_sla_domain_id of this ManagedHierarchyObjectSummary.
        :param configured_sla_domain_name: The configured_sla_domain_name of this ManagedHierarchyObjectSummary.
        :param configured_sla_domain_type: The configured_sla_domain_type of this ManagedHierarchyObjectSummary.
        :param id: The id of this ManagedHierarchyObjectSummary.
        :param is_configured_sla_domain_retention_locked: The is_configured_sla_domain_retention_locked of this ManagedHierarchyObjectSummary.
        :param name: The name of this ManagedHierarchyObjectSummary.
        :param primary_cluster_id: The primary_cluster_id of this ManagedHierarchyObjectSummary.
        :param sla_last_update_time: The sla_last_update_time of this ManagedHierarchyObjectSummary.
        :param effective_sla_domain_id: The effective_sla_domain_id of this ManagedHierarchyObjectSummary.
        :param effective_sla_domain_name: The effective_sla_domain_name of this ManagedHierarchyObjectSummary.
        :param effective_sla_domain_polaris_managed_id: The effective_sla_domain_polaris_managed_id of this ManagedHierarchyObjectSummary.
        :param effective_sla_source_object_id: The effective_sla_source_object_id of this ManagedHierarchyObjectSummary.
        :param effective_sla_source_object_name: The effective_sla_source_object_name of this ManagedHierarchyObjectSummary.
        :param is_effective_sla_domain_retention_locked: The is_effective_sla_domain_retention_locked of this ManagedHierarchyObjectSummary.
        :param retention_sla_domain_id: The retention_sla_domain_id of this ManagedHierarchyObjectSummary.
        :param sla_assignment: The sla_assignment of this ManagedHierarchyObjectSummary.
        :param infra_path: The infra_path of this ManagedHierarchyObjectSummary.
        :param is_deleted: The is_deleted of this ManagedHierarchyObjectSummary.
        :param is_relic: The is_relic of this ManagedHierarchyObjectSummary.
        :param sla_path: The sla_path of this ManagedHierarchyObjectSummary.
        """
        self.openapi_types = {
            'configured_sla_domain_id': str,
            'configured_sla_domain_name': str,
            'configured_sla_domain_type': ConfiguredSlaType,
            'id': str,
            'is_configured_sla_domain_retention_locked': bool,
            'name': str,
            'primary_cluster_id': str,
            'sla_last_update_time': datetime,
            'effective_sla_domain_id': str,
            'effective_sla_domain_name': str,
            'effective_sla_domain_polaris_managed_id': str,
            'effective_sla_source_object_id': str,
            'effective_sla_source_object_name': str,
            'is_effective_sla_domain_retention_locked': bool,
            'retention_sla_domain_id': str,
            'sla_assignment': str,
            'infra_path': List[ManagedHierarchyObjectAncestor],
            'is_deleted': bool,
            'is_relic': bool,
            'sla_path': List[ManagedHierarchyObjectAncestor]
        }

        self.attribute_map = {
            'configured_sla_domain_id': 'configuredSlaDomainId',
            'configured_sla_domain_name': 'configuredSlaDomainName',
            'configured_sla_domain_type': 'configuredSlaDomainType',
            'id': 'id',
            'is_configured_sla_domain_retention_locked': 'isConfiguredSlaDomainRetentionLocked',
            'name': 'name',
            'primary_cluster_id': 'primaryClusterId',
            'sla_last_update_time': 'slaLastUpdateTime',
            'effective_sla_domain_id': 'effectiveSlaDomainId',
            'effective_sla_domain_name': 'effectiveSlaDomainName',
            'effective_sla_domain_polaris_managed_id': 'effectiveSlaDomainPolarisManagedId',
            'effective_sla_source_object_id': 'effectiveSlaSourceObjectId',
            'effective_sla_source_object_name': 'effectiveSlaSourceObjectName',
            'is_effective_sla_domain_retention_locked': 'isEffectiveSlaDomainRetentionLocked',
            'retention_sla_domain_id': 'retentionSlaDomainId',
            'sla_assignment': 'slaAssignment',
            'infra_path': 'infraPath',
            'is_deleted': 'isDeleted',
            'is_relic': 'isRelic',
            'sla_path': 'slaPath'
        }

        self._configured_sla_domain_id = configured_sla_domain_id
        self._configured_sla_domain_name = configured_sla_domain_name
        self._configured_sla_domain_type = configured_sla_domain_type
        self._id = id
        self._is_configured_sla_domain_retention_locked = is_configured_sla_domain_retention_locked
        self._name = name
        self._primary_cluster_id = primary_cluster_id
        self._sla_last_update_time = sla_last_update_time
        self._effective_sla_domain_id = effective_sla_domain_id
        self._effective_sla_domain_name = effective_sla_domain_name
        self._effective_sla_domain_polaris_managed_id = effective_sla_domain_polaris_managed_id
        self._effective_sla_source_object_id = effective_sla_source_object_id
        self._effective_sla_source_object_name = effective_sla_source_object_name
        self._is_effective_sla_domain_retention_locked = is_effective_sla_domain_retention_locked
        self._retention_sla_domain_id = retention_sla_domain_id
        self._sla_assignment = sla_assignment
        self._infra_path = infra_path
        self._is_deleted = is_deleted
        self._is_relic = is_relic
        self._sla_path = sla_path

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ManagedHierarchyObjectSummary':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ManagedHierarchyObjectSummary of this ManagedHierarchyObjectSummary.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def configured_sla_domain_id(self):
        """Gets the configured_sla_domain_id of this ManagedHierarchyObjectSummary.

        The ID of the SLA Domain configured directly on the Rubrik object.

        :return: The configured_sla_domain_id of this ManagedHierarchyObjectSummary.
        :rtype: str
        """
        return self._configured_sla_domain_id

    @configured_sla_domain_id.setter
    def configured_sla_domain_id(self, configured_sla_domain_id):
        """Sets the configured_sla_domain_id of this ManagedHierarchyObjectSummary.

        The ID of the SLA Domain configured directly on the Rubrik object.

        :param configured_sla_domain_id: The configured_sla_domain_id of this ManagedHierarchyObjectSummary.
        :type configured_sla_domain_id: str
        """
        if configured_sla_domain_id is None:
            raise ValueError("Invalid value for `configured_sla_domain_id`, must not be `None`")

        self._configured_sla_domain_id = configured_sla_domain_id

    @property
    def configured_sla_domain_name(self):
        """Gets the configured_sla_domain_name of this ManagedHierarchyObjectSummary.

        The name of the SLA Domain configured directly on the Rubrik object.

        :return: The configured_sla_domain_name of this ManagedHierarchyObjectSummary.
        :rtype: str
        """
        return self._configured_sla_domain_name

    @configured_sla_domain_name.setter
    def configured_sla_domain_name(self, configured_sla_domain_name):
        """Sets the configured_sla_domain_name of this ManagedHierarchyObjectSummary.

        The name of the SLA Domain configured directly on the Rubrik object.

        :param configured_sla_domain_name: The configured_sla_domain_name of this ManagedHierarchyObjectSummary.
        :type configured_sla_domain_name: str
        """
        if configured_sla_domain_name is None:
            raise ValueError("Invalid value for `configured_sla_domain_name`, must not be `None`")

        self._configured_sla_domain_name = configured_sla_domain_name

    @property
    def configured_sla_domain_type(self):
        """Gets the configured_sla_domain_type of this ManagedHierarchyObjectSummary.


        :return: The configured_sla_domain_type of this ManagedHierarchyObjectSummary.
        :rtype: ConfiguredSlaType
        """
        return self._configured_sla_domain_type

    @configured_sla_domain_type.setter
    def configured_sla_domain_type(self, configured_sla_domain_type):
        """Sets the configured_sla_domain_type of this ManagedHierarchyObjectSummary.


        :param configured_sla_domain_type: The configured_sla_domain_type of this ManagedHierarchyObjectSummary.
        :type configured_sla_domain_type: ConfiguredSlaType
        """

        self._configured_sla_domain_type = configured_sla_domain_type

    @property
    def id(self):
        """Gets the id of this ManagedHierarchyObjectSummary.

        The ID of the Rubrik object.

        :return: The id of this ManagedHierarchyObjectSummary.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ManagedHierarchyObjectSummary.

        The ID of the Rubrik object.

        :param id: The id of this ManagedHierarchyObjectSummary.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def is_configured_sla_domain_retention_locked(self):
        """Gets the is_configured_sla_domain_retention_locked of this ManagedHierarchyObjectSummary.

        Indicates whether the configured SLA Domain is Retention Locked. When this value is 'true', the configured SLA Domain is a Retention Lock SLA Domain.

        :return: The is_configured_sla_domain_retention_locked of this ManagedHierarchyObjectSummary.
        :rtype: bool
        """
        return self._is_configured_sla_domain_retention_locked

    @is_configured_sla_domain_retention_locked.setter
    def is_configured_sla_domain_retention_locked(self, is_configured_sla_domain_retention_locked):
        """Sets the is_configured_sla_domain_retention_locked of this ManagedHierarchyObjectSummary.

        Indicates whether the configured SLA Domain is Retention Locked. When this value is 'true', the configured SLA Domain is a Retention Lock SLA Domain.

        :param is_configured_sla_domain_retention_locked: The is_configured_sla_domain_retention_locked of this ManagedHierarchyObjectSummary.
        :type is_configured_sla_domain_retention_locked: bool
        """

        self._is_configured_sla_domain_retention_locked = is_configured_sla_domain_retention_locked

    @property
    def name(self):
        """Gets the name of this ManagedHierarchyObjectSummary.

        The name of the Rubrik object.

        :return: The name of this ManagedHierarchyObjectSummary.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ManagedHierarchyObjectSummary.

        The name of the Rubrik object.

        :param name: The name of this ManagedHierarchyObjectSummary.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def primary_cluster_id(self):
        """Gets the primary_cluster_id of this ManagedHierarchyObjectSummary.

        The ID of the cluster that manages the Rubrik object.

        :return: The primary_cluster_id of this ManagedHierarchyObjectSummary.
        :rtype: str
        """
        return self._primary_cluster_id

    @primary_cluster_id.setter
    def primary_cluster_id(self, primary_cluster_id):
        """Sets the primary_cluster_id of this ManagedHierarchyObjectSummary.

        The ID of the cluster that manages the Rubrik object.

        :param primary_cluster_id: The primary_cluster_id of this ManagedHierarchyObjectSummary.
        :type primary_cluster_id: str
        """
        if primary_cluster_id is None:
            raise ValueError("Invalid value for `primary_cluster_id`, must not be `None`")

        self._primary_cluster_id = primary_cluster_id

    @property
    def sla_last_update_time(self):
        """Gets the sla_last_update_time of this ManagedHierarchyObjectSummary.

        The UTC time when the SLA Domain was last updated.

        :return: The sla_last_update_time of this ManagedHierarchyObjectSummary.
        :rtype: datetime
        """
        return self._sla_last_update_time

    @sla_last_update_time.setter
    def sla_last_update_time(self, sla_last_update_time):
        """Sets the sla_last_update_time of this ManagedHierarchyObjectSummary.

        The UTC time when the SLA Domain was last updated.

        :param sla_last_update_time: The sla_last_update_time of this ManagedHierarchyObjectSummary.
        :type sla_last_update_time: datetime
        """

        self._sla_last_update_time = sla_last_update_time

    @property
    def effective_sla_domain_id(self):
        """Gets the effective_sla_domain_id of this ManagedHierarchyObjectSummary.

        The ID of the SLA Domain that controls the protection of the Rubrik object.

        :return: The effective_sla_domain_id of this ManagedHierarchyObjectSummary.
        :rtype: str
        """
        return self._effective_sla_domain_id

    @effective_sla_domain_id.setter
    def effective_sla_domain_id(self, effective_sla_domain_id):
        """Sets the effective_sla_domain_id of this ManagedHierarchyObjectSummary.

        The ID of the SLA Domain that controls the protection of the Rubrik object.

        :param effective_sla_domain_id: The effective_sla_domain_id of this ManagedHierarchyObjectSummary.
        :type effective_sla_domain_id: str
        """
        if effective_sla_domain_id is None:
            raise ValueError("Invalid value for `effective_sla_domain_id`, must not be `None`")

        self._effective_sla_domain_id = effective_sla_domain_id

    @property
    def effective_sla_domain_name(self):
        """Gets the effective_sla_domain_name of this ManagedHierarchyObjectSummary.

        The name of the SLA Domain that controls the protection of the Rubrik object.

        :return: The effective_sla_domain_name of this ManagedHierarchyObjectSummary.
        :rtype: str
        """
        return self._effective_sla_domain_name

    @effective_sla_domain_name.setter
    def effective_sla_domain_name(self, effective_sla_domain_name):
        """Sets the effective_sla_domain_name of this ManagedHierarchyObjectSummary.

        The name of the SLA Domain that controls the protection of the Rubrik object.

        :param effective_sla_domain_name: The effective_sla_domain_name of this ManagedHierarchyObjectSummary.
        :type effective_sla_domain_name: str
        """
        if effective_sla_domain_name is None:
            raise ValueError("Invalid value for `effective_sla_domain_name`, must not be `None`")

        self._effective_sla_domain_name = effective_sla_domain_name

    @property
    def effective_sla_domain_polaris_managed_id(self):
        """Gets the effective_sla_domain_polaris_managed_id of this ManagedHierarchyObjectSummary.

        Optional. This field contains the managed ID of of the Polaris-managed effective SLA Domain.

        :return: The effective_sla_domain_polaris_managed_id of this ManagedHierarchyObjectSummary.
        :rtype: str
        """
        return self._effective_sla_domain_polaris_managed_id

    @effective_sla_domain_polaris_managed_id.setter
    def effective_sla_domain_polaris_managed_id(self, effective_sla_domain_polaris_managed_id):
        """Sets the effective_sla_domain_polaris_managed_id of this ManagedHierarchyObjectSummary.

        Optional. This field contains the managed ID of of the Polaris-managed effective SLA Domain.

        :param effective_sla_domain_polaris_managed_id: The effective_sla_domain_polaris_managed_id of this ManagedHierarchyObjectSummary.
        :type effective_sla_domain_polaris_managed_id: str
        """

        self._effective_sla_domain_polaris_managed_id = effective_sla_domain_polaris_managed_id

    @property
    def effective_sla_source_object_id(self):
        """Gets the effective_sla_source_object_id of this ManagedHierarchyObjectSummary.

        The ID of the parent of the Rubrik object from which the SLA Domain that controls the protection of Rubrik object is inherited.

        :return: The effective_sla_source_object_id of this ManagedHierarchyObjectSummary.
        :rtype: str
        """
        return self._effective_sla_source_object_id

    @effective_sla_source_object_id.setter
    def effective_sla_source_object_id(self, effective_sla_source_object_id):
        """Sets the effective_sla_source_object_id of this ManagedHierarchyObjectSummary.

        The ID of the parent of the Rubrik object from which the SLA Domain that controls the protection of Rubrik object is inherited.

        :param effective_sla_source_object_id: The effective_sla_source_object_id of this ManagedHierarchyObjectSummary.
        :type effective_sla_source_object_id: str
        """

        self._effective_sla_source_object_id = effective_sla_source_object_id

    @property
    def effective_sla_source_object_name(self):
        """Gets the effective_sla_source_object_name of this ManagedHierarchyObjectSummary.

        The name of the parent of the Rubrik object from which the SLA Domain that controls the protection of Rubrik object is inherited.

        :return: The effective_sla_source_object_name of this ManagedHierarchyObjectSummary.
        :rtype: str
        """
        return self._effective_sla_source_object_name

    @effective_sla_source_object_name.setter
    def effective_sla_source_object_name(self, effective_sla_source_object_name):
        """Sets the effective_sla_source_object_name of this ManagedHierarchyObjectSummary.

        The name of the parent of the Rubrik object from which the SLA Domain that controls the protection of Rubrik object is inherited.

        :param effective_sla_source_object_name: The effective_sla_source_object_name of this ManagedHierarchyObjectSummary.
        :type effective_sla_source_object_name: str
        """

        self._effective_sla_source_object_name = effective_sla_source_object_name

    @property
    def is_effective_sla_domain_retention_locked(self):
        """Gets the is_effective_sla_domain_retention_locked of this ManagedHierarchyObjectSummary.

        Indicates whether the effective SLA Domain is Retention Locked. When this value is 'true', the effective SLA domain is a Retention Lock SLA Domain.

        :return: The is_effective_sla_domain_retention_locked of this ManagedHierarchyObjectSummary.
        :rtype: bool
        """
        return self._is_effective_sla_domain_retention_locked

    @is_effective_sla_domain_retention_locked.setter
    def is_effective_sla_domain_retention_locked(self, is_effective_sla_domain_retention_locked):
        """Sets the is_effective_sla_domain_retention_locked of this ManagedHierarchyObjectSummary.

        Indicates whether the effective SLA Domain is Retention Locked. When this value is 'true', the effective SLA domain is a Retention Lock SLA Domain.

        :param is_effective_sla_domain_retention_locked: The is_effective_sla_domain_retention_locked of this ManagedHierarchyObjectSummary.
        :type is_effective_sla_domain_retention_locked: bool
        """

        self._is_effective_sla_domain_retention_locked = is_effective_sla_domain_retention_locked

    @property
    def retention_sla_domain_id(self):
        """Gets the retention_sla_domain_id of this ManagedHierarchyObjectSummary.

        The ID of the SLA Domain whose retention policy is in use.

        :return: The retention_sla_domain_id of this ManagedHierarchyObjectSummary.
        :rtype: str
        """
        return self._retention_sla_domain_id

    @retention_sla_domain_id.setter
    def retention_sla_domain_id(self, retention_sla_domain_id):
        """Sets the retention_sla_domain_id of this ManagedHierarchyObjectSummary.

        The ID of the SLA Domain whose retention policy is in use.

        :param retention_sla_domain_id: The retention_sla_domain_id of this ManagedHierarchyObjectSummary.
        :type retention_sla_domain_id: str
        """

        self._retention_sla_domain_id = retention_sla_domain_id

    @property
    def sla_assignment(self):
        """Gets the sla_assignment of this ManagedHierarchyObjectSummary.

        The SLA assignment type. Direct SLA assignment means that a SLA Domain was configured directly on the Rubrik object by the user. Derived SLA assignment means that the Rubrik object inherits an SLA Domain from its parent Rubrik object.

        :return: The sla_assignment of this ManagedHierarchyObjectSummary.
        :rtype: str
        """
        return self._sla_assignment

    @sla_assignment.setter
    def sla_assignment(self, sla_assignment):
        """Sets the sla_assignment of this ManagedHierarchyObjectSummary.

        The SLA assignment type. Direct SLA assignment means that a SLA Domain was configured directly on the Rubrik object by the user. Derived SLA assignment means that the Rubrik object inherits an SLA Domain from its parent Rubrik object.

        :param sla_assignment: The sla_assignment of this ManagedHierarchyObjectSummary.
        :type sla_assignment: str
        """
        allowed_values = ["Derived", "Direct", "Unassigned"]  # noqa: E501
        if sla_assignment not in allowed_values:
            raise ValueError(
                "Invalid value for `sla_assignment` ({0}), must be one of {1}"
                .format(sla_assignment, allowed_values)
            )

        self._sla_assignment = sla_assignment

    @property
    def infra_path(self):
        """Gets the infra_path of this ManagedHierarchyObjectSummary.


        :return: The infra_path of this ManagedHierarchyObjectSummary.
        :rtype: List[ManagedHierarchyObjectAncestor]
        """
        return self._infra_path

    @infra_path.setter
    def infra_path(self, infra_path):
        """Sets the infra_path of this ManagedHierarchyObjectSummary.


        :param infra_path: The infra_path of this ManagedHierarchyObjectSummary.
        :type infra_path: List[ManagedHierarchyObjectAncestor]
        """

        self._infra_path = infra_path

    @property
    def is_deleted(self):
        """Gets the is_deleted of this ManagedHierarchyObjectSummary.

        Indicates whether the managed hierarchy object is deleted.

        :return: The is_deleted of this ManagedHierarchyObjectSummary.
        :rtype: bool
        """
        return self._is_deleted

    @is_deleted.setter
    def is_deleted(self, is_deleted):
        """Sets the is_deleted of this ManagedHierarchyObjectSummary.

        Indicates whether the managed hierarchy object is deleted.

        :param is_deleted: The is_deleted of this ManagedHierarchyObjectSummary.
        :type is_deleted: bool
        """
        if is_deleted is None:
            raise ValueError("Invalid value for `is_deleted`, must not be `None`")

        self._is_deleted = is_deleted

    @property
    def is_relic(self):
        """Gets the is_relic of this ManagedHierarchyObjectSummary.

        Whether this managed object is a relic (an archived snappable with unexpired snapshots).

        :return: The is_relic of this ManagedHierarchyObjectSummary.
        :rtype: bool
        """
        return self._is_relic

    @is_relic.setter
    def is_relic(self, is_relic):
        """Sets the is_relic of this ManagedHierarchyObjectSummary.

        Whether this managed object is a relic (an archived snappable with unexpired snapshots).

        :param is_relic: The is_relic of this ManagedHierarchyObjectSummary.
        :type is_relic: bool
        """
        if is_relic is None:
            raise ValueError("Invalid value for `is_relic`, must not be `None`")

        self._is_relic = is_relic

    @property
    def sla_path(self):
        """Gets the sla_path of this ManagedHierarchyObjectSummary.


        :return: The sla_path of this ManagedHierarchyObjectSummary.
        :rtype: List[ManagedHierarchyObjectAncestor]
        """
        return self._sla_path

    @sla_path.setter
    def sla_path(self, sla_path):
        """Sets the sla_path of this ManagedHierarchyObjectSummary.


        :param sla_path: The sla_path of this ManagedHierarchyObjectSummary.
        :type sla_path: List[ManagedHierarchyObjectAncestor]
        """

        self._sla_path = sla_path
