# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.frequency_change_rates import FrequencyChangeRates
from openapi_server import util


class ForecastAssumptions(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, annual_growth_rate_in_percent: float=None, compression_factor: float=None, frequency_change_rates: FrequencyChangeRates=None, logical_data_size_in_gb: float=None):
        """ForecastAssumptions - a model defined in OpenAPI

        :param annual_growth_rate_in_percent: The annual_growth_rate_in_percent of this ForecastAssumptions.
        :param compression_factor: The compression_factor of this ForecastAssumptions.
        :param frequency_change_rates: The frequency_change_rates of this ForecastAssumptions.
        :param logical_data_size_in_gb: The logical_data_size_in_gb of this ForecastAssumptions.
        """
        self.openapi_types = {
            'annual_growth_rate_in_percent': float,
            'compression_factor': float,
            'frequency_change_rates': FrequencyChangeRates,
            'logical_data_size_in_gb': float
        }

        self.attribute_map = {
            'annual_growth_rate_in_percent': 'annualGrowthRateInPercent',
            'compression_factor': 'compressionFactor',
            'frequency_change_rates': 'frequencyChangeRates',
            'logical_data_size_in_gb': 'logicalDataSizeInGB'
        }

        self._annual_growth_rate_in_percent = annual_growth_rate_in_percent
        self._compression_factor = compression_factor
        self._frequency_change_rates = frequency_change_rates
        self._logical_data_size_in_gb = logical_data_size_in_gb

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ForecastAssumptions':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ForecastAssumptions of this ForecastAssumptions.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def annual_growth_rate_in_percent(self):
        """Gets the annual_growth_rate_in_percent of this ForecastAssumptions.

        Annual growth rate of protected data.

        :return: The annual_growth_rate_in_percent of this ForecastAssumptions.
        :rtype: float
        """
        return self._annual_growth_rate_in_percent

    @annual_growth_rate_in_percent.setter
    def annual_growth_rate_in_percent(self, annual_growth_rate_in_percent):
        """Sets the annual_growth_rate_in_percent of this ForecastAssumptions.

        Annual growth rate of protected data.

        :param annual_growth_rate_in_percent: The annual_growth_rate_in_percent of this ForecastAssumptions.
        :type annual_growth_rate_in_percent: float
        """
        if annual_growth_rate_in_percent is None:
            raise ValueError("Invalid value for `annual_growth_rate_in_percent`, must not be `None`")
        if annual_growth_rate_in_percent is not None and annual_growth_rate_in_percent < 0:
            raise ValueError("Invalid value for `annual_growth_rate_in_percent`, must be a value greater than or equal to `0`")

        self._annual_growth_rate_in_percent = annual_growth_rate_in_percent

    @property
    def compression_factor(self):
        """Gets the compression_factor of this ForecastAssumptions.

        Data compression factor.

        :return: The compression_factor of this ForecastAssumptions.
        :rtype: float
        """
        return self._compression_factor

    @compression_factor.setter
    def compression_factor(self, compression_factor):
        """Sets the compression_factor of this ForecastAssumptions.

        Data compression factor.

        :param compression_factor: The compression_factor of this ForecastAssumptions.
        :type compression_factor: float
        """
        if compression_factor is None:
            raise ValueError("Invalid value for `compression_factor`, must not be `None`")

        self._compression_factor = compression_factor

    @property
    def frequency_change_rates(self):
        """Gets the frequency_change_rates of this ForecastAssumptions.


        :return: The frequency_change_rates of this ForecastAssumptions.
        :rtype: FrequencyChangeRates
        """
        return self._frequency_change_rates

    @frequency_change_rates.setter
    def frequency_change_rates(self, frequency_change_rates):
        """Sets the frequency_change_rates of this ForecastAssumptions.


        :param frequency_change_rates: The frequency_change_rates of this ForecastAssumptions.
        :type frequency_change_rates: FrequencyChangeRates
        """
        if frequency_change_rates is None:
            raise ValueError("Invalid value for `frequency_change_rates`, must not be `None`")

        self._frequency_change_rates = frequency_change_rates

    @property
    def logical_data_size_in_gb(self):
        """Gets the logical_data_size_in_gb of this ForecastAssumptions.

        Logical data size protected by the SLA Domain.

        :return: The logical_data_size_in_gb of this ForecastAssumptions.
        :rtype: float
        """
        return self._logical_data_size_in_gb

    @logical_data_size_in_gb.setter
    def logical_data_size_in_gb(self, logical_data_size_in_gb):
        """Sets the logical_data_size_in_gb of this ForecastAssumptions.

        Logical data size protected by the SLA Domain.

        :param logical_data_size_in_gb: The logical_data_size_in_gb of this ForecastAssumptions.
        :type logical_data_size_in_gb: float
        """
        if logical_data_size_in_gb is None:
            raise ValueError("Invalid value for `logical_data_size_in_gb`, must not be `None`")
        if logical_data_size_in_gb is not None and logical_data_size_in_gb < 0:
            raise ValueError("Invalid value for `logical_data_size_in_gb`, must be a value greater than or equal to `0`")

        self._logical_data_size_in_gb = logical_data_size_in_gb
