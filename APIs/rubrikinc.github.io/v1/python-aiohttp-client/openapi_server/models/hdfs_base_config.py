# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.hdfs_host import HdfsHost
from openapi_server import util


class HdfsBaseConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, api_token: str=None, hosts: List[HdfsHost]=None, kerberos_ticket: str=None, nameservices: str=None, username: str=None):
        """HdfsBaseConfig - a model defined in OpenAPI

        :param api_token: The api_token of this HdfsBaseConfig.
        :param hosts: The hosts of this HdfsBaseConfig.
        :param kerberos_ticket: The kerberos_ticket of this HdfsBaseConfig.
        :param nameservices: The nameservices of this HdfsBaseConfig.
        :param username: The username of this HdfsBaseConfig.
        """
        self.openapi_types = {
            'api_token': str,
            'hosts': List[HdfsHost],
            'kerberos_ticket': str,
            'nameservices': str,
            'username': str
        }

        self.attribute_map = {
            'api_token': 'apiToken',
            'hosts': 'hosts',
            'kerberos_ticket': 'kerberosTicket',
            'nameservices': 'nameservices',
            'username': 'username'
        }

        self._api_token = api_token
        self._hosts = hosts
        self._kerberos_ticket = kerberos_ticket
        self._nameservices = nameservices
        self._username = username

    @classmethod
    def from_dict(cls, dikt: dict) -> 'HdfsBaseConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The HdfsBaseConfig of this HdfsBaseConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def api_token(self):
        """Gets the api_token of this HdfsBaseConfig.

        API token to access Hdfs.

        :return: The api_token of this HdfsBaseConfig.
        :rtype: str
        """
        return self._api_token

    @api_token.setter
    def api_token(self, api_token):
        """Sets the api_token of this HdfsBaseConfig.

        API token to access Hdfs.

        :param api_token: The api_token of this HdfsBaseConfig.
        :type api_token: str
        """

        self._api_token = api_token

    @property
    def hosts(self):
        """Gets the hosts of this HdfsBaseConfig.

        List of Hdfs Namenode Hosts.

        :return: The hosts of this HdfsBaseConfig.
        :rtype: List[HdfsHost]
        """
        return self._hosts

    @hosts.setter
    def hosts(self, hosts):
        """Sets the hosts of this HdfsBaseConfig.

        List of Hdfs Namenode Hosts.

        :param hosts: The hosts of this HdfsBaseConfig.
        :type hosts: List[HdfsHost]
        """
        if hosts is None:
            raise ValueError("Invalid value for `hosts`, must not be `None`")

        self._hosts = hosts

    @property
    def kerberos_ticket(self):
        """Gets the kerberos_ticket of this HdfsBaseConfig.

        Ticket Cache Path of Kerberos Ticket.

        :return: The kerberos_ticket of this HdfsBaseConfig.
        :rtype: str
        """
        return self._kerberos_ticket

    @kerberos_ticket.setter
    def kerberos_ticket(self, kerberos_ticket):
        """Sets the kerberos_ticket of this HdfsBaseConfig.

        Ticket Cache Path of Kerberos Ticket.

        :param kerberos_ticket: The kerberos_ticket of this HdfsBaseConfig.
        :type kerberos_ticket: str
        """

        self._kerberos_ticket = kerberos_ticket

    @property
    def nameservices(self):
        """Gets the nameservices of this HdfsBaseConfig.

        Logical name for nameservice for Hdfs HA.

        :return: The nameservices of this HdfsBaseConfig.
        :rtype: str
        """
        return self._nameservices

    @nameservices.setter
    def nameservices(self, nameservices):
        """Sets the nameservices of this HdfsBaseConfig.

        Logical name for nameservice for Hdfs HA.

        :param nameservices: The nameservices of this HdfsBaseConfig.
        :type nameservices: str
        """

        self._nameservices = nameservices

    @property
    def username(self):
        """Gets the username of this HdfsBaseConfig.

        Username to access Hdfs API.

        :return: The username of this HdfsBaseConfig.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this HdfsBaseConfig.

        Username to access Hdfs API.

        :param username: The username of this HdfsBaseConfig.
        :type username: str
        """

        self._username = username
