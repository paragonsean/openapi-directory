# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.archival_tiering_spec import ArchivalTieringSpec
from openapi_server import util


class ArchivalSpecV2(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, archival_threshold: int=None, archival_tiering_spec: ArchivalTieringSpec=None, is_passthrough_supported: bool=None, location_id: str=None, location_name: str=None, polaris_managed_id: str=None):
        """ArchivalSpecV2 - a model defined in OpenAPI

        :param archival_threshold: The archival_threshold of this ArchivalSpecV2.
        :param archival_tiering_spec: The archival_tiering_spec of this ArchivalSpecV2.
        :param is_passthrough_supported: The is_passthrough_supported of this ArchivalSpecV2.
        :param location_id: The location_id of this ArchivalSpecV2.
        :param location_name: The location_name of this ArchivalSpecV2.
        :param polaris_managed_id: The polaris_managed_id of this ArchivalSpecV2.
        """
        self.openapi_types = {
            'archival_threshold': int,
            'archival_tiering_spec': ArchivalTieringSpec,
            'is_passthrough_supported': bool,
            'location_id': str,
            'location_name': str,
            'polaris_managed_id': str
        }

        self.attribute_map = {
            'archival_threshold': 'archivalThreshold',
            'archival_tiering_spec': 'archivalTieringSpec',
            'is_passthrough_supported': 'isPassthroughSupported',
            'location_id': 'locationId',
            'location_name': 'locationName',
            'polaris_managed_id': 'polarisManagedId'
        }

        self._archival_threshold = archival_threshold
        self._archival_tiering_spec = archival_tiering_spec
        self._is_passthrough_supported = is_passthrough_supported
        self._location_id = location_id
        self._location_name = location_name
        self._polaris_managed_id = polaris_managed_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ArchivalSpecV2':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ArchivalSpecV2 of this ArchivalSpecV2.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def archival_threshold(self):
        """Gets the archival_threshold of this ArchivalSpecV2.

        Amount of time, in seconds, after which the snapshot must be uploaded.

        :return: The archival_threshold of this ArchivalSpecV2.
        :rtype: int
        """
        return self._archival_threshold

    @archival_threshold.setter
    def archival_threshold(self, archival_threshold):
        """Sets the archival_threshold of this ArchivalSpecV2.

        Amount of time, in seconds, after which the snapshot must be uploaded.

        :param archival_threshold: The archival_threshold of this ArchivalSpecV2.
        :type archival_threshold: int
        """
        if archival_threshold is None:
            raise ValueError("Invalid value for `archival_threshold`, must not be `None`")

        self._archival_threshold = archival_threshold

    @property
    def archival_tiering_spec(self):
        """Gets the archival_tiering_spec of this ArchivalSpecV2.


        :return: The archival_tiering_spec of this ArchivalSpecV2.
        :rtype: ArchivalTieringSpec
        """
        return self._archival_tiering_spec

    @archival_tiering_spec.setter
    def archival_tiering_spec(self, archival_tiering_spec):
        """Sets the archival_tiering_spec of this ArchivalSpecV2.


        :param archival_tiering_spec: The archival_tiering_spec of this ArchivalSpecV2.
        :type archival_tiering_spec: ArchivalTieringSpec
        """

        self._archival_tiering_spec = archival_tiering_spec

    @property
    def is_passthrough_supported(self):
        """Gets the is_passthrough_supported of this ArchivalSpecV2.

        Boolean value that indicates if the archival location type supports direct archive backups. 

        :return: The is_passthrough_supported of this ArchivalSpecV2.
        :rtype: bool
        """
        return self._is_passthrough_supported

    @is_passthrough_supported.setter
    def is_passthrough_supported(self, is_passthrough_supported):
        """Sets the is_passthrough_supported of this ArchivalSpecV2.

        Boolean value that indicates if the archival location type supports direct archive backups. 

        :param is_passthrough_supported: The is_passthrough_supported of this ArchivalSpecV2.
        :type is_passthrough_supported: bool
        """

        self._is_passthrough_supported = is_passthrough_supported

    @property
    def location_id(self):
        """Gets the location_id of this ArchivalSpecV2.


        :return: The location_id of this ArchivalSpecV2.
        :rtype: str
        """
        return self._location_id

    @location_id.setter
    def location_id(self, location_id):
        """Sets the location_id of this ArchivalSpecV2.


        :param location_id: The location_id of this ArchivalSpecV2.
        :type location_id: str
        """

        self._location_id = location_id

    @property
    def location_name(self):
        """Gets the location_name of this ArchivalSpecV2.


        :return: The location_name of this ArchivalSpecV2.
        :rtype: str
        """
        return self._location_name

    @location_name.setter
    def location_name(self, location_name):
        """Sets the location_name of this ArchivalSpecV2.


        :param location_name: The location_name of this ArchivalSpecV2.
        :type location_name: str
        """

        self._location_name = location_name

    @property
    def polaris_managed_id(self):
        """Gets the polaris_managed_id of this ArchivalSpecV2.

        The Polaris managed ID of an archival location. At least one of the parameters locationId and polarisManagedId must be defined to correctly refer to an archival location. 

        :return: The polaris_managed_id of this ArchivalSpecV2.
        :rtype: str
        """
        return self._polaris_managed_id

    @polaris_managed_id.setter
    def polaris_managed_id(self, polaris_managed_id):
        """Sets the polaris_managed_id of this ArchivalSpecV2.

        The Polaris managed ID of an archival location. At least one of the parameters locationId and polarisManagedId must be defined to correctly refer to an archival location. 

        :param polaris_managed_id: The polaris_managed_id of this ArchivalSpecV2.
        :type polaris_managed_id: str
        """

        self._polaris_managed_id = polaris_managed_id
