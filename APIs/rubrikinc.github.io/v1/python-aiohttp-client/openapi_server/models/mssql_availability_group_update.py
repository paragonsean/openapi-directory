# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MssqlAvailabilityGroupUpdate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, copy_only: bool=None, log_backup_frequency_in_seconds: int=None, log_retention_hours: int=None, configured_sla_domain_id: str=None, use_configured_default_log_retention: bool=None):
        """MssqlAvailabilityGroupUpdate - a model defined in OpenAPI

        :param copy_only: The copy_only of this MssqlAvailabilityGroupUpdate.
        :param log_backup_frequency_in_seconds: The log_backup_frequency_in_seconds of this MssqlAvailabilityGroupUpdate.
        :param log_retention_hours: The log_retention_hours of this MssqlAvailabilityGroupUpdate.
        :param configured_sla_domain_id: The configured_sla_domain_id of this MssqlAvailabilityGroupUpdate.
        :param use_configured_default_log_retention: The use_configured_default_log_retention of this MssqlAvailabilityGroupUpdate.
        """
        self.openapi_types = {
            'copy_only': bool,
            'log_backup_frequency_in_seconds': int,
            'log_retention_hours': int,
            'configured_sla_domain_id': str,
            'use_configured_default_log_retention': bool
        }

        self.attribute_map = {
            'copy_only': 'copyOnly',
            'log_backup_frequency_in_seconds': 'logBackupFrequencyInSeconds',
            'log_retention_hours': 'logRetentionHours',
            'configured_sla_domain_id': 'configuredSlaDomainId',
            'use_configured_default_log_retention': 'useConfiguredDefaultLogRetention'
        }

        self._copy_only = copy_only
        self._log_backup_frequency_in_seconds = log_backup_frequency_in_seconds
        self._log_retention_hours = log_retention_hours
        self._configured_sla_domain_id = configured_sla_domain_id
        self._use_configured_default_log_retention = use_configured_default_log_retention

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MssqlAvailabilityGroupUpdate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MssqlAvailabilityGroupUpdate of this MssqlAvailabilityGroupUpdate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def copy_only(self):
        """Gets the copy_only of this MssqlAvailabilityGroupUpdate.

        Boolean value that specifies whether or not to perform copy-only backups of the database. When true, database backups are copy-only backups. When false, database backups are full backups.

        :return: The copy_only of this MssqlAvailabilityGroupUpdate.
        :rtype: bool
        """
        return self._copy_only

    @copy_only.setter
    def copy_only(self, copy_only):
        """Sets the copy_only of this MssqlAvailabilityGroupUpdate.

        Boolean value that specifies whether or not to perform copy-only backups of the database. When true, database backups are copy-only backups. When false, database backups are full backups.

        :param copy_only: The copy_only of this MssqlAvailabilityGroupUpdate.
        :type copy_only: bool
        """

        self._copy_only = copy_only

    @property
    def log_backup_frequency_in_seconds(self):
        """Gets the log_backup_frequency_in_seconds of this MssqlAvailabilityGroupUpdate.

        Seconds between two log backups. A value of 0 disables log backup.

        :return: The log_backup_frequency_in_seconds of this MssqlAvailabilityGroupUpdate.
        :rtype: int
        """
        return self._log_backup_frequency_in_seconds

    @log_backup_frequency_in_seconds.setter
    def log_backup_frequency_in_seconds(self, log_backup_frequency_in_seconds):
        """Sets the log_backup_frequency_in_seconds of this MssqlAvailabilityGroupUpdate.

        Seconds between two log backups. A value of 0 disables log backup.

        :param log_backup_frequency_in_seconds: The log_backup_frequency_in_seconds of this MssqlAvailabilityGroupUpdate.
        :type log_backup_frequency_in_seconds: int
        """

        self._log_backup_frequency_in_seconds = log_backup_frequency_in_seconds

    @property
    def log_retention_hours(self):
        """Gets the log_retention_hours of this MssqlAvailabilityGroupUpdate.

        Number of hours to retain a log backup. When the value is set to -1 the Rubrik cluster retains the log backup until the database snapshots that precede the log backup have expired.

        :return: The log_retention_hours of this MssqlAvailabilityGroupUpdate.
        :rtype: int
        """
        return self._log_retention_hours

    @log_retention_hours.setter
    def log_retention_hours(self, log_retention_hours):
        """Sets the log_retention_hours of this MssqlAvailabilityGroupUpdate.

        Number of hours to retain a log backup. When the value is set to -1 the Rubrik cluster retains the log backup until the database snapshots that precede the log backup have expired.

        :param log_retention_hours: The log_retention_hours of this MssqlAvailabilityGroupUpdate.
        :type log_retention_hours: int
        """

        self._log_retention_hours = log_retention_hours

    @property
    def configured_sla_domain_id(self):
        """Gets the configured_sla_domain_id of this MssqlAvailabilityGroupUpdate.

        SLA Domain ID assigned to instance. Existing snapshots of the instance will be retained with the configuration of specified SLA Domain.

        :return: The configured_sla_domain_id of this MssqlAvailabilityGroupUpdate.
        :rtype: str
        """
        return self._configured_sla_domain_id

    @configured_sla_domain_id.setter
    def configured_sla_domain_id(self, configured_sla_domain_id):
        """Sets the configured_sla_domain_id of this MssqlAvailabilityGroupUpdate.

        SLA Domain ID assigned to instance. Existing snapshots of the instance will be retained with the configuration of specified SLA Domain.

        :param configured_sla_domain_id: The configured_sla_domain_id of this MssqlAvailabilityGroupUpdate.
        :type configured_sla_domain_id: str
        """

        self._configured_sla_domain_id = configured_sla_domain_id

    @property
    def use_configured_default_log_retention(self):
        """Gets the use_configured_default_log_retention of this MssqlAvailabilityGroupUpdate.

        Determines whether to use the configured default value of log backup retention.

        :return: The use_configured_default_log_retention of this MssqlAvailabilityGroupUpdate.
        :rtype: bool
        """
        return self._use_configured_default_log_retention

    @use_configured_default_log_retention.setter
    def use_configured_default_log_retention(self, use_configured_default_log_retention):
        """Sets the use_configured_default_log_retention of this MssqlAvailabilityGroupUpdate.

        Determines whether to use the configured default value of log backup retention.

        :param use_configured_default_log_retention: The use_configured_default_log_retention of this MssqlAvailabilityGroupUpdate.
        :type use_configured_default_log_retention: bool
        """

        self._use_configured_default_log_retention = use_configured_default_log_retention
