# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class IdProviderAuthDomainInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, metadata_xml_base64: str=None, skewness_in_sec: int=300, name: str=None):
        """IdProviderAuthDomainInfo - a model defined in OpenAPI

        :param metadata_xml_base64: The metadata_xml_base64 of this IdProviderAuthDomainInfo.
        :param skewness_in_sec: The skewness_in_sec of this IdProviderAuthDomainInfo.
        :param name: The name of this IdProviderAuthDomainInfo.
        """
        self.openapi_types = {
            'metadata_xml_base64': str,
            'skewness_in_sec': int,
            'name': str
        }

        self.attribute_map = {
            'metadata_xml_base64': 'metadataXmlBase64',
            'skewness_in_sec': 'skewnessInSec',
            'name': 'name'
        }

        self._metadata_xml_base64 = metadata_xml_base64
        self._skewness_in_sec = skewness_in_sec
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IdProviderAuthDomainInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The IdProviderAuthDomainInfo of this IdProviderAuthDomainInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def metadata_xml_base64(self):
        """Gets the metadata_xml_base64 of this IdProviderAuthDomainInfo.

        Identity Provider (IdP) metadata XML file in a base64 encoded format.

        :return: The metadata_xml_base64 of this IdProviderAuthDomainInfo.
        :rtype: str
        """
        return self._metadata_xml_base64

    @metadata_xml_base64.setter
    def metadata_xml_base64(self, metadata_xml_base64):
        """Sets the metadata_xml_base64 of this IdProviderAuthDomainInfo.

        Identity Provider (IdP) metadata XML file in a base64 encoded format.

        :param metadata_xml_base64: The metadata_xml_base64 of this IdProviderAuthDomainInfo.
        :type metadata_xml_base64: str
        """
        if metadata_xml_base64 is None:
            raise ValueError("Invalid value for `metadata_xml_base64`, must not be `None`")

        self._metadata_xml_base64 = metadata_xml_base64

    @property
    def skewness_in_sec(self):
        """Gets the skewness_in_sec of this IdProviderAuthDomainInfo.

        The clock skewness tolerance, in seconds, between the Identity Provider (IdP) and the Rubrik cluster.

        :return: The skewness_in_sec of this IdProviderAuthDomainInfo.
        :rtype: int
        """
        return self._skewness_in_sec

    @skewness_in_sec.setter
    def skewness_in_sec(self, skewness_in_sec):
        """Sets the skewness_in_sec of this IdProviderAuthDomainInfo.

        The clock skewness tolerance, in seconds, between the Identity Provider (IdP) and the Rubrik cluster.

        :param skewness_in_sec: The skewness_in_sec of this IdProviderAuthDomainInfo.
        :type skewness_in_sec: int
        """
        if skewness_in_sec is not None and skewness_in_sec < 0:
            raise ValueError("Invalid value for `skewness_in_sec`, must be a value greater than or equal to `0`")

        self._skewness_in_sec = skewness_in_sec

    @property
    def name(self):
        """Gets the name of this IdProviderAuthDomainInfo.

        Human friendly name of the Id Provider (IdP).

        :return: The name of this IdProviderAuthDomainInfo.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this IdProviderAuthDomainInfo.

        Human friendly name of the Id Provider (IdP).

        :param name: The name of this IdProviderAuthDomainInfo.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name
