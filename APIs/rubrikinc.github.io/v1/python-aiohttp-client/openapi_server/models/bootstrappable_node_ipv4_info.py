# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BootstrappableNodeIpv4Info(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, hostname: str=None, ipv4: str=None):
        """BootstrappableNodeIpv4Info - a model defined in OpenAPI

        :param hostname: The hostname of this BootstrappableNodeIpv4Info.
        :param ipv4: The ipv4 of this BootstrappableNodeIpv4Info.
        """
        self.openapi_types = {
            'hostname': str,
            'ipv4': str
        }

        self.attribute_map = {
            'hostname': 'hostname',
            'ipv4': 'ipv4'
        }

        self._hostname = hostname
        self._ipv4 = ipv4

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BootstrappableNodeIpv4Info':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BootstrappableNodeIpv4Info of this BootstrappableNodeIpv4Info.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def hostname(self):
        """Gets the hostname of this BootstrappableNodeIpv4Info.

        Hostname of a Rubrik node.

        :return: The hostname of this BootstrappableNodeIpv4Info.
        :rtype: str
        """
        return self._hostname

    @hostname.setter
    def hostname(self, hostname):
        """Sets the hostname of this BootstrappableNodeIpv4Info.

        Hostname of a Rubrik node.

        :param hostname: The hostname of this BootstrappableNodeIpv4Info.
        :type hostname: str
        """
        if hostname is None:
            raise ValueError("Invalid value for `hostname`, must not be `None`")

        self._hostname = hostname

    @property
    def ipv4(self):
        """Gets the ipv4 of this BootstrappableNodeIpv4Info.

        IPv4 address of a Rubrik node.

        :return: The ipv4 of this BootstrappableNodeIpv4Info.
        :rtype: str
        """
        return self._ipv4

    @ipv4.setter
    def ipv4(self, ipv4):
        """Sets the ipv4 of this BootstrappableNodeIpv4Info.

        IPv4 address of a Rubrik node.

        :param ipv4: The ipv4 of this BootstrappableNodeIpv4Info.
        :type ipv4: str
        """
        if ipv4 is None:
            raise ValueError("Invalid value for `ipv4`, must not be `None`")

        self._ipv4 = ipv4
