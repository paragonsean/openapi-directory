# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DisablePerLocationPause(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, should_skip_old_snapshots: bool=None, source_cluster_uuids: List[str]=None):
        """DisablePerLocationPause - a model defined in OpenAPI

        :param should_skip_old_snapshots: The should_skip_old_snapshots of this DisablePerLocationPause.
        :param source_cluster_uuids: The source_cluster_uuids of this DisablePerLocationPause.
        """
        self.openapi_types = {
            'should_skip_old_snapshots': bool,
            'source_cluster_uuids': List[str]
        }

        self.attribute_map = {
            'should_skip_old_snapshots': 'shouldSkipOldSnapshots',
            'source_cluster_uuids': 'sourceClusterUuids'
        }

        self._should_skip_old_snapshots = should_skip_old_snapshots
        self._source_cluster_uuids = source_cluster_uuids

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DisablePerLocationPause':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DisablePerLocationPause of this DisablePerLocationPause.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def should_skip_old_snapshots(self):
        """Gets the should_skip_old_snapshots of this DisablePerLocationPause.

        Specifies whether to replicate snapshots taken during and before replication pause. When this value is 'true,' snapshots taken during and before the replication pause are not replicated. In all other cases, snapshots taken before and during the replication pause are replicated. 

        :return: The should_skip_old_snapshots of this DisablePerLocationPause.
        :rtype: bool
        """
        return self._should_skip_old_snapshots

    @should_skip_old_snapshots.setter
    def should_skip_old_snapshots(self, should_skip_old_snapshots):
        """Sets the should_skip_old_snapshots of this DisablePerLocationPause.

        Specifies whether to replicate snapshots taken during and before replication pause. When this value is 'true,' snapshots taken during and before the replication pause are not replicated. In all other cases, snapshots taken before and during the replication pause are replicated. 

        :param should_skip_old_snapshots: The should_skip_old_snapshots of this DisablePerLocationPause.
        :type should_skip_old_snapshots: bool
        """
        if should_skip_old_snapshots is None:
            raise ValueError("Invalid value for `should_skip_old_snapshots`, must not be `None`")

        self._should_skip_old_snapshots = should_skip_old_snapshots

    @property
    def source_cluster_uuids(self):
        """Gets the source_cluster_uuids of this DisablePerLocationPause.

        Replication from specified Rubrik clusters are resumed. Specified Rubrik clusters must be paused replication sources of local Rubrik cluster. 

        :return: The source_cluster_uuids of this DisablePerLocationPause.
        :rtype: List[str]
        """
        return self._source_cluster_uuids

    @source_cluster_uuids.setter
    def source_cluster_uuids(self, source_cluster_uuids):
        """Sets the source_cluster_uuids of this DisablePerLocationPause.

        Replication from specified Rubrik clusters are resumed. Specified Rubrik clusters must be paused replication sources of local Rubrik cluster. 

        :param source_cluster_uuids: The source_cluster_uuids of this DisablePerLocationPause.
        :type source_cluster_uuids: List[str]
        """
        if source_cluster_uuids is None:
            raise ValueError("Invalid value for `source_cluster_uuids`, must not be `None`")

        self._source_cluster_uuids = source_cluster_uuids
