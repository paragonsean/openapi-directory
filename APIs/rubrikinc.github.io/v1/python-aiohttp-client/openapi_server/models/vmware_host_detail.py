# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.configured_sla_type import ConfiguredSlaType
from openapi_server.models.data_center_summary import DataCenterSummary
from openapi_server.models.data_store_summary import DataStoreSummary
from openapi_server.models.host_filter_status import HostFilterStatus
from openapi_server.models.host_ui_filter_status import HostUiFilterStatus
from openapi_server.models.virtual_machine_summary import VirtualMachineSummary
from openapi_server import util


class VmwareHostDetail(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, configured_sla_domain_id: str=None, configured_sla_domain_name: str=None, configured_sla_domain_type: ConfiguredSlaType=None, id: str=None, is_configured_sla_domain_retention_locked: bool=None, name: str=None, primary_cluster_id: str=None, sla_last_update_time: datetime=None, effective_sla_domain_id: str=None, effective_sla_domain_name: str=None, effective_sla_domain_polaris_managed_id: str=None, effective_sla_source_object_id: str=None, effective_sla_source_object_name: str=None, is_effective_sla_domain_retention_locked: bool=None, compute_cluster_id: str=None, datacenter_id: str=None, datastores: List[DataStoreSummary]=None, esxi_version: str=None, io_filter_status: HostFilterStatus=None, io_filter_ui_status: HostUiFilterStatus=None, is_in_vmc: bool=None, datacenter: DataCenterSummary=None, moid: str=None, virtual_machines: List[VirtualMachineSummary]=None):
        """VmwareHostDetail - a model defined in OpenAPI

        :param configured_sla_domain_id: The configured_sla_domain_id of this VmwareHostDetail.
        :param configured_sla_domain_name: The configured_sla_domain_name of this VmwareHostDetail.
        :param configured_sla_domain_type: The configured_sla_domain_type of this VmwareHostDetail.
        :param id: The id of this VmwareHostDetail.
        :param is_configured_sla_domain_retention_locked: The is_configured_sla_domain_retention_locked of this VmwareHostDetail.
        :param name: The name of this VmwareHostDetail.
        :param primary_cluster_id: The primary_cluster_id of this VmwareHostDetail.
        :param sla_last_update_time: The sla_last_update_time of this VmwareHostDetail.
        :param effective_sla_domain_id: The effective_sla_domain_id of this VmwareHostDetail.
        :param effective_sla_domain_name: The effective_sla_domain_name of this VmwareHostDetail.
        :param effective_sla_domain_polaris_managed_id: The effective_sla_domain_polaris_managed_id of this VmwareHostDetail.
        :param effective_sla_source_object_id: The effective_sla_source_object_id of this VmwareHostDetail.
        :param effective_sla_source_object_name: The effective_sla_source_object_name of this VmwareHostDetail.
        :param is_effective_sla_domain_retention_locked: The is_effective_sla_domain_retention_locked of this VmwareHostDetail.
        :param compute_cluster_id: The compute_cluster_id of this VmwareHostDetail.
        :param datacenter_id: The datacenter_id of this VmwareHostDetail.
        :param datastores: The datastores of this VmwareHostDetail.
        :param esxi_version: The esxi_version of this VmwareHostDetail.
        :param io_filter_status: The io_filter_status of this VmwareHostDetail.
        :param io_filter_ui_status: The io_filter_ui_status of this VmwareHostDetail.
        :param is_in_vmc: The is_in_vmc of this VmwareHostDetail.
        :param datacenter: The datacenter of this VmwareHostDetail.
        :param moid: The moid of this VmwareHostDetail.
        :param virtual_machines: The virtual_machines of this VmwareHostDetail.
        """
        self.openapi_types = {
            'configured_sla_domain_id': str,
            'configured_sla_domain_name': str,
            'configured_sla_domain_type': ConfiguredSlaType,
            'id': str,
            'is_configured_sla_domain_retention_locked': bool,
            'name': str,
            'primary_cluster_id': str,
            'sla_last_update_time': datetime,
            'effective_sla_domain_id': str,
            'effective_sla_domain_name': str,
            'effective_sla_domain_polaris_managed_id': str,
            'effective_sla_source_object_id': str,
            'effective_sla_source_object_name': str,
            'is_effective_sla_domain_retention_locked': bool,
            'compute_cluster_id': str,
            'datacenter_id': str,
            'datastores': List[DataStoreSummary],
            'esxi_version': str,
            'io_filter_status': HostFilterStatus,
            'io_filter_ui_status': HostUiFilterStatus,
            'is_in_vmc': bool,
            'datacenter': DataCenterSummary,
            'moid': str,
            'virtual_machines': List[VirtualMachineSummary]
        }

        self.attribute_map = {
            'configured_sla_domain_id': 'configuredSlaDomainId',
            'configured_sla_domain_name': 'configuredSlaDomainName',
            'configured_sla_domain_type': 'configuredSlaDomainType',
            'id': 'id',
            'is_configured_sla_domain_retention_locked': 'isConfiguredSlaDomainRetentionLocked',
            'name': 'name',
            'primary_cluster_id': 'primaryClusterId',
            'sla_last_update_time': 'slaLastUpdateTime',
            'effective_sla_domain_id': 'effectiveSlaDomainId',
            'effective_sla_domain_name': 'effectiveSlaDomainName',
            'effective_sla_domain_polaris_managed_id': 'effectiveSlaDomainPolarisManagedId',
            'effective_sla_source_object_id': 'effectiveSlaSourceObjectId',
            'effective_sla_source_object_name': 'effectiveSlaSourceObjectName',
            'is_effective_sla_domain_retention_locked': 'isEffectiveSlaDomainRetentionLocked',
            'compute_cluster_id': 'computeClusterId',
            'datacenter_id': 'datacenterId',
            'datastores': 'datastores',
            'esxi_version': 'esxiVersion',
            'io_filter_status': 'ioFilterStatus',
            'io_filter_ui_status': 'ioFilterUiStatus',
            'is_in_vmc': 'isInVmc',
            'datacenter': 'datacenter',
            'moid': 'moid',
            'virtual_machines': 'virtualMachines'
        }

        self._configured_sla_domain_id = configured_sla_domain_id
        self._configured_sla_domain_name = configured_sla_domain_name
        self._configured_sla_domain_type = configured_sla_domain_type
        self._id = id
        self._is_configured_sla_domain_retention_locked = is_configured_sla_domain_retention_locked
        self._name = name
        self._primary_cluster_id = primary_cluster_id
        self._sla_last_update_time = sla_last_update_time
        self._effective_sla_domain_id = effective_sla_domain_id
        self._effective_sla_domain_name = effective_sla_domain_name
        self._effective_sla_domain_polaris_managed_id = effective_sla_domain_polaris_managed_id
        self._effective_sla_source_object_id = effective_sla_source_object_id
        self._effective_sla_source_object_name = effective_sla_source_object_name
        self._is_effective_sla_domain_retention_locked = is_effective_sla_domain_retention_locked
        self._compute_cluster_id = compute_cluster_id
        self._datacenter_id = datacenter_id
        self._datastores = datastores
        self._esxi_version = esxi_version
        self._io_filter_status = io_filter_status
        self._io_filter_ui_status = io_filter_ui_status
        self._is_in_vmc = is_in_vmc
        self._datacenter = datacenter
        self._moid = moid
        self._virtual_machines = virtual_machines

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VmwareHostDetail':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VmwareHostDetail of this VmwareHostDetail.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def configured_sla_domain_id(self):
        """Gets the configured_sla_domain_id of this VmwareHostDetail.

        The ID of the SLA Domain configured directly on the Rubrik object.

        :return: The configured_sla_domain_id of this VmwareHostDetail.
        :rtype: str
        """
        return self._configured_sla_domain_id

    @configured_sla_domain_id.setter
    def configured_sla_domain_id(self, configured_sla_domain_id):
        """Sets the configured_sla_domain_id of this VmwareHostDetail.

        The ID of the SLA Domain configured directly on the Rubrik object.

        :param configured_sla_domain_id: The configured_sla_domain_id of this VmwareHostDetail.
        :type configured_sla_domain_id: str
        """
        if configured_sla_domain_id is None:
            raise ValueError("Invalid value for `configured_sla_domain_id`, must not be `None`")

        self._configured_sla_domain_id = configured_sla_domain_id

    @property
    def configured_sla_domain_name(self):
        """Gets the configured_sla_domain_name of this VmwareHostDetail.

        The name of the SLA Domain configured directly on the Rubrik object.

        :return: The configured_sla_domain_name of this VmwareHostDetail.
        :rtype: str
        """
        return self._configured_sla_domain_name

    @configured_sla_domain_name.setter
    def configured_sla_domain_name(self, configured_sla_domain_name):
        """Sets the configured_sla_domain_name of this VmwareHostDetail.

        The name of the SLA Domain configured directly on the Rubrik object.

        :param configured_sla_domain_name: The configured_sla_domain_name of this VmwareHostDetail.
        :type configured_sla_domain_name: str
        """
        if configured_sla_domain_name is None:
            raise ValueError("Invalid value for `configured_sla_domain_name`, must not be `None`")

        self._configured_sla_domain_name = configured_sla_domain_name

    @property
    def configured_sla_domain_type(self):
        """Gets the configured_sla_domain_type of this VmwareHostDetail.


        :return: The configured_sla_domain_type of this VmwareHostDetail.
        :rtype: ConfiguredSlaType
        """
        return self._configured_sla_domain_type

    @configured_sla_domain_type.setter
    def configured_sla_domain_type(self, configured_sla_domain_type):
        """Sets the configured_sla_domain_type of this VmwareHostDetail.


        :param configured_sla_domain_type: The configured_sla_domain_type of this VmwareHostDetail.
        :type configured_sla_domain_type: ConfiguredSlaType
        """

        self._configured_sla_domain_type = configured_sla_domain_type

    @property
    def id(self):
        """Gets the id of this VmwareHostDetail.

        The ID of the Rubrik object.

        :return: The id of this VmwareHostDetail.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this VmwareHostDetail.

        The ID of the Rubrik object.

        :param id: The id of this VmwareHostDetail.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def is_configured_sla_domain_retention_locked(self):
        """Gets the is_configured_sla_domain_retention_locked of this VmwareHostDetail.

        Indicates whether the configured SLA Domain is Retention Locked. When this value is 'true', the configured SLA Domain is a Retention Lock SLA Domain.

        :return: The is_configured_sla_domain_retention_locked of this VmwareHostDetail.
        :rtype: bool
        """
        return self._is_configured_sla_domain_retention_locked

    @is_configured_sla_domain_retention_locked.setter
    def is_configured_sla_domain_retention_locked(self, is_configured_sla_domain_retention_locked):
        """Sets the is_configured_sla_domain_retention_locked of this VmwareHostDetail.

        Indicates whether the configured SLA Domain is Retention Locked. When this value is 'true', the configured SLA Domain is a Retention Lock SLA Domain.

        :param is_configured_sla_domain_retention_locked: The is_configured_sla_domain_retention_locked of this VmwareHostDetail.
        :type is_configured_sla_domain_retention_locked: bool
        """

        self._is_configured_sla_domain_retention_locked = is_configured_sla_domain_retention_locked

    @property
    def name(self):
        """Gets the name of this VmwareHostDetail.

        The name of the Rubrik object.

        :return: The name of this VmwareHostDetail.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this VmwareHostDetail.

        The name of the Rubrik object.

        :param name: The name of this VmwareHostDetail.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def primary_cluster_id(self):
        """Gets the primary_cluster_id of this VmwareHostDetail.

        The ID of the cluster that manages the Rubrik object.

        :return: The primary_cluster_id of this VmwareHostDetail.
        :rtype: str
        """
        return self._primary_cluster_id

    @primary_cluster_id.setter
    def primary_cluster_id(self, primary_cluster_id):
        """Sets the primary_cluster_id of this VmwareHostDetail.

        The ID of the cluster that manages the Rubrik object.

        :param primary_cluster_id: The primary_cluster_id of this VmwareHostDetail.
        :type primary_cluster_id: str
        """
        if primary_cluster_id is None:
            raise ValueError("Invalid value for `primary_cluster_id`, must not be `None`")

        self._primary_cluster_id = primary_cluster_id

    @property
    def sla_last_update_time(self):
        """Gets the sla_last_update_time of this VmwareHostDetail.

        The UTC time when the SLA Domain was last updated.

        :return: The sla_last_update_time of this VmwareHostDetail.
        :rtype: datetime
        """
        return self._sla_last_update_time

    @sla_last_update_time.setter
    def sla_last_update_time(self, sla_last_update_time):
        """Sets the sla_last_update_time of this VmwareHostDetail.

        The UTC time when the SLA Domain was last updated.

        :param sla_last_update_time: The sla_last_update_time of this VmwareHostDetail.
        :type sla_last_update_time: datetime
        """

        self._sla_last_update_time = sla_last_update_time

    @property
    def effective_sla_domain_id(self):
        """Gets the effective_sla_domain_id of this VmwareHostDetail.

        The ID of the SLA Domain that controls the protection of the Rubrik object.

        :return: The effective_sla_domain_id of this VmwareHostDetail.
        :rtype: str
        """
        return self._effective_sla_domain_id

    @effective_sla_domain_id.setter
    def effective_sla_domain_id(self, effective_sla_domain_id):
        """Sets the effective_sla_domain_id of this VmwareHostDetail.

        The ID of the SLA Domain that controls the protection of the Rubrik object.

        :param effective_sla_domain_id: The effective_sla_domain_id of this VmwareHostDetail.
        :type effective_sla_domain_id: str
        """
        if effective_sla_domain_id is None:
            raise ValueError("Invalid value for `effective_sla_domain_id`, must not be `None`")

        self._effective_sla_domain_id = effective_sla_domain_id

    @property
    def effective_sla_domain_name(self):
        """Gets the effective_sla_domain_name of this VmwareHostDetail.

        The name of the SLA Domain that controls the protection of the Rubrik object.

        :return: The effective_sla_domain_name of this VmwareHostDetail.
        :rtype: str
        """
        return self._effective_sla_domain_name

    @effective_sla_domain_name.setter
    def effective_sla_domain_name(self, effective_sla_domain_name):
        """Sets the effective_sla_domain_name of this VmwareHostDetail.

        The name of the SLA Domain that controls the protection of the Rubrik object.

        :param effective_sla_domain_name: The effective_sla_domain_name of this VmwareHostDetail.
        :type effective_sla_domain_name: str
        """
        if effective_sla_domain_name is None:
            raise ValueError("Invalid value for `effective_sla_domain_name`, must not be `None`")

        self._effective_sla_domain_name = effective_sla_domain_name

    @property
    def effective_sla_domain_polaris_managed_id(self):
        """Gets the effective_sla_domain_polaris_managed_id of this VmwareHostDetail.

        Optional. This field contains the managed ID of of the Polaris-managed effective SLA Domain.

        :return: The effective_sla_domain_polaris_managed_id of this VmwareHostDetail.
        :rtype: str
        """
        return self._effective_sla_domain_polaris_managed_id

    @effective_sla_domain_polaris_managed_id.setter
    def effective_sla_domain_polaris_managed_id(self, effective_sla_domain_polaris_managed_id):
        """Sets the effective_sla_domain_polaris_managed_id of this VmwareHostDetail.

        Optional. This field contains the managed ID of of the Polaris-managed effective SLA Domain.

        :param effective_sla_domain_polaris_managed_id: The effective_sla_domain_polaris_managed_id of this VmwareHostDetail.
        :type effective_sla_domain_polaris_managed_id: str
        """

        self._effective_sla_domain_polaris_managed_id = effective_sla_domain_polaris_managed_id

    @property
    def effective_sla_source_object_id(self):
        """Gets the effective_sla_source_object_id of this VmwareHostDetail.

        The ID of the parent of the Rubrik object from which the SLA Domain that controls the protection of Rubrik object is inherited.

        :return: The effective_sla_source_object_id of this VmwareHostDetail.
        :rtype: str
        """
        return self._effective_sla_source_object_id

    @effective_sla_source_object_id.setter
    def effective_sla_source_object_id(self, effective_sla_source_object_id):
        """Sets the effective_sla_source_object_id of this VmwareHostDetail.

        The ID of the parent of the Rubrik object from which the SLA Domain that controls the protection of Rubrik object is inherited.

        :param effective_sla_source_object_id: The effective_sla_source_object_id of this VmwareHostDetail.
        :type effective_sla_source_object_id: str
        """

        self._effective_sla_source_object_id = effective_sla_source_object_id

    @property
    def effective_sla_source_object_name(self):
        """Gets the effective_sla_source_object_name of this VmwareHostDetail.

        The name of the parent of the Rubrik object from which the SLA Domain that controls the protection of Rubrik object is inherited.

        :return: The effective_sla_source_object_name of this VmwareHostDetail.
        :rtype: str
        """
        return self._effective_sla_source_object_name

    @effective_sla_source_object_name.setter
    def effective_sla_source_object_name(self, effective_sla_source_object_name):
        """Sets the effective_sla_source_object_name of this VmwareHostDetail.

        The name of the parent of the Rubrik object from which the SLA Domain that controls the protection of Rubrik object is inherited.

        :param effective_sla_source_object_name: The effective_sla_source_object_name of this VmwareHostDetail.
        :type effective_sla_source_object_name: str
        """

        self._effective_sla_source_object_name = effective_sla_source_object_name

    @property
    def is_effective_sla_domain_retention_locked(self):
        """Gets the is_effective_sla_domain_retention_locked of this VmwareHostDetail.

        Indicates whether the effective SLA Domain is Retention Locked. When this value is 'true', the effective SLA domain is a Retention Lock SLA Domain.

        :return: The is_effective_sla_domain_retention_locked of this VmwareHostDetail.
        :rtype: bool
        """
        return self._is_effective_sla_domain_retention_locked

    @is_effective_sla_domain_retention_locked.setter
    def is_effective_sla_domain_retention_locked(self, is_effective_sla_domain_retention_locked):
        """Sets the is_effective_sla_domain_retention_locked of this VmwareHostDetail.

        Indicates whether the effective SLA Domain is Retention Locked. When this value is 'true', the effective SLA domain is a Retention Lock SLA Domain.

        :param is_effective_sla_domain_retention_locked: The is_effective_sla_domain_retention_locked of this VmwareHostDetail.
        :type is_effective_sla_domain_retention_locked: bool
        """

        self._is_effective_sla_domain_retention_locked = is_effective_sla_domain_retention_locked

    @property
    def compute_cluster_id(self):
        """Gets the compute_cluster_id of this VmwareHostDetail.


        :return: The compute_cluster_id of this VmwareHostDetail.
        :rtype: str
        """
        return self._compute_cluster_id

    @compute_cluster_id.setter
    def compute_cluster_id(self, compute_cluster_id):
        """Sets the compute_cluster_id of this VmwareHostDetail.


        :param compute_cluster_id: The compute_cluster_id of this VmwareHostDetail.
        :type compute_cluster_id: str
        """

        self._compute_cluster_id = compute_cluster_id

    @property
    def datacenter_id(self):
        """Gets the datacenter_id of this VmwareHostDetail.


        :return: The datacenter_id of this VmwareHostDetail.
        :rtype: str
        """
        return self._datacenter_id

    @datacenter_id.setter
    def datacenter_id(self, datacenter_id):
        """Sets the datacenter_id of this VmwareHostDetail.


        :param datacenter_id: The datacenter_id of this VmwareHostDetail.
        :type datacenter_id: str
        """

        self._datacenter_id = datacenter_id

    @property
    def datastores(self):
        """Gets the datastores of this VmwareHostDetail.


        :return: The datastores of this VmwareHostDetail.
        :rtype: List[DataStoreSummary]
        """
        return self._datastores

    @datastores.setter
    def datastores(self, datastores):
        """Sets the datastores of this VmwareHostDetail.


        :param datastores: The datastores of this VmwareHostDetail.
        :type datastores: List[DataStoreSummary]
        """

        self._datastores = datastores

    @property
    def esxi_version(self):
        """Gets the esxi_version of this VmwareHostDetail.

        API Version of the ESXi Host.

        :return: The esxi_version of this VmwareHostDetail.
        :rtype: str
        """
        return self._esxi_version

    @esxi_version.setter
    def esxi_version(self, esxi_version):
        """Sets the esxi_version of this VmwareHostDetail.

        API Version of the ESXi Host.

        :param esxi_version: The esxi_version of this VmwareHostDetail.
        :type esxi_version: str
        """

        self._esxi_version = esxi_version

    @property
    def io_filter_status(self):
        """Gets the io_filter_status of this VmwareHostDetail.


        :return: The io_filter_status of this VmwareHostDetail.
        :rtype: HostFilterStatus
        """
        return self._io_filter_status

    @io_filter_status.setter
    def io_filter_status(self, io_filter_status):
        """Sets the io_filter_status of this VmwareHostDetail.


        :param io_filter_status: The io_filter_status of this VmwareHostDetail.
        :type io_filter_status: HostFilterStatus
        """
        if io_filter_status is None:
            raise ValueError("Invalid value for `io_filter_status`, must not be `None`")

        self._io_filter_status = io_filter_status

    @property
    def io_filter_ui_status(self):
        """Gets the io_filter_ui_status of this VmwareHostDetail.


        :return: The io_filter_ui_status of this VmwareHostDetail.
        :rtype: HostUiFilterStatus
        """
        return self._io_filter_ui_status

    @io_filter_ui_status.setter
    def io_filter_ui_status(self, io_filter_ui_status):
        """Sets the io_filter_ui_status of this VmwareHostDetail.


        :param io_filter_ui_status: The io_filter_ui_status of this VmwareHostDetail.
        :type io_filter_ui_status: HostUiFilterStatus
        """

        self._io_filter_ui_status = io_filter_ui_status

    @property
    def is_in_vmc(self):
        """Gets the is_in_vmc of this VmwareHostDetail.


        :return: The is_in_vmc of this VmwareHostDetail.
        :rtype: bool
        """
        return self._is_in_vmc

    @is_in_vmc.setter
    def is_in_vmc(self, is_in_vmc):
        """Sets the is_in_vmc of this VmwareHostDetail.


        :param is_in_vmc: The is_in_vmc of this VmwareHostDetail.
        :type is_in_vmc: bool
        """

        self._is_in_vmc = is_in_vmc

    @property
    def datacenter(self):
        """Gets the datacenter of this VmwareHostDetail.


        :return: The datacenter of this VmwareHostDetail.
        :rtype: DataCenterSummary
        """
        return self._datacenter

    @datacenter.setter
    def datacenter(self, datacenter):
        """Sets the datacenter of this VmwareHostDetail.


        :param datacenter: The datacenter of this VmwareHostDetail.
        :type datacenter: DataCenterSummary
        """

        self._datacenter = datacenter

    @property
    def moid(self):
        """Gets the moid of this VmwareHostDetail.


        :return: The moid of this VmwareHostDetail.
        :rtype: str
        """
        return self._moid

    @moid.setter
    def moid(self, moid):
        """Sets the moid of this VmwareHostDetail.


        :param moid: The moid of this VmwareHostDetail.
        :type moid: str
        """

        self._moid = moid

    @property
    def virtual_machines(self):
        """Gets the virtual_machines of this VmwareHostDetail.


        :return: The virtual_machines of this VmwareHostDetail.
        :rtype: List[VirtualMachineSummary]
        """
        return self._virtual_machines

    @virtual_machines.setter
    def virtual_machines(self, virtual_machines):
        """Sets the virtual_machines of this VmwareHostDetail.


        :param virtual_machines: The virtual_machines of this VmwareHostDetail.
        :type virtual_machines: List[VirtualMachineSummary]
        """

        self._virtual_machines = virtual_machines
