# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SnappableRecoveryInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, is_refresh_in_progress_opt: bool=None, last_updated_time_opt: datetime=None, location_id: str=None, new_snappable_id: str=None, old_snappable_id: str=None):
        """SnappableRecoveryInfo - a model defined in OpenAPI

        :param is_refresh_in_progress_opt: The is_refresh_in_progress_opt of this SnappableRecoveryInfo.
        :param last_updated_time_opt: The last_updated_time_opt of this SnappableRecoveryInfo.
        :param location_id: The location_id of this SnappableRecoveryInfo.
        :param new_snappable_id: The new_snappable_id of this SnappableRecoveryInfo.
        :param old_snappable_id: The old_snappable_id of this SnappableRecoveryInfo.
        """
        self.openapi_types = {
            'is_refresh_in_progress_opt': bool,
            'last_updated_time_opt': datetime,
            'location_id': str,
            'new_snappable_id': str,
            'old_snappable_id': str
        }

        self.attribute_map = {
            'is_refresh_in_progress_opt': 'isRefreshInProgressOpt',
            'last_updated_time_opt': 'lastUpdatedTimeOpt',
            'location_id': 'locationId',
            'new_snappable_id': 'newSnappableId',
            'old_snappable_id': 'oldSnappableId'
        }

        self._is_refresh_in_progress_opt = is_refresh_in_progress_opt
        self._last_updated_time_opt = last_updated_time_opt
        self._location_id = location_id
        self._new_snappable_id = new_snappable_id
        self._old_snappable_id = old_snappable_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SnappableRecoveryInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SnappableRecoveryInfo of this SnappableRecoveryInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def is_refresh_in_progress_opt(self):
        """Gets the is_refresh_in_progress_opt of this SnappableRecoveryInfo.

        Indicates whether snapshot metadata refresh is in progress for this data source.

        :return: The is_refresh_in_progress_opt of this SnappableRecoveryInfo.
        :rtype: bool
        """
        return self._is_refresh_in_progress_opt

    @is_refresh_in_progress_opt.setter
    def is_refresh_in_progress_opt(self, is_refresh_in_progress_opt):
        """Sets the is_refresh_in_progress_opt of this SnappableRecoveryInfo.

        Indicates whether snapshot metadata refresh is in progress for this data source.

        :param is_refresh_in_progress_opt: The is_refresh_in_progress_opt of this SnappableRecoveryInfo.
        :type is_refresh_in_progress_opt: bool
        """

        self._is_refresh_in_progress_opt = is_refresh_in_progress_opt

    @property
    def last_updated_time_opt(self):
        """Gets the last_updated_time_opt of this SnappableRecoveryInfo.

        The time when the recovery infomation was updated.

        :return: The last_updated_time_opt of this SnappableRecoveryInfo.
        :rtype: datetime
        """
        return self._last_updated_time_opt

    @last_updated_time_opt.setter
    def last_updated_time_opt(self, last_updated_time_opt):
        """Sets the last_updated_time_opt of this SnappableRecoveryInfo.

        The time when the recovery infomation was updated.

        :param last_updated_time_opt: The last_updated_time_opt of this SnappableRecoveryInfo.
        :type last_updated_time_opt: datetime
        """

        self._last_updated_time_opt = last_updated_time_opt

    @property
    def location_id(self):
        """Gets the location_id of this SnappableRecoveryInfo.

        The reader location ID.

        :return: The location_id of this SnappableRecoveryInfo.
        :rtype: str
        """
        return self._location_id

    @location_id.setter
    def location_id(self, location_id):
        """Sets the location_id of this SnappableRecoveryInfo.

        The reader location ID.

        :param location_id: The location_id of this SnappableRecoveryInfo.
        :type location_id: str
        """
        if location_id is None:
            raise ValueError("Invalid value for `location_id`, must not be `None`")

        self._location_id = location_id

    @property
    def new_snappable_id(self):
        """Gets the new_snappable_id of this SnappableRecoveryInfo.

        The newly assigned ID of the recovered data source.

        :return: The new_snappable_id of this SnappableRecoveryInfo.
        :rtype: str
        """
        return self._new_snappable_id

    @new_snappable_id.setter
    def new_snappable_id(self, new_snappable_id):
        """Sets the new_snappable_id of this SnappableRecoveryInfo.

        The newly assigned ID of the recovered data source.

        :param new_snappable_id: The new_snappable_id of this SnappableRecoveryInfo.
        :type new_snappable_id: str
        """
        if new_snappable_id is None:
            raise ValueError("Invalid value for `new_snappable_id`, must not be `None`")

        self._new_snappable_id = new_snappable_id

    @property
    def old_snappable_id(self):
        """Gets the old_snappable_id of this SnappableRecoveryInfo.

        The original data source ID used in the owner cluster.

        :return: The old_snappable_id of this SnappableRecoveryInfo.
        :rtype: str
        """
        return self._old_snappable_id

    @old_snappable_id.setter
    def old_snappable_id(self, old_snappable_id):
        """Sets the old_snappable_id of this SnappableRecoveryInfo.

        The original data source ID used in the owner cluster.

        :param old_snappable_id: The old_snappable_id of this SnappableRecoveryInfo.
        :type old_snappable_id: str
        """
        if old_snappable_id is None:
            raise ValueError("Invalid value for `old_snappable_id`, must not be `None`")

        self._old_snappable_id = old_snappable_id
