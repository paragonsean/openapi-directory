# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class NasBaseConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, api_certificate: str=None, api_endpoint: str=None, api_hostname: str=None, api_username: str=None, is_isilon_changelist_enabled: bool=None, is_net_app_snap_diff_enabled: bool=None, is_share_auto_discovery_enabled: bool=None, vendor_type: str=None, zone_name: str=None):
        """NasBaseConfig - a model defined in OpenAPI

        :param api_certificate: The api_certificate of this NasBaseConfig.
        :param api_endpoint: The api_endpoint of this NasBaseConfig.
        :param api_hostname: The api_hostname of this NasBaseConfig.
        :param api_username: The api_username of this NasBaseConfig.
        :param is_isilon_changelist_enabled: The is_isilon_changelist_enabled of this NasBaseConfig.
        :param is_net_app_snap_diff_enabled: The is_net_app_snap_diff_enabled of this NasBaseConfig.
        :param is_share_auto_discovery_enabled: The is_share_auto_discovery_enabled of this NasBaseConfig.
        :param vendor_type: The vendor_type of this NasBaseConfig.
        :param zone_name: The zone_name of this NasBaseConfig.
        """
        self.openapi_types = {
            'api_certificate': str,
            'api_endpoint': str,
            'api_hostname': str,
            'api_username': str,
            'is_isilon_changelist_enabled': bool,
            'is_net_app_snap_diff_enabled': bool,
            'is_share_auto_discovery_enabled': bool,
            'vendor_type': str,
            'zone_name': str
        }

        self.attribute_map = {
            'api_certificate': 'apiCertificate',
            'api_endpoint': 'apiEndpoint',
            'api_hostname': 'apiHostname',
            'api_username': 'apiUsername',
            'is_isilon_changelist_enabled': 'isIsilonChangelistEnabled',
            'is_net_app_snap_diff_enabled': 'isNetAppSnapDiffEnabled',
            'is_share_auto_discovery_enabled': 'isShareAutoDiscoveryEnabled',
            'vendor_type': 'vendorType',
            'zone_name': 'zoneName'
        }

        self._api_certificate = api_certificate
        self._api_endpoint = api_endpoint
        self._api_hostname = api_hostname
        self._api_username = api_username
        self._is_isilon_changelist_enabled = is_isilon_changelist_enabled
        self._is_net_app_snap_diff_enabled = is_net_app_snap_diff_enabled
        self._is_share_auto_discovery_enabled = is_share_auto_discovery_enabled
        self._vendor_type = vendor_type
        self._zone_name = zone_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NasBaseConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NasBaseConfig of this NasBaseConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def api_certificate(self):
        """Gets the api_certificate of this NasBaseConfig.

        TLS certification to validate NAS server.

        :return: The api_certificate of this NasBaseConfig.
        :rtype: str
        """
        return self._api_certificate

    @api_certificate.setter
    def api_certificate(self, api_certificate):
        """Sets the api_certificate of this NasBaseConfig.

        TLS certification to validate NAS server.

        :param api_certificate: The api_certificate of this NasBaseConfig.
        :type api_certificate: str
        """

        self._api_certificate = api_certificate

    @property
    def api_endpoint(self):
        """Gets the api_endpoint of this NasBaseConfig.

        API endpoint to access NAS API 'FLASHBLADE'.

        :return: The api_endpoint of this NasBaseConfig.
        :rtype: str
        """
        return self._api_endpoint

    @api_endpoint.setter
    def api_endpoint(self, api_endpoint):
        """Sets the api_endpoint of this NasBaseConfig.

        API endpoint to access NAS API 'FLASHBLADE'.

        :param api_endpoint: The api_endpoint of this NasBaseConfig.
        :type api_endpoint: str
        """

        self._api_endpoint = api_endpoint

    @property
    def api_hostname(self):
        """Gets the api_hostname of this NasBaseConfig.

        Hostname or IP used in the NAS API calls.

        :return: The api_hostname of this NasBaseConfig.
        :rtype: str
        """
        return self._api_hostname

    @api_hostname.setter
    def api_hostname(self, api_hostname):
        """Sets the api_hostname of this NasBaseConfig.

        Hostname or IP used in the NAS API calls.

        :param api_hostname: The api_hostname of this NasBaseConfig.
        :type api_hostname: str
        """

        self._api_hostname = api_hostname

    @property
    def api_username(self):
        """Gets the api_username of this NasBaseConfig.

        Username to access NAS API.

        :return: The api_username of this NasBaseConfig.
        :rtype: str
        """
        return self._api_username

    @api_username.setter
    def api_username(self, api_username):
        """Sets the api_username of this NasBaseConfig.

        Username to access NAS API.

        :param api_username: The api_username of this NasBaseConfig.
        :type api_username: str
        """

        self._api_username = api_username

    @property
    def is_isilon_changelist_enabled(self):
        """Gets the is_isilon_changelist_enabled of this NasBaseConfig.

        Indicates if Changelist is enabled on Isilon NAS share. When this value is 'true', metadata fetches during backup operations use the Isilon Changelist feature. The Changelist feature improves incremental backup performance by tracking the difference between two snapshots, reducing the metadata scanning time during a backup job.

        :return: The is_isilon_changelist_enabled of this NasBaseConfig.
        :rtype: bool
        """
        return self._is_isilon_changelist_enabled

    @is_isilon_changelist_enabled.setter
    def is_isilon_changelist_enabled(self, is_isilon_changelist_enabled):
        """Sets the is_isilon_changelist_enabled of this NasBaseConfig.

        Indicates if Changelist is enabled on Isilon NAS share. When this value is 'true', metadata fetches during backup operations use the Isilon Changelist feature. The Changelist feature improves incremental backup performance by tracking the difference between two snapshots, reducing the metadata scanning time during a backup job.

        :param is_isilon_changelist_enabled: The is_isilon_changelist_enabled of this NasBaseConfig.
        :type is_isilon_changelist_enabled: bool
        """

        self._is_isilon_changelist_enabled = is_isilon_changelist_enabled

    @property
    def is_net_app_snap_diff_enabled(self):
        """Gets the is_net_app_snap_diff_enabled of this NasBaseConfig.

        Indicates if SnapDiff is enabled on NetApp NAS share. When this value is 'true', metadata fetches during backup operations use the NetApp SnapDiff feature. The SnapDiff feature improves incremental backup performance by tracking the difference between two snapshots, reducing the metadata scanning time during a backup job.

        :return: The is_net_app_snap_diff_enabled of this NasBaseConfig.
        :rtype: bool
        """
        return self._is_net_app_snap_diff_enabled

    @is_net_app_snap_diff_enabled.setter
    def is_net_app_snap_diff_enabled(self, is_net_app_snap_diff_enabled):
        """Sets the is_net_app_snap_diff_enabled of this NasBaseConfig.

        Indicates if SnapDiff is enabled on NetApp NAS share. When this value is 'true', metadata fetches during backup operations use the NetApp SnapDiff feature. The SnapDiff feature improves incremental backup performance by tracking the difference between two snapshots, reducing the metadata scanning time during a backup job.

        :param is_net_app_snap_diff_enabled: The is_net_app_snap_diff_enabled of this NasBaseConfig.
        :type is_net_app_snap_diff_enabled: bool
        """

        self._is_net_app_snap_diff_enabled = is_net_app_snap_diff_enabled

    @property
    def is_share_auto_discovery_enabled(self):
        """Gets the is_share_auto_discovery_enabled of this NasBaseConfig.

        Specifies whether shares on the NAS host are automatically discovered. When this value is 'true', Rubrik periodically (every 30 minutes by default) connects to the NAS host to discover NFS and SMB shares.

        :return: The is_share_auto_discovery_enabled of this NasBaseConfig.
        :rtype: bool
        """
        return self._is_share_auto_discovery_enabled

    @is_share_auto_discovery_enabled.setter
    def is_share_auto_discovery_enabled(self, is_share_auto_discovery_enabled):
        """Sets the is_share_auto_discovery_enabled of this NasBaseConfig.

        Specifies whether shares on the NAS host are automatically discovered. When this value is 'true', Rubrik periodically (every 30 minutes by default) connects to the NAS host to discover NFS and SMB shares.

        :param is_share_auto_discovery_enabled: The is_share_auto_discovery_enabled of this NasBaseConfig.
        :type is_share_auto_discovery_enabled: bool
        """

        self._is_share_auto_discovery_enabled = is_share_auto_discovery_enabled

    @property
    def vendor_type(self):
        """Gets the vendor_type of this NasBaseConfig.

        Type of NAS vendor 'ISILON/NETAPP/FLASHBLADE'.

        :return: The vendor_type of this NasBaseConfig.
        :rtype: str
        """
        return self._vendor_type

    @vendor_type.setter
    def vendor_type(self, vendor_type):
        """Sets the vendor_type of this NasBaseConfig.

        Type of NAS vendor 'ISILON/NETAPP/FLASHBLADE'.

        :param vendor_type: The vendor_type of this NasBaseConfig.
        :type vendor_type: str
        """
        if vendor_type is None:
            raise ValueError("Invalid value for `vendor_type`, must not be `None`")

        self._vendor_type = vendor_type

    @property
    def zone_name(self):
        """Gets the zone_name of this NasBaseConfig.

        Name of the Isilon zone that data IP belongs to.

        :return: The zone_name of this NasBaseConfig.
        :rtype: str
        """
        return self._zone_name

    @zone_name.setter
    def zone_name(self, zone_name):
        """Sets the zone_name of this NasBaseConfig.

        Name of the Isilon zone that data IP belongs to.

        :param zone_name: The zone_name of this NasBaseConfig.
        :type zone_name: str
        """

        self._zone_name = zone_name
