# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MssqlDbFileExportPath(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, export_path: str=None, logical_name: str=None, new_filename: str=None, new_logical_name: str=None):
        """MssqlDbFileExportPath - a model defined in OpenAPI

        :param export_path: The export_path of this MssqlDbFileExportPath.
        :param logical_name: The logical_name of this MssqlDbFileExportPath.
        :param new_filename: The new_filename of this MssqlDbFileExportPath.
        :param new_logical_name: The new_logical_name of this MssqlDbFileExportPath.
        """
        self.openapi_types = {
            'export_path': str,
            'logical_name': str,
            'new_filename': str,
            'new_logical_name': str
        }

        self.attribute_map = {
            'export_path': 'exportPath',
            'logical_name': 'logicalName',
            'new_filename': 'newFilename',
            'new_logical_name': 'newLogicalName'
        }

        self._export_path = export_path
        self._logical_name = logical_name
        self._new_filename = new_filename
        self._new_logical_name = new_logical_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MssqlDbFileExportPath':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MssqlDbFileExportPath of this MssqlDbFileExportPath.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def export_path(self):
        """Gets the export_path of this MssqlDbFileExportPath.

        The target path for the database file.

        :return: The export_path of this MssqlDbFileExportPath.
        :rtype: str
        """
        return self._export_path

    @export_path.setter
    def export_path(self, export_path):
        """Sets the export_path of this MssqlDbFileExportPath.

        The target path for the database file.

        :param export_path: The export_path of this MssqlDbFileExportPath.
        :type export_path: str
        """
        if export_path is None:
            raise ValueError("Invalid value for `export_path`, must not be `None`")

        self._export_path = export_path

    @property
    def logical_name(self):
        """Gets the logical_name of this MssqlDbFileExportPath.

        Logical name of the database file.

        :return: The logical_name of this MssqlDbFileExportPath.
        :rtype: str
        """
        return self._logical_name

    @logical_name.setter
    def logical_name(self, logical_name):
        """Sets the logical_name of this MssqlDbFileExportPath.

        Logical name of the database file.

        :param logical_name: The logical_name of this MssqlDbFileExportPath.
        :type logical_name: str
        """
        if logical_name is None:
            raise ValueError("Invalid value for `logical_name`, must not be `None`")

        self._logical_name = logical_name

    @property
    def new_filename(self):
        """Gets the new_filename of this MssqlDbFileExportPath.

        New filename for the database file.

        :return: The new_filename of this MssqlDbFileExportPath.
        :rtype: str
        """
        return self._new_filename

    @new_filename.setter
    def new_filename(self, new_filename):
        """Sets the new_filename of this MssqlDbFileExportPath.

        New filename for the database file.

        :param new_filename: The new_filename of this MssqlDbFileExportPath.
        :type new_filename: str
        """

        self._new_filename = new_filename

    @property
    def new_logical_name(self):
        """Gets the new_logical_name of this MssqlDbFileExportPath.

        New logical name for the database file.

        :return: The new_logical_name of this MssqlDbFileExportPath.
        :rtype: str
        """
        return self._new_logical_name

    @new_logical_name.setter
    def new_logical_name(self, new_logical_name):
        """Sets the new_logical_name of this MssqlDbFileExportPath.

        New logical name for the database file.

        :param new_logical_name: The new_logical_name of this MssqlDbFileExportPath.
        :type new_logical_name: str
        """

        self._new_logical_name = new_logical_name
