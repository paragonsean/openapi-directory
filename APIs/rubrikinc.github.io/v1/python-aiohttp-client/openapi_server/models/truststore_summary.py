# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.certificate_summary import CertificateSummary
from openapi_server.models.truststore_type import TruststoreType
from openapi_server import util


class TruststoreSummary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, certificates: List[CertificateSummary]=None, truststore_type: TruststoreType=None):
        """TruststoreSummary - a model defined in OpenAPI

        :param certificates: The certificates of this TruststoreSummary.
        :param truststore_type: The truststore_type of this TruststoreSummary.
        """
        self.openapi_types = {
            'certificates': List[CertificateSummary],
            'truststore_type': TruststoreType
        }

        self.attribute_map = {
            'certificates': 'certificates',
            'truststore_type': 'truststoreType'
        }

        self._certificates = certificates
        self._truststore_type = truststore_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TruststoreSummary':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TruststoreSummary of this TruststoreSummary.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def certificates(self):
        """Gets the certificates of this TruststoreSummary.

        Signed certificate associated with truststore.

        :return: The certificates of this TruststoreSummary.
        :rtype: List[CertificateSummary]
        """
        return self._certificates

    @certificates.setter
    def certificates(self, certificates):
        """Sets the certificates of this TruststoreSummary.

        Signed certificate associated with truststore.

        :param certificates: The certificates of this TruststoreSummary.
        :type certificates: List[CertificateSummary]
        """
        if certificates is None:
            raise ValueError("Invalid value for `certificates`, must not be `None`")

        self._certificates = certificates

    @property
    def truststore_type(self):
        """Gets the truststore_type of this TruststoreSummary.


        :return: The truststore_type of this TruststoreSummary.
        :rtype: TruststoreType
        """
        return self._truststore_type

    @truststore_type.setter
    def truststore_type(self, truststore_type):
        """Sets the truststore_type of this TruststoreSummary.


        :param truststore_type: The truststore_type of this TruststoreSummary.
        :type truststore_type: TruststoreType
        """
        if truststore_type is None:
            raise ValueError("Invalid value for `truststore_type`, must not be `None`")

        self._truststore_type = truststore_type
