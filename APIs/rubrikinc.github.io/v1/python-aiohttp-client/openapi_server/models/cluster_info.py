# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.cluster_geolocation import ClusterGeolocation
from openapi_server.models.cluster_timezone import ClusterTimezone
from openapi_server import util


class ClusterInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, accepted_eula_version: str=None, api_version: str=None, geolocation: ClusterGeolocation=None, id: str=None, latest_eula_version: str=None, name: str=None, timezone: ClusterTimezone=None, version: str=None):
        """ClusterInfo - a model defined in OpenAPI

        :param accepted_eula_version: The accepted_eula_version of this ClusterInfo.
        :param api_version: The api_version of this ClusterInfo.
        :param geolocation: The geolocation of this ClusterInfo.
        :param id: The id of this ClusterInfo.
        :param latest_eula_version: The latest_eula_version of this ClusterInfo.
        :param name: The name of this ClusterInfo.
        :param timezone: The timezone of this ClusterInfo.
        :param version: The version of this ClusterInfo.
        """
        self.openapi_types = {
            'accepted_eula_version': str,
            'api_version': str,
            'geolocation': ClusterGeolocation,
            'id': str,
            'latest_eula_version': str,
            'name': str,
            'timezone': ClusterTimezone,
            'version': str
        }

        self.attribute_map = {
            'accepted_eula_version': 'acceptedEulaVersion',
            'api_version': 'apiVersion',
            'geolocation': 'geolocation',
            'id': 'id',
            'latest_eula_version': 'latestEulaVersion',
            'name': 'name',
            'timezone': 'timezone',
            'version': 'version'
        }

        self._accepted_eula_version = accepted_eula_version
        self._api_version = api_version
        self._geolocation = geolocation
        self._id = id
        self._latest_eula_version = latest_eula_version
        self._name = name
        self._timezone = timezone
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ClusterInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ClusterInfo of this ClusterInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def accepted_eula_version(self):
        """Gets the accepted_eula_version of this ClusterInfo.

        Version of the EULA accepted by admin.

        :return: The accepted_eula_version of this ClusterInfo.
        :rtype: str
        """
        return self._accepted_eula_version

    @accepted_eula_version.setter
    def accepted_eula_version(self, accepted_eula_version):
        """Sets the accepted_eula_version of this ClusterInfo.

        Version of the EULA accepted by admin.

        :param accepted_eula_version: The accepted_eula_version of this ClusterInfo.
        :type accepted_eula_version: str
        """
        if accepted_eula_version is None:
            raise ValueError("Invalid value for `accepted_eula_version`, must not be `None`")

        self._accepted_eula_version = accepted_eula_version

    @property
    def api_version(self):
        """Gets the api_version of this ClusterInfo.

        REST API version.

        :return: The api_version of this ClusterInfo.
        :rtype: str
        """
        return self._api_version

    @api_version.setter
    def api_version(self, api_version):
        """Sets the api_version of this ClusterInfo.

        REST API version.

        :param api_version: The api_version of this ClusterInfo.
        :type api_version: str
        """
        if api_version is None:
            raise ValueError("Invalid value for `api_version`, must not be `None`")

        self._api_version = api_version

    @property
    def geolocation(self):
        """Gets the geolocation of this ClusterInfo.


        :return: The geolocation of this ClusterInfo.
        :rtype: ClusterGeolocation
        """
        return self._geolocation

    @geolocation.setter
    def geolocation(self, geolocation):
        """Sets the geolocation of this ClusterInfo.


        :param geolocation: The geolocation of this ClusterInfo.
        :type geolocation: ClusterGeolocation
        """

        self._geolocation = geolocation

    @property
    def id(self):
        """Gets the id of this ClusterInfo.

        ID of the Rubrik cluster.

        :return: The id of this ClusterInfo.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ClusterInfo.

        ID of the Rubrik cluster.

        :param id: The id of this ClusterInfo.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def latest_eula_version(self):
        """Gets the latest_eula_version of this ClusterInfo.

        Latest version of the EULA that must be accepted by admin.

        :return: The latest_eula_version of this ClusterInfo.
        :rtype: str
        """
        return self._latest_eula_version

    @latest_eula_version.setter
    def latest_eula_version(self, latest_eula_version):
        """Sets the latest_eula_version of this ClusterInfo.

        Latest version of the EULA that must be accepted by admin.

        :param latest_eula_version: The latest_eula_version of this ClusterInfo.
        :type latest_eula_version: str
        """
        if latest_eula_version is None:
            raise ValueError("Invalid value for `latest_eula_version`, must not be `None`")

        self._latest_eula_version = latest_eula_version

    @property
    def name(self):
        """Gets the name of this ClusterInfo.

        Name of the cluster.

        :return: The name of this ClusterInfo.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ClusterInfo.

        Name of the cluster.

        :param name: The name of this ClusterInfo.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def timezone(self):
        """Gets the timezone of this ClusterInfo.


        :return: The timezone of this ClusterInfo.
        :rtype: ClusterTimezone
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone):
        """Sets the timezone of this ClusterInfo.


        :param timezone: The timezone of this ClusterInfo.
        :type timezone: ClusterTimezone
        """
        if timezone is None:
            raise ValueError("Invalid value for `timezone`, must not be `None`")

        self._timezone = timezone

    @property
    def version(self):
        """Gets the version of this ClusterInfo.

        Rubrik cluster software version.

        :return: The version of this ClusterInfo.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this ClusterInfo.

        Rubrik cluster software version.

        :param version: The version of this ClusterInfo.
        :type version: str
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")

        self._version = version
