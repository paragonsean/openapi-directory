# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.job_monitoring_objects_count_by_type import JobMonitoringObjectsCountByType
from openapi_server.models.job_monitoring_state import JobMonitoringState
from openapi_server import util


class JobMonitoringSummaryByType(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, job_monitoring_state: JobMonitoringState=None, last_updated_time: datetime=None, object_counts: JobMonitoringObjectsCountByType=None):
        """JobMonitoringSummaryByType - a model defined in OpenAPI

        :param job_monitoring_state: The job_monitoring_state of this JobMonitoringSummaryByType.
        :param last_updated_time: The last_updated_time of this JobMonitoringSummaryByType.
        :param object_counts: The object_counts of this JobMonitoringSummaryByType.
        """
        self.openapi_types = {
            'job_monitoring_state': JobMonitoringState,
            'last_updated_time': datetime,
            'object_counts': JobMonitoringObjectsCountByType
        }

        self.attribute_map = {
            'job_monitoring_state': 'jobMonitoringState',
            'last_updated_time': 'lastUpdatedTime',
            'object_counts': 'objectCounts'
        }

        self._job_monitoring_state = job_monitoring_state
        self._last_updated_time = last_updated_time
        self._object_counts = object_counts

    @classmethod
    def from_dict(cls, dikt: dict) -> 'JobMonitoringSummaryByType':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The JobMonitoringSummaryByType of this JobMonitoringSummaryByType.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def job_monitoring_state(self):
        """Gets the job_monitoring_state of this JobMonitoringSummaryByType.


        :return: The job_monitoring_state of this JobMonitoringSummaryByType.
        :rtype: JobMonitoringState
        """
        return self._job_monitoring_state

    @job_monitoring_state.setter
    def job_monitoring_state(self, job_monitoring_state):
        """Sets the job_monitoring_state of this JobMonitoringSummaryByType.


        :param job_monitoring_state: The job_monitoring_state of this JobMonitoringSummaryByType.
        :type job_monitoring_state: JobMonitoringState
        """
        if job_monitoring_state is None:
            raise ValueError("Invalid value for `job_monitoring_state`, must not be `None`")

        self._job_monitoring_state = job_monitoring_state

    @property
    def last_updated_time(self):
        """Gets the last_updated_time of this JobMonitoringSummaryByType.

        The time in the cluster time zone at which the counts were updated.

        :return: The last_updated_time of this JobMonitoringSummaryByType.
        :rtype: datetime
        """
        return self._last_updated_time

    @last_updated_time.setter
    def last_updated_time(self, last_updated_time):
        """Sets the last_updated_time of this JobMonitoringSummaryByType.

        The time in the cluster time zone at which the counts were updated.

        :param last_updated_time: The last_updated_time of this JobMonitoringSummaryByType.
        :type last_updated_time: datetime
        """

        self._last_updated_time = last_updated_time

    @property
    def object_counts(self):
        """Gets the object_counts of this JobMonitoringSummaryByType.


        :return: The object_counts of this JobMonitoringSummaryByType.
        :rtype: JobMonitoringObjectsCountByType
        """
        return self._object_counts

    @object_counts.setter
    def object_counts(self, object_counts):
        """Sets the object_counts of this JobMonitoringSummaryByType.


        :param object_counts: The object_counts of this JobMonitoringSummaryByType.
        :type object_counts: JobMonitoringObjectsCountByType
        """
        if object_counts is None:
            raise ValueError("Invalid value for `object_counts`, must not be `None`")

        self._object_counts = object_counts
