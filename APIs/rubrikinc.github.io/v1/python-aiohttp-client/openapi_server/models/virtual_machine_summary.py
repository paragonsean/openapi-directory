# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.agent_status import AgentStatus
from openapi_server.models.cloud_instantiation_spec import CloudInstantiationSpec
from openapi_server.models.configured_sla_type import ConfiguredSlaType
from openapi_server.models.parent_app_info import ParentAppInfo
from openapi_server.models.vm_path_point import VmPathPoint
from openapi_server import util


class VirtualMachineSummary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, configured_sla_domain_id: str=None, configured_sla_domain_name: str=None, configured_sla_domain_type: ConfiguredSlaType=None, id: str=None, is_configured_sla_domain_retention_locked: bool=None, name: str=None, primary_cluster_id: str=None, sla_last_update_time: datetime=None, effective_sla_domain_id: str=None, effective_sla_domain_name: str=None, effective_sla_domain_polaris_managed_id: str=None, effective_sla_source_object_id: str=None, effective_sla_source_object_name: str=None, is_effective_sla_domain_retention_locked: bool=None, retention_sla_domain_id: str=None, sla_assignment: str=None, agent_status: AgentStatus=None, cloud_instantiation_spec: CloudInstantiationSpec=None, cluster_name: str=None, folder_path: List[VmPathPoint]=None, guest_credential_authorization_status: str=None, guest_os_name: str=None, host_id: str=None, host_name: str=None, infra_path: List[VmPathPoint]=None, ip_address: str=None, is_relic: bool=None, is_replication_enabled: bool=None, moid: str=None, parent_app_info: ParentAppInfo=None, power_status: str=None, protection_date: datetime=None, snapshot_consistency_mandate: str=None, tools_installed: bool=None, vcenter_id: str=None, vmware_tools_installed: bool=None):
        """VirtualMachineSummary - a model defined in OpenAPI

        :param configured_sla_domain_id: The configured_sla_domain_id of this VirtualMachineSummary.
        :param configured_sla_domain_name: The configured_sla_domain_name of this VirtualMachineSummary.
        :param configured_sla_domain_type: The configured_sla_domain_type of this VirtualMachineSummary.
        :param id: The id of this VirtualMachineSummary.
        :param is_configured_sla_domain_retention_locked: The is_configured_sla_domain_retention_locked of this VirtualMachineSummary.
        :param name: The name of this VirtualMachineSummary.
        :param primary_cluster_id: The primary_cluster_id of this VirtualMachineSummary.
        :param sla_last_update_time: The sla_last_update_time of this VirtualMachineSummary.
        :param effective_sla_domain_id: The effective_sla_domain_id of this VirtualMachineSummary.
        :param effective_sla_domain_name: The effective_sla_domain_name of this VirtualMachineSummary.
        :param effective_sla_domain_polaris_managed_id: The effective_sla_domain_polaris_managed_id of this VirtualMachineSummary.
        :param effective_sla_source_object_id: The effective_sla_source_object_id of this VirtualMachineSummary.
        :param effective_sla_source_object_name: The effective_sla_source_object_name of this VirtualMachineSummary.
        :param is_effective_sla_domain_retention_locked: The is_effective_sla_domain_retention_locked of this VirtualMachineSummary.
        :param retention_sla_domain_id: The retention_sla_domain_id of this VirtualMachineSummary.
        :param sla_assignment: The sla_assignment of this VirtualMachineSummary.
        :param agent_status: The agent_status of this VirtualMachineSummary.
        :param cloud_instantiation_spec: The cloud_instantiation_spec of this VirtualMachineSummary.
        :param cluster_name: The cluster_name of this VirtualMachineSummary.
        :param folder_path: The folder_path of this VirtualMachineSummary.
        :param guest_credential_authorization_status: The guest_credential_authorization_status of this VirtualMachineSummary.
        :param guest_os_name: The guest_os_name of this VirtualMachineSummary.
        :param host_id: The host_id of this VirtualMachineSummary.
        :param host_name: The host_name of this VirtualMachineSummary.
        :param infra_path: The infra_path of this VirtualMachineSummary.
        :param ip_address: The ip_address of this VirtualMachineSummary.
        :param is_relic: The is_relic of this VirtualMachineSummary.
        :param is_replication_enabled: The is_replication_enabled of this VirtualMachineSummary.
        :param moid: The moid of this VirtualMachineSummary.
        :param parent_app_info: The parent_app_info of this VirtualMachineSummary.
        :param power_status: The power_status of this VirtualMachineSummary.
        :param protection_date: The protection_date of this VirtualMachineSummary.
        :param snapshot_consistency_mandate: The snapshot_consistency_mandate of this VirtualMachineSummary.
        :param tools_installed: The tools_installed of this VirtualMachineSummary.
        :param vcenter_id: The vcenter_id of this VirtualMachineSummary.
        :param vmware_tools_installed: The vmware_tools_installed of this VirtualMachineSummary.
        """
        self.openapi_types = {
            'configured_sla_domain_id': str,
            'configured_sla_domain_name': str,
            'configured_sla_domain_type': ConfiguredSlaType,
            'id': str,
            'is_configured_sla_domain_retention_locked': bool,
            'name': str,
            'primary_cluster_id': str,
            'sla_last_update_time': datetime,
            'effective_sla_domain_id': str,
            'effective_sla_domain_name': str,
            'effective_sla_domain_polaris_managed_id': str,
            'effective_sla_source_object_id': str,
            'effective_sla_source_object_name': str,
            'is_effective_sla_domain_retention_locked': bool,
            'retention_sla_domain_id': str,
            'sla_assignment': str,
            'agent_status': AgentStatus,
            'cloud_instantiation_spec': CloudInstantiationSpec,
            'cluster_name': str,
            'folder_path': List[VmPathPoint],
            'guest_credential_authorization_status': str,
            'guest_os_name': str,
            'host_id': str,
            'host_name': str,
            'infra_path': List[VmPathPoint],
            'ip_address': str,
            'is_relic': bool,
            'is_replication_enabled': bool,
            'moid': str,
            'parent_app_info': ParentAppInfo,
            'power_status': str,
            'protection_date': datetime,
            'snapshot_consistency_mandate': str,
            'tools_installed': bool,
            'vcenter_id': str,
            'vmware_tools_installed': bool
        }

        self.attribute_map = {
            'configured_sla_domain_id': 'configuredSlaDomainId',
            'configured_sla_domain_name': 'configuredSlaDomainName',
            'configured_sla_domain_type': 'configuredSlaDomainType',
            'id': 'id',
            'is_configured_sla_domain_retention_locked': 'isConfiguredSlaDomainRetentionLocked',
            'name': 'name',
            'primary_cluster_id': 'primaryClusterId',
            'sla_last_update_time': 'slaLastUpdateTime',
            'effective_sla_domain_id': 'effectiveSlaDomainId',
            'effective_sla_domain_name': 'effectiveSlaDomainName',
            'effective_sla_domain_polaris_managed_id': 'effectiveSlaDomainPolarisManagedId',
            'effective_sla_source_object_id': 'effectiveSlaSourceObjectId',
            'effective_sla_source_object_name': 'effectiveSlaSourceObjectName',
            'is_effective_sla_domain_retention_locked': 'isEffectiveSlaDomainRetentionLocked',
            'retention_sla_domain_id': 'retentionSlaDomainId',
            'sla_assignment': 'slaAssignment',
            'agent_status': 'agentStatus',
            'cloud_instantiation_spec': 'cloudInstantiationSpec',
            'cluster_name': 'clusterName',
            'folder_path': 'folderPath',
            'guest_credential_authorization_status': 'guestCredentialAuthorizationStatus',
            'guest_os_name': 'guestOsName',
            'host_id': 'hostId',
            'host_name': 'hostName',
            'infra_path': 'infraPath',
            'ip_address': 'ipAddress',
            'is_relic': 'isRelic',
            'is_replication_enabled': 'isReplicationEnabled',
            'moid': 'moid',
            'parent_app_info': 'parentAppInfo',
            'power_status': 'powerStatus',
            'protection_date': 'protectionDate',
            'snapshot_consistency_mandate': 'snapshotConsistencyMandate',
            'tools_installed': 'toolsInstalled',
            'vcenter_id': 'vcenterId',
            'vmware_tools_installed': 'vmwareToolsInstalled'
        }

        self._configured_sla_domain_id = configured_sla_domain_id
        self._configured_sla_domain_name = configured_sla_domain_name
        self._configured_sla_domain_type = configured_sla_domain_type
        self._id = id
        self._is_configured_sla_domain_retention_locked = is_configured_sla_domain_retention_locked
        self._name = name
        self._primary_cluster_id = primary_cluster_id
        self._sla_last_update_time = sla_last_update_time
        self._effective_sla_domain_id = effective_sla_domain_id
        self._effective_sla_domain_name = effective_sla_domain_name
        self._effective_sla_domain_polaris_managed_id = effective_sla_domain_polaris_managed_id
        self._effective_sla_source_object_id = effective_sla_source_object_id
        self._effective_sla_source_object_name = effective_sla_source_object_name
        self._is_effective_sla_domain_retention_locked = is_effective_sla_domain_retention_locked
        self._retention_sla_domain_id = retention_sla_domain_id
        self._sla_assignment = sla_assignment
        self._agent_status = agent_status
        self._cloud_instantiation_spec = cloud_instantiation_spec
        self._cluster_name = cluster_name
        self._folder_path = folder_path
        self._guest_credential_authorization_status = guest_credential_authorization_status
        self._guest_os_name = guest_os_name
        self._host_id = host_id
        self._host_name = host_name
        self._infra_path = infra_path
        self._ip_address = ip_address
        self._is_relic = is_relic
        self._is_replication_enabled = is_replication_enabled
        self._moid = moid
        self._parent_app_info = parent_app_info
        self._power_status = power_status
        self._protection_date = protection_date
        self._snapshot_consistency_mandate = snapshot_consistency_mandate
        self._tools_installed = tools_installed
        self._vcenter_id = vcenter_id
        self._vmware_tools_installed = vmware_tools_installed

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VirtualMachineSummary':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VirtualMachineSummary of this VirtualMachineSummary.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def configured_sla_domain_id(self):
        """Gets the configured_sla_domain_id of this VirtualMachineSummary.

        The ID of the SLA Domain configured directly on the Rubrik object.

        :return: The configured_sla_domain_id of this VirtualMachineSummary.
        :rtype: str
        """
        return self._configured_sla_domain_id

    @configured_sla_domain_id.setter
    def configured_sla_domain_id(self, configured_sla_domain_id):
        """Sets the configured_sla_domain_id of this VirtualMachineSummary.

        The ID of the SLA Domain configured directly on the Rubrik object.

        :param configured_sla_domain_id: The configured_sla_domain_id of this VirtualMachineSummary.
        :type configured_sla_domain_id: str
        """
        if configured_sla_domain_id is None:
            raise ValueError("Invalid value for `configured_sla_domain_id`, must not be `None`")

        self._configured_sla_domain_id = configured_sla_domain_id

    @property
    def configured_sla_domain_name(self):
        """Gets the configured_sla_domain_name of this VirtualMachineSummary.

        The name of the SLA Domain configured directly on the Rubrik object.

        :return: The configured_sla_domain_name of this VirtualMachineSummary.
        :rtype: str
        """
        return self._configured_sla_domain_name

    @configured_sla_domain_name.setter
    def configured_sla_domain_name(self, configured_sla_domain_name):
        """Sets the configured_sla_domain_name of this VirtualMachineSummary.

        The name of the SLA Domain configured directly on the Rubrik object.

        :param configured_sla_domain_name: The configured_sla_domain_name of this VirtualMachineSummary.
        :type configured_sla_domain_name: str
        """
        if configured_sla_domain_name is None:
            raise ValueError("Invalid value for `configured_sla_domain_name`, must not be `None`")

        self._configured_sla_domain_name = configured_sla_domain_name

    @property
    def configured_sla_domain_type(self):
        """Gets the configured_sla_domain_type of this VirtualMachineSummary.


        :return: The configured_sla_domain_type of this VirtualMachineSummary.
        :rtype: ConfiguredSlaType
        """
        return self._configured_sla_domain_type

    @configured_sla_domain_type.setter
    def configured_sla_domain_type(self, configured_sla_domain_type):
        """Sets the configured_sla_domain_type of this VirtualMachineSummary.


        :param configured_sla_domain_type: The configured_sla_domain_type of this VirtualMachineSummary.
        :type configured_sla_domain_type: ConfiguredSlaType
        """

        self._configured_sla_domain_type = configured_sla_domain_type

    @property
    def id(self):
        """Gets the id of this VirtualMachineSummary.

        The ID of the Rubrik object.

        :return: The id of this VirtualMachineSummary.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this VirtualMachineSummary.

        The ID of the Rubrik object.

        :param id: The id of this VirtualMachineSummary.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def is_configured_sla_domain_retention_locked(self):
        """Gets the is_configured_sla_domain_retention_locked of this VirtualMachineSummary.

        Indicates whether the configured SLA Domain is Retention Locked. When this value is 'true', the configured SLA Domain is a Retention Lock SLA Domain.

        :return: The is_configured_sla_domain_retention_locked of this VirtualMachineSummary.
        :rtype: bool
        """
        return self._is_configured_sla_domain_retention_locked

    @is_configured_sla_domain_retention_locked.setter
    def is_configured_sla_domain_retention_locked(self, is_configured_sla_domain_retention_locked):
        """Sets the is_configured_sla_domain_retention_locked of this VirtualMachineSummary.

        Indicates whether the configured SLA Domain is Retention Locked. When this value is 'true', the configured SLA Domain is a Retention Lock SLA Domain.

        :param is_configured_sla_domain_retention_locked: The is_configured_sla_domain_retention_locked of this VirtualMachineSummary.
        :type is_configured_sla_domain_retention_locked: bool
        """

        self._is_configured_sla_domain_retention_locked = is_configured_sla_domain_retention_locked

    @property
    def name(self):
        """Gets the name of this VirtualMachineSummary.

        The name of the Rubrik object.

        :return: The name of this VirtualMachineSummary.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this VirtualMachineSummary.

        The name of the Rubrik object.

        :param name: The name of this VirtualMachineSummary.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def primary_cluster_id(self):
        """Gets the primary_cluster_id of this VirtualMachineSummary.

        The ID of the cluster that manages the Rubrik object.

        :return: The primary_cluster_id of this VirtualMachineSummary.
        :rtype: str
        """
        return self._primary_cluster_id

    @primary_cluster_id.setter
    def primary_cluster_id(self, primary_cluster_id):
        """Sets the primary_cluster_id of this VirtualMachineSummary.

        The ID of the cluster that manages the Rubrik object.

        :param primary_cluster_id: The primary_cluster_id of this VirtualMachineSummary.
        :type primary_cluster_id: str
        """
        if primary_cluster_id is None:
            raise ValueError("Invalid value for `primary_cluster_id`, must not be `None`")

        self._primary_cluster_id = primary_cluster_id

    @property
    def sla_last_update_time(self):
        """Gets the sla_last_update_time of this VirtualMachineSummary.

        The UTC time when the SLA Domain was last updated.

        :return: The sla_last_update_time of this VirtualMachineSummary.
        :rtype: datetime
        """
        return self._sla_last_update_time

    @sla_last_update_time.setter
    def sla_last_update_time(self, sla_last_update_time):
        """Sets the sla_last_update_time of this VirtualMachineSummary.

        The UTC time when the SLA Domain was last updated.

        :param sla_last_update_time: The sla_last_update_time of this VirtualMachineSummary.
        :type sla_last_update_time: datetime
        """

        self._sla_last_update_time = sla_last_update_time

    @property
    def effective_sla_domain_id(self):
        """Gets the effective_sla_domain_id of this VirtualMachineSummary.

        The ID of the SLA Domain that controls the protection of the Rubrik object.

        :return: The effective_sla_domain_id of this VirtualMachineSummary.
        :rtype: str
        """
        return self._effective_sla_domain_id

    @effective_sla_domain_id.setter
    def effective_sla_domain_id(self, effective_sla_domain_id):
        """Sets the effective_sla_domain_id of this VirtualMachineSummary.

        The ID of the SLA Domain that controls the protection of the Rubrik object.

        :param effective_sla_domain_id: The effective_sla_domain_id of this VirtualMachineSummary.
        :type effective_sla_domain_id: str
        """
        if effective_sla_domain_id is None:
            raise ValueError("Invalid value for `effective_sla_domain_id`, must not be `None`")

        self._effective_sla_domain_id = effective_sla_domain_id

    @property
    def effective_sla_domain_name(self):
        """Gets the effective_sla_domain_name of this VirtualMachineSummary.

        The name of the SLA Domain that controls the protection of the Rubrik object.

        :return: The effective_sla_domain_name of this VirtualMachineSummary.
        :rtype: str
        """
        return self._effective_sla_domain_name

    @effective_sla_domain_name.setter
    def effective_sla_domain_name(self, effective_sla_domain_name):
        """Sets the effective_sla_domain_name of this VirtualMachineSummary.

        The name of the SLA Domain that controls the protection of the Rubrik object.

        :param effective_sla_domain_name: The effective_sla_domain_name of this VirtualMachineSummary.
        :type effective_sla_domain_name: str
        """
        if effective_sla_domain_name is None:
            raise ValueError("Invalid value for `effective_sla_domain_name`, must not be `None`")

        self._effective_sla_domain_name = effective_sla_domain_name

    @property
    def effective_sla_domain_polaris_managed_id(self):
        """Gets the effective_sla_domain_polaris_managed_id of this VirtualMachineSummary.

        Optional. This field contains the managed ID of of the Polaris-managed effective SLA Domain.

        :return: The effective_sla_domain_polaris_managed_id of this VirtualMachineSummary.
        :rtype: str
        """
        return self._effective_sla_domain_polaris_managed_id

    @effective_sla_domain_polaris_managed_id.setter
    def effective_sla_domain_polaris_managed_id(self, effective_sla_domain_polaris_managed_id):
        """Sets the effective_sla_domain_polaris_managed_id of this VirtualMachineSummary.

        Optional. This field contains the managed ID of of the Polaris-managed effective SLA Domain.

        :param effective_sla_domain_polaris_managed_id: The effective_sla_domain_polaris_managed_id of this VirtualMachineSummary.
        :type effective_sla_domain_polaris_managed_id: str
        """

        self._effective_sla_domain_polaris_managed_id = effective_sla_domain_polaris_managed_id

    @property
    def effective_sla_source_object_id(self):
        """Gets the effective_sla_source_object_id of this VirtualMachineSummary.

        The ID of the parent of the Rubrik object from which the SLA Domain that controls the protection of Rubrik object is inherited.

        :return: The effective_sla_source_object_id of this VirtualMachineSummary.
        :rtype: str
        """
        return self._effective_sla_source_object_id

    @effective_sla_source_object_id.setter
    def effective_sla_source_object_id(self, effective_sla_source_object_id):
        """Sets the effective_sla_source_object_id of this VirtualMachineSummary.

        The ID of the parent of the Rubrik object from which the SLA Domain that controls the protection of Rubrik object is inherited.

        :param effective_sla_source_object_id: The effective_sla_source_object_id of this VirtualMachineSummary.
        :type effective_sla_source_object_id: str
        """

        self._effective_sla_source_object_id = effective_sla_source_object_id

    @property
    def effective_sla_source_object_name(self):
        """Gets the effective_sla_source_object_name of this VirtualMachineSummary.

        The name of the parent of the Rubrik object from which the SLA Domain that controls the protection of Rubrik object is inherited.

        :return: The effective_sla_source_object_name of this VirtualMachineSummary.
        :rtype: str
        """
        return self._effective_sla_source_object_name

    @effective_sla_source_object_name.setter
    def effective_sla_source_object_name(self, effective_sla_source_object_name):
        """Sets the effective_sla_source_object_name of this VirtualMachineSummary.

        The name of the parent of the Rubrik object from which the SLA Domain that controls the protection of Rubrik object is inherited.

        :param effective_sla_source_object_name: The effective_sla_source_object_name of this VirtualMachineSummary.
        :type effective_sla_source_object_name: str
        """

        self._effective_sla_source_object_name = effective_sla_source_object_name

    @property
    def is_effective_sla_domain_retention_locked(self):
        """Gets the is_effective_sla_domain_retention_locked of this VirtualMachineSummary.

        Indicates whether the effective SLA Domain is Retention Locked. When this value is 'true', the effective SLA domain is a Retention Lock SLA Domain.

        :return: The is_effective_sla_domain_retention_locked of this VirtualMachineSummary.
        :rtype: bool
        """
        return self._is_effective_sla_domain_retention_locked

    @is_effective_sla_domain_retention_locked.setter
    def is_effective_sla_domain_retention_locked(self, is_effective_sla_domain_retention_locked):
        """Sets the is_effective_sla_domain_retention_locked of this VirtualMachineSummary.

        Indicates whether the effective SLA Domain is Retention Locked. When this value is 'true', the effective SLA domain is a Retention Lock SLA Domain.

        :param is_effective_sla_domain_retention_locked: The is_effective_sla_domain_retention_locked of this VirtualMachineSummary.
        :type is_effective_sla_domain_retention_locked: bool
        """

        self._is_effective_sla_domain_retention_locked = is_effective_sla_domain_retention_locked

    @property
    def retention_sla_domain_id(self):
        """Gets the retention_sla_domain_id of this VirtualMachineSummary.

        The ID of the SLA Domain whose retention policy is in use.

        :return: The retention_sla_domain_id of this VirtualMachineSummary.
        :rtype: str
        """
        return self._retention_sla_domain_id

    @retention_sla_domain_id.setter
    def retention_sla_domain_id(self, retention_sla_domain_id):
        """Sets the retention_sla_domain_id of this VirtualMachineSummary.

        The ID of the SLA Domain whose retention policy is in use.

        :param retention_sla_domain_id: The retention_sla_domain_id of this VirtualMachineSummary.
        :type retention_sla_domain_id: str
        """

        self._retention_sla_domain_id = retention_sla_domain_id

    @property
    def sla_assignment(self):
        """Gets the sla_assignment of this VirtualMachineSummary.

        The SLA assignment type. Direct SLA assignment means that a SLA Domain was configured directly on the Rubrik object by the user. Derived SLA assignment means that the Rubrik object inherits an SLA Domain from its parent Rubrik object.

        :return: The sla_assignment of this VirtualMachineSummary.
        :rtype: str
        """
        return self._sla_assignment

    @sla_assignment.setter
    def sla_assignment(self, sla_assignment):
        """Sets the sla_assignment of this VirtualMachineSummary.

        The SLA assignment type. Direct SLA assignment means that a SLA Domain was configured directly on the Rubrik object by the user. Derived SLA assignment means that the Rubrik object inherits an SLA Domain from its parent Rubrik object.

        :param sla_assignment: The sla_assignment of this VirtualMachineSummary.
        :type sla_assignment: str
        """
        allowed_values = ["Derived", "Direct", "Unassigned"]  # noqa: E501
        if sla_assignment not in allowed_values:
            raise ValueError(
                "Invalid value for `sla_assignment` ({0}), must be one of {1}"
                .format(sla_assignment, allowed_values)
            )

        self._sla_assignment = sla_assignment

    @property
    def agent_status(self):
        """Gets the agent_status of this VirtualMachineSummary.


        :return: The agent_status of this VirtualMachineSummary.
        :rtype: AgentStatus
        """
        return self._agent_status

    @agent_status.setter
    def agent_status(self, agent_status):
        """Sets the agent_status of this VirtualMachineSummary.


        :param agent_status: The agent_status of this VirtualMachineSummary.
        :type agent_status: AgentStatus
        """

        self._agent_status = agent_status

    @property
    def cloud_instantiation_spec(self):
        """Gets the cloud_instantiation_spec of this VirtualMachineSummary.


        :return: The cloud_instantiation_spec of this VirtualMachineSummary.
        :rtype: CloudInstantiationSpec
        """
        return self._cloud_instantiation_spec

    @cloud_instantiation_spec.setter
    def cloud_instantiation_spec(self, cloud_instantiation_spec):
        """Sets the cloud_instantiation_spec of this VirtualMachineSummary.


        :param cloud_instantiation_spec: The cloud_instantiation_spec of this VirtualMachineSummary.
        :type cloud_instantiation_spec: CloudInstantiationSpec
        """

        self._cloud_instantiation_spec = cloud_instantiation_spec

    @property
    def cluster_name(self):
        """Gets the cluster_name of this VirtualMachineSummary.


        :return: The cluster_name of this VirtualMachineSummary.
        :rtype: str
        """
        return self._cluster_name

    @cluster_name.setter
    def cluster_name(self, cluster_name):
        """Sets the cluster_name of this VirtualMachineSummary.


        :param cluster_name: The cluster_name of this VirtualMachineSummary.
        :type cluster_name: str
        """

        self._cluster_name = cluster_name

    @property
    def folder_path(self):
        """Gets the folder_path of this VirtualMachineSummary.

        Brief info of all the objects in the folder path to this VM.

        :return: The folder_path of this VirtualMachineSummary.
        :rtype: List[VmPathPoint]
        """
        return self._folder_path

    @folder_path.setter
    def folder_path(self, folder_path):
        """Sets the folder_path of this VirtualMachineSummary.

        Brief info of all the objects in the folder path to this VM.

        :param folder_path: The folder_path of this VirtualMachineSummary.
        :type folder_path: List[VmPathPoint]
        """
        if folder_path is None:
            raise ValueError("Invalid value for `folder_path`, must not be `None`")

        self._folder_path = folder_path

    @property
    def guest_credential_authorization_status(self):
        """Gets the guest_credential_authorization_status of this VirtualMachineSummary.

        Status of authentication with a specific virtual machine using guest credentials. Possible values are: SUCCESSFUL, PENDING, or FAILED.

        :return: The guest_credential_authorization_status of this VirtualMachineSummary.
        :rtype: str
        """
        return self._guest_credential_authorization_status

    @guest_credential_authorization_status.setter
    def guest_credential_authorization_status(self, guest_credential_authorization_status):
        """Sets the guest_credential_authorization_status of this VirtualMachineSummary.

        Status of authentication with a specific virtual machine using guest credentials. Possible values are: SUCCESSFUL, PENDING, or FAILED.

        :param guest_credential_authorization_status: The guest_credential_authorization_status of this VirtualMachineSummary.
        :type guest_credential_authorization_status: str
        """
        if guest_credential_authorization_status is None:
            raise ValueError("Invalid value for `guest_credential_authorization_status`, must not be `None`")

        self._guest_credential_authorization_status = guest_credential_authorization_status

    @property
    def guest_os_name(self):
        """Gets the guest_os_name of this VirtualMachineSummary.


        :return: The guest_os_name of this VirtualMachineSummary.
        :rtype: str
        """
        return self._guest_os_name

    @guest_os_name.setter
    def guest_os_name(self, guest_os_name):
        """Sets the guest_os_name of this VirtualMachineSummary.


        :param guest_os_name: The guest_os_name of this VirtualMachineSummary.
        :type guest_os_name: str
        """

        self._guest_os_name = guest_os_name

    @property
    def host_id(self):
        """Gets the host_id of this VirtualMachineSummary.


        :return: The host_id of this VirtualMachineSummary.
        :rtype: str
        """
        return self._host_id

    @host_id.setter
    def host_id(self, host_id):
        """Sets the host_id of this VirtualMachineSummary.


        :param host_id: The host_id of this VirtualMachineSummary.
        :type host_id: str
        """

        self._host_id = host_id

    @property
    def host_name(self):
        """Gets the host_name of this VirtualMachineSummary.


        :return: The host_name of this VirtualMachineSummary.
        :rtype: str
        """
        return self._host_name

    @host_name.setter
    def host_name(self, host_name):
        """Sets the host_name of this VirtualMachineSummary.


        :param host_name: The host_name of this VirtualMachineSummary.
        :type host_name: str
        """

        self._host_name = host_name

    @property
    def infra_path(self):
        """Gets the infra_path of this VirtualMachineSummary.

        Brief info of all the objects in the infrastructure path to this VM.

        :return: The infra_path of this VirtualMachineSummary.
        :rtype: List[VmPathPoint]
        """
        return self._infra_path

    @infra_path.setter
    def infra_path(self, infra_path):
        """Sets the infra_path of this VirtualMachineSummary.

        Brief info of all the objects in the infrastructure path to this VM.

        :param infra_path: The infra_path of this VirtualMachineSummary.
        :type infra_path: List[VmPathPoint]
        """
        if infra_path is None:
            raise ValueError("Invalid value for `infra_path`, must not be `None`")

        self._infra_path = infra_path

    @property
    def ip_address(self):
        """Gets the ip_address of this VirtualMachineSummary.


        :return: The ip_address of this VirtualMachineSummary.
        :rtype: str
        """
        return self._ip_address

    @ip_address.setter
    def ip_address(self, ip_address):
        """Sets the ip_address of this VirtualMachineSummary.


        :param ip_address: The ip_address of this VirtualMachineSummary.
        :type ip_address: str
        """
        if ip_address is None:
            raise ValueError("Invalid value for `ip_address`, must not be `None`")

        self._ip_address = ip_address

    @property
    def is_relic(self):
        """Gets the is_relic of this VirtualMachineSummary.


        :return: The is_relic of this VirtualMachineSummary.
        :rtype: bool
        """
        return self._is_relic

    @is_relic.setter
    def is_relic(self, is_relic):
        """Sets the is_relic of this VirtualMachineSummary.


        :param is_relic: The is_relic of this VirtualMachineSummary.
        :type is_relic: bool
        """
        if is_relic is None:
            raise ValueError("Invalid value for `is_relic`, must not be `None`")

        self._is_relic = is_relic

    @property
    def is_replication_enabled(self):
        """Gets the is_replication_enabled of this VirtualMachineSummary.


        :return: The is_replication_enabled of this VirtualMachineSummary.
        :rtype: bool
        """
        return self._is_replication_enabled

    @is_replication_enabled.setter
    def is_replication_enabled(self, is_replication_enabled):
        """Sets the is_replication_enabled of this VirtualMachineSummary.


        :param is_replication_enabled: The is_replication_enabled of this VirtualMachineSummary.
        :type is_replication_enabled: bool
        """
        if is_replication_enabled is None:
            raise ValueError("Invalid value for `is_replication_enabled`, must not be `None`")

        self._is_replication_enabled = is_replication_enabled

    @property
    def moid(self):
        """Gets the moid of this VirtualMachineSummary.


        :return: The moid of this VirtualMachineSummary.
        :rtype: str
        """
        return self._moid

    @moid.setter
    def moid(self, moid):
        """Sets the moid of this VirtualMachineSummary.


        :param moid: The moid of this VirtualMachineSummary.
        :type moid: str
        """
        if moid is None:
            raise ValueError("Invalid value for `moid`, must not be `None`")

        self._moid = moid

    @property
    def parent_app_info(self):
        """Gets the parent_app_info of this VirtualMachineSummary.


        :return: The parent_app_info of this VirtualMachineSummary.
        :rtype: ParentAppInfo
        """
        return self._parent_app_info

    @parent_app_info.setter
    def parent_app_info(self, parent_app_info):
        """Sets the parent_app_info of this VirtualMachineSummary.


        :param parent_app_info: The parent_app_info of this VirtualMachineSummary.
        :type parent_app_info: ParentAppInfo
        """

        self._parent_app_info = parent_app_info

    @property
    def power_status(self):
        """Gets the power_status of this VirtualMachineSummary.

        The power status of VM(ON,OFF,SLEEP etc.).

        :return: The power_status of this VirtualMachineSummary.
        :rtype: str
        """
        return self._power_status

    @power_status.setter
    def power_status(self, power_status):
        """Sets the power_status of this VirtualMachineSummary.

        The power status of VM(ON,OFF,SLEEP etc.).

        :param power_status: The power_status of this VirtualMachineSummary.
        :type power_status: str
        """

        self._power_status = power_status

    @property
    def protection_date(self):
        """Gets the protection_date of this VirtualMachineSummary.


        :return: The protection_date of this VirtualMachineSummary.
        :rtype: datetime
        """
        return self._protection_date

    @protection_date.setter
    def protection_date(self, protection_date):
        """Sets the protection_date of this VirtualMachineSummary.


        :param protection_date: The protection_date of this VirtualMachineSummary.
        :type protection_date: datetime
        """

        self._protection_date = protection_date

    @property
    def snapshot_consistency_mandate(self):
        """Gets the snapshot_consistency_mandate of this VirtualMachineSummary.

        Consistency level mandated for this VM or empty string for none.

        :return: The snapshot_consistency_mandate of this VirtualMachineSummary.
        :rtype: str
        """
        return self._snapshot_consistency_mandate

    @snapshot_consistency_mandate.setter
    def snapshot_consistency_mandate(self, snapshot_consistency_mandate):
        """Sets the snapshot_consistency_mandate of this VirtualMachineSummary.

        Consistency level mandated for this VM or empty string for none.

        :param snapshot_consistency_mandate: The snapshot_consistency_mandate of this VirtualMachineSummary.
        :type snapshot_consistency_mandate: str
        """
        allowed_values = ["UNKNOWN", "INCONSISTENT", "CRASH_CONSISTENT", "FILE_SYSTEM_CONSISTENT", "VSS_CONSISTENT", "APP_CONSISTENT"]  # noqa: E501
        if snapshot_consistency_mandate not in allowed_values:
            raise ValueError(
                "Invalid value for `snapshot_consistency_mandate` ({0}), must be one of {1}"
                .format(snapshot_consistency_mandate, allowed_values)
            )

        self._snapshot_consistency_mandate = snapshot_consistency_mandate

    @property
    def tools_installed(self):
        """Gets the tools_installed of this VirtualMachineSummary.


        :return: The tools_installed of this VirtualMachineSummary.
        :rtype: bool
        """
        return self._tools_installed

    @tools_installed.setter
    def tools_installed(self, tools_installed):
        """Sets the tools_installed of this VirtualMachineSummary.


        :param tools_installed: The tools_installed of this VirtualMachineSummary.
        :type tools_installed: bool
        """

        self._tools_installed = tools_installed

    @property
    def vcenter_id(self):
        """Gets the vcenter_id of this VirtualMachineSummary.


        :return: The vcenter_id of this VirtualMachineSummary.
        :rtype: str
        """
        return self._vcenter_id

    @vcenter_id.setter
    def vcenter_id(self, vcenter_id):
        """Sets the vcenter_id of this VirtualMachineSummary.


        :param vcenter_id: The vcenter_id of this VirtualMachineSummary.
        :type vcenter_id: str
        """

        self._vcenter_id = vcenter_id

    @property
    def vmware_tools_installed(self):
        """Gets the vmware_tools_installed of this VirtualMachineSummary.


        :return: The vmware_tools_installed of this VirtualMachineSummary.
        :rtype: bool
        """
        return self._vmware_tools_installed

    @vmware_tools_installed.setter
    def vmware_tools_installed(self, vmware_tools_installed):
        """Sets the vmware_tools_installed of this VirtualMachineSummary.


        :param vmware_tools_installed: The vmware_tools_installed of this VirtualMachineSummary.
        :type vmware_tools_installed: bool
        """
        if vmware_tools_installed is None:
            raise ValueError("Invalid value for `vmware_tools_installed`, must not be `None`")

        self._vmware_tools_installed = vmware_tools_installed
