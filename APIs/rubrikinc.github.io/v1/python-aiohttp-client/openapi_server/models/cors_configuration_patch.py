# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CorsConfigurationPatch(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allowed_headers: str=None, allowed_origins: str=None, is_enabled: bool=None):
        """CorsConfigurationPatch - a model defined in OpenAPI

        :param allowed_headers: The allowed_headers of this CorsConfigurationPatch.
        :param allowed_origins: The allowed_origins of this CorsConfigurationPatch.
        :param is_enabled: The is_enabled of this CorsConfigurationPatch.
        """
        self.openapi_types = {
            'allowed_headers': str,
            'allowed_origins': str,
            'is_enabled': bool
        }

        self.attribute_map = {
            'allowed_headers': 'allowedHeaders',
            'allowed_origins': 'allowedOrigins',
            'is_enabled': 'isEnabled'
        }

        self._allowed_headers = allowed_headers
        self._allowed_origins = allowed_origins
        self._is_enabled = is_enabled

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CorsConfigurationPatch':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CorsConfigurationPatch of this CorsConfigurationPatch.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allowed_headers(self):
        """Gets the allowed_headers of this CorsConfigurationPatch.

        The allowed headers as a comma separated string of values. The following headers are allowed by default: 'Accept', 'Accept-Language', 'Content-Language', 'and Content-Type'. 

        :return: The allowed_headers of this CorsConfigurationPatch.
        :rtype: str
        """
        return self._allowed_headers

    @allowed_headers.setter
    def allowed_headers(self, allowed_headers):
        """Sets the allowed_headers of this CorsConfigurationPatch.

        The allowed headers as a comma separated string of values. The following headers are allowed by default: 'Accept', 'Accept-Language', 'Content-Language', 'and Content-Type'. 

        :param allowed_headers: The allowed_headers of this CorsConfigurationPatch.
        :type allowed_headers: str
        """

        self._allowed_headers = allowed_headers

    @property
    def allowed_origins(self):
        """Gets the allowed_origins of this CorsConfigurationPatch.

        The allowed origins as a comma separated string of values. Use the special string '*' to allow any origin.

        :return: The allowed_origins of this CorsConfigurationPatch.
        :rtype: str
        """
        return self._allowed_origins

    @allowed_origins.setter
    def allowed_origins(self, allowed_origins):
        """Sets the allowed_origins of this CorsConfigurationPatch.

        The allowed origins as a comma separated string of values. Use the special string '*' to allow any origin.

        :param allowed_origins: The allowed_origins of this CorsConfigurationPatch.
        :type allowed_origins: str
        """

        self._allowed_origins = allowed_origins

    @property
    def is_enabled(self):
        """Gets the is_enabled of this CorsConfigurationPatch.

        A Boolean value that indicates if CORS support is enabled.

        :return: The is_enabled of this CorsConfigurationPatch.
        :rtype: bool
        """
        return self._is_enabled

    @is_enabled.setter
    def is_enabled(self, is_enabled):
        """Sets the is_enabled of this CorsConfigurationPatch.

        A Boolean value that indicates if CORS support is enabled.

        :param is_enabled: The is_enabled of this CorsConfigurationPatch.
        :type is_enabled: bool
        """

        self._is_enabled = is_enabled
