# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PolicyCheckResult(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, check_output: str=None, is_check_passed: bool=None, node_id: str=None, policy_id: str=None):
        """PolicyCheckResult - a model defined in OpenAPI

        :param check_output: The check_output of this PolicyCheckResult.
        :param is_check_passed: The is_check_passed of this PolicyCheckResult.
        :param node_id: The node_id of this PolicyCheckResult.
        :param policy_id: The policy_id of this PolicyCheckResult.
        """
        self.openapi_types = {
            'check_output': str,
            'is_check_passed': bool,
            'node_id': str,
            'policy_id': str
        }

        self.attribute_map = {
            'check_output': 'checkOutput',
            'is_check_passed': 'isCheckPassed',
            'node_id': 'nodeId',
            'policy_id': 'policyId'
        }

        self._check_output = check_output
        self._is_check_passed = is_check_passed
        self._node_id = node_id
        self._policy_id = policy_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PolicyCheckResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PolicyCheckResult of this PolicyCheckResult.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def check_output(self):
        """Gets the check_output of this PolicyCheckResult.

        Output from the policy.

        :return: The check_output of this PolicyCheckResult.
        :rtype: str
        """
        return self._check_output

    @check_output.setter
    def check_output(self, check_output):
        """Sets the check_output of this PolicyCheckResult.

        Output from the policy.

        :param check_output: The check_output of this PolicyCheckResult.
        :type check_output: str
        """

        self._check_output = check_output

    @property
    def is_check_passed(self):
        """Gets the is_check_passed of this PolicyCheckResult.

        Individual check results.

        :return: The is_check_passed of this PolicyCheckResult.
        :rtype: bool
        """
        return self._is_check_passed

    @is_check_passed.setter
    def is_check_passed(self, is_check_passed):
        """Sets the is_check_passed of this PolicyCheckResult.

        Individual check results.

        :param is_check_passed: The is_check_passed of this PolicyCheckResult.
        :type is_check_passed: bool
        """
        if is_check_passed is None:
            raise ValueError("Invalid value for `is_check_passed`, must not be `None`")

        self._is_check_passed = is_check_passed

    @property
    def node_id(self):
        """Gets the node_id of this PolicyCheckResult.

        Node ID on which policy is enforced.

        :return: The node_id of this PolicyCheckResult.
        :rtype: str
        """
        return self._node_id

    @node_id.setter
    def node_id(self, node_id):
        """Sets the node_id of this PolicyCheckResult.

        Node ID on which policy is enforced.

        :param node_id: The node_id of this PolicyCheckResult.
        :type node_id: str
        """
        if node_id is None:
            raise ValueError("Invalid value for `node_id`, must not be `None`")

        self._node_id = node_id

    @property
    def policy_id(self):
        """Gets the policy_id of this PolicyCheckResult.

        Policy ID for which result is collected.

        :return: The policy_id of this PolicyCheckResult.
        :rtype: str
        """
        return self._policy_id

    @policy_id.setter
    def policy_id(self, policy_id):
        """Sets the policy_id of this PolicyCheckResult.

        Policy ID for which result is collected.

        :param policy_id: The policy_id of this PolicyCheckResult.
        :type policy_id: str
        """
        if policy_id is None:
            raise ValueError("Invalid value for `policy_id`, must not be `None`")

        self._policy_id = policy_id
