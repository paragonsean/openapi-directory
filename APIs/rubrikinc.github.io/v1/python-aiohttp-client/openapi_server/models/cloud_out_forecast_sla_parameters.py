# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.advanced_ui_config_attributes import AdvancedUiConfigAttributes
from openapi_server.models.archival_spec_v2 import ArchivalSpecV2
from openapi_server.models.sla_frequency_v2 import SlaFrequencyV2
from openapi_server import util


class CloudOutForecastSlaParameters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, advanced_ui_config: List[AdvancedUiConfigAttributes]=None, archival_specs: ArchivalSpecV2=None, frequencies: SlaFrequencyV2=None, max_local_retention_limit: int=None):
        """CloudOutForecastSlaParameters - a model defined in OpenAPI

        :param advanced_ui_config: The advanced_ui_config of this CloudOutForecastSlaParameters.
        :param archival_specs: The archival_specs of this CloudOutForecastSlaParameters.
        :param frequencies: The frequencies of this CloudOutForecastSlaParameters.
        :param max_local_retention_limit: The max_local_retention_limit of this CloudOutForecastSlaParameters.
        """
        self.openapi_types = {
            'advanced_ui_config': List[AdvancedUiConfigAttributes],
            'archival_specs': ArchivalSpecV2,
            'frequencies': SlaFrequencyV2,
            'max_local_retention_limit': int
        }

        self.attribute_map = {
            'advanced_ui_config': 'advancedUiConfig',
            'archival_specs': 'archivalSpecs',
            'frequencies': 'frequencies',
            'max_local_retention_limit': 'maxLocalRetentionLimit'
        }

        self._advanced_ui_config = advanced_ui_config
        self._archival_specs = archival_specs
        self._frequencies = frequencies
        self._max_local_retention_limit = max_local_retention_limit

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CloudOutForecastSlaParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CloudOutForecastSlaParameters of this CloudOutForecastSlaParameters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def advanced_ui_config(self):
        """Gets the advanced_ui_config of this CloudOutForecastSlaParameters.

        The advanced UI configuration according to the SLA Domain.

        :return: The advanced_ui_config of this CloudOutForecastSlaParameters.
        :rtype: List[AdvancedUiConfigAttributes]
        """
        return self._advanced_ui_config

    @advanced_ui_config.setter
    def advanced_ui_config(self, advanced_ui_config):
        """Sets the advanced_ui_config of this CloudOutForecastSlaParameters.

        The advanced UI configuration according to the SLA Domain.

        :param advanced_ui_config: The advanced_ui_config of this CloudOutForecastSlaParameters.
        :type advanced_ui_config: List[AdvancedUiConfigAttributes]
        """

        self._advanced_ui_config = advanced_ui_config

    @property
    def archival_specs(self):
        """Gets the archival_specs of this CloudOutForecastSlaParameters.


        :return: The archival_specs of this CloudOutForecastSlaParameters.
        :rtype: ArchivalSpecV2
        """
        return self._archival_specs

    @archival_specs.setter
    def archival_specs(self, archival_specs):
        """Sets the archival_specs of this CloudOutForecastSlaParameters.


        :param archival_specs: The archival_specs of this CloudOutForecastSlaParameters.
        :type archival_specs: ArchivalSpecV2
        """

        self._archival_specs = archival_specs

    @property
    def frequencies(self):
        """Gets the frequencies of this CloudOutForecastSlaParameters.


        :return: The frequencies of this CloudOutForecastSlaParameters.
        :rtype: SlaFrequencyV2
        """
        return self._frequencies

    @frequencies.setter
    def frequencies(self, frequencies):
        """Sets the frequencies of this CloudOutForecastSlaParameters.


        :param frequencies: The frequencies of this CloudOutForecastSlaParameters.
        :type frequencies: SlaFrequencyV2
        """
        if frequencies is None:
            raise ValueError("Invalid value for `frequencies`, must not be `None`")

        self._frequencies = frequencies

    @property
    def max_local_retention_limit(self):
        """Gets the max_local_retention_limit of this CloudOutForecastSlaParameters.

        Maximum local retention limit, in seconds, according to the SLA Domain. Required only for remote SLA Domains.

        :return: The max_local_retention_limit of this CloudOutForecastSlaParameters.
        :rtype: int
        """
        return self._max_local_retention_limit

    @max_local_retention_limit.setter
    def max_local_retention_limit(self, max_local_retention_limit):
        """Sets the max_local_retention_limit of this CloudOutForecastSlaParameters.

        Maximum local retention limit, in seconds, according to the SLA Domain. Required only for remote SLA Domains.

        :param max_local_retention_limit: The max_local_retention_limit of this CloudOutForecastSlaParameters.
        :type max_local_retention_limit: int
        """

        self._max_local_retention_limit = max_local_retention_limit
