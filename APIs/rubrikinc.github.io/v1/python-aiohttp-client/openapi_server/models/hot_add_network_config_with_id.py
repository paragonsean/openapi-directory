# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.static_ip_info import StaticIpInfo
from openapi_server import util


class HotAddNetworkConfigWithId(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, network_id: str=None, static_ip_info: StaticIpInfo=None):
        """HotAddNetworkConfigWithId - a model defined in OpenAPI

        :param network_id: The network_id of this HotAddNetworkConfigWithId.
        :param static_ip_info: The static_ip_info of this HotAddNetworkConfigWithId.
        """
        self.openapi_types = {
            'network_id': str,
            'static_ip_info': StaticIpInfo
        }

        self.attribute_map = {
            'network_id': 'network_id',
            'static_ip_info': 'static_ip_info'
        }

        self._network_id = network_id
        self._static_ip_info = static_ip_info

    @classmethod
    def from_dict(cls, dikt: dict) -> 'HotAddNetworkConfigWithId':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The HotAddNetworkConfigWithId of this HotAddNetworkConfigWithId.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def network_id(self):
        """Gets the network_id of this HotAddNetworkConfigWithId.

        The ID of a user-configured vCenter network selected for HotAdd backup and recovery.

        :return: The network_id of this HotAddNetworkConfigWithId.
        :rtype: str
        """
        return self._network_id

    @network_id.setter
    def network_id(self, network_id):
        """Sets the network_id of this HotAddNetworkConfigWithId.

        The ID of a user-configured vCenter network selected for HotAdd backup and recovery.

        :param network_id: The network_id of this HotAddNetworkConfigWithId.
        :type network_id: str
        """
        if network_id is None:
            raise ValueError("Invalid value for `network_id`, must not be `None`")

        self._network_id = network_id

    @property
    def static_ip_info(self):
        """Gets the static_ip_info of this HotAddNetworkConfigWithId.


        :return: The static_ip_info of this HotAddNetworkConfigWithId.
        :rtype: StaticIpInfo
        """
        return self._static_ip_info

    @static_ip_info.setter
    def static_ip_info(self, static_ip_info):
        """Sets the static_ip_info of this HotAddNetworkConfigWithId.


        :param static_ip_info: The static_ip_info of this HotAddNetworkConfigWithId.
        :type static_ip_info: StaticIpInfo
        """

        self._static_ip_info = static_ip_info
