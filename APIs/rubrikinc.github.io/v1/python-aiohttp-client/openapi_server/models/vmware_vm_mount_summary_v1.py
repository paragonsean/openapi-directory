# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class VmwareVmMountSummaryV1(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attaching_disk_count: int=None, create_datastore_only_mount: bool=None, datastore_name: str=None, datastore_ready: bool=None, has_attaching_disk: bool=None, host_id: str=None, id: str=None, is_ready: bool=None, mount_request_id: str=None, mount_timestamp: datetime=None, mounted_vm_id: str=None, snapshot_date: datetime=None, unmount_request_id: str=None, vm_id: str=None):
        """VmwareVmMountSummaryV1 - a model defined in OpenAPI

        :param attaching_disk_count: The attaching_disk_count of this VmwareVmMountSummaryV1.
        :param create_datastore_only_mount: The create_datastore_only_mount of this VmwareVmMountSummaryV1.
        :param datastore_name: The datastore_name of this VmwareVmMountSummaryV1.
        :param datastore_ready: The datastore_ready of this VmwareVmMountSummaryV1.
        :param has_attaching_disk: The has_attaching_disk of this VmwareVmMountSummaryV1.
        :param host_id: The host_id of this VmwareVmMountSummaryV1.
        :param id: The id of this VmwareVmMountSummaryV1.
        :param is_ready: The is_ready of this VmwareVmMountSummaryV1.
        :param mount_request_id: The mount_request_id of this VmwareVmMountSummaryV1.
        :param mount_timestamp: The mount_timestamp of this VmwareVmMountSummaryV1.
        :param mounted_vm_id: The mounted_vm_id of this VmwareVmMountSummaryV1.
        :param snapshot_date: The snapshot_date of this VmwareVmMountSummaryV1.
        :param unmount_request_id: The unmount_request_id of this VmwareVmMountSummaryV1.
        :param vm_id: The vm_id of this VmwareVmMountSummaryV1.
        """
        self.openapi_types = {
            'attaching_disk_count': int,
            'create_datastore_only_mount': bool,
            'datastore_name': str,
            'datastore_ready': bool,
            'has_attaching_disk': bool,
            'host_id': str,
            'id': str,
            'is_ready': bool,
            'mount_request_id': str,
            'mount_timestamp': datetime,
            'mounted_vm_id': str,
            'snapshot_date': datetime,
            'unmount_request_id': str,
            'vm_id': str
        }

        self.attribute_map = {
            'attaching_disk_count': 'attachingDiskCount',
            'create_datastore_only_mount': 'createDatastoreOnlyMount',
            'datastore_name': 'datastoreName',
            'datastore_ready': 'datastoreReady',
            'has_attaching_disk': 'hasAttachingDisk',
            'host_id': 'hostId',
            'id': 'id',
            'is_ready': 'isReady',
            'mount_request_id': 'mountRequestId',
            'mount_timestamp': 'mountTimestamp',
            'mounted_vm_id': 'mountedVmId',
            'snapshot_date': 'snapshotDate',
            'unmount_request_id': 'unmountRequestId',
            'vm_id': 'vmId'
        }

        self._attaching_disk_count = attaching_disk_count
        self._create_datastore_only_mount = create_datastore_only_mount
        self._datastore_name = datastore_name
        self._datastore_ready = datastore_ready
        self._has_attaching_disk = has_attaching_disk
        self._host_id = host_id
        self._id = id
        self._is_ready = is_ready
        self._mount_request_id = mount_request_id
        self._mount_timestamp = mount_timestamp
        self._mounted_vm_id = mounted_vm_id
        self._snapshot_date = snapshot_date
        self._unmount_request_id = unmount_request_id
        self._vm_id = vm_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VmwareVmMountSummaryV1':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VmwareVmMountSummaryV1 of this VmwareVmMountSummaryV1.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attaching_disk_count(self):
        """Gets the attaching_disk_count of this VmwareVmMountSummaryV1.

        An integer value that identifies how many disks are attached.

        :return: The attaching_disk_count of this VmwareVmMountSummaryV1.
        :rtype: int
        """
        return self._attaching_disk_count

    @attaching_disk_count.setter
    def attaching_disk_count(self, attaching_disk_count):
        """Sets the attaching_disk_count of this VmwareVmMountSummaryV1.

        An integer value that identifies how many disks are attached.

        :param attaching_disk_count: The attaching_disk_count of this VmwareVmMountSummaryV1.
        :type attaching_disk_count: int
        """

        self._attaching_disk_count = attaching_disk_count

    @property
    def create_datastore_only_mount(self):
        """Gets the create_datastore_only_mount of this VmwareVmMountSummaryV1.

        This boolean value determines whether or not the mount is created as a datastore only. When 'true,' the mount is created with datastore and not the associated virtual machine. When 'false,' the mount is created with both the datastore and the associated virtual machine.

        :return: The create_datastore_only_mount of this VmwareVmMountSummaryV1.
        :rtype: bool
        """
        return self._create_datastore_only_mount

    @create_datastore_only_mount.setter
    def create_datastore_only_mount(self, create_datastore_only_mount):
        """Sets the create_datastore_only_mount of this VmwareVmMountSummaryV1.

        This boolean value determines whether or not the mount is created as a datastore only. When 'true,' the mount is created with datastore and not the associated virtual machine. When 'false,' the mount is created with both the datastore and the associated virtual machine.

        :param create_datastore_only_mount: The create_datastore_only_mount of this VmwareVmMountSummaryV1.
        :type create_datastore_only_mount: bool
        """

        self._create_datastore_only_mount = create_datastore_only_mount

    @property
    def datastore_name(self):
        """Gets the datastore_name of this VmwareVmMountSummaryV1.

        The name of the datastore that contains the mounted VMDK.

        :return: The datastore_name of this VmwareVmMountSummaryV1.
        :rtype: str
        """
        return self._datastore_name

    @datastore_name.setter
    def datastore_name(self, datastore_name):
        """Sets the datastore_name of this VmwareVmMountSummaryV1.

        The name of the datastore that contains the mounted VMDK.

        :param datastore_name: The datastore_name of this VmwareVmMountSummaryV1.
        :type datastore_name: str
        """

        self._datastore_name = datastore_name

    @property
    def datastore_ready(self):
        """Gets the datastore_ready of this VmwareVmMountSummaryV1.

        A boolean value that specifies whether the datastore is ready. When 'true,' the datastore is ready. When 'false,' the datastore is not ready.

        :return: The datastore_ready of this VmwareVmMountSummaryV1.
        :rtype: bool
        """
        return self._datastore_ready

    @datastore_ready.setter
    def datastore_ready(self, datastore_ready):
        """Sets the datastore_ready of this VmwareVmMountSummaryV1.

        A boolean value that specifies whether the datastore is ready. When 'true,' the datastore is ready. When 'false,' the datastore is not ready.

        :param datastore_ready: The datastore_ready of this VmwareVmMountSummaryV1.
        :type datastore_ready: bool
        """

        self._datastore_ready = datastore_ready

    @property
    def has_attaching_disk(self):
        """Gets the has_attaching_disk of this VmwareVmMountSummaryV1.

        A Boolean value that determines whether this job is an attaching disk mount job. When 'true,' this is an attaching disk mount job. When 'false,' this is not an attaching disk mount job.

        :return: The has_attaching_disk of this VmwareVmMountSummaryV1.
        :rtype: bool
        """
        return self._has_attaching_disk

    @has_attaching_disk.setter
    def has_attaching_disk(self, has_attaching_disk):
        """Sets the has_attaching_disk of this VmwareVmMountSummaryV1.

        A Boolean value that determines whether this job is an attaching disk mount job. When 'true,' this is an attaching disk mount job. When 'false,' this is not an attaching disk mount job.

        :param has_attaching_disk: The has_attaching_disk of this VmwareVmMountSummaryV1.
        :type has_attaching_disk: bool
        """

        self._has_attaching_disk = has_attaching_disk

    @property
    def host_id(self):
        """Gets the host_id of this VmwareVmMountSummaryV1.


        :return: The host_id of this VmwareVmMountSummaryV1.
        :rtype: str
        """
        return self._host_id

    @host_id.setter
    def host_id(self, host_id):
        """Sets the host_id of this VmwareVmMountSummaryV1.


        :param host_id: The host_id of this VmwareVmMountSummaryV1.
        :type host_id: str
        """

        self._host_id = host_id

    @property
    def id(self):
        """Gets the id of this VmwareVmMountSummaryV1.


        :return: The id of this VmwareVmMountSummaryV1.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this VmwareVmMountSummaryV1.


        :param id: The id of this VmwareVmMountSummaryV1.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def is_ready(self):
        """Gets the is_ready of this VmwareVmMountSummaryV1.


        :return: The is_ready of this VmwareVmMountSummaryV1.
        :rtype: bool
        """
        return self._is_ready

    @is_ready.setter
    def is_ready(self, is_ready):
        """Sets the is_ready of this VmwareVmMountSummaryV1.


        :param is_ready: The is_ready of this VmwareVmMountSummaryV1.
        :type is_ready: bool
        """
        if is_ready is None:
            raise ValueError("Invalid value for `is_ready`, must not be `None`")

        self._is_ready = is_ready

    @property
    def mount_request_id(self):
        """Gets the mount_request_id of this VmwareVmMountSummaryV1.


        :return: The mount_request_id of this VmwareVmMountSummaryV1.
        :rtype: str
        """
        return self._mount_request_id

    @mount_request_id.setter
    def mount_request_id(self, mount_request_id):
        """Sets the mount_request_id of this VmwareVmMountSummaryV1.


        :param mount_request_id: The mount_request_id of this VmwareVmMountSummaryV1.
        :type mount_request_id: str
        """

        self._mount_request_id = mount_request_id

    @property
    def mount_timestamp(self):
        """Gets the mount_timestamp of this VmwareVmMountSummaryV1.

        Gives the timestamp at which the mount was created.

        :return: The mount_timestamp of this VmwareVmMountSummaryV1.
        :rtype: datetime
        """
        return self._mount_timestamp

    @mount_timestamp.setter
    def mount_timestamp(self, mount_timestamp):
        """Sets the mount_timestamp of this VmwareVmMountSummaryV1.

        Gives the timestamp at which the mount was created.

        :param mount_timestamp: The mount_timestamp of this VmwareVmMountSummaryV1.
        :type mount_timestamp: datetime
        """

        self._mount_timestamp = mount_timestamp

    @property
    def mounted_vm_id(self):
        """Gets the mounted_vm_id of this VmwareVmMountSummaryV1.


        :return: The mounted_vm_id of this VmwareVmMountSummaryV1.
        :rtype: str
        """
        return self._mounted_vm_id

    @mounted_vm_id.setter
    def mounted_vm_id(self, mounted_vm_id):
        """Sets the mounted_vm_id of this VmwareVmMountSummaryV1.


        :param mounted_vm_id: The mounted_vm_id of this VmwareVmMountSummaryV1.
        :type mounted_vm_id: str
        """

        self._mounted_vm_id = mounted_vm_id

    @property
    def snapshot_date(self):
        """Gets the snapshot_date of this VmwareVmMountSummaryV1.


        :return: The snapshot_date of this VmwareVmMountSummaryV1.
        :rtype: datetime
        """
        return self._snapshot_date

    @snapshot_date.setter
    def snapshot_date(self, snapshot_date):
        """Sets the snapshot_date of this VmwareVmMountSummaryV1.


        :param snapshot_date: The snapshot_date of this VmwareVmMountSummaryV1.
        :type snapshot_date: datetime
        """
        if snapshot_date is None:
            raise ValueError("Invalid value for `snapshot_date`, must not be `None`")

        self._snapshot_date = snapshot_date

    @property
    def unmount_request_id(self):
        """Gets the unmount_request_id of this VmwareVmMountSummaryV1.


        :return: The unmount_request_id of this VmwareVmMountSummaryV1.
        :rtype: str
        """
        return self._unmount_request_id

    @unmount_request_id.setter
    def unmount_request_id(self, unmount_request_id):
        """Sets the unmount_request_id of this VmwareVmMountSummaryV1.


        :param unmount_request_id: The unmount_request_id of this VmwareVmMountSummaryV1.
        :type unmount_request_id: str
        """

        self._unmount_request_id = unmount_request_id

    @property
    def vm_id(self):
        """Gets the vm_id of this VmwareVmMountSummaryV1.


        :return: The vm_id of this VmwareVmMountSummaryV1.
        :rtype: str
        """
        return self._vm_id

    @vm_id.setter
    def vm_id(self, vm_id):
        """Sets the vm_id of this VmwareVmMountSummaryV1.


        :param vm_id: The vm_id of this VmwareVmMountSummaryV1.
        :type vm_id: str
        """
        if vm_id is None:
            raise ValueError("Invalid value for `vm_id`, must not be `None`")

        self._vm_id = vm_id
