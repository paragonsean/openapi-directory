# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.mssql_script_detail import MssqlScriptDetail
from openapi_server import util


class MssqlDbUpdate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, copy_only: bool=None, log_backup_frequency_in_seconds: int=None, log_retention_hours: int=None, configured_sla_domain_id: str=None, use_configured_default_log_retention: bool=None, is_paused: bool=None, max_data_streams: int=None, post_backup_script: MssqlScriptDetail=None, pre_backup_script: MssqlScriptDetail=None, should_force_full: bool=None):
        """MssqlDbUpdate - a model defined in OpenAPI

        :param copy_only: The copy_only of this MssqlDbUpdate.
        :param log_backup_frequency_in_seconds: The log_backup_frequency_in_seconds of this MssqlDbUpdate.
        :param log_retention_hours: The log_retention_hours of this MssqlDbUpdate.
        :param configured_sla_domain_id: The configured_sla_domain_id of this MssqlDbUpdate.
        :param use_configured_default_log_retention: The use_configured_default_log_retention of this MssqlDbUpdate.
        :param is_paused: The is_paused of this MssqlDbUpdate.
        :param max_data_streams: The max_data_streams of this MssqlDbUpdate.
        :param post_backup_script: The post_backup_script of this MssqlDbUpdate.
        :param pre_backup_script: The pre_backup_script of this MssqlDbUpdate.
        :param should_force_full: The should_force_full of this MssqlDbUpdate.
        """
        self.openapi_types = {
            'copy_only': bool,
            'log_backup_frequency_in_seconds': int,
            'log_retention_hours': int,
            'configured_sla_domain_id': str,
            'use_configured_default_log_retention': bool,
            'is_paused': bool,
            'max_data_streams': int,
            'post_backup_script': MssqlScriptDetail,
            'pre_backup_script': MssqlScriptDetail,
            'should_force_full': bool
        }

        self.attribute_map = {
            'copy_only': 'copyOnly',
            'log_backup_frequency_in_seconds': 'logBackupFrequencyInSeconds',
            'log_retention_hours': 'logRetentionHours',
            'configured_sla_domain_id': 'configuredSlaDomainId',
            'use_configured_default_log_retention': 'useConfiguredDefaultLogRetention',
            'is_paused': 'isPaused',
            'max_data_streams': 'maxDataStreams',
            'post_backup_script': 'postBackupScript',
            'pre_backup_script': 'preBackupScript',
            'should_force_full': 'shouldForceFull'
        }

        self._copy_only = copy_only
        self._log_backup_frequency_in_seconds = log_backup_frequency_in_seconds
        self._log_retention_hours = log_retention_hours
        self._configured_sla_domain_id = configured_sla_domain_id
        self._use_configured_default_log_retention = use_configured_default_log_retention
        self._is_paused = is_paused
        self._max_data_streams = max_data_streams
        self._post_backup_script = post_backup_script
        self._pre_backup_script = pre_backup_script
        self._should_force_full = should_force_full

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MssqlDbUpdate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MssqlDbUpdate of this MssqlDbUpdate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def copy_only(self):
        """Gets the copy_only of this MssqlDbUpdate.

        Boolean value that specifies whether or not to perform copy-only backups of the database. When true, database backups are copy-only backups. When false, database backups are full backups.

        :return: The copy_only of this MssqlDbUpdate.
        :rtype: bool
        """
        return self._copy_only

    @copy_only.setter
    def copy_only(self, copy_only):
        """Sets the copy_only of this MssqlDbUpdate.

        Boolean value that specifies whether or not to perform copy-only backups of the database. When true, database backups are copy-only backups. When false, database backups are full backups.

        :param copy_only: The copy_only of this MssqlDbUpdate.
        :type copy_only: bool
        """

        self._copy_only = copy_only

    @property
    def log_backup_frequency_in_seconds(self):
        """Gets the log_backup_frequency_in_seconds of this MssqlDbUpdate.

        Seconds between two log backups. A value of 0 disables log backup.

        :return: The log_backup_frequency_in_seconds of this MssqlDbUpdate.
        :rtype: int
        """
        return self._log_backup_frequency_in_seconds

    @log_backup_frequency_in_seconds.setter
    def log_backup_frequency_in_seconds(self, log_backup_frequency_in_seconds):
        """Sets the log_backup_frequency_in_seconds of this MssqlDbUpdate.

        Seconds between two log backups. A value of 0 disables log backup.

        :param log_backup_frequency_in_seconds: The log_backup_frequency_in_seconds of this MssqlDbUpdate.
        :type log_backup_frequency_in_seconds: int
        """

        self._log_backup_frequency_in_seconds = log_backup_frequency_in_seconds

    @property
    def log_retention_hours(self):
        """Gets the log_retention_hours of this MssqlDbUpdate.

        Number of hours to retain a log backup. When the value is set to -1 the Rubrik cluster retains the log backup until the database snapshots that precede the log backup have expired.

        :return: The log_retention_hours of this MssqlDbUpdate.
        :rtype: int
        """
        return self._log_retention_hours

    @log_retention_hours.setter
    def log_retention_hours(self, log_retention_hours):
        """Sets the log_retention_hours of this MssqlDbUpdate.

        Number of hours to retain a log backup. When the value is set to -1 the Rubrik cluster retains the log backup until the database snapshots that precede the log backup have expired.

        :param log_retention_hours: The log_retention_hours of this MssqlDbUpdate.
        :type log_retention_hours: int
        """

        self._log_retention_hours = log_retention_hours

    @property
    def configured_sla_domain_id(self):
        """Gets the configured_sla_domain_id of this MssqlDbUpdate.

        SLA Domain ID assigned to instance. Existing snapshots of the instance will be retained with the configuration of specified SLA Domain.

        :return: The configured_sla_domain_id of this MssqlDbUpdate.
        :rtype: str
        """
        return self._configured_sla_domain_id

    @configured_sla_domain_id.setter
    def configured_sla_domain_id(self, configured_sla_domain_id):
        """Sets the configured_sla_domain_id of this MssqlDbUpdate.

        SLA Domain ID assigned to instance. Existing snapshots of the instance will be retained with the configuration of specified SLA Domain.

        :param configured_sla_domain_id: The configured_sla_domain_id of this MssqlDbUpdate.
        :type configured_sla_domain_id: str
        """

        self._configured_sla_domain_id = configured_sla_domain_id

    @property
    def use_configured_default_log_retention(self):
        """Gets the use_configured_default_log_retention of this MssqlDbUpdate.

        Determines whether to use the configured default value of log backup retention.

        :return: The use_configured_default_log_retention of this MssqlDbUpdate.
        :rtype: bool
        """
        return self._use_configured_default_log_retention

    @use_configured_default_log_retention.setter
    def use_configured_default_log_retention(self, use_configured_default_log_retention):
        """Sets the use_configured_default_log_retention of this MssqlDbUpdate.

        Determines whether to use the configured default value of log backup retention.

        :param use_configured_default_log_retention: The use_configured_default_log_retention of this MssqlDbUpdate.
        :type use_configured_default_log_retention: bool
        """

        self._use_configured_default_log_retention = use_configured_default_log_retention

    @property
    def is_paused(self):
        """Gets the is_paused of this MssqlDbUpdate.

        Whether to pause or resume backups/archival for this database.

        :return: The is_paused of this MssqlDbUpdate.
        :rtype: bool
        """
        return self._is_paused

    @is_paused.setter
    def is_paused(self, is_paused):
        """Sets the is_paused of this MssqlDbUpdate.

        Whether to pause or resume backups/archival for this database.

        :param is_paused: The is_paused of this MssqlDbUpdate.
        :type is_paused: bool
        """

        self._is_paused = is_paused

    @property
    def max_data_streams(self):
        """Gets the max_data_streams of this MssqlDbUpdate.

        Maximum number of parallel data streams that can be used to back up the database.

        :return: The max_data_streams of this MssqlDbUpdate.
        :rtype: int
        """
        return self._max_data_streams

    @max_data_streams.setter
    def max_data_streams(self, max_data_streams):
        """Sets the max_data_streams of this MssqlDbUpdate.

        Maximum number of parallel data streams that can be used to back up the database.

        :param max_data_streams: The max_data_streams of this MssqlDbUpdate.
        :type max_data_streams: int
        """

        self._max_data_streams = max_data_streams

    @property
    def post_backup_script(self):
        """Gets the post_backup_script of this MssqlDbUpdate.


        :return: The post_backup_script of this MssqlDbUpdate.
        :rtype: MssqlScriptDetail
        """
        return self._post_backup_script

    @post_backup_script.setter
    def post_backup_script(self, post_backup_script):
        """Sets the post_backup_script of this MssqlDbUpdate.


        :param post_backup_script: The post_backup_script of this MssqlDbUpdate.
        :type post_backup_script: MssqlScriptDetail
        """

        self._post_backup_script = post_backup_script

    @property
    def pre_backup_script(self):
        """Gets the pre_backup_script of this MssqlDbUpdate.


        :return: The pre_backup_script of this MssqlDbUpdate.
        :rtype: MssqlScriptDetail
        """
        return self._pre_backup_script

    @pre_backup_script.setter
    def pre_backup_script(self, pre_backup_script):
        """Sets the pre_backup_script of this MssqlDbUpdate.


        :param pre_backup_script: The pre_backup_script of this MssqlDbUpdate.
        :type pre_backup_script: MssqlScriptDetail
        """

        self._pre_backup_script = pre_backup_script

    @property
    def should_force_full(self):
        """Gets the should_force_full of this MssqlDbUpdate.

        Determines whether to force a full for the next snapshot of a SQL Server database. When this value is true, the Rubrik cluster takes a full snapshot. This value is false by default and is reset to false after a successful full snapshot.

        :return: The should_force_full of this MssqlDbUpdate.
        :rtype: bool
        """
        return self._should_force_full

    @should_force_full.setter
    def should_force_full(self, should_force_full):
        """Sets the should_force_full of this MssqlDbUpdate.

        Determines whether to force a full for the next snapshot of a SQL Server database. When this value is true, the Rubrik cluster takes a full snapshot. This value is false by default and is reset to false after a successful full snapshot.

        :param should_force_full: The should_force_full of this MssqlDbUpdate.
        :type should_force_full: bool
        """

        self._should_force_full = should_force_full
