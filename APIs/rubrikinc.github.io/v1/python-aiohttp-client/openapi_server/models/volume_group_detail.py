# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.blackout_window_status import BlackoutWindowStatus
from openapi_server.models.blackout_windows import BlackoutWindows
from openapi_server.models.configured_sla_type import ConfiguredSlaType
from openapi_server.models.host_volume_summary import HostVolumeSummary
from openapi_server.models.managed_object_pending_sla_info import ManagedObjectPendingSlaInfo
from openapi_server import util


class VolumeGroupDetail(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, configured_sla_domain_id: str=None, configured_sla_domain_name: str=None, configured_sla_domain_type: ConfiguredSlaType=None, id: str=None, is_configured_sla_domain_retention_locked: bool=None, name: str=None, primary_cluster_id: str=None, sla_last_update_time: datetime=None, effective_sla_domain_id: str=None, effective_sla_domain_name: str=None, effective_sla_domain_polaris_managed_id: str=None, effective_sla_source_object_id: str=None, effective_sla_source_object_name: str=None, is_effective_sla_domain_retention_locked: bool=None, retention_sla_domain_id: str=None, sla_assignment: str=None, force_full: bool=None, host_id: str=None, hostname: str=None, is_relic: bool=None, needs_migration: bool=None, blackout_window_status: BlackoutWindowStatus=None, blackout_windows: BlackoutWindows=None, is_paused: bool=None, pending_sla_domain: ManagedObjectPendingSlaInfo=None, volumes: List[HostVolumeSummary]=None):
        """VolumeGroupDetail - a model defined in OpenAPI

        :param configured_sla_domain_id: The configured_sla_domain_id of this VolumeGroupDetail.
        :param configured_sla_domain_name: The configured_sla_domain_name of this VolumeGroupDetail.
        :param configured_sla_domain_type: The configured_sla_domain_type of this VolumeGroupDetail.
        :param id: The id of this VolumeGroupDetail.
        :param is_configured_sla_domain_retention_locked: The is_configured_sla_domain_retention_locked of this VolumeGroupDetail.
        :param name: The name of this VolumeGroupDetail.
        :param primary_cluster_id: The primary_cluster_id of this VolumeGroupDetail.
        :param sla_last_update_time: The sla_last_update_time of this VolumeGroupDetail.
        :param effective_sla_domain_id: The effective_sla_domain_id of this VolumeGroupDetail.
        :param effective_sla_domain_name: The effective_sla_domain_name of this VolumeGroupDetail.
        :param effective_sla_domain_polaris_managed_id: The effective_sla_domain_polaris_managed_id of this VolumeGroupDetail.
        :param effective_sla_source_object_id: The effective_sla_source_object_id of this VolumeGroupDetail.
        :param effective_sla_source_object_name: The effective_sla_source_object_name of this VolumeGroupDetail.
        :param is_effective_sla_domain_retention_locked: The is_effective_sla_domain_retention_locked of this VolumeGroupDetail.
        :param retention_sla_domain_id: The retention_sla_domain_id of this VolumeGroupDetail.
        :param sla_assignment: The sla_assignment of this VolumeGroupDetail.
        :param force_full: The force_full of this VolumeGroupDetail.
        :param host_id: The host_id of this VolumeGroupDetail.
        :param hostname: The hostname of this VolumeGroupDetail.
        :param is_relic: The is_relic of this VolumeGroupDetail.
        :param needs_migration: The needs_migration of this VolumeGroupDetail.
        :param blackout_window_status: The blackout_window_status of this VolumeGroupDetail.
        :param blackout_windows: The blackout_windows of this VolumeGroupDetail.
        :param is_paused: The is_paused of this VolumeGroupDetail.
        :param pending_sla_domain: The pending_sla_domain of this VolumeGroupDetail.
        :param volumes: The volumes of this VolumeGroupDetail.
        """
        self.openapi_types = {
            'configured_sla_domain_id': str,
            'configured_sla_domain_name': str,
            'configured_sla_domain_type': ConfiguredSlaType,
            'id': str,
            'is_configured_sla_domain_retention_locked': bool,
            'name': str,
            'primary_cluster_id': str,
            'sla_last_update_time': datetime,
            'effective_sla_domain_id': str,
            'effective_sla_domain_name': str,
            'effective_sla_domain_polaris_managed_id': str,
            'effective_sla_source_object_id': str,
            'effective_sla_source_object_name': str,
            'is_effective_sla_domain_retention_locked': bool,
            'retention_sla_domain_id': str,
            'sla_assignment': str,
            'force_full': bool,
            'host_id': str,
            'hostname': str,
            'is_relic': bool,
            'needs_migration': bool,
            'blackout_window_status': BlackoutWindowStatus,
            'blackout_windows': BlackoutWindows,
            'is_paused': bool,
            'pending_sla_domain': ManagedObjectPendingSlaInfo,
            'volumes': List[HostVolumeSummary]
        }

        self.attribute_map = {
            'configured_sla_domain_id': 'configuredSlaDomainId',
            'configured_sla_domain_name': 'configuredSlaDomainName',
            'configured_sla_domain_type': 'configuredSlaDomainType',
            'id': 'id',
            'is_configured_sla_domain_retention_locked': 'isConfiguredSlaDomainRetentionLocked',
            'name': 'name',
            'primary_cluster_id': 'primaryClusterId',
            'sla_last_update_time': 'slaLastUpdateTime',
            'effective_sla_domain_id': 'effectiveSlaDomainId',
            'effective_sla_domain_name': 'effectiveSlaDomainName',
            'effective_sla_domain_polaris_managed_id': 'effectiveSlaDomainPolarisManagedId',
            'effective_sla_source_object_id': 'effectiveSlaSourceObjectId',
            'effective_sla_source_object_name': 'effectiveSlaSourceObjectName',
            'is_effective_sla_domain_retention_locked': 'isEffectiveSlaDomainRetentionLocked',
            'retention_sla_domain_id': 'retentionSlaDomainId',
            'sla_assignment': 'slaAssignment',
            'force_full': 'forceFull',
            'host_id': 'hostId',
            'hostname': 'hostname',
            'is_relic': 'isRelic',
            'needs_migration': 'needsMigration',
            'blackout_window_status': 'blackoutWindowStatus',
            'blackout_windows': 'blackoutWindows',
            'is_paused': 'isPaused',
            'pending_sla_domain': 'pendingSlaDomain',
            'volumes': 'volumes'
        }

        self._configured_sla_domain_id = configured_sla_domain_id
        self._configured_sla_domain_name = configured_sla_domain_name
        self._configured_sla_domain_type = configured_sla_domain_type
        self._id = id
        self._is_configured_sla_domain_retention_locked = is_configured_sla_domain_retention_locked
        self._name = name
        self._primary_cluster_id = primary_cluster_id
        self._sla_last_update_time = sla_last_update_time
        self._effective_sla_domain_id = effective_sla_domain_id
        self._effective_sla_domain_name = effective_sla_domain_name
        self._effective_sla_domain_polaris_managed_id = effective_sla_domain_polaris_managed_id
        self._effective_sla_source_object_id = effective_sla_source_object_id
        self._effective_sla_source_object_name = effective_sla_source_object_name
        self._is_effective_sla_domain_retention_locked = is_effective_sla_domain_retention_locked
        self._retention_sla_domain_id = retention_sla_domain_id
        self._sla_assignment = sla_assignment
        self._force_full = force_full
        self._host_id = host_id
        self._hostname = hostname
        self._is_relic = is_relic
        self._needs_migration = needs_migration
        self._blackout_window_status = blackout_window_status
        self._blackout_windows = blackout_windows
        self._is_paused = is_paused
        self._pending_sla_domain = pending_sla_domain
        self._volumes = volumes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VolumeGroupDetail':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VolumeGroupDetail of this VolumeGroupDetail.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def configured_sla_domain_id(self):
        """Gets the configured_sla_domain_id of this VolumeGroupDetail.

        The ID of the SLA Domain policy to assign to the Volume Group.

        :return: The configured_sla_domain_id of this VolumeGroupDetail.
        :rtype: str
        """
        return self._configured_sla_domain_id

    @configured_sla_domain_id.setter
    def configured_sla_domain_id(self, configured_sla_domain_id):
        """Sets the configured_sla_domain_id of this VolumeGroupDetail.

        The ID of the SLA Domain policy to assign to the Volume Group.

        :param configured_sla_domain_id: The configured_sla_domain_id of this VolumeGroupDetail.
        :type configured_sla_domain_id: str
        """
        if configured_sla_domain_id is None:
            raise ValueError("Invalid value for `configured_sla_domain_id`, must not be `None`")

        self._configured_sla_domain_id = configured_sla_domain_id

    @property
    def configured_sla_domain_name(self):
        """Gets the configured_sla_domain_name of this VolumeGroupDetail.

        The name of the SLA Domain configured directly on the Rubrik object.

        :return: The configured_sla_domain_name of this VolumeGroupDetail.
        :rtype: str
        """
        return self._configured_sla_domain_name

    @configured_sla_domain_name.setter
    def configured_sla_domain_name(self, configured_sla_domain_name):
        """Sets the configured_sla_domain_name of this VolumeGroupDetail.

        The name of the SLA Domain configured directly on the Rubrik object.

        :param configured_sla_domain_name: The configured_sla_domain_name of this VolumeGroupDetail.
        :type configured_sla_domain_name: str
        """
        if configured_sla_domain_name is None:
            raise ValueError("Invalid value for `configured_sla_domain_name`, must not be `None`")

        self._configured_sla_domain_name = configured_sla_domain_name

    @property
    def configured_sla_domain_type(self):
        """Gets the configured_sla_domain_type of this VolumeGroupDetail.


        :return: The configured_sla_domain_type of this VolumeGroupDetail.
        :rtype: ConfiguredSlaType
        """
        return self._configured_sla_domain_type

    @configured_sla_domain_type.setter
    def configured_sla_domain_type(self, configured_sla_domain_type):
        """Sets the configured_sla_domain_type of this VolumeGroupDetail.


        :param configured_sla_domain_type: The configured_sla_domain_type of this VolumeGroupDetail.
        :type configured_sla_domain_type: ConfiguredSlaType
        """

        self._configured_sla_domain_type = configured_sla_domain_type

    @property
    def id(self):
        """Gets the id of this VolumeGroupDetail.

        The unique ID of the Volume Group.

        :return: The id of this VolumeGroupDetail.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this VolumeGroupDetail.

        The unique ID of the Volume Group.

        :param id: The id of this VolumeGroupDetail.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def is_configured_sla_domain_retention_locked(self):
        """Gets the is_configured_sla_domain_retention_locked of this VolumeGroupDetail.

        Indicates whether the configured SLA Domain is Retention Locked. When this value is 'true', the configured SLA Domain is a Retention Lock SLA Domain.

        :return: The is_configured_sla_domain_retention_locked of this VolumeGroupDetail.
        :rtype: bool
        """
        return self._is_configured_sla_domain_retention_locked

    @is_configured_sla_domain_retention_locked.setter
    def is_configured_sla_domain_retention_locked(self, is_configured_sla_domain_retention_locked):
        """Sets the is_configured_sla_domain_retention_locked of this VolumeGroupDetail.

        Indicates whether the configured SLA Domain is Retention Locked. When this value is 'true', the configured SLA Domain is a Retention Lock SLA Domain.

        :param is_configured_sla_domain_retention_locked: The is_configured_sla_domain_retention_locked of this VolumeGroupDetail.
        :type is_configured_sla_domain_retention_locked: bool
        """

        self._is_configured_sla_domain_retention_locked = is_configured_sla_domain_retention_locked

    @property
    def name(self):
        """Gets the name of this VolumeGroupDetail.

        The name of the Volume Group.

        :return: The name of this VolumeGroupDetail.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this VolumeGroupDetail.

        The name of the Volume Group.

        :param name: The name of this VolumeGroupDetail.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def primary_cluster_id(self):
        """Gets the primary_cluster_id of this VolumeGroupDetail.

        The ID of the cluster that manages the Rubrik object.

        :return: The primary_cluster_id of this VolumeGroupDetail.
        :rtype: str
        """
        return self._primary_cluster_id

    @primary_cluster_id.setter
    def primary_cluster_id(self, primary_cluster_id):
        """Sets the primary_cluster_id of this VolumeGroupDetail.

        The ID of the cluster that manages the Rubrik object.

        :param primary_cluster_id: The primary_cluster_id of this VolumeGroupDetail.
        :type primary_cluster_id: str
        """
        if primary_cluster_id is None:
            raise ValueError("Invalid value for `primary_cluster_id`, must not be `None`")

        self._primary_cluster_id = primary_cluster_id

    @property
    def sla_last_update_time(self):
        """Gets the sla_last_update_time of this VolumeGroupDetail.

        The UTC time when the SLA Domain was last updated.

        :return: The sla_last_update_time of this VolumeGroupDetail.
        :rtype: datetime
        """
        return self._sla_last_update_time

    @sla_last_update_time.setter
    def sla_last_update_time(self, sla_last_update_time):
        """Sets the sla_last_update_time of this VolumeGroupDetail.

        The UTC time when the SLA Domain was last updated.

        :param sla_last_update_time: The sla_last_update_time of this VolumeGroupDetail.
        :type sla_last_update_time: datetime
        """

        self._sla_last_update_time = sla_last_update_time

    @property
    def effective_sla_domain_id(self):
        """Gets the effective_sla_domain_id of this VolumeGroupDetail.

        The ID of the SLA Domain that controls the protection of the Rubrik object.

        :return: The effective_sla_domain_id of this VolumeGroupDetail.
        :rtype: str
        """
        return self._effective_sla_domain_id

    @effective_sla_domain_id.setter
    def effective_sla_domain_id(self, effective_sla_domain_id):
        """Sets the effective_sla_domain_id of this VolumeGroupDetail.

        The ID of the SLA Domain that controls the protection of the Rubrik object.

        :param effective_sla_domain_id: The effective_sla_domain_id of this VolumeGroupDetail.
        :type effective_sla_domain_id: str
        """
        if effective_sla_domain_id is None:
            raise ValueError("Invalid value for `effective_sla_domain_id`, must not be `None`")

        self._effective_sla_domain_id = effective_sla_domain_id

    @property
    def effective_sla_domain_name(self):
        """Gets the effective_sla_domain_name of this VolumeGroupDetail.

        The name of the SLA Domain that controls the protection of the Rubrik object.

        :return: The effective_sla_domain_name of this VolumeGroupDetail.
        :rtype: str
        """
        return self._effective_sla_domain_name

    @effective_sla_domain_name.setter
    def effective_sla_domain_name(self, effective_sla_domain_name):
        """Sets the effective_sla_domain_name of this VolumeGroupDetail.

        The name of the SLA Domain that controls the protection of the Rubrik object.

        :param effective_sla_domain_name: The effective_sla_domain_name of this VolumeGroupDetail.
        :type effective_sla_domain_name: str
        """
        if effective_sla_domain_name is None:
            raise ValueError("Invalid value for `effective_sla_domain_name`, must not be `None`")

        self._effective_sla_domain_name = effective_sla_domain_name

    @property
    def effective_sla_domain_polaris_managed_id(self):
        """Gets the effective_sla_domain_polaris_managed_id of this VolumeGroupDetail.

        Optional. This field contains the managed ID of of the Polaris-managed effective SLA Domain.

        :return: The effective_sla_domain_polaris_managed_id of this VolumeGroupDetail.
        :rtype: str
        """
        return self._effective_sla_domain_polaris_managed_id

    @effective_sla_domain_polaris_managed_id.setter
    def effective_sla_domain_polaris_managed_id(self, effective_sla_domain_polaris_managed_id):
        """Sets the effective_sla_domain_polaris_managed_id of this VolumeGroupDetail.

        Optional. This field contains the managed ID of of the Polaris-managed effective SLA Domain.

        :param effective_sla_domain_polaris_managed_id: The effective_sla_domain_polaris_managed_id of this VolumeGroupDetail.
        :type effective_sla_domain_polaris_managed_id: str
        """

        self._effective_sla_domain_polaris_managed_id = effective_sla_domain_polaris_managed_id

    @property
    def effective_sla_source_object_id(self):
        """Gets the effective_sla_source_object_id of this VolumeGroupDetail.

        The ID of the parent of the Rubrik object from which the SLA Domain that controls the protection of Rubrik object is inherited.

        :return: The effective_sla_source_object_id of this VolumeGroupDetail.
        :rtype: str
        """
        return self._effective_sla_source_object_id

    @effective_sla_source_object_id.setter
    def effective_sla_source_object_id(self, effective_sla_source_object_id):
        """Sets the effective_sla_source_object_id of this VolumeGroupDetail.

        The ID of the parent of the Rubrik object from which the SLA Domain that controls the protection of Rubrik object is inherited.

        :param effective_sla_source_object_id: The effective_sla_source_object_id of this VolumeGroupDetail.
        :type effective_sla_source_object_id: str
        """

        self._effective_sla_source_object_id = effective_sla_source_object_id

    @property
    def effective_sla_source_object_name(self):
        """Gets the effective_sla_source_object_name of this VolumeGroupDetail.

        The name of the parent of the Rubrik object from which the SLA Domain that controls the protection of Rubrik object is inherited.

        :return: The effective_sla_source_object_name of this VolumeGroupDetail.
        :rtype: str
        """
        return self._effective_sla_source_object_name

    @effective_sla_source_object_name.setter
    def effective_sla_source_object_name(self, effective_sla_source_object_name):
        """Sets the effective_sla_source_object_name of this VolumeGroupDetail.

        The name of the parent of the Rubrik object from which the SLA Domain that controls the protection of Rubrik object is inherited.

        :param effective_sla_source_object_name: The effective_sla_source_object_name of this VolumeGroupDetail.
        :type effective_sla_source_object_name: str
        """

        self._effective_sla_source_object_name = effective_sla_source_object_name

    @property
    def is_effective_sla_domain_retention_locked(self):
        """Gets the is_effective_sla_domain_retention_locked of this VolumeGroupDetail.

        Indicates whether the effective SLA Domain is Retention Locked. When this value is 'true', the effective SLA domain is a Retention Lock SLA Domain.

        :return: The is_effective_sla_domain_retention_locked of this VolumeGroupDetail.
        :rtype: bool
        """
        return self._is_effective_sla_domain_retention_locked

    @is_effective_sla_domain_retention_locked.setter
    def is_effective_sla_domain_retention_locked(self, is_effective_sla_domain_retention_locked):
        """Sets the is_effective_sla_domain_retention_locked of this VolumeGroupDetail.

        Indicates whether the effective SLA Domain is Retention Locked. When this value is 'true', the effective SLA domain is a Retention Lock SLA Domain.

        :param is_effective_sla_domain_retention_locked: The is_effective_sla_domain_retention_locked of this VolumeGroupDetail.
        :type is_effective_sla_domain_retention_locked: bool
        """

        self._is_effective_sla_domain_retention_locked = is_effective_sla_domain_retention_locked

    @property
    def retention_sla_domain_id(self):
        """Gets the retention_sla_domain_id of this VolumeGroupDetail.

        The ID of the SLA Domain whose retention policy is in use.

        :return: The retention_sla_domain_id of this VolumeGroupDetail.
        :rtype: str
        """
        return self._retention_sla_domain_id

    @retention_sla_domain_id.setter
    def retention_sla_domain_id(self, retention_sla_domain_id):
        """Sets the retention_sla_domain_id of this VolumeGroupDetail.

        The ID of the SLA Domain whose retention policy is in use.

        :param retention_sla_domain_id: The retention_sla_domain_id of this VolumeGroupDetail.
        :type retention_sla_domain_id: str
        """

        self._retention_sla_domain_id = retention_sla_domain_id

    @property
    def sla_assignment(self):
        """Gets the sla_assignment of this VolumeGroupDetail.

        The SLA assignment type. Direct SLA assignment means that a SLA Domain was configured directly on the Rubrik object by the user. Derived SLA assignment means that the Rubrik object inherits an SLA Domain from its parent Rubrik object.

        :return: The sla_assignment of this VolumeGroupDetail.
        :rtype: str
        """
        return self._sla_assignment

    @sla_assignment.setter
    def sla_assignment(self, sla_assignment):
        """Sets the sla_assignment of this VolumeGroupDetail.

        The SLA assignment type. Direct SLA assignment means that a SLA Domain was configured directly on the Rubrik object by the user. Derived SLA assignment means that the Rubrik object inherits an SLA Domain from its parent Rubrik object.

        :param sla_assignment: The sla_assignment of this VolumeGroupDetail.
        :type sla_assignment: str
        """
        allowed_values = ["Derived", "Direct", "Unassigned"]  # noqa: E501
        if sla_assignment not in allowed_values:
            raise ValueError(
                "Invalid value for `sla_assignment` ({0}), must be one of {1}"
                .format(sla_assignment, allowed_values)
            )

        self._sla_assignment = sla_assignment

    @property
    def force_full(self):
        """Gets the force_full of this VolumeGroupDetail.

        Specifies whether the Volume Group is set to take a full snapshot for the next backup.

        :return: The force_full of this VolumeGroupDetail.
        :rtype: bool
        """
        return self._force_full

    @force_full.setter
    def force_full(self, force_full):
        """Sets the force_full of this VolumeGroupDetail.

        Specifies whether the Volume Group is set to take a full snapshot for the next backup.

        :param force_full: The force_full of this VolumeGroupDetail.
        :type force_full: bool
        """

        self._force_full = force_full

    @property
    def host_id(self):
        """Gets the host_id of this VolumeGroupDetail.

        The unique ID of the host that contains the Volume Group.

        :return: The host_id of this VolumeGroupDetail.
        :rtype: str
        """
        return self._host_id

    @host_id.setter
    def host_id(self, host_id):
        """Sets the host_id of this VolumeGroupDetail.

        The unique ID of the host that contains the Volume Group.

        :param host_id: The host_id of this VolumeGroupDetail.
        :type host_id: str
        """

        self._host_id = host_id

    @property
    def hostname(self):
        """Gets the hostname of this VolumeGroupDetail.

        The name of the host that contains the Volume Group.

        :return: The hostname of this VolumeGroupDetail.
        :rtype: str
        """
        return self._hostname

    @hostname.setter
    def hostname(self, hostname):
        """Sets the hostname of this VolumeGroupDetail.

        The name of the host that contains the Volume Group.

        :param hostname: The hostname of this VolumeGroupDetail.
        :type hostname: str
        """

        self._hostname = hostname

    @property
    def is_relic(self):
        """Gets the is_relic of this VolumeGroupDetail.

        Specifies whether the Volume Group is accessible on the Rubrik cluster.

        :return: The is_relic of this VolumeGroupDetail.
        :rtype: bool
        """
        return self._is_relic

    @is_relic.setter
    def is_relic(self, is_relic):
        """Sets the is_relic of this VolumeGroupDetail.

        Specifies whether the Volume Group is accessible on the Rubrik cluster.

        :param is_relic: The is_relic of this VolumeGroupDetail.
        :type is_relic: bool
        """
        if is_relic is None:
            raise ValueError("Invalid value for `is_relic`, must not be `None`")

        self._is_relic = is_relic

    @property
    def needs_migration(self):
        """Gets the needs_migration of this VolumeGroupDetail.

        Specifies whether the Volume Group needs to be migrated in order to use the fast VHDX builder. This flag is set only when the Volume Group's last backup job failed due to an error during data fetch, and the backup job did not use the fast VHDX builder.

        :return: The needs_migration of this VolumeGroupDetail.
        :rtype: bool
        """
        return self._needs_migration

    @needs_migration.setter
    def needs_migration(self, needs_migration):
        """Sets the needs_migration of this VolumeGroupDetail.

        Specifies whether the Volume Group needs to be migrated in order to use the fast VHDX builder. This flag is set only when the Volume Group's last backup job failed due to an error during data fetch, and the backup job did not use the fast VHDX builder.

        :param needs_migration: The needs_migration of this VolumeGroupDetail.
        :type needs_migration: bool
        """

        self._needs_migration = needs_migration

    @property
    def blackout_window_status(self):
        """Gets the blackout_window_status of this VolumeGroupDetail.


        :return: The blackout_window_status of this VolumeGroupDetail.
        :rtype: BlackoutWindowStatus
        """
        return self._blackout_window_status

    @blackout_window_status.setter
    def blackout_window_status(self, blackout_window_status):
        """Sets the blackout_window_status of this VolumeGroupDetail.


        :param blackout_window_status: The blackout_window_status of this VolumeGroupDetail.
        :type blackout_window_status: BlackoutWindowStatus
        """
        if blackout_window_status is None:
            raise ValueError("Invalid value for `blackout_window_status`, must not be `None`")

        self._blackout_window_status = blackout_window_status

    @property
    def blackout_windows(self):
        """Gets the blackout_windows of this VolumeGroupDetail.


        :return: The blackout_windows of this VolumeGroupDetail.
        :rtype: BlackoutWindows
        """
        return self._blackout_windows

    @blackout_windows.setter
    def blackout_windows(self, blackout_windows):
        """Sets the blackout_windows of this VolumeGroupDetail.


        :param blackout_windows: The blackout_windows of this VolumeGroupDetail.
        :type blackout_windows: BlackoutWindows
        """
        if blackout_windows is None:
            raise ValueError("Invalid value for `blackout_windows`, must not be `None`")

        self._blackout_windows = blackout_windows

    @property
    def is_paused(self):
        """Gets the is_paused of this VolumeGroupDetail.

        Indicates whether backup, archival, and replication are paused for this Volume Group.

        :return: The is_paused of this VolumeGroupDetail.
        :rtype: bool
        """
        return self._is_paused

    @is_paused.setter
    def is_paused(self, is_paused):
        """Sets the is_paused of this VolumeGroupDetail.

        Indicates whether backup, archival, and replication are paused for this Volume Group.

        :param is_paused: The is_paused of this VolumeGroupDetail.
        :type is_paused: bool
        """
        if is_paused is None:
            raise ValueError("Invalid value for `is_paused`, must not be `None`")

        self._is_paused = is_paused

    @property
    def pending_sla_domain(self):
        """Gets the pending_sla_domain of this VolumeGroupDetail.


        :return: The pending_sla_domain of this VolumeGroupDetail.
        :rtype: ManagedObjectPendingSlaInfo
        """
        return self._pending_sla_domain

    @pending_sla_domain.setter
    def pending_sla_domain(self, pending_sla_domain):
        """Sets the pending_sla_domain of this VolumeGroupDetail.


        :param pending_sla_domain: The pending_sla_domain of this VolumeGroupDetail.
        :type pending_sla_domain: ManagedObjectPendingSlaInfo
        """

        self._pending_sla_domain = pending_sla_domain

    @property
    def volumes(self):
        """Gets the volumes of this VolumeGroupDetail.

        Configuration details for the volumes in the Volume Group.

        :return: The volumes of this VolumeGroupDetail.
        :rtype: List[HostVolumeSummary]
        """
        return self._volumes

    @volumes.setter
    def volumes(self, volumes):
        """Sets the volumes of this VolumeGroupDetail.

        Configuration details for the volumes in the Volume Group.

        :param volumes: The volumes of this VolumeGroupDetail.
        :type volumes: List[HostVolumeSummary]
        """
        if volumes is None:
            raise ValueError("Invalid value for `volumes`, must not be `None`")

        self._volumes = volumes
