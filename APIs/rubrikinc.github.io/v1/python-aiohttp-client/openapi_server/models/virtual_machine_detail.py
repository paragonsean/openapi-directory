# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.agent_status import AgentStatus
from openapi_server.models.base_guest_credential_detail import BaseGuestCredentialDetail
from openapi_server.models.blackout_window_status import BlackoutWindowStatus
from openapi_server.models.blackout_windows import BlackoutWindows
from openapi_server.models.cdp_state import CdpState
from openapi_server.models.cloud_instantiation_spec import CloudInstantiationSpec
from openapi_server.models.configured_sla_type import ConfiguredSlaType
from openapi_server.models.managed_object_pending_sla_info import ManagedObjectPendingSlaInfo
from openapi_server.models.parent_app_info import ParentAppInfo
from openapi_server.models.sla_domain_summary import SlaDomainSummary
from openapi_server.models.virtual_machine_script_detail import VirtualMachineScriptDetail
from openapi_server.models.vm_path_point import VmPathPoint
from openapi_server.models.vm_snapshot_summary import VmSnapshotSummary
from openapi_server.models.vmware_adaptive_throttling_settings import VmwareAdaptiveThrottlingSettings
from openapi_server.models.vmware_host_summary import VmwareHostSummary
from openapi_server import util


class VirtualMachineDetail(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cloud_instantiation_spec: CloudInstantiationSpec=None, configured_sla_domain_id: str=None, is_array_integration_enabled: bool=None, is_vm_paused: bool=None, max_nested_vsphere_snapshots: int=None, post_backup_script: VirtualMachineScriptDetail=None, post_snap_script: VirtualMachineScriptDetail=None, pre_backup_script: VirtualMachineScriptDetail=None, snapshot_consistency_mandate: str=None, throttling_settings: VmwareAdaptiveThrottlingSettings=None, configured_sla_domain_name: str=None, configured_sla_domain_type: ConfiguredSlaType=None, id: str=None, is_configured_sla_domain_retention_locked: bool=None, name: str=None, primary_cluster_id: str=None, sla_last_update_time: datetime=None, effective_sla_domain_id: str=None, effective_sla_domain_name: str=None, effective_sla_domain_polaris_managed_id: str=None, effective_sla_source_object_id: str=None, effective_sla_source_object_name: str=None, is_effective_sla_domain_retention_locked: bool=None, retention_sla_domain_id: str=None, sla_assignment: str=None, agent_status: AgentStatus=None, cluster_name: str=None, folder_path: List[VmPathPoint]=None, guest_credential_authorization_status: str=None, guest_os_name: str=None, host_id: str=None, host_name: str=None, infra_path: List[VmPathPoint]=None, ip_address: str=None, is_relic: bool=None, is_replication_enabled: bool=None, moid: str=None, parent_app_info: ParentAppInfo=None, power_status: str=None, protection_date: datetime=None, tools_installed: bool=None, vcenter_id: str=None, vmware_tools_installed: bool=None, blackout_window_status: BlackoutWindowStatus=None, blackout_windows: BlackoutWindows=None, cdp_state: CdpState=None, current_host: VmwareHostSummary=None, effective_sla_domain: SlaDomainSummary=None, guest_credential: BaseGuestCredentialDetail=None, guest_os_type: str=None, is_agent_registered: bool=None, is_array_integration_possible: bool=None, is_cdp_enabled: bool=None, is_in_vmc: bool=None, latest_recovery_point: datetime=None, logical_size: int=None, oldest_recovery_point: datetime=None, pending_sla_domain: ManagedObjectPendingSlaInfo=None, physical_storage: int=None, snapshot_count: int=None, snapshots: List[VmSnapshotSummary]=None, vcenter_name: str=None, virtual_disk_ids: List[str]=None):
        """VirtualMachineDetail - a model defined in OpenAPI

        :param cloud_instantiation_spec: The cloud_instantiation_spec of this VirtualMachineDetail.
        :param configured_sla_domain_id: The configured_sla_domain_id of this VirtualMachineDetail.
        :param is_array_integration_enabled: The is_array_integration_enabled of this VirtualMachineDetail.
        :param is_vm_paused: The is_vm_paused of this VirtualMachineDetail.
        :param max_nested_vsphere_snapshots: The max_nested_vsphere_snapshots of this VirtualMachineDetail.
        :param post_backup_script: The post_backup_script of this VirtualMachineDetail.
        :param post_snap_script: The post_snap_script of this VirtualMachineDetail.
        :param pre_backup_script: The pre_backup_script of this VirtualMachineDetail.
        :param snapshot_consistency_mandate: The snapshot_consistency_mandate of this VirtualMachineDetail.
        :param throttling_settings: The throttling_settings of this VirtualMachineDetail.
        :param configured_sla_domain_name: The configured_sla_domain_name of this VirtualMachineDetail.
        :param configured_sla_domain_type: The configured_sla_domain_type of this VirtualMachineDetail.
        :param id: The id of this VirtualMachineDetail.
        :param is_configured_sla_domain_retention_locked: The is_configured_sla_domain_retention_locked of this VirtualMachineDetail.
        :param name: The name of this VirtualMachineDetail.
        :param primary_cluster_id: The primary_cluster_id of this VirtualMachineDetail.
        :param sla_last_update_time: The sla_last_update_time of this VirtualMachineDetail.
        :param effective_sla_domain_id: The effective_sla_domain_id of this VirtualMachineDetail.
        :param effective_sla_domain_name: The effective_sla_domain_name of this VirtualMachineDetail.
        :param effective_sla_domain_polaris_managed_id: The effective_sla_domain_polaris_managed_id of this VirtualMachineDetail.
        :param effective_sla_source_object_id: The effective_sla_source_object_id of this VirtualMachineDetail.
        :param effective_sla_source_object_name: The effective_sla_source_object_name of this VirtualMachineDetail.
        :param is_effective_sla_domain_retention_locked: The is_effective_sla_domain_retention_locked of this VirtualMachineDetail.
        :param retention_sla_domain_id: The retention_sla_domain_id of this VirtualMachineDetail.
        :param sla_assignment: The sla_assignment of this VirtualMachineDetail.
        :param agent_status: The agent_status of this VirtualMachineDetail.
        :param cluster_name: The cluster_name of this VirtualMachineDetail.
        :param folder_path: The folder_path of this VirtualMachineDetail.
        :param guest_credential_authorization_status: The guest_credential_authorization_status of this VirtualMachineDetail.
        :param guest_os_name: The guest_os_name of this VirtualMachineDetail.
        :param host_id: The host_id of this VirtualMachineDetail.
        :param host_name: The host_name of this VirtualMachineDetail.
        :param infra_path: The infra_path of this VirtualMachineDetail.
        :param ip_address: The ip_address of this VirtualMachineDetail.
        :param is_relic: The is_relic of this VirtualMachineDetail.
        :param is_replication_enabled: The is_replication_enabled of this VirtualMachineDetail.
        :param moid: The moid of this VirtualMachineDetail.
        :param parent_app_info: The parent_app_info of this VirtualMachineDetail.
        :param power_status: The power_status of this VirtualMachineDetail.
        :param protection_date: The protection_date of this VirtualMachineDetail.
        :param tools_installed: The tools_installed of this VirtualMachineDetail.
        :param vcenter_id: The vcenter_id of this VirtualMachineDetail.
        :param vmware_tools_installed: The vmware_tools_installed of this VirtualMachineDetail.
        :param blackout_window_status: The blackout_window_status of this VirtualMachineDetail.
        :param blackout_windows: The blackout_windows of this VirtualMachineDetail.
        :param cdp_state: The cdp_state of this VirtualMachineDetail.
        :param current_host: The current_host of this VirtualMachineDetail.
        :param effective_sla_domain: The effective_sla_domain of this VirtualMachineDetail.
        :param guest_credential: The guest_credential of this VirtualMachineDetail.
        :param guest_os_type: The guest_os_type of this VirtualMachineDetail.
        :param is_agent_registered: The is_agent_registered of this VirtualMachineDetail.
        :param is_array_integration_possible: The is_array_integration_possible of this VirtualMachineDetail.
        :param is_cdp_enabled: The is_cdp_enabled of this VirtualMachineDetail.
        :param is_in_vmc: The is_in_vmc of this VirtualMachineDetail.
        :param latest_recovery_point: The latest_recovery_point of this VirtualMachineDetail.
        :param logical_size: The logical_size of this VirtualMachineDetail.
        :param oldest_recovery_point: The oldest_recovery_point of this VirtualMachineDetail.
        :param pending_sla_domain: The pending_sla_domain of this VirtualMachineDetail.
        :param physical_storage: The physical_storage of this VirtualMachineDetail.
        :param snapshot_count: The snapshot_count of this VirtualMachineDetail.
        :param snapshots: The snapshots of this VirtualMachineDetail.
        :param vcenter_name: The vcenter_name of this VirtualMachineDetail.
        :param virtual_disk_ids: The virtual_disk_ids of this VirtualMachineDetail.
        """
        self.openapi_types = {
            'cloud_instantiation_spec': CloudInstantiationSpec,
            'configured_sla_domain_id': str,
            'is_array_integration_enabled': bool,
            'is_vm_paused': bool,
            'max_nested_vsphere_snapshots': int,
            'post_backup_script': VirtualMachineScriptDetail,
            'post_snap_script': VirtualMachineScriptDetail,
            'pre_backup_script': VirtualMachineScriptDetail,
            'snapshot_consistency_mandate': str,
            'throttling_settings': VmwareAdaptiveThrottlingSettings,
            'configured_sla_domain_name': str,
            'configured_sla_domain_type': ConfiguredSlaType,
            'id': str,
            'is_configured_sla_domain_retention_locked': bool,
            'name': str,
            'primary_cluster_id': str,
            'sla_last_update_time': datetime,
            'effective_sla_domain_id': str,
            'effective_sla_domain_name': str,
            'effective_sla_domain_polaris_managed_id': str,
            'effective_sla_source_object_id': str,
            'effective_sla_source_object_name': str,
            'is_effective_sla_domain_retention_locked': bool,
            'retention_sla_domain_id': str,
            'sla_assignment': str,
            'agent_status': AgentStatus,
            'cluster_name': str,
            'folder_path': List[VmPathPoint],
            'guest_credential_authorization_status': str,
            'guest_os_name': str,
            'host_id': str,
            'host_name': str,
            'infra_path': List[VmPathPoint],
            'ip_address': str,
            'is_relic': bool,
            'is_replication_enabled': bool,
            'moid': str,
            'parent_app_info': ParentAppInfo,
            'power_status': str,
            'protection_date': datetime,
            'tools_installed': bool,
            'vcenter_id': str,
            'vmware_tools_installed': bool,
            'blackout_window_status': BlackoutWindowStatus,
            'blackout_windows': BlackoutWindows,
            'cdp_state': CdpState,
            'current_host': VmwareHostSummary,
            'effective_sla_domain': SlaDomainSummary,
            'guest_credential': BaseGuestCredentialDetail,
            'guest_os_type': str,
            'is_agent_registered': bool,
            'is_array_integration_possible': bool,
            'is_cdp_enabled': bool,
            'is_in_vmc': bool,
            'latest_recovery_point': datetime,
            'logical_size': int,
            'oldest_recovery_point': datetime,
            'pending_sla_domain': ManagedObjectPendingSlaInfo,
            'physical_storage': int,
            'snapshot_count': int,
            'snapshots': List[VmSnapshotSummary],
            'vcenter_name': str,
            'virtual_disk_ids': List[str]
        }

        self.attribute_map = {
            'cloud_instantiation_spec': 'cloudInstantiationSpec',
            'configured_sla_domain_id': 'configuredSlaDomainId',
            'is_array_integration_enabled': 'isArrayIntegrationEnabled',
            'is_vm_paused': 'isVmPaused',
            'max_nested_vsphere_snapshots': 'maxNestedVsphereSnapshots',
            'post_backup_script': 'postBackupScript',
            'post_snap_script': 'postSnapScript',
            'pre_backup_script': 'preBackupScript',
            'snapshot_consistency_mandate': 'snapshotConsistencyMandate',
            'throttling_settings': 'throttlingSettings',
            'configured_sla_domain_name': 'configuredSlaDomainName',
            'configured_sla_domain_type': 'configuredSlaDomainType',
            'id': 'id',
            'is_configured_sla_domain_retention_locked': 'isConfiguredSlaDomainRetentionLocked',
            'name': 'name',
            'primary_cluster_id': 'primaryClusterId',
            'sla_last_update_time': 'slaLastUpdateTime',
            'effective_sla_domain_id': 'effectiveSlaDomainId',
            'effective_sla_domain_name': 'effectiveSlaDomainName',
            'effective_sla_domain_polaris_managed_id': 'effectiveSlaDomainPolarisManagedId',
            'effective_sla_source_object_id': 'effectiveSlaSourceObjectId',
            'effective_sla_source_object_name': 'effectiveSlaSourceObjectName',
            'is_effective_sla_domain_retention_locked': 'isEffectiveSlaDomainRetentionLocked',
            'retention_sla_domain_id': 'retentionSlaDomainId',
            'sla_assignment': 'slaAssignment',
            'agent_status': 'agentStatus',
            'cluster_name': 'clusterName',
            'folder_path': 'folderPath',
            'guest_credential_authorization_status': 'guestCredentialAuthorizationStatus',
            'guest_os_name': 'guestOsName',
            'host_id': 'hostId',
            'host_name': 'hostName',
            'infra_path': 'infraPath',
            'ip_address': 'ipAddress',
            'is_relic': 'isRelic',
            'is_replication_enabled': 'isReplicationEnabled',
            'moid': 'moid',
            'parent_app_info': 'parentAppInfo',
            'power_status': 'powerStatus',
            'protection_date': 'protectionDate',
            'tools_installed': 'toolsInstalled',
            'vcenter_id': 'vcenterId',
            'vmware_tools_installed': 'vmwareToolsInstalled',
            'blackout_window_status': 'blackoutWindowStatus',
            'blackout_windows': 'blackoutWindows',
            'cdp_state': 'cdpState',
            'current_host': 'currentHost',
            'effective_sla_domain': 'effectiveSlaDomain',
            'guest_credential': 'guestCredential',
            'guest_os_type': 'guestOsType',
            'is_agent_registered': 'isAgentRegistered',
            'is_array_integration_possible': 'isArrayIntegrationPossible',
            'is_cdp_enabled': 'isCdpEnabled',
            'is_in_vmc': 'isInVmc',
            'latest_recovery_point': 'latestRecoveryPoint',
            'logical_size': 'logicalSize',
            'oldest_recovery_point': 'oldestRecoveryPoint',
            'pending_sla_domain': 'pendingSlaDomain',
            'physical_storage': 'physicalStorage',
            'snapshot_count': 'snapshotCount',
            'snapshots': 'snapshots',
            'vcenter_name': 'vcenterName',
            'virtual_disk_ids': 'virtualDiskIds'
        }

        self._cloud_instantiation_spec = cloud_instantiation_spec
        self._configured_sla_domain_id = configured_sla_domain_id
        self._is_array_integration_enabled = is_array_integration_enabled
        self._is_vm_paused = is_vm_paused
        self._max_nested_vsphere_snapshots = max_nested_vsphere_snapshots
        self._post_backup_script = post_backup_script
        self._post_snap_script = post_snap_script
        self._pre_backup_script = pre_backup_script
        self._snapshot_consistency_mandate = snapshot_consistency_mandate
        self._throttling_settings = throttling_settings
        self._configured_sla_domain_name = configured_sla_domain_name
        self._configured_sla_domain_type = configured_sla_domain_type
        self._id = id
        self._is_configured_sla_domain_retention_locked = is_configured_sla_domain_retention_locked
        self._name = name
        self._primary_cluster_id = primary_cluster_id
        self._sla_last_update_time = sla_last_update_time
        self._effective_sla_domain_id = effective_sla_domain_id
        self._effective_sla_domain_name = effective_sla_domain_name
        self._effective_sla_domain_polaris_managed_id = effective_sla_domain_polaris_managed_id
        self._effective_sla_source_object_id = effective_sla_source_object_id
        self._effective_sla_source_object_name = effective_sla_source_object_name
        self._is_effective_sla_domain_retention_locked = is_effective_sla_domain_retention_locked
        self._retention_sla_domain_id = retention_sla_domain_id
        self._sla_assignment = sla_assignment
        self._agent_status = agent_status
        self._cluster_name = cluster_name
        self._folder_path = folder_path
        self._guest_credential_authorization_status = guest_credential_authorization_status
        self._guest_os_name = guest_os_name
        self._host_id = host_id
        self._host_name = host_name
        self._infra_path = infra_path
        self._ip_address = ip_address
        self._is_relic = is_relic
        self._is_replication_enabled = is_replication_enabled
        self._moid = moid
        self._parent_app_info = parent_app_info
        self._power_status = power_status
        self._protection_date = protection_date
        self._tools_installed = tools_installed
        self._vcenter_id = vcenter_id
        self._vmware_tools_installed = vmware_tools_installed
        self._blackout_window_status = blackout_window_status
        self._blackout_windows = blackout_windows
        self._cdp_state = cdp_state
        self._current_host = current_host
        self._effective_sla_domain = effective_sla_domain
        self._guest_credential = guest_credential
        self._guest_os_type = guest_os_type
        self._is_agent_registered = is_agent_registered
        self._is_array_integration_possible = is_array_integration_possible
        self._is_cdp_enabled = is_cdp_enabled
        self._is_in_vmc = is_in_vmc
        self._latest_recovery_point = latest_recovery_point
        self._logical_size = logical_size
        self._oldest_recovery_point = oldest_recovery_point
        self._pending_sla_domain = pending_sla_domain
        self._physical_storage = physical_storage
        self._snapshot_count = snapshot_count
        self._snapshots = snapshots
        self._vcenter_name = vcenter_name
        self._virtual_disk_ids = virtual_disk_ids

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VirtualMachineDetail':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VirtualMachineDetail of this VirtualMachineDetail.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cloud_instantiation_spec(self):
        """Gets the cloud_instantiation_spec of this VirtualMachineDetail.


        :return: The cloud_instantiation_spec of this VirtualMachineDetail.
        :rtype: CloudInstantiationSpec
        """
        return self._cloud_instantiation_spec

    @cloud_instantiation_spec.setter
    def cloud_instantiation_spec(self, cloud_instantiation_spec):
        """Sets the cloud_instantiation_spec of this VirtualMachineDetail.


        :param cloud_instantiation_spec: The cloud_instantiation_spec of this VirtualMachineDetail.
        :type cloud_instantiation_spec: CloudInstantiationSpec
        """

        self._cloud_instantiation_spec = cloud_instantiation_spec

    @property
    def configured_sla_domain_id(self):
        """Gets the configured_sla_domain_id of this VirtualMachineDetail.

        The ID of the SLA Domain configured directly on the Rubrik object.

        :return: The configured_sla_domain_id of this VirtualMachineDetail.
        :rtype: str
        """
        return self._configured_sla_domain_id

    @configured_sla_domain_id.setter
    def configured_sla_domain_id(self, configured_sla_domain_id):
        """Sets the configured_sla_domain_id of this VirtualMachineDetail.

        The ID of the SLA Domain configured directly on the Rubrik object.

        :param configured_sla_domain_id: The configured_sla_domain_id of this VirtualMachineDetail.
        :type configured_sla_domain_id: str
        """
        if configured_sla_domain_id is None:
            raise ValueError("Invalid value for `configured_sla_domain_id`, must not be `None`")

        self._configured_sla_domain_id = configured_sla_domain_id

    @property
    def is_array_integration_enabled(self):
        """Gets the is_array_integration_enabled of this VirtualMachineDetail.

        Boolean value that determines whether the available storage array integration is used with the specified virtual machine. Set to 'true' to use storage array integration and set to 'false' to not use storage array integration. Refer to the value of 'isArrayIntegrationPossible' to determine whether storage array integration is available for a virtual machine.

        :return: The is_array_integration_enabled of this VirtualMachineDetail.
        :rtype: bool
        """
        return self._is_array_integration_enabled

    @is_array_integration_enabled.setter
    def is_array_integration_enabled(self, is_array_integration_enabled):
        """Sets the is_array_integration_enabled of this VirtualMachineDetail.

        Boolean value that determines whether the available storage array integration is used with the specified virtual machine. Set to 'true' to use storage array integration and set to 'false' to not use storage array integration. Refer to the value of 'isArrayIntegrationPossible' to determine whether storage array integration is available for a virtual machine.

        :param is_array_integration_enabled: The is_array_integration_enabled of this VirtualMachineDetail.
        :type is_array_integration_enabled: bool
        """
        if is_array_integration_enabled is None:
            raise ValueError("Invalid value for `is_array_integration_enabled`, must not be `None`")

        self._is_array_integration_enabled = is_array_integration_enabled

    @property
    def is_vm_paused(self):
        """Gets the is_vm_paused of this VirtualMachineDetail.

        Whether to pause or resume backups/archival for this VM.

        :return: The is_vm_paused of this VirtualMachineDetail.
        :rtype: bool
        """
        return self._is_vm_paused

    @is_vm_paused.setter
    def is_vm_paused(self, is_vm_paused):
        """Sets the is_vm_paused of this VirtualMachineDetail.

        Whether to pause or resume backups/archival for this VM.

        :param is_vm_paused: The is_vm_paused of this VirtualMachineDetail.
        :type is_vm_paused: bool
        """

        self._is_vm_paused = is_vm_paused

    @property
    def max_nested_vsphere_snapshots(self):
        """Gets the max_nested_vsphere_snapshots of this VirtualMachineDetail.


        :return: The max_nested_vsphere_snapshots of this VirtualMachineDetail.
        :rtype: int
        """
        return self._max_nested_vsphere_snapshots

    @max_nested_vsphere_snapshots.setter
    def max_nested_vsphere_snapshots(self, max_nested_vsphere_snapshots):
        """Sets the max_nested_vsphere_snapshots of this VirtualMachineDetail.


        :param max_nested_vsphere_snapshots: The max_nested_vsphere_snapshots of this VirtualMachineDetail.
        :type max_nested_vsphere_snapshots: int
        """
        if max_nested_vsphere_snapshots is None:
            raise ValueError("Invalid value for `max_nested_vsphere_snapshots`, must not be `None`")

        self._max_nested_vsphere_snapshots = max_nested_vsphere_snapshots

    @property
    def post_backup_script(self):
        """Gets the post_backup_script of this VirtualMachineDetail.


        :return: The post_backup_script of this VirtualMachineDetail.
        :rtype: VirtualMachineScriptDetail
        """
        return self._post_backup_script

    @post_backup_script.setter
    def post_backup_script(self, post_backup_script):
        """Sets the post_backup_script of this VirtualMachineDetail.


        :param post_backup_script: The post_backup_script of this VirtualMachineDetail.
        :type post_backup_script: VirtualMachineScriptDetail
        """

        self._post_backup_script = post_backup_script

    @property
    def post_snap_script(self):
        """Gets the post_snap_script of this VirtualMachineDetail.


        :return: The post_snap_script of this VirtualMachineDetail.
        :rtype: VirtualMachineScriptDetail
        """
        return self._post_snap_script

    @post_snap_script.setter
    def post_snap_script(self, post_snap_script):
        """Sets the post_snap_script of this VirtualMachineDetail.


        :param post_snap_script: The post_snap_script of this VirtualMachineDetail.
        :type post_snap_script: VirtualMachineScriptDetail
        """

        self._post_snap_script = post_snap_script

    @property
    def pre_backup_script(self):
        """Gets the pre_backup_script of this VirtualMachineDetail.


        :return: The pre_backup_script of this VirtualMachineDetail.
        :rtype: VirtualMachineScriptDetail
        """
        return self._pre_backup_script

    @pre_backup_script.setter
    def pre_backup_script(self, pre_backup_script):
        """Sets the pre_backup_script of this VirtualMachineDetail.


        :param pre_backup_script: The pre_backup_script of this VirtualMachineDetail.
        :type pre_backup_script: VirtualMachineScriptDetail
        """

        self._pre_backup_script = pre_backup_script

    @property
    def snapshot_consistency_mandate(self):
        """Gets the snapshot_consistency_mandate of this VirtualMachineDetail.

        Consistency level mandated for this VM or empty string for none.

        :return: The snapshot_consistency_mandate of this VirtualMachineDetail.
        :rtype: str
        """
        return self._snapshot_consistency_mandate

    @snapshot_consistency_mandate.setter
    def snapshot_consistency_mandate(self, snapshot_consistency_mandate):
        """Sets the snapshot_consistency_mandate of this VirtualMachineDetail.

        Consistency level mandated for this VM or empty string for none.

        :param snapshot_consistency_mandate: The snapshot_consistency_mandate of this VirtualMachineDetail.
        :type snapshot_consistency_mandate: str
        """
        allowed_values = ["UNKNOWN", "INCONSISTENT", "CRASH_CONSISTENT", "FILE_SYSTEM_CONSISTENT", "VSS_CONSISTENT", "APP_CONSISTENT"]  # noqa: E501
        if snapshot_consistency_mandate not in allowed_values:
            raise ValueError(
                "Invalid value for `snapshot_consistency_mandate` ({0}), must be one of {1}"
                .format(snapshot_consistency_mandate, allowed_values)
            )

        self._snapshot_consistency_mandate = snapshot_consistency_mandate

    @property
    def throttling_settings(self):
        """Gets the throttling_settings of this VirtualMachineDetail.


        :return: The throttling_settings of this VirtualMachineDetail.
        :rtype: VmwareAdaptiveThrottlingSettings
        """
        return self._throttling_settings

    @throttling_settings.setter
    def throttling_settings(self, throttling_settings):
        """Sets the throttling_settings of this VirtualMachineDetail.


        :param throttling_settings: The throttling_settings of this VirtualMachineDetail.
        :type throttling_settings: VmwareAdaptiveThrottlingSettings
        """

        self._throttling_settings = throttling_settings

    @property
    def configured_sla_domain_name(self):
        """Gets the configured_sla_domain_name of this VirtualMachineDetail.

        The name of the SLA Domain configured directly on the Rubrik object.

        :return: The configured_sla_domain_name of this VirtualMachineDetail.
        :rtype: str
        """
        return self._configured_sla_domain_name

    @configured_sla_domain_name.setter
    def configured_sla_domain_name(self, configured_sla_domain_name):
        """Sets the configured_sla_domain_name of this VirtualMachineDetail.

        The name of the SLA Domain configured directly on the Rubrik object.

        :param configured_sla_domain_name: The configured_sla_domain_name of this VirtualMachineDetail.
        :type configured_sla_domain_name: str
        """
        if configured_sla_domain_name is None:
            raise ValueError("Invalid value for `configured_sla_domain_name`, must not be `None`")

        self._configured_sla_domain_name = configured_sla_domain_name

    @property
    def configured_sla_domain_type(self):
        """Gets the configured_sla_domain_type of this VirtualMachineDetail.


        :return: The configured_sla_domain_type of this VirtualMachineDetail.
        :rtype: ConfiguredSlaType
        """
        return self._configured_sla_domain_type

    @configured_sla_domain_type.setter
    def configured_sla_domain_type(self, configured_sla_domain_type):
        """Sets the configured_sla_domain_type of this VirtualMachineDetail.


        :param configured_sla_domain_type: The configured_sla_domain_type of this VirtualMachineDetail.
        :type configured_sla_domain_type: ConfiguredSlaType
        """

        self._configured_sla_domain_type = configured_sla_domain_type

    @property
    def id(self):
        """Gets the id of this VirtualMachineDetail.

        The ID of the Rubrik object.

        :return: The id of this VirtualMachineDetail.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this VirtualMachineDetail.

        The ID of the Rubrik object.

        :param id: The id of this VirtualMachineDetail.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def is_configured_sla_domain_retention_locked(self):
        """Gets the is_configured_sla_domain_retention_locked of this VirtualMachineDetail.

        Indicates whether the configured SLA Domain is Retention Locked. When this value is 'true', the configured SLA Domain is a Retention Lock SLA Domain.

        :return: The is_configured_sla_domain_retention_locked of this VirtualMachineDetail.
        :rtype: bool
        """
        return self._is_configured_sla_domain_retention_locked

    @is_configured_sla_domain_retention_locked.setter
    def is_configured_sla_domain_retention_locked(self, is_configured_sla_domain_retention_locked):
        """Sets the is_configured_sla_domain_retention_locked of this VirtualMachineDetail.

        Indicates whether the configured SLA Domain is Retention Locked. When this value is 'true', the configured SLA Domain is a Retention Lock SLA Domain.

        :param is_configured_sla_domain_retention_locked: The is_configured_sla_domain_retention_locked of this VirtualMachineDetail.
        :type is_configured_sla_domain_retention_locked: bool
        """

        self._is_configured_sla_domain_retention_locked = is_configured_sla_domain_retention_locked

    @property
    def name(self):
        """Gets the name of this VirtualMachineDetail.

        The name of the Rubrik object.

        :return: The name of this VirtualMachineDetail.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this VirtualMachineDetail.

        The name of the Rubrik object.

        :param name: The name of this VirtualMachineDetail.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def primary_cluster_id(self):
        """Gets the primary_cluster_id of this VirtualMachineDetail.

        The ID of the cluster that manages the Rubrik object.

        :return: The primary_cluster_id of this VirtualMachineDetail.
        :rtype: str
        """
        return self._primary_cluster_id

    @primary_cluster_id.setter
    def primary_cluster_id(self, primary_cluster_id):
        """Sets the primary_cluster_id of this VirtualMachineDetail.

        The ID of the cluster that manages the Rubrik object.

        :param primary_cluster_id: The primary_cluster_id of this VirtualMachineDetail.
        :type primary_cluster_id: str
        """
        if primary_cluster_id is None:
            raise ValueError("Invalid value for `primary_cluster_id`, must not be `None`")

        self._primary_cluster_id = primary_cluster_id

    @property
    def sla_last_update_time(self):
        """Gets the sla_last_update_time of this VirtualMachineDetail.

        The UTC time when the SLA Domain was last updated.

        :return: The sla_last_update_time of this VirtualMachineDetail.
        :rtype: datetime
        """
        return self._sla_last_update_time

    @sla_last_update_time.setter
    def sla_last_update_time(self, sla_last_update_time):
        """Sets the sla_last_update_time of this VirtualMachineDetail.

        The UTC time when the SLA Domain was last updated.

        :param sla_last_update_time: The sla_last_update_time of this VirtualMachineDetail.
        :type sla_last_update_time: datetime
        """

        self._sla_last_update_time = sla_last_update_time

    @property
    def effective_sla_domain_id(self):
        """Gets the effective_sla_domain_id of this VirtualMachineDetail.

        The ID of the SLA Domain that controls the protection of the Rubrik object.

        :return: The effective_sla_domain_id of this VirtualMachineDetail.
        :rtype: str
        """
        return self._effective_sla_domain_id

    @effective_sla_domain_id.setter
    def effective_sla_domain_id(self, effective_sla_domain_id):
        """Sets the effective_sla_domain_id of this VirtualMachineDetail.

        The ID of the SLA Domain that controls the protection of the Rubrik object.

        :param effective_sla_domain_id: The effective_sla_domain_id of this VirtualMachineDetail.
        :type effective_sla_domain_id: str
        """
        if effective_sla_domain_id is None:
            raise ValueError("Invalid value for `effective_sla_domain_id`, must not be `None`")

        self._effective_sla_domain_id = effective_sla_domain_id

    @property
    def effective_sla_domain_name(self):
        """Gets the effective_sla_domain_name of this VirtualMachineDetail.

        The name of the SLA Domain that controls the protection of the Rubrik object.

        :return: The effective_sla_domain_name of this VirtualMachineDetail.
        :rtype: str
        """
        return self._effective_sla_domain_name

    @effective_sla_domain_name.setter
    def effective_sla_domain_name(self, effective_sla_domain_name):
        """Sets the effective_sla_domain_name of this VirtualMachineDetail.

        The name of the SLA Domain that controls the protection of the Rubrik object.

        :param effective_sla_domain_name: The effective_sla_domain_name of this VirtualMachineDetail.
        :type effective_sla_domain_name: str
        """
        if effective_sla_domain_name is None:
            raise ValueError("Invalid value for `effective_sla_domain_name`, must not be `None`")

        self._effective_sla_domain_name = effective_sla_domain_name

    @property
    def effective_sla_domain_polaris_managed_id(self):
        """Gets the effective_sla_domain_polaris_managed_id of this VirtualMachineDetail.

        Optional. This field contains the managed ID of of the Polaris-managed effective SLA Domain.

        :return: The effective_sla_domain_polaris_managed_id of this VirtualMachineDetail.
        :rtype: str
        """
        return self._effective_sla_domain_polaris_managed_id

    @effective_sla_domain_polaris_managed_id.setter
    def effective_sla_domain_polaris_managed_id(self, effective_sla_domain_polaris_managed_id):
        """Sets the effective_sla_domain_polaris_managed_id of this VirtualMachineDetail.

        Optional. This field contains the managed ID of of the Polaris-managed effective SLA Domain.

        :param effective_sla_domain_polaris_managed_id: The effective_sla_domain_polaris_managed_id of this VirtualMachineDetail.
        :type effective_sla_domain_polaris_managed_id: str
        """

        self._effective_sla_domain_polaris_managed_id = effective_sla_domain_polaris_managed_id

    @property
    def effective_sla_source_object_id(self):
        """Gets the effective_sla_source_object_id of this VirtualMachineDetail.

        The ID of the parent of the Rubrik object from which the SLA Domain that controls the protection of Rubrik object is inherited.

        :return: The effective_sla_source_object_id of this VirtualMachineDetail.
        :rtype: str
        """
        return self._effective_sla_source_object_id

    @effective_sla_source_object_id.setter
    def effective_sla_source_object_id(self, effective_sla_source_object_id):
        """Sets the effective_sla_source_object_id of this VirtualMachineDetail.

        The ID of the parent of the Rubrik object from which the SLA Domain that controls the protection of Rubrik object is inherited.

        :param effective_sla_source_object_id: The effective_sla_source_object_id of this VirtualMachineDetail.
        :type effective_sla_source_object_id: str
        """

        self._effective_sla_source_object_id = effective_sla_source_object_id

    @property
    def effective_sla_source_object_name(self):
        """Gets the effective_sla_source_object_name of this VirtualMachineDetail.

        The name of the parent of the Rubrik object from which the SLA Domain that controls the protection of Rubrik object is inherited.

        :return: The effective_sla_source_object_name of this VirtualMachineDetail.
        :rtype: str
        """
        return self._effective_sla_source_object_name

    @effective_sla_source_object_name.setter
    def effective_sla_source_object_name(self, effective_sla_source_object_name):
        """Sets the effective_sla_source_object_name of this VirtualMachineDetail.

        The name of the parent of the Rubrik object from which the SLA Domain that controls the protection of Rubrik object is inherited.

        :param effective_sla_source_object_name: The effective_sla_source_object_name of this VirtualMachineDetail.
        :type effective_sla_source_object_name: str
        """

        self._effective_sla_source_object_name = effective_sla_source_object_name

    @property
    def is_effective_sla_domain_retention_locked(self):
        """Gets the is_effective_sla_domain_retention_locked of this VirtualMachineDetail.

        Indicates whether the effective SLA Domain is Retention Locked. When this value is 'true', the effective SLA domain is a Retention Lock SLA Domain.

        :return: The is_effective_sla_domain_retention_locked of this VirtualMachineDetail.
        :rtype: bool
        """
        return self._is_effective_sla_domain_retention_locked

    @is_effective_sla_domain_retention_locked.setter
    def is_effective_sla_domain_retention_locked(self, is_effective_sla_domain_retention_locked):
        """Sets the is_effective_sla_domain_retention_locked of this VirtualMachineDetail.

        Indicates whether the effective SLA Domain is Retention Locked. When this value is 'true', the effective SLA domain is a Retention Lock SLA Domain.

        :param is_effective_sla_domain_retention_locked: The is_effective_sla_domain_retention_locked of this VirtualMachineDetail.
        :type is_effective_sla_domain_retention_locked: bool
        """

        self._is_effective_sla_domain_retention_locked = is_effective_sla_domain_retention_locked

    @property
    def retention_sla_domain_id(self):
        """Gets the retention_sla_domain_id of this VirtualMachineDetail.

        The ID of the SLA Domain whose retention policy is in use.

        :return: The retention_sla_domain_id of this VirtualMachineDetail.
        :rtype: str
        """
        return self._retention_sla_domain_id

    @retention_sla_domain_id.setter
    def retention_sla_domain_id(self, retention_sla_domain_id):
        """Sets the retention_sla_domain_id of this VirtualMachineDetail.

        The ID of the SLA Domain whose retention policy is in use.

        :param retention_sla_domain_id: The retention_sla_domain_id of this VirtualMachineDetail.
        :type retention_sla_domain_id: str
        """

        self._retention_sla_domain_id = retention_sla_domain_id

    @property
    def sla_assignment(self):
        """Gets the sla_assignment of this VirtualMachineDetail.

        The SLA assignment type. Direct SLA assignment means that a SLA Domain was configured directly on the Rubrik object by the user. Derived SLA assignment means that the Rubrik object inherits an SLA Domain from its parent Rubrik object.

        :return: The sla_assignment of this VirtualMachineDetail.
        :rtype: str
        """
        return self._sla_assignment

    @sla_assignment.setter
    def sla_assignment(self, sla_assignment):
        """Sets the sla_assignment of this VirtualMachineDetail.

        The SLA assignment type. Direct SLA assignment means that a SLA Domain was configured directly on the Rubrik object by the user. Derived SLA assignment means that the Rubrik object inherits an SLA Domain from its parent Rubrik object.

        :param sla_assignment: The sla_assignment of this VirtualMachineDetail.
        :type sla_assignment: str
        """
        allowed_values = ["Derived", "Direct", "Unassigned"]  # noqa: E501
        if sla_assignment not in allowed_values:
            raise ValueError(
                "Invalid value for `sla_assignment` ({0}), must be one of {1}"
                .format(sla_assignment, allowed_values)
            )

        self._sla_assignment = sla_assignment

    @property
    def agent_status(self):
        """Gets the agent_status of this VirtualMachineDetail.


        :return: The agent_status of this VirtualMachineDetail.
        :rtype: AgentStatus
        """
        return self._agent_status

    @agent_status.setter
    def agent_status(self, agent_status):
        """Sets the agent_status of this VirtualMachineDetail.


        :param agent_status: The agent_status of this VirtualMachineDetail.
        :type agent_status: AgentStatus
        """

        self._agent_status = agent_status

    @property
    def cluster_name(self):
        """Gets the cluster_name of this VirtualMachineDetail.


        :return: The cluster_name of this VirtualMachineDetail.
        :rtype: str
        """
        return self._cluster_name

    @cluster_name.setter
    def cluster_name(self, cluster_name):
        """Sets the cluster_name of this VirtualMachineDetail.


        :param cluster_name: The cluster_name of this VirtualMachineDetail.
        :type cluster_name: str
        """

        self._cluster_name = cluster_name

    @property
    def folder_path(self):
        """Gets the folder_path of this VirtualMachineDetail.

        Brief info of all the objects in the folder path to this VM.

        :return: The folder_path of this VirtualMachineDetail.
        :rtype: List[VmPathPoint]
        """
        return self._folder_path

    @folder_path.setter
    def folder_path(self, folder_path):
        """Sets the folder_path of this VirtualMachineDetail.

        Brief info of all the objects in the folder path to this VM.

        :param folder_path: The folder_path of this VirtualMachineDetail.
        :type folder_path: List[VmPathPoint]
        """
        if folder_path is None:
            raise ValueError("Invalid value for `folder_path`, must not be `None`")

        self._folder_path = folder_path

    @property
    def guest_credential_authorization_status(self):
        """Gets the guest_credential_authorization_status of this VirtualMachineDetail.

        Status of authentication with a specific virtual machine using guest credentials. Possible values are: SUCCESSFUL, PENDING, or FAILED.

        :return: The guest_credential_authorization_status of this VirtualMachineDetail.
        :rtype: str
        """
        return self._guest_credential_authorization_status

    @guest_credential_authorization_status.setter
    def guest_credential_authorization_status(self, guest_credential_authorization_status):
        """Sets the guest_credential_authorization_status of this VirtualMachineDetail.

        Status of authentication with a specific virtual machine using guest credentials. Possible values are: SUCCESSFUL, PENDING, or FAILED.

        :param guest_credential_authorization_status: The guest_credential_authorization_status of this VirtualMachineDetail.
        :type guest_credential_authorization_status: str
        """
        if guest_credential_authorization_status is None:
            raise ValueError("Invalid value for `guest_credential_authorization_status`, must not be `None`")

        self._guest_credential_authorization_status = guest_credential_authorization_status

    @property
    def guest_os_name(self):
        """Gets the guest_os_name of this VirtualMachineDetail.

        Long form name, including type and release designation, for the operating system that is installed on a virtual machine.

        :return: The guest_os_name of this VirtualMachineDetail.
        :rtype: str
        """
        return self._guest_os_name

    @guest_os_name.setter
    def guest_os_name(self, guest_os_name):
        """Sets the guest_os_name of this VirtualMachineDetail.

        Long form name, including type and release designation, for the operating system that is installed on a virtual machine.

        :param guest_os_name: The guest_os_name of this VirtualMachineDetail.
        :type guest_os_name: str
        """

        self._guest_os_name = guest_os_name

    @property
    def host_id(self):
        """Gets the host_id of this VirtualMachineDetail.


        :return: The host_id of this VirtualMachineDetail.
        :rtype: str
        """
        return self._host_id

    @host_id.setter
    def host_id(self, host_id):
        """Sets the host_id of this VirtualMachineDetail.


        :param host_id: The host_id of this VirtualMachineDetail.
        :type host_id: str
        """

        self._host_id = host_id

    @property
    def host_name(self):
        """Gets the host_name of this VirtualMachineDetail.


        :return: The host_name of this VirtualMachineDetail.
        :rtype: str
        """
        return self._host_name

    @host_name.setter
    def host_name(self, host_name):
        """Sets the host_name of this VirtualMachineDetail.


        :param host_name: The host_name of this VirtualMachineDetail.
        :type host_name: str
        """

        self._host_name = host_name

    @property
    def infra_path(self):
        """Gets the infra_path of this VirtualMachineDetail.

        Brief info of all the objects in the infrastructure path to this VM.

        :return: The infra_path of this VirtualMachineDetail.
        :rtype: List[VmPathPoint]
        """
        return self._infra_path

    @infra_path.setter
    def infra_path(self, infra_path):
        """Sets the infra_path of this VirtualMachineDetail.

        Brief info of all the objects in the infrastructure path to this VM.

        :param infra_path: The infra_path of this VirtualMachineDetail.
        :type infra_path: List[VmPathPoint]
        """
        if infra_path is None:
            raise ValueError("Invalid value for `infra_path`, must not be `None`")

        self._infra_path = infra_path

    @property
    def ip_address(self):
        """Gets the ip_address of this VirtualMachineDetail.


        :return: The ip_address of this VirtualMachineDetail.
        :rtype: str
        """
        return self._ip_address

    @ip_address.setter
    def ip_address(self, ip_address):
        """Sets the ip_address of this VirtualMachineDetail.


        :param ip_address: The ip_address of this VirtualMachineDetail.
        :type ip_address: str
        """
        if ip_address is None:
            raise ValueError("Invalid value for `ip_address`, must not be `None`")

        self._ip_address = ip_address

    @property
    def is_relic(self):
        """Gets the is_relic of this VirtualMachineDetail.


        :return: The is_relic of this VirtualMachineDetail.
        :rtype: bool
        """
        return self._is_relic

    @is_relic.setter
    def is_relic(self, is_relic):
        """Sets the is_relic of this VirtualMachineDetail.


        :param is_relic: The is_relic of this VirtualMachineDetail.
        :type is_relic: bool
        """
        if is_relic is None:
            raise ValueError("Invalid value for `is_relic`, must not be `None`")

        self._is_relic = is_relic

    @property
    def is_replication_enabled(self):
        """Gets the is_replication_enabled of this VirtualMachineDetail.


        :return: The is_replication_enabled of this VirtualMachineDetail.
        :rtype: bool
        """
        return self._is_replication_enabled

    @is_replication_enabled.setter
    def is_replication_enabled(self, is_replication_enabled):
        """Sets the is_replication_enabled of this VirtualMachineDetail.


        :param is_replication_enabled: The is_replication_enabled of this VirtualMachineDetail.
        :type is_replication_enabled: bool
        """
        if is_replication_enabled is None:
            raise ValueError("Invalid value for `is_replication_enabled`, must not be `None`")

        self._is_replication_enabled = is_replication_enabled

    @property
    def moid(self):
        """Gets the moid of this VirtualMachineDetail.


        :return: The moid of this VirtualMachineDetail.
        :rtype: str
        """
        return self._moid

    @moid.setter
    def moid(self, moid):
        """Sets the moid of this VirtualMachineDetail.


        :param moid: The moid of this VirtualMachineDetail.
        :type moid: str
        """
        if moid is None:
            raise ValueError("Invalid value for `moid`, must not be `None`")

        self._moid = moid

    @property
    def parent_app_info(self):
        """Gets the parent_app_info of this VirtualMachineDetail.


        :return: The parent_app_info of this VirtualMachineDetail.
        :rtype: ParentAppInfo
        """
        return self._parent_app_info

    @parent_app_info.setter
    def parent_app_info(self, parent_app_info):
        """Sets the parent_app_info of this VirtualMachineDetail.


        :param parent_app_info: The parent_app_info of this VirtualMachineDetail.
        :type parent_app_info: ParentAppInfo
        """

        self._parent_app_info = parent_app_info

    @property
    def power_status(self):
        """Gets the power_status of this VirtualMachineDetail.

        The power status of VM(ON,OFF,SLEEP etc.).

        :return: The power_status of this VirtualMachineDetail.
        :rtype: str
        """
        return self._power_status

    @power_status.setter
    def power_status(self, power_status):
        """Sets the power_status of this VirtualMachineDetail.

        The power status of VM(ON,OFF,SLEEP etc.).

        :param power_status: The power_status of this VirtualMachineDetail.
        :type power_status: str
        """

        self._power_status = power_status

    @property
    def protection_date(self):
        """Gets the protection_date of this VirtualMachineDetail.


        :return: The protection_date of this VirtualMachineDetail.
        :rtype: datetime
        """
        return self._protection_date

    @protection_date.setter
    def protection_date(self, protection_date):
        """Sets the protection_date of this VirtualMachineDetail.


        :param protection_date: The protection_date of this VirtualMachineDetail.
        :type protection_date: datetime
        """

        self._protection_date = protection_date

    @property
    def tools_installed(self):
        """Gets the tools_installed of this VirtualMachineDetail.


        :return: The tools_installed of this VirtualMachineDetail.
        :rtype: bool
        """
        return self._tools_installed

    @tools_installed.setter
    def tools_installed(self, tools_installed):
        """Sets the tools_installed of this VirtualMachineDetail.


        :param tools_installed: The tools_installed of this VirtualMachineDetail.
        :type tools_installed: bool
        """

        self._tools_installed = tools_installed

    @property
    def vcenter_id(self):
        """Gets the vcenter_id of this VirtualMachineDetail.


        :return: The vcenter_id of this VirtualMachineDetail.
        :rtype: str
        """
        return self._vcenter_id

    @vcenter_id.setter
    def vcenter_id(self, vcenter_id):
        """Sets the vcenter_id of this VirtualMachineDetail.


        :param vcenter_id: The vcenter_id of this VirtualMachineDetail.
        :type vcenter_id: str
        """

        self._vcenter_id = vcenter_id

    @property
    def vmware_tools_installed(self):
        """Gets the vmware_tools_installed of this VirtualMachineDetail.


        :return: The vmware_tools_installed of this VirtualMachineDetail.
        :rtype: bool
        """
        return self._vmware_tools_installed

    @vmware_tools_installed.setter
    def vmware_tools_installed(self, vmware_tools_installed):
        """Sets the vmware_tools_installed of this VirtualMachineDetail.


        :param vmware_tools_installed: The vmware_tools_installed of this VirtualMachineDetail.
        :type vmware_tools_installed: bool
        """
        if vmware_tools_installed is None:
            raise ValueError("Invalid value for `vmware_tools_installed`, must not be `None`")

        self._vmware_tools_installed = vmware_tools_installed

    @property
    def blackout_window_status(self):
        """Gets the blackout_window_status of this VirtualMachineDetail.


        :return: The blackout_window_status of this VirtualMachineDetail.
        :rtype: BlackoutWindowStatus
        """
        return self._blackout_window_status

    @blackout_window_status.setter
    def blackout_window_status(self, blackout_window_status):
        """Sets the blackout_window_status of this VirtualMachineDetail.


        :param blackout_window_status: The blackout_window_status of this VirtualMachineDetail.
        :type blackout_window_status: BlackoutWindowStatus
        """
        if blackout_window_status is None:
            raise ValueError("Invalid value for `blackout_window_status`, must not be `None`")

        self._blackout_window_status = blackout_window_status

    @property
    def blackout_windows(self):
        """Gets the blackout_windows of this VirtualMachineDetail.


        :return: The blackout_windows of this VirtualMachineDetail.
        :rtype: BlackoutWindows
        """
        return self._blackout_windows

    @blackout_windows.setter
    def blackout_windows(self, blackout_windows):
        """Sets the blackout_windows of this VirtualMachineDetail.


        :param blackout_windows: The blackout_windows of this VirtualMachineDetail.
        :type blackout_windows: BlackoutWindows
        """
        if blackout_windows is None:
            raise ValueError("Invalid value for `blackout_windows`, must not be `None`")

        self._blackout_windows = blackout_windows

    @property
    def cdp_state(self):
        """Gets the cdp_state of this VirtualMachineDetail.


        :return: The cdp_state of this VirtualMachineDetail.
        :rtype: CdpState
        """
        return self._cdp_state

    @cdp_state.setter
    def cdp_state(self, cdp_state):
        """Sets the cdp_state of this VirtualMachineDetail.


        :param cdp_state: The cdp_state of this VirtualMachineDetail.
        :type cdp_state: CdpState
        """
        if cdp_state is None:
            raise ValueError("Invalid value for `cdp_state`, must not be `None`")

        self._cdp_state = cdp_state

    @property
    def current_host(self):
        """Gets the current_host of this VirtualMachineDetail.


        :return: The current_host of this VirtualMachineDetail.
        :rtype: VmwareHostSummary
        """
        return self._current_host

    @current_host.setter
    def current_host(self, current_host):
        """Sets the current_host of this VirtualMachineDetail.


        :param current_host: The current_host of this VirtualMachineDetail.
        :type current_host: VmwareHostSummary
        """

        self._current_host = current_host

    @property
    def effective_sla_domain(self):
        """Gets the effective_sla_domain of this VirtualMachineDetail.


        :return: The effective_sla_domain of this VirtualMachineDetail.
        :rtype: SlaDomainSummary
        """
        return self._effective_sla_domain

    @effective_sla_domain.setter
    def effective_sla_domain(self, effective_sla_domain):
        """Sets the effective_sla_domain of this VirtualMachineDetail.


        :param effective_sla_domain: The effective_sla_domain of this VirtualMachineDetail.
        :type effective_sla_domain: SlaDomainSummary
        """
        if effective_sla_domain is None:
            raise ValueError("Invalid value for `effective_sla_domain`, must not be `None`")

        self._effective_sla_domain = effective_sla_domain

    @property
    def guest_credential(self):
        """Gets the guest_credential of this VirtualMachineDetail.


        :return: The guest_credential of this VirtualMachineDetail.
        :rtype: BaseGuestCredentialDetail
        """
        return self._guest_credential

    @guest_credential.setter
    def guest_credential(self, guest_credential):
        """Sets the guest_credential of this VirtualMachineDetail.


        :param guest_credential: The guest_credential of this VirtualMachineDetail.
        :type guest_credential: BaseGuestCredentialDetail
        """

        self._guest_credential = guest_credential

    @property
    def guest_os_type(self):
        """Gets the guest_os_type of this VirtualMachineDetail.

        Type of operating system used by the VMware virtual machine.

        :return: The guest_os_type of this VirtualMachineDetail.
        :rtype: str
        """
        return self._guest_os_type

    @guest_os_type.setter
    def guest_os_type(self, guest_os_type):
        """Sets the guest_os_type of this VirtualMachineDetail.

        Type of operating system used by the VMware virtual machine.

        :param guest_os_type: The guest_os_type of this VirtualMachineDetail.
        :type guest_os_type: str
        """
        allowed_values = ["Linux", "Windows", "Unknown"]  # noqa: E501
        if guest_os_type not in allowed_values:
            raise ValueError(
                "Invalid value for `guest_os_type` ({0}), must be one of {1}"
                .format(guest_os_type, allowed_values)
            )

        self._guest_os_type = guest_os_type

    @property
    def is_agent_registered(self):
        """Gets the is_agent_registered of this VirtualMachineDetail.

        Boolean value that indicates whether the Rubrik Backup Service is installed and registered for the specified virtual machine. Set to 'true' when the Rubrik Backup Service is installed and registered and in all other cases set to 'false'.

        :return: The is_agent_registered of this VirtualMachineDetail.
        :rtype: bool
        """
        return self._is_agent_registered

    @is_agent_registered.setter
    def is_agent_registered(self, is_agent_registered):
        """Sets the is_agent_registered of this VirtualMachineDetail.

        Boolean value that indicates whether the Rubrik Backup Service is installed and registered for the specified virtual machine. Set to 'true' when the Rubrik Backup Service is installed and registered and in all other cases set to 'false'.

        :param is_agent_registered: The is_agent_registered of this VirtualMachineDetail.
        :type is_agent_registered: bool
        """

        self._is_agent_registered = is_agent_registered

    @property
    def is_array_integration_possible(self):
        """Gets the is_array_integration_possible of this VirtualMachineDetail.

        Boolean value that indicates whether the performance enhancements of storage array integration are available for the specified virtual machine object. Storage array integration is available when all of the datastores that are assigned to the virtual machine reside on a qualified storage array. Set to 'true' when storage array integration is available and set to 'false' when storage array integration is not available.

        :return: The is_array_integration_possible of this VirtualMachineDetail.
        :rtype: bool
        """
        return self._is_array_integration_possible

    @is_array_integration_possible.setter
    def is_array_integration_possible(self, is_array_integration_possible):
        """Sets the is_array_integration_possible of this VirtualMachineDetail.

        Boolean value that indicates whether the performance enhancements of storage array integration are available for the specified virtual machine object. Storage array integration is available when all of the datastores that are assigned to the virtual machine reside on a qualified storage array. Set to 'true' when storage array integration is available and set to 'false' when storage array integration is not available.

        :param is_array_integration_possible: The is_array_integration_possible of this VirtualMachineDetail.
        :type is_array_integration_possible: bool
        """
        if is_array_integration_possible is None:
            raise ValueError("Invalid value for `is_array_integration_possible`, must not be `None`")

        self._is_array_integration_possible = is_array_integration_possible

    @property
    def is_cdp_enabled(self):
        """Gets the is_cdp_enabled of this VirtualMachineDetail.


        :return: The is_cdp_enabled of this VirtualMachineDetail.
        :rtype: bool
        """
        return self._is_cdp_enabled

    @is_cdp_enabled.setter
    def is_cdp_enabled(self, is_cdp_enabled):
        """Sets the is_cdp_enabled of this VirtualMachineDetail.


        :param is_cdp_enabled: The is_cdp_enabled of this VirtualMachineDetail.
        :type is_cdp_enabled: bool
        """
        if is_cdp_enabled is None:
            raise ValueError("Invalid value for `is_cdp_enabled`, must not be `None`")

        self._is_cdp_enabled = is_cdp_enabled

    @property
    def is_in_vmc(self):
        """Gets the is_in_vmc of this VirtualMachineDetail.

        A Boolean that specifies whether the virtual machine is in a VMC environment.

        :return: The is_in_vmc of this VirtualMachineDetail.
        :rtype: bool
        """
        return self._is_in_vmc

    @is_in_vmc.setter
    def is_in_vmc(self, is_in_vmc):
        """Sets the is_in_vmc of this VirtualMachineDetail.

        A Boolean that specifies whether the virtual machine is in a VMC environment.

        :param is_in_vmc: The is_in_vmc of this VirtualMachineDetail.
        :type is_in_vmc: bool
        """
        if is_in_vmc is None:
            raise ValueError("Invalid value for `is_in_vmc`, must not be `None`")

        self._is_in_vmc = is_in_vmc

    @property
    def latest_recovery_point(self):
        """Gets the latest_recovery_point of this VirtualMachineDetail.

        Latest point in time that we can recover to if this is a CDP enabled VM.

        :return: The latest_recovery_point of this VirtualMachineDetail.
        :rtype: datetime
        """
        return self._latest_recovery_point

    @latest_recovery_point.setter
    def latest_recovery_point(self, latest_recovery_point):
        """Sets the latest_recovery_point of this VirtualMachineDetail.

        Latest point in time that we can recover to if this is a CDP enabled VM.

        :param latest_recovery_point: The latest_recovery_point of this VirtualMachineDetail.
        :type latest_recovery_point: datetime
        """

        self._latest_recovery_point = latest_recovery_point

    @property
    def logical_size(self):
        """Gets the logical_size of this VirtualMachineDetail.

        This returns the sum of all virtual disk sizes in the specified virtual machine.

        :return: The logical_size of this VirtualMachineDetail.
        :rtype: int
        """
        return self._logical_size

    @logical_size.setter
    def logical_size(self, logical_size):
        """Sets the logical_size of this VirtualMachineDetail.

        This returns the sum of all virtual disk sizes in the specified virtual machine.

        :param logical_size: The logical_size of this VirtualMachineDetail.
        :type logical_size: int
        """

        self._logical_size = logical_size

    @property
    def oldest_recovery_point(self):
        """Gets the oldest_recovery_point of this VirtualMachineDetail.

        Oldest point in time that we can recover to if this is a CDP enabled VM.

        :return: The oldest_recovery_point of this VirtualMachineDetail.
        :rtype: datetime
        """
        return self._oldest_recovery_point

    @oldest_recovery_point.setter
    def oldest_recovery_point(self, oldest_recovery_point):
        """Sets the oldest_recovery_point of this VirtualMachineDetail.

        Oldest point in time that we can recover to if this is a CDP enabled VM.

        :param oldest_recovery_point: The oldest_recovery_point of this VirtualMachineDetail.
        :type oldest_recovery_point: datetime
        """

        self._oldest_recovery_point = oldest_recovery_point

    @property
    def pending_sla_domain(self):
        """Gets the pending_sla_domain of this VirtualMachineDetail.


        :return: The pending_sla_domain of this VirtualMachineDetail.
        :rtype: ManagedObjectPendingSlaInfo
        """
        return self._pending_sla_domain

    @pending_sla_domain.setter
    def pending_sla_domain(self, pending_sla_domain):
        """Sets the pending_sla_domain of this VirtualMachineDetail.


        :param pending_sla_domain: The pending_sla_domain of this VirtualMachineDetail.
        :type pending_sla_domain: ManagedObjectPendingSlaInfo
        """

        self._pending_sla_domain = pending_sla_domain

    @property
    def physical_storage(self):
        """Gets the physical_storage of this VirtualMachineDetail.


        :return: The physical_storage of this VirtualMachineDetail.
        :rtype: int
        """
        return self._physical_storage

    @physical_storage.setter
    def physical_storage(self, physical_storage):
        """Sets the physical_storage of this VirtualMachineDetail.


        :param physical_storage: The physical_storage of this VirtualMachineDetail.
        :type physical_storage: int
        """
        if physical_storage is None:
            raise ValueError("Invalid value for `physical_storage`, must not be `None`")

        self._physical_storage = physical_storage

    @property
    def snapshot_count(self):
        """Gets the snapshot_count of this VirtualMachineDetail.


        :return: The snapshot_count of this VirtualMachineDetail.
        :rtype: int
        """
        return self._snapshot_count

    @snapshot_count.setter
    def snapshot_count(self, snapshot_count):
        """Sets the snapshot_count of this VirtualMachineDetail.


        :param snapshot_count: The snapshot_count of this VirtualMachineDetail.
        :type snapshot_count: int
        """

        self._snapshot_count = snapshot_count

    @property
    def snapshots(self):
        """Gets the snapshots of this VirtualMachineDetail.


        :return: The snapshots of this VirtualMachineDetail.
        :rtype: List[VmSnapshotSummary]
        """
        return self._snapshots

    @snapshots.setter
    def snapshots(self, snapshots):
        """Sets the snapshots of this VirtualMachineDetail.


        :param snapshots: The snapshots of this VirtualMachineDetail.
        :type snapshots: List[VmSnapshotSummary]
        """

        self._snapshots = snapshots

    @property
    def vcenter_name(self):
        """Gets the vcenter_name of this VirtualMachineDetail.

        The name of vCenter that the virtual machine belongs to.

        :return: The vcenter_name of this VirtualMachineDetail.
        :rtype: str
        """
        return self._vcenter_name

    @vcenter_name.setter
    def vcenter_name(self, vcenter_name):
        """Sets the vcenter_name of this VirtualMachineDetail.

        The name of vCenter that the virtual machine belongs to.

        :param vcenter_name: The vcenter_name of this VirtualMachineDetail.
        :type vcenter_name: str
        """
        if vcenter_name is None:
            raise ValueError("Invalid value for `vcenter_name`, must not be `None`")

        self._vcenter_name = vcenter_name

    @property
    def virtual_disk_ids(self):
        """Gets the virtual_disk_ids of this VirtualMachineDetail.


        :return: The virtual_disk_ids of this VirtualMachineDetail.
        :rtype: List[str]
        """
        return self._virtual_disk_ids

    @virtual_disk_ids.setter
    def virtual_disk_ids(self, virtual_disk_ids):
        """Sets the virtual_disk_ids of this VirtualMachineDetail.


        :param virtual_disk_ids: The virtual_disk_ids of this VirtualMachineDetail.
        :type virtual_disk_ids: List[str]
        """

        self._virtual_disk_ids = virtual_disk_ids
