# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.cluster_geolocation import ClusterGeolocation
from openapi_server.models.cluster_timezone import ClusterTimezone
from openapi_server import util


class ClusterUpdate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, accepted_eula_version: str=None, geolocation: ClusterGeolocation=None, name: str=None, timezone: ClusterTimezone=None):
        """ClusterUpdate - a model defined in OpenAPI

        :param accepted_eula_version: The accepted_eula_version of this ClusterUpdate.
        :param geolocation: The geolocation of this ClusterUpdate.
        :param name: The name of this ClusterUpdate.
        :param timezone: The timezone of this ClusterUpdate.
        """
        self.openapi_types = {
            'accepted_eula_version': str,
            'geolocation': ClusterGeolocation,
            'name': str,
            'timezone': ClusterTimezone
        }

        self.attribute_map = {
            'accepted_eula_version': 'acceptedEulaVersion',
            'geolocation': 'geolocation',
            'name': 'name',
            'timezone': 'timezone'
        }

        self._accepted_eula_version = accepted_eula_version
        self._geolocation = geolocation
        self._name = name
        self._timezone = timezone

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ClusterUpdate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ClusterUpdate of this ClusterUpdate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def accepted_eula_version(self):
        """Gets the accepted_eula_version of this ClusterUpdate.

        Version of the EULA accepted by admin. By modifying this attribute you  agree to the specific version of the EULA. You can view the EULA from  UI. 

        :return: The accepted_eula_version of this ClusterUpdate.
        :rtype: str
        """
        return self._accepted_eula_version

    @accepted_eula_version.setter
    def accepted_eula_version(self, accepted_eula_version):
        """Sets the accepted_eula_version of this ClusterUpdate.

        Version of the EULA accepted by admin. By modifying this attribute you  agree to the specific version of the EULA. You can view the EULA from  UI. 

        :param accepted_eula_version: The accepted_eula_version of this ClusterUpdate.
        :type accepted_eula_version: str
        """

        self._accepted_eula_version = accepted_eula_version

    @property
    def geolocation(self):
        """Gets the geolocation of this ClusterUpdate.


        :return: The geolocation of this ClusterUpdate.
        :rtype: ClusterGeolocation
        """
        return self._geolocation

    @geolocation.setter
    def geolocation(self, geolocation):
        """Sets the geolocation of this ClusterUpdate.


        :param geolocation: The geolocation of this ClusterUpdate.
        :type geolocation: ClusterGeolocation
        """

        self._geolocation = geolocation

    @property
    def name(self):
        """Gets the name of this ClusterUpdate.

        New name for a Rubrik cluster.

        :return: The name of this ClusterUpdate.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ClusterUpdate.

        New name for a Rubrik cluster.

        :param name: The name of this ClusterUpdate.
        :type name: str
        """

        self._name = name

    @property
    def timezone(self):
        """Gets the timezone of this ClusterUpdate.


        :return: The timezone of this ClusterUpdate.
        :rtype: ClusterTimezone
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone):
        """Sets the timezone of this ClusterUpdate.


        :param timezone: The timezone of this ClusterUpdate.
        :type timezone: ClusterTimezone
        """

        self._timezone = timezone
