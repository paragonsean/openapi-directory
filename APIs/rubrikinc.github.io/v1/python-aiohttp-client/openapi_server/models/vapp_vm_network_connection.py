# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.vapp_vm_ip_addressing_mode import VappVmIpAddressingMode
from openapi_server import util


class VappVmNetworkConnection(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, addressing_mode: VappVmIpAddressingMode=None, ip_address: str=None, is_connected: bool=None, mac_address: str=None, network_adapter_type: str=None, nic_index: int=None, vapp_network_name: str=None):
        """VappVmNetworkConnection - a model defined in OpenAPI

        :param addressing_mode: The addressing_mode of this VappVmNetworkConnection.
        :param ip_address: The ip_address of this VappVmNetworkConnection.
        :param is_connected: The is_connected of this VappVmNetworkConnection.
        :param mac_address: The mac_address of this VappVmNetworkConnection.
        :param network_adapter_type: The network_adapter_type of this VappVmNetworkConnection.
        :param nic_index: The nic_index of this VappVmNetworkConnection.
        :param vapp_network_name: The vapp_network_name of this VappVmNetworkConnection.
        """
        self.openapi_types = {
            'addressing_mode': VappVmIpAddressingMode,
            'ip_address': str,
            'is_connected': bool,
            'mac_address': str,
            'network_adapter_type': str,
            'nic_index': int,
            'vapp_network_name': str
        }

        self.attribute_map = {
            'addressing_mode': 'addressingMode',
            'ip_address': 'ipAddress',
            'is_connected': 'isConnected',
            'mac_address': 'macAddress',
            'network_adapter_type': 'networkAdapterType',
            'nic_index': 'nicIndex',
            'vapp_network_name': 'vappNetworkName'
        }

        self._addressing_mode = addressing_mode
        self._ip_address = ip_address
        self._is_connected = is_connected
        self._mac_address = mac_address
        self._network_adapter_type = network_adapter_type
        self._nic_index = nic_index
        self._vapp_network_name = vapp_network_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VappVmNetworkConnection':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VappVmNetworkConnection of this VappVmNetworkConnection.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def addressing_mode(self):
        """Gets the addressing_mode of this VappVmNetworkConnection.


        :return: The addressing_mode of this VappVmNetworkConnection.
        :rtype: VappVmIpAddressingMode
        """
        return self._addressing_mode

    @addressing_mode.setter
    def addressing_mode(self, addressing_mode):
        """Sets the addressing_mode of this VappVmNetworkConnection.


        :param addressing_mode: The addressing_mode of this VappVmNetworkConnection.
        :type addressing_mode: VappVmIpAddressingMode
        """
        if addressing_mode is None:
            raise ValueError("Invalid value for `addressing_mode`, must not be `None`")

        self._addressing_mode = addressing_mode

    @property
    def ip_address(self):
        """Gets the ip_address of this VappVmNetworkConnection.

        IPv4 address to assign to the specified vApp network connection. Set this value only when the network address allocation method is 'Static'. Otherwise, the value should be empty.

        :return: The ip_address of this VappVmNetworkConnection.
        :rtype: str
        """
        return self._ip_address

    @ip_address.setter
    def ip_address(self, ip_address):
        """Sets the ip_address of this VappVmNetworkConnection.

        IPv4 address to assign to the specified vApp network connection. Set this value only when the network address allocation method is 'Static'. Otherwise, the value should be empty.

        :param ip_address: The ip_address of this VappVmNetworkConnection.
        :type ip_address: str
        """

        self._ip_address = ip_address

    @property
    def is_connected(self):
        """Gets the is_connected of this VappVmNetworkConnection.

        Boolean value that indicates whether the specified vApp network connection is enabled. Set the value to 'true' to enable the connection or 'false' to disable the connection.

        :return: The is_connected of this VappVmNetworkConnection.
        :rtype: bool
        """
        return self._is_connected

    @is_connected.setter
    def is_connected(self, is_connected):
        """Sets the is_connected of this VappVmNetworkConnection.

        Boolean value that indicates whether the specified vApp network connection is enabled. Set the value to 'true' to enable the connection or 'false' to disable the connection.

        :param is_connected: The is_connected of this VappVmNetworkConnection.
        :type is_connected: bool
        """
        if is_connected is None:
            raise ValueError("Invalid value for `is_connected`, must not be `None`")

        self._is_connected = is_connected

    @property
    def mac_address(self):
        """Gets the mac_address of this VappVmNetworkConnection.

        MAC address of the NIC that is used by the specified vApp network connection.

        :return: The mac_address of this VappVmNetworkConnection.
        :rtype: str
        """
        return self._mac_address

    @mac_address.setter
    def mac_address(self, mac_address):
        """Sets the mac_address of this VappVmNetworkConnection.

        MAC address of the NIC that is used by the specified vApp network connection.

        :param mac_address: The mac_address of this VappVmNetworkConnection.
        :type mac_address: str
        """

        self._mac_address = mac_address

    @property
    def network_adapter_type(self):
        """Gets the network_adapter_type of this VappVmNetworkConnection.

        The network adapter type of the NIC.

        :return: The network_adapter_type of this VappVmNetworkConnection.
        :rtype: str
        """
        return self._network_adapter_type

    @network_adapter_type.setter
    def network_adapter_type(self, network_adapter_type):
        """Sets the network_adapter_type of this VappVmNetworkConnection.

        The network adapter type of the NIC.

        :param network_adapter_type: The network_adapter_type of this VappVmNetworkConnection.
        :type network_adapter_type: str
        """

        self._network_adapter_type = network_adapter_type

    @property
    def nic_index(self):
        """Gets the nic_index of this VappVmNetworkConnection.

        Index assigned to the NIC that is used by the specified vApp network connection.

        :return: The nic_index of this VappVmNetworkConnection.
        :rtype: int
        """
        return self._nic_index

    @nic_index.setter
    def nic_index(self, nic_index):
        """Sets the nic_index of this VappVmNetworkConnection.

        Index assigned to the NIC that is used by the specified vApp network connection.

        :param nic_index: The nic_index of this VappVmNetworkConnection.
        :type nic_index: int
        """
        if nic_index is None:
            raise ValueError("Invalid value for `nic_index`, must not be `None`")

        self._nic_index = nic_index

    @property
    def vapp_network_name(self):
        """Gets the vapp_network_name of this VappVmNetworkConnection.

        Name of the vApp network to which the NIC corresponding to this connection will connect to.

        :return: The vapp_network_name of this VappVmNetworkConnection.
        :rtype: str
        """
        return self._vapp_network_name

    @vapp_network_name.setter
    def vapp_network_name(self, vapp_network_name):
        """Sets the vapp_network_name of this VappVmNetworkConnection.

        Name of the vApp network to which the NIC corresponding to this connection will connect to.

        :param vapp_network_name: The vapp_network_name of this VappVmNetworkConnection.
        :type vapp_network_name: str
        """

        self._vapp_network_name = vapp_network_name
