# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.role_info import RoleInfo
from openapi_server import util


class PrincipalWithRoleInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, principal: str=None, roles: List[RoleInfo]=None):
        """PrincipalWithRoleInfo - a model defined in OpenAPI

        :param principal: The principal of this PrincipalWithRoleInfo.
        :param roles: The roles of this PrincipalWithRoleInfo.
        """
        self.openapi_types = {
            'principal': str,
            'roles': List[RoleInfo]
        }

        self.attribute_map = {
            'principal': 'principal',
            'roles': 'roles'
        }

        self._principal = principal
        self._roles = roles

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PrincipalWithRoleInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PrincipalWithRoleInfo of this PrincipalWithRoleInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def principal(self):
        """Gets the principal of this PrincipalWithRoleInfo.

        The principal that is assigned the roles.

        :return: The principal of this PrincipalWithRoleInfo.
        :rtype: str
        """
        return self._principal

    @principal.setter
    def principal(self, principal):
        """Sets the principal of this PrincipalWithRoleInfo.

        The principal that is assigned the roles.

        :param principal: The principal of this PrincipalWithRoleInfo.
        :type principal: str
        """
        if principal is None:
            raise ValueError("Invalid value for `principal`, must not be `None`")

        self._principal = principal

    @property
    def roles(self):
        """Gets the roles of this PrincipalWithRoleInfo.

        The roles that are assigned to the principal.

        :return: The roles of this PrincipalWithRoleInfo.
        :rtype: List[RoleInfo]
        """
        return self._roles

    @roles.setter
    def roles(self, roles):
        """Sets the roles of this PrincipalWithRoleInfo.

        The roles that are assigned to the principal.

        :param roles: The roles of this PrincipalWithRoleInfo.
        :type roles: List[RoleInfo]
        """
        if roles is None:
            raise ValueError("Invalid value for `roles`, must not be `None`")

        self._roles = roles
