# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class VirtualMachineScriptDetail(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, failure_handling: str=None, script_path: str=None, timeout_ms: int=None):
        """VirtualMachineScriptDetail - a model defined in OpenAPI

        :param failure_handling: The failure_handling of this VirtualMachineScriptDetail.
        :param script_path: The script_path of this VirtualMachineScriptDetail.
        :param timeout_ms: The timeout_ms of this VirtualMachineScriptDetail.
        """
        self.openapi_types = {
            'failure_handling': str,
            'script_path': str,
            'timeout_ms': int
        }

        self.attribute_map = {
            'failure_handling': 'failureHandling',
            'script_path': 'scriptPath',
            'timeout_ms': 'timeoutMs'
        }

        self._failure_handling = failure_handling
        self._script_path = script_path
        self._timeout_ms = timeout_ms

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VirtualMachineScriptDetail':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VirtualMachineScriptDetail of this VirtualMachineScriptDetail.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def failure_handling(self):
        """Gets the failure_handling of this VirtualMachineScriptDetail.

        Action to take if the script returns an error or times out.

        :return: The failure_handling of this VirtualMachineScriptDetail.
        :rtype: str
        """
        return self._failure_handling

    @failure_handling.setter
    def failure_handling(self, failure_handling):
        """Sets the failure_handling of this VirtualMachineScriptDetail.

        Action to take if the script returns an error or times out.

        :param failure_handling: The failure_handling of this VirtualMachineScriptDetail.
        :type failure_handling: str
        """
        allowed_values = ["abort", "continue"]  # noqa: E501
        if failure_handling not in allowed_values:
            raise ValueError(
                "Invalid value for `failure_handling` ({0}), must be one of {1}"
                .format(failure_handling, allowed_values)
            )

        self._failure_handling = failure_handling

    @property
    def script_path(self):
        """Gets the script_path of this VirtualMachineScriptDetail.

        The command to be run in VM guest OS.

        :return: The script_path of this VirtualMachineScriptDetail.
        :rtype: str
        """
        return self._script_path

    @script_path.setter
    def script_path(self, script_path):
        """Sets the script_path of this VirtualMachineScriptDetail.

        The command to be run in VM guest OS.

        :param script_path: The script_path of this VirtualMachineScriptDetail.
        :type script_path: str
        """
        if script_path is None:
            raise ValueError("Invalid value for `script_path`, must not be `None`")

        self._script_path = script_path

    @property
    def timeout_ms(self):
        """Gets the timeout_ms of this VirtualMachineScriptDetail.

        Time (in ms) after which the script will be terminated if it has not completed.

        :return: The timeout_ms of this VirtualMachineScriptDetail.
        :rtype: int
        """
        return self._timeout_ms

    @timeout_ms.setter
    def timeout_ms(self, timeout_ms):
        """Sets the timeout_ms of this VirtualMachineScriptDetail.

        Time (in ms) after which the script will be terminated if it has not completed.

        :param timeout_ms: The timeout_ms of this VirtualMachineScriptDetail.
        :type timeout_ms: int
        """
        if timeout_ms is None:
            raise ValueError("Invalid value for `timeout_ms`, must not be `None`")

        self._timeout_ms = timeout_ms
