# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.script_error_action import ScriptErrorAction
from openapi_server import util


class MssqlScriptDetail(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, script_error_action: ScriptErrorAction=None, script_path: str=None, timeout_ms: int=None):
        """MssqlScriptDetail - a model defined in OpenAPI

        :param script_error_action: The script_error_action of this MssqlScriptDetail.
        :param script_path: The script_path of this MssqlScriptDetail.
        :param timeout_ms: The timeout_ms of this MssqlScriptDetail.
        """
        self.openapi_types = {
            'script_error_action': ScriptErrorAction,
            'script_path': str,
            'timeout_ms': int
        }

        self.attribute_map = {
            'script_error_action': 'scriptErrorAction',
            'script_path': 'scriptPath',
            'timeout_ms': 'timeoutMs'
        }

        self._script_error_action = script_error_action
        self._script_path = script_path
        self._timeout_ms = timeout_ms

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MssqlScriptDetail':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MssqlScriptDetail of this MssqlScriptDetail.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def script_error_action(self):
        """Gets the script_error_action of this MssqlScriptDetail.


        :return: The script_error_action of this MssqlScriptDetail.
        :rtype: ScriptErrorAction
        """
        return self._script_error_action

    @script_error_action.setter
    def script_error_action(self, script_error_action):
        """Sets the script_error_action of this MssqlScriptDetail.


        :param script_error_action: The script_error_action of this MssqlScriptDetail.
        :type script_error_action: ScriptErrorAction
        """
        if script_error_action is None:
            raise ValueError("Invalid value for `script_error_action`, must not be `None`")

        self._script_error_action = script_error_action

    @property
    def script_path(self):
        """Gets the script_path of this MssqlScriptDetail.

        The script to be run.

        :return: The script_path of this MssqlScriptDetail.
        :rtype: str
        """
        return self._script_path

    @script_path.setter
    def script_path(self, script_path):
        """Sets the script_path of this MssqlScriptDetail.

        The script to be run.

        :param script_path: The script_path of this MssqlScriptDetail.
        :type script_path: str
        """
        if script_path is None:
            raise ValueError("Invalid value for `script_path`, must not be `None`")

        self._script_path = script_path

    @property
    def timeout_ms(self):
        """Gets the timeout_ms of this MssqlScriptDetail.

        Time (in ms) after which the script will be terminated if it has not completed.

        :return: The timeout_ms of this MssqlScriptDetail.
        :rtype: int
        """
        return self._timeout_ms

    @timeout_ms.setter
    def timeout_ms(self, timeout_ms):
        """Sets the timeout_ms of this MssqlScriptDetail.

        Time (in ms) after which the script will be terminated if it has not completed.

        :param timeout_ms: The timeout_ms of this MssqlScriptDetail.
        :type timeout_ms: int
        """
        if timeout_ms is None:
            raise ValueError("Invalid value for `timeout_ms`, must not be `None`")

        self._timeout_ms = timeout_ms
