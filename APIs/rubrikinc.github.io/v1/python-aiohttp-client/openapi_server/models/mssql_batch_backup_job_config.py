# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MssqlBatchBackupJobConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, sla_id: str=None, availability_group_ids: List[str]=None, database_ids: List[str]=None, force_full_snapshot: bool=None, host_ids: List[str]=None, instance_ids: List[str]=None, windows_cluster_ids: List[str]=None):
        """MssqlBatchBackupJobConfig - a model defined in OpenAPI

        :param sla_id: The sla_id of this MssqlBatchBackupJobConfig.
        :param availability_group_ids: The availability_group_ids of this MssqlBatchBackupJobConfig.
        :param database_ids: The database_ids of this MssqlBatchBackupJobConfig.
        :param force_full_snapshot: The force_full_snapshot of this MssqlBatchBackupJobConfig.
        :param host_ids: The host_ids of this MssqlBatchBackupJobConfig.
        :param instance_ids: The instance_ids of this MssqlBatchBackupJobConfig.
        :param windows_cluster_ids: The windows_cluster_ids of this MssqlBatchBackupJobConfig.
        """
        self.openapi_types = {
            'sla_id': str,
            'availability_group_ids': List[str],
            'database_ids': List[str],
            'force_full_snapshot': bool,
            'host_ids': List[str],
            'instance_ids': List[str],
            'windows_cluster_ids': List[str]
        }

        self.attribute_map = {
            'sla_id': 'slaId',
            'availability_group_ids': 'availabilityGroupIds',
            'database_ids': 'databaseIds',
            'force_full_snapshot': 'forceFullSnapshot',
            'host_ids': 'hostIds',
            'instance_ids': 'instanceIds',
            'windows_cluster_ids': 'windowsClusterIds'
        }

        self._sla_id = sla_id
        self._availability_group_ids = availability_group_ids
        self._database_ids = database_ids
        self._force_full_snapshot = force_full_snapshot
        self._host_ids = host_ids
        self._instance_ids = instance_ids
        self._windows_cluster_ids = windows_cluster_ids

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MssqlBatchBackupJobConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MssqlBatchBackupJobConfig of this MssqlBatchBackupJobConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def sla_id(self):
        """Gets the sla_id of this MssqlBatchBackupJobConfig.


        :return: The sla_id of this MssqlBatchBackupJobConfig.
        :rtype: str
        """
        return self._sla_id

    @sla_id.setter
    def sla_id(self, sla_id):
        """Sets the sla_id of this MssqlBatchBackupJobConfig.


        :param sla_id: The sla_id of this MssqlBatchBackupJobConfig.
        :type sla_id: str
        """

        self._sla_id = sla_id

    @property
    def availability_group_ids(self):
        """Gets the availability_group_ids of this MssqlBatchBackupJobConfig.

        IDs of the Microsoft SQL availability groups. All databases with a `rootId` belonging to this list are considered for taking an on demand snapshot.

        :return: The availability_group_ids of this MssqlBatchBackupJobConfig.
        :rtype: List[str]
        """
        return self._availability_group_ids

    @availability_group_ids.setter
    def availability_group_ids(self, availability_group_ids):
        """Sets the availability_group_ids of this MssqlBatchBackupJobConfig.

        IDs of the Microsoft SQL availability groups. All databases with a `rootId` belonging to this list are considered for taking an on demand snapshot.

        :param availability_group_ids: The availability_group_ids of this MssqlBatchBackupJobConfig.
        :type availability_group_ids: List[str]
        """

        self._availability_group_ids = availability_group_ids

    @property
    def database_ids(self):
        """Gets the database_ids of this MssqlBatchBackupJobConfig.

        IDs of the Microsoft SQL databases. All databases in this list are considered for taking an on demand snapshot.

        :return: The database_ids of this MssqlBatchBackupJobConfig.
        :rtype: List[str]
        """
        return self._database_ids

    @database_ids.setter
    def database_ids(self, database_ids):
        """Sets the database_ids of this MssqlBatchBackupJobConfig.

        IDs of the Microsoft SQL databases. All databases in this list are considered for taking an on demand snapshot.

        :param database_ids: The database_ids of this MssqlBatchBackupJobConfig.
        :type database_ids: List[str]
        """

        self._database_ids = database_ids

    @property
    def force_full_snapshot(self):
        """Gets the force_full_snapshot of this MssqlBatchBackupJobConfig.

        Determines whether to force a full or incremental snapshot.

        :return: The force_full_snapshot of this MssqlBatchBackupJobConfig.
        :rtype: bool
        """
        return self._force_full_snapshot

    @force_full_snapshot.setter
    def force_full_snapshot(self, force_full_snapshot):
        """Sets the force_full_snapshot of this MssqlBatchBackupJobConfig.

        Determines whether to force a full or incremental snapshot.

        :param force_full_snapshot: The force_full_snapshot of this MssqlBatchBackupJobConfig.
        :type force_full_snapshot: bool
        """

        self._force_full_snapshot = force_full_snapshot

    @property
    def host_ids(self):
        """Gets the host_ids of this MssqlBatchBackupJobConfig.

        IDs of the hosts. All databases with a `rootId` belonging to this list are considered for taking an on demand snapshot.

        :return: The host_ids of this MssqlBatchBackupJobConfig.
        :rtype: List[str]
        """
        return self._host_ids

    @host_ids.setter
    def host_ids(self, host_ids):
        """Sets the host_ids of this MssqlBatchBackupJobConfig.

        IDs of the hosts. All databases with a `rootId` belonging to this list are considered for taking an on demand snapshot.

        :param host_ids: The host_ids of this MssqlBatchBackupJobConfig.
        :type host_ids: List[str]
        """

        self._host_ids = host_ids

    @property
    def instance_ids(self):
        """Gets the instance_ids of this MssqlBatchBackupJobConfig.

        IDs of the Microsoft SQL instances. All non-availability databases on these instances are considered for taking an on demand snapshot.

        :return: The instance_ids of this MssqlBatchBackupJobConfig.
        :rtype: List[str]
        """
        return self._instance_ids

    @instance_ids.setter
    def instance_ids(self, instance_ids):
        """Sets the instance_ids of this MssqlBatchBackupJobConfig.

        IDs of the Microsoft SQL instances. All non-availability databases on these instances are considered for taking an on demand snapshot.

        :param instance_ids: The instance_ids of this MssqlBatchBackupJobConfig.
        :type instance_ids: List[str]
        """

        self._instance_ids = instance_ids

    @property
    def windows_cluster_ids(self):
        """Gets the windows_cluster_ids of this MssqlBatchBackupJobConfig.

        IDs of the Windows clusters. All databases with a `rootId` belonging to this list are considered for taking an on demand snapshot.

        :return: The windows_cluster_ids of this MssqlBatchBackupJobConfig.
        :rtype: List[str]
        """
        return self._windows_cluster_ids

    @windows_cluster_ids.setter
    def windows_cluster_ids(self, windows_cluster_ids):
        """Sets the windows_cluster_ids of this MssqlBatchBackupJobConfig.

        IDs of the Windows clusters. All databases with a `rootId` belonging to this list are considered for taking an on demand snapshot.

        :param windows_cluster_ids: The windows_cluster_ids of this MssqlBatchBackupJobConfig.
        :type windows_cluster_ids: List[str]
        """

        self._windows_cluster_ids = windows_cluster_ids
