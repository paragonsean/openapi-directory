# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.discovered_nas_share import DiscoveredNasShare
from openapi_server import util


class NasSharesToAdd(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, host_id: str=None, nas_shares: List[DiscoveredNasShare]=None):
        """NasSharesToAdd - a model defined in OpenAPI

        :param host_id: The host_id of this NasSharesToAdd.
        :param nas_shares: The nas_shares of this NasSharesToAdd.
        """
        self.openapi_types = {
            'host_id': str,
            'nas_shares': List[DiscoveredNasShare]
        }

        self.attribute_map = {
            'host_id': 'hostId',
            'nas_shares': 'nasShares'
        }

        self._host_id = host_id
        self._nas_shares = nas_shares

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NasSharesToAdd':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NasSharesToAdd of this NasSharesToAdd.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def host_id(self):
        """Gets the host_id of this NasSharesToAdd.

        The host ID of the NAS Share host.

        :return: The host_id of this NasSharesToAdd.
        :rtype: str
        """
        return self._host_id

    @host_id.setter
    def host_id(self, host_id):
        """Sets the host_id of this NasSharesToAdd.

        The host ID of the NAS Share host.

        :param host_id: The host_id of this NasSharesToAdd.
        :type host_id: str
        """
        if host_id is None:
            raise ValueError("Invalid value for `host_id`, must not be `None`")

        self._host_id = host_id

    @property
    def nas_shares(self):
        """Gets the nas_shares of this NasSharesToAdd.

        The NAS shares to bulk add for the NAS host.

        :return: The nas_shares of this NasSharesToAdd.
        :rtype: List[DiscoveredNasShare]
        """
        return self._nas_shares

    @nas_shares.setter
    def nas_shares(self, nas_shares):
        """Sets the nas_shares of this NasSharesToAdd.

        The NAS shares to bulk add for the NAS host.

        :param nas_shares: The nas_shares of this NasSharesToAdd.
        :type nas_shares: List[DiscoveredNasShare]
        """
        if nas_shares is None:
            raise ValueError("Invalid value for `nas_shares`, must not be `None`")

        self._nas_shares = nas_shares
