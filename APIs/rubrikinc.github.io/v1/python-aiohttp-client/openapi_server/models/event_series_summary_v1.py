# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.event_series_status_v1 import EventSeriesStatusV1
from openapi_server.models.event_status_v1 import EventStatusV1
from openapi_server.models.event_summary_v1 import EventSummaryV1
from openapi_server.models.object_type_v1 import ObjectTypeV1
from openapi_server import util


class EventSeriesSummaryV1(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, archive_target_name: str=None, data_to_transfer: int=None, data_transferred: int=None, duration: str=None, end_time: datetime=None, estimated_time_remaining: str=None, event_detail_list: List[EventSummaryV1]=None, event_series_id: str=None, event_series_status: EventSeriesStatusV1=None, has_job: bool=None, is_first_full_snapshot: bool=None, is_on_demand: bool=None, is_sla_retention_locked: bool=None, location: str=None, logical_size: int=None, node_ids: str=None, number_of_retries: int=None, object_id: str=None, object_name: str=None, object_type: ObjectTypeV1=None, progress_percentage: str=None, remote_cluster_name: str=None, sla_id: str=None, sla_name: str=None, start_time: datetime=None, status: EventStatusV1=None, task_type: str=None, throughput: int=None, username: str=None):
        """EventSeriesSummaryV1 - a model defined in OpenAPI

        :param archive_target_name: The archive_target_name of this EventSeriesSummaryV1.
        :param data_to_transfer: The data_to_transfer of this EventSeriesSummaryV1.
        :param data_transferred: The data_transferred of this EventSeriesSummaryV1.
        :param duration: The duration of this EventSeriesSummaryV1.
        :param end_time: The end_time of this EventSeriesSummaryV1.
        :param estimated_time_remaining: The estimated_time_remaining of this EventSeriesSummaryV1.
        :param event_detail_list: The event_detail_list of this EventSeriesSummaryV1.
        :param event_series_id: The event_series_id of this EventSeriesSummaryV1.
        :param event_series_status: The event_series_status of this EventSeriesSummaryV1.
        :param has_job: The has_job of this EventSeriesSummaryV1.
        :param is_first_full_snapshot: The is_first_full_snapshot of this EventSeriesSummaryV1.
        :param is_on_demand: The is_on_demand of this EventSeriesSummaryV1.
        :param is_sla_retention_locked: The is_sla_retention_locked of this EventSeriesSummaryV1.
        :param location: The location of this EventSeriesSummaryV1.
        :param logical_size: The logical_size of this EventSeriesSummaryV1.
        :param node_ids: The node_ids of this EventSeriesSummaryV1.
        :param number_of_retries: The number_of_retries of this EventSeriesSummaryV1.
        :param object_id: The object_id of this EventSeriesSummaryV1.
        :param object_name: The object_name of this EventSeriesSummaryV1.
        :param object_type: The object_type of this EventSeriesSummaryV1.
        :param progress_percentage: The progress_percentage of this EventSeriesSummaryV1.
        :param remote_cluster_name: The remote_cluster_name of this EventSeriesSummaryV1.
        :param sla_id: The sla_id of this EventSeriesSummaryV1.
        :param sla_name: The sla_name of this EventSeriesSummaryV1.
        :param start_time: The start_time of this EventSeriesSummaryV1.
        :param status: The status of this EventSeriesSummaryV1.
        :param task_type: The task_type of this EventSeriesSummaryV1.
        :param throughput: The throughput of this EventSeriesSummaryV1.
        :param username: The username of this EventSeriesSummaryV1.
        """
        self.openapi_types = {
            'archive_target_name': str,
            'data_to_transfer': int,
            'data_transferred': int,
            'duration': str,
            'end_time': datetime,
            'estimated_time_remaining': str,
            'event_detail_list': List[EventSummaryV1],
            'event_series_id': str,
            'event_series_status': EventSeriesStatusV1,
            'has_job': bool,
            'is_first_full_snapshot': bool,
            'is_on_demand': bool,
            'is_sla_retention_locked': bool,
            'location': str,
            'logical_size': int,
            'node_ids': str,
            'number_of_retries': int,
            'object_id': str,
            'object_name': str,
            'object_type': ObjectTypeV1,
            'progress_percentage': str,
            'remote_cluster_name': str,
            'sla_id': str,
            'sla_name': str,
            'start_time': datetime,
            'status': EventStatusV1,
            'task_type': str,
            'throughput': int,
            'username': str
        }

        self.attribute_map = {
            'archive_target_name': 'archiveTargetName',
            'data_to_transfer': 'dataToTransfer',
            'data_transferred': 'dataTransferred',
            'duration': 'duration',
            'end_time': 'endTime',
            'estimated_time_remaining': 'estimatedTimeRemaining',
            'event_detail_list': 'eventDetailList',
            'event_series_id': 'eventSeriesId',
            'event_series_status': 'eventSeriesStatus',
            'has_job': 'hasJob',
            'is_first_full_snapshot': 'isFirstFullSnapshot',
            'is_on_demand': 'isOnDemand',
            'is_sla_retention_locked': 'isSlaRetentionLocked',
            'location': 'location',
            'logical_size': 'logicalSize',
            'node_ids': 'nodeIds',
            'number_of_retries': 'numberOfRetries',
            'object_id': 'objectId',
            'object_name': 'objectName',
            'object_type': 'objectType',
            'progress_percentage': 'progressPercentage',
            'remote_cluster_name': 'remoteClusterName',
            'sla_id': 'slaId',
            'sla_name': 'slaName',
            'start_time': 'startTime',
            'status': 'status',
            'task_type': 'taskType',
            'throughput': 'throughput',
            'username': 'username'
        }

        self._archive_target_name = archive_target_name
        self._data_to_transfer = data_to_transfer
        self._data_transferred = data_transferred
        self._duration = duration
        self._end_time = end_time
        self._estimated_time_remaining = estimated_time_remaining
        self._event_detail_list = event_detail_list
        self._event_series_id = event_series_id
        self._event_series_status = event_series_status
        self._has_job = has_job
        self._is_first_full_snapshot = is_first_full_snapshot
        self._is_on_demand = is_on_demand
        self._is_sla_retention_locked = is_sla_retention_locked
        self._location = location
        self._logical_size = logical_size
        self._node_ids = node_ids
        self._number_of_retries = number_of_retries
        self._object_id = object_id
        self._object_name = object_name
        self._object_type = object_type
        self._progress_percentage = progress_percentage
        self._remote_cluster_name = remote_cluster_name
        self._sla_id = sla_id
        self._sla_name = sla_name
        self._start_time = start_time
        self._status = status
        self._task_type = task_type
        self._throughput = throughput
        self._username = username

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EventSeriesSummaryV1':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EventSeriesSummaryV1 of this EventSeriesSummaryV1.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def archive_target_name(self):
        """Gets the archive_target_name of this EventSeriesSummaryV1.

        The name of the archive target related to the archival task.

        :return: The archive_target_name of this EventSeriesSummaryV1.
        :rtype: str
        """
        return self._archive_target_name

    @archive_target_name.setter
    def archive_target_name(self, archive_target_name):
        """Sets the archive_target_name of this EventSeriesSummaryV1.

        The name of the archive target related to the archival task.

        :param archive_target_name: The archive_target_name of this EventSeriesSummaryV1.
        :type archive_target_name: str
        """

        self._archive_target_name = archive_target_name

    @property
    def data_to_transfer(self):
        """Gets the data_to_transfer of this EventSeriesSummaryV1.

        The amount of data the job corresponding to the event needs to transfer.

        :return: The data_to_transfer of this EventSeriesSummaryV1.
        :rtype: int
        """
        return self._data_to_transfer

    @data_to_transfer.setter
    def data_to_transfer(self, data_to_transfer):
        """Sets the data_to_transfer of this EventSeriesSummaryV1.

        The amount of data the job corresponding to the event needs to transfer.

        :param data_to_transfer: The data_to_transfer of this EventSeriesSummaryV1.
        :type data_to_transfer: int
        """

        self._data_to_transfer = data_to_transfer

    @property
    def data_transferred(self):
        """Gets the data_transferred of this EventSeriesSummaryV1.

        The total amount of data that has been transferred by the event or job to date.

        :return: The data_transferred of this EventSeriesSummaryV1.
        :rtype: int
        """
        return self._data_transferred

    @data_transferred.setter
    def data_transferred(self, data_transferred):
        """Sets the data_transferred of this EventSeriesSummaryV1.

        The total amount of data that has been transferred by the event or job to date.

        :param data_transferred: The data_transferred of this EventSeriesSummaryV1.
        :type data_transferred: int
        """

        self._data_transferred = data_transferred

    @property
    def duration(self):
        """Gets the duration of this EventSeriesSummaryV1.

        The current run time of the job that corresponds to the event series. For completed jobs, this time is equal to the total run time of the job (endTime - startTime). For an in-progress job, this time is equal to the Current Time minus the startTime. This field is empty for event series that do not correspond to a job.

        :return: The duration of this EventSeriesSummaryV1.
        :rtype: str
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this EventSeriesSummaryV1.

        The current run time of the job that corresponds to the event series. For completed jobs, this time is equal to the total run time of the job (endTime - startTime). For an in-progress job, this time is equal to the Current Time minus the startTime. This field is empty for event series that do not correspond to a job.

        :param duration: The duration of this EventSeriesSummaryV1.
        :type duration: str
        """

        self._duration = duration

    @property
    def end_time(self):
        """Gets the end_time of this EventSeriesSummaryV1.

        For event series that correspond to a job, the time when the job finished. For a completed event series, the time of the last event in the series. This field is empty for jobs that have not completed or for event series that do not correspond to a job.

        :return: The end_time of this EventSeriesSummaryV1.
        :rtype: datetime
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this EventSeriesSummaryV1.

        For event series that correspond to a job, the time when the job finished. For a completed event series, the time of the last event in the series. This field is empty for jobs that have not completed or for event series that do not correspond to a job.

        :param end_time: The end_time of this EventSeriesSummaryV1.
        :type end_time: datetime
        """

        self._end_time = end_time

    @property
    def estimated_time_remaining(self):
        """Gets the estimated_time_remaining of this EventSeriesSummaryV1.

        The estimated time remaining of the job that corresponds to the event series. This field is empty for event series that do not correspond to a job.

        :return: The estimated_time_remaining of this EventSeriesSummaryV1.
        :rtype: str
        """
        return self._estimated_time_remaining

    @estimated_time_remaining.setter
    def estimated_time_remaining(self, estimated_time_remaining):
        """Sets the estimated_time_remaining of this EventSeriesSummaryV1.

        The estimated time remaining of the job that corresponds to the event series. This field is empty for event series that do not correspond to a job.

        :param estimated_time_remaining: The estimated_time_remaining of this EventSeriesSummaryV1.
        :type estimated_time_remaining: str
        """

        self._estimated_time_remaining = estimated_time_remaining

    @property
    def event_detail_list(self):
        """Gets the event_detail_list of this EventSeriesSummaryV1.

        List of the events in the event series.

        :return: The event_detail_list of this EventSeriesSummaryV1.
        :rtype: List[EventSummaryV1]
        """
        return self._event_detail_list

    @event_detail_list.setter
    def event_detail_list(self, event_detail_list):
        """Sets the event_detail_list of this EventSeriesSummaryV1.

        List of the events in the event series.

        :param event_detail_list: The event_detail_list of this EventSeriesSummaryV1.
        :type event_detail_list: List[EventSummaryV1]
        """
        if event_detail_list is None:
            raise ValueError("Invalid value for `event_detail_list`, must not be `None`")

        self._event_detail_list = event_detail_list

    @property
    def event_series_id(self):
        """Gets the event_series_id of this EventSeriesSummaryV1.

        The ID of event series.

        :return: The event_series_id of this EventSeriesSummaryV1.
        :rtype: str
        """
        return self._event_series_id

    @event_series_id.setter
    def event_series_id(self, event_series_id):
        """Sets the event_series_id of this EventSeriesSummaryV1.

        The ID of event series.

        :param event_series_id: The event_series_id of this EventSeriesSummaryV1.
        :type event_series_id: str
        """
        if event_series_id is None:
            raise ValueError("Invalid value for `event_series_id`, must not be `None`")

        self._event_series_id = event_series_id

    @property
    def event_series_status(self):
        """Gets the event_series_status of this EventSeriesSummaryV1.


        :return: The event_series_status of this EventSeriesSummaryV1.
        :rtype: EventSeriesStatusV1
        """
        return self._event_series_status

    @event_series_status.setter
    def event_series_status(self, event_series_status):
        """Sets the event_series_status of this EventSeriesSummaryV1.


        :param event_series_status: The event_series_status of this EventSeriesSummaryV1.
        :type event_series_status: EventSeriesStatusV1
        """

        self._event_series_status = event_series_status

    @property
    def has_job(self):
        """Gets the has_job of this EventSeriesSummaryV1.

        A Boolean value that specifies whether the event series is linked to a job on the backend. When this value is 'true,' the event series is linked to a job on the backend. When this value is 'false,' the event series is not linked to a job on the backend.

        :return: The has_job of this EventSeriesSummaryV1.
        :rtype: bool
        """
        return self._has_job

    @has_job.setter
    def has_job(self, has_job):
        """Sets the has_job of this EventSeriesSummaryV1.

        A Boolean value that specifies whether the event series is linked to a job on the backend. When this value is 'true,' the event series is linked to a job on the backend. When this value is 'false,' the event series is not linked to a job on the backend.

        :param has_job: The has_job of this EventSeriesSummaryV1.
        :type has_job: bool
        """
        if has_job is None:
            raise ValueError("Invalid value for `has_job`, must not be `None`")

        self._has_job = has_job

    @property
    def is_first_full_snapshot(self):
        """Gets the is_first_full_snapshot of this EventSeriesSummaryV1.

        A Boolean value that determines whether the job associated with the event is a first full snapshot backup.

        :return: The is_first_full_snapshot of this EventSeriesSummaryV1.
        :rtype: bool
        """
        return self._is_first_full_snapshot

    @is_first_full_snapshot.setter
    def is_first_full_snapshot(self, is_first_full_snapshot):
        """Sets the is_first_full_snapshot of this EventSeriesSummaryV1.

        A Boolean value that determines whether the job associated with the event is a first full snapshot backup.

        :param is_first_full_snapshot: The is_first_full_snapshot of this EventSeriesSummaryV1.
        :type is_first_full_snapshot: bool
        """

        self._is_first_full_snapshot = is_first_full_snapshot

    @property
    def is_on_demand(self):
        """Gets the is_on_demand of this EventSeriesSummaryV1.

        Boolean value of true indicates an on demand job.

        :return: The is_on_demand of this EventSeriesSummaryV1.
        :rtype: bool
        """
        return self._is_on_demand

    @is_on_demand.setter
    def is_on_demand(self, is_on_demand):
        """Sets the is_on_demand of this EventSeriesSummaryV1.

        Boolean value of true indicates an on demand job.

        :param is_on_demand: The is_on_demand of this EventSeriesSummaryV1.
        :type is_on_demand: bool
        """

        self._is_on_demand = is_on_demand

    @property
    def is_sla_retention_locked(self):
        """Gets the is_sla_retention_locked of this EventSeriesSummaryV1.

        Boolean that indicates whether an SLA Domain is Retention Locked. When the value is true the SLA Domain is a Retention Lock SLA Domain.

        :return: The is_sla_retention_locked of this EventSeriesSummaryV1.
        :rtype: bool
        """
        return self._is_sla_retention_locked

    @is_sla_retention_locked.setter
    def is_sla_retention_locked(self, is_sla_retention_locked):
        """Sets the is_sla_retention_locked of this EventSeriesSummaryV1.

        Boolean that indicates whether an SLA Domain is Retention Locked. When the value is true the SLA Domain is a Retention Lock SLA Domain.

        :param is_sla_retention_locked: The is_sla_retention_locked of this EventSeriesSummaryV1.
        :type is_sla_retention_locked: bool
        """

        self._is_sla_retention_locked = is_sla_retention_locked

    @property
    def location(self):
        """Gets the location of this EventSeriesSummaryV1.

        The host of the object associated with the latest event.

        :return: The location of this EventSeriesSummaryV1.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this EventSeriesSummaryV1.

        The host of the object associated with the latest event.

        :param location: The location of this EventSeriesSummaryV1.
        :type location: str
        """

        self._location = location

    @property
    def logical_size(self):
        """Gets the logical_size of this EventSeriesSummaryV1.

        The logical size of the object related to the event series.

        :return: The logical_size of this EventSeriesSummaryV1.
        :rtype: int
        """
        return self._logical_size

    @logical_size.setter
    def logical_size(self, logical_size):
        """Sets the logical_size of this EventSeriesSummaryV1.

        The logical size of the object related to the event series.

        :param logical_size: The logical_size of this EventSeriesSummaryV1.
        :type logical_size: int
        """

        self._logical_size = logical_size

    @property
    def node_ids(self):
        """Gets the node_ids of this EventSeriesSummaryV1.

        The IDs of the nodes where the job associated with the event is running.

        :return: The node_ids of this EventSeriesSummaryV1.
        :rtype: str
        """
        return self._node_ids

    @node_ids.setter
    def node_ids(self, node_ids):
        """Sets the node_ids of this EventSeriesSummaryV1.

        The IDs of the nodes where the job associated with the event is running.

        :param node_ids: The node_ids of this EventSeriesSummaryV1.
        :type node_ids: str
        """

        self._node_ids = node_ids

    @property
    def number_of_retries(self):
        """Gets the number_of_retries of this EventSeriesSummaryV1.

        The number of times the job has been retried.

        :return: The number_of_retries of this EventSeriesSummaryV1.
        :rtype: int
        """
        return self._number_of_retries

    @number_of_retries.setter
    def number_of_retries(self, number_of_retries):
        """Sets the number_of_retries of this EventSeriesSummaryV1.

        The number of times the job has been retried.

        :param number_of_retries: The number_of_retries of this EventSeriesSummaryV1.
        :type number_of_retries: int
        """

        self._number_of_retries = number_of_retries

    @property
    def object_id(self):
        """Gets the object_id of this EventSeriesSummaryV1.

        The ID of the object associated with the latest event.

        :return: The object_id of this EventSeriesSummaryV1.
        :rtype: str
        """
        return self._object_id

    @object_id.setter
    def object_id(self, object_id):
        """Sets the object_id of this EventSeriesSummaryV1.

        The ID of the object associated with the latest event.

        :param object_id: The object_id of this EventSeriesSummaryV1.
        :type object_id: str
        """

        self._object_id = object_id

    @property
    def object_name(self):
        """Gets the object_name of this EventSeriesSummaryV1.

        The name of the object associated with the latest event.

        :return: The object_name of this EventSeriesSummaryV1.
        :rtype: str
        """
        return self._object_name

    @object_name.setter
    def object_name(self, object_name):
        """Sets the object_name of this EventSeriesSummaryV1.

        The name of the object associated with the latest event.

        :param object_name: The object_name of this EventSeriesSummaryV1.
        :type object_name: str
        """

        self._object_name = object_name

    @property
    def object_type(self):
        """Gets the object_type of this EventSeriesSummaryV1.


        :return: The object_type of this EventSeriesSummaryV1.
        :rtype: ObjectTypeV1
        """
        return self._object_type

    @object_type.setter
    def object_type(self, object_type):
        """Sets the object_type of this EventSeriesSummaryV1.


        :param object_type: The object_type of this EventSeriesSummaryV1.
        :type object_type: ObjectTypeV1
        """

        self._object_type = object_type

    @property
    def progress_percentage(self):
        """Gets the progress_percentage of this EventSeriesSummaryV1.

        The progress percentage of the event series.

        :return: The progress_percentage of this EventSeriesSummaryV1.
        :rtype: str
        """
        return self._progress_percentage

    @progress_percentage.setter
    def progress_percentage(self, progress_percentage):
        """Sets the progress_percentage of this EventSeriesSummaryV1.

        The progress percentage of the event series.

        :param progress_percentage: The progress_percentage of this EventSeriesSummaryV1.
        :type progress_percentage: str
        """

        self._progress_percentage = progress_percentage

    @property
    def remote_cluster_name(self):
        """Gets the remote_cluster_name of this EventSeriesSummaryV1.

        The name of the remote cluster related to the replication task.

        :return: The remote_cluster_name of this EventSeriesSummaryV1.
        :rtype: str
        """
        return self._remote_cluster_name

    @remote_cluster_name.setter
    def remote_cluster_name(self, remote_cluster_name):
        """Sets the remote_cluster_name of this EventSeriesSummaryV1.

        The name of the remote cluster related to the replication task.

        :param remote_cluster_name: The remote_cluster_name of this EventSeriesSummaryV1.
        :type remote_cluster_name: str
        """

        self._remote_cluster_name = remote_cluster_name

    @property
    def sla_id(self):
        """Gets the sla_id of this EventSeriesSummaryV1.

        The ID of the SLA Domain associated with this job.

        :return: The sla_id of this EventSeriesSummaryV1.
        :rtype: str
        """
        return self._sla_id

    @sla_id.setter
    def sla_id(self, sla_id):
        """Sets the sla_id of this EventSeriesSummaryV1.

        The ID of the SLA Domain associated with this job.

        :param sla_id: The sla_id of this EventSeriesSummaryV1.
        :type sla_id: str
        """

        self._sla_id = sla_id

    @property
    def sla_name(self):
        """Gets the sla_name of this EventSeriesSummaryV1.

        The name of the SLA Domain associated with the job, if any. This field is empty for jobs that are not driven by a SLA Domain.

        :return: The sla_name of this EventSeriesSummaryV1.
        :rtype: str
        """
        return self._sla_name

    @sla_name.setter
    def sla_name(self, sla_name):
        """Sets the sla_name of this EventSeriesSummaryV1.

        The name of the SLA Domain associated with the job, if any. This field is empty for jobs that are not driven by a SLA Domain.

        :param sla_name: The sla_name of this EventSeriesSummaryV1.
        :type sla_name: str
        """

        self._sla_name = sla_name

    @property
    def start_time(self):
        """Gets the start_time of this EventSeriesSummaryV1.

        The time when the job started. Only applicable to the event series that correspond to a job.

        :return: The start_time of this EventSeriesSummaryV1.
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this EventSeriesSummaryV1.

        The time when the job started. Only applicable to the event series that correspond to a job.

        :param start_time: The start_time of this EventSeriesSummaryV1.
        :type start_time: datetime
        """

        self._start_time = start_time

    @property
    def status(self):
        """Gets the status of this EventSeriesSummaryV1.


        :return: The status of this EventSeriesSummaryV1.
        :rtype: EventStatusV1
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this EventSeriesSummaryV1.


        :param status: The status of this EventSeriesSummaryV1.
        :type status: EventStatusV1
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status

    @property
    def task_type(self):
        """Gets the task_type of this EventSeriesSummaryV1.

        Type of the event series. Matches the event type. 

        :return: The task_type of this EventSeriesSummaryV1.
        :rtype: str
        """
        return self._task_type

    @task_type.setter
    def task_type(self, task_type):
        """Sets the task_type of this EventSeriesSummaryV1.

        Type of the event series. Matches the event type. 

        :param task_type: The task_type of this EventSeriesSummaryV1.
        :type task_type: str
        """
        if task_type is None:
            raise ValueError("Invalid value for `task_type`, must not be `None`")

        self._task_type = task_type

    @property
    def throughput(self):
        """Gets the throughput of this EventSeriesSummaryV1.

        The average rate of data transfer, measured in bytes per second. This rate is the total amount of data transferred divided by the total time required by the transfer.

        :return: The throughput of this EventSeriesSummaryV1.
        :rtype: int
        """
        return self._throughput

    @throughput.setter
    def throughput(self, throughput):
        """Sets the throughput of this EventSeriesSummaryV1.

        The average rate of data transfer, measured in bytes per second. This rate is the total amount of data transferred divided by the total time required by the transfer.

        :param throughput: The throughput of this EventSeriesSummaryV1.
        :type throughput: int
        """

        self._throughput = throughput

    @property
    def username(self):
        """Gets the username of this EventSeriesSummaryV1.

        The username of the user-initiated job. This field is empty for jobs that are not user-initiated.

        :return: The username of this EventSeriesSummaryV1.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this EventSeriesSummaryV1.

        The username of the user-initiated job. This field is empty for jobs that are not user-initiated.

        :param username: The username of this EventSeriesSummaryV1.
        :type username: str
        """

        self._username = username
