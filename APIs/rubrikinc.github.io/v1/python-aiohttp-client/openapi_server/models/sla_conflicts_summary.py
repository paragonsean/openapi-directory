# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.managed_hierarchy_object_summary import ManagedHierarchyObjectSummary
from openapi_server import util


class SlaConflictsSummary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, conflicts: List[ManagedHierarchyObjectSummary]=None, id: str=None, is_possibly_inconsistent: bool=None):
        """SlaConflictsSummary - a model defined in OpenAPI

        :param conflicts: The conflicts of this SlaConflictsSummary.
        :param id: The id of this SlaConflictsSummary.
        :param is_possibly_inconsistent: The is_possibly_inconsistent of this SlaConflictsSummary.
        """
        self.openapi_types = {
            'conflicts': List[ManagedHierarchyObjectSummary],
            'id': str,
            'is_possibly_inconsistent': bool
        }

        self.attribute_map = {
            'conflicts': 'conflicts',
            'id': 'id',
            'is_possibly_inconsistent': 'isPossiblyInconsistent'
        }

        self._conflicts = conflicts
        self._id = id
        self._is_possibly_inconsistent = is_possibly_inconsistent

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SlaConflictsSummary':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SlaConflictsSummary of this SlaConflictsSummary.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def conflicts(self):
        """Gets the conflicts of this SlaConflictsSummary.


        :return: The conflicts of this SlaConflictsSummary.
        :rtype: List[ManagedHierarchyObjectSummary]
        """
        return self._conflicts

    @conflicts.setter
    def conflicts(self, conflicts):
        """Sets the conflicts of this SlaConflictsSummary.


        :param conflicts: The conflicts of this SlaConflictsSummary.
        :type conflicts: List[ManagedHierarchyObjectSummary]
        """
        if conflicts is None:
            raise ValueError("Invalid value for `conflicts`, must not be `None`")

        self._conflicts = conflicts

    @property
    def id(self):
        """Gets the id of this SlaConflictsSummary.

        managedId.

        :return: The id of this SlaConflictsSummary.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SlaConflictsSummary.

        managedId.

        :param id: The id of this SlaConflictsSummary.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def is_possibly_inconsistent(self):
        """Gets the is_possibly_inconsistent of this SlaConflictsSummary.

        Indicates if the results returned are inconsistent due to an ongoing SLA assignment operation within this object's hierarchy. This endpoint does not consider the results of in flight SLA operations since they have not yet completed. Because the results may change once the operation completes, Rubrik advises waiting until all SLA assignments have completed on this hierarchy before reassigning, unless changing the childrens' SLAs directly with this assignment is unacceptable. 

        :return: The is_possibly_inconsistent of this SlaConflictsSummary.
        :rtype: bool
        """
        return self._is_possibly_inconsistent

    @is_possibly_inconsistent.setter
    def is_possibly_inconsistent(self, is_possibly_inconsistent):
        """Sets the is_possibly_inconsistent of this SlaConflictsSummary.

        Indicates if the results returned are inconsistent due to an ongoing SLA assignment operation within this object's hierarchy. This endpoint does not consider the results of in flight SLA operations since they have not yet completed. Because the results may change once the operation completes, Rubrik advises waiting until all SLA assignments have completed on this hierarchy before reassigning, unless changing the childrens' SLAs directly with this assignment is unacceptable. 

        :param is_possibly_inconsistent: The is_possibly_inconsistent of this SlaConflictsSummary.
        :type is_possibly_inconsistent: bool
        """
        if is_possibly_inconsistent is None:
            raise ValueError("Invalid value for `is_possibly_inconsistent`, must not be `None`")

        self._is_possibly_inconsistent = is_possibly_inconsistent
