# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DiscoveredNasShare(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, export_point: str=None, share_type: str=None):
        """DiscoveredNasShare - a model defined in OpenAPI

        :param export_point: The export_point of this DiscoveredNasShare.
        :param share_type: The share_type of this DiscoveredNasShare.
        """
        self.openapi_types = {
            'export_point': str,
            'share_type': str
        }

        self.attribute_map = {
            'export_point': 'exportPoint',
            'share_type': 'shareType'
        }

        self._export_point = export_point
        self._share_type = share_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DiscoveredNasShare':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DiscoveredNasShare of this DiscoveredNasShare.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def export_point(self):
        """Gets the export_point of this DiscoveredNasShare.

        The NFS export point or SMB share name for the NAS share.

        :return: The export_point of this DiscoveredNasShare.
        :rtype: str
        """
        return self._export_point

    @export_point.setter
    def export_point(self, export_point):
        """Sets the export_point of this DiscoveredNasShare.

        The NFS export point or SMB share name for the NAS share.

        :param export_point: The export_point of this DiscoveredNasShare.
        :type export_point: str
        """
        if export_point is None:
            raise ValueError("Invalid value for `export_point`, must not be `None`")

        self._export_point = export_point

    @property
    def share_type(self):
        """Gets the share_type of this DiscoveredNasShare.

        The type of NAS Share.

        :return: The share_type of this DiscoveredNasShare.
        :rtype: str
        """
        return self._share_type

    @share_type.setter
    def share_type(self, share_type):
        """Sets the share_type of this DiscoveredNasShare.

        The type of NAS Share.

        :param share_type: The share_type of this DiscoveredNasShare.
        :type share_type: str
        """
        allowed_values = ["NFS", "SMB"]  # noqa: E501
        if share_type not in allowed_values:
            raise ValueError(
                "Invalid value for `share_type` ({0}), must be one of {1}"
                .format(share_type, allowed_values)
            )

        self._share_type = share_type
