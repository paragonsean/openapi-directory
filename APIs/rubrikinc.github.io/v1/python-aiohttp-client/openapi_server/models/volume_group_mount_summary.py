# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.volume_group_release_version import VolumeGroupReleaseVersion
from openapi_server.models.volume_mount_info import VolumeMountInfo
from openapi_server import util


class VolumeGroupMountSummary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, can_unmount: bool=None, id: str=None, is_ready: bool=None, mount_request_id: str=None, mounted_date: datetime=None, mounted_volumes: List[VolumeMountInfo]=None, name: str=None, restore_script_smb_path: str=None, snapshot_date: datetime=None, snapshot_source_version: VolumeGroupReleaseVersion=None, source_host_id: str=None, source_host_name: str=None, source_volume_group_id: str=None, target_host_id: str=None, target_host_name: str=None, unmount_request_id: str=None):
        """VolumeGroupMountSummary - a model defined in OpenAPI

        :param can_unmount: The can_unmount of this VolumeGroupMountSummary.
        :param id: The id of this VolumeGroupMountSummary.
        :param is_ready: The is_ready of this VolumeGroupMountSummary.
        :param mount_request_id: The mount_request_id of this VolumeGroupMountSummary.
        :param mounted_date: The mounted_date of this VolumeGroupMountSummary.
        :param mounted_volumes: The mounted_volumes of this VolumeGroupMountSummary.
        :param name: The name of this VolumeGroupMountSummary.
        :param restore_script_smb_path: The restore_script_smb_path of this VolumeGroupMountSummary.
        :param snapshot_date: The snapshot_date of this VolumeGroupMountSummary.
        :param snapshot_source_version: The snapshot_source_version of this VolumeGroupMountSummary.
        :param source_host_id: The source_host_id of this VolumeGroupMountSummary.
        :param source_host_name: The source_host_name of this VolumeGroupMountSummary.
        :param source_volume_group_id: The source_volume_group_id of this VolumeGroupMountSummary.
        :param target_host_id: The target_host_id of this VolumeGroupMountSummary.
        :param target_host_name: The target_host_name of this VolumeGroupMountSummary.
        :param unmount_request_id: The unmount_request_id of this VolumeGroupMountSummary.
        """
        self.openapi_types = {
            'can_unmount': bool,
            'id': str,
            'is_ready': bool,
            'mount_request_id': str,
            'mounted_date': datetime,
            'mounted_volumes': List[VolumeMountInfo],
            'name': str,
            'restore_script_smb_path': str,
            'snapshot_date': datetime,
            'snapshot_source_version': VolumeGroupReleaseVersion,
            'source_host_id': str,
            'source_host_name': str,
            'source_volume_group_id': str,
            'target_host_id': str,
            'target_host_name': str,
            'unmount_request_id': str
        }

        self.attribute_map = {
            'can_unmount': 'canUnmount',
            'id': 'id',
            'is_ready': 'isReady',
            'mount_request_id': 'mountRequestId',
            'mounted_date': 'mountedDate',
            'mounted_volumes': 'mountedVolumes',
            'name': 'name',
            'restore_script_smb_path': 'restoreScriptSmbPath',
            'snapshot_date': 'snapshotDate',
            'snapshot_source_version': 'snapshotSourceVersion',
            'source_host_id': 'sourceHostId',
            'source_host_name': 'sourceHostName',
            'source_volume_group_id': 'sourceVolumeGroupId',
            'target_host_id': 'targetHostId',
            'target_host_name': 'targetHostName',
            'unmount_request_id': 'unmountRequestId'
        }

        self._can_unmount = can_unmount
        self._id = id
        self._is_ready = is_ready
        self._mount_request_id = mount_request_id
        self._mounted_date = mounted_date
        self._mounted_volumes = mounted_volumes
        self._name = name
        self._restore_script_smb_path = restore_script_smb_path
        self._snapshot_date = snapshot_date
        self._snapshot_source_version = snapshot_source_version
        self._source_host_id = source_host_id
        self._source_host_name = source_host_name
        self._source_volume_group_id = source_volume_group_id
        self._target_host_id = target_host_id
        self._target_host_name = target_host_name
        self._unmount_request_id = unmount_request_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VolumeGroupMountSummary':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VolumeGroupMountSummary of this VolumeGroupMountSummary.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def can_unmount(self):
        """Gets the can_unmount of this VolumeGroupMountSummary.

        Indicates if the logged-in user has the authority to remove the specified mount.

        :return: The can_unmount of this VolumeGroupMountSummary.
        :rtype: bool
        """
        return self._can_unmount

    @can_unmount.setter
    def can_unmount(self, can_unmount):
        """Sets the can_unmount of this VolumeGroupMountSummary.

        Indicates if the logged-in user has the authority to remove the specified mount.

        :param can_unmount: The can_unmount of this VolumeGroupMountSummary.
        :type can_unmount: bool
        """

        self._can_unmount = can_unmount

    @property
    def id(self):
        """Gets the id of this VolumeGroupMountSummary.

        The unique ID of the mount.

        :return: The id of this VolumeGroupMountSummary.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this VolumeGroupMountSummary.

        The unique ID of the mount.

        :param id: The id of this VolumeGroupMountSummary.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def is_ready(self):
        """Gets the is_ready of this VolumeGroupMountSummary.

        Specifies whether the volume mount operation has successfully completed and is ready to use.

        :return: The is_ready of this VolumeGroupMountSummary.
        :rtype: bool
        """
        return self._is_ready

    @is_ready.setter
    def is_ready(self, is_ready):
        """Sets the is_ready of this VolumeGroupMountSummary.

        Specifies whether the volume mount operation has successfully completed and is ready to use.

        :param is_ready: The is_ready of this VolumeGroupMountSummary.
        :type is_ready: bool
        """
        if is_ready is None:
            raise ValueError("Invalid value for `is_ready`, must not be `None`")

        self._is_ready = is_ready

    @property
    def mount_request_id(self):
        """Gets the mount_request_id of this VolumeGroupMountSummary.

        The ID of the job instance that initiated the request for the specified mount.

        :return: The mount_request_id of this VolumeGroupMountSummary.
        :rtype: str
        """
        return self._mount_request_id

    @mount_request_id.setter
    def mount_request_id(self, mount_request_id):
        """Sets the mount_request_id of this VolumeGroupMountSummary.

        The ID of the job instance that initiated the request for the specified mount.

        :param mount_request_id: The mount_request_id of this VolumeGroupMountSummary.
        :type mount_request_id: str
        """

        self._mount_request_id = mount_request_id

    @property
    def mounted_date(self):
        """Gets the mounted_date of this VolumeGroupMountSummary.

        The UTC timestamp at which the mount was created.

        :return: The mounted_date of this VolumeGroupMountSummary.
        :rtype: datetime
        """
        return self._mounted_date

    @mounted_date.setter
    def mounted_date(self, mounted_date):
        """Sets the mounted_date of this VolumeGroupMountSummary.

        The UTC timestamp at which the mount was created.

        :param mounted_date: The mounted_date of this VolumeGroupMountSummary.
        :type mounted_date: datetime
        """
        if mounted_date is None:
            raise ValueError("Invalid value for `mounted_date`, must not be `None`")

        self._mounted_date = mounted_date

    @property
    def mounted_volumes(self):
        """Gets the mounted_volumes of this VolumeGroupMountSummary.

        Configuration details for each of the mounted Volumes in the Volume Group.

        :return: The mounted_volumes of this VolumeGroupMountSummary.
        :rtype: List[VolumeMountInfo]
        """
        return self._mounted_volumes

    @mounted_volumes.setter
    def mounted_volumes(self, mounted_volumes):
        """Sets the mounted_volumes of this VolumeGroupMountSummary.

        Configuration details for each of the mounted Volumes in the Volume Group.

        :param mounted_volumes: The mounted_volumes of this VolumeGroupMountSummary.
        :type mounted_volumes: List[VolumeMountInfo]
        """
        if mounted_volumes is None:
            raise ValueError("Invalid value for `mounted_volumes`, must not be `None`")

        self._mounted_volumes = mounted_volumes

    @property
    def name(self):
        """Gets the name of this VolumeGroupMountSummary.

        The name of the Volume Group.

        :return: The name of this VolumeGroupMountSummary.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this VolumeGroupMountSummary.

        The name of the Volume Group.

        :param name: The name of this VolumeGroupMountSummary.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def restore_script_smb_path(self):
        """Gets the restore_script_smb_path of this VolumeGroupMountSummary.

        The link to the script that can perform bare-metal recovery for the mounted snapshot.

        :return: The restore_script_smb_path of this VolumeGroupMountSummary.
        :rtype: str
        """
        return self._restore_script_smb_path

    @restore_script_smb_path.setter
    def restore_script_smb_path(self, restore_script_smb_path):
        """Sets the restore_script_smb_path of this VolumeGroupMountSummary.

        The link to the script that can perform bare-metal recovery for the mounted snapshot.

        :param restore_script_smb_path: The restore_script_smb_path of this VolumeGroupMountSummary.
        :type restore_script_smb_path: str
        """

        self._restore_script_smb_path = restore_script_smb_path

    @property
    def snapshot_date(self):
        """Gets the snapshot_date of this VolumeGroupMountSummary.

        The UTC timestamp at which the snapshot was originally taken.

        :return: The snapshot_date of this VolumeGroupMountSummary.
        :rtype: datetime
        """
        return self._snapshot_date

    @snapshot_date.setter
    def snapshot_date(self, snapshot_date):
        """Sets the snapshot_date of this VolumeGroupMountSummary.

        The UTC timestamp at which the snapshot was originally taken.

        :param snapshot_date: The snapshot_date of this VolumeGroupMountSummary.
        :type snapshot_date: datetime
        """
        if snapshot_date is None:
            raise ValueError("Invalid value for `snapshot_date`, must not be `None`")

        self._snapshot_date = snapshot_date

    @property
    def snapshot_source_version(self):
        """Gets the snapshot_source_version of this VolumeGroupMountSummary.


        :return: The snapshot_source_version of this VolumeGroupMountSummary.
        :rtype: VolumeGroupReleaseVersion
        """
        return self._snapshot_source_version

    @snapshot_source_version.setter
    def snapshot_source_version(self, snapshot_source_version):
        """Sets the snapshot_source_version of this VolumeGroupMountSummary.


        :param snapshot_source_version: The snapshot_source_version of this VolumeGroupMountSummary.
        :type snapshot_source_version: VolumeGroupReleaseVersion
        """
        if snapshot_source_version is None:
            raise ValueError("Invalid value for `snapshot_source_version`, must not be `None`")

        self._snapshot_source_version = snapshot_source_version

    @property
    def source_host_id(self):
        """Gets the source_host_id of this VolumeGroupMountSummary.

        The ID of the Host on which the snapshot was originally taken.

        :return: The source_host_id of this VolumeGroupMountSummary.
        :rtype: str
        """
        return self._source_host_id

    @source_host_id.setter
    def source_host_id(self, source_host_id):
        """Sets the source_host_id of this VolumeGroupMountSummary.

        The ID of the Host on which the snapshot was originally taken.

        :param source_host_id: The source_host_id of this VolumeGroupMountSummary.
        :type source_host_id: str
        """
        if source_host_id is None:
            raise ValueError("Invalid value for `source_host_id`, must not be `None`")

        self._source_host_id = source_host_id

    @property
    def source_host_name(self):
        """Gets the source_host_name of this VolumeGroupMountSummary.

        The name of the Host on which the snapshot was originally taken.

        :return: The source_host_name of this VolumeGroupMountSummary.
        :rtype: str
        """
        return self._source_host_name

    @source_host_name.setter
    def source_host_name(self, source_host_name):
        """Sets the source_host_name of this VolumeGroupMountSummary.

        The name of the Host on which the snapshot was originally taken.

        :param source_host_name: The source_host_name of this VolumeGroupMountSummary.
        :type source_host_name: str
        """
        if source_host_name is None:
            raise ValueError("Invalid value for `source_host_name`, must not be `None`")

        self._source_host_name = source_host_name

    @property
    def source_volume_group_id(self):
        """Gets the source_volume_group_id of this VolumeGroupMountSummary.

        The ID of the Volume Group from which this snapshot was created.

        :return: The source_volume_group_id of this VolumeGroupMountSummary.
        :rtype: str
        """
        return self._source_volume_group_id

    @source_volume_group_id.setter
    def source_volume_group_id(self, source_volume_group_id):
        """Sets the source_volume_group_id of this VolumeGroupMountSummary.

        The ID of the Volume Group from which this snapshot was created.

        :param source_volume_group_id: The source_volume_group_id of this VolumeGroupMountSummary.
        :type source_volume_group_id: str
        """
        if source_volume_group_id is None:
            raise ValueError("Invalid value for `source_volume_group_id`, must not be `None`")

        self._source_volume_group_id = source_volume_group_id

    @property
    def target_host_id(self):
        """Gets the target_host_id of this VolumeGroupMountSummary.

        The ID of the host where the volumes are mounted.

        :return: The target_host_id of this VolumeGroupMountSummary.
        :rtype: str
        """
        return self._target_host_id

    @target_host_id.setter
    def target_host_id(self, target_host_id):
        """Sets the target_host_id of this VolumeGroupMountSummary.

        The ID of the host where the volumes are mounted.

        :param target_host_id: The target_host_id of this VolumeGroupMountSummary.
        :type target_host_id: str
        """

        self._target_host_id = target_host_id

    @property
    def target_host_name(self):
        """Gets the target_host_name of this VolumeGroupMountSummary.

        The name of the host where the volumes are mounted.

        :return: The target_host_name of this VolumeGroupMountSummary.
        :rtype: str
        """
        return self._target_host_name

    @target_host_name.setter
    def target_host_name(self, target_host_name):
        """Sets the target_host_name of this VolumeGroupMountSummary.

        The name of the host where the volumes are mounted.

        :param target_host_name: The target_host_name of this VolumeGroupMountSummary.
        :type target_host_name: str
        """

        self._target_host_name = target_host_name

    @property
    def unmount_request_id(self):
        """Gets the unmount_request_id of this VolumeGroupMountSummary.

        The ID of the job instance that initiated the request to remove the specified mount.

        :return: The unmount_request_id of this VolumeGroupMountSummary.
        :rtype: str
        """
        return self._unmount_request_id

    @unmount_request_id.setter
    def unmount_request_id(self, unmount_request_id):
        """Sets the unmount_request_id of this VolumeGroupMountSummary.

        The ID of the job instance that initiated the request to remove the specified mount.

        :param unmount_request_id: The unmount_request_id of this VolumeGroupMountSummary.
        :type unmount_request_id: str
        """

        self._unmount_request_id = unmount_request_id
