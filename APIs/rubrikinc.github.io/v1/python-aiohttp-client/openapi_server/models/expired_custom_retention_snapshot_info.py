# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ExpiredCustomRetentionSnapshotInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, birth_sla_domain_name: str=None, global_expiration_date: datetime=None, id: str=None, last_sla_domain_name: str=None, snapshot_date: datetime=None):
        """ExpiredCustomRetentionSnapshotInfo - a model defined in OpenAPI

        :param birth_sla_domain_name: The birth_sla_domain_name of this ExpiredCustomRetentionSnapshotInfo.
        :param global_expiration_date: The global_expiration_date of this ExpiredCustomRetentionSnapshotInfo.
        :param id: The id of this ExpiredCustomRetentionSnapshotInfo.
        :param last_sla_domain_name: The last_sla_domain_name of this ExpiredCustomRetentionSnapshotInfo.
        :param snapshot_date: The snapshot_date of this ExpiredCustomRetentionSnapshotInfo.
        """
        self.openapi_types = {
            'birth_sla_domain_name': str,
            'global_expiration_date': datetime,
            'id': str,
            'last_sla_domain_name': str,
            'snapshot_date': datetime
        }

        self.attribute_map = {
            'birth_sla_domain_name': 'birthSlaDomainName',
            'global_expiration_date': 'globalExpirationDate',
            'id': 'id',
            'last_sla_domain_name': 'lastSlaDomainName',
            'snapshot_date': 'snapshotDate'
        }

        self._birth_sla_domain_name = birth_sla_domain_name
        self._global_expiration_date = global_expiration_date
        self._id = id
        self._last_sla_domain_name = last_sla_domain_name
        self._snapshot_date = snapshot_date

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ExpiredCustomRetentionSnapshotInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ExpiredCustomRetentionSnapshotInfo of this ExpiredCustomRetentionSnapshotInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def birth_sla_domain_name(self):
        """Gets the birth_sla_domain_name of this ExpiredCustomRetentionSnapshotInfo.

        The SLA Domain in effect at the time the snapshot was taken. Identical to the SLA Domain assigned to the data source at that time. 

        :return: The birth_sla_domain_name of this ExpiredCustomRetentionSnapshotInfo.
        :rtype: str
        """
        return self._birth_sla_domain_name

    @birth_sla_domain_name.setter
    def birth_sla_domain_name(self, birth_sla_domain_name):
        """Sets the birth_sla_domain_name of this ExpiredCustomRetentionSnapshotInfo.

        The SLA Domain in effect at the time the snapshot was taken. Identical to the SLA Domain assigned to the data source at that time. 

        :param birth_sla_domain_name: The birth_sla_domain_name of this ExpiredCustomRetentionSnapshotInfo.
        :type birth_sla_domain_name: str
        """
        if birth_sla_domain_name is None:
            raise ValueError("Invalid value for `birth_sla_domain_name`, must not be `None`")

        self._birth_sla_domain_name = birth_sla_domain_name

    @property
    def global_expiration_date(self):
        """Gets the global_expiration_date of this ExpiredCustomRetentionSnapshotInfo.

        Timestamp that indicates when the snapshot expires from all cluster-managed locations. 

        :return: The global_expiration_date of this ExpiredCustomRetentionSnapshotInfo.
        :rtype: datetime
        """
        return self._global_expiration_date

    @global_expiration_date.setter
    def global_expiration_date(self, global_expiration_date):
        """Sets the global_expiration_date of this ExpiredCustomRetentionSnapshotInfo.

        Timestamp that indicates when the snapshot expires from all cluster-managed locations. 

        :param global_expiration_date: The global_expiration_date of this ExpiredCustomRetentionSnapshotInfo.
        :type global_expiration_date: datetime
        """
        if global_expiration_date is None:
            raise ValueError("Invalid value for `global_expiration_date`, must not be `None`")

        self._global_expiration_date = global_expiration_date

    @property
    def id(self):
        """Gets the id of this ExpiredCustomRetentionSnapshotInfo.

        The snapshot ID.

        :return: The id of this ExpiredCustomRetentionSnapshotInfo.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ExpiredCustomRetentionSnapshotInfo.

        The snapshot ID.

        :param id: The id of this ExpiredCustomRetentionSnapshotInfo.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def last_sla_domain_name(self):
        """Gets the last_sla_domain_name of this ExpiredCustomRetentionSnapshotInfo.

        The most recent SLA Domain assigned to the snapshot. Snapshots expire based on the last known configuration for the assigned SLA Domain. 

        :return: The last_sla_domain_name of this ExpiredCustomRetentionSnapshotInfo.
        :rtype: str
        """
        return self._last_sla_domain_name

    @last_sla_domain_name.setter
    def last_sla_domain_name(self, last_sla_domain_name):
        """Sets the last_sla_domain_name of this ExpiredCustomRetentionSnapshotInfo.

        The most recent SLA Domain assigned to the snapshot. Snapshots expire based on the last known configuration for the assigned SLA Domain. 

        :param last_sla_domain_name: The last_sla_domain_name of this ExpiredCustomRetentionSnapshotInfo.
        :type last_sla_domain_name: str
        """
        if last_sla_domain_name is None:
            raise ValueError("Invalid value for `last_sla_domain_name`, must not be `None`")

        self._last_sla_domain_name = last_sla_domain_name

    @property
    def snapshot_date(self):
        """Gets the snapshot_date of this ExpiredCustomRetentionSnapshotInfo.

        Creation timestamp for the snapshot.

        :return: The snapshot_date of this ExpiredCustomRetentionSnapshotInfo.
        :rtype: datetime
        """
        return self._snapshot_date

    @snapshot_date.setter
    def snapshot_date(self, snapshot_date):
        """Sets the snapshot_date of this ExpiredCustomRetentionSnapshotInfo.

        Creation timestamp for the snapshot.

        :param snapshot_date: The snapshot_date of this ExpiredCustomRetentionSnapshotInfo.
        :type snapshot_date: datetime
        """
        if snapshot_date is None:
            raise ValueError("Invalid value for `snapshot_date`, must not be `None`")

        self._snapshot_date = snapshot_date
