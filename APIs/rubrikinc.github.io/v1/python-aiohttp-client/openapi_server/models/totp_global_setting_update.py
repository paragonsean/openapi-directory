# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TotpGlobalSettingUpdate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, is_enforced: bool=None):
        """TotpGlobalSettingUpdate - a model defined in OpenAPI

        :param is_enforced: The is_enforced of this TotpGlobalSettingUpdate.
        """
        self.openapi_types = {
            'is_enforced': bool
        }

        self.attribute_map = {
            'is_enforced': 'isEnforced'
        }

        self._is_enforced = is_enforced

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TotpGlobalSettingUpdate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TotpGlobalSettingUpdate of this TotpGlobalSettingUpdate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def is_enforced(self):
        """Gets the is_enforced of this TotpGlobalSettingUpdate.

        Indicates whether the TOTP is enforced globally or not.

        :return: The is_enforced of this TotpGlobalSettingUpdate.
        :rtype: bool
        """
        return self._is_enforced

    @is_enforced.setter
    def is_enforced(self, is_enforced):
        """Sets the is_enforced of this TotpGlobalSettingUpdate.

        Indicates whether the TOTP is enforced globally or not.

        :param is_enforced: The is_enforced of this TotpGlobalSettingUpdate.
        :type is_enforced: bool
        """
        if is_enforced is None:
            raise ValueError("Invalid value for `is_enforced`, must not be `None`")

        self._is_enforced = is_enforced
