# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.mssql_batch_backup_canceled_summary import MssqlBatchBackupCanceledSummary
from openapi_server.models.mssql_batch_backup_failure_summary import MssqlBatchBackupFailureSummary
from openapi_server.models.mssql_batch_backup_success_summary import MssqlBatchBackupSuccessSummary
from openapi_server import util


class MssqlBatchBackupSummary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, canceled_snapshots: List[MssqlBatchBackupCanceledSummary]=None, failed_snapshots: List[MssqlBatchBackupFailureSummary]=None, id: str=None, successful_snapshots: List[MssqlBatchBackupSuccessSummary]=None):
        """MssqlBatchBackupSummary - a model defined in OpenAPI

        :param canceled_snapshots: The canceled_snapshots of this MssqlBatchBackupSummary.
        :param failed_snapshots: The failed_snapshots of this MssqlBatchBackupSummary.
        :param id: The id of this MssqlBatchBackupSummary.
        :param successful_snapshots: The successful_snapshots of this MssqlBatchBackupSummary.
        """
        self.openapi_types = {
            'canceled_snapshots': List[MssqlBatchBackupCanceledSummary],
            'failed_snapshots': List[MssqlBatchBackupFailureSummary],
            'id': str,
            'successful_snapshots': List[MssqlBatchBackupSuccessSummary]
        }

        self.attribute_map = {
            'canceled_snapshots': 'canceledSnapshots',
            'failed_snapshots': 'failedSnapshots',
            'id': 'id',
            'successful_snapshots': 'successfulSnapshots'
        }

        self._canceled_snapshots = canceled_snapshots
        self._failed_snapshots = failed_snapshots
        self._id = id
        self._successful_snapshots = successful_snapshots

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MssqlBatchBackupSummary':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MssqlBatchBackupSummary of this MssqlBatchBackupSummary.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def canceled_snapshots(self):
        """Gets the canceled_snapshots of this MssqlBatchBackupSummary.

        List of summary information for each canceled snapshot.

        :return: The canceled_snapshots of this MssqlBatchBackupSummary.
        :rtype: List[MssqlBatchBackupCanceledSummary]
        """
        return self._canceled_snapshots

    @canceled_snapshots.setter
    def canceled_snapshots(self, canceled_snapshots):
        """Sets the canceled_snapshots of this MssqlBatchBackupSummary.

        List of summary information for each canceled snapshot.

        :param canceled_snapshots: The canceled_snapshots of this MssqlBatchBackupSummary.
        :type canceled_snapshots: List[MssqlBatchBackupCanceledSummary]
        """
        if canceled_snapshots is None:
            raise ValueError("Invalid value for `canceled_snapshots`, must not be `None`")

        self._canceled_snapshots = canceled_snapshots

    @property
    def failed_snapshots(self):
        """Gets the failed_snapshots of this MssqlBatchBackupSummary.

        List of summary information for each failed snapshot.

        :return: The failed_snapshots of this MssqlBatchBackupSummary.
        :rtype: List[MssqlBatchBackupFailureSummary]
        """
        return self._failed_snapshots

    @failed_snapshots.setter
    def failed_snapshots(self, failed_snapshots):
        """Sets the failed_snapshots of this MssqlBatchBackupSummary.

        List of summary information for each failed snapshot.

        :param failed_snapshots: The failed_snapshots of this MssqlBatchBackupSummary.
        :type failed_snapshots: List[MssqlBatchBackupFailureSummary]
        """
        if failed_snapshots is None:
            raise ValueError("Invalid value for `failed_snapshots`, must not be `None`")

        self._failed_snapshots = failed_snapshots

    @property
    def id(self):
        """Gets the id of this MssqlBatchBackupSummary.

        ID of the on-demand backup request.

        :return: The id of this MssqlBatchBackupSummary.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this MssqlBatchBackupSummary.

        ID of the on-demand backup request.

        :param id: The id of this MssqlBatchBackupSummary.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def successful_snapshots(self):
        """Gets the successful_snapshots of this MssqlBatchBackupSummary.

        List of summary information for each successful snapshot.

        :return: The successful_snapshots of this MssqlBatchBackupSummary.
        :rtype: List[MssqlBatchBackupSuccessSummary]
        """
        return self._successful_snapshots

    @successful_snapshots.setter
    def successful_snapshots(self, successful_snapshots):
        """Sets the successful_snapshots of this MssqlBatchBackupSummary.

        List of summary information for each successful snapshot.

        :param successful_snapshots: The successful_snapshots of this MssqlBatchBackupSummary.
        :type successful_snapshots: List[MssqlBatchBackupSuccessSummary]
        """
        if successful_snapshots is None:
            raise ValueError("Invalid value for `successful_snapshots`, must not be `None`")

        self._successful_snapshots = successful_snapshots
