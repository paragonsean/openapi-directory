# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.events_and_series_summaries_response import EventsAndSeriesSummariesResponse
from openapi_server import util


class EventsAndSeriesSummariesV1(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, current_time: datetime=None, data: EventsAndSeriesSummariesResponse=None, has_more: bool=None):
        """EventsAndSeriesSummariesV1 - a model defined in OpenAPI

        :param current_time: The current_time of this EventsAndSeriesSummariesV1.
        :param data: The data of this EventsAndSeriesSummariesV1.
        :param has_more: The has_more of this EventsAndSeriesSummariesV1.
        """
        self.openapi_types = {
            'current_time': datetime,
            'data': EventsAndSeriesSummariesResponse,
            'has_more': bool
        }

        self.attribute_map = {
            'current_time': 'currentTime',
            'data': 'data',
            'has_more': 'hasMore'
        }

        self._current_time = current_time
        self._data = data
        self._has_more = has_more

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EventsAndSeriesSummariesV1':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EventsAndSeriesSummariesV1 of this EventsAndSeriesSummariesV1.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def current_time(self):
        """Gets the current_time of this EventsAndSeriesSummariesV1.

        Current cluster time.

        :return: The current_time of this EventsAndSeriesSummariesV1.
        :rtype: datetime
        """
        return self._current_time

    @current_time.setter
    def current_time(self, current_time):
        """Sets the current_time of this EventsAndSeriesSummariesV1.

        Current cluster time.

        :param current_time: The current_time of this EventsAndSeriesSummariesV1.
        :type current_time: datetime
        """
        if current_time is None:
            raise ValueError("Invalid value for `current_time`, must not be `None`")

        self._current_time = current_time

    @property
    def data(self):
        """Gets the data of this EventsAndSeriesSummariesV1.


        :return: The data of this EventsAndSeriesSummariesV1.
        :rtype: EventsAndSeriesSummariesResponse
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this EventsAndSeriesSummariesV1.


        :param data: The data of this EventsAndSeriesSummariesV1.
        :type data: EventsAndSeriesSummariesResponse
        """
        if data is None:
            raise ValueError("Invalid value for `data`, must not be `None`")

        self._data = data

    @property
    def has_more(self):
        """Gets the has_more of this EventsAndSeriesSummariesV1.

        Whether there are more events.

        :return: The has_more of this EventsAndSeriesSummariesV1.
        :rtype: bool
        """
        return self._has_more

    @has_more.setter
    def has_more(self, has_more):
        """Sets the has_more of this EventsAndSeriesSummariesV1.

        Whether there are more events.

        :param has_more: The has_more of this EventsAndSeriesSummariesV1.
        :type has_more: bool
        """
        if has_more is None:
            raise ValueError("Invalid value for `has_more`, must not be `None`")

        self._has_more = has_more
