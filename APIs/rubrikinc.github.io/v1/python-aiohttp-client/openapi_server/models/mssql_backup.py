# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.mssql_backup_type import MssqlBackupType
from openapi_server import util


class MssqlBackup(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, backup_id: str=None, backup_size: int=None, backup_type: MssqlBackupType=None, _date: datetime=None, lsn: str=None, path: str=None, recovery_fork_guid: str=None):
        """MssqlBackup - a model defined in OpenAPI

        :param backup_id: The backup_id of this MssqlBackup.
        :param backup_size: The backup_size of this MssqlBackup.
        :param backup_type: The backup_type of this MssqlBackup.
        :param _date: The _date of this MssqlBackup.
        :param lsn: The lsn of this MssqlBackup.
        :param path: The path of this MssqlBackup.
        :param recovery_fork_guid: The recovery_fork_guid of this MssqlBackup.
        """
        self.openapi_types = {
            'backup_id': str,
            'backup_size': int,
            'backup_type': MssqlBackupType,
            '_date': datetime,
            'lsn': str,
            'path': str,
            'recovery_fork_guid': str
        }

        self.attribute_map = {
            'backup_id': 'backupId',
            'backup_size': 'backupSize',
            'backup_type': 'backupType',
            '_date': 'date',
            'lsn': 'lsn',
            'path': 'path',
            'recovery_fork_guid': 'recoveryForkGuid'
        }

        self._backup_id = backup_id
        self._backup_size = backup_size
        self._backup_type = backup_type
        self.__date = _date
        self._lsn = lsn
        self._path = path
        self._recovery_fork_guid = recovery_fork_guid

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MssqlBackup':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MssqlBackup of this MssqlBackup.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def backup_id(self):
        """Gets the backup_id of this MssqlBackup.

        The unique identifier for the object.

        :return: The backup_id of this MssqlBackup.
        :rtype: str
        """
        return self._backup_id

    @backup_id.setter
    def backup_id(self, backup_id):
        """Sets the backup_id of this MssqlBackup.

        The unique identifier for the object.

        :param backup_id: The backup_id of this MssqlBackup.
        :type backup_id: str
        """
        if backup_id is None:
            raise ValueError("Invalid value for `backup_id`, must not be `None`")

        self._backup_id = backup_id

    @property
    def backup_size(self):
        """Gets the backup_size of this MssqlBackup.

        The total uncompressed size of the files in bytes.

        :return: The backup_size of this MssqlBackup.
        :rtype: int
        """
        return self._backup_size

    @backup_size.setter
    def backup_size(self, backup_size):
        """Sets the backup_size of this MssqlBackup.

        The total uncompressed size of the files in bytes.

        :param backup_size: The backup_size of this MssqlBackup.
        :type backup_size: int
        """
        if backup_size is None:
            raise ValueError("Invalid value for `backup_size`, must not be `None`")

        self._backup_size = backup_size

    @property
    def backup_type(self):
        """Gets the backup_type of this MssqlBackup.


        :return: The backup_type of this MssqlBackup.
        :rtype: MssqlBackupType
        """
        return self._backup_type

    @backup_type.setter
    def backup_type(self, backup_type):
        """Sets the backup_type of this MssqlBackup.


        :param backup_type: The backup_type of this MssqlBackup.
        :type backup_type: MssqlBackupType
        """
        if backup_type is None:
            raise ValueError("Invalid value for `backup_type`, must not be `None`")

        self._backup_type = backup_type

    @property
    def _date(self):
        """Gets the _date of this MssqlBackup.

        Timestamp of the backup.

        :return: The _date of this MssqlBackup.
        :rtype: datetime
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this MssqlBackup.

        Timestamp of the backup.

        :param _date: The _date of this MssqlBackup.
        :type _date: datetime
        """
        if _date is None:
            raise ValueError("Invalid value for `_date`, must not be `None`")

        self.__date = _date

    @property
    def lsn(self):
        """Gets the lsn of this MssqlBackup.

        LSN of the backup.

        :return: The lsn of this MssqlBackup.
        :rtype: str
        """
        return self._lsn

    @lsn.setter
    def lsn(self, lsn):
        """Sets the lsn of this MssqlBackup.

        LSN of the backup.

        :param lsn: The lsn of this MssqlBackup.
        :type lsn: str
        """
        if lsn is None:
            raise ValueError("Invalid value for `lsn`, must not be `None`")

        self._lsn = lsn

    @property
    def path(self):
        """Gets the path of this MssqlBackup.

        The file path the backup will be stored at in downloaded zip files containing it.

        :return: The path of this MssqlBackup.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this MssqlBackup.

        The file path the backup will be stored at in downloaded zip files containing it.

        :param path: The path of this MssqlBackup.
        :type path: str
        """
        if path is None:
            raise ValueError("Invalid value for `path`, must not be `None`")

        self._path = path

    @property
    def recovery_fork_guid(self):
        """Gets the recovery_fork_guid of this MssqlBackup.

        GUID of the recovery fork attached to the LSN.

        :return: The recovery_fork_guid of this MssqlBackup.
        :rtype: str
        """
        return self._recovery_fork_guid

    @recovery_fork_guid.setter
    def recovery_fork_guid(self, recovery_fork_guid):
        """Sets the recovery_fork_guid of this MssqlBackup.

        GUID of the recovery fork attached to the LSN.

        :param recovery_fork_guid: The recovery_fork_guid of this MssqlBackup.
        :type recovery_fork_guid: str
        """
        if recovery_fork_guid is None:
            raise ValueError("Invalid value for `recovery_fork_guid`, must not be `None`")

        self._recovery_fork_guid = recovery_fork_guid
