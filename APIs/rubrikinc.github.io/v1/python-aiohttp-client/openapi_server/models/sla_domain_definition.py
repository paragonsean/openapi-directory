# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.archival_spec import ArchivalSpec
from openapi_server.models.backup_window import BackupWindow
from openapi_server.models.replication_spec import ReplicationSpec
from openapi_server.models.sla_frequency import SlaFrequency
from openapi_server import util


class SlaDomainDefinition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allowed_backup_windows: List[BackupWindow]=None, archival_specs: List[ArchivalSpec]=None, first_full_allowed_backup_windows: List[BackupWindow]=None, frequencies: List[SlaFrequency]=None, is_retention_locked: bool=None, local_retention_limit: int=None, name: str=None, replication_specs: List[ReplicationSpec]=None):
        """SlaDomainDefinition - a model defined in OpenAPI

        :param allowed_backup_windows: The allowed_backup_windows of this SlaDomainDefinition.
        :param archival_specs: The archival_specs of this SlaDomainDefinition.
        :param first_full_allowed_backup_windows: The first_full_allowed_backup_windows of this SlaDomainDefinition.
        :param frequencies: The frequencies of this SlaDomainDefinition.
        :param is_retention_locked: The is_retention_locked of this SlaDomainDefinition.
        :param local_retention_limit: The local_retention_limit of this SlaDomainDefinition.
        :param name: The name of this SlaDomainDefinition.
        :param replication_specs: The replication_specs of this SlaDomainDefinition.
        """
        self.openapi_types = {
            'allowed_backup_windows': List[BackupWindow],
            'archival_specs': List[ArchivalSpec],
            'first_full_allowed_backup_windows': List[BackupWindow],
            'frequencies': List[SlaFrequency],
            'is_retention_locked': bool,
            'local_retention_limit': int,
            'name': str,
            'replication_specs': List[ReplicationSpec]
        }

        self.attribute_map = {
            'allowed_backup_windows': 'allowedBackupWindows',
            'archival_specs': 'archivalSpecs',
            'first_full_allowed_backup_windows': 'firstFullAllowedBackupWindows',
            'frequencies': 'frequencies',
            'is_retention_locked': 'isRetentionLocked',
            'local_retention_limit': 'localRetentionLimit',
            'name': 'name',
            'replication_specs': 'replicationSpecs'
        }

        self._allowed_backup_windows = allowed_backup_windows
        self._archival_specs = archival_specs
        self._first_full_allowed_backup_windows = first_full_allowed_backup_windows
        self._frequencies = frequencies
        self._is_retention_locked = is_retention_locked
        self._local_retention_limit = local_retention_limit
        self._name = name
        self._replication_specs = replication_specs

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SlaDomainDefinition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SlaDomainDefinition of this SlaDomainDefinition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allowed_backup_windows(self):
        """Gets the allowed_backup_windows of this SlaDomainDefinition.


        :return: The allowed_backup_windows of this SlaDomainDefinition.
        :rtype: List[BackupWindow]
        """
        return self._allowed_backup_windows

    @allowed_backup_windows.setter
    def allowed_backup_windows(self, allowed_backup_windows):
        """Sets the allowed_backup_windows of this SlaDomainDefinition.


        :param allowed_backup_windows: The allowed_backup_windows of this SlaDomainDefinition.
        :type allowed_backup_windows: List[BackupWindow]
        """

        self._allowed_backup_windows = allowed_backup_windows

    @property
    def archival_specs(self):
        """Gets the archival_specs of this SlaDomainDefinition.


        :return: The archival_specs of this SlaDomainDefinition.
        :rtype: List[ArchivalSpec]
        """
        return self._archival_specs

    @archival_specs.setter
    def archival_specs(self, archival_specs):
        """Sets the archival_specs of this SlaDomainDefinition.


        :param archival_specs: The archival_specs of this SlaDomainDefinition.
        :type archival_specs: List[ArchivalSpec]
        """

        self._archival_specs = archival_specs

    @property
    def first_full_allowed_backup_windows(self):
        """Gets the first_full_allowed_backup_windows of this SlaDomainDefinition.


        :return: The first_full_allowed_backup_windows of this SlaDomainDefinition.
        :rtype: List[BackupWindow]
        """
        return self._first_full_allowed_backup_windows

    @first_full_allowed_backup_windows.setter
    def first_full_allowed_backup_windows(self, first_full_allowed_backup_windows):
        """Sets the first_full_allowed_backup_windows of this SlaDomainDefinition.


        :param first_full_allowed_backup_windows: The first_full_allowed_backup_windows of this SlaDomainDefinition.
        :type first_full_allowed_backup_windows: List[BackupWindow]
        """
        if first_full_allowed_backup_windows is None:
            raise ValueError("Invalid value for `first_full_allowed_backup_windows`, must not be `None`")

        self._first_full_allowed_backup_windows = first_full_allowed_backup_windows

    @property
    def frequencies(self):
        """Gets the frequencies of this SlaDomainDefinition.


        :return: The frequencies of this SlaDomainDefinition.
        :rtype: List[SlaFrequency]
        """
        return self._frequencies

    @frequencies.setter
    def frequencies(self, frequencies):
        """Sets the frequencies of this SlaDomainDefinition.


        :param frequencies: The frequencies of this SlaDomainDefinition.
        :type frequencies: List[SlaFrequency]
        """
        if frequencies is None:
            raise ValueError("Invalid value for `frequencies`, must not be `None`")

        self._frequencies = frequencies

    @property
    def is_retention_locked(self):
        """Gets the is_retention_locked of this SlaDomainDefinition.

        Boolean value that identifies a Retention Lock SLA Domain. Value is true when an SLA Domain is Retention Locked and false when it is not.

        :return: The is_retention_locked of this SlaDomainDefinition.
        :rtype: bool
        """
        return self._is_retention_locked

    @is_retention_locked.setter
    def is_retention_locked(self, is_retention_locked):
        """Sets the is_retention_locked of this SlaDomainDefinition.

        Boolean value that identifies a Retention Lock SLA Domain. Value is true when an SLA Domain is Retention Locked and false when it is not.

        :param is_retention_locked: The is_retention_locked of this SlaDomainDefinition.
        :type is_retention_locked: bool
        """

        self._is_retention_locked = is_retention_locked

    @property
    def local_retention_limit(self):
        """Gets the local_retention_limit of this SlaDomainDefinition.


        :return: The local_retention_limit of this SlaDomainDefinition.
        :rtype: int
        """
        return self._local_retention_limit

    @local_retention_limit.setter
    def local_retention_limit(self, local_retention_limit):
        """Sets the local_retention_limit of this SlaDomainDefinition.


        :param local_retention_limit: The local_retention_limit of this SlaDomainDefinition.
        :type local_retention_limit: int
        """

        self._local_retention_limit = local_retention_limit

    @property
    def name(self):
        """Gets the name of this SlaDomainDefinition.


        :return: The name of this SlaDomainDefinition.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SlaDomainDefinition.


        :param name: The name of this SlaDomainDefinition.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def replication_specs(self):
        """Gets the replication_specs of this SlaDomainDefinition.


        :return: The replication_specs of this SlaDomainDefinition.
        :rtype: List[ReplicationSpec]
        """
        return self._replication_specs

    @replication_specs.setter
    def replication_specs(self, replication_specs):
        """Sets the replication_specs of this SlaDomainDefinition.


        :param replication_specs: The replication_specs of this SlaDomainDefinition.
        :type replication_specs: List[ReplicationSpec]
        """

        self._replication_specs = replication_specs
