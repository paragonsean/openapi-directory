# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.vmware_network_info import VmwareNetworkInfo
from openapi_server import util


class VmwareNetworkCollection(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, networks: List[VmwareNetworkInfo]=None):
        """VmwareNetworkCollection - a model defined in OpenAPI

        :param networks: The networks of this VmwareNetworkCollection.
        """
        self.openapi_types = {
            'networks': List[VmwareNetworkInfo]
        }

        self.attribute_map = {
            'networks': 'networks'
        }

        self._networks = networks

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VmwareNetworkCollection':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VmwareNetworkCollection of this VmwareNetworkCollection.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def networks(self):
        """Gets the networks of this VmwareNetworkCollection.

        A list of VMware network information.

        :return: The networks of this VmwareNetworkCollection.
        :rtype: List[VmwareNetworkInfo]
        """
        return self._networks

    @networks.setter
    def networks(self, networks):
        """Sets the networks of this VmwareNetworkCollection.

        A list of VMware network information.

        :param networks: The networks of this VmwareNetworkCollection.
        :type networks: List[VmwareNetworkInfo]
        """
        if networks is None:
            raise ValueError("Invalid value for `networks`, must not be `None`")

        self._networks = networks
