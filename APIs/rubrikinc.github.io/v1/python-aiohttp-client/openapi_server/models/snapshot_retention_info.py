# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.snapshot_location_retention_info import SnapshotLocationRetentionInfo
from openapi_server import util


class SnapshotRetentionInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, archival_infos: List[SnapshotLocationRetentionInfo]=None, cloud_native_location_info: List[SnapshotLocationRetentionInfo]=None, local_info: SnapshotLocationRetentionInfo=None, replication_infos: List[SnapshotLocationRetentionInfo]=None):
        """SnapshotRetentionInfo - a model defined in OpenAPI

        :param archival_infos: The archival_infos of this SnapshotRetentionInfo.
        :param cloud_native_location_info: The cloud_native_location_info of this SnapshotRetentionInfo.
        :param local_info: The local_info of this SnapshotRetentionInfo.
        :param replication_infos: The replication_infos of this SnapshotRetentionInfo.
        """
        self.openapi_types = {
            'archival_infos': List[SnapshotLocationRetentionInfo],
            'cloud_native_location_info': List[SnapshotLocationRetentionInfo],
            'local_info': SnapshotLocationRetentionInfo,
            'replication_infos': List[SnapshotLocationRetentionInfo]
        }

        self.attribute_map = {
            'archival_infos': 'archivalInfos',
            'cloud_native_location_info': 'cloudNativeLocationInfo',
            'local_info': 'localInfo',
            'replication_infos': 'replicationInfos'
        }

        self._archival_infos = archival_infos
        self._cloud_native_location_info = cloud_native_location_info
        self._local_info = local_info
        self._replication_infos = replication_infos

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SnapshotRetentionInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SnapshotRetentionInfo of this SnapshotRetentionInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def archival_infos(self):
        """Gets the archival_infos of this SnapshotRetentionInfo.

        List of snapshot retention information on the archival locations.

        :return: The archival_infos of this SnapshotRetentionInfo.
        :rtype: List[SnapshotLocationRetentionInfo]
        """
        return self._archival_infos

    @archival_infos.setter
    def archival_infos(self, archival_infos):
        """Sets the archival_infos of this SnapshotRetentionInfo.

        List of snapshot retention information on the archival locations.

        :param archival_infos: The archival_infos of this SnapshotRetentionInfo.
        :type archival_infos: List[SnapshotLocationRetentionInfo]
        """
        if archival_infos is None:
            raise ValueError("Invalid value for `archival_infos`, must not be `None`")

        self._archival_infos = archival_infos

    @property
    def cloud_native_location_info(self):
        """Gets the cloud_native_location_info of this SnapshotRetentionInfo.

        Snapshot retention information such as frequency tag and expected expiration time on the cloud native locations. 

        :return: The cloud_native_location_info of this SnapshotRetentionInfo.
        :rtype: List[SnapshotLocationRetentionInfo]
        """
        return self._cloud_native_location_info

    @cloud_native_location_info.setter
    def cloud_native_location_info(self, cloud_native_location_info):
        """Sets the cloud_native_location_info of this SnapshotRetentionInfo.

        Snapshot retention information such as frequency tag and expected expiration time on the cloud native locations. 

        :param cloud_native_location_info: The cloud_native_location_info of this SnapshotRetentionInfo.
        :type cloud_native_location_info: List[SnapshotLocationRetentionInfo]
        """
        if cloud_native_location_info is None:
            raise ValueError("Invalid value for `cloud_native_location_info`, must not be `None`")

        self._cloud_native_location_info = cloud_native_location_info

    @property
    def local_info(self):
        """Gets the local_info of this SnapshotRetentionInfo.


        :return: The local_info of this SnapshotRetentionInfo.
        :rtype: SnapshotLocationRetentionInfo
        """
        return self._local_info

    @local_info.setter
    def local_info(self, local_info):
        """Sets the local_info of this SnapshotRetentionInfo.


        :param local_info: The local_info of this SnapshotRetentionInfo.
        :type local_info: SnapshotLocationRetentionInfo
        """

        self._local_info = local_info

    @property
    def replication_infos(self):
        """Gets the replication_infos of this SnapshotRetentionInfo.

        List of snapshot retention information on the replicated locations.

        :return: The replication_infos of this SnapshotRetentionInfo.
        :rtype: List[SnapshotLocationRetentionInfo]
        """
        return self._replication_infos

    @replication_infos.setter
    def replication_infos(self, replication_infos):
        """Sets the replication_infos of this SnapshotRetentionInfo.

        List of snapshot retention information on the replicated locations.

        :param replication_infos: The replication_infos of this SnapshotRetentionInfo.
        :type replication_infos: List[SnapshotLocationRetentionInfo]
        """
        if replication_infos is None:
            raise ValueError("Invalid value for `replication_infos`, must not be `None`")

        self._replication_infos = replication_infos
