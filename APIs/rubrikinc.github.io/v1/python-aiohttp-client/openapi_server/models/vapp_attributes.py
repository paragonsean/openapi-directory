# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class VappAttributes(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, is_vapp_template: bool=None):
        """VappAttributes - a model defined in OpenAPI

        :param is_vapp_template: The is_vapp_template of this VappAttributes.
        """
        self.openapi_types = {
            'is_vapp_template': bool
        }

        self.attribute_map = {
            'is_vapp_template': 'isVappTemplate'
        }

        self._is_vapp_template = is_vapp_template

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VappAttributes':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VappAttributes of this VappAttributes.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def is_vapp_template(self):
        """Gets the is_vapp_template of this VappAttributes.

        Indicates whether the vCD hierarchy object is a vApp template object.

        :return: The is_vapp_template of this VappAttributes.
        :rtype: bool
        """
        return self._is_vapp_template

    @is_vapp_template.setter
    def is_vapp_template(self, is_vapp_template):
        """Sets the is_vapp_template of this VappAttributes.

        Indicates whether the vCD hierarchy object is a vApp template object.

        :param is_vapp_template: The is_vapp_template of this VappAttributes.
        :type is_vapp_template: bool
        """
        if is_vapp_template is None:
            raise ValueError("Invalid value for `is_vapp_template`, must not be `None`")

        self._is_vapp_template = is_vapp_template
