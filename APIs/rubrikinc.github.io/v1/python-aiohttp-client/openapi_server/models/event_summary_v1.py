# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.event_severity_v1 import EventSeverityV1
from openapi_server.models.event_status_v1 import EventStatusV1
from openapi_server.models.event_type_v1 import EventTypeV1
from openapi_server.models.object_type_v1 import ObjectTypeV1
from openapi_server import util


class EventSummaryV1(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, after_id: str=None, event_info: str=None, event_name: str=None, event_series_id: str=None, event_severity: EventSeverityV1=None, event_status: EventStatusV1=None, event_type: EventTypeV1=None, id: str=None, job_instance_id: str=None, object_id: str=None, object_name: str=None, object_type: ObjectTypeV1=None, time: datetime=None):
        """EventSummaryV1 - a model defined in OpenAPI

        :param after_id: The after_id of this EventSummaryV1.
        :param event_info: The event_info of this EventSummaryV1.
        :param event_name: The event_name of this EventSummaryV1.
        :param event_series_id: The event_series_id of this EventSummaryV1.
        :param event_severity: The event_severity of this EventSummaryV1.
        :param event_status: The event_status of this EventSummaryV1.
        :param event_type: The event_type of this EventSummaryV1.
        :param id: The id of this EventSummaryV1.
        :param job_instance_id: The job_instance_id of this EventSummaryV1.
        :param object_id: The object_id of this EventSummaryV1.
        :param object_name: The object_name of this EventSummaryV1.
        :param object_type: The object_type of this EventSummaryV1.
        :param time: The time of this EventSummaryV1.
        """
        self.openapi_types = {
            'after_id': str,
            'event_info': str,
            'event_name': str,
            'event_series_id': str,
            'event_severity': EventSeverityV1,
            'event_status': EventStatusV1,
            'event_type': EventTypeV1,
            'id': str,
            'job_instance_id': str,
            'object_id': str,
            'object_name': str,
            'object_type': ObjectTypeV1,
            'time': datetime
        }

        self.attribute_map = {
            'after_id': 'afterId',
            'event_info': 'eventInfo',
            'event_name': 'eventName',
            'event_series_id': 'eventSeriesId',
            'event_severity': 'eventSeverity',
            'event_status': 'eventStatus',
            'event_type': 'eventType',
            'id': 'id',
            'job_instance_id': 'jobInstanceId',
            'object_id': 'objectId',
            'object_name': 'objectName',
            'object_type': 'objectType',
            'time': 'time'
        }

        self._after_id = after_id
        self._event_info = event_info
        self._event_name = event_name
        self._event_series_id = event_series_id
        self._event_severity = event_severity
        self._event_status = event_status
        self._event_type = event_type
        self._id = id
        self._job_instance_id = job_instance_id
        self._object_id = object_id
        self._object_name = object_name
        self._object_type = object_type
        self._time = time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EventSummaryV1':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EventSummaryV1 of this EventSummaryV1.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def after_id(self):
        """Gets the after_id of this EventSummaryV1.

        The serialized AfterId of the response, if any.

        :return: The after_id of this EventSummaryV1.
        :rtype: str
        """
        return self._after_id

    @after_id.setter
    def after_id(self, after_id):
        """Sets the after_id of this EventSummaryV1.

        The serialized AfterId of the response, if any.

        :param after_id: The after_id of this EventSummaryV1.
        :type after_id: str
        """

        self._after_id = after_id

    @property
    def event_info(self):
        """Gets the event_info of this EventSummaryV1.

        A string that contains all the information for this event.

        :return: The event_info of this EventSummaryV1.
        :rtype: str
        """
        return self._event_info

    @event_info.setter
    def event_info(self, event_info):
        """Sets the event_info of this EventSummaryV1.

        A string that contains all the information for this event.

        :param event_info: The event_info of this EventSummaryV1.
        :type event_info: str
        """
        if event_info is None:
            raise ValueError("Invalid value for `event_info`, must not be `None`")

        self._event_info = event_info

    @property
    def event_name(self):
        """Gets the event_name of this EventSummaryV1.

        The event name.

        :return: The event_name of this EventSummaryV1.
        :rtype: str
        """
        return self._event_name

    @event_name.setter
    def event_name(self, event_name):
        """Sets the event_name of this EventSummaryV1.

        The event name.

        :param event_name: The event_name of this EventSummaryV1.
        :type event_name: str
        """

        self._event_name = event_name

    @property
    def event_series_id(self):
        """Gets the event_series_id of this EventSummaryV1.

        The ID of the event series that this event belongs to.

        :return: The event_series_id of this EventSummaryV1.
        :rtype: str
        """
        return self._event_series_id

    @event_series_id.setter
    def event_series_id(self, event_series_id):
        """Sets the event_series_id of this EventSummaryV1.

        The ID of the event series that this event belongs to.

        :param event_series_id: The event_series_id of this EventSummaryV1.
        :type event_series_id: str
        """
        if event_series_id is None:
            raise ValueError("Invalid value for `event_series_id`, must not be `None`")

        self._event_series_id = event_series_id

    @property
    def event_severity(self):
        """Gets the event_severity of this EventSummaryV1.


        :return: The event_severity of this EventSummaryV1.
        :rtype: EventSeverityV1
        """
        return self._event_severity

    @event_severity.setter
    def event_severity(self, event_severity):
        """Sets the event_severity of this EventSummaryV1.


        :param event_severity: The event_severity of this EventSummaryV1.
        :type event_severity: EventSeverityV1
        """

        self._event_severity = event_severity

    @property
    def event_status(self):
        """Gets the event_status of this EventSummaryV1.


        :return: The event_status of this EventSummaryV1.
        :rtype: EventStatusV1
        """
        return self._event_status

    @event_status.setter
    def event_status(self, event_status):
        """Sets the event_status of this EventSummaryV1.


        :param event_status: The event_status of this EventSummaryV1.
        :type event_status: EventStatusV1
        """
        if event_status is None:
            raise ValueError("Invalid value for `event_status`, must not be `None`")

        self._event_status = event_status

    @property
    def event_type(self):
        """Gets the event_type of this EventSummaryV1.


        :return: The event_type of this EventSummaryV1.
        :rtype: EventTypeV1
        """
        return self._event_type

    @event_type.setter
    def event_type(self, event_type):
        """Sets the event_type of this EventSummaryV1.


        :param event_type: The event_type of this EventSummaryV1.
        :type event_type: EventTypeV1
        """
        if event_type is None:
            raise ValueError("Invalid value for `event_type`, must not be `None`")

        self._event_type = event_type

    @property
    def id(self):
        """Gets the id of this EventSummaryV1.

        The event ID.

        :return: The id of this EventSummaryV1.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EventSummaryV1.

        The event ID.

        :param id: The id of this EventSummaryV1.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def job_instance_id(self):
        """Gets the job_instance_id of this EventSummaryV1.

        The ID of the associated job instance, if any.

        :return: The job_instance_id of this EventSummaryV1.
        :rtype: str
        """
        return self._job_instance_id

    @job_instance_id.setter
    def job_instance_id(self, job_instance_id):
        """Sets the job_instance_id of this EventSummaryV1.

        The ID of the associated job instance, if any.

        :param job_instance_id: The job_instance_id of this EventSummaryV1.
        :type job_instance_id: str
        """

        self._job_instance_id = job_instance_id

    @property
    def object_id(self):
        """Gets the object_id of this EventSummaryV1.

        The ID of the object associated with the event.

        :return: The object_id of this EventSummaryV1.
        :rtype: str
        """
        return self._object_id

    @object_id.setter
    def object_id(self, object_id):
        """Sets the object_id of this EventSummaryV1.

        The ID of the object associated with the event.

        :param object_id: The object_id of this EventSummaryV1.
        :type object_id: str
        """

        self._object_id = object_id

    @property
    def object_name(self):
        """Gets the object_name of this EventSummaryV1.

        The name of the object associated with the event.

        :return: The object_name of this EventSummaryV1.
        :rtype: str
        """
        return self._object_name

    @object_name.setter
    def object_name(self, object_name):
        """Sets the object_name of this EventSummaryV1.

        The name of the object associated with the event.

        :param object_name: The object_name of this EventSummaryV1.
        :type object_name: str
        """

        self._object_name = object_name

    @property
    def object_type(self):
        """Gets the object_type of this EventSummaryV1.


        :return: The object_type of this EventSummaryV1.
        :rtype: ObjectTypeV1
        """
        return self._object_type

    @object_type.setter
    def object_type(self, object_type):
        """Sets the object_type of this EventSummaryV1.


        :param object_type: The object_type of this EventSummaryV1.
        :type object_type: ObjectTypeV1
        """
        if object_type is None:
            raise ValueError("Invalid value for `object_type`, must not be `None`")

        self._object_type = object_type

    @property
    def time(self):
        """Gets the time of this EventSummaryV1.

        The time at which this event occurred.

        :return: The time of this EventSummaryV1.
        :rtype: datetime
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this EventSummaryV1.

        The time at which this event occurred.

        :param time: The time of this EventSummaryV1.
        :type time: datetime
        """
        if time is None:
            raise ValueError("Invalid value for `time`, must not be `None`")

        self._time = time
