# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.mssql_mount_links import MssqlMountLinks
from openapi_server.models.mssql_recovery_point import MssqlRecoveryPoint
from openapi_server import util


class MssqlMountDetail(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, creation_date: datetime=None, id: str=None, mounted_database_id: str=None, mounted_database_name: str=None, owner_id: str=None, owner_name: str=None, source_database_id: str=None, source_database_name: str=None, source_recovery_point: MssqlRecoveryPoint=None, status: str=None, target_instance_id: str=None, target_instance_name: str=None, target_root_name: str=None, links: MssqlMountLinks=None, mount_request_id: str=None, unmount_request_id: str=None):
        """MssqlMountDetail - a model defined in OpenAPI

        :param creation_date: The creation_date of this MssqlMountDetail.
        :param id: The id of this MssqlMountDetail.
        :param mounted_database_id: The mounted_database_id of this MssqlMountDetail.
        :param mounted_database_name: The mounted_database_name of this MssqlMountDetail.
        :param owner_id: The owner_id of this MssqlMountDetail.
        :param owner_name: The owner_name of this MssqlMountDetail.
        :param source_database_id: The source_database_id of this MssqlMountDetail.
        :param source_database_name: The source_database_name of this MssqlMountDetail.
        :param source_recovery_point: The source_recovery_point of this MssqlMountDetail.
        :param status: The status of this MssqlMountDetail.
        :param target_instance_id: The target_instance_id of this MssqlMountDetail.
        :param target_instance_name: The target_instance_name of this MssqlMountDetail.
        :param target_root_name: The target_root_name of this MssqlMountDetail.
        :param links: The links of this MssqlMountDetail.
        :param mount_request_id: The mount_request_id of this MssqlMountDetail.
        :param unmount_request_id: The unmount_request_id of this MssqlMountDetail.
        """
        self.openapi_types = {
            'creation_date': datetime,
            'id': str,
            'mounted_database_id': str,
            'mounted_database_name': str,
            'owner_id': str,
            'owner_name': str,
            'source_database_id': str,
            'source_database_name': str,
            'source_recovery_point': MssqlRecoveryPoint,
            'status': str,
            'target_instance_id': str,
            'target_instance_name': str,
            'target_root_name': str,
            'links': MssqlMountLinks,
            'mount_request_id': str,
            'unmount_request_id': str
        }

        self.attribute_map = {
            'creation_date': 'creationDate',
            'id': 'id',
            'mounted_database_id': 'mountedDatabaseId',
            'mounted_database_name': 'mountedDatabaseName',
            'owner_id': 'ownerId',
            'owner_name': 'ownerName',
            'source_database_id': 'sourceDatabaseId',
            'source_database_name': 'sourceDatabaseName',
            'source_recovery_point': 'sourceRecoveryPoint',
            'status': 'status',
            'target_instance_id': 'targetInstanceId',
            'target_instance_name': 'targetInstanceName',
            'target_root_name': 'targetRootName',
            'links': 'links',
            'mount_request_id': 'mountRequestId',
            'unmount_request_id': 'unmountRequestId'
        }

        self._creation_date = creation_date
        self._id = id
        self._mounted_database_id = mounted_database_id
        self._mounted_database_name = mounted_database_name
        self._owner_id = owner_id
        self._owner_name = owner_name
        self._source_database_id = source_database_id
        self._source_database_name = source_database_name
        self._source_recovery_point = source_recovery_point
        self._status = status
        self._target_instance_id = target_instance_id
        self._target_instance_name = target_instance_name
        self._target_root_name = target_root_name
        self._links = links
        self._mount_request_id = mount_request_id
        self._unmount_request_id = unmount_request_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MssqlMountDetail':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MssqlMountDetail of this MssqlMountDetail.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def creation_date(self):
        """Gets the creation_date of this MssqlMountDetail.

        The date this mount was created.

        :return: The creation_date of this MssqlMountDetail.
        :rtype: datetime
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date):
        """Sets the creation_date of this MssqlMountDetail.

        The date this mount was created.

        :param creation_date: The creation_date of this MssqlMountDetail.
        :type creation_date: datetime
        """
        if creation_date is None:
            raise ValueError("Invalid value for `creation_date`, must not be `None`")

        self._creation_date = creation_date

    @property
    def id(self):
        """Gets the id of this MssqlMountDetail.


        :return: The id of this MssqlMountDetail.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this MssqlMountDetail.


        :param id: The id of this MssqlMountDetail.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def mounted_database_id(self):
        """Gets the mounted_database_id of this MssqlMountDetail.

        ID for the mounted SQL Server database, once it is available.

        :return: The mounted_database_id of this MssqlMountDetail.
        :rtype: str
        """
        return self._mounted_database_id

    @mounted_database_id.setter
    def mounted_database_id(self, mounted_database_id):
        """Sets the mounted_database_id of this MssqlMountDetail.

        ID for the mounted SQL Server database, once it is available.

        :param mounted_database_id: The mounted_database_id of this MssqlMountDetail.
        :type mounted_database_id: str
        """

        self._mounted_database_id = mounted_database_id

    @property
    def mounted_database_name(self):
        """Gets the mounted_database_name of this MssqlMountDetail.

        Name for the mounted SQL Server database.

        :return: The mounted_database_name of this MssqlMountDetail.
        :rtype: str
        """
        return self._mounted_database_name

    @mounted_database_name.setter
    def mounted_database_name(self, mounted_database_name):
        """Sets the mounted_database_name of this MssqlMountDetail.

        Name for the mounted SQL Server database.

        :param mounted_database_name: The mounted_database_name of this MssqlMountDetail.
        :type mounted_database_name: str
        """
        if mounted_database_name is None:
            raise ValueError("Invalid value for `mounted_database_name`, must not be `None`")

        self._mounted_database_name = mounted_database_name

    @property
    def owner_id(self):
        """Gets the owner_id of this MssqlMountDetail.

        ID of the user who created this mount.

        :return: The owner_id of this MssqlMountDetail.
        :rtype: str
        """
        return self._owner_id

    @owner_id.setter
    def owner_id(self, owner_id):
        """Sets the owner_id of this MssqlMountDetail.

        ID of the user who created this mount.

        :param owner_id: The owner_id of this MssqlMountDetail.
        :type owner_id: str
        """

        self._owner_id = owner_id

    @property
    def owner_name(self):
        """Gets the owner_name of this MssqlMountDetail.

        Name of the user who created this mount.

        :return: The owner_name of this MssqlMountDetail.
        :rtype: str
        """
        return self._owner_name

    @owner_name.setter
    def owner_name(self, owner_name):
        """Sets the owner_name of this MssqlMountDetail.

        Name of the user who created this mount.

        :param owner_name: The owner_name of this MssqlMountDetail.
        :type owner_name: str
        """

        self._owner_name = owner_name

    @property
    def source_database_id(self):
        """Gets the source_database_id of this MssqlMountDetail.


        :return: The source_database_id of this MssqlMountDetail.
        :rtype: str
        """
        return self._source_database_id

    @source_database_id.setter
    def source_database_id(self, source_database_id):
        """Sets the source_database_id of this MssqlMountDetail.


        :param source_database_id: The source_database_id of this MssqlMountDetail.
        :type source_database_id: str
        """
        if source_database_id is None:
            raise ValueError("Invalid value for `source_database_id`, must not be `None`")

        self._source_database_id = source_database_id

    @property
    def source_database_name(self):
        """Gets the source_database_name of this MssqlMountDetail.


        :return: The source_database_name of this MssqlMountDetail.
        :rtype: str
        """
        return self._source_database_name

    @source_database_name.setter
    def source_database_name(self, source_database_name):
        """Sets the source_database_name of this MssqlMountDetail.


        :param source_database_name: The source_database_name of this MssqlMountDetail.
        :type source_database_name: str
        """
        if source_database_name is None:
            raise ValueError("Invalid value for `source_database_name`, must not be `None`")

        self._source_database_name = source_database_name

    @property
    def source_recovery_point(self):
        """Gets the source_recovery_point of this MssqlMountDetail.


        :return: The source_recovery_point of this MssqlMountDetail.
        :rtype: MssqlRecoveryPoint
        """
        return self._source_recovery_point

    @source_recovery_point.setter
    def source_recovery_point(self, source_recovery_point):
        """Sets the source_recovery_point of this MssqlMountDetail.


        :param source_recovery_point: The source_recovery_point of this MssqlMountDetail.
        :type source_recovery_point: MssqlRecoveryPoint
        """
        if source_recovery_point is None:
            raise ValueError("Invalid value for `source_recovery_point`, must not be `None`")

        self._source_recovery_point = source_recovery_point

    @property
    def status(self):
        """Gets the status of this MssqlMountDetail.

        The status of this mount. The status is **_Available_** when the database is successfully mounted and ready to use.

        :return: The status of this MssqlMountDetail.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this MssqlMountDetail.

        The status of this mount. The status is **_Available_** when the database is successfully mounted and ready to use.

        :param status: The status of this MssqlMountDetail.
        :type status: str
        """
        allowed_values = ["Available", "Unavailable", "Mounting", "Unmounting"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def target_instance_id(self):
        """Gets the target_instance_id of this MssqlMountDetail.


        :return: The target_instance_id of this MssqlMountDetail.
        :rtype: str
        """
        return self._target_instance_id

    @target_instance_id.setter
    def target_instance_id(self, target_instance_id):
        """Sets the target_instance_id of this MssqlMountDetail.


        :param target_instance_id: The target_instance_id of this MssqlMountDetail.
        :type target_instance_id: str
        """
        if target_instance_id is None:
            raise ValueError("Invalid value for `target_instance_id`, must not be `None`")

        self._target_instance_id = target_instance_id

    @property
    def target_instance_name(self):
        """Gets the target_instance_name of this MssqlMountDetail.


        :return: The target_instance_name of this MssqlMountDetail.
        :rtype: str
        """
        return self._target_instance_name

    @target_instance_name.setter
    def target_instance_name(self, target_instance_name):
        """Sets the target_instance_name of this MssqlMountDetail.


        :param target_instance_name: The target_instance_name of this MssqlMountDetail.
        :type target_instance_name: str
        """
        if target_instance_name is None:
            raise ValueError("Invalid value for `target_instance_name`, must not be `None`")

        self._target_instance_name = target_instance_name

    @property
    def target_root_name(self):
        """Gets the target_root_name of this MssqlMountDetail.

        Name of the top-level object on which the target instance resides.

        :return: The target_root_name of this MssqlMountDetail.
        :rtype: str
        """
        return self._target_root_name

    @target_root_name.setter
    def target_root_name(self, target_root_name):
        """Sets the target_root_name of this MssqlMountDetail.

        Name of the top-level object on which the target instance resides.

        :param target_root_name: The target_root_name of this MssqlMountDetail.
        :type target_root_name: str
        """
        if target_root_name is None:
            raise ValueError("Invalid value for `target_root_name`, must not be `None`")

        self._target_root_name = target_root_name

    @property
    def links(self):
        """Gets the links of this MssqlMountDetail.


        :return: The links of this MssqlMountDetail.
        :rtype: MssqlMountLinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this MssqlMountDetail.


        :param links: The links of this MssqlMountDetail.
        :type links: MssqlMountLinks
        """
        if links is None:
            raise ValueError("Invalid value for `links`, must not be `None`")

        self._links = links

    @property
    def mount_request_id(self):
        """Gets the mount_request_id of this MssqlMountDetail.

        ID of the async request object for the mount task.

        :return: The mount_request_id of this MssqlMountDetail.
        :rtype: str
        """
        return self._mount_request_id

    @mount_request_id.setter
    def mount_request_id(self, mount_request_id):
        """Sets the mount_request_id of this MssqlMountDetail.

        ID of the async request object for the mount task.

        :param mount_request_id: The mount_request_id of this MssqlMountDetail.
        :type mount_request_id: str
        """

        self._mount_request_id = mount_request_id

    @property
    def unmount_request_id(self):
        """Gets the unmount_request_id of this MssqlMountDetail.

        ID of the async request object for the delete task.

        :return: The unmount_request_id of this MssqlMountDetail.
        :rtype: str
        """
        return self._unmount_request_id

    @unmount_request_id.setter
    def unmount_request_id(self, unmount_request_id):
        """Sets the unmount_request_id of this MssqlMountDetail.

        ID of the async request object for the delete task.

        :param unmount_request_id: The unmount_request_id of this MssqlMountDetail.
        :type unmount_request_id: str
        """

        self._unmount_request_id = unmount_request_id
