# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.advanced_ldap_configuration import AdvancedLdapConfiguration
from openapi_server import util


class LdapServiceInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, advanced_options: AdvancedLdapConfiguration=None, auth_servers: List[str]=None, base_dn: str=None, bind_user_name: str=None, bind_user_password: str=None, certificate_id: str=None, dynamic_dns_name: str=None, is_totp_enforced: bool=None, mfa_server_id: str=None, name: str=None):
        """LdapServiceInfo - a model defined in OpenAPI

        :param advanced_options: The advanced_options of this LdapServiceInfo.
        :param auth_servers: The auth_servers of this LdapServiceInfo.
        :param base_dn: The base_dn of this LdapServiceInfo.
        :param bind_user_name: The bind_user_name of this LdapServiceInfo.
        :param bind_user_password: The bind_user_password of this LdapServiceInfo.
        :param certificate_id: The certificate_id of this LdapServiceInfo.
        :param dynamic_dns_name: The dynamic_dns_name of this LdapServiceInfo.
        :param is_totp_enforced: The is_totp_enforced of this LdapServiceInfo.
        :param mfa_server_id: The mfa_server_id of this LdapServiceInfo.
        :param name: The name of this LdapServiceInfo.
        """
        self.openapi_types = {
            'advanced_options': AdvancedLdapConfiguration,
            'auth_servers': List[str],
            'base_dn': str,
            'bind_user_name': str,
            'bind_user_password': str,
            'certificate_id': str,
            'dynamic_dns_name': str,
            'is_totp_enforced': bool,
            'mfa_server_id': str,
            'name': str
        }

        self.attribute_map = {
            'advanced_options': 'advancedOptions',
            'auth_servers': 'authServers',
            'base_dn': 'baseDn',
            'bind_user_name': 'bindUserName',
            'bind_user_password': 'bindUserPassword',
            'certificate_id': 'certificateId',
            'dynamic_dns_name': 'dynamicDnsName',
            'is_totp_enforced': 'isTotpEnforced',
            'mfa_server_id': 'mfaServerId',
            'name': 'name'
        }

        self._advanced_options = advanced_options
        self._auth_servers = auth_servers
        self._base_dn = base_dn
        self._bind_user_name = bind_user_name
        self._bind_user_password = bind_user_password
        self._certificate_id = certificate_id
        self._dynamic_dns_name = dynamic_dns_name
        self._is_totp_enforced = is_totp_enforced
        self._mfa_server_id = mfa_server_id
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LdapServiceInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LdapServiceInfo of this LdapServiceInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def advanced_options(self):
        """Gets the advanced_options of this LdapServiceInfo.


        :return: The advanced_options of this LdapServiceInfo.
        :rtype: AdvancedLdapConfiguration
        """
        return self._advanced_options

    @advanced_options.setter
    def advanced_options(self, advanced_options):
        """Sets the advanced_options of this LdapServiceInfo.


        :param advanced_options: The advanced_options of this LdapServiceInfo.
        :type advanced_options: AdvancedLdapConfiguration
        """

        self._advanced_options = advanced_options

    @property
    def auth_servers(self):
        """Gets the auth_servers of this LdapServiceInfo.

        An ordered list of authentication servers. Servers on this list have priority over servers discovered using dynamic DNS.

        :return: The auth_servers of this LdapServiceInfo.
        :rtype: List[str]
        """
        return self._auth_servers

    @auth_servers.setter
    def auth_servers(self, auth_servers):
        """Sets the auth_servers of this LdapServiceInfo.

        An ordered list of authentication servers. Servers on this list have priority over servers discovered using dynamic DNS.

        :param auth_servers: The auth_servers of this LdapServiceInfo.
        :type auth_servers: List[str]
        """

        self._auth_servers = auth_servers

    @property
    def base_dn(self):
        """Gets the base_dn of this LdapServiceInfo.

        The path to the directory where searches for users begin.

        :return: The base_dn of this LdapServiceInfo.
        :rtype: str
        """
        return self._base_dn

    @base_dn.setter
    def base_dn(self, base_dn):
        """Sets the base_dn of this LdapServiceInfo.

        The path to the directory where searches for users begin.

        :param base_dn: The base_dn of this LdapServiceInfo.
        :type base_dn: str
        """

        self._base_dn = base_dn

    @property
    def bind_user_name(self):
        """Gets the bind_user_name of this LdapServiceInfo.

        The name of the user that searches the authentication server for other users.

        :return: The bind_user_name of this LdapServiceInfo.
        :rtype: str
        """
        return self._bind_user_name

    @bind_user_name.setter
    def bind_user_name(self, bind_user_name):
        """Sets the bind_user_name of this LdapServiceInfo.

        The name of the user that searches the authentication server for other users.

        :param bind_user_name: The bind_user_name of this LdapServiceInfo.
        :type bind_user_name: str
        """
        if bind_user_name is None:
            raise ValueError("Invalid value for `bind_user_name`, must not be `None`")

        self._bind_user_name = bind_user_name

    @property
    def bind_user_password(self):
        """Gets the bind_user_password of this LdapServiceInfo.

        Password for the bind user.

        :return: The bind_user_password of this LdapServiceInfo.
        :rtype: str
        """
        return self._bind_user_password

    @bind_user_password.setter
    def bind_user_password(self, bind_user_password):
        """Sets the bind_user_password of this LdapServiceInfo.

        Password for the bind user.

        :param bind_user_password: The bind_user_password of this LdapServiceInfo.
        :type bind_user_password: str
        """
        if bind_user_password is None:
            raise ValueError("Invalid value for `bind_user_password`, must not be `None`")

        self._bind_user_password = bind_user_password

    @property
    def certificate_id(self):
        """Gets the certificate_id of this LdapServiceInfo.

        ID of the imported certificate to use for connections to this server.

        :return: The certificate_id of this LdapServiceInfo.
        :rtype: str
        """
        return self._certificate_id

    @certificate_id.setter
    def certificate_id(self, certificate_id):
        """Sets the certificate_id of this LdapServiceInfo.

        ID of the imported certificate to use for connections to this server.

        :param certificate_id: The certificate_id of this LdapServiceInfo.
        :type certificate_id: str
        """

        self._certificate_id = certificate_id

    @property
    def dynamic_dns_name(self):
        """Gets the dynamic_dns_name of this LdapServiceInfo.

        Dynamic DNS name for locating authentication servers.

        :return: The dynamic_dns_name of this LdapServiceInfo.
        :rtype: str
        """
        return self._dynamic_dns_name

    @dynamic_dns_name.setter
    def dynamic_dns_name(self, dynamic_dns_name):
        """Sets the dynamic_dns_name of this LdapServiceInfo.

        Dynamic DNS name for locating authentication servers.

        :param dynamic_dns_name: The dynamic_dns_name of this LdapServiceInfo.
        :type dynamic_dns_name: str
        """

        self._dynamic_dns_name = dynamic_dns_name

    @property
    def is_totp_enforced(self):
        """Gets the is_totp_enforced of this LdapServiceInfo.

        Indicates whether the time-based one time password (TOTP) authentication method is being enforced. Returns true when TOTP is enforced and false when TOTP is not enforced. 

        :return: The is_totp_enforced of this LdapServiceInfo.
        :rtype: bool
        """
        return self._is_totp_enforced

    @is_totp_enforced.setter
    def is_totp_enforced(self, is_totp_enforced):
        """Sets the is_totp_enforced of this LdapServiceInfo.

        Indicates whether the time-based one time password (TOTP) authentication method is being enforced. Returns true when TOTP is enforced and false when TOTP is not enforced. 

        :param is_totp_enforced: The is_totp_enforced of this LdapServiceInfo.
        :type is_totp_enforced: bool
        """

        self._is_totp_enforced = is_totp_enforced

    @property
    def mfa_server_id(self):
        """Gets the mfa_server_id of this LdapServiceInfo.

        MFA server associated with LDAP service.

        :return: The mfa_server_id of this LdapServiceInfo.
        :rtype: str
        """
        return self._mfa_server_id

    @mfa_server_id.setter
    def mfa_server_id(self, mfa_server_id):
        """Sets the mfa_server_id of this LdapServiceInfo.

        MFA server associated with LDAP service.

        :param mfa_server_id: The mfa_server_id of this LdapServiceInfo.
        :type mfa_server_id: str
        """

        self._mfa_server_id = mfa_server_id

    @property
    def name(self):
        """Gets the name of this LdapServiceInfo.

        Human friendly name.

        :return: The name of this LdapServiceInfo.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this LdapServiceInfo.

        Human friendly name.

        :param name: The name of this LdapServiceInfo.
        :type name: str
        """

        self._name = name
