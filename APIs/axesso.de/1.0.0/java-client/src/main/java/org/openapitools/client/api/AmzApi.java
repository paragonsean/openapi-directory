/*
 * Axesso Api
 * Use this api to fetch information to Amazon products and more.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@axesso.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.BuyRecommendationResponse;
import org.openapitools.client.model.KeywordSearchResponse;
import org.openapitools.client.model.ProductDetailsResponse;
import org.openapitools.client.model.SortOptionResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AmzApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AmzApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AmzApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for keywordSearch
     * @param keyword keyword to search (required)
     * @param domainCode domain for the search (required)
     * @param sortBy sort option (optional, default to relevanceblender)
     * @param numberOfProducts number of the results (max 20) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Missing parameter </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found - Product not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call keywordSearchCall(String keyword, String domainCode, String sortBy, Integer numberOfProducts, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/amz/amazon-search-by-keyword";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (keyword != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("keyword", keyword));
        }

        if (domainCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("domainCode", domainCode));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortBy", sortBy));
        }

        if (numberOfProducts != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("numberOfProducts", numberOfProducts));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call keywordSearchValidateBeforeCall(String keyword, String domainCode, String sortBy, Integer numberOfProducts, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'keyword' is set
        if (keyword == null) {
            throw new ApiException("Missing the required parameter 'keyword' when calling keywordSearch(Async)");
        }

        // verify the required parameter 'domainCode' is set
        if (domainCode == null) {
            throw new ApiException("Missing the required parameter 'domainCode' when calling keywordSearch(Async)");
        }

        return keywordSearchCall(keyword, domainCode, sortBy, numberOfProducts, _callback);

    }

    /**
     * fetch results auf a keyword search on Amazon
     * 
     * @param keyword keyword to search (required)
     * @param domainCode domain for the search (required)
     * @param sortBy sort option (optional, default to relevanceblender)
     * @param numberOfProducts number of the results (max 20) (optional)
     * @return KeywordSearchResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Missing parameter </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found - Product not Found </td><td>  -  </td></tr>
     </table>
     */
    public KeywordSearchResponse keywordSearch(String keyword, String domainCode, String sortBy, Integer numberOfProducts) throws ApiException {
        ApiResponse<KeywordSearchResponse> localVarResp = keywordSearchWithHttpInfo(keyword, domainCode, sortBy, numberOfProducts);
        return localVarResp.getData();
    }

    /**
     * fetch results auf a keyword search on Amazon
     * 
     * @param keyword keyword to search (required)
     * @param domainCode domain for the search (required)
     * @param sortBy sort option (optional, default to relevanceblender)
     * @param numberOfProducts number of the results (max 20) (optional)
     * @return ApiResponse&lt;KeywordSearchResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Missing parameter </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found - Product not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<KeywordSearchResponse> keywordSearchWithHttpInfo(String keyword, String domainCode, String sortBy, Integer numberOfProducts) throws ApiException {
        okhttp3.Call localVarCall = keywordSearchValidateBeforeCall(keyword, domainCode, sortBy, numberOfProducts, null);
        Type localVarReturnType = new TypeToken<KeywordSearchResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * fetch results auf a keyword search on Amazon (asynchronously)
     * 
     * @param keyword keyword to search (required)
     * @param domainCode domain for the search (required)
     * @param sortBy sort option (optional, default to relevanceblender)
     * @param numberOfProducts number of the results (max 20) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Missing parameter </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found - Product not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call keywordSearchAsync(String keyword, String domainCode, String sortBy, Integer numberOfProducts, final ApiCallback<KeywordSearchResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = keywordSearchValidateBeforeCall(keyword, domainCode, sortBy, numberOfProducts, _callback);
        Type localVarReturnType = new TypeToken<KeywordSearchResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for requestBuyRecommendation
     * @param url The url of the requested product. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Missing parameter </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found - Product not Found </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable - Wrong parameter </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call requestBuyRecommendationCall(String url, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/amz/amazon-lookup-buy-recommendations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (url != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("url", url));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call requestBuyRecommendationValidateBeforeCall(String url, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'url' is set
        if (url == null) {
            throw new ApiException("Missing the required parameter 'url' when calling requestBuyRecommendation(Async)");
        }

        return requestBuyRecommendationCall(url, _callback);

    }

    /**
     * request buy recommendations to a given product
     * 
     * @param url The url of the requested product. (required)
     * @return BuyRecommendationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Missing parameter </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found - Product not Found </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable - Wrong parameter </td><td>  -  </td></tr>
     </table>
     */
    public BuyRecommendationResponse requestBuyRecommendation(String url) throws ApiException {
        ApiResponse<BuyRecommendationResponse> localVarResp = requestBuyRecommendationWithHttpInfo(url);
        return localVarResp.getData();
    }

    /**
     * request buy recommendations to a given product
     * 
     * @param url The url of the requested product. (required)
     * @return ApiResponse&lt;BuyRecommendationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Missing parameter </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found - Product not Found </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable - Wrong parameter </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BuyRecommendationResponse> requestBuyRecommendationWithHttpInfo(String url) throws ApiException {
        okhttp3.Call localVarCall = requestBuyRecommendationValidateBeforeCall(url, null);
        Type localVarReturnType = new TypeToken<BuyRecommendationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * request buy recommendations to a given product (asynchronously)
     * 
     * @param url The url of the requested product. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Missing parameter </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found - Product not Found </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable - Wrong parameter </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call requestBuyRecommendationAsync(String url, final ApiCallback<BuyRecommendationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = requestBuyRecommendationValidateBeforeCall(url, _callback);
        Type localVarReturnType = new TypeToken<BuyRecommendationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for requestProduct
     * @param url The url of the requested product. (required)
     * @param size Size parameter if available. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Missing parameter </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found - Product not Found </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable - Wrong parameter </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call requestProductCall(String url, String size, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/amz/amazon-lookup-product";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (url != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("url", url));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call requestProductValidateBeforeCall(String url, String size, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'url' is set
        if (url == null) {
            throw new ApiException("Missing the required parameter 'url' when calling requestProduct(Async)");
        }

        return requestProductCall(url, size, _callback);

    }

    /**
     * lookup product information
     * 
     * @param url The url of the requested product. (required)
     * @param size Size parameter if available. (optional)
     * @return ProductDetailsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Missing parameter </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found - Product not Found </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable - Wrong parameter </td><td>  -  </td></tr>
     </table>
     */
    public ProductDetailsResponse requestProduct(String url, String size) throws ApiException {
        ApiResponse<ProductDetailsResponse> localVarResp = requestProductWithHttpInfo(url, size);
        return localVarResp.getData();
    }

    /**
     * lookup product information
     * 
     * @param url The url of the requested product. (required)
     * @param size Size parameter if available. (optional)
     * @return ApiResponse&lt;ProductDetailsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Missing parameter </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found - Product not Found </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable - Wrong parameter </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProductDetailsResponse> requestProductWithHttpInfo(String url, String size) throws ApiException {
        okhttp3.Call localVarCall = requestProductValidateBeforeCall(url, size, null);
        Type localVarReturnType = new TypeToken<ProductDetailsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * lookup product information (asynchronously)
     * 
     * @param url The url of the requested product. (required)
     * @param size Size parameter if available. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - Missing parameter </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found - Product not Found </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable - Wrong parameter </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call requestProductAsync(String url, String size, final ApiCallback<ProductDetailsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = requestProductValidateBeforeCall(url, size, _callback);
        Type localVarReturnType = new TypeToken<ProductDetailsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sortOptions
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sortOptionsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/amz/sort-options";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sortOptionsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return sortOptionsCall(_callback);

    }

    /**
     * request available sort options to use in keyword search
     * 
     * @return SortOptionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public SortOptionResponse sortOptions() throws ApiException {
        ApiResponse<SortOptionResponse> localVarResp = sortOptionsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * request available sort options to use in keyword search
     * 
     * @return ApiResponse&lt;SortOptionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SortOptionResponse> sortOptionsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = sortOptionsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<SortOptionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * request available sort options to use in keyword search (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sortOptionsAsync(final ApiCallback<SortOptionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = sortOptionsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<SortOptionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
