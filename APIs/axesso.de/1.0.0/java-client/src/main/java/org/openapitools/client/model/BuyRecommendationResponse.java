/*
 * Axesso Api
 * Use this api to fetch information to Amazon products and more.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@axesso.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * BuyRecommendationResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:58:25.796505-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BuyRecommendationResponse {
  public static final String SERIALIZED_NAME_BUY_RECOMMENDATIONS = "buyRecommendations";
  @SerializedName(SERIALIZED_NAME_BUY_RECOMMENDATIONS)
  private List<String> buyRecommendations = new ArrayList<>();

  public static final String SERIALIZED_NAME_NUMBER_OF_PRODUCTS = "numberOfProducts";
  @SerializedName(SERIALIZED_NAME_NUMBER_OF_PRODUCTS)
  private Long numberOfProducts;

  public static final String SERIALIZED_NAME_RESPONSE_MESSAGE = "responseMessage";
  @SerializedName(SERIALIZED_NAME_RESPONSE_MESSAGE)
  private String responseMessage;

  public static final String SERIALIZED_NAME_RESPONSE_STATUS = "responseStatus";
  @SerializedName(SERIALIZED_NAME_RESPONSE_STATUS)
  private String responseStatus;

  public BuyRecommendationResponse() {
  }

  public BuyRecommendationResponse buyRecommendations(List<String> buyRecommendations) {
    this.buyRecommendations = buyRecommendations;
    return this;
  }

  public BuyRecommendationResponse addBuyRecommendationsItem(String buyRecommendationsItem) {
    if (this.buyRecommendations == null) {
      this.buyRecommendations = new ArrayList<>();
    }
    this.buyRecommendations.add(buyRecommendationsItem);
    return this;
  }

  /**
   * Get buyRecommendations
   * @return buyRecommendations
   */
  @javax.annotation.Nullable
  public List<String> getBuyRecommendations() {
    return buyRecommendations;
  }

  public void setBuyRecommendations(List<String> buyRecommendations) {
    this.buyRecommendations = buyRecommendations;
  }


  public BuyRecommendationResponse numberOfProducts(Long numberOfProducts) {
    this.numberOfProducts = numberOfProducts;
    return this;
  }

  /**
   * Get numberOfProducts
   * @return numberOfProducts
   */
  @javax.annotation.Nullable
  public Long getNumberOfProducts() {
    return numberOfProducts;
  }

  public void setNumberOfProducts(Long numberOfProducts) {
    this.numberOfProducts = numberOfProducts;
  }


  public BuyRecommendationResponse responseMessage(String responseMessage) {
    this.responseMessage = responseMessage;
    return this;
  }

  /**
   * Get responseMessage
   * @return responseMessage
   */
  @javax.annotation.Nullable
  public String getResponseMessage() {
    return responseMessage;
  }

  public void setResponseMessage(String responseMessage) {
    this.responseMessage = responseMessage;
  }


  public BuyRecommendationResponse responseStatus(String responseStatus) {
    this.responseStatus = responseStatus;
    return this;
  }

  /**
   * Get responseStatus
   * @return responseStatus
   */
  @javax.annotation.Nullable
  public String getResponseStatus() {
    return responseStatus;
  }

  public void setResponseStatus(String responseStatus) {
    this.responseStatus = responseStatus;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BuyRecommendationResponse buyRecommendationResponse = (BuyRecommendationResponse) o;
    return Objects.equals(this.buyRecommendations, buyRecommendationResponse.buyRecommendations) &&
        Objects.equals(this.numberOfProducts, buyRecommendationResponse.numberOfProducts) &&
        Objects.equals(this.responseMessage, buyRecommendationResponse.responseMessage) &&
        Objects.equals(this.responseStatus, buyRecommendationResponse.responseStatus);
  }

  @Override
  public int hashCode() {
    return Objects.hash(buyRecommendations, numberOfProducts, responseMessage, responseStatus);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BuyRecommendationResponse {\n");
    sb.append("    buyRecommendations: ").append(toIndentedString(buyRecommendations)).append("\n");
    sb.append("    numberOfProducts: ").append(toIndentedString(numberOfProducts)).append("\n");
    sb.append("    responseMessage: ").append(toIndentedString(responseMessage)).append("\n");
    sb.append("    responseStatus: ").append(toIndentedString(responseStatus)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("buyRecommendations");
    openapiFields.add("numberOfProducts");
    openapiFields.add("responseMessage");
    openapiFields.add("responseStatus");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BuyRecommendationResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BuyRecommendationResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BuyRecommendationResponse is not found in the empty JSON string", BuyRecommendationResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BuyRecommendationResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BuyRecommendationResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("buyRecommendations") != null && !jsonObj.get("buyRecommendations").isJsonNull() && !jsonObj.get("buyRecommendations").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `buyRecommendations` to be an array in the JSON string but got `%s`", jsonObj.get("buyRecommendations").toString()));
      }
      if ((jsonObj.get("responseMessage") != null && !jsonObj.get("responseMessage").isJsonNull()) && !jsonObj.get("responseMessage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `responseMessage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("responseMessage").toString()));
      }
      if ((jsonObj.get("responseStatus") != null && !jsonObj.get("responseStatus").isJsonNull()) && !jsonObj.get("responseStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `responseStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("responseStatus").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BuyRecommendationResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BuyRecommendationResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BuyRecommendationResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BuyRecommendationResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<BuyRecommendationResponse>() {
           @Override
           public void write(JsonWriter out, BuyRecommendationResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BuyRecommendationResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BuyRecommendationResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BuyRecommendationResponse
   * @throws IOException if the JSON string is invalid with respect to BuyRecommendationResponse
   */
  public static BuyRecommendationResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BuyRecommendationResponse.class);
  }

  /**
   * Convert an instance of BuyRecommendationResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

