/**
 * Axesso Api
 * Use this api to fetch information to Amazon products and more.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@axesso.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BuyRecommendationResponse from '../model/BuyRecommendationResponse';
import KeywordSearchResponse from '../model/KeywordSearchResponse';
import ProductDetailsResponse from '../model/ProductDetailsResponse';
import SortOptionResponse from '../model/SortOptionResponse';

/**
* Amz service.
* @module api/AmzApi
* @version 1.0.0
*/
export default class AmzApi {

    /**
    * Constructs a new AmzApi. 
    * @alias module:api/AmzApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the keywordSearch operation.
     * @callback module:api/AmzApi~keywordSearchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/KeywordSearchResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * fetch results auf a keyword search on Amazon
     * 
     * @param {String} keyword keyword to search
     * @param {String} domainCode domain for the search
     * @param {Object} opts Optional parameters
     * @param {String} [sortBy = 'relevanceblender')] sort option
     * @param {Number} [numberOfProducts] number of the results (max 20)
     * @param {module:api/AmzApi~keywordSearchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/KeywordSearchResponse}
     */
    keywordSearch(keyword, domainCode, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'keyword' is set
      if (keyword === undefined || keyword === null) {
        throw new Error("Missing the required parameter 'keyword' when calling keywordSearch");
      }
      // verify the required parameter 'domainCode' is set
      if (domainCode === undefined || domainCode === null) {
        throw new Error("Missing the required parameter 'domainCode' when calling keywordSearch");
      }

      let pathParams = {
      };
      let queryParams = {
        'keyword': keyword,
        'domainCode': domainCode,
        'sortBy': opts['sortBy'],
        'numberOfProducts': opts['numberOfProducts']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = KeywordSearchResponse;
      return this.apiClient.callApi(
        '/amz/amazon-search-by-keyword', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the requestBuyRecommendation operation.
     * @callback module:api/AmzApi~requestBuyRecommendationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BuyRecommendationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * request buy recommendations to a given product
     * 
     * @param {String} url The url of the requested product.
     * @param {module:api/AmzApi~requestBuyRecommendationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BuyRecommendationResponse}
     */
    requestBuyRecommendation(url, callback) {
      let postBody = null;
      // verify the required parameter 'url' is set
      if (url === undefined || url === null) {
        throw new Error("Missing the required parameter 'url' when calling requestBuyRecommendation");
      }

      let pathParams = {
      };
      let queryParams = {
        'url': url
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BuyRecommendationResponse;
      return this.apiClient.callApi(
        '/amz/amazon-lookup-buy-recommendations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the requestProduct operation.
     * @callback module:api/AmzApi~requestProductCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProductDetailsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * lookup product information
     * 
     * @param {String} url The url of the requested product.
     * @param {Object} opts Optional parameters
     * @param {String} [size] Size parameter if available.
     * @param {module:api/AmzApi~requestProductCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProductDetailsResponse}
     */
    requestProduct(url, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'url' is set
      if (url === undefined || url === null) {
        throw new Error("Missing the required parameter 'url' when calling requestProduct");
      }

      let pathParams = {
      };
      let queryParams = {
        'url': url,
        'size': opts['size']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProductDetailsResponse;
      return this.apiClient.callApi(
        '/amz/amazon-lookup-product', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sortOptions operation.
     * @callback module:api/AmzApi~sortOptionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SortOptionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * request available sort options to use in keyword search
     * 
     * @param {module:api/AmzApi~sortOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SortOptionResponse}
     */
    sortOptions(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SortOptionResponse;
      return this.apiClient.callApi(
        '/amz/sort-options', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
