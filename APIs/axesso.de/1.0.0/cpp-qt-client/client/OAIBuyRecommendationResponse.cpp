/**
 * Axesso Api
 * Use this api to fetch information to Amazon products and more.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@axesso.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBuyRecommendationResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBuyRecommendationResponse::OAIBuyRecommendationResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBuyRecommendationResponse::OAIBuyRecommendationResponse() {
    this->initializeModel();
}

OAIBuyRecommendationResponse::~OAIBuyRecommendationResponse() {}

void OAIBuyRecommendationResponse::initializeModel() {

    m_buy_recommendations_isSet = false;
    m_buy_recommendations_isValid = false;

    m_number_of_products_isSet = false;
    m_number_of_products_isValid = false;

    m_response_message_isSet = false;
    m_response_message_isValid = false;

    m_response_status_isSet = false;
    m_response_status_isValid = false;
}

void OAIBuyRecommendationResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBuyRecommendationResponse::fromJsonObject(QJsonObject json) {

    m_buy_recommendations_isValid = ::OpenAPI::fromJsonValue(m_buy_recommendations, json[QString("buyRecommendations")]);
    m_buy_recommendations_isSet = !json[QString("buyRecommendations")].isNull() && m_buy_recommendations_isValid;

    m_number_of_products_isValid = ::OpenAPI::fromJsonValue(m_number_of_products, json[QString("numberOfProducts")]);
    m_number_of_products_isSet = !json[QString("numberOfProducts")].isNull() && m_number_of_products_isValid;

    m_response_message_isValid = ::OpenAPI::fromJsonValue(m_response_message, json[QString("responseMessage")]);
    m_response_message_isSet = !json[QString("responseMessage")].isNull() && m_response_message_isValid;

    m_response_status_isValid = ::OpenAPI::fromJsonValue(m_response_status, json[QString("responseStatus")]);
    m_response_status_isSet = !json[QString("responseStatus")].isNull() && m_response_status_isValid;
}

QString OAIBuyRecommendationResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBuyRecommendationResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_buy_recommendations.size() > 0) {
        obj.insert(QString("buyRecommendations"), ::OpenAPI::toJsonValue(m_buy_recommendations));
    }
    if (m_number_of_products_isSet) {
        obj.insert(QString("numberOfProducts"), ::OpenAPI::toJsonValue(m_number_of_products));
    }
    if (m_response_message_isSet) {
        obj.insert(QString("responseMessage"), ::OpenAPI::toJsonValue(m_response_message));
    }
    if (m_response_status_isSet) {
        obj.insert(QString("responseStatus"), ::OpenAPI::toJsonValue(m_response_status));
    }
    return obj;
}

QList<QString> OAIBuyRecommendationResponse::getBuyRecommendations() const {
    return m_buy_recommendations;
}
void OAIBuyRecommendationResponse::setBuyRecommendations(const QList<QString> &buy_recommendations) {
    m_buy_recommendations = buy_recommendations;
    m_buy_recommendations_isSet = true;
}

bool OAIBuyRecommendationResponse::is_buy_recommendations_Set() const{
    return m_buy_recommendations_isSet;
}

bool OAIBuyRecommendationResponse::is_buy_recommendations_Valid() const{
    return m_buy_recommendations_isValid;
}

qint64 OAIBuyRecommendationResponse::getNumberOfProducts() const {
    return m_number_of_products;
}
void OAIBuyRecommendationResponse::setNumberOfProducts(const qint64 &number_of_products) {
    m_number_of_products = number_of_products;
    m_number_of_products_isSet = true;
}

bool OAIBuyRecommendationResponse::is_number_of_products_Set() const{
    return m_number_of_products_isSet;
}

bool OAIBuyRecommendationResponse::is_number_of_products_Valid() const{
    return m_number_of_products_isValid;
}

QString OAIBuyRecommendationResponse::getResponseMessage() const {
    return m_response_message;
}
void OAIBuyRecommendationResponse::setResponseMessage(const QString &response_message) {
    m_response_message = response_message;
    m_response_message_isSet = true;
}

bool OAIBuyRecommendationResponse::is_response_message_Set() const{
    return m_response_message_isSet;
}

bool OAIBuyRecommendationResponse::is_response_message_Valid() const{
    return m_response_message_isValid;
}

QString OAIBuyRecommendationResponse::getResponseStatus() const {
    return m_response_status;
}
void OAIBuyRecommendationResponse::setResponseStatus(const QString &response_status) {
    m_response_status = response_status;
    m_response_status_isSet = true;
}

bool OAIBuyRecommendationResponse::is_response_status_Set() const{
    return m_response_status_isSet;
}

bool OAIBuyRecommendationResponse::is_response_status_Valid() const{
    return m_response_status_isValid;
}

bool OAIBuyRecommendationResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_buy_recommendations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_of_products_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_response_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_response_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBuyRecommendationResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
