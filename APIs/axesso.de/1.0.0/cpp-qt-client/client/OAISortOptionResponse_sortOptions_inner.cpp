/**
 * Axesso Api
 * Use this api to fetch information to Amazon products and more.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@axesso.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISortOptionResponse_sortOptions_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISortOptionResponse_sortOptions_inner::OAISortOptionResponse_sortOptions_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISortOptionResponse_sortOptions_inner::OAISortOptionResponse_sortOptions_inner() {
    this->initializeModel();
}

OAISortOptionResponse_sortOptions_inner::~OAISortOptionResponse_sortOptions_inner() {}

void OAISortOptionResponse_sortOptions_inner::initializeModel() {

    m_order_isSet = false;
    m_order_isValid = false;

    m_sort_name_isSet = false;
    m_sort_name_isValid = false;

    m_strategy_isSet = false;
    m_strategy_isValid = false;
}

void OAISortOptionResponse_sortOptions_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISortOptionResponse_sortOptions_inner::fromJsonObject(QJsonObject json) {

    m_order_isValid = ::OpenAPI::fromJsonValue(m_order, json[QString("order")]);
    m_order_isSet = !json[QString("order")].isNull() && m_order_isValid;

    m_sort_name_isValid = ::OpenAPI::fromJsonValue(m_sort_name, json[QString("sortName")]);
    m_sort_name_isSet = !json[QString("sortName")].isNull() && m_sort_name_isValid;

    m_strategy_isValid = ::OpenAPI::fromJsonValue(m_strategy, json[QString("strategy")]);
    m_strategy_isSet = !json[QString("strategy")].isNull() && m_strategy_isValid;
}

QString OAISortOptionResponse_sortOptions_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISortOptionResponse_sortOptions_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_order_isSet) {
        obj.insert(QString("order"), ::OpenAPI::toJsonValue(m_order));
    }
    if (m_sort_name_isSet) {
        obj.insert(QString("sortName"), ::OpenAPI::toJsonValue(m_sort_name));
    }
    if (m_strategy_isSet) {
        obj.insert(QString("strategy"), ::OpenAPI::toJsonValue(m_strategy));
    }
    return obj;
}

qint64 OAISortOptionResponse_sortOptions_inner::getOrder() const {
    return m_order;
}
void OAISortOptionResponse_sortOptions_inner::setOrder(const qint64 &order) {
    m_order = order;
    m_order_isSet = true;
}

bool OAISortOptionResponse_sortOptions_inner::is_order_Set() const{
    return m_order_isSet;
}

bool OAISortOptionResponse_sortOptions_inner::is_order_Valid() const{
    return m_order_isValid;
}

QString OAISortOptionResponse_sortOptions_inner::getSortName() const {
    return m_sort_name;
}
void OAISortOptionResponse_sortOptions_inner::setSortName(const QString &sort_name) {
    m_sort_name = sort_name;
    m_sort_name_isSet = true;
}

bool OAISortOptionResponse_sortOptions_inner::is_sort_name_Set() const{
    return m_sort_name_isSet;
}

bool OAISortOptionResponse_sortOptions_inner::is_sort_name_Valid() const{
    return m_sort_name_isValid;
}

QString OAISortOptionResponse_sortOptions_inner::getStrategy() const {
    return m_strategy;
}
void OAISortOptionResponse_sortOptions_inner::setStrategy(const QString &strategy) {
    m_strategy = strategy;
    m_strategy_isSet = true;
}

bool OAISortOptionResponse_sortOptions_inner::is_strategy_Set() const{
    return m_strategy_isSet;
}

bool OAISortOptionResponse_sortOptions_inner::is_strategy_Valid() const{
    return m_strategy_isValid;
}

bool OAISortOptionResponse_sortOptions_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_order_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sort_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_strategy_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISortOptionResponse_sortOptions_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
