/**
 * Axesso Api
 * Use this api to fetch information to Amazon products and more.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@axesso.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIKeywordSearchResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIKeywordSearchResponse::OAIKeywordSearchResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIKeywordSearchResponse::OAIKeywordSearchResponse() {
    this->initializeModel();
}

OAIKeywordSearchResponse::~OAIKeywordSearchResponse() {}

void OAIKeywordSearchResponse::initializeModel() {

    m_domain_code_isSet = false;
    m_domain_code_isValid = false;

    m_found_products_isSet = false;
    m_found_products_isValid = false;

    m_keyword_isSet = false;
    m_keyword_isValid = false;

    m_number_of_products_isSet = false;
    m_number_of_products_isValid = false;

    m_response_message_isSet = false;
    m_response_message_isValid = false;

    m_response_status_isSet = false;
    m_response_status_isValid = false;

    m_sort_strategy_isSet = false;
    m_sort_strategy_isValid = false;
}

void OAIKeywordSearchResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIKeywordSearchResponse::fromJsonObject(QJsonObject json) {

    m_domain_code_isValid = ::OpenAPI::fromJsonValue(m_domain_code, json[QString("domainCode")]);
    m_domain_code_isSet = !json[QString("domainCode")].isNull() && m_domain_code_isValid;

    m_found_products_isValid = ::OpenAPI::fromJsonValue(m_found_products, json[QString("foundProducts")]);
    m_found_products_isSet = !json[QString("foundProducts")].isNull() && m_found_products_isValid;

    m_keyword_isValid = ::OpenAPI::fromJsonValue(m_keyword, json[QString("keyword")]);
    m_keyword_isSet = !json[QString("keyword")].isNull() && m_keyword_isValid;

    m_number_of_products_isValid = ::OpenAPI::fromJsonValue(m_number_of_products, json[QString("numberOfProducts")]);
    m_number_of_products_isSet = !json[QString("numberOfProducts")].isNull() && m_number_of_products_isValid;

    m_response_message_isValid = ::OpenAPI::fromJsonValue(m_response_message, json[QString("responseMessage")]);
    m_response_message_isSet = !json[QString("responseMessage")].isNull() && m_response_message_isValid;

    m_response_status_isValid = ::OpenAPI::fromJsonValue(m_response_status, json[QString("responseStatus")]);
    m_response_status_isSet = !json[QString("responseStatus")].isNull() && m_response_status_isValid;

    m_sort_strategy_isValid = ::OpenAPI::fromJsonValue(m_sort_strategy, json[QString("sortStrategy")]);
    m_sort_strategy_isSet = !json[QString("sortStrategy")].isNull() && m_sort_strategy_isValid;
}

QString OAIKeywordSearchResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIKeywordSearchResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_domain_code_isSet) {
        obj.insert(QString("domainCode"), ::OpenAPI::toJsonValue(m_domain_code));
    }
    if (m_found_products.size() > 0) {
        obj.insert(QString("foundProducts"), ::OpenAPI::toJsonValue(m_found_products));
    }
    if (m_keyword_isSet) {
        obj.insert(QString("keyword"), ::OpenAPI::toJsonValue(m_keyword));
    }
    if (m_number_of_products_isSet) {
        obj.insert(QString("numberOfProducts"), ::OpenAPI::toJsonValue(m_number_of_products));
    }
    if (m_response_message_isSet) {
        obj.insert(QString("responseMessage"), ::OpenAPI::toJsonValue(m_response_message));
    }
    if (m_response_status_isSet) {
        obj.insert(QString("responseStatus"), ::OpenAPI::toJsonValue(m_response_status));
    }
    if (m_sort_strategy_isSet) {
        obj.insert(QString("sortStrategy"), ::OpenAPI::toJsonValue(m_sort_strategy));
    }
    return obj;
}

QString OAIKeywordSearchResponse::getDomainCode() const {
    return m_domain_code;
}
void OAIKeywordSearchResponse::setDomainCode(const QString &domain_code) {
    m_domain_code = domain_code;
    m_domain_code_isSet = true;
}

bool OAIKeywordSearchResponse::is_domain_code_Set() const{
    return m_domain_code_isSet;
}

bool OAIKeywordSearchResponse::is_domain_code_Valid() const{
    return m_domain_code_isValid;
}

QList<QString> OAIKeywordSearchResponse::getFoundProducts() const {
    return m_found_products;
}
void OAIKeywordSearchResponse::setFoundProducts(const QList<QString> &found_products) {
    m_found_products = found_products;
    m_found_products_isSet = true;
}

bool OAIKeywordSearchResponse::is_found_products_Set() const{
    return m_found_products_isSet;
}

bool OAIKeywordSearchResponse::is_found_products_Valid() const{
    return m_found_products_isValid;
}

QString OAIKeywordSearchResponse::getKeyword() const {
    return m_keyword;
}
void OAIKeywordSearchResponse::setKeyword(const QString &keyword) {
    m_keyword = keyword;
    m_keyword_isSet = true;
}

bool OAIKeywordSearchResponse::is_keyword_Set() const{
    return m_keyword_isSet;
}

bool OAIKeywordSearchResponse::is_keyword_Valid() const{
    return m_keyword_isValid;
}

qint64 OAIKeywordSearchResponse::getNumberOfProducts() const {
    return m_number_of_products;
}
void OAIKeywordSearchResponse::setNumberOfProducts(const qint64 &number_of_products) {
    m_number_of_products = number_of_products;
    m_number_of_products_isSet = true;
}

bool OAIKeywordSearchResponse::is_number_of_products_Set() const{
    return m_number_of_products_isSet;
}

bool OAIKeywordSearchResponse::is_number_of_products_Valid() const{
    return m_number_of_products_isValid;
}

QString OAIKeywordSearchResponse::getResponseMessage() const {
    return m_response_message;
}
void OAIKeywordSearchResponse::setResponseMessage(const QString &response_message) {
    m_response_message = response_message;
    m_response_message_isSet = true;
}

bool OAIKeywordSearchResponse::is_response_message_Set() const{
    return m_response_message_isSet;
}

bool OAIKeywordSearchResponse::is_response_message_Valid() const{
    return m_response_message_isValid;
}

QString OAIKeywordSearchResponse::getResponseStatus() const {
    return m_response_status;
}
void OAIKeywordSearchResponse::setResponseStatus(const QString &response_status) {
    m_response_status = response_status;
    m_response_status_isSet = true;
}

bool OAIKeywordSearchResponse::is_response_status_Set() const{
    return m_response_status_isSet;
}

bool OAIKeywordSearchResponse::is_response_status_Valid() const{
    return m_response_status_isValid;
}

QString OAIKeywordSearchResponse::getSortStrategy() const {
    return m_sort_strategy;
}
void OAIKeywordSearchResponse::setSortStrategy(const QString &sort_strategy) {
    m_sort_strategy = sort_strategy;
    m_sort_strategy_isSet = true;
}

bool OAIKeywordSearchResponse::is_sort_strategy_Set() const{
    return m_sort_strategy_isSet;
}

bool OAIKeywordSearchResponse::is_sort_strategy_Valid() const{
    return m_sort_strategy_isValid;
}

bool OAIKeywordSearchResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_domain_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_found_products.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_keyword_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_of_products_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_response_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_response_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sort_strategy_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIKeywordSearchResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
