/**
 * Axesso Api
 * Use this api to fetch information to Amazon products and more.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@axesso.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISortOptionResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISortOptionResponse::OAISortOptionResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISortOptionResponse::OAISortOptionResponse() {
    this->initializeModel();
}

OAISortOptionResponse::~OAISortOptionResponse() {}

void OAISortOptionResponse::initializeModel() {

    m_response_message_isSet = false;
    m_response_message_isValid = false;

    m_response_status_isSet = false;
    m_response_status_isValid = false;

    m_result_size_isSet = false;
    m_result_size_isValid = false;

    m_sort_options_isSet = false;
    m_sort_options_isValid = false;
}

void OAISortOptionResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISortOptionResponse::fromJsonObject(QJsonObject json) {

    m_response_message_isValid = ::OpenAPI::fromJsonValue(m_response_message, json[QString("responseMessage")]);
    m_response_message_isSet = !json[QString("responseMessage")].isNull() && m_response_message_isValid;

    m_response_status_isValid = ::OpenAPI::fromJsonValue(m_response_status, json[QString("responseStatus")]);
    m_response_status_isSet = !json[QString("responseStatus")].isNull() && m_response_status_isValid;

    m_result_size_isValid = ::OpenAPI::fromJsonValue(m_result_size, json[QString("resultSize")]);
    m_result_size_isSet = !json[QString("resultSize")].isNull() && m_result_size_isValid;

    m_sort_options_isValid = ::OpenAPI::fromJsonValue(m_sort_options, json[QString("sortOptions")]);
    m_sort_options_isSet = !json[QString("sortOptions")].isNull() && m_sort_options_isValid;
}

QString OAISortOptionResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISortOptionResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_response_message_isSet) {
        obj.insert(QString("responseMessage"), ::OpenAPI::toJsonValue(m_response_message));
    }
    if (m_response_status_isSet) {
        obj.insert(QString("responseStatus"), ::OpenAPI::toJsonValue(m_response_status));
    }
    if (m_result_size_isSet) {
        obj.insert(QString("resultSize"), ::OpenAPI::toJsonValue(m_result_size));
    }
    if (m_sort_options.size() > 0) {
        obj.insert(QString("sortOptions"), ::OpenAPI::toJsonValue(m_sort_options));
    }
    return obj;
}

QString OAISortOptionResponse::getResponseMessage() const {
    return m_response_message;
}
void OAISortOptionResponse::setResponseMessage(const QString &response_message) {
    m_response_message = response_message;
    m_response_message_isSet = true;
}

bool OAISortOptionResponse::is_response_message_Set() const{
    return m_response_message_isSet;
}

bool OAISortOptionResponse::is_response_message_Valid() const{
    return m_response_message_isValid;
}

QString OAISortOptionResponse::getResponseStatus() const {
    return m_response_status;
}
void OAISortOptionResponse::setResponseStatus(const QString &response_status) {
    m_response_status = response_status;
    m_response_status_isSet = true;
}

bool OAISortOptionResponse::is_response_status_Set() const{
    return m_response_status_isSet;
}

bool OAISortOptionResponse::is_response_status_Valid() const{
    return m_response_status_isValid;
}

qint64 OAISortOptionResponse::getResultSize() const {
    return m_result_size;
}
void OAISortOptionResponse::setResultSize(const qint64 &result_size) {
    m_result_size = result_size;
    m_result_size_isSet = true;
}

bool OAISortOptionResponse::is_result_size_Set() const{
    return m_result_size_isSet;
}

bool OAISortOptionResponse::is_result_size_Valid() const{
    return m_result_size_isValid;
}

QList<OAISortOptionResponse_sortOptions_inner> OAISortOptionResponse::getSortOptions() const {
    return m_sort_options;
}
void OAISortOptionResponse::setSortOptions(const QList<OAISortOptionResponse_sortOptions_inner> &sort_options) {
    m_sort_options = sort_options;
    m_sort_options_isSet = true;
}

bool OAISortOptionResponse::is_sort_options_Set() const{
    return m_sort_options_isSet;
}

bool OAISortOptionResponse::is_sort_options_Valid() const{
    return m_sort_options_isValid;
}

bool OAISortOptionResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_response_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_response_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_result_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sort_options.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISortOptionResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
