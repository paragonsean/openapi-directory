# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ManageQuery(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, es_rules: str=None, name: str=None, qb_rules: str=None, short_code: str=None):
        """ManageQuery - a model defined in OpenAPI

        :param es_rules: The es_rules of this ManageQuery.
        :param name: The name of this ManageQuery.
        :param qb_rules: The qb_rules of this ManageQuery.
        :param short_code: The short_code of this ManageQuery.
        """
        self.openapi_types = {
            'es_rules': str,
            'name': str,
            'qb_rules': str,
            'short_code': str
        }

        self.attribute_map = {
            'es_rules': 'esRules',
            'name': 'name',
            'qb_rules': 'qbRules',
            'short_code': 'shortCode'
        }

        self._es_rules = es_rules
        self._name = name
        self._qb_rules = qb_rules
        self._short_code = short_code

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ManageQuery':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ManageQuery of this ManageQuery.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def es_rules(self):
        """Gets the es_rules of this ManageQuery.


        :return: The es_rules of this ManageQuery.
        :rtype: str
        """
        return self._es_rules

    @es_rules.setter
    def es_rules(self, es_rules):
        """Sets the es_rules of this ManageQuery.


        :param es_rules: The es_rules of this ManageQuery.
        :type es_rules: str
        """

        self._es_rules = es_rules

    @property
    def name(self):
        """Gets the name of this ManageQuery.


        :return: The name of this ManageQuery.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ManageQuery.


        :param name: The name of this ManageQuery.
        :type name: str
        """

        self._name = name

    @property
    def qb_rules(self):
        """Gets the qb_rules of this ManageQuery.


        :return: The qb_rules of this ManageQuery.
        :rtype: str
        """
        return self._qb_rules

    @qb_rules.setter
    def qb_rules(self, qb_rules):
        """Sets the qb_rules of this ManageQuery.


        :param qb_rules: The qb_rules of this ManageQuery.
        :type qb_rules: str
        """

        self._qb_rules = qb_rules

    @property
    def short_code(self):
        """Gets the short_code of this ManageQuery.


        :return: The short_code of this ManageQuery.
        :rtype: str
        """
        return self._short_code

    @short_code.setter
    def short_code(self, short_code):
        """Sets the short_code of this ManageQuery.


        :param short_code: The short_code of this ManageQuery.
        :type short_code: str
        """

        self._short_code = short_code
