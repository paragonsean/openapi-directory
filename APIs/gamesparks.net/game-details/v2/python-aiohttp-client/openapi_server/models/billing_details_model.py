# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BillingDetailsModel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, building: str=None, city: str=None, company_name: str=None, country: str=None, email1: str=None, email2: str=None, email3: str=None, first_name1: str=None, first_name2: str=None, first_name3: str=None, last_name1: str=None, last_name2: str=None, last_name3: str=None, postcode: str=None, state: str=None, street: str=None, tax_number: str=None):
        """BillingDetailsModel - a model defined in OpenAPI

        :param building: The building of this BillingDetailsModel.
        :param city: The city of this BillingDetailsModel.
        :param company_name: The company_name of this BillingDetailsModel.
        :param country: The country of this BillingDetailsModel.
        :param email1: The email1 of this BillingDetailsModel.
        :param email2: The email2 of this BillingDetailsModel.
        :param email3: The email3 of this BillingDetailsModel.
        :param first_name1: The first_name1 of this BillingDetailsModel.
        :param first_name2: The first_name2 of this BillingDetailsModel.
        :param first_name3: The first_name3 of this BillingDetailsModel.
        :param last_name1: The last_name1 of this BillingDetailsModel.
        :param last_name2: The last_name2 of this BillingDetailsModel.
        :param last_name3: The last_name3 of this BillingDetailsModel.
        :param postcode: The postcode of this BillingDetailsModel.
        :param state: The state of this BillingDetailsModel.
        :param street: The street of this BillingDetailsModel.
        :param tax_number: The tax_number of this BillingDetailsModel.
        """
        self.openapi_types = {
            'building': str,
            'city': str,
            'company_name': str,
            'country': str,
            'email1': str,
            'email2': str,
            'email3': str,
            'first_name1': str,
            'first_name2': str,
            'first_name3': str,
            'last_name1': str,
            'last_name2': str,
            'last_name3': str,
            'postcode': str,
            'state': str,
            'street': str,
            'tax_number': str
        }

        self.attribute_map = {
            'building': 'building',
            'city': 'city',
            'company_name': 'companyName',
            'country': 'country',
            'email1': 'email1',
            'email2': 'email2',
            'email3': 'email3',
            'first_name1': 'firstName1',
            'first_name2': 'firstName2',
            'first_name3': 'firstName3',
            'last_name1': 'lastName1',
            'last_name2': 'lastName2',
            'last_name3': 'lastName3',
            'postcode': 'postcode',
            'state': 'state',
            'street': 'street',
            'tax_number': 'taxNumber'
        }

        self._building = building
        self._city = city
        self._company_name = company_name
        self._country = country
        self._email1 = email1
        self._email2 = email2
        self._email3 = email3
        self._first_name1 = first_name1
        self._first_name2 = first_name2
        self._first_name3 = first_name3
        self._last_name1 = last_name1
        self._last_name2 = last_name2
        self._last_name3 = last_name3
        self._postcode = postcode
        self._state = state
        self._street = street
        self._tax_number = tax_number

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BillingDetailsModel':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BillingDetailsModel of this BillingDetailsModel.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def building(self):
        """Gets the building of this BillingDetailsModel.


        :return: The building of this BillingDetailsModel.
        :rtype: str
        """
        return self._building

    @building.setter
    def building(self, building):
        """Sets the building of this BillingDetailsModel.


        :param building: The building of this BillingDetailsModel.
        :type building: str
        """
        if building is None:
            raise ValueError("Invalid value for `building`, must not be `None`")

        self._building = building

    @property
    def city(self):
        """Gets the city of this BillingDetailsModel.


        :return: The city of this BillingDetailsModel.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this BillingDetailsModel.


        :param city: The city of this BillingDetailsModel.
        :type city: str
        """
        if city is None:
            raise ValueError("Invalid value for `city`, must not be `None`")

        self._city = city

    @property
    def company_name(self):
        """Gets the company_name of this BillingDetailsModel.


        :return: The company_name of this BillingDetailsModel.
        :rtype: str
        """
        return self._company_name

    @company_name.setter
    def company_name(self, company_name):
        """Sets the company_name of this BillingDetailsModel.


        :param company_name: The company_name of this BillingDetailsModel.
        :type company_name: str
        """
        if company_name is None:
            raise ValueError("Invalid value for `company_name`, must not be `None`")

        self._company_name = company_name

    @property
    def country(self):
        """Gets the country of this BillingDetailsModel.


        :return: The country of this BillingDetailsModel.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this BillingDetailsModel.


        :param country: The country of this BillingDetailsModel.
        :type country: str
        """
        if country is None:
            raise ValueError("Invalid value for `country`, must not be `None`")

        self._country = country

    @property
    def email1(self):
        """Gets the email1 of this BillingDetailsModel.


        :return: The email1 of this BillingDetailsModel.
        :rtype: str
        """
        return self._email1

    @email1.setter
    def email1(self, email1):
        """Sets the email1 of this BillingDetailsModel.


        :param email1: The email1 of this BillingDetailsModel.
        :type email1: str
        """
        if email1 is None:
            raise ValueError("Invalid value for `email1`, must not be `None`")

        self._email1 = email1

    @property
    def email2(self):
        """Gets the email2 of this BillingDetailsModel.


        :return: The email2 of this BillingDetailsModel.
        :rtype: str
        """
        return self._email2

    @email2.setter
    def email2(self, email2):
        """Sets the email2 of this BillingDetailsModel.


        :param email2: The email2 of this BillingDetailsModel.
        :type email2: str
        """

        self._email2 = email2

    @property
    def email3(self):
        """Gets the email3 of this BillingDetailsModel.


        :return: The email3 of this BillingDetailsModel.
        :rtype: str
        """
        return self._email3

    @email3.setter
    def email3(self, email3):
        """Sets the email3 of this BillingDetailsModel.


        :param email3: The email3 of this BillingDetailsModel.
        :type email3: str
        """

        self._email3 = email3

    @property
    def first_name1(self):
        """Gets the first_name1 of this BillingDetailsModel.


        :return: The first_name1 of this BillingDetailsModel.
        :rtype: str
        """
        return self._first_name1

    @first_name1.setter
    def first_name1(self, first_name1):
        """Sets the first_name1 of this BillingDetailsModel.


        :param first_name1: The first_name1 of this BillingDetailsModel.
        :type first_name1: str
        """
        if first_name1 is None:
            raise ValueError("Invalid value for `first_name1`, must not be `None`")

        self._first_name1 = first_name1

    @property
    def first_name2(self):
        """Gets the first_name2 of this BillingDetailsModel.


        :return: The first_name2 of this BillingDetailsModel.
        :rtype: str
        """
        return self._first_name2

    @first_name2.setter
    def first_name2(self, first_name2):
        """Sets the first_name2 of this BillingDetailsModel.


        :param first_name2: The first_name2 of this BillingDetailsModel.
        :type first_name2: str
        """

        self._first_name2 = first_name2

    @property
    def first_name3(self):
        """Gets the first_name3 of this BillingDetailsModel.


        :return: The first_name3 of this BillingDetailsModel.
        :rtype: str
        """
        return self._first_name3

    @first_name3.setter
    def first_name3(self, first_name3):
        """Sets the first_name3 of this BillingDetailsModel.


        :param first_name3: The first_name3 of this BillingDetailsModel.
        :type first_name3: str
        """

        self._first_name3 = first_name3

    @property
    def last_name1(self):
        """Gets the last_name1 of this BillingDetailsModel.


        :return: The last_name1 of this BillingDetailsModel.
        :rtype: str
        """
        return self._last_name1

    @last_name1.setter
    def last_name1(self, last_name1):
        """Sets the last_name1 of this BillingDetailsModel.


        :param last_name1: The last_name1 of this BillingDetailsModel.
        :type last_name1: str
        """
        if last_name1 is None:
            raise ValueError("Invalid value for `last_name1`, must not be `None`")

        self._last_name1 = last_name1

    @property
    def last_name2(self):
        """Gets the last_name2 of this BillingDetailsModel.


        :return: The last_name2 of this BillingDetailsModel.
        :rtype: str
        """
        return self._last_name2

    @last_name2.setter
    def last_name2(self, last_name2):
        """Sets the last_name2 of this BillingDetailsModel.


        :param last_name2: The last_name2 of this BillingDetailsModel.
        :type last_name2: str
        """

        self._last_name2 = last_name2

    @property
    def last_name3(self):
        """Gets the last_name3 of this BillingDetailsModel.


        :return: The last_name3 of this BillingDetailsModel.
        :rtype: str
        """
        return self._last_name3

    @last_name3.setter
    def last_name3(self, last_name3):
        """Sets the last_name3 of this BillingDetailsModel.


        :param last_name3: The last_name3 of this BillingDetailsModel.
        :type last_name3: str
        """

        self._last_name3 = last_name3

    @property
    def postcode(self):
        """Gets the postcode of this BillingDetailsModel.


        :return: The postcode of this BillingDetailsModel.
        :rtype: str
        """
        return self._postcode

    @postcode.setter
    def postcode(self, postcode):
        """Sets the postcode of this BillingDetailsModel.


        :param postcode: The postcode of this BillingDetailsModel.
        :type postcode: str
        """
        if postcode is None:
            raise ValueError("Invalid value for `postcode`, must not be `None`")

        self._postcode = postcode

    @property
    def state(self):
        """Gets the state of this BillingDetailsModel.


        :return: The state of this BillingDetailsModel.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this BillingDetailsModel.


        :param state: The state of this BillingDetailsModel.
        :type state: str
        """

        self._state = state

    @property
    def street(self):
        """Gets the street of this BillingDetailsModel.


        :return: The street of this BillingDetailsModel.
        :rtype: str
        """
        return self._street

    @street.setter
    def street(self, street):
        """Sets the street of this BillingDetailsModel.


        :param street: The street of this BillingDetailsModel.
        :type street: str
        """
        if street is None:
            raise ValueError("Invalid value for `street`, must not be `None`")

        self._street = street

    @property
    def tax_number(self):
        """Gets the tax_number of this BillingDetailsModel.


        :return: The tax_number of this BillingDetailsModel.
        :rtype: str
        """
        return self._tax_number

    @tax_number.setter
    def tax_number(self, tax_number):
        """Sets the tax_number of this BillingDetailsModel.


        :param tax_number: The tax_number of this BillingDetailsModel.
        :type tax_number: str
        """

        self._tax_number = tax_number
