# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SegmentQueryFilterModel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, key: str=None, name: str=None, options: List[object]=None, type: str=None):
        """SegmentQueryFilterModel - a model defined in OpenAPI

        :param key: The key of this SegmentQueryFilterModel.
        :param name: The name of this SegmentQueryFilterModel.
        :param options: The options of this SegmentQueryFilterModel.
        :param type: The type of this SegmentQueryFilterModel.
        """
        self.openapi_types = {
            'key': str,
            'name': str,
            'options': List[object],
            'type': str
        }

        self.attribute_map = {
            'key': 'key',
            'name': 'name',
            'options': 'options',
            'type': 'type'
        }

        self._key = key
        self._name = name
        self._options = options
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SegmentQueryFilterModel':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SegmentQueryFilterModel of this SegmentQueryFilterModel.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def key(self):
        """Gets the key of this SegmentQueryFilterModel.


        :return: The key of this SegmentQueryFilterModel.
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this SegmentQueryFilterModel.


        :param key: The key of this SegmentQueryFilterModel.
        :type key: str
        """

        self._key = key

    @property
    def name(self):
        """Gets the name of this SegmentQueryFilterModel.


        :return: The name of this SegmentQueryFilterModel.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SegmentQueryFilterModel.


        :param name: The name of this SegmentQueryFilterModel.
        :type name: str
        """

        self._name = name

    @property
    def options(self):
        """Gets the options of this SegmentQueryFilterModel.


        :return: The options of this SegmentQueryFilterModel.
        :rtype: List[object]
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this SegmentQueryFilterModel.


        :param options: The options of this SegmentQueryFilterModel.
        :type options: List[object]
        """

        self._options = options

    @property
    def type(self):
        """Gets the type of this SegmentQueryFilterModel.


        :return: The type of this SegmentQueryFilterModel.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this SegmentQueryFilterModel.


        :param type: The type of this SegmentQueryFilterModel.
        :type type: str
        """

        self._type = type
