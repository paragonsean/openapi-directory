# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ManageSnippet(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, groups: List[str]=None, name: str=None, script: str=None, script_data: str=None, short_code: str=None, template: str=None):
        """ManageSnippet - a model defined in OpenAPI

        :param groups: The groups of this ManageSnippet.
        :param name: The name of this ManageSnippet.
        :param script: The script of this ManageSnippet.
        :param script_data: The script_data of this ManageSnippet.
        :param short_code: The short_code of this ManageSnippet.
        :param template: The template of this ManageSnippet.
        """
        self.openapi_types = {
            'groups': List[str],
            'name': str,
            'script': str,
            'script_data': str,
            'short_code': str,
            'template': str
        }

        self.attribute_map = {
            'groups': 'groups',
            'name': 'name',
            'script': 'script',
            'script_data': 'scriptData',
            'short_code': 'shortCode',
            'template': 'template'
        }

        self._groups = groups
        self._name = name
        self._script = script
        self._script_data = script_data
        self._short_code = short_code
        self._template = template

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ManageSnippet':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ManageSnippet of this ManageSnippet.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def groups(self):
        """Gets the groups of this ManageSnippet.


        :return: The groups of this ManageSnippet.
        :rtype: List[str]
        """
        return self._groups

    @groups.setter
    def groups(self, groups):
        """Sets the groups of this ManageSnippet.


        :param groups: The groups of this ManageSnippet.
        :type groups: List[str]
        """

        self._groups = groups

    @property
    def name(self):
        """Gets the name of this ManageSnippet.


        :return: The name of this ManageSnippet.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ManageSnippet.


        :param name: The name of this ManageSnippet.
        :type name: str
        """

        self._name = name

    @property
    def script(self):
        """Gets the script of this ManageSnippet.


        :return: The script of this ManageSnippet.
        :rtype: str
        """
        return self._script

    @script.setter
    def script(self, script):
        """Sets the script of this ManageSnippet.


        :param script: The script of this ManageSnippet.
        :type script: str
        """

        self._script = script

    @property
    def script_data(self):
        """Gets the script_data of this ManageSnippet.


        :return: The script_data of this ManageSnippet.
        :rtype: str
        """
        return self._script_data

    @script_data.setter
    def script_data(self, script_data):
        """Sets the script_data of this ManageSnippet.


        :param script_data: The script_data of this ManageSnippet.
        :type script_data: str
        """

        self._script_data = script_data

    @property
    def short_code(self):
        """Gets the short_code of this ManageSnippet.


        :return: The short_code of this ManageSnippet.
        :rtype: str
        """
        return self._short_code

    @short_code.setter
    def short_code(self, short_code):
        """Sets the short_code of this ManageSnippet.


        :param short_code: The short_code of this ManageSnippet.
        :type short_code: str
        """

        self._short_code = short_code

    @property
    def template(self):
        """Gets the template of this ManageSnippet.


        :return: The template of this ManageSnippet.
        :rtype: str
        """
        return self._template

    @template.setter
    def template(self, template):
        """Sets the template of this ManageSnippet.


        :param template: The template of this ManageSnippet.
        :type template: str
        """

        self._template = template
