# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GameRegionOptionDTO(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, region_code: str=None, region_name: str=None, selected: bool=None):
        """GameRegionOptionDTO - a model defined in OpenAPI

        :param region_code: The region_code of this GameRegionOptionDTO.
        :param region_name: The region_name of this GameRegionOptionDTO.
        :param selected: The selected of this GameRegionOptionDTO.
        """
        self.openapi_types = {
            'region_code': str,
            'region_name': str,
            'selected': bool
        }

        self.attribute_map = {
            'region_code': 'regionCode',
            'region_name': 'regionName',
            'selected': 'selected'
        }

        self._region_code = region_code
        self._region_name = region_name
        self._selected = selected

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GameRegionOptionDTO':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GameRegionOptionDTO of this GameRegionOptionDTO.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def region_code(self):
        """Gets the region_code of this GameRegionOptionDTO.


        :return: The region_code of this GameRegionOptionDTO.
        :rtype: str
        """
        return self._region_code

    @region_code.setter
    def region_code(self, region_code):
        """Sets the region_code of this GameRegionOptionDTO.


        :param region_code: The region_code of this GameRegionOptionDTO.
        :type region_code: str
        """

        self._region_code = region_code

    @property
    def region_name(self):
        """Gets the region_name of this GameRegionOptionDTO.


        :return: The region_name of this GameRegionOptionDTO.
        :rtype: str
        """
        return self._region_name

    @region_name.setter
    def region_name(self, region_name):
        """Sets the region_name of this GameRegionOptionDTO.


        :param region_name: The region_name of this GameRegionOptionDTO.
        :type region_name: str
        """

        self._region_name = region_name

    @property
    def selected(self):
        """Gets the selected of this GameRegionOptionDTO.


        :return: The selected of this GameRegionOptionDTO.
        :rtype: bool
        """
        return self._selected

    @selected.setter
    def selected(self, selected):
        """Sets the selected of this GameRegionOptionDTO.


        :param selected: The selected of this GameRegionOptionDTO.
        :type selected: bool
        """

        self._selected = selected
