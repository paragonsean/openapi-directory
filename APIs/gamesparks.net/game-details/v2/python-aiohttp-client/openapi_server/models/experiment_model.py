# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.experiment_config_model import ExperimentConfigModel
from openapi_server import util


class ExperimentModel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, active: bool=None, changed_fields_and_initial_values: object=None, complete: bool=None, config: ExperimentConfigModel=None, end_date: datetime=None, id: int=None, measurements: str=None, measurements_es_query: str=None, name: str=None, percent_hash: str=None, published_stages: List[str]=None, start_date: datetime=None):
        """ExperimentModel - a model defined in OpenAPI

        :param active: The active of this ExperimentModel.
        :param changed_fields_and_initial_values: The changed_fields_and_initial_values of this ExperimentModel.
        :param complete: The complete of this ExperimentModel.
        :param config: The config of this ExperimentModel.
        :param end_date: The end_date of this ExperimentModel.
        :param id: The id of this ExperimentModel.
        :param measurements: The measurements of this ExperimentModel.
        :param measurements_es_query: The measurements_es_query of this ExperimentModel.
        :param name: The name of this ExperimentModel.
        :param percent_hash: The percent_hash of this ExperimentModel.
        :param published_stages: The published_stages of this ExperimentModel.
        :param start_date: The start_date of this ExperimentModel.
        """
        self.openapi_types = {
            'active': bool,
            'changed_fields_and_initial_values': object,
            'complete': bool,
            'config': ExperimentConfigModel,
            'end_date': datetime,
            'id': int,
            'measurements': str,
            'measurements_es_query': str,
            'name': str,
            'percent_hash': str,
            'published_stages': List[str],
            'start_date': datetime
        }

        self.attribute_map = {
            'active': 'active',
            'changed_fields_and_initial_values': 'changedFieldsAndInitialValues',
            'complete': 'complete',
            'config': 'config',
            'end_date': 'endDate',
            'id': 'id',
            'measurements': 'measurements',
            'measurements_es_query': 'measurementsEsQuery',
            'name': 'name',
            'percent_hash': 'percentHash',
            'published_stages': 'publishedStages',
            'start_date': 'startDate'
        }

        self._active = active
        self._changed_fields_and_initial_values = changed_fields_and_initial_values
        self._complete = complete
        self._config = config
        self._end_date = end_date
        self._id = id
        self._measurements = measurements
        self._measurements_es_query = measurements_es_query
        self._name = name
        self._percent_hash = percent_hash
        self._published_stages = published_stages
        self._start_date = start_date

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ExperimentModel':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ExperimentModel of this ExperimentModel.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def active(self):
        """Gets the active of this ExperimentModel.


        :return: The active of this ExperimentModel.
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this ExperimentModel.


        :param active: The active of this ExperimentModel.
        :type active: bool
        """

        self._active = active

    @property
    def changed_fields_and_initial_values(self):
        """Gets the changed_fields_and_initial_values of this ExperimentModel.


        :return: The changed_fields_and_initial_values of this ExperimentModel.
        :rtype: object
        """
        return self._changed_fields_and_initial_values

    @changed_fields_and_initial_values.setter
    def changed_fields_and_initial_values(self, changed_fields_and_initial_values):
        """Sets the changed_fields_and_initial_values of this ExperimentModel.


        :param changed_fields_and_initial_values: The changed_fields_and_initial_values of this ExperimentModel.
        :type changed_fields_and_initial_values: object
        """

        self._changed_fields_and_initial_values = changed_fields_and_initial_values

    @property
    def complete(self):
        """Gets the complete of this ExperimentModel.


        :return: The complete of this ExperimentModel.
        :rtype: bool
        """
        return self._complete

    @complete.setter
    def complete(self, complete):
        """Sets the complete of this ExperimentModel.


        :param complete: The complete of this ExperimentModel.
        :type complete: bool
        """

        self._complete = complete

    @property
    def config(self):
        """Gets the config of this ExperimentModel.


        :return: The config of this ExperimentModel.
        :rtype: ExperimentConfigModel
        """
        return self._config

    @config.setter
    def config(self, config):
        """Sets the config of this ExperimentModel.


        :param config: The config of this ExperimentModel.
        :type config: ExperimentConfigModel
        """

        self._config = config

    @property
    def end_date(self):
        """Gets the end_date of this ExperimentModel.


        :return: The end_date of this ExperimentModel.
        :rtype: datetime
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this ExperimentModel.


        :param end_date: The end_date of this ExperimentModel.
        :type end_date: datetime
        """

        self._end_date = end_date

    @property
    def id(self):
        """Gets the id of this ExperimentModel.


        :return: The id of this ExperimentModel.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ExperimentModel.


        :param id: The id of this ExperimentModel.
        :type id: int
        """

        self._id = id

    @property
    def measurements(self):
        """Gets the measurements of this ExperimentModel.


        :return: The measurements of this ExperimentModel.
        :rtype: str
        """
        return self._measurements

    @measurements.setter
    def measurements(self, measurements):
        """Sets the measurements of this ExperimentModel.


        :param measurements: The measurements of this ExperimentModel.
        :type measurements: str
        """

        self._measurements = measurements

    @property
    def measurements_es_query(self):
        """Gets the measurements_es_query of this ExperimentModel.


        :return: The measurements_es_query of this ExperimentModel.
        :rtype: str
        """
        return self._measurements_es_query

    @measurements_es_query.setter
    def measurements_es_query(self, measurements_es_query):
        """Sets the measurements_es_query of this ExperimentModel.


        :param measurements_es_query: The measurements_es_query of this ExperimentModel.
        :type measurements_es_query: str
        """

        self._measurements_es_query = measurements_es_query

    @property
    def name(self):
        """Gets the name of this ExperimentModel.


        :return: The name of this ExperimentModel.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ExperimentModel.


        :param name: The name of this ExperimentModel.
        :type name: str
        """

        self._name = name

    @property
    def percent_hash(self):
        """Gets the percent_hash of this ExperimentModel.


        :return: The percent_hash of this ExperimentModel.
        :rtype: str
        """
        return self._percent_hash

    @percent_hash.setter
    def percent_hash(self, percent_hash):
        """Sets the percent_hash of this ExperimentModel.


        :param percent_hash: The percent_hash of this ExperimentModel.
        :type percent_hash: str
        """

        self._percent_hash = percent_hash

    @property
    def published_stages(self):
        """Gets the published_stages of this ExperimentModel.


        :return: The published_stages of this ExperimentModel.
        :rtype: List[str]
        """
        return self._published_stages

    @published_stages.setter
    def published_stages(self, published_stages):
        """Sets the published_stages of this ExperimentModel.


        :param published_stages: The published_stages of this ExperimentModel.
        :type published_stages: List[str]
        """

        self._published_stages = published_stages

    @property
    def start_date(self):
        """Gets the start_date of this ExperimentModel.


        :return: The start_date of this ExperimentModel.
        :rtype: datetime
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this ExperimentModel.


        :param start_date: The start_date of this ExperimentModel.
        :type start_date: datetime
        """

        self._start_date = start_date
