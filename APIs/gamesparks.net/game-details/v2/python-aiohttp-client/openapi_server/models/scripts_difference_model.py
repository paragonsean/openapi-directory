# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ScriptsDifferenceModel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bind: str=None, change_type: str=None, file_name: str=None, script1: str=None, script2: str=None, type: str=None):
        """ScriptsDifferenceModel - a model defined in OpenAPI

        :param bind: The bind of this ScriptsDifferenceModel.
        :param change_type: The change_type of this ScriptsDifferenceModel.
        :param file_name: The file_name of this ScriptsDifferenceModel.
        :param script1: The script1 of this ScriptsDifferenceModel.
        :param script2: The script2 of this ScriptsDifferenceModel.
        :param type: The type of this ScriptsDifferenceModel.
        """
        self.openapi_types = {
            'bind': str,
            'change_type': str,
            'file_name': str,
            'script1': str,
            'script2': str,
            'type': str
        }

        self.attribute_map = {
            'bind': 'bind',
            'change_type': 'changeType',
            'file_name': 'fileName',
            'script1': 'script1',
            'script2': 'script2',
            'type': 'type'
        }

        self._bind = bind
        self._change_type = change_type
        self._file_name = file_name
        self._script1 = script1
        self._script2 = script2
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ScriptsDifferenceModel':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ScriptsDifferenceModel of this ScriptsDifferenceModel.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bind(self):
        """Gets the bind of this ScriptsDifferenceModel.


        :return: The bind of this ScriptsDifferenceModel.
        :rtype: str
        """
        return self._bind

    @bind.setter
    def bind(self, bind):
        """Sets the bind of this ScriptsDifferenceModel.


        :param bind: The bind of this ScriptsDifferenceModel.
        :type bind: str
        """

        self._bind = bind

    @property
    def change_type(self):
        """Gets the change_type of this ScriptsDifferenceModel.


        :return: The change_type of this ScriptsDifferenceModel.
        :rtype: str
        """
        return self._change_type

    @change_type.setter
    def change_type(self, change_type):
        """Sets the change_type of this ScriptsDifferenceModel.


        :param change_type: The change_type of this ScriptsDifferenceModel.
        :type change_type: str
        """
        allowed_values = ["NOCHANGE", "ADDED", "CHANGED", "DELETED", "IGNORED", "CHANGED_CODE_INVALID", "CHANGED_NAME_INVALID"]  # noqa: E501
        if change_type not in allowed_values:
            raise ValueError(
                "Invalid value for `change_type` ({0}), must be one of {1}"
                .format(change_type, allowed_values)
            )

        self._change_type = change_type

    @property
    def file_name(self):
        """Gets the file_name of this ScriptsDifferenceModel.


        :return: The file_name of this ScriptsDifferenceModel.
        :rtype: str
        """
        return self._file_name

    @file_name.setter
    def file_name(self, file_name):
        """Sets the file_name of this ScriptsDifferenceModel.


        :param file_name: The file_name of this ScriptsDifferenceModel.
        :type file_name: str
        """

        self._file_name = file_name

    @property
    def script1(self):
        """Gets the script1 of this ScriptsDifferenceModel.


        :return: The script1 of this ScriptsDifferenceModel.
        :rtype: str
        """
        return self._script1

    @script1.setter
    def script1(self, script1):
        """Sets the script1 of this ScriptsDifferenceModel.


        :param script1: The script1 of this ScriptsDifferenceModel.
        :type script1: str
        """

        self._script1 = script1

    @property
    def script2(self):
        """Gets the script2 of this ScriptsDifferenceModel.


        :return: The script2 of this ScriptsDifferenceModel.
        :rtype: str
        """
        return self._script2

    @script2.setter
    def script2(self, script2):
        """Sets the script2 of this ScriptsDifferenceModel.


        :param script2: The script2 of this ScriptsDifferenceModel.
        :type script2: str
        """

        self._script2 = script2

    @property
    def type(self):
        """Gets the type of this ScriptsDifferenceModel.


        :return: The type of this ScriptsDifferenceModel.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ScriptsDifferenceModel.


        :param type: The type of this ScriptsDifferenceModel.
        :type type: str
        """

        self._type = type
