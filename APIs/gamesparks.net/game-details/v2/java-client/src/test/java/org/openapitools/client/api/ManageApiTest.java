/*
 * GameSparks Game Details API
 * The API to manage the GameSparks game details
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ManageItemSummary;
import org.openapitools.client.model.ManageQuery;
import org.openapitools.client.model.ManageResult;
import org.openapitools.client.model.ManageScreen;
import org.openapitools.client.model.ManageSnapshot;
import org.openapitools.client.model.ManageSnippet;
import org.openapitools.client.model.MessageModel;
import org.openapitools.client.model.SnapshotCreationModel;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ManageApi
 */
@Disabled
public class ManageApiTest {

    private final ManageApi api = new ManageApi();

    /**
     * copySnapshotToExistingGame
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void copySnapshotToExistingGameUsingPOSTTest() throws ApiException {
        String apiKey = null;
        String snapshotId = null;
        String targetApiKey = null;
        ManageResult response = api.copySnapshotToExistingGameUsingPOST(apiKey, snapshotId, targetApiKey);
        // TODO: test validations
    }

    /**
     * createQuery
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createQueryUsingPOSTTest() throws ApiException {
        String apiKey = null;
        ManageQuery manageQuery = null;
        ManageQuery response = api.createQueryUsingPOST(apiKey, manageQuery);
        // TODO: test validations
    }

    /**
     * createScreen
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createScreenUsingPOSTTest() throws ApiException {
        String apiKey = null;
        ManageScreen manageScreen = null;
        ManageScreen response = api.createScreenUsingPOST(apiKey, manageScreen);
        // TODO: test validations
    }

    /**
     * createSnapshot
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createSnapshotUsingPOSTTest() throws ApiException {
        String apiKey = null;
        SnapshotCreationModel snapshotCreationModel = null;
        ManageSnapshot response = api.createSnapshotUsingPOST(apiKey, snapshotCreationModel);
        // TODO: test validations
    }

    /**
     * createSnippet
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createSnippetUsingPOSTTest() throws ApiException {
        String apiKey = null;
        ManageSnippet manageSnippet = null;
        ManageSnippet response = api.createSnippetUsingPOST(apiKey, manageSnippet);
        // TODO: test validations
    }

    /**
     * deleteQuery
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteQueryUsingDELETETest() throws ApiException {
        String apiKey = null;
        String shortCode = null;
        ManageResult response = api.deleteQueryUsingDELETE(apiKey, shortCode);
        // TODO: test validations
    }

    /**
     * deleteScreen
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteScreenUsingDELETETest() throws ApiException {
        String apiKey = null;
        String shortCode = null;
        ManageResult response = api.deleteScreenUsingDELETE(apiKey, shortCode);
        // TODO: test validations
    }

    /**
     * deleteSnapshot
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteSnapshotUsingDELETETest() throws ApiException {
        String apiKey = null;
        String snapshotId = null;
        api.deleteSnapshotUsingDELETE(apiKey, snapshotId);
        // TODO: test validations
    }

    /**
     * deleteSnippet
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteSnippetUsingDELETETest() throws ApiException {
        String apiKey = null;
        String shortCode = null;
        ManageResult response = api.deleteSnippetUsingDELETE(apiKey, shortCode);
        // TODO: test validations
    }

    /**
     * getQuery
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getQueryUsingGETTest() throws ApiException {
        String apiKey = null;
        String shortCode = null;
        ManageQuery response = api.getQueryUsingGET(apiKey, shortCode);
        // TODO: test validations
    }

    /**
     * getScreen
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getScreenUsingGETTest() throws ApiException {
        String apiKey = null;
        String shortCode = null;
        ManageScreen response = api.getScreenUsingGET(apiKey, shortCode);
        // TODO: test validations
    }

    /**
     * getSnippet
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSnippetUsingGETTest() throws ApiException {
        String apiKey = null;
        String shortCode = null;
        ManageSnippet response = api.getSnippetUsingGET(apiKey, shortCode);
        // TODO: test validations
    }

    /**
     * listExecutableScreens
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listExecutableScreensUsingGETTest() throws ApiException {
        String apiKey = null;
        List<ManageItemSummary> response = api.listExecutableScreensUsingGET(apiKey);
        // TODO: test validations
    }

    /**
     * listQueries
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listQueriesUsingGETTest() throws ApiException {
        String apiKey = null;
        List<ManageItemSummary> response = api.listQueriesUsingGET(apiKey);
        // TODO: test validations
    }

    /**
     * listScreens
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listScreensUsingGETTest() throws ApiException {
        String apiKey = null;
        List<ManageItemSummary> response = api.listScreensUsingGET(apiKey);
        // TODO: test validations
    }

    /**
     * listSnapshots
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listSnapshotsUsingGETTest() throws ApiException {
        String apiKey = null;
        List<ManageSnapshot> response = api.listSnapshotsUsingGET(apiKey);
        // TODO: test validations
    }

    /**
     * listSnippets
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listSnippetsUsingGETTest() throws ApiException {
        String apiKey = null;
        List<ManageItemSummary> response = api.listSnippetsUsingGET(apiKey);
        // TODO: test validations
    }

    /**
     * publishSnapshot
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void publishSnapshotUsingPOSTTest() throws ApiException {
        String apiKey = null;
        String snapshotId = null;
        ManageResult response = api.publishSnapshotUsingPOST(apiKey, snapshotId);
        // TODO: test validations
    }

    /**
     * revertSnapshot
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void revertSnapshotUsingPOSTTest() throws ApiException {
        String apiKey = null;
        String snapshotId = null;
        ManageResult response = api.revertSnapshotUsingPOST(apiKey, snapshotId);
        // TODO: test validations
    }

    /**
     * updateQuery
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateQueryUsingPUTTest() throws ApiException {
        String apiKey = null;
        String shortCode = null;
        ManageQuery manageQuery = null;
        ManageQuery response = api.updateQueryUsingPUT(apiKey, shortCode, manageQuery);
        // TODO: test validations
    }

    /**
     * updateScreen
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateScreenUsingPUTTest() throws ApiException {
        String apiKey = null;
        String shortCode = null;
        ManageScreen manageScreen = null;
        ManageScreen response = api.updateScreenUsingPUT(apiKey, shortCode, manageScreen);
        // TODO: test validations
    }

    /**
     * updateSnippet
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateSnippetUsingPUTTest() throws ApiException {
        String apiKey = null;
        String shortCode = null;
        ManageSnippet manageSnippet = null;
        ManageSnippet response = api.updateSnippetUsingPUT(apiKey, shortCode, manageSnippet);
        // TODO: test validations
    }

}
