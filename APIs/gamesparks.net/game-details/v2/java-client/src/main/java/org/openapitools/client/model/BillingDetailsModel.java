/*
 * GameSparks Game Details API
 * The API to manage the GameSparks game details
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * BillingDetailsModel
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:28:11.072846-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BillingDetailsModel {
  public static final String SERIALIZED_NAME_BUILDING = "building";
  @SerializedName(SERIALIZED_NAME_BUILDING)
  private String building;

  public static final String SERIALIZED_NAME_CITY = "city";
  @SerializedName(SERIALIZED_NAME_CITY)
  private String city;

  public static final String SERIALIZED_NAME_COMPANY_NAME = "companyName";
  @SerializedName(SERIALIZED_NAME_COMPANY_NAME)
  private String companyName;

  public static final String SERIALIZED_NAME_COUNTRY = "country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  private String country;

  public static final String SERIALIZED_NAME_EMAIL1 = "email1";
  @SerializedName(SERIALIZED_NAME_EMAIL1)
  private String email1;

  public static final String SERIALIZED_NAME_EMAIL2 = "email2";
  @SerializedName(SERIALIZED_NAME_EMAIL2)
  private String email2;

  public static final String SERIALIZED_NAME_EMAIL3 = "email3";
  @SerializedName(SERIALIZED_NAME_EMAIL3)
  private String email3;

  public static final String SERIALIZED_NAME_FIRST_NAME1 = "firstName1";
  @SerializedName(SERIALIZED_NAME_FIRST_NAME1)
  private String firstName1;

  public static final String SERIALIZED_NAME_FIRST_NAME2 = "firstName2";
  @SerializedName(SERIALIZED_NAME_FIRST_NAME2)
  private String firstName2;

  public static final String SERIALIZED_NAME_FIRST_NAME3 = "firstName3";
  @SerializedName(SERIALIZED_NAME_FIRST_NAME3)
  private String firstName3;

  public static final String SERIALIZED_NAME_LAST_NAME1 = "lastName1";
  @SerializedName(SERIALIZED_NAME_LAST_NAME1)
  private String lastName1;

  public static final String SERIALIZED_NAME_LAST_NAME2 = "lastName2";
  @SerializedName(SERIALIZED_NAME_LAST_NAME2)
  private String lastName2;

  public static final String SERIALIZED_NAME_LAST_NAME3 = "lastName3";
  @SerializedName(SERIALIZED_NAME_LAST_NAME3)
  private String lastName3;

  public static final String SERIALIZED_NAME_POSTCODE = "postcode";
  @SerializedName(SERIALIZED_NAME_POSTCODE)
  private String postcode;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private String state;

  public static final String SERIALIZED_NAME_STREET = "street";
  @SerializedName(SERIALIZED_NAME_STREET)
  private String street;

  public static final String SERIALIZED_NAME_TAX_NUMBER = "taxNumber";
  @SerializedName(SERIALIZED_NAME_TAX_NUMBER)
  private String taxNumber;

  public BillingDetailsModel() {
  }

  public BillingDetailsModel building(String building) {
    this.building = building;
    return this;
  }

  /**
   * Get building
   * @return building
   */
  @javax.annotation.Nonnull
  public String getBuilding() {
    return building;
  }

  public void setBuilding(String building) {
    this.building = building;
  }


  public BillingDetailsModel city(String city) {
    this.city = city;
    return this;
  }

  /**
   * Get city
   * @return city
   */
  @javax.annotation.Nonnull
  public String getCity() {
    return city;
  }

  public void setCity(String city) {
    this.city = city;
  }


  public BillingDetailsModel companyName(String companyName) {
    this.companyName = companyName;
    return this;
  }

  /**
   * Get companyName
   * @return companyName
   */
  @javax.annotation.Nonnull
  public String getCompanyName() {
    return companyName;
  }

  public void setCompanyName(String companyName) {
    this.companyName = companyName;
  }


  public BillingDetailsModel country(String country) {
    this.country = country;
    return this;
  }

  /**
   * Get country
   * @return country
   */
  @javax.annotation.Nonnull
  public String getCountry() {
    return country;
  }

  public void setCountry(String country) {
    this.country = country;
  }


  public BillingDetailsModel email1(String email1) {
    this.email1 = email1;
    return this;
  }

  /**
   * Get email1
   * @return email1
   */
  @javax.annotation.Nonnull
  public String getEmail1() {
    return email1;
  }

  public void setEmail1(String email1) {
    this.email1 = email1;
  }


  public BillingDetailsModel email2(String email2) {
    this.email2 = email2;
    return this;
  }

  /**
   * Get email2
   * @return email2
   */
  @javax.annotation.Nullable
  public String getEmail2() {
    return email2;
  }

  public void setEmail2(String email2) {
    this.email2 = email2;
  }


  public BillingDetailsModel email3(String email3) {
    this.email3 = email3;
    return this;
  }

  /**
   * Get email3
   * @return email3
   */
  @javax.annotation.Nullable
  public String getEmail3() {
    return email3;
  }

  public void setEmail3(String email3) {
    this.email3 = email3;
  }


  public BillingDetailsModel firstName1(String firstName1) {
    this.firstName1 = firstName1;
    return this;
  }

  /**
   * Get firstName1
   * @return firstName1
   */
  @javax.annotation.Nonnull
  public String getFirstName1() {
    return firstName1;
  }

  public void setFirstName1(String firstName1) {
    this.firstName1 = firstName1;
  }


  public BillingDetailsModel firstName2(String firstName2) {
    this.firstName2 = firstName2;
    return this;
  }

  /**
   * Get firstName2
   * @return firstName2
   */
  @javax.annotation.Nullable
  public String getFirstName2() {
    return firstName2;
  }

  public void setFirstName2(String firstName2) {
    this.firstName2 = firstName2;
  }


  public BillingDetailsModel firstName3(String firstName3) {
    this.firstName3 = firstName3;
    return this;
  }

  /**
   * Get firstName3
   * @return firstName3
   */
  @javax.annotation.Nullable
  public String getFirstName3() {
    return firstName3;
  }

  public void setFirstName3(String firstName3) {
    this.firstName3 = firstName3;
  }


  public BillingDetailsModel lastName1(String lastName1) {
    this.lastName1 = lastName1;
    return this;
  }

  /**
   * Get lastName1
   * @return lastName1
   */
  @javax.annotation.Nonnull
  public String getLastName1() {
    return lastName1;
  }

  public void setLastName1(String lastName1) {
    this.lastName1 = lastName1;
  }


  public BillingDetailsModel lastName2(String lastName2) {
    this.lastName2 = lastName2;
    return this;
  }

  /**
   * Get lastName2
   * @return lastName2
   */
  @javax.annotation.Nullable
  public String getLastName2() {
    return lastName2;
  }

  public void setLastName2(String lastName2) {
    this.lastName2 = lastName2;
  }


  public BillingDetailsModel lastName3(String lastName3) {
    this.lastName3 = lastName3;
    return this;
  }

  /**
   * Get lastName3
   * @return lastName3
   */
  @javax.annotation.Nullable
  public String getLastName3() {
    return lastName3;
  }

  public void setLastName3(String lastName3) {
    this.lastName3 = lastName3;
  }


  public BillingDetailsModel postcode(String postcode) {
    this.postcode = postcode;
    return this;
  }

  /**
   * Get postcode
   * @return postcode
   */
  @javax.annotation.Nonnull
  public String getPostcode() {
    return postcode;
  }

  public void setPostcode(String postcode) {
    this.postcode = postcode;
  }


  public BillingDetailsModel state(String state) {
    this.state = state;
    return this;
  }

  /**
   * Get state
   * @return state
   */
  @javax.annotation.Nullable
  public String getState() {
    return state;
  }

  public void setState(String state) {
    this.state = state;
  }


  public BillingDetailsModel street(String street) {
    this.street = street;
    return this;
  }

  /**
   * Get street
   * @return street
   */
  @javax.annotation.Nonnull
  public String getStreet() {
    return street;
  }

  public void setStreet(String street) {
    this.street = street;
  }


  public BillingDetailsModel taxNumber(String taxNumber) {
    this.taxNumber = taxNumber;
    return this;
  }

  /**
   * Get taxNumber
   * @return taxNumber
   */
  @javax.annotation.Nullable
  public String getTaxNumber() {
    return taxNumber;
  }

  public void setTaxNumber(String taxNumber) {
    this.taxNumber = taxNumber;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BillingDetailsModel billingDetailsModel = (BillingDetailsModel) o;
    return Objects.equals(this.building, billingDetailsModel.building) &&
        Objects.equals(this.city, billingDetailsModel.city) &&
        Objects.equals(this.companyName, billingDetailsModel.companyName) &&
        Objects.equals(this.country, billingDetailsModel.country) &&
        Objects.equals(this.email1, billingDetailsModel.email1) &&
        Objects.equals(this.email2, billingDetailsModel.email2) &&
        Objects.equals(this.email3, billingDetailsModel.email3) &&
        Objects.equals(this.firstName1, billingDetailsModel.firstName1) &&
        Objects.equals(this.firstName2, billingDetailsModel.firstName2) &&
        Objects.equals(this.firstName3, billingDetailsModel.firstName3) &&
        Objects.equals(this.lastName1, billingDetailsModel.lastName1) &&
        Objects.equals(this.lastName2, billingDetailsModel.lastName2) &&
        Objects.equals(this.lastName3, billingDetailsModel.lastName3) &&
        Objects.equals(this.postcode, billingDetailsModel.postcode) &&
        Objects.equals(this.state, billingDetailsModel.state) &&
        Objects.equals(this.street, billingDetailsModel.street) &&
        Objects.equals(this.taxNumber, billingDetailsModel.taxNumber);
  }

  @Override
  public int hashCode() {
    return Objects.hash(building, city, companyName, country, email1, email2, email3, firstName1, firstName2, firstName3, lastName1, lastName2, lastName3, postcode, state, street, taxNumber);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BillingDetailsModel {\n");
    sb.append("    building: ").append(toIndentedString(building)).append("\n");
    sb.append("    city: ").append(toIndentedString(city)).append("\n");
    sb.append("    companyName: ").append(toIndentedString(companyName)).append("\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    email1: ").append(toIndentedString(email1)).append("\n");
    sb.append("    email2: ").append(toIndentedString(email2)).append("\n");
    sb.append("    email3: ").append(toIndentedString(email3)).append("\n");
    sb.append("    firstName1: ").append(toIndentedString(firstName1)).append("\n");
    sb.append("    firstName2: ").append(toIndentedString(firstName2)).append("\n");
    sb.append("    firstName3: ").append(toIndentedString(firstName3)).append("\n");
    sb.append("    lastName1: ").append(toIndentedString(lastName1)).append("\n");
    sb.append("    lastName2: ").append(toIndentedString(lastName2)).append("\n");
    sb.append("    lastName3: ").append(toIndentedString(lastName3)).append("\n");
    sb.append("    postcode: ").append(toIndentedString(postcode)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    street: ").append(toIndentedString(street)).append("\n");
    sb.append("    taxNumber: ").append(toIndentedString(taxNumber)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("building");
    openapiFields.add("city");
    openapiFields.add("companyName");
    openapiFields.add("country");
    openapiFields.add("email1");
    openapiFields.add("email2");
    openapiFields.add("email3");
    openapiFields.add("firstName1");
    openapiFields.add("firstName2");
    openapiFields.add("firstName3");
    openapiFields.add("lastName1");
    openapiFields.add("lastName2");
    openapiFields.add("lastName3");
    openapiFields.add("postcode");
    openapiFields.add("state");
    openapiFields.add("street");
    openapiFields.add("taxNumber");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("building");
    openapiRequiredFields.add("city");
    openapiRequiredFields.add("companyName");
    openapiRequiredFields.add("country");
    openapiRequiredFields.add("email1");
    openapiRequiredFields.add("firstName1");
    openapiRequiredFields.add("lastName1");
    openapiRequiredFields.add("postcode");
    openapiRequiredFields.add("street");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BillingDetailsModel
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BillingDetailsModel.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BillingDetailsModel is not found in the empty JSON string", BillingDetailsModel.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BillingDetailsModel.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BillingDetailsModel` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : BillingDetailsModel.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("building").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `building` to be a primitive type in the JSON string but got `%s`", jsonObj.get("building").toString()));
      }
      if (!jsonObj.get("city").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `city` to be a primitive type in the JSON string but got `%s`", jsonObj.get("city").toString()));
      }
      if (!jsonObj.get("companyName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `companyName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("companyName").toString()));
      }
      if (!jsonObj.get("country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country").toString()));
      }
      if (!jsonObj.get("email1").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email1` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email1").toString()));
      }
      if ((jsonObj.get("email2") != null && !jsonObj.get("email2").isJsonNull()) && !jsonObj.get("email2").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email2` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email2").toString()));
      }
      if ((jsonObj.get("email3") != null && !jsonObj.get("email3").isJsonNull()) && !jsonObj.get("email3").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email3` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email3").toString()));
      }
      if (!jsonObj.get("firstName1").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `firstName1` to be a primitive type in the JSON string but got `%s`", jsonObj.get("firstName1").toString()));
      }
      if ((jsonObj.get("firstName2") != null && !jsonObj.get("firstName2").isJsonNull()) && !jsonObj.get("firstName2").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `firstName2` to be a primitive type in the JSON string but got `%s`", jsonObj.get("firstName2").toString()));
      }
      if ((jsonObj.get("firstName3") != null && !jsonObj.get("firstName3").isJsonNull()) && !jsonObj.get("firstName3").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `firstName3` to be a primitive type in the JSON string but got `%s`", jsonObj.get("firstName3").toString()));
      }
      if (!jsonObj.get("lastName1").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastName1` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastName1").toString()));
      }
      if ((jsonObj.get("lastName2") != null && !jsonObj.get("lastName2").isJsonNull()) && !jsonObj.get("lastName2").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastName2` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastName2").toString()));
      }
      if ((jsonObj.get("lastName3") != null && !jsonObj.get("lastName3").isJsonNull()) && !jsonObj.get("lastName3").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastName3` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastName3").toString()));
      }
      if (!jsonObj.get("postcode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `postcode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("postcode").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      if (!jsonObj.get("street").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `street` to be a primitive type in the JSON string but got `%s`", jsonObj.get("street").toString()));
      }
      if ((jsonObj.get("taxNumber") != null && !jsonObj.get("taxNumber").isJsonNull()) && !jsonObj.get("taxNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `taxNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("taxNumber").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BillingDetailsModel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BillingDetailsModel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BillingDetailsModel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BillingDetailsModel.class));

       return (TypeAdapter<T>) new TypeAdapter<BillingDetailsModel>() {
           @Override
           public void write(JsonWriter out, BillingDetailsModel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BillingDetailsModel read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BillingDetailsModel given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BillingDetailsModel
   * @throws IOException if the JSON string is invalid with respect to BillingDetailsModel
   */
  public static BillingDetailsModel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BillingDetailsModel.class);
  }

  /**
   * Convert an instance of BillingDetailsModel to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

