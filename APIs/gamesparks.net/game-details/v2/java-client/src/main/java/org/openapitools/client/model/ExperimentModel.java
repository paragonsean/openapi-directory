/*
 * GameSparks Game Details API
 * The API to manage the GameSparks game details
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ExperimentConfigModel;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ExperimentModel
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:28:11.072846-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ExperimentModel {
  public static final String SERIALIZED_NAME_ACTIVE = "active";
  @SerializedName(SERIALIZED_NAME_ACTIVE)
  private Boolean active;

  public static final String SERIALIZED_NAME_CHANGED_FIELDS_AND_INITIAL_VALUES = "changedFieldsAndInitialValues";
  @SerializedName(SERIALIZED_NAME_CHANGED_FIELDS_AND_INITIAL_VALUES)
  private Object changedFieldsAndInitialValues;

  public static final String SERIALIZED_NAME_COMPLETE = "complete";
  @SerializedName(SERIALIZED_NAME_COMPLETE)
  private Boolean complete;

  public static final String SERIALIZED_NAME_CONFIG = "config";
  @SerializedName(SERIALIZED_NAME_CONFIG)
  private ExperimentConfigModel config;

  public static final String SERIALIZED_NAME_END_DATE = "endDate";
  @SerializedName(SERIALIZED_NAME_END_DATE)
  private OffsetDateTime endDate;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Long id;

  public static final String SERIALIZED_NAME_MEASUREMENTS = "measurements";
  @SerializedName(SERIALIZED_NAME_MEASUREMENTS)
  private String measurements;

  public static final String SERIALIZED_NAME_MEASUREMENTS_ES_QUERY = "measurementsEsQuery";
  @SerializedName(SERIALIZED_NAME_MEASUREMENTS_ES_QUERY)
  private String measurementsEsQuery;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PERCENT_HASH = "percentHash";
  @SerializedName(SERIALIZED_NAME_PERCENT_HASH)
  private String percentHash;

  public static final String SERIALIZED_NAME_PUBLISHED_STAGES = "publishedStages";
  @SerializedName(SERIALIZED_NAME_PUBLISHED_STAGES)
  private List<String> publishedStages = new ArrayList<>();

  public static final String SERIALIZED_NAME_START_DATE = "startDate";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  private OffsetDateTime startDate;

  public ExperimentModel() {
  }

  public ExperimentModel active(Boolean active) {
    this.active = active;
    return this;
  }

  /**
   * Get active
   * @return active
   */
  @javax.annotation.Nullable
  public Boolean getActive() {
    return active;
  }

  public void setActive(Boolean active) {
    this.active = active;
  }


  public ExperimentModel changedFieldsAndInitialValues(Object changedFieldsAndInitialValues) {
    this.changedFieldsAndInitialValues = changedFieldsAndInitialValues;
    return this;
  }

  /**
   * Get changedFieldsAndInitialValues
   * @return changedFieldsAndInitialValues
   */
  @javax.annotation.Nullable
  public Object getChangedFieldsAndInitialValues() {
    return changedFieldsAndInitialValues;
  }

  public void setChangedFieldsAndInitialValues(Object changedFieldsAndInitialValues) {
    this.changedFieldsAndInitialValues = changedFieldsAndInitialValues;
  }


  public ExperimentModel complete(Boolean complete) {
    this.complete = complete;
    return this;
  }

  /**
   * Get complete
   * @return complete
   */
  @javax.annotation.Nullable
  public Boolean getComplete() {
    return complete;
  }

  public void setComplete(Boolean complete) {
    this.complete = complete;
  }


  public ExperimentModel config(ExperimentConfigModel config) {
    this.config = config;
    return this;
  }

  /**
   * Get config
   * @return config
   */
  @javax.annotation.Nullable
  public ExperimentConfigModel getConfig() {
    return config;
  }

  public void setConfig(ExperimentConfigModel config) {
    this.config = config;
  }


  public ExperimentModel endDate(OffsetDateTime endDate) {
    this.endDate = endDate;
    return this;
  }

  /**
   * Get endDate
   * @return endDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getEndDate() {
    return endDate;
  }

  public void setEndDate(OffsetDateTime endDate) {
    this.endDate = endDate;
  }


  public ExperimentModel id(Long id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public Long getId() {
    return id;
  }

  public void setId(Long id) {
    this.id = id;
  }


  public ExperimentModel measurements(String measurements) {
    this.measurements = measurements;
    return this;
  }

  /**
   * Get measurements
   * @return measurements
   */
  @javax.annotation.Nullable
  public String getMeasurements() {
    return measurements;
  }

  public void setMeasurements(String measurements) {
    this.measurements = measurements;
  }


  public ExperimentModel measurementsEsQuery(String measurementsEsQuery) {
    this.measurementsEsQuery = measurementsEsQuery;
    return this;
  }

  /**
   * Get measurementsEsQuery
   * @return measurementsEsQuery
   */
  @javax.annotation.Nullable
  public String getMeasurementsEsQuery() {
    return measurementsEsQuery;
  }

  public void setMeasurementsEsQuery(String measurementsEsQuery) {
    this.measurementsEsQuery = measurementsEsQuery;
  }


  public ExperimentModel name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public ExperimentModel percentHash(String percentHash) {
    this.percentHash = percentHash;
    return this;
  }

  /**
   * Get percentHash
   * @return percentHash
   */
  @javax.annotation.Nullable
  public String getPercentHash() {
    return percentHash;
  }

  public void setPercentHash(String percentHash) {
    this.percentHash = percentHash;
  }


  public ExperimentModel publishedStages(List<String> publishedStages) {
    this.publishedStages = publishedStages;
    return this;
  }

  public ExperimentModel addPublishedStagesItem(String publishedStagesItem) {
    if (this.publishedStages == null) {
      this.publishedStages = new ArrayList<>();
    }
    this.publishedStages.add(publishedStagesItem);
    return this;
  }

  /**
   * Get publishedStages
   * @return publishedStages
   */
  @javax.annotation.Nullable
  public List<String> getPublishedStages() {
    return publishedStages;
  }

  public void setPublishedStages(List<String> publishedStages) {
    this.publishedStages = publishedStages;
  }


  public ExperimentModel startDate(OffsetDateTime startDate) {
    this.startDate = startDate;
    return this;
  }

  /**
   * Get startDate
   * @return startDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStartDate() {
    return startDate;
  }

  public void setStartDate(OffsetDateTime startDate) {
    this.startDate = startDate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExperimentModel experimentModel = (ExperimentModel) o;
    return Objects.equals(this.active, experimentModel.active) &&
        Objects.equals(this.changedFieldsAndInitialValues, experimentModel.changedFieldsAndInitialValues) &&
        Objects.equals(this.complete, experimentModel.complete) &&
        Objects.equals(this.config, experimentModel.config) &&
        Objects.equals(this.endDate, experimentModel.endDate) &&
        Objects.equals(this.id, experimentModel.id) &&
        Objects.equals(this.measurements, experimentModel.measurements) &&
        Objects.equals(this.measurementsEsQuery, experimentModel.measurementsEsQuery) &&
        Objects.equals(this.name, experimentModel.name) &&
        Objects.equals(this.percentHash, experimentModel.percentHash) &&
        Objects.equals(this.publishedStages, experimentModel.publishedStages) &&
        Objects.equals(this.startDate, experimentModel.startDate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(active, changedFieldsAndInitialValues, complete, config, endDate, id, measurements, measurementsEsQuery, name, percentHash, publishedStages, startDate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExperimentModel {\n");
    sb.append("    active: ").append(toIndentedString(active)).append("\n");
    sb.append("    changedFieldsAndInitialValues: ").append(toIndentedString(changedFieldsAndInitialValues)).append("\n");
    sb.append("    complete: ").append(toIndentedString(complete)).append("\n");
    sb.append("    config: ").append(toIndentedString(config)).append("\n");
    sb.append("    endDate: ").append(toIndentedString(endDate)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    measurements: ").append(toIndentedString(measurements)).append("\n");
    sb.append("    measurementsEsQuery: ").append(toIndentedString(measurementsEsQuery)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    percentHash: ").append(toIndentedString(percentHash)).append("\n");
    sb.append("    publishedStages: ").append(toIndentedString(publishedStages)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("active");
    openapiFields.add("changedFieldsAndInitialValues");
    openapiFields.add("complete");
    openapiFields.add("config");
    openapiFields.add("endDate");
    openapiFields.add("id");
    openapiFields.add("measurements");
    openapiFields.add("measurementsEsQuery");
    openapiFields.add("name");
    openapiFields.add("percentHash");
    openapiFields.add("publishedStages");
    openapiFields.add("startDate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ExperimentModel
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ExperimentModel.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ExperimentModel is not found in the empty JSON string", ExperimentModel.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ExperimentModel.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ExperimentModel` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `config`
      if (jsonObj.get("config") != null && !jsonObj.get("config").isJsonNull()) {
        ExperimentConfigModel.validateJsonElement(jsonObj.get("config"));
      }
      if ((jsonObj.get("measurements") != null && !jsonObj.get("measurements").isJsonNull()) && !jsonObj.get("measurements").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `measurements` to be a primitive type in the JSON string but got `%s`", jsonObj.get("measurements").toString()));
      }
      if ((jsonObj.get("measurementsEsQuery") != null && !jsonObj.get("measurementsEsQuery").isJsonNull()) && !jsonObj.get("measurementsEsQuery").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `measurementsEsQuery` to be a primitive type in the JSON string but got `%s`", jsonObj.get("measurementsEsQuery").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("percentHash") != null && !jsonObj.get("percentHash").isJsonNull()) && !jsonObj.get("percentHash").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `percentHash` to be a primitive type in the JSON string but got `%s`", jsonObj.get("percentHash").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("publishedStages") != null && !jsonObj.get("publishedStages").isJsonNull() && !jsonObj.get("publishedStages").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `publishedStages` to be an array in the JSON string but got `%s`", jsonObj.get("publishedStages").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ExperimentModel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ExperimentModel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ExperimentModel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ExperimentModel.class));

       return (TypeAdapter<T>) new TypeAdapter<ExperimentModel>() {
           @Override
           public void write(JsonWriter out, ExperimentModel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ExperimentModel read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ExperimentModel given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ExperimentModel
   * @throws IOException if the JSON string is invalid with respect to ExperimentModel
   */
  public static ExperimentModel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ExperimentModel.class);
  }

  /**
   * Convert an instance of ExperimentModel to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

