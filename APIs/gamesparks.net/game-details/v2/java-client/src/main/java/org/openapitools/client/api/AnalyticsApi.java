/*
 * GameSparks Game Details API
 * The API to manage the GameSparks game details
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AnalyticsDataCountSwaggerModel;
import org.openapitools.client.model.AnalyticsDataSwaggerModel;
import java.time.LocalDate;
import org.openapitools.client.model.MessageModel;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AnalyticsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AnalyticsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AnalyticsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getAnalyticsDataUsingGET
     * @param apiKey apiKey (required)
     * @param stage stage (required)
     * @param dataType dataType (required)
     * @param precision precision (required)
     * @param startDate yyyy-MM-dd (required)
     * @param endDate yyyy-MM-dd (required)
     * @param keys the keys to select. For example \&quot;ReturningUsers\&quot;, \&quot;NewUsers\&quot;, etc (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> json error </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> not allowed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAnalyticsDataUsingGETCall(String apiKey, String stage, String dataType, String precision, LocalDate startDate, LocalDate endDate, String keys, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/restv2/game/{apiKey}/admin/analytics"
            .replace("{" + "apiKey" + "}", localVarApiClient.escapeString(apiKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (stage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("stage", stage));
        }

        if (dataType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dataType", dataType));
        }

        if (precision != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("precision", precision));
        }

        if (startDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startDate", startDate));
        }

        if (endDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endDate", endDate));
        }

        if (keys != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("keys", keys));
        }

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAnalyticsDataUsingGETValidateBeforeCall(String apiKey, String stage, String dataType, String precision, LocalDate startDate, LocalDate endDate, String keys, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling getAnalyticsDataUsingGET(Async)");
        }

        // verify the required parameter 'stage' is set
        if (stage == null) {
            throw new ApiException("Missing the required parameter 'stage' when calling getAnalyticsDataUsingGET(Async)");
        }

        // verify the required parameter 'dataType' is set
        if (dataType == null) {
            throw new ApiException("Missing the required parameter 'dataType' when calling getAnalyticsDataUsingGET(Async)");
        }

        // verify the required parameter 'precision' is set
        if (precision == null) {
            throw new ApiException("Missing the required parameter 'precision' when calling getAnalyticsDataUsingGET(Async)");
        }

        // verify the required parameter 'startDate' is set
        if (startDate == null) {
            throw new ApiException("Missing the required parameter 'startDate' when calling getAnalyticsDataUsingGET(Async)");
        }

        // verify the required parameter 'endDate' is set
        if (endDate == null) {
            throw new ApiException("Missing the required parameter 'endDate' when calling getAnalyticsDataUsingGET(Async)");
        }

        return getAnalyticsDataUsingGETCall(apiKey, stage, dataType, precision, startDate, endDate, keys, _callback);

    }

    /**
     * Returns the results of executed query defined by the parameters passed in
     * 
     * @param apiKey apiKey (required)
     * @param stage stage (required)
     * @param dataType dataType (required)
     * @param precision precision (required)
     * @param startDate yyyy-MM-dd (required)
     * @param endDate yyyy-MM-dd (required)
     * @param keys the keys to select. For example \&quot;ReturningUsers\&quot;, \&quot;NewUsers\&quot;, etc (optional)
     * @return List&lt;AnalyticsDataSwaggerModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> json error </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> not allowed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public List<AnalyticsDataSwaggerModel> getAnalyticsDataUsingGET(String apiKey, String stage, String dataType, String precision, LocalDate startDate, LocalDate endDate, String keys) throws ApiException {
        ApiResponse<List<AnalyticsDataSwaggerModel>> localVarResp = getAnalyticsDataUsingGETWithHttpInfo(apiKey, stage, dataType, precision, startDate, endDate, keys);
        return localVarResp.getData();
    }

    /**
     * Returns the results of executed query defined by the parameters passed in
     * 
     * @param apiKey apiKey (required)
     * @param stage stage (required)
     * @param dataType dataType (required)
     * @param precision precision (required)
     * @param startDate yyyy-MM-dd (required)
     * @param endDate yyyy-MM-dd (required)
     * @param keys the keys to select. For example \&quot;ReturningUsers\&quot;, \&quot;NewUsers\&quot;, etc (optional)
     * @return ApiResponse&lt;List&lt;AnalyticsDataSwaggerModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> json error </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> not allowed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<AnalyticsDataSwaggerModel>> getAnalyticsDataUsingGETWithHttpInfo(String apiKey, String stage, String dataType, String precision, LocalDate startDate, LocalDate endDate, String keys) throws ApiException {
        okhttp3.Call localVarCall = getAnalyticsDataUsingGETValidateBeforeCall(apiKey, stage, dataType, precision, startDate, endDate, keys, null);
        Type localVarReturnType = new TypeToken<List<AnalyticsDataSwaggerModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns the results of executed query defined by the parameters passed in (asynchronously)
     * 
     * @param apiKey apiKey (required)
     * @param stage stage (required)
     * @param dataType dataType (required)
     * @param precision precision (required)
     * @param startDate yyyy-MM-dd (required)
     * @param endDate yyyy-MM-dd (required)
     * @param keys the keys to select. For example \&quot;ReturningUsers\&quot;, \&quot;NewUsers\&quot;, etc (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> json error </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> not allowed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAnalyticsDataUsingGETAsync(String apiKey, String stage, String dataType, String precision, LocalDate startDate, LocalDate endDate, String keys, final ApiCallback<List<AnalyticsDataSwaggerModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAnalyticsDataUsingGETValidateBeforeCall(apiKey, stage, dataType, precision, startDate, endDate, keys, _callback);
        Type localVarReturnType = new TypeToken<List<AnalyticsDataSwaggerModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDataCountUsingGET
     * @param apiKey apiKey (required)
     * @param stage stage (required)
     * @param queryName queryName (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> json error </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> not allowed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDataCountUsingGETCall(String apiKey, String stage, String queryName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/restv2/game/{apiKey}/admin/analytics/count"
            .replace("{" + "apiKey" + "}", localVarApiClient.escapeString(apiKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (stage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("stage", stage));
        }

        if (queryName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("queryName", queryName));
        }

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDataCountUsingGETValidateBeforeCall(String apiKey, String stage, String queryName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling getDataCountUsingGET(Async)");
        }

        // verify the required parameter 'stage' is set
        if (stage == null) {
            throw new ApiException("Missing the required parameter 'stage' when calling getDataCountUsingGET(Async)");
        }

        // verify the required parameter 'queryName' is set
        if (queryName == null) {
            throw new ApiException("Missing the required parameter 'queryName' when calling getDataCountUsingGET(Async)");
        }

        return getDataCountUsingGETCall(apiKey, stage, queryName, _callback);

    }

    /**
     * Returns the count of executed query
     * 
     * @param apiKey apiKey (required)
     * @param stage stage (required)
     * @param queryName queryName (required)
     * @return AnalyticsDataCountSwaggerModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> json error </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> not allowed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public AnalyticsDataCountSwaggerModel getDataCountUsingGET(String apiKey, String stage, String queryName) throws ApiException {
        ApiResponse<AnalyticsDataCountSwaggerModel> localVarResp = getDataCountUsingGETWithHttpInfo(apiKey, stage, queryName);
        return localVarResp.getData();
    }

    /**
     * Returns the count of executed query
     * 
     * @param apiKey apiKey (required)
     * @param stage stage (required)
     * @param queryName queryName (required)
     * @return ApiResponse&lt;AnalyticsDataCountSwaggerModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> json error </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> not allowed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AnalyticsDataCountSwaggerModel> getDataCountUsingGETWithHttpInfo(String apiKey, String stage, String queryName) throws ApiException {
        okhttp3.Call localVarCall = getDataCountUsingGETValidateBeforeCall(apiKey, stage, queryName, null);
        Type localVarReturnType = new TypeToken<AnalyticsDataCountSwaggerModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns the count of executed query (asynchronously)
     * 
     * @param apiKey apiKey (required)
     * @param stage stage (required)
     * @param queryName queryName (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> json error </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> not allowed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDataCountUsingGETAsync(String apiKey, String stage, String queryName, final ApiCallback<AnalyticsDataCountSwaggerModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDataCountUsingGETValidateBeforeCall(apiKey, stage, queryName, _callback);
        Type localVarReturnType = new TypeToken<AnalyticsDataCountSwaggerModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRetentionUsingGET
     * @param apiKey apiKey (required)
     * @param stage stage (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> json error </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> not allowed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRetentionUsingGETCall(String apiKey, String stage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/restv2/game/{apiKey}/admin/analytics/rollingRetention"
            .replace("{" + "apiKey" + "}", localVarApiClient.escapeString(apiKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (stage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("stage", stage));
        }

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRetentionUsingGETValidateBeforeCall(String apiKey, String stage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling getRetentionUsingGET(Async)");
        }

        // verify the required parameter 'stage' is set
        if (stage == null) {
            throw new ApiException("Missing the required parameter 'stage' when calling getRetentionUsingGET(Async)");
        }

        return getRetentionUsingGETCall(apiKey, stage, _callback);

    }

    /**
     * Returns the percentage of user retention over the last 30 days
     * 
     * @param apiKey apiKey (required)
     * @param stage stage (required)
     * @return AnalyticsDataCountSwaggerModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> json error </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> not allowed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public AnalyticsDataCountSwaggerModel getRetentionUsingGET(String apiKey, String stage) throws ApiException {
        ApiResponse<AnalyticsDataCountSwaggerModel> localVarResp = getRetentionUsingGETWithHttpInfo(apiKey, stage);
        return localVarResp.getData();
    }

    /**
     * Returns the percentage of user retention over the last 30 days
     * 
     * @param apiKey apiKey (required)
     * @param stage stage (required)
     * @return ApiResponse&lt;AnalyticsDataCountSwaggerModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> json error </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> not allowed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AnalyticsDataCountSwaggerModel> getRetentionUsingGETWithHttpInfo(String apiKey, String stage) throws ApiException {
        okhttp3.Call localVarCall = getRetentionUsingGETValidateBeforeCall(apiKey, stage, null);
        Type localVarReturnType = new TypeToken<AnalyticsDataCountSwaggerModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns the percentage of user retention over the last 30 days (asynchronously)
     * 
     * @param apiKey apiKey (required)
     * @param stage stage (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> json error </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> not allowed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRetentionUsingGETAsync(String apiKey, String stage, final ApiCallback<AnalyticsDataCountSwaggerModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRetentionUsingGETValidateBeforeCall(apiKey, stage, _callback);
        Type localVarReturnType = new TypeToken<AnalyticsDataCountSwaggerModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
