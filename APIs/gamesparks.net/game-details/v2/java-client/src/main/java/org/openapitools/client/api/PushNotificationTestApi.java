/*
 * GameSparks Game Details API
 * The API to manage the GameSparks game details
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.MessageModel;
import org.openapitools.client.model.PushNotificationTestModel;
import org.openapitools.client.model.PushNotificationTestSummaryListModel;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PushNotificationTestApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PushNotificationTestApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PushNotificationTestApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for testPushAmazonNotificationsUsingPOST
     * @param apiKey apiKey (required)
     * @param pushNotificationTestModel messageDetails (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> json error </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> not allowed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testPushAmazonNotificationsUsingPOSTCall(String apiKey, PushNotificationTestModel pushNotificationTestModel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = pushNotificationTestModel;

        // create path and map variables
        String localVarPath = "/restv2/game/{apiKey}/admin/pushNotifications/test/amazon"
            .replace("{" + "apiKey" + "}", localVarApiClient.escapeString(apiKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call testPushAmazonNotificationsUsingPOSTValidateBeforeCall(String apiKey, PushNotificationTestModel pushNotificationTestModel, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling testPushAmazonNotificationsUsingPOST(Async)");
        }

        // verify the required parameter 'pushNotificationTestModel' is set
        if (pushNotificationTestModel == null) {
            throw new ApiException("Missing the required parameter 'pushNotificationTestModel' when calling testPushAmazonNotificationsUsingPOST(Async)");
        }

        return testPushAmazonNotificationsUsingPOSTCall(apiKey, pushNotificationTestModel, _callback);

    }

    /**
     * testPushAmazonNotifications
     * 
     * @param apiKey apiKey (required)
     * @param pushNotificationTestModel messageDetails (required)
     * @return PushNotificationTestSummaryListModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> json error </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> not allowed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public PushNotificationTestSummaryListModel testPushAmazonNotificationsUsingPOST(String apiKey, PushNotificationTestModel pushNotificationTestModel) throws ApiException {
        ApiResponse<PushNotificationTestSummaryListModel> localVarResp = testPushAmazonNotificationsUsingPOSTWithHttpInfo(apiKey, pushNotificationTestModel);
        return localVarResp.getData();
    }

    /**
     * testPushAmazonNotifications
     * 
     * @param apiKey apiKey (required)
     * @param pushNotificationTestModel messageDetails (required)
     * @return ApiResponse&lt;PushNotificationTestSummaryListModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> json error </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> not allowed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PushNotificationTestSummaryListModel> testPushAmazonNotificationsUsingPOSTWithHttpInfo(String apiKey, PushNotificationTestModel pushNotificationTestModel) throws ApiException {
        okhttp3.Call localVarCall = testPushAmazonNotificationsUsingPOSTValidateBeforeCall(apiKey, pushNotificationTestModel, null);
        Type localVarReturnType = new TypeToken<PushNotificationTestSummaryListModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * testPushAmazonNotifications (asynchronously)
     * 
     * @param apiKey apiKey (required)
     * @param pushNotificationTestModel messageDetails (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> json error </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> not allowed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testPushAmazonNotificationsUsingPOSTAsync(String apiKey, PushNotificationTestModel pushNotificationTestModel, final ApiCallback<PushNotificationTestSummaryListModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = testPushAmazonNotificationsUsingPOSTValidateBeforeCall(apiKey, pushNotificationTestModel, _callback);
        Type localVarReturnType = new TypeToken<PushNotificationTestSummaryListModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for testPushAppleDevNotificationsUsingPOST
     * @param apiKey apiKey (required)
     * @param pushNotificationTestModel messageDetails (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> json error </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> not allowed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testPushAppleDevNotificationsUsingPOSTCall(String apiKey, PushNotificationTestModel pushNotificationTestModel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = pushNotificationTestModel;

        // create path and map variables
        String localVarPath = "/restv2/game/{apiKey}/admin/pushNotifications/test/apple/development"
            .replace("{" + "apiKey" + "}", localVarApiClient.escapeString(apiKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call testPushAppleDevNotificationsUsingPOSTValidateBeforeCall(String apiKey, PushNotificationTestModel pushNotificationTestModel, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling testPushAppleDevNotificationsUsingPOST(Async)");
        }

        // verify the required parameter 'pushNotificationTestModel' is set
        if (pushNotificationTestModel == null) {
            throw new ApiException("Missing the required parameter 'pushNotificationTestModel' when calling testPushAppleDevNotificationsUsingPOST(Async)");
        }

        return testPushAppleDevNotificationsUsingPOSTCall(apiKey, pushNotificationTestModel, _callback);

    }

    /**
     * testPushAppleDevNotifications
     * 
     * @param apiKey apiKey (required)
     * @param pushNotificationTestModel messageDetails (required)
     * @return PushNotificationTestSummaryListModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> json error </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> not allowed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public PushNotificationTestSummaryListModel testPushAppleDevNotificationsUsingPOST(String apiKey, PushNotificationTestModel pushNotificationTestModel) throws ApiException {
        ApiResponse<PushNotificationTestSummaryListModel> localVarResp = testPushAppleDevNotificationsUsingPOSTWithHttpInfo(apiKey, pushNotificationTestModel);
        return localVarResp.getData();
    }

    /**
     * testPushAppleDevNotifications
     * 
     * @param apiKey apiKey (required)
     * @param pushNotificationTestModel messageDetails (required)
     * @return ApiResponse&lt;PushNotificationTestSummaryListModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> json error </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> not allowed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PushNotificationTestSummaryListModel> testPushAppleDevNotificationsUsingPOSTWithHttpInfo(String apiKey, PushNotificationTestModel pushNotificationTestModel) throws ApiException {
        okhttp3.Call localVarCall = testPushAppleDevNotificationsUsingPOSTValidateBeforeCall(apiKey, pushNotificationTestModel, null);
        Type localVarReturnType = new TypeToken<PushNotificationTestSummaryListModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * testPushAppleDevNotifications (asynchronously)
     * 
     * @param apiKey apiKey (required)
     * @param pushNotificationTestModel messageDetails (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> json error </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> not allowed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testPushAppleDevNotificationsUsingPOSTAsync(String apiKey, PushNotificationTestModel pushNotificationTestModel, final ApiCallback<PushNotificationTestSummaryListModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = testPushAppleDevNotificationsUsingPOSTValidateBeforeCall(apiKey, pushNotificationTestModel, _callback);
        Type localVarReturnType = new TypeToken<PushNotificationTestSummaryListModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for testPushAppleProdNotificationsUsingPOST
     * @param apiKey apiKey (required)
     * @param pushNotificationTestModel messageDetails (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> json error </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> not allowed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testPushAppleProdNotificationsUsingPOSTCall(String apiKey, PushNotificationTestModel pushNotificationTestModel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = pushNotificationTestModel;

        // create path and map variables
        String localVarPath = "/restv2/game/{apiKey}/admin/pushNotifications/test/apple/production"
            .replace("{" + "apiKey" + "}", localVarApiClient.escapeString(apiKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call testPushAppleProdNotificationsUsingPOSTValidateBeforeCall(String apiKey, PushNotificationTestModel pushNotificationTestModel, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling testPushAppleProdNotificationsUsingPOST(Async)");
        }

        // verify the required parameter 'pushNotificationTestModel' is set
        if (pushNotificationTestModel == null) {
            throw new ApiException("Missing the required parameter 'pushNotificationTestModel' when calling testPushAppleProdNotificationsUsingPOST(Async)");
        }

        return testPushAppleProdNotificationsUsingPOSTCall(apiKey, pushNotificationTestModel, _callback);

    }

    /**
     * testPushAppleProdNotifications
     * 
     * @param apiKey apiKey (required)
     * @param pushNotificationTestModel messageDetails (required)
     * @return PushNotificationTestSummaryListModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> json error </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> not allowed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public PushNotificationTestSummaryListModel testPushAppleProdNotificationsUsingPOST(String apiKey, PushNotificationTestModel pushNotificationTestModel) throws ApiException {
        ApiResponse<PushNotificationTestSummaryListModel> localVarResp = testPushAppleProdNotificationsUsingPOSTWithHttpInfo(apiKey, pushNotificationTestModel);
        return localVarResp.getData();
    }

    /**
     * testPushAppleProdNotifications
     * 
     * @param apiKey apiKey (required)
     * @param pushNotificationTestModel messageDetails (required)
     * @return ApiResponse&lt;PushNotificationTestSummaryListModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> json error </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> not allowed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PushNotificationTestSummaryListModel> testPushAppleProdNotificationsUsingPOSTWithHttpInfo(String apiKey, PushNotificationTestModel pushNotificationTestModel) throws ApiException {
        okhttp3.Call localVarCall = testPushAppleProdNotificationsUsingPOSTValidateBeforeCall(apiKey, pushNotificationTestModel, null);
        Type localVarReturnType = new TypeToken<PushNotificationTestSummaryListModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * testPushAppleProdNotifications (asynchronously)
     * 
     * @param apiKey apiKey (required)
     * @param pushNotificationTestModel messageDetails (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> json error </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> not allowed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testPushAppleProdNotificationsUsingPOSTAsync(String apiKey, PushNotificationTestModel pushNotificationTestModel, final ApiCallback<PushNotificationTestSummaryListModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = testPushAppleProdNotificationsUsingPOSTValidateBeforeCall(apiKey, pushNotificationTestModel, _callback);
        Type localVarReturnType = new TypeToken<PushNotificationTestSummaryListModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for testPushGoogleNotificationsUsingPOST
     * @param apiKey apiKey (required)
     * @param pushNotificationTestModel messageDetails (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> json error </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> not allowed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testPushGoogleNotificationsUsingPOSTCall(String apiKey, PushNotificationTestModel pushNotificationTestModel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = pushNotificationTestModel;

        // create path and map variables
        String localVarPath = "/restv2/game/{apiKey}/admin/pushNotifications/test/google"
            .replace("{" + "apiKey" + "}", localVarApiClient.escapeString(apiKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call testPushGoogleNotificationsUsingPOSTValidateBeforeCall(String apiKey, PushNotificationTestModel pushNotificationTestModel, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling testPushGoogleNotificationsUsingPOST(Async)");
        }

        // verify the required parameter 'pushNotificationTestModel' is set
        if (pushNotificationTestModel == null) {
            throw new ApiException("Missing the required parameter 'pushNotificationTestModel' when calling testPushGoogleNotificationsUsingPOST(Async)");
        }

        return testPushGoogleNotificationsUsingPOSTCall(apiKey, pushNotificationTestModel, _callback);

    }

    /**
     * testPushGoogleNotifications
     * 
     * @param apiKey apiKey (required)
     * @param pushNotificationTestModel messageDetails (required)
     * @return PushNotificationTestSummaryListModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> json error </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> not allowed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public PushNotificationTestSummaryListModel testPushGoogleNotificationsUsingPOST(String apiKey, PushNotificationTestModel pushNotificationTestModel) throws ApiException {
        ApiResponse<PushNotificationTestSummaryListModel> localVarResp = testPushGoogleNotificationsUsingPOSTWithHttpInfo(apiKey, pushNotificationTestModel);
        return localVarResp.getData();
    }

    /**
     * testPushGoogleNotifications
     * 
     * @param apiKey apiKey (required)
     * @param pushNotificationTestModel messageDetails (required)
     * @return ApiResponse&lt;PushNotificationTestSummaryListModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> json error </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> not allowed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PushNotificationTestSummaryListModel> testPushGoogleNotificationsUsingPOSTWithHttpInfo(String apiKey, PushNotificationTestModel pushNotificationTestModel) throws ApiException {
        okhttp3.Call localVarCall = testPushGoogleNotificationsUsingPOSTValidateBeforeCall(apiKey, pushNotificationTestModel, null);
        Type localVarReturnType = new TypeToken<PushNotificationTestSummaryListModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * testPushGoogleNotifications (asynchronously)
     * 
     * @param apiKey apiKey (required)
     * @param pushNotificationTestModel messageDetails (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> json error </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> not allowed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testPushGoogleNotificationsUsingPOSTAsync(String apiKey, PushNotificationTestModel pushNotificationTestModel, final ApiCallback<PushNotificationTestSummaryListModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = testPushGoogleNotificationsUsingPOSTValidateBeforeCall(apiKey, pushNotificationTestModel, _callback);
        Type localVarReturnType = new TypeToken<PushNotificationTestSummaryListModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for testViberIntegrationNotificationsUsingPOST
     * @param apiKey apiKey (required)
     * @param pushNotificationTestModel messageDetails (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> json error </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> not allowed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testViberIntegrationNotificationsUsingPOSTCall(String apiKey, PushNotificationTestModel pushNotificationTestModel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = pushNotificationTestModel;

        // create path and map variables
        String localVarPath = "/restv2/game/{apiKey}/admin/pushNotifications/test/viber/integration"
            .replace("{" + "apiKey" + "}", localVarApiClient.escapeString(apiKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call testViberIntegrationNotificationsUsingPOSTValidateBeforeCall(String apiKey, PushNotificationTestModel pushNotificationTestModel, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling testViberIntegrationNotificationsUsingPOST(Async)");
        }

        // verify the required parameter 'pushNotificationTestModel' is set
        if (pushNotificationTestModel == null) {
            throw new ApiException("Missing the required parameter 'pushNotificationTestModel' when calling testViberIntegrationNotificationsUsingPOST(Async)");
        }

        return testViberIntegrationNotificationsUsingPOSTCall(apiKey, pushNotificationTestModel, _callback);

    }

    /**
     * testViberIntegrationNotifications
     * 
     * @param apiKey apiKey (required)
     * @param pushNotificationTestModel messageDetails (required)
     * @return PushNotificationTestSummaryListModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> json error </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> not allowed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public PushNotificationTestSummaryListModel testViberIntegrationNotificationsUsingPOST(String apiKey, PushNotificationTestModel pushNotificationTestModel) throws ApiException {
        ApiResponse<PushNotificationTestSummaryListModel> localVarResp = testViberIntegrationNotificationsUsingPOSTWithHttpInfo(apiKey, pushNotificationTestModel);
        return localVarResp.getData();
    }

    /**
     * testViberIntegrationNotifications
     * 
     * @param apiKey apiKey (required)
     * @param pushNotificationTestModel messageDetails (required)
     * @return ApiResponse&lt;PushNotificationTestSummaryListModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> json error </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> not allowed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PushNotificationTestSummaryListModel> testViberIntegrationNotificationsUsingPOSTWithHttpInfo(String apiKey, PushNotificationTestModel pushNotificationTestModel) throws ApiException {
        okhttp3.Call localVarCall = testViberIntegrationNotificationsUsingPOSTValidateBeforeCall(apiKey, pushNotificationTestModel, null);
        Type localVarReturnType = new TypeToken<PushNotificationTestSummaryListModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * testViberIntegrationNotifications (asynchronously)
     * 
     * @param apiKey apiKey (required)
     * @param pushNotificationTestModel messageDetails (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> json error </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> not allowed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testViberIntegrationNotificationsUsingPOSTAsync(String apiKey, PushNotificationTestModel pushNotificationTestModel, final ApiCallback<PushNotificationTestSummaryListModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = testViberIntegrationNotificationsUsingPOSTValidateBeforeCall(apiKey, pushNotificationTestModel, _callback);
        Type localVarReturnType = new TypeToken<PushNotificationTestSummaryListModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for testViberProductionNotificationsUsingPOST
     * @param apiKey apiKey (required)
     * @param pushNotificationTestModel messageDetails (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> json error </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> not allowed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testViberProductionNotificationsUsingPOSTCall(String apiKey, PushNotificationTestModel pushNotificationTestModel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = pushNotificationTestModel;

        // create path and map variables
        String localVarPath = "/restv2/game/{apiKey}/admin/pushNotifications/test/viber/production"
            .replace("{" + "apiKey" + "}", localVarApiClient.escapeString(apiKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call testViberProductionNotificationsUsingPOSTValidateBeforeCall(String apiKey, PushNotificationTestModel pushNotificationTestModel, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling testViberProductionNotificationsUsingPOST(Async)");
        }

        // verify the required parameter 'pushNotificationTestModel' is set
        if (pushNotificationTestModel == null) {
            throw new ApiException("Missing the required parameter 'pushNotificationTestModel' when calling testViberProductionNotificationsUsingPOST(Async)");
        }

        return testViberProductionNotificationsUsingPOSTCall(apiKey, pushNotificationTestModel, _callback);

    }

    /**
     * testViberProductionNotifications
     * 
     * @param apiKey apiKey (required)
     * @param pushNotificationTestModel messageDetails (required)
     * @return PushNotificationTestSummaryListModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> json error </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> not allowed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public PushNotificationTestSummaryListModel testViberProductionNotificationsUsingPOST(String apiKey, PushNotificationTestModel pushNotificationTestModel) throws ApiException {
        ApiResponse<PushNotificationTestSummaryListModel> localVarResp = testViberProductionNotificationsUsingPOSTWithHttpInfo(apiKey, pushNotificationTestModel);
        return localVarResp.getData();
    }

    /**
     * testViberProductionNotifications
     * 
     * @param apiKey apiKey (required)
     * @param pushNotificationTestModel messageDetails (required)
     * @return ApiResponse&lt;PushNotificationTestSummaryListModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> json error </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> not allowed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PushNotificationTestSummaryListModel> testViberProductionNotificationsUsingPOSTWithHttpInfo(String apiKey, PushNotificationTestModel pushNotificationTestModel) throws ApiException {
        okhttp3.Call localVarCall = testViberProductionNotificationsUsingPOSTValidateBeforeCall(apiKey, pushNotificationTestModel, null);
        Type localVarReturnType = new TypeToken<PushNotificationTestSummaryListModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * testViberProductionNotifications (asynchronously)
     * 
     * @param apiKey apiKey (required)
     * @param pushNotificationTestModel messageDetails (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> json error </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> not allowed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testViberProductionNotificationsUsingPOSTAsync(String apiKey, PushNotificationTestModel pushNotificationTestModel, final ApiCallback<PushNotificationTestSummaryListModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = testViberProductionNotificationsUsingPOSTValidateBeforeCall(apiKey, pushNotificationTestModel, _callback);
        Type localVarReturnType = new TypeToken<PushNotificationTestSummaryListModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for testWindows8NotificationsUsingPOST
     * @param apiKey apiKey (required)
     * @param pushNotificationTestModel messageDetails (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> json error </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> not allowed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testWindows8NotificationsUsingPOSTCall(String apiKey, PushNotificationTestModel pushNotificationTestModel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = pushNotificationTestModel;

        // create path and map variables
        String localVarPath = "/restv2/game/{apiKey}/admin/pushNotifications/test/microsoft/windows8"
            .replace("{" + "apiKey" + "}", localVarApiClient.escapeString(apiKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call testWindows8NotificationsUsingPOSTValidateBeforeCall(String apiKey, PushNotificationTestModel pushNotificationTestModel, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling testWindows8NotificationsUsingPOST(Async)");
        }

        // verify the required parameter 'pushNotificationTestModel' is set
        if (pushNotificationTestModel == null) {
            throw new ApiException("Missing the required parameter 'pushNotificationTestModel' when calling testWindows8NotificationsUsingPOST(Async)");
        }

        return testWindows8NotificationsUsingPOSTCall(apiKey, pushNotificationTestModel, _callback);

    }

    /**
     * testWindows8Notifications
     * 
     * @param apiKey apiKey (required)
     * @param pushNotificationTestModel messageDetails (required)
     * @return PushNotificationTestSummaryListModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> json error </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> not allowed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public PushNotificationTestSummaryListModel testWindows8NotificationsUsingPOST(String apiKey, PushNotificationTestModel pushNotificationTestModel) throws ApiException {
        ApiResponse<PushNotificationTestSummaryListModel> localVarResp = testWindows8NotificationsUsingPOSTWithHttpInfo(apiKey, pushNotificationTestModel);
        return localVarResp.getData();
    }

    /**
     * testWindows8Notifications
     * 
     * @param apiKey apiKey (required)
     * @param pushNotificationTestModel messageDetails (required)
     * @return ApiResponse&lt;PushNotificationTestSummaryListModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> json error </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> not allowed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PushNotificationTestSummaryListModel> testWindows8NotificationsUsingPOSTWithHttpInfo(String apiKey, PushNotificationTestModel pushNotificationTestModel) throws ApiException {
        okhttp3.Call localVarCall = testWindows8NotificationsUsingPOSTValidateBeforeCall(apiKey, pushNotificationTestModel, null);
        Type localVarReturnType = new TypeToken<PushNotificationTestSummaryListModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * testWindows8Notifications (asynchronously)
     * 
     * @param apiKey apiKey (required)
     * @param pushNotificationTestModel messageDetails (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> json error </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> not allowed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testWindows8NotificationsUsingPOSTAsync(String apiKey, PushNotificationTestModel pushNotificationTestModel, final ApiCallback<PushNotificationTestSummaryListModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = testWindows8NotificationsUsingPOSTValidateBeforeCall(apiKey, pushNotificationTestModel, _callback);
        Type localVarReturnType = new TypeToken<PushNotificationTestSummaryListModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for testWindowsPhone8NotificationsUsingPOST
     * @param apiKey apiKey (required)
     * @param pushNotificationTestModel messageDetails (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> json error </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> not allowed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testWindowsPhone8NotificationsUsingPOSTCall(String apiKey, PushNotificationTestModel pushNotificationTestModel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = pushNotificationTestModel;

        // create path and map variables
        String localVarPath = "/restv2/game/{apiKey}/admin/pushNotifications/test/microsoft/windowsPhone8"
            .replace("{" + "apiKey" + "}", localVarApiClient.escapeString(apiKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call testWindowsPhone8NotificationsUsingPOSTValidateBeforeCall(String apiKey, PushNotificationTestModel pushNotificationTestModel, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling testWindowsPhone8NotificationsUsingPOST(Async)");
        }

        // verify the required parameter 'pushNotificationTestModel' is set
        if (pushNotificationTestModel == null) {
            throw new ApiException("Missing the required parameter 'pushNotificationTestModel' when calling testWindowsPhone8NotificationsUsingPOST(Async)");
        }

        return testWindowsPhone8NotificationsUsingPOSTCall(apiKey, pushNotificationTestModel, _callback);

    }

    /**
     * testWindowsPhone8Notifications
     * 
     * @param apiKey apiKey (required)
     * @param pushNotificationTestModel messageDetails (required)
     * @return PushNotificationTestSummaryListModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> json error </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> not allowed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public PushNotificationTestSummaryListModel testWindowsPhone8NotificationsUsingPOST(String apiKey, PushNotificationTestModel pushNotificationTestModel) throws ApiException {
        ApiResponse<PushNotificationTestSummaryListModel> localVarResp = testWindowsPhone8NotificationsUsingPOSTWithHttpInfo(apiKey, pushNotificationTestModel);
        return localVarResp.getData();
    }

    /**
     * testWindowsPhone8Notifications
     * 
     * @param apiKey apiKey (required)
     * @param pushNotificationTestModel messageDetails (required)
     * @return ApiResponse&lt;PushNotificationTestSummaryListModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> json error </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> not allowed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PushNotificationTestSummaryListModel> testWindowsPhone8NotificationsUsingPOSTWithHttpInfo(String apiKey, PushNotificationTestModel pushNotificationTestModel) throws ApiException {
        okhttp3.Call localVarCall = testWindowsPhone8NotificationsUsingPOSTValidateBeforeCall(apiKey, pushNotificationTestModel, null);
        Type localVarReturnType = new TypeToken<PushNotificationTestSummaryListModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * testWindowsPhone8Notifications (asynchronously)
     * 
     * @param apiKey apiKey (required)
     * @param pushNotificationTestModel messageDetails (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> json error </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> not allowed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testWindowsPhone8NotificationsUsingPOSTAsync(String apiKey, PushNotificationTestModel pushNotificationTestModel, final ApiCallback<PushNotificationTestSummaryListModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = testWindowsPhone8NotificationsUsingPOSTValidateBeforeCall(apiKey, pushNotificationTestModel, _callback);
        Type localVarReturnType = new TypeToken<PushNotificationTestSummaryListModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
