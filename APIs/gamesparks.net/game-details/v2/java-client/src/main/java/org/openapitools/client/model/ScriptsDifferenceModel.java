/*
 * GameSparks Game Details API
 * The API to manage the GameSparks game details
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ScriptsDifferenceModel
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:28:11.072846-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ScriptsDifferenceModel {
  public static final String SERIALIZED_NAME_BIND = "bind";
  @SerializedName(SERIALIZED_NAME_BIND)
  private String bind;

  /**
   * Gets or Sets changeType
   */
  @JsonAdapter(ChangeTypeEnum.Adapter.class)
  public enum ChangeTypeEnum {
    NOCHANGE("NOCHANGE"),
    
    ADDED("ADDED"),
    
    CHANGED("CHANGED"),
    
    DELETED("DELETED"),
    
    IGNORED("IGNORED"),
    
    CHANGED_CODE_INVALID("CHANGED_CODE_INVALID"),
    
    CHANGED_NAME_INVALID("CHANGED_NAME_INVALID");

    private String value;

    ChangeTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ChangeTypeEnum fromValue(String value) {
      for (ChangeTypeEnum b : ChangeTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ChangeTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ChangeTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ChangeTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ChangeTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ChangeTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CHANGE_TYPE = "changeType";
  @SerializedName(SERIALIZED_NAME_CHANGE_TYPE)
  private ChangeTypeEnum changeType;

  public static final String SERIALIZED_NAME_FILE_NAME = "fileName";
  @SerializedName(SERIALIZED_NAME_FILE_NAME)
  private String fileName;

  public static final String SERIALIZED_NAME_SCRIPT1 = "script1";
  @SerializedName(SERIALIZED_NAME_SCRIPT1)
  private String script1;

  public static final String SERIALIZED_NAME_SCRIPT2 = "script2";
  @SerializedName(SERIALIZED_NAME_SCRIPT2)
  private String script2;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public ScriptsDifferenceModel() {
  }

  public ScriptsDifferenceModel bind(String bind) {
    this.bind = bind;
    return this;
  }

  /**
   * Get bind
   * @return bind
   */
  @javax.annotation.Nullable
  public String getBind() {
    return bind;
  }

  public void setBind(String bind) {
    this.bind = bind;
  }


  public ScriptsDifferenceModel changeType(ChangeTypeEnum changeType) {
    this.changeType = changeType;
    return this;
  }

  /**
   * Get changeType
   * @return changeType
   */
  @javax.annotation.Nullable
  public ChangeTypeEnum getChangeType() {
    return changeType;
  }

  public void setChangeType(ChangeTypeEnum changeType) {
    this.changeType = changeType;
  }


  public ScriptsDifferenceModel fileName(String fileName) {
    this.fileName = fileName;
    return this;
  }

  /**
   * Get fileName
   * @return fileName
   */
  @javax.annotation.Nullable
  public String getFileName() {
    return fileName;
  }

  public void setFileName(String fileName) {
    this.fileName = fileName;
  }


  public ScriptsDifferenceModel script1(String script1) {
    this.script1 = script1;
    return this;
  }

  /**
   * Get script1
   * @return script1
   */
  @javax.annotation.Nullable
  public String getScript1() {
    return script1;
  }

  public void setScript1(String script1) {
    this.script1 = script1;
  }


  public ScriptsDifferenceModel script2(String script2) {
    this.script2 = script2;
    return this;
  }

  /**
   * Get script2
   * @return script2
   */
  @javax.annotation.Nullable
  public String getScript2() {
    return script2;
  }

  public void setScript2(String script2) {
    this.script2 = script2;
  }


  public ScriptsDifferenceModel type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ScriptsDifferenceModel scriptsDifferenceModel = (ScriptsDifferenceModel) o;
    return Objects.equals(this.bind, scriptsDifferenceModel.bind) &&
        Objects.equals(this.changeType, scriptsDifferenceModel.changeType) &&
        Objects.equals(this.fileName, scriptsDifferenceModel.fileName) &&
        Objects.equals(this.script1, scriptsDifferenceModel.script1) &&
        Objects.equals(this.script2, scriptsDifferenceModel.script2) &&
        Objects.equals(this.type, scriptsDifferenceModel.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bind, changeType, fileName, script1, script2, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ScriptsDifferenceModel {\n");
    sb.append("    bind: ").append(toIndentedString(bind)).append("\n");
    sb.append("    changeType: ").append(toIndentedString(changeType)).append("\n");
    sb.append("    fileName: ").append(toIndentedString(fileName)).append("\n");
    sb.append("    script1: ").append(toIndentedString(script1)).append("\n");
    sb.append("    script2: ").append(toIndentedString(script2)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("bind");
    openapiFields.add("changeType");
    openapiFields.add("fileName");
    openapiFields.add("script1");
    openapiFields.add("script2");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ScriptsDifferenceModel
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ScriptsDifferenceModel.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ScriptsDifferenceModel is not found in the empty JSON string", ScriptsDifferenceModel.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ScriptsDifferenceModel.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ScriptsDifferenceModel` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("bind") != null && !jsonObj.get("bind").isJsonNull()) && !jsonObj.get("bind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bind").toString()));
      }
      if ((jsonObj.get("changeType") != null && !jsonObj.get("changeType").isJsonNull()) && !jsonObj.get("changeType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `changeType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("changeType").toString()));
      }
      // validate the optional field `changeType`
      if (jsonObj.get("changeType") != null && !jsonObj.get("changeType").isJsonNull()) {
        ChangeTypeEnum.validateJsonElement(jsonObj.get("changeType"));
      }
      if ((jsonObj.get("fileName") != null && !jsonObj.get("fileName").isJsonNull()) && !jsonObj.get("fileName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fileName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fileName").toString()));
      }
      if ((jsonObj.get("script1") != null && !jsonObj.get("script1").isJsonNull()) && !jsonObj.get("script1").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `script1` to be a primitive type in the JSON string but got `%s`", jsonObj.get("script1").toString()));
      }
      if ((jsonObj.get("script2") != null && !jsonObj.get("script2").isJsonNull()) && !jsonObj.get("script2").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `script2` to be a primitive type in the JSON string but got `%s`", jsonObj.get("script2").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ScriptsDifferenceModel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ScriptsDifferenceModel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ScriptsDifferenceModel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ScriptsDifferenceModel.class));

       return (TypeAdapter<T>) new TypeAdapter<ScriptsDifferenceModel>() {
           @Override
           public void write(JsonWriter out, ScriptsDifferenceModel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ScriptsDifferenceModel read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ScriptsDifferenceModel given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ScriptsDifferenceModel
   * @throws IOException if the JSON string is invalid with respect to ScriptsDifferenceModel
   */
  public static ScriptsDifferenceModel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ScriptsDifferenceModel.class);
  }

  /**
   * Convert an instance of ScriptsDifferenceModel to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

