/*
 * GameSparks Game Details API
 * The API to manage the GameSparks game details
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.MessageModel;
import org.openapitools.client.model.SnapshotCreationModel;
import org.openapitools.client.model.SnapshotCreationSuccessModel;
import org.openapitools.client.model.SnapshotModel;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SnapshotsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SnapshotsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SnapshotsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for copySnapshotToExistingGameUsingPOST1
     * @param apiKey apiKey (required)
     * @param snapshotId snapshotId (required)
     * @param targetApiKey targetApiKey (required)
     * @param includeGameConfig includeGameConfig (optional, default to true)
     * @param includeMetadata includeMetadata (optional, default to true)
     * @param includeBinaries includeBinaries (optional, default to true)
     * @param includeCollaborators includeCollaborators (optional, default to true)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> json error </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> not allowed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call copySnapshotToExistingGameUsingPOST1Call(String apiKey, String snapshotId, String targetApiKey, Boolean includeGameConfig, Boolean includeMetadata, Boolean includeBinaries, Boolean includeCollaborators, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/restv2/game/{apiKey}/admin/snapshots/{snapshotId}/copy/to/{targetApiKey}"
            .replace("{" + "apiKey" + "}", localVarApiClient.escapeString(apiKey.toString()))
            .replace("{" + "snapshotId" + "}", localVarApiClient.escapeString(snapshotId.toString()))
            .replace("{" + "targetApiKey" + "}", localVarApiClient.escapeString(targetApiKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (includeGameConfig != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeGameConfig", includeGameConfig));
        }

        if (includeMetadata != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeMetadata", includeMetadata));
        }

        if (includeBinaries != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeBinaries", includeBinaries));
        }

        if (includeCollaborators != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeCollaborators", includeCollaborators));
        }

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call copySnapshotToExistingGameUsingPOST1ValidateBeforeCall(String apiKey, String snapshotId, String targetApiKey, Boolean includeGameConfig, Boolean includeMetadata, Boolean includeBinaries, Boolean includeCollaborators, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling copySnapshotToExistingGameUsingPOST1(Async)");
        }

        // verify the required parameter 'snapshotId' is set
        if (snapshotId == null) {
            throw new ApiException("Missing the required parameter 'snapshotId' when calling copySnapshotToExistingGameUsingPOST1(Async)");
        }

        // verify the required parameter 'targetApiKey' is set
        if (targetApiKey == null) {
            throw new ApiException("Missing the required parameter 'targetApiKey' when calling copySnapshotToExistingGameUsingPOST1(Async)");
        }

        return copySnapshotToExistingGameUsingPOST1Call(apiKey, snapshotId, targetApiKey, includeGameConfig, includeMetadata, includeBinaries, includeCollaborators, _callback);

    }

    /**
     * copySnapshotToExistingGame
     * 
     * @param apiKey apiKey (required)
     * @param snapshotId snapshotId (required)
     * @param targetApiKey targetApiKey (required)
     * @param includeGameConfig includeGameConfig (optional, default to true)
     * @param includeMetadata includeMetadata (optional, default to true)
     * @param includeBinaries includeBinaries (optional, default to true)
     * @param includeCollaborators includeCollaborators (optional, default to true)
     * @return SnapshotCreationSuccessModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> json error </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> not allowed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public SnapshotCreationSuccessModel copySnapshotToExistingGameUsingPOST1(String apiKey, String snapshotId, String targetApiKey, Boolean includeGameConfig, Boolean includeMetadata, Boolean includeBinaries, Boolean includeCollaborators) throws ApiException {
        ApiResponse<SnapshotCreationSuccessModel> localVarResp = copySnapshotToExistingGameUsingPOST1WithHttpInfo(apiKey, snapshotId, targetApiKey, includeGameConfig, includeMetadata, includeBinaries, includeCollaborators);
        return localVarResp.getData();
    }

    /**
     * copySnapshotToExistingGame
     * 
     * @param apiKey apiKey (required)
     * @param snapshotId snapshotId (required)
     * @param targetApiKey targetApiKey (required)
     * @param includeGameConfig includeGameConfig (optional, default to true)
     * @param includeMetadata includeMetadata (optional, default to true)
     * @param includeBinaries includeBinaries (optional, default to true)
     * @param includeCollaborators includeCollaborators (optional, default to true)
     * @return ApiResponse&lt;SnapshotCreationSuccessModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> json error </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> not allowed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SnapshotCreationSuccessModel> copySnapshotToExistingGameUsingPOST1WithHttpInfo(String apiKey, String snapshotId, String targetApiKey, Boolean includeGameConfig, Boolean includeMetadata, Boolean includeBinaries, Boolean includeCollaborators) throws ApiException {
        okhttp3.Call localVarCall = copySnapshotToExistingGameUsingPOST1ValidateBeforeCall(apiKey, snapshotId, targetApiKey, includeGameConfig, includeMetadata, includeBinaries, includeCollaborators, null);
        Type localVarReturnType = new TypeToken<SnapshotCreationSuccessModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * copySnapshotToExistingGame (asynchronously)
     * 
     * @param apiKey apiKey (required)
     * @param snapshotId snapshotId (required)
     * @param targetApiKey targetApiKey (required)
     * @param includeGameConfig includeGameConfig (optional, default to true)
     * @param includeMetadata includeMetadata (optional, default to true)
     * @param includeBinaries includeBinaries (optional, default to true)
     * @param includeCollaborators includeCollaborators (optional, default to true)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> json error </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> not allowed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call copySnapshotToExistingGameUsingPOST1Async(String apiKey, String snapshotId, String targetApiKey, Boolean includeGameConfig, Boolean includeMetadata, Boolean includeBinaries, Boolean includeCollaborators, final ApiCallback<SnapshotCreationSuccessModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = copySnapshotToExistingGameUsingPOST1ValidateBeforeCall(apiKey, snapshotId, targetApiKey, includeGameConfig, includeMetadata, includeBinaries, includeCollaborators, _callback);
        Type localVarReturnType = new TypeToken<SnapshotCreationSuccessModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for copySnapshotToNewGameUsingPOST
     * @param apiKey apiKey (required)
     * @param snapshotId snapshotId (required)
     * @param includeGameConfig includeGameConfig (optional, default to true)
     * @param includeMetadata includeMetadata (optional, default to true)
     * @param includeBinaries includeBinaries (optional, default to true)
     * @param includeCollaborators includeCollaborators (optional, default to true)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> json error </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> not allowed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call copySnapshotToNewGameUsingPOSTCall(String apiKey, String snapshotId, Boolean includeGameConfig, Boolean includeMetadata, Boolean includeBinaries, Boolean includeCollaborators, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/restv2/game/{apiKey}/admin/snapshots/{snapshotId}/copy"
            .replace("{" + "apiKey" + "}", localVarApiClient.escapeString(apiKey.toString()))
            .replace("{" + "snapshotId" + "}", localVarApiClient.escapeString(snapshotId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (includeGameConfig != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeGameConfig", includeGameConfig));
        }

        if (includeMetadata != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeMetadata", includeMetadata));
        }

        if (includeBinaries != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeBinaries", includeBinaries));
        }

        if (includeCollaborators != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeCollaborators", includeCollaborators));
        }

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call copySnapshotToNewGameUsingPOSTValidateBeforeCall(String apiKey, String snapshotId, Boolean includeGameConfig, Boolean includeMetadata, Boolean includeBinaries, Boolean includeCollaborators, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling copySnapshotToNewGameUsingPOST(Async)");
        }

        // verify the required parameter 'snapshotId' is set
        if (snapshotId == null) {
            throw new ApiException("Missing the required parameter 'snapshotId' when calling copySnapshotToNewGameUsingPOST(Async)");
        }

        return copySnapshotToNewGameUsingPOSTCall(apiKey, snapshotId, includeGameConfig, includeMetadata, includeBinaries, includeCollaborators, _callback);

    }

    /**
     * copySnapshotToNewGame
     * 
     * @param apiKey apiKey (required)
     * @param snapshotId snapshotId (required)
     * @param includeGameConfig includeGameConfig (optional, default to true)
     * @param includeMetadata includeMetadata (optional, default to true)
     * @param includeBinaries includeBinaries (optional, default to true)
     * @param includeCollaborators includeCollaborators (optional, default to true)
     * @return SnapshotCreationSuccessModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> json error </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> not allowed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public SnapshotCreationSuccessModel copySnapshotToNewGameUsingPOST(String apiKey, String snapshotId, Boolean includeGameConfig, Boolean includeMetadata, Boolean includeBinaries, Boolean includeCollaborators) throws ApiException {
        ApiResponse<SnapshotCreationSuccessModel> localVarResp = copySnapshotToNewGameUsingPOSTWithHttpInfo(apiKey, snapshotId, includeGameConfig, includeMetadata, includeBinaries, includeCollaborators);
        return localVarResp.getData();
    }

    /**
     * copySnapshotToNewGame
     * 
     * @param apiKey apiKey (required)
     * @param snapshotId snapshotId (required)
     * @param includeGameConfig includeGameConfig (optional, default to true)
     * @param includeMetadata includeMetadata (optional, default to true)
     * @param includeBinaries includeBinaries (optional, default to true)
     * @param includeCollaborators includeCollaborators (optional, default to true)
     * @return ApiResponse&lt;SnapshotCreationSuccessModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> json error </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> not allowed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SnapshotCreationSuccessModel> copySnapshotToNewGameUsingPOSTWithHttpInfo(String apiKey, String snapshotId, Boolean includeGameConfig, Boolean includeMetadata, Boolean includeBinaries, Boolean includeCollaborators) throws ApiException {
        okhttp3.Call localVarCall = copySnapshotToNewGameUsingPOSTValidateBeforeCall(apiKey, snapshotId, includeGameConfig, includeMetadata, includeBinaries, includeCollaborators, null);
        Type localVarReturnType = new TypeToken<SnapshotCreationSuccessModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * copySnapshotToNewGame (asynchronously)
     * 
     * @param apiKey apiKey (required)
     * @param snapshotId snapshotId (required)
     * @param includeGameConfig includeGameConfig (optional, default to true)
     * @param includeMetadata includeMetadata (optional, default to true)
     * @param includeBinaries includeBinaries (optional, default to true)
     * @param includeCollaborators includeCollaborators (optional, default to true)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> json error </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> not allowed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call copySnapshotToNewGameUsingPOSTAsync(String apiKey, String snapshotId, Boolean includeGameConfig, Boolean includeMetadata, Boolean includeBinaries, Boolean includeCollaborators, final ApiCallback<SnapshotCreationSuccessModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = copySnapshotToNewGameUsingPOSTValidateBeforeCall(apiKey, snapshotId, includeGameConfig, includeMetadata, includeBinaries, includeCollaborators, _callback);
        Type localVarReturnType = new TypeToken<SnapshotCreationSuccessModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createSnapshotsUsingPOST
     * @param apiKey apiKey (required)
     * @param snapshotCreationModel description (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> json error </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> not allowed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createSnapshotsUsingPOSTCall(String apiKey, SnapshotCreationModel snapshotCreationModel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = snapshotCreationModel;

        // create path and map variables
        String localVarPath = "/restv2/game/{apiKey}/admin/snapshots"
            .replace("{" + "apiKey" + "}", localVarApiClient.escapeString(apiKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createSnapshotsUsingPOSTValidateBeforeCall(String apiKey, SnapshotCreationModel snapshotCreationModel, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling createSnapshotsUsingPOST(Async)");
        }

        // verify the required parameter 'snapshotCreationModel' is set
        if (snapshotCreationModel == null) {
            throw new ApiException("Missing the required parameter 'snapshotCreationModel' when calling createSnapshotsUsingPOST(Async)");
        }

        return createSnapshotsUsingPOSTCall(apiKey, snapshotCreationModel, _callback);

    }

    /**
     * createSnapshots
     * 
     * @param apiKey apiKey (required)
     * @param snapshotCreationModel description (required)
     * @return SnapshotModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> json error </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> not allowed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public SnapshotModel createSnapshotsUsingPOST(String apiKey, SnapshotCreationModel snapshotCreationModel) throws ApiException {
        ApiResponse<SnapshotModel> localVarResp = createSnapshotsUsingPOSTWithHttpInfo(apiKey, snapshotCreationModel);
        return localVarResp.getData();
    }

    /**
     * createSnapshots
     * 
     * @param apiKey apiKey (required)
     * @param snapshotCreationModel description (required)
     * @return ApiResponse&lt;SnapshotModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> json error </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> not allowed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SnapshotModel> createSnapshotsUsingPOSTWithHttpInfo(String apiKey, SnapshotCreationModel snapshotCreationModel) throws ApiException {
        okhttp3.Call localVarCall = createSnapshotsUsingPOSTValidateBeforeCall(apiKey, snapshotCreationModel, null);
        Type localVarReturnType = new TypeToken<SnapshotModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * createSnapshots (asynchronously)
     * 
     * @param apiKey apiKey (required)
     * @param snapshotCreationModel description (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> json error </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> not allowed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createSnapshotsUsingPOSTAsync(String apiKey, SnapshotCreationModel snapshotCreationModel, final ApiCallback<SnapshotModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = createSnapshotsUsingPOSTValidateBeforeCall(apiKey, snapshotCreationModel, _callback);
        Type localVarReturnType = new TypeToken<SnapshotModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteSnapshotUsingDELETE1
     * @param apiKey apiKey (required)
     * @param snapshotId snapshotId (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> json error </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> not allowed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteSnapshotUsingDELETE1Call(String apiKey, String snapshotId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/restv2/game/{apiKey}/admin/snapshots/{snapshotId}"
            .replace("{" + "apiKey" + "}", localVarApiClient.escapeString(apiKey.toString()))
            .replace("{" + "snapshotId" + "}", localVarApiClient.escapeString(snapshotId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteSnapshotUsingDELETE1ValidateBeforeCall(String apiKey, String snapshotId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling deleteSnapshotUsingDELETE1(Async)");
        }

        // verify the required parameter 'snapshotId' is set
        if (snapshotId == null) {
            throw new ApiException("Missing the required parameter 'snapshotId' when calling deleteSnapshotUsingDELETE1(Async)");
        }

        return deleteSnapshotUsingDELETE1Call(apiKey, snapshotId, _callback);

    }

    /**
     * deleteSnapshot
     * 
     * @param apiKey apiKey (required)
     * @param snapshotId snapshotId (required)
     * @return MessageModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> json error </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> not allowed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public MessageModel deleteSnapshotUsingDELETE1(String apiKey, String snapshotId) throws ApiException {
        ApiResponse<MessageModel> localVarResp = deleteSnapshotUsingDELETE1WithHttpInfo(apiKey, snapshotId);
        return localVarResp.getData();
    }

    /**
     * deleteSnapshot
     * 
     * @param apiKey apiKey (required)
     * @param snapshotId snapshotId (required)
     * @return ApiResponse&lt;MessageModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> json error </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> not allowed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MessageModel> deleteSnapshotUsingDELETE1WithHttpInfo(String apiKey, String snapshotId) throws ApiException {
        okhttp3.Call localVarCall = deleteSnapshotUsingDELETE1ValidateBeforeCall(apiKey, snapshotId, null);
        Type localVarReturnType = new TypeToken<MessageModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * deleteSnapshot (asynchronously)
     * 
     * @param apiKey apiKey (required)
     * @param snapshotId snapshotId (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> json error </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> not allowed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteSnapshotUsingDELETE1Async(String apiKey, String snapshotId, final ApiCallback<MessageModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteSnapshotUsingDELETE1ValidateBeforeCall(apiKey, snapshotId, _callback);
        Type localVarReturnType = new TypeToken<MessageModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getLiveSnapshotIdUsingGET
     * @param apiKey apiKey (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> json error </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> not allowed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLiveSnapshotIdUsingGETCall(String apiKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/restv2/game/{apiKey}/admin/snapshots/liveSnapshotId"
            .replace("{" + "apiKey" + "}", localVarApiClient.escapeString(apiKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getLiveSnapshotIdUsingGETValidateBeforeCall(String apiKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling getLiveSnapshotIdUsingGET(Async)");
        }

        return getLiveSnapshotIdUsingGETCall(apiKey, _callback);

    }

    /**
     * getLiveSnapshotId
     * 
     * @param apiKey apiKey (required)
     * @return MessageModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> json error </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> not allowed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public MessageModel getLiveSnapshotIdUsingGET(String apiKey) throws ApiException {
        ApiResponse<MessageModel> localVarResp = getLiveSnapshotIdUsingGETWithHttpInfo(apiKey);
        return localVarResp.getData();
    }

    /**
     * getLiveSnapshotId
     * 
     * @param apiKey apiKey (required)
     * @return ApiResponse&lt;MessageModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> json error </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> not allowed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MessageModel> getLiveSnapshotIdUsingGETWithHttpInfo(String apiKey) throws ApiException {
        okhttp3.Call localVarCall = getLiveSnapshotIdUsingGETValidateBeforeCall(apiKey, null);
        Type localVarReturnType = new TypeToken<MessageModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * getLiveSnapshotId (asynchronously)
     * 
     * @param apiKey apiKey (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> json error </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> not allowed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLiveSnapshotIdUsingGETAsync(String apiKey, final ApiCallback<MessageModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = getLiveSnapshotIdUsingGETValidateBeforeCall(apiKey, _callback);
        Type localVarReturnType = new TypeToken<MessageModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSnapshotUsingGET
     * @param apiKey apiKey (required)
     * @param snapshotId snapshotId (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> json error </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> not allowed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSnapshotUsingGETCall(String apiKey, String snapshotId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/restv2/game/{apiKey}/admin/snapshots/{snapshotId}"
            .replace("{" + "apiKey" + "}", localVarApiClient.escapeString(apiKey.toString()))
            .replace("{" + "snapshotId" + "}", localVarApiClient.escapeString(snapshotId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSnapshotUsingGETValidateBeforeCall(String apiKey, String snapshotId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling getSnapshotUsingGET(Async)");
        }

        // verify the required parameter 'snapshotId' is set
        if (snapshotId == null) {
            throw new ApiException("Missing the required parameter 'snapshotId' when calling getSnapshotUsingGET(Async)");
        }

        return getSnapshotUsingGETCall(apiKey, snapshotId, _callback);

    }

    /**
     * getSnapshot
     * 
     * @param apiKey apiKey (required)
     * @param snapshotId snapshotId (required)
     * @return SnapshotModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> json error </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> not allowed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public SnapshotModel getSnapshotUsingGET(String apiKey, String snapshotId) throws ApiException {
        ApiResponse<SnapshotModel> localVarResp = getSnapshotUsingGETWithHttpInfo(apiKey, snapshotId);
        return localVarResp.getData();
    }

    /**
     * getSnapshot
     * 
     * @param apiKey apiKey (required)
     * @param snapshotId snapshotId (required)
     * @return ApiResponse&lt;SnapshotModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> json error </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> not allowed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SnapshotModel> getSnapshotUsingGETWithHttpInfo(String apiKey, String snapshotId) throws ApiException {
        okhttp3.Call localVarCall = getSnapshotUsingGETValidateBeforeCall(apiKey, snapshotId, null);
        Type localVarReturnType = new TypeToken<SnapshotModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * getSnapshot (asynchronously)
     * 
     * @param apiKey apiKey (required)
     * @param snapshotId snapshotId (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> json error </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> not allowed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSnapshotUsingGETAsync(String apiKey, String snapshotId, final ApiCallback<SnapshotModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSnapshotUsingGETValidateBeforeCall(apiKey, snapshotId, _callback);
        Type localVarReturnType = new TypeToken<SnapshotModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSnapshotsUsingGET
     * @param apiKey apiKey (required)
     * @param page page (required)
     * @param pageSize pageSize (optional, default to 20)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> json error </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> not allowed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSnapshotsUsingGETCall(String apiKey, Integer page, Integer pageSize, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/restv2/game/{apiKey}/admin/snapshots/page/{page}"
            .replace("{" + "apiKey" + "}", localVarApiClient.escapeString(apiKey.toString()))
            .replace("{" + "page" + "}", localVarApiClient.escapeString(page.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSnapshotsUsingGETValidateBeforeCall(String apiKey, Integer page, Integer pageSize, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling getSnapshotsUsingGET(Async)");
        }

        // verify the required parameter 'page' is set
        if (page == null) {
            throw new ApiException("Missing the required parameter 'page' when calling getSnapshotsUsingGET(Async)");
        }

        return getSnapshotsUsingGETCall(apiKey, page, pageSize, _callback);

    }

    /**
     * getSnapshots
     * 
     * @param apiKey apiKey (required)
     * @param page page (required)
     * @param pageSize pageSize (optional, default to 20)
     * @return List&lt;SnapshotModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> json error </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> not allowed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public List<SnapshotModel> getSnapshotsUsingGET(String apiKey, Integer page, Integer pageSize) throws ApiException {
        ApiResponse<List<SnapshotModel>> localVarResp = getSnapshotsUsingGETWithHttpInfo(apiKey, page, pageSize);
        return localVarResp.getData();
    }

    /**
     * getSnapshots
     * 
     * @param apiKey apiKey (required)
     * @param page page (required)
     * @param pageSize pageSize (optional, default to 20)
     * @return ApiResponse&lt;List&lt;SnapshotModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> json error </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> not allowed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<SnapshotModel>> getSnapshotsUsingGETWithHttpInfo(String apiKey, Integer page, Integer pageSize) throws ApiException {
        okhttp3.Call localVarCall = getSnapshotsUsingGETValidateBeforeCall(apiKey, page, pageSize, null);
        Type localVarReturnType = new TypeToken<List<SnapshotModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * getSnapshots (asynchronously)
     * 
     * @param apiKey apiKey (required)
     * @param page page (required)
     * @param pageSize pageSize (optional, default to 20)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> json error </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> not allowed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSnapshotsUsingGETAsync(String apiKey, Integer page, Integer pageSize, final ApiCallback<List<SnapshotModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSnapshotsUsingGETValidateBeforeCall(apiKey, page, pageSize, _callback);
        Type localVarReturnType = new TypeToken<List<SnapshotModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSnapshotsUsingGET1
     * @param apiKey apiKey (required)
     * @param pageSize pageSize (optional, default to 20)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> json error </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> not allowed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSnapshotsUsingGET1Call(String apiKey, Integer pageSize, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/restv2/game/{apiKey}/admin/snapshots"
            .replace("{" + "apiKey" + "}", localVarApiClient.escapeString(apiKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSnapshotsUsingGET1ValidateBeforeCall(String apiKey, Integer pageSize, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling getSnapshotsUsingGET1(Async)");
        }

        return getSnapshotsUsingGET1Call(apiKey, pageSize, _callback);

    }

    /**
     * getSnapshots
     * 
     * @param apiKey apiKey (required)
     * @param pageSize pageSize (optional, default to 20)
     * @return List&lt;SnapshotModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> json error </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> not allowed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public List<SnapshotModel> getSnapshotsUsingGET1(String apiKey, Integer pageSize) throws ApiException {
        ApiResponse<List<SnapshotModel>> localVarResp = getSnapshotsUsingGET1WithHttpInfo(apiKey, pageSize);
        return localVarResp.getData();
    }

    /**
     * getSnapshots
     * 
     * @param apiKey apiKey (required)
     * @param pageSize pageSize (optional, default to 20)
     * @return ApiResponse&lt;List&lt;SnapshotModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> json error </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> not allowed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<SnapshotModel>> getSnapshotsUsingGET1WithHttpInfo(String apiKey, Integer pageSize) throws ApiException {
        okhttp3.Call localVarCall = getSnapshotsUsingGET1ValidateBeforeCall(apiKey, pageSize, null);
        Type localVarReturnType = new TypeToken<List<SnapshotModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * getSnapshots (asynchronously)
     * 
     * @param apiKey apiKey (required)
     * @param pageSize pageSize (optional, default to 20)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> json error </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> not allowed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSnapshotsUsingGET1Async(String apiKey, Integer pageSize, final ApiCallback<List<SnapshotModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSnapshotsUsingGET1ValidateBeforeCall(apiKey, pageSize, _callback);
        Type localVarReturnType = new TypeToken<List<SnapshotModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for publishSnapshotUsingPOST1
     * @param apiKey apiKey (required)
     * @param snapshotId snapshotId (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> json error </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> not allowed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call publishSnapshotUsingPOST1Call(String apiKey, String snapshotId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/restv2/game/{apiKey}/admin/snapshots/{snapshotId}/publish"
            .replace("{" + "apiKey" + "}", localVarApiClient.escapeString(apiKey.toString()))
            .replace("{" + "snapshotId" + "}", localVarApiClient.escapeString(snapshotId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call publishSnapshotUsingPOST1ValidateBeforeCall(String apiKey, String snapshotId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling publishSnapshotUsingPOST1(Async)");
        }

        // verify the required parameter 'snapshotId' is set
        if (snapshotId == null) {
            throw new ApiException("Missing the required parameter 'snapshotId' when calling publishSnapshotUsingPOST1(Async)");
        }

        return publishSnapshotUsingPOST1Call(apiKey, snapshotId, _callback);

    }

    /**
     * publishSnapshot
     * 
     * @param apiKey apiKey (required)
     * @param snapshotId snapshotId (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> json error </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> not allowed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public void publishSnapshotUsingPOST1(String apiKey, String snapshotId) throws ApiException {
        publishSnapshotUsingPOST1WithHttpInfo(apiKey, snapshotId);
    }

    /**
     * publishSnapshot
     * 
     * @param apiKey apiKey (required)
     * @param snapshotId snapshotId (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> json error </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> not allowed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> publishSnapshotUsingPOST1WithHttpInfo(String apiKey, String snapshotId) throws ApiException {
        okhttp3.Call localVarCall = publishSnapshotUsingPOST1ValidateBeforeCall(apiKey, snapshotId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * publishSnapshot (asynchronously)
     * 
     * @param apiKey apiKey (required)
     * @param snapshotId snapshotId (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> json error </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> not allowed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call publishSnapshotUsingPOST1Async(String apiKey, String snapshotId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = publishSnapshotUsingPOST1ValidateBeforeCall(apiKey, snapshotId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for revertToSnapshotUsingPOST
     * @param apiKey apiKey (required)
     * @param snapshotId snapshotId (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> json error </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> not allowed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call revertToSnapshotUsingPOSTCall(String apiKey, String snapshotId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/restv2/game/{apiKey}/admin/snapshots/revert/to/{snapshotId}"
            .replace("{" + "apiKey" + "}", localVarApiClient.escapeString(apiKey.toString()))
            .replace("{" + "snapshotId" + "}", localVarApiClient.escapeString(snapshotId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call revertToSnapshotUsingPOSTValidateBeforeCall(String apiKey, String snapshotId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling revertToSnapshotUsingPOST(Async)");
        }

        // verify the required parameter 'snapshotId' is set
        if (snapshotId == null) {
            throw new ApiException("Missing the required parameter 'snapshotId' when calling revertToSnapshotUsingPOST(Async)");
        }

        return revertToSnapshotUsingPOSTCall(apiKey, snapshotId, _callback);

    }

    /**
     * revertToSnapshot
     * 
     * @param apiKey apiKey (required)
     * @param snapshotId snapshotId (required)
     * @return MessageModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> json error </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> not allowed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public MessageModel revertToSnapshotUsingPOST(String apiKey, String snapshotId) throws ApiException {
        ApiResponse<MessageModel> localVarResp = revertToSnapshotUsingPOSTWithHttpInfo(apiKey, snapshotId);
        return localVarResp.getData();
    }

    /**
     * revertToSnapshot
     * 
     * @param apiKey apiKey (required)
     * @param snapshotId snapshotId (required)
     * @return ApiResponse&lt;MessageModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> json error </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> not allowed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MessageModel> revertToSnapshotUsingPOSTWithHttpInfo(String apiKey, String snapshotId) throws ApiException {
        okhttp3.Call localVarCall = revertToSnapshotUsingPOSTValidateBeforeCall(apiKey, snapshotId, null);
        Type localVarReturnType = new TypeToken<MessageModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * revertToSnapshot (asynchronously)
     * 
     * @param apiKey apiKey (required)
     * @param snapshotId snapshotId (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> json error </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> not allowed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call revertToSnapshotUsingPOSTAsync(String apiKey, String snapshotId, final ApiCallback<MessageModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = revertToSnapshotUsingPOSTValidateBeforeCall(apiKey, snapshotId, _callback);
        Type localVarReturnType = new TypeToken<MessageModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for unpublishSnapshotUsingPOST
     * @param apiKey apiKey (required)
     * @param snapshotId snapshotId (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> json error </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> not allowed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call unpublishSnapshotUsingPOSTCall(String apiKey, String snapshotId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/restv2/game/{apiKey}/admin/snapshots/{snapshotId}/unpublish"
            .replace("{" + "apiKey" + "}", localVarApiClient.escapeString(apiKey.toString()))
            .replace("{" + "snapshotId" + "}", localVarApiClient.escapeString(snapshotId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call unpublishSnapshotUsingPOSTValidateBeforeCall(String apiKey, String snapshotId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling unpublishSnapshotUsingPOST(Async)");
        }

        // verify the required parameter 'snapshotId' is set
        if (snapshotId == null) {
            throw new ApiException("Missing the required parameter 'snapshotId' when calling unpublishSnapshotUsingPOST(Async)");
        }

        return unpublishSnapshotUsingPOSTCall(apiKey, snapshotId, _callback);

    }

    /**
     * unpublishSnapshot
     * 
     * @param apiKey apiKey (required)
     * @param snapshotId snapshotId (required)
     * @return MessageModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> json error </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> not allowed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public MessageModel unpublishSnapshotUsingPOST(String apiKey, String snapshotId) throws ApiException {
        ApiResponse<MessageModel> localVarResp = unpublishSnapshotUsingPOSTWithHttpInfo(apiKey, snapshotId);
        return localVarResp.getData();
    }

    /**
     * unpublishSnapshot
     * 
     * @param apiKey apiKey (required)
     * @param snapshotId snapshotId (required)
     * @return ApiResponse&lt;MessageModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> json error </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> not allowed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MessageModel> unpublishSnapshotUsingPOSTWithHttpInfo(String apiKey, String snapshotId) throws ApiException {
        okhttp3.Call localVarCall = unpublishSnapshotUsingPOSTValidateBeforeCall(apiKey, snapshotId, null);
        Type localVarReturnType = new TypeToken<MessageModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * unpublishSnapshot (asynchronously)
     * 
     * @param apiKey apiKey (required)
     * @param snapshotId snapshotId (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> json error </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> not allowed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call unpublishSnapshotUsingPOSTAsync(String apiKey, String snapshotId, final ApiCallback<MessageModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = unpublishSnapshotUsingPOSTValidateBeforeCall(apiKey, snapshotId, _callback);
        Type localVarReturnType = new TypeToken<MessageModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
