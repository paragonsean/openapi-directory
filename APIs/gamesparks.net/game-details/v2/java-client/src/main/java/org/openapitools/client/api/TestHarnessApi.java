/*
 * GameSparks Game Details API
 * The API to manage the GameSparks game details
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.MessageModel;
import org.openapitools.client.model.TestHarnessScenarioModel;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TestHarnessApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TestHarnessApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TestHarnessApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createTestHarnessScenarioUsingPOST
     * @param apiKey apiKey (required)
     * @param testHarnessScenarioModel testHarnessScenarioDTO (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> json error </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> not allowed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createTestHarnessScenarioUsingPOSTCall(String apiKey, TestHarnessScenarioModel testHarnessScenarioModel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = testHarnessScenarioModel;

        // create path and map variables
        String localVarPath = "/restv2/game/{apiKey}/admin/testHarness/scenarios"
            .replace("{" + "apiKey" + "}", localVarApiClient.escapeString(apiKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createTestHarnessScenarioUsingPOSTValidateBeforeCall(String apiKey, TestHarnessScenarioModel testHarnessScenarioModel, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling createTestHarnessScenarioUsingPOST(Async)");
        }

        // verify the required parameter 'testHarnessScenarioModel' is set
        if (testHarnessScenarioModel == null) {
            throw new ApiException("Missing the required parameter 'testHarnessScenarioModel' when calling createTestHarnessScenarioUsingPOST(Async)");
        }

        return createTestHarnessScenarioUsingPOSTCall(apiKey, testHarnessScenarioModel, _callback);

    }

    /**
     * createTestHarnessScenario
     * 
     * @param apiKey apiKey (required)
     * @param testHarnessScenarioModel testHarnessScenarioDTO (required)
     * @return TestHarnessScenarioModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> json error </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> not allowed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public TestHarnessScenarioModel createTestHarnessScenarioUsingPOST(String apiKey, TestHarnessScenarioModel testHarnessScenarioModel) throws ApiException {
        ApiResponse<TestHarnessScenarioModel> localVarResp = createTestHarnessScenarioUsingPOSTWithHttpInfo(apiKey, testHarnessScenarioModel);
        return localVarResp.getData();
    }

    /**
     * createTestHarnessScenario
     * 
     * @param apiKey apiKey (required)
     * @param testHarnessScenarioModel testHarnessScenarioDTO (required)
     * @return ApiResponse&lt;TestHarnessScenarioModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> json error </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> not allowed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TestHarnessScenarioModel> createTestHarnessScenarioUsingPOSTWithHttpInfo(String apiKey, TestHarnessScenarioModel testHarnessScenarioModel) throws ApiException {
        okhttp3.Call localVarCall = createTestHarnessScenarioUsingPOSTValidateBeforeCall(apiKey, testHarnessScenarioModel, null);
        Type localVarReturnType = new TypeToken<TestHarnessScenarioModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * createTestHarnessScenario (asynchronously)
     * 
     * @param apiKey apiKey (required)
     * @param testHarnessScenarioModel testHarnessScenarioDTO (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> json error </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> not allowed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createTestHarnessScenarioUsingPOSTAsync(String apiKey, TestHarnessScenarioModel testHarnessScenarioModel, final ApiCallback<TestHarnessScenarioModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = createTestHarnessScenarioUsingPOSTValidateBeforeCall(apiKey, testHarnessScenarioModel, _callback);
        Type localVarReturnType = new TypeToken<TestHarnessScenarioModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteTestHarnessScenarioUsingDELETE
     * @param apiKey apiKey (required)
     * @param scenarioName scenarioName (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> json error </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> not allowed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteTestHarnessScenarioUsingDELETECall(String apiKey, String scenarioName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/restv2/game/{apiKey}/admin/testHarness/scenarios/{scenarioName}"
            .replace("{" + "apiKey" + "}", localVarApiClient.escapeString(apiKey.toString()))
            .replace("{" + "scenarioName" + "}", localVarApiClient.escapeString(scenarioName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteTestHarnessScenarioUsingDELETEValidateBeforeCall(String apiKey, String scenarioName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling deleteTestHarnessScenarioUsingDELETE(Async)");
        }

        // verify the required parameter 'scenarioName' is set
        if (scenarioName == null) {
            throw new ApiException("Missing the required parameter 'scenarioName' when calling deleteTestHarnessScenarioUsingDELETE(Async)");
        }

        return deleteTestHarnessScenarioUsingDELETECall(apiKey, scenarioName, _callback);

    }

    /**
     * deleteTestHarnessScenario
     * 
     * @param apiKey apiKey (required)
     * @param scenarioName scenarioName (required)
     * @return MessageModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> json error </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> not allowed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public MessageModel deleteTestHarnessScenarioUsingDELETE(String apiKey, String scenarioName) throws ApiException {
        ApiResponse<MessageModel> localVarResp = deleteTestHarnessScenarioUsingDELETEWithHttpInfo(apiKey, scenarioName);
        return localVarResp.getData();
    }

    /**
     * deleteTestHarnessScenario
     * 
     * @param apiKey apiKey (required)
     * @param scenarioName scenarioName (required)
     * @return ApiResponse&lt;MessageModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> json error </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> not allowed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MessageModel> deleteTestHarnessScenarioUsingDELETEWithHttpInfo(String apiKey, String scenarioName) throws ApiException {
        okhttp3.Call localVarCall = deleteTestHarnessScenarioUsingDELETEValidateBeforeCall(apiKey, scenarioName, null);
        Type localVarReturnType = new TypeToken<MessageModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * deleteTestHarnessScenario (asynchronously)
     * 
     * @param apiKey apiKey (required)
     * @param scenarioName scenarioName (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> json error </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> not allowed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteTestHarnessScenarioUsingDELETEAsync(String apiKey, String scenarioName, final ApiCallback<MessageModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteTestHarnessScenarioUsingDELETEValidateBeforeCall(apiKey, scenarioName, _callback);
        Type localVarReturnType = new TypeToken<MessageModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTestHarnessScenarioUsingGET
     * @param apiKey apiKey (required)
     * @param scenarioName scenarioName (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> json error </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> not allowed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTestHarnessScenarioUsingGETCall(String apiKey, String scenarioName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/restv2/game/{apiKey}/admin/testHarness/scenarios/{scenarioName}"
            .replace("{" + "apiKey" + "}", localVarApiClient.escapeString(apiKey.toString()))
            .replace("{" + "scenarioName" + "}", localVarApiClient.escapeString(scenarioName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTestHarnessScenarioUsingGETValidateBeforeCall(String apiKey, String scenarioName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling getTestHarnessScenarioUsingGET(Async)");
        }

        // verify the required parameter 'scenarioName' is set
        if (scenarioName == null) {
            throw new ApiException("Missing the required parameter 'scenarioName' when calling getTestHarnessScenarioUsingGET(Async)");
        }

        return getTestHarnessScenarioUsingGETCall(apiKey, scenarioName, _callback);

    }

    /**
     * getTestHarnessScenario
     * 
     * @param apiKey apiKey (required)
     * @param scenarioName scenarioName (required)
     * @return TestHarnessScenarioModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> json error </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> not allowed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public TestHarnessScenarioModel getTestHarnessScenarioUsingGET(String apiKey, String scenarioName) throws ApiException {
        ApiResponse<TestHarnessScenarioModel> localVarResp = getTestHarnessScenarioUsingGETWithHttpInfo(apiKey, scenarioName);
        return localVarResp.getData();
    }

    /**
     * getTestHarnessScenario
     * 
     * @param apiKey apiKey (required)
     * @param scenarioName scenarioName (required)
     * @return ApiResponse&lt;TestHarnessScenarioModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> json error </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> not allowed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TestHarnessScenarioModel> getTestHarnessScenarioUsingGETWithHttpInfo(String apiKey, String scenarioName) throws ApiException {
        okhttp3.Call localVarCall = getTestHarnessScenarioUsingGETValidateBeforeCall(apiKey, scenarioName, null);
        Type localVarReturnType = new TypeToken<TestHarnessScenarioModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * getTestHarnessScenario (asynchronously)
     * 
     * @param apiKey apiKey (required)
     * @param scenarioName scenarioName (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> json error </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> not allowed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTestHarnessScenarioUsingGETAsync(String apiKey, String scenarioName, final ApiCallback<TestHarnessScenarioModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTestHarnessScenarioUsingGETValidateBeforeCall(apiKey, scenarioName, _callback);
        Type localVarReturnType = new TypeToken<TestHarnessScenarioModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTestHarnessScenariosUsingGET
     * @param apiKey apiKey (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> json error </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> not allowed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTestHarnessScenariosUsingGETCall(String apiKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/restv2/game/{apiKey}/admin/testHarness/scenarios"
            .replace("{" + "apiKey" + "}", localVarApiClient.escapeString(apiKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTestHarnessScenariosUsingGETValidateBeforeCall(String apiKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling getTestHarnessScenariosUsingGET(Async)");
        }

        return getTestHarnessScenariosUsingGETCall(apiKey, _callback);

    }

    /**
     * getTestHarnessScenarios
     * 
     * @param apiKey apiKey (required)
     * @return List&lt;TestHarnessScenarioModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> json error </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> not allowed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public List<TestHarnessScenarioModel> getTestHarnessScenariosUsingGET(String apiKey) throws ApiException {
        ApiResponse<List<TestHarnessScenarioModel>> localVarResp = getTestHarnessScenariosUsingGETWithHttpInfo(apiKey);
        return localVarResp.getData();
    }

    /**
     * getTestHarnessScenarios
     * 
     * @param apiKey apiKey (required)
     * @return ApiResponse&lt;List&lt;TestHarnessScenarioModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> json error </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> not allowed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<TestHarnessScenarioModel>> getTestHarnessScenariosUsingGETWithHttpInfo(String apiKey) throws ApiException {
        okhttp3.Call localVarCall = getTestHarnessScenariosUsingGETValidateBeforeCall(apiKey, null);
        Type localVarReturnType = new TypeToken<List<TestHarnessScenarioModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * getTestHarnessScenarios (asynchronously)
     * 
     * @param apiKey apiKey (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> json error </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> not allowed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTestHarnessScenariosUsingGETAsync(String apiKey, final ApiCallback<List<TestHarnessScenarioModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTestHarnessScenariosUsingGETValidateBeforeCall(apiKey, _callback);
        Type localVarReturnType = new TypeToken<List<TestHarnessScenarioModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateTestHarnessScenarioUsingPUT
     * @param apiKey apiKey (required)
     * @param scenarioName scenarioName (required)
     * @param testHarnessScenarioModel testHarnessScenarioDTO (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> json error </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> not allowed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateTestHarnessScenarioUsingPUTCall(String apiKey, String scenarioName, TestHarnessScenarioModel testHarnessScenarioModel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = testHarnessScenarioModel;

        // create path and map variables
        String localVarPath = "/restv2/game/{apiKey}/admin/testHarness/scenarios/{scenarioName}"
            .replace("{" + "apiKey" + "}", localVarApiClient.escapeString(apiKey.toString()))
            .replace("{" + "scenarioName" + "}", localVarApiClient.escapeString(scenarioName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateTestHarnessScenarioUsingPUTValidateBeforeCall(String apiKey, String scenarioName, TestHarnessScenarioModel testHarnessScenarioModel, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling updateTestHarnessScenarioUsingPUT(Async)");
        }

        // verify the required parameter 'scenarioName' is set
        if (scenarioName == null) {
            throw new ApiException("Missing the required parameter 'scenarioName' when calling updateTestHarnessScenarioUsingPUT(Async)");
        }

        // verify the required parameter 'testHarnessScenarioModel' is set
        if (testHarnessScenarioModel == null) {
            throw new ApiException("Missing the required parameter 'testHarnessScenarioModel' when calling updateTestHarnessScenarioUsingPUT(Async)");
        }

        return updateTestHarnessScenarioUsingPUTCall(apiKey, scenarioName, testHarnessScenarioModel, _callback);

    }

    /**
     * updateTestHarnessScenario
     * 
     * @param apiKey apiKey (required)
     * @param scenarioName scenarioName (required)
     * @param testHarnessScenarioModel testHarnessScenarioDTO (required)
     * @return TestHarnessScenarioModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> json error </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> not allowed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public TestHarnessScenarioModel updateTestHarnessScenarioUsingPUT(String apiKey, String scenarioName, TestHarnessScenarioModel testHarnessScenarioModel) throws ApiException {
        ApiResponse<TestHarnessScenarioModel> localVarResp = updateTestHarnessScenarioUsingPUTWithHttpInfo(apiKey, scenarioName, testHarnessScenarioModel);
        return localVarResp.getData();
    }

    /**
     * updateTestHarnessScenario
     * 
     * @param apiKey apiKey (required)
     * @param scenarioName scenarioName (required)
     * @param testHarnessScenarioModel testHarnessScenarioDTO (required)
     * @return ApiResponse&lt;TestHarnessScenarioModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> json error </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> not allowed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TestHarnessScenarioModel> updateTestHarnessScenarioUsingPUTWithHttpInfo(String apiKey, String scenarioName, TestHarnessScenarioModel testHarnessScenarioModel) throws ApiException {
        okhttp3.Call localVarCall = updateTestHarnessScenarioUsingPUTValidateBeforeCall(apiKey, scenarioName, testHarnessScenarioModel, null);
        Type localVarReturnType = new TypeToken<TestHarnessScenarioModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * updateTestHarnessScenario (asynchronously)
     * 
     * @param apiKey apiKey (required)
     * @param scenarioName scenarioName (required)
     * @param testHarnessScenarioModel testHarnessScenarioDTO (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> json error </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> not allowed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateTestHarnessScenarioUsingPUTAsync(String apiKey, String scenarioName, TestHarnessScenarioModel testHarnessScenarioModel, final ApiCallback<TestHarnessScenarioModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateTestHarnessScenarioUsingPUTValidateBeforeCall(apiKey, scenarioName, testHarnessScenarioModel, _callback);
        Type localVarReturnType = new TypeToken<TestHarnessScenarioModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
