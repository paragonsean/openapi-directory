/**
 * GameSparks Game Details API
 * The API to manage the GameSparks game details
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ManageItemSummary from '../model/ManageItemSummary';
import ManageQuery from '../model/ManageQuery';
import ManageResult from '../model/ManageResult';
import ManageScreen from '../model/ManageScreen';
import ManageSnapshot from '../model/ManageSnapshot';
import ManageSnippet from '../model/ManageSnippet';
import MessageModel from '../model/MessageModel';
import SnapshotCreationModel from '../model/SnapshotCreationModel';

/**
* Manage service.
* @module api/ManageApi
* @version v2
*/
export default class ManageApi {

    /**
    * Constructs a new ManageApi. 
    * @alias module:api/ManageApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the copySnapshotToExistingGameUsingPOST operation.
     * @callback module:api/ManageApi~copySnapshotToExistingGameUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ManageResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * copySnapshotToExistingGame
     * @param {String} apiKey apiKey
     * @param {String} snapshotId snapshotId
     * @param {String} targetApiKey targetApiKey
     * @param {module:api/ManageApi~copySnapshotToExistingGameUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ManageResult}
     */
    copySnapshotToExistingGameUsingPOST(apiKey, snapshotId, targetApiKey, callback) {
      let postBody = null;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling copySnapshotToExistingGameUsingPOST");
      }
      // verify the required parameter 'snapshotId' is set
      if (snapshotId === undefined || snapshotId === null) {
        throw new Error("Missing the required parameter 'snapshotId' when calling copySnapshotToExistingGameUsingPOST");
      }
      // verify the required parameter 'targetApiKey' is set
      if (targetApiKey === undefined || targetApiKey === null) {
        throw new Error("Missing the required parameter 'targetApiKey' when calling copySnapshotToExistingGameUsingPOST");
      }

      let pathParams = {
        'apiKey': apiKey,
        'snapshotId': snapshotId,
        'targetApiKey': targetApiKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json;charset=UTF-8'];
      let returnType = ManageResult;
      return this.apiClient.callApi(
        '/restv2/game/{apiKey}/manage/snapshots/{snapshotId}/copy/to/{targetApiKey}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createQueryUsingPOST operation.
     * @callback module:api/ManageApi~createQueryUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ManageQuery} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * createQuery
     * @param {String} apiKey apiKey
     * @param {module:model/ManageQuery} manageQuery query
     * @param {module:api/ManageApi~createQueryUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ManageQuery}
     */
    createQueryUsingPOST(apiKey, manageQuery, callback) {
      let postBody = manageQuery;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling createQueryUsingPOST");
      }
      // verify the required parameter 'manageQuery' is set
      if (manageQuery === undefined || manageQuery === null) {
        throw new Error("Missing the required parameter 'manageQuery' when calling createQueryUsingPOST");
      }

      let pathParams = {
        'apiKey': apiKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json;charset=UTF-8'];
      let returnType = ManageQuery;
      return this.apiClient.callApi(
        '/restv2/game/{apiKey}/manage/queries', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createScreenUsingPOST operation.
     * @callback module:api/ManageApi~createScreenUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ManageScreen} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * createScreen
     * @param {String} apiKey apiKey
     * @param {module:model/ManageScreen} manageScreen screen
     * @param {module:api/ManageApi~createScreenUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ManageScreen}
     */
    createScreenUsingPOST(apiKey, manageScreen, callback) {
      let postBody = manageScreen;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling createScreenUsingPOST");
      }
      // verify the required parameter 'manageScreen' is set
      if (manageScreen === undefined || manageScreen === null) {
        throw new Error("Missing the required parameter 'manageScreen' when calling createScreenUsingPOST");
      }

      let pathParams = {
        'apiKey': apiKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json;charset=UTF-8'];
      let returnType = ManageScreen;
      return this.apiClient.callApi(
        '/restv2/game/{apiKey}/manage/screens', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createSnapshotUsingPOST operation.
     * @callback module:api/ManageApi~createSnapshotUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ManageSnapshot} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * createSnapshot
     * @param {String} apiKey apiKey
     * @param {module:model/SnapshotCreationModel} snapshotCreationModel model
     * @param {module:api/ManageApi~createSnapshotUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ManageSnapshot}
     */
    createSnapshotUsingPOST(apiKey, snapshotCreationModel, callback) {
      let postBody = snapshotCreationModel;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling createSnapshotUsingPOST");
      }
      // verify the required parameter 'snapshotCreationModel' is set
      if (snapshotCreationModel === undefined || snapshotCreationModel === null) {
        throw new Error("Missing the required parameter 'snapshotCreationModel' when calling createSnapshotUsingPOST");
      }

      let pathParams = {
        'apiKey': apiKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json;charset=UTF-8'];
      let returnType = ManageSnapshot;
      return this.apiClient.callApi(
        '/restv2/game/{apiKey}/manage/snapshots', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createSnippetUsingPOST operation.
     * @callback module:api/ManageApi~createSnippetUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ManageSnippet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * createSnippet
     * @param {String} apiKey apiKey
     * @param {module:model/ManageSnippet} manageSnippet snippet
     * @param {module:api/ManageApi~createSnippetUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ManageSnippet}
     */
    createSnippetUsingPOST(apiKey, manageSnippet, callback) {
      let postBody = manageSnippet;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling createSnippetUsingPOST");
      }
      // verify the required parameter 'manageSnippet' is set
      if (manageSnippet === undefined || manageSnippet === null) {
        throw new Error("Missing the required parameter 'manageSnippet' when calling createSnippetUsingPOST");
      }

      let pathParams = {
        'apiKey': apiKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json;charset=UTF-8'];
      let returnType = ManageSnippet;
      return this.apiClient.callApi(
        '/restv2/game/{apiKey}/manage/snippets', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteQueryUsingDELETE operation.
     * @callback module:api/ManageApi~deleteQueryUsingDELETECallback
     * @param {String} error Error message, if any.
     * @param {module:model/ManageResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * deleteQuery
     * @param {String} apiKey apiKey
     * @param {String} shortCode shortCode
     * @param {module:api/ManageApi~deleteQueryUsingDELETECallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ManageResult}
     */
    deleteQueryUsingDELETE(apiKey, shortCode, callback) {
      let postBody = null;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling deleteQueryUsingDELETE");
      }
      // verify the required parameter 'shortCode' is set
      if (shortCode === undefined || shortCode === null) {
        throw new Error("Missing the required parameter 'shortCode' when calling deleteQueryUsingDELETE");
      }

      let pathParams = {
        'apiKey': apiKey,
        'shortCode': shortCode
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json;charset=UTF-8'];
      let returnType = ManageResult;
      return this.apiClient.callApi(
        '/restv2/game/{apiKey}/manage/queries/{shortCode}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteScreenUsingDELETE operation.
     * @callback module:api/ManageApi~deleteScreenUsingDELETECallback
     * @param {String} error Error message, if any.
     * @param {module:model/ManageResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * deleteScreen
     * @param {String} apiKey apiKey
     * @param {String} shortCode shortCode
     * @param {module:api/ManageApi~deleteScreenUsingDELETECallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ManageResult}
     */
    deleteScreenUsingDELETE(apiKey, shortCode, callback) {
      let postBody = null;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling deleteScreenUsingDELETE");
      }
      // verify the required parameter 'shortCode' is set
      if (shortCode === undefined || shortCode === null) {
        throw new Error("Missing the required parameter 'shortCode' when calling deleteScreenUsingDELETE");
      }

      let pathParams = {
        'apiKey': apiKey,
        'shortCode': shortCode
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json;charset=UTF-8'];
      let returnType = ManageResult;
      return this.apiClient.callApi(
        '/restv2/game/{apiKey}/manage/screens/{shortCode}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSnapshotUsingDELETE operation.
     * @callback module:api/ManageApi~deleteSnapshotUsingDELETECallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * deleteSnapshot
     * @param {String} apiKey apiKey
     * @param {String} snapshotId snapshotId
     * @param {module:api/ManageApi~deleteSnapshotUsingDELETECallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteSnapshotUsingDELETE(apiKey, snapshotId, callback) {
      let postBody = null;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling deleteSnapshotUsingDELETE");
      }
      // verify the required parameter 'snapshotId' is set
      if (snapshotId === undefined || snapshotId === null) {
        throw new Error("Missing the required parameter 'snapshotId' when calling deleteSnapshotUsingDELETE");
      }

      let pathParams = {
        'apiKey': apiKey,
        'snapshotId': snapshotId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json;charset=UTF-8'];
      let returnType = null;
      return this.apiClient.callApi(
        '/restv2/game/{apiKey}/manage/snapshots/{snapshotId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSnippetUsingDELETE operation.
     * @callback module:api/ManageApi~deleteSnippetUsingDELETECallback
     * @param {String} error Error message, if any.
     * @param {module:model/ManageResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * deleteSnippet
     * @param {String} apiKey apiKey
     * @param {String} shortCode shortCode
     * @param {module:api/ManageApi~deleteSnippetUsingDELETECallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ManageResult}
     */
    deleteSnippetUsingDELETE(apiKey, shortCode, callback) {
      let postBody = null;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling deleteSnippetUsingDELETE");
      }
      // verify the required parameter 'shortCode' is set
      if (shortCode === undefined || shortCode === null) {
        throw new Error("Missing the required parameter 'shortCode' when calling deleteSnippetUsingDELETE");
      }

      let pathParams = {
        'apiKey': apiKey,
        'shortCode': shortCode
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json;charset=UTF-8'];
      let returnType = ManageResult;
      return this.apiClient.callApi(
        '/restv2/game/{apiKey}/manage/snippets/{shortCode}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getQueryUsingGET operation.
     * @callback module:api/ManageApi~getQueryUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ManageQuery} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getQuery
     * @param {String} apiKey apiKey
     * @param {String} shortCode shortCode
     * @param {module:api/ManageApi~getQueryUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ManageQuery}
     */
    getQueryUsingGET(apiKey, shortCode, callback) {
      let postBody = null;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling getQueryUsingGET");
      }
      // verify the required parameter 'shortCode' is set
      if (shortCode === undefined || shortCode === null) {
        throw new Error("Missing the required parameter 'shortCode' when calling getQueryUsingGET");
      }

      let pathParams = {
        'apiKey': apiKey,
        'shortCode': shortCode
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json;charset=UTF-8'];
      let returnType = ManageQuery;
      return this.apiClient.callApi(
        '/restv2/game/{apiKey}/manage/queries/{shortCode}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getScreenUsingGET operation.
     * @callback module:api/ManageApi~getScreenUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ManageScreen} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getScreen
     * @param {String} apiKey apiKey
     * @param {String} shortCode shortCode
     * @param {module:api/ManageApi~getScreenUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ManageScreen}
     */
    getScreenUsingGET(apiKey, shortCode, callback) {
      let postBody = null;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling getScreenUsingGET");
      }
      // verify the required parameter 'shortCode' is set
      if (shortCode === undefined || shortCode === null) {
        throw new Error("Missing the required parameter 'shortCode' when calling getScreenUsingGET");
      }

      let pathParams = {
        'apiKey': apiKey,
        'shortCode': shortCode
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json;charset=UTF-8'];
      let returnType = ManageScreen;
      return this.apiClient.callApi(
        '/restv2/game/{apiKey}/manage/screens/{shortCode}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSnippetUsingGET operation.
     * @callback module:api/ManageApi~getSnippetUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ManageSnippet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getSnippet
     * @param {String} apiKey apiKey
     * @param {String} shortCode shortCode
     * @param {module:api/ManageApi~getSnippetUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ManageSnippet}
     */
    getSnippetUsingGET(apiKey, shortCode, callback) {
      let postBody = null;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling getSnippetUsingGET");
      }
      // verify the required parameter 'shortCode' is set
      if (shortCode === undefined || shortCode === null) {
        throw new Error("Missing the required parameter 'shortCode' when calling getSnippetUsingGET");
      }

      let pathParams = {
        'apiKey': apiKey,
        'shortCode': shortCode
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json;charset=UTF-8'];
      let returnType = ManageSnippet;
      return this.apiClient.callApi(
        '/restv2/game/{apiKey}/manage/snippets/{shortCode}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listExecutableScreensUsingGET operation.
     * @callback module:api/ManageApi~listExecutableScreensUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ManageItemSummary>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * listExecutableScreens
     * @param {String} apiKey apiKey
     * @param {module:api/ManageApi~listExecutableScreensUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ManageItemSummary>}
     */
    listExecutableScreensUsingGET(apiKey, callback) {
      let postBody = null;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling listExecutableScreensUsingGET");
      }

      let pathParams = {
        'apiKey': apiKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json;charset=UTF-8'];
      let returnType = [ManageItemSummary];
      return this.apiClient.callApi(
        '/restv2/game/{apiKey}/manage/screens/executable', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listQueriesUsingGET operation.
     * @callback module:api/ManageApi~listQueriesUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ManageItemSummary>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * listQueries
     * @param {String} apiKey apiKey
     * @param {module:api/ManageApi~listQueriesUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ManageItemSummary>}
     */
    listQueriesUsingGET(apiKey, callback) {
      let postBody = null;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling listQueriesUsingGET");
      }

      let pathParams = {
        'apiKey': apiKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json;charset=UTF-8'];
      let returnType = [ManageItemSummary];
      return this.apiClient.callApi(
        '/restv2/game/{apiKey}/manage/queries', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listScreensUsingGET operation.
     * @callback module:api/ManageApi~listScreensUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ManageItemSummary>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * listScreens
     * @param {String} apiKey apiKey
     * @param {module:api/ManageApi~listScreensUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ManageItemSummary>}
     */
    listScreensUsingGET(apiKey, callback) {
      let postBody = null;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling listScreensUsingGET");
      }

      let pathParams = {
        'apiKey': apiKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json;charset=UTF-8'];
      let returnType = [ManageItemSummary];
      return this.apiClient.callApi(
        '/restv2/game/{apiKey}/manage/screens', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listSnapshotsUsingGET operation.
     * @callback module:api/ManageApi~listSnapshotsUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ManageSnapshot>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * listSnapshots
     * @param {String} apiKey apiKey
     * @param {module:api/ManageApi~listSnapshotsUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ManageSnapshot>}
     */
    listSnapshotsUsingGET(apiKey, callback) {
      let postBody = null;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling listSnapshotsUsingGET");
      }

      let pathParams = {
        'apiKey': apiKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json;charset=UTF-8'];
      let returnType = [ManageSnapshot];
      return this.apiClient.callApi(
        '/restv2/game/{apiKey}/manage/snapshots', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listSnippetsUsingGET operation.
     * @callback module:api/ManageApi~listSnippetsUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ManageItemSummary>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * listSnippets
     * @param {String} apiKey apiKey
     * @param {module:api/ManageApi~listSnippetsUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ManageItemSummary>}
     */
    listSnippetsUsingGET(apiKey, callback) {
      let postBody = null;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling listSnippetsUsingGET");
      }

      let pathParams = {
        'apiKey': apiKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json;charset=UTF-8'];
      let returnType = [ManageItemSummary];
      return this.apiClient.callApi(
        '/restv2/game/{apiKey}/manage/snippets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the publishSnapshotUsingPOST operation.
     * @callback module:api/ManageApi~publishSnapshotUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ManageResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * publishSnapshot
     * @param {String} apiKey apiKey
     * @param {String} snapshotId snapshotId
     * @param {module:api/ManageApi~publishSnapshotUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ManageResult}
     */
    publishSnapshotUsingPOST(apiKey, snapshotId, callback) {
      let postBody = null;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling publishSnapshotUsingPOST");
      }
      // verify the required parameter 'snapshotId' is set
      if (snapshotId === undefined || snapshotId === null) {
        throw new Error("Missing the required parameter 'snapshotId' when calling publishSnapshotUsingPOST");
      }

      let pathParams = {
        'apiKey': apiKey,
        'snapshotId': snapshotId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json;charset=UTF-8'];
      let returnType = ManageResult;
      return this.apiClient.callApi(
        '/restv2/game/{apiKey}/manage/snapshots/{snapshotId}/publish', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the revertSnapshotUsingPOST operation.
     * @callback module:api/ManageApi~revertSnapshotUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ManageResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * revertSnapshot
     * @param {String} apiKey apiKey
     * @param {String} snapshotId snapshotId
     * @param {module:api/ManageApi~revertSnapshotUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ManageResult}
     */
    revertSnapshotUsingPOST(apiKey, snapshotId, callback) {
      let postBody = null;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling revertSnapshotUsingPOST");
      }
      // verify the required parameter 'snapshotId' is set
      if (snapshotId === undefined || snapshotId === null) {
        throw new Error("Missing the required parameter 'snapshotId' when calling revertSnapshotUsingPOST");
      }

      let pathParams = {
        'apiKey': apiKey,
        'snapshotId': snapshotId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json;charset=UTF-8'];
      let returnType = ManageResult;
      return this.apiClient.callApi(
        '/restv2/game/{apiKey}/manage/snapshots/{snapshotId}/revert', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateQueryUsingPUT operation.
     * @callback module:api/ManageApi~updateQueryUsingPUTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ManageQuery} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * updateQuery
     * @param {String} apiKey apiKey
     * @param {String} shortCode shortCode
     * @param {module:model/ManageQuery} manageQuery query
     * @param {module:api/ManageApi~updateQueryUsingPUTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ManageQuery}
     */
    updateQueryUsingPUT(apiKey, shortCode, manageQuery, callback) {
      let postBody = manageQuery;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling updateQueryUsingPUT");
      }
      // verify the required parameter 'shortCode' is set
      if (shortCode === undefined || shortCode === null) {
        throw new Error("Missing the required parameter 'shortCode' when calling updateQueryUsingPUT");
      }
      // verify the required parameter 'manageQuery' is set
      if (manageQuery === undefined || manageQuery === null) {
        throw new Error("Missing the required parameter 'manageQuery' when calling updateQueryUsingPUT");
      }

      let pathParams = {
        'apiKey': apiKey,
        'shortCode': shortCode
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json;charset=UTF-8'];
      let returnType = ManageQuery;
      return this.apiClient.callApi(
        '/restv2/game/{apiKey}/manage/queries/{shortCode}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateScreenUsingPUT operation.
     * @callback module:api/ManageApi~updateScreenUsingPUTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ManageScreen} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * updateScreen
     * @param {String} apiKey apiKey
     * @param {String} shortCode shortCode
     * @param {module:model/ManageScreen} manageScreen screen
     * @param {module:api/ManageApi~updateScreenUsingPUTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ManageScreen}
     */
    updateScreenUsingPUT(apiKey, shortCode, manageScreen, callback) {
      let postBody = manageScreen;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling updateScreenUsingPUT");
      }
      // verify the required parameter 'shortCode' is set
      if (shortCode === undefined || shortCode === null) {
        throw new Error("Missing the required parameter 'shortCode' when calling updateScreenUsingPUT");
      }
      // verify the required parameter 'manageScreen' is set
      if (manageScreen === undefined || manageScreen === null) {
        throw new Error("Missing the required parameter 'manageScreen' when calling updateScreenUsingPUT");
      }

      let pathParams = {
        'apiKey': apiKey,
        'shortCode': shortCode
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json;charset=UTF-8'];
      let returnType = ManageScreen;
      return this.apiClient.callApi(
        '/restv2/game/{apiKey}/manage/screens/{shortCode}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateSnippetUsingPUT operation.
     * @callback module:api/ManageApi~updateSnippetUsingPUTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ManageSnippet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * updateSnippet
     * @param {String} apiKey apiKey
     * @param {String} shortCode shortCode
     * @param {module:model/ManageSnippet} manageSnippet snippet
     * @param {module:api/ManageApi~updateSnippetUsingPUTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ManageSnippet}
     */
    updateSnippetUsingPUT(apiKey, shortCode, manageSnippet, callback) {
      let postBody = manageSnippet;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling updateSnippetUsingPUT");
      }
      // verify the required parameter 'shortCode' is set
      if (shortCode === undefined || shortCode === null) {
        throw new Error("Missing the required parameter 'shortCode' when calling updateSnippetUsingPUT");
      }
      // verify the required parameter 'manageSnippet' is set
      if (manageSnippet === undefined || manageSnippet === null) {
        throw new Error("Missing the required parameter 'manageSnippet' when calling updateSnippetUsingPUT");
      }

      let pathParams = {
        'apiKey': apiKey,
        'shortCode': shortCode
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json;charset=UTF-8'];
      let returnType = ManageSnippet;
      return this.apiClient.callApi(
        '/restv2/game/{apiKey}/manage/snippets/{shortCode}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
