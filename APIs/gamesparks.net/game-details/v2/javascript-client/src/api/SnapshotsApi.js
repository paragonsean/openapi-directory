/**
 * GameSparks Game Details API
 * The API to manage the GameSparks game details
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import MessageModel from '../model/MessageModel';
import SnapshotCreationModel from '../model/SnapshotCreationModel';
import SnapshotCreationSuccessModel from '../model/SnapshotCreationSuccessModel';
import SnapshotModel from '../model/SnapshotModel';

/**
* Snapshots service.
* @module api/SnapshotsApi
* @version v2
*/
export default class SnapshotsApi {

    /**
    * Constructs a new SnapshotsApi. 
    * @alias module:api/SnapshotsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the copySnapshotToExistingGameUsingPOST1 operation.
     * @callback module:api/SnapshotsApi~copySnapshotToExistingGameUsingPOST1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/SnapshotCreationSuccessModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * copySnapshotToExistingGame
     * @param {String} apiKey apiKey
     * @param {String} snapshotId snapshotId
     * @param {String} targetApiKey targetApiKey
     * @param {Object} opts Optional parameters
     * @param {Boolean} [includeGameConfig = true)] includeGameConfig
     * @param {Boolean} [includeMetadata = true)] includeMetadata
     * @param {Boolean} [includeBinaries = true)] includeBinaries
     * @param {Boolean} [includeCollaborators = true)] includeCollaborators
     * @param {module:api/SnapshotsApi~copySnapshotToExistingGameUsingPOST1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SnapshotCreationSuccessModel}
     */
    copySnapshotToExistingGameUsingPOST1(apiKey, snapshotId, targetApiKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling copySnapshotToExistingGameUsingPOST1");
      }
      // verify the required parameter 'snapshotId' is set
      if (snapshotId === undefined || snapshotId === null) {
        throw new Error("Missing the required parameter 'snapshotId' when calling copySnapshotToExistingGameUsingPOST1");
      }
      // verify the required parameter 'targetApiKey' is set
      if (targetApiKey === undefined || targetApiKey === null) {
        throw new Error("Missing the required parameter 'targetApiKey' when calling copySnapshotToExistingGameUsingPOST1");
      }

      let pathParams = {
        'apiKey': apiKey,
        'snapshotId': snapshotId,
        'targetApiKey': targetApiKey
      };
      let queryParams = {
        'includeGameConfig': opts['includeGameConfig'],
        'includeMetadata': opts['includeMetadata'],
        'includeBinaries': opts['includeBinaries'],
        'includeCollaborators': opts['includeCollaborators']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json;charset=UTF-8'];
      let returnType = SnapshotCreationSuccessModel;
      return this.apiClient.callApi(
        '/restv2/game/{apiKey}/admin/snapshots/{snapshotId}/copy/to/{targetApiKey}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the copySnapshotToNewGameUsingPOST operation.
     * @callback module:api/SnapshotsApi~copySnapshotToNewGameUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SnapshotCreationSuccessModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * copySnapshotToNewGame
     * @param {String} apiKey apiKey
     * @param {String} snapshotId snapshotId
     * @param {Object} opts Optional parameters
     * @param {Boolean} [includeGameConfig = true)] includeGameConfig
     * @param {Boolean} [includeMetadata = true)] includeMetadata
     * @param {Boolean} [includeBinaries = true)] includeBinaries
     * @param {Boolean} [includeCollaborators = true)] includeCollaborators
     * @param {module:api/SnapshotsApi~copySnapshotToNewGameUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SnapshotCreationSuccessModel}
     */
    copySnapshotToNewGameUsingPOST(apiKey, snapshotId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling copySnapshotToNewGameUsingPOST");
      }
      // verify the required parameter 'snapshotId' is set
      if (snapshotId === undefined || snapshotId === null) {
        throw new Error("Missing the required parameter 'snapshotId' when calling copySnapshotToNewGameUsingPOST");
      }

      let pathParams = {
        'apiKey': apiKey,
        'snapshotId': snapshotId
      };
      let queryParams = {
        'includeGameConfig': opts['includeGameConfig'],
        'includeMetadata': opts['includeMetadata'],
        'includeBinaries': opts['includeBinaries'],
        'includeCollaborators': opts['includeCollaborators']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json;charset=UTF-8'];
      let returnType = SnapshotCreationSuccessModel;
      return this.apiClient.callApi(
        '/restv2/game/{apiKey}/admin/snapshots/{snapshotId}/copy', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createSnapshotsUsingPOST operation.
     * @callback module:api/SnapshotsApi~createSnapshotsUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SnapshotModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * createSnapshots
     * @param {String} apiKey apiKey
     * @param {module:model/SnapshotCreationModel} snapshotCreationModel description
     * @param {module:api/SnapshotsApi~createSnapshotsUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SnapshotModel}
     */
    createSnapshotsUsingPOST(apiKey, snapshotCreationModel, callback) {
      let postBody = snapshotCreationModel;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling createSnapshotsUsingPOST");
      }
      // verify the required parameter 'snapshotCreationModel' is set
      if (snapshotCreationModel === undefined || snapshotCreationModel === null) {
        throw new Error("Missing the required parameter 'snapshotCreationModel' when calling createSnapshotsUsingPOST");
      }

      let pathParams = {
        'apiKey': apiKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json;charset=UTF-8'];
      let returnType = SnapshotModel;
      return this.apiClient.callApi(
        '/restv2/game/{apiKey}/admin/snapshots', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSnapshotUsingDELETE1 operation.
     * @callback module:api/SnapshotsApi~deleteSnapshotUsingDELETE1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/MessageModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * deleteSnapshot
     * @param {String} apiKey apiKey
     * @param {String} snapshotId snapshotId
     * @param {module:api/SnapshotsApi~deleteSnapshotUsingDELETE1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MessageModel}
     */
    deleteSnapshotUsingDELETE1(apiKey, snapshotId, callback) {
      let postBody = null;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling deleteSnapshotUsingDELETE1");
      }
      // verify the required parameter 'snapshotId' is set
      if (snapshotId === undefined || snapshotId === null) {
        throw new Error("Missing the required parameter 'snapshotId' when calling deleteSnapshotUsingDELETE1");
      }

      let pathParams = {
        'apiKey': apiKey,
        'snapshotId': snapshotId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json;charset=UTF-8'];
      let returnType = MessageModel;
      return this.apiClient.callApi(
        '/restv2/game/{apiKey}/admin/snapshots/{snapshotId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getLiveSnapshotIdUsingGET operation.
     * @callback module:api/SnapshotsApi~getLiveSnapshotIdUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MessageModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getLiveSnapshotId
     * @param {String} apiKey apiKey
     * @param {module:api/SnapshotsApi~getLiveSnapshotIdUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MessageModel}
     */
    getLiveSnapshotIdUsingGET(apiKey, callback) {
      let postBody = null;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling getLiveSnapshotIdUsingGET");
      }

      let pathParams = {
        'apiKey': apiKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json;charset=UTF-8'];
      let returnType = MessageModel;
      return this.apiClient.callApi(
        '/restv2/game/{apiKey}/admin/snapshots/liveSnapshotId', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSnapshotUsingGET operation.
     * @callback module:api/SnapshotsApi~getSnapshotUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SnapshotModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getSnapshot
     * @param {String} apiKey apiKey
     * @param {String} snapshotId snapshotId
     * @param {module:api/SnapshotsApi~getSnapshotUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SnapshotModel}
     */
    getSnapshotUsingGET(apiKey, snapshotId, callback) {
      let postBody = null;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling getSnapshotUsingGET");
      }
      // verify the required parameter 'snapshotId' is set
      if (snapshotId === undefined || snapshotId === null) {
        throw new Error("Missing the required parameter 'snapshotId' when calling getSnapshotUsingGET");
      }

      let pathParams = {
        'apiKey': apiKey,
        'snapshotId': snapshotId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json;charset=UTF-8'];
      let returnType = SnapshotModel;
      return this.apiClient.callApi(
        '/restv2/game/{apiKey}/admin/snapshots/{snapshotId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSnapshotsUsingGET operation.
     * @callback module:api/SnapshotsApi~getSnapshotsUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SnapshotModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getSnapshots
     * @param {String} apiKey apiKey
     * @param {Number} page page
     * @param {Object} opts Optional parameters
     * @param {Number} [pageSize = 20)] pageSize
     * @param {module:api/SnapshotsApi~getSnapshotsUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SnapshotModel>}
     */
    getSnapshotsUsingGET(apiKey, page, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling getSnapshotsUsingGET");
      }
      // verify the required parameter 'page' is set
      if (page === undefined || page === null) {
        throw new Error("Missing the required parameter 'page' when calling getSnapshotsUsingGET");
      }

      let pathParams = {
        'apiKey': apiKey,
        'page': page
      };
      let queryParams = {
        'pageSize': opts['pageSize']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json;charset=UTF-8'];
      let returnType = [SnapshotModel];
      return this.apiClient.callApi(
        '/restv2/game/{apiKey}/admin/snapshots/page/{page}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSnapshotsUsingGET1 operation.
     * @callback module:api/SnapshotsApi~getSnapshotsUsingGET1Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SnapshotModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getSnapshots
     * @param {String} apiKey apiKey
     * @param {Object} opts Optional parameters
     * @param {Number} [pageSize = 20)] pageSize
     * @param {module:api/SnapshotsApi~getSnapshotsUsingGET1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SnapshotModel>}
     */
    getSnapshotsUsingGET1(apiKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling getSnapshotsUsingGET1");
      }

      let pathParams = {
        'apiKey': apiKey
      };
      let queryParams = {
        'pageSize': opts['pageSize']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json;charset=UTF-8'];
      let returnType = [SnapshotModel];
      return this.apiClient.callApi(
        '/restv2/game/{apiKey}/admin/snapshots', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the publishSnapshotUsingPOST1 operation.
     * @callback module:api/SnapshotsApi~publishSnapshotUsingPOST1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * publishSnapshot
     * @param {String} apiKey apiKey
     * @param {String} snapshotId snapshotId
     * @param {module:api/SnapshotsApi~publishSnapshotUsingPOST1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    publishSnapshotUsingPOST1(apiKey, snapshotId, callback) {
      let postBody = null;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling publishSnapshotUsingPOST1");
      }
      // verify the required parameter 'snapshotId' is set
      if (snapshotId === undefined || snapshotId === null) {
        throw new Error("Missing the required parameter 'snapshotId' when calling publishSnapshotUsingPOST1");
      }

      let pathParams = {
        'apiKey': apiKey,
        'snapshotId': snapshotId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json;charset=UTF-8'];
      let returnType = null;
      return this.apiClient.callApi(
        '/restv2/game/{apiKey}/admin/snapshots/{snapshotId}/publish', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the revertToSnapshotUsingPOST operation.
     * @callback module:api/SnapshotsApi~revertToSnapshotUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MessageModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * revertToSnapshot
     * @param {String} apiKey apiKey
     * @param {String} snapshotId snapshotId
     * @param {module:api/SnapshotsApi~revertToSnapshotUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MessageModel}
     */
    revertToSnapshotUsingPOST(apiKey, snapshotId, callback) {
      let postBody = null;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling revertToSnapshotUsingPOST");
      }
      // verify the required parameter 'snapshotId' is set
      if (snapshotId === undefined || snapshotId === null) {
        throw new Error("Missing the required parameter 'snapshotId' when calling revertToSnapshotUsingPOST");
      }

      let pathParams = {
        'apiKey': apiKey,
        'snapshotId': snapshotId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json;charset=UTF-8'];
      let returnType = MessageModel;
      return this.apiClient.callApi(
        '/restv2/game/{apiKey}/admin/snapshots/revert/to/{snapshotId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the unpublishSnapshotUsingPOST operation.
     * @callback module:api/SnapshotsApi~unpublishSnapshotUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MessageModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * unpublishSnapshot
     * @param {String} apiKey apiKey
     * @param {String} snapshotId snapshotId
     * @param {module:api/SnapshotsApi~unpublishSnapshotUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MessageModel}
     */
    unpublishSnapshotUsingPOST(apiKey, snapshotId, callback) {
      let postBody = null;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling unpublishSnapshotUsingPOST");
      }
      // verify the required parameter 'snapshotId' is set
      if (snapshotId === undefined || snapshotId === null) {
        throw new Error("Missing the required parameter 'snapshotId' when calling unpublishSnapshotUsingPOST");
      }

      let pathParams = {
        'apiKey': apiKey,
        'snapshotId': snapshotId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json;charset=UTF-8'];
      let returnType = MessageModel;
      return this.apiClient.callApi(
        '/restv2/game/{apiKey}/admin/snapshots/{snapshotId}/unpublish', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
