/**
 * GameSparks Game Details API
 * The API to manage the GameSparks game details
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import MessageModel from '../model/MessageModel';
import SegmentQueryFilterConfigModel from '../model/SegmentQueryFilterConfigModel';
import SegmentQueryFilterListModel from '../model/SegmentQueryFilterListModel';

/**
* SegmentQueryFilters service.
* @module api/SegmentQueryFiltersApi
* @version v2
*/
export default class SegmentQueryFiltersApi {

    /**
    * Constructs a new SegmentQueryFiltersApi. 
    * @alias module:api/SegmentQueryFiltersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getSegmentQueryFiltersConfigUsingGET operation.
     * @callback module:api/SegmentQueryFiltersApi~getSegmentQueryFiltersConfigUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SegmentQueryFilterConfigModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getSegmentQueryFiltersConfig
     * @param {String} apiKey apiKey
     * @param {module:api/SegmentQueryFiltersApi~getSegmentQueryFiltersConfigUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SegmentQueryFilterConfigModel}
     */
    getSegmentQueryFiltersConfigUsingGET(apiKey, callback) {
      let postBody = null;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling getSegmentQueryFiltersConfigUsingGET");
      }

      let pathParams = {
        'apiKey': apiKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json;charset=UTF-8'];
      let returnType = SegmentQueryFilterConfigModel;
      return this.apiClient.callApi(
        '/restv2/game/{apiKey}/admin/segmentQueryFilters/config', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSegmentQueryFiltersUsingGET operation.
     * @callback module:api/SegmentQueryFiltersApi~getSegmentQueryFiltersUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SegmentQueryFilterListModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getSegmentQueryFilters
     * @param {String} apiKey apiKey
     * @param {module:api/SegmentQueryFiltersApi~getSegmentQueryFiltersUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SegmentQueryFilterListModel}
     */
    getSegmentQueryFiltersUsingGET(apiKey, callback) {
      let postBody = null;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling getSegmentQueryFiltersUsingGET");
      }

      let pathParams = {
        'apiKey': apiKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json;charset=UTF-8'];
      let returnType = SegmentQueryFilterListModel;
      return this.apiClient.callApi(
        '/restv2/game/{apiKey}/admin/segmentQueryFilters', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSegmentQueryStandardFiltersUsingGET operation.
     * @callback module:api/SegmentQueryFiltersApi~getSegmentQueryStandardFiltersUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SegmentQueryFilterListModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getSegmentQueryStandardFilters
     * @param {String} apiKey apiKey
     * @param {module:api/SegmentQueryFiltersApi~getSegmentQueryStandardFiltersUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SegmentQueryFilterListModel}
     */
    getSegmentQueryStandardFiltersUsingGET(apiKey, callback) {
      let postBody = null;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling getSegmentQueryStandardFiltersUsingGET");
      }

      let pathParams = {
        'apiKey': apiKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json;charset=UTF-8'];
      let returnType = SegmentQueryFilterListModel;
      return this.apiClient.callApi(
        '/restv2/game/{apiKey}/admin/segmentQueryFilters/standardFilters', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateSegmentQueryFiltersConfigUsingPUT operation.
     * @callback module:api/SegmentQueryFiltersApi~updateSegmentQueryFiltersConfigUsingPUTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SegmentQueryFilterConfigModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * updateSegmentQueryFiltersConfig
     * @param {String} apiKey apiKey
     * @param {module:model/SegmentQueryFilterConfigModel} segmentQueryFilterConfigModel segmentQueryConfig
     * @param {module:api/SegmentQueryFiltersApi~updateSegmentQueryFiltersConfigUsingPUTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SegmentQueryFilterConfigModel}
     */
    updateSegmentQueryFiltersConfigUsingPUT(apiKey, segmentQueryFilterConfigModel, callback) {
      let postBody = segmentQueryFilterConfigModel;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling updateSegmentQueryFiltersConfigUsingPUT");
      }
      // verify the required parameter 'segmentQueryFilterConfigModel' is set
      if (segmentQueryFilterConfigModel === undefined || segmentQueryFilterConfigModel === null) {
        throw new Error("Missing the required parameter 'segmentQueryFilterConfigModel' when calling updateSegmentQueryFiltersConfigUsingPUT");
      }

      let pathParams = {
        'apiKey': apiKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json;charset=UTF-8'];
      let returnType = SegmentQueryFilterConfigModel;
      return this.apiClient.callApi(
        '/restv2/game/{apiKey}/admin/segmentQueryFilters/config', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
