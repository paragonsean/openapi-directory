/**
 * GameSparks Game Details API
 * The API to manage the GameSparks game details
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import MessageModel from '../model/MessageModel';
import TestHarnessScenarioModel from '../model/TestHarnessScenarioModel';

/**
* TestHarness service.
* @module api/TestHarnessApi
* @version v2
*/
export default class TestHarnessApi {

    /**
    * Constructs a new TestHarnessApi. 
    * @alias module:api/TestHarnessApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createTestHarnessScenarioUsingPOST operation.
     * @callback module:api/TestHarnessApi~createTestHarnessScenarioUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TestHarnessScenarioModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * createTestHarnessScenario
     * @param {String} apiKey apiKey
     * @param {module:model/TestHarnessScenarioModel} testHarnessScenarioModel testHarnessScenarioDTO
     * @param {module:api/TestHarnessApi~createTestHarnessScenarioUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TestHarnessScenarioModel}
     */
    createTestHarnessScenarioUsingPOST(apiKey, testHarnessScenarioModel, callback) {
      let postBody = testHarnessScenarioModel;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling createTestHarnessScenarioUsingPOST");
      }
      // verify the required parameter 'testHarnessScenarioModel' is set
      if (testHarnessScenarioModel === undefined || testHarnessScenarioModel === null) {
        throw new Error("Missing the required parameter 'testHarnessScenarioModel' when calling createTestHarnessScenarioUsingPOST");
      }

      let pathParams = {
        'apiKey': apiKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json;charset=UTF-8'];
      let returnType = TestHarnessScenarioModel;
      return this.apiClient.callApi(
        '/restv2/game/{apiKey}/admin/testHarness/scenarios', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteTestHarnessScenarioUsingDELETE operation.
     * @callback module:api/TestHarnessApi~deleteTestHarnessScenarioUsingDELETECallback
     * @param {String} error Error message, if any.
     * @param {module:model/MessageModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * deleteTestHarnessScenario
     * @param {String} apiKey apiKey
     * @param {String} scenarioName scenarioName
     * @param {module:api/TestHarnessApi~deleteTestHarnessScenarioUsingDELETECallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MessageModel}
     */
    deleteTestHarnessScenarioUsingDELETE(apiKey, scenarioName, callback) {
      let postBody = null;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling deleteTestHarnessScenarioUsingDELETE");
      }
      // verify the required parameter 'scenarioName' is set
      if (scenarioName === undefined || scenarioName === null) {
        throw new Error("Missing the required parameter 'scenarioName' when calling deleteTestHarnessScenarioUsingDELETE");
      }

      let pathParams = {
        'apiKey': apiKey,
        'scenarioName': scenarioName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json;charset=UTF-8'];
      let returnType = MessageModel;
      return this.apiClient.callApi(
        '/restv2/game/{apiKey}/admin/testHarness/scenarios/{scenarioName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTestHarnessScenarioUsingGET operation.
     * @callback module:api/TestHarnessApi~getTestHarnessScenarioUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TestHarnessScenarioModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getTestHarnessScenario
     * @param {String} apiKey apiKey
     * @param {String} scenarioName scenarioName
     * @param {module:api/TestHarnessApi~getTestHarnessScenarioUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TestHarnessScenarioModel}
     */
    getTestHarnessScenarioUsingGET(apiKey, scenarioName, callback) {
      let postBody = null;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling getTestHarnessScenarioUsingGET");
      }
      // verify the required parameter 'scenarioName' is set
      if (scenarioName === undefined || scenarioName === null) {
        throw new Error("Missing the required parameter 'scenarioName' when calling getTestHarnessScenarioUsingGET");
      }

      let pathParams = {
        'apiKey': apiKey,
        'scenarioName': scenarioName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json;charset=UTF-8'];
      let returnType = TestHarnessScenarioModel;
      return this.apiClient.callApi(
        '/restv2/game/{apiKey}/admin/testHarness/scenarios/{scenarioName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTestHarnessScenariosUsingGET operation.
     * @callback module:api/TestHarnessApi~getTestHarnessScenariosUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TestHarnessScenarioModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getTestHarnessScenarios
     * @param {String} apiKey apiKey
     * @param {module:api/TestHarnessApi~getTestHarnessScenariosUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TestHarnessScenarioModel>}
     */
    getTestHarnessScenariosUsingGET(apiKey, callback) {
      let postBody = null;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling getTestHarnessScenariosUsingGET");
      }

      let pathParams = {
        'apiKey': apiKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json;charset=UTF-8'];
      let returnType = [TestHarnessScenarioModel];
      return this.apiClient.callApi(
        '/restv2/game/{apiKey}/admin/testHarness/scenarios', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateTestHarnessScenarioUsingPUT operation.
     * @callback module:api/TestHarnessApi~updateTestHarnessScenarioUsingPUTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TestHarnessScenarioModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * updateTestHarnessScenario
     * @param {String} apiKey apiKey
     * @param {String} scenarioName scenarioName
     * @param {module:model/TestHarnessScenarioModel} testHarnessScenarioModel testHarnessScenarioDTO
     * @param {module:api/TestHarnessApi~updateTestHarnessScenarioUsingPUTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TestHarnessScenarioModel}
     */
    updateTestHarnessScenarioUsingPUT(apiKey, scenarioName, testHarnessScenarioModel, callback) {
      let postBody = testHarnessScenarioModel;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling updateTestHarnessScenarioUsingPUT");
      }
      // verify the required parameter 'scenarioName' is set
      if (scenarioName === undefined || scenarioName === null) {
        throw new Error("Missing the required parameter 'scenarioName' when calling updateTestHarnessScenarioUsingPUT");
      }
      // verify the required parameter 'testHarnessScenarioModel' is set
      if (testHarnessScenarioModel === undefined || testHarnessScenarioModel === null) {
        throw new Error("Missing the required parameter 'testHarnessScenarioModel' when calling updateTestHarnessScenarioUsingPUT");
      }

      let pathParams = {
        'apiKey': apiKey,
        'scenarioName': scenarioName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json;charset=UTF-8'];
      let returnType = TestHarnessScenarioModel;
      return this.apiClient.callApi(
        '/restv2/game/{apiKey}/admin/testHarness/scenarios/{scenarioName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
