/**
 * GameSparks Game Details API
 * The API to manage the GameSparks game details
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import MessageModel from '../model/MessageModel';
import ScriptsDifferenceListModel from '../model/ScriptsDifferenceListModel';
import SnapshotScriptVersionListModel from '../model/SnapshotScriptVersionListModel';

/**
* Scripts service.
* @module api/ScriptsApi
* @version v2
*/
export default class ScriptsApi {

    /**
    * Constructs a new ScriptsApi. 
    * @alias module:api/ScriptsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the exportZipUsingGET operation.
     * @callback module:api/ScriptsApi~exportZipUsingGETCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * exportZip
     * @param {String} apiKey apiKey
     * @param {module:api/ScriptsApi~exportZipUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     */
    exportZipUsingGET(apiKey, callback) {
      let postBody = null;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling exportZipUsingGET");
      }

      let pathParams = {
        'apiKey': apiKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = null;
      return this.apiClient.callApi(
        '/restv2/game/{apiKey}/admin/scripts/export', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getScriptDifferencesUsingGET operation.
     * @callback module:api/ScriptsApi~getScriptDifferencesUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ScriptsDifferenceListModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getScriptDifferences
     * @param {String} apiKey apiKey
     * @param {String} snapshotId1 snapshotId1
     * @param {String} snapshotId2 snapshotId2
     * @param {module:api/ScriptsApi~getScriptDifferencesUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ScriptsDifferenceListModel}
     */
    getScriptDifferencesUsingGET(apiKey, snapshotId1, snapshotId2, callback) {
      let postBody = null;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling getScriptDifferencesUsingGET");
      }
      // verify the required parameter 'snapshotId1' is set
      if (snapshotId1 === undefined || snapshotId1 === null) {
        throw new Error("Missing the required parameter 'snapshotId1' when calling getScriptDifferencesUsingGET");
      }
      // verify the required parameter 'snapshotId2' is set
      if (snapshotId2 === undefined || snapshotId2 === null) {
        throw new Error("Missing the required parameter 'snapshotId2' when calling getScriptDifferencesUsingGET");
      }

      let pathParams = {
        'apiKey': apiKey,
        'snapshotId1': snapshotId1,
        'snapshotId2': snapshotId2
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = ScriptsDifferenceListModel;
      return this.apiClient.callApi(
        '/restv2/game/{apiKey}/admin/scripts/differences/{snapshotId1}/{snapshotId2}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getScriptVersionsUsingGET operation.
     * @callback module:api/ScriptsApi~getScriptVersionsUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SnapshotScriptVersionListModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getScriptVersions
     * @param {String} apiKey apiKey
     * @param {Number} page page
     * @param {Object} opts Optional parameters
     * @param {Number} [pageSize = 100)] pageSize
     * @param {module:api/ScriptsApi~getScriptVersionsUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SnapshotScriptVersionListModel}
     */
    getScriptVersionsUsingGET(apiKey, page, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling getScriptVersionsUsingGET");
      }
      // verify the required parameter 'page' is set
      if (page === undefined || page === null) {
        throw new Error("Missing the required parameter 'page' when calling getScriptVersionsUsingGET");
      }

      let pathParams = {
        'apiKey': apiKey,
        'page': page
      };
      let queryParams = {
        'pageSize': opts['pageSize']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = SnapshotScriptVersionListModel;
      return this.apiClient.callApi(
        '/restv2/game/{apiKey}/admin/scripts/versions/{page}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getScriptVersionsUsingGET1 operation.
     * @callback module:api/ScriptsApi~getScriptVersionsUsingGET1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/SnapshotScriptVersionListModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getScriptVersions
     * @param {String} apiKey apiKey
     * @param {Object} opts Optional parameters
     * @param {Number} [pageSize = 100)] pageSize
     * @param {module:api/ScriptsApi~getScriptVersionsUsingGET1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SnapshotScriptVersionListModel}
     */
    getScriptVersionsUsingGET1(apiKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling getScriptVersionsUsingGET1");
      }

      let pathParams = {
        'apiKey': apiKey
      };
      let queryParams = {
        'pageSize': opts['pageSize']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = SnapshotScriptVersionListModel;
      return this.apiClient.callApi(
        '/restv2/game/{apiKey}/admin/scripts/versions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the importAcceptUsingPOST operation.
     * @callback module:api/ScriptsApi~importAcceptUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MessageModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * importAccept
     * @param {String} apiKey apiKey
     * @param {String} body body
     * @param {File} file file
     * @param {module:api/ScriptsApi~importAcceptUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MessageModel}
     */
    importAcceptUsingPOST(apiKey, body, file, callback) {
      let postBody = null;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling importAcceptUsingPOST");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling importAcceptUsingPOST");
      }
      // verify the required parameter 'file' is set
      if (file === undefined || file === null) {
        throw new Error("Missing the required parameter 'file' when calling importAcceptUsingPOST");
      }

      let pathParams = {
        'apiKey': apiKey
      };
      let queryParams = {
        'body': body
      };
      let headerParams = {
      };
      let formParams = {
        'file': file
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json;charset=UTF-8'];
      let returnType = MessageModel;
      return this.apiClient.callApi(
        '/restv2/game/{apiKey}/admin/scripts/import/accept', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the importZipUsingPOST operation.
     * @callback module:api/ScriptsApi~importZipUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ScriptsDifferenceListModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * importZip
     * @param {String} apiKey apiKey
     * @param {File} file file
     * @param {module:api/ScriptsApi~importZipUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ScriptsDifferenceListModel}
     */
    importZipUsingPOST(apiKey, file, callback) {
      let postBody = null;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling importZipUsingPOST");
      }
      // verify the required parameter 'file' is set
      if (file === undefined || file === null) {
        throw new Error("Missing the required parameter 'file' when calling importZipUsingPOST");
      }

      let pathParams = {
        'apiKey': apiKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'file': file
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json;charset=UTF-8'];
      let returnType = ScriptsDifferenceListModel;
      return this.apiClient.callApi(
        '/restv2/game/{apiKey}/admin/scripts/import/preview', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
