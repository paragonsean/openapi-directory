/**
 * GameSparks Game Details API
 * The API to manage the GameSparks game details
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import MessageModel from '../model/MessageModel';
import PushNotificationTestModel from '../model/PushNotificationTestModel';
import PushNotificationTestSummaryListModel from '../model/PushNotificationTestSummaryListModel';

/**
* PushNotificationTest service.
* @module api/PushNotificationTestApi
* @version v2
*/
export default class PushNotificationTestApi {

    /**
    * Constructs a new PushNotificationTestApi. 
    * @alias module:api/PushNotificationTestApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the testPushAmazonNotificationsUsingPOST operation.
     * @callback module:api/PushNotificationTestApi~testPushAmazonNotificationsUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PushNotificationTestSummaryListModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * testPushAmazonNotifications
     * @param {String} apiKey apiKey
     * @param {module:model/PushNotificationTestModel} pushNotificationTestModel messageDetails
     * @param {module:api/PushNotificationTestApi~testPushAmazonNotificationsUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PushNotificationTestSummaryListModel}
     */
    testPushAmazonNotificationsUsingPOST(apiKey, pushNotificationTestModel, callback) {
      let postBody = pushNotificationTestModel;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling testPushAmazonNotificationsUsingPOST");
      }
      // verify the required parameter 'pushNotificationTestModel' is set
      if (pushNotificationTestModel === undefined || pushNotificationTestModel === null) {
        throw new Error("Missing the required parameter 'pushNotificationTestModel' when calling testPushAmazonNotificationsUsingPOST");
      }

      let pathParams = {
        'apiKey': apiKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = PushNotificationTestSummaryListModel;
      return this.apiClient.callApi(
        '/restv2/game/{apiKey}/admin/pushNotifications/test/amazon', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the testPushAppleDevNotificationsUsingPOST operation.
     * @callback module:api/PushNotificationTestApi~testPushAppleDevNotificationsUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PushNotificationTestSummaryListModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * testPushAppleDevNotifications
     * @param {String} apiKey apiKey
     * @param {module:model/PushNotificationTestModel} pushNotificationTestModel messageDetails
     * @param {module:api/PushNotificationTestApi~testPushAppleDevNotificationsUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PushNotificationTestSummaryListModel}
     */
    testPushAppleDevNotificationsUsingPOST(apiKey, pushNotificationTestModel, callback) {
      let postBody = pushNotificationTestModel;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling testPushAppleDevNotificationsUsingPOST");
      }
      // verify the required parameter 'pushNotificationTestModel' is set
      if (pushNotificationTestModel === undefined || pushNotificationTestModel === null) {
        throw new Error("Missing the required parameter 'pushNotificationTestModel' when calling testPushAppleDevNotificationsUsingPOST");
      }

      let pathParams = {
        'apiKey': apiKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = PushNotificationTestSummaryListModel;
      return this.apiClient.callApi(
        '/restv2/game/{apiKey}/admin/pushNotifications/test/apple/development', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the testPushAppleProdNotificationsUsingPOST operation.
     * @callback module:api/PushNotificationTestApi~testPushAppleProdNotificationsUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PushNotificationTestSummaryListModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * testPushAppleProdNotifications
     * @param {String} apiKey apiKey
     * @param {module:model/PushNotificationTestModel} pushNotificationTestModel messageDetails
     * @param {module:api/PushNotificationTestApi~testPushAppleProdNotificationsUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PushNotificationTestSummaryListModel}
     */
    testPushAppleProdNotificationsUsingPOST(apiKey, pushNotificationTestModel, callback) {
      let postBody = pushNotificationTestModel;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling testPushAppleProdNotificationsUsingPOST");
      }
      // verify the required parameter 'pushNotificationTestModel' is set
      if (pushNotificationTestModel === undefined || pushNotificationTestModel === null) {
        throw new Error("Missing the required parameter 'pushNotificationTestModel' when calling testPushAppleProdNotificationsUsingPOST");
      }

      let pathParams = {
        'apiKey': apiKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = PushNotificationTestSummaryListModel;
      return this.apiClient.callApi(
        '/restv2/game/{apiKey}/admin/pushNotifications/test/apple/production', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the testPushGoogleNotificationsUsingPOST operation.
     * @callback module:api/PushNotificationTestApi~testPushGoogleNotificationsUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PushNotificationTestSummaryListModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * testPushGoogleNotifications
     * @param {String} apiKey apiKey
     * @param {module:model/PushNotificationTestModel} pushNotificationTestModel messageDetails
     * @param {module:api/PushNotificationTestApi~testPushGoogleNotificationsUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PushNotificationTestSummaryListModel}
     */
    testPushGoogleNotificationsUsingPOST(apiKey, pushNotificationTestModel, callback) {
      let postBody = pushNotificationTestModel;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling testPushGoogleNotificationsUsingPOST");
      }
      // verify the required parameter 'pushNotificationTestModel' is set
      if (pushNotificationTestModel === undefined || pushNotificationTestModel === null) {
        throw new Error("Missing the required parameter 'pushNotificationTestModel' when calling testPushGoogleNotificationsUsingPOST");
      }

      let pathParams = {
        'apiKey': apiKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = PushNotificationTestSummaryListModel;
      return this.apiClient.callApi(
        '/restv2/game/{apiKey}/admin/pushNotifications/test/google', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the testViberIntegrationNotificationsUsingPOST operation.
     * @callback module:api/PushNotificationTestApi~testViberIntegrationNotificationsUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PushNotificationTestSummaryListModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * testViberIntegrationNotifications
     * @param {String} apiKey apiKey
     * @param {module:model/PushNotificationTestModel} pushNotificationTestModel messageDetails
     * @param {module:api/PushNotificationTestApi~testViberIntegrationNotificationsUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PushNotificationTestSummaryListModel}
     */
    testViberIntegrationNotificationsUsingPOST(apiKey, pushNotificationTestModel, callback) {
      let postBody = pushNotificationTestModel;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling testViberIntegrationNotificationsUsingPOST");
      }
      // verify the required parameter 'pushNotificationTestModel' is set
      if (pushNotificationTestModel === undefined || pushNotificationTestModel === null) {
        throw new Error("Missing the required parameter 'pushNotificationTestModel' when calling testViberIntegrationNotificationsUsingPOST");
      }

      let pathParams = {
        'apiKey': apiKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = PushNotificationTestSummaryListModel;
      return this.apiClient.callApi(
        '/restv2/game/{apiKey}/admin/pushNotifications/test/viber/integration', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the testViberProductionNotificationsUsingPOST operation.
     * @callback module:api/PushNotificationTestApi~testViberProductionNotificationsUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PushNotificationTestSummaryListModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * testViberProductionNotifications
     * @param {String} apiKey apiKey
     * @param {module:model/PushNotificationTestModel} pushNotificationTestModel messageDetails
     * @param {module:api/PushNotificationTestApi~testViberProductionNotificationsUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PushNotificationTestSummaryListModel}
     */
    testViberProductionNotificationsUsingPOST(apiKey, pushNotificationTestModel, callback) {
      let postBody = pushNotificationTestModel;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling testViberProductionNotificationsUsingPOST");
      }
      // verify the required parameter 'pushNotificationTestModel' is set
      if (pushNotificationTestModel === undefined || pushNotificationTestModel === null) {
        throw new Error("Missing the required parameter 'pushNotificationTestModel' when calling testViberProductionNotificationsUsingPOST");
      }

      let pathParams = {
        'apiKey': apiKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = PushNotificationTestSummaryListModel;
      return this.apiClient.callApi(
        '/restv2/game/{apiKey}/admin/pushNotifications/test/viber/production', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the testWindows8NotificationsUsingPOST operation.
     * @callback module:api/PushNotificationTestApi~testWindows8NotificationsUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PushNotificationTestSummaryListModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * testWindows8Notifications
     * @param {String} apiKey apiKey
     * @param {module:model/PushNotificationTestModel} pushNotificationTestModel messageDetails
     * @param {module:api/PushNotificationTestApi~testWindows8NotificationsUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PushNotificationTestSummaryListModel}
     */
    testWindows8NotificationsUsingPOST(apiKey, pushNotificationTestModel, callback) {
      let postBody = pushNotificationTestModel;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling testWindows8NotificationsUsingPOST");
      }
      // verify the required parameter 'pushNotificationTestModel' is set
      if (pushNotificationTestModel === undefined || pushNotificationTestModel === null) {
        throw new Error("Missing the required parameter 'pushNotificationTestModel' when calling testWindows8NotificationsUsingPOST");
      }

      let pathParams = {
        'apiKey': apiKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = PushNotificationTestSummaryListModel;
      return this.apiClient.callApi(
        '/restv2/game/{apiKey}/admin/pushNotifications/test/microsoft/windows8', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the testWindowsPhone8NotificationsUsingPOST operation.
     * @callback module:api/PushNotificationTestApi~testWindowsPhone8NotificationsUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PushNotificationTestSummaryListModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * testWindowsPhone8Notifications
     * @param {String} apiKey apiKey
     * @param {module:model/PushNotificationTestModel} pushNotificationTestModel messageDetails
     * @param {module:api/PushNotificationTestApi~testWindowsPhone8NotificationsUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PushNotificationTestSummaryListModel}
     */
    testWindowsPhone8NotificationsUsingPOST(apiKey, pushNotificationTestModel, callback) {
      let postBody = pushNotificationTestModel;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling testWindowsPhone8NotificationsUsingPOST");
      }
      // verify the required parameter 'pushNotificationTestModel' is set
      if (pushNotificationTestModel === undefined || pushNotificationTestModel === null) {
        throw new Error("Missing the required parameter 'pushNotificationTestModel' when calling testWindowsPhone8NotificationsUsingPOST");
      }

      let pathParams = {
        'apiKey': apiKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = PushNotificationTestSummaryListModel;
      return this.apiClient.callApi(
        '/restv2/game/{apiKey}/admin/pushNotifications/test/microsoft/windowsPhone8', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
