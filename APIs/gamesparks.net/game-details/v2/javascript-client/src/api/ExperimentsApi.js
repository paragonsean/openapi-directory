/**
 * GameSparks Game Details API
 * The API to manage the GameSparks game details
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ExperimentModel from '../model/ExperimentModel';
import MessageModel from '../model/MessageModel';

/**
* Experiments service.
* @module api/ExperimentsApi
* @version v2
*/
export default class ExperimentsApi {

    /**
    * Constructs a new ExperimentsApi. 
    * @alias module:api/ExperimentsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createExperimentUsingPOST operation.
     * @callback module:api/ExperimentsApi~createExperimentUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ExperimentModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * createExperiment
     * @param {String} apiKey apiKey
     * @param {module:model/ExperimentModel} experimentModel input
     * @param {module:api/ExperimentsApi~createExperimentUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ExperimentModel}
     */
    createExperimentUsingPOST(apiKey, experimentModel, callback) {
      let postBody = experimentModel;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling createExperimentUsingPOST");
      }
      // verify the required parameter 'experimentModel' is set
      if (experimentModel === undefined || experimentModel === null) {
        throw new Error("Missing the required parameter 'experimentModel' when calling createExperimentUsingPOST");
      }

      let pathParams = {
        'apiKey': apiKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json;charset=UTF-8'];
      let returnType = ExperimentModel;
      return this.apiClient.callApi(
        '/restv2/game/{apiKey}/manage/experiments', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteExperimentUsingDELETE operation.
     * @callback module:api/ExperimentsApi~deleteExperimentUsingDELETECallback
     * @param {String} error Error message, if any.
     * @param {module:model/MessageModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * deleteExperiment
     * @param {String} apiKey apiKey
     * @param {Number} id id
     * @param {module:api/ExperimentsApi~deleteExperimentUsingDELETECallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MessageModel}
     */
    deleteExperimentUsingDELETE(apiKey, id, callback) {
      let postBody = null;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling deleteExperimentUsingDELETE");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteExperimentUsingDELETE");
      }

      let pathParams = {
        'apiKey': apiKey,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json;charset=UTF-8'];
      let returnType = MessageModel;
      return this.apiClient.callApi(
        '/restv2/game/{apiKey}/manage/experiments/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the doActionExperimentUsingPOST operation.
     * @callback module:api/ExperimentsApi~doActionExperimentUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ExperimentModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * doActionExperiment
     * @param {String} apiKey apiKey
     * @param {Number} id id
     * @param {module:model/String} action action
     * @param {module:api/ExperimentsApi~doActionExperimentUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ExperimentModel}
     */
    doActionExperimentUsingPOST(apiKey, id, action, callback) {
      let postBody = null;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling doActionExperimentUsingPOST");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling doActionExperimentUsingPOST");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling doActionExperimentUsingPOST");
      }

      let pathParams = {
        'apiKey': apiKey,
        'id': id,
        'action': action
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json;charset=UTF-8'];
      let returnType = ExperimentModel;
      return this.apiClient.callApi(
        '/restv2/game/{apiKey}/manage/experiments/{id}/{action}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getExperimentUsingGET operation.
     * @callback module:api/ExperimentsApi~getExperimentUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ExperimentModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getExperiment
     * @param {String} apiKey apiKey
     * @param {Number} id id
     * @param {module:api/ExperimentsApi~getExperimentUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ExperimentModel}
     */
    getExperimentUsingGET(apiKey, id, callback) {
      let postBody = null;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling getExperimentUsingGET");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getExperimentUsingGET");
      }

      let pathParams = {
        'apiKey': apiKey,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json;charset=UTF-8'];
      let returnType = ExperimentModel;
      return this.apiClient.callApi(
        '/restv2/game/{apiKey}/manage/experiments/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getExperimentsUsingGET operation.
     * @callback module:api/ExperimentsApi~getExperimentsUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ExperimentModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getExperiments
     * @param {String} apiKey apiKey
     * @param {module:api/ExperimentsApi~getExperimentsUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ExperimentModel>}
     */
    getExperimentsUsingGET(apiKey, callback) {
      let postBody = null;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling getExperimentsUsingGET");
      }

      let pathParams = {
        'apiKey': apiKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json;charset=UTF-8'];
      let returnType = [ExperimentModel];
      return this.apiClient.callApi(
        '/restv2/game/{apiKey}/manage/experiments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateExperimentUsingPUT operation.
     * @callback module:api/ExperimentsApi~updateExperimentUsingPUTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ExperimentModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * updateExperiment
     * @param {String} apiKey apiKey
     * @param {Number} id id
     * @param {module:model/ExperimentModel} experimentModel input
     * @param {module:api/ExperimentsApi~updateExperimentUsingPUTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ExperimentModel}
     */
    updateExperimentUsingPUT(apiKey, id, experimentModel, callback) {
      let postBody = experimentModel;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling updateExperimentUsingPUT");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateExperimentUsingPUT");
      }
      // verify the required parameter 'experimentModel' is set
      if (experimentModel === undefined || experimentModel === null) {
        throw new Error("Missing the required parameter 'experimentModel' when calling updateExperimentUsingPUT");
      }

      let pathParams = {
        'apiKey': apiKey,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json;charset=UTF-8'];
      let returnType = ExperimentModel;
      return this.apiClient.callApi(
        '/restv2/game/{apiKey}/manage/experiments/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
