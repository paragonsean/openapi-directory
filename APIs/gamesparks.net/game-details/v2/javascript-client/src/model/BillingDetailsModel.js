/**
 * GameSparks Game Details API
 * The API to manage the GameSparks game details
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The BillingDetailsModel model module.
 * @module model/BillingDetailsModel
 * @version v2
 */
class BillingDetailsModel {
    /**
     * Constructs a new <code>BillingDetailsModel</code>.
     * @alias module:model/BillingDetailsModel
     * @param building {String} 
     * @param city {String} 
     * @param companyName {String} 
     * @param country {String} 
     * @param email1 {String} 
     * @param firstName1 {String} 
     * @param lastName1 {String} 
     * @param postcode {String} 
     * @param street {String} 
     */
    constructor(building, city, companyName, country, email1, firstName1, lastName1, postcode, street) { 
        
        BillingDetailsModel.initialize(this, building, city, companyName, country, email1, firstName1, lastName1, postcode, street);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, building, city, companyName, country, email1, firstName1, lastName1, postcode, street) { 
        obj['building'] = building;
        obj['city'] = city;
        obj['companyName'] = companyName;
        obj['country'] = country;
        obj['email1'] = email1;
        obj['firstName1'] = firstName1;
        obj['lastName1'] = lastName1;
        obj['postcode'] = postcode;
        obj['street'] = street;
    }

    /**
     * Constructs a <code>BillingDetailsModel</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BillingDetailsModel} obj Optional instance to populate.
     * @return {module:model/BillingDetailsModel} The populated <code>BillingDetailsModel</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BillingDetailsModel();

            if (data.hasOwnProperty('building')) {
                obj['building'] = ApiClient.convertToType(data['building'], 'String');
            }
            if (data.hasOwnProperty('city')) {
                obj['city'] = ApiClient.convertToType(data['city'], 'String');
            }
            if (data.hasOwnProperty('companyName')) {
                obj['companyName'] = ApiClient.convertToType(data['companyName'], 'String');
            }
            if (data.hasOwnProperty('country')) {
                obj['country'] = ApiClient.convertToType(data['country'], 'String');
            }
            if (data.hasOwnProperty('email1')) {
                obj['email1'] = ApiClient.convertToType(data['email1'], 'String');
            }
            if (data.hasOwnProperty('email2')) {
                obj['email2'] = ApiClient.convertToType(data['email2'], 'String');
            }
            if (data.hasOwnProperty('email3')) {
                obj['email3'] = ApiClient.convertToType(data['email3'], 'String');
            }
            if (data.hasOwnProperty('firstName1')) {
                obj['firstName1'] = ApiClient.convertToType(data['firstName1'], 'String');
            }
            if (data.hasOwnProperty('firstName2')) {
                obj['firstName2'] = ApiClient.convertToType(data['firstName2'], 'String');
            }
            if (data.hasOwnProperty('firstName3')) {
                obj['firstName3'] = ApiClient.convertToType(data['firstName3'], 'String');
            }
            if (data.hasOwnProperty('lastName1')) {
                obj['lastName1'] = ApiClient.convertToType(data['lastName1'], 'String');
            }
            if (data.hasOwnProperty('lastName2')) {
                obj['lastName2'] = ApiClient.convertToType(data['lastName2'], 'String');
            }
            if (data.hasOwnProperty('lastName3')) {
                obj['lastName3'] = ApiClient.convertToType(data['lastName3'], 'String');
            }
            if (data.hasOwnProperty('postcode')) {
                obj['postcode'] = ApiClient.convertToType(data['postcode'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('street')) {
                obj['street'] = ApiClient.convertToType(data['street'], 'String');
            }
            if (data.hasOwnProperty('taxNumber')) {
                obj['taxNumber'] = ApiClient.convertToType(data['taxNumber'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BillingDetailsModel</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BillingDetailsModel</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of BillingDetailsModel.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['building'] && !(typeof data['building'] === 'string' || data['building'] instanceof String)) {
            throw new Error("Expected the field `building` to be a primitive type in the JSON string but got " + data['building']);
        }
        // ensure the json data is a string
        if (data['city'] && !(typeof data['city'] === 'string' || data['city'] instanceof String)) {
            throw new Error("Expected the field `city` to be a primitive type in the JSON string but got " + data['city']);
        }
        // ensure the json data is a string
        if (data['companyName'] && !(typeof data['companyName'] === 'string' || data['companyName'] instanceof String)) {
            throw new Error("Expected the field `companyName` to be a primitive type in the JSON string but got " + data['companyName']);
        }
        // ensure the json data is a string
        if (data['country'] && !(typeof data['country'] === 'string' || data['country'] instanceof String)) {
            throw new Error("Expected the field `country` to be a primitive type in the JSON string but got " + data['country']);
        }
        // ensure the json data is a string
        if (data['email1'] && !(typeof data['email1'] === 'string' || data['email1'] instanceof String)) {
            throw new Error("Expected the field `email1` to be a primitive type in the JSON string but got " + data['email1']);
        }
        // ensure the json data is a string
        if (data['email2'] && !(typeof data['email2'] === 'string' || data['email2'] instanceof String)) {
            throw new Error("Expected the field `email2` to be a primitive type in the JSON string but got " + data['email2']);
        }
        // ensure the json data is a string
        if (data['email3'] && !(typeof data['email3'] === 'string' || data['email3'] instanceof String)) {
            throw new Error("Expected the field `email3` to be a primitive type in the JSON string but got " + data['email3']);
        }
        // ensure the json data is a string
        if (data['firstName1'] && !(typeof data['firstName1'] === 'string' || data['firstName1'] instanceof String)) {
            throw new Error("Expected the field `firstName1` to be a primitive type in the JSON string but got " + data['firstName1']);
        }
        // ensure the json data is a string
        if (data['firstName2'] && !(typeof data['firstName2'] === 'string' || data['firstName2'] instanceof String)) {
            throw new Error("Expected the field `firstName2` to be a primitive type in the JSON string but got " + data['firstName2']);
        }
        // ensure the json data is a string
        if (data['firstName3'] && !(typeof data['firstName3'] === 'string' || data['firstName3'] instanceof String)) {
            throw new Error("Expected the field `firstName3` to be a primitive type in the JSON string but got " + data['firstName3']);
        }
        // ensure the json data is a string
        if (data['lastName1'] && !(typeof data['lastName1'] === 'string' || data['lastName1'] instanceof String)) {
            throw new Error("Expected the field `lastName1` to be a primitive type in the JSON string but got " + data['lastName1']);
        }
        // ensure the json data is a string
        if (data['lastName2'] && !(typeof data['lastName2'] === 'string' || data['lastName2'] instanceof String)) {
            throw new Error("Expected the field `lastName2` to be a primitive type in the JSON string but got " + data['lastName2']);
        }
        // ensure the json data is a string
        if (data['lastName3'] && !(typeof data['lastName3'] === 'string' || data['lastName3'] instanceof String)) {
            throw new Error("Expected the field `lastName3` to be a primitive type in the JSON string but got " + data['lastName3']);
        }
        // ensure the json data is a string
        if (data['postcode'] && !(typeof data['postcode'] === 'string' || data['postcode'] instanceof String)) {
            throw new Error("Expected the field `postcode` to be a primitive type in the JSON string but got " + data['postcode']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // ensure the json data is a string
        if (data['street'] && !(typeof data['street'] === 'string' || data['street'] instanceof String)) {
            throw new Error("Expected the field `street` to be a primitive type in the JSON string but got " + data['street']);
        }
        // ensure the json data is a string
        if (data['taxNumber'] && !(typeof data['taxNumber'] === 'string' || data['taxNumber'] instanceof String)) {
            throw new Error("Expected the field `taxNumber` to be a primitive type in the JSON string but got " + data['taxNumber']);
        }

        return true;
    }


}

BillingDetailsModel.RequiredProperties = ["building", "city", "companyName", "country", "email1", "firstName1", "lastName1", "postcode", "street"];

/**
 * @member {String} building
 */
BillingDetailsModel.prototype['building'] = undefined;

/**
 * @member {String} city
 */
BillingDetailsModel.prototype['city'] = undefined;

/**
 * @member {String} companyName
 */
BillingDetailsModel.prototype['companyName'] = undefined;

/**
 * @member {String} country
 */
BillingDetailsModel.prototype['country'] = undefined;

/**
 * @member {String} email1
 */
BillingDetailsModel.prototype['email1'] = undefined;

/**
 * @member {String} email2
 */
BillingDetailsModel.prototype['email2'] = undefined;

/**
 * @member {String} email3
 */
BillingDetailsModel.prototype['email3'] = undefined;

/**
 * @member {String} firstName1
 */
BillingDetailsModel.prototype['firstName1'] = undefined;

/**
 * @member {String} firstName2
 */
BillingDetailsModel.prototype['firstName2'] = undefined;

/**
 * @member {String} firstName3
 */
BillingDetailsModel.prototype['firstName3'] = undefined;

/**
 * @member {String} lastName1
 */
BillingDetailsModel.prototype['lastName1'] = undefined;

/**
 * @member {String} lastName2
 */
BillingDetailsModel.prototype['lastName2'] = undefined;

/**
 * @member {String} lastName3
 */
BillingDetailsModel.prototype['lastName3'] = undefined;

/**
 * @member {String} postcode
 */
BillingDetailsModel.prototype['postcode'] = undefined;

/**
 * @member {String} state
 */
BillingDetailsModel.prototype['state'] = undefined;

/**
 * @member {String} street
 */
BillingDetailsModel.prototype['street'] = undefined;

/**
 * @member {String} taxNumber
 */
BillingDetailsModel.prototype['taxNumber'] = undefined;






export default BillingDetailsModel;

