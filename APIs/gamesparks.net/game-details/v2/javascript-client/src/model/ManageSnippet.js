/**
 * GameSparks Game Details API
 * The API to manage the GameSparks game details
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ManageSnippet model module.
 * @module model/ManageSnippet
 * @version v2
 */
class ManageSnippet {
    /**
     * Constructs a new <code>ManageSnippet</code>.
     * @alias module:model/ManageSnippet
     */
    constructor() { 
        
        ManageSnippet.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ManageSnippet</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ManageSnippet} obj Optional instance to populate.
     * @return {module:model/ManageSnippet} The populated <code>ManageSnippet</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ManageSnippet();

            if (data.hasOwnProperty('groups')) {
                obj['groups'] = ApiClient.convertToType(data['groups'], ['String']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('script')) {
                obj['script'] = ApiClient.convertToType(data['script'], 'String');
            }
            if (data.hasOwnProperty('scriptData')) {
                obj['scriptData'] = ApiClient.convertToType(data['scriptData'], 'String');
            }
            if (data.hasOwnProperty('shortCode')) {
                obj['shortCode'] = ApiClient.convertToType(data['shortCode'], 'String');
            }
            if (data.hasOwnProperty('template')) {
                obj['template'] = ApiClient.convertToType(data['template'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ManageSnippet</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ManageSnippet</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['groups'])) {
            throw new Error("Expected the field `groups` to be an array in the JSON data but got " + data['groups']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['script'] && !(typeof data['script'] === 'string' || data['script'] instanceof String)) {
            throw new Error("Expected the field `script` to be a primitive type in the JSON string but got " + data['script']);
        }
        // ensure the json data is a string
        if (data['scriptData'] && !(typeof data['scriptData'] === 'string' || data['scriptData'] instanceof String)) {
            throw new Error("Expected the field `scriptData` to be a primitive type in the JSON string but got " + data['scriptData']);
        }
        // ensure the json data is a string
        if (data['shortCode'] && !(typeof data['shortCode'] === 'string' || data['shortCode'] instanceof String)) {
            throw new Error("Expected the field `shortCode` to be a primitive type in the JSON string but got " + data['shortCode']);
        }
        // ensure the json data is a string
        if (data['template'] && !(typeof data['template'] === 'string' || data['template'] instanceof String)) {
            throw new Error("Expected the field `template` to be a primitive type in the JSON string but got " + data['template']);
        }

        return true;
    }


}



/**
 * @member {Array.<String>} groups
 */
ManageSnippet.prototype['groups'] = undefined;

/**
 * @member {String} name
 */
ManageSnippet.prototype['name'] = undefined;

/**
 * @member {String} script
 */
ManageSnippet.prototype['script'] = undefined;

/**
 * @member {String} scriptData
 */
ManageSnippet.prototype['scriptData'] = undefined;

/**
 * @member {String} shortCode
 */
ManageSnippet.prototype['shortCode'] = undefined;

/**
 * @member {String} template
 */
ManageSnippet.prototype['template'] = undefined;






export default ManageSnippet;

