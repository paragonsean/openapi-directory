/**
 * GameSparks Game Details API
 * The API to manage the GameSparks game details
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ExperimentConfigModel from './ExperimentConfigModel';

/**
 * The ExperimentModel model module.
 * @module model/ExperimentModel
 * @version v2
 */
class ExperimentModel {
    /**
     * Constructs a new <code>ExperimentModel</code>.
     * @alias module:model/ExperimentModel
     */
    constructor() { 
        
        ExperimentModel.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ExperimentModel</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ExperimentModel} obj Optional instance to populate.
     * @return {module:model/ExperimentModel} The populated <code>ExperimentModel</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ExperimentModel();

            if (data.hasOwnProperty('active')) {
                obj['active'] = ApiClient.convertToType(data['active'], 'Boolean');
            }
            if (data.hasOwnProperty('changedFieldsAndInitialValues')) {
                obj['changedFieldsAndInitialValues'] = ApiClient.convertToType(data['changedFieldsAndInitialValues'], Object);
            }
            if (data.hasOwnProperty('complete')) {
                obj['complete'] = ApiClient.convertToType(data['complete'], 'Boolean');
            }
            if (data.hasOwnProperty('config')) {
                obj['config'] = ExperimentConfigModel.constructFromObject(data['config']);
            }
            if (data.hasOwnProperty('endDate')) {
                obj['endDate'] = ApiClient.convertToType(data['endDate'], 'Date');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('measurements')) {
                obj['measurements'] = ApiClient.convertToType(data['measurements'], 'String');
            }
            if (data.hasOwnProperty('measurementsEsQuery')) {
                obj['measurementsEsQuery'] = ApiClient.convertToType(data['measurementsEsQuery'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('percentHash')) {
                obj['percentHash'] = ApiClient.convertToType(data['percentHash'], 'String');
            }
            if (data.hasOwnProperty('publishedStages')) {
                obj['publishedStages'] = ApiClient.convertToType(data['publishedStages'], ['String']);
            }
            if (data.hasOwnProperty('startDate')) {
                obj['startDate'] = ApiClient.convertToType(data['startDate'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ExperimentModel</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ExperimentModel</code>.
     */
    static validateJSON(data) {
        // validate the optional field `config`
        if (data['config']) { // data not null
          ExperimentConfigModel.validateJSON(data['config']);
        }
        // ensure the json data is a string
        if (data['measurements'] && !(typeof data['measurements'] === 'string' || data['measurements'] instanceof String)) {
            throw new Error("Expected the field `measurements` to be a primitive type in the JSON string but got " + data['measurements']);
        }
        // ensure the json data is a string
        if (data['measurementsEsQuery'] && !(typeof data['measurementsEsQuery'] === 'string' || data['measurementsEsQuery'] instanceof String)) {
            throw new Error("Expected the field `measurementsEsQuery` to be a primitive type in the JSON string but got " + data['measurementsEsQuery']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['percentHash'] && !(typeof data['percentHash'] === 'string' || data['percentHash'] instanceof String)) {
            throw new Error("Expected the field `percentHash` to be a primitive type in the JSON string but got " + data['percentHash']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['publishedStages'])) {
            throw new Error("Expected the field `publishedStages` to be an array in the JSON data but got " + data['publishedStages']);
        }

        return true;
    }


}



/**
 * @member {Boolean} active
 */
ExperimentModel.prototype['active'] = undefined;

/**
 * @member {Object} changedFieldsAndInitialValues
 */
ExperimentModel.prototype['changedFieldsAndInitialValues'] = undefined;

/**
 * @member {Boolean} complete
 */
ExperimentModel.prototype['complete'] = undefined;

/**
 * @member {module:model/ExperimentConfigModel} config
 */
ExperimentModel.prototype['config'] = undefined;

/**
 * @member {Date} endDate
 */
ExperimentModel.prototype['endDate'] = undefined;

/**
 * @member {Number} id
 */
ExperimentModel.prototype['id'] = undefined;

/**
 * @member {String} measurements
 */
ExperimentModel.prototype['measurements'] = undefined;

/**
 * @member {String} measurementsEsQuery
 */
ExperimentModel.prototype['measurementsEsQuery'] = undefined;

/**
 * @member {String} name
 */
ExperimentModel.prototype['name'] = undefined;

/**
 * @member {String} percentHash
 */
ExperimentModel.prototype['percentHash'] = undefined;

/**
 * @member {Array.<String>} publishedStages
 */
ExperimentModel.prototype['publishedStages'] = undefined;

/**
 * @member {Date} startDate
 */
ExperimentModel.prototype['startDate'] = undefined;






export default ExperimentModel;

