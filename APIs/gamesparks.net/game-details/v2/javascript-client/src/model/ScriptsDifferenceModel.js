/**
 * GameSparks Game Details API
 * The API to manage the GameSparks game details
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ScriptsDifferenceModel model module.
 * @module model/ScriptsDifferenceModel
 * @version v2
 */
class ScriptsDifferenceModel {
    /**
     * Constructs a new <code>ScriptsDifferenceModel</code>.
     * @alias module:model/ScriptsDifferenceModel
     */
    constructor() { 
        
        ScriptsDifferenceModel.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ScriptsDifferenceModel</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ScriptsDifferenceModel} obj Optional instance to populate.
     * @return {module:model/ScriptsDifferenceModel} The populated <code>ScriptsDifferenceModel</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ScriptsDifferenceModel();

            if (data.hasOwnProperty('bind')) {
                obj['bind'] = ApiClient.convertToType(data['bind'], 'String');
            }
            if (data.hasOwnProperty('changeType')) {
                obj['changeType'] = ApiClient.convertToType(data['changeType'], 'String');
            }
            if (data.hasOwnProperty('fileName')) {
                obj['fileName'] = ApiClient.convertToType(data['fileName'], 'String');
            }
            if (data.hasOwnProperty('script1')) {
                obj['script1'] = ApiClient.convertToType(data['script1'], 'String');
            }
            if (data.hasOwnProperty('script2')) {
                obj['script2'] = ApiClient.convertToType(data['script2'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ScriptsDifferenceModel</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ScriptsDifferenceModel</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['bind'] && !(typeof data['bind'] === 'string' || data['bind'] instanceof String)) {
            throw new Error("Expected the field `bind` to be a primitive type in the JSON string but got " + data['bind']);
        }
        // ensure the json data is a string
        if (data['changeType'] && !(typeof data['changeType'] === 'string' || data['changeType'] instanceof String)) {
            throw new Error("Expected the field `changeType` to be a primitive type in the JSON string but got " + data['changeType']);
        }
        // ensure the json data is a string
        if (data['fileName'] && !(typeof data['fileName'] === 'string' || data['fileName'] instanceof String)) {
            throw new Error("Expected the field `fileName` to be a primitive type in the JSON string but got " + data['fileName']);
        }
        // ensure the json data is a string
        if (data['script1'] && !(typeof data['script1'] === 'string' || data['script1'] instanceof String)) {
            throw new Error("Expected the field `script1` to be a primitive type in the JSON string but got " + data['script1']);
        }
        // ensure the json data is a string
        if (data['script2'] && !(typeof data['script2'] === 'string' || data['script2'] instanceof String)) {
            throw new Error("Expected the field `script2` to be a primitive type in the JSON string but got " + data['script2']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * @member {String} bind
 */
ScriptsDifferenceModel.prototype['bind'] = undefined;

/**
 * @member {module:model/ScriptsDifferenceModel.ChangeTypeEnum} changeType
 */
ScriptsDifferenceModel.prototype['changeType'] = undefined;

/**
 * @member {String} fileName
 */
ScriptsDifferenceModel.prototype['fileName'] = undefined;

/**
 * @member {String} script1
 */
ScriptsDifferenceModel.prototype['script1'] = undefined;

/**
 * @member {String} script2
 */
ScriptsDifferenceModel.prototype['script2'] = undefined;

/**
 * @member {String} type
 */
ScriptsDifferenceModel.prototype['type'] = undefined;





/**
 * Allowed values for the <code>changeType</code> property.
 * @enum {String}
 * @readonly
 */
ScriptsDifferenceModel['ChangeTypeEnum'] = {

    /**
     * value: "NOCHANGE"
     * @const
     */
    "NOCHANGE": "NOCHANGE",

    /**
     * value: "ADDED"
     * @const
     */
    "ADDED": "ADDED",

    /**
     * value: "CHANGED"
     * @const
     */
    "CHANGED": "CHANGED",

    /**
     * value: "DELETED"
     * @const
     */
    "DELETED": "DELETED",

    /**
     * value: "IGNORED"
     * @const
     */
    "IGNORED": "IGNORED",

    /**
     * value: "CHANGED_CODE_INVALID"
     * @const
     */
    "CHANGED_CODE_INVALID": "CHANGED_CODE_INVALID",

    /**
     * value: "CHANGED_NAME_INVALID"
     * @const
     */
    "CHANGED_NAME_INVALID": "CHANGED_NAME_INVALID"
};



export default ScriptsDifferenceModel;

