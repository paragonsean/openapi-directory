/**
 * GameSparks Game Details API
 * The API to manage the GameSparks game details
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITestHarnessScenarioModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITestHarnessScenarioModel::OAITestHarnessScenarioModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITestHarnessScenarioModel::OAITestHarnessScenarioModel() {
    this->initializeModel();
}

OAITestHarnessScenarioModel::~OAITestHarnessScenarioModel() {}

void OAITestHarnessScenarioModel::initializeModel() {

    m_scenario_json_isSet = false;
    m_scenario_json_isValid = false;

    m_scenario_name_isSet = false;
    m_scenario_name_isValid = false;
}

void OAITestHarnessScenarioModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITestHarnessScenarioModel::fromJsonObject(QJsonObject json) {

    m_scenario_json_isValid = ::OpenAPI::fromJsonValue(m_scenario_json, json[QString("scenarioJson")]);
    m_scenario_json_isSet = !json[QString("scenarioJson")].isNull() && m_scenario_json_isValid;

    m_scenario_name_isValid = ::OpenAPI::fromJsonValue(m_scenario_name, json[QString("scenarioName")]);
    m_scenario_name_isSet = !json[QString("scenarioName")].isNull() && m_scenario_name_isValid;
}

QString OAITestHarnessScenarioModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITestHarnessScenarioModel::asJsonObject() const {
    QJsonObject obj;
    if (m_scenario_json_isSet) {
        obj.insert(QString("scenarioJson"), ::OpenAPI::toJsonValue(m_scenario_json));
    }
    if (m_scenario_name_isSet) {
        obj.insert(QString("scenarioName"), ::OpenAPI::toJsonValue(m_scenario_name));
    }
    return obj;
}

OAIObject OAITestHarnessScenarioModel::getScenarioJson() const {
    return m_scenario_json;
}
void OAITestHarnessScenarioModel::setScenarioJson(const OAIObject &scenario_json) {
    m_scenario_json = scenario_json;
    m_scenario_json_isSet = true;
}

bool OAITestHarnessScenarioModel::is_scenario_json_Set() const{
    return m_scenario_json_isSet;
}

bool OAITestHarnessScenarioModel::is_scenario_json_Valid() const{
    return m_scenario_json_isValid;
}

QString OAITestHarnessScenarioModel::getScenarioName() const {
    return m_scenario_name;
}
void OAITestHarnessScenarioModel::setScenarioName(const QString &scenario_name) {
    m_scenario_name = scenario_name;
    m_scenario_name_isSet = true;
}

bool OAITestHarnessScenarioModel::is_scenario_name_Set() const{
    return m_scenario_name_isSet;
}

bool OAITestHarnessScenarioModel::is_scenario_name_Valid() const{
    return m_scenario_name_isValid;
}

bool OAITestHarnessScenarioModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_scenario_json_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scenario_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITestHarnessScenarioModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
