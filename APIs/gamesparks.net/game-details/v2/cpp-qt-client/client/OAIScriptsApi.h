/**
 * GameSparks Game Details API
 * The API to manage the GameSparks game details
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIScriptsApi_H
#define OAI_OAIScriptsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIHttpFileElement.h"
#include "OAIMessageModel.h"
#include "OAIScriptsDifferenceListModel.h"
#include "OAISnapshotScriptVersionListModel.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIScriptsApi : public QObject {
    Q_OBJECT

public:
    OAIScriptsApi(const int timeOut = 0);
    ~OAIScriptsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  api_key QString [required]
    */
    virtual void exportZipUsingGET(const QString &api_key);

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  snapshot_id1 QString [required]
    * @param[in]  snapshot_id2 QString [required]
    */
    virtual void getScriptDifferencesUsingGET(const QString &api_key, const QString &snapshot_id1, const QString &snapshot_id2);

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  page qint32 [required]
    * @param[in]  page_size qint32 [optional]
    */
    virtual void getScriptVersionsUsingGET(const QString &api_key, const qint32 &page, const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  page_size qint32 [optional]
    */
    virtual void getScriptVersionsUsingGET1(const QString &api_key, const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  body QString [required]
    * @param[in]  file OAIHttpFileElement [required]
    */
    virtual void importAcceptUsingPOST(const QString &api_key, const QString &body, const OAIHttpFileElement &file);

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  file OAIHttpFileElement [required]
    */
    virtual void importZipUsingPOST(const QString &api_key, const OAIHttpFileElement &file);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void exportZipUsingGETCallback(OAIHttpRequestWorker *worker);
    void getScriptDifferencesUsingGETCallback(OAIHttpRequestWorker *worker);
    void getScriptVersionsUsingGETCallback(OAIHttpRequestWorker *worker);
    void getScriptVersionsUsingGET1Callback(OAIHttpRequestWorker *worker);
    void importAcceptUsingPOSTCallback(OAIHttpRequestWorker *worker);
    void importZipUsingPOSTCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void exportZipUsingGETSignal();
    void getScriptDifferencesUsingGETSignal(OAIScriptsDifferenceListModel summary);
    void getScriptVersionsUsingGETSignal(OAISnapshotScriptVersionListModel summary);
    void getScriptVersionsUsingGET1Signal(OAISnapshotScriptVersionListModel summary);
    void importAcceptUsingPOSTSignal(OAIMessageModel summary);
    void importZipUsingPOSTSignal(OAIScriptsDifferenceListModel summary);


    void exportZipUsingGETSignalFull(OAIHttpRequestWorker *worker);
    void getScriptDifferencesUsingGETSignalFull(OAIHttpRequestWorker *worker, OAIScriptsDifferenceListModel summary);
    void getScriptVersionsUsingGETSignalFull(OAIHttpRequestWorker *worker, OAISnapshotScriptVersionListModel summary);
    void getScriptVersionsUsingGET1SignalFull(OAIHttpRequestWorker *worker, OAISnapshotScriptVersionListModel summary);
    void importAcceptUsingPOSTSignalFull(OAIHttpRequestWorker *worker, OAIMessageModel summary);
    void importZipUsingPOSTSignalFull(OAIHttpRequestWorker *worker, OAIScriptsDifferenceListModel summary);

    Q_DECL_DEPRECATED_X("Use exportZipUsingGETSignalError() instead")
    void exportZipUsingGETSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void exportZipUsingGETSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getScriptDifferencesUsingGETSignalError() instead")
    void getScriptDifferencesUsingGETSignalE(OAIScriptsDifferenceListModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getScriptDifferencesUsingGETSignalError(OAIScriptsDifferenceListModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getScriptVersionsUsingGETSignalError() instead")
    void getScriptVersionsUsingGETSignalE(OAISnapshotScriptVersionListModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getScriptVersionsUsingGETSignalError(OAISnapshotScriptVersionListModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getScriptVersionsUsingGET1SignalError() instead")
    void getScriptVersionsUsingGET1SignalE(OAISnapshotScriptVersionListModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getScriptVersionsUsingGET1SignalError(OAISnapshotScriptVersionListModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use importAcceptUsingPOSTSignalError() instead")
    void importAcceptUsingPOSTSignalE(OAIMessageModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void importAcceptUsingPOSTSignalError(OAIMessageModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use importZipUsingPOSTSignalError() instead")
    void importZipUsingPOSTSignalE(OAIScriptsDifferenceListModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void importZipUsingPOSTSignalError(OAIScriptsDifferenceListModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use exportZipUsingGETSignalErrorFull() instead")
    void exportZipUsingGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void exportZipUsingGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getScriptDifferencesUsingGETSignalErrorFull() instead")
    void getScriptDifferencesUsingGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getScriptDifferencesUsingGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getScriptVersionsUsingGETSignalErrorFull() instead")
    void getScriptVersionsUsingGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getScriptVersionsUsingGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getScriptVersionsUsingGET1SignalErrorFull() instead")
    void getScriptVersionsUsingGET1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getScriptVersionsUsingGET1SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use importAcceptUsingPOSTSignalErrorFull() instead")
    void importAcceptUsingPOSTSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void importAcceptUsingPOSTSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use importZipUsingPOSTSignalErrorFull() instead")
    void importZipUsingPOSTSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void importZipUsingPOSTSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
