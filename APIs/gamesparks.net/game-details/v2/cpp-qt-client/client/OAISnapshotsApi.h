/**
 * GameSparks Game Details API
 * The API to manage the GameSparks game details
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAISnapshotsApi_H
#define OAI_OAISnapshotsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIMessageModel.h"
#include "OAISnapshotCreationModel.h"
#include "OAISnapshotCreationSuccessModel.h"
#include "OAISnapshotModel.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAISnapshotsApi : public QObject {
    Q_OBJECT

public:
    OAISnapshotsApi(const int timeOut = 0);
    ~OAISnapshotsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  snapshot_id QString [required]
    * @param[in]  target_api_key QString [required]
    * @param[in]  include_game_config bool [optional]
    * @param[in]  include_metadata bool [optional]
    * @param[in]  include_binaries bool [optional]
    * @param[in]  include_collaborators bool [optional]
    */
    virtual void copySnapshotToExistingGameUsingPOST1(const QString &api_key, const QString &snapshot_id, const QString &target_api_key, const ::OpenAPI::OptionalParam<bool> &include_game_config = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &include_metadata = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &include_binaries = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &include_collaborators = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  snapshot_id QString [required]
    * @param[in]  include_game_config bool [optional]
    * @param[in]  include_metadata bool [optional]
    * @param[in]  include_binaries bool [optional]
    * @param[in]  include_collaborators bool [optional]
    */
    virtual void copySnapshotToNewGameUsingPOST(const QString &api_key, const QString &snapshot_id, const ::OpenAPI::OptionalParam<bool> &include_game_config = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &include_metadata = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &include_binaries = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &include_collaborators = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  oai_snapshot_creation_model OAISnapshotCreationModel [required]
    */
    virtual void createSnapshotsUsingPOST(const QString &api_key, const OAISnapshotCreationModel &oai_snapshot_creation_model);

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  snapshot_id QString [required]
    */
    virtual void deleteSnapshotUsingDELETE1(const QString &api_key, const QString &snapshot_id);

    /**
    * @param[in]  api_key QString [required]
    */
    virtual void getLiveSnapshotIdUsingGET(const QString &api_key);

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  snapshot_id QString [required]
    */
    virtual void getSnapshotUsingGET(const QString &api_key, const QString &snapshot_id);

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  page qint32 [required]
    * @param[in]  page_size qint32 [optional]
    */
    virtual void getSnapshotsUsingGET(const QString &api_key, const qint32 &page, const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  page_size qint32 [optional]
    */
    virtual void getSnapshotsUsingGET1(const QString &api_key, const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  snapshot_id QString [required]
    */
    virtual void publishSnapshotUsingPOST1(const QString &api_key, const QString &snapshot_id);

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  snapshot_id QString [required]
    */
    virtual void revertToSnapshotUsingPOST(const QString &api_key, const QString &snapshot_id);

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  snapshot_id QString [required]
    */
    virtual void unpublishSnapshotUsingPOST(const QString &api_key, const QString &snapshot_id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void copySnapshotToExistingGameUsingPOST1Callback(OAIHttpRequestWorker *worker);
    void copySnapshotToNewGameUsingPOSTCallback(OAIHttpRequestWorker *worker);
    void createSnapshotsUsingPOSTCallback(OAIHttpRequestWorker *worker);
    void deleteSnapshotUsingDELETE1Callback(OAIHttpRequestWorker *worker);
    void getLiveSnapshotIdUsingGETCallback(OAIHttpRequestWorker *worker);
    void getSnapshotUsingGETCallback(OAIHttpRequestWorker *worker);
    void getSnapshotsUsingGETCallback(OAIHttpRequestWorker *worker);
    void getSnapshotsUsingGET1Callback(OAIHttpRequestWorker *worker);
    void publishSnapshotUsingPOST1Callback(OAIHttpRequestWorker *worker);
    void revertToSnapshotUsingPOSTCallback(OAIHttpRequestWorker *worker);
    void unpublishSnapshotUsingPOSTCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void copySnapshotToExistingGameUsingPOST1Signal(OAISnapshotCreationSuccessModel summary);
    void copySnapshotToNewGameUsingPOSTSignal(OAISnapshotCreationSuccessModel summary);
    void createSnapshotsUsingPOSTSignal(OAISnapshotModel summary);
    void deleteSnapshotUsingDELETE1Signal(OAIMessageModel summary);
    void getLiveSnapshotIdUsingGETSignal(OAIMessageModel summary);
    void getSnapshotUsingGETSignal(OAISnapshotModel summary);
    void getSnapshotsUsingGETSignal(QList<OAISnapshotModel> summary);
    void getSnapshotsUsingGET1Signal(QList<OAISnapshotModel> summary);
    void publishSnapshotUsingPOST1Signal();
    void revertToSnapshotUsingPOSTSignal(OAIMessageModel summary);
    void unpublishSnapshotUsingPOSTSignal(OAIMessageModel summary);


    void copySnapshotToExistingGameUsingPOST1SignalFull(OAIHttpRequestWorker *worker, OAISnapshotCreationSuccessModel summary);
    void copySnapshotToNewGameUsingPOSTSignalFull(OAIHttpRequestWorker *worker, OAISnapshotCreationSuccessModel summary);
    void createSnapshotsUsingPOSTSignalFull(OAIHttpRequestWorker *worker, OAISnapshotModel summary);
    void deleteSnapshotUsingDELETE1SignalFull(OAIHttpRequestWorker *worker, OAIMessageModel summary);
    void getLiveSnapshotIdUsingGETSignalFull(OAIHttpRequestWorker *worker, OAIMessageModel summary);
    void getSnapshotUsingGETSignalFull(OAIHttpRequestWorker *worker, OAISnapshotModel summary);
    void getSnapshotsUsingGETSignalFull(OAIHttpRequestWorker *worker, QList<OAISnapshotModel> summary);
    void getSnapshotsUsingGET1SignalFull(OAIHttpRequestWorker *worker, QList<OAISnapshotModel> summary);
    void publishSnapshotUsingPOST1SignalFull(OAIHttpRequestWorker *worker);
    void revertToSnapshotUsingPOSTSignalFull(OAIHttpRequestWorker *worker, OAIMessageModel summary);
    void unpublishSnapshotUsingPOSTSignalFull(OAIHttpRequestWorker *worker, OAIMessageModel summary);

    Q_DECL_DEPRECATED_X("Use copySnapshotToExistingGameUsingPOST1SignalError() instead")
    void copySnapshotToExistingGameUsingPOST1SignalE(OAISnapshotCreationSuccessModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void copySnapshotToExistingGameUsingPOST1SignalError(OAISnapshotCreationSuccessModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use copySnapshotToNewGameUsingPOSTSignalError() instead")
    void copySnapshotToNewGameUsingPOSTSignalE(OAISnapshotCreationSuccessModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void copySnapshotToNewGameUsingPOSTSignalError(OAISnapshotCreationSuccessModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createSnapshotsUsingPOSTSignalError() instead")
    void createSnapshotsUsingPOSTSignalE(OAISnapshotModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createSnapshotsUsingPOSTSignalError(OAISnapshotModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteSnapshotUsingDELETE1SignalError() instead")
    void deleteSnapshotUsingDELETE1SignalE(OAIMessageModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSnapshotUsingDELETE1SignalError(OAIMessageModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getLiveSnapshotIdUsingGETSignalError() instead")
    void getLiveSnapshotIdUsingGETSignalE(OAIMessageModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getLiveSnapshotIdUsingGETSignalError(OAIMessageModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSnapshotUsingGETSignalError() instead")
    void getSnapshotUsingGETSignalE(OAISnapshotModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSnapshotUsingGETSignalError(OAISnapshotModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSnapshotsUsingGETSignalError() instead")
    void getSnapshotsUsingGETSignalE(QList<OAISnapshotModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSnapshotsUsingGETSignalError(QList<OAISnapshotModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSnapshotsUsingGET1SignalError() instead")
    void getSnapshotsUsingGET1SignalE(QList<OAISnapshotModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSnapshotsUsingGET1SignalError(QList<OAISnapshotModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use publishSnapshotUsingPOST1SignalError() instead")
    void publishSnapshotUsingPOST1SignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void publishSnapshotUsingPOST1SignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use revertToSnapshotUsingPOSTSignalError() instead")
    void revertToSnapshotUsingPOSTSignalE(OAIMessageModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void revertToSnapshotUsingPOSTSignalError(OAIMessageModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use unpublishSnapshotUsingPOSTSignalError() instead")
    void unpublishSnapshotUsingPOSTSignalE(OAIMessageModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void unpublishSnapshotUsingPOSTSignalError(OAIMessageModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use copySnapshotToExistingGameUsingPOST1SignalErrorFull() instead")
    void copySnapshotToExistingGameUsingPOST1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void copySnapshotToExistingGameUsingPOST1SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use copySnapshotToNewGameUsingPOSTSignalErrorFull() instead")
    void copySnapshotToNewGameUsingPOSTSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void copySnapshotToNewGameUsingPOSTSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createSnapshotsUsingPOSTSignalErrorFull() instead")
    void createSnapshotsUsingPOSTSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createSnapshotsUsingPOSTSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteSnapshotUsingDELETE1SignalErrorFull() instead")
    void deleteSnapshotUsingDELETE1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSnapshotUsingDELETE1SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getLiveSnapshotIdUsingGETSignalErrorFull() instead")
    void getLiveSnapshotIdUsingGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getLiveSnapshotIdUsingGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSnapshotUsingGETSignalErrorFull() instead")
    void getSnapshotUsingGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSnapshotUsingGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSnapshotsUsingGETSignalErrorFull() instead")
    void getSnapshotsUsingGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSnapshotsUsingGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSnapshotsUsingGET1SignalErrorFull() instead")
    void getSnapshotsUsingGET1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSnapshotsUsingGET1SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use publishSnapshotUsingPOST1SignalErrorFull() instead")
    void publishSnapshotUsingPOST1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void publishSnapshotUsingPOST1SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use revertToSnapshotUsingPOSTSignalErrorFull() instead")
    void revertToSnapshotUsingPOSTSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void revertToSnapshotUsingPOSTSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use unpublishSnapshotUsingPOSTSignalErrorFull() instead")
    void unpublishSnapshotUsingPOSTSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void unpublishSnapshotUsingPOSTSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
