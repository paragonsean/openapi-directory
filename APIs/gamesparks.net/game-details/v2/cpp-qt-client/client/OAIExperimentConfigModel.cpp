/**
 * GameSparks Game Details API
 * The API to manage the GameSparks game details
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExperimentConfigModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExperimentConfigModel::OAIExperimentConfigModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExperimentConfigModel::OAIExperimentConfigModel() {
    this->initializeModel();
}

OAIExperimentConfigModel::~OAIExperimentConfigModel() {}

void OAIExperimentConfigModel::initializeModel() {

    m_player_mongo_query_isSet = false;
    m_player_mongo_query_isValid = false;

    m_player_query_isSet = false;
    m_player_query_isValid = false;

    m_variants_isSet = false;
    m_variants_isValid = false;
}

void OAIExperimentConfigModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExperimentConfigModel::fromJsonObject(QJsonObject json) {

    m_player_mongo_query_isValid = ::OpenAPI::fromJsonValue(m_player_mongo_query, json[QString("playerMongoQuery")]);
    m_player_mongo_query_isSet = !json[QString("playerMongoQuery")].isNull() && m_player_mongo_query_isValid;

    m_player_query_isValid = ::OpenAPI::fromJsonValue(m_player_query, json[QString("playerQuery")]);
    m_player_query_isSet = !json[QString("playerQuery")].isNull() && m_player_query_isValid;

    m_variants_isValid = ::OpenAPI::fromJsonValue(m_variants, json[QString("variants")]);
    m_variants_isSet = !json[QString("variants")].isNull() && m_variants_isValid;
}

QString OAIExperimentConfigModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExperimentConfigModel::asJsonObject() const {
    QJsonObject obj;
    if (m_player_mongo_query_isSet) {
        obj.insert(QString("playerMongoQuery"), ::OpenAPI::toJsonValue(m_player_mongo_query));
    }
    if (m_player_query_isSet) {
        obj.insert(QString("playerQuery"), ::OpenAPI::toJsonValue(m_player_query));
    }
    if (m_variants_isSet) {
        obj.insert(QString("variants"), ::OpenAPI::toJsonValue(m_variants));
    }
    return obj;
}

QString OAIExperimentConfigModel::getPlayerMongoQuery() const {
    return m_player_mongo_query;
}
void OAIExperimentConfigModel::setPlayerMongoQuery(const QString &player_mongo_query) {
    m_player_mongo_query = player_mongo_query;
    m_player_mongo_query_isSet = true;
}

bool OAIExperimentConfigModel::is_player_mongo_query_Set() const{
    return m_player_mongo_query_isSet;
}

bool OAIExperimentConfigModel::is_player_mongo_query_Valid() const{
    return m_player_mongo_query_isValid;
}

QString OAIExperimentConfigModel::getPlayerQuery() const {
    return m_player_query;
}
void OAIExperimentConfigModel::setPlayerQuery(const QString &player_query) {
    m_player_query = player_query;
    m_player_query_isSet = true;
}

bool OAIExperimentConfigModel::is_player_query_Set() const{
    return m_player_query_isSet;
}

bool OAIExperimentConfigModel::is_player_query_Valid() const{
    return m_player_query_isValid;
}

QString OAIExperimentConfigModel::getVariants() const {
    return m_variants;
}
void OAIExperimentConfigModel::setVariants(const QString &variants) {
    m_variants = variants;
    m_variants_isSet = true;
}

bool OAIExperimentConfigModel::is_variants_Set() const{
    return m_variants_isSet;
}

bool OAIExperimentConfigModel::is_variants_Valid() const{
    return m_variants_isValid;
}

bool OAIExperimentConfigModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_player_mongo_query_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_player_query_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_variants_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExperimentConfigModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
