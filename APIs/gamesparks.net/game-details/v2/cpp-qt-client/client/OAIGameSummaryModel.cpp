/**
 * GameSparks Game Details API
 * The API to manage the GameSparks game details
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGameSummaryModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGameSummaryModel::OAIGameSummaryModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGameSummaryModel::OAIGameSummaryModel() {
    this->initializeModel();
}

OAIGameSummaryModel::~OAIGameSummaryModel() {}

void OAIGameSummaryModel::initializeModel() {

    m_log_level_data_isSet = false;
    m_log_level_data_isValid = false;

    m_log_level_summary_isSet = false;
    m_log_level_summary_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;
}

void OAIGameSummaryModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGameSummaryModel::fromJsonObject(QJsonObject json) {

    m_log_level_data_isValid = ::OpenAPI::fromJsonValue(m_log_level_data, json[QString("logLevelData")]);
    m_log_level_data_isSet = !json[QString("logLevelData")].isNull() && m_log_level_data_isValid;

    m_log_level_summary_isValid = ::OpenAPI::fromJsonValue(m_log_level_summary, json[QString("logLevelSummary")]);
    m_log_level_summary_isSet = !json[QString("logLevelSummary")].isNull() && m_log_level_summary_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;
}

QString OAIGameSummaryModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGameSummaryModel::asJsonObject() const {
    QJsonObject obj;
    if (m_log_level_data.size() > 0) {
        obj.insert(QString("logLevelData"), ::OpenAPI::toJsonValue(m_log_level_data));
    }
    if (m_log_level_summary.size() > 0) {
        obj.insert(QString("logLevelSummary"), ::OpenAPI::toJsonValue(m_log_level_summary));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    return obj;
}

QList<OAIObject> OAIGameSummaryModel::getLogLevelData() const {
    return m_log_level_data;
}
void OAIGameSummaryModel::setLogLevelData(const QList<OAIObject> &log_level_data) {
    m_log_level_data = log_level_data;
    m_log_level_data_isSet = true;
}

bool OAIGameSummaryModel::is_log_level_data_Set() const{
    return m_log_level_data_isSet;
}

bool OAIGameSummaryModel::is_log_level_data_Valid() const{
    return m_log_level_data_isValid;
}

QList<OAILogLevelSummaryModel> OAIGameSummaryModel::getLogLevelSummary() const {
    return m_log_level_summary;
}
void OAIGameSummaryModel::setLogLevelSummary(const QList<OAILogLevelSummaryModel> &log_level_summary) {
    m_log_level_summary = log_level_summary;
    m_log_level_summary_isSet = true;
}

bool OAIGameSummaryModel::is_log_level_summary_Set() const{
    return m_log_level_summary_isSet;
}

bool OAIGameSummaryModel::is_log_level_summary_Valid() const{
    return m_log_level_summary_isValid;
}

QString OAIGameSummaryModel::getMessage() const {
    return m_message;
}
void OAIGameSummaryModel::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIGameSummaryModel::is_message_Set() const{
    return m_message_isSet;
}

bool OAIGameSummaryModel::is_message_Valid() const{
    return m_message_isValid;
}

bool OAIGameSummaryModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_log_level_data.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_log_level_summary.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGameSummaryModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
