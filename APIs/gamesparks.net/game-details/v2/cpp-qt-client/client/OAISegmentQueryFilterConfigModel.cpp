/**
 * GameSparks Game Details API
 * The API to manage the GameSparks game details
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISegmentQueryFilterConfigModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISegmentQueryFilterConfigModel::OAISegmentQueryFilterConfigModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISegmentQueryFilterConfigModel::OAISegmentQueryFilterConfigModel() {
    this->initializeModel();
}

OAISegmentQueryFilterConfigModel::~OAISegmentQueryFilterConfigModel() {}

void OAISegmentQueryFilterConfigModel::initializeModel() {

    m_custom_filters_isSet = false;
    m_custom_filters_isValid = false;

    m_hidden_filters_isSet = false;
    m_hidden_filters_isValid = false;
}

void OAISegmentQueryFilterConfigModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISegmentQueryFilterConfigModel::fromJsonObject(QJsonObject json) {

    m_custom_filters_isValid = ::OpenAPI::fromJsonValue(m_custom_filters, json[QString("customFilters")]);
    m_custom_filters_isSet = !json[QString("customFilters")].isNull() && m_custom_filters_isValid;

    m_hidden_filters_isValid = ::OpenAPI::fromJsonValue(m_hidden_filters, json[QString("hiddenFilters")]);
    m_hidden_filters_isSet = !json[QString("hiddenFilters")].isNull() && m_hidden_filters_isValid;
}

QString OAISegmentQueryFilterConfigModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISegmentQueryFilterConfigModel::asJsonObject() const {
    QJsonObject obj;
    if (m_custom_filters.size() > 0) {
        obj.insert(QString("customFilters"), ::OpenAPI::toJsonValue(m_custom_filters));
    }
    if (m_hidden_filters.size() > 0) {
        obj.insert(QString("hiddenFilters"), ::OpenAPI::toJsonValue(m_hidden_filters));
    }
    return obj;
}

QList<OAISegmentQueryFilterModel> OAISegmentQueryFilterConfigModel::getCustomFilters() const {
    return m_custom_filters;
}
void OAISegmentQueryFilterConfigModel::setCustomFilters(const QList<OAISegmentQueryFilterModel> &custom_filters) {
    m_custom_filters = custom_filters;
    m_custom_filters_isSet = true;
}

bool OAISegmentQueryFilterConfigModel::is_custom_filters_Set() const{
    return m_custom_filters_isSet;
}

bool OAISegmentQueryFilterConfigModel::is_custom_filters_Valid() const{
    return m_custom_filters_isValid;
}

QList<QString> OAISegmentQueryFilterConfigModel::getHiddenFilters() const {
    return m_hidden_filters;
}
void OAISegmentQueryFilterConfigModel::setHiddenFilters(const QList<QString> &hidden_filters) {
    m_hidden_filters = hidden_filters;
    m_hidden_filters_isSet = true;
}

bool OAISegmentQueryFilterConfigModel::is_hidden_filters_Set() const{
    return m_hidden_filters_isSet;
}

bool OAISegmentQueryFilterConfigModel::is_hidden_filters_Valid() const{
    return m_hidden_filters_isValid;
}

bool OAISegmentQueryFilterConfigModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_custom_filters.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_hidden_filters.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISegmentQueryFilterConfigModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
