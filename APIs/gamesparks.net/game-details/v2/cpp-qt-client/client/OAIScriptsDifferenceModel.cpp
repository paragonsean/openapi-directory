/**
 * GameSparks Game Details API
 * The API to manage the GameSparks game details
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIScriptsDifferenceModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIScriptsDifferenceModel::OAIScriptsDifferenceModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIScriptsDifferenceModel::OAIScriptsDifferenceModel() {
    this->initializeModel();
}

OAIScriptsDifferenceModel::~OAIScriptsDifferenceModel() {}

void OAIScriptsDifferenceModel::initializeModel() {

    m_bind_isSet = false;
    m_bind_isValid = false;

    m_change_type_isSet = false;
    m_change_type_isValid = false;

    m_file_name_isSet = false;
    m_file_name_isValid = false;

    m_script1_isSet = false;
    m_script1_isValid = false;

    m_script2_isSet = false;
    m_script2_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIScriptsDifferenceModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIScriptsDifferenceModel::fromJsonObject(QJsonObject json) {

    m_bind_isValid = ::OpenAPI::fromJsonValue(m_bind, json[QString("bind")]);
    m_bind_isSet = !json[QString("bind")].isNull() && m_bind_isValid;

    m_change_type_isValid = ::OpenAPI::fromJsonValue(m_change_type, json[QString("changeType")]);
    m_change_type_isSet = !json[QString("changeType")].isNull() && m_change_type_isValid;

    m_file_name_isValid = ::OpenAPI::fromJsonValue(m_file_name, json[QString("fileName")]);
    m_file_name_isSet = !json[QString("fileName")].isNull() && m_file_name_isValid;

    m_script1_isValid = ::OpenAPI::fromJsonValue(m_script1, json[QString("script1")]);
    m_script1_isSet = !json[QString("script1")].isNull() && m_script1_isValid;

    m_script2_isValid = ::OpenAPI::fromJsonValue(m_script2, json[QString("script2")]);
    m_script2_isSet = !json[QString("script2")].isNull() && m_script2_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIScriptsDifferenceModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIScriptsDifferenceModel::asJsonObject() const {
    QJsonObject obj;
    if (m_bind_isSet) {
        obj.insert(QString("bind"), ::OpenAPI::toJsonValue(m_bind));
    }
    if (m_change_type_isSet) {
        obj.insert(QString("changeType"), ::OpenAPI::toJsonValue(m_change_type));
    }
    if (m_file_name_isSet) {
        obj.insert(QString("fileName"), ::OpenAPI::toJsonValue(m_file_name));
    }
    if (m_script1_isSet) {
        obj.insert(QString("script1"), ::OpenAPI::toJsonValue(m_script1));
    }
    if (m_script2_isSet) {
        obj.insert(QString("script2"), ::OpenAPI::toJsonValue(m_script2));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIScriptsDifferenceModel::getBind() const {
    return m_bind;
}
void OAIScriptsDifferenceModel::setBind(const QString &bind) {
    m_bind = bind;
    m_bind_isSet = true;
}

bool OAIScriptsDifferenceModel::is_bind_Set() const{
    return m_bind_isSet;
}

bool OAIScriptsDifferenceModel::is_bind_Valid() const{
    return m_bind_isValid;
}

QString OAIScriptsDifferenceModel::getChangeType() const {
    return m_change_type;
}
void OAIScriptsDifferenceModel::setChangeType(const QString &change_type) {
    m_change_type = change_type;
    m_change_type_isSet = true;
}

bool OAIScriptsDifferenceModel::is_change_type_Set() const{
    return m_change_type_isSet;
}

bool OAIScriptsDifferenceModel::is_change_type_Valid() const{
    return m_change_type_isValid;
}

QString OAIScriptsDifferenceModel::getFileName() const {
    return m_file_name;
}
void OAIScriptsDifferenceModel::setFileName(const QString &file_name) {
    m_file_name = file_name;
    m_file_name_isSet = true;
}

bool OAIScriptsDifferenceModel::is_file_name_Set() const{
    return m_file_name_isSet;
}

bool OAIScriptsDifferenceModel::is_file_name_Valid() const{
    return m_file_name_isValid;
}

QString OAIScriptsDifferenceModel::getScript1() const {
    return m_script1;
}
void OAIScriptsDifferenceModel::setScript1(const QString &script1) {
    m_script1 = script1;
    m_script1_isSet = true;
}

bool OAIScriptsDifferenceModel::is_script1_Set() const{
    return m_script1_isSet;
}

bool OAIScriptsDifferenceModel::is_script1_Valid() const{
    return m_script1_isValid;
}

QString OAIScriptsDifferenceModel::getScript2() const {
    return m_script2;
}
void OAIScriptsDifferenceModel::setScript2(const QString &script2) {
    m_script2 = script2;
    m_script2_isSet = true;
}

bool OAIScriptsDifferenceModel::is_script2_Set() const{
    return m_script2_isSet;
}

bool OAIScriptsDifferenceModel::is_script2_Valid() const{
    return m_script2_isValid;
}

QString OAIScriptsDifferenceModel::getType() const {
    return m_type;
}
void OAIScriptsDifferenceModel::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIScriptsDifferenceModel::is_type_Set() const{
    return m_type_isSet;
}

bool OAIScriptsDifferenceModel::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIScriptsDifferenceModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_change_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_script1_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_script2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIScriptsDifferenceModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
