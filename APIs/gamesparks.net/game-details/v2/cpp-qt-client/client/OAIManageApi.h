/**
 * GameSparks Game Details API
 * The API to manage the GameSparks game details
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIManageApi_H
#define OAI_OAIManageApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIManageItemSummary.h"
#include "OAIManageQuery.h"
#include "OAIManageResult.h"
#include "OAIManageScreen.h"
#include "OAIManageSnapshot.h"
#include "OAIManageSnippet.h"
#include "OAIMessageModel.h"
#include "OAISnapshotCreationModel.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIManageApi : public QObject {
    Q_OBJECT

public:
    OAIManageApi(const int timeOut = 0);
    ~OAIManageApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  snapshot_id QString [required]
    * @param[in]  target_api_key QString [required]
    */
    virtual void copySnapshotToExistingGameUsingPOST(const QString &api_key, const QString &snapshot_id, const QString &target_api_key);

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  oai_manage_query OAIManageQuery [required]
    */
    virtual void createQueryUsingPOST(const QString &api_key, const OAIManageQuery &oai_manage_query);

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  oai_manage_screen OAIManageScreen [required]
    */
    virtual void createScreenUsingPOST(const QString &api_key, const OAIManageScreen &oai_manage_screen);

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  oai_snapshot_creation_model OAISnapshotCreationModel [required]
    */
    virtual void createSnapshotUsingPOST(const QString &api_key, const OAISnapshotCreationModel &oai_snapshot_creation_model);

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  oai_manage_snippet OAIManageSnippet [required]
    */
    virtual void createSnippetUsingPOST(const QString &api_key, const OAIManageSnippet &oai_manage_snippet);

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  short_code QString [required]
    */
    virtual void deleteQueryUsingDELETE(const QString &api_key, const QString &short_code);

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  short_code QString [required]
    */
    virtual void deleteScreenUsingDELETE(const QString &api_key, const QString &short_code);

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  snapshot_id QString [required]
    */
    virtual void deleteSnapshotUsingDELETE(const QString &api_key, const QString &snapshot_id);

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  short_code QString [required]
    */
    virtual void deleteSnippetUsingDELETE(const QString &api_key, const QString &short_code);

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  short_code QString [required]
    */
    virtual void getQueryUsingGET(const QString &api_key, const QString &short_code);

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  short_code QString [required]
    */
    virtual void getScreenUsingGET(const QString &api_key, const QString &short_code);

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  short_code QString [required]
    */
    virtual void getSnippetUsingGET(const QString &api_key, const QString &short_code);

    /**
    * @param[in]  api_key QString [required]
    */
    virtual void listExecutableScreensUsingGET(const QString &api_key);

    /**
    * @param[in]  api_key QString [required]
    */
    virtual void listQueriesUsingGET(const QString &api_key);

    /**
    * @param[in]  api_key QString [required]
    */
    virtual void listScreensUsingGET(const QString &api_key);

    /**
    * @param[in]  api_key QString [required]
    */
    virtual void listSnapshotsUsingGET(const QString &api_key);

    /**
    * @param[in]  api_key QString [required]
    */
    virtual void listSnippetsUsingGET(const QString &api_key);

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  snapshot_id QString [required]
    */
    virtual void publishSnapshotUsingPOST(const QString &api_key, const QString &snapshot_id);

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  snapshot_id QString [required]
    */
    virtual void revertSnapshotUsingPOST(const QString &api_key, const QString &snapshot_id);

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  short_code QString [required]
    * @param[in]  oai_manage_query OAIManageQuery [required]
    */
    virtual void updateQueryUsingPUT(const QString &api_key, const QString &short_code, const OAIManageQuery &oai_manage_query);

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  short_code QString [required]
    * @param[in]  oai_manage_screen OAIManageScreen [required]
    */
    virtual void updateScreenUsingPUT(const QString &api_key, const QString &short_code, const OAIManageScreen &oai_manage_screen);

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  short_code QString [required]
    * @param[in]  oai_manage_snippet OAIManageSnippet [required]
    */
    virtual void updateSnippetUsingPUT(const QString &api_key, const QString &short_code, const OAIManageSnippet &oai_manage_snippet);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void copySnapshotToExistingGameUsingPOSTCallback(OAIHttpRequestWorker *worker);
    void createQueryUsingPOSTCallback(OAIHttpRequestWorker *worker);
    void createScreenUsingPOSTCallback(OAIHttpRequestWorker *worker);
    void createSnapshotUsingPOSTCallback(OAIHttpRequestWorker *worker);
    void createSnippetUsingPOSTCallback(OAIHttpRequestWorker *worker);
    void deleteQueryUsingDELETECallback(OAIHttpRequestWorker *worker);
    void deleteScreenUsingDELETECallback(OAIHttpRequestWorker *worker);
    void deleteSnapshotUsingDELETECallback(OAIHttpRequestWorker *worker);
    void deleteSnippetUsingDELETECallback(OAIHttpRequestWorker *worker);
    void getQueryUsingGETCallback(OAIHttpRequestWorker *worker);
    void getScreenUsingGETCallback(OAIHttpRequestWorker *worker);
    void getSnippetUsingGETCallback(OAIHttpRequestWorker *worker);
    void listExecutableScreensUsingGETCallback(OAIHttpRequestWorker *worker);
    void listQueriesUsingGETCallback(OAIHttpRequestWorker *worker);
    void listScreensUsingGETCallback(OAIHttpRequestWorker *worker);
    void listSnapshotsUsingGETCallback(OAIHttpRequestWorker *worker);
    void listSnippetsUsingGETCallback(OAIHttpRequestWorker *worker);
    void publishSnapshotUsingPOSTCallback(OAIHttpRequestWorker *worker);
    void revertSnapshotUsingPOSTCallback(OAIHttpRequestWorker *worker);
    void updateQueryUsingPUTCallback(OAIHttpRequestWorker *worker);
    void updateScreenUsingPUTCallback(OAIHttpRequestWorker *worker);
    void updateSnippetUsingPUTCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void copySnapshotToExistingGameUsingPOSTSignal(OAIManageResult summary);
    void createQueryUsingPOSTSignal(OAIManageQuery summary);
    void createScreenUsingPOSTSignal(OAIManageScreen summary);
    void createSnapshotUsingPOSTSignal(OAIManageSnapshot summary);
    void createSnippetUsingPOSTSignal(OAIManageSnippet summary);
    void deleteQueryUsingDELETESignal(OAIManageResult summary);
    void deleteScreenUsingDELETESignal(OAIManageResult summary);
    void deleteSnapshotUsingDELETESignal();
    void deleteSnippetUsingDELETESignal(OAIManageResult summary);
    void getQueryUsingGETSignal(OAIManageQuery summary);
    void getScreenUsingGETSignal(OAIManageScreen summary);
    void getSnippetUsingGETSignal(OAIManageSnippet summary);
    void listExecutableScreensUsingGETSignal(QList<OAIManageItemSummary> summary);
    void listQueriesUsingGETSignal(QList<OAIManageItemSummary> summary);
    void listScreensUsingGETSignal(QList<OAIManageItemSummary> summary);
    void listSnapshotsUsingGETSignal(QList<OAIManageSnapshot> summary);
    void listSnippetsUsingGETSignal(QList<OAIManageItemSummary> summary);
    void publishSnapshotUsingPOSTSignal(OAIManageResult summary);
    void revertSnapshotUsingPOSTSignal(OAIManageResult summary);
    void updateQueryUsingPUTSignal(OAIManageQuery summary);
    void updateScreenUsingPUTSignal(OAIManageScreen summary);
    void updateSnippetUsingPUTSignal(OAIManageSnippet summary);


    void copySnapshotToExistingGameUsingPOSTSignalFull(OAIHttpRequestWorker *worker, OAIManageResult summary);
    void createQueryUsingPOSTSignalFull(OAIHttpRequestWorker *worker, OAIManageQuery summary);
    void createScreenUsingPOSTSignalFull(OAIHttpRequestWorker *worker, OAIManageScreen summary);
    void createSnapshotUsingPOSTSignalFull(OAIHttpRequestWorker *worker, OAIManageSnapshot summary);
    void createSnippetUsingPOSTSignalFull(OAIHttpRequestWorker *worker, OAIManageSnippet summary);
    void deleteQueryUsingDELETESignalFull(OAIHttpRequestWorker *worker, OAIManageResult summary);
    void deleteScreenUsingDELETESignalFull(OAIHttpRequestWorker *worker, OAIManageResult summary);
    void deleteSnapshotUsingDELETESignalFull(OAIHttpRequestWorker *worker);
    void deleteSnippetUsingDELETESignalFull(OAIHttpRequestWorker *worker, OAIManageResult summary);
    void getQueryUsingGETSignalFull(OAIHttpRequestWorker *worker, OAIManageQuery summary);
    void getScreenUsingGETSignalFull(OAIHttpRequestWorker *worker, OAIManageScreen summary);
    void getSnippetUsingGETSignalFull(OAIHttpRequestWorker *worker, OAIManageSnippet summary);
    void listExecutableScreensUsingGETSignalFull(OAIHttpRequestWorker *worker, QList<OAIManageItemSummary> summary);
    void listQueriesUsingGETSignalFull(OAIHttpRequestWorker *worker, QList<OAIManageItemSummary> summary);
    void listScreensUsingGETSignalFull(OAIHttpRequestWorker *worker, QList<OAIManageItemSummary> summary);
    void listSnapshotsUsingGETSignalFull(OAIHttpRequestWorker *worker, QList<OAIManageSnapshot> summary);
    void listSnippetsUsingGETSignalFull(OAIHttpRequestWorker *worker, QList<OAIManageItemSummary> summary);
    void publishSnapshotUsingPOSTSignalFull(OAIHttpRequestWorker *worker, OAIManageResult summary);
    void revertSnapshotUsingPOSTSignalFull(OAIHttpRequestWorker *worker, OAIManageResult summary);
    void updateQueryUsingPUTSignalFull(OAIHttpRequestWorker *worker, OAIManageQuery summary);
    void updateScreenUsingPUTSignalFull(OAIHttpRequestWorker *worker, OAIManageScreen summary);
    void updateSnippetUsingPUTSignalFull(OAIHttpRequestWorker *worker, OAIManageSnippet summary);

    Q_DECL_DEPRECATED_X("Use copySnapshotToExistingGameUsingPOSTSignalError() instead")
    void copySnapshotToExistingGameUsingPOSTSignalE(OAIManageResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void copySnapshotToExistingGameUsingPOSTSignalError(OAIManageResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createQueryUsingPOSTSignalError() instead")
    void createQueryUsingPOSTSignalE(OAIManageQuery summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createQueryUsingPOSTSignalError(OAIManageQuery summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createScreenUsingPOSTSignalError() instead")
    void createScreenUsingPOSTSignalE(OAIManageScreen summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createScreenUsingPOSTSignalError(OAIManageScreen summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createSnapshotUsingPOSTSignalError() instead")
    void createSnapshotUsingPOSTSignalE(OAIManageSnapshot summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createSnapshotUsingPOSTSignalError(OAIManageSnapshot summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createSnippetUsingPOSTSignalError() instead")
    void createSnippetUsingPOSTSignalE(OAIManageSnippet summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createSnippetUsingPOSTSignalError(OAIManageSnippet summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteQueryUsingDELETESignalError() instead")
    void deleteQueryUsingDELETESignalE(OAIManageResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteQueryUsingDELETESignalError(OAIManageResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteScreenUsingDELETESignalError() instead")
    void deleteScreenUsingDELETESignalE(OAIManageResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteScreenUsingDELETESignalError(OAIManageResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteSnapshotUsingDELETESignalError() instead")
    void deleteSnapshotUsingDELETESignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSnapshotUsingDELETESignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteSnippetUsingDELETESignalError() instead")
    void deleteSnippetUsingDELETESignalE(OAIManageResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSnippetUsingDELETESignalError(OAIManageResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getQueryUsingGETSignalError() instead")
    void getQueryUsingGETSignalE(OAIManageQuery summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getQueryUsingGETSignalError(OAIManageQuery summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getScreenUsingGETSignalError() instead")
    void getScreenUsingGETSignalE(OAIManageScreen summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getScreenUsingGETSignalError(OAIManageScreen summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSnippetUsingGETSignalError() instead")
    void getSnippetUsingGETSignalE(OAIManageSnippet summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSnippetUsingGETSignalError(OAIManageSnippet summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listExecutableScreensUsingGETSignalError() instead")
    void listExecutableScreensUsingGETSignalE(QList<OAIManageItemSummary> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listExecutableScreensUsingGETSignalError(QList<OAIManageItemSummary> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listQueriesUsingGETSignalError() instead")
    void listQueriesUsingGETSignalE(QList<OAIManageItemSummary> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listQueriesUsingGETSignalError(QList<OAIManageItemSummary> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listScreensUsingGETSignalError() instead")
    void listScreensUsingGETSignalE(QList<OAIManageItemSummary> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listScreensUsingGETSignalError(QList<OAIManageItemSummary> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listSnapshotsUsingGETSignalError() instead")
    void listSnapshotsUsingGETSignalE(QList<OAIManageSnapshot> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listSnapshotsUsingGETSignalError(QList<OAIManageSnapshot> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listSnippetsUsingGETSignalError() instead")
    void listSnippetsUsingGETSignalE(QList<OAIManageItemSummary> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listSnippetsUsingGETSignalError(QList<OAIManageItemSummary> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use publishSnapshotUsingPOSTSignalError() instead")
    void publishSnapshotUsingPOSTSignalE(OAIManageResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void publishSnapshotUsingPOSTSignalError(OAIManageResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use revertSnapshotUsingPOSTSignalError() instead")
    void revertSnapshotUsingPOSTSignalE(OAIManageResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void revertSnapshotUsingPOSTSignalError(OAIManageResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateQueryUsingPUTSignalError() instead")
    void updateQueryUsingPUTSignalE(OAIManageQuery summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateQueryUsingPUTSignalError(OAIManageQuery summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateScreenUsingPUTSignalError() instead")
    void updateScreenUsingPUTSignalE(OAIManageScreen summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateScreenUsingPUTSignalError(OAIManageScreen summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateSnippetUsingPUTSignalError() instead")
    void updateSnippetUsingPUTSignalE(OAIManageSnippet summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateSnippetUsingPUTSignalError(OAIManageSnippet summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use copySnapshotToExistingGameUsingPOSTSignalErrorFull() instead")
    void copySnapshotToExistingGameUsingPOSTSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void copySnapshotToExistingGameUsingPOSTSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createQueryUsingPOSTSignalErrorFull() instead")
    void createQueryUsingPOSTSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createQueryUsingPOSTSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createScreenUsingPOSTSignalErrorFull() instead")
    void createScreenUsingPOSTSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createScreenUsingPOSTSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createSnapshotUsingPOSTSignalErrorFull() instead")
    void createSnapshotUsingPOSTSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createSnapshotUsingPOSTSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createSnippetUsingPOSTSignalErrorFull() instead")
    void createSnippetUsingPOSTSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createSnippetUsingPOSTSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteQueryUsingDELETESignalErrorFull() instead")
    void deleteQueryUsingDELETESignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteQueryUsingDELETESignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteScreenUsingDELETESignalErrorFull() instead")
    void deleteScreenUsingDELETESignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteScreenUsingDELETESignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteSnapshotUsingDELETESignalErrorFull() instead")
    void deleteSnapshotUsingDELETESignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSnapshotUsingDELETESignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteSnippetUsingDELETESignalErrorFull() instead")
    void deleteSnippetUsingDELETESignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSnippetUsingDELETESignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getQueryUsingGETSignalErrorFull() instead")
    void getQueryUsingGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getQueryUsingGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getScreenUsingGETSignalErrorFull() instead")
    void getScreenUsingGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getScreenUsingGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSnippetUsingGETSignalErrorFull() instead")
    void getSnippetUsingGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSnippetUsingGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listExecutableScreensUsingGETSignalErrorFull() instead")
    void listExecutableScreensUsingGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listExecutableScreensUsingGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listQueriesUsingGETSignalErrorFull() instead")
    void listQueriesUsingGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listQueriesUsingGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listScreensUsingGETSignalErrorFull() instead")
    void listScreensUsingGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listScreensUsingGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listSnapshotsUsingGETSignalErrorFull() instead")
    void listSnapshotsUsingGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listSnapshotsUsingGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listSnippetsUsingGETSignalErrorFull() instead")
    void listSnippetsUsingGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listSnippetsUsingGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use publishSnapshotUsingPOSTSignalErrorFull() instead")
    void publishSnapshotUsingPOSTSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void publishSnapshotUsingPOSTSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use revertSnapshotUsingPOSTSignalErrorFull() instead")
    void revertSnapshotUsingPOSTSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void revertSnapshotUsingPOSTSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateQueryUsingPUTSignalErrorFull() instead")
    void updateQueryUsingPUTSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateQueryUsingPUTSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateScreenUsingPUTSignalErrorFull() instead")
    void updateScreenUsingPUTSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateScreenUsingPUTSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateSnippetUsingPUTSignalErrorFull() instead")
    void updateSnippetUsingPUTSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateSnippetUsingPUTSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
