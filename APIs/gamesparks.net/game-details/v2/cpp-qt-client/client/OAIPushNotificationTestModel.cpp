/**
 * GameSparks Game Details API
 * The API to manage the GameSparks game details
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPushNotificationTestModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPushNotificationTestModel::OAIPushNotificationTestModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPushNotificationTestModel::OAIPushNotificationTestModel() {
    this->initializeModel();
}

OAIPushNotificationTestModel::~OAIPushNotificationTestModel() {}

void OAIPushNotificationTestModel::initializeModel() {

    m_custom_json_isSet = false;
    m_custom_json_isValid = false;

    m_message_id_isSet = false;
    m_message_id_isValid = false;

    m_push_id_isSet = false;
    m_push_id_isValid = false;

    m_subtitle_isSet = false;
    m_subtitle_isValid = false;

    m_summary_isSet = false;
    m_summary_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;
}

void OAIPushNotificationTestModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPushNotificationTestModel::fromJsonObject(QJsonObject json) {

    m_custom_json_isValid = ::OpenAPI::fromJsonValue(m_custom_json, json[QString("customJson")]);
    m_custom_json_isSet = !json[QString("customJson")].isNull() && m_custom_json_isValid;

    m_message_id_isValid = ::OpenAPI::fromJsonValue(m_message_id, json[QString("messageId")]);
    m_message_id_isSet = !json[QString("messageId")].isNull() && m_message_id_isValid;

    m_push_id_isValid = ::OpenAPI::fromJsonValue(m_push_id, json[QString("pushId")]);
    m_push_id_isSet = !json[QString("pushId")].isNull() && m_push_id_isValid;

    m_subtitle_isValid = ::OpenAPI::fromJsonValue(m_subtitle, json[QString("subtitle")]);
    m_subtitle_isSet = !json[QString("subtitle")].isNull() && m_subtitle_isValid;

    m_summary_isValid = ::OpenAPI::fromJsonValue(m_summary, json[QString("summary")]);
    m_summary_isSet = !json[QString("summary")].isNull() && m_summary_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;
}

QString OAIPushNotificationTestModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPushNotificationTestModel::asJsonObject() const {
    QJsonObject obj;
    if (m_custom_json_isSet) {
        obj.insert(QString("customJson"), ::OpenAPI::toJsonValue(m_custom_json));
    }
    if (m_message_id_isSet) {
        obj.insert(QString("messageId"), ::OpenAPI::toJsonValue(m_message_id));
    }
    if (m_push_id_isSet) {
        obj.insert(QString("pushId"), ::OpenAPI::toJsonValue(m_push_id));
    }
    if (m_subtitle_isSet) {
        obj.insert(QString("subtitle"), ::OpenAPI::toJsonValue(m_subtitle));
    }
    if (m_summary_isSet) {
        obj.insert(QString("summary"), ::OpenAPI::toJsonValue(m_summary));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    return obj;
}

QString OAIPushNotificationTestModel::getCustomJson() const {
    return m_custom_json;
}
void OAIPushNotificationTestModel::setCustomJson(const QString &custom_json) {
    m_custom_json = custom_json;
    m_custom_json_isSet = true;
}

bool OAIPushNotificationTestModel::is_custom_json_Set() const{
    return m_custom_json_isSet;
}

bool OAIPushNotificationTestModel::is_custom_json_Valid() const{
    return m_custom_json_isValid;
}

QString OAIPushNotificationTestModel::getMessageId() const {
    return m_message_id;
}
void OAIPushNotificationTestModel::setMessageId(const QString &message_id) {
    m_message_id = message_id;
    m_message_id_isSet = true;
}

bool OAIPushNotificationTestModel::is_message_id_Set() const{
    return m_message_id_isSet;
}

bool OAIPushNotificationTestModel::is_message_id_Valid() const{
    return m_message_id_isValid;
}

QString OAIPushNotificationTestModel::getPushId() const {
    return m_push_id;
}
void OAIPushNotificationTestModel::setPushId(const QString &push_id) {
    m_push_id = push_id;
    m_push_id_isSet = true;
}

bool OAIPushNotificationTestModel::is_push_id_Set() const{
    return m_push_id_isSet;
}

bool OAIPushNotificationTestModel::is_push_id_Valid() const{
    return m_push_id_isValid;
}

QString OAIPushNotificationTestModel::getSubtitle() const {
    return m_subtitle;
}
void OAIPushNotificationTestModel::setSubtitle(const QString &subtitle) {
    m_subtitle = subtitle;
    m_subtitle_isSet = true;
}

bool OAIPushNotificationTestModel::is_subtitle_Set() const{
    return m_subtitle_isSet;
}

bool OAIPushNotificationTestModel::is_subtitle_Valid() const{
    return m_subtitle_isValid;
}

QString OAIPushNotificationTestModel::getSummary() const {
    return m_summary;
}
void OAIPushNotificationTestModel::setSummary(const QString &summary) {
    m_summary = summary;
    m_summary_isSet = true;
}

bool OAIPushNotificationTestModel::is_summary_Set() const{
    return m_summary_isSet;
}

bool OAIPushNotificationTestModel::is_summary_Valid() const{
    return m_summary_isValid;
}

QString OAIPushNotificationTestModel::getTitle() const {
    return m_title;
}
void OAIPushNotificationTestModel::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIPushNotificationTestModel::is_title_Set() const{
    return m_title_isSet;
}

bool OAIPushNotificationTestModel::is_title_Valid() const{
    return m_title_isValid;
}

bool OAIPushNotificationTestModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_custom_json_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_push_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subtitle_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_summary_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPushNotificationTestModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
