/**
 * GameSparks Game Details API
 * The API to manage the GameSparks game details
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISegmentQueryFilterModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISegmentQueryFilterModel::OAISegmentQueryFilterModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISegmentQueryFilterModel::OAISegmentQueryFilterModel() {
    this->initializeModel();
}

OAISegmentQueryFilterModel::~OAISegmentQueryFilterModel() {}

void OAISegmentQueryFilterModel::initializeModel() {

    m_key_isSet = false;
    m_key_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_options_isSet = false;
    m_options_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAISegmentQueryFilterModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISegmentQueryFilterModel::fromJsonObject(QJsonObject json) {

    m_key_isValid = ::OpenAPI::fromJsonValue(m_key, json[QString("key")]);
    m_key_isSet = !json[QString("key")].isNull() && m_key_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_options_isValid = ::OpenAPI::fromJsonValue(m_options, json[QString("options")]);
    m_options_isSet = !json[QString("options")].isNull() && m_options_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAISegmentQueryFilterModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISegmentQueryFilterModel::asJsonObject() const {
    QJsonObject obj;
    if (m_key_isSet) {
        obj.insert(QString("key"), ::OpenAPI::toJsonValue(m_key));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_options.size() > 0) {
        obj.insert(QString("options"), ::OpenAPI::toJsonValue(m_options));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAISegmentQueryFilterModel::getKey() const {
    return m_key;
}
void OAISegmentQueryFilterModel::setKey(const QString &key) {
    m_key = key;
    m_key_isSet = true;
}

bool OAISegmentQueryFilterModel::is_key_Set() const{
    return m_key_isSet;
}

bool OAISegmentQueryFilterModel::is_key_Valid() const{
    return m_key_isValid;
}

QString OAISegmentQueryFilterModel::getName() const {
    return m_name;
}
void OAISegmentQueryFilterModel::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAISegmentQueryFilterModel::is_name_Set() const{
    return m_name_isSet;
}

bool OAISegmentQueryFilterModel::is_name_Valid() const{
    return m_name_isValid;
}

QList<OAIObject> OAISegmentQueryFilterModel::getOptions() const {
    return m_options;
}
void OAISegmentQueryFilterModel::setOptions(const QList<OAIObject> &options) {
    m_options = options;
    m_options_isSet = true;
}

bool OAISegmentQueryFilterModel::is_options_Set() const{
    return m_options_isSet;
}

bool OAISegmentQueryFilterModel::is_options_Valid() const{
    return m_options_isValid;
}

QString OAISegmentQueryFilterModel::getType() const {
    return m_type;
}
void OAISegmentQueryFilterModel::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAISegmentQueryFilterModel::is_type_Set() const{
    return m_type_isSet;
}

bool OAISegmentQueryFilterModel::is_type_Valid() const{
    return m_type_isValid;
}

bool OAISegmentQueryFilterModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_options.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISegmentQueryFilterModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
