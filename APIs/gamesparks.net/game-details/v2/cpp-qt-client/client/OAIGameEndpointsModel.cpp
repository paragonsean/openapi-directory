/**
 * GameSparks Game Details API
 * The API to manage the GameSparks game details
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGameEndpointsModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGameEndpointsModel::OAIGameEndpointsModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGameEndpointsModel::OAIGameEndpointsModel() {
    this->initializeModel();
}

OAIGameEndpointsModel::~OAIGameEndpointsModel() {}

void OAIGameEndpointsModel::initializeModel() {

    m_live_elastic_search_isSet = false;
    m_live_elastic_search_isValid = false;

    m_live_nosql_isSet = false;
    m_live_nosql_isValid = false;

    m_preview_elastic_search_isSet = false;
    m_preview_elastic_search_isValid = false;

    m_preview_nosql_isSet = false;
    m_preview_nosql_isValid = false;
}

void OAIGameEndpointsModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGameEndpointsModel::fromJsonObject(QJsonObject json) {

    m_live_elastic_search_isValid = ::OpenAPI::fromJsonValue(m_live_elastic_search, json[QString("liveElasticSearch")]);
    m_live_elastic_search_isSet = !json[QString("liveElasticSearch")].isNull() && m_live_elastic_search_isValid;

    m_live_nosql_isValid = ::OpenAPI::fromJsonValue(m_live_nosql, json[QString("liveNosql")]);
    m_live_nosql_isSet = !json[QString("liveNosql")].isNull() && m_live_nosql_isValid;

    m_preview_elastic_search_isValid = ::OpenAPI::fromJsonValue(m_preview_elastic_search, json[QString("previewElasticSearch")]);
    m_preview_elastic_search_isSet = !json[QString("previewElasticSearch")].isNull() && m_preview_elastic_search_isValid;

    m_preview_nosql_isValid = ::OpenAPI::fromJsonValue(m_preview_nosql, json[QString("previewNosql")]);
    m_preview_nosql_isSet = !json[QString("previewNosql")].isNull() && m_preview_nosql_isValid;
}

QString OAIGameEndpointsModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGameEndpointsModel::asJsonObject() const {
    QJsonObject obj;
    if (m_live_elastic_search_isSet) {
        obj.insert(QString("liveElasticSearch"), ::OpenAPI::toJsonValue(m_live_elastic_search));
    }
    if (m_live_nosql_isSet) {
        obj.insert(QString("liveNosql"), ::OpenAPI::toJsonValue(m_live_nosql));
    }
    if (m_preview_elastic_search_isSet) {
        obj.insert(QString("previewElasticSearch"), ::OpenAPI::toJsonValue(m_preview_elastic_search));
    }
    if (m_preview_nosql_isSet) {
        obj.insert(QString("previewNosql"), ::OpenAPI::toJsonValue(m_preview_nosql));
    }
    return obj;
}

QString OAIGameEndpointsModel::getLiveElasticSearch() const {
    return m_live_elastic_search;
}
void OAIGameEndpointsModel::setLiveElasticSearch(const QString &live_elastic_search) {
    m_live_elastic_search = live_elastic_search;
    m_live_elastic_search_isSet = true;
}

bool OAIGameEndpointsModel::is_live_elastic_search_Set() const{
    return m_live_elastic_search_isSet;
}

bool OAIGameEndpointsModel::is_live_elastic_search_Valid() const{
    return m_live_elastic_search_isValid;
}

QString OAIGameEndpointsModel::getLiveNosql() const {
    return m_live_nosql;
}
void OAIGameEndpointsModel::setLiveNosql(const QString &live_nosql) {
    m_live_nosql = live_nosql;
    m_live_nosql_isSet = true;
}

bool OAIGameEndpointsModel::is_live_nosql_Set() const{
    return m_live_nosql_isSet;
}

bool OAIGameEndpointsModel::is_live_nosql_Valid() const{
    return m_live_nosql_isValid;
}

QString OAIGameEndpointsModel::getPreviewElasticSearch() const {
    return m_preview_elastic_search;
}
void OAIGameEndpointsModel::setPreviewElasticSearch(const QString &preview_elastic_search) {
    m_preview_elastic_search = preview_elastic_search;
    m_preview_elastic_search_isSet = true;
}

bool OAIGameEndpointsModel::is_preview_elastic_search_Set() const{
    return m_preview_elastic_search_isSet;
}

bool OAIGameEndpointsModel::is_preview_elastic_search_Valid() const{
    return m_preview_elastic_search_isValid;
}

QString OAIGameEndpointsModel::getPreviewNosql() const {
    return m_preview_nosql;
}
void OAIGameEndpointsModel::setPreviewNosql(const QString &preview_nosql) {
    m_preview_nosql = preview_nosql;
    m_preview_nosql_isSet = true;
}

bool OAIGameEndpointsModel::is_preview_nosql_Set() const{
    return m_preview_nosql_isSet;
}

bool OAIGameEndpointsModel::is_preview_nosql_Valid() const{
    return m_preview_nosql_isValid;
}

bool OAIGameEndpointsModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_live_elastic_search_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_live_nosql_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_preview_elastic_search_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_preview_nosql_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGameEndpointsModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
