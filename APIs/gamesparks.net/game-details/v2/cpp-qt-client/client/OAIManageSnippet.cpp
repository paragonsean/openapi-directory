/**
 * GameSparks Game Details API
 * The API to manage the GameSparks game details
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIManageSnippet.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIManageSnippet::OAIManageSnippet(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIManageSnippet::OAIManageSnippet() {
    this->initializeModel();
}

OAIManageSnippet::~OAIManageSnippet() {}

void OAIManageSnippet::initializeModel() {

    m_groups_isSet = false;
    m_groups_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_script_isSet = false;
    m_script_isValid = false;

    m_script_data_isSet = false;
    m_script_data_isValid = false;

    m_short_code_isSet = false;
    m_short_code_isValid = false;

    m_r_template_isSet = false;
    m_r_template_isValid = false;
}

void OAIManageSnippet::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIManageSnippet::fromJsonObject(QJsonObject json) {

    m_groups_isValid = ::OpenAPI::fromJsonValue(m_groups, json[QString("groups")]);
    m_groups_isSet = !json[QString("groups")].isNull() && m_groups_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_script_isValid = ::OpenAPI::fromJsonValue(m_script, json[QString("script")]);
    m_script_isSet = !json[QString("script")].isNull() && m_script_isValid;

    m_script_data_isValid = ::OpenAPI::fromJsonValue(m_script_data, json[QString("scriptData")]);
    m_script_data_isSet = !json[QString("scriptData")].isNull() && m_script_data_isValid;

    m_short_code_isValid = ::OpenAPI::fromJsonValue(m_short_code, json[QString("shortCode")]);
    m_short_code_isSet = !json[QString("shortCode")].isNull() && m_short_code_isValid;

    m_r_template_isValid = ::OpenAPI::fromJsonValue(m_r_template, json[QString("template")]);
    m_r_template_isSet = !json[QString("template")].isNull() && m_r_template_isValid;
}

QString OAIManageSnippet::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIManageSnippet::asJsonObject() const {
    QJsonObject obj;
    if (m_groups.size() > 0) {
        obj.insert(QString("groups"), ::OpenAPI::toJsonValue(m_groups));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_script_isSet) {
        obj.insert(QString("script"), ::OpenAPI::toJsonValue(m_script));
    }
    if (m_script_data_isSet) {
        obj.insert(QString("scriptData"), ::OpenAPI::toJsonValue(m_script_data));
    }
    if (m_short_code_isSet) {
        obj.insert(QString("shortCode"), ::OpenAPI::toJsonValue(m_short_code));
    }
    if (m_r_template_isSet) {
        obj.insert(QString("template"), ::OpenAPI::toJsonValue(m_r_template));
    }
    return obj;
}

QList<QString> OAIManageSnippet::getGroups() const {
    return m_groups;
}
void OAIManageSnippet::setGroups(const QList<QString> &groups) {
    m_groups = groups;
    m_groups_isSet = true;
}

bool OAIManageSnippet::is_groups_Set() const{
    return m_groups_isSet;
}

bool OAIManageSnippet::is_groups_Valid() const{
    return m_groups_isValid;
}

QString OAIManageSnippet::getName() const {
    return m_name;
}
void OAIManageSnippet::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIManageSnippet::is_name_Set() const{
    return m_name_isSet;
}

bool OAIManageSnippet::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIManageSnippet::getScript() const {
    return m_script;
}
void OAIManageSnippet::setScript(const QString &script) {
    m_script = script;
    m_script_isSet = true;
}

bool OAIManageSnippet::is_script_Set() const{
    return m_script_isSet;
}

bool OAIManageSnippet::is_script_Valid() const{
    return m_script_isValid;
}

QString OAIManageSnippet::getScriptData() const {
    return m_script_data;
}
void OAIManageSnippet::setScriptData(const QString &script_data) {
    m_script_data = script_data;
    m_script_data_isSet = true;
}

bool OAIManageSnippet::is_script_data_Set() const{
    return m_script_data_isSet;
}

bool OAIManageSnippet::is_script_data_Valid() const{
    return m_script_data_isValid;
}

QString OAIManageSnippet::getShortCode() const {
    return m_short_code;
}
void OAIManageSnippet::setShortCode(const QString &short_code) {
    m_short_code = short_code;
    m_short_code_isSet = true;
}

bool OAIManageSnippet::is_short_code_Set() const{
    return m_short_code_isSet;
}

bool OAIManageSnippet::is_short_code_Valid() const{
    return m_short_code_isValid;
}

QString OAIManageSnippet::getRTemplate() const {
    return m_r_template;
}
void OAIManageSnippet::setRTemplate(const QString &r_template) {
    m_r_template = r_template;
    m_r_template_isSet = true;
}

bool OAIManageSnippet::is_r_template_Set() const{
    return m_r_template_isSet;
}

bool OAIManageSnippet::is_r_template_Valid() const{
    return m_r_template_isValid;
}

bool OAIManageSnippet::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_groups.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_script_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_script_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_short_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_template_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIManageSnippet::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
