/**
 * GameSparks Game Details API
 * The API to manage the GameSparks game details
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIPushNotificationTestApi_H
#define OAI_OAIPushNotificationTestApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIMessageModel.h"
#include "OAIPushNotificationTestModel.h"
#include "OAIPushNotificationTestSummaryListModel.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIPushNotificationTestApi : public QObject {
    Q_OBJECT

public:
    OAIPushNotificationTestApi(const int timeOut = 0);
    ~OAIPushNotificationTestApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  oai_push_notification_test_model OAIPushNotificationTestModel [required]
    */
    virtual void testPushAmazonNotificationsUsingPOST(const QString &api_key, const OAIPushNotificationTestModel &oai_push_notification_test_model);

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  oai_push_notification_test_model OAIPushNotificationTestModel [required]
    */
    virtual void testPushAppleDevNotificationsUsingPOST(const QString &api_key, const OAIPushNotificationTestModel &oai_push_notification_test_model);

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  oai_push_notification_test_model OAIPushNotificationTestModel [required]
    */
    virtual void testPushAppleProdNotificationsUsingPOST(const QString &api_key, const OAIPushNotificationTestModel &oai_push_notification_test_model);

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  oai_push_notification_test_model OAIPushNotificationTestModel [required]
    */
    virtual void testPushGoogleNotificationsUsingPOST(const QString &api_key, const OAIPushNotificationTestModel &oai_push_notification_test_model);

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  oai_push_notification_test_model OAIPushNotificationTestModel [required]
    */
    virtual void testViberIntegrationNotificationsUsingPOST(const QString &api_key, const OAIPushNotificationTestModel &oai_push_notification_test_model);

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  oai_push_notification_test_model OAIPushNotificationTestModel [required]
    */
    virtual void testViberProductionNotificationsUsingPOST(const QString &api_key, const OAIPushNotificationTestModel &oai_push_notification_test_model);

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  oai_push_notification_test_model OAIPushNotificationTestModel [required]
    */
    virtual void testWindows8NotificationsUsingPOST(const QString &api_key, const OAIPushNotificationTestModel &oai_push_notification_test_model);

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  oai_push_notification_test_model OAIPushNotificationTestModel [required]
    */
    virtual void testWindowsPhone8NotificationsUsingPOST(const QString &api_key, const OAIPushNotificationTestModel &oai_push_notification_test_model);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void testPushAmazonNotificationsUsingPOSTCallback(OAIHttpRequestWorker *worker);
    void testPushAppleDevNotificationsUsingPOSTCallback(OAIHttpRequestWorker *worker);
    void testPushAppleProdNotificationsUsingPOSTCallback(OAIHttpRequestWorker *worker);
    void testPushGoogleNotificationsUsingPOSTCallback(OAIHttpRequestWorker *worker);
    void testViberIntegrationNotificationsUsingPOSTCallback(OAIHttpRequestWorker *worker);
    void testViberProductionNotificationsUsingPOSTCallback(OAIHttpRequestWorker *worker);
    void testWindows8NotificationsUsingPOSTCallback(OAIHttpRequestWorker *worker);
    void testWindowsPhone8NotificationsUsingPOSTCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void testPushAmazonNotificationsUsingPOSTSignal(OAIPushNotificationTestSummaryListModel summary);
    void testPushAppleDevNotificationsUsingPOSTSignal(OAIPushNotificationTestSummaryListModel summary);
    void testPushAppleProdNotificationsUsingPOSTSignal(OAIPushNotificationTestSummaryListModel summary);
    void testPushGoogleNotificationsUsingPOSTSignal(OAIPushNotificationTestSummaryListModel summary);
    void testViberIntegrationNotificationsUsingPOSTSignal(OAIPushNotificationTestSummaryListModel summary);
    void testViberProductionNotificationsUsingPOSTSignal(OAIPushNotificationTestSummaryListModel summary);
    void testWindows8NotificationsUsingPOSTSignal(OAIPushNotificationTestSummaryListModel summary);
    void testWindowsPhone8NotificationsUsingPOSTSignal(OAIPushNotificationTestSummaryListModel summary);


    void testPushAmazonNotificationsUsingPOSTSignalFull(OAIHttpRequestWorker *worker, OAIPushNotificationTestSummaryListModel summary);
    void testPushAppleDevNotificationsUsingPOSTSignalFull(OAIHttpRequestWorker *worker, OAIPushNotificationTestSummaryListModel summary);
    void testPushAppleProdNotificationsUsingPOSTSignalFull(OAIHttpRequestWorker *worker, OAIPushNotificationTestSummaryListModel summary);
    void testPushGoogleNotificationsUsingPOSTSignalFull(OAIHttpRequestWorker *worker, OAIPushNotificationTestSummaryListModel summary);
    void testViberIntegrationNotificationsUsingPOSTSignalFull(OAIHttpRequestWorker *worker, OAIPushNotificationTestSummaryListModel summary);
    void testViberProductionNotificationsUsingPOSTSignalFull(OAIHttpRequestWorker *worker, OAIPushNotificationTestSummaryListModel summary);
    void testWindows8NotificationsUsingPOSTSignalFull(OAIHttpRequestWorker *worker, OAIPushNotificationTestSummaryListModel summary);
    void testWindowsPhone8NotificationsUsingPOSTSignalFull(OAIHttpRequestWorker *worker, OAIPushNotificationTestSummaryListModel summary);

    Q_DECL_DEPRECATED_X("Use testPushAmazonNotificationsUsingPOSTSignalError() instead")
    void testPushAmazonNotificationsUsingPOSTSignalE(OAIPushNotificationTestSummaryListModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void testPushAmazonNotificationsUsingPOSTSignalError(OAIPushNotificationTestSummaryListModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use testPushAppleDevNotificationsUsingPOSTSignalError() instead")
    void testPushAppleDevNotificationsUsingPOSTSignalE(OAIPushNotificationTestSummaryListModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void testPushAppleDevNotificationsUsingPOSTSignalError(OAIPushNotificationTestSummaryListModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use testPushAppleProdNotificationsUsingPOSTSignalError() instead")
    void testPushAppleProdNotificationsUsingPOSTSignalE(OAIPushNotificationTestSummaryListModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void testPushAppleProdNotificationsUsingPOSTSignalError(OAIPushNotificationTestSummaryListModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use testPushGoogleNotificationsUsingPOSTSignalError() instead")
    void testPushGoogleNotificationsUsingPOSTSignalE(OAIPushNotificationTestSummaryListModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void testPushGoogleNotificationsUsingPOSTSignalError(OAIPushNotificationTestSummaryListModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use testViberIntegrationNotificationsUsingPOSTSignalError() instead")
    void testViberIntegrationNotificationsUsingPOSTSignalE(OAIPushNotificationTestSummaryListModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void testViberIntegrationNotificationsUsingPOSTSignalError(OAIPushNotificationTestSummaryListModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use testViberProductionNotificationsUsingPOSTSignalError() instead")
    void testViberProductionNotificationsUsingPOSTSignalE(OAIPushNotificationTestSummaryListModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void testViberProductionNotificationsUsingPOSTSignalError(OAIPushNotificationTestSummaryListModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use testWindows8NotificationsUsingPOSTSignalError() instead")
    void testWindows8NotificationsUsingPOSTSignalE(OAIPushNotificationTestSummaryListModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void testWindows8NotificationsUsingPOSTSignalError(OAIPushNotificationTestSummaryListModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use testWindowsPhone8NotificationsUsingPOSTSignalError() instead")
    void testWindowsPhone8NotificationsUsingPOSTSignalE(OAIPushNotificationTestSummaryListModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void testWindowsPhone8NotificationsUsingPOSTSignalError(OAIPushNotificationTestSummaryListModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use testPushAmazonNotificationsUsingPOSTSignalErrorFull() instead")
    void testPushAmazonNotificationsUsingPOSTSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void testPushAmazonNotificationsUsingPOSTSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use testPushAppleDevNotificationsUsingPOSTSignalErrorFull() instead")
    void testPushAppleDevNotificationsUsingPOSTSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void testPushAppleDevNotificationsUsingPOSTSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use testPushAppleProdNotificationsUsingPOSTSignalErrorFull() instead")
    void testPushAppleProdNotificationsUsingPOSTSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void testPushAppleProdNotificationsUsingPOSTSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use testPushGoogleNotificationsUsingPOSTSignalErrorFull() instead")
    void testPushGoogleNotificationsUsingPOSTSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void testPushGoogleNotificationsUsingPOSTSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use testViberIntegrationNotificationsUsingPOSTSignalErrorFull() instead")
    void testViberIntegrationNotificationsUsingPOSTSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void testViberIntegrationNotificationsUsingPOSTSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use testViberProductionNotificationsUsingPOSTSignalErrorFull() instead")
    void testViberProductionNotificationsUsingPOSTSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void testViberProductionNotificationsUsingPOSTSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use testWindows8NotificationsUsingPOSTSignalErrorFull() instead")
    void testWindows8NotificationsUsingPOSTSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void testWindows8NotificationsUsingPOSTSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use testWindowsPhone8NotificationsUsingPOSTSignalErrorFull() instead")
    void testWindowsPhone8NotificationsUsingPOSTSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void testWindowsPhone8NotificationsUsingPOSTSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
