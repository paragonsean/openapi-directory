/**
 * GameSparks Game Details API
 * The API to manage the GameSparks game details
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExperimentModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExperimentModel::OAIExperimentModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExperimentModel::OAIExperimentModel() {
    this->initializeModel();
}

OAIExperimentModel::~OAIExperimentModel() {}

void OAIExperimentModel::initializeModel() {

    m_active_isSet = false;
    m_active_isValid = false;

    m_changed_fields_and_initial_values_isSet = false;
    m_changed_fields_and_initial_values_isValid = false;

    m_complete_isSet = false;
    m_complete_isValid = false;

    m_config_isSet = false;
    m_config_isValid = false;

    m_end_date_isSet = false;
    m_end_date_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_measurements_isSet = false;
    m_measurements_isValid = false;

    m_measurements_es_query_isSet = false;
    m_measurements_es_query_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_percent_hash_isSet = false;
    m_percent_hash_isValid = false;

    m_published_stages_isSet = false;
    m_published_stages_isValid = false;

    m_start_date_isSet = false;
    m_start_date_isValid = false;
}

void OAIExperimentModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExperimentModel::fromJsonObject(QJsonObject json) {

    m_active_isValid = ::OpenAPI::fromJsonValue(m_active, json[QString("active")]);
    m_active_isSet = !json[QString("active")].isNull() && m_active_isValid;

    m_changed_fields_and_initial_values_isValid = ::OpenAPI::fromJsonValue(m_changed_fields_and_initial_values, json[QString("changedFieldsAndInitialValues")]);
    m_changed_fields_and_initial_values_isSet = !json[QString("changedFieldsAndInitialValues")].isNull() && m_changed_fields_and_initial_values_isValid;

    m_complete_isValid = ::OpenAPI::fromJsonValue(m_complete, json[QString("complete")]);
    m_complete_isSet = !json[QString("complete")].isNull() && m_complete_isValid;

    m_config_isValid = ::OpenAPI::fromJsonValue(m_config, json[QString("config")]);
    m_config_isSet = !json[QString("config")].isNull() && m_config_isValid;

    m_end_date_isValid = ::OpenAPI::fromJsonValue(m_end_date, json[QString("endDate")]);
    m_end_date_isSet = !json[QString("endDate")].isNull() && m_end_date_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_measurements_isValid = ::OpenAPI::fromJsonValue(m_measurements, json[QString("measurements")]);
    m_measurements_isSet = !json[QString("measurements")].isNull() && m_measurements_isValid;

    m_measurements_es_query_isValid = ::OpenAPI::fromJsonValue(m_measurements_es_query, json[QString("measurementsEsQuery")]);
    m_measurements_es_query_isSet = !json[QString("measurementsEsQuery")].isNull() && m_measurements_es_query_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_percent_hash_isValid = ::OpenAPI::fromJsonValue(m_percent_hash, json[QString("percentHash")]);
    m_percent_hash_isSet = !json[QString("percentHash")].isNull() && m_percent_hash_isValid;

    m_published_stages_isValid = ::OpenAPI::fromJsonValue(m_published_stages, json[QString("publishedStages")]);
    m_published_stages_isSet = !json[QString("publishedStages")].isNull() && m_published_stages_isValid;

    m_start_date_isValid = ::OpenAPI::fromJsonValue(m_start_date, json[QString("startDate")]);
    m_start_date_isSet = !json[QString("startDate")].isNull() && m_start_date_isValid;
}

QString OAIExperimentModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExperimentModel::asJsonObject() const {
    QJsonObject obj;
    if (m_active_isSet) {
        obj.insert(QString("active"), ::OpenAPI::toJsonValue(m_active));
    }
    if (m_changed_fields_and_initial_values_isSet) {
        obj.insert(QString("changedFieldsAndInitialValues"), ::OpenAPI::toJsonValue(m_changed_fields_and_initial_values));
    }
    if (m_complete_isSet) {
        obj.insert(QString("complete"), ::OpenAPI::toJsonValue(m_complete));
    }
    if (m_config.isSet()) {
        obj.insert(QString("config"), ::OpenAPI::toJsonValue(m_config));
    }
    if (m_end_date_isSet) {
        obj.insert(QString("endDate"), ::OpenAPI::toJsonValue(m_end_date));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_measurements_isSet) {
        obj.insert(QString("measurements"), ::OpenAPI::toJsonValue(m_measurements));
    }
    if (m_measurements_es_query_isSet) {
        obj.insert(QString("measurementsEsQuery"), ::OpenAPI::toJsonValue(m_measurements_es_query));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_percent_hash_isSet) {
        obj.insert(QString("percentHash"), ::OpenAPI::toJsonValue(m_percent_hash));
    }
    if (m_published_stages.size() > 0) {
        obj.insert(QString("publishedStages"), ::OpenAPI::toJsonValue(m_published_stages));
    }
    if (m_start_date_isSet) {
        obj.insert(QString("startDate"), ::OpenAPI::toJsonValue(m_start_date));
    }
    return obj;
}

bool OAIExperimentModel::isActive() const {
    return m_active;
}
void OAIExperimentModel::setActive(const bool &active) {
    m_active = active;
    m_active_isSet = true;
}

bool OAIExperimentModel::is_active_Set() const{
    return m_active_isSet;
}

bool OAIExperimentModel::is_active_Valid() const{
    return m_active_isValid;
}

OAIObject OAIExperimentModel::getChangedFieldsAndInitialValues() const {
    return m_changed_fields_and_initial_values;
}
void OAIExperimentModel::setChangedFieldsAndInitialValues(const OAIObject &changed_fields_and_initial_values) {
    m_changed_fields_and_initial_values = changed_fields_and_initial_values;
    m_changed_fields_and_initial_values_isSet = true;
}

bool OAIExperimentModel::is_changed_fields_and_initial_values_Set() const{
    return m_changed_fields_and_initial_values_isSet;
}

bool OAIExperimentModel::is_changed_fields_and_initial_values_Valid() const{
    return m_changed_fields_and_initial_values_isValid;
}

bool OAIExperimentModel::isComplete() const {
    return m_complete;
}
void OAIExperimentModel::setComplete(const bool &complete) {
    m_complete = complete;
    m_complete_isSet = true;
}

bool OAIExperimentModel::is_complete_Set() const{
    return m_complete_isSet;
}

bool OAIExperimentModel::is_complete_Valid() const{
    return m_complete_isValid;
}

OAIExperimentConfigModel OAIExperimentModel::getConfig() const {
    return m_config;
}
void OAIExperimentModel::setConfig(const OAIExperimentConfigModel &config) {
    m_config = config;
    m_config_isSet = true;
}

bool OAIExperimentModel::is_config_Set() const{
    return m_config_isSet;
}

bool OAIExperimentModel::is_config_Valid() const{
    return m_config_isValid;
}

QDateTime OAIExperimentModel::getEndDate() const {
    return m_end_date;
}
void OAIExperimentModel::setEndDate(const QDateTime &end_date) {
    m_end_date = end_date;
    m_end_date_isSet = true;
}

bool OAIExperimentModel::is_end_date_Set() const{
    return m_end_date_isSet;
}

bool OAIExperimentModel::is_end_date_Valid() const{
    return m_end_date_isValid;
}

qint64 OAIExperimentModel::getId() const {
    return m_id;
}
void OAIExperimentModel::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIExperimentModel::is_id_Set() const{
    return m_id_isSet;
}

bool OAIExperimentModel::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIExperimentModel::getMeasurements() const {
    return m_measurements;
}
void OAIExperimentModel::setMeasurements(const QString &measurements) {
    m_measurements = measurements;
    m_measurements_isSet = true;
}

bool OAIExperimentModel::is_measurements_Set() const{
    return m_measurements_isSet;
}

bool OAIExperimentModel::is_measurements_Valid() const{
    return m_measurements_isValid;
}

QString OAIExperimentModel::getMeasurementsEsQuery() const {
    return m_measurements_es_query;
}
void OAIExperimentModel::setMeasurementsEsQuery(const QString &measurements_es_query) {
    m_measurements_es_query = measurements_es_query;
    m_measurements_es_query_isSet = true;
}

bool OAIExperimentModel::is_measurements_es_query_Set() const{
    return m_measurements_es_query_isSet;
}

bool OAIExperimentModel::is_measurements_es_query_Valid() const{
    return m_measurements_es_query_isValid;
}

QString OAIExperimentModel::getName() const {
    return m_name;
}
void OAIExperimentModel::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIExperimentModel::is_name_Set() const{
    return m_name_isSet;
}

bool OAIExperimentModel::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIExperimentModel::getPercentHash() const {
    return m_percent_hash;
}
void OAIExperimentModel::setPercentHash(const QString &percent_hash) {
    m_percent_hash = percent_hash;
    m_percent_hash_isSet = true;
}

bool OAIExperimentModel::is_percent_hash_Set() const{
    return m_percent_hash_isSet;
}

bool OAIExperimentModel::is_percent_hash_Valid() const{
    return m_percent_hash_isValid;
}

QList<QString> OAIExperimentModel::getPublishedStages() const {
    return m_published_stages;
}
void OAIExperimentModel::setPublishedStages(const QList<QString> &published_stages) {
    m_published_stages = published_stages;
    m_published_stages_isSet = true;
}

bool OAIExperimentModel::is_published_stages_Set() const{
    return m_published_stages_isSet;
}

bool OAIExperimentModel::is_published_stages_Valid() const{
    return m_published_stages_isValid;
}

QDateTime OAIExperimentModel::getStartDate() const {
    return m_start_date;
}
void OAIExperimentModel::setStartDate(const QDateTime &start_date) {
    m_start_date = start_date;
    m_start_date_isSet = true;
}

bool OAIExperimentModel::is_start_date_Set() const{
    return m_start_date_isSet;
}

bool OAIExperimentModel::is_start_date_Valid() const{
    return m_start_date_isValid;
}

bool OAIExperimentModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_active_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_changed_fields_and_initial_values_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_complete_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_measurements_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_measurements_es_query_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_percent_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_published_stages.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExperimentModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
