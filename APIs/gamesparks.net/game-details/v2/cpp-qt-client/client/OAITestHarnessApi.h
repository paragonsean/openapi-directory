/**
 * GameSparks Game Details API
 * The API to manage the GameSparks game details
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAITestHarnessApi_H
#define OAI_OAITestHarnessApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIMessageModel.h"
#include "OAITestHarnessScenarioModel.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAITestHarnessApi : public QObject {
    Q_OBJECT

public:
    OAITestHarnessApi(const int timeOut = 0);
    ~OAITestHarnessApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  oai_test_harness_scenario_model OAITestHarnessScenarioModel [required]
    */
    virtual void createTestHarnessScenarioUsingPOST(const QString &api_key, const OAITestHarnessScenarioModel &oai_test_harness_scenario_model);

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  scenario_name QString [required]
    */
    virtual void deleteTestHarnessScenarioUsingDELETE(const QString &api_key, const QString &scenario_name);

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  scenario_name QString [required]
    */
    virtual void getTestHarnessScenarioUsingGET(const QString &api_key, const QString &scenario_name);

    /**
    * @param[in]  api_key QString [required]
    */
    virtual void getTestHarnessScenariosUsingGET(const QString &api_key);

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  scenario_name QString [required]
    * @param[in]  oai_test_harness_scenario_model OAITestHarnessScenarioModel [required]
    */
    virtual void updateTestHarnessScenarioUsingPUT(const QString &api_key, const QString &scenario_name, const OAITestHarnessScenarioModel &oai_test_harness_scenario_model);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createTestHarnessScenarioUsingPOSTCallback(OAIHttpRequestWorker *worker);
    void deleteTestHarnessScenarioUsingDELETECallback(OAIHttpRequestWorker *worker);
    void getTestHarnessScenarioUsingGETCallback(OAIHttpRequestWorker *worker);
    void getTestHarnessScenariosUsingGETCallback(OAIHttpRequestWorker *worker);
    void updateTestHarnessScenarioUsingPUTCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createTestHarnessScenarioUsingPOSTSignal(OAITestHarnessScenarioModel summary);
    void deleteTestHarnessScenarioUsingDELETESignal(OAIMessageModel summary);
    void getTestHarnessScenarioUsingGETSignal(OAITestHarnessScenarioModel summary);
    void getTestHarnessScenariosUsingGETSignal(QList<OAITestHarnessScenarioModel> summary);
    void updateTestHarnessScenarioUsingPUTSignal(OAITestHarnessScenarioModel summary);


    void createTestHarnessScenarioUsingPOSTSignalFull(OAIHttpRequestWorker *worker, OAITestHarnessScenarioModel summary);
    void deleteTestHarnessScenarioUsingDELETESignalFull(OAIHttpRequestWorker *worker, OAIMessageModel summary);
    void getTestHarnessScenarioUsingGETSignalFull(OAIHttpRequestWorker *worker, OAITestHarnessScenarioModel summary);
    void getTestHarnessScenariosUsingGETSignalFull(OAIHttpRequestWorker *worker, QList<OAITestHarnessScenarioModel> summary);
    void updateTestHarnessScenarioUsingPUTSignalFull(OAIHttpRequestWorker *worker, OAITestHarnessScenarioModel summary);

    Q_DECL_DEPRECATED_X("Use createTestHarnessScenarioUsingPOSTSignalError() instead")
    void createTestHarnessScenarioUsingPOSTSignalE(OAITestHarnessScenarioModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createTestHarnessScenarioUsingPOSTSignalError(OAITestHarnessScenarioModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteTestHarnessScenarioUsingDELETESignalError() instead")
    void deleteTestHarnessScenarioUsingDELETESignalE(OAIMessageModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteTestHarnessScenarioUsingDELETESignalError(OAIMessageModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTestHarnessScenarioUsingGETSignalError() instead")
    void getTestHarnessScenarioUsingGETSignalE(OAITestHarnessScenarioModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTestHarnessScenarioUsingGETSignalError(OAITestHarnessScenarioModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTestHarnessScenariosUsingGETSignalError() instead")
    void getTestHarnessScenariosUsingGETSignalE(QList<OAITestHarnessScenarioModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTestHarnessScenariosUsingGETSignalError(QList<OAITestHarnessScenarioModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateTestHarnessScenarioUsingPUTSignalError() instead")
    void updateTestHarnessScenarioUsingPUTSignalE(OAITestHarnessScenarioModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateTestHarnessScenarioUsingPUTSignalError(OAITestHarnessScenarioModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createTestHarnessScenarioUsingPOSTSignalErrorFull() instead")
    void createTestHarnessScenarioUsingPOSTSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createTestHarnessScenarioUsingPOSTSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteTestHarnessScenarioUsingDELETESignalErrorFull() instead")
    void deleteTestHarnessScenarioUsingDELETESignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteTestHarnessScenarioUsingDELETESignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTestHarnessScenarioUsingGETSignalErrorFull() instead")
    void getTestHarnessScenarioUsingGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTestHarnessScenarioUsingGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTestHarnessScenariosUsingGETSignalErrorFull() instead")
    void getTestHarnessScenariosUsingGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTestHarnessScenariosUsingGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateTestHarnessScenarioUsingPUTSignalErrorFull() instead")
    void updateTestHarnessScenarioUsingPUTSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateTestHarnessScenarioUsingPUTSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
