/**
 * GameSparks Game Details API
 * The API to manage the GameSparks game details
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPushNotificationTestSummaryModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPushNotificationTestSummaryModel::OAIPushNotificationTestSummaryModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPushNotificationTestSummaryModel::OAIPushNotificationTestSummaryModel() {
    this->initializeModel();
}

OAIPushNotificationTestSummaryModel::~OAIPushNotificationTestSummaryModel() {}

void OAIPushNotificationTestSummaryModel::initializeModel() {

    m_error_isSet = false;
    m_error_isValid = false;

    m_outgoing_message_parts_isSet = false;
    m_outgoing_message_parts_isValid = false;

    m_result_parts_isSet = false;
    m_result_parts_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;
}

void OAIPushNotificationTestSummaryModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPushNotificationTestSummaryModel::fromJsonObject(QJsonObject json) {

    m_error_isValid = ::OpenAPI::fromJsonValue(m_error, json[QString("error")]);
    m_error_isSet = !json[QString("error")].isNull() && m_error_isValid;

    m_outgoing_message_parts_isValid = ::OpenAPI::fromJsonValue(m_outgoing_message_parts, json[QString("outgoingMessageParts")]);
    m_outgoing_message_parts_isSet = !json[QString("outgoingMessageParts")].isNull() && m_outgoing_message_parts_isValid;

    m_result_parts_isValid = ::OpenAPI::fromJsonValue(m_result_parts, json[QString("resultParts")]);
    m_result_parts_isSet = !json[QString("resultParts")].isNull() && m_result_parts_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;
}

QString OAIPushNotificationTestSummaryModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPushNotificationTestSummaryModel::asJsonObject() const {
    QJsonObject obj;
    if (m_error_isSet) {
        obj.insert(QString("error"), ::OpenAPI::toJsonValue(m_error));
    }
    if (m_outgoing_message_parts.size() > 0) {
        obj.insert(QString("outgoingMessageParts"), ::OpenAPI::toJsonValue(m_outgoing_message_parts));
    }
    if (m_result_parts.size() > 0) {
        obj.insert(QString("resultParts"), ::OpenAPI::toJsonValue(m_result_parts));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    return obj;
}

bool OAIPushNotificationTestSummaryModel::isError() const {
    return m_error;
}
void OAIPushNotificationTestSummaryModel::setError(const bool &error) {
    m_error = error;
    m_error_isSet = true;
}

bool OAIPushNotificationTestSummaryModel::is_error_Set() const{
    return m_error_isSet;
}

bool OAIPushNotificationTestSummaryModel::is_error_Valid() const{
    return m_error_isValid;
}

QMap<QString, QString> OAIPushNotificationTestSummaryModel::getOutgoingMessageParts() const {
    return m_outgoing_message_parts;
}
void OAIPushNotificationTestSummaryModel::setOutgoingMessageParts(const QMap<QString, QString> &outgoing_message_parts) {
    m_outgoing_message_parts = outgoing_message_parts;
    m_outgoing_message_parts_isSet = true;
}

bool OAIPushNotificationTestSummaryModel::is_outgoing_message_parts_Set() const{
    return m_outgoing_message_parts_isSet;
}

bool OAIPushNotificationTestSummaryModel::is_outgoing_message_parts_Valid() const{
    return m_outgoing_message_parts_isValid;
}

QMap<QString, QString> OAIPushNotificationTestSummaryModel::getResultParts() const {
    return m_result_parts;
}
void OAIPushNotificationTestSummaryModel::setResultParts(const QMap<QString, QString> &result_parts) {
    m_result_parts = result_parts;
    m_result_parts_isSet = true;
}

bool OAIPushNotificationTestSummaryModel::is_result_parts_Set() const{
    return m_result_parts_isSet;
}

bool OAIPushNotificationTestSummaryModel::is_result_parts_Valid() const{
    return m_result_parts_isValid;
}

QString OAIPushNotificationTestSummaryModel::getTitle() const {
    return m_title;
}
void OAIPushNotificationTestSummaryModel::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIPushNotificationTestSummaryModel::is_title_Set() const{
    return m_title_isSet;
}

bool OAIPushNotificationTestSummaryModel::is_title_Valid() const{
    return m_title_isValid;
}

bool OAIPushNotificationTestSummaryModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_error_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_outgoing_message_parts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_result_parts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPushNotificationTestSummaryModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
