/**
 * GameSparks Game Details API
 * The API to manage the GameSparks game details
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIExperimentsApi_H
#define OAI_OAIExperimentsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIExperimentModel.h"
#include "OAIMessageModel.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIExperimentsApi : public QObject {
    Q_OBJECT

public:
    OAIExperimentsApi(const int timeOut = 0);
    ~OAIExperimentsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  oai_experiment_model OAIExperimentModel [required]
    */
    virtual void createExperimentUsingPOST(const QString &api_key, const OAIExperimentModel &oai_experiment_model);

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  id qint64 [required]
    */
    virtual void deleteExperimentUsingDELETE(const QString &api_key, const qint64 &id);

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  id qint64 [required]
    * @param[in]  action QString [required]
    */
    virtual void doActionExperimentUsingPOST(const QString &api_key, const qint64 &id, const QString &action);

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  id qint64 [required]
    */
    virtual void getExperimentUsingGET(const QString &api_key, const qint64 &id);

    /**
    * @param[in]  api_key QString [required]
    */
    virtual void getExperimentsUsingGET(const QString &api_key);

    /**
    * @param[in]  api_key QString [required]
    * @param[in]  id qint64 [required]
    * @param[in]  oai_experiment_model OAIExperimentModel [required]
    */
    virtual void updateExperimentUsingPUT(const QString &api_key, const qint64 &id, const OAIExperimentModel &oai_experiment_model);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createExperimentUsingPOSTCallback(OAIHttpRequestWorker *worker);
    void deleteExperimentUsingDELETECallback(OAIHttpRequestWorker *worker);
    void doActionExperimentUsingPOSTCallback(OAIHttpRequestWorker *worker);
    void getExperimentUsingGETCallback(OAIHttpRequestWorker *worker);
    void getExperimentsUsingGETCallback(OAIHttpRequestWorker *worker);
    void updateExperimentUsingPUTCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createExperimentUsingPOSTSignal(OAIExperimentModel summary);
    void deleteExperimentUsingDELETESignal(OAIMessageModel summary);
    void doActionExperimentUsingPOSTSignal(OAIExperimentModel summary);
    void getExperimentUsingGETSignal(OAIExperimentModel summary);
    void getExperimentsUsingGETSignal(QList<OAIExperimentModel> summary);
    void updateExperimentUsingPUTSignal(OAIExperimentModel summary);


    void createExperimentUsingPOSTSignalFull(OAIHttpRequestWorker *worker, OAIExperimentModel summary);
    void deleteExperimentUsingDELETESignalFull(OAIHttpRequestWorker *worker, OAIMessageModel summary);
    void doActionExperimentUsingPOSTSignalFull(OAIHttpRequestWorker *worker, OAIExperimentModel summary);
    void getExperimentUsingGETSignalFull(OAIHttpRequestWorker *worker, OAIExperimentModel summary);
    void getExperimentsUsingGETSignalFull(OAIHttpRequestWorker *worker, QList<OAIExperimentModel> summary);
    void updateExperimentUsingPUTSignalFull(OAIHttpRequestWorker *worker, OAIExperimentModel summary);

    Q_DECL_DEPRECATED_X("Use createExperimentUsingPOSTSignalError() instead")
    void createExperimentUsingPOSTSignalE(OAIExperimentModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createExperimentUsingPOSTSignalError(OAIExperimentModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteExperimentUsingDELETESignalError() instead")
    void deleteExperimentUsingDELETESignalE(OAIMessageModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteExperimentUsingDELETESignalError(OAIMessageModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use doActionExperimentUsingPOSTSignalError() instead")
    void doActionExperimentUsingPOSTSignalE(OAIExperimentModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void doActionExperimentUsingPOSTSignalError(OAIExperimentModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getExperimentUsingGETSignalError() instead")
    void getExperimentUsingGETSignalE(OAIExperimentModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getExperimentUsingGETSignalError(OAIExperimentModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getExperimentsUsingGETSignalError() instead")
    void getExperimentsUsingGETSignalE(QList<OAIExperimentModel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getExperimentsUsingGETSignalError(QList<OAIExperimentModel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateExperimentUsingPUTSignalError() instead")
    void updateExperimentUsingPUTSignalE(OAIExperimentModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateExperimentUsingPUTSignalError(OAIExperimentModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createExperimentUsingPOSTSignalErrorFull() instead")
    void createExperimentUsingPOSTSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createExperimentUsingPOSTSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteExperimentUsingDELETESignalErrorFull() instead")
    void deleteExperimentUsingDELETESignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteExperimentUsingDELETESignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use doActionExperimentUsingPOSTSignalErrorFull() instead")
    void doActionExperimentUsingPOSTSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void doActionExperimentUsingPOSTSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getExperimentUsingGETSignalErrorFull() instead")
    void getExperimentUsingGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getExperimentUsingGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getExperimentsUsingGETSignalErrorFull() instead")
    void getExperimentsUsingGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getExperimentsUsingGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateExperimentUsingPUTSignalErrorFull() instead")
    void updateExperimentUsingPUTSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateExperimentUsingPUTSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
