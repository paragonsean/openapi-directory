/**
 * GameSparks Game Details API
 * The API to manage the GameSparks game details
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISnapshotModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISnapshotModel::OAISnapshotModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISnapshotModel::OAISnapshotModel() {
    this->initializeModel();
}

OAISnapshotModel::~OAISnapshotModel() {}

void OAISnapshotModel::initializeModel() {

    m_created_isSet = false;
    m_created_isValid = false;

    m_created_by_isSet = false;
    m_created_by_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_index_progress_isSet = false;
    m_index_progress_isValid = false;

    m_published_isSet = false;
    m_published_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAISnapshotModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISnapshotModel::fromJsonObject(QJsonObject json) {

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("created")]);
    m_created_isSet = !json[QString("created")].isNull() && m_created_isValid;

    m_created_by_isValid = ::OpenAPI::fromJsonValue(m_created_by, json[QString("createdBy")]);
    m_created_by_isSet = !json[QString("createdBy")].isNull() && m_created_by_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_index_progress_isValid = ::OpenAPI::fromJsonValue(m_index_progress, json[QString("indexProgress")]);
    m_index_progress_isSet = !json[QString("indexProgress")].isNull() && m_index_progress_isValid;

    m_published_isValid = ::OpenAPI::fromJsonValue(m_published, json[QString("published")]);
    m_published_isSet = !json[QString("published")].isNull() && m_published_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAISnapshotModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISnapshotModel::asJsonObject() const {
    QJsonObject obj;
    if (m_created_isSet) {
        obj.insert(QString("created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_created_by_isSet) {
        obj.insert(QString("createdBy"), ::OpenAPI::toJsonValue(m_created_by));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_index_progress.size() > 0) {
        obj.insert(QString("indexProgress"), ::OpenAPI::toJsonValue(m_index_progress));
    }
    if (m_published_isSet) {
        obj.insert(QString("published"), ::OpenAPI::toJsonValue(m_published));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QDateTime OAISnapshotModel::getCreated() const {
    return m_created;
}
void OAISnapshotModel::setCreated(const QDateTime &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAISnapshotModel::is_created_Set() const{
    return m_created_isSet;
}

bool OAISnapshotModel::is_created_Valid() const{
    return m_created_isValid;
}

QString OAISnapshotModel::getCreatedBy() const {
    return m_created_by;
}
void OAISnapshotModel::setCreatedBy(const QString &created_by) {
    m_created_by = created_by;
    m_created_by_isSet = true;
}

bool OAISnapshotModel::is_created_by_Set() const{
    return m_created_by_isSet;
}

bool OAISnapshotModel::is_created_by_Valid() const{
    return m_created_by_isValid;
}

QString OAISnapshotModel::getDescription() const {
    return m_description;
}
void OAISnapshotModel::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAISnapshotModel::is_description_Set() const{
    return m_description_isSet;
}

bool OAISnapshotModel::is_description_Valid() const{
    return m_description_isValid;
}

QString OAISnapshotModel::getId() const {
    return m_id;
}
void OAISnapshotModel::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAISnapshotModel::is_id_Set() const{
    return m_id_isSet;
}

bool OAISnapshotModel::is_id_Valid() const{
    return m_id_isValid;
}

QMap<QString, qint64> OAISnapshotModel::getIndexProgress() const {
    return m_index_progress;
}
void OAISnapshotModel::setIndexProgress(const QMap<QString, qint64> &index_progress) {
    m_index_progress = index_progress;
    m_index_progress_isSet = true;
}

bool OAISnapshotModel::is_index_progress_Set() const{
    return m_index_progress_isSet;
}

bool OAISnapshotModel::is_index_progress_Valid() const{
    return m_index_progress_isValid;
}

bool OAISnapshotModel::isPublished() const {
    return m_published;
}
void OAISnapshotModel::setPublished(const bool &published) {
    m_published = published;
    m_published_isSet = true;
}

bool OAISnapshotModel::is_published_Set() const{
    return m_published_isSet;
}

bool OAISnapshotModel::is_published_Valid() const{
    return m_published_isValid;
}

QString OAISnapshotModel::getStatus() const {
    return m_status;
}
void OAISnapshotModel::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAISnapshotModel::is_status_Set() const{
    return m_status_isSet;
}

bool OAISnapshotModel::is_status_Valid() const{
    return m_status_isValid;
}

bool OAISnapshotModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_index_progress.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_published_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISnapshotModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
