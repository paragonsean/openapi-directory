# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.product_view import ProductView
from openapi_server.models.subscription_view import SubscriptionView
from openapi_server import util


class ProductsApiFind200Response(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created: datetime=None, custom: object=None, name: str=None, serial: str=None, subscriptions: List[SubscriptionView]=None, updated: datetime=None):
        """ProductsApiFind200Response - a model defined in OpenAPI

        :param created: The created of this ProductsApiFind200Response.
        :param custom: The custom of this ProductsApiFind200Response.
        :param name: The name of this ProductsApiFind200Response.
        :param serial: The serial of this ProductsApiFind200Response.
        :param subscriptions: The subscriptions of this ProductsApiFind200Response.
        :param updated: The updated of this ProductsApiFind200Response.
        """
        self.openapi_types = {
            'created': datetime,
            'custom': object,
            'name': str,
            'serial': str,
            'subscriptions': List[SubscriptionView],
            'updated': datetime
        }

        self.attribute_map = {
            'created': 'created',
            'custom': 'custom',
            'name': 'name',
            'serial': 'serial',
            'subscriptions': 'subscriptions',
            'updated': 'updated'
        }

        self._created = created
        self._custom = custom
        self._name = name
        self._serial = serial
        self._subscriptions = subscriptions
        self._updated = updated

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProductsApiFind200Response':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ProductsApi_Find_200_response of this ProductsApiFind200Response.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created(self):
        """Gets the created of this ProductsApiFind200Response.


        :return: The created of this ProductsApiFind200Response.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this ProductsApiFind200Response.


        :param created: The created of this ProductsApiFind200Response.
        :type created: datetime
        """

        self._created = created

    @property
    def custom(self):
        """Gets the custom of this ProductsApiFind200Response.


        :return: The custom of this ProductsApiFind200Response.
        :rtype: object
        """
        return self._custom

    @custom.setter
    def custom(self, custom):
        """Sets the custom of this ProductsApiFind200Response.


        :param custom: The custom of this ProductsApiFind200Response.
        :type custom: object
        """

        self._custom = custom

    @property
    def name(self):
        """Gets the name of this ProductsApiFind200Response.


        :return: The name of this ProductsApiFind200Response.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ProductsApiFind200Response.


        :param name: The name of this ProductsApiFind200Response.
        :type name: str
        """
        if name is not None and len(name) > 80:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `80`")
        if name is not None and len(name) < 0:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `0`")

        self._name = name

    @property
    def serial(self):
        """Gets the serial of this ProductsApiFind200Response.


        :return: The serial of this ProductsApiFind200Response.
        :rtype: str
        """
        return self._serial

    @serial.setter
    def serial(self, serial):
        """Sets the serial of this ProductsApiFind200Response.


        :param serial: The serial of this ProductsApiFind200Response.
        :type serial: str
        """

        self._serial = serial

    @property
    def subscriptions(self):
        """Gets the subscriptions of this ProductsApiFind200Response.


        :return: The subscriptions of this ProductsApiFind200Response.
        :rtype: List[SubscriptionView]
        """
        return self._subscriptions

    @subscriptions.setter
    def subscriptions(self, subscriptions):
        """Sets the subscriptions of this ProductsApiFind200Response.


        :param subscriptions: The subscriptions of this ProductsApiFind200Response.
        :type subscriptions: List[SubscriptionView]
        """

        self._subscriptions = subscriptions

    @property
    def updated(self):
        """Gets the updated of this ProductsApiFind200Response.


        :return: The updated of this ProductsApiFind200Response.
        :rtype: datetime
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this ProductsApiFind200Response.


        :param updated: The updated of this ProductsApiFind200Response.
        :type updated: datetime
        """

        self._updated = updated
