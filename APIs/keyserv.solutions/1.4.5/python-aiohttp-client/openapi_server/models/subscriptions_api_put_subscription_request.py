# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.subscription_create_modify import SubscriptionCreateModify
from openapi_server import util


class SubscriptionsApiPutSubscriptionRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, action: str=None, callback_on_modify: bool=None, callback_url: str=None, custom: object=None, frequency: str=None, key: str=None, name: str=None, serial: str=None, start_from: str=None):
        """SubscriptionsApiPutSubscriptionRequest - a model defined in OpenAPI

        :param action: The action of this SubscriptionsApiPutSubscriptionRequest.
        :param callback_on_modify: The callback_on_modify of this SubscriptionsApiPutSubscriptionRequest.
        :param callback_url: The callback_url of this SubscriptionsApiPutSubscriptionRequest.
        :param custom: The custom of this SubscriptionsApiPutSubscriptionRequest.
        :param frequency: The frequency of this SubscriptionsApiPutSubscriptionRequest.
        :param key: The key of this SubscriptionsApiPutSubscriptionRequest.
        :param name: The name of this SubscriptionsApiPutSubscriptionRequest.
        :param serial: The serial of this SubscriptionsApiPutSubscriptionRequest.
        :param start_from: The start_from of this SubscriptionsApiPutSubscriptionRequest.
        """
        self.openapi_types = {
            'action': str,
            'callback_on_modify': bool,
            'callback_url': str,
            'custom': object,
            'frequency': str,
            'key': str,
            'name': str,
            'serial': str,
            'start_from': str
        }

        self.attribute_map = {
            'action': 'action',
            'callback_on_modify': 'callbackOnModify',
            'callback_url': 'callbackUrl',
            'custom': 'custom',
            'frequency': 'frequency',
            'key': 'key',
            'name': 'name',
            'serial': 'serial',
            'start_from': 'startFrom'
        }

        self._action = action
        self._callback_on_modify = callback_on_modify
        self._callback_url = callback_url
        self._custom = custom
        self._frequency = frequency
        self._key = key
        self._name = name
        self._serial = serial
        self._start_from = start_from

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SubscriptionsApiPutSubscriptionRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SubscriptionsApi_PutSubscription_request of this SubscriptionsApiPutSubscriptionRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def action(self):
        """Gets the action of this SubscriptionsApiPutSubscriptionRequest.


        :return: The action of this SubscriptionsApiPutSubscriptionRequest.
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this SubscriptionsApiPutSubscriptionRequest.


        :param action: The action of this SubscriptionsApiPutSubscriptionRequest.
        :type action: str
        """
        if action is None:
            raise ValueError("Invalid value for `action`, must not be `None`")
        if action is not None and len(action) < 1:
            raise ValueError("Invalid value for `action`, length must be greater than or equal to `1`")

        self._action = action

    @property
    def callback_on_modify(self):
        """Gets the callback_on_modify of this SubscriptionsApiPutSubscriptionRequest.


        :return: The callback_on_modify of this SubscriptionsApiPutSubscriptionRequest.
        :rtype: bool
        """
        return self._callback_on_modify

    @callback_on_modify.setter
    def callback_on_modify(self, callback_on_modify):
        """Sets the callback_on_modify of this SubscriptionsApiPutSubscriptionRequest.


        :param callback_on_modify: The callback_on_modify of this SubscriptionsApiPutSubscriptionRequest.
        :type callback_on_modify: bool
        """

        self._callback_on_modify = callback_on_modify

    @property
    def callback_url(self):
        """Gets the callback_url of this SubscriptionsApiPutSubscriptionRequest.


        :return: The callback_url of this SubscriptionsApiPutSubscriptionRequest.
        :rtype: str
        """
        return self._callback_url

    @callback_url.setter
    def callback_url(self, callback_url):
        """Sets the callback_url of this SubscriptionsApiPutSubscriptionRequest.


        :param callback_url: The callback_url of this SubscriptionsApiPutSubscriptionRequest.
        :type callback_url: str
        """
        if callback_url is not None and len(callback_url) > 800:
            raise ValueError("Invalid value for `callback_url`, length must be less than or equal to `800`")
        if callback_url is not None and len(callback_url) < 0:
            raise ValueError("Invalid value for `callback_url`, length must be greater than or equal to `0`")

        self._callback_url = callback_url

    @property
    def custom(self):
        """Gets the custom of this SubscriptionsApiPutSubscriptionRequest.


        :return: The custom of this SubscriptionsApiPutSubscriptionRequest.
        :rtype: object
        """
        return self._custom

    @custom.setter
    def custom(self, custom):
        """Sets the custom of this SubscriptionsApiPutSubscriptionRequest.


        :param custom: The custom of this SubscriptionsApiPutSubscriptionRequest.
        :type custom: object
        """

        self._custom = custom

    @property
    def frequency(self):
        """Gets the frequency of this SubscriptionsApiPutSubscriptionRequest.


        :return: The frequency of this SubscriptionsApiPutSubscriptionRequest.
        :rtype: str
        """
        return self._frequency

    @frequency.setter
    def frequency(self, frequency):
        """Sets the frequency of this SubscriptionsApiPutSubscriptionRequest.


        :param frequency: The frequency of this SubscriptionsApiPutSubscriptionRequest.
        :type frequency: str
        """
        if frequency is None:
            raise ValueError("Invalid value for `frequency`, must not be `None`")
        if frequency is not None and len(frequency) < 1:
            raise ValueError("Invalid value for `frequency`, length must be greater than or equal to `1`")

        self._frequency = frequency

    @property
    def key(self):
        """Gets the key of this SubscriptionsApiPutSubscriptionRequest.


        :return: The key of this SubscriptionsApiPutSubscriptionRequest.
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this SubscriptionsApiPutSubscriptionRequest.


        :param key: The key of this SubscriptionsApiPutSubscriptionRequest.
        :type key: str
        """

        self._key = key

    @property
    def name(self):
        """Gets the name of this SubscriptionsApiPutSubscriptionRequest.


        :return: The name of this SubscriptionsApiPutSubscriptionRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SubscriptionsApiPutSubscriptionRequest.


        :param name: The name of this SubscriptionsApiPutSubscriptionRequest.
        :type name: str
        """
        if name is not None and len(name) > 80:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `80`")
        if name is not None and len(name) < 0:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `0`")

        self._name = name

    @property
    def serial(self):
        """Gets the serial of this SubscriptionsApiPutSubscriptionRequest.


        :return: The serial of this SubscriptionsApiPutSubscriptionRequest.
        :rtype: str
        """
        return self._serial

    @serial.setter
    def serial(self, serial):
        """Sets the serial of this SubscriptionsApiPutSubscriptionRequest.


        :param serial: The serial of this SubscriptionsApiPutSubscriptionRequest.
        :type serial: str
        """

        self._serial = serial

    @property
    def start_from(self):
        """Gets the start_from of this SubscriptionsApiPutSubscriptionRequest.


        :return: The start_from of this SubscriptionsApiPutSubscriptionRequest.
        :rtype: str
        """
        return self._start_from

    @start_from.setter
    def start_from(self, start_from):
        """Sets the start_from of this SubscriptionsApiPutSubscriptionRequest.


        :param start_from: The start_from of this SubscriptionsApiPutSubscriptionRequest.
        :type start_from: str
        """

        self._start_from = start_from
