/*
 * KeyServ
 * KeyServ API
 *
 * The version of the OpenAPI document: 1.4.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ProductView;
import org.openapitools.client.model.ProductsApiCount200Response;
import org.openapitools.client.model.ProductsApiCountRequest;
import org.openapitools.client.model.ProductsApiFind200Response;
import org.openapitools.client.model.ProductsApiFindRequest;
import org.openapitools.client.model.ProductsApiPatchProduct2Request;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ProductsApiApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ProductsApiApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ProductsApiApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for productsApiCount
     * @param productsApiCountRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsApiCountCall(ProductsApiCountRequest productsApiCountRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = productsApiCountRequest;

        // create path and map variables
        String localVarPath = "/v1/ProductsApi/Count";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productsApiCountValidateBeforeCall(ProductsApiCountRequest productsApiCountRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'productsApiCountRequest' is set
        if (productsApiCountRequest == null) {
            throw new ApiException("Missing the required parameter 'productsApiCountRequest' when calling productsApiCount(Async)");
        }

        return productsApiCountCall(productsApiCountRequest, _callback);

    }

    /**
     * 
     * 
     * @param productsApiCountRequest  (required)
     * @return ProductsApiCount200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ProductsApiCount200Response productsApiCount(ProductsApiCountRequest productsApiCountRequest) throws ApiException {
        ApiResponse<ProductsApiCount200Response> localVarResp = productsApiCountWithHttpInfo(productsApiCountRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param productsApiCountRequest  (required)
     * @return ApiResponse&lt;ProductsApiCount200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProductsApiCount200Response> productsApiCountWithHttpInfo(ProductsApiCountRequest productsApiCountRequest) throws ApiException {
        okhttp3.Call localVarCall = productsApiCountValidateBeforeCall(productsApiCountRequest, null);
        Type localVarReturnType = new TypeToken<ProductsApiCount200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param productsApiCountRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsApiCountAsync(ProductsApiCountRequest productsApiCountRequest, final ApiCallback<ProductsApiCount200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = productsApiCountValidateBeforeCall(productsApiCountRequest, _callback);
        Type localVarReturnType = new TypeToken<ProductsApiCount200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for productsApiDeleteProduct
     * @param xApiKey  (required)
     * @param serial  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsApiDeleteProductCall(String xApiKey, String serial, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/ProductsApi/{serial}"
            .replace("{" + "serial" + "}", localVarApiClient.escapeString(serial.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xApiKey != null) {
            localVarHeaderParams.put("X-Api-Key", localVarApiClient.parameterToString(xApiKey));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productsApiDeleteProductValidateBeforeCall(String xApiKey, String serial, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xApiKey' is set
        if (xApiKey == null) {
            throw new ApiException("Missing the required parameter 'xApiKey' when calling productsApiDeleteProduct(Async)");
        }

        // verify the required parameter 'serial' is set
        if (serial == null) {
            throw new ApiException("Missing the required parameter 'serial' when calling productsApiDeleteProduct(Async)");
        }

        return productsApiDeleteProductCall(xApiKey, serial, _callback);

    }

    /**
     * 
     * 
     * @param xApiKey  (required)
     * @param serial  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void productsApiDeleteProduct(String xApiKey, String serial) throws ApiException {
        productsApiDeleteProductWithHttpInfo(xApiKey, serial);
    }

    /**
     * 
     * 
     * @param xApiKey  (required)
     * @param serial  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> productsApiDeleteProductWithHttpInfo(String xApiKey, String serial) throws ApiException {
        okhttp3.Call localVarCall = productsApiDeleteProductValidateBeforeCall(xApiKey, serial, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param xApiKey  (required)
     * @param serial  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsApiDeleteProductAsync(String xApiKey, String serial, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = productsApiDeleteProductValidateBeforeCall(xApiKey, serial, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for productsApiDeleteProduct2
     * @param xApiKey  (required)
     * @param serial  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsApiDeleteProduct2Call(String xApiKey, String serial, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/ProductsApi/{serial}"
            .replace("{" + "serial" + "}", localVarApiClient.escapeString(serial.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xApiKey != null) {
            localVarHeaderParams.put("X-Api-Key", localVarApiClient.parameterToString(xApiKey));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productsApiDeleteProduct2ValidateBeforeCall(String xApiKey, String serial, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xApiKey' is set
        if (xApiKey == null) {
            throw new ApiException("Missing the required parameter 'xApiKey' when calling productsApiDeleteProduct2(Async)");
        }

        // verify the required parameter 'serial' is set
        if (serial == null) {
            throw new ApiException("Missing the required parameter 'serial' when calling productsApiDeleteProduct2(Async)");
        }

        return productsApiDeleteProduct2Call(xApiKey, serial, _callback);

    }

    /**
     * 
     * 
     * @param xApiKey  (required)
     * @param serial  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void productsApiDeleteProduct2(String xApiKey, String serial) throws ApiException {
        productsApiDeleteProduct2WithHttpInfo(xApiKey, serial);
    }

    /**
     * 
     * 
     * @param xApiKey  (required)
     * @param serial  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> productsApiDeleteProduct2WithHttpInfo(String xApiKey, String serial) throws ApiException {
        okhttp3.Call localVarCall = productsApiDeleteProduct2ValidateBeforeCall(xApiKey, serial, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param xApiKey  (required)
     * @param serial  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsApiDeleteProduct2Async(String xApiKey, String serial, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = productsApiDeleteProduct2ValidateBeforeCall(xApiKey, serial, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for productsApiFind
     * @param productsApiFindRequest  (required)
     * @param page  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsApiFindCall(ProductsApiFindRequest productsApiFindRequest, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = productsApiFindRequest;

        // create path and map variables
        String localVarPath = "/v1/ProductsApi/Find";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productsApiFindValidateBeforeCall(ProductsApiFindRequest productsApiFindRequest, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'productsApiFindRequest' is set
        if (productsApiFindRequest == null) {
            throw new ApiException("Missing the required parameter 'productsApiFindRequest' when calling productsApiFind(Async)");
        }

        return productsApiFindCall(productsApiFindRequest, page, _callback);

    }

    /**
     * 
     * 
     * @param productsApiFindRequest  (required)
     * @param page  (optional)
     * @return ProductsApiFind200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ProductsApiFind200Response productsApiFind(ProductsApiFindRequest productsApiFindRequest, Integer page) throws ApiException {
        ApiResponse<ProductsApiFind200Response> localVarResp = productsApiFindWithHttpInfo(productsApiFindRequest, page);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param productsApiFindRequest  (required)
     * @param page  (optional)
     * @return ApiResponse&lt;ProductsApiFind200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProductsApiFind200Response> productsApiFindWithHttpInfo(ProductsApiFindRequest productsApiFindRequest, Integer page) throws ApiException {
        okhttp3.Call localVarCall = productsApiFindValidateBeforeCall(productsApiFindRequest, page, null);
        Type localVarReturnType = new TypeToken<ProductsApiFind200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param productsApiFindRequest  (required)
     * @param page  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsApiFindAsync(ProductsApiFindRequest productsApiFindRequest, Integer page, final ApiCallback<ProductsApiFind200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = productsApiFindValidateBeforeCall(productsApiFindRequest, page, _callback);
        Type localVarReturnType = new TypeToken<ProductsApiFind200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for productsApiList
     * @param productsApiCountRequest  (required)
     * @param page  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsApiListCall(ProductsApiCountRequest productsApiCountRequest, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = productsApiCountRequest;

        // create path and map variables
        String localVarPath = "/v1/ProductsApi/List";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productsApiListValidateBeforeCall(ProductsApiCountRequest productsApiCountRequest, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'productsApiCountRequest' is set
        if (productsApiCountRequest == null) {
            throw new ApiException("Missing the required parameter 'productsApiCountRequest' when calling productsApiList(Async)");
        }

        return productsApiListCall(productsApiCountRequest, page, _callback);

    }

    /**
     * 
     * 
     * @param productsApiCountRequest  (required)
     * @param page  (optional)
     * @return List&lt;ProductView&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<ProductView> productsApiList(ProductsApiCountRequest productsApiCountRequest, Integer page) throws ApiException {
        ApiResponse<List<ProductView>> localVarResp = productsApiListWithHttpInfo(productsApiCountRequest, page);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param productsApiCountRequest  (required)
     * @param page  (optional)
     * @return ApiResponse&lt;List&lt;ProductView&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ProductView>> productsApiListWithHttpInfo(ProductsApiCountRequest productsApiCountRequest, Integer page) throws ApiException {
        okhttp3.Call localVarCall = productsApiListValidateBeforeCall(productsApiCountRequest, page, null);
        Type localVarReturnType = new TypeToken<List<ProductView>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param productsApiCountRequest  (required)
     * @param page  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsApiListAsync(ProductsApiCountRequest productsApiCountRequest, Integer page, final ApiCallback<List<ProductView>> _callback) throws ApiException {

        okhttp3.Call localVarCall = productsApiListValidateBeforeCall(productsApiCountRequest, page, _callback);
        Type localVarReturnType = new TypeToken<List<ProductView>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for productsApiPatchProduct
     * @param productsApiPatchProduct2Request  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsApiPatchProductCall(ProductsApiPatchProduct2Request productsApiPatchProduct2Request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = productsApiPatchProduct2Request;

        // create path and map variables
        String localVarPath = "/v1/ProductsApi";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productsApiPatchProductValidateBeforeCall(ProductsApiPatchProduct2Request productsApiPatchProduct2Request, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'productsApiPatchProduct2Request' is set
        if (productsApiPatchProduct2Request == null) {
            throw new ApiException("Missing the required parameter 'productsApiPatchProduct2Request' when calling productsApiPatchProduct(Async)");
        }

        return productsApiPatchProductCall(productsApiPatchProduct2Request, _callback);

    }

    /**
     * 
     * 
     * @param productsApiPatchProduct2Request  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void productsApiPatchProduct(ProductsApiPatchProduct2Request productsApiPatchProduct2Request) throws ApiException {
        productsApiPatchProductWithHttpInfo(productsApiPatchProduct2Request);
    }

    /**
     * 
     * 
     * @param productsApiPatchProduct2Request  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> productsApiPatchProductWithHttpInfo(ProductsApiPatchProduct2Request productsApiPatchProduct2Request) throws ApiException {
        okhttp3.Call localVarCall = productsApiPatchProductValidateBeforeCall(productsApiPatchProduct2Request, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param productsApiPatchProduct2Request  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsApiPatchProductAsync(ProductsApiPatchProduct2Request productsApiPatchProduct2Request, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = productsApiPatchProductValidateBeforeCall(productsApiPatchProduct2Request, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for productsApiPatchProduct2
     * @param productsApiPatchProduct2Request  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsApiPatchProduct2Call(ProductsApiPatchProduct2Request productsApiPatchProduct2Request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = productsApiPatchProduct2Request;

        // create path and map variables
        String localVarPath = "/v1/ProductsApi";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productsApiPatchProduct2ValidateBeforeCall(ProductsApiPatchProduct2Request productsApiPatchProduct2Request, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'productsApiPatchProduct2Request' is set
        if (productsApiPatchProduct2Request == null) {
            throw new ApiException("Missing the required parameter 'productsApiPatchProduct2Request' when calling productsApiPatchProduct2(Async)");
        }

        return productsApiPatchProduct2Call(productsApiPatchProduct2Request, _callback);

    }

    /**
     * 
     * 
     * @param productsApiPatchProduct2Request  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void productsApiPatchProduct2(ProductsApiPatchProduct2Request productsApiPatchProduct2Request) throws ApiException {
        productsApiPatchProduct2WithHttpInfo(productsApiPatchProduct2Request);
    }

    /**
     * 
     * 
     * @param productsApiPatchProduct2Request  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> productsApiPatchProduct2WithHttpInfo(ProductsApiPatchProduct2Request productsApiPatchProduct2Request) throws ApiException {
        okhttp3.Call localVarCall = productsApiPatchProduct2ValidateBeforeCall(productsApiPatchProduct2Request, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param productsApiPatchProduct2Request  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsApiPatchProduct2Async(ProductsApiPatchProduct2Request productsApiPatchProduct2Request, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = productsApiPatchProduct2ValidateBeforeCall(productsApiPatchProduct2Request, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for productsApiSave
     * @param productsApiPatchProduct2Request  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsApiSaveCall(ProductsApiPatchProduct2Request productsApiPatchProduct2Request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = productsApiPatchProduct2Request;

        // create path and map variables
        String localVarPath = "/v1/ProductsApi/Save";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productsApiSaveValidateBeforeCall(ProductsApiPatchProduct2Request productsApiPatchProduct2Request, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'productsApiPatchProduct2Request' is set
        if (productsApiPatchProduct2Request == null) {
            throw new ApiException("Missing the required parameter 'productsApiPatchProduct2Request' when calling productsApiSave(Async)");
        }

        return productsApiSaveCall(productsApiPatchProduct2Request, _callback);

    }

    /**
     * 
     * 
     * @param productsApiPatchProduct2Request  (required)
     * @return ProductsApiFind200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ProductsApiFind200Response productsApiSave(ProductsApiPatchProduct2Request productsApiPatchProduct2Request) throws ApiException {
        ApiResponse<ProductsApiFind200Response> localVarResp = productsApiSaveWithHttpInfo(productsApiPatchProduct2Request);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param productsApiPatchProduct2Request  (required)
     * @return ApiResponse&lt;ProductsApiFind200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProductsApiFind200Response> productsApiSaveWithHttpInfo(ProductsApiPatchProduct2Request productsApiPatchProduct2Request) throws ApiException {
        okhttp3.Call localVarCall = productsApiSaveValidateBeforeCall(productsApiPatchProduct2Request, null);
        Type localVarReturnType = new TypeToken<ProductsApiFind200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param productsApiPatchProduct2Request  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productsApiSaveAsync(ProductsApiPatchProduct2Request productsApiPatchProduct2Request, final ApiCallback<ProductsApiFind200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = productsApiSaveValidateBeforeCall(productsApiPatchProduct2Request, _callback);
        Type localVarReturnType = new TypeToken<ProductsApiFind200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
