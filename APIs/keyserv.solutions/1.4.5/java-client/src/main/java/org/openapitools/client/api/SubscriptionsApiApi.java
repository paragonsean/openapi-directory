/*
 * KeyServ
 * KeyServ API
 *
 * The version of the OpenAPI document: 1.4.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.KeysApiFind200Response;
import org.openapitools.client.model.ProductsApiCount200Response;
import org.openapitools.client.model.ProductsApiFindRequest;
import org.openapitools.client.model.SubscriptionView;
import org.openapitools.client.model.SubscriptionsApiCountRequest;
import org.openapitools.client.model.SubscriptionsApiFind200Response;
import org.openapitools.client.model.SubscriptionsApiPutSubscriptionRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SubscriptionsApiApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SubscriptionsApiApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SubscriptionsApiApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for subscriptionsApiCount
     * @param subscriptionsApiCountRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call subscriptionsApiCountCall(SubscriptionsApiCountRequest subscriptionsApiCountRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = subscriptionsApiCountRequest;

        // create path and map variables
        String localVarPath = "/v1/SubscriptionsApi/Count";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call subscriptionsApiCountValidateBeforeCall(SubscriptionsApiCountRequest subscriptionsApiCountRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionsApiCountRequest' is set
        if (subscriptionsApiCountRequest == null) {
            throw new ApiException("Missing the required parameter 'subscriptionsApiCountRequest' when calling subscriptionsApiCount(Async)");
        }

        return subscriptionsApiCountCall(subscriptionsApiCountRequest, _callback);

    }

    /**
     * 
     * 
     * @param subscriptionsApiCountRequest  (required)
     * @return ProductsApiCount200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ProductsApiCount200Response subscriptionsApiCount(SubscriptionsApiCountRequest subscriptionsApiCountRequest) throws ApiException {
        ApiResponse<ProductsApiCount200Response> localVarResp = subscriptionsApiCountWithHttpInfo(subscriptionsApiCountRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param subscriptionsApiCountRequest  (required)
     * @return ApiResponse&lt;ProductsApiCount200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProductsApiCount200Response> subscriptionsApiCountWithHttpInfo(SubscriptionsApiCountRequest subscriptionsApiCountRequest) throws ApiException {
        okhttp3.Call localVarCall = subscriptionsApiCountValidateBeforeCall(subscriptionsApiCountRequest, null);
        Type localVarReturnType = new TypeToken<ProductsApiCount200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param subscriptionsApiCountRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call subscriptionsApiCountAsync(SubscriptionsApiCountRequest subscriptionsApiCountRequest, final ApiCallback<ProductsApiCount200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = subscriptionsApiCountValidateBeforeCall(subscriptionsApiCountRequest, _callback);
        Type localVarReturnType = new TypeToken<ProductsApiCount200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for subscriptionsApiDeleteSubscription
     * @param xApiKey  (required)
     * @param serial  (required)
     * @param keep  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call subscriptionsApiDeleteSubscriptionCall(String xApiKey, String serial, Boolean keep, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/SubscriptionsApi/{serial}"
            .replace("{" + "serial" + "}", localVarApiClient.escapeString(serial.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (keep != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("keep", keep));
        }

        if (xApiKey != null) {
            localVarHeaderParams.put("X-Api-Key", localVarApiClient.parameterToString(xApiKey));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call subscriptionsApiDeleteSubscriptionValidateBeforeCall(String xApiKey, String serial, Boolean keep, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xApiKey' is set
        if (xApiKey == null) {
            throw new ApiException("Missing the required parameter 'xApiKey' when calling subscriptionsApiDeleteSubscription(Async)");
        }

        // verify the required parameter 'serial' is set
        if (serial == null) {
            throw new ApiException("Missing the required parameter 'serial' when calling subscriptionsApiDeleteSubscription(Async)");
        }

        // verify the required parameter 'keep' is set
        if (keep == null) {
            throw new ApiException("Missing the required parameter 'keep' when calling subscriptionsApiDeleteSubscription(Async)");
        }

        return subscriptionsApiDeleteSubscriptionCall(xApiKey, serial, keep, _callback);

    }

    /**
     * 
     * 
     * @param xApiKey  (required)
     * @param serial  (required)
     * @param keep  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void subscriptionsApiDeleteSubscription(String xApiKey, String serial, Boolean keep) throws ApiException {
        subscriptionsApiDeleteSubscriptionWithHttpInfo(xApiKey, serial, keep);
    }

    /**
     * 
     * 
     * @param xApiKey  (required)
     * @param serial  (required)
     * @param keep  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> subscriptionsApiDeleteSubscriptionWithHttpInfo(String xApiKey, String serial, Boolean keep) throws ApiException {
        okhttp3.Call localVarCall = subscriptionsApiDeleteSubscriptionValidateBeforeCall(xApiKey, serial, keep, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param xApiKey  (required)
     * @param serial  (required)
     * @param keep  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call subscriptionsApiDeleteSubscriptionAsync(String xApiKey, String serial, Boolean keep, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = subscriptionsApiDeleteSubscriptionValidateBeforeCall(xApiKey, serial, keep, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for subscriptionsApiDeleteSubscription2
     * @param xApiKey  (required)
     * @param serial  (required)
     * @param keep  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call subscriptionsApiDeleteSubscription2Call(String xApiKey, String serial, Boolean keep, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/SubscriptionsApi/{serial}"
            .replace("{" + "serial" + "}", localVarApiClient.escapeString(serial.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (keep != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("keep", keep));
        }

        if (xApiKey != null) {
            localVarHeaderParams.put("X-Api-Key", localVarApiClient.parameterToString(xApiKey));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call subscriptionsApiDeleteSubscription2ValidateBeforeCall(String xApiKey, String serial, Boolean keep, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xApiKey' is set
        if (xApiKey == null) {
            throw new ApiException("Missing the required parameter 'xApiKey' when calling subscriptionsApiDeleteSubscription2(Async)");
        }

        // verify the required parameter 'serial' is set
        if (serial == null) {
            throw new ApiException("Missing the required parameter 'serial' when calling subscriptionsApiDeleteSubscription2(Async)");
        }

        // verify the required parameter 'keep' is set
        if (keep == null) {
            throw new ApiException("Missing the required parameter 'keep' when calling subscriptionsApiDeleteSubscription2(Async)");
        }

        return subscriptionsApiDeleteSubscription2Call(xApiKey, serial, keep, _callback);

    }

    /**
     * 
     * 
     * @param xApiKey  (required)
     * @param serial  (required)
     * @param keep  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void subscriptionsApiDeleteSubscription2(String xApiKey, String serial, Boolean keep) throws ApiException {
        subscriptionsApiDeleteSubscription2WithHttpInfo(xApiKey, serial, keep);
    }

    /**
     * 
     * 
     * @param xApiKey  (required)
     * @param serial  (required)
     * @param keep  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> subscriptionsApiDeleteSubscription2WithHttpInfo(String xApiKey, String serial, Boolean keep) throws ApiException {
        okhttp3.Call localVarCall = subscriptionsApiDeleteSubscription2ValidateBeforeCall(xApiKey, serial, keep, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param xApiKey  (required)
     * @param serial  (required)
     * @param keep  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call subscriptionsApiDeleteSubscription2Async(String xApiKey, String serial, Boolean keep, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = subscriptionsApiDeleteSubscription2ValidateBeforeCall(xApiKey, serial, keep, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for subscriptionsApiDisable
     * @param productsApiFindRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call subscriptionsApiDisableCall(ProductsApiFindRequest productsApiFindRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = productsApiFindRequest;

        // create path and map variables
        String localVarPath = "/v1/SubscriptionsApi/Disable";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call subscriptionsApiDisableValidateBeforeCall(ProductsApiFindRequest productsApiFindRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'productsApiFindRequest' is set
        if (productsApiFindRequest == null) {
            throw new ApiException("Missing the required parameter 'productsApiFindRequest' when calling subscriptionsApiDisable(Async)");
        }

        return subscriptionsApiDisableCall(productsApiFindRequest, _callback);

    }

    /**
     * 
     * 
     * @param productsApiFindRequest  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void subscriptionsApiDisable(ProductsApiFindRequest productsApiFindRequest) throws ApiException {
        subscriptionsApiDisableWithHttpInfo(productsApiFindRequest);
    }

    /**
     * 
     * 
     * @param productsApiFindRequest  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> subscriptionsApiDisableWithHttpInfo(ProductsApiFindRequest productsApiFindRequest) throws ApiException {
        okhttp3.Call localVarCall = subscriptionsApiDisableValidateBeforeCall(productsApiFindRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param productsApiFindRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call subscriptionsApiDisableAsync(ProductsApiFindRequest productsApiFindRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = subscriptionsApiDisableValidateBeforeCall(productsApiFindRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for subscriptionsApiDisable2
     * @param productsApiFindRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call subscriptionsApiDisable2Call(ProductsApiFindRequest productsApiFindRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = productsApiFindRequest;

        // create path and map variables
        String localVarPath = "/v1/SubscriptionsApi/Disable";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call subscriptionsApiDisable2ValidateBeforeCall(ProductsApiFindRequest productsApiFindRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'productsApiFindRequest' is set
        if (productsApiFindRequest == null) {
            throw new ApiException("Missing the required parameter 'productsApiFindRequest' when calling subscriptionsApiDisable2(Async)");
        }

        return subscriptionsApiDisable2Call(productsApiFindRequest, _callback);

    }

    /**
     * 
     * 
     * @param productsApiFindRequest  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void subscriptionsApiDisable2(ProductsApiFindRequest productsApiFindRequest) throws ApiException {
        subscriptionsApiDisable2WithHttpInfo(productsApiFindRequest);
    }

    /**
     * 
     * 
     * @param productsApiFindRequest  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> subscriptionsApiDisable2WithHttpInfo(ProductsApiFindRequest productsApiFindRequest) throws ApiException {
        okhttp3.Call localVarCall = subscriptionsApiDisable2ValidateBeforeCall(productsApiFindRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param productsApiFindRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call subscriptionsApiDisable2Async(ProductsApiFindRequest productsApiFindRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = subscriptionsApiDisable2ValidateBeforeCall(productsApiFindRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for subscriptionsApiEnable
     * @param productsApiFindRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call subscriptionsApiEnableCall(ProductsApiFindRequest productsApiFindRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = productsApiFindRequest;

        // create path and map variables
        String localVarPath = "/v1/SubscriptionsApi/Enable";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call subscriptionsApiEnableValidateBeforeCall(ProductsApiFindRequest productsApiFindRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'productsApiFindRequest' is set
        if (productsApiFindRequest == null) {
            throw new ApiException("Missing the required parameter 'productsApiFindRequest' when calling subscriptionsApiEnable(Async)");
        }

        return subscriptionsApiEnableCall(productsApiFindRequest, _callback);

    }

    /**
     * 
     * 
     * @param productsApiFindRequest  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void subscriptionsApiEnable(ProductsApiFindRequest productsApiFindRequest) throws ApiException {
        subscriptionsApiEnableWithHttpInfo(productsApiFindRequest);
    }

    /**
     * 
     * 
     * @param productsApiFindRequest  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> subscriptionsApiEnableWithHttpInfo(ProductsApiFindRequest productsApiFindRequest) throws ApiException {
        okhttp3.Call localVarCall = subscriptionsApiEnableValidateBeforeCall(productsApiFindRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param productsApiFindRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call subscriptionsApiEnableAsync(ProductsApiFindRequest productsApiFindRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = subscriptionsApiEnableValidateBeforeCall(productsApiFindRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for subscriptionsApiEnable2
     * @param productsApiFindRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call subscriptionsApiEnable2Call(ProductsApiFindRequest productsApiFindRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = productsApiFindRequest;

        // create path and map variables
        String localVarPath = "/v1/SubscriptionsApi/Enable";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call subscriptionsApiEnable2ValidateBeforeCall(ProductsApiFindRequest productsApiFindRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'productsApiFindRequest' is set
        if (productsApiFindRequest == null) {
            throw new ApiException("Missing the required parameter 'productsApiFindRequest' when calling subscriptionsApiEnable2(Async)");
        }

        return subscriptionsApiEnable2Call(productsApiFindRequest, _callback);

    }

    /**
     * 
     * 
     * @param productsApiFindRequest  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void subscriptionsApiEnable2(ProductsApiFindRequest productsApiFindRequest) throws ApiException {
        subscriptionsApiEnable2WithHttpInfo(productsApiFindRequest);
    }

    /**
     * 
     * 
     * @param productsApiFindRequest  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> subscriptionsApiEnable2WithHttpInfo(ProductsApiFindRequest productsApiFindRequest) throws ApiException {
        okhttp3.Call localVarCall = subscriptionsApiEnable2ValidateBeforeCall(productsApiFindRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param productsApiFindRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call subscriptionsApiEnable2Async(ProductsApiFindRequest productsApiFindRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = subscriptionsApiEnable2ValidateBeforeCall(productsApiFindRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for subscriptionsApiFind
     * @param productsApiFindRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call subscriptionsApiFindCall(ProductsApiFindRequest productsApiFindRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = productsApiFindRequest;

        // create path and map variables
        String localVarPath = "/v1/SubscriptionsApi/Find";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call subscriptionsApiFindValidateBeforeCall(ProductsApiFindRequest productsApiFindRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'productsApiFindRequest' is set
        if (productsApiFindRequest == null) {
            throw new ApiException("Missing the required parameter 'productsApiFindRequest' when calling subscriptionsApiFind(Async)");
        }

        return subscriptionsApiFindCall(productsApiFindRequest, _callback);

    }

    /**
     * 
     * 
     * @param productsApiFindRequest  (required)
     * @return SubscriptionsApiFind200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public SubscriptionsApiFind200Response subscriptionsApiFind(ProductsApiFindRequest productsApiFindRequest) throws ApiException {
        ApiResponse<SubscriptionsApiFind200Response> localVarResp = subscriptionsApiFindWithHttpInfo(productsApiFindRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param productsApiFindRequest  (required)
     * @return ApiResponse&lt;SubscriptionsApiFind200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SubscriptionsApiFind200Response> subscriptionsApiFindWithHttpInfo(ProductsApiFindRequest productsApiFindRequest) throws ApiException {
        okhttp3.Call localVarCall = subscriptionsApiFindValidateBeforeCall(productsApiFindRequest, null);
        Type localVarReturnType = new TypeToken<SubscriptionsApiFind200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param productsApiFindRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call subscriptionsApiFindAsync(ProductsApiFindRequest productsApiFindRequest, final ApiCallback<SubscriptionsApiFind200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = subscriptionsApiFindValidateBeforeCall(productsApiFindRequest, _callback);
        Type localVarReturnType = new TypeToken<SubscriptionsApiFind200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for subscriptionsApiList
     * @param productsApiFindRequest  (required)
     * @param page  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call subscriptionsApiListCall(ProductsApiFindRequest productsApiFindRequest, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = productsApiFindRequest;

        // create path and map variables
        String localVarPath = "/v1/SubscriptionsApi/List";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call subscriptionsApiListValidateBeforeCall(ProductsApiFindRequest productsApiFindRequest, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'productsApiFindRequest' is set
        if (productsApiFindRequest == null) {
            throw new ApiException("Missing the required parameter 'productsApiFindRequest' when calling subscriptionsApiList(Async)");
        }

        return subscriptionsApiListCall(productsApiFindRequest, page, _callback);

    }

    /**
     * 
     * 
     * @param productsApiFindRequest  (required)
     * @param page  (optional)
     * @return List&lt;SubscriptionView&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<SubscriptionView> subscriptionsApiList(ProductsApiFindRequest productsApiFindRequest, Integer page) throws ApiException {
        ApiResponse<List<SubscriptionView>> localVarResp = subscriptionsApiListWithHttpInfo(productsApiFindRequest, page);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param productsApiFindRequest  (required)
     * @param page  (optional)
     * @return ApiResponse&lt;List&lt;SubscriptionView&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<SubscriptionView>> subscriptionsApiListWithHttpInfo(ProductsApiFindRequest productsApiFindRequest, Integer page) throws ApiException {
        okhttp3.Call localVarCall = subscriptionsApiListValidateBeforeCall(productsApiFindRequest, page, null);
        Type localVarReturnType = new TypeToken<List<SubscriptionView>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param productsApiFindRequest  (required)
     * @param page  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call subscriptionsApiListAsync(ProductsApiFindRequest productsApiFindRequest, Integer page, final ApiCallback<List<SubscriptionView>> _callback) throws ApiException {

        okhttp3.Call localVarCall = subscriptionsApiListValidateBeforeCall(productsApiFindRequest, page, _callback);
        Type localVarReturnType = new TypeToken<List<SubscriptionView>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for subscriptionsApiPutSubscription
     * @param subscriptionsApiPutSubscriptionRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call subscriptionsApiPutSubscriptionCall(SubscriptionsApiPutSubscriptionRequest subscriptionsApiPutSubscriptionRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = subscriptionsApiPutSubscriptionRequest;

        // create path and map variables
        String localVarPath = "/v1/SubscriptionsApi";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call subscriptionsApiPutSubscriptionValidateBeforeCall(SubscriptionsApiPutSubscriptionRequest subscriptionsApiPutSubscriptionRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionsApiPutSubscriptionRequest' is set
        if (subscriptionsApiPutSubscriptionRequest == null) {
            throw new ApiException("Missing the required parameter 'subscriptionsApiPutSubscriptionRequest' when calling subscriptionsApiPutSubscription(Async)");
        }

        return subscriptionsApiPutSubscriptionCall(subscriptionsApiPutSubscriptionRequest, _callback);

    }

    /**
     * 
     * 
     * @param subscriptionsApiPutSubscriptionRequest  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void subscriptionsApiPutSubscription(SubscriptionsApiPutSubscriptionRequest subscriptionsApiPutSubscriptionRequest) throws ApiException {
        subscriptionsApiPutSubscriptionWithHttpInfo(subscriptionsApiPutSubscriptionRequest);
    }

    /**
     * 
     * 
     * @param subscriptionsApiPutSubscriptionRequest  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> subscriptionsApiPutSubscriptionWithHttpInfo(SubscriptionsApiPutSubscriptionRequest subscriptionsApiPutSubscriptionRequest) throws ApiException {
        okhttp3.Call localVarCall = subscriptionsApiPutSubscriptionValidateBeforeCall(subscriptionsApiPutSubscriptionRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param subscriptionsApiPutSubscriptionRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call subscriptionsApiPutSubscriptionAsync(SubscriptionsApiPutSubscriptionRequest subscriptionsApiPutSubscriptionRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = subscriptionsApiPutSubscriptionValidateBeforeCall(subscriptionsApiPutSubscriptionRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for subscriptionsApiPutSubscription2
     * @param subscriptionsApiPutSubscriptionRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call subscriptionsApiPutSubscription2Call(SubscriptionsApiPutSubscriptionRequest subscriptionsApiPutSubscriptionRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = subscriptionsApiPutSubscriptionRequest;

        // create path and map variables
        String localVarPath = "/v1/SubscriptionsApi";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call subscriptionsApiPutSubscription2ValidateBeforeCall(SubscriptionsApiPutSubscriptionRequest subscriptionsApiPutSubscriptionRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionsApiPutSubscriptionRequest' is set
        if (subscriptionsApiPutSubscriptionRequest == null) {
            throw new ApiException("Missing the required parameter 'subscriptionsApiPutSubscriptionRequest' when calling subscriptionsApiPutSubscription2(Async)");
        }

        return subscriptionsApiPutSubscription2Call(subscriptionsApiPutSubscriptionRequest, _callback);

    }

    /**
     * 
     * 
     * @param subscriptionsApiPutSubscriptionRequest  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void subscriptionsApiPutSubscription2(SubscriptionsApiPutSubscriptionRequest subscriptionsApiPutSubscriptionRequest) throws ApiException {
        subscriptionsApiPutSubscription2WithHttpInfo(subscriptionsApiPutSubscriptionRequest);
    }

    /**
     * 
     * 
     * @param subscriptionsApiPutSubscriptionRequest  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> subscriptionsApiPutSubscription2WithHttpInfo(SubscriptionsApiPutSubscriptionRequest subscriptionsApiPutSubscriptionRequest) throws ApiException {
        okhttp3.Call localVarCall = subscriptionsApiPutSubscription2ValidateBeforeCall(subscriptionsApiPutSubscriptionRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param subscriptionsApiPutSubscriptionRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call subscriptionsApiPutSubscription2Async(SubscriptionsApiPutSubscriptionRequest subscriptionsApiPutSubscriptionRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = subscriptionsApiPutSubscription2ValidateBeforeCall(subscriptionsApiPutSubscriptionRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for subscriptionsApiSave
     * @param subscriptionsApiPutSubscriptionRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call subscriptionsApiSaveCall(SubscriptionsApiPutSubscriptionRequest subscriptionsApiPutSubscriptionRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = subscriptionsApiPutSubscriptionRequest;

        // create path and map variables
        String localVarPath = "/v1/SubscriptionsApi/Save";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call subscriptionsApiSaveValidateBeforeCall(SubscriptionsApiPutSubscriptionRequest subscriptionsApiPutSubscriptionRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionsApiPutSubscriptionRequest' is set
        if (subscriptionsApiPutSubscriptionRequest == null) {
            throw new ApiException("Missing the required parameter 'subscriptionsApiPutSubscriptionRequest' when calling subscriptionsApiSave(Async)");
        }

        return subscriptionsApiSaveCall(subscriptionsApiPutSubscriptionRequest, _callback);

    }

    /**
     * 
     * 
     * @param subscriptionsApiPutSubscriptionRequest  (required)
     * @return KeysApiFind200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public KeysApiFind200Response subscriptionsApiSave(SubscriptionsApiPutSubscriptionRequest subscriptionsApiPutSubscriptionRequest) throws ApiException {
        ApiResponse<KeysApiFind200Response> localVarResp = subscriptionsApiSaveWithHttpInfo(subscriptionsApiPutSubscriptionRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param subscriptionsApiPutSubscriptionRequest  (required)
     * @return ApiResponse&lt;KeysApiFind200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<KeysApiFind200Response> subscriptionsApiSaveWithHttpInfo(SubscriptionsApiPutSubscriptionRequest subscriptionsApiPutSubscriptionRequest) throws ApiException {
        okhttp3.Call localVarCall = subscriptionsApiSaveValidateBeforeCall(subscriptionsApiPutSubscriptionRequest, null);
        Type localVarReturnType = new TypeToken<KeysApiFind200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param subscriptionsApiPutSubscriptionRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call subscriptionsApiSaveAsync(SubscriptionsApiPutSubscriptionRequest subscriptionsApiPutSubscriptionRequest, final ApiCallback<KeysApiFind200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = subscriptionsApiSaveValidateBeforeCall(subscriptionsApiPutSubscriptionRequest, _callback);
        Type localVarReturnType = new TypeToken<KeysApiFind200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
