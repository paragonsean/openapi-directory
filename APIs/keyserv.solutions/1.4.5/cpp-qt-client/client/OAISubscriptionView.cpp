/**
 * KeyServ
 * KeyServ API
 *
 * The version of the OpenAPI document: 1.4.5
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISubscriptionView.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISubscriptionView::OAISubscriptionView(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISubscriptionView::OAISubscriptionView() {
    this->initializeModel();
}

OAISubscriptionView::~OAISubscriptionView() {}

void OAISubscriptionView::initializeModel() {

    m_action_isSet = false;
    m_action_isValid = false;

    m_callback_on_modify_isSet = false;
    m_callback_on_modify_isValid = false;

    m_callback_url_isSet = false;
    m_callback_url_isValid = false;

    m_commenced_isSet = false;
    m_commenced_isValid = false;

    m_created_isSet = false;
    m_created_isValid = false;

    m_custom_isSet = false;
    m_custom_isValid = false;

    m_frequency_isSet = false;
    m_frequency_isValid = false;

    m_keys_isSet = false;
    m_keys_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_updated_isSet = false;
    m_updated_isValid = false;
}

void OAISubscriptionView::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISubscriptionView::fromJsonObject(QJsonObject json) {

    m_action_isValid = ::OpenAPI::fromJsonValue(m_action, json[QString("action")]);
    m_action_isSet = !json[QString("action")].isNull() && m_action_isValid;

    m_callback_on_modify_isValid = ::OpenAPI::fromJsonValue(m_callback_on_modify, json[QString("callbackOnModify")]);
    m_callback_on_modify_isSet = !json[QString("callbackOnModify")].isNull() && m_callback_on_modify_isValid;

    m_callback_url_isValid = ::OpenAPI::fromJsonValue(m_callback_url, json[QString("callbackUrl")]);
    m_callback_url_isSet = !json[QString("callbackUrl")].isNull() && m_callback_url_isValid;

    m_commenced_isValid = ::OpenAPI::fromJsonValue(m_commenced, json[QString("commenced")]);
    m_commenced_isSet = !json[QString("commenced")].isNull() && m_commenced_isValid;

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("created")]);
    m_created_isSet = !json[QString("created")].isNull() && m_created_isValid;

    m_custom_isValid = ::OpenAPI::fromJsonValue(m_custom, json[QString("custom")]);
    m_custom_isSet = !json[QString("custom")].isNull() && m_custom_isValid;

    m_frequency_isValid = ::OpenAPI::fromJsonValue(m_frequency, json[QString("frequency")]);
    m_frequency_isSet = !json[QString("frequency")].isNull() && m_frequency_isValid;

    m_keys_isValid = ::OpenAPI::fromJsonValue(m_keys, json[QString("keys")]);
    m_keys_isSet = !json[QString("keys")].isNull() && m_keys_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_updated_isValid = ::OpenAPI::fromJsonValue(m_updated, json[QString("updated")]);
    m_updated_isSet = !json[QString("updated")].isNull() && m_updated_isValid;
}

QString OAISubscriptionView::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISubscriptionView::asJsonObject() const {
    QJsonObject obj;
    if (m_action_isSet) {
        obj.insert(QString("action"), ::OpenAPI::toJsonValue(m_action));
    }
    if (m_callback_on_modify_isSet) {
        obj.insert(QString("callbackOnModify"), ::OpenAPI::toJsonValue(m_callback_on_modify));
    }
    if (m_callback_url_isSet) {
        obj.insert(QString("callbackUrl"), ::OpenAPI::toJsonValue(m_callback_url));
    }
    if (m_commenced_isSet) {
        obj.insert(QString("commenced"), ::OpenAPI::toJsonValue(m_commenced));
    }
    if (m_created_isSet) {
        obj.insert(QString("created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_custom_isSet) {
        obj.insert(QString("custom"), ::OpenAPI::toJsonValue(m_custom));
    }
    if (m_frequency_isSet) {
        obj.insert(QString("frequency"), ::OpenAPI::toJsonValue(m_frequency));
    }
    if (m_keys.size() > 0) {
        obj.insert(QString("keys"), ::OpenAPI::toJsonValue(m_keys));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_updated_isSet) {
        obj.insert(QString("updated"), ::OpenAPI::toJsonValue(m_updated));
    }
    return obj;
}

QString OAISubscriptionView::getAction() const {
    return m_action;
}
void OAISubscriptionView::setAction(const QString &action) {
    m_action = action;
    m_action_isSet = true;
}

bool OAISubscriptionView::is_action_Set() const{
    return m_action_isSet;
}

bool OAISubscriptionView::is_action_Valid() const{
    return m_action_isValid;
}

bool OAISubscriptionView::isCallbackOnModify() const {
    return m_callback_on_modify;
}
void OAISubscriptionView::setCallbackOnModify(const bool &callback_on_modify) {
    m_callback_on_modify = callback_on_modify;
    m_callback_on_modify_isSet = true;
}

bool OAISubscriptionView::is_callback_on_modify_Set() const{
    return m_callback_on_modify_isSet;
}

bool OAISubscriptionView::is_callback_on_modify_Valid() const{
    return m_callback_on_modify_isValid;
}

QString OAISubscriptionView::getCallbackUrl() const {
    return m_callback_url;
}
void OAISubscriptionView::setCallbackUrl(const QString &callback_url) {
    m_callback_url = callback_url;
    m_callback_url_isSet = true;
}

bool OAISubscriptionView::is_callback_url_Set() const{
    return m_callback_url_isSet;
}

bool OAISubscriptionView::is_callback_url_Valid() const{
    return m_callback_url_isValid;
}

QDateTime OAISubscriptionView::getCommenced() const {
    return m_commenced;
}
void OAISubscriptionView::setCommenced(const QDateTime &commenced) {
    m_commenced = commenced;
    m_commenced_isSet = true;
}

bool OAISubscriptionView::is_commenced_Set() const{
    return m_commenced_isSet;
}

bool OAISubscriptionView::is_commenced_Valid() const{
    return m_commenced_isValid;
}

QDateTime OAISubscriptionView::getCreated() const {
    return m_created;
}
void OAISubscriptionView::setCreated(const QDateTime &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAISubscriptionView::is_created_Set() const{
    return m_created_isSet;
}

bool OAISubscriptionView::is_created_Valid() const{
    return m_created_isValid;
}

QJsonValue OAISubscriptionView::getCustom() const {
    return m_custom;
}
void OAISubscriptionView::setCustom(const QJsonValue &custom) {
    m_custom = custom;
    m_custom_isSet = true;
}

bool OAISubscriptionView::is_custom_Set() const{
    return m_custom_isSet;
}

bool OAISubscriptionView::is_custom_Valid() const{
    return m_custom_isValid;
}

QString OAISubscriptionView::getFrequency() const {
    return m_frequency;
}
void OAISubscriptionView::setFrequency(const QString &frequency) {
    m_frequency = frequency;
    m_frequency_isSet = true;
}

bool OAISubscriptionView::is_frequency_Set() const{
    return m_frequency_isSet;
}

bool OAISubscriptionView::is_frequency_Valid() const{
    return m_frequency_isValid;
}

QList<OAIKeyView> OAISubscriptionView::getKeys() const {
    return m_keys;
}
void OAISubscriptionView::setKeys(const QList<OAIKeyView> &keys) {
    m_keys = keys;
    m_keys_isSet = true;
}

bool OAISubscriptionView::is_keys_Set() const{
    return m_keys_isSet;
}

bool OAISubscriptionView::is_keys_Valid() const{
    return m_keys_isValid;
}

QString OAISubscriptionView::getName() const {
    return m_name;
}
void OAISubscriptionView::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAISubscriptionView::is_name_Set() const{
    return m_name_isSet;
}

bool OAISubscriptionView::is_name_Valid() const{
    return m_name_isValid;
}

QDateTime OAISubscriptionView::getUpdated() const {
    return m_updated;
}
void OAISubscriptionView::setUpdated(const QDateTime &updated) {
    m_updated = updated;
    m_updated_isSet = true;
}

bool OAISubscriptionView::is_updated_Set() const{
    return m_updated_isSet;
}

bool OAISubscriptionView::is_updated_Valid() const{
    return m_updated_isValid;
}

bool OAISubscriptionView::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_action_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_callback_on_modify_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_callback_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_commenced_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_frequency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_keys.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISubscriptionView::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_action_isValid && m_callback_on_modify_isValid && m_commenced_isValid && m_frequency_isValid && true;
}

} // namespace OpenAPI
