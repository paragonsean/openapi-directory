/**
 * KeyServ
 * KeyServ API
 *
 * The version of the OpenAPI document: 1.4.5
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIProductsApiApi_H
#define OAI_OAIProductsApiApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIProductView.h"
#include "OAIProductsApi_Count_200_response.h"
#include "OAIProductsApi_Count_request.h"
#include "OAIProductsApi_Find_200_response.h"
#include "OAIProductsApi_Find_request.h"
#include "OAIProductsApi_PatchProduct2_request.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIProductsApiApi : public QObject {
    Q_OBJECT

public:
    OAIProductsApiApi(const int timeOut = 0);
    ~OAIProductsApiApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_products_api_count_request OAIProductsApi_Count_request [required]
    */
    virtual void productsApiCount(const OAIProductsApi_Count_request &oai_products_api_count_request);

    /**
    * @param[in]  x_api_key QString [required]
    * @param[in]  serial QString [required]
    */
    virtual void productsApiDeleteProduct(const QString &x_api_key, const QString &serial);

    /**
    * @param[in]  x_api_key QString [required]
    * @param[in]  serial QString [required]
    */
    virtual void productsApiDeleteProduct2(const QString &x_api_key, const QString &serial);

    /**
    * @param[in]  oai_products_api_find_request OAIProductsApi_Find_request [required]
    * @param[in]  page qint32 [optional]
    */
    virtual void productsApiFind(const OAIProductsApi_Find_request &oai_products_api_find_request, const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  oai_products_api_count_request OAIProductsApi_Count_request [required]
    * @param[in]  page qint32 [optional]
    */
    virtual void productsApiList(const OAIProductsApi_Count_request &oai_products_api_count_request, const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  oai_products_api_patch_product2_request OAIProductsApi_PatchProduct2_request [required]
    */
    virtual void productsApiPatchProduct(const OAIProductsApi_PatchProduct2_request &oai_products_api_patch_product2_request);

    /**
    * @param[in]  oai_products_api_patch_product2_request OAIProductsApi_PatchProduct2_request [required]
    */
    virtual void productsApiPatchProduct2(const OAIProductsApi_PatchProduct2_request &oai_products_api_patch_product2_request);

    /**
    * @param[in]  oai_products_api_patch_product2_request OAIProductsApi_PatchProduct2_request [required]
    */
    virtual void productsApiSave(const OAIProductsApi_PatchProduct2_request &oai_products_api_patch_product2_request);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void productsApiCountCallback(OAIHttpRequestWorker *worker);
    void productsApiDeleteProductCallback(OAIHttpRequestWorker *worker);
    void productsApiDeleteProduct2Callback(OAIHttpRequestWorker *worker);
    void productsApiFindCallback(OAIHttpRequestWorker *worker);
    void productsApiListCallback(OAIHttpRequestWorker *worker);
    void productsApiPatchProductCallback(OAIHttpRequestWorker *worker);
    void productsApiPatchProduct2Callback(OAIHttpRequestWorker *worker);
    void productsApiSaveCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void productsApiCountSignal(OAIProductsApi_Count_200_response summary);
    void productsApiDeleteProductSignal();
    void productsApiDeleteProduct2Signal();
    void productsApiFindSignal(OAIProductsApi_Find_200_response summary);
    void productsApiListSignal(QList<OAIProductView> summary);
    void productsApiPatchProductSignal();
    void productsApiPatchProduct2Signal();
    void productsApiSaveSignal(OAIProductsApi_Find_200_response summary);


    void productsApiCountSignalFull(OAIHttpRequestWorker *worker, OAIProductsApi_Count_200_response summary);
    void productsApiDeleteProductSignalFull(OAIHttpRequestWorker *worker);
    void productsApiDeleteProduct2SignalFull(OAIHttpRequestWorker *worker);
    void productsApiFindSignalFull(OAIHttpRequestWorker *worker, OAIProductsApi_Find_200_response summary);
    void productsApiListSignalFull(OAIHttpRequestWorker *worker, QList<OAIProductView> summary);
    void productsApiPatchProductSignalFull(OAIHttpRequestWorker *worker);
    void productsApiPatchProduct2SignalFull(OAIHttpRequestWorker *worker);
    void productsApiSaveSignalFull(OAIHttpRequestWorker *worker, OAIProductsApi_Find_200_response summary);

    Q_DECL_DEPRECATED_X("Use productsApiCountSignalError() instead")
    void productsApiCountSignalE(OAIProductsApi_Count_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void productsApiCountSignalError(OAIProductsApi_Count_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productsApiDeleteProductSignalError() instead")
    void productsApiDeleteProductSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void productsApiDeleteProductSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productsApiDeleteProduct2SignalError() instead")
    void productsApiDeleteProduct2SignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void productsApiDeleteProduct2SignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productsApiFindSignalError() instead")
    void productsApiFindSignalE(OAIProductsApi_Find_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void productsApiFindSignalError(OAIProductsApi_Find_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productsApiListSignalError() instead")
    void productsApiListSignalE(QList<OAIProductView> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void productsApiListSignalError(QList<OAIProductView> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productsApiPatchProductSignalError() instead")
    void productsApiPatchProductSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void productsApiPatchProductSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productsApiPatchProduct2SignalError() instead")
    void productsApiPatchProduct2SignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void productsApiPatchProduct2SignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productsApiSaveSignalError() instead")
    void productsApiSaveSignalE(OAIProductsApi_Find_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void productsApiSaveSignalError(OAIProductsApi_Find_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use productsApiCountSignalErrorFull() instead")
    void productsApiCountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void productsApiCountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productsApiDeleteProductSignalErrorFull() instead")
    void productsApiDeleteProductSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void productsApiDeleteProductSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productsApiDeleteProduct2SignalErrorFull() instead")
    void productsApiDeleteProduct2SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void productsApiDeleteProduct2SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productsApiFindSignalErrorFull() instead")
    void productsApiFindSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void productsApiFindSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productsApiListSignalErrorFull() instead")
    void productsApiListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void productsApiListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productsApiPatchProductSignalErrorFull() instead")
    void productsApiPatchProductSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void productsApiPatchProductSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productsApiPatchProduct2SignalErrorFull() instead")
    void productsApiPatchProduct2SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void productsApiPatchProduct2SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productsApiSaveSignalErrorFull() instead")
    void productsApiSaveSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void productsApiSaveSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
