/**
 * KeyServ
 * KeyServ API
 *
 * The version of the OpenAPI document: 1.4.5
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAISubscriptionsApiApi_H
#define OAI_OAISubscriptionsApiApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIKeysApi_Find_200_response.h"
#include "OAIProductsApi_Count_200_response.h"
#include "OAIProductsApi_Find_request.h"
#include "OAISubscriptionView.h"
#include "OAISubscriptionsApi_Count_request.h"
#include "OAISubscriptionsApi_Find_200_response.h"
#include "OAISubscriptionsApi_PutSubscription_request.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAISubscriptionsApiApi : public QObject {
    Q_OBJECT

public:
    OAISubscriptionsApiApi(const int timeOut = 0);
    ~OAISubscriptionsApiApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_subscriptions_api_count_request OAISubscriptionsApi_Count_request [required]
    */
    virtual void subscriptionsApiCount(const OAISubscriptionsApi_Count_request &oai_subscriptions_api_count_request);

    /**
    * @param[in]  x_api_key QString [required]
    * @param[in]  serial QString [required]
    * @param[in]  keep bool [required]
    */
    virtual void subscriptionsApiDeleteSubscription(const QString &x_api_key, const QString &serial, const bool &keep);

    /**
    * @param[in]  x_api_key QString [required]
    * @param[in]  serial QString [required]
    * @param[in]  keep bool [required]
    */
    virtual void subscriptionsApiDeleteSubscription2(const QString &x_api_key, const QString &serial, const bool &keep);

    /**
    * @param[in]  oai_products_api_find_request OAIProductsApi_Find_request [required]
    */
    virtual void subscriptionsApiDisable(const OAIProductsApi_Find_request &oai_products_api_find_request);

    /**
    * @param[in]  oai_products_api_find_request OAIProductsApi_Find_request [required]
    */
    virtual void subscriptionsApiDisable2(const OAIProductsApi_Find_request &oai_products_api_find_request);

    /**
    * @param[in]  oai_products_api_find_request OAIProductsApi_Find_request [required]
    */
    virtual void subscriptionsApiEnable(const OAIProductsApi_Find_request &oai_products_api_find_request);

    /**
    * @param[in]  oai_products_api_find_request OAIProductsApi_Find_request [required]
    */
    virtual void subscriptionsApiEnable2(const OAIProductsApi_Find_request &oai_products_api_find_request);

    /**
    * @param[in]  oai_products_api_find_request OAIProductsApi_Find_request [required]
    */
    virtual void subscriptionsApiFind(const OAIProductsApi_Find_request &oai_products_api_find_request);

    /**
    * @param[in]  oai_products_api_find_request OAIProductsApi_Find_request [required]
    * @param[in]  page qint32 [optional]
    */
    virtual void subscriptionsApiList(const OAIProductsApi_Find_request &oai_products_api_find_request, const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  oai_subscriptions_api_put_subscription_request OAISubscriptionsApi_PutSubscription_request [required]
    */
    virtual void subscriptionsApiPutSubscription(const OAISubscriptionsApi_PutSubscription_request &oai_subscriptions_api_put_subscription_request);

    /**
    * @param[in]  oai_subscriptions_api_put_subscription_request OAISubscriptionsApi_PutSubscription_request [required]
    */
    virtual void subscriptionsApiPutSubscription2(const OAISubscriptionsApi_PutSubscription_request &oai_subscriptions_api_put_subscription_request);

    /**
    * @param[in]  oai_subscriptions_api_put_subscription_request OAISubscriptionsApi_PutSubscription_request [required]
    */
    virtual void subscriptionsApiSave(const OAISubscriptionsApi_PutSubscription_request &oai_subscriptions_api_put_subscription_request);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void subscriptionsApiCountCallback(OAIHttpRequestWorker *worker);
    void subscriptionsApiDeleteSubscriptionCallback(OAIHttpRequestWorker *worker);
    void subscriptionsApiDeleteSubscription2Callback(OAIHttpRequestWorker *worker);
    void subscriptionsApiDisableCallback(OAIHttpRequestWorker *worker);
    void subscriptionsApiDisable2Callback(OAIHttpRequestWorker *worker);
    void subscriptionsApiEnableCallback(OAIHttpRequestWorker *worker);
    void subscriptionsApiEnable2Callback(OAIHttpRequestWorker *worker);
    void subscriptionsApiFindCallback(OAIHttpRequestWorker *worker);
    void subscriptionsApiListCallback(OAIHttpRequestWorker *worker);
    void subscriptionsApiPutSubscriptionCallback(OAIHttpRequestWorker *worker);
    void subscriptionsApiPutSubscription2Callback(OAIHttpRequestWorker *worker);
    void subscriptionsApiSaveCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void subscriptionsApiCountSignal(OAIProductsApi_Count_200_response summary);
    void subscriptionsApiDeleteSubscriptionSignal();
    void subscriptionsApiDeleteSubscription2Signal();
    void subscriptionsApiDisableSignal();
    void subscriptionsApiDisable2Signal();
    void subscriptionsApiEnableSignal();
    void subscriptionsApiEnable2Signal();
    void subscriptionsApiFindSignal(OAISubscriptionsApi_Find_200_response summary);
    void subscriptionsApiListSignal(QList<OAISubscriptionView> summary);
    void subscriptionsApiPutSubscriptionSignal();
    void subscriptionsApiPutSubscription2Signal();
    void subscriptionsApiSaveSignal(OAIKeysApi_Find_200_response summary);


    void subscriptionsApiCountSignalFull(OAIHttpRequestWorker *worker, OAIProductsApi_Count_200_response summary);
    void subscriptionsApiDeleteSubscriptionSignalFull(OAIHttpRequestWorker *worker);
    void subscriptionsApiDeleteSubscription2SignalFull(OAIHttpRequestWorker *worker);
    void subscriptionsApiDisableSignalFull(OAIHttpRequestWorker *worker);
    void subscriptionsApiDisable2SignalFull(OAIHttpRequestWorker *worker);
    void subscriptionsApiEnableSignalFull(OAIHttpRequestWorker *worker);
    void subscriptionsApiEnable2SignalFull(OAIHttpRequestWorker *worker);
    void subscriptionsApiFindSignalFull(OAIHttpRequestWorker *worker, OAISubscriptionsApi_Find_200_response summary);
    void subscriptionsApiListSignalFull(OAIHttpRequestWorker *worker, QList<OAISubscriptionView> summary);
    void subscriptionsApiPutSubscriptionSignalFull(OAIHttpRequestWorker *worker);
    void subscriptionsApiPutSubscription2SignalFull(OAIHttpRequestWorker *worker);
    void subscriptionsApiSaveSignalFull(OAIHttpRequestWorker *worker, OAIKeysApi_Find_200_response summary);

    Q_DECL_DEPRECATED_X("Use subscriptionsApiCountSignalError() instead")
    void subscriptionsApiCountSignalE(OAIProductsApi_Count_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void subscriptionsApiCountSignalError(OAIProductsApi_Count_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use subscriptionsApiDeleteSubscriptionSignalError() instead")
    void subscriptionsApiDeleteSubscriptionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void subscriptionsApiDeleteSubscriptionSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use subscriptionsApiDeleteSubscription2SignalError() instead")
    void subscriptionsApiDeleteSubscription2SignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void subscriptionsApiDeleteSubscription2SignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use subscriptionsApiDisableSignalError() instead")
    void subscriptionsApiDisableSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void subscriptionsApiDisableSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use subscriptionsApiDisable2SignalError() instead")
    void subscriptionsApiDisable2SignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void subscriptionsApiDisable2SignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use subscriptionsApiEnableSignalError() instead")
    void subscriptionsApiEnableSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void subscriptionsApiEnableSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use subscriptionsApiEnable2SignalError() instead")
    void subscriptionsApiEnable2SignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void subscriptionsApiEnable2SignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use subscriptionsApiFindSignalError() instead")
    void subscriptionsApiFindSignalE(OAISubscriptionsApi_Find_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void subscriptionsApiFindSignalError(OAISubscriptionsApi_Find_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use subscriptionsApiListSignalError() instead")
    void subscriptionsApiListSignalE(QList<OAISubscriptionView> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void subscriptionsApiListSignalError(QList<OAISubscriptionView> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use subscriptionsApiPutSubscriptionSignalError() instead")
    void subscriptionsApiPutSubscriptionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void subscriptionsApiPutSubscriptionSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use subscriptionsApiPutSubscription2SignalError() instead")
    void subscriptionsApiPutSubscription2SignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void subscriptionsApiPutSubscription2SignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use subscriptionsApiSaveSignalError() instead")
    void subscriptionsApiSaveSignalE(OAIKeysApi_Find_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void subscriptionsApiSaveSignalError(OAIKeysApi_Find_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use subscriptionsApiCountSignalErrorFull() instead")
    void subscriptionsApiCountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void subscriptionsApiCountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use subscriptionsApiDeleteSubscriptionSignalErrorFull() instead")
    void subscriptionsApiDeleteSubscriptionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void subscriptionsApiDeleteSubscriptionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use subscriptionsApiDeleteSubscription2SignalErrorFull() instead")
    void subscriptionsApiDeleteSubscription2SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void subscriptionsApiDeleteSubscription2SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use subscriptionsApiDisableSignalErrorFull() instead")
    void subscriptionsApiDisableSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void subscriptionsApiDisableSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use subscriptionsApiDisable2SignalErrorFull() instead")
    void subscriptionsApiDisable2SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void subscriptionsApiDisable2SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use subscriptionsApiEnableSignalErrorFull() instead")
    void subscriptionsApiEnableSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void subscriptionsApiEnableSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use subscriptionsApiEnable2SignalErrorFull() instead")
    void subscriptionsApiEnable2SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void subscriptionsApiEnable2SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use subscriptionsApiFindSignalErrorFull() instead")
    void subscriptionsApiFindSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void subscriptionsApiFindSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use subscriptionsApiListSignalErrorFull() instead")
    void subscriptionsApiListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void subscriptionsApiListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use subscriptionsApiPutSubscriptionSignalErrorFull() instead")
    void subscriptionsApiPutSubscriptionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void subscriptionsApiPutSubscriptionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use subscriptionsApiPutSubscription2SignalErrorFull() instead")
    void subscriptionsApiPutSubscription2SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void subscriptionsApiPutSubscription2SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use subscriptionsApiSaveSignalErrorFull() instead")
    void subscriptionsApiSaveSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void subscriptionsApiSaveSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
