/**
 * KeyServ
 * KeyServ API
 *
 * The version of the OpenAPI document: 1.4.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import KeysApiFind200Response from '../model/KeysApiFind200Response';
import ProductsApiCount200Response from '../model/ProductsApiCount200Response';
import ProductsApiFindRequest from '../model/ProductsApiFindRequest';
import SubscriptionView from '../model/SubscriptionView';
import SubscriptionsApiCountRequest from '../model/SubscriptionsApiCountRequest';
import SubscriptionsApiFind200Response from '../model/SubscriptionsApiFind200Response';
import SubscriptionsApiPutSubscriptionRequest from '../model/SubscriptionsApiPutSubscriptionRequest';

/**
* SubscriptionsApi service.
* @module api/SubscriptionsApiApi
* @version 1.4.5
*/
export default class SubscriptionsApiApi {

    /**
    * Constructs a new SubscriptionsApiApi. 
    * @alias module:api/SubscriptionsApiApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the subscriptionsApiCount operation.
     * @callback module:api/SubscriptionsApiApi~subscriptionsApiCountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProductsApiCount200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/SubscriptionsApiCountRequest} subscriptionsApiCountRequest 
     * @param {module:api/SubscriptionsApiApi~subscriptionsApiCountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProductsApiCount200Response}
     */
    subscriptionsApiCount(subscriptionsApiCountRequest, callback) {
      let postBody = subscriptionsApiCountRequest;
      // verify the required parameter 'subscriptionsApiCountRequest' is set
      if (subscriptionsApiCountRequest === undefined || subscriptionsApiCountRequest === null) {
        throw new Error("Missing the required parameter 'subscriptionsApiCountRequest' when calling subscriptionsApiCount");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProductsApiCount200Response;
      return this.apiClient.callApi(
        '/v1/SubscriptionsApi/Count', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the subscriptionsApiDeleteSubscription operation.
     * @callback module:api/SubscriptionsApiApi~subscriptionsApiDeleteSubscriptionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} xApiKey 
     * @param {String} serial 
     * @param {Boolean} keep 
     * @param {module:api/SubscriptionsApiApi~subscriptionsApiDeleteSubscriptionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    subscriptionsApiDeleteSubscription(xApiKey, serial, keep, callback) {
      let postBody = null;
      // verify the required parameter 'xApiKey' is set
      if (xApiKey === undefined || xApiKey === null) {
        throw new Error("Missing the required parameter 'xApiKey' when calling subscriptionsApiDeleteSubscription");
      }
      // verify the required parameter 'serial' is set
      if (serial === undefined || serial === null) {
        throw new Error("Missing the required parameter 'serial' when calling subscriptionsApiDeleteSubscription");
      }
      // verify the required parameter 'keep' is set
      if (keep === undefined || keep === null) {
        throw new Error("Missing the required parameter 'keep' when calling subscriptionsApiDeleteSubscription");
      }

      let pathParams = {
        'serial': serial
      };
      let queryParams = {
        'keep': keep
      };
      let headerParams = {
        'X-Api-Key': xApiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/SubscriptionsApi/{serial}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the subscriptionsApiDeleteSubscription2 operation.
     * @callback module:api/SubscriptionsApiApi~subscriptionsApiDeleteSubscription2Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} xApiKey 
     * @param {String} serial 
     * @param {Boolean} keep 
     * @param {module:api/SubscriptionsApiApi~subscriptionsApiDeleteSubscription2Callback} callback The callback function, accepting three arguments: error, data, response
     */
    subscriptionsApiDeleteSubscription2(xApiKey, serial, keep, callback) {
      let postBody = null;
      // verify the required parameter 'xApiKey' is set
      if (xApiKey === undefined || xApiKey === null) {
        throw new Error("Missing the required parameter 'xApiKey' when calling subscriptionsApiDeleteSubscription2");
      }
      // verify the required parameter 'serial' is set
      if (serial === undefined || serial === null) {
        throw new Error("Missing the required parameter 'serial' when calling subscriptionsApiDeleteSubscription2");
      }
      // verify the required parameter 'keep' is set
      if (keep === undefined || keep === null) {
        throw new Error("Missing the required parameter 'keep' when calling subscriptionsApiDeleteSubscription2");
      }

      let pathParams = {
        'serial': serial
      };
      let queryParams = {
        'keep': keep
      };
      let headerParams = {
        'X-Api-Key': xApiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/SubscriptionsApi/{serial}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the subscriptionsApiDisable operation.
     * @callback module:api/SubscriptionsApiApi~subscriptionsApiDisableCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/ProductsApiFindRequest} productsApiFindRequest 
     * @param {module:api/SubscriptionsApiApi~subscriptionsApiDisableCallback} callback The callback function, accepting three arguments: error, data, response
     */
    subscriptionsApiDisable(productsApiFindRequest, callback) {
      let postBody = productsApiFindRequest;
      // verify the required parameter 'productsApiFindRequest' is set
      if (productsApiFindRequest === undefined || productsApiFindRequest === null) {
        throw new Error("Missing the required parameter 'productsApiFindRequest' when calling subscriptionsApiDisable");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/SubscriptionsApi/Disable', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the subscriptionsApiDisable2 operation.
     * @callback module:api/SubscriptionsApiApi~subscriptionsApiDisable2Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/ProductsApiFindRequest} productsApiFindRequest 
     * @param {module:api/SubscriptionsApiApi~subscriptionsApiDisable2Callback} callback The callback function, accepting three arguments: error, data, response
     */
    subscriptionsApiDisable2(productsApiFindRequest, callback) {
      let postBody = productsApiFindRequest;
      // verify the required parameter 'productsApiFindRequest' is set
      if (productsApiFindRequest === undefined || productsApiFindRequest === null) {
        throw new Error("Missing the required parameter 'productsApiFindRequest' when calling subscriptionsApiDisable2");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/SubscriptionsApi/Disable', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the subscriptionsApiEnable operation.
     * @callback module:api/SubscriptionsApiApi~subscriptionsApiEnableCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/ProductsApiFindRequest} productsApiFindRequest 
     * @param {module:api/SubscriptionsApiApi~subscriptionsApiEnableCallback} callback The callback function, accepting three arguments: error, data, response
     */
    subscriptionsApiEnable(productsApiFindRequest, callback) {
      let postBody = productsApiFindRequest;
      // verify the required parameter 'productsApiFindRequest' is set
      if (productsApiFindRequest === undefined || productsApiFindRequest === null) {
        throw new Error("Missing the required parameter 'productsApiFindRequest' when calling subscriptionsApiEnable");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/SubscriptionsApi/Enable', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the subscriptionsApiEnable2 operation.
     * @callback module:api/SubscriptionsApiApi~subscriptionsApiEnable2Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/ProductsApiFindRequest} productsApiFindRequest 
     * @param {module:api/SubscriptionsApiApi~subscriptionsApiEnable2Callback} callback The callback function, accepting three arguments: error, data, response
     */
    subscriptionsApiEnable2(productsApiFindRequest, callback) {
      let postBody = productsApiFindRequest;
      // verify the required parameter 'productsApiFindRequest' is set
      if (productsApiFindRequest === undefined || productsApiFindRequest === null) {
        throw new Error("Missing the required parameter 'productsApiFindRequest' when calling subscriptionsApiEnable2");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/SubscriptionsApi/Enable', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the subscriptionsApiFind operation.
     * @callback module:api/SubscriptionsApiApi~subscriptionsApiFindCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SubscriptionsApiFind200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/ProductsApiFindRequest} productsApiFindRequest 
     * @param {module:api/SubscriptionsApiApi~subscriptionsApiFindCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SubscriptionsApiFind200Response}
     */
    subscriptionsApiFind(productsApiFindRequest, callback) {
      let postBody = productsApiFindRequest;
      // verify the required parameter 'productsApiFindRequest' is set
      if (productsApiFindRequest === undefined || productsApiFindRequest === null) {
        throw new Error("Missing the required parameter 'productsApiFindRequest' when calling subscriptionsApiFind");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SubscriptionsApiFind200Response;
      return this.apiClient.callApi(
        '/v1/SubscriptionsApi/Find', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the subscriptionsApiList operation.
     * @callback module:api/SubscriptionsApiApi~subscriptionsApiListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SubscriptionView>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/ProductsApiFindRequest} productsApiFindRequest 
     * @param {Object} opts Optional parameters
     * @param {Number} [page] 
     * @param {module:api/SubscriptionsApiApi~subscriptionsApiListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SubscriptionView>}
     */
    subscriptionsApiList(productsApiFindRequest, opts, callback) {
      opts = opts || {};
      let postBody = productsApiFindRequest;
      // verify the required parameter 'productsApiFindRequest' is set
      if (productsApiFindRequest === undefined || productsApiFindRequest === null) {
        throw new Error("Missing the required parameter 'productsApiFindRequest' when calling subscriptionsApiList");
      }

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [SubscriptionView];
      return this.apiClient.callApi(
        '/v1/SubscriptionsApi/List', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the subscriptionsApiPutSubscription operation.
     * @callback module:api/SubscriptionsApiApi~subscriptionsApiPutSubscriptionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/SubscriptionsApiPutSubscriptionRequest} subscriptionsApiPutSubscriptionRequest 
     * @param {module:api/SubscriptionsApiApi~subscriptionsApiPutSubscriptionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    subscriptionsApiPutSubscription(subscriptionsApiPutSubscriptionRequest, callback) {
      let postBody = subscriptionsApiPutSubscriptionRequest;
      // verify the required parameter 'subscriptionsApiPutSubscriptionRequest' is set
      if (subscriptionsApiPutSubscriptionRequest === undefined || subscriptionsApiPutSubscriptionRequest === null) {
        throw new Error("Missing the required parameter 'subscriptionsApiPutSubscriptionRequest' when calling subscriptionsApiPutSubscription");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/SubscriptionsApi', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the subscriptionsApiPutSubscription2 operation.
     * @callback module:api/SubscriptionsApiApi~subscriptionsApiPutSubscription2Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/SubscriptionsApiPutSubscriptionRequest} subscriptionsApiPutSubscriptionRequest 
     * @param {module:api/SubscriptionsApiApi~subscriptionsApiPutSubscription2Callback} callback The callback function, accepting three arguments: error, data, response
     */
    subscriptionsApiPutSubscription2(subscriptionsApiPutSubscriptionRequest, callback) {
      let postBody = subscriptionsApiPutSubscriptionRequest;
      // verify the required parameter 'subscriptionsApiPutSubscriptionRequest' is set
      if (subscriptionsApiPutSubscriptionRequest === undefined || subscriptionsApiPutSubscriptionRequest === null) {
        throw new Error("Missing the required parameter 'subscriptionsApiPutSubscriptionRequest' when calling subscriptionsApiPutSubscription2");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/SubscriptionsApi', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the subscriptionsApiSave operation.
     * @callback module:api/SubscriptionsApiApi~subscriptionsApiSaveCallback
     * @param {String} error Error message, if any.
     * @param {module:model/KeysApiFind200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/SubscriptionsApiPutSubscriptionRequest} subscriptionsApiPutSubscriptionRequest 
     * @param {module:api/SubscriptionsApiApi~subscriptionsApiSaveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/KeysApiFind200Response}
     */
    subscriptionsApiSave(subscriptionsApiPutSubscriptionRequest, callback) {
      let postBody = subscriptionsApiPutSubscriptionRequest;
      // verify the required parameter 'subscriptionsApiPutSubscriptionRequest' is set
      if (subscriptionsApiPutSubscriptionRequest === undefined || subscriptionsApiPutSubscriptionRequest === null) {
        throw new Error("Missing the required parameter 'subscriptionsApiPutSubscriptionRequest' when calling subscriptionsApiSave");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = KeysApiFind200Response;
      return this.apiClient.callApi(
        '/v1/SubscriptionsApi/Save', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
