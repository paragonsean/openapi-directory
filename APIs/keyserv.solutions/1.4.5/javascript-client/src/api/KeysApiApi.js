/**
 * KeyServ
 * KeyServ API
 *
 * The version of the OpenAPI document: 1.4.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import KeysApiCurrent200Response from '../model/KeysApiCurrent200Response';
import KeysApiExpiry200Response from '../model/KeysApiExpiry200Response';
import KeysApiFind200Response from '../model/KeysApiFind200Response';

/**
* KeysApi service.
* @module api/KeysApiApi
* @version 1.4.5
*/
export default class KeysApiApi {

    /**
    * Constructs a new KeysApiApi. 
    * @alias module:api/KeysApiApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the keysApiCurrent operation.
     * @callback module:api/KeysApiApi~keysApiCurrentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/KeysApiCurrent200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} serial 
     * @param {module:api/KeysApiApi~keysApiCurrentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/KeysApiCurrent200Response}
     */
    keysApiCurrent(serial, callback) {
      let postBody = null;
      // verify the required parameter 'serial' is set
      if (serial === undefined || serial === null) {
        throw new Error("Missing the required parameter 'serial' when calling keysApiCurrent");
      }

      let pathParams = {
        'serial': serial
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = KeysApiCurrent200Response;
      return this.apiClient.callApi(
        '/v1/KeysApi/Current/{serial}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the keysApiCustom operation.
     * @callback module:api/KeysApiApi~keysApiCustomCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} serial 
     * @param {module:api/KeysApiApi~keysApiCustomCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    keysApiCustom(serial, callback) {
      let postBody = null;
      // verify the required parameter 'serial' is set
      if (serial === undefined || serial === null) {
        throw new Error("Missing the required parameter 'serial' when calling keysApiCustom");
      }

      let pathParams = {
        'serial': serial
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/octet-stream'];
      let returnType = File;
      return this.apiClient.callApi(
        '/v1/KeysApi/Custom/{serial}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the keysApiExpiry operation.
     * @callback module:api/KeysApiApi~keysApiExpiryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/KeysApiExpiry200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} serial 
     * @param {module:api/KeysApiApi~keysApiExpiryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/KeysApiExpiry200Response}
     */
    keysApiExpiry(serial, callback) {
      let postBody = null;
      // verify the required parameter 'serial' is set
      if (serial === undefined || serial === null) {
        throw new Error("Missing the required parameter 'serial' when calling keysApiExpiry");
      }

      let pathParams = {
        'serial': serial
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = KeysApiExpiry200Response;
      return this.apiClient.callApi(
        '/v1/KeysApi/Expiry/{serial}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the keysApiFind operation.
     * @callback module:api/KeysApiApi~keysApiFindCallback
     * @param {String} error Error message, if any.
     * @param {module:model/KeysApiFind200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} serial 
     * @param {module:api/KeysApiApi~keysApiFindCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/KeysApiFind200Response}
     */
    keysApiFind(serial, callback) {
      let postBody = null;
      // verify the required parameter 'serial' is set
      if (serial === undefined || serial === null) {
        throw new Error("Missing the required parameter 'serial' when calling keysApiFind");
      }

      let pathParams = {
        'serial': serial
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = KeysApiFind200Response;
      return this.apiClient.callApi(
        '/v1/KeysApi/Find/{serial}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
