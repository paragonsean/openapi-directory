/**
 * KeyServ
 * KeyServ API
 *
 * The version of the OpenAPI document: 1.4.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ProductView from '../model/ProductView';
import ProductsApiCount200Response from '../model/ProductsApiCount200Response';
import ProductsApiCountRequest from '../model/ProductsApiCountRequest';
import ProductsApiFind200Response from '../model/ProductsApiFind200Response';
import ProductsApiFindRequest from '../model/ProductsApiFindRequest';
import ProductsApiPatchProduct2Request from '../model/ProductsApiPatchProduct2Request';

/**
* ProductsApi service.
* @module api/ProductsApiApi
* @version 1.4.5
*/
export default class ProductsApiApi {

    /**
    * Constructs a new ProductsApiApi. 
    * @alias module:api/ProductsApiApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the productsApiCount operation.
     * @callback module:api/ProductsApiApi~productsApiCountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProductsApiCount200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/ProductsApiCountRequest} productsApiCountRequest 
     * @param {module:api/ProductsApiApi~productsApiCountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProductsApiCount200Response}
     */
    productsApiCount(productsApiCountRequest, callback) {
      let postBody = productsApiCountRequest;
      // verify the required parameter 'productsApiCountRequest' is set
      if (productsApiCountRequest === undefined || productsApiCountRequest === null) {
        throw new Error("Missing the required parameter 'productsApiCountRequest' when calling productsApiCount");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProductsApiCount200Response;
      return this.apiClient.callApi(
        '/v1/ProductsApi/Count', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productsApiDeleteProduct operation.
     * @callback module:api/ProductsApiApi~productsApiDeleteProductCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} xApiKey 
     * @param {String} serial 
     * @param {module:api/ProductsApiApi~productsApiDeleteProductCallback} callback The callback function, accepting three arguments: error, data, response
     */
    productsApiDeleteProduct(xApiKey, serial, callback) {
      let postBody = null;
      // verify the required parameter 'xApiKey' is set
      if (xApiKey === undefined || xApiKey === null) {
        throw new Error("Missing the required parameter 'xApiKey' when calling productsApiDeleteProduct");
      }
      // verify the required parameter 'serial' is set
      if (serial === undefined || serial === null) {
        throw new Error("Missing the required parameter 'serial' when calling productsApiDeleteProduct");
      }

      let pathParams = {
        'serial': serial
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Api-Key': xApiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/ProductsApi/{serial}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productsApiDeleteProduct2 operation.
     * @callback module:api/ProductsApiApi~productsApiDeleteProduct2Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} xApiKey 
     * @param {String} serial 
     * @param {module:api/ProductsApiApi~productsApiDeleteProduct2Callback} callback The callback function, accepting three arguments: error, data, response
     */
    productsApiDeleteProduct2(xApiKey, serial, callback) {
      let postBody = null;
      // verify the required parameter 'xApiKey' is set
      if (xApiKey === undefined || xApiKey === null) {
        throw new Error("Missing the required parameter 'xApiKey' when calling productsApiDeleteProduct2");
      }
      // verify the required parameter 'serial' is set
      if (serial === undefined || serial === null) {
        throw new Error("Missing the required parameter 'serial' when calling productsApiDeleteProduct2");
      }

      let pathParams = {
        'serial': serial
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Api-Key': xApiKey
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/ProductsApi/{serial}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productsApiFind operation.
     * @callback module:api/ProductsApiApi~productsApiFindCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProductsApiFind200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/ProductsApiFindRequest} productsApiFindRequest 
     * @param {Object} opts Optional parameters
     * @param {Number} [page] 
     * @param {module:api/ProductsApiApi~productsApiFindCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProductsApiFind200Response}
     */
    productsApiFind(productsApiFindRequest, opts, callback) {
      opts = opts || {};
      let postBody = productsApiFindRequest;
      // verify the required parameter 'productsApiFindRequest' is set
      if (productsApiFindRequest === undefined || productsApiFindRequest === null) {
        throw new Error("Missing the required parameter 'productsApiFindRequest' when calling productsApiFind");
      }

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProductsApiFind200Response;
      return this.apiClient.callApi(
        '/v1/ProductsApi/Find', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productsApiList operation.
     * @callback module:api/ProductsApiApi~productsApiListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ProductView>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/ProductsApiCountRequest} productsApiCountRequest 
     * @param {Object} opts Optional parameters
     * @param {Number} [page] 
     * @param {module:api/ProductsApiApi~productsApiListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ProductView>}
     */
    productsApiList(productsApiCountRequest, opts, callback) {
      opts = opts || {};
      let postBody = productsApiCountRequest;
      // verify the required parameter 'productsApiCountRequest' is set
      if (productsApiCountRequest === undefined || productsApiCountRequest === null) {
        throw new Error("Missing the required parameter 'productsApiCountRequest' when calling productsApiList");
      }

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [ProductView];
      return this.apiClient.callApi(
        '/v1/ProductsApi/List', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productsApiPatchProduct operation.
     * @callback module:api/ProductsApiApi~productsApiPatchProductCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/ProductsApiPatchProduct2Request} productsApiPatchProduct2Request 
     * @param {module:api/ProductsApiApi~productsApiPatchProductCallback} callback The callback function, accepting three arguments: error, data, response
     */
    productsApiPatchProduct(productsApiPatchProduct2Request, callback) {
      let postBody = productsApiPatchProduct2Request;
      // verify the required parameter 'productsApiPatchProduct2Request' is set
      if (productsApiPatchProduct2Request === undefined || productsApiPatchProduct2Request === null) {
        throw new Error("Missing the required parameter 'productsApiPatchProduct2Request' when calling productsApiPatchProduct");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/ProductsApi', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productsApiPatchProduct2 operation.
     * @callback module:api/ProductsApiApi~productsApiPatchProduct2Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/ProductsApiPatchProduct2Request} productsApiPatchProduct2Request 
     * @param {module:api/ProductsApiApi~productsApiPatchProduct2Callback} callback The callback function, accepting three arguments: error, data, response
     */
    productsApiPatchProduct2(productsApiPatchProduct2Request, callback) {
      let postBody = productsApiPatchProduct2Request;
      // verify the required parameter 'productsApiPatchProduct2Request' is set
      if (productsApiPatchProduct2Request === undefined || productsApiPatchProduct2Request === null) {
        throw new Error("Missing the required parameter 'productsApiPatchProduct2Request' when calling productsApiPatchProduct2");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/ProductsApi', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productsApiSave operation.
     * @callback module:api/ProductsApiApi~productsApiSaveCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProductsApiFind200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/ProductsApiPatchProduct2Request} productsApiPatchProduct2Request 
     * @param {module:api/ProductsApiApi~productsApiSaveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProductsApiFind200Response}
     */
    productsApiSave(productsApiPatchProduct2Request, callback) {
      let postBody = productsApiPatchProduct2Request;
      // verify the required parameter 'productsApiPatchProduct2Request' is set
      if (productsApiPatchProduct2Request === undefined || productsApiPatchProduct2Request === null) {
        throw new Error("Missing the required parameter 'productsApiPatchProduct2Request' when calling productsApiSave");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProductsApiFind200Response;
      return this.apiClient.callApi(
        '/v1/ProductsApi/Save', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
