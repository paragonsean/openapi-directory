# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.leg1 import Leg1
from openapi_server import util


class AirtravelMultilegRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, api_key_l1: str=None, api_key_l2: str=None, contact_email: str=None, contact_first_name: str=None, contact_last_name: str=None, leg1: Leg1=None, leg2: Leg1=None, leg3: Leg1=None, legs_count: str=None, number_of_passengers: str=None, travel_mode: str=None):
        """AirtravelMultilegRequest - a model defined in OpenAPI

        :param api_key_l1: The api_key_l1 of this AirtravelMultilegRequest.
        :param api_key_l2: The api_key_l2 of this AirtravelMultilegRequest.
        :param contact_email: The contact_email of this AirtravelMultilegRequest.
        :param contact_first_name: The contact_first_name of this AirtravelMultilegRequest.
        :param contact_last_name: The contact_last_name of this AirtravelMultilegRequest.
        :param leg1: The leg1 of this AirtravelMultilegRequest.
        :param leg2: The leg2 of this AirtravelMultilegRequest.
        :param leg3: The leg3 of this AirtravelMultilegRequest.
        :param legs_count: The legs_count of this AirtravelMultilegRequest.
        :param number_of_passengers: The number_of_passengers of this AirtravelMultilegRequest.
        :param travel_mode: The travel_mode of this AirtravelMultilegRequest.
        """
        self.openapi_types = {
            'api_key_l1': str,
            'api_key_l2': str,
            'contact_email': str,
            'contact_first_name': str,
            'contact_last_name': str,
            'leg1': Leg1,
            'leg2': Leg1,
            'leg3': Leg1,
            'legs_count': str,
            'number_of_passengers': str,
            'travel_mode': str
        }

        self.attribute_map = {
            'api_key_l1': 'apiKey_l1',
            'api_key_l2': 'apiKey_l2',
            'contact_email': 'contactEmail',
            'contact_first_name': 'contactFirstName',
            'contact_last_name': 'contactLastName',
            'leg1': 'leg1',
            'leg2': 'leg2',
            'leg3': 'leg3',
            'legs_count': 'legs_count',
            'number_of_passengers': 'number_of_passengers',
            'travel_mode': 'travel_mode'
        }

        self._api_key_l1 = api_key_l1
        self._api_key_l2 = api_key_l2
        self._contact_email = contact_email
        self._contact_first_name = contact_first_name
        self._contact_last_name = contact_last_name
        self._leg1 = leg1
        self._leg2 = leg2
        self._leg3 = leg3
        self._legs_count = legs_count
        self._number_of_passengers = number_of_passengers
        self._travel_mode = travel_mode

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AirtravelMultilegRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The airtravelMultilegRequest of this AirtravelMultilegRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def api_key_l1(self):
        """Gets the api_key_l1 of this AirtravelMultilegRequest.


        :return: The api_key_l1 of this AirtravelMultilegRequest.
        :rtype: str
        """
        return self._api_key_l1

    @api_key_l1.setter
    def api_key_l1(self, api_key_l1):
        """Sets the api_key_l1 of this AirtravelMultilegRequest.


        :param api_key_l1: The api_key_l1 of this AirtravelMultilegRequest.
        :type api_key_l1: str
        """
        if api_key_l1 is None:
            raise ValueError("Invalid value for `api_key_l1`, must not be `None`")

        self._api_key_l1 = api_key_l1

    @property
    def api_key_l2(self):
        """Gets the api_key_l2 of this AirtravelMultilegRequest.


        :return: The api_key_l2 of this AirtravelMultilegRequest.
        :rtype: str
        """
        return self._api_key_l2

    @api_key_l2.setter
    def api_key_l2(self, api_key_l2):
        """Sets the api_key_l2 of this AirtravelMultilegRequest.


        :param api_key_l2: The api_key_l2 of this AirtravelMultilegRequest.
        :type api_key_l2: str
        """
        if api_key_l2 is None:
            raise ValueError("Invalid value for `api_key_l2`, must not be `None`")

        self._api_key_l2 = api_key_l2

    @property
    def contact_email(self):
        """Gets the contact_email of this AirtravelMultilegRequest.


        :return: The contact_email of this AirtravelMultilegRequest.
        :rtype: str
        """
        return self._contact_email

    @contact_email.setter
    def contact_email(self, contact_email):
        """Sets the contact_email of this AirtravelMultilegRequest.


        :param contact_email: The contact_email of this AirtravelMultilegRequest.
        :type contact_email: str
        """
        if contact_email is None:
            raise ValueError("Invalid value for `contact_email`, must not be `None`")

        self._contact_email = contact_email

    @property
    def contact_first_name(self):
        """Gets the contact_first_name of this AirtravelMultilegRequest.


        :return: The contact_first_name of this AirtravelMultilegRequest.
        :rtype: str
        """
        return self._contact_first_name

    @contact_first_name.setter
    def contact_first_name(self, contact_first_name):
        """Sets the contact_first_name of this AirtravelMultilegRequest.


        :param contact_first_name: The contact_first_name of this AirtravelMultilegRequest.
        :type contact_first_name: str
        """
        if contact_first_name is None:
            raise ValueError("Invalid value for `contact_first_name`, must not be `None`")

        self._contact_first_name = contact_first_name

    @property
    def contact_last_name(self):
        """Gets the contact_last_name of this AirtravelMultilegRequest.


        :return: The contact_last_name of this AirtravelMultilegRequest.
        :rtype: str
        """
        return self._contact_last_name

    @contact_last_name.setter
    def contact_last_name(self, contact_last_name):
        """Sets the contact_last_name of this AirtravelMultilegRequest.


        :param contact_last_name: The contact_last_name of this AirtravelMultilegRequest.
        :type contact_last_name: str
        """
        if contact_last_name is None:
            raise ValueError("Invalid value for `contact_last_name`, must not be `None`")

        self._contact_last_name = contact_last_name

    @property
    def leg1(self):
        """Gets the leg1 of this AirtravelMultilegRequest.


        :return: The leg1 of this AirtravelMultilegRequest.
        :rtype: Leg1
        """
        return self._leg1

    @leg1.setter
    def leg1(self, leg1):
        """Sets the leg1 of this AirtravelMultilegRequest.


        :param leg1: The leg1 of this AirtravelMultilegRequest.
        :type leg1: Leg1
        """
        if leg1 is None:
            raise ValueError("Invalid value for `leg1`, must not be `None`")

        self._leg1 = leg1

    @property
    def leg2(self):
        """Gets the leg2 of this AirtravelMultilegRequest.


        :return: The leg2 of this AirtravelMultilegRequest.
        :rtype: Leg1
        """
        return self._leg2

    @leg2.setter
    def leg2(self, leg2):
        """Sets the leg2 of this AirtravelMultilegRequest.


        :param leg2: The leg2 of this AirtravelMultilegRequest.
        :type leg2: Leg1
        """
        if leg2 is None:
            raise ValueError("Invalid value for `leg2`, must not be `None`")

        self._leg2 = leg2

    @property
    def leg3(self):
        """Gets the leg3 of this AirtravelMultilegRequest.


        :return: The leg3 of this AirtravelMultilegRequest.
        :rtype: Leg1
        """
        return self._leg3

    @leg3.setter
    def leg3(self, leg3):
        """Sets the leg3 of this AirtravelMultilegRequest.


        :param leg3: The leg3 of this AirtravelMultilegRequest.
        :type leg3: Leg1
        """
        if leg3 is None:
            raise ValueError("Invalid value for `leg3`, must not be `None`")

        self._leg3 = leg3

    @property
    def legs_count(self):
        """Gets the legs_count of this AirtravelMultilegRequest.


        :return: The legs_count of this AirtravelMultilegRequest.
        :rtype: str
        """
        return self._legs_count

    @legs_count.setter
    def legs_count(self, legs_count):
        """Sets the legs_count of this AirtravelMultilegRequest.


        :param legs_count: The legs_count of this AirtravelMultilegRequest.
        :type legs_count: str
        """
        if legs_count is None:
            raise ValueError("Invalid value for `legs_count`, must not be `None`")

        self._legs_count = legs_count

    @property
    def number_of_passengers(self):
        """Gets the number_of_passengers of this AirtravelMultilegRequest.


        :return: The number_of_passengers of this AirtravelMultilegRequest.
        :rtype: str
        """
        return self._number_of_passengers

    @number_of_passengers.setter
    def number_of_passengers(self, number_of_passengers):
        """Sets the number_of_passengers of this AirtravelMultilegRequest.


        :param number_of_passengers: The number_of_passengers of this AirtravelMultilegRequest.
        :type number_of_passengers: str
        """
        if number_of_passengers is None:
            raise ValueError("Invalid value for `number_of_passengers`, must not be `None`")

        self._number_of_passengers = number_of_passengers

    @property
    def travel_mode(self):
        """Gets the travel_mode of this AirtravelMultilegRequest.


        :return: The travel_mode of this AirtravelMultilegRequest.
        :rtype: str
        """
        return self._travel_mode

    @travel_mode.setter
    def travel_mode(self, travel_mode):
        """Sets the travel_mode of this AirtravelMultilegRequest.


        :param travel_mode: The travel_mode of this AirtravelMultilegRequest.
        :type travel_mode: str
        """
        if travel_mode is None:
            raise ValueError("Invalid value for `travel_mode`, must not be `None`")

        self._travel_mode = travel_mode
