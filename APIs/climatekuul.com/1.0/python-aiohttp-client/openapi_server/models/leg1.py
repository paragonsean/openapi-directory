# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Leg1(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, destination_airport_code: str=None, origin_airport_code: str=None, travel_class: str=None):
        """Leg1 - a model defined in OpenAPI

        :param destination_airport_code: The destination_airport_code of this Leg1.
        :param origin_airport_code: The origin_airport_code of this Leg1.
        :param travel_class: The travel_class of this Leg1.
        """
        self.openapi_types = {
            'destination_airport_code': str,
            'origin_airport_code': str,
            'travel_class': str
        }

        self.attribute_map = {
            'destination_airport_code': 'destination_airport_code',
            'origin_airport_code': 'origin_airport_code',
            'travel_class': 'travel_class'
        }

        self._destination_airport_code = destination_airport_code
        self._origin_airport_code = origin_airport_code
        self._travel_class = travel_class

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Leg1':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Leg1 of this Leg1.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def destination_airport_code(self):
        """Gets the destination_airport_code of this Leg1.


        :return: The destination_airport_code of this Leg1.
        :rtype: str
        """
        return self._destination_airport_code

    @destination_airport_code.setter
    def destination_airport_code(self, destination_airport_code):
        """Sets the destination_airport_code of this Leg1.


        :param destination_airport_code: The destination_airport_code of this Leg1.
        :type destination_airport_code: str
        """
        if destination_airport_code is None:
            raise ValueError("Invalid value for `destination_airport_code`, must not be `None`")

        self._destination_airport_code = destination_airport_code

    @property
    def origin_airport_code(self):
        """Gets the origin_airport_code of this Leg1.


        :return: The origin_airport_code of this Leg1.
        :rtype: str
        """
        return self._origin_airport_code

    @origin_airport_code.setter
    def origin_airport_code(self, origin_airport_code):
        """Sets the origin_airport_code of this Leg1.


        :param origin_airport_code: The origin_airport_code of this Leg1.
        :type origin_airport_code: str
        """
        if origin_airport_code is None:
            raise ValueError("Invalid value for `origin_airport_code`, must not be `None`")

        self._origin_airport_code = origin_airport_code

    @property
    def travel_class(self):
        """Gets the travel_class of this Leg1.


        :return: The travel_class of this Leg1.
        :rtype: str
        """
        return self._travel_class

    @travel_class.setter
    def travel_class(self, travel_class):
        """Sets the travel_class of this Leg1.


        :param travel_class: The travel_class of this Leg1.
        :type travel_class: str
        """
        if travel_class is None:
            raise ValueError("Invalid value for `travel_class`, must not be `None`")

        self._travel_class = travel_class
