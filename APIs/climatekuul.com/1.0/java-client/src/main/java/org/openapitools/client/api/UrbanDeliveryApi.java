/*
 * climateKuul live
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;



import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class UrbanDeliveryApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public UrbanDeliveryApi() {
        this(Configuration.getDefaultApiClient());
    }

    public UrbanDeliveryApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for confirmCarbonOffset
     * @param carbonOffset Confirm Carbon Offset (Value &#x3D; y/n) (required)
     * @param transactionId transaction_id (required)
     * @param contactEmail Contact email (optional)
     * @param contactFirstName Contact first name (optional)
     * @param contactLastName Contact last name (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call confirmCarbonOffsetCall(String carbonOffset, String transactionId, String contactEmail, String contactFirstName, String contactLastName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "http://api.climatekuul.com:8000/footprint" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/urbanDelivery/confirmCarbonOffset";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (carbonOffset != null) {
            localVarFormParams.put("carbonOffset", carbonOffset);
        }

        if (contactEmail != null) {
            localVarFormParams.put("contactEmail", contactEmail);
        }

        if (contactFirstName != null) {
            localVarFormParams.put("contactFirstName", contactFirstName);
        }

        if (contactLastName != null) {
            localVarFormParams.put("contactLastName", contactLastName);
        }

        if (transactionId != null) {
            localVarFormParams.put("transaction_id", transactionId);
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call confirmCarbonOffsetValidateBeforeCall(String carbonOffset, String transactionId, String contactEmail, String contactFirstName, String contactLastName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'carbonOffset' is set
        if (carbonOffset == null) {
            throw new ApiException("Missing the required parameter 'carbonOffset' when calling confirmCarbonOffset(Async)");
        }

        // verify the required parameter 'transactionId' is set
        if (transactionId == null) {
            throw new ApiException("Missing the required parameter 'transactionId' when calling confirmCarbonOffset(Async)");
        }

        return confirmCarbonOffsetCall(carbonOffset, transactionId, contactEmail, contactFirstName, contactLastName, _callback);

    }

    /**
     * confirmCarbonOffset
     * 
     * @param carbonOffset Confirm Carbon Offset (Value &#x3D; y/n) (required)
     * @param transactionId transaction_id (required)
     * @param contactEmail Contact email (optional)
     * @param contactFirstName Contact first name (optional)
     * @param contactLastName Contact last name (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void confirmCarbonOffset(String carbonOffset, String transactionId, String contactEmail, String contactFirstName, String contactLastName) throws ApiException {
        confirmCarbonOffsetWithHttpInfo(carbonOffset, transactionId, contactEmail, contactFirstName, contactLastName);
    }

    /**
     * confirmCarbonOffset
     * 
     * @param carbonOffset Confirm Carbon Offset (Value &#x3D; y/n) (required)
     * @param transactionId transaction_id (required)
     * @param contactEmail Contact email (optional)
     * @param contactFirstName Contact first name (optional)
     * @param contactLastName Contact last name (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> confirmCarbonOffsetWithHttpInfo(String carbonOffset, String transactionId, String contactEmail, String contactFirstName, String contactLastName) throws ApiException {
        okhttp3.Call localVarCall = confirmCarbonOffsetValidateBeforeCall(carbonOffset, transactionId, contactEmail, contactFirstName, contactLastName, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * confirmCarbonOffset (asynchronously)
     * 
     * @param carbonOffset Confirm Carbon Offset (Value &#x3D; y/n) (required)
     * @param transactionId transaction_id (required)
     * @param contactEmail Contact email (optional)
     * @param contactFirstName Contact first name (optional)
     * @param contactLastName Contact last name (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call confirmCarbonOffsetAsync(String carbonOffset, String transactionId, String contactEmail, String contactFirstName, String contactLastName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = confirmCarbonOffsetValidateBeforeCall(carbonOffset, transactionId, contactEmail, contactFirstName, contactLastName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for confirmPayment
     * @param apiKeyL1 apikey_l1 (Like: d95fead6-e8a6-4247-9fb9-7835101a4560) (required)
     * @param apiKeyL2 apikey_l2 (Like: c60f8db5-7904-4227-960d-27400c38b166) (required)
     * @param confirmPayment Confirm Payment (Value &#x3D; y/n) (required)
     * @param paymentID Payment Id (required)
     * @param transactionId transaction_id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call confirmPaymentCall(String apiKeyL1, String apiKeyL2, String confirmPayment, Integer paymentID, String transactionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "http://api.climatekuul.com:8000/footprint" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/urbanDelivery/confirmPayment";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKeyL1 != null) {
            localVarFormParams.put("apiKey_l1", apiKeyL1);
        }

        if (apiKeyL2 != null) {
            localVarFormParams.put("apiKey_l2", apiKeyL2);
        }

        if (confirmPayment != null) {
            localVarFormParams.put("confirmPayment", confirmPayment);
        }

        if (paymentID != null) {
            localVarFormParams.put("paymentID", paymentID);
        }

        if (transactionId != null) {
            localVarFormParams.put("transaction_id", transactionId);
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call confirmPaymentValidateBeforeCall(String apiKeyL1, String apiKeyL2, String confirmPayment, Integer paymentID, String transactionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKeyL1' is set
        if (apiKeyL1 == null) {
            throw new ApiException("Missing the required parameter 'apiKeyL1' when calling confirmPayment(Async)");
        }

        // verify the required parameter 'apiKeyL2' is set
        if (apiKeyL2 == null) {
            throw new ApiException("Missing the required parameter 'apiKeyL2' when calling confirmPayment(Async)");
        }

        // verify the required parameter 'confirmPayment' is set
        if (confirmPayment == null) {
            throw new ApiException("Missing the required parameter 'confirmPayment' when calling confirmPayment(Async)");
        }

        // verify the required parameter 'paymentID' is set
        if (paymentID == null) {
            throw new ApiException("Missing the required parameter 'paymentID' when calling confirmPayment(Async)");
        }

        // verify the required parameter 'transactionId' is set
        if (transactionId == null) {
            throw new ApiException("Missing the required parameter 'transactionId' when calling confirmPayment(Async)");
        }

        return confirmPaymentCall(apiKeyL1, apiKeyL2, confirmPayment, paymentID, transactionId, _callback);

    }

    /**
     * confirmPayment
     * 
     * @param apiKeyL1 apikey_l1 (Like: d95fead6-e8a6-4247-9fb9-7835101a4560) (required)
     * @param apiKeyL2 apikey_l2 (Like: c60f8db5-7904-4227-960d-27400c38b166) (required)
     * @param confirmPayment Confirm Payment (Value &#x3D; y/n) (required)
     * @param paymentID Payment Id (required)
     * @param transactionId transaction_id (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void confirmPayment(String apiKeyL1, String apiKeyL2, String confirmPayment, Integer paymentID, String transactionId) throws ApiException {
        confirmPaymentWithHttpInfo(apiKeyL1, apiKeyL2, confirmPayment, paymentID, transactionId);
    }

    /**
     * confirmPayment
     * 
     * @param apiKeyL1 apikey_l1 (Like: d95fead6-e8a6-4247-9fb9-7835101a4560) (required)
     * @param apiKeyL2 apikey_l2 (Like: c60f8db5-7904-4227-960d-27400c38b166) (required)
     * @param confirmPayment Confirm Payment (Value &#x3D; y/n) (required)
     * @param paymentID Payment Id (required)
     * @param transactionId transaction_id (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> confirmPaymentWithHttpInfo(String apiKeyL1, String apiKeyL2, String confirmPayment, Integer paymentID, String transactionId) throws ApiException {
        okhttp3.Call localVarCall = confirmPaymentValidateBeforeCall(apiKeyL1, apiKeyL2, confirmPayment, paymentID, transactionId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * confirmPayment (asynchronously)
     * 
     * @param apiKeyL1 apikey_l1 (Like: d95fead6-e8a6-4247-9fb9-7835101a4560) (required)
     * @param apiKeyL2 apikey_l2 (Like: c60f8db5-7904-4227-960d-27400c38b166) (required)
     * @param confirmPayment Confirm Payment (Value &#x3D; y/n) (required)
     * @param paymentID Payment Id (required)
     * @param transactionId transaction_id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call confirmPaymentAsync(String apiKeyL1, String apiKeyL2, String confirmPayment, Integer paymentID, String transactionId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = confirmPaymentValidateBeforeCall(apiKeyL1, apiKeyL2, confirmPayment, paymentID, transactionId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for confirmPaymentOfTransaction
     * @param confirmTransaction Confirm Payment Of Transaction (Value &#x3D; y/n) (required)
     * @param transactionId transaction_id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call confirmPaymentOfTransactionCall(String confirmTransaction, String transactionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "http://api.climatekuul.com:8000/footprint" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/urbanDelivery/confirmTransaction";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (confirmTransaction != null) {
            localVarFormParams.put("confirmTransaction", confirmTransaction);
        }

        if (transactionId != null) {
            localVarFormParams.put("transaction_id", transactionId);
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call confirmPaymentOfTransactionValidateBeforeCall(String confirmTransaction, String transactionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'confirmTransaction' is set
        if (confirmTransaction == null) {
            throw new ApiException("Missing the required parameter 'confirmTransaction' when calling confirmPaymentOfTransaction(Async)");
        }

        // verify the required parameter 'transactionId' is set
        if (transactionId == null) {
            throw new ApiException("Missing the required parameter 'transactionId' when calling confirmPaymentOfTransaction(Async)");
        }

        return confirmPaymentOfTransactionCall(confirmTransaction, transactionId, _callback);

    }

    /**
     * confirmTransaction
     * 
     * @param confirmTransaction Confirm Payment Of Transaction (Value &#x3D; y/n) (required)
     * @param transactionId transaction_id (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void confirmPaymentOfTransaction(String confirmTransaction, String transactionId) throws ApiException {
        confirmPaymentOfTransactionWithHttpInfo(confirmTransaction, transactionId);
    }

    /**
     * confirmTransaction
     * 
     * @param confirmTransaction Confirm Payment Of Transaction (Value &#x3D; y/n) (required)
     * @param transactionId transaction_id (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> confirmPaymentOfTransactionWithHttpInfo(String confirmTransaction, String transactionId) throws ApiException {
        okhttp3.Call localVarCall = confirmPaymentOfTransactionValidateBeforeCall(confirmTransaction, transactionId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * confirmTransaction (asynchronously)
     * 
     * @param confirmTransaction Confirm Payment Of Transaction (Value &#x3D; y/n) (required)
     * @param transactionId transaction_id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call confirmPaymentOfTransactionAsync(String confirmTransaction, String transactionId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = confirmPaymentOfTransactionValidateBeforeCall(confirmTransaction, transactionId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for confirmsPlanting
     * @param apiKeyL1 apikey_l1 (Like: d95fead6-e8a6-4247-9fb9-7835101a4560) (required)
     * @param apiKeyL2 apikey_l2 (Like: c60f8db5-7904-4227-960d-27400c38b166) (required)
     * @param confirmPlanting Confirm Planting (Value &#x3D; y/n) (required)
     * @param transactionId transaction_id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call confirmsPlantingCall(String apiKeyL1, String apiKeyL2, String confirmPlanting, String transactionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "http://api.climatekuul.com:8000/footprint" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/urbanDelivery/confirmPlanting";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKeyL1 != null) {
            localVarFormParams.put("apiKey_l1", apiKeyL1);
        }

        if (apiKeyL2 != null) {
            localVarFormParams.put("apiKey_l2", apiKeyL2);
        }

        if (confirmPlanting != null) {
            localVarFormParams.put("confirmPlanting", confirmPlanting);
        }

        if (transactionId != null) {
            localVarFormParams.put("transaction_id", transactionId);
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call confirmsPlantingValidateBeforeCall(String apiKeyL1, String apiKeyL2, String confirmPlanting, String transactionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKeyL1' is set
        if (apiKeyL1 == null) {
            throw new ApiException("Missing the required parameter 'apiKeyL1' when calling confirmsPlanting(Async)");
        }

        // verify the required parameter 'apiKeyL2' is set
        if (apiKeyL2 == null) {
            throw new ApiException("Missing the required parameter 'apiKeyL2' when calling confirmsPlanting(Async)");
        }

        // verify the required parameter 'confirmPlanting' is set
        if (confirmPlanting == null) {
            throw new ApiException("Missing the required parameter 'confirmPlanting' when calling confirmsPlanting(Async)");
        }

        // verify the required parameter 'transactionId' is set
        if (transactionId == null) {
            throw new ApiException("Missing the required parameter 'transactionId' when calling confirmsPlanting(Async)");
        }

        return confirmsPlantingCall(apiKeyL1, apiKeyL2, confirmPlanting, transactionId, _callback);

    }

    /**
     * confirmPlanting
     * 
     * @param apiKeyL1 apikey_l1 (Like: d95fead6-e8a6-4247-9fb9-7835101a4560) (required)
     * @param apiKeyL2 apikey_l2 (Like: c60f8db5-7904-4227-960d-27400c38b166) (required)
     * @param confirmPlanting Confirm Planting (Value &#x3D; y/n) (required)
     * @param transactionId transaction_id (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void confirmsPlanting(String apiKeyL1, String apiKeyL2, String confirmPlanting, String transactionId) throws ApiException {
        confirmsPlantingWithHttpInfo(apiKeyL1, apiKeyL2, confirmPlanting, transactionId);
    }

    /**
     * confirmPlanting
     * 
     * @param apiKeyL1 apikey_l1 (Like: d95fead6-e8a6-4247-9fb9-7835101a4560) (required)
     * @param apiKeyL2 apikey_l2 (Like: c60f8db5-7904-4227-960d-27400c38b166) (required)
     * @param confirmPlanting Confirm Planting (Value &#x3D; y/n) (required)
     * @param transactionId transaction_id (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> confirmsPlantingWithHttpInfo(String apiKeyL1, String apiKeyL2, String confirmPlanting, String transactionId) throws ApiException {
        okhttp3.Call localVarCall = confirmsPlantingValidateBeforeCall(apiKeyL1, apiKeyL2, confirmPlanting, transactionId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * confirmPlanting (asynchronously)
     * 
     * @param apiKeyL1 apikey_l1 (Like: d95fead6-e8a6-4247-9fb9-7835101a4560) (required)
     * @param apiKeyL2 apikey_l2 (Like: c60f8db5-7904-4227-960d-27400c38b166) (required)
     * @param confirmPlanting Confirm Planting (Value &#x3D; y/n) (required)
     * @param transactionId transaction_id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call confirmsPlantingAsync(String apiKeyL1, String apiKeyL2, String confirmPlanting, String transactionId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = confirmsPlantingValidateBeforeCall(apiKeyL1, apiKeyL2, confirmPlanting, transactionId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for urbanDelivery
     * @param apiKeyL1 Client Api Key (required)
     * @param apiKeyL2 Integration Partner Api Key (required)
     * @param destinationLatitude Destination latitude (like: 50.870752, value &#x3D; -90&lt;&#x3D;x&lt;&#x3D;90) (required)
     * @param destinationLongitude Destination longitude (like: 4.669490, value &#x3D; -180&lt;&#x3D;x&lt;&#x3D;180) (required)
     * @param itemCount item_count&#39; (like:2, value &#x3D; 0&lt;x&lt;&#x3D;100) (required)
     * @param originLatitude Origin latitude (like: 23.372628, value &#x3D; -90&lt;&#x3D;x&lt;&#x3D;90) (required)
     * @param originLongitude Origin longitude (like: 113.159339, value &#x3D; -180&lt;&#x3D;x&lt;&#x3D;180) (required)
     * @param vehicleType Vehicle type (like: private car, motorcycle,cargo van,zero-emission) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call urbanDeliveryCall(String apiKeyL1, String apiKeyL2, Double destinationLatitude, Double destinationLongitude, Integer itemCount, Double originLatitude, Double originLongitude, String vehicleType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "http://api.climatekuul.com:8000/footprint" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/urbanDelivery";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKeyL1 != null) {
            localVarFormParams.put("apiKey_l1", apiKeyL1);
        }

        if (apiKeyL2 != null) {
            localVarFormParams.put("apiKey_l2", apiKeyL2);
        }

        if (destinationLatitude != null) {
            localVarFormParams.put("destination_latitude", destinationLatitude);
        }

        if (destinationLongitude != null) {
            localVarFormParams.put("destination_longitude", destinationLongitude);
        }

        if (itemCount != null) {
            localVarFormParams.put("item_count", itemCount);
        }

        if (originLatitude != null) {
            localVarFormParams.put("origin_latitude", originLatitude);
        }

        if (originLongitude != null) {
            localVarFormParams.put("origin_longitude", originLongitude);
        }

        if (vehicleType != null) {
            localVarFormParams.put("vehicle_type", vehicleType);
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call urbanDeliveryValidateBeforeCall(String apiKeyL1, String apiKeyL2, Double destinationLatitude, Double destinationLongitude, Integer itemCount, Double originLatitude, Double originLongitude, String vehicleType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKeyL1' is set
        if (apiKeyL1 == null) {
            throw new ApiException("Missing the required parameter 'apiKeyL1' when calling urbanDelivery(Async)");
        }

        // verify the required parameter 'apiKeyL2' is set
        if (apiKeyL2 == null) {
            throw new ApiException("Missing the required parameter 'apiKeyL2' when calling urbanDelivery(Async)");
        }

        // verify the required parameter 'destinationLatitude' is set
        if (destinationLatitude == null) {
            throw new ApiException("Missing the required parameter 'destinationLatitude' when calling urbanDelivery(Async)");
        }

        // verify the required parameter 'destinationLongitude' is set
        if (destinationLongitude == null) {
            throw new ApiException("Missing the required parameter 'destinationLongitude' when calling urbanDelivery(Async)");
        }

        // verify the required parameter 'itemCount' is set
        if (itemCount == null) {
            throw new ApiException("Missing the required parameter 'itemCount' when calling urbanDelivery(Async)");
        }

        // verify the required parameter 'originLatitude' is set
        if (originLatitude == null) {
            throw new ApiException("Missing the required parameter 'originLatitude' when calling urbanDelivery(Async)");
        }

        // verify the required parameter 'originLongitude' is set
        if (originLongitude == null) {
            throw new ApiException("Missing the required parameter 'originLongitude' when calling urbanDelivery(Async)");
        }

        // verify the required parameter 'vehicleType' is set
        if (vehicleType == null) {
            throw new ApiException("Missing the required parameter 'vehicleType' when calling urbanDelivery(Async)");
        }

        return urbanDeliveryCall(apiKeyL1, apiKeyL2, destinationLatitude, destinationLongitude, itemCount, originLatitude, originLongitude, vehicleType, _callback);

    }

    /**
     * urbanDelivery
     * 
     * @param apiKeyL1 Client Api Key (required)
     * @param apiKeyL2 Integration Partner Api Key (required)
     * @param destinationLatitude Destination latitude (like: 50.870752, value &#x3D; -90&lt;&#x3D;x&lt;&#x3D;90) (required)
     * @param destinationLongitude Destination longitude (like: 4.669490, value &#x3D; -180&lt;&#x3D;x&lt;&#x3D;180) (required)
     * @param itemCount item_count&#39; (like:2, value &#x3D; 0&lt;x&lt;&#x3D;100) (required)
     * @param originLatitude Origin latitude (like: 23.372628, value &#x3D; -90&lt;&#x3D;x&lt;&#x3D;90) (required)
     * @param originLongitude Origin longitude (like: 113.159339, value &#x3D; -180&lt;&#x3D;x&lt;&#x3D;180) (required)
     * @param vehicleType Vehicle type (like: private car, motorcycle,cargo van,zero-emission) (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void urbanDelivery(String apiKeyL1, String apiKeyL2, Double destinationLatitude, Double destinationLongitude, Integer itemCount, Double originLatitude, Double originLongitude, String vehicleType) throws ApiException {
        urbanDeliveryWithHttpInfo(apiKeyL1, apiKeyL2, destinationLatitude, destinationLongitude, itemCount, originLatitude, originLongitude, vehicleType);
    }

    /**
     * urbanDelivery
     * 
     * @param apiKeyL1 Client Api Key (required)
     * @param apiKeyL2 Integration Partner Api Key (required)
     * @param destinationLatitude Destination latitude (like: 50.870752, value &#x3D; -90&lt;&#x3D;x&lt;&#x3D;90) (required)
     * @param destinationLongitude Destination longitude (like: 4.669490, value &#x3D; -180&lt;&#x3D;x&lt;&#x3D;180) (required)
     * @param itemCount item_count&#39; (like:2, value &#x3D; 0&lt;x&lt;&#x3D;100) (required)
     * @param originLatitude Origin latitude (like: 23.372628, value &#x3D; -90&lt;&#x3D;x&lt;&#x3D;90) (required)
     * @param originLongitude Origin longitude (like: 113.159339, value &#x3D; -180&lt;&#x3D;x&lt;&#x3D;180) (required)
     * @param vehicleType Vehicle type (like: private car, motorcycle,cargo van,zero-emission) (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> urbanDeliveryWithHttpInfo(String apiKeyL1, String apiKeyL2, Double destinationLatitude, Double destinationLongitude, Integer itemCount, Double originLatitude, Double originLongitude, String vehicleType) throws ApiException {
        okhttp3.Call localVarCall = urbanDeliveryValidateBeforeCall(apiKeyL1, apiKeyL2, destinationLatitude, destinationLongitude, itemCount, originLatitude, originLongitude, vehicleType, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * urbanDelivery (asynchronously)
     * 
     * @param apiKeyL1 Client Api Key (required)
     * @param apiKeyL2 Integration Partner Api Key (required)
     * @param destinationLatitude Destination latitude (like: 50.870752, value &#x3D; -90&lt;&#x3D;x&lt;&#x3D;90) (required)
     * @param destinationLongitude Destination longitude (like: 4.669490, value &#x3D; -180&lt;&#x3D;x&lt;&#x3D;180) (required)
     * @param itemCount item_count&#39; (like:2, value &#x3D; 0&lt;x&lt;&#x3D;100) (required)
     * @param originLatitude Origin latitude (like: 23.372628, value &#x3D; -90&lt;&#x3D;x&lt;&#x3D;90) (required)
     * @param originLongitude Origin longitude (like: 113.159339, value &#x3D; -180&lt;&#x3D;x&lt;&#x3D;180) (required)
     * @param vehicleType Vehicle type (like: private car, motorcycle,cargo van,zero-emission) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call urbanDeliveryAsync(String apiKeyL1, String apiKeyL2, Double destinationLatitude, Double destinationLongitude, Integer itemCount, Double originLatitude, Double originLongitude, String vehicleType, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = urbanDeliveryValidateBeforeCall(apiKeyL1, apiKeyL2, destinationLatitude, destinationLongitude, itemCount, originLatitude, originLongitude, vehicleType, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
