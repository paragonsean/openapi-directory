/*
 * climateKuul live
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;



import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AirtravelCoordinatesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AirtravelCoordinatesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AirtravelCoordinatesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for airtravelCoordinates
     * @param contentType  (required)
     * @param apiKeyL1 Client Api Key (required)
     * @param apiKeyL2 Integration Partner Api Key (required)
     * @param destinationAirportLatitude Destination latitude (like:  50.870752, value &#x3D; -90&lt;&#x3D;x&lt;&#x3D;90) (required)
     * @param destinationAirportLongitude Destination longitude (like:  4.669490, value &#x3D; -180&lt;&#x3D;x&lt;&#x3D;180) (required)
     * @param numberOfPassengers Number of passengers (like: 1, 2 ,3 ) (required)
     * @param originAirportLatitude Origin latitude (like: 23.372628 value &#x3D; -90&lt;&#x3D;x&lt;&#x3D;90 ) (required)
     * @param originAirportLongitude Origin longitude (like: 113.159339, value &#x3D; -180&lt;&#x3D;x&lt;&#x3D;180 ) (required)
     * @param travelClass Travel class can be &#39;First Class&#39;, &#39;Economy&#39;, &#39;Business&#39; or &#39;Premium Economy&#39; (required)
     * @param travelMode Travel mode can be &#39;one way&#39; or &#39;round trip&#39; (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call airtravelCoordinatesCall(String contentType, String apiKeyL1, String apiKeyL2, Double destinationAirportLatitude, Double destinationAirportLongitude, Integer numberOfPassengers, Double originAirportLatitude, Double originAirportLongitude, String travelClass, String travelMode, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "http://api.climatekuul.com:8000/footprint" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/airtravelCoordinates";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKeyL1 != null) {
            localVarFormParams.put("apiKey_l1", apiKeyL1);
        }

        if (apiKeyL2 != null) {
            localVarFormParams.put("apiKey_l2", apiKeyL2);
        }

        if (destinationAirportLatitude != null) {
            localVarFormParams.put("destination_airport_latitude", destinationAirportLatitude);
        }

        if (destinationAirportLongitude != null) {
            localVarFormParams.put("destination_airport_longitude", destinationAirportLongitude);
        }

        if (numberOfPassengers != null) {
            localVarFormParams.put("number_of_passengers", numberOfPassengers);
        }

        if (originAirportLatitude != null) {
            localVarFormParams.put("origin_airport_latitude", originAirportLatitude);
        }

        if (originAirportLongitude != null) {
            localVarFormParams.put("origin_airport_longitude", originAirportLongitude);
        }

        if (travelClass != null) {
            localVarFormParams.put("travel_class", travelClass);
        }

        if (travelMode != null) {
            localVarFormParams.put("travel_mode", travelMode);
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call airtravelCoordinatesValidateBeforeCall(String contentType, String apiKeyL1, String apiKeyL2, Double destinationAirportLatitude, Double destinationAirportLongitude, Integer numberOfPassengers, Double originAirportLatitude, Double originAirportLongitude, String travelClass, String travelMode, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling airtravelCoordinates(Async)");
        }

        // verify the required parameter 'apiKeyL1' is set
        if (apiKeyL1 == null) {
            throw new ApiException("Missing the required parameter 'apiKeyL1' when calling airtravelCoordinates(Async)");
        }

        // verify the required parameter 'apiKeyL2' is set
        if (apiKeyL2 == null) {
            throw new ApiException("Missing the required parameter 'apiKeyL2' when calling airtravelCoordinates(Async)");
        }

        // verify the required parameter 'destinationAirportLatitude' is set
        if (destinationAirportLatitude == null) {
            throw new ApiException("Missing the required parameter 'destinationAirportLatitude' when calling airtravelCoordinates(Async)");
        }

        // verify the required parameter 'destinationAirportLongitude' is set
        if (destinationAirportLongitude == null) {
            throw new ApiException("Missing the required parameter 'destinationAirportLongitude' when calling airtravelCoordinates(Async)");
        }

        // verify the required parameter 'numberOfPassengers' is set
        if (numberOfPassengers == null) {
            throw new ApiException("Missing the required parameter 'numberOfPassengers' when calling airtravelCoordinates(Async)");
        }

        // verify the required parameter 'originAirportLatitude' is set
        if (originAirportLatitude == null) {
            throw new ApiException("Missing the required parameter 'originAirportLatitude' when calling airtravelCoordinates(Async)");
        }

        // verify the required parameter 'originAirportLongitude' is set
        if (originAirportLongitude == null) {
            throw new ApiException("Missing the required parameter 'originAirportLongitude' when calling airtravelCoordinates(Async)");
        }

        // verify the required parameter 'travelClass' is set
        if (travelClass == null) {
            throw new ApiException("Missing the required parameter 'travelClass' when calling airtravelCoordinates(Async)");
        }

        // verify the required parameter 'travelMode' is set
        if (travelMode == null) {
            throw new ApiException("Missing the required parameter 'travelMode' when calling airtravelCoordinates(Async)");
        }

        return airtravelCoordinatesCall(contentType, apiKeyL1, apiKeyL2, destinationAirportLatitude, destinationAirportLongitude, numberOfPassengers, originAirportLatitude, originAirportLongitude, travelClass, travelMode, _callback);

    }

    /**
     * airtravelCoordinates
     * 
     * @param contentType  (required)
     * @param apiKeyL1 Client Api Key (required)
     * @param apiKeyL2 Integration Partner Api Key (required)
     * @param destinationAirportLatitude Destination latitude (like:  50.870752, value &#x3D; -90&lt;&#x3D;x&lt;&#x3D;90) (required)
     * @param destinationAirportLongitude Destination longitude (like:  4.669490, value &#x3D; -180&lt;&#x3D;x&lt;&#x3D;180) (required)
     * @param numberOfPassengers Number of passengers (like: 1, 2 ,3 ) (required)
     * @param originAirportLatitude Origin latitude (like: 23.372628 value &#x3D; -90&lt;&#x3D;x&lt;&#x3D;90 ) (required)
     * @param originAirportLongitude Origin longitude (like: 113.159339, value &#x3D; -180&lt;&#x3D;x&lt;&#x3D;180 ) (required)
     * @param travelClass Travel class can be &#39;First Class&#39;, &#39;Economy&#39;, &#39;Business&#39; or &#39;Premium Economy&#39; (required)
     * @param travelMode Travel mode can be &#39;one way&#39; or &#39;round trip&#39; (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void airtravelCoordinates(String contentType, String apiKeyL1, String apiKeyL2, Double destinationAirportLatitude, Double destinationAirportLongitude, Integer numberOfPassengers, Double originAirportLatitude, Double originAirportLongitude, String travelClass, String travelMode) throws ApiException {
        airtravelCoordinatesWithHttpInfo(contentType, apiKeyL1, apiKeyL2, destinationAirportLatitude, destinationAirportLongitude, numberOfPassengers, originAirportLatitude, originAirportLongitude, travelClass, travelMode);
    }

    /**
     * airtravelCoordinates
     * 
     * @param contentType  (required)
     * @param apiKeyL1 Client Api Key (required)
     * @param apiKeyL2 Integration Partner Api Key (required)
     * @param destinationAirportLatitude Destination latitude (like:  50.870752, value &#x3D; -90&lt;&#x3D;x&lt;&#x3D;90) (required)
     * @param destinationAirportLongitude Destination longitude (like:  4.669490, value &#x3D; -180&lt;&#x3D;x&lt;&#x3D;180) (required)
     * @param numberOfPassengers Number of passengers (like: 1, 2 ,3 ) (required)
     * @param originAirportLatitude Origin latitude (like: 23.372628 value &#x3D; -90&lt;&#x3D;x&lt;&#x3D;90 ) (required)
     * @param originAirportLongitude Origin longitude (like: 113.159339, value &#x3D; -180&lt;&#x3D;x&lt;&#x3D;180 ) (required)
     * @param travelClass Travel class can be &#39;First Class&#39;, &#39;Economy&#39;, &#39;Business&#39; or &#39;Premium Economy&#39; (required)
     * @param travelMode Travel mode can be &#39;one way&#39; or &#39;round trip&#39; (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> airtravelCoordinatesWithHttpInfo(String contentType, String apiKeyL1, String apiKeyL2, Double destinationAirportLatitude, Double destinationAirportLongitude, Integer numberOfPassengers, Double originAirportLatitude, Double originAirportLongitude, String travelClass, String travelMode) throws ApiException {
        okhttp3.Call localVarCall = airtravelCoordinatesValidateBeforeCall(contentType, apiKeyL1, apiKeyL2, destinationAirportLatitude, destinationAirportLongitude, numberOfPassengers, originAirportLatitude, originAirportLongitude, travelClass, travelMode, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * airtravelCoordinates (asynchronously)
     * 
     * @param contentType  (required)
     * @param apiKeyL1 Client Api Key (required)
     * @param apiKeyL2 Integration Partner Api Key (required)
     * @param destinationAirportLatitude Destination latitude (like:  50.870752, value &#x3D; -90&lt;&#x3D;x&lt;&#x3D;90) (required)
     * @param destinationAirportLongitude Destination longitude (like:  4.669490, value &#x3D; -180&lt;&#x3D;x&lt;&#x3D;180) (required)
     * @param numberOfPassengers Number of passengers (like: 1, 2 ,3 ) (required)
     * @param originAirportLatitude Origin latitude (like: 23.372628 value &#x3D; -90&lt;&#x3D;x&lt;&#x3D;90 ) (required)
     * @param originAirportLongitude Origin longitude (like: 113.159339, value &#x3D; -180&lt;&#x3D;x&lt;&#x3D;180 ) (required)
     * @param travelClass Travel class can be &#39;First Class&#39;, &#39;Economy&#39;, &#39;Business&#39; or &#39;Premium Economy&#39; (required)
     * @param travelMode Travel mode can be &#39;one way&#39; or &#39;round trip&#39; (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call airtravelCoordinatesAsync(String contentType, String apiKeyL1, String apiKeyL2, Double destinationAirportLatitude, Double destinationAirportLongitude, Integer numberOfPassengers, Double originAirportLatitude, Double originAirportLongitude, String travelClass, String travelMode, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = airtravelCoordinatesValidateBeforeCall(contentType, apiKeyL1, apiKeyL2, destinationAirportLatitude, destinationAirportLongitude, numberOfPassengers, originAirportLatitude, originAirportLongitude, travelClass, travelMode, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for confirmCarbonOffset4
     * @param carbonOffset Confirm Carbon Offset (Value &#x3D; y/n) (required)
     * @param transactionId transaction_id (required)
     * @param contactEmail Contact email (optional)
     * @param contactFirstName Contact first name (optional)
     * @param contactLastName Contact last name (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call confirmCarbonOffset4Call(String carbonOffset, String transactionId, String contactEmail, String contactFirstName, String contactLastName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "http://api.climatekuul.com:8000/footprint" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/airtravelCoordinates/confirmCarbonOffset";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (carbonOffset != null) {
            localVarFormParams.put("carbonOffset", carbonOffset);
        }

        if (contactEmail != null) {
            localVarFormParams.put("contactEmail", contactEmail);
        }

        if (contactFirstName != null) {
            localVarFormParams.put("contactFirstName", contactFirstName);
        }

        if (contactLastName != null) {
            localVarFormParams.put("contactLastName", contactLastName);
        }

        if (transactionId != null) {
            localVarFormParams.put("transaction_id", transactionId);
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call confirmCarbonOffset4ValidateBeforeCall(String carbonOffset, String transactionId, String contactEmail, String contactFirstName, String contactLastName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'carbonOffset' is set
        if (carbonOffset == null) {
            throw new ApiException("Missing the required parameter 'carbonOffset' when calling confirmCarbonOffset4(Async)");
        }

        // verify the required parameter 'transactionId' is set
        if (transactionId == null) {
            throw new ApiException("Missing the required parameter 'transactionId' when calling confirmCarbonOffset4(Async)");
        }

        return confirmCarbonOffset4Call(carbonOffset, transactionId, contactEmail, contactFirstName, contactLastName, _callback);

    }

    /**
     * confirmCarbonOffset
     * 
     * @param carbonOffset Confirm Carbon Offset (Value &#x3D; y/n) (required)
     * @param transactionId transaction_id (required)
     * @param contactEmail Contact email (optional)
     * @param contactFirstName Contact first name (optional)
     * @param contactLastName Contact last name (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void confirmCarbonOffset4(String carbonOffset, String transactionId, String contactEmail, String contactFirstName, String contactLastName) throws ApiException {
        confirmCarbonOffset4WithHttpInfo(carbonOffset, transactionId, contactEmail, contactFirstName, contactLastName);
    }

    /**
     * confirmCarbonOffset
     * 
     * @param carbonOffset Confirm Carbon Offset (Value &#x3D; y/n) (required)
     * @param transactionId transaction_id (required)
     * @param contactEmail Contact email (optional)
     * @param contactFirstName Contact first name (optional)
     * @param contactLastName Contact last name (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> confirmCarbonOffset4WithHttpInfo(String carbonOffset, String transactionId, String contactEmail, String contactFirstName, String contactLastName) throws ApiException {
        okhttp3.Call localVarCall = confirmCarbonOffset4ValidateBeforeCall(carbonOffset, transactionId, contactEmail, contactFirstName, contactLastName, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * confirmCarbonOffset (asynchronously)
     * 
     * @param carbonOffset Confirm Carbon Offset (Value &#x3D; y/n) (required)
     * @param transactionId transaction_id (required)
     * @param contactEmail Contact email (optional)
     * @param contactFirstName Contact first name (optional)
     * @param contactLastName Contact last name (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call confirmCarbonOffset4Async(String carbonOffset, String transactionId, String contactEmail, String contactFirstName, String contactLastName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = confirmCarbonOffset4ValidateBeforeCall(carbonOffset, transactionId, contactEmail, contactFirstName, contactLastName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for confirmPayment4
     * @param apiKeyL1 apikey_l1 (Like: d95fead6-e8a6-4247-9fb9-7835101a4560) (required)
     * @param apiKeyL2 apikey_l2 (Like: c60f8db5-7904-4227-960d-27400c38b166) (required)
     * @param confirmPayment Confirm Payment (Value &#x3D; y/n) (required)
     * @param paymentID Payment Id (required)
     * @param transactionId transaction_id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call confirmPayment4Call(String apiKeyL1, String apiKeyL2, String confirmPayment, Integer paymentID, String transactionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "http://api.climatekuul.com:8000/footprint" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/airtravelCoordinates/confirmPayment";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKeyL1 != null) {
            localVarFormParams.put("apiKey_l1", apiKeyL1);
        }

        if (apiKeyL2 != null) {
            localVarFormParams.put("apiKey_l2", apiKeyL2);
        }

        if (confirmPayment != null) {
            localVarFormParams.put("confirmPayment", confirmPayment);
        }

        if (paymentID != null) {
            localVarFormParams.put("paymentID", paymentID);
        }

        if (transactionId != null) {
            localVarFormParams.put("transaction_id", transactionId);
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call confirmPayment4ValidateBeforeCall(String apiKeyL1, String apiKeyL2, String confirmPayment, Integer paymentID, String transactionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKeyL1' is set
        if (apiKeyL1 == null) {
            throw new ApiException("Missing the required parameter 'apiKeyL1' when calling confirmPayment4(Async)");
        }

        // verify the required parameter 'apiKeyL2' is set
        if (apiKeyL2 == null) {
            throw new ApiException("Missing the required parameter 'apiKeyL2' when calling confirmPayment4(Async)");
        }

        // verify the required parameter 'confirmPayment' is set
        if (confirmPayment == null) {
            throw new ApiException("Missing the required parameter 'confirmPayment' when calling confirmPayment4(Async)");
        }

        // verify the required parameter 'paymentID' is set
        if (paymentID == null) {
            throw new ApiException("Missing the required parameter 'paymentID' when calling confirmPayment4(Async)");
        }

        // verify the required parameter 'transactionId' is set
        if (transactionId == null) {
            throw new ApiException("Missing the required parameter 'transactionId' when calling confirmPayment4(Async)");
        }

        return confirmPayment4Call(apiKeyL1, apiKeyL2, confirmPayment, paymentID, transactionId, _callback);

    }

    /**
     * confirmPayment
     * 
     * @param apiKeyL1 apikey_l1 (Like: d95fead6-e8a6-4247-9fb9-7835101a4560) (required)
     * @param apiKeyL2 apikey_l2 (Like: c60f8db5-7904-4227-960d-27400c38b166) (required)
     * @param confirmPayment Confirm Payment (Value &#x3D; y/n) (required)
     * @param paymentID Payment Id (required)
     * @param transactionId transaction_id (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void confirmPayment4(String apiKeyL1, String apiKeyL2, String confirmPayment, Integer paymentID, String transactionId) throws ApiException {
        confirmPayment4WithHttpInfo(apiKeyL1, apiKeyL2, confirmPayment, paymentID, transactionId);
    }

    /**
     * confirmPayment
     * 
     * @param apiKeyL1 apikey_l1 (Like: d95fead6-e8a6-4247-9fb9-7835101a4560) (required)
     * @param apiKeyL2 apikey_l2 (Like: c60f8db5-7904-4227-960d-27400c38b166) (required)
     * @param confirmPayment Confirm Payment (Value &#x3D; y/n) (required)
     * @param paymentID Payment Id (required)
     * @param transactionId transaction_id (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> confirmPayment4WithHttpInfo(String apiKeyL1, String apiKeyL2, String confirmPayment, Integer paymentID, String transactionId) throws ApiException {
        okhttp3.Call localVarCall = confirmPayment4ValidateBeforeCall(apiKeyL1, apiKeyL2, confirmPayment, paymentID, transactionId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * confirmPayment (asynchronously)
     * 
     * @param apiKeyL1 apikey_l1 (Like: d95fead6-e8a6-4247-9fb9-7835101a4560) (required)
     * @param apiKeyL2 apikey_l2 (Like: c60f8db5-7904-4227-960d-27400c38b166) (required)
     * @param confirmPayment Confirm Payment (Value &#x3D; y/n) (required)
     * @param paymentID Payment Id (required)
     * @param transactionId transaction_id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call confirmPayment4Async(String apiKeyL1, String apiKeyL2, String confirmPayment, Integer paymentID, String transactionId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = confirmPayment4ValidateBeforeCall(apiKeyL1, apiKeyL2, confirmPayment, paymentID, transactionId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for confirmPaymentOfTransaction4
     * @param confirmTransaction Confirm Payment Of Transaction (Value &#x3D; y/n) (required)
     * @param transactionId transaction_id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call confirmPaymentOfTransaction4Call(String confirmTransaction, String transactionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "http://api.climatekuul.com:8000/footprint" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/airtravelCoordinates/confirmTransaction";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (confirmTransaction != null) {
            localVarFormParams.put("confirmTransaction", confirmTransaction);
        }

        if (transactionId != null) {
            localVarFormParams.put("transaction_id", transactionId);
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call confirmPaymentOfTransaction4ValidateBeforeCall(String confirmTransaction, String transactionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'confirmTransaction' is set
        if (confirmTransaction == null) {
            throw new ApiException("Missing the required parameter 'confirmTransaction' when calling confirmPaymentOfTransaction4(Async)");
        }

        // verify the required parameter 'transactionId' is set
        if (transactionId == null) {
            throw new ApiException("Missing the required parameter 'transactionId' when calling confirmPaymentOfTransaction4(Async)");
        }

        return confirmPaymentOfTransaction4Call(confirmTransaction, transactionId, _callback);

    }

    /**
     * confirmTransaction
     * 
     * @param confirmTransaction Confirm Payment Of Transaction (Value &#x3D; y/n) (required)
     * @param transactionId transaction_id (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void confirmPaymentOfTransaction4(String confirmTransaction, String transactionId) throws ApiException {
        confirmPaymentOfTransaction4WithHttpInfo(confirmTransaction, transactionId);
    }

    /**
     * confirmTransaction
     * 
     * @param confirmTransaction Confirm Payment Of Transaction (Value &#x3D; y/n) (required)
     * @param transactionId transaction_id (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> confirmPaymentOfTransaction4WithHttpInfo(String confirmTransaction, String transactionId) throws ApiException {
        okhttp3.Call localVarCall = confirmPaymentOfTransaction4ValidateBeforeCall(confirmTransaction, transactionId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * confirmTransaction (asynchronously)
     * 
     * @param confirmTransaction Confirm Payment Of Transaction (Value &#x3D; y/n) (required)
     * @param transactionId transaction_id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call confirmPaymentOfTransaction4Async(String confirmTransaction, String transactionId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = confirmPaymentOfTransaction4ValidateBeforeCall(confirmTransaction, transactionId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for confirmsPlanting4
     * @param apiKeyL1 apikey_l1 (Like: d95fead6-e8a6-4247-9fb9-7835101a4560) (required)
     * @param apiKeyL2 apikey_l2 (Like: c60f8db5-7904-4227-960d-27400c38b166) (required)
     * @param confirmPlanting Confirm Planting (Value &#x3D; y/n) (required)
     * @param transactionId transaction_id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call confirmsPlanting4Call(String apiKeyL1, String apiKeyL2, String confirmPlanting, String transactionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "http://api.climatekuul.com:8000/footprint" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/airtravelCoordinates/confirmPlanting";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKeyL1 != null) {
            localVarFormParams.put("apiKey_l1", apiKeyL1);
        }

        if (apiKeyL2 != null) {
            localVarFormParams.put("apiKey_l2", apiKeyL2);
        }

        if (confirmPlanting != null) {
            localVarFormParams.put("confirmPlanting", confirmPlanting);
        }

        if (transactionId != null) {
            localVarFormParams.put("transaction_id", transactionId);
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call confirmsPlanting4ValidateBeforeCall(String apiKeyL1, String apiKeyL2, String confirmPlanting, String transactionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKeyL1' is set
        if (apiKeyL1 == null) {
            throw new ApiException("Missing the required parameter 'apiKeyL1' when calling confirmsPlanting4(Async)");
        }

        // verify the required parameter 'apiKeyL2' is set
        if (apiKeyL2 == null) {
            throw new ApiException("Missing the required parameter 'apiKeyL2' when calling confirmsPlanting4(Async)");
        }

        // verify the required parameter 'confirmPlanting' is set
        if (confirmPlanting == null) {
            throw new ApiException("Missing the required parameter 'confirmPlanting' when calling confirmsPlanting4(Async)");
        }

        // verify the required parameter 'transactionId' is set
        if (transactionId == null) {
            throw new ApiException("Missing the required parameter 'transactionId' when calling confirmsPlanting4(Async)");
        }

        return confirmsPlanting4Call(apiKeyL1, apiKeyL2, confirmPlanting, transactionId, _callback);

    }

    /**
     * confirmPlanting
     * 
     * @param apiKeyL1 apikey_l1 (Like: d95fead6-e8a6-4247-9fb9-7835101a4560) (required)
     * @param apiKeyL2 apikey_l2 (Like: c60f8db5-7904-4227-960d-27400c38b166) (required)
     * @param confirmPlanting Confirm Planting (Value &#x3D; y/n) (required)
     * @param transactionId transaction_id (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void confirmsPlanting4(String apiKeyL1, String apiKeyL2, String confirmPlanting, String transactionId) throws ApiException {
        confirmsPlanting4WithHttpInfo(apiKeyL1, apiKeyL2, confirmPlanting, transactionId);
    }

    /**
     * confirmPlanting
     * 
     * @param apiKeyL1 apikey_l1 (Like: d95fead6-e8a6-4247-9fb9-7835101a4560) (required)
     * @param apiKeyL2 apikey_l2 (Like: c60f8db5-7904-4227-960d-27400c38b166) (required)
     * @param confirmPlanting Confirm Planting (Value &#x3D; y/n) (required)
     * @param transactionId transaction_id (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> confirmsPlanting4WithHttpInfo(String apiKeyL1, String apiKeyL2, String confirmPlanting, String transactionId) throws ApiException {
        okhttp3.Call localVarCall = confirmsPlanting4ValidateBeforeCall(apiKeyL1, apiKeyL2, confirmPlanting, transactionId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * confirmPlanting (asynchronously)
     * 
     * @param apiKeyL1 apikey_l1 (Like: d95fead6-e8a6-4247-9fb9-7835101a4560) (required)
     * @param apiKeyL2 apikey_l2 (Like: c60f8db5-7904-4227-960d-27400c38b166) (required)
     * @param confirmPlanting Confirm Planting (Value &#x3D; y/n) (required)
     * @param transactionId transaction_id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call confirmsPlanting4Async(String apiKeyL1, String apiKeyL2, String confirmPlanting, String transactionId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = confirmsPlanting4ValidateBeforeCall(apiKeyL1, apiKeyL2, confirmPlanting, transactionId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
