/*
 * climateKuul live
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Leg1;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AirtravelMultilegRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:18:18.057349-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AirtravelMultilegRequest {
  public static final String SERIALIZED_NAME_API_KEY_L1 = "apiKey_l1";
  @SerializedName(SERIALIZED_NAME_API_KEY_L1)
  private String apiKeyL1;

  public static final String SERIALIZED_NAME_API_KEY_L2 = "apiKey_l2";
  @SerializedName(SERIALIZED_NAME_API_KEY_L2)
  private String apiKeyL2;

  public static final String SERIALIZED_NAME_CONTACT_EMAIL = "contactEmail";
  @SerializedName(SERIALIZED_NAME_CONTACT_EMAIL)
  private String contactEmail;

  public static final String SERIALIZED_NAME_CONTACT_FIRST_NAME = "contactFirstName";
  @SerializedName(SERIALIZED_NAME_CONTACT_FIRST_NAME)
  private String contactFirstName;

  public static final String SERIALIZED_NAME_CONTACT_LAST_NAME = "contactLastName";
  @SerializedName(SERIALIZED_NAME_CONTACT_LAST_NAME)
  private String contactLastName;

  public static final String SERIALIZED_NAME_LEG1 = "leg1";
  @SerializedName(SERIALIZED_NAME_LEG1)
  private Leg1 leg1;

  public static final String SERIALIZED_NAME_LEG2 = "leg2";
  @SerializedName(SERIALIZED_NAME_LEG2)
  private Leg1 leg2;

  public static final String SERIALIZED_NAME_LEG3 = "leg3";
  @SerializedName(SERIALIZED_NAME_LEG3)
  private Leg1 leg3;

  public static final String SERIALIZED_NAME_LEGS_COUNT = "legs_count";
  @SerializedName(SERIALIZED_NAME_LEGS_COUNT)
  private String legsCount;

  public static final String SERIALIZED_NAME_NUMBER_OF_PASSENGERS = "number_of_passengers";
  @SerializedName(SERIALIZED_NAME_NUMBER_OF_PASSENGERS)
  private String numberOfPassengers;

  public static final String SERIALIZED_NAME_TRAVEL_MODE = "travel_mode";
  @SerializedName(SERIALIZED_NAME_TRAVEL_MODE)
  private String travelMode;

  public AirtravelMultilegRequest() {
  }

  public AirtravelMultilegRequest apiKeyL1(String apiKeyL1) {
    this.apiKeyL1 = apiKeyL1;
    return this;
  }

  /**
   * Get apiKeyL1
   * @return apiKeyL1
   */
  @javax.annotation.Nonnull
  public String getApiKeyL1() {
    return apiKeyL1;
  }

  public void setApiKeyL1(String apiKeyL1) {
    this.apiKeyL1 = apiKeyL1;
  }


  public AirtravelMultilegRequest apiKeyL2(String apiKeyL2) {
    this.apiKeyL2 = apiKeyL2;
    return this;
  }

  /**
   * Get apiKeyL2
   * @return apiKeyL2
   */
  @javax.annotation.Nonnull
  public String getApiKeyL2() {
    return apiKeyL2;
  }

  public void setApiKeyL2(String apiKeyL2) {
    this.apiKeyL2 = apiKeyL2;
  }


  public AirtravelMultilegRequest contactEmail(String contactEmail) {
    this.contactEmail = contactEmail;
    return this;
  }

  /**
   * Get contactEmail
   * @return contactEmail
   */
  @javax.annotation.Nonnull
  public String getContactEmail() {
    return contactEmail;
  }

  public void setContactEmail(String contactEmail) {
    this.contactEmail = contactEmail;
  }


  public AirtravelMultilegRequest contactFirstName(String contactFirstName) {
    this.contactFirstName = contactFirstName;
    return this;
  }

  /**
   * Get contactFirstName
   * @return contactFirstName
   */
  @javax.annotation.Nonnull
  public String getContactFirstName() {
    return contactFirstName;
  }

  public void setContactFirstName(String contactFirstName) {
    this.contactFirstName = contactFirstName;
  }


  public AirtravelMultilegRequest contactLastName(String contactLastName) {
    this.contactLastName = contactLastName;
    return this;
  }

  /**
   * Get contactLastName
   * @return contactLastName
   */
  @javax.annotation.Nonnull
  public String getContactLastName() {
    return contactLastName;
  }

  public void setContactLastName(String contactLastName) {
    this.contactLastName = contactLastName;
  }


  public AirtravelMultilegRequest leg1(Leg1 leg1) {
    this.leg1 = leg1;
    return this;
  }

  /**
   * Get leg1
   * @return leg1
   */
  @javax.annotation.Nonnull
  public Leg1 getLeg1() {
    return leg1;
  }

  public void setLeg1(Leg1 leg1) {
    this.leg1 = leg1;
  }


  public AirtravelMultilegRequest leg2(Leg1 leg2) {
    this.leg2 = leg2;
    return this;
  }

  /**
   * Get leg2
   * @return leg2
   */
  @javax.annotation.Nonnull
  public Leg1 getLeg2() {
    return leg2;
  }

  public void setLeg2(Leg1 leg2) {
    this.leg2 = leg2;
  }


  public AirtravelMultilegRequest leg3(Leg1 leg3) {
    this.leg3 = leg3;
    return this;
  }

  /**
   * Get leg3
   * @return leg3
   */
  @javax.annotation.Nonnull
  public Leg1 getLeg3() {
    return leg3;
  }

  public void setLeg3(Leg1 leg3) {
    this.leg3 = leg3;
  }


  public AirtravelMultilegRequest legsCount(String legsCount) {
    this.legsCount = legsCount;
    return this;
  }

  /**
   * Get legsCount
   * @return legsCount
   */
  @javax.annotation.Nonnull
  public String getLegsCount() {
    return legsCount;
  }

  public void setLegsCount(String legsCount) {
    this.legsCount = legsCount;
  }


  public AirtravelMultilegRequest numberOfPassengers(String numberOfPassengers) {
    this.numberOfPassengers = numberOfPassengers;
    return this;
  }

  /**
   * Get numberOfPassengers
   * @return numberOfPassengers
   */
  @javax.annotation.Nonnull
  public String getNumberOfPassengers() {
    return numberOfPassengers;
  }

  public void setNumberOfPassengers(String numberOfPassengers) {
    this.numberOfPassengers = numberOfPassengers;
  }


  public AirtravelMultilegRequest travelMode(String travelMode) {
    this.travelMode = travelMode;
    return this;
  }

  /**
   * Get travelMode
   * @return travelMode
   */
  @javax.annotation.Nonnull
  public String getTravelMode() {
    return travelMode;
  }

  public void setTravelMode(String travelMode) {
    this.travelMode = travelMode;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AirtravelMultilegRequest airtravelMultilegRequest = (AirtravelMultilegRequest) o;
    return Objects.equals(this.apiKeyL1, airtravelMultilegRequest.apiKeyL1) &&
        Objects.equals(this.apiKeyL2, airtravelMultilegRequest.apiKeyL2) &&
        Objects.equals(this.contactEmail, airtravelMultilegRequest.contactEmail) &&
        Objects.equals(this.contactFirstName, airtravelMultilegRequest.contactFirstName) &&
        Objects.equals(this.contactLastName, airtravelMultilegRequest.contactLastName) &&
        Objects.equals(this.leg1, airtravelMultilegRequest.leg1) &&
        Objects.equals(this.leg2, airtravelMultilegRequest.leg2) &&
        Objects.equals(this.leg3, airtravelMultilegRequest.leg3) &&
        Objects.equals(this.legsCount, airtravelMultilegRequest.legsCount) &&
        Objects.equals(this.numberOfPassengers, airtravelMultilegRequest.numberOfPassengers) &&
        Objects.equals(this.travelMode, airtravelMultilegRequest.travelMode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(apiKeyL1, apiKeyL2, contactEmail, contactFirstName, contactLastName, leg1, leg2, leg3, legsCount, numberOfPassengers, travelMode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AirtravelMultilegRequest {\n");
    sb.append("    apiKeyL1: ").append(toIndentedString(apiKeyL1)).append("\n");
    sb.append("    apiKeyL2: ").append(toIndentedString(apiKeyL2)).append("\n");
    sb.append("    contactEmail: ").append(toIndentedString(contactEmail)).append("\n");
    sb.append("    contactFirstName: ").append(toIndentedString(contactFirstName)).append("\n");
    sb.append("    contactLastName: ").append(toIndentedString(contactLastName)).append("\n");
    sb.append("    leg1: ").append(toIndentedString(leg1)).append("\n");
    sb.append("    leg2: ").append(toIndentedString(leg2)).append("\n");
    sb.append("    leg3: ").append(toIndentedString(leg3)).append("\n");
    sb.append("    legsCount: ").append(toIndentedString(legsCount)).append("\n");
    sb.append("    numberOfPassengers: ").append(toIndentedString(numberOfPassengers)).append("\n");
    sb.append("    travelMode: ").append(toIndentedString(travelMode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("apiKey_l1");
    openapiFields.add("apiKey_l2");
    openapiFields.add("contactEmail");
    openapiFields.add("contactFirstName");
    openapiFields.add("contactLastName");
    openapiFields.add("leg1");
    openapiFields.add("leg2");
    openapiFields.add("leg3");
    openapiFields.add("legs_count");
    openapiFields.add("number_of_passengers");
    openapiFields.add("travel_mode");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("apiKey_l1");
    openapiRequiredFields.add("apiKey_l2");
    openapiRequiredFields.add("contactEmail");
    openapiRequiredFields.add("contactFirstName");
    openapiRequiredFields.add("contactLastName");
    openapiRequiredFields.add("leg1");
    openapiRequiredFields.add("leg2");
    openapiRequiredFields.add("leg3");
    openapiRequiredFields.add("legs_count");
    openapiRequiredFields.add("number_of_passengers");
    openapiRequiredFields.add("travel_mode");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AirtravelMultilegRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AirtravelMultilegRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AirtravelMultilegRequest is not found in the empty JSON string", AirtravelMultilegRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AirtravelMultilegRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AirtravelMultilegRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AirtravelMultilegRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("apiKey_l1").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `apiKey_l1` to be a primitive type in the JSON string but got `%s`", jsonObj.get("apiKey_l1").toString()));
      }
      if (!jsonObj.get("apiKey_l2").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `apiKey_l2` to be a primitive type in the JSON string but got `%s`", jsonObj.get("apiKey_l2").toString()));
      }
      if (!jsonObj.get("contactEmail").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contactEmail` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contactEmail").toString()));
      }
      if (!jsonObj.get("contactFirstName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contactFirstName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contactFirstName").toString()));
      }
      if (!jsonObj.get("contactLastName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contactLastName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contactLastName").toString()));
      }
      // validate the required field `leg1`
      Leg1.validateJsonElement(jsonObj.get("leg1"));
      // validate the required field `leg2`
      Leg1.validateJsonElement(jsonObj.get("leg2"));
      // validate the required field `leg3`
      Leg1.validateJsonElement(jsonObj.get("leg3"));
      if (!jsonObj.get("legs_count").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `legs_count` to be a primitive type in the JSON string but got `%s`", jsonObj.get("legs_count").toString()));
      }
      if (!jsonObj.get("number_of_passengers").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `number_of_passengers` to be a primitive type in the JSON string but got `%s`", jsonObj.get("number_of_passengers").toString()));
      }
      if (!jsonObj.get("travel_mode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `travel_mode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("travel_mode").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AirtravelMultilegRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AirtravelMultilegRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AirtravelMultilegRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AirtravelMultilegRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<AirtravelMultilegRequest>() {
           @Override
           public void write(JsonWriter out, AirtravelMultilegRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AirtravelMultilegRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AirtravelMultilegRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AirtravelMultilegRequest
   * @throws IOException if the JSON string is invalid with respect to AirtravelMultilegRequest
   */
  public static AirtravelMultilegRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AirtravelMultilegRequest.class);
  }

  /**
   * Convert an instance of AirtravelMultilegRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

