/**
 * climateKuul live
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAirtravelMultilegApi.h"
#include "OAIServerConfiguration.h"
#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAIAirtravelMultilegApi::OAIAirtravelMultilegApi(const int timeOut)
    : _timeOut(timeOut),
      _manager(nullptr),
      _isResponseCompressionEnabled(false),
      _isRequestCompressionEnabled(false) {
    initializeServerConfigs();
}

OAIAirtravelMultilegApi::~OAIAirtravelMultilegApi() {
}

void OAIAirtravelMultilegApi::initializeServerConfigs() {
    //Default server
    QList<OAIServerConfiguration> defaultConf = QList<OAIServerConfiguration>();
    //varying endpoint server
    defaultConf.append(OAIServerConfiguration(
    QUrl("http://api.climatekuul.com:8000/footprint"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    serverConf.append(OAIServerConfiguration(
    QUrl("http://api.climatekuul.com:8000/footprint"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("airtravelMultileg", serverConf);
    _serverIndices.insert("airtravelMultileg", 0);
    serverConf.append(OAIServerConfiguration(
    QUrl("http://api.climatekuul.com:8000/footprint"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("confirmCarbonOffset3", serverConf);
    _serverIndices.insert("confirmCarbonOffset3", 0);
    serverConf.append(OAIServerConfiguration(
    QUrl("http://api.climatekuul.com:8000/footprint"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("confirmPayment3", serverConf);
    _serverIndices.insert("confirmPayment3", 0);
    serverConf.append(OAIServerConfiguration(
    QUrl("http://api.climatekuul.com:8000/footprint"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("confirmPaymentOfTransaction3", serverConf);
    _serverIndices.insert("confirmPaymentOfTransaction3", 0);
    serverConf.append(OAIServerConfiguration(
    QUrl("http://api.climatekuul.com:8000/footprint"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("confirmsPlanting3", serverConf);
    _serverIndices.insert("confirmsPlanting3", 0);
}

/**
* returns 0 on success and -1, -2 or -3 on failure.
* -1 when the variable does not exist and -2 if the value is not defined in the enum and -3 if the operation or server index is not found
*/
int OAIAirtravelMultilegApi::setDefaultServerValue(int serverIndex, const QString &operation, const QString &variable, const QString &value) {
    auto it = _serverConfigs.find(operation);
    if (it != _serverConfigs.end() && serverIndex < it.value().size()) {
      return _serverConfigs[operation][serverIndex].setDefaultValue(variable,value);
    }
    return -3;
}
void OAIAirtravelMultilegApi::setServerIndex(const QString &operation, int serverIndex) {
    if (_serverIndices.contains(operation) && serverIndex < _serverConfigs.find(operation).value().size()) {
        _serverIndices[operation] = serverIndex;
    }
}

void OAIAirtravelMultilegApi::setApiKey(const QString &apiKeyName, const QString &apiKey) {
    _apiKeys.insert(apiKeyName, apiKey);
}

void OAIAirtravelMultilegApi::setBearerToken(const QString &token) {
    _bearerToken = token;
}

void OAIAirtravelMultilegApi::setUsername(const QString &username) {
    _username = username;
}

void OAIAirtravelMultilegApi::setPassword(const QString &password) {
    _password = password;
}


void OAIAirtravelMultilegApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAIAirtravelMultilegApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAIAirtravelMultilegApi::setNetworkAccessManager(QNetworkAccessManager* manager) {
    _manager = manager;
}

/**
    * Appends a new ServerConfiguration to the config map for a specific operation.
    * @param operation The id to the target operation.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    * returns the index of the new server config on success and -1 if the operation is not found
    */
int OAIAirtravelMultilegApi::addServerConfiguration(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    if (_serverConfigs.contains(operation)) {
        _serverConfigs[operation].append(OAIServerConfiguration(
                    url,
                    description,
                    variables));
        return _serverConfigs[operation].size()-1;
    } else {
        return -1;
    }
}

/**
    * Appends a new ServerConfiguration to the config map for a all operations and sets the index to that server.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIAirtravelMultilegApi::setNewServerForAllOperations(const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    for (auto keyIt = _serverIndices.keyBegin(); keyIt != _serverIndices.keyEnd(); keyIt++) {
        setServerIndex(*keyIt, addServerConfiguration(*keyIt, url, description, variables));
    }
}

/**
    * Appends a new ServerConfiguration to the config map for an operations and sets the index to that server.
    * @param URL A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIAirtravelMultilegApi::setNewServer(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    setServerIndex(operation, addServerConfiguration(operation, url, description, variables));
}

void OAIAirtravelMultilegApi::addHeaders(const QString &key, const QString &value) {
    _defaultHeaders.insert(key, value);
}

void OAIAirtravelMultilegApi::enableRequestCompression() {
    _isRequestCompressionEnabled = true;
}

void OAIAirtravelMultilegApi::enableResponseCompression() {
    _isResponseCompressionEnabled = true;
}

void OAIAirtravelMultilegApi::abortRequests() {
    Q_EMIT abortRequestsSignal();
}

QString OAIAirtravelMultilegApi::getParamStylePrefix(const QString &style) {
    if (style == "matrix") {
        return ";";
    } else if (style == "label") {
        return ".";
    } else if (style == "form") {
        return "&";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "&";
    } else if (style == "pipeDelimited") {
        return "&";
    } else {
        return "none";
    }
}

QString OAIAirtravelMultilegApi::getParamStyleSuffix(const QString &style) {
    if (style == "matrix") {
        return "=";
    } else if (style == "label") {
        return "";
    } else if (style == "form") {
        return "=";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "=";
    } else if (style == "pipeDelimited") {
        return "=";
    } else {
        return "none";
    }
}

QString OAIAirtravelMultilegApi::getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode) {

    if (style == "matrix") {
        return (isExplode) ? ";" + name + "=" : ",";

    } else if (style == "label") {
        return (isExplode) ? "." : ",";

    } else if (style == "form") {
        return (isExplode) ? "&" + name + "=" : ",";

    } else if (style == "simple") {
        return ",";
    } else if (style == "spaceDelimited") {
        return (isExplode) ? "&" + name + "=" : " ";

    } else if (style == "pipeDelimited") {
        return (isExplode) ? "&" + name + "=" : "|";

    } else if (style == "deepObject") {
        return (isExplode) ? "&" : "none";

    } else {
        return "none";
    }
}

void OAIAirtravelMultilegApi::airtravelMultileg(const OAIAirtravelMultilegRequest &oai_airtravel_multileg_request) {
    QString fullPath = QString(_serverConfigs["airtravelMultileg"][_serverIndices.value("airtravelMultileg")].URL()+"/airtravelMultileg");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oai_airtravel_multileg_request.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIAirtravelMultilegApi::airtravelMultilegCallback);
    connect(this, &OAIAirtravelMultilegApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIAirtravelMultilegApi::airtravelMultilegCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT airtravelMultilegSignal();
        Q_EMIT airtravelMultilegSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT airtravelMultilegSignalE(error_type, error_str);
        Q_EMIT airtravelMultilegSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT airtravelMultilegSignalError(error_type, error_str);
        Q_EMIT airtravelMultilegSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIAirtravelMultilegApi::confirmCarbonOffset3(const QString &carbon_offset, const QString &transaction_id, const ::OpenAPI::OptionalParam<QString> &contact_email, const ::OpenAPI::OptionalParam<QString> &contact_first_name, const ::OpenAPI::OptionalParam<QString> &contact_last_name) {
    QString fullPath = QString(_serverConfigs["confirmCarbonOffset3"][_serverIndices.value("confirmCarbonOffset3")].URL()+"/airtravelMultileg/confirmCarbonOffset");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PATCH");

    
    {
        input.add_var("carbonOffset", ::OpenAPI::toStringValue(carbon_offset));
    }
    if (contact_email.hasValue())
    {
        input.add_var("contactEmail", ::OpenAPI::toStringValue(contact_email.value()));
    }
    if (contact_first_name.hasValue())
    {
        input.add_var("contactFirstName", ::OpenAPI::toStringValue(contact_first_name.value()));
    }
    if (contact_last_name.hasValue())
    {
        input.add_var("contactLastName", ::OpenAPI::toStringValue(contact_last_name.value()));
    }
    
    {
        input.add_var("transaction_id", ::OpenAPI::toStringValue(transaction_id));
    }

    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIAirtravelMultilegApi::confirmCarbonOffset3Callback);
    connect(this, &OAIAirtravelMultilegApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIAirtravelMultilegApi::confirmCarbonOffset3Callback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT confirmCarbonOffset3Signal();
        Q_EMIT confirmCarbonOffset3SignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT confirmCarbonOffset3SignalE(error_type, error_str);
        Q_EMIT confirmCarbonOffset3SignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT confirmCarbonOffset3SignalError(error_type, error_str);
        Q_EMIT confirmCarbonOffset3SignalErrorFull(worker, error_type, error_str);
    }
}

void OAIAirtravelMultilegApi::confirmPayment3(const QString &api_key_l1, const QString &api_key_l2, const QString &confirm_payment, const qint32 &payment_id, const QString &transaction_id) {
    QString fullPath = QString(_serverConfigs["confirmPayment3"][_serverIndices.value("confirmPayment3")].URL()+"/airtravelMultileg/confirmPayment");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PATCH");

    
    {
        input.add_var("apiKey_l1", ::OpenAPI::toStringValue(api_key_l1));
    }
    
    {
        input.add_var("apiKey_l2", ::OpenAPI::toStringValue(api_key_l2));
    }
    
    {
        input.add_var("confirmPayment", ::OpenAPI::toStringValue(confirm_payment));
    }
    
    {
        input.add_var("paymentID", ::OpenAPI::toStringValue(payment_id));
    }
    
    {
        input.add_var("transaction_id", ::OpenAPI::toStringValue(transaction_id));
    }

    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIAirtravelMultilegApi::confirmPayment3Callback);
    connect(this, &OAIAirtravelMultilegApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIAirtravelMultilegApi::confirmPayment3Callback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT confirmPayment3Signal();
        Q_EMIT confirmPayment3SignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT confirmPayment3SignalE(error_type, error_str);
        Q_EMIT confirmPayment3SignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT confirmPayment3SignalError(error_type, error_str);
        Q_EMIT confirmPayment3SignalErrorFull(worker, error_type, error_str);
    }
}

void OAIAirtravelMultilegApi::confirmPaymentOfTransaction3(const QString &confirm_transaction, const QString &transaction_id) {
    QString fullPath = QString(_serverConfigs["confirmPaymentOfTransaction3"][_serverIndices.value("confirmPaymentOfTransaction3")].URL()+"/airtravelMultileg/confirmTransaction");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PATCH");

    
    {
        input.add_var("confirmTransaction", ::OpenAPI::toStringValue(confirm_transaction));
    }
    
    {
        input.add_var("transaction_id", ::OpenAPI::toStringValue(transaction_id));
    }

    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIAirtravelMultilegApi::confirmPaymentOfTransaction3Callback);
    connect(this, &OAIAirtravelMultilegApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIAirtravelMultilegApi::confirmPaymentOfTransaction3Callback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT confirmPaymentOfTransaction3Signal();
        Q_EMIT confirmPaymentOfTransaction3SignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT confirmPaymentOfTransaction3SignalE(error_type, error_str);
        Q_EMIT confirmPaymentOfTransaction3SignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT confirmPaymentOfTransaction3SignalError(error_type, error_str);
        Q_EMIT confirmPaymentOfTransaction3SignalErrorFull(worker, error_type, error_str);
    }
}

void OAIAirtravelMultilegApi::confirmsPlanting3(const QString &api_key_l1, const QString &api_key_l2, const QString &confirm_planting, const QString &transaction_id) {
    QString fullPath = QString(_serverConfigs["confirmsPlanting3"][_serverIndices.value("confirmsPlanting3")].URL()+"/airtravelMultileg/confirmPlanting");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PATCH");

    
    {
        input.add_var("apiKey_l1", ::OpenAPI::toStringValue(api_key_l1));
    }
    
    {
        input.add_var("apiKey_l2", ::OpenAPI::toStringValue(api_key_l2));
    }
    
    {
        input.add_var("confirmPlanting", ::OpenAPI::toStringValue(confirm_planting));
    }
    
    {
        input.add_var("transaction_id", ::OpenAPI::toStringValue(transaction_id));
    }

    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIAirtravelMultilegApi::confirmsPlanting3Callback);
    connect(this, &OAIAirtravelMultilegApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIAirtravelMultilegApi::confirmsPlanting3Callback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT confirmsPlanting3Signal();
        Q_EMIT confirmsPlanting3SignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT confirmsPlanting3SignalE(error_type, error_str);
        Q_EMIT confirmsPlanting3SignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT confirmsPlanting3SignalError(error_type, error_str);
        Q_EMIT confirmsPlanting3SignalErrorFull(worker, error_type, error_str);
    }
}

void OAIAirtravelMultilegApi::tokenAvailable(){

    oauthToken token;
    switch (_OauthMethod) {
    case 1: //implicit flow
        token = _implicitFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _implicitFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 2: //authorization flow
        token = _authFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _authFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 3: //client credentials flow
        token = _credentialFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 4: //resource owner password flow
        token = _passwordFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    default:
        qDebug() << "No Oauth method set!";
        break;
    }
}
} // namespace OpenAPI
