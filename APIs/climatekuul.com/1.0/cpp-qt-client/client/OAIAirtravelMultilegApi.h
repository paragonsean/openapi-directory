/**
 * climateKuul live
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAirtravelMultilegApi_H
#define OAI_OAIAirtravelMultilegApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAirtravelMultilegRequest.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAirtravelMultilegApi : public QObject {
    Q_OBJECT

public:
    OAIAirtravelMultilegApi(const int timeOut = 0);
    ~OAIAirtravelMultilegApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_airtravel_multileg_request OAIAirtravelMultilegRequest [required]
    */
    virtual void airtravelMultileg(const OAIAirtravelMultilegRequest &oai_airtravel_multileg_request);

    /**
    * @param[in]  carbon_offset QString [required]
    * @param[in]  transaction_id QString [required]
    * @param[in]  contact_email QString [optional]
    * @param[in]  contact_first_name QString [optional]
    * @param[in]  contact_last_name QString [optional]
    */
    virtual void confirmCarbonOffset3(const QString &carbon_offset, const QString &transaction_id, const ::OpenAPI::OptionalParam<QString> &contact_email = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &contact_first_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &contact_last_name = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  api_key_l1 QString [required]
    * @param[in]  api_key_l2 QString [required]
    * @param[in]  confirm_payment QString [required]
    * @param[in]  payment_id qint32 [required]
    * @param[in]  transaction_id QString [required]
    */
    virtual void confirmPayment3(const QString &api_key_l1, const QString &api_key_l2, const QString &confirm_payment, const qint32 &payment_id, const QString &transaction_id);

    /**
    * @param[in]  confirm_transaction QString [required]
    * @param[in]  transaction_id QString [required]
    */
    virtual void confirmPaymentOfTransaction3(const QString &confirm_transaction, const QString &transaction_id);

    /**
    * @param[in]  api_key_l1 QString [required]
    * @param[in]  api_key_l2 QString [required]
    * @param[in]  confirm_planting QString [required]
    * @param[in]  transaction_id QString [required]
    */
    virtual void confirmsPlanting3(const QString &api_key_l1, const QString &api_key_l2, const QString &confirm_planting, const QString &transaction_id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void airtravelMultilegCallback(OAIHttpRequestWorker *worker);
    void confirmCarbonOffset3Callback(OAIHttpRequestWorker *worker);
    void confirmPayment3Callback(OAIHttpRequestWorker *worker);
    void confirmPaymentOfTransaction3Callback(OAIHttpRequestWorker *worker);
    void confirmsPlanting3Callback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void airtravelMultilegSignal();
    void confirmCarbonOffset3Signal();
    void confirmPayment3Signal();
    void confirmPaymentOfTransaction3Signal();
    void confirmsPlanting3Signal();


    void airtravelMultilegSignalFull(OAIHttpRequestWorker *worker);
    void confirmCarbonOffset3SignalFull(OAIHttpRequestWorker *worker);
    void confirmPayment3SignalFull(OAIHttpRequestWorker *worker);
    void confirmPaymentOfTransaction3SignalFull(OAIHttpRequestWorker *worker);
    void confirmsPlanting3SignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use airtravelMultilegSignalError() instead")
    void airtravelMultilegSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void airtravelMultilegSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use confirmCarbonOffset3SignalError() instead")
    void confirmCarbonOffset3SignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void confirmCarbonOffset3SignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use confirmPayment3SignalError() instead")
    void confirmPayment3SignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void confirmPayment3SignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use confirmPaymentOfTransaction3SignalError() instead")
    void confirmPaymentOfTransaction3SignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void confirmPaymentOfTransaction3SignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use confirmsPlanting3SignalError() instead")
    void confirmsPlanting3SignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void confirmsPlanting3SignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use airtravelMultilegSignalErrorFull() instead")
    void airtravelMultilegSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void airtravelMultilegSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use confirmCarbonOffset3SignalErrorFull() instead")
    void confirmCarbonOffset3SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void confirmCarbonOffset3SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use confirmPayment3SignalErrorFull() instead")
    void confirmPayment3SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void confirmPayment3SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use confirmPaymentOfTransaction3SignalErrorFull() instead")
    void confirmPaymentOfTransaction3SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void confirmPaymentOfTransaction3SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use confirmsPlanting3SignalErrorFull() instead")
    void confirmsPlanting3SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void confirmsPlanting3SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
