/**
 * climateKuul live
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIEcommerceDeliveryApi_H
#define OAI_OAIEcommerceDeliveryApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIEcommerceDeliveryApi : public QObject {
    Q_OBJECT

public:
    OAIEcommerceDeliveryApi(const int timeOut = 0);
    ~OAIEcommerceDeliveryApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  carbon_offset QString [required]
    * @param[in]  transaction_id QString [required]
    * @param[in]  contact_email QString [optional]
    * @param[in]  contact_first_name QString [optional]
    * @param[in]  contact_last_name QString [optional]
    */
    virtual void confirmCarbonOffset1(const QString &carbon_offset, const QString &transaction_id, const ::OpenAPI::OptionalParam<QString> &contact_email = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &contact_first_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &contact_last_name = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  api_key_l1 QString [required]
    * @param[in]  api_key_l2 QString [required]
    * @param[in]  confirm_payment QString [required]
    * @param[in]  payment_id qint32 [required]
    * @param[in]  transaction_id QString [required]
    */
    virtual void confirmPayment1(const QString &api_key_l1, const QString &api_key_l2, const QString &confirm_payment, const qint32 &payment_id, const QString &transaction_id);

    /**
    * @param[in]  confirm_transaction QString [required]
    * @param[in]  transaction_id QString [required]
    */
    virtual void confirmPaymentOfTransaction1(const QString &confirm_transaction, const QString &transaction_id);

    /**
    * @param[in]  api_key_l1 QString [required]
    * @param[in]  api_key_l2 QString [required]
    * @param[in]  confirm_planting QString [required]
    * @param[in]  transaction_id QString [required]
    */
    virtual void confirmsPlanting2(const QString &api_key_l1, const QString &api_key_l2, const QString &confirm_planting, const QString &transaction_id);

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  api_key_l1 QString [required]
    * @param[in]  api_key_l2 QString [required]
    * @param[in]  destination_latitude double [required]
    * @param[in]  destination_longitude double [required]
    * @param[in]  origin_latitude double [required]
    * @param[in]  origin_longitude double [required]
    * @param[in]  volumetric_weight double [required]
    * @param[in]  waybill_type QString [required]
    * @param[in]  destination_airport_code QString [optional]
    * @param[in]  origin_airport_code QString [optional]
    */
    virtual void ecommerceDelivery(const QString &content_type, const QString &api_key_l1, const QString &api_key_l2, const double &destination_latitude, const double &destination_longitude, const double &origin_latitude, const double &origin_longitude, const double &volumetric_weight, const QString &waybill_type, const ::OpenAPI::OptionalParam<QString> &destination_airport_code = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &origin_airport_code = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void confirmCarbonOffset1Callback(OAIHttpRequestWorker *worker);
    void confirmPayment1Callback(OAIHttpRequestWorker *worker);
    void confirmPaymentOfTransaction1Callback(OAIHttpRequestWorker *worker);
    void confirmsPlanting2Callback(OAIHttpRequestWorker *worker);
    void ecommerceDeliveryCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void confirmCarbonOffset1Signal();
    void confirmPayment1Signal();
    void confirmPaymentOfTransaction1Signal();
    void confirmsPlanting2Signal();
    void ecommerceDeliverySignal();


    void confirmCarbonOffset1SignalFull(OAIHttpRequestWorker *worker);
    void confirmPayment1SignalFull(OAIHttpRequestWorker *worker);
    void confirmPaymentOfTransaction1SignalFull(OAIHttpRequestWorker *worker);
    void confirmsPlanting2SignalFull(OAIHttpRequestWorker *worker);
    void ecommerceDeliverySignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use confirmCarbonOffset1SignalError() instead")
    void confirmCarbonOffset1SignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void confirmCarbonOffset1SignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use confirmPayment1SignalError() instead")
    void confirmPayment1SignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void confirmPayment1SignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use confirmPaymentOfTransaction1SignalError() instead")
    void confirmPaymentOfTransaction1SignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void confirmPaymentOfTransaction1SignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use confirmsPlanting2SignalError() instead")
    void confirmsPlanting2SignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void confirmsPlanting2SignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ecommerceDeliverySignalError() instead")
    void ecommerceDeliverySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void ecommerceDeliverySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use confirmCarbonOffset1SignalErrorFull() instead")
    void confirmCarbonOffset1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void confirmCarbonOffset1SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use confirmPayment1SignalErrorFull() instead")
    void confirmPayment1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void confirmPayment1SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use confirmPaymentOfTransaction1SignalErrorFull() instead")
    void confirmPaymentOfTransaction1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void confirmPaymentOfTransaction1SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use confirmsPlanting2SignalErrorFull() instead")
    void confirmsPlanting2SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void confirmsPlanting2SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ecommerceDeliverySignalErrorFull() instead")
    void ecommerceDeliverySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ecommerceDeliverySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
