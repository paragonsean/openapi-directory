/**
 * climateKuul live
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";

/**
* UrbanDelivery service.
* @module api/UrbanDeliveryApi
* @version 1.0
*/
export default class UrbanDeliveryApi {

    /**
    * Constructs a new UrbanDeliveryApi. 
    * @alias module:api/UrbanDeliveryApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the confirmCarbonOffset operation.
     * @callback module:api/UrbanDeliveryApi~confirmCarbonOffsetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * confirmCarbonOffset
     * @param {String} carbonOffset Confirm Carbon Offset (Value = y/n)
     * @param {String} transactionId transaction_id
     * @param {Object} opts Optional parameters
     * @param {String} [contactEmail] Contact email
     * @param {String} [contactFirstName] Contact first name
     * @param {String} [contactLastName] Contact last name
     * @param {module:api/UrbanDeliveryApi~confirmCarbonOffsetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    confirmCarbonOffset(carbonOffset, transactionId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'carbonOffset' is set
      if (carbonOffset === undefined || carbonOffset === null) {
        throw new Error("Missing the required parameter 'carbonOffset' when calling confirmCarbonOffset");
      }
      // verify the required parameter 'transactionId' is set
      if (transactionId === undefined || transactionId === null) {
        throw new Error("Missing the required parameter 'transactionId' when calling confirmCarbonOffset");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'carbonOffset': carbonOffset,
        'contactEmail': opts['contactEmail'],
        'contactFirstName': opts['contactFirstName'],
        'contactLastName': opts['contactLastName'],
        'transaction_id': transactionId
      };

      let authNames = [];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = [];
      let returnType = null;
      let basePaths = ['http://api.climatekuul.com:8000/footprint'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/urbanDelivery/confirmCarbonOffset', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the confirmPayment operation.
     * @callback module:api/UrbanDeliveryApi~confirmPaymentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * confirmPayment
     * @param {String} apiKeyL1 apikey_l1 (Like: d95fead6-e8a6-4247-9fb9-7835101a4560)
     * @param {String} apiKeyL2 apikey_l2 (Like: c60f8db5-7904-4227-960d-27400c38b166)
     * @param {String} confirmPayment Confirm Payment (Value = y/n)
     * @param {Number} paymentID Payment Id
     * @param {String} transactionId transaction_id
     * @param {module:api/UrbanDeliveryApi~confirmPaymentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    confirmPayment(apiKeyL1, apiKeyL2, confirmPayment, paymentID, transactionId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiKeyL1' is set
      if (apiKeyL1 === undefined || apiKeyL1 === null) {
        throw new Error("Missing the required parameter 'apiKeyL1' when calling confirmPayment");
      }
      // verify the required parameter 'apiKeyL2' is set
      if (apiKeyL2 === undefined || apiKeyL2 === null) {
        throw new Error("Missing the required parameter 'apiKeyL2' when calling confirmPayment");
      }
      // verify the required parameter 'confirmPayment' is set
      if (confirmPayment === undefined || confirmPayment === null) {
        throw new Error("Missing the required parameter 'confirmPayment' when calling confirmPayment");
      }
      // verify the required parameter 'paymentID' is set
      if (paymentID === undefined || paymentID === null) {
        throw new Error("Missing the required parameter 'paymentID' when calling confirmPayment");
      }
      // verify the required parameter 'transactionId' is set
      if (transactionId === undefined || transactionId === null) {
        throw new Error("Missing the required parameter 'transactionId' when calling confirmPayment");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'apiKey_l1': apiKeyL1,
        'apiKey_l2': apiKeyL2,
        'confirmPayment': confirmPayment,
        'paymentID': paymentID,
        'transaction_id': transactionId
      };

      let authNames = [];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = [];
      let returnType = null;
      let basePaths = ['http://api.climatekuul.com:8000/footprint'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/urbanDelivery/confirmPayment', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the confirmPaymentOfTransaction operation.
     * @callback module:api/UrbanDeliveryApi~confirmPaymentOfTransactionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * confirmTransaction
     * @param {String} confirmTransaction Confirm Payment Of Transaction (Value = y/n)
     * @param {String} transactionId transaction_id
     * @param {module:api/UrbanDeliveryApi~confirmPaymentOfTransactionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    confirmPaymentOfTransaction(confirmTransaction, transactionId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'confirmTransaction' is set
      if (confirmTransaction === undefined || confirmTransaction === null) {
        throw new Error("Missing the required parameter 'confirmTransaction' when calling confirmPaymentOfTransaction");
      }
      // verify the required parameter 'transactionId' is set
      if (transactionId === undefined || transactionId === null) {
        throw new Error("Missing the required parameter 'transactionId' when calling confirmPaymentOfTransaction");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'confirmTransaction': confirmTransaction,
        'transaction_id': transactionId
      };

      let authNames = [];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = [];
      let returnType = null;
      let basePaths = ['http://api.climatekuul.com:8000/footprint'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/urbanDelivery/confirmTransaction', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the confirmsPlanting operation.
     * @callback module:api/UrbanDeliveryApi~confirmsPlantingCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * confirmPlanting
     * @param {String} apiKeyL1 apikey_l1 (Like: d95fead6-e8a6-4247-9fb9-7835101a4560)
     * @param {String} apiKeyL2 apikey_l2 (Like: c60f8db5-7904-4227-960d-27400c38b166)
     * @param {String} confirmPlanting Confirm Planting (Value = y/n)
     * @param {String} transactionId transaction_id
     * @param {module:api/UrbanDeliveryApi~confirmsPlantingCallback} callback The callback function, accepting three arguments: error, data, response
     */
    confirmsPlanting(apiKeyL1, apiKeyL2, confirmPlanting, transactionId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiKeyL1' is set
      if (apiKeyL1 === undefined || apiKeyL1 === null) {
        throw new Error("Missing the required parameter 'apiKeyL1' when calling confirmsPlanting");
      }
      // verify the required parameter 'apiKeyL2' is set
      if (apiKeyL2 === undefined || apiKeyL2 === null) {
        throw new Error("Missing the required parameter 'apiKeyL2' when calling confirmsPlanting");
      }
      // verify the required parameter 'confirmPlanting' is set
      if (confirmPlanting === undefined || confirmPlanting === null) {
        throw new Error("Missing the required parameter 'confirmPlanting' when calling confirmsPlanting");
      }
      // verify the required parameter 'transactionId' is set
      if (transactionId === undefined || transactionId === null) {
        throw new Error("Missing the required parameter 'transactionId' when calling confirmsPlanting");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'apiKey_l1': apiKeyL1,
        'apiKey_l2': apiKeyL2,
        'confirmPlanting': confirmPlanting,
        'transaction_id': transactionId
      };

      let authNames = [];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = [];
      let returnType = null;
      let basePaths = ['http://api.climatekuul.com:8000/footprint'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/urbanDelivery/confirmPlanting', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }

    /**
     * Callback function to receive the result of the urbanDelivery operation.
     * @callback module:api/UrbanDeliveryApi~urbanDeliveryCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * urbanDelivery
     * @param {String} apiKeyL1 Client Api Key
     * @param {String} apiKeyL2 Integration Partner Api Key
     * @param {Number} destinationLatitude Destination latitude (like: 50.870752, value = -90<=x<=90)
     * @param {Number} destinationLongitude Destination longitude (like: 4.669490, value = -180<=x<=180)
     * @param {Number} itemCount item_count' (like:2, value = 0<x<=100)
     * @param {Number} originLatitude Origin latitude (like: 23.372628, value = -90<=x<=90)
     * @param {Number} originLongitude Origin longitude (like: 113.159339, value = -180<=x<=180)
     * @param {String} vehicleType Vehicle type (like: private car, motorcycle,cargo van,zero-emission)
     * @param {module:api/UrbanDeliveryApi~urbanDeliveryCallback} callback The callback function, accepting three arguments: error, data, response
     */
    urbanDelivery(apiKeyL1, apiKeyL2, destinationLatitude, destinationLongitude, itemCount, originLatitude, originLongitude, vehicleType, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiKeyL1' is set
      if (apiKeyL1 === undefined || apiKeyL1 === null) {
        throw new Error("Missing the required parameter 'apiKeyL1' when calling urbanDelivery");
      }
      // verify the required parameter 'apiKeyL2' is set
      if (apiKeyL2 === undefined || apiKeyL2 === null) {
        throw new Error("Missing the required parameter 'apiKeyL2' when calling urbanDelivery");
      }
      // verify the required parameter 'destinationLatitude' is set
      if (destinationLatitude === undefined || destinationLatitude === null) {
        throw new Error("Missing the required parameter 'destinationLatitude' when calling urbanDelivery");
      }
      // verify the required parameter 'destinationLongitude' is set
      if (destinationLongitude === undefined || destinationLongitude === null) {
        throw new Error("Missing the required parameter 'destinationLongitude' when calling urbanDelivery");
      }
      // verify the required parameter 'itemCount' is set
      if (itemCount === undefined || itemCount === null) {
        throw new Error("Missing the required parameter 'itemCount' when calling urbanDelivery");
      }
      // verify the required parameter 'originLatitude' is set
      if (originLatitude === undefined || originLatitude === null) {
        throw new Error("Missing the required parameter 'originLatitude' when calling urbanDelivery");
      }
      // verify the required parameter 'originLongitude' is set
      if (originLongitude === undefined || originLongitude === null) {
        throw new Error("Missing the required parameter 'originLongitude' when calling urbanDelivery");
      }
      // verify the required parameter 'vehicleType' is set
      if (vehicleType === undefined || vehicleType === null) {
        throw new Error("Missing the required parameter 'vehicleType' when calling urbanDelivery");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'apiKey_l1': apiKeyL1,
        'apiKey_l2': apiKeyL2,
        'destination_latitude': destinationLatitude,
        'destination_longitude': destinationLongitude,
        'item_count': itemCount,
        'origin_latitude': originLatitude,
        'origin_longitude': originLongitude,
        'vehicle_type': vehicleType
      };

      let authNames = [];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = [];
      let returnType = null;
      let basePaths = ['http://api.climatekuul.com:8000/footprint'];
      let basePath = basePaths[0]; // by default use the first one in "servers" defined in OpenAPI
      if (typeof opts['_base_path_index'] !== 'undefined') {
        if (opts['_base_path_index']  >= basePaths.length || opts['_base_path_index'] <  0) {
          throw new Error("Invalid index " + opts['_base_path_index'] + " when selecting the host settings. Must be less than " + basePaths.length);
        }
        basePath = basePaths[opts['_base_path_index']];
      }

      return this.apiClient.callApi(
        '/urbanDelivery', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, basePath, callback
      );
    }


}
