# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.style import Style
from openapi_server import util


class ModelSchema(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, datatype: object=None, default: str=None, expose: object=None, required: object=None, style: Style=None):
        """ModelSchema - a model defined in OpenAPI

        :param datatype: The datatype of this ModelSchema.
        :param default: The default of this ModelSchema.
        :param expose: The expose of this ModelSchema.
        :param required: The required of this ModelSchema.
        :param style: The style of this ModelSchema.
        """
        self.openapi_types = {
            'datatype': object,
            'default': str,
            'expose': object,
            'required': object,
            'style': Style
        }

        self.attribute_map = {
            'datatype': 'datatype',
            'default': 'default',
            'expose': 'expose',
            'required': 'required',
            'style': 'style'
        }

        self._datatype = datatype
        self._default = default
        self._expose = expose
        self._required = required
        self._style = style

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ModelSchema':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Schema of this ModelSchema.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def datatype(self):
        """Gets the datatype of this ModelSchema.


        :return: The datatype of this ModelSchema.
        :rtype: object
        """
        return self._datatype

    @datatype.setter
    def datatype(self, datatype):
        """Sets the datatype of this ModelSchema.


        :param datatype: The datatype of this ModelSchema.
        :type datatype: object
        """

        self._datatype = datatype

    @property
    def default(self):
        """Gets the default of this ModelSchema.


        :return: The default of this ModelSchema.
        :rtype: str
        """
        return self._default

    @default.setter
    def default(self, default):
        """Sets the default of this ModelSchema.


        :param default: The default of this ModelSchema.
        :type default: str
        """

        self._default = default

    @property
    def expose(self):
        """Gets the expose of this ModelSchema.


        :return: The expose of this ModelSchema.
        :rtype: object
        """
        return self._expose

    @expose.setter
    def expose(self, expose):
        """Sets the expose of this ModelSchema.


        :param expose: The expose of this ModelSchema.
        :type expose: object
        """

        self._expose = expose

    @property
    def required(self):
        """Gets the required of this ModelSchema.


        :return: The required of this ModelSchema.
        :rtype: object
        """
        return self._required

    @required.setter
    def required(self, required):
        """Sets the required of this ModelSchema.


        :param required: The required of this ModelSchema.
        :type required: object
        """

        self._required = required

    @property
    def style(self):
        """Gets the style of this ModelSchema.


        :return: The style of this ModelSchema.
        :rtype: Style
        """
        return self._style

    @style.setter
    def style(self, style):
        """Sets the style of this ModelSchema.


        :param style: The style of this ModelSchema.
        :type style: Style
        """

        self._style = style
