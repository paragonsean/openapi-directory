# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.plan import Plan
from openapi_server import util


class OrgResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created_date: str=None, id: str=None, modified_date: str=None, name: str=None, plan: Plan=None, plan_cat: object=None, status: str=None, type: object=None):
        """OrgResponse - a model defined in OpenAPI

        :param created_date: The created_date of this OrgResponse.
        :param id: The id of this OrgResponse.
        :param modified_date: The modified_date of this OrgResponse.
        :param name: The name of this OrgResponse.
        :param plan: The plan of this OrgResponse.
        :param plan_cat: The plan_cat of this OrgResponse.
        :param status: The status of this OrgResponse.
        :param type: The type of this OrgResponse.
        """
        self.openapi_types = {
            'created_date': str,
            'id': str,
            'modified_date': str,
            'name': str,
            'plan': Plan,
            'plan_cat': object,
            'status': str,
            'type': object
        }

        self.attribute_map = {
            'created_date': 'createdDate',
            'id': 'id',
            'modified_date': 'modifiedDate',
            'name': 'name',
            'plan': 'plan',
            'plan_cat': 'planCat',
            'status': 'status',
            'type': 'type'
        }

        self._created_date = created_date
        self._id = id
        self._modified_date = modified_date
        self._name = name
        self._plan = plan
        self._plan_cat = plan_cat
        self._status = status
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OrgResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OrgResponse of this OrgResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created_date(self):
        """Gets the created_date of this OrgResponse.

        The date the org was created

        :return: The created_date of this OrgResponse.
        :rtype: str
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """Sets the created_date of this OrgResponse.

        The date the org was created

        :param created_date: The created_date of this OrgResponse.
        :type created_date: str
        """

        self._created_date = created_date

    @property
    def id(self):
        """Gets the id of this OrgResponse.


        :return: The id of this OrgResponse.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this OrgResponse.


        :param id: The id of this OrgResponse.
        :type id: str
        """

        self._id = id

    @property
    def modified_date(self):
        """Gets the modified_date of this OrgResponse.

        The date the org was modified

        :return: The modified_date of this OrgResponse.
        :rtype: str
        """
        return self._modified_date

    @modified_date.setter
    def modified_date(self, modified_date):
        """Sets the modified_date of this OrgResponse.

        The date the org was modified

        :param modified_date: The modified_date of this OrgResponse.
        :type modified_date: str
        """

        self._modified_date = modified_date

    @property
    def name(self):
        """Gets the name of this OrgResponse.

        Org name

        :return: The name of this OrgResponse.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this OrgResponse.

        Org name

        :param name: The name of this OrgResponse.
        :type name: str
        """

        self._name = name

    @property
    def plan(self):
        """Gets the plan of this OrgResponse.


        :return: The plan of this OrgResponse.
        :rtype: Plan
        """
        return self._plan

    @plan.setter
    def plan(self, plan):
        """Sets the plan of this OrgResponse.


        :param plan: The plan of this OrgResponse.
        :type plan: Plan
        """

        self._plan = plan

    @property
    def plan_cat(self):
        """Gets the plan_cat of this OrgResponse.


        :return: The plan_cat of this OrgResponse.
        :rtype: object
        """
        return self._plan_cat

    @plan_cat.setter
    def plan_cat(self, plan_cat):
        """Sets the plan_cat of this OrgResponse.


        :param plan_cat: The plan_cat of this OrgResponse.
        :type plan_cat: object
        """

        self._plan_cat = plan_cat

    @property
    def status(self):
        """Gets the status of this OrgResponse.

        Org name

        :return: The status of this OrgResponse.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this OrgResponse.

        Org name

        :param status: The status of this OrgResponse.
        :type status: str
        """

        self._status = status

    @property
    def type(self):
        """Gets the type of this OrgResponse.


        :return: The type of this OrgResponse.
        :rtype: object
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this OrgResponse.


        :param type: The type of this OrgResponse.
        :type type: object
        """

        self._type = type
