# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Trigger54(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, channel_id: int=None, codes: object=None, desc: str=None, function_id: str=None, name: str=None, parameters: object=None):
        """Trigger54 - a model defined in OpenAPI

        :param channel_id: The channel_id of this Trigger54.
        :param codes: The codes of this Trigger54.
        :param desc: The desc of this Trigger54.
        :param function_id: The function_id of this Trigger54.
        :param name: The name of this Trigger54.
        :param parameters: The parameters of this Trigger54.
        """
        self.openapi_types = {
            'channel_id': int,
            'codes': object,
            'desc': str,
            'function_id': str,
            'name': str,
            'parameters': object
        }

        self.attribute_map = {
            'channel_id': 'channelId',
            'codes': 'codes',
            'desc': 'desc',
            'function_id': 'functionId',
            'name': 'name',
            'parameters': 'parameters'
        }

        self._channel_id = channel_id
        self._codes = codes
        self._desc = desc
        self._function_id = function_id
        self._name = name
        self._parameters = parameters

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Trigger54':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Trigger54 of this Trigger54.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def channel_id(self):
        """Gets the channel_id of this Trigger54.

        Id of channel used by trigger

        :return: The channel_id of this Trigger54.
        :rtype: int
        """
        return self._channel_id

    @channel_id.setter
    def channel_id(self, channel_id):
        """Sets the channel_id of this Trigger54.

        Id of channel used by trigger

        :param channel_id: The channel_id of this Trigger54.
        :type channel_id: int
        """
        if channel_id is None:
            raise ValueError("Invalid value for `channel_id`, must not be `None`")

        self._channel_id = channel_id

    @property
    def codes(self):
        """Gets the codes of this Trigger54.

        Object containing named Javascript code sets

        :return: The codes of this Trigger54.
        :rtype: object
        """
        return self._codes

    @codes.setter
    def codes(self, codes):
        """Sets the codes of this Trigger54.

        Object containing named Javascript code sets

        :param codes: The codes of this Trigger54.
        :type codes: object
        """

        self._codes = codes

    @property
    def desc(self):
        """Gets the desc of this Trigger54.

        Trigger description

        :return: The desc of this Trigger54.
        :rtype: str
        """
        return self._desc

    @desc.setter
    def desc(self, desc):
        """Sets the desc of this Trigger54.

        Trigger description

        :param desc: The desc of this Trigger54.
        :type desc: str
        """

        self._desc = desc

    @property
    def function_id(self):
        """Gets the function_id of this Trigger54.

        Hash id of channel function used by trigger

        :return: The function_id of this Trigger54.
        :rtype: str
        """
        return self._function_id

    @function_id.setter
    def function_id(self, function_id):
        """Sets the function_id of this Trigger54.

        Hash id of channel function used by trigger

        :param function_id: The function_id of this Trigger54.
        :type function_id: str
        """
        if function_id is None:
            raise ValueError("Invalid value for `function_id`, must not be `None`")

        self._function_id = function_id

    @property
    def name(self):
        """Gets the name of this Trigger54.

        Trigger name

        :return: The name of this Trigger54.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Trigger54.

        Trigger name

        :param name: The name of this Trigger54.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def parameters(self):
        """Gets the parameters of this Trigger54.

        Object containing channel-defined trigger parameters

        :return: The parameters of this Trigger54.
        :rtype: object
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this Trigger54.

        Object containing channel-defined trigger parameters

        :param parameters: The parameters of this Trigger54.
        :type parameters: object
        """

        self._parameters = parameters
