# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.status import Status
from openapi_server import util


class Rule(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, action_ids: str=None, description: str=None, name: str=None, status: Status=None, trigger_ids: str=None):
        """Rule - a model defined in OpenAPI

        :param action_ids: The action_ids of this Rule.
        :param description: The description of this Rule.
        :param name: The name of this Rule.
        :param status: The status of this Rule.
        :param trigger_ids: The trigger_ids of this Rule.
        """
        self.openapi_types = {
            'action_ids': str,
            'description': str,
            'name': str,
            'status': Status,
            'trigger_ids': str
        }

        self.attribute_map = {
            'action_ids': 'actionIds',
            'description': 'description',
            'name': 'name',
            'status': 'status',
            'trigger_ids': 'triggerIds'
        }

        self._action_ids = action_ids
        self._description = description
        self._name = name
        self._status = status
        self._trigger_ids = trigger_ids

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Rule':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Rule of this Rule.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def action_ids(self):
        """Gets the action_ids of this Rule.

        Rule description

        :return: The action_ids of this Rule.
        :rtype: str
        """
        return self._action_ids

    @action_ids.setter
    def action_ids(self, action_ids):
        """Sets the action_ids of this Rule.

        Rule description

        :param action_ids: The action_ids of this Rule.
        :type action_ids: str
        """

        self._action_ids = action_ids

    @property
    def description(self):
        """Gets the description of this Rule.

        Rule description

        :return: The description of this Rule.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Rule.

        Rule description

        :param description: The description of this Rule.
        :type description: str
        """

        self._description = description

    @property
    def name(self):
        """Gets the name of this Rule.

        Rule name

        :return: The name of this Rule.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Rule.

        Rule name

        :param name: The name of this Rule.
        :type name: str
        """

        self._name = name

    @property
    def status(self):
        """Gets the status of this Rule.


        :return: The status of this Rule.
        :rtype: Status
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Rule.


        :param status: The status of this Rule.
        :type status: Status
        """

        self._status = status

    @property
    def trigger_ids(self):
        """Gets the trigger_ids of this Rule.

        Rule description

        :return: The trigger_ids of this Rule.
        :rtype: str
        """
        return self._trigger_ids

    @trigger_ids.setter
    def trigger_ids(self, trigger_ids):
        """Sets the trigger_ids of this Rule.

        Rule description

        :param trigger_ids: The trigger_ids of this Rule.
        :type trigger_ids: str
        """

        self._trigger_ids = trigger_ids
