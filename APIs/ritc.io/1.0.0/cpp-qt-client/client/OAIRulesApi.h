/**
 * Ritc
 * Rules in the Cloud
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIRulesApi_H
#define OAI_OAIRulesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIObject.h"
#include "OAIRule.h"
#include "OAIRuleFullResponse.h"
#include "OAIRuleShortResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIRulesApi : public QObject {
    Q_OBJECT

public:
    OAIRulesApi(const int timeOut = 0);
    ~OAIRulesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  rule_object OAIRule [required]
    */
    virtual void addRule(const OAIRule &rule_object);

    /**
    * @param[in]  rule_id QString [required]
    */
    virtual void getRule(const QString &rule_id);


    virtual void listRules();

    /**
    * @param[in]  rule_id QString [required]
    */
    virtual void removeRule(const QString &rule_id);

    /**
    * @param[in]  rule_id QString [required]
    * @param[in]  initial_data OAIObject [optional]
    */
    virtual void runRule(const QString &rule_id, const ::OpenAPI::OptionalParam<OAIObject> &initial_data = ::OpenAPI::OptionalParam<OAIObject>());

    /**
    * @param[in]  rule_id QString [required]
    * @param[in]  rule_object OAIRule [required]
    */
    virtual void updateRule(const QString &rule_id, const OAIRule &rule_object);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void addRuleCallback(OAIHttpRequestWorker *worker);
    void getRuleCallback(OAIHttpRequestWorker *worker);
    void listRulesCallback(OAIHttpRequestWorker *worker);
    void removeRuleCallback(OAIHttpRequestWorker *worker);
    void runRuleCallback(OAIHttpRequestWorker *worker);
    void updateRuleCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void addRuleSignal(OAIRuleFullResponse summary);
    void getRuleSignal(QList<OAIRuleFullResponse> summary);
    void listRulesSignal(QList<OAIRuleShortResponse> summary);
    void removeRuleSignal();
    void runRuleSignal(OAIObject summary);
    void updateRuleSignal(OAIRuleFullResponse summary);


    void addRuleSignalFull(OAIHttpRequestWorker *worker, OAIRuleFullResponse summary);
    void getRuleSignalFull(OAIHttpRequestWorker *worker, QList<OAIRuleFullResponse> summary);
    void listRulesSignalFull(OAIHttpRequestWorker *worker, QList<OAIRuleShortResponse> summary);
    void removeRuleSignalFull(OAIHttpRequestWorker *worker);
    void runRuleSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateRuleSignalFull(OAIHttpRequestWorker *worker, OAIRuleFullResponse summary);

    Q_DECL_DEPRECATED_X("Use addRuleSignalError() instead")
    void addRuleSignalE(OAIRuleFullResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void addRuleSignalError(OAIRuleFullResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRuleSignalError() instead")
    void getRuleSignalE(QList<OAIRuleFullResponse> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getRuleSignalError(QList<OAIRuleFullResponse> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listRulesSignalError() instead")
    void listRulesSignalE(QList<OAIRuleShortResponse> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listRulesSignalError(QList<OAIRuleShortResponse> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeRuleSignalError() instead")
    void removeRuleSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void removeRuleSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use runRuleSignalError() instead")
    void runRuleSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void runRuleSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateRuleSignalError() instead")
    void updateRuleSignalE(OAIRuleFullResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateRuleSignalError(OAIRuleFullResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use addRuleSignalErrorFull() instead")
    void addRuleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addRuleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRuleSignalErrorFull() instead")
    void getRuleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getRuleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listRulesSignalErrorFull() instead")
    void listRulesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listRulesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeRuleSignalErrorFull() instead")
    void removeRuleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void removeRuleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use runRuleSignalErrorFull() instead")
    void runRuleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void runRuleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateRuleSignalErrorFull() instead")
    void updateRuleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateRuleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
