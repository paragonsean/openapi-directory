/**
 * Ritc
 * Rules in the Cloud
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAuthType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAuthType::OAIAuthType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAuthType::OAIAuthType() {
    this->initializeModel();
}

OAIAuthType::~OAIAuthType() {}

void OAIAuthType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIAuthType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIAuthType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("apikey", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAuthType::APIKEY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("basic", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAuthType::BASIC;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("none", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAuthType::NONE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("oauth2", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAuthType::OAUTH2;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIAuthType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIAuthType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIAuthType::APIKEY:
            val = "apikey";
            break;
        case eOAIAuthType::BASIC:
            val = "basic";
            break;
        case eOAIAuthType::NONE:
            val = "none";
            break;
        case eOAIAuthType::OAUTH2:
            val = "oauth2";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIAuthType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIAuthType::eOAIAuthType OAIAuthType::getValue() const {
    return m_value;
}

void OAIAuthType::setValue(const OAIAuthType::eOAIAuthType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIAuthType::isSet() const {
    
    return m_value_isSet;
}

bool OAIAuthType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
