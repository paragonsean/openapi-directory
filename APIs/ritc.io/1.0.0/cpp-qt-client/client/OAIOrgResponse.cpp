/**
 * Ritc
 * Rules in the Cloud
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOrgResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOrgResponse::OAIOrgResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOrgResponse::OAIOrgResponse() {
    this->initializeModel();
}

OAIOrgResponse::~OAIOrgResponse() {}

void OAIOrgResponse::initializeModel() {

    m_created_date_isSet = false;
    m_created_date_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_modified_date_isSet = false;
    m_modified_date_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_plan_isSet = false;
    m_plan_isValid = false;

    m_plan_cat_isSet = false;
    m_plan_cat_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIOrgResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOrgResponse::fromJsonObject(QJsonObject json) {

    m_created_date_isValid = ::OpenAPI::fromJsonValue(m_created_date, json[QString("createdDate")]);
    m_created_date_isSet = !json[QString("createdDate")].isNull() && m_created_date_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_modified_date_isValid = ::OpenAPI::fromJsonValue(m_modified_date, json[QString("modifiedDate")]);
    m_modified_date_isSet = !json[QString("modifiedDate")].isNull() && m_modified_date_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_plan_isValid = ::OpenAPI::fromJsonValue(m_plan, json[QString("plan")]);
    m_plan_isSet = !json[QString("plan")].isNull() && m_plan_isValid;

    m_plan_cat_isValid = ::OpenAPI::fromJsonValue(m_plan_cat, json[QString("planCat")]);
    m_plan_cat_isSet = !json[QString("planCat")].isNull() && m_plan_cat_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIOrgResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOrgResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_created_date_isSet) {
        obj.insert(QString("createdDate"), ::OpenAPI::toJsonValue(m_created_date));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_modified_date_isSet) {
        obj.insert(QString("modifiedDate"), ::OpenAPI::toJsonValue(m_modified_date));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_plan.isSet()) {
        obj.insert(QString("plan"), ::OpenAPI::toJsonValue(m_plan));
    }
    if (m_plan_cat_isSet) {
        obj.insert(QString("planCat"), ::OpenAPI::toJsonValue(m_plan_cat));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIOrgResponse::getCreatedDate() const {
    return m_created_date;
}
void OAIOrgResponse::setCreatedDate(const QString &created_date) {
    m_created_date = created_date;
    m_created_date_isSet = true;
}

bool OAIOrgResponse::is_created_date_Set() const{
    return m_created_date_isSet;
}

bool OAIOrgResponse::is_created_date_Valid() const{
    return m_created_date_isValid;
}

QString OAIOrgResponse::getId() const {
    return m_id;
}
void OAIOrgResponse::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIOrgResponse::is_id_Set() const{
    return m_id_isSet;
}

bool OAIOrgResponse::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIOrgResponse::getModifiedDate() const {
    return m_modified_date;
}
void OAIOrgResponse::setModifiedDate(const QString &modified_date) {
    m_modified_date = modified_date;
    m_modified_date_isSet = true;
}

bool OAIOrgResponse::is_modified_date_Set() const{
    return m_modified_date_isSet;
}

bool OAIOrgResponse::is_modified_date_Valid() const{
    return m_modified_date_isValid;
}

QString OAIOrgResponse::getName() const {
    return m_name;
}
void OAIOrgResponse::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIOrgResponse::is_name_Set() const{
    return m_name_isSet;
}

bool OAIOrgResponse::is_name_Valid() const{
    return m_name_isValid;
}

OAIPlan OAIOrgResponse::getPlan() const {
    return m_plan;
}
void OAIOrgResponse::setPlan(const OAIPlan &plan) {
    m_plan = plan;
    m_plan_isSet = true;
}

bool OAIOrgResponse::is_plan_Set() const{
    return m_plan_isSet;
}

bool OAIOrgResponse::is_plan_Valid() const{
    return m_plan_isValid;
}

OAIObject OAIOrgResponse::getPlanCat() const {
    return m_plan_cat;
}
void OAIOrgResponse::setPlanCat(const OAIObject &plan_cat) {
    m_plan_cat = plan_cat;
    m_plan_cat_isSet = true;
}

bool OAIOrgResponse::is_plan_cat_Set() const{
    return m_plan_cat_isSet;
}

bool OAIOrgResponse::is_plan_cat_Valid() const{
    return m_plan_cat_isValid;
}

QString OAIOrgResponse::getStatus() const {
    return m_status;
}
void OAIOrgResponse::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIOrgResponse::is_status_Set() const{
    return m_status_isSet;
}

bool OAIOrgResponse::is_status_Valid() const{
    return m_status_isValid;
}

OAIObject OAIOrgResponse::getType() const {
    return m_type;
}
void OAIOrgResponse::setType(const OAIObject &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIOrgResponse::is_type_Set() const{
    return m_type_isSet;
}

bool OAIOrgResponse::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIOrgResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_modified_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_plan.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_plan_cat_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOrgResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
