/**
 * Ritc
 * Rules in the Cloud
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHttpMethod.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHttpMethod::OAIHttpMethod(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHttpMethod::OAIHttpMethod() {
    this->initializeModel();
}

OAIHttpMethod::~OAIHttpMethod() {}

void OAIHttpMethod::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIHttpMethod::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIHttpMethod::fromJson(QString jsonString) {
    
    if ( jsonString.compare("DELETE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIHttpMethod::DELETE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("GET", Qt::CaseInsensitive) == 0) {
        m_value = eOAIHttpMethod::GET;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PATCH", Qt::CaseInsensitive) == 0) {
        m_value = eOAIHttpMethod::PATCH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("POST", Qt::CaseInsensitive) == 0) {
        m_value = eOAIHttpMethod::POST;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIHttpMethod::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIHttpMethod::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIHttpMethod::DELETE:
            val = "DELETE";
            break;
        case eOAIHttpMethod::GET:
            val = "GET";
            break;
        case eOAIHttpMethod::PATCH:
            val = "PATCH";
            break;
        case eOAIHttpMethod::POST:
            val = "POST";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIHttpMethod::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIHttpMethod::eOAIHttpMethod OAIHttpMethod::getValue() const {
    return m_value;
}

void OAIHttpMethod::setValue(const OAIHttpMethod::eOAIHttpMethod& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIHttpMethod::isSet() const {
    
    return m_value_isSet;
}

bool OAIHttpMethod::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
