/**
 * Ritc
 * Rules in the Cloud
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIUsersApi_H
#define OAI_OAIUsersApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAdminUser.h"
#include "OAIAdminUserResponse.h"
#include "OAIAppUser.h"
#include "OAIAppUserResponse.h"
#include "OAIAuthorizeUrlResponse.h"
#include "OAIObject.h"
#include "OAIRuleFullResponse.h"
#include "OAIRuleShortResponse.h"
#include "OAIUserChannel.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIUsersApi : public QObject {
    Q_OBJECT

public:
    OAIUsersApi(const int timeOut = 0);
    ~OAIUsersApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  admin_user_object OAIAdminUser [required]
    */
    virtual void addAdminUser(const OAIAdminUser &admin_user_object);

    /**
    * @param[in]  app_user_object OAIAppUser [required]
    */
    virtual void addAppUser(const OAIAppUser &app_user_object);

    /**
    * @param[in]  user_id QString [required]
    * @param[in]  channel_id QString [required]
    */
    virtual void addAppUserToChannel(const QString &user_id, const QString &channel_id);

    /**
    * @param[in]  user_id QString [required]
    * @param[in]  rule_id QString [required]
    */
    virtual void addAppUserToRule(const QString &user_id, const QString &rule_id);

    /**
    * @param[in]  user_id QString [required]
    * @param[in]  channel_id QString [required]
    */
    virtual void authenticateAppUserForChannel(const QString &user_id, const QString &channel_id);

    /**
    * @param[in]  user_id QString [required]
    */
    virtual void getAdminUser(const QString &user_id);

    /**
    * @param[in]  user_id QString [required]
    */
    virtual void getAppUser(const QString &user_id);

    /**
    * @param[in]  user_id QString [required]
    * @param[in]  channel_id QString [required]
    */
    virtual void getAppUserChannel(const QString &user_id, const QString &channel_id);

    /**
    * @param[in]  user_id QString [required]
    * @param[in]  rule_id QString [required]
    */
    virtual void getAppUserRule(const QString &user_id, const QString &rule_id);


    virtual void listAdminUsers();

    /**
    * @param[in]  user_id QString [required]
    */
    virtual void listAppUserChannels(const QString &user_id);

    /**
    * @param[in]  user_id QString [required]
    */
    virtual void listAppUserRules(const QString &user_id);


    virtual void listAppUsers();

    /**
    * @param[in]  user_id QString [required]
    */
    virtual void removeAdminUser(const QString &user_id);

    /**
    * @param[in]  user_id QString [required]
    */
    virtual void removeAppUser(const QString &user_id);

    /**
    * @param[in]  user_id QString [required]
    * @param[in]  channel_id QString [required]
    */
    virtual void removeAppUserFromChannel(const QString &user_id, const QString &channel_id);

    /**
    * @param[in]  user_id QString [required]
    * @param[in]  rule_id QString [required]
    */
    virtual void removeAppUserFromRule(const QString &user_id, const QString &rule_id);

    /**
    * @param[in]  user_id QString [required]
    * @param[in]  rule_id QString [required]
    */
    virtual void runRuleForAppUser(const QString &user_id, const QString &rule_id);

    /**
    * @param[in]  user_id QString [required]
    * @param[in]  admin_user_object OAIAdminUser [required]
    */
    virtual void updateAdminUser(const QString &user_id, const OAIAdminUser &admin_user_object);

    /**
    * @param[in]  user_id QString [required]
    * @param[in]  app_user_object OAIAppUser [required]
    */
    virtual void updateAppUser(const QString &user_id, const OAIAppUser &app_user_object);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void addAdminUserCallback(OAIHttpRequestWorker *worker);
    void addAppUserCallback(OAIHttpRequestWorker *worker);
    void addAppUserToChannelCallback(OAIHttpRequestWorker *worker);
    void addAppUserToRuleCallback(OAIHttpRequestWorker *worker);
    void authenticateAppUserForChannelCallback(OAIHttpRequestWorker *worker);
    void getAdminUserCallback(OAIHttpRequestWorker *worker);
    void getAppUserCallback(OAIHttpRequestWorker *worker);
    void getAppUserChannelCallback(OAIHttpRequestWorker *worker);
    void getAppUserRuleCallback(OAIHttpRequestWorker *worker);
    void listAdminUsersCallback(OAIHttpRequestWorker *worker);
    void listAppUserChannelsCallback(OAIHttpRequestWorker *worker);
    void listAppUserRulesCallback(OAIHttpRequestWorker *worker);
    void listAppUsersCallback(OAIHttpRequestWorker *worker);
    void removeAdminUserCallback(OAIHttpRequestWorker *worker);
    void removeAppUserCallback(OAIHttpRequestWorker *worker);
    void removeAppUserFromChannelCallback(OAIHttpRequestWorker *worker);
    void removeAppUserFromRuleCallback(OAIHttpRequestWorker *worker);
    void runRuleForAppUserCallback(OAIHttpRequestWorker *worker);
    void updateAdminUserCallback(OAIHttpRequestWorker *worker);
    void updateAppUserCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void addAdminUserSignal(OAIAdminUserResponse summary);
    void addAppUserSignal(OAIAppUserResponse summary);
    void addAppUserToChannelSignal(OAIUserChannel summary);
    void addAppUserToRuleSignal(OAIRuleShortResponse summary);
    void authenticateAppUserForChannelSignal(QList<OAIAuthorizeUrlResponse> summary);
    void getAdminUserSignal(QList<OAIAdminUserResponse> summary);
    void getAppUserSignal(QList<OAIAppUserResponse> summary);
    void getAppUserChannelSignal(QList<OAIUserChannel> summary);
    void getAppUserRuleSignal(QList<OAIRuleFullResponse> summary);
    void listAdminUsersSignal(QList<OAIAdminUserResponse> summary);
    void listAppUserChannelsSignal(QList<OAIUserChannel> summary);
    void listAppUserRulesSignal(QList<OAIRuleShortResponse> summary);
    void listAppUsersSignal(QList<OAIAppUserResponse> summary);
    void removeAdminUserSignal();
    void removeAppUserSignal();
    void removeAppUserFromChannelSignal();
    void removeAppUserFromRuleSignal();
    void runRuleForAppUserSignal(OAIObject summary);
    void updateAdminUserSignal(OAIAdminUserResponse summary);
    void updateAppUserSignal(OAIAppUserResponse summary);


    void addAdminUserSignalFull(OAIHttpRequestWorker *worker, OAIAdminUserResponse summary);
    void addAppUserSignalFull(OAIHttpRequestWorker *worker, OAIAppUserResponse summary);
    void addAppUserToChannelSignalFull(OAIHttpRequestWorker *worker, OAIUserChannel summary);
    void addAppUserToRuleSignalFull(OAIHttpRequestWorker *worker, OAIRuleShortResponse summary);
    void authenticateAppUserForChannelSignalFull(OAIHttpRequestWorker *worker, QList<OAIAuthorizeUrlResponse> summary);
    void getAdminUserSignalFull(OAIHttpRequestWorker *worker, QList<OAIAdminUserResponse> summary);
    void getAppUserSignalFull(OAIHttpRequestWorker *worker, QList<OAIAppUserResponse> summary);
    void getAppUserChannelSignalFull(OAIHttpRequestWorker *worker, QList<OAIUserChannel> summary);
    void getAppUserRuleSignalFull(OAIHttpRequestWorker *worker, QList<OAIRuleFullResponse> summary);
    void listAdminUsersSignalFull(OAIHttpRequestWorker *worker, QList<OAIAdminUserResponse> summary);
    void listAppUserChannelsSignalFull(OAIHttpRequestWorker *worker, QList<OAIUserChannel> summary);
    void listAppUserRulesSignalFull(OAIHttpRequestWorker *worker, QList<OAIRuleShortResponse> summary);
    void listAppUsersSignalFull(OAIHttpRequestWorker *worker, QList<OAIAppUserResponse> summary);
    void removeAdminUserSignalFull(OAIHttpRequestWorker *worker);
    void removeAppUserSignalFull(OAIHttpRequestWorker *worker);
    void removeAppUserFromChannelSignalFull(OAIHttpRequestWorker *worker);
    void removeAppUserFromRuleSignalFull(OAIHttpRequestWorker *worker);
    void runRuleForAppUserSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateAdminUserSignalFull(OAIHttpRequestWorker *worker, OAIAdminUserResponse summary);
    void updateAppUserSignalFull(OAIHttpRequestWorker *worker, OAIAppUserResponse summary);

    Q_DECL_DEPRECATED_X("Use addAdminUserSignalError() instead")
    void addAdminUserSignalE(OAIAdminUserResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void addAdminUserSignalError(OAIAdminUserResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addAppUserSignalError() instead")
    void addAppUserSignalE(OAIAppUserResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void addAppUserSignalError(OAIAppUserResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addAppUserToChannelSignalError() instead")
    void addAppUserToChannelSignalE(OAIUserChannel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void addAppUserToChannelSignalError(OAIUserChannel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addAppUserToRuleSignalError() instead")
    void addAppUserToRuleSignalE(OAIRuleShortResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void addAppUserToRuleSignalError(OAIRuleShortResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use authenticateAppUserForChannelSignalError() instead")
    void authenticateAppUserForChannelSignalE(QList<OAIAuthorizeUrlResponse> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void authenticateAppUserForChannelSignalError(QList<OAIAuthorizeUrlResponse> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAdminUserSignalError() instead")
    void getAdminUserSignalE(QList<OAIAdminUserResponse> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAdminUserSignalError(QList<OAIAdminUserResponse> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAppUserSignalError() instead")
    void getAppUserSignalE(QList<OAIAppUserResponse> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAppUserSignalError(QList<OAIAppUserResponse> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAppUserChannelSignalError() instead")
    void getAppUserChannelSignalE(QList<OAIUserChannel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAppUserChannelSignalError(QList<OAIUserChannel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAppUserRuleSignalError() instead")
    void getAppUserRuleSignalE(QList<OAIRuleFullResponse> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAppUserRuleSignalError(QList<OAIRuleFullResponse> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listAdminUsersSignalError() instead")
    void listAdminUsersSignalE(QList<OAIAdminUserResponse> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listAdminUsersSignalError(QList<OAIAdminUserResponse> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listAppUserChannelsSignalError() instead")
    void listAppUserChannelsSignalE(QList<OAIUserChannel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listAppUserChannelsSignalError(QList<OAIUserChannel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listAppUserRulesSignalError() instead")
    void listAppUserRulesSignalE(QList<OAIRuleShortResponse> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listAppUserRulesSignalError(QList<OAIRuleShortResponse> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listAppUsersSignalError() instead")
    void listAppUsersSignalE(QList<OAIAppUserResponse> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listAppUsersSignalError(QList<OAIAppUserResponse> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeAdminUserSignalError() instead")
    void removeAdminUserSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void removeAdminUserSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeAppUserSignalError() instead")
    void removeAppUserSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void removeAppUserSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeAppUserFromChannelSignalError() instead")
    void removeAppUserFromChannelSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void removeAppUserFromChannelSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeAppUserFromRuleSignalError() instead")
    void removeAppUserFromRuleSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void removeAppUserFromRuleSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use runRuleForAppUserSignalError() instead")
    void runRuleForAppUserSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void runRuleForAppUserSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateAdminUserSignalError() instead")
    void updateAdminUserSignalE(OAIAdminUserResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateAdminUserSignalError(OAIAdminUserResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateAppUserSignalError() instead")
    void updateAppUserSignalE(OAIAppUserResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateAppUserSignalError(OAIAppUserResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use addAdminUserSignalErrorFull() instead")
    void addAdminUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addAdminUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addAppUserSignalErrorFull() instead")
    void addAppUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addAppUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addAppUserToChannelSignalErrorFull() instead")
    void addAppUserToChannelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addAppUserToChannelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addAppUserToRuleSignalErrorFull() instead")
    void addAppUserToRuleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addAppUserToRuleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use authenticateAppUserForChannelSignalErrorFull() instead")
    void authenticateAppUserForChannelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void authenticateAppUserForChannelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAdminUserSignalErrorFull() instead")
    void getAdminUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAdminUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAppUserSignalErrorFull() instead")
    void getAppUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAppUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAppUserChannelSignalErrorFull() instead")
    void getAppUserChannelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAppUserChannelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAppUserRuleSignalErrorFull() instead")
    void getAppUserRuleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAppUserRuleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listAdminUsersSignalErrorFull() instead")
    void listAdminUsersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listAdminUsersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listAppUserChannelsSignalErrorFull() instead")
    void listAppUserChannelsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listAppUserChannelsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listAppUserRulesSignalErrorFull() instead")
    void listAppUserRulesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listAppUserRulesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listAppUsersSignalErrorFull() instead")
    void listAppUsersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listAppUsersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeAdminUserSignalErrorFull() instead")
    void removeAdminUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void removeAdminUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeAppUserSignalErrorFull() instead")
    void removeAppUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void removeAppUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeAppUserFromChannelSignalErrorFull() instead")
    void removeAppUserFromChannelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void removeAppUserFromChannelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeAppUserFromRuleSignalErrorFull() instead")
    void removeAppUserFromRuleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void removeAppUserFromRuleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use runRuleForAppUserSignalErrorFull() instead")
    void runRuleForAppUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void runRuleForAppUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateAdminUserSignalErrorFull() instead")
    void updateAdminUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateAdminUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateAppUserSignalErrorFull() instead")
    void updateAppUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateAppUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
