/**
 * Ritc
 * Rules in the Cloud
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIActionsApi_H
#define OAI_OAIActionsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAction59.h"
#include "OAIActionFullResponse.h"
#include "OAIActionShortResponse.h"
#include "OAIObject.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIActionsApi : public QObject {
    Q_OBJECT

public:
    OAIActionsApi(const int timeOut = 0);
    ~OAIActionsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  action_object OAIAction59 [required]
    */
    virtual void addAction(const OAIAction59 &action_object);

    /**
    * @param[in]  action_id QString [required]
    */
    virtual void getAction(const QString &action_id);


    virtual void listActions();

    /**
    * @param[in]  action_id QString [required]
    */
    virtual void removeAction(const QString &action_id);

    /**
    * @param[in]  action_id QString [required]
    * @param[in]  action_object OAIAction59 [required]
    */
    virtual void updateAction(const QString &action_id, const OAIAction59 &action_object);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void addActionCallback(OAIHttpRequestWorker *worker);
    void getActionCallback(OAIHttpRequestWorker *worker);
    void listActionsCallback(OAIHttpRequestWorker *worker);
    void removeActionCallback(OAIHttpRequestWorker *worker);
    void updateActionCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void addActionSignal(OAIActionShortResponse summary);
    void getActionSignal(QList<OAIActionFullResponse> summary);
    void listActionsSignal(QList<OAIActionShortResponse> summary);
    void removeActionSignal();
    void updateActionSignal(OAIActionShortResponse summary);


    void addActionSignalFull(OAIHttpRequestWorker *worker, OAIActionShortResponse summary);
    void getActionSignalFull(OAIHttpRequestWorker *worker, QList<OAIActionFullResponse> summary);
    void listActionsSignalFull(OAIHttpRequestWorker *worker, QList<OAIActionShortResponse> summary);
    void removeActionSignalFull(OAIHttpRequestWorker *worker);
    void updateActionSignalFull(OAIHttpRequestWorker *worker, OAIActionShortResponse summary);

    Q_DECL_DEPRECATED_X("Use addActionSignalError() instead")
    void addActionSignalE(OAIActionShortResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void addActionSignalError(OAIActionShortResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getActionSignalError() instead")
    void getActionSignalE(QList<OAIActionFullResponse> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getActionSignalError(QList<OAIActionFullResponse> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listActionsSignalError() instead")
    void listActionsSignalE(QList<OAIActionShortResponse> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listActionsSignalError(QList<OAIActionShortResponse> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeActionSignalError() instead")
    void removeActionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void removeActionSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateActionSignalError() instead")
    void updateActionSignalE(OAIActionShortResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateActionSignalError(OAIActionShortResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use addActionSignalErrorFull() instead")
    void addActionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addActionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getActionSignalErrorFull() instead")
    void getActionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getActionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listActionsSignalErrorFull() instead")
    void listActionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listActionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeActionSignalErrorFull() instead")
    void removeActionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void removeActionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateActionSignalErrorFull() instead")
    void updateActionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateActionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
