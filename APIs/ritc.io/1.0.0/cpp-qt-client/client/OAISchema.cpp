/**
 * Ritc
 * Rules in the Cloud
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISchema.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISchema::OAISchema(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISchema::OAISchema() {
    this->initializeModel();
}

OAISchema::~OAISchema() {}

void OAISchema::initializeModel() {

    m_datatype_isSet = false;
    m_datatype_isValid = false;

    m_r_default_isSet = false;
    m_r_default_isValid = false;

    m_expose_isSet = false;
    m_expose_isValid = false;

    m_required_isSet = false;
    m_required_isValid = false;

    m_style_isSet = false;
    m_style_isValid = false;
}

void OAISchema::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISchema::fromJsonObject(QJsonObject json) {

    m_datatype_isValid = ::OpenAPI::fromJsonValue(m_datatype, json[QString("datatype")]);
    m_datatype_isSet = !json[QString("datatype")].isNull() && m_datatype_isValid;

    m_r_default_isValid = ::OpenAPI::fromJsonValue(m_r_default, json[QString("default")]);
    m_r_default_isSet = !json[QString("default")].isNull() && m_r_default_isValid;

    m_expose_isValid = ::OpenAPI::fromJsonValue(m_expose, json[QString("expose")]);
    m_expose_isSet = !json[QString("expose")].isNull() && m_expose_isValid;

    m_required_isValid = ::OpenAPI::fromJsonValue(m_required, json[QString("required")]);
    m_required_isSet = !json[QString("required")].isNull() && m_required_isValid;

    m_style_isValid = ::OpenAPI::fromJsonValue(m_style, json[QString("style")]);
    m_style_isSet = !json[QString("style")].isNull() && m_style_isValid;
}

QString OAISchema::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISchema::asJsonObject() const {
    QJsonObject obj;
    if (m_datatype_isSet) {
        obj.insert(QString("datatype"), ::OpenAPI::toJsonValue(m_datatype));
    }
    if (m_r_default_isSet) {
        obj.insert(QString("default"), ::OpenAPI::toJsonValue(m_r_default));
    }
    if (m_expose_isSet) {
        obj.insert(QString("expose"), ::OpenAPI::toJsonValue(m_expose));
    }
    if (m_required_isSet) {
        obj.insert(QString("required"), ::OpenAPI::toJsonValue(m_required));
    }
    if (m_style.isSet()) {
        obj.insert(QString("style"), ::OpenAPI::toJsonValue(m_style));
    }
    return obj;
}

OAIObject OAISchema::getDatatype() const {
    return m_datatype;
}
void OAISchema::setDatatype(const OAIObject &datatype) {
    m_datatype = datatype;
    m_datatype_isSet = true;
}

bool OAISchema::is_datatype_Set() const{
    return m_datatype_isSet;
}

bool OAISchema::is_datatype_Valid() const{
    return m_datatype_isValid;
}

QString OAISchema::getRDefault() const {
    return m_r_default;
}
void OAISchema::setRDefault(const QString &r_default) {
    m_r_default = r_default;
    m_r_default_isSet = true;
}

bool OAISchema::is_r_default_Set() const{
    return m_r_default_isSet;
}

bool OAISchema::is_r_default_Valid() const{
    return m_r_default_isValid;
}

OAIObject OAISchema::getExpose() const {
    return m_expose;
}
void OAISchema::setExpose(const OAIObject &expose) {
    m_expose = expose;
    m_expose_isSet = true;
}

bool OAISchema::is_expose_Set() const{
    return m_expose_isSet;
}

bool OAISchema::is_expose_Valid() const{
    return m_expose_isValid;
}

OAIObject OAISchema::getRequired() const {
    return m_required;
}
void OAISchema::setRequired(const OAIObject &required) {
    m_required = required;
    m_required_isSet = true;
}

bool OAISchema::is_required_Set() const{
    return m_required_isSet;
}

bool OAISchema::is_required_Valid() const{
    return m_required_isValid;
}

OAIStyle OAISchema::getStyle() const {
    return m_style;
}
void OAISchema::setStyle(const OAIStyle &style) {
    m_style = style;
    m_style_isSet = true;
}

bool OAISchema::is_style_Set() const{
    return m_style_isSet;
}

bool OAISchema::is_style_Valid() const{
    return m_style_isValid;
}

bool OAISchema::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_datatype_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_default_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expose_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_required_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_style.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISchema::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
