/**
 * Ritc
 * Rules in the Cloud
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFunctionResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFunctionResponse::OAIFunctionResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFunctionResponse::OAIFunctionResponse() {
    this->initializeModel();
}

OAIFunctionResponse::~OAIFunctionResponse() {}

void OAIFunctionResponse::initializeModel() {

    m_api_type_isSet = false;
    m_api_type_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_endpoint_isSet = false;
    m_endpoint_isValid = false;

    m_http_method_isSet = false;
    m_http_method_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_request_parameters_isSet = false;
    m_request_parameters_isValid = false;

    m_response_format_isSet = false;
    m_response_format_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIFunctionResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFunctionResponse::fromJsonObject(QJsonObject json) {

    m_api_type_isValid = ::OpenAPI::fromJsonValue(m_api_type, json[QString("apiType")]);
    m_api_type_isSet = !json[QString("apiType")].isNull() && m_api_type_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_endpoint_isValid = ::OpenAPI::fromJsonValue(m_endpoint, json[QString("endpoint")]);
    m_endpoint_isSet = !json[QString("endpoint")].isNull() && m_endpoint_isValid;

    m_http_method_isValid = ::OpenAPI::fromJsonValue(m_http_method, json[QString("httpMethod")]);
    m_http_method_isSet = !json[QString("httpMethod")].isNull() && m_http_method_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_request_parameters_isValid = ::OpenAPI::fromJsonValue(m_request_parameters, json[QString("requestParameters")]);
    m_request_parameters_isSet = !json[QString("requestParameters")].isNull() && m_request_parameters_isValid;

    m_response_format_isValid = ::OpenAPI::fromJsonValue(m_response_format, json[QString("responseFormat")]);
    m_response_format_isSet = !json[QString("responseFormat")].isNull() && m_response_format_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIFunctionResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFunctionResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_api_type.isSet()) {
        obj.insert(QString("apiType"), ::OpenAPI::toJsonValue(m_api_type));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_endpoint_isSet) {
        obj.insert(QString("endpoint"), ::OpenAPI::toJsonValue(m_endpoint));
    }
    if (m_http_method.isSet()) {
        obj.insert(QString("httpMethod"), ::OpenAPI::toJsonValue(m_http_method));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_request_parameters.size() > 0) {
        obj.insert(QString("requestParameters"), ::OpenAPI::toJsonValue(m_request_parameters));
    }
    if (m_response_format.isSet()) {
        obj.insert(QString("responseFormat"), ::OpenAPI::toJsonValue(m_response_format));
    }
    if (m_type.isSet()) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

OAIApiType OAIFunctionResponse::getApiType() const {
    return m_api_type;
}
void OAIFunctionResponse::setApiType(const OAIApiType &api_type) {
    m_api_type = api_type;
    m_api_type_isSet = true;
}

bool OAIFunctionResponse::is_api_type_Set() const{
    return m_api_type_isSet;
}

bool OAIFunctionResponse::is_api_type_Valid() const{
    return m_api_type_isValid;
}

QString OAIFunctionResponse::getDescription() const {
    return m_description;
}
void OAIFunctionResponse::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIFunctionResponse::is_description_Set() const{
    return m_description_isSet;
}

bool OAIFunctionResponse::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIFunctionResponse::getEndpoint() const {
    return m_endpoint;
}
void OAIFunctionResponse::setEndpoint(const QString &endpoint) {
    m_endpoint = endpoint;
    m_endpoint_isSet = true;
}

bool OAIFunctionResponse::is_endpoint_Set() const{
    return m_endpoint_isSet;
}

bool OAIFunctionResponse::is_endpoint_Valid() const{
    return m_endpoint_isValid;
}

OAIHttpMethod OAIFunctionResponse::getHttpMethod() const {
    return m_http_method;
}
void OAIFunctionResponse::setHttpMethod(const OAIHttpMethod &http_method) {
    m_http_method = http_method;
    m_http_method_isSet = true;
}

bool OAIFunctionResponse::is_http_method_Set() const{
    return m_http_method_isSet;
}

bool OAIFunctionResponse::is_http_method_Valid() const{
    return m_http_method_isValid;
}

QString OAIFunctionResponse::getId() const {
    return m_id;
}
void OAIFunctionResponse::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIFunctionResponse::is_id_Set() const{
    return m_id_isSet;
}

bool OAIFunctionResponse::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIFunctionResponse::getName() const {
    return m_name;
}
void OAIFunctionResponse::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIFunctionResponse::is_name_Set() const{
    return m_name_isSet;
}

bool OAIFunctionResponse::is_name_Valid() const{
    return m_name_isValid;
}

QList<OAIRequestParameter> OAIFunctionResponse::getRequestParameters() const {
    return m_request_parameters;
}
void OAIFunctionResponse::setRequestParameters(const QList<OAIRequestParameter> &request_parameters) {
    m_request_parameters = request_parameters;
    m_request_parameters_isSet = true;
}

bool OAIFunctionResponse::is_request_parameters_Set() const{
    return m_request_parameters_isSet;
}

bool OAIFunctionResponse::is_request_parameters_Valid() const{
    return m_request_parameters_isValid;
}

OAIResponseFormat OAIFunctionResponse::getResponseFormat() const {
    return m_response_format;
}
void OAIFunctionResponse::setResponseFormat(const OAIResponseFormat &response_format) {
    m_response_format = response_format;
    m_response_format_isSet = true;
}

bool OAIFunctionResponse::is_response_format_Set() const{
    return m_response_format_isSet;
}

bool OAIFunctionResponse::is_response_format_Valid() const{
    return m_response_format_isValid;
}

OAIType OAIFunctionResponse::getType() const {
    return m_type;
}
void OAIFunctionResponse::setType(const OAIType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIFunctionResponse::is_type_Set() const{
    return m_type_isSet;
}

bool OAIFunctionResponse::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIFunctionResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_api_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_endpoint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_http_method.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_parameters.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_response_format.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFunctionResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
