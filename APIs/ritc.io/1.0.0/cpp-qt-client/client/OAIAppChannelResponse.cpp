/**
 * Ritc
 * Rules in the Cloud
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAppChannelResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAppChannelResponse::OAIAppChannelResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAppChannelResponse::OAIAppChannelResponse() {
    this->initializeModel();
}

OAIAppChannelResponse::~OAIAppChannelResponse() {}

void OAIAppChannelResponse::initializeModel() {

    m_channel_id_isSet = false;
    m_channel_id_isValid = false;

    m_created_date_isSet = false;
    m_created_date_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;
}

void OAIAppChannelResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAppChannelResponse::fromJsonObject(QJsonObject json) {

    m_channel_id_isValid = ::OpenAPI::fromJsonValue(m_channel_id, json[QString("channelId")]);
    m_channel_id_isSet = !json[QString("channelId")].isNull() && m_channel_id_isValid;

    m_created_date_isValid = ::OpenAPI::fromJsonValue(m_created_date, json[QString("createdDate")]);
    m_created_date_isSet = !json[QString("createdDate")].isNull() && m_created_date_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("userId")]);
    m_user_id_isSet = !json[QString("userId")].isNull() && m_user_id_isValid;
}

QString OAIAppChannelResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAppChannelResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_channel_id_isSet) {
        obj.insert(QString("channelId"), ::OpenAPI::toJsonValue(m_channel_id));
    }
    if (m_created_date_isSet) {
        obj.insert(QString("createdDate"), ::OpenAPI::toJsonValue(m_created_date));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("userId"), ::OpenAPI::toJsonValue(m_user_id));
    }
    return obj;
}

qint32 OAIAppChannelResponse::getChannelId() const {
    return m_channel_id;
}
void OAIAppChannelResponse::setChannelId(const qint32 &channel_id) {
    m_channel_id = channel_id;
    m_channel_id_isSet = true;
}

bool OAIAppChannelResponse::is_channel_id_Set() const{
    return m_channel_id_isSet;
}

bool OAIAppChannelResponse::is_channel_id_Valid() const{
    return m_channel_id_isValid;
}

QString OAIAppChannelResponse::getCreatedDate() const {
    return m_created_date;
}
void OAIAppChannelResponse::setCreatedDate(const QString &created_date) {
    m_created_date = created_date;
    m_created_date_isSet = true;
}

bool OAIAppChannelResponse::is_created_date_Set() const{
    return m_created_date_isSet;
}

bool OAIAppChannelResponse::is_created_date_Valid() const{
    return m_created_date_isValid;
}

qint32 OAIAppChannelResponse::getId() const {
    return m_id;
}
void OAIAppChannelResponse::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIAppChannelResponse::is_id_Set() const{
    return m_id_isSet;
}

bool OAIAppChannelResponse::is_id_Valid() const{
    return m_id_isValid;
}

OAIStatus OAIAppChannelResponse::getStatus() const {
    return m_status;
}
void OAIAppChannelResponse::setStatus(const OAIStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIAppChannelResponse::is_status_Set() const{
    return m_status_isSet;
}

bool OAIAppChannelResponse::is_status_Valid() const{
    return m_status_isValid;
}

qint32 OAIAppChannelResponse::getUserId() const {
    return m_user_id;
}
void OAIAppChannelResponse::setUserId(const qint32 &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAIAppChannelResponse::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAIAppChannelResponse::is_user_id_Valid() const{
    return m_user_id_isValid;
}

bool OAIAppChannelResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_channel_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAppChannelResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
