/**
 * Ritc
 * Rules in the Cloud
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAppsApi_H
#define OAI_OAIAppsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIApp.h"
#include "OAIAppChannelResponse.h"
#include "OAIAppExternalCredentials.h"
#include "OAIAppExternalCredentialsResponse.h"
#include "OAIAppResponse.h"
#include "OAIObject.h"
#include "OAIRuleResults.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAppsApi : public QObject {
    Q_OBJECT

public:
    OAIAppsApi(const int timeOut = 0);
    ~OAIAppsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  app_object OAIApp [required]
    */
    virtual void addApp(const OAIApp &app_object);

    /**
    * @param[in]  channel_id QString [required]
    * @param[in]  user_id QString [required]
    */
    virtual void addAppChannelUser(const QString &channel_id, const QString &user_id);

    /**
    * @param[in]  app_external_credentials_object OAIAppExternalCredentials [required]
    */
    virtual void addChannelExternalCredentials(const OAIAppExternalCredentials &app_external_credentials_object);

    /**
    * @param[in]  app_id QString [required]
    */
    virtual void getApp(const QString &app_id);

    /**
    * @param[in]  channel_id QString [required]
    * @param[in]  user_id QString [required]
    */
    virtual void getAppChannelUser(const QString &channel_id, const QString &user_id);

    /**
    * @param[in]  channel_id QString [required]
    */
    virtual void getChannelExternalCredentials(const QString &channel_id);

    /**
    * @param[in]  channel_id QString [required]
    */
    virtual void listAppChannelUsers(const QString &channel_id);


    virtual void listAppChannels();


    virtual void listApps();


    virtual void listChannelExternalCredentials();

    /**
    * @param[in]  app_id QString [required]
    */
    virtual void removeApp(const QString &app_id);

    /**
    * @param[in]  channel_id QString [required]
    */
    virtual void removeChannelExternalCredentials(const QString &channel_id);

    /**
    * @param[in]  break_when_rule_fires bool [optional]
    * @param[in]  initial_data OAIObject [optional]
    */
    virtual void runApp(const ::OpenAPI::OptionalParam<bool> &break_when_rule_fires = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<OAIObject> &initial_data = ::OpenAPI::OptionalParam<OAIObject>());

    /**
    * @param[in]  rule_id_list QString [required]
    * @param[in]  break_when_rule_fires bool [optional]
    * @param[in]  initial_data OAIObject [optional]
    */
    virtual void runRuleGroup(const QString &rule_id_list, const ::OpenAPI::OptionalParam<bool> &break_when_rule_fires = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<OAIObject> &initial_data = ::OpenAPI::OptionalParam<OAIObject>());

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  app_object OAIApp [required]
    */
    virtual void updateApp(const QString &app_id, const OAIApp &app_object);

    /**
    * @param[in]  channel_id QString [required]
    * @param[in]  app_external_credentials_object OAIAppExternalCredentials [required]
    */
    virtual void updateChannelExternalCredentials(const QString &channel_id, const OAIAppExternalCredentials &app_external_credentials_object);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void addAppCallback(OAIHttpRequestWorker *worker);
    void addAppChannelUserCallback(OAIHttpRequestWorker *worker);
    void addChannelExternalCredentialsCallback(OAIHttpRequestWorker *worker);
    void getAppCallback(OAIHttpRequestWorker *worker);
    void getAppChannelUserCallback(OAIHttpRequestWorker *worker);
    void getChannelExternalCredentialsCallback(OAIHttpRequestWorker *worker);
    void listAppChannelUsersCallback(OAIHttpRequestWorker *worker);
    void listAppChannelsCallback(OAIHttpRequestWorker *worker);
    void listAppsCallback(OAIHttpRequestWorker *worker);
    void listChannelExternalCredentialsCallback(OAIHttpRequestWorker *worker);
    void removeAppCallback(OAIHttpRequestWorker *worker);
    void removeChannelExternalCredentialsCallback(OAIHttpRequestWorker *worker);
    void runAppCallback(OAIHttpRequestWorker *worker);
    void runRuleGroupCallback(OAIHttpRequestWorker *worker);
    void updateAppCallback(OAIHttpRequestWorker *worker);
    void updateChannelExternalCredentialsCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void addAppSignal(OAIAppResponse summary);
    void addAppChannelUserSignal(OAIAppChannelResponse summary);
    void addChannelExternalCredentialsSignal(OAIAppExternalCredentialsResponse summary);
    void getAppSignal(QList<OAIAppResponse> summary);
    void getAppChannelUserSignal(QList<OAIAppChannelResponse> summary);
    void getChannelExternalCredentialsSignal(QList<OAIAppExternalCredentialsResponse> summary);
    void listAppChannelUsersSignal(QList<OAIAppChannelResponse> summary);
    void listAppChannelsSignal(QList<OAIAppChannelResponse> summary);
    void listAppsSignal(QList<OAIAppResponse> summary);
    void listChannelExternalCredentialsSignal(QList<OAIAppExternalCredentialsResponse> summary);
    void removeAppSignal();
    void removeChannelExternalCredentialsSignal();
    void runAppSignal(QList<OAIRuleResults> summary);
    void runRuleGroupSignal(QList<OAIRuleResults> summary);
    void updateAppSignal(OAIAppResponse summary);
    void updateChannelExternalCredentialsSignal(OAIAppExternalCredentialsResponse summary);


    void addAppSignalFull(OAIHttpRequestWorker *worker, OAIAppResponse summary);
    void addAppChannelUserSignalFull(OAIHttpRequestWorker *worker, OAIAppChannelResponse summary);
    void addChannelExternalCredentialsSignalFull(OAIHttpRequestWorker *worker, OAIAppExternalCredentialsResponse summary);
    void getAppSignalFull(OAIHttpRequestWorker *worker, QList<OAIAppResponse> summary);
    void getAppChannelUserSignalFull(OAIHttpRequestWorker *worker, QList<OAIAppChannelResponse> summary);
    void getChannelExternalCredentialsSignalFull(OAIHttpRequestWorker *worker, QList<OAIAppExternalCredentialsResponse> summary);
    void listAppChannelUsersSignalFull(OAIHttpRequestWorker *worker, QList<OAIAppChannelResponse> summary);
    void listAppChannelsSignalFull(OAIHttpRequestWorker *worker, QList<OAIAppChannelResponse> summary);
    void listAppsSignalFull(OAIHttpRequestWorker *worker, QList<OAIAppResponse> summary);
    void listChannelExternalCredentialsSignalFull(OAIHttpRequestWorker *worker, QList<OAIAppExternalCredentialsResponse> summary);
    void removeAppSignalFull(OAIHttpRequestWorker *worker);
    void removeChannelExternalCredentialsSignalFull(OAIHttpRequestWorker *worker);
    void runAppSignalFull(OAIHttpRequestWorker *worker, QList<OAIRuleResults> summary);
    void runRuleGroupSignalFull(OAIHttpRequestWorker *worker, QList<OAIRuleResults> summary);
    void updateAppSignalFull(OAIHttpRequestWorker *worker, OAIAppResponse summary);
    void updateChannelExternalCredentialsSignalFull(OAIHttpRequestWorker *worker, OAIAppExternalCredentialsResponse summary);

    Q_DECL_DEPRECATED_X("Use addAppSignalError() instead")
    void addAppSignalE(OAIAppResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void addAppSignalError(OAIAppResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addAppChannelUserSignalError() instead")
    void addAppChannelUserSignalE(OAIAppChannelResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void addAppChannelUserSignalError(OAIAppChannelResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addChannelExternalCredentialsSignalError() instead")
    void addChannelExternalCredentialsSignalE(OAIAppExternalCredentialsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void addChannelExternalCredentialsSignalError(OAIAppExternalCredentialsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAppSignalError() instead")
    void getAppSignalE(QList<OAIAppResponse> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAppSignalError(QList<OAIAppResponse> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAppChannelUserSignalError() instead")
    void getAppChannelUserSignalE(QList<OAIAppChannelResponse> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAppChannelUserSignalError(QList<OAIAppChannelResponse> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getChannelExternalCredentialsSignalError() instead")
    void getChannelExternalCredentialsSignalE(QList<OAIAppExternalCredentialsResponse> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getChannelExternalCredentialsSignalError(QList<OAIAppExternalCredentialsResponse> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listAppChannelUsersSignalError() instead")
    void listAppChannelUsersSignalE(QList<OAIAppChannelResponse> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listAppChannelUsersSignalError(QList<OAIAppChannelResponse> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listAppChannelsSignalError() instead")
    void listAppChannelsSignalE(QList<OAIAppChannelResponse> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listAppChannelsSignalError(QList<OAIAppChannelResponse> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listAppsSignalError() instead")
    void listAppsSignalE(QList<OAIAppResponse> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listAppsSignalError(QList<OAIAppResponse> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listChannelExternalCredentialsSignalError() instead")
    void listChannelExternalCredentialsSignalE(QList<OAIAppExternalCredentialsResponse> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listChannelExternalCredentialsSignalError(QList<OAIAppExternalCredentialsResponse> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeAppSignalError() instead")
    void removeAppSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void removeAppSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeChannelExternalCredentialsSignalError() instead")
    void removeChannelExternalCredentialsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void removeChannelExternalCredentialsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use runAppSignalError() instead")
    void runAppSignalE(QList<OAIRuleResults> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void runAppSignalError(QList<OAIRuleResults> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use runRuleGroupSignalError() instead")
    void runRuleGroupSignalE(QList<OAIRuleResults> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void runRuleGroupSignalError(QList<OAIRuleResults> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateAppSignalError() instead")
    void updateAppSignalE(OAIAppResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateAppSignalError(OAIAppResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateChannelExternalCredentialsSignalError() instead")
    void updateChannelExternalCredentialsSignalE(OAIAppExternalCredentialsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateChannelExternalCredentialsSignalError(OAIAppExternalCredentialsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use addAppSignalErrorFull() instead")
    void addAppSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addAppSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addAppChannelUserSignalErrorFull() instead")
    void addAppChannelUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addAppChannelUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addChannelExternalCredentialsSignalErrorFull() instead")
    void addChannelExternalCredentialsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addChannelExternalCredentialsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAppSignalErrorFull() instead")
    void getAppSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAppSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAppChannelUserSignalErrorFull() instead")
    void getAppChannelUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAppChannelUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getChannelExternalCredentialsSignalErrorFull() instead")
    void getChannelExternalCredentialsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getChannelExternalCredentialsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listAppChannelUsersSignalErrorFull() instead")
    void listAppChannelUsersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listAppChannelUsersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listAppChannelsSignalErrorFull() instead")
    void listAppChannelsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listAppChannelsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listAppsSignalErrorFull() instead")
    void listAppsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listAppsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listChannelExternalCredentialsSignalErrorFull() instead")
    void listChannelExternalCredentialsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listChannelExternalCredentialsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeAppSignalErrorFull() instead")
    void removeAppSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void removeAppSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeChannelExternalCredentialsSignalErrorFull() instead")
    void removeChannelExternalCredentialsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void removeChannelExternalCredentialsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use runAppSignalErrorFull() instead")
    void runAppSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void runAppSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use runRuleGroupSignalErrorFull() instead")
    void runRuleGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void runRuleGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateAppSignalErrorFull() instead")
    void updateAppSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateAppSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateChannelExternalCredentialsSignalErrorFull() instead")
    void updateChannelExternalCredentialsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateChannelExternalCredentialsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
