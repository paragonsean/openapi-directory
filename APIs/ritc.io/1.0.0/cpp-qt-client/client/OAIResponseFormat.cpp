/**
 * Ritc
 * Rules in the Cloud
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIResponseFormat.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIResponseFormat::OAIResponseFormat(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIResponseFormat::OAIResponseFormat() {
    this->initializeModel();
}

OAIResponseFormat::~OAIResponseFormat() {}

void OAIResponseFormat::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIResponseFormat::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIResponseFormat::fromJson(QString jsonString) {
    
    if ( jsonString.compare("Html", Qt::CaseInsensitive) == 0) {
        m_value = eOAIResponseFormat::HTML;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Json", Qt::CaseInsensitive) == 0) {
        m_value = eOAIResponseFormat::JSON;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Text", Qt::CaseInsensitive) == 0) {
        m_value = eOAIResponseFormat::TEXT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Xml", Qt::CaseInsensitive) == 0) {
        m_value = eOAIResponseFormat::XML;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIResponseFormat::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIResponseFormat::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIResponseFormat::HTML:
            val = "Html";
            break;
        case eOAIResponseFormat::JSON:
            val = "Json";
            break;
        case eOAIResponseFormat::TEXT:
            val = "Text";
            break;
        case eOAIResponseFormat::XML:
            val = "Xml";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIResponseFormat::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIResponseFormat::eOAIResponseFormat OAIResponseFormat::getValue() const {
    return m_value;
}

void OAIResponseFormat::setValue(const OAIResponseFormat::eOAIResponseFormat& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIResponseFormat::isSet() const {
    
    return m_value_isSet;
}

bool OAIResponseFormat::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
