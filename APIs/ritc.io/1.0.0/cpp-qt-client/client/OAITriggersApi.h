/**
 * Ritc
 * Rules in the Cloud
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAITriggersApi_H
#define OAI_OAITriggersApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIObject.h"
#include "OAITrigger54.h"
#include "OAITriggerFullResponse.h"
#include "OAITriggerShortResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAITriggersApi : public QObject {
    Q_OBJECT

public:
    OAITriggersApi(const int timeOut = 0);
    ~OAITriggersApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  trigger_object OAITrigger54 [required]
    */
    virtual void addTrigger(const OAITrigger54 &trigger_object);

    /**
    * @param[in]  trigger_id QString [required]
    */
    virtual void getTrigger(const QString &trigger_id);


    virtual void listTriggers();

    /**
    * @param[in]  trigger_id QString [required]
    */
    virtual void removeTrigger(const QString &trigger_id);

    /**
    * @param[in]  trigger_id QString [required]
    * @param[in]  trigger_object OAITrigger54 [required]
    */
    virtual void updateTrigger(const QString &trigger_id, const OAITrigger54 &trigger_object);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void addTriggerCallback(OAIHttpRequestWorker *worker);
    void getTriggerCallback(OAIHttpRequestWorker *worker);
    void listTriggersCallback(OAIHttpRequestWorker *worker);
    void removeTriggerCallback(OAIHttpRequestWorker *worker);
    void updateTriggerCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void addTriggerSignal(OAITriggerShortResponse summary);
    void getTriggerSignal(QList<OAITriggerFullResponse> summary);
    void listTriggersSignal(QList<OAITriggerShortResponse> summary);
    void removeTriggerSignal();
    void updateTriggerSignal(OAITriggerShortResponse summary);


    void addTriggerSignalFull(OAIHttpRequestWorker *worker, OAITriggerShortResponse summary);
    void getTriggerSignalFull(OAIHttpRequestWorker *worker, QList<OAITriggerFullResponse> summary);
    void listTriggersSignalFull(OAIHttpRequestWorker *worker, QList<OAITriggerShortResponse> summary);
    void removeTriggerSignalFull(OAIHttpRequestWorker *worker);
    void updateTriggerSignalFull(OAIHttpRequestWorker *worker, OAITriggerShortResponse summary);

    Q_DECL_DEPRECATED_X("Use addTriggerSignalError() instead")
    void addTriggerSignalE(OAITriggerShortResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void addTriggerSignalError(OAITriggerShortResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTriggerSignalError() instead")
    void getTriggerSignalE(QList<OAITriggerFullResponse> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTriggerSignalError(QList<OAITriggerFullResponse> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listTriggersSignalError() instead")
    void listTriggersSignalE(QList<OAITriggerShortResponse> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listTriggersSignalError(QList<OAITriggerShortResponse> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeTriggerSignalError() instead")
    void removeTriggerSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void removeTriggerSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateTriggerSignalError() instead")
    void updateTriggerSignalE(OAITriggerShortResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateTriggerSignalError(OAITriggerShortResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use addTriggerSignalErrorFull() instead")
    void addTriggerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addTriggerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTriggerSignalErrorFull() instead")
    void getTriggerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTriggerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listTriggersSignalErrorFull() instead")
    void listTriggersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listTriggersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeTriggerSignalErrorFull() instead")
    void removeTriggerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void removeTriggerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateTriggerSignalErrorFull() instead")
    void updateTriggerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateTriggerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
