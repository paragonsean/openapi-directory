/**
 * Ritc
 * Rules in the Cloud
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRule.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRule::OAIRule(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRule::OAIRule() {
    this->initializeModel();
}

OAIRule::~OAIRule() {}

void OAIRule::initializeModel() {

    m_action_ids_isSet = false;
    m_action_ids_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_trigger_ids_isSet = false;
    m_trigger_ids_isValid = false;
}

void OAIRule::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRule::fromJsonObject(QJsonObject json) {

    m_action_ids_isValid = ::OpenAPI::fromJsonValue(m_action_ids, json[QString("actionIds")]);
    m_action_ids_isSet = !json[QString("actionIds")].isNull() && m_action_ids_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_trigger_ids_isValid = ::OpenAPI::fromJsonValue(m_trigger_ids, json[QString("triggerIds")]);
    m_trigger_ids_isSet = !json[QString("triggerIds")].isNull() && m_trigger_ids_isValid;
}

QString OAIRule::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRule::asJsonObject() const {
    QJsonObject obj;
    if (m_action_ids_isSet) {
        obj.insert(QString("actionIds"), ::OpenAPI::toJsonValue(m_action_ids));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_trigger_ids_isSet) {
        obj.insert(QString("triggerIds"), ::OpenAPI::toJsonValue(m_trigger_ids));
    }
    return obj;
}

QString OAIRule::getActionIds() const {
    return m_action_ids;
}
void OAIRule::setActionIds(const QString &action_ids) {
    m_action_ids = action_ids;
    m_action_ids_isSet = true;
}

bool OAIRule::is_action_ids_Set() const{
    return m_action_ids_isSet;
}

bool OAIRule::is_action_ids_Valid() const{
    return m_action_ids_isValid;
}

QString OAIRule::getDescription() const {
    return m_description;
}
void OAIRule::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIRule::is_description_Set() const{
    return m_description_isSet;
}

bool OAIRule::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIRule::getName() const {
    return m_name;
}
void OAIRule::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIRule::is_name_Set() const{
    return m_name_isSet;
}

bool OAIRule::is_name_Valid() const{
    return m_name_isValid;
}

OAIStatus OAIRule::getStatus() const {
    return m_status;
}
void OAIRule::setStatus(const OAIStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIRule::is_status_Set() const{
    return m_status_isSet;
}

bool OAIRule::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIRule::getTriggerIds() const {
    return m_trigger_ids;
}
void OAIRule::setTriggerIds(const QString &trigger_ids) {
    m_trigger_ids = trigger_ids;
    m_trigger_ids_isSet = true;
}

bool OAIRule::is_trigger_ids_Set() const{
    return m_trigger_ids_isSet;
}

bool OAIRule::is_trigger_ids_Valid() const{
    return m_trigger_ids_isValid;
}

bool OAIRule::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_action_ids_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_trigger_ids_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRule::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
