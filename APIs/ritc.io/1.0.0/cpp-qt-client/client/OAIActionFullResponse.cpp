/**
 * Ritc
 * Rules in the Cloud
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIActionFullResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIActionFullResponse::OAIActionFullResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIActionFullResponse::OAIActionFullResponse() {
    this->initializeModel();
}

OAIActionFullResponse::~OAIActionFullResponse() {}

void OAIActionFullResponse::initializeModel() {

    m_channel_id_isSet = false;
    m_channel_id_isValid = false;

    m_codes_isSet = false;
    m_codes_isValid = false;

    m_created_date_isSet = false;
    m_created_date_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_function_id_isSet = false;
    m_function_id_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_modified_date_isSet = false;
    m_modified_date_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_parameters_isSet = false;
    m_parameters_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIActionFullResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIActionFullResponse::fromJsonObject(QJsonObject json) {

    m_channel_id_isValid = ::OpenAPI::fromJsonValue(m_channel_id, json[QString("channelId")]);
    m_channel_id_isSet = !json[QString("channelId")].isNull() && m_channel_id_isValid;

    m_codes_isValid = ::OpenAPI::fromJsonValue(m_codes, json[QString("codes")]);
    m_codes_isSet = !json[QString("codes")].isNull() && m_codes_isValid;

    m_created_date_isValid = ::OpenAPI::fromJsonValue(m_created_date, json[QString("createdDate")]);
    m_created_date_isSet = !json[QString("createdDate")].isNull() && m_created_date_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_function_id_isValid = ::OpenAPI::fromJsonValue(m_function_id, json[QString("functionId")]);
    m_function_id_isSet = !json[QString("functionId")].isNull() && m_function_id_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_modified_date_isValid = ::OpenAPI::fromJsonValue(m_modified_date, json[QString("modifiedDate")]);
    m_modified_date_isSet = !json[QString("modifiedDate")].isNull() && m_modified_date_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_parameters_isValid = ::OpenAPI::fromJsonValue(m_parameters, json[QString("parameters")]);
    m_parameters_isSet = !json[QString("parameters")].isNull() && m_parameters_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIActionFullResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIActionFullResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_channel_id_isSet) {
        obj.insert(QString("channelId"), ::OpenAPI::toJsonValue(m_channel_id));
    }
    if (m_codes_isSet) {
        obj.insert(QString("codes"), ::OpenAPI::toJsonValue(m_codes));
    }
    if (m_created_date_isSet) {
        obj.insert(QString("createdDate"), ::OpenAPI::toJsonValue(m_created_date));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_function_id_isSet) {
        obj.insert(QString("functionId"), ::OpenAPI::toJsonValue(m_function_id));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_modified_date_isSet) {
        obj.insert(QString("modifiedDate"), ::OpenAPI::toJsonValue(m_modified_date));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_parameters_isSet) {
        obj.insert(QString("parameters"), ::OpenAPI::toJsonValue(m_parameters));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

qint32 OAIActionFullResponse::getChannelId() const {
    return m_channel_id;
}
void OAIActionFullResponse::setChannelId(const qint32 &channel_id) {
    m_channel_id = channel_id;
    m_channel_id_isSet = true;
}

bool OAIActionFullResponse::is_channel_id_Set() const{
    return m_channel_id_isSet;
}

bool OAIActionFullResponse::is_channel_id_Valid() const{
    return m_channel_id_isValid;
}

OAIObject OAIActionFullResponse::getCodes() const {
    return m_codes;
}
void OAIActionFullResponse::setCodes(const OAIObject &codes) {
    m_codes = codes;
    m_codes_isSet = true;
}

bool OAIActionFullResponse::is_codes_Set() const{
    return m_codes_isSet;
}

bool OAIActionFullResponse::is_codes_Valid() const{
    return m_codes_isValid;
}

QString OAIActionFullResponse::getCreatedDate() const {
    return m_created_date;
}
void OAIActionFullResponse::setCreatedDate(const QString &created_date) {
    m_created_date = created_date;
    m_created_date_isSet = true;
}

bool OAIActionFullResponse::is_created_date_Set() const{
    return m_created_date_isSet;
}

bool OAIActionFullResponse::is_created_date_Valid() const{
    return m_created_date_isValid;
}

QString OAIActionFullResponse::getDescription() const {
    return m_description;
}
void OAIActionFullResponse::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIActionFullResponse::is_description_Set() const{
    return m_description_isSet;
}

bool OAIActionFullResponse::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIActionFullResponse::getFunctionId() const {
    return m_function_id;
}
void OAIActionFullResponse::setFunctionId(const QString &function_id) {
    m_function_id = function_id;
    m_function_id_isSet = true;
}

bool OAIActionFullResponse::is_function_id_Set() const{
    return m_function_id_isSet;
}

bool OAIActionFullResponse::is_function_id_Valid() const{
    return m_function_id_isValid;
}

qint32 OAIActionFullResponse::getId() const {
    return m_id;
}
void OAIActionFullResponse::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIActionFullResponse::is_id_Set() const{
    return m_id_isSet;
}

bool OAIActionFullResponse::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIActionFullResponse::getModifiedDate() const {
    return m_modified_date;
}
void OAIActionFullResponse::setModifiedDate(const QString &modified_date) {
    m_modified_date = modified_date;
    m_modified_date_isSet = true;
}

bool OAIActionFullResponse::is_modified_date_Set() const{
    return m_modified_date_isSet;
}

bool OAIActionFullResponse::is_modified_date_Valid() const{
    return m_modified_date_isValid;
}

QString OAIActionFullResponse::getName() const {
    return m_name;
}
void OAIActionFullResponse::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIActionFullResponse::is_name_Set() const{
    return m_name_isSet;
}

bool OAIActionFullResponse::is_name_Valid() const{
    return m_name_isValid;
}

OAIObject OAIActionFullResponse::getParameters() const {
    return m_parameters;
}
void OAIActionFullResponse::setParameters(const OAIObject &parameters) {
    m_parameters = parameters;
    m_parameters_isSet = true;
}

bool OAIActionFullResponse::is_parameters_Set() const{
    return m_parameters_isSet;
}

bool OAIActionFullResponse::is_parameters_Valid() const{
    return m_parameters_isValid;
}

OAIStatus OAIActionFullResponse::getStatus() const {
    return m_status;
}
void OAIActionFullResponse::setStatus(const OAIStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIActionFullResponse::is_status_Set() const{
    return m_status_isSet;
}

bool OAIActionFullResponse::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIActionFullResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_channel_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_codes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_function_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_modified_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parameters_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIActionFullResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
