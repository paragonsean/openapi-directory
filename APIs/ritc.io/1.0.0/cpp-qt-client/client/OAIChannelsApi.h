/**
 * Ritc
 * Rules in the Cloud
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIChannelsApi_H
#define OAI_OAIChannelsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIChannel.h"
#include "OAIChannelResponse.h"
#include "OAIFunction7.h"
#include "OAIFunctionResponse.h"
#include "OAIObject.h"
#include "OAIRule.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIChannelsApi : public QObject {
    Q_OBJECT

public:
    OAIChannelsApi(const int timeOut = 0);
    ~OAIChannelsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  channel_object OAIChannel [required]
    */
    virtual void addChannel(const OAIChannel &channel_object);

    /**
    * @param[in]  channel_id QString [required]
    * @param[in]  channel_function_object OAIFunction7 [required]
    */
    virtual void addChannelFunction(const QString &channel_id, const OAIFunction7 &channel_function_object);

    /**
    * @param[in]  channel_id QString [required]
    */
    virtual void getChannel(const QString &channel_id);

    /**
    * @param[in]  channel_id QString [required]
    * @param[in]  function_id QString [required]
    */
    virtual void getChannelFunction(const QString &channel_id, const QString &function_id);


    virtual void listAnonymousChannels();

    /**
    * @param[in]  channel_id QString [required]
    */
    virtual void listChannelFunctions(const QString &channel_id);


    virtual void listChannels();

    /**
    * @param[in]  channel_id QString [required]
    */
    virtual void removeChannel(const QString &channel_id);

    /**
    * @param[in]  channel_id QString [required]
    * @param[in]  channel_object OAIRule [required]
    */
    virtual void updateChannel(const QString &channel_id, const OAIRule &channel_object);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void addChannelCallback(OAIHttpRequestWorker *worker);
    void addChannelFunctionCallback(OAIHttpRequestWorker *worker);
    void getChannelCallback(OAIHttpRequestWorker *worker);
    void getChannelFunctionCallback(OAIHttpRequestWorker *worker);
    void listAnonymousChannelsCallback(OAIHttpRequestWorker *worker);
    void listChannelFunctionsCallback(OAIHttpRequestWorker *worker);
    void listChannelsCallback(OAIHttpRequestWorker *worker);
    void removeChannelCallback(OAIHttpRequestWorker *worker);
    void updateChannelCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void addChannelSignal(OAIChannelResponse summary);
    void addChannelFunctionSignal(OAIFunctionResponse summary);
    void getChannelSignal(QList<OAIChannelResponse> summary);
    void getChannelFunctionSignal(QList<OAIFunctionResponse> summary);
    void listAnonymousChannelsSignal(QList<OAIChannelResponse> summary);
    void listChannelFunctionsSignal(QList<OAIFunctionResponse> summary);
    void listChannelsSignal(QList<OAIChannelResponse> summary);
    void removeChannelSignal();
    void updateChannelSignal(OAIChannelResponse summary);


    void addChannelSignalFull(OAIHttpRequestWorker *worker, OAIChannelResponse summary);
    void addChannelFunctionSignalFull(OAIHttpRequestWorker *worker, OAIFunctionResponse summary);
    void getChannelSignalFull(OAIHttpRequestWorker *worker, QList<OAIChannelResponse> summary);
    void getChannelFunctionSignalFull(OAIHttpRequestWorker *worker, QList<OAIFunctionResponse> summary);
    void listAnonymousChannelsSignalFull(OAIHttpRequestWorker *worker, QList<OAIChannelResponse> summary);
    void listChannelFunctionsSignalFull(OAIHttpRequestWorker *worker, QList<OAIFunctionResponse> summary);
    void listChannelsSignalFull(OAIHttpRequestWorker *worker, QList<OAIChannelResponse> summary);
    void removeChannelSignalFull(OAIHttpRequestWorker *worker);
    void updateChannelSignalFull(OAIHttpRequestWorker *worker, OAIChannelResponse summary);

    Q_DECL_DEPRECATED_X("Use addChannelSignalError() instead")
    void addChannelSignalE(OAIChannelResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void addChannelSignalError(OAIChannelResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addChannelFunctionSignalError() instead")
    void addChannelFunctionSignalE(OAIFunctionResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void addChannelFunctionSignalError(OAIFunctionResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getChannelSignalError() instead")
    void getChannelSignalE(QList<OAIChannelResponse> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getChannelSignalError(QList<OAIChannelResponse> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getChannelFunctionSignalError() instead")
    void getChannelFunctionSignalE(QList<OAIFunctionResponse> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getChannelFunctionSignalError(QList<OAIFunctionResponse> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listAnonymousChannelsSignalError() instead")
    void listAnonymousChannelsSignalE(QList<OAIChannelResponse> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listAnonymousChannelsSignalError(QList<OAIChannelResponse> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listChannelFunctionsSignalError() instead")
    void listChannelFunctionsSignalE(QList<OAIFunctionResponse> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listChannelFunctionsSignalError(QList<OAIFunctionResponse> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listChannelsSignalError() instead")
    void listChannelsSignalE(QList<OAIChannelResponse> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listChannelsSignalError(QList<OAIChannelResponse> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeChannelSignalError() instead")
    void removeChannelSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void removeChannelSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateChannelSignalError() instead")
    void updateChannelSignalE(OAIChannelResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateChannelSignalError(OAIChannelResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use addChannelSignalErrorFull() instead")
    void addChannelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addChannelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addChannelFunctionSignalErrorFull() instead")
    void addChannelFunctionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addChannelFunctionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getChannelSignalErrorFull() instead")
    void getChannelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getChannelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getChannelFunctionSignalErrorFull() instead")
    void getChannelFunctionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getChannelFunctionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listAnonymousChannelsSignalErrorFull() instead")
    void listAnonymousChannelsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listAnonymousChannelsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listChannelFunctionsSignalErrorFull() instead")
    void listChannelFunctionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listChannelFunctionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listChannelsSignalErrorFull() instead")
    void listChannelsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listChannelsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeChannelSignalErrorFull() instead")
    void removeChannelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void removeChannelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateChannelSignalErrorFull() instead")
    void updateChannelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateChannelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
