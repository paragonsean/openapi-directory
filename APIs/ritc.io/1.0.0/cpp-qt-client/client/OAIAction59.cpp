/**
 * Ritc
 * Rules in the Cloud
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAction59.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAction59::OAIAction59(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAction59::OAIAction59() {
    this->initializeModel();
}

OAIAction59::~OAIAction59() {}

void OAIAction59::initializeModel() {

    m_channel_id_isSet = false;
    m_channel_id_isValid = false;

    m_codes_isSet = false;
    m_codes_isValid = false;

    m_desc_isSet = false;
    m_desc_isValid = false;

    m_function_id_isSet = false;
    m_function_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_parameters_isSet = false;
    m_parameters_isValid = false;
}

void OAIAction59::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAction59::fromJsonObject(QJsonObject json) {

    m_channel_id_isValid = ::OpenAPI::fromJsonValue(m_channel_id, json[QString("channelId")]);
    m_channel_id_isSet = !json[QString("channelId")].isNull() && m_channel_id_isValid;

    m_codes_isValid = ::OpenAPI::fromJsonValue(m_codes, json[QString("codes")]);
    m_codes_isSet = !json[QString("codes")].isNull() && m_codes_isValid;

    m_desc_isValid = ::OpenAPI::fromJsonValue(m_desc, json[QString("desc")]);
    m_desc_isSet = !json[QString("desc")].isNull() && m_desc_isValid;

    m_function_id_isValid = ::OpenAPI::fromJsonValue(m_function_id, json[QString("functionId")]);
    m_function_id_isSet = !json[QString("functionId")].isNull() && m_function_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_parameters_isValid = ::OpenAPI::fromJsonValue(m_parameters, json[QString("parameters")]);
    m_parameters_isSet = !json[QString("parameters")].isNull() && m_parameters_isValid;
}

QString OAIAction59::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAction59::asJsonObject() const {
    QJsonObject obj;
    if (m_channel_id_isSet) {
        obj.insert(QString("channelId"), ::OpenAPI::toJsonValue(m_channel_id));
    }
    if (m_codes_isSet) {
        obj.insert(QString("codes"), ::OpenAPI::toJsonValue(m_codes));
    }
    if (m_desc_isSet) {
        obj.insert(QString("desc"), ::OpenAPI::toJsonValue(m_desc));
    }
    if (m_function_id_isSet) {
        obj.insert(QString("functionId"), ::OpenAPI::toJsonValue(m_function_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_parameters_isSet) {
        obj.insert(QString("parameters"), ::OpenAPI::toJsonValue(m_parameters));
    }
    return obj;
}

qint32 OAIAction59::getChannelId() const {
    return m_channel_id;
}
void OAIAction59::setChannelId(const qint32 &channel_id) {
    m_channel_id = channel_id;
    m_channel_id_isSet = true;
}

bool OAIAction59::is_channel_id_Set() const{
    return m_channel_id_isSet;
}

bool OAIAction59::is_channel_id_Valid() const{
    return m_channel_id_isValid;
}

OAIObject OAIAction59::getCodes() const {
    return m_codes;
}
void OAIAction59::setCodes(const OAIObject &codes) {
    m_codes = codes;
    m_codes_isSet = true;
}

bool OAIAction59::is_codes_Set() const{
    return m_codes_isSet;
}

bool OAIAction59::is_codes_Valid() const{
    return m_codes_isValid;
}

QString OAIAction59::getDesc() const {
    return m_desc;
}
void OAIAction59::setDesc(const QString &desc) {
    m_desc = desc;
    m_desc_isSet = true;
}

bool OAIAction59::is_desc_Set() const{
    return m_desc_isSet;
}

bool OAIAction59::is_desc_Valid() const{
    return m_desc_isValid;
}

QString OAIAction59::getFunctionId() const {
    return m_function_id;
}
void OAIAction59::setFunctionId(const QString &function_id) {
    m_function_id = function_id;
    m_function_id_isSet = true;
}

bool OAIAction59::is_function_id_Set() const{
    return m_function_id_isSet;
}

bool OAIAction59::is_function_id_Valid() const{
    return m_function_id_isValid;
}

QString OAIAction59::getName() const {
    return m_name;
}
void OAIAction59::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIAction59::is_name_Set() const{
    return m_name_isSet;
}

bool OAIAction59::is_name_Valid() const{
    return m_name_isValid;
}

OAIObject OAIAction59::getParameters() const {
    return m_parameters;
}
void OAIAction59::setParameters(const OAIObject &parameters) {
    m_parameters = parameters;
    m_parameters_isSet = true;
}

bool OAIAction59::is_parameters_Set() const{
    return m_parameters_isSet;
}

bool OAIAction59::is_parameters_Valid() const{
    return m_parameters_isValid;
}

bool OAIAction59::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_channel_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_codes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_desc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_function_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parameters_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAction59::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_channel_id_isValid && m_function_id_isValid && m_name_isValid && true;
}

} // namespace OpenAPI
