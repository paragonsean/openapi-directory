/**
 * Ritc
 * Rules in the Cloud
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Ritc);
  }
}(this, function(expect, Ritc) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Ritc.UsersApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('UsersApi', function() {
    describe('addAdminUser', function() {
      it('should call addAdminUser successfully', function(done) {
        //uncomment below and update the code to test addAdminUser
        //instance.addAdminUser(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('addAppUser', function() {
      it('should call addAppUser successfully', function(done) {
        //uncomment below and update the code to test addAppUser
        //instance.addAppUser(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('addAppUserToChannel', function() {
      it('should call addAppUserToChannel successfully', function(done) {
        //uncomment below and update the code to test addAppUserToChannel
        //instance.addAppUserToChannel(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('addAppUserToRule', function() {
      it('should call addAppUserToRule successfully', function(done) {
        //uncomment below and update the code to test addAppUserToRule
        //instance.addAppUserToRule(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('authenticateAppUserForChannel', function() {
      it('should call authenticateAppUserForChannel successfully', function(done) {
        //uncomment below and update the code to test authenticateAppUserForChannel
        //instance.authenticateAppUserForChannel(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getAdminUser', function() {
      it('should call getAdminUser successfully', function(done) {
        //uncomment below and update the code to test getAdminUser
        //instance.getAdminUser(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getAppUser', function() {
      it('should call getAppUser successfully', function(done) {
        //uncomment below and update the code to test getAppUser
        //instance.getAppUser(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getAppUserChannel', function() {
      it('should call getAppUserChannel successfully', function(done) {
        //uncomment below and update the code to test getAppUserChannel
        //instance.getAppUserChannel(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getAppUserRule', function() {
      it('should call getAppUserRule successfully', function(done) {
        //uncomment below and update the code to test getAppUserRule
        //instance.getAppUserRule(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listAdminUsers', function() {
      it('should call listAdminUsers successfully', function(done) {
        //uncomment below and update the code to test listAdminUsers
        //instance.listAdminUsers(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listAppUserChannels', function() {
      it('should call listAppUserChannels successfully', function(done) {
        //uncomment below and update the code to test listAppUserChannels
        //instance.listAppUserChannels(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listAppUserRules', function() {
      it('should call listAppUserRules successfully', function(done) {
        //uncomment below and update the code to test listAppUserRules
        //instance.listAppUserRules(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listAppUsers', function() {
      it('should call listAppUsers successfully', function(done) {
        //uncomment below and update the code to test listAppUsers
        //instance.listAppUsers(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('removeAdminUser', function() {
      it('should call removeAdminUser successfully', function(done) {
        //uncomment below and update the code to test removeAdminUser
        //instance.removeAdminUser(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('removeAppUser', function() {
      it('should call removeAppUser successfully', function(done) {
        //uncomment below and update the code to test removeAppUser
        //instance.removeAppUser(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('removeAppUserFromChannel', function() {
      it('should call removeAppUserFromChannel successfully', function(done) {
        //uncomment below and update the code to test removeAppUserFromChannel
        //instance.removeAppUserFromChannel(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('removeAppUserFromRule', function() {
      it('should call removeAppUserFromRule successfully', function(done) {
        //uncomment below and update the code to test removeAppUserFromRule
        //instance.removeAppUserFromRule(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('runRuleForAppUser', function() {
      it('should call runRuleForAppUser successfully', function(done) {
        //uncomment below and update the code to test runRuleForAppUser
        //instance.runRuleForAppUser(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateAdminUser', function() {
      it('should call updateAdminUser successfully', function(done) {
        //uncomment below and update the code to test updateAdminUser
        //instance.updateAdminUser(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateAppUser', function() {
      it('should call updateAppUser successfully', function(done) {
        //uncomment below and update the code to test updateAppUser
        //instance.updateAppUser(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
