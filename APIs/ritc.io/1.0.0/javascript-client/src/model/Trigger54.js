/**
 * Ritc
 * Rules in the Cloud
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Trigger54 model module.
 * @module model/Trigger54
 * @version 1.0.0
 */
class Trigger54 {
    /**
     * Constructs a new <code>Trigger54</code>.
     * @alias module:model/Trigger54
     * @param channelId {Number} Id of channel used by trigger
     * @param functionId {String} Hash id of channel function used by trigger
     * @param name {String} Trigger name
     */
    constructor(channelId, functionId, name) { 
        
        Trigger54.initialize(this, channelId, functionId, name);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, channelId, functionId, name) { 
        obj['channelId'] = channelId;
        obj['functionId'] = functionId;
        obj['name'] = name;
    }

    /**
     * Constructs a <code>Trigger54</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Trigger54} obj Optional instance to populate.
     * @return {module:model/Trigger54} The populated <code>Trigger54</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Trigger54();

            if (data.hasOwnProperty('channelId')) {
                obj['channelId'] = ApiClient.convertToType(data['channelId'], 'Number');
            }
            if (data.hasOwnProperty('codes')) {
                obj['codes'] = ApiClient.convertToType(data['codes'], Object);
            }
            if (data.hasOwnProperty('desc')) {
                obj['desc'] = ApiClient.convertToType(data['desc'], 'String');
            }
            if (data.hasOwnProperty('functionId')) {
                obj['functionId'] = ApiClient.convertToType(data['functionId'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('parameters')) {
                obj['parameters'] = ApiClient.convertToType(data['parameters'], Object);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Trigger54</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Trigger54</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Trigger54.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['desc'] && !(typeof data['desc'] === 'string' || data['desc'] instanceof String)) {
            throw new Error("Expected the field `desc` to be a primitive type in the JSON string but got " + data['desc']);
        }
        // ensure the json data is a string
        if (data['functionId'] && !(typeof data['functionId'] === 'string' || data['functionId'] instanceof String)) {
            throw new Error("Expected the field `functionId` to be a primitive type in the JSON string but got " + data['functionId']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }

        return true;
    }


}

Trigger54.RequiredProperties = ["channelId", "functionId", "name"];

/**
 * Id of channel used by trigger
 * @member {Number} channelId
 */
Trigger54.prototype['channelId'] = undefined;

/**
 * Object containing named Javascript code sets
 * @member {Object} codes
 */
Trigger54.prototype['codes'] = undefined;

/**
 * Trigger description
 * @member {String} desc
 */
Trigger54.prototype['desc'] = undefined;

/**
 * Hash id of channel function used by trigger
 * @member {String} functionId
 */
Trigger54.prototype['functionId'] = undefined;

/**
 * Trigger name
 * @member {String} name
 */
Trigger54.prototype['name'] = undefined;

/**
 * Object containing channel-defined trigger parameters
 * @member {Object} parameters
 */
Trigger54.prototype['parameters'] = undefined;






export default Trigger54;

