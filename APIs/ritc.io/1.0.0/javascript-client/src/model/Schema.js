/**
 * Ritc
 * Rules in the Cloud
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Style from './Style';

/**
 * The Schema model module.
 * @module model/Schema
 * @version 1.0.0
 */
class Schema {
    /**
     * Constructs a new <code>Schema</code>.
     * @alias module:model/Schema
     */
    constructor() { 
        
        Schema.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Schema</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Schema} obj Optional instance to populate.
     * @return {module:model/Schema} The populated <code>Schema</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Schema();

            if (data.hasOwnProperty('datatype')) {
                obj['datatype'] = ApiClient.convertToType(data['datatype'], Object);
            }
            if (data.hasOwnProperty('default')) {
                obj['default'] = ApiClient.convertToType(data['default'], 'String');
            }
            if (data.hasOwnProperty('expose')) {
                obj['expose'] = ApiClient.convertToType(data['expose'], Object);
            }
            if (data.hasOwnProperty('required')) {
                obj['required'] = ApiClient.convertToType(data['required'], Object);
            }
            if (data.hasOwnProperty('style')) {
                obj['style'] = Style.constructFromObject(data['style']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Schema</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Schema</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['default'] && !(typeof data['default'] === 'string' || data['default'] instanceof String)) {
            throw new Error("Expected the field `default` to be a primitive type in the JSON string but got " + data['default']);
        }

        return true;
    }


}



/**
 * @member {Object} datatype
 */
Schema.prototype['datatype'] = undefined;

/**
 * @member {String} default
 */
Schema.prototype['default'] = undefined;

/**
 * @member {Object} expose
 */
Schema.prototype['expose'] = undefined;

/**
 * @member {Object} required
 */
Schema.prototype['required'] = undefined;

/**
 * @member {module:model/Style} style
 */
Schema.prototype['style'] = undefined;






export default Schema;

