/**
 * Ritc
 * Rules in the Cloud
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Trigger54 from '../model/Trigger54';
import TriggerFullResponse from '../model/TriggerFullResponse';
import TriggerShortResponse from '../model/TriggerShortResponse';

/**
* Triggers service.
* @module api/TriggersApi
* @version 1.0.0
*/
export default class TriggersApi {

    /**
    * Constructs a new TriggersApi. 
    * @alias module:api/TriggersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addTrigger operation.
     * @callback module:api/TriggersApi~addTriggerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TriggerShortResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new trigger in an app
     * @param {module:model/Trigger54} triggerObject Trigger parameters and configuration
     * @param {module:api/TriggersApi~addTriggerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TriggerShortResponse}
     */
    addTrigger(triggerObject, callback) {
      let postBody = triggerObject;
      // verify the required parameter 'triggerObject' is set
      if (triggerObject === undefined || triggerObject === null) {
        throw new Error("Missing the required parameter 'triggerObject' when calling addTrigger");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TriggerShortResponse;
      return this.apiClient.callApi(
        '/triggers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTrigger operation.
     * @callback module:api/TriggersApi~getTriggerCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TriggerFullResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a trigger
     * @param {String} triggerId Id of Trigger
     * @param {module:api/TriggersApi~getTriggerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TriggerFullResponse>}
     */
    getTrigger(triggerId, callback) {
      let postBody = null;
      // verify the required parameter 'triggerId' is set
      if (triggerId === undefined || triggerId === null) {
        throw new Error("Missing the required parameter 'triggerId' when calling getTrigger");
      }

      let pathParams = {
        'trigger_id': triggerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [TriggerFullResponse];
      return this.apiClient.callApi(
        '/triggers/{trigger_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listTriggers operation.
     * @callback module:api/TriggersApi~listTriggersCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TriggerShortResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Triggers in an app
     * @param {module:api/TriggersApi~listTriggersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TriggerShortResponse>}
     */
    listTriggers(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [TriggerShortResponse];
      return this.apiClient.callApi(
        '/triggers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeTrigger operation.
     * @callback module:api/TriggersApi~removeTriggerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a trigger
     * @param {String} triggerId Id of Trigger
     * @param {module:api/TriggersApi~removeTriggerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    removeTrigger(triggerId, callback) {
      let postBody = null;
      // verify the required parameter 'triggerId' is set
      if (triggerId === undefined || triggerId === null) {
        throw new Error("Missing the required parameter 'triggerId' when calling removeTrigger");
      }

      let pathParams = {
        'trigger_id': triggerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/triggers/{trigger_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateTrigger operation.
     * @callback module:api/TriggersApi~updateTriggerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TriggerShortResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a trigger
     * @param {String} triggerId Id of user
     * @param {module:model/Trigger54} triggerObject Trigger information
     * @param {module:api/TriggersApi~updateTriggerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TriggerShortResponse}
     */
    updateTrigger(triggerId, triggerObject, callback) {
      let postBody = triggerObject;
      // verify the required parameter 'triggerId' is set
      if (triggerId === undefined || triggerId === null) {
        throw new Error("Missing the required parameter 'triggerId' when calling updateTrigger");
      }
      // verify the required parameter 'triggerObject' is set
      if (triggerObject === undefined || triggerObject === null) {
        throw new Error("Missing the required parameter 'triggerObject' when calling updateTrigger");
      }

      let pathParams = {
        'trigger_id': triggerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TriggerShortResponse;
      return this.apiClient.callApi(
        '/triggers/{trigger_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
