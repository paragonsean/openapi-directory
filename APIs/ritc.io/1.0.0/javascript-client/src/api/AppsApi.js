/**
 * Ritc
 * Rules in the Cloud
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import App from '../model/App';
import AppChannelResponse from '../model/AppChannelResponse';
import AppExternalCredentials from '../model/AppExternalCredentials';
import AppExternalCredentialsResponse from '../model/AppExternalCredentialsResponse';
import AppResponse from '../model/AppResponse';
import RuleResults from '../model/RuleResults';

/**
* Apps service.
* @module api/AppsApi
* @version 1.0.0
*/
export default class AppsApi {

    /**
    * Constructs a new AppsApi. 
    * @alias module:api/AppsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addApp operation.
     * @callback module:api/AppsApi~addAppCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new app
     * @param {module:model/App} appObject App information
     * @param {module:api/AppsApi~addAppCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppResponse}
     */
    addApp(appObject, callback) {
      let postBody = appObject;
      // verify the required parameter 'appObject' is set
      if (appObject === undefined || appObject === null) {
        throw new Error("Missing the required parameter 'appObject' when calling addApp");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AppResponse;
      return this.apiClient.callApi(
        '/apps', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addAppChannelUser operation.
     * @callback module:api/AppsApi~addAppChannelUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppChannelResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create user channel
     * @param {String} channelId Id of Channel
     * @param {String} userId Id of User
     * @param {module:api/AppsApi~addAppChannelUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppChannelResponse}
     */
    addAppChannelUser(channelId, userId, callback) {
      let postBody = null;
      // verify the required parameter 'channelId' is set
      if (channelId === undefined || channelId === null) {
        throw new Error("Missing the required parameter 'channelId' when calling addAppChannelUser");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling addAppChannelUser");
      }

      let pathParams = {
        'channel_id': channelId,
        'user_id': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppChannelResponse;
      return this.apiClient.callApi(
        '/apps/channels/{channel_id}/users/{user_id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addChannelExternalCredentials operation.
     * @callback module:api/AppsApi~addChannelExternalCredentialsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppExternalCredentialsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create new external credentials
     * @param {module:model/AppExternalCredentials} appExternalCredentialsObject App_External_Credentials information
     * @param {module:api/AppsApi~addChannelExternalCredentialsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppExternalCredentialsResponse}
     */
    addChannelExternalCredentials(appExternalCredentialsObject, callback) {
      let postBody = appExternalCredentialsObject;
      // verify the required parameter 'appExternalCredentialsObject' is set
      if (appExternalCredentialsObject === undefined || appExternalCredentialsObject === null) {
        throw new Error("Missing the required parameter 'appExternalCredentialsObject' when calling addChannelExternalCredentials");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AppExternalCredentialsResponse;
      return this.apiClient.callApi(
        '/apps/ext/api/credentials', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getApp operation.
     * @callback module:api/AppsApi~getAppCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AppResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get app information
     * @param {String} appId Id of App
     * @param {module:api/AppsApi~getAppCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AppResponse>}
     */
    getApp(appId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getApp");
      }

      let pathParams = {
        'app_id': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [AppResponse];
      return this.apiClient.callApi(
        '/apps/{app_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAppChannelUser operation.
     * @callback module:api/AppsApi~getAppChannelUserCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AppChannelResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get user of a specified channel
     * @param {String} channelId Id of Channel
     * @param {String} userId Id of User
     * @param {module:api/AppsApi~getAppChannelUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AppChannelResponse>}
     */
    getAppChannelUser(channelId, userId, callback) {
      let postBody = null;
      // verify the required parameter 'channelId' is set
      if (channelId === undefined || channelId === null) {
        throw new Error("Missing the required parameter 'channelId' when calling getAppChannelUser");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getAppChannelUser");
      }

      let pathParams = {
        'channel_id': channelId,
        'user_id': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [AppChannelResponse];
      return this.apiClient.callApi(
        '/apps/channels/{channel_id}/users/{user_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getChannelExternalCredentials operation.
     * @callback module:api/AppsApi~getChannelExternalCredentialsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AppExternalCredentialsResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get credentials for a channel in an app
     * @param {String} channelId Id of Channel
     * @param {module:api/AppsApi~getChannelExternalCredentialsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AppExternalCredentialsResponse>}
     */
    getChannelExternalCredentials(channelId, callback) {
      let postBody = null;
      // verify the required parameter 'channelId' is set
      if (channelId === undefined || channelId === null) {
        throw new Error("Missing the required parameter 'channelId' when calling getChannelExternalCredentials");
      }

      let pathParams = {
        'channel_id': channelId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [AppExternalCredentialsResponse];
      return this.apiClient.callApi(
        '/apps/ext/api/credentials/{channel_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listAppChannelUsers operation.
     * @callback module:api/AppsApi~listAppChannelUsersCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AppChannelResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get users of a specified channel
     * @param {String} channelId Id of Channel
     * @param {module:api/AppsApi~listAppChannelUsersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AppChannelResponse>}
     */
    listAppChannelUsers(channelId, callback) {
      let postBody = null;
      // verify the required parameter 'channelId' is set
      if (channelId === undefined || channelId === null) {
        throw new Error("Missing the required parameter 'channelId' when calling listAppChannelUsers");
      }

      let pathParams = {
        'channel_id': channelId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [AppChannelResponse];
      return this.apiClient.callApi(
        '/apps/channels/{channel_id}/users', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listAppChannels operation.
     * @callback module:api/AppsApi~listAppChannelsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AppChannelResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get app channels
     * @param {module:api/AppsApi~listAppChannelsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AppChannelResponse>}
     */
    listAppChannels(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [AppChannelResponse];
      return this.apiClient.callApi(
        '/apps/channels/users', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listApps operation.
     * @callback module:api/AppsApi~listAppsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AppResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get apps information
     * @param {module:api/AppsApi~listAppsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AppResponse>}
     */
    listApps(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [AppResponse];
      return this.apiClient.callApi(
        '/apps', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listChannelExternalCredentials operation.
     * @callback module:api/AppsApi~listChannelExternalCredentialsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AppExternalCredentialsResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get external credentials
     * @param {module:api/AppsApi~listChannelExternalCredentialsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AppExternalCredentialsResponse>}
     */
    listChannelExternalCredentials(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [AppExternalCredentialsResponse];
      return this.apiClient.callApi(
        '/apps/ext/api/credentials', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeApp operation.
     * @callback module:api/AppsApi~removeAppCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an app
     * @param {String} appId Id of App
     * @param {module:api/AppsApi~removeAppCallback} callback The callback function, accepting three arguments: error, data, response
     */
    removeApp(appId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling removeApp");
      }

      let pathParams = {
        'app_id': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/apps/{app_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeChannelExternalCredentials operation.
     * @callback module:api/AppsApi~removeChannelExternalCredentialsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete credentials for a channel
     * @param {String} channelId Id of Channel
     * @param {module:api/AppsApi~removeChannelExternalCredentialsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    removeChannelExternalCredentials(channelId, callback) {
      let postBody = null;
      // verify the required parameter 'channelId' is set
      if (channelId === undefined || channelId === null) {
        throw new Error("Missing the required parameter 'channelId' when calling removeChannelExternalCredentials");
      }

      let pathParams = {
        'channel_id': channelId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/apps/ext/api/credentials/{channel_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the runApp operation.
     * @callback module:api/AppsApi~runAppCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/RuleResults>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Run active app rules
     * @param {Object} opts Optional parameters
     * @param {Boolean} [breakWhenRuleFires] Do not continue with remaining rules after a rule fires
     * @param {Object.<String, Object>} [initialData] Initial data
     * @param {module:api/AppsApi~runAppCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/RuleResults>}
     */
    runApp(opts, callback) {
      opts = opts || {};
      let postBody = opts['initialData'];

      let pathParams = {
      };
      let queryParams = {
        'break_when_rule_fires': opts['breakWhenRuleFires']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [RuleResults];
      return this.apiClient.callApi(
        '/apps/rules/run', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the runRuleGroup operation.
     * @callback module:api/AppsApi~runRuleGroupCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/RuleResults>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Run specified rule group in the app
     * @param {String} ruleIdList Ids of rules in the group, separated by commas, no spaces
     * @param {Object} opts Optional parameters
     * @param {Boolean} [breakWhenRuleFires] Do not continue with remaining rules after a rule fires
     * @param {Object.<String, Object>} [initialData] Initial data
     * @param {module:api/AppsApi~runRuleGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/RuleResults>}
     */
    runRuleGroup(ruleIdList, opts, callback) {
      opts = opts || {};
      let postBody = opts['initialData'];
      // verify the required parameter 'ruleIdList' is set
      if (ruleIdList === undefined || ruleIdList === null) {
        throw new Error("Missing the required parameter 'ruleIdList' when calling runRuleGroup");
      }

      let pathParams = {
        'rule_id_list': ruleIdList
      };
      let queryParams = {
        'break_when_rule_fires': opts['breakWhenRuleFires']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [RuleResults];
      return this.apiClient.callApi(
        '/apps/rulegroup/run/{rule_id_list}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateApp operation.
     * @callback module:api/AppsApi~updateAppCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an app
     * @param {String} appId Id of app
     * @param {module:model/App} appObject App information
     * @param {module:api/AppsApi~updateAppCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppResponse}
     */
    updateApp(appId, appObject, callback) {
      let postBody = appObject;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling updateApp");
      }
      // verify the required parameter 'appObject' is set
      if (appObject === undefined || appObject === null) {
        throw new Error("Missing the required parameter 'appObject' when calling updateApp");
      }

      let pathParams = {
        'app_id': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AppResponse;
      return this.apiClient.callApi(
        '/apps/{app_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateChannelExternalCredentials operation.
     * @callback module:api/AppsApi~updateChannelExternalCredentialsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppExternalCredentialsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update credentials for a channel
     * @param {String} channelId Id of Channel
     * @param {module:model/AppExternalCredentials} appExternalCredentialsObject App_External_Credentials information
     * @param {module:api/AppsApi~updateChannelExternalCredentialsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppExternalCredentialsResponse}
     */
    updateChannelExternalCredentials(channelId, appExternalCredentialsObject, callback) {
      let postBody = appExternalCredentialsObject;
      // verify the required parameter 'channelId' is set
      if (channelId === undefined || channelId === null) {
        throw new Error("Missing the required parameter 'channelId' when calling updateChannelExternalCredentials");
      }
      // verify the required parameter 'appExternalCredentialsObject' is set
      if (appExternalCredentialsObject === undefined || appExternalCredentialsObject === null) {
        throw new Error("Missing the required parameter 'appExternalCredentialsObject' when calling updateChannelExternalCredentials");
      }

      let pathParams = {
        'channel_id': channelId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AppExternalCredentialsResponse;
      return this.apiClient.callApi(
        '/apps/ext/api/credentials/{channel_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
