/**
 * Ritc
 * Rules in the Cloud
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Channel from '../model/Channel';
import ChannelResponse from '../model/ChannelResponse';
import Function7 from '../model/Function7';
import FunctionResponse from '../model/FunctionResponse';
import Rule from '../model/Rule';

/**
* Channels service.
* @module api/ChannelsApi
* @version 1.0.0
*/
export default class ChannelsApi {

    /**
    * Constructs a new ChannelsApi. 
    * @alias module:api/ChannelsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addChannel operation.
     * @callback module:api/ChannelsApi~addChannelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ChannelResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a channel
     * @param {module:model/Channel} channelObject Channel information
     * @param {module:api/ChannelsApi~addChannelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ChannelResponse}
     */
    addChannel(channelObject, callback) {
      let postBody = channelObject;
      // verify the required parameter 'channelObject' is set
      if (channelObject === undefined || channelObject === null) {
        throw new Error("Missing the required parameter 'channelObject' when calling addChannel");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ChannelResponse;
      return this.apiClient.callApi(
        '/channels', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addChannelFunction operation.
     * @callback module:api/ChannelsApi~addChannelFunctionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FunctionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a channel function
     * @param {String} channelId Id of Channel
     * @param {module:model/Function7} channelFunctionObject Channel Function information
     * @param {module:api/ChannelsApi~addChannelFunctionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FunctionResponse}
     */
    addChannelFunction(channelId, channelFunctionObject, callback) {
      let postBody = channelFunctionObject;
      // verify the required parameter 'channelId' is set
      if (channelId === undefined || channelId === null) {
        throw new Error("Missing the required parameter 'channelId' when calling addChannelFunction");
      }
      // verify the required parameter 'channelFunctionObject' is set
      if (channelFunctionObject === undefined || channelFunctionObject === null) {
        throw new Error("Missing the required parameter 'channelFunctionObject' when calling addChannelFunction");
      }

      let pathParams = {
        'channel_id': channelId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = FunctionResponse;
      return this.apiClient.callApi(
        '/channels/{channel_id}/functions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getChannel operation.
     * @callback module:api/ChannelsApi~getChannelCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ChannelResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get channel information
     * @param {String} channelId Id of Channel
     * @param {module:api/ChannelsApi~getChannelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ChannelResponse>}
     */
    getChannel(channelId, callback) {
      let postBody = null;
      // verify the required parameter 'channelId' is set
      if (channelId === undefined || channelId === null) {
        throw new Error("Missing the required parameter 'channelId' when calling getChannel");
      }

      let pathParams = {
        'channel_id': channelId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ChannelResponse];
      return this.apiClient.callApi(
        '/channels/{channel_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getChannelFunction operation.
     * @callback module:api/ChannelsApi~getChannelFunctionCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/FunctionResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get channel function information
     * @param {String} channelId Id of Channel
     * @param {String} functionId Id of Channel Function
     * @param {module:api/ChannelsApi~getChannelFunctionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/FunctionResponse>}
     */
    getChannelFunction(channelId, functionId, callback) {
      let postBody = null;
      // verify the required parameter 'channelId' is set
      if (channelId === undefined || channelId === null) {
        throw new Error("Missing the required parameter 'channelId' when calling getChannelFunction");
      }
      // verify the required parameter 'functionId' is set
      if (functionId === undefined || functionId === null) {
        throw new Error("Missing the required parameter 'functionId' when calling getChannelFunction");
      }

      let pathParams = {
        'channel_id': channelId,
        'function_id': functionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [FunctionResponse];
      return this.apiClient.callApi(
        '/channels/{channel_id}/functions/{function_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listAnonymousChannels operation.
     * @callback module:api/ChannelsApi~listAnonymousChannelsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ChannelResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve Channels anonymously
     * @param {module:api/ChannelsApi~listAnonymousChannelsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ChannelResponse>}
     */
    listAnonymousChannels(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ChannelResponse];
      return this.apiClient.callApi(
        '/channels/anonymous', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listChannelFunctions operation.
     * @callback module:api/ChannelsApi~listChannelFunctionsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/FunctionResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve Channel Functions
     * @param {String} channelId Id of Channel
     * @param {module:api/ChannelsApi~listChannelFunctionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/FunctionResponse>}
     */
    listChannelFunctions(channelId, callback) {
      let postBody = null;
      // verify the required parameter 'channelId' is set
      if (channelId === undefined || channelId === null) {
        throw new Error("Missing the required parameter 'channelId' when calling listChannelFunctions");
      }

      let pathParams = {
        'channel_id': channelId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [FunctionResponse];
      return this.apiClient.callApi(
        '/channels/{channel_id}/functions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listChannels operation.
     * @callback module:api/ChannelsApi~listChannelsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ChannelResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve Channels
     * @param {module:api/ChannelsApi~listChannelsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ChannelResponse>}
     */
    listChannels(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ChannelResponse];
      return this.apiClient.callApi(
        '/channels', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeChannel operation.
     * @callback module:api/ChannelsApi~removeChannelCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a channel
     * @param {String} channelId Id of Channel
     * @param {module:api/ChannelsApi~removeChannelCallback} callback The callback function, accepting three arguments: error, data, response
     */
    removeChannel(channelId, callback) {
      let postBody = null;
      // verify the required parameter 'channelId' is set
      if (channelId === undefined || channelId === null) {
        throw new Error("Missing the required parameter 'channelId' when calling removeChannel");
      }

      let pathParams = {
        'channel_id': channelId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/channels/{channel_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateChannel operation.
     * @callback module:api/ChannelsApi~updateChannelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ChannelResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a channel
     * @param {String} channelId Id of Channel
     * @param {module:model/Rule} channelObject Channel information
     * @param {module:api/ChannelsApi~updateChannelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ChannelResponse}
     */
    updateChannel(channelId, channelObject, callback) {
      let postBody = channelObject;
      // verify the required parameter 'channelId' is set
      if (channelId === undefined || channelId === null) {
        throw new Error("Missing the required parameter 'channelId' when calling updateChannel");
      }
      // verify the required parameter 'channelObject' is set
      if (channelObject === undefined || channelObject === null) {
        throw new Error("Missing the required parameter 'channelObject' when calling updateChannel");
      }

      let pathParams = {
        'channel_id': channelId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ChannelResponse;
      return this.apiClient.callApi(
        '/channels/{channel_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
