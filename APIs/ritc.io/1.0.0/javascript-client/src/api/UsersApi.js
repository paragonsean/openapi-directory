/**
 * Ritc
 * Rules in the Cloud
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AdminUser from '../model/AdminUser';
import AdminUserResponse from '../model/AdminUserResponse';
import AppUser from '../model/AppUser';
import AppUserResponse from '../model/AppUserResponse';
import AuthorizeUrlResponse from '../model/AuthorizeUrlResponse';
import RuleFullResponse from '../model/RuleFullResponse';
import RuleShortResponse from '../model/RuleShortResponse';
import UserChannel from '../model/UserChannel';

/**
* Users service.
* @module api/UsersApi
* @version 1.0.0
*/
export default class UsersApi {

    /**
    * Constructs a new UsersApi. 
    * @alias module:api/UsersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addAdminUser operation.
     * @callback module:api/UsersApi~addAdminUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AdminUserResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new admin user
     * @param {module:model/AdminUser} adminUserObject Admin User information
     * @param {module:api/UsersApi~addAdminUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AdminUserResponse}
     */
    addAdminUser(adminUserObject, callback) {
      let postBody = adminUserObject;
      // verify the required parameter 'adminUserObject' is set
      if (adminUserObject === undefined || adminUserObject === null) {
        throw new Error("Missing the required parameter 'adminUserObject' when calling addAdminUser");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AdminUserResponse;
      return this.apiClient.callApi(
        '/users/admin', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addAppUser operation.
     * @callback module:api/UsersApi~addAppUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppUserResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new App User
     * @param {module:model/AppUser} appUserObject App User information
     * @param {module:api/UsersApi~addAppUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppUserResponse}
     */
    addAppUser(appUserObject, callback) {
      let postBody = appUserObject;
      // verify the required parameter 'appUserObject' is set
      if (appUserObject === undefined || appUserObject === null) {
        throw new Error("Missing the required parameter 'appUserObject' when calling addAppUser");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AppUserResponse;
      return this.apiClient.callApi(
        '/users', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addAppUserToChannel operation.
     * @callback module:api/UsersApi~addAppUserToChannelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserChannel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Assign a channel to a user
     * @param {String} userId Id of user
     * @param {String} channelId Id of Channel
     * @param {module:api/UsersApi~addAppUserToChannelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserChannel}
     */
    addAppUserToChannel(userId, channelId, callback) {
      let postBody = channelId;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling addAppUserToChannel");
      }
      // verify the required parameter 'channelId' is set
      if (channelId === undefined || channelId === null) {
        throw new Error("Missing the required parameter 'channelId' when calling addAppUserToChannel");
      }

      let pathParams = {
        'user_id': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UserChannel;
      return this.apiClient.callApi(
        '/users/{user_id}/channels', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addAppUserToRule operation.
     * @callback module:api/UsersApi~addAppUserToRuleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RuleShortResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Assign a user to a rule
     * @param {String} userId Id of User
     * @param {String} ruleId Id of Rule
     * @param {module:api/UsersApi~addAppUserToRuleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RuleShortResponse}
     */
    addAppUserToRule(userId, ruleId, callback) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling addAppUserToRule");
      }
      // verify the required parameter 'ruleId' is set
      if (ruleId === undefined || ruleId === null) {
        throw new Error("Missing the required parameter 'ruleId' when calling addAppUserToRule");
      }

      let pathParams = {
        'user_id': userId,
        'rule_id': ruleId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RuleShortResponse;
      return this.apiClient.callApi(
        '/users/{user_id}/rules/{rule_id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the authenticateAppUserForChannel operation.
     * @callback module:api/UsersApi~authenticateAppUserForChannelCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AuthorizeUrlResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Authenticate a user for a channel
     * @param {String} userId Id of User
     * @param {String} channelId Id of Channel
     * @param {module:api/UsersApi~authenticateAppUserForChannelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AuthorizeUrlResponse>}
     */
    authenticateAppUserForChannel(userId, channelId, callback) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling authenticateAppUserForChannel");
      }
      // verify the required parameter 'channelId' is set
      if (channelId === undefined || channelId === null) {
        throw new Error("Missing the required parameter 'channelId' when calling authenticateAppUserForChannel");
      }

      let pathParams = {
        'user_id': userId,
        'channel_id': channelId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [AuthorizeUrlResponse];
      return this.apiClient.callApi(
        '/users/authenticate/{user_id}/channel/{channel_id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAdminUser operation.
     * @callback module:api/UsersApi~getAdminUserCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AdminUserResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get an admin user
     * @param {String} userId Id of Admin_User
     * @param {module:api/UsersApi~getAdminUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AdminUserResponse>}
     */
    getAdminUser(userId, callback) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getAdminUser");
      }

      let pathParams = {
        'user_id': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [AdminUserResponse];
      return this.apiClient.callApi(
        '/users/admin/{user_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAppUser operation.
     * @callback module:api/UsersApi~getAppUserCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AppUserResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get an App User
     * @param {String} userId Id of App User
     * @param {module:api/UsersApi~getAppUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AppUserResponse>}
     */
    getAppUser(userId, callback) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getAppUser");
      }

      let pathParams = {
        'user_id': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [AppUserResponse];
      return this.apiClient.callApi(
        '/users/{user_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAppUserChannel operation.
     * @callback module:api/UsersApi~getAppUserChannelCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UserChannel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a user channel
     * @param {String} userId Id of User
     * @param {String} channelId Id of Channel
     * @param {module:api/UsersApi~getAppUserChannelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UserChannel>}
     */
    getAppUserChannel(userId, channelId, callback) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getAppUserChannel");
      }
      // verify the required parameter 'channelId' is set
      if (channelId === undefined || channelId === null) {
        throw new Error("Missing the required parameter 'channelId' when calling getAppUserChannel");
      }

      let pathParams = {
        'user_id': userId,
        'channel_id': channelId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [UserChannel];
      return this.apiClient.callApi(
        '/users/{user_id}/channels/{channel_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAppUserRule operation.
     * @callback module:api/UsersApi~getAppUserRuleCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/RuleFullResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a user
     * @param {String} userId Id of User
     * @param {String} ruleId Id of Rule
     * @param {module:api/UsersApi~getAppUserRuleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/RuleFullResponse>}
     */
    getAppUserRule(userId, ruleId, callback) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getAppUserRule");
      }
      // verify the required parameter 'ruleId' is set
      if (ruleId === undefined || ruleId === null) {
        throw new Error("Missing the required parameter 'ruleId' when calling getAppUserRule");
      }

      let pathParams = {
        'user_id': userId,
        'rule_id': ruleId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [RuleFullResponse];
      return this.apiClient.callApi(
        '/users/{user_id}/rules/{rule_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listAdminUsers operation.
     * @callback module:api/UsersApi~listAdminUsersCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AdminUserResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Admin users
     * @param {module:api/UsersApi~listAdminUsersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AdminUserResponse>}
     */
    listAdminUsers(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [AdminUserResponse];
      return this.apiClient.callApi(
        '/users/admin', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listAppUserChannels operation.
     * @callback module:api/UsersApi~listAppUserChannelsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UserChannel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Channels available to a User
     * @param {String} userId Id of user
     * @param {module:api/UsersApi~listAppUserChannelsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UserChannel>}
     */
    listAppUserChannels(userId, callback) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling listAppUserChannels");
      }

      let pathParams = {
        'user_id': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [UserChannel];
      return this.apiClient.callApi(
        '/users/{user_id}/channels', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listAppUserRules operation.
     * @callback module:api/UsersApi~listAppUserRulesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/RuleShortResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Rules for a User
     * @param {String} userId Id of user
     * @param {module:api/UsersApi~listAppUserRulesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/RuleShortResponse>}
     */
    listAppUserRules(userId, callback) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling listAppUserRules");
      }

      let pathParams = {
        'user_id': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [RuleShortResponse];
      return this.apiClient.callApi(
        '/users/{user_id}/rules', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listAppUsers operation.
     * @callback module:api/UsersApi~listAppUsersCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AppUserResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Users
     * @param {module:api/UsersApi~listAppUsersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AppUserResponse>}
     */
    listAppUsers(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [AppUserResponse];
      return this.apiClient.callApi(
        '/users', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeAdminUser operation.
     * @callback module:api/UsersApi~removeAdminUserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove an admin user
     * @param {String} userId Id of Admin_User
     * @param {module:api/UsersApi~removeAdminUserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    removeAdminUser(userId, callback) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling removeAdminUser");
      }

      let pathParams = {
        'user_id': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/users/admin/{user_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeAppUser operation.
     * @callback module:api/UsersApi~removeAppUserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a user
     * @param {String} userId Id of user
     * @param {module:api/UsersApi~removeAppUserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    removeAppUser(userId, callback) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling removeAppUser");
      }

      let pathParams = {
        'user_id': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/users/{user_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeAppUserFromChannel operation.
     * @callback module:api/UsersApi~removeAppUserFromChannelCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a user channel assignment
     * @param {String} userId Id of User
     * @param {String} channelId Id of Channel
     * @param {module:api/UsersApi~removeAppUserFromChannelCallback} callback The callback function, accepting three arguments: error, data, response
     */
    removeAppUserFromChannel(userId, channelId, callback) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling removeAppUserFromChannel");
      }
      // verify the required parameter 'channelId' is set
      if (channelId === undefined || channelId === null) {
        throw new Error("Missing the required parameter 'channelId' when calling removeAppUserFromChannel");
      }

      let pathParams = {
        'user_id': userId,
        'channel_id': channelId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/users/{user_id}/channels/{channel_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeAppUserFromRule operation.
     * @callback module:api/UsersApi~removeAppUserFromRuleCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a rule user
     * @param {String} userId Id of User
     * @param {String} ruleId Id of Rule
     * @param {module:api/UsersApi~removeAppUserFromRuleCallback} callback The callback function, accepting three arguments: error, data, response
     */
    removeAppUserFromRule(userId, ruleId, callback) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling removeAppUserFromRule");
      }
      // verify the required parameter 'ruleId' is set
      if (ruleId === undefined || ruleId === null) {
        throw new Error("Missing the required parameter 'ruleId' when calling removeAppUserFromRule");
      }

      let pathParams = {
        'user_id': userId,
        'rule_id': ruleId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/users/{user_id}/rules/{rule_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the runRuleForAppUser operation.
     * @callback module:api/UsersApi~runRuleForAppUserCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Run rule for a user
     * @param {String} userId Id of User
     * @param {String} ruleId Id of Rule
     * @param {module:api/UsersApi~runRuleForAppUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    runRuleForAppUser(userId, ruleId, callback) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling runRuleForAppUser");
      }
      // verify the required parameter 'ruleId' is set
      if (ruleId === undefined || ruleId === null) {
        throw new Error("Missing the required parameter 'ruleId' when calling runRuleForAppUser");
      }

      let pathParams = {
        'user_id': userId,
        'rule_id': ruleId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/users/{user_id}/rules/{rule_id}/run', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateAdminUser operation.
     * @callback module:api/UsersApi~updateAdminUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AdminUserResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update information about an admin user
     * @param {String} userId Id of user
     * @param {module:model/AdminUser} adminUserObject Admin User information
     * @param {module:api/UsersApi~updateAdminUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AdminUserResponse}
     */
    updateAdminUser(userId, adminUserObject, callback) {
      let postBody = adminUserObject;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling updateAdminUser");
      }
      // verify the required parameter 'adminUserObject' is set
      if (adminUserObject === undefined || adminUserObject === null) {
        throw new Error("Missing the required parameter 'adminUserObject' when calling updateAdminUser");
      }

      let pathParams = {
        'user_id': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AdminUserResponse;
      return this.apiClient.callApi(
        '/users/admin/{user_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateAppUser operation.
     * @callback module:api/UsersApi~updateAppUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppUserResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update information about an App User
     * @param {String} userId Id of user
     * @param {module:model/AppUser} appUserObject App User information
     * @param {module:api/UsersApi~updateAppUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppUserResponse}
     */
    updateAppUser(userId, appUserObject, callback) {
      let postBody = appUserObject;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling updateAppUser");
      }
      // verify the required parameter 'appUserObject' is set
      if (appUserObject === undefined || appUserObject === null) {
        throw new Error("Missing the required parameter 'appUserObject' when calling updateAppUser");
      }

      let pathParams = {
        'user_id': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AppUserResponse;
      return this.apiClient.callApi(
        '/users/{user_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
