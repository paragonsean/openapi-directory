/**
 * Ritc
 * Rules in the Cloud
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Action59 from '../model/Action59';
import ActionFullResponse from '../model/ActionFullResponse';
import ActionShortResponse from '../model/ActionShortResponse';

/**
* Actions service.
* @module api/ActionsApi
* @version 1.0.0
*/
export default class ActionsApi {

    /**
    * Constructs a new ActionsApi. 
    * @alias module:api/ActionsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addAction operation.
     * @callback module:api/ActionsApi~addActionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ActionShortResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new action
     * @param {module:model/Action59} actionObject Action information
     * @param {module:api/ActionsApi~addActionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ActionShortResponse}
     */
    addAction(actionObject, callback) {
      let postBody = actionObject;
      // verify the required parameter 'actionObject' is set
      if (actionObject === undefined || actionObject === null) {
        throw new Error("Missing the required parameter 'actionObject' when calling addAction");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ActionShortResponse;
      return this.apiClient.callApi(
        '/actions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAction operation.
     * @callback module:api/ActionsApi~getActionCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ActionFullResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get an action
     * @param {String} actionId Id of action_id
     * @param {module:api/ActionsApi~getActionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ActionFullResponse>}
     */
    getAction(actionId, callback) {
      let postBody = null;
      // verify the required parameter 'actionId' is set
      if (actionId === undefined || actionId === null) {
        throw new Error("Missing the required parameter 'actionId' when calling getAction");
      }

      let pathParams = {
        'action_id': actionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ActionFullResponse];
      return this.apiClient.callApi(
        '/actions/{action_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listActions operation.
     * @callback module:api/ActionsApi~listActionsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ActionShortResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List actions
     * @param {module:api/ActionsApi~listActionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ActionShortResponse>}
     */
    listActions(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ActionShortResponse];
      return this.apiClient.callApi(
        '/actions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeAction operation.
     * @callback module:api/ActionsApi~removeActionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an action
     * @param {String} actionId Id of action
     * @param {module:api/ActionsApi~removeActionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    removeAction(actionId, callback) {
      let postBody = null;
      // verify the required parameter 'actionId' is set
      if (actionId === undefined || actionId === null) {
        throw new Error("Missing the required parameter 'actionId' when calling removeAction");
      }

      let pathParams = {
        'action_id': actionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/actions/{action_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateAction operation.
     * @callback module:api/ActionsApi~updateActionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ActionShortResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update information about a specific action
     * @param {String} actionId Id of user
     * @param {module:model/Action59} actionObject Action information
     * @param {module:api/ActionsApi~updateActionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ActionShortResponse}
     */
    updateAction(actionId, actionObject, callback) {
      let postBody = actionObject;
      // verify the required parameter 'actionId' is set
      if (actionId === undefined || actionId === null) {
        throw new Error("Missing the required parameter 'actionId' when calling updateAction");
      }
      // verify the required parameter 'actionObject' is set
      if (actionObject === undefined || actionObject === null) {
        throw new Error("Missing the required parameter 'actionObject' when calling updateAction");
      }

      let pathParams = {
        'action_id': actionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ActionShortResponse;
      return this.apiClient.callApi(
        '/actions/{action_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
