/**
 * Ritc
 * Rules in the Cloud
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Rule from '../model/Rule';
import RuleFullResponse from '../model/RuleFullResponse';
import RuleShortResponse from '../model/RuleShortResponse';

/**
* Rules service.
* @module api/RulesApi
* @version 1.0.0
*/
export default class RulesApi {

    /**
    * Constructs a new RulesApi. 
    * @alias module:api/RulesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addRule operation.
     * @callback module:api/RulesApi~addRuleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RuleFullResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new rule
     * @param {module:model/Rule} ruleObject Rule information
     * @param {module:api/RulesApi~addRuleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RuleFullResponse}
     */
    addRule(ruleObject, callback) {
      let postBody = ruleObject;
      // verify the required parameter 'ruleObject' is set
      if (ruleObject === undefined || ruleObject === null) {
        throw new Error("Missing the required parameter 'ruleObject' when calling addRule");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RuleFullResponse;
      return this.apiClient.callApi(
        '/rules', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRule operation.
     * @callback module:api/RulesApi~getRuleCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/RuleFullResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a rule
     * @param {String} ruleId Id of rule
     * @param {module:api/RulesApi~getRuleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/RuleFullResponse>}
     */
    getRule(ruleId, callback) {
      let postBody = null;
      // verify the required parameter 'ruleId' is set
      if (ruleId === undefined || ruleId === null) {
        throw new Error("Missing the required parameter 'ruleId' when calling getRule");
      }

      let pathParams = {
        'rule_id': ruleId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [RuleFullResponse];
      return this.apiClient.callApi(
        '/rules/{rule_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listRules operation.
     * @callback module:api/RulesApi~listRulesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/RuleShortResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List rules
     * @param {module:api/RulesApi~listRulesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/RuleShortResponse>}
     */
    listRules(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [RuleShortResponse];
      return this.apiClient.callApi(
        '/rules', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeRule operation.
     * @callback module:api/RulesApi~removeRuleCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a rule
     * @param {String} ruleId Id of rule
     * @param {module:api/RulesApi~removeRuleCallback} callback The callback function, accepting three arguments: error, data, response
     */
    removeRule(ruleId, callback) {
      let postBody = null;
      // verify the required parameter 'ruleId' is set
      if (ruleId === undefined || ruleId === null) {
        throw new Error("Missing the required parameter 'ruleId' when calling removeRule");
      }

      let pathParams = {
        'rule_id': ruleId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/rules/{rule_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the runRule operation.
     * @callback module:api/RulesApi~runRuleCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Run a rule
     * @param {String} ruleId Id of rule
     * @param {Object} opts Optional parameters
     * @param {Object.<String, Object>} [initialData] Initial data
     * @param {module:api/RulesApi~runRuleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    runRule(ruleId, opts, callback) {
      opts = opts || {};
      let postBody = opts['initialData'];
      // verify the required parameter 'ruleId' is set
      if (ruleId === undefined || ruleId === null) {
        throw new Error("Missing the required parameter 'ruleId' when calling runRule");
      }

      let pathParams = {
        'rule_id': ruleId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/rules/{rule_id}/run', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateRule operation.
     * @callback module:api/RulesApi~updateRuleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RuleFullResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update information about a specific rule
     * @param {String} ruleId Id of user
     * @param {module:model/Rule} ruleObject Rule information
     * @param {module:api/RulesApi~updateRuleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RuleFullResponse}
     */
    updateRule(ruleId, ruleObject, callback) {
      let postBody = ruleObject;
      // verify the required parameter 'ruleId' is set
      if (ruleId === undefined || ruleId === null) {
        throw new Error("Missing the required parameter 'ruleId' when calling updateRule");
      }
      // verify the required parameter 'ruleObject' is set
      if (ruleObject === undefined || ruleObject === null) {
        throw new Error("Missing the required parameter 'ruleObject' when calling updateRule");
      }

      let pathParams = {
        'rule_id': ruleId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RuleFullResponse;
      return this.apiClient.callApi(
        '/rules/{rule_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
