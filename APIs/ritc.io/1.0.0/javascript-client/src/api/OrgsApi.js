/**
 * Ritc
 * Rules in the Cloud
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Org from '../model/Org';
import OrgResponse from '../model/OrgResponse';

/**
* Orgs service.
* @module api/OrgsApi
* @version 1.0.0
*/
export default class OrgsApi {

    /**
    * Constructs a new OrgsApi. 
    * @alias module:api/OrgsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addOrganization operation.
     * @callback module:api/OrgsApi~addOrganizationCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/OrgResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an org
     * @param {module:model/Org} orgObject Org information
     * @param {module:api/OrgsApi~addOrganizationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/OrgResponse>}
     */
    addOrganization(orgObject, callback) {
      let postBody = orgObject;
      // verify the required parameter 'orgObject' is set
      if (orgObject === undefined || orgObject === null) {
        throw new Error("Missing the required parameter 'orgObject' when calling addOrganization");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [OrgResponse];
      return this.apiClient.callApi(
        '/orgs', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMyOrganization operation.
     * @callback module:api/OrgsApi~getMyOrganizationCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/OrgResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get org information
     * @param {module:api/OrgsApi~getMyOrganizationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/OrgResponse>}
     */
    getMyOrganization(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Authorization'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [OrgResponse];
      return this.apiClient.callApi(
        '/orgs/me', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
