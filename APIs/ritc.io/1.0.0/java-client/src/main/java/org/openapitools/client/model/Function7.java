/*
 * Ritc
 * Rules in the Cloud
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ApiType;
import org.openapitools.client.model.HttpMethod;
import org.openapitools.client.model.RequestParameter;
import org.openapitools.client.model.ResponseFormat;
import org.openapitools.client.model.Type;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Function7
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:42:50.415169-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Function7 {
  public static final String SERIALIZED_NAME_API_TYPE = "apiType";
  @SerializedName(SERIALIZED_NAME_API_TYPE)
  private ApiType apiType;

  public static final String SERIALIZED_NAME_DESC = "desc";
  @SerializedName(SERIALIZED_NAME_DESC)
  private String desc;

  public static final String SERIALIZED_NAME_ENDPOINT = "endpoint";
  @SerializedName(SERIALIZED_NAME_ENDPOINT)
  private String endpoint;

  public static final String SERIALIZED_NAME_HTTP_METHOD = "httpMethod";
  @SerializedName(SERIALIZED_NAME_HTTP_METHOD)
  private HttpMethod httpMethod;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_REQUEST_PARAMETERS = "requestParameters";
  @SerializedName(SERIALIZED_NAME_REQUEST_PARAMETERS)
  private List<RequestParameter> requestParameters = new ArrayList<>();

  public static final String SERIALIZED_NAME_RESPONSE_FORMAT = "responseFormat";
  @SerializedName(SERIALIZED_NAME_RESPONSE_FORMAT)
  private ResponseFormat responseFormat;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private Type type;

  public Function7() {
  }

  public Function7 apiType(ApiType apiType) {
    this.apiType = apiType;
    return this;
  }

  /**
   * Get apiType
   * @return apiType
   */
  @javax.annotation.Nullable
  public ApiType getApiType() {
    return apiType;
  }

  public void setApiType(ApiType apiType) {
    this.apiType = apiType;
  }


  public Function7 desc(String desc) {
    this.desc = desc;
    return this;
  }

  /**
   * Function description
   * @return desc
   */
  @javax.annotation.Nullable
  public String getDesc() {
    return desc;
  }

  public void setDesc(String desc) {
    this.desc = desc;
  }


  public Function7 endpoint(String endpoint) {
    this.endpoint = endpoint;
    return this;
  }

  /**
   * Function endpoint
   * @return endpoint
   */
  @javax.annotation.Nullable
  public String getEndpoint() {
    return endpoint;
  }

  public void setEndpoint(String endpoint) {
    this.endpoint = endpoint;
  }


  public Function7 httpMethod(HttpMethod httpMethod) {
    this.httpMethod = httpMethod;
    return this;
  }

  /**
   * Get httpMethod
   * @return httpMethod
   */
  @javax.annotation.Nullable
  public HttpMethod getHttpMethod() {
    return httpMethod;
  }

  public void setHttpMethod(HttpMethod httpMethod) {
    this.httpMethod = httpMethod;
  }


  public Function7 name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Function name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Function7 requestParameters(List<RequestParameter> requestParameters) {
    this.requestParameters = requestParameters;
    return this;
  }

  public Function7 addRequestParametersItem(RequestParameter requestParametersItem) {
    if (this.requestParameters == null) {
      this.requestParameters = new ArrayList<>();
    }
    this.requestParameters.add(requestParametersItem);
    return this;
  }

  /**
   * Get requestParameters
   * @return requestParameters
   */
  @javax.annotation.Nullable
  public List<RequestParameter> getRequestParameters() {
    return requestParameters;
  }

  public void setRequestParameters(List<RequestParameter> requestParameters) {
    this.requestParameters = requestParameters;
  }


  public Function7 responseFormat(ResponseFormat responseFormat) {
    this.responseFormat = responseFormat;
    return this;
  }

  /**
   * Get responseFormat
   * @return responseFormat
   */
  @javax.annotation.Nullable
  public ResponseFormat getResponseFormat() {
    return responseFormat;
  }

  public void setResponseFormat(ResponseFormat responseFormat) {
    this.responseFormat = responseFormat;
  }


  public Function7 type(Type type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public Type getType() {
    return type;
  }

  public void setType(Type type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Function7 function7 = (Function7) o;
    return Objects.equals(this.apiType, function7.apiType) &&
        Objects.equals(this.desc, function7.desc) &&
        Objects.equals(this.endpoint, function7.endpoint) &&
        Objects.equals(this.httpMethod, function7.httpMethod) &&
        Objects.equals(this.name, function7.name) &&
        Objects.equals(this.requestParameters, function7.requestParameters) &&
        Objects.equals(this.responseFormat, function7.responseFormat) &&
        Objects.equals(this.type, function7.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(apiType, desc, endpoint, httpMethod, name, requestParameters, responseFormat, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Function7 {\n");
    sb.append("    apiType: ").append(toIndentedString(apiType)).append("\n");
    sb.append("    desc: ").append(toIndentedString(desc)).append("\n");
    sb.append("    endpoint: ").append(toIndentedString(endpoint)).append("\n");
    sb.append("    httpMethod: ").append(toIndentedString(httpMethod)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    requestParameters: ").append(toIndentedString(requestParameters)).append("\n");
    sb.append("    responseFormat: ").append(toIndentedString(responseFormat)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("apiType");
    openapiFields.add("desc");
    openapiFields.add("endpoint");
    openapiFields.add("httpMethod");
    openapiFields.add("name");
    openapiFields.add("requestParameters");
    openapiFields.add("responseFormat");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Function7
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Function7.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Function7 is not found in the empty JSON string", Function7.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Function7.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Function7` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `apiType`
      if (jsonObj.get("apiType") != null && !jsonObj.get("apiType").isJsonNull()) {
        ApiType.validateJsonElement(jsonObj.get("apiType"));
      }
      if ((jsonObj.get("desc") != null && !jsonObj.get("desc").isJsonNull()) && !jsonObj.get("desc").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `desc` to be a primitive type in the JSON string but got `%s`", jsonObj.get("desc").toString()));
      }
      if ((jsonObj.get("endpoint") != null && !jsonObj.get("endpoint").isJsonNull()) && !jsonObj.get("endpoint").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `endpoint` to be a primitive type in the JSON string but got `%s`", jsonObj.get("endpoint").toString()));
      }
      // validate the optional field `httpMethod`
      if (jsonObj.get("httpMethod") != null && !jsonObj.get("httpMethod").isJsonNull()) {
        HttpMethod.validateJsonElement(jsonObj.get("httpMethod"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (jsonObj.get("requestParameters") != null && !jsonObj.get("requestParameters").isJsonNull()) {
        JsonArray jsonArrayrequestParameters = jsonObj.getAsJsonArray("requestParameters");
        if (jsonArrayrequestParameters != null) {
          // ensure the json data is an array
          if (!jsonObj.get("requestParameters").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `requestParameters` to be an array in the JSON string but got `%s`", jsonObj.get("requestParameters").toString()));
          }

          // validate the optional field `requestParameters` (array)
          for (int i = 0; i < jsonArrayrequestParameters.size(); i++) {
            RequestParameter.validateJsonElement(jsonArrayrequestParameters.get(i));
          };
        }
      }
      // validate the optional field `responseFormat`
      if (jsonObj.get("responseFormat") != null && !jsonObj.get("responseFormat").isJsonNull()) {
        ResponseFormat.validateJsonElement(jsonObj.get("responseFormat"));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        Type.validateJsonElement(jsonObj.get("type"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Function7.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Function7' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Function7> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Function7.class));

       return (TypeAdapter<T>) new TypeAdapter<Function7>() {
           @Override
           public void write(JsonWriter out, Function7 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Function7 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Function7 given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Function7
   * @throws IOException if the JSON string is invalid with respect to Function7
   */
  public static Function7 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Function7.class);
  }

  /**
   * Convert an instance of Function7 to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

