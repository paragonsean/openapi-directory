/*
 * Ritc
 * Rules in the Cloud
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AdminUser;
import org.openapitools.client.model.AdminUserResponse;
import org.openapitools.client.model.AppUser;
import org.openapitools.client.model.AppUserResponse;
import org.openapitools.client.model.AuthorizeUrlResponse;
import org.openapitools.client.model.RuleFullResponse;
import org.openapitools.client.model.RuleShortResponse;
import org.openapitools.client.model.UserChannel;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for UsersApi
 */
@Disabled
public class UsersApiTest {

    private final UsersApi api = new UsersApi();

    /**
     * Create a new admin user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addAdminUserTest() throws ApiException {
        AdminUser adminUserObject = null;
        AdminUserResponse response = api.addAdminUser(adminUserObject);
        // TODO: test validations
    }

    /**
     * Create a new App User
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addAppUserTest() throws ApiException {
        AppUser appUserObject = null;
        AppUserResponse response = api.addAppUser(appUserObject);
        // TODO: test validations
    }

    /**
     * Assign a channel to a user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addAppUserToChannelTest() throws ApiException {
        String userId = null;
        String channelId = null;
        UserChannel response = api.addAppUserToChannel(userId, channelId);
        // TODO: test validations
    }

    /**
     * Assign a user to a rule
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addAppUserToRuleTest() throws ApiException {
        String userId = null;
        String ruleId = null;
        RuleShortResponse response = api.addAppUserToRule(userId, ruleId);
        // TODO: test validations
    }

    /**
     * Authenticate a user for a channel
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void authenticateAppUserForChannelTest() throws ApiException {
        String userId = null;
        String channelId = null;
        List<AuthorizeUrlResponse> response = api.authenticateAppUserForChannel(userId, channelId);
        // TODO: test validations
    }

    /**
     * Get an admin user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAdminUserTest() throws ApiException {
        String userId = null;
        List<AdminUserResponse> response = api.getAdminUser(userId);
        // TODO: test validations
    }

    /**
     * Get an App User
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAppUserTest() throws ApiException {
        String userId = null;
        List<AppUserResponse> response = api.getAppUser(userId);
        // TODO: test validations
    }

    /**
     * Get a user channel
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAppUserChannelTest() throws ApiException {
        String userId = null;
        String channelId = null;
        List<UserChannel> response = api.getAppUserChannel(userId, channelId);
        // TODO: test validations
    }

    /**
     * Get a user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAppUserRuleTest() throws ApiException {
        String userId = null;
        String ruleId = null;
        List<RuleFullResponse> response = api.getAppUserRule(userId, ruleId);
        // TODO: test validations
    }

    /**
     * Admin users
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listAdminUsersTest() throws ApiException {
        List<AdminUserResponse> response = api.listAdminUsers();
        // TODO: test validations
    }

    /**
     * Channels available to a User
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listAppUserChannelsTest() throws ApiException {
        String userId = null;
        List<UserChannel> response = api.listAppUserChannels(userId);
        // TODO: test validations
    }

    /**
     * Rules for a User
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listAppUserRulesTest() throws ApiException {
        String userId = null;
        List<RuleShortResponse> response = api.listAppUserRules(userId);
        // TODO: test validations
    }

    /**
     * Users
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listAppUsersTest() throws ApiException {
        List<AppUserResponse> response = api.listAppUsers();
        // TODO: test validations
    }

    /**
     * Remove an admin user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeAdminUserTest() throws ApiException {
        String userId = null;
        api.removeAdminUser(userId);
        // TODO: test validations
    }

    /**
     * Remove a user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeAppUserTest() throws ApiException {
        String userId = null;
        api.removeAppUser(userId);
        // TODO: test validations
    }

    /**
     * Remove a user channel assignment
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeAppUserFromChannelTest() throws ApiException {
        String userId = null;
        String channelId = null;
        api.removeAppUserFromChannel(userId, channelId);
        // TODO: test validations
    }

    /**
     * Remove a rule user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeAppUserFromRuleTest() throws ApiException {
        String userId = null;
        String ruleId = null;
        api.removeAppUserFromRule(userId, ruleId);
        // TODO: test validations
    }

    /**
     * Run rule for a user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void runRuleForAppUserTest() throws ApiException {
        String userId = null;
        String ruleId = null;
        Object response = api.runRuleForAppUser(userId, ruleId);
        // TODO: test validations
    }

    /**
     * Update information about an admin user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateAdminUserTest() throws ApiException {
        String userId = null;
        AdminUser adminUserObject = null;
        AdminUserResponse response = api.updateAdminUser(userId, adminUserObject);
        // TODO: test validations
    }

    /**
     * Update information about an App User
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateAppUserTest() throws ApiException {
        String userId = null;
        AppUser appUserObject = null;
        AppUserResponse response = api.updateAppUser(userId, appUserObject);
        // TODO: test validations
    }

}
