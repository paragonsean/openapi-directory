/*
 * Ritc
 * Rules in the Cloud
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Channel;
import org.openapitools.client.model.ChannelResponse;
import org.openapitools.client.model.Function7;
import org.openapitools.client.model.FunctionResponse;
import org.openapitools.client.model.Rule;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ChannelsApi
 */
@Disabled
public class ChannelsApiTest {

    private final ChannelsApi api = new ChannelsApi();

    /**
     * Create a channel
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addChannelTest() throws ApiException {
        Channel channelObject = null;
        ChannelResponse response = api.addChannel(channelObject);
        // TODO: test validations
    }

    /**
     * Create a channel function
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addChannelFunctionTest() throws ApiException {
        String channelId = null;
        Function7 channelFunctionObject = null;
        FunctionResponse response = api.addChannelFunction(channelId, channelFunctionObject);
        // TODO: test validations
    }

    /**
     * Get channel information
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getChannelTest() throws ApiException {
        String channelId = null;
        List<ChannelResponse> response = api.getChannel(channelId);
        // TODO: test validations
    }

    /**
     * Get channel function information
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getChannelFunctionTest() throws ApiException {
        String channelId = null;
        String functionId = null;
        List<FunctionResponse> response = api.getChannelFunction(channelId, functionId);
        // TODO: test validations
    }

    /**
     * Retrieve Channels anonymously
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listAnonymousChannelsTest() throws ApiException {
        List<ChannelResponse> response = api.listAnonymousChannels();
        // TODO: test validations
    }

    /**
     * Retrieve Channel Functions
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listChannelFunctionsTest() throws ApiException {
        String channelId = null;
        List<FunctionResponse> response = api.listChannelFunctions(channelId);
        // TODO: test validations
    }

    /**
     * Retrieve Channels
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listChannelsTest() throws ApiException {
        List<ChannelResponse> response = api.listChannels();
        // TODO: test validations
    }

    /**
     * Delete a channel
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeChannelTest() throws ApiException {
        String channelId = null;
        api.removeChannel(channelId);
        // TODO: test validations
    }

    /**
     * Update a channel
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateChannelTest() throws ApiException {
        String channelId = null;
        Rule channelObject = null;
        ChannelResponse response = api.updateChannel(channelId, channelObject);
        // TODO: test validations
    }

}
