# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class InlineResponse200Flag(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, emoji: str=None, png: str=None, svg: str=None, unicode: str=None):
        """InlineResponse200Flag - a model defined in OpenAPI

        :param emoji: The emoji of this InlineResponse200Flag.
        :param png: The png of this InlineResponse200Flag.
        :param svg: The svg of this InlineResponse200Flag.
        :param unicode: The unicode of this InlineResponse200Flag.
        """
        self.openapi_types = {
            'emoji': str,
            'png': str,
            'svg': str,
            'unicode': str
        }

        self.attribute_map = {
            'emoji': 'emoji',
            'png': 'png',
            'svg': 'svg',
            'unicode': 'unicode'
        }

        self._emoji = emoji
        self._png = png
        self._svg = svg
        self._unicode = unicode

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InlineResponse200Flag':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The inline_response_200_flag of this InlineResponse200Flag.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def emoji(self):
        """Gets the emoji of this InlineResponse200Flag.


        :return: The emoji of this InlineResponse200Flag.
        :rtype: str
        """
        return self._emoji

    @emoji.setter
    def emoji(self, emoji):
        """Sets the emoji of this InlineResponse200Flag.


        :param emoji: The emoji of this InlineResponse200Flag.
        :type emoji: str
        """

        self._emoji = emoji

    @property
    def png(self):
        """Gets the png of this InlineResponse200Flag.


        :return: The png of this InlineResponse200Flag.
        :rtype: str
        """
        return self._png

    @png.setter
    def png(self, png):
        """Sets the png of this InlineResponse200Flag.


        :param png: The png of this InlineResponse200Flag.
        :type png: str
        """

        self._png = png

    @property
    def svg(self):
        """Gets the svg of this InlineResponse200Flag.


        :return: The svg of this InlineResponse200Flag.
        :rtype: str
        """
        return self._svg

    @svg.setter
    def svg(self, svg):
        """Sets the svg of this InlineResponse200Flag.


        :param svg: The svg of this InlineResponse200Flag.
        :type svg: str
        """

        self._svg = svg

    @property
    def unicode(self):
        """Gets the unicode of this InlineResponse200Flag.


        :return: The unicode of this InlineResponse200Flag.
        :rtype: str
        """
        return self._unicode

    @unicode.setter
    def unicode(self, unicode):
        """Sets the unicode of this InlineResponse200Flag.


        :param unicode: The unicode of this InlineResponse200Flag.
        :type unicode: str
        """

        self._unicode = unicode
