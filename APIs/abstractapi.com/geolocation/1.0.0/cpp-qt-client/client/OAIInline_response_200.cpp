/**
 * IP geolocation API
 * Abstract IP geolocation API allows developers to retrieve the region, country and city behind any IP worldwide. The API covers the geolocation of IPv4 and IPv6 addresses in 180+ countries worldwide. Extra information can be retrieved like the currency, flag or language associated to an IP.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInline_response_200.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInline_response_200::OAIInline_response_200(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInline_response_200::OAIInline_response_200() {
    this->initializeModel();
}

OAIInline_response_200::~OAIInline_response_200() {}

void OAIInline_response_200::initializeModel() {

    m_city_isSet = false;
    m_city_isValid = false;

    m_city_geoname_id_isSet = false;
    m_city_geoname_id_isValid = false;

    m_connection_isSet = false;
    m_connection_isValid = false;

    m_continent_isSet = false;
    m_continent_isValid = false;

    m_continent_code_isSet = false;
    m_continent_code_isValid = false;

    m_continent_geoname_id_isSet = false;
    m_continent_geoname_id_isValid = false;

    m_country_isSet = false;
    m_country_isValid = false;

    m_country_code_isSet = false;
    m_country_code_isValid = false;

    m_country_geoname_id_isSet = false;
    m_country_geoname_id_isValid = false;

    m_country_is_eu_isSet = false;
    m_country_is_eu_isValid = false;

    m_currency_isSet = false;
    m_currency_isValid = false;

    m_flag_isSet = false;
    m_flag_isValid = false;

    m_ip_address_isSet = false;
    m_ip_address_isValid = false;

    m_latitude_isSet = false;
    m_latitude_isValid = false;

    m_longitude_isSet = false;
    m_longitude_isValid = false;

    m_postal_code_isSet = false;
    m_postal_code_isValid = false;

    m_region_isSet = false;
    m_region_isValid = false;

    m_region_geoname_id_isSet = false;
    m_region_geoname_id_isValid = false;

    m_region_iso_code_isSet = false;
    m_region_iso_code_isValid = false;

    m_security_isSet = false;
    m_security_isValid = false;

    m_timezone_isSet = false;
    m_timezone_isValid = false;
}

void OAIInline_response_200::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInline_response_200::fromJsonObject(QJsonObject json) {

    m_city_isValid = ::OpenAPI::fromJsonValue(m_city, json[QString("city")]);
    m_city_isSet = !json[QString("city")].isNull() && m_city_isValid;

    m_city_geoname_id_isValid = ::OpenAPI::fromJsonValue(m_city_geoname_id, json[QString("city_geoname_id")]);
    m_city_geoname_id_isSet = !json[QString("city_geoname_id")].isNull() && m_city_geoname_id_isValid;

    m_connection_isValid = ::OpenAPI::fromJsonValue(m_connection, json[QString("connection")]);
    m_connection_isSet = !json[QString("connection")].isNull() && m_connection_isValid;

    m_continent_isValid = ::OpenAPI::fromJsonValue(m_continent, json[QString("continent")]);
    m_continent_isSet = !json[QString("continent")].isNull() && m_continent_isValid;

    m_continent_code_isValid = ::OpenAPI::fromJsonValue(m_continent_code, json[QString("continent_code")]);
    m_continent_code_isSet = !json[QString("continent_code")].isNull() && m_continent_code_isValid;

    m_continent_geoname_id_isValid = ::OpenAPI::fromJsonValue(m_continent_geoname_id, json[QString("continent_geoname_id")]);
    m_continent_geoname_id_isSet = !json[QString("continent_geoname_id")].isNull() && m_continent_geoname_id_isValid;

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("country")]);
    m_country_isSet = !json[QString("country")].isNull() && m_country_isValid;

    m_country_code_isValid = ::OpenAPI::fromJsonValue(m_country_code, json[QString("country_code")]);
    m_country_code_isSet = !json[QString("country_code")].isNull() && m_country_code_isValid;

    m_country_geoname_id_isValid = ::OpenAPI::fromJsonValue(m_country_geoname_id, json[QString("country_geoname_id")]);
    m_country_geoname_id_isSet = !json[QString("country_geoname_id")].isNull() && m_country_geoname_id_isValid;

    m_country_is_eu_isValid = ::OpenAPI::fromJsonValue(m_country_is_eu, json[QString("country_is_eu")]);
    m_country_is_eu_isSet = !json[QString("country_is_eu")].isNull() && m_country_is_eu_isValid;

    m_currency_isValid = ::OpenAPI::fromJsonValue(m_currency, json[QString("currency")]);
    m_currency_isSet = !json[QString("currency")].isNull() && m_currency_isValid;

    m_flag_isValid = ::OpenAPI::fromJsonValue(m_flag, json[QString("flag")]);
    m_flag_isSet = !json[QString("flag")].isNull() && m_flag_isValid;

    m_ip_address_isValid = ::OpenAPI::fromJsonValue(m_ip_address, json[QString("ip_address")]);
    m_ip_address_isSet = !json[QString("ip_address")].isNull() && m_ip_address_isValid;

    m_latitude_isValid = ::OpenAPI::fromJsonValue(m_latitude, json[QString("latitude")]);
    m_latitude_isSet = !json[QString("latitude")].isNull() && m_latitude_isValid;

    m_longitude_isValid = ::OpenAPI::fromJsonValue(m_longitude, json[QString("longitude")]);
    m_longitude_isSet = !json[QString("longitude")].isNull() && m_longitude_isValid;

    m_postal_code_isValid = ::OpenAPI::fromJsonValue(m_postal_code, json[QString("postal_code")]);
    m_postal_code_isSet = !json[QString("postal_code")].isNull() && m_postal_code_isValid;

    m_region_isValid = ::OpenAPI::fromJsonValue(m_region, json[QString("region")]);
    m_region_isSet = !json[QString("region")].isNull() && m_region_isValid;

    m_region_geoname_id_isValid = ::OpenAPI::fromJsonValue(m_region_geoname_id, json[QString("region_geoname_id")]);
    m_region_geoname_id_isSet = !json[QString("region_geoname_id")].isNull() && m_region_geoname_id_isValid;

    m_region_iso_code_isValid = ::OpenAPI::fromJsonValue(m_region_iso_code, json[QString("region_iso_code")]);
    m_region_iso_code_isSet = !json[QString("region_iso_code")].isNull() && m_region_iso_code_isValid;

    m_security_isValid = ::OpenAPI::fromJsonValue(m_security, json[QString("security")]);
    m_security_isSet = !json[QString("security")].isNull() && m_security_isValid;

    m_timezone_isValid = ::OpenAPI::fromJsonValue(m_timezone, json[QString("timezone")]);
    m_timezone_isSet = !json[QString("timezone")].isNull() && m_timezone_isValid;
}

QString OAIInline_response_200::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInline_response_200::asJsonObject() const {
    QJsonObject obj;
    if (m_city_isSet) {
        obj.insert(QString("city"), ::OpenAPI::toJsonValue(m_city));
    }
    if (m_city_geoname_id_isSet) {
        obj.insert(QString("city_geoname_id"), ::OpenAPI::toJsonValue(m_city_geoname_id));
    }
    if (m_connection.isSet()) {
        obj.insert(QString("connection"), ::OpenAPI::toJsonValue(m_connection));
    }
    if (m_continent_isSet) {
        obj.insert(QString("continent"), ::OpenAPI::toJsonValue(m_continent));
    }
    if (m_continent_code_isSet) {
        obj.insert(QString("continent_code"), ::OpenAPI::toJsonValue(m_continent_code));
    }
    if (m_continent_geoname_id_isSet) {
        obj.insert(QString("continent_geoname_id"), ::OpenAPI::toJsonValue(m_continent_geoname_id));
    }
    if (m_country_isSet) {
        obj.insert(QString("country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_country_code_isSet) {
        obj.insert(QString("country_code"), ::OpenAPI::toJsonValue(m_country_code));
    }
    if (m_country_geoname_id_isSet) {
        obj.insert(QString("country_geoname_id"), ::OpenAPI::toJsonValue(m_country_geoname_id));
    }
    if (m_country_is_eu_isSet) {
        obj.insert(QString("country_is_eu"), ::OpenAPI::toJsonValue(m_country_is_eu));
    }
    if (m_currency.isSet()) {
        obj.insert(QString("currency"), ::OpenAPI::toJsonValue(m_currency));
    }
    if (m_flag.isSet()) {
        obj.insert(QString("flag"), ::OpenAPI::toJsonValue(m_flag));
    }
    if (m_ip_address_isSet) {
        obj.insert(QString("ip_address"), ::OpenAPI::toJsonValue(m_ip_address));
    }
    if (m_latitude_isSet) {
        obj.insert(QString("latitude"), ::OpenAPI::toJsonValue(m_latitude));
    }
    if (m_longitude_isSet) {
        obj.insert(QString("longitude"), ::OpenAPI::toJsonValue(m_longitude));
    }
    if (m_postal_code_isSet) {
        obj.insert(QString("postal_code"), ::OpenAPI::toJsonValue(m_postal_code));
    }
    if (m_region_isSet) {
        obj.insert(QString("region"), ::OpenAPI::toJsonValue(m_region));
    }
    if (m_region_geoname_id_isSet) {
        obj.insert(QString("region_geoname_id"), ::OpenAPI::toJsonValue(m_region_geoname_id));
    }
    if (m_region_iso_code_isSet) {
        obj.insert(QString("region_iso_code"), ::OpenAPI::toJsonValue(m_region_iso_code));
    }
    if (m_security.isSet()) {
        obj.insert(QString("security"), ::OpenAPI::toJsonValue(m_security));
    }
    if (m_timezone.isSet()) {
        obj.insert(QString("timezone"), ::OpenAPI::toJsonValue(m_timezone));
    }
    return obj;
}

QString OAIInline_response_200::getCity() const {
    return m_city;
}
void OAIInline_response_200::setCity(const QString &city) {
    m_city = city;
    m_city_isSet = true;
}

bool OAIInline_response_200::is_city_Set() const{
    return m_city_isSet;
}

bool OAIInline_response_200::is_city_Valid() const{
    return m_city_isValid;
}

qint32 OAIInline_response_200::getCityGeonameId() const {
    return m_city_geoname_id;
}
void OAIInline_response_200::setCityGeonameId(const qint32 &city_geoname_id) {
    m_city_geoname_id = city_geoname_id;
    m_city_geoname_id_isSet = true;
}

bool OAIInline_response_200::is_city_geoname_id_Set() const{
    return m_city_geoname_id_isSet;
}

bool OAIInline_response_200::is_city_geoname_id_Valid() const{
    return m_city_geoname_id_isValid;
}

OAIInline_response_200_connection OAIInline_response_200::getConnection() const {
    return m_connection;
}
void OAIInline_response_200::setConnection(const OAIInline_response_200_connection &connection) {
    m_connection = connection;
    m_connection_isSet = true;
}

bool OAIInline_response_200::is_connection_Set() const{
    return m_connection_isSet;
}

bool OAIInline_response_200::is_connection_Valid() const{
    return m_connection_isValid;
}

QString OAIInline_response_200::getContinent() const {
    return m_continent;
}
void OAIInline_response_200::setContinent(const QString &continent) {
    m_continent = continent;
    m_continent_isSet = true;
}

bool OAIInline_response_200::is_continent_Set() const{
    return m_continent_isSet;
}

bool OAIInline_response_200::is_continent_Valid() const{
    return m_continent_isValid;
}

QString OAIInline_response_200::getContinentCode() const {
    return m_continent_code;
}
void OAIInline_response_200::setContinentCode(const QString &continent_code) {
    m_continent_code = continent_code;
    m_continent_code_isSet = true;
}

bool OAIInline_response_200::is_continent_code_Set() const{
    return m_continent_code_isSet;
}

bool OAIInline_response_200::is_continent_code_Valid() const{
    return m_continent_code_isValid;
}

qint32 OAIInline_response_200::getContinentGeonameId() const {
    return m_continent_geoname_id;
}
void OAIInline_response_200::setContinentGeonameId(const qint32 &continent_geoname_id) {
    m_continent_geoname_id = continent_geoname_id;
    m_continent_geoname_id_isSet = true;
}

bool OAIInline_response_200::is_continent_geoname_id_Set() const{
    return m_continent_geoname_id_isSet;
}

bool OAIInline_response_200::is_continent_geoname_id_Valid() const{
    return m_continent_geoname_id_isValid;
}

QString OAIInline_response_200::getCountry() const {
    return m_country;
}
void OAIInline_response_200::setCountry(const QString &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAIInline_response_200::is_country_Set() const{
    return m_country_isSet;
}

bool OAIInline_response_200::is_country_Valid() const{
    return m_country_isValid;
}

QString OAIInline_response_200::getCountryCode() const {
    return m_country_code;
}
void OAIInline_response_200::setCountryCode(const QString &country_code) {
    m_country_code = country_code;
    m_country_code_isSet = true;
}

bool OAIInline_response_200::is_country_code_Set() const{
    return m_country_code_isSet;
}

bool OAIInline_response_200::is_country_code_Valid() const{
    return m_country_code_isValid;
}

qint32 OAIInline_response_200::getCountryGeonameId() const {
    return m_country_geoname_id;
}
void OAIInline_response_200::setCountryGeonameId(const qint32 &country_geoname_id) {
    m_country_geoname_id = country_geoname_id;
    m_country_geoname_id_isSet = true;
}

bool OAIInline_response_200::is_country_geoname_id_Set() const{
    return m_country_geoname_id_isSet;
}

bool OAIInline_response_200::is_country_geoname_id_Valid() const{
    return m_country_geoname_id_isValid;
}

bool OAIInline_response_200::isCountryIsEu() const {
    return m_country_is_eu;
}
void OAIInline_response_200::setCountryIsEu(const bool &country_is_eu) {
    m_country_is_eu = country_is_eu;
    m_country_is_eu_isSet = true;
}

bool OAIInline_response_200::is_country_is_eu_Set() const{
    return m_country_is_eu_isSet;
}

bool OAIInline_response_200::is_country_is_eu_Valid() const{
    return m_country_is_eu_isValid;
}

OAIInline_response_200_currency OAIInline_response_200::getCurrency() const {
    return m_currency;
}
void OAIInline_response_200::setCurrency(const OAIInline_response_200_currency &currency) {
    m_currency = currency;
    m_currency_isSet = true;
}

bool OAIInline_response_200::is_currency_Set() const{
    return m_currency_isSet;
}

bool OAIInline_response_200::is_currency_Valid() const{
    return m_currency_isValid;
}

OAIInline_response_200_flag OAIInline_response_200::getFlag() const {
    return m_flag;
}
void OAIInline_response_200::setFlag(const OAIInline_response_200_flag &flag) {
    m_flag = flag;
    m_flag_isSet = true;
}

bool OAIInline_response_200::is_flag_Set() const{
    return m_flag_isSet;
}

bool OAIInline_response_200::is_flag_Valid() const{
    return m_flag_isValid;
}

QString OAIInline_response_200::getIpAddress() const {
    return m_ip_address;
}
void OAIInline_response_200::setIpAddress(const QString &ip_address) {
    m_ip_address = ip_address;
    m_ip_address_isSet = true;
}

bool OAIInline_response_200::is_ip_address_Set() const{
    return m_ip_address_isSet;
}

bool OAIInline_response_200::is_ip_address_Valid() const{
    return m_ip_address_isValid;
}

double OAIInline_response_200::getLatitude() const {
    return m_latitude;
}
void OAIInline_response_200::setLatitude(const double &latitude) {
    m_latitude = latitude;
    m_latitude_isSet = true;
}

bool OAIInline_response_200::is_latitude_Set() const{
    return m_latitude_isSet;
}

bool OAIInline_response_200::is_latitude_Valid() const{
    return m_latitude_isValid;
}

double OAIInline_response_200::getLongitude() const {
    return m_longitude;
}
void OAIInline_response_200::setLongitude(const double &longitude) {
    m_longitude = longitude;
    m_longitude_isSet = true;
}

bool OAIInline_response_200::is_longitude_Set() const{
    return m_longitude_isSet;
}

bool OAIInline_response_200::is_longitude_Valid() const{
    return m_longitude_isValid;
}

QString OAIInline_response_200::getPostalCode() const {
    return m_postal_code;
}
void OAIInline_response_200::setPostalCode(const QString &postal_code) {
    m_postal_code = postal_code;
    m_postal_code_isSet = true;
}

bool OAIInline_response_200::is_postal_code_Set() const{
    return m_postal_code_isSet;
}

bool OAIInline_response_200::is_postal_code_Valid() const{
    return m_postal_code_isValid;
}

QString OAIInline_response_200::getRegion() const {
    return m_region;
}
void OAIInline_response_200::setRegion(const QString &region) {
    m_region = region;
    m_region_isSet = true;
}

bool OAIInline_response_200::is_region_Set() const{
    return m_region_isSet;
}

bool OAIInline_response_200::is_region_Valid() const{
    return m_region_isValid;
}

qint32 OAIInline_response_200::getRegionGeonameId() const {
    return m_region_geoname_id;
}
void OAIInline_response_200::setRegionGeonameId(const qint32 &region_geoname_id) {
    m_region_geoname_id = region_geoname_id;
    m_region_geoname_id_isSet = true;
}

bool OAIInline_response_200::is_region_geoname_id_Set() const{
    return m_region_geoname_id_isSet;
}

bool OAIInline_response_200::is_region_geoname_id_Valid() const{
    return m_region_geoname_id_isValid;
}

QString OAIInline_response_200::getRegionIsoCode() const {
    return m_region_iso_code;
}
void OAIInline_response_200::setRegionIsoCode(const QString &region_iso_code) {
    m_region_iso_code = region_iso_code;
    m_region_iso_code_isSet = true;
}

bool OAIInline_response_200::is_region_iso_code_Set() const{
    return m_region_iso_code_isSet;
}

bool OAIInline_response_200::is_region_iso_code_Valid() const{
    return m_region_iso_code_isValid;
}

OAIInline_response_200_security OAIInline_response_200::getSecurity() const {
    return m_security;
}
void OAIInline_response_200::setSecurity(const OAIInline_response_200_security &security) {
    m_security = security;
    m_security_isSet = true;
}

bool OAIInline_response_200::is_security_Set() const{
    return m_security_isSet;
}

bool OAIInline_response_200::is_security_Valid() const{
    return m_security_isValid;
}

OAIInline_response_200_timezone OAIInline_response_200::getTimezone() const {
    return m_timezone;
}
void OAIInline_response_200::setTimezone(const OAIInline_response_200_timezone &timezone) {
    m_timezone = timezone;
    m_timezone_isSet = true;
}

bool OAIInline_response_200::is_timezone_Set() const{
    return m_timezone_isSet;
}

bool OAIInline_response_200::is_timezone_Valid() const{
    return m_timezone_isValid;
}

bool OAIInline_response_200::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_city_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_city_geoname_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_connection.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_continent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_continent_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_continent_geoname_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_geoname_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_is_eu_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_flag.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_latitude_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_longitude_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_postal_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_region_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_region_geoname_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_region_iso_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_security.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_timezone.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInline_response_200::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
