/**
 * IP geolocation API
 * Abstract IP geolocation API allows developers to retrieve the region, country and city behind any IP worldwide. The API covers the geolocation of IPv4 and IPv6 addresses in 180+ countries worldwide. Extra information can be retrieved like the currency, flag or language associated to an IP.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInline_response_200_timezone.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInline_response_200_timezone::OAIInline_response_200_timezone(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInline_response_200_timezone::OAIInline_response_200_timezone() {
    this->initializeModel();
}

OAIInline_response_200_timezone::~OAIInline_response_200_timezone() {}

void OAIInline_response_200_timezone::initializeModel() {

    m_abbreviation_isSet = false;
    m_abbreviation_isValid = false;

    m_current_time_isSet = false;
    m_current_time_isValid = false;

    m_gmt_offset_isSet = false;
    m_gmt_offset_isValid = false;

    m_is_dst_isSet = false;
    m_is_dst_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;
}

void OAIInline_response_200_timezone::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInline_response_200_timezone::fromJsonObject(QJsonObject json) {

    m_abbreviation_isValid = ::OpenAPI::fromJsonValue(m_abbreviation, json[QString("abbreviation")]);
    m_abbreviation_isSet = !json[QString("abbreviation")].isNull() && m_abbreviation_isValid;

    m_current_time_isValid = ::OpenAPI::fromJsonValue(m_current_time, json[QString("current_time")]);
    m_current_time_isSet = !json[QString("current_time")].isNull() && m_current_time_isValid;

    m_gmt_offset_isValid = ::OpenAPI::fromJsonValue(m_gmt_offset, json[QString("gmt_offset")]);
    m_gmt_offset_isSet = !json[QString("gmt_offset")].isNull() && m_gmt_offset_isValid;

    m_is_dst_isValid = ::OpenAPI::fromJsonValue(m_is_dst, json[QString("is_dst")]);
    m_is_dst_isSet = !json[QString("is_dst")].isNull() && m_is_dst_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;
}

QString OAIInline_response_200_timezone::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInline_response_200_timezone::asJsonObject() const {
    QJsonObject obj;
    if (m_abbreviation_isSet) {
        obj.insert(QString("abbreviation"), ::OpenAPI::toJsonValue(m_abbreviation));
    }
    if (m_current_time_isSet) {
        obj.insert(QString("current_time"), ::OpenAPI::toJsonValue(m_current_time));
    }
    if (m_gmt_offset_isSet) {
        obj.insert(QString("gmt_offset"), ::OpenAPI::toJsonValue(m_gmt_offset));
    }
    if (m_is_dst_isSet) {
        obj.insert(QString("is_dst"), ::OpenAPI::toJsonValue(m_is_dst));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    return obj;
}

QString OAIInline_response_200_timezone::getAbbreviation() const {
    return m_abbreviation;
}
void OAIInline_response_200_timezone::setAbbreviation(const QString &abbreviation) {
    m_abbreviation = abbreviation;
    m_abbreviation_isSet = true;
}

bool OAIInline_response_200_timezone::is_abbreviation_Set() const{
    return m_abbreviation_isSet;
}

bool OAIInline_response_200_timezone::is_abbreviation_Valid() const{
    return m_abbreviation_isValid;
}

QString OAIInline_response_200_timezone::getCurrentTime() const {
    return m_current_time;
}
void OAIInline_response_200_timezone::setCurrentTime(const QString &current_time) {
    m_current_time = current_time;
    m_current_time_isSet = true;
}

bool OAIInline_response_200_timezone::is_current_time_Set() const{
    return m_current_time_isSet;
}

bool OAIInline_response_200_timezone::is_current_time_Valid() const{
    return m_current_time_isValid;
}

qint32 OAIInline_response_200_timezone::getGmtOffset() const {
    return m_gmt_offset;
}
void OAIInline_response_200_timezone::setGmtOffset(const qint32 &gmt_offset) {
    m_gmt_offset = gmt_offset;
    m_gmt_offset_isSet = true;
}

bool OAIInline_response_200_timezone::is_gmt_offset_Set() const{
    return m_gmt_offset_isSet;
}

bool OAIInline_response_200_timezone::is_gmt_offset_Valid() const{
    return m_gmt_offset_isValid;
}

bool OAIInline_response_200_timezone::isIsDst() const {
    return m_is_dst;
}
void OAIInline_response_200_timezone::setIsDst(const bool &is_dst) {
    m_is_dst = is_dst;
    m_is_dst_isSet = true;
}

bool OAIInline_response_200_timezone::is_is_dst_Set() const{
    return m_is_dst_isSet;
}

bool OAIInline_response_200_timezone::is_is_dst_Valid() const{
    return m_is_dst_isValid;
}

QString OAIInline_response_200_timezone::getName() const {
    return m_name;
}
void OAIInline_response_200_timezone::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIInline_response_200_timezone::is_name_Set() const{
    return m_name_isSet;
}

bool OAIInline_response_200_timezone::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIInline_response_200_timezone::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_abbreviation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gmt_offset_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_dst_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInline_response_200_timezone::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
