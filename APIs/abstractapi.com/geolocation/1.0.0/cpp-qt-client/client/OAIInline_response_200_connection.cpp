/**
 * IP geolocation API
 * Abstract IP geolocation API allows developers to retrieve the region, country and city behind any IP worldwide. The API covers the geolocation of IPv4 and IPv6 addresses in 180+ countries worldwide. Extra information can be retrieved like the currency, flag or language associated to an IP.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInline_response_200_connection.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInline_response_200_connection::OAIInline_response_200_connection(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInline_response_200_connection::OAIInline_response_200_connection() {
    this->initializeModel();
}

OAIInline_response_200_connection::~OAIInline_response_200_connection() {}

void OAIInline_response_200_connection::initializeModel() {

    m_autonomous_system_number_isSet = false;
    m_autonomous_system_number_isValid = false;

    m_autonomous_system_organization_isSet = false;
    m_autonomous_system_organization_isValid = false;

    m_connection_type_isSet = false;
    m_connection_type_isValid = false;

    m_isp_name_isSet = false;
    m_isp_name_isValid = false;

    m_organization_name_isSet = false;
    m_organization_name_isValid = false;
}

void OAIInline_response_200_connection::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInline_response_200_connection::fromJsonObject(QJsonObject json) {

    m_autonomous_system_number_isValid = ::OpenAPI::fromJsonValue(m_autonomous_system_number, json[QString("autonomous_system_number")]);
    m_autonomous_system_number_isSet = !json[QString("autonomous_system_number")].isNull() && m_autonomous_system_number_isValid;

    m_autonomous_system_organization_isValid = ::OpenAPI::fromJsonValue(m_autonomous_system_organization, json[QString("autonomous_system_organization")]);
    m_autonomous_system_organization_isSet = !json[QString("autonomous_system_organization")].isNull() && m_autonomous_system_organization_isValid;

    m_connection_type_isValid = ::OpenAPI::fromJsonValue(m_connection_type, json[QString("connection_type")]);
    m_connection_type_isSet = !json[QString("connection_type")].isNull() && m_connection_type_isValid;

    m_isp_name_isValid = ::OpenAPI::fromJsonValue(m_isp_name, json[QString("isp_name")]);
    m_isp_name_isSet = !json[QString("isp_name")].isNull() && m_isp_name_isValid;

    m_organization_name_isValid = ::OpenAPI::fromJsonValue(m_organization_name, json[QString("organization_name")]);
    m_organization_name_isSet = !json[QString("organization_name")].isNull() && m_organization_name_isValid;
}

QString OAIInline_response_200_connection::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInline_response_200_connection::asJsonObject() const {
    QJsonObject obj;
    if (m_autonomous_system_number_isSet) {
        obj.insert(QString("autonomous_system_number"), ::OpenAPI::toJsonValue(m_autonomous_system_number));
    }
    if (m_autonomous_system_organization_isSet) {
        obj.insert(QString("autonomous_system_organization"), ::OpenAPI::toJsonValue(m_autonomous_system_organization));
    }
    if (m_connection_type_isSet) {
        obj.insert(QString("connection_type"), ::OpenAPI::toJsonValue(m_connection_type));
    }
    if (m_isp_name_isSet) {
        obj.insert(QString("isp_name"), ::OpenAPI::toJsonValue(m_isp_name));
    }
    if (m_organization_name_isSet) {
        obj.insert(QString("organization_name"), ::OpenAPI::toJsonValue(m_organization_name));
    }
    return obj;
}

qint32 OAIInline_response_200_connection::getAutonomousSystemNumber() const {
    return m_autonomous_system_number;
}
void OAIInline_response_200_connection::setAutonomousSystemNumber(const qint32 &autonomous_system_number) {
    m_autonomous_system_number = autonomous_system_number;
    m_autonomous_system_number_isSet = true;
}

bool OAIInline_response_200_connection::is_autonomous_system_number_Set() const{
    return m_autonomous_system_number_isSet;
}

bool OAIInline_response_200_connection::is_autonomous_system_number_Valid() const{
    return m_autonomous_system_number_isValid;
}

QString OAIInline_response_200_connection::getAutonomousSystemOrganization() const {
    return m_autonomous_system_organization;
}
void OAIInline_response_200_connection::setAutonomousSystemOrganization(const QString &autonomous_system_organization) {
    m_autonomous_system_organization = autonomous_system_organization;
    m_autonomous_system_organization_isSet = true;
}

bool OAIInline_response_200_connection::is_autonomous_system_organization_Set() const{
    return m_autonomous_system_organization_isSet;
}

bool OAIInline_response_200_connection::is_autonomous_system_organization_Valid() const{
    return m_autonomous_system_organization_isValid;
}

QString OAIInline_response_200_connection::getConnectionType() const {
    return m_connection_type;
}
void OAIInline_response_200_connection::setConnectionType(const QString &connection_type) {
    m_connection_type = connection_type;
    m_connection_type_isSet = true;
}

bool OAIInline_response_200_connection::is_connection_type_Set() const{
    return m_connection_type_isSet;
}

bool OAIInline_response_200_connection::is_connection_type_Valid() const{
    return m_connection_type_isValid;
}

QString OAIInline_response_200_connection::getIspName() const {
    return m_isp_name;
}
void OAIInline_response_200_connection::setIspName(const QString &isp_name) {
    m_isp_name = isp_name;
    m_isp_name_isSet = true;
}

bool OAIInline_response_200_connection::is_isp_name_Set() const{
    return m_isp_name_isSet;
}

bool OAIInline_response_200_connection::is_isp_name_Valid() const{
    return m_isp_name_isValid;
}

QString OAIInline_response_200_connection::getOrganizationName() const {
    return m_organization_name;
}
void OAIInline_response_200_connection::setOrganizationName(const QString &organization_name) {
    m_organization_name = organization_name;
    m_organization_name_isSet = true;
}

bool OAIInline_response_200_connection::is_organization_name_Set() const{
    return m_organization_name_isSet;
}

bool OAIInline_response_200_connection::is_organization_name_Valid() const{
    return m_organization_name_isValid;
}

bool OAIInline_response_200_connection::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_autonomous_system_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_autonomous_system_organization_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_connection_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_isp_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_organization_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInline_response_200_connection::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
