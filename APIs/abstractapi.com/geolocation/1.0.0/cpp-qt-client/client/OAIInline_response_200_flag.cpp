/**
 * IP geolocation API
 * Abstract IP geolocation API allows developers to retrieve the region, country and city behind any IP worldwide. The API covers the geolocation of IPv4 and IPv6 addresses in 180+ countries worldwide. Extra information can be retrieved like the currency, flag or language associated to an IP.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInline_response_200_flag.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInline_response_200_flag::OAIInline_response_200_flag(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInline_response_200_flag::OAIInline_response_200_flag() {
    this->initializeModel();
}

OAIInline_response_200_flag::~OAIInline_response_200_flag() {}

void OAIInline_response_200_flag::initializeModel() {

    m_emoji_isSet = false;
    m_emoji_isValid = false;

    m_png_isSet = false;
    m_png_isValid = false;

    m_svg_isSet = false;
    m_svg_isValid = false;

    m_unicode_isSet = false;
    m_unicode_isValid = false;
}

void OAIInline_response_200_flag::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInline_response_200_flag::fromJsonObject(QJsonObject json) {

    m_emoji_isValid = ::OpenAPI::fromJsonValue(m_emoji, json[QString("emoji")]);
    m_emoji_isSet = !json[QString("emoji")].isNull() && m_emoji_isValid;

    m_png_isValid = ::OpenAPI::fromJsonValue(m_png, json[QString("png")]);
    m_png_isSet = !json[QString("png")].isNull() && m_png_isValid;

    m_svg_isValid = ::OpenAPI::fromJsonValue(m_svg, json[QString("svg")]);
    m_svg_isSet = !json[QString("svg")].isNull() && m_svg_isValid;

    m_unicode_isValid = ::OpenAPI::fromJsonValue(m_unicode, json[QString("unicode")]);
    m_unicode_isSet = !json[QString("unicode")].isNull() && m_unicode_isValid;
}

QString OAIInline_response_200_flag::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInline_response_200_flag::asJsonObject() const {
    QJsonObject obj;
    if (m_emoji_isSet) {
        obj.insert(QString("emoji"), ::OpenAPI::toJsonValue(m_emoji));
    }
    if (m_png_isSet) {
        obj.insert(QString("png"), ::OpenAPI::toJsonValue(m_png));
    }
    if (m_svg_isSet) {
        obj.insert(QString("svg"), ::OpenAPI::toJsonValue(m_svg));
    }
    if (m_unicode_isSet) {
        obj.insert(QString("unicode"), ::OpenAPI::toJsonValue(m_unicode));
    }
    return obj;
}

QString OAIInline_response_200_flag::getEmoji() const {
    return m_emoji;
}
void OAIInline_response_200_flag::setEmoji(const QString &emoji) {
    m_emoji = emoji;
    m_emoji_isSet = true;
}

bool OAIInline_response_200_flag::is_emoji_Set() const{
    return m_emoji_isSet;
}

bool OAIInline_response_200_flag::is_emoji_Valid() const{
    return m_emoji_isValid;
}

QString OAIInline_response_200_flag::getPng() const {
    return m_png;
}
void OAIInline_response_200_flag::setPng(const QString &png) {
    m_png = png;
    m_png_isSet = true;
}

bool OAIInline_response_200_flag::is_png_Set() const{
    return m_png_isSet;
}

bool OAIInline_response_200_flag::is_png_Valid() const{
    return m_png_isValid;
}

QString OAIInline_response_200_flag::getSvg() const {
    return m_svg;
}
void OAIInline_response_200_flag::setSvg(const QString &svg) {
    m_svg = svg;
    m_svg_isSet = true;
}

bool OAIInline_response_200_flag::is_svg_Set() const{
    return m_svg_isSet;
}

bool OAIInline_response_200_flag::is_svg_Valid() const{
    return m_svg_isValid;
}

QString OAIInline_response_200_flag::getUnicode() const {
    return m_unicode;
}
void OAIInline_response_200_flag::setUnicode(const QString &unicode) {
    m_unicode = unicode;
    m_unicode_isSet = true;
}

bool OAIInline_response_200_flag::is_unicode_Set() const{
    return m_unicode_isSet;
}

bool OAIInline_response_200_flag::is_unicode_Valid() const{
    return m_unicode_isValid;
}

bool OAIInline_response_200_flag::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_emoji_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_png_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_svg_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unicode_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInline_response_200_flag::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
