/*
 * IP geolocation API
 * Abstract IP geolocation API allows developers to retrieve the region, country and city behind any IP worldwide. The API covers the geolocation of IPv4 and IPv6 addresses in 180+ countries worldwide. Extra information can be retrieved like the currency, flag or language associated to an IP.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;
import org.openapitools.client.model.InlineResponse200Connection;
import org.openapitools.client.model.InlineResponse200Currency;
import org.openapitools.client.model.InlineResponse200Flag;
import org.openapitools.client.model.InlineResponse200Security;
import org.openapitools.client.model.InlineResponse200Timezone;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * InlineResponse200
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:23:03.659018-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class InlineResponse200 {
  public static final String SERIALIZED_NAME_CITY = "city";
  @SerializedName(SERIALIZED_NAME_CITY)
  private String city;

  public static final String SERIALIZED_NAME_CITY_GEONAME_ID = "city_geoname_id";
  @SerializedName(SERIALIZED_NAME_CITY_GEONAME_ID)
  private Integer cityGeonameId;

  public static final String SERIALIZED_NAME_CONNECTION = "connection";
  @SerializedName(SERIALIZED_NAME_CONNECTION)
  private InlineResponse200Connection connection;

  public static final String SERIALIZED_NAME_CONTINENT = "continent";
  @SerializedName(SERIALIZED_NAME_CONTINENT)
  private String continent;

  public static final String SERIALIZED_NAME_CONTINENT_CODE = "continent_code";
  @SerializedName(SERIALIZED_NAME_CONTINENT_CODE)
  private String continentCode;

  public static final String SERIALIZED_NAME_CONTINENT_GEONAME_ID = "continent_geoname_id";
  @SerializedName(SERIALIZED_NAME_CONTINENT_GEONAME_ID)
  private Integer continentGeonameId;

  public static final String SERIALIZED_NAME_COUNTRY = "country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  private String country;

  public static final String SERIALIZED_NAME_COUNTRY_CODE = "country_code";
  @SerializedName(SERIALIZED_NAME_COUNTRY_CODE)
  private String countryCode;

  public static final String SERIALIZED_NAME_COUNTRY_GEONAME_ID = "country_geoname_id";
  @SerializedName(SERIALIZED_NAME_COUNTRY_GEONAME_ID)
  private Integer countryGeonameId;

  public static final String SERIALIZED_NAME_COUNTRY_IS_EU = "country_is_eu";
  @SerializedName(SERIALIZED_NAME_COUNTRY_IS_EU)
  private Boolean countryIsEu;

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private InlineResponse200Currency currency;

  public static final String SERIALIZED_NAME_FLAG = "flag";
  @SerializedName(SERIALIZED_NAME_FLAG)
  private InlineResponse200Flag flag;

  public static final String SERIALIZED_NAME_IP_ADDRESS = "ip_address";
  @SerializedName(SERIALIZED_NAME_IP_ADDRESS)
  private String ipAddress;

  public static final String SERIALIZED_NAME_LATITUDE = "latitude";
  @SerializedName(SERIALIZED_NAME_LATITUDE)
  private BigDecimal latitude;

  public static final String SERIALIZED_NAME_LONGITUDE = "longitude";
  @SerializedName(SERIALIZED_NAME_LONGITUDE)
  private BigDecimal longitude;

  public static final String SERIALIZED_NAME_POSTAL_CODE = "postal_code";
  @SerializedName(SERIALIZED_NAME_POSTAL_CODE)
  private String postalCode;

  public static final String SERIALIZED_NAME_REGION = "region";
  @SerializedName(SERIALIZED_NAME_REGION)
  private String region;

  public static final String SERIALIZED_NAME_REGION_GEONAME_ID = "region_geoname_id";
  @SerializedName(SERIALIZED_NAME_REGION_GEONAME_ID)
  private Integer regionGeonameId;

  public static final String SERIALIZED_NAME_REGION_ISO_CODE = "region_iso_code";
  @SerializedName(SERIALIZED_NAME_REGION_ISO_CODE)
  private String regionIsoCode;

  public static final String SERIALIZED_NAME_SECURITY = "security";
  @SerializedName(SERIALIZED_NAME_SECURITY)
  private InlineResponse200Security security;

  public static final String SERIALIZED_NAME_TIMEZONE = "timezone";
  @SerializedName(SERIALIZED_NAME_TIMEZONE)
  private InlineResponse200Timezone timezone;

  public InlineResponse200() {
  }

  public InlineResponse200 city(String city) {
    this.city = city;
    return this;
  }

  /**
   * Get city
   * @return city
   */
  @javax.annotation.Nullable
  public String getCity() {
    return city;
  }

  public void setCity(String city) {
    this.city = city;
  }


  public InlineResponse200 cityGeonameId(Integer cityGeonameId) {
    this.cityGeonameId = cityGeonameId;
    return this;
  }

  /**
   * Get cityGeonameId
   * @return cityGeonameId
   */
  @javax.annotation.Nullable
  public Integer getCityGeonameId() {
    return cityGeonameId;
  }

  public void setCityGeonameId(Integer cityGeonameId) {
    this.cityGeonameId = cityGeonameId;
  }


  public InlineResponse200 connection(InlineResponse200Connection connection) {
    this.connection = connection;
    return this;
  }

  /**
   * Get connection
   * @return connection
   */
  @javax.annotation.Nullable
  public InlineResponse200Connection getConnection() {
    return connection;
  }

  public void setConnection(InlineResponse200Connection connection) {
    this.connection = connection;
  }


  public InlineResponse200 continent(String continent) {
    this.continent = continent;
    return this;
  }

  /**
   * Get continent
   * @return continent
   */
  @javax.annotation.Nullable
  public String getContinent() {
    return continent;
  }

  public void setContinent(String continent) {
    this.continent = continent;
  }


  public InlineResponse200 continentCode(String continentCode) {
    this.continentCode = continentCode;
    return this;
  }

  /**
   * Get continentCode
   * @return continentCode
   */
  @javax.annotation.Nullable
  public String getContinentCode() {
    return continentCode;
  }

  public void setContinentCode(String continentCode) {
    this.continentCode = continentCode;
  }


  public InlineResponse200 continentGeonameId(Integer continentGeonameId) {
    this.continentGeonameId = continentGeonameId;
    return this;
  }

  /**
   * Get continentGeonameId
   * @return continentGeonameId
   */
  @javax.annotation.Nullable
  public Integer getContinentGeonameId() {
    return continentGeonameId;
  }

  public void setContinentGeonameId(Integer continentGeonameId) {
    this.continentGeonameId = continentGeonameId;
  }


  public InlineResponse200 country(String country) {
    this.country = country;
    return this;
  }

  /**
   * Get country
   * @return country
   */
  @javax.annotation.Nullable
  public String getCountry() {
    return country;
  }

  public void setCountry(String country) {
    this.country = country;
  }


  public InlineResponse200 countryCode(String countryCode) {
    this.countryCode = countryCode;
    return this;
  }

  /**
   * Get countryCode
   * @return countryCode
   */
  @javax.annotation.Nullable
  public String getCountryCode() {
    return countryCode;
  }

  public void setCountryCode(String countryCode) {
    this.countryCode = countryCode;
  }


  public InlineResponse200 countryGeonameId(Integer countryGeonameId) {
    this.countryGeonameId = countryGeonameId;
    return this;
  }

  /**
   * Get countryGeonameId
   * @return countryGeonameId
   */
  @javax.annotation.Nullable
  public Integer getCountryGeonameId() {
    return countryGeonameId;
  }

  public void setCountryGeonameId(Integer countryGeonameId) {
    this.countryGeonameId = countryGeonameId;
  }


  public InlineResponse200 countryIsEu(Boolean countryIsEu) {
    this.countryIsEu = countryIsEu;
    return this;
  }

  /**
   * Get countryIsEu
   * @return countryIsEu
   */
  @javax.annotation.Nullable
  public Boolean getCountryIsEu() {
    return countryIsEu;
  }

  public void setCountryIsEu(Boolean countryIsEu) {
    this.countryIsEu = countryIsEu;
  }


  public InlineResponse200 currency(InlineResponse200Currency currency) {
    this.currency = currency;
    return this;
  }

  /**
   * Get currency
   * @return currency
   */
  @javax.annotation.Nullable
  public InlineResponse200Currency getCurrency() {
    return currency;
  }

  public void setCurrency(InlineResponse200Currency currency) {
    this.currency = currency;
  }


  public InlineResponse200 flag(InlineResponse200Flag flag) {
    this.flag = flag;
    return this;
  }

  /**
   * Get flag
   * @return flag
   */
  @javax.annotation.Nullable
  public InlineResponse200Flag getFlag() {
    return flag;
  }

  public void setFlag(InlineResponse200Flag flag) {
    this.flag = flag;
  }


  public InlineResponse200 ipAddress(String ipAddress) {
    this.ipAddress = ipAddress;
    return this;
  }

  /**
   * Get ipAddress
   * @return ipAddress
   */
  @javax.annotation.Nullable
  public String getIpAddress() {
    return ipAddress;
  }

  public void setIpAddress(String ipAddress) {
    this.ipAddress = ipAddress;
  }


  public InlineResponse200 latitude(BigDecimal latitude) {
    this.latitude = latitude;
    return this;
  }

  /**
   * Get latitude
   * @return latitude
   */
  @javax.annotation.Nullable
  public BigDecimal getLatitude() {
    return latitude;
  }

  public void setLatitude(BigDecimal latitude) {
    this.latitude = latitude;
  }


  public InlineResponse200 longitude(BigDecimal longitude) {
    this.longitude = longitude;
    return this;
  }

  /**
   * Get longitude
   * @return longitude
   */
  @javax.annotation.Nullable
  public BigDecimal getLongitude() {
    return longitude;
  }

  public void setLongitude(BigDecimal longitude) {
    this.longitude = longitude;
  }


  public InlineResponse200 postalCode(String postalCode) {
    this.postalCode = postalCode;
    return this;
  }

  /**
   * Get postalCode
   * @return postalCode
   */
  @javax.annotation.Nullable
  public String getPostalCode() {
    return postalCode;
  }

  public void setPostalCode(String postalCode) {
    this.postalCode = postalCode;
  }


  public InlineResponse200 region(String region) {
    this.region = region;
    return this;
  }

  /**
   * Get region
   * @return region
   */
  @javax.annotation.Nullable
  public String getRegion() {
    return region;
  }

  public void setRegion(String region) {
    this.region = region;
  }


  public InlineResponse200 regionGeonameId(Integer regionGeonameId) {
    this.regionGeonameId = regionGeonameId;
    return this;
  }

  /**
   * Get regionGeonameId
   * @return regionGeonameId
   */
  @javax.annotation.Nullable
  public Integer getRegionGeonameId() {
    return regionGeonameId;
  }

  public void setRegionGeonameId(Integer regionGeonameId) {
    this.regionGeonameId = regionGeonameId;
  }


  public InlineResponse200 regionIsoCode(String regionIsoCode) {
    this.regionIsoCode = regionIsoCode;
    return this;
  }

  /**
   * Get regionIsoCode
   * @return regionIsoCode
   */
  @javax.annotation.Nullable
  public String getRegionIsoCode() {
    return regionIsoCode;
  }

  public void setRegionIsoCode(String regionIsoCode) {
    this.regionIsoCode = regionIsoCode;
  }


  public InlineResponse200 security(InlineResponse200Security security) {
    this.security = security;
    return this;
  }

  /**
   * Get security
   * @return security
   */
  @javax.annotation.Nullable
  public InlineResponse200Security getSecurity() {
    return security;
  }

  public void setSecurity(InlineResponse200Security security) {
    this.security = security;
  }


  public InlineResponse200 timezone(InlineResponse200Timezone timezone) {
    this.timezone = timezone;
    return this;
  }

  /**
   * Get timezone
   * @return timezone
   */
  @javax.annotation.Nullable
  public InlineResponse200Timezone getTimezone() {
    return timezone;
  }

  public void setTimezone(InlineResponse200Timezone timezone) {
    this.timezone = timezone;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InlineResponse200 inlineResponse200 = (InlineResponse200) o;
    return Objects.equals(this.city, inlineResponse200.city) &&
        Objects.equals(this.cityGeonameId, inlineResponse200.cityGeonameId) &&
        Objects.equals(this.connection, inlineResponse200.connection) &&
        Objects.equals(this.continent, inlineResponse200.continent) &&
        Objects.equals(this.continentCode, inlineResponse200.continentCode) &&
        Objects.equals(this.continentGeonameId, inlineResponse200.continentGeonameId) &&
        Objects.equals(this.country, inlineResponse200.country) &&
        Objects.equals(this.countryCode, inlineResponse200.countryCode) &&
        Objects.equals(this.countryGeonameId, inlineResponse200.countryGeonameId) &&
        Objects.equals(this.countryIsEu, inlineResponse200.countryIsEu) &&
        Objects.equals(this.currency, inlineResponse200.currency) &&
        Objects.equals(this.flag, inlineResponse200.flag) &&
        Objects.equals(this.ipAddress, inlineResponse200.ipAddress) &&
        Objects.equals(this.latitude, inlineResponse200.latitude) &&
        Objects.equals(this.longitude, inlineResponse200.longitude) &&
        Objects.equals(this.postalCode, inlineResponse200.postalCode) &&
        Objects.equals(this.region, inlineResponse200.region) &&
        Objects.equals(this.regionGeonameId, inlineResponse200.regionGeonameId) &&
        Objects.equals(this.regionIsoCode, inlineResponse200.regionIsoCode) &&
        Objects.equals(this.security, inlineResponse200.security) &&
        Objects.equals(this.timezone, inlineResponse200.timezone);
  }

  @Override
  public int hashCode() {
    return Objects.hash(city, cityGeonameId, connection, continent, continentCode, continentGeonameId, country, countryCode, countryGeonameId, countryIsEu, currency, flag, ipAddress, latitude, longitude, postalCode, region, regionGeonameId, regionIsoCode, security, timezone);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InlineResponse200 {\n");
    sb.append("    city: ").append(toIndentedString(city)).append("\n");
    sb.append("    cityGeonameId: ").append(toIndentedString(cityGeonameId)).append("\n");
    sb.append("    connection: ").append(toIndentedString(connection)).append("\n");
    sb.append("    continent: ").append(toIndentedString(continent)).append("\n");
    sb.append("    continentCode: ").append(toIndentedString(continentCode)).append("\n");
    sb.append("    continentGeonameId: ").append(toIndentedString(continentGeonameId)).append("\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    countryCode: ").append(toIndentedString(countryCode)).append("\n");
    sb.append("    countryGeonameId: ").append(toIndentedString(countryGeonameId)).append("\n");
    sb.append("    countryIsEu: ").append(toIndentedString(countryIsEu)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    flag: ").append(toIndentedString(flag)).append("\n");
    sb.append("    ipAddress: ").append(toIndentedString(ipAddress)).append("\n");
    sb.append("    latitude: ").append(toIndentedString(latitude)).append("\n");
    sb.append("    longitude: ").append(toIndentedString(longitude)).append("\n");
    sb.append("    postalCode: ").append(toIndentedString(postalCode)).append("\n");
    sb.append("    region: ").append(toIndentedString(region)).append("\n");
    sb.append("    regionGeonameId: ").append(toIndentedString(regionGeonameId)).append("\n");
    sb.append("    regionIsoCode: ").append(toIndentedString(regionIsoCode)).append("\n");
    sb.append("    security: ").append(toIndentedString(security)).append("\n");
    sb.append("    timezone: ").append(toIndentedString(timezone)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("city");
    openapiFields.add("city_geoname_id");
    openapiFields.add("connection");
    openapiFields.add("continent");
    openapiFields.add("continent_code");
    openapiFields.add("continent_geoname_id");
    openapiFields.add("country");
    openapiFields.add("country_code");
    openapiFields.add("country_geoname_id");
    openapiFields.add("country_is_eu");
    openapiFields.add("currency");
    openapiFields.add("flag");
    openapiFields.add("ip_address");
    openapiFields.add("latitude");
    openapiFields.add("longitude");
    openapiFields.add("postal_code");
    openapiFields.add("region");
    openapiFields.add("region_geoname_id");
    openapiFields.add("region_iso_code");
    openapiFields.add("security");
    openapiFields.add("timezone");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to InlineResponse200
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!InlineResponse200.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InlineResponse200 is not found in the empty JSON string", InlineResponse200.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!InlineResponse200.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InlineResponse200` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("city") != null && !jsonObj.get("city").isJsonNull()) && !jsonObj.get("city").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `city` to be a primitive type in the JSON string but got `%s`", jsonObj.get("city").toString()));
      }
      // validate the optional field `connection`
      if (jsonObj.get("connection") != null && !jsonObj.get("connection").isJsonNull()) {
        InlineResponse200Connection.validateJsonElement(jsonObj.get("connection"));
      }
      if ((jsonObj.get("continent") != null && !jsonObj.get("continent").isJsonNull()) && !jsonObj.get("continent").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `continent` to be a primitive type in the JSON string but got `%s`", jsonObj.get("continent").toString()));
      }
      if ((jsonObj.get("continent_code") != null && !jsonObj.get("continent_code").isJsonNull()) && !jsonObj.get("continent_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `continent_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("continent_code").toString()));
      }
      if ((jsonObj.get("country") != null && !jsonObj.get("country").isJsonNull()) && !jsonObj.get("country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country").toString()));
      }
      if ((jsonObj.get("country_code") != null && !jsonObj.get("country_code").isJsonNull()) && !jsonObj.get("country_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country_code").toString()));
      }
      // validate the optional field `currency`
      if (jsonObj.get("currency") != null && !jsonObj.get("currency").isJsonNull()) {
        InlineResponse200Currency.validateJsonElement(jsonObj.get("currency"));
      }
      // validate the optional field `flag`
      if (jsonObj.get("flag") != null && !jsonObj.get("flag").isJsonNull()) {
        InlineResponse200Flag.validateJsonElement(jsonObj.get("flag"));
      }
      if ((jsonObj.get("ip_address") != null && !jsonObj.get("ip_address").isJsonNull()) && !jsonObj.get("ip_address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ip_address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ip_address").toString()));
      }
      if ((jsonObj.get("postal_code") != null && !jsonObj.get("postal_code").isJsonNull()) && !jsonObj.get("postal_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `postal_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("postal_code").toString()));
      }
      if ((jsonObj.get("region") != null && !jsonObj.get("region").isJsonNull()) && !jsonObj.get("region").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `region` to be a primitive type in the JSON string but got `%s`", jsonObj.get("region").toString()));
      }
      if ((jsonObj.get("region_iso_code") != null && !jsonObj.get("region_iso_code").isJsonNull()) && !jsonObj.get("region_iso_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `region_iso_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("region_iso_code").toString()));
      }
      // validate the optional field `security`
      if (jsonObj.get("security") != null && !jsonObj.get("security").isJsonNull()) {
        InlineResponse200Security.validateJsonElement(jsonObj.get("security"));
      }
      // validate the optional field `timezone`
      if (jsonObj.get("timezone") != null && !jsonObj.get("timezone").isJsonNull()) {
        InlineResponse200Timezone.validateJsonElement(jsonObj.get("timezone"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InlineResponse200.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InlineResponse200' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InlineResponse200> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InlineResponse200.class));

       return (TypeAdapter<T>) new TypeAdapter<InlineResponse200>() {
           @Override
           public void write(JsonWriter out, InlineResponse200 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InlineResponse200 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of InlineResponse200 given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of InlineResponse200
   * @throws IOException if the JSON string is invalid with respect to InlineResponse200
   */
  public static InlineResponse200 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InlineResponse200.class);
  }

  /**
   * Convert an instance of InlineResponse200 to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

