/**
 * IP geolocation API
 * Abstract IP geolocation API allows developers to retrieve the region, country and city behind any IP worldwide. The API covers the geolocation of IPv4 and IPv6 addresses in 180+ countries worldwide. Extra information can be retrieved like the currency, flag or language associated to an IP.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from './ApiClient';
import InlineResponse200 from './model/InlineResponse200';
import InlineResponse200Connection from './model/InlineResponse200Connection';
import InlineResponse200Currency from './model/InlineResponse200Currency';
import InlineResponse200Flag from './model/InlineResponse200Flag';
import InlineResponse200Security from './model/InlineResponse200Security';
import InlineResponse200Timezone from './model/InlineResponse200Timezone';
import DefaultApi from './api/DefaultApi';


/**
* Abstract IP geolocation API allows developers to retrieve the region, country and city behind any IP worldwide. The API covers the geolocation of IPv4 and IPv6 addresses in 180+ countries worldwide. Extra information can be retrieved like the currency, flag or language associated to an IP..<br>
* The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
* <p>
* An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
* <pre>
* var IpGeolocationApi = require('index'); // See note below*.
* var xxxSvc = new IpGeolocationApi.XxxApi(); // Allocate the API class we're going to use.
* var yyyModel = new IpGeolocationApi.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
* and put the application logic within the callback function.</em>
* </p>
* <p>
* A non-AMD browser application (discouraged) might do something like this:
* <pre>
* var xxxSvc = new IpGeolocationApi.XxxApi(); // Allocate the API class we're going to use.
* var yyy = new IpGeolocationApi.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* </p>
* @module index
* @version 1.0.0
*/
export {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient,

    /**
     * The InlineResponse200 model constructor.
     * @property {module:model/InlineResponse200}
     */
    InlineResponse200,

    /**
     * The InlineResponse200Connection model constructor.
     * @property {module:model/InlineResponse200Connection}
     */
    InlineResponse200Connection,

    /**
     * The InlineResponse200Currency model constructor.
     * @property {module:model/InlineResponse200Currency}
     */
    InlineResponse200Currency,

    /**
     * The InlineResponse200Flag model constructor.
     * @property {module:model/InlineResponse200Flag}
     */
    InlineResponse200Flag,

    /**
     * The InlineResponse200Security model constructor.
     * @property {module:model/InlineResponse200Security}
     */
    InlineResponse200Security,

    /**
     * The InlineResponse200Timezone model constructor.
     * @property {module:model/InlineResponse200Timezone}
     */
    InlineResponse200Timezone,

    /**
    * The DefaultApi service constructor.
    * @property {module:api/DefaultApi}
    */
    DefaultApi
};
