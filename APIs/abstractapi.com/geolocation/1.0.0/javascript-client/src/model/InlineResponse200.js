/**
 * IP geolocation API
 * Abstract IP geolocation API allows developers to retrieve the region, country and city behind any IP worldwide. The API covers the geolocation of IPv4 and IPv6 addresses in 180+ countries worldwide. Extra information can be retrieved like the currency, flag or language associated to an IP.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import InlineResponse200Connection from './InlineResponse200Connection';
import InlineResponse200Currency from './InlineResponse200Currency';
import InlineResponse200Flag from './InlineResponse200Flag';
import InlineResponse200Security from './InlineResponse200Security';
import InlineResponse200Timezone from './InlineResponse200Timezone';

/**
 * The InlineResponse200 model module.
 * @module model/InlineResponse200
 * @version 1.0.0
 */
class InlineResponse200 {
    /**
     * Constructs a new <code>InlineResponse200</code>.
     * @alias module:model/InlineResponse200
     */
    constructor() { 
        
        InlineResponse200.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>InlineResponse200</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/InlineResponse200} obj Optional instance to populate.
     * @return {module:model/InlineResponse200} The populated <code>InlineResponse200</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new InlineResponse200();

            if (data.hasOwnProperty('city')) {
                obj['city'] = ApiClient.convertToType(data['city'], 'String');
            }
            if (data.hasOwnProperty('city_geoname_id')) {
                obj['city_geoname_id'] = ApiClient.convertToType(data['city_geoname_id'], 'Number');
            }
            if (data.hasOwnProperty('connection')) {
                obj['connection'] = InlineResponse200Connection.constructFromObject(data['connection']);
            }
            if (data.hasOwnProperty('continent')) {
                obj['continent'] = ApiClient.convertToType(data['continent'], 'String');
            }
            if (data.hasOwnProperty('continent_code')) {
                obj['continent_code'] = ApiClient.convertToType(data['continent_code'], 'String');
            }
            if (data.hasOwnProperty('continent_geoname_id')) {
                obj['continent_geoname_id'] = ApiClient.convertToType(data['continent_geoname_id'], 'Number');
            }
            if (data.hasOwnProperty('country')) {
                obj['country'] = ApiClient.convertToType(data['country'], 'String');
            }
            if (data.hasOwnProperty('country_code')) {
                obj['country_code'] = ApiClient.convertToType(data['country_code'], 'String');
            }
            if (data.hasOwnProperty('country_geoname_id')) {
                obj['country_geoname_id'] = ApiClient.convertToType(data['country_geoname_id'], 'Number');
            }
            if (data.hasOwnProperty('country_is_eu')) {
                obj['country_is_eu'] = ApiClient.convertToType(data['country_is_eu'], 'Boolean');
            }
            if (data.hasOwnProperty('currency')) {
                obj['currency'] = InlineResponse200Currency.constructFromObject(data['currency']);
            }
            if (data.hasOwnProperty('flag')) {
                obj['flag'] = InlineResponse200Flag.constructFromObject(data['flag']);
            }
            if (data.hasOwnProperty('ip_address')) {
                obj['ip_address'] = ApiClient.convertToType(data['ip_address'], 'String');
            }
            if (data.hasOwnProperty('latitude')) {
                obj['latitude'] = ApiClient.convertToType(data['latitude'], 'Number');
            }
            if (data.hasOwnProperty('longitude')) {
                obj['longitude'] = ApiClient.convertToType(data['longitude'], 'Number');
            }
            if (data.hasOwnProperty('postal_code')) {
                obj['postal_code'] = ApiClient.convertToType(data['postal_code'], 'String');
            }
            if (data.hasOwnProperty('region')) {
                obj['region'] = ApiClient.convertToType(data['region'], 'String');
            }
            if (data.hasOwnProperty('region_geoname_id')) {
                obj['region_geoname_id'] = ApiClient.convertToType(data['region_geoname_id'], 'Number');
            }
            if (data.hasOwnProperty('region_iso_code')) {
                obj['region_iso_code'] = ApiClient.convertToType(data['region_iso_code'], 'String');
            }
            if (data.hasOwnProperty('security')) {
                obj['security'] = InlineResponse200Security.constructFromObject(data['security']);
            }
            if (data.hasOwnProperty('timezone')) {
                obj['timezone'] = InlineResponse200Timezone.constructFromObject(data['timezone']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>InlineResponse200</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>InlineResponse200</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['city'] && !(typeof data['city'] === 'string' || data['city'] instanceof String)) {
            throw new Error("Expected the field `city` to be a primitive type in the JSON string but got " + data['city']);
        }
        // validate the optional field `connection`
        if (data['connection']) { // data not null
          InlineResponse200Connection.validateJSON(data['connection']);
        }
        // ensure the json data is a string
        if (data['continent'] && !(typeof data['continent'] === 'string' || data['continent'] instanceof String)) {
            throw new Error("Expected the field `continent` to be a primitive type in the JSON string but got " + data['continent']);
        }
        // ensure the json data is a string
        if (data['continent_code'] && !(typeof data['continent_code'] === 'string' || data['continent_code'] instanceof String)) {
            throw new Error("Expected the field `continent_code` to be a primitive type in the JSON string but got " + data['continent_code']);
        }
        // ensure the json data is a string
        if (data['country'] && !(typeof data['country'] === 'string' || data['country'] instanceof String)) {
            throw new Error("Expected the field `country` to be a primitive type in the JSON string but got " + data['country']);
        }
        // ensure the json data is a string
        if (data['country_code'] && !(typeof data['country_code'] === 'string' || data['country_code'] instanceof String)) {
            throw new Error("Expected the field `country_code` to be a primitive type in the JSON string but got " + data['country_code']);
        }
        // validate the optional field `currency`
        if (data['currency']) { // data not null
          InlineResponse200Currency.validateJSON(data['currency']);
        }
        // validate the optional field `flag`
        if (data['flag']) { // data not null
          InlineResponse200Flag.validateJSON(data['flag']);
        }
        // ensure the json data is a string
        if (data['ip_address'] && !(typeof data['ip_address'] === 'string' || data['ip_address'] instanceof String)) {
            throw new Error("Expected the field `ip_address` to be a primitive type in the JSON string but got " + data['ip_address']);
        }
        // ensure the json data is a string
        if (data['postal_code'] && !(typeof data['postal_code'] === 'string' || data['postal_code'] instanceof String)) {
            throw new Error("Expected the field `postal_code` to be a primitive type in the JSON string but got " + data['postal_code']);
        }
        // ensure the json data is a string
        if (data['region'] && !(typeof data['region'] === 'string' || data['region'] instanceof String)) {
            throw new Error("Expected the field `region` to be a primitive type in the JSON string but got " + data['region']);
        }
        // ensure the json data is a string
        if (data['region_iso_code'] && !(typeof data['region_iso_code'] === 'string' || data['region_iso_code'] instanceof String)) {
            throw new Error("Expected the field `region_iso_code` to be a primitive type in the JSON string but got " + data['region_iso_code']);
        }
        // validate the optional field `security`
        if (data['security']) { // data not null
          InlineResponse200Security.validateJSON(data['security']);
        }
        // validate the optional field `timezone`
        if (data['timezone']) { // data not null
          InlineResponse200Timezone.validateJSON(data['timezone']);
        }

        return true;
    }


}



/**
 * @member {String} city
 */
InlineResponse200.prototype['city'] = undefined;

/**
 * @member {Number} city_geoname_id
 */
InlineResponse200.prototype['city_geoname_id'] = undefined;

/**
 * @member {module:model/InlineResponse200Connection} connection
 */
InlineResponse200.prototype['connection'] = undefined;

/**
 * @member {String} continent
 */
InlineResponse200.prototype['continent'] = undefined;

/**
 * @member {String} continent_code
 */
InlineResponse200.prototype['continent_code'] = undefined;

/**
 * @member {Number} continent_geoname_id
 */
InlineResponse200.prototype['continent_geoname_id'] = undefined;

/**
 * @member {String} country
 */
InlineResponse200.prototype['country'] = undefined;

/**
 * @member {String} country_code
 */
InlineResponse200.prototype['country_code'] = undefined;

/**
 * @member {Number} country_geoname_id
 */
InlineResponse200.prototype['country_geoname_id'] = undefined;

/**
 * @member {Boolean} country_is_eu
 */
InlineResponse200.prototype['country_is_eu'] = undefined;

/**
 * @member {module:model/InlineResponse200Currency} currency
 */
InlineResponse200.prototype['currency'] = undefined;

/**
 * @member {module:model/InlineResponse200Flag} flag
 */
InlineResponse200.prototype['flag'] = undefined;

/**
 * @member {String} ip_address
 */
InlineResponse200.prototype['ip_address'] = undefined;

/**
 * @member {Number} latitude
 */
InlineResponse200.prototype['latitude'] = undefined;

/**
 * @member {Number} longitude
 */
InlineResponse200.prototype['longitude'] = undefined;

/**
 * @member {String} postal_code
 */
InlineResponse200.prototype['postal_code'] = undefined;

/**
 * @member {String} region
 */
InlineResponse200.prototype['region'] = undefined;

/**
 * @member {Number} region_geoname_id
 */
InlineResponse200.prototype['region_geoname_id'] = undefined;

/**
 * @member {String} region_iso_code
 */
InlineResponse200.prototype['region_iso_code'] = undefined;

/**
 * @member {module:model/InlineResponse200Security} security
 */
InlineResponse200.prototype['security'] = undefined;

/**
 * @member {module:model/InlineResponse200Timezone} timezone
 */
InlineResponse200.prototype['timezone'] = undefined;






export default InlineResponse200;

