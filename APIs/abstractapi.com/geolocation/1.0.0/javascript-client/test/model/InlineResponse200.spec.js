/**
 * IP geolocation API
 * Abstract IP geolocation API allows developers to retrieve the region, country and city behind any IP worldwide. The API covers the geolocation of IPv4 and IPv6 addresses in 180+ countries worldwide. Extra information can be retrieved like the currency, flag or language associated to an IP.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.IpGeolocationApi);
  }
}(this, function(expect, IpGeolocationApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new IpGeolocationApi.InlineResponse200();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('InlineResponse200', function() {
    it('should create an instance of InlineResponse200', function() {
      // uncomment below and update the code to test InlineResponse200
      //var instance = new IpGeolocationApi.InlineResponse200();
      //expect(instance).to.be.a(IpGeolocationApi.InlineResponse200);
    });

    it('should have the property city (base name: "city")', function() {
      // uncomment below and update the code to test the property city
      //var instance = new IpGeolocationApi.InlineResponse200();
      //expect(instance).to.be();
    });

    it('should have the property cityGeonameId (base name: "city_geoname_id")', function() {
      // uncomment below and update the code to test the property cityGeonameId
      //var instance = new IpGeolocationApi.InlineResponse200();
      //expect(instance).to.be();
    });

    it('should have the property connection (base name: "connection")', function() {
      // uncomment below and update the code to test the property connection
      //var instance = new IpGeolocationApi.InlineResponse200();
      //expect(instance).to.be();
    });

    it('should have the property continent (base name: "continent")', function() {
      // uncomment below and update the code to test the property continent
      //var instance = new IpGeolocationApi.InlineResponse200();
      //expect(instance).to.be();
    });

    it('should have the property continentCode (base name: "continent_code")', function() {
      // uncomment below and update the code to test the property continentCode
      //var instance = new IpGeolocationApi.InlineResponse200();
      //expect(instance).to.be();
    });

    it('should have the property continentGeonameId (base name: "continent_geoname_id")', function() {
      // uncomment below and update the code to test the property continentGeonameId
      //var instance = new IpGeolocationApi.InlineResponse200();
      //expect(instance).to.be();
    });

    it('should have the property country (base name: "country")', function() {
      // uncomment below and update the code to test the property country
      //var instance = new IpGeolocationApi.InlineResponse200();
      //expect(instance).to.be();
    });

    it('should have the property countryCode (base name: "country_code")', function() {
      // uncomment below and update the code to test the property countryCode
      //var instance = new IpGeolocationApi.InlineResponse200();
      //expect(instance).to.be();
    });

    it('should have the property countryGeonameId (base name: "country_geoname_id")', function() {
      // uncomment below and update the code to test the property countryGeonameId
      //var instance = new IpGeolocationApi.InlineResponse200();
      //expect(instance).to.be();
    });

    it('should have the property countryIsEu (base name: "country_is_eu")', function() {
      // uncomment below and update the code to test the property countryIsEu
      //var instance = new IpGeolocationApi.InlineResponse200();
      //expect(instance).to.be();
    });

    it('should have the property currency (base name: "currency")', function() {
      // uncomment below and update the code to test the property currency
      //var instance = new IpGeolocationApi.InlineResponse200();
      //expect(instance).to.be();
    });

    it('should have the property flag (base name: "flag")', function() {
      // uncomment below and update the code to test the property flag
      //var instance = new IpGeolocationApi.InlineResponse200();
      //expect(instance).to.be();
    });

    it('should have the property ipAddress (base name: "ip_address")', function() {
      // uncomment below and update the code to test the property ipAddress
      //var instance = new IpGeolocationApi.InlineResponse200();
      //expect(instance).to.be();
    });

    it('should have the property latitude (base name: "latitude")', function() {
      // uncomment below and update the code to test the property latitude
      //var instance = new IpGeolocationApi.InlineResponse200();
      //expect(instance).to.be();
    });

    it('should have the property longitude (base name: "longitude")', function() {
      // uncomment below and update the code to test the property longitude
      //var instance = new IpGeolocationApi.InlineResponse200();
      //expect(instance).to.be();
    });

    it('should have the property postalCode (base name: "postal_code")', function() {
      // uncomment below and update the code to test the property postalCode
      //var instance = new IpGeolocationApi.InlineResponse200();
      //expect(instance).to.be();
    });

    it('should have the property region (base name: "region")', function() {
      // uncomment below and update the code to test the property region
      //var instance = new IpGeolocationApi.InlineResponse200();
      //expect(instance).to.be();
    });

    it('should have the property regionGeonameId (base name: "region_geoname_id")', function() {
      // uncomment below and update the code to test the property regionGeonameId
      //var instance = new IpGeolocationApi.InlineResponse200();
      //expect(instance).to.be();
    });

    it('should have the property regionIsoCode (base name: "region_iso_code")', function() {
      // uncomment below and update the code to test the property regionIsoCode
      //var instance = new IpGeolocationApi.InlineResponse200();
      //expect(instance).to.be();
    });

    it('should have the property security (base name: "security")', function() {
      // uncomment below and update the code to test the property security
      //var instance = new IpGeolocationApi.InlineResponse200();
      //expect(instance).to.be();
    });

    it('should have the property timezone (base name: "timezone")', function() {
      // uncomment below and update the code to test the property timezone
      //var instance = new IpGeolocationApi.InlineResponse200();
      //expect(instance).to.be();
    });

  });

}));
