/**
 * Highways England API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISiteTypeResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISiteTypeResponse::OAISiteTypeResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISiteTypeResponse::OAISiteTypeResponse() {
    this->initializeModel();
}

OAISiteTypeResponse::~OAISiteTypeResponse() {}

void OAISiteTypeResponse::initializeModel() {

    m_row_count_isSet = false;
    m_row_count_isValid = false;

    m_sitetypes_isSet = false;
    m_sitetypes_isValid = false;
}

void OAISiteTypeResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISiteTypeResponse::fromJsonObject(QJsonObject json) {

    m_row_count_isValid = ::OpenAPI::fromJsonValue(m_row_count, json[QString("row_count")]);
    m_row_count_isSet = !json[QString("row_count")].isNull() && m_row_count_isValid;

    m_sitetypes_isValid = ::OpenAPI::fromJsonValue(m_sitetypes, json[QString("sitetypes")]);
    m_sitetypes_isSet = !json[QString("sitetypes")].isNull() && m_sitetypes_isValid;
}

QString OAISiteTypeResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISiteTypeResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_row_count_isSet) {
        obj.insert(QString("row_count"), ::OpenAPI::toJsonValue(m_row_count));
    }
    if (m_sitetypes.size() > 0) {
        obj.insert(QString("sitetypes"), ::OpenAPI::toJsonValue(m_sitetypes));
    }
    return obj;
}

qint32 OAISiteTypeResponse::getRowCount() const {
    return m_row_count;
}
void OAISiteTypeResponse::setRowCount(const qint32 &row_count) {
    m_row_count = row_count;
    m_row_count_isSet = true;
}

bool OAISiteTypeResponse::is_row_count_Set() const{
    return m_row_count_isSet;
}

bool OAISiteTypeResponse::is_row_count_Valid() const{
    return m_row_count_isValid;
}

QList<OAISiteType> OAISiteTypeResponse::getSitetypes() const {
    return m_sitetypes;
}
void OAISiteTypeResponse::setSitetypes(const QList<OAISiteType> &sitetypes) {
    m_sitetypes = sitetypes;
    m_sitetypes_isSet = true;
}

bool OAISiteTypeResponse::is_sitetypes_Set() const{
    return m_sitetypes_isSet;
}

bool OAISiteTypeResponse::is_sitetypes_Valid() const{
    return m_sitetypes_isValid;
}

bool OAISiteTypeResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_row_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sitetypes.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISiteTypeResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
