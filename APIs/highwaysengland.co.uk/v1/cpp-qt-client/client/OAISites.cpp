/**
 * Highways England API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISites.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISites::OAISites(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISites::OAISites() {
    this->initializeModel();
}

OAISites::~OAISites() {}

void OAISites::initializeModel() {

    m_active_isSet = false;
    m_active_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_lattitude_isSet = false;
    m_lattitude_isValid = false;

    m_longitude_isSet = false;
    m_longitude_isValid = false;

    m_site_id_isSet = false;
    m_site_id_isValid = false;
}

void OAISites::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISites::fromJsonObject(QJsonObject json) {

    m_active_isValid = ::OpenAPI::fromJsonValue(m_active, json[QString("Active")]);
    m_active_isSet = !json[QString("Active")].isNull() && m_active_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_lattitude_isValid = ::OpenAPI::fromJsonValue(m_lattitude, json[QString("Lattitude")]);
    m_lattitude_isSet = !json[QString("Lattitude")].isNull() && m_lattitude_isValid;

    m_longitude_isValid = ::OpenAPI::fromJsonValue(m_longitude, json[QString("Longitude")]);
    m_longitude_isSet = !json[QString("Longitude")].isNull() && m_longitude_isValid;

    m_site_id_isValid = ::OpenAPI::fromJsonValue(m_site_id, json[QString("SiteId")]);
    m_site_id_isSet = !json[QString("SiteId")].isNull() && m_site_id_isValid;
}

QString OAISites::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISites::asJsonObject() const {
    QJsonObject obj;
    if (m_active.size() > 0) {
        obj.insert(QString("Active"), ::OpenAPI::toJsonValue(m_active));
    }
    if (m_description.size() > 0) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_id.size() > 0) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_lattitude.size() > 0) {
        obj.insert(QString("Lattitude"), ::OpenAPI::toJsonValue(m_lattitude));
    }
    if (m_longitude.size() > 0) {
        obj.insert(QString("Longitude"), ::OpenAPI::toJsonValue(m_longitude));
    }
    if (m_site_id.size() > 0) {
        obj.insert(QString("SiteId"), ::OpenAPI::toJsonValue(m_site_id));
    }
    return obj;
}

QList<bool> OAISites::getActive() const {
    return m_active;
}
void OAISites::setActive(const QList<bool> &active) {
    m_active = active;
    m_active_isSet = true;
}

bool OAISites::is_active_Set() const{
    return m_active_isSet;
}

bool OAISites::is_active_Valid() const{
    return m_active_isValid;
}

QList<QString> OAISites::getDescription() const {
    return m_description;
}
void OAISites::setDescription(const QList<QString> &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAISites::is_description_Set() const{
    return m_description_isSet;
}

bool OAISites::is_description_Valid() const{
    return m_description_isValid;
}

QList<QString> OAISites::getId() const {
    return m_id;
}
void OAISites::setId(const QList<QString> &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAISites::is_id_Set() const{
    return m_id_isSet;
}

bool OAISites::is_id_Valid() const{
    return m_id_isValid;
}

QList<double> OAISites::getLattitude() const {
    return m_lattitude;
}
void OAISites::setLattitude(const QList<double> &lattitude) {
    m_lattitude = lattitude;
    m_lattitude_isSet = true;
}

bool OAISites::is_lattitude_Set() const{
    return m_lattitude_isSet;
}

bool OAISites::is_lattitude_Valid() const{
    return m_lattitude_isValid;
}

QList<double> OAISites::getLongitude() const {
    return m_longitude;
}
void OAISites::setLongitude(const QList<double> &longitude) {
    m_longitude = longitude;
    m_longitude_isSet = true;
}

bool OAISites::is_longitude_Set() const{
    return m_longitude_isSet;
}

bool OAISites::is_longitude_Valid() const{
    return m_longitude_isValid;
}

QList<QString> OAISites::getSiteId() const {
    return m_site_id;
}
void OAISites::setSiteId(const QList<QString> &site_id) {
    m_site_id = site_id;
    m_site_id_isSet = true;
}

bool OAISites::is_site_id_Set() const{
    return m_site_id_isSet;
}

bool OAISites::is_site_id_Valid() const{
    return m_site_id_isValid;
}

bool OAISites::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_active.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_description.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_id.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_lattitude.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_longitude.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_site_id.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISites::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
