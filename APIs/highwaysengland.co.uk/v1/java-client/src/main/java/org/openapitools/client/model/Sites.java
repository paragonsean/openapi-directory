/*
 * Highways England API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Sites
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:05:42.973620-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Sites {
  public static final String SERIALIZED_NAME_ACTIVE = "Active";
  @SerializedName(SERIALIZED_NAME_ACTIVE)
  private List<Boolean> active = new ArrayList<>();

  public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private List<String> description = new ArrayList<>();

  public static final String SERIALIZED_NAME_ID = "Id";
  @SerializedName(SERIALIZED_NAME_ID)
  private List<String> id = new ArrayList<>();

  public static final String SERIALIZED_NAME_LATTITUDE = "Lattitude";
  @SerializedName(SERIALIZED_NAME_LATTITUDE)
  private List<Double> lattitude = new ArrayList<>();

  public static final String SERIALIZED_NAME_LONGITUDE = "Longitude";
  @SerializedName(SERIALIZED_NAME_LONGITUDE)
  private List<Double> longitude = new ArrayList<>();

  public static final String SERIALIZED_NAME_SITE_ID = "SiteId";
  @SerializedName(SERIALIZED_NAME_SITE_ID)
  private List<String> siteId = new ArrayList<>();

  public Sites() {
  }

  public Sites active(List<Boolean> active) {
    this.active = active;
    return this;
  }

  public Sites addActiveItem(Boolean activeItem) {
    if (this.active == null) {
      this.active = new ArrayList<>();
    }
    this.active.add(activeItem);
    return this;
  }

  /**
   * Get active
   * @return active
   */
  @javax.annotation.Nullable
  public List<Boolean> getActive() {
    return active;
  }

  public void setActive(List<Boolean> active) {
    this.active = active;
  }


  public Sites description(List<String> description) {
    this.description = description;
    return this;
  }

  public Sites addDescriptionItem(String descriptionItem) {
    if (this.description == null) {
      this.description = new ArrayList<>();
    }
    this.description.add(descriptionItem);
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public List<String> getDescription() {
    return description;
  }

  public void setDescription(List<String> description) {
    this.description = description;
  }


  public Sites id(List<String> id) {
    this.id = id;
    return this;
  }

  public Sites addIdItem(String idItem) {
    if (this.id == null) {
      this.id = new ArrayList<>();
    }
    this.id.add(idItem);
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public List<String> getId() {
    return id;
  }

  public void setId(List<String> id) {
    this.id = id;
  }


  public Sites lattitude(List<Double> lattitude) {
    this.lattitude = lattitude;
    return this;
  }

  public Sites addLattitudeItem(Double lattitudeItem) {
    if (this.lattitude == null) {
      this.lattitude = new ArrayList<>();
    }
    this.lattitude.add(lattitudeItem);
    return this;
  }

  /**
   * Get lattitude
   * @return lattitude
   */
  @javax.annotation.Nullable
  public List<Double> getLattitude() {
    return lattitude;
  }

  public void setLattitude(List<Double> lattitude) {
    this.lattitude = lattitude;
  }


  public Sites longitude(List<Double> longitude) {
    this.longitude = longitude;
    return this;
  }

  public Sites addLongitudeItem(Double longitudeItem) {
    if (this.longitude == null) {
      this.longitude = new ArrayList<>();
    }
    this.longitude.add(longitudeItem);
    return this;
  }

  /**
   * Get longitude
   * @return longitude
   */
  @javax.annotation.Nullable
  public List<Double> getLongitude() {
    return longitude;
  }

  public void setLongitude(List<Double> longitude) {
    this.longitude = longitude;
  }


  public Sites siteId(List<String> siteId) {
    this.siteId = siteId;
    return this;
  }

  public Sites addSiteIdItem(String siteIdItem) {
    if (this.siteId == null) {
      this.siteId = new ArrayList<>();
    }
    this.siteId.add(siteIdItem);
    return this;
  }

  /**
   * Get siteId
   * @return siteId
   */
  @javax.annotation.Nullable
  public List<String> getSiteId() {
    return siteId;
  }

  public void setSiteId(List<String> siteId) {
    this.siteId = siteId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Sites sites = (Sites) o;
    return Objects.equals(this.active, sites.active) &&
        Objects.equals(this.description, sites.description) &&
        Objects.equals(this.id, sites.id) &&
        Objects.equals(this.lattitude, sites.lattitude) &&
        Objects.equals(this.longitude, sites.longitude) &&
        Objects.equals(this.siteId, sites.siteId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(active, description, id, lattitude, longitude, siteId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Sites {\n");
    sb.append("    active: ").append(toIndentedString(active)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    lattitude: ").append(toIndentedString(lattitude)).append("\n");
    sb.append("    longitude: ").append(toIndentedString(longitude)).append("\n");
    sb.append("    siteId: ").append(toIndentedString(siteId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Active");
    openapiFields.add("Description");
    openapiFields.add("Id");
    openapiFields.add("Lattitude");
    openapiFields.add("Longitude");
    openapiFields.add("SiteId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Sites
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Sites.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Sites is not found in the empty JSON string", Sites.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Sites.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Sites` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("Active") != null && !jsonObj.get("Active").isJsonNull() && !jsonObj.get("Active").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `Active` to be an array in the JSON string but got `%s`", jsonObj.get("Active").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("Description") != null && !jsonObj.get("Description").isJsonNull() && !jsonObj.get("Description").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `Description` to be an array in the JSON string but got `%s`", jsonObj.get("Description").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("Id") != null && !jsonObj.get("Id").isJsonNull() && !jsonObj.get("Id").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `Id` to be an array in the JSON string but got `%s`", jsonObj.get("Id").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("Lattitude") != null && !jsonObj.get("Lattitude").isJsonNull() && !jsonObj.get("Lattitude").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `Lattitude` to be an array in the JSON string but got `%s`", jsonObj.get("Lattitude").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("Longitude") != null && !jsonObj.get("Longitude").isJsonNull() && !jsonObj.get("Longitude").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `Longitude` to be an array in the JSON string but got `%s`", jsonObj.get("Longitude").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("SiteId") != null && !jsonObj.get("SiteId").isJsonNull() && !jsonObj.get("SiteId").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `SiteId` to be an array in the JSON string but got `%s`", jsonObj.get("SiteId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Sites.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Sites' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Sites> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Sites.class));

       return (TypeAdapter<T>) new TypeAdapter<Sites>() {
           @Override
           public void write(JsonWriter out, Sites value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Sites read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Sites given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Sites
   * @throws IOException if the JSON string is invalid with respect to Sites
   */
  public static Sites fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Sites.class);
  }

  /**
   * Convert an instance of Sites to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

