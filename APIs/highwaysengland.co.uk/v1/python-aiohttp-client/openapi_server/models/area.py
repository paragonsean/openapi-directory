# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class Area(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, id: str=None, name: str=None, x_latitude: str=None, x_longitude: str=None, y_latitude: str=None, y_longitude: str=None):
        """Area - a model defined in OpenAPI

        :param description: The description of this Area.
        :param id: The id of this Area.
        :param name: The name of this Area.
        :param x_latitude: The x_latitude of this Area.
        :param x_longitude: The x_longitude of this Area.
        :param y_latitude: The y_latitude of this Area.
        :param y_longitude: The y_longitude of this Area.
        """
        self.openapi_types = {
            'description': str,
            'id': str,
            'name': str,
            'x_latitude': str,
            'x_longitude': str,
            'y_latitude': str,
            'y_longitude': str
        }

        self.attribute_map = {
            'description': 'Description',
            'id': 'Id',
            'name': 'Name',
            'x_latitude': 'XLatitude',
            'x_longitude': 'XLongitude',
            'y_latitude': 'YLatitude',
            'y_longitude': 'YLongitude'
        }

        self._description = description
        self._id = id
        self._name = name
        self._x_latitude = x_latitude
        self._x_longitude = x_longitude
        self._y_latitude = y_latitude
        self._y_longitude = y_longitude

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Area':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Area of this Area.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this Area.


        :return: The description of this Area.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Area.


        :param description: The description of this Area.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def id(self):
        """Gets the id of this Area.


        :return: The id of this Area.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Area.


        :param id: The id of this Area.
        :type id: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Area.


        :return: The name of this Area.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Area.


        :param name: The name of this Area.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def x_latitude(self):
        """Gets the x_latitude of this Area.


        :return: The x_latitude of this Area.
        :rtype: str
        """
        return self._x_latitude

    @x_latitude.setter
    def x_latitude(self, x_latitude):
        """Sets the x_latitude of this Area.


        :param x_latitude: The x_latitude of this Area.
        :type x_latitude: str
        """
        if x_latitude is None:
            raise ValueError("Invalid value for `x_latitude`, must not be `None`")
        if x_latitude is not None and not re.search(r'^(\+|-)?(?:180(?:(?:\.0{1,6})?)|(?:[0-9]|[1-9][0-9]|1[0-7][0-9])(?:(?:\.[0-9]{1,15})?))$', x_latitude):
            raise ValueError("Invalid value for `x_latitude`, must be a follow pattern or equal to `/^(\+|-)?(?:180(?:(?:\.0{1,6})?)|(?:[0-9]|[1-9][0-9]|1[0-7][0-9])(?:(?:\.[0-9]{1,15})?))$/`")

        self._x_latitude = x_latitude

    @property
    def x_longitude(self):
        """Gets the x_longitude of this Area.


        :return: The x_longitude of this Area.
        :rtype: str
        """
        return self._x_longitude

    @x_longitude.setter
    def x_longitude(self, x_longitude):
        """Sets the x_longitude of this Area.


        :param x_longitude: The x_longitude of this Area.
        :type x_longitude: str
        """
        if x_longitude is None:
            raise ValueError("Invalid value for `x_longitude`, must not be `None`")
        if x_longitude is not None and not re.search(r'^(\+|-)?(?:90(?:(?:\.0{1,6})?)|(?:[0-9]|[1-8][0-9])(?:(?:\.[0-9]{1,15})?))$', x_longitude):
            raise ValueError("Invalid value for `x_longitude`, must be a follow pattern or equal to `/^(\+|-)?(?:90(?:(?:\.0{1,6})?)|(?:[0-9]|[1-8][0-9])(?:(?:\.[0-9]{1,15})?))$/`")

        self._x_longitude = x_longitude

    @property
    def y_latitude(self):
        """Gets the y_latitude of this Area.


        :return: The y_latitude of this Area.
        :rtype: str
        """
        return self._y_latitude

    @y_latitude.setter
    def y_latitude(self, y_latitude):
        """Sets the y_latitude of this Area.


        :param y_latitude: The y_latitude of this Area.
        :type y_latitude: str
        """
        if y_latitude is None:
            raise ValueError("Invalid value for `y_latitude`, must not be `None`")
        if y_latitude is not None and not re.search(r'^(\+|-)?(?:180(?:(?:\.0{1,6})?)|(?:[0-9]|[1-9][0-9]|1[0-7][0-9])(?:(?:\.[0-9]{1,15})?))$', y_latitude):
            raise ValueError("Invalid value for `y_latitude`, must be a follow pattern or equal to `/^(\+|-)?(?:180(?:(?:\.0{1,6})?)|(?:[0-9]|[1-9][0-9]|1[0-7][0-9])(?:(?:\.[0-9]{1,15})?))$/`")

        self._y_latitude = y_latitude

    @property
    def y_longitude(self):
        """Gets the y_longitude of this Area.


        :return: The y_longitude of this Area.
        :rtype: str
        """
        return self._y_longitude

    @y_longitude.setter
    def y_longitude(self, y_longitude):
        """Sets the y_longitude of this Area.


        :param y_longitude: The y_longitude of this Area.
        :type y_longitude: str
        """
        if y_longitude is None:
            raise ValueError("Invalid value for `y_longitude`, must not be `None`")
        if y_longitude is not None and not re.search(r'^(\+|-)?(?:90(?:(?:\.0{1,6})?)|(?:[0-9]|[1-8][0-9])(?:(?:\.[0-9]{1,15})?))$', y_longitude):
            raise ValueError("Invalid value for `y_longitude`, must be a follow pattern or equal to `/^(\+|-)?(?:90(?:(?:\.0{1,6})?)|(?:[0-9]|[1-8][0-9])(?:(?:\.[0-9]{1,15})?))$/`")

        self._y_longitude = y_longitude
