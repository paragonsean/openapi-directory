/**
 * Highways England API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import SiteResponse from '../model/SiteResponse';

/**
* Sites service.
* @module api/SitesApi
* @version v1
*/
export default class SitesApi {

    /**
    * Constructs a new SitesApi. 
    * @alias module:api/SitesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the sitesIndex operation.
     * @callback module:api/SitesApi~sitesIndexCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SiteResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of sites
     * @param {String} version 
     * @param {module:api/SitesApi~sitesIndexCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SiteResponse}
     */
    sitesIndex(version, callback) {
      let postBody = null;
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling sitesIndex");
      }

      let pathParams = {
        'version': version
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SiteResponse;
      return this.apiClient.callApi(
        '/v{version}/sites', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the vversionSitesSiteIdsGet operation.
     * @callback module:api/SitesApi~vversionSitesSiteIdsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SiteResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get selected sites
     * @param {String} siteIds site id
     * @param {String} version 
     * @param {module:api/SitesApi~vversionSitesSiteIdsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SiteResponse}
     */
    vversionSitesSiteIdsGet(siteIds, version, callback) {
      let postBody = null;
      // verify the required parameter 'siteIds' is set
      if (siteIds === undefined || siteIds === null) {
        throw new Error("Missing the required parameter 'siteIds' when calling vversionSitesSiteIdsGet");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling vversionSitesSiteIdsGet");
      }

      let pathParams = {
        'site_Ids': siteIds,
        'version': version
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SiteResponse;
      return this.apiClient.callApi(
        '/v{version}/sites/{site_Ids}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
