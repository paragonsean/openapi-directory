/**
 * Highways England API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DailyQualityResponse from '../model/DailyQualityResponse';
import OverallQualityResponse from '../model/OverallQualityResponse';

/**
* Quality service.
* @module api/QualityApi
* @version v1
*/
export default class QualityApi {

    /**
    * Constructs a new QualityApi. 
    * @alias module:api/QualityApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the qualityGetDailyDataQualityForSite operation.
     * @callback module:api/QualityApi~qualityGetDailyDataQualityForSiteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DailyQualityResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Site DailyQuality
     * @param {String} siteId 
     * @param {String} startDate The start date of the report in the format ddmmyyyy (i.e 31012016)
     * @param {String} endDate The end date of the report in the format ddmmyyyy (i.e 31012016)
     * @param {String} version 
     * @param {module:api/QualityApi~qualityGetDailyDataQualityForSiteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DailyQualityResponse}
     */
    qualityGetDailyDataQualityForSite(siteId, startDate, endDate, version, callback) {
      let postBody = null;
      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling qualityGetDailyDataQualityForSite");
      }
      // verify the required parameter 'startDate' is set
      if (startDate === undefined || startDate === null) {
        throw new Error("Missing the required parameter 'startDate' when calling qualityGetDailyDataQualityForSite");
      }
      // verify the required parameter 'endDate' is set
      if (endDate === undefined || endDate === null) {
        throw new Error("Missing the required parameter 'endDate' when calling qualityGetDailyDataQualityForSite");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling qualityGetDailyDataQualityForSite");
      }

      let pathParams = {
        'version': version
      };
      let queryParams = {
        'siteId': siteId,
        'start_date': startDate,
        'end_date': endDate
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DailyQualityResponse;
      return this.apiClient.callApi(
        '/v{version}/quality/daily', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the qualityGetOverallDataQualityForSites operation.
     * @callback module:api/QualityApi~qualityGetOverallDataQualityForSitesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OverallQualityResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Site OverallQuality
     * @param {String} sites Get site quality by site id delimited by ,
     * @param {String} startDate The start date of the report in the format ddmmyyyy (i.e 31012016)
     * @param {String} endDate The end date of the report in the format ddmmyyyy (i.e 31012016)
     * @param {String} version 
     * @param {module:api/QualityApi~qualityGetOverallDataQualityForSitesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OverallQualityResponse}
     */
    qualityGetOverallDataQualityForSites(sites, startDate, endDate, version, callback) {
      let postBody = null;
      // verify the required parameter 'sites' is set
      if (sites === undefined || sites === null) {
        throw new Error("Missing the required parameter 'sites' when calling qualityGetOverallDataQualityForSites");
      }
      // verify the required parameter 'startDate' is set
      if (startDate === undefined || startDate === null) {
        throw new Error("Missing the required parameter 'startDate' when calling qualityGetOverallDataQualityForSites");
      }
      // verify the required parameter 'endDate' is set
      if (endDate === undefined || endDate === null) {
        throw new Error("Missing the required parameter 'endDate' when calling qualityGetOverallDataQualityForSites");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling qualityGetOverallDataQualityForSites");
      }

      let pathParams = {
        'version': version
      };
      let queryParams = {
        'sites': sites,
        'start_date': startDate,
        'end_date': endDate
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OverallQualityResponse;
      return this.apiClient.callApi(
        '/v{version}/quality/overall', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
