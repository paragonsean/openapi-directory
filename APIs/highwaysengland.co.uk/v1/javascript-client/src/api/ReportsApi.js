/**
 * Highways England API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";

/**
* Reports service.
* @module api/ReportsApi
* @version v1
*/
export default class ReportsApi {

    /**
    * Constructs a new ReportsApi. 
    * @alias module:api/ReportsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the reportsIndex operation.
     * @callback module:api/ReportsApi~reportsIndexCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the daily report.
     * Get's the report.
     * @param {String} reportType Report Type Id (i.e Daily, Monthly, Annual)
     * @param {String} sites Comma separated list of site Ids.
     * @param {String} startDate The start date of the report in the format ddmmyyyy (i.e 31012016)
     * @param {String} endDate The end date of the report in the format ddmmyyyy (i.e 31012016)
     * @param {Number} page The page offset to return.
     * @param {Number} pageSize The number of rows to return.
     * @param {String} version 
     * @param {Object} opts Optional parameters
     * @param {Number} [reportSubTypeId] 
     * @param {module:api/ReportsApi~reportsIndexCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    reportsIndex(reportType, sites, startDate, endDate, page, pageSize, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'reportType' is set
      if (reportType === undefined || reportType === null) {
        throw new Error("Missing the required parameter 'reportType' when calling reportsIndex");
      }
      // verify the required parameter 'sites' is set
      if (sites === undefined || sites === null) {
        throw new Error("Missing the required parameter 'sites' when calling reportsIndex");
      }
      // verify the required parameter 'startDate' is set
      if (startDate === undefined || startDate === null) {
        throw new Error("Missing the required parameter 'startDate' when calling reportsIndex");
      }
      // verify the required parameter 'endDate' is set
      if (endDate === undefined || endDate === null) {
        throw new Error("Missing the required parameter 'endDate' when calling reportsIndex");
      }
      // verify the required parameter 'page' is set
      if (page === undefined || page === null) {
        throw new Error("Missing the required parameter 'page' when calling reportsIndex");
      }
      // verify the required parameter 'pageSize' is set
      if (pageSize === undefined || pageSize === null) {
        throw new Error("Missing the required parameter 'pageSize' when calling reportsIndex");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling reportsIndex");
      }

      let pathParams = {
        'report_type': reportType,
        'version': version
      };
      let queryParams = {
        'sites': sites,
        'start_date': startDate,
        'end_date': endDate,
        'page': page,
        'page_size': pageSize,
        'reportSubTypeId': opts['reportSubTypeId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v{version}/reports/{report_type}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the vversionReportsStartDateToEndDateReportTypeGet operation.
     * @callback module:api/ReportsApi~vversionReportsStartDateToEndDateReportTypeGetCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the daily report.
     * Get's the report.
     * @param {String} reportType Report Type Id (i.e Daily, Monthly, Annual)
     * @param {String} sites Comma separated list of site Ids.
     * @param {String} startDate The start date of the report in the format ddmmyyyy (i.e 31012016)
     * @param {String} endDate The end date of the report in the format ddmmyyyy (i.e 31012016)
     * @param {Number} page The page offset to return.
     * @param {Number} pageSize The number of rows to return.
     * @param {String} version 
     * @param {Object} opts Optional parameters
     * @param {Number} [reportSubTypeId] 
     * @param {module:api/ReportsApi~vversionReportsStartDateToEndDateReportTypeGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    vversionReportsStartDateToEndDateReportTypeGet(reportType, sites, startDate, endDate, page, pageSize, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'reportType' is set
      if (reportType === undefined || reportType === null) {
        throw new Error("Missing the required parameter 'reportType' when calling vversionReportsStartDateToEndDateReportTypeGet");
      }
      // verify the required parameter 'sites' is set
      if (sites === undefined || sites === null) {
        throw new Error("Missing the required parameter 'sites' when calling vversionReportsStartDateToEndDateReportTypeGet");
      }
      // verify the required parameter 'startDate' is set
      if (startDate === undefined || startDate === null) {
        throw new Error("Missing the required parameter 'startDate' when calling vversionReportsStartDateToEndDateReportTypeGet");
      }
      // verify the required parameter 'endDate' is set
      if (endDate === undefined || endDate === null) {
        throw new Error("Missing the required parameter 'endDate' when calling vversionReportsStartDateToEndDateReportTypeGet");
      }
      // verify the required parameter 'page' is set
      if (page === undefined || page === null) {
        throw new Error("Missing the required parameter 'page' when calling vversionReportsStartDateToEndDateReportTypeGet");
      }
      // verify the required parameter 'pageSize' is set
      if (pageSize === undefined || pageSize === null) {
        throw new Error("Missing the required parameter 'pageSize' when calling vversionReportsStartDateToEndDateReportTypeGet");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling vversionReportsStartDateToEndDateReportTypeGet");
      }

      let pathParams = {
        'report_type': reportType,
        'start_date': startDate,
        'end_date': endDate,
        'version': version
      };
      let queryParams = {
        'sites': sites,
        'page': page,
        'page_size': pageSize,
        'reportSubTypeId': opts['reportSubTypeId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v{version}/reports/{start_date}/to/{end_date}/{report_type}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
