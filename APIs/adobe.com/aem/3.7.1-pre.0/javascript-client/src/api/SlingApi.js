/**
 * Adobe Experience Manager (AEM) API
 * Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
 *
 * The version of the OpenAPI document: 3.7.1-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import KeystoreInfo from '../model/KeystoreInfo';
import TruststoreInfo from '../model/TruststoreInfo';

/**
* Sling service.
* @module api/SlingApi
* @version 3.7.1-pre.0
*/
export default class SlingApi {

    /**
    * Constructs a new SlingApi. 
    * @alias module:api/SlingApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deleteAgent operation.
     * @callback module:api/SlingApi~deleteAgentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} runmode 
     * @param {String} name 
     * @param {module:api/SlingApi~deleteAgentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteAgent(runmode, name, callback) {
      let postBody = null;
      // verify the required parameter 'runmode' is set
      if (runmode === undefined || runmode === null) {
        throw new Error("Missing the required parameter 'runmode' when calling deleteAgent");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling deleteAgent");
      }

      let pathParams = {
        'runmode': runmode,
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/etc/replication/agents.{runmode}/{name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteNode operation.
     * @callback module:api/SlingApi~deleteNodeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} path 
     * @param {String} name 
     * @param {module:api/SlingApi~deleteNodeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteNode(path, name, callback) {
      let postBody = null;
      // verify the required parameter 'path' is set
      if (path === undefined || path === null) {
        throw new Error("Missing the required parameter 'path' when calling deleteNode");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling deleteNode");
      }

      let pathParams = {
        'path': path,
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{path}/{name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAgent operation.
     * @callback module:api/SlingApi~getAgentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} runmode 
     * @param {String} name 
     * @param {module:api/SlingApi~getAgentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getAgent(runmode, name, callback) {
      let postBody = null;
      // verify the required parameter 'runmode' is set
      if (runmode === undefined || runmode === null) {
        throw new Error("Missing the required parameter 'runmode' when calling getAgent");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling getAgent");
      }

      let pathParams = {
        'runmode': runmode,
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/etc/replication/agents.{runmode}/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAgents operation.
     * @callback module:api/SlingApi~getAgentsCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} runmode 
     * @param {module:api/SlingApi~getAgentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    getAgents(runmode, callback) {
      let postBody = null;
      // verify the required parameter 'runmode' is set
      if (runmode === undefined || runmode === null) {
        throw new Error("Missing the required parameter 'runmode' when calling getAgents");
      }

      let pathParams = {
        'runmode': runmode
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/etc/replication/agents.{runmode}.-1.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAuthorizableKeystore operation.
     * @callback module:api/SlingApi~getAuthorizableKeystoreCallback
     * @param {String} error Error message, if any.
     * @param {module:model/KeystoreInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} intermediatePath 
     * @param {String} authorizableId 
     * @param {module:api/SlingApi~getAuthorizableKeystoreCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/KeystoreInfo}
     */
    getAuthorizableKeystore(intermediatePath, authorizableId, callback) {
      let postBody = null;
      // verify the required parameter 'intermediatePath' is set
      if (intermediatePath === undefined || intermediatePath === null) {
        throw new Error("Missing the required parameter 'intermediatePath' when calling getAuthorizableKeystore");
      }
      // verify the required parameter 'authorizableId' is set
      if (authorizableId === undefined || authorizableId === null) {
        throw new Error("Missing the required parameter 'authorizableId' when calling getAuthorizableKeystore");
      }

      let pathParams = {
        'intermediatePath': intermediatePath,
        'authorizableId': authorizableId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['text/plain'];
      let returnType = KeystoreInfo;
      return this.apiClient.callApi(
        '/{intermediatePath}/{authorizableId}.ks.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getKeystore operation.
     * @callback module:api/SlingApi~getKeystoreCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} intermediatePath 
     * @param {String} authorizableId 
     * @param {module:api/SlingApi~getKeystoreCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    getKeystore(intermediatePath, authorizableId, callback) {
      let postBody = null;
      // verify the required parameter 'intermediatePath' is set
      if (intermediatePath === undefined || intermediatePath === null) {
        throw new Error("Missing the required parameter 'intermediatePath' when calling getKeystore");
      }
      // verify the required parameter 'authorizableId' is set
      if (authorizableId === undefined || authorizableId === null) {
        throw new Error("Missing the required parameter 'authorizableId' when calling getKeystore");
      }

      let pathParams = {
        'intermediatePath': intermediatePath,
        'authorizableId': authorizableId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/octet-stream'];
      let returnType = File;
      return this.apiClient.callApi(
        '/{intermediatePath}/{authorizableId}/keystore/store.p12', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNode operation.
     * @callback module:api/SlingApi~getNodeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} path 
     * @param {String} name 
     * @param {module:api/SlingApi~getNodeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getNode(path, name, callback) {
      let postBody = null;
      // verify the required parameter 'path' is set
      if (path === undefined || path === null) {
        throw new Error("Missing the required parameter 'path' when calling getNode");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling getNode");
      }

      let pathParams = {
        'path': path,
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{path}/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPackage operation.
     * @callback module:api/SlingApi~getPackageCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} group 
     * @param {String} name 
     * @param {String} version 
     * @param {module:api/SlingApi~getPackageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    getPackage(group, name, version, callback) {
      let postBody = null;
      // verify the required parameter 'group' is set
      if (group === undefined || group === null) {
        throw new Error("Missing the required parameter 'group' when calling getPackage");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling getPackage");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling getPackage");
      }

      let pathParams = {
        'group': group,
        'name': name,
        'version': version
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/octet-stream'];
      let returnType = File;
      return this.apiClient.callApi(
        '/etc/packages/{group}/{name}-{version}.zip', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPackageFilter operation.
     * @callback module:api/SlingApi~getPackageFilterCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} group 
     * @param {String} name 
     * @param {String} version 
     * @param {module:api/SlingApi~getPackageFilterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    getPackageFilter(group, name, version, callback) {
      let postBody = null;
      // verify the required parameter 'group' is set
      if (group === undefined || group === null) {
        throw new Error("Missing the required parameter 'group' when calling getPackageFilter");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling getPackageFilter");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling getPackageFilter");
      }

      let pathParams = {
        'group': group,
        'name': name,
        'version': version
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/etc/packages/{group}/{name}-{version}.zip/jcr:content/vlt:definition/filter.tidy.2.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getQuery operation.
     * @callback module:api/SlingApi~getQueryCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} path 
     * @param {Number} pLimit 
     * @param {String} _1property 
     * @param {String} _1propertyValue 
     * @param {module:api/SlingApi~getQueryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    getQuery(path, pLimit, _1property, _1propertyValue, callback) {
      let postBody = null;
      // verify the required parameter 'path' is set
      if (path === undefined || path === null) {
        throw new Error("Missing the required parameter 'path' when calling getQuery");
      }
      // verify the required parameter 'pLimit' is set
      if (pLimit === undefined || pLimit === null) {
        throw new Error("Missing the required parameter 'pLimit' when calling getQuery");
      }
      // verify the required parameter '_1property' is set
      if (_1property === undefined || _1property === null) {
        throw new Error("Missing the required parameter '_1property' when calling getQuery");
      }
      // verify the required parameter '_1propertyValue' is set
      if (_1propertyValue === undefined || _1propertyValue === null) {
        throw new Error("Missing the required parameter '_1propertyValue' when calling getQuery");
      }

      let pathParams = {
      };
      let queryParams = {
        'path': path,
        'p.limit': pLimit,
        '1_property': _1property,
        '1_property.value': _1propertyValue
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/bin/querybuilder.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTruststore operation.
     * @callback module:api/SlingApi~getTruststoreCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/SlingApi~getTruststoreCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    getTruststore(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/octet-stream'];
      let returnType = File;
      return this.apiClient.callApi(
        '/etc/truststore/truststore.p12', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTruststoreInfo operation.
     * @callback module:api/SlingApi~getTruststoreInfoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TruststoreInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/SlingApi~getTruststoreInfoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TruststoreInfo}
     */
    getTruststoreInfo(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TruststoreInfo;
      return this.apiClient.callApi(
        '/libs/granite/security/truststore.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postAgent operation.
     * @callback module:api/SlingApi~postAgentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} runmode 
     * @param {String} name 
     * @param {Object} opts Optional parameters
     * @param {Boolean} [jcrcontentCqdistribute] 
     * @param {String} [jcrcontentCqdistributeTypeHint] 
     * @param {String} [jcrcontentCqname] 
     * @param {String} [jcrcontentCqtemplate] 
     * @param {Boolean} [jcrcontentEnabled] 
     * @param {String} [jcrcontentJcrdescription] 
     * @param {String} [jcrcontentJcrlastModified] 
     * @param {String} [jcrcontentJcrlastModifiedBy] 
     * @param {String} [jcrcontentJcrmixinTypes] 
     * @param {String} [jcrcontentJcrtitle] 
     * @param {String} [jcrcontentLogLevel] 
     * @param {Boolean} [jcrcontentNoStatusUpdate] 
     * @param {Boolean} [jcrcontentNoVersioning] 
     * @param {Number} [jcrcontentProtocolConnectTimeout] 
     * @param {Boolean} [jcrcontentProtocolHTTPConnectionClosed] 
     * @param {String} [jcrcontentProtocolHTTPExpired] 
     * @param {Array.<String>} [jcrcontentProtocolHTTPHeaders] 
     * @param {String} [jcrcontentProtocolHTTPHeadersTypeHint] 
     * @param {String} [jcrcontentProtocolHTTPMethod] 
     * @param {Boolean} [jcrcontentProtocolHTTPSRelaxed] 
     * @param {String} [jcrcontentProtocolInterface] 
     * @param {Number} [jcrcontentProtocolSocketTimeout] 
     * @param {String} [jcrcontentProtocolVersion] 
     * @param {String} [jcrcontentProxyNTLMDomain] 
     * @param {String} [jcrcontentProxyNTLMHost] 
     * @param {String} [jcrcontentProxyHost] 
     * @param {String} [jcrcontentProxyPassword] 
     * @param {Number} [jcrcontentProxyPort] 
     * @param {String} [jcrcontentProxyUser] 
     * @param {Number} [jcrcontentQueueBatchMaxSize] 
     * @param {String} [jcrcontentQueueBatchMode] 
     * @param {Number} [jcrcontentQueueBatchWaitTime] 
     * @param {String} [jcrcontentRetryDelay] 
     * @param {Boolean} [jcrcontentReverseReplication] 
     * @param {String} [jcrcontentSerializationType] 
     * @param {String} [jcrcontentSlingresourceType] 
     * @param {String} [jcrcontentSsl] 
     * @param {String} [jcrcontentTransportNTLMDomain] 
     * @param {String} [jcrcontentTransportNTLMHost] 
     * @param {String} [jcrcontentTransportPassword] 
     * @param {String} [jcrcontentTransportUri] 
     * @param {String} [jcrcontentTransportUser] 
     * @param {Boolean} [jcrcontentTriggerDistribute] 
     * @param {Boolean} [jcrcontentTriggerModified] 
     * @param {Boolean} [jcrcontentTriggerOnOffTime] 
     * @param {Boolean} [jcrcontentTriggerReceive] 
     * @param {Boolean} [jcrcontentTriggerSpecific] 
     * @param {String} [jcrcontentUserId] 
     * @param {String} [jcrprimaryType] 
     * @param {String} [operation] 
     * @param {module:api/SlingApi~postAgentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postAgent(runmode, name, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'runmode' is set
      if (runmode === undefined || runmode === null) {
        throw new Error("Missing the required parameter 'runmode' when calling postAgent");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling postAgent");
      }

      let pathParams = {
        'runmode': runmode,
        'name': name
      };
      let queryParams = {
        'jcr:content/cq:distribute': opts['jcrcontentCqdistribute'],
        'jcr:content/cq:distribute@TypeHint': opts['jcrcontentCqdistributeTypeHint'],
        'jcr:content/cq:name': opts['jcrcontentCqname'],
        'jcr:content/cq:template': opts['jcrcontentCqtemplate'],
        'jcr:content/enabled': opts['jcrcontentEnabled'],
        'jcr:content/jcr:description': opts['jcrcontentJcrdescription'],
        'jcr:content/jcr:lastModified': opts['jcrcontentJcrlastModified'],
        'jcr:content/jcr:lastModifiedBy': opts['jcrcontentJcrlastModifiedBy'],
        'jcr:content/jcr:mixinTypes': opts['jcrcontentJcrmixinTypes'],
        'jcr:content/jcr:title': opts['jcrcontentJcrtitle'],
        'jcr:content/logLevel': opts['jcrcontentLogLevel'],
        'jcr:content/noStatusUpdate': opts['jcrcontentNoStatusUpdate'],
        'jcr:content/noVersioning': opts['jcrcontentNoVersioning'],
        'jcr:content/protocolConnectTimeout': opts['jcrcontentProtocolConnectTimeout'],
        'jcr:content/protocolHTTPConnectionClosed': opts['jcrcontentProtocolHTTPConnectionClosed'],
        'jcr:content/protocolHTTPExpired': opts['jcrcontentProtocolHTTPExpired'],
        'jcr:content/protocolHTTPHeaders': this.apiClient.buildCollectionParam(opts['jcrcontentProtocolHTTPHeaders'], 'multi'),
        'jcr:content/protocolHTTPHeaders@TypeHint': opts['jcrcontentProtocolHTTPHeadersTypeHint'],
        'jcr:content/protocolHTTPMethod': opts['jcrcontentProtocolHTTPMethod'],
        'jcr:content/protocolHTTPSRelaxed': opts['jcrcontentProtocolHTTPSRelaxed'],
        'jcr:content/protocolInterface': opts['jcrcontentProtocolInterface'],
        'jcr:content/protocolSocketTimeout': opts['jcrcontentProtocolSocketTimeout'],
        'jcr:content/protocolVersion': opts['jcrcontentProtocolVersion'],
        'jcr:content/proxyNTLMDomain': opts['jcrcontentProxyNTLMDomain'],
        'jcr:content/proxyNTLMHost': opts['jcrcontentProxyNTLMHost'],
        'jcr:content/proxyHost': opts['jcrcontentProxyHost'],
        'jcr:content/proxyPassword': opts['jcrcontentProxyPassword'],
        'jcr:content/proxyPort': opts['jcrcontentProxyPort'],
        'jcr:content/proxyUser': opts['jcrcontentProxyUser'],
        'jcr:content/queueBatchMaxSize': opts['jcrcontentQueueBatchMaxSize'],
        'jcr:content/queueBatchMode': opts['jcrcontentQueueBatchMode'],
        'jcr:content/queueBatchWaitTime': opts['jcrcontentQueueBatchWaitTime'],
        'jcr:content/retryDelay': opts['jcrcontentRetryDelay'],
        'jcr:content/reverseReplication': opts['jcrcontentReverseReplication'],
        'jcr:content/serializationType': opts['jcrcontentSerializationType'],
        'jcr:content/sling:resourceType': opts['jcrcontentSlingresourceType'],
        'jcr:content/ssl': opts['jcrcontentSsl'],
        'jcr:content/transportNTLMDomain': opts['jcrcontentTransportNTLMDomain'],
        'jcr:content/transportNTLMHost': opts['jcrcontentTransportNTLMHost'],
        'jcr:content/transportPassword': opts['jcrcontentTransportPassword'],
        'jcr:content/transportUri': opts['jcrcontentTransportUri'],
        'jcr:content/transportUser': opts['jcrcontentTransportUser'],
        'jcr:content/triggerDistribute': opts['jcrcontentTriggerDistribute'],
        'jcr:content/triggerModified': opts['jcrcontentTriggerModified'],
        'jcr:content/triggerOnOffTime': opts['jcrcontentTriggerOnOffTime'],
        'jcr:content/triggerReceive': opts['jcrcontentTriggerReceive'],
        'jcr:content/triggerSpecific': opts['jcrcontentTriggerSpecific'],
        'jcr:content/userId': opts['jcrcontentUserId'],
        'jcr:primaryType': opts['jcrprimaryType'],
        ':operation': opts['operation']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/etc/replication/agents.{runmode}/{name}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postAuthorizableKeystore operation.
     * @callback module:api/SlingApi~postAuthorizableKeystoreCallback
     * @param {String} error Error message, if any.
     * @param {module:model/KeystoreInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} intermediatePath 
     * @param {String} authorizableId 
     * @param {Object} opts Optional parameters
     * @param {String} [operation] 
     * @param {String} [currentPassword] 
     * @param {String} [newPassword] 
     * @param {String} [rePassword] 
     * @param {String} [keyPassword] 
     * @param {String} [keyStorePass] 
     * @param {String} [alias] 
     * @param {String} [newAlias] 
     * @param {String} [removeAlias] 
     * @param {File} [certChain] 
     * @param {File} [keyStore] 
     * @param {File} [pk] 
     * @param {module:api/SlingApi~postAuthorizableKeystoreCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/KeystoreInfo}
     */
    postAuthorizableKeystore(intermediatePath, authorizableId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'intermediatePath' is set
      if (intermediatePath === undefined || intermediatePath === null) {
        throw new Error("Missing the required parameter 'intermediatePath' when calling postAuthorizableKeystore");
      }
      // verify the required parameter 'authorizableId' is set
      if (authorizableId === undefined || authorizableId === null) {
        throw new Error("Missing the required parameter 'authorizableId' when calling postAuthorizableKeystore");
      }

      let pathParams = {
        'intermediatePath': intermediatePath,
        'authorizableId': authorizableId
      };
      let queryParams = {
        ':operation': opts['operation'],
        'currentPassword': opts['currentPassword'],
        'newPassword': opts['newPassword'],
        'rePassword': opts['rePassword'],
        'keyPassword': opts['keyPassword'],
        'keyStorePass': opts['keyStorePass'],
        'alias': opts['alias'],
        'newAlias': opts['newAlias'],
        'removeAlias': opts['removeAlias']
      };
      let headerParams = {
      };
      let formParams = {
        'cert-chain': opts['certChain'],
        'keyStore': opts['keyStore'],
        'pk': opts['pk']
      };

      let authNames = ['aemAuth'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['text/plain'];
      let returnType = KeystoreInfo;
      return this.apiClient.callApi(
        '/{intermediatePath}/{authorizableId}.ks.html', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postAuthorizables operation.
     * @callback module:api/SlingApi~postAuthorizablesCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} authorizableId 
     * @param {String} intermediatePath 
     * @param {Object} opts Optional parameters
     * @param {String} [createUser] 
     * @param {String} [createGroup] 
     * @param {String} [reppassword] 
     * @param {String} [profileGivenName] 
     * @param {module:api/SlingApi~postAuthorizablesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    postAuthorizables(authorizableId, intermediatePath, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'authorizableId' is set
      if (authorizableId === undefined || authorizableId === null) {
        throw new Error("Missing the required parameter 'authorizableId' when calling postAuthorizables");
      }
      // verify the required parameter 'intermediatePath' is set
      if (intermediatePath === undefined || intermediatePath === null) {
        throw new Error("Missing the required parameter 'intermediatePath' when calling postAuthorizables");
      }

      let pathParams = {
      };
      let queryParams = {
        'authorizableId': authorizableId,
        'intermediatePath': intermediatePath,
        'createUser': opts['createUser'],
        'createGroup': opts['createGroup'],
        'rep:password': opts['reppassword'],
        'profile/givenName': opts['profileGivenName']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['text/html'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/libs/granite/security/post/authorizables', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postConfigAdobeGraniteSamlAuthenticationHandler operation.
     * @callback module:api/SlingApi~postConfigAdobeGraniteSamlAuthenticationHandlerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} [keyStorePassword] 
     * @param {String} [keyStorePasswordTypeHint] 
     * @param {Number} [serviceRanking] 
     * @param {String} [serviceRankingTypeHint] 
     * @param {Boolean} [idpHttpRedirect] 
     * @param {String} [idpHttpRedirectTypeHint] 
     * @param {Boolean} [createUser] 
     * @param {String} [createUserTypeHint] 
     * @param {String} [defaultRedirectUrl] 
     * @param {String} [defaultRedirectUrlTypeHint] 
     * @param {String} [userIDAttribute] 
     * @param {String} [userIDAttributeTypeHint] 
     * @param {Array.<String>} [defaultGroups] 
     * @param {String} [defaultGroupsTypeHint] 
     * @param {String} [idpCertAlias] 
     * @param {String} [idpCertAliasTypeHint] 
     * @param {Boolean} [addGroupMemberships] 
     * @param {String} [addGroupMembershipsTypeHint] 
     * @param {Array.<String>} [path] 
     * @param {String} [pathTypeHint] 
     * @param {Array.<String>} [synchronizeAttributes] 
     * @param {String} [synchronizeAttributesTypeHint] 
     * @param {Number} [clockTolerance] 
     * @param {String} [clockToleranceTypeHint] 
     * @param {String} [groupMembershipAttribute] 
     * @param {String} [groupMembershipAttributeTypeHint] 
     * @param {String} [idpUrl] 
     * @param {String} [idpUrlTypeHint] 
     * @param {String} [logoutUrl] 
     * @param {String} [logoutUrlTypeHint] 
     * @param {String} [serviceProviderEntityId] 
     * @param {String} [serviceProviderEntityIdTypeHint] 
     * @param {String} [assertionConsumerServiceURL] 
     * @param {String} [assertionConsumerServiceURLTypeHint] 
     * @param {Boolean} [handleLogout] 
     * @param {String} [handleLogoutTypeHint] 
     * @param {String} [spPrivateKeyAlias] 
     * @param {String} [spPrivateKeyAliasTypeHint] 
     * @param {Boolean} [useEncryption] 
     * @param {String} [useEncryptionTypeHint] 
     * @param {String} [nameIdFormat] 
     * @param {String} [nameIdFormatTypeHint] 
     * @param {String} [digestMethod] 
     * @param {String} [digestMethodTypeHint] 
     * @param {String} [signatureMethod] 
     * @param {String} [signatureMethodTypeHint] 
     * @param {String} [userIntermediatePath] 
     * @param {String} [userIntermediatePathTypeHint] 
     * @param {module:api/SlingApi~postConfigAdobeGraniteSamlAuthenticationHandlerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postConfigAdobeGraniteSamlAuthenticationHandler(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'keyStorePassword': opts['keyStorePassword'],
        'keyStorePassword@TypeHint': opts['keyStorePasswordTypeHint'],
        'service.ranking': opts['serviceRanking'],
        'service.ranking@TypeHint': opts['serviceRankingTypeHint'],
        'idpHttpRedirect': opts['idpHttpRedirect'],
        'idpHttpRedirect@TypeHint': opts['idpHttpRedirectTypeHint'],
        'createUser': opts['createUser'],
        'createUser@TypeHint': opts['createUserTypeHint'],
        'defaultRedirectUrl': opts['defaultRedirectUrl'],
        'defaultRedirectUrl@TypeHint': opts['defaultRedirectUrlTypeHint'],
        'userIDAttribute': opts['userIDAttribute'],
        'userIDAttribute@TypeHint': opts['userIDAttributeTypeHint'],
        'defaultGroups': this.apiClient.buildCollectionParam(opts['defaultGroups'], 'multi'),
        'defaultGroups@TypeHint': opts['defaultGroupsTypeHint'],
        'idpCertAlias': opts['idpCertAlias'],
        'idpCertAlias@TypeHint': opts['idpCertAliasTypeHint'],
        'addGroupMemberships': opts['addGroupMemberships'],
        'addGroupMemberships@TypeHint': opts['addGroupMembershipsTypeHint'],
        'path': this.apiClient.buildCollectionParam(opts['path'], 'multi'),
        'path@TypeHint': opts['pathTypeHint'],
        'synchronizeAttributes': this.apiClient.buildCollectionParam(opts['synchronizeAttributes'], 'multi'),
        'synchronizeAttributes@TypeHint': opts['synchronizeAttributesTypeHint'],
        'clockTolerance': opts['clockTolerance'],
        'clockTolerance@TypeHint': opts['clockToleranceTypeHint'],
        'groupMembershipAttribute': opts['groupMembershipAttribute'],
        'groupMembershipAttribute@TypeHint': opts['groupMembershipAttributeTypeHint'],
        'idpUrl': opts['idpUrl'],
        'idpUrl@TypeHint': opts['idpUrlTypeHint'],
        'logoutUrl': opts['logoutUrl'],
        'logoutUrl@TypeHint': opts['logoutUrlTypeHint'],
        'serviceProviderEntityId': opts['serviceProviderEntityId'],
        'serviceProviderEntityId@TypeHint': opts['serviceProviderEntityIdTypeHint'],
        'assertionConsumerServiceURL': opts['assertionConsumerServiceURL'],
        'assertionConsumerServiceURL@TypeHint': opts['assertionConsumerServiceURLTypeHint'],
        'handleLogout': opts['handleLogout'],
        'handleLogout@TypeHint': opts['handleLogoutTypeHint'],
        'spPrivateKeyAlias': opts['spPrivateKeyAlias'],
        'spPrivateKeyAlias@TypeHint': opts['spPrivateKeyAliasTypeHint'],
        'useEncryption': opts['useEncryption'],
        'useEncryption@TypeHint': opts['useEncryptionTypeHint'],
        'nameIdFormat': opts['nameIdFormat'],
        'nameIdFormat@TypeHint': opts['nameIdFormatTypeHint'],
        'digestMethod': opts['digestMethod'],
        'digestMethod@TypeHint': opts['digestMethodTypeHint'],
        'signatureMethod': opts['signatureMethod'],
        'signatureMethod@TypeHint': opts['signatureMethodTypeHint'],
        'userIntermediatePath': opts['userIntermediatePath'],
        'userIntermediatePath@TypeHint': opts['userIntermediatePathTypeHint']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/apps/system/config/com.adobe.granite.auth.saml.SamlAuthenticationHandler.config', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postConfigApacheFelixJettyBasedHttpService operation.
     * @callback module:api/SlingApi~postConfigApacheFelixJettyBasedHttpServiceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} [orgApacheFelixHttpsNio] 
     * @param {String} [orgApacheFelixHttpsNioTypeHint] 
     * @param {String} [orgApacheFelixHttpsKeystore] 
     * @param {String} [orgApacheFelixHttpsKeystoreTypeHint] 
     * @param {String} [orgApacheFelixHttpsKeystorePassword] 
     * @param {String} [orgApacheFelixHttpsKeystorePasswordTypeHint] 
     * @param {String} [orgApacheFelixHttpsKeystoreKey] 
     * @param {String} [orgApacheFelixHttpsKeystoreKeyTypeHint] 
     * @param {String} [orgApacheFelixHttpsKeystoreKeyPassword] 
     * @param {String} [orgApacheFelixHttpsKeystoreKeyPasswordTypeHint] 
     * @param {String} [orgApacheFelixHttpsTruststore] 
     * @param {String} [orgApacheFelixHttpsTruststoreTypeHint] 
     * @param {String} [orgApacheFelixHttpsTruststorePassword] 
     * @param {String} [orgApacheFelixHttpsTruststorePasswordTypeHint] 
     * @param {String} [orgApacheFelixHttpsClientcertificate] 
     * @param {String} [orgApacheFelixHttpsClientcertificateTypeHint] 
     * @param {Boolean} [orgApacheFelixHttpsEnable] 
     * @param {String} [orgApacheFelixHttpsEnableTypeHint] 
     * @param {String} [orgOsgiServiceHttpPortSecure] 
     * @param {String} [orgOsgiServiceHttpPortSecureTypeHint] 
     * @param {module:api/SlingApi~postConfigApacheFelixJettyBasedHttpServiceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postConfigApacheFelixJettyBasedHttpService(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'org.apache.felix.https.nio': opts['orgApacheFelixHttpsNio'],
        'org.apache.felix.https.nio@TypeHint': opts['orgApacheFelixHttpsNioTypeHint'],
        'org.apache.felix.https.keystore': opts['orgApacheFelixHttpsKeystore'],
        'org.apache.felix.https.keystore@TypeHint': opts['orgApacheFelixHttpsKeystoreTypeHint'],
        'org.apache.felix.https.keystore.password': opts['orgApacheFelixHttpsKeystorePassword'],
        'org.apache.felix.https.keystore.password@TypeHint': opts['orgApacheFelixHttpsKeystorePasswordTypeHint'],
        'org.apache.felix.https.keystore.key': opts['orgApacheFelixHttpsKeystoreKey'],
        'org.apache.felix.https.keystore.key@TypeHint': opts['orgApacheFelixHttpsKeystoreKeyTypeHint'],
        'org.apache.felix.https.keystore.key.password': opts['orgApacheFelixHttpsKeystoreKeyPassword'],
        'org.apache.felix.https.keystore.key.password@TypeHint': opts['orgApacheFelixHttpsKeystoreKeyPasswordTypeHint'],
        'org.apache.felix.https.truststore': opts['orgApacheFelixHttpsTruststore'],
        'org.apache.felix.https.truststore@TypeHint': opts['orgApacheFelixHttpsTruststoreTypeHint'],
        'org.apache.felix.https.truststore.password': opts['orgApacheFelixHttpsTruststorePassword'],
        'org.apache.felix.https.truststore.password@TypeHint': opts['orgApacheFelixHttpsTruststorePasswordTypeHint'],
        'org.apache.felix.https.clientcertificate': opts['orgApacheFelixHttpsClientcertificate'],
        'org.apache.felix.https.clientcertificate@TypeHint': opts['orgApacheFelixHttpsClientcertificateTypeHint'],
        'org.apache.felix.https.enable': opts['orgApacheFelixHttpsEnable'],
        'org.apache.felix.https.enable@TypeHint': opts['orgApacheFelixHttpsEnableTypeHint'],
        'org.osgi.service.http.port.secure': opts['orgOsgiServiceHttpPortSecure'],
        'org.osgi.service.http.port.secure@TypeHint': opts['orgOsgiServiceHttpPortSecureTypeHint']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/apps/system/config/org.apache.felix.http', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postConfigApacheHttpComponentsProxyConfiguration operation.
     * @callback module:api/SlingApi~postConfigApacheHttpComponentsProxyConfigurationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} [proxyHost] 
     * @param {String} [proxyHostTypeHint] 
     * @param {Number} [proxyPort] 
     * @param {String} [proxyPortTypeHint] 
     * @param {Array.<String>} [proxyExceptions] 
     * @param {String} [proxyExceptionsTypeHint] 
     * @param {Boolean} [proxyEnabled] 
     * @param {String} [proxyEnabledTypeHint] 
     * @param {String} [proxyUser] 
     * @param {String} [proxyUserTypeHint] 
     * @param {String} [proxyPassword] 
     * @param {String} [proxyPasswordTypeHint] 
     * @param {module:api/SlingApi~postConfigApacheHttpComponentsProxyConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postConfigApacheHttpComponentsProxyConfiguration(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'proxy.host': opts['proxyHost'],
        'proxy.host@TypeHint': opts['proxyHostTypeHint'],
        'proxy.port': opts['proxyPort'],
        'proxy.port@TypeHint': opts['proxyPortTypeHint'],
        'proxy.exceptions': this.apiClient.buildCollectionParam(opts['proxyExceptions'], 'multi'),
        'proxy.exceptions@TypeHint': opts['proxyExceptionsTypeHint'],
        'proxy.enabled': opts['proxyEnabled'],
        'proxy.enabled@TypeHint': opts['proxyEnabledTypeHint'],
        'proxy.user': opts['proxyUser'],
        'proxy.user@TypeHint': opts['proxyUserTypeHint'],
        'proxy.password': opts['proxyPassword'],
        'proxy.password@TypeHint': opts['proxyPasswordTypeHint']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/apps/system/config/org.apache.http.proxyconfigurator.config', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postConfigApacheSlingDavExServlet operation.
     * @callback module:api/SlingApi~postConfigApacheSlingDavExServletCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} [alias] 
     * @param {String} [aliasTypeHint] 
     * @param {Boolean} [davCreateAbsoluteUri] 
     * @param {String} [davCreateAbsoluteUriTypeHint] 
     * @param {module:api/SlingApi~postConfigApacheSlingDavExServletCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postConfigApacheSlingDavExServlet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'alias': opts['alias'],
        'alias@TypeHint': opts['aliasTypeHint'],
        'dav.create-absolute-uri': opts['davCreateAbsoluteUri'],
        'dav.create-absolute-uri@TypeHint': opts['davCreateAbsoluteUriTypeHint']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/apps/system/config/org.apache.sling.jcr.davex.impl.servlets.SlingDavExServlet', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postConfigApacheSlingGetServlet operation.
     * @callback module:api/SlingApi~postConfigApacheSlingGetServletCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} [jsonMaximumresults] 
     * @param {String} [jsonMaximumresultsTypeHint] 
     * @param {Boolean} [enableHtml] 
     * @param {String} [enableHtmlTypeHint] 
     * @param {Boolean} [enableTxt] 
     * @param {String} [enableTxtTypeHint] 
     * @param {Boolean} [enableXml] 
     * @param {String} [enableXmlTypeHint] 
     * @param {module:api/SlingApi~postConfigApacheSlingGetServletCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postConfigApacheSlingGetServlet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'json.maximumresults': opts['jsonMaximumresults'],
        'json.maximumresults@TypeHint': opts['jsonMaximumresultsTypeHint'],
        'enable.html': opts['enableHtml'],
        'enable.html@TypeHint': opts['enableHtmlTypeHint'],
        'enable.txt': opts['enableTxt'],
        'enable.txt@TypeHint': opts['enableTxtTypeHint'],
        'enable.xml': opts['enableXml'],
        'enable.xml@TypeHint': opts['enableXmlTypeHint']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/apps/system/config/org.apache.sling.servlets.get.DefaultGetServlet', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postConfigApacheSlingReferrerFilter operation.
     * @callback module:api/SlingApi~postConfigApacheSlingReferrerFilterCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} [allowEmpty] 
     * @param {String} [allowEmptyTypeHint] 
     * @param {String} [allowHosts] 
     * @param {String} [allowHostsTypeHint] 
     * @param {String} [allowHostsRegexp] 
     * @param {String} [allowHostsRegexpTypeHint] 
     * @param {String} [filterMethods] 
     * @param {String} [filterMethodsTypeHint] 
     * @param {module:api/SlingApi~postConfigApacheSlingReferrerFilterCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postConfigApacheSlingReferrerFilter(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'allow.empty': opts['allowEmpty'],
        'allow.empty@TypeHint': opts['allowEmptyTypeHint'],
        'allow.hosts': opts['allowHosts'],
        'allow.hosts@TypeHint': opts['allowHostsTypeHint'],
        'allow.hosts.regexp': opts['allowHostsRegexp'],
        'allow.hosts.regexp@TypeHint': opts['allowHostsRegexpTypeHint'],
        'filter.methods': opts['filterMethods'],
        'filter.methods@TypeHint': opts['filterMethodsTypeHint']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/apps/system/config/org.apache.sling.security.impl.ReferrerFilter', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postConfigProperty operation.
     * @callback module:api/SlingApi~postConfigPropertyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} configNodeName 
     * @param {module:api/SlingApi~postConfigPropertyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postConfigProperty(configNodeName, callback) {
      let postBody = null;
      // verify the required parameter 'configNodeName' is set
      if (configNodeName === undefined || configNodeName === null) {
        throw new Error("Missing the required parameter 'configNodeName' when calling postConfigProperty");
      }

      let pathParams = {
        'configNodeName': configNodeName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/apps/system/config/{configNodeName}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postNode operation.
     * @callback module:api/SlingApi~postNodeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} path 
     * @param {String} name 
     * @param {Object} opts Optional parameters
     * @param {String} [operation] 
     * @param {String} [deleteAuthorizable] 
     * @param {File} [file] 
     * @param {module:api/SlingApi~postNodeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postNode(path, name, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'path' is set
      if (path === undefined || path === null) {
        throw new Error("Missing the required parameter 'path' when calling postNode");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling postNode");
      }

      let pathParams = {
        'path': path,
        'name': name
      };
      let queryParams = {
        ':operation': opts['operation'],
        'deleteAuthorizable': opts['deleteAuthorizable']
      };
      let headerParams = {
      };
      let formParams = {
        'file': opts['file']
      };

      let authNames = ['aemAuth'];
      let contentTypes = ['multipart/form-data'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{path}/{name}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postNodeRw operation.
     * @callback module:api/SlingApi~postNodeRwCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} path 
     * @param {String} name 
     * @param {Object} opts Optional parameters
     * @param {String} [addMembers] 
     * @param {module:api/SlingApi~postNodeRwCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postNodeRw(path, name, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'path' is set
      if (path === undefined || path === null) {
        throw new Error("Missing the required parameter 'path' when calling postNodeRw");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling postNodeRw");
      }

      let pathParams = {
        'path': path,
        'name': name
      };
      let queryParams = {
        'addMembers': opts['addMembers']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{path}/{name}.rw.html', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postPath operation.
     * @callback module:api/SlingApi~postPathCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} path 
     * @param {String} jcrprimaryType 
     * @param {String} name 
     * @param {module:api/SlingApi~postPathCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postPath(path, jcrprimaryType, name, callback) {
      let postBody = null;
      // verify the required parameter 'path' is set
      if (path === undefined || path === null) {
        throw new Error("Missing the required parameter 'path' when calling postPath");
      }
      // verify the required parameter 'jcrprimaryType' is set
      if (jcrprimaryType === undefined || jcrprimaryType === null) {
        throw new Error("Missing the required parameter 'jcrprimaryType' when calling postPath");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling postPath");
      }

      let pathParams = {
        'path': path
      };
      let queryParams = {
        'jcr:primaryType': jcrprimaryType,
        ':name': name
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{path}/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postQuery operation.
     * @callback module:api/SlingApi~postQueryCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} path 
     * @param {Number} pLimit 
     * @param {String} _1property 
     * @param {String} _1propertyValue 
     * @param {module:api/SlingApi~postQueryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    postQuery(path, pLimit, _1property, _1propertyValue, callback) {
      let postBody = null;
      // verify the required parameter 'path' is set
      if (path === undefined || path === null) {
        throw new Error("Missing the required parameter 'path' when calling postQuery");
      }
      // verify the required parameter 'pLimit' is set
      if (pLimit === undefined || pLimit === null) {
        throw new Error("Missing the required parameter 'pLimit' when calling postQuery");
      }
      // verify the required parameter '_1property' is set
      if (_1property === undefined || _1property === null) {
        throw new Error("Missing the required parameter '_1property' when calling postQuery");
      }
      // verify the required parameter '_1propertyValue' is set
      if (_1propertyValue === undefined || _1propertyValue === null) {
        throw new Error("Missing the required parameter '_1propertyValue' when calling postQuery");
      }

      let pathParams = {
      };
      let queryParams = {
        'path': path,
        'p.limit': pLimit,
        '1_property': _1property,
        '1_property.value': _1propertyValue
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/bin/querybuilder.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postTreeActivation operation.
     * @callback module:api/SlingApi~postTreeActivationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Boolean} ignoredeactivated 
     * @param {Boolean} onlymodified 
     * @param {String} path 
     * @param {String} cmd 
     * @param {module:api/SlingApi~postTreeActivationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postTreeActivation(ignoredeactivated, onlymodified, path, cmd, callback) {
      let postBody = null;
      // verify the required parameter 'ignoredeactivated' is set
      if (ignoredeactivated === undefined || ignoredeactivated === null) {
        throw new Error("Missing the required parameter 'ignoredeactivated' when calling postTreeActivation");
      }
      // verify the required parameter 'onlymodified' is set
      if (onlymodified === undefined || onlymodified === null) {
        throw new Error("Missing the required parameter 'onlymodified' when calling postTreeActivation");
      }
      // verify the required parameter 'path' is set
      if (path === undefined || path === null) {
        throw new Error("Missing the required parameter 'path' when calling postTreeActivation");
      }
      // verify the required parameter 'cmd' is set
      if (cmd === undefined || cmd === null) {
        throw new Error("Missing the required parameter 'cmd' when calling postTreeActivation");
      }

      let pathParams = {
      };
      let queryParams = {
        'ignoredeactivated': ignoredeactivated,
        'onlymodified': onlymodified,
        'path': path,
        'cmd': cmd
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/libs/replication/treeactivation.html', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postTruststore operation.
     * @callback module:api/SlingApi~postTruststoreCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} [operation] 
     * @param {String} [newPassword] 
     * @param {String} [rePassword] 
     * @param {String} [keyStoreType] 
     * @param {String} [removeAlias] 
     * @param {File} [certificate] 
     * @param {module:api/SlingApi~postTruststoreCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    postTruststore(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        ':operation': opts['operation'],
        'newPassword': opts['newPassword'],
        'rePassword': opts['rePassword'],
        'keyStoreType': opts['keyStoreType'],
        'removeAlias': opts['removeAlias']
      };
      let headerParams = {
      };
      let formParams = {
        'certificate': opts['certificate']
      };

      let authNames = ['aemAuth'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['text/plain'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/libs/granite/security/post/truststore', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postTruststorePKCS12 operation.
     * @callback module:api/SlingApi~postTruststorePKCS12Callback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {File} [truststoreP12] 
     * @param {module:api/SlingApi~postTruststorePKCS12Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    postTruststorePKCS12(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'truststore.p12': opts['truststoreP12']
      };

      let authNames = ['aemAuth'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['text/plain'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/etc/truststore', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
