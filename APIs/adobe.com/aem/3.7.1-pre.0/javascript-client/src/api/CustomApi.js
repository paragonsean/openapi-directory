/**
 * Adobe Experience Manager (AEM) API
 * Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
 *
 * The version of the OpenAPI document: 3.7.1-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";

/**
* Custom service.
* @module api/CustomApi
* @version 3.7.1-pre.0
*/
export default class CustomApi {

    /**
    * Constructs a new CustomApi. 
    * @alias module:api/CustomApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getAemHealthCheck operation.
     * @callback module:api/CustomApi~getAemHealthCheckCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} [tags] 
     * @param {Boolean} [combineTagsOr] 
     * @param {module:api/CustomApi~getAemHealthCheckCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    getAemHealthCheck(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'tags': opts['tags'],
        'combineTagsOr': opts['combineTagsOr']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/system/health', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postConfigAemHealthCheckServlet operation.
     * @callback module:api/CustomApi~postConfigAemHealthCheckServletCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [bundlesIgnored] 
     * @param {String} [bundlesIgnoredTypeHint] 
     * @param {module:api/CustomApi~postConfigAemHealthCheckServletCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postConfigAemHealthCheckServlet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'bundles.ignored': this.apiClient.buildCollectionParam(opts['bundlesIgnored'], 'multi'),
        'bundles.ignored@TypeHint': opts['bundlesIgnoredTypeHint']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/apps/system/config/com.shinesolutions.healthcheck.hc.impl.ActiveBundleHealthCheck', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postConfigAemPasswordReset operation.
     * @callback module:api/CustomApi~postConfigAemPasswordResetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [pwdresetAuthorizables] 
     * @param {String} [pwdresetAuthorizablesTypeHint] 
     * @param {module:api/CustomApi~postConfigAemPasswordResetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postConfigAemPasswordReset(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'pwdreset.authorizables': this.apiClient.buildCollectionParam(opts['pwdresetAuthorizables'], 'multi'),
        'pwdreset.authorizables@TypeHint': opts['pwdresetAuthorizablesTypeHint']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/apps/system/config/com.shinesolutions.aem.passwordreset.Activator', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
