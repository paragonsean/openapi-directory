/**
 * Adobe Experience Manager (AEM) API
 * Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
 *
 * The version of the OpenAPI document: 3.7.1-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import InstallStatus from '../model/InstallStatus';

/**
* Crx service.
* @module api/CrxApi
* @version 3.7.1-pre.0
*/
export default class CrxApi {

    /**
    * Constructs a new CrxApi. 
    * @alias module:api/CrxApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getCrxdeStatus operation.
     * @callback module:api/CrxApi~getCrxdeStatusCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/CrxApi~getCrxdeStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    getCrxdeStatus(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['plain/text'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/crx/server/crx.default/jcr:root/.1.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getInstallStatus operation.
     * @callback module:api/CrxApi~getInstallStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InstallStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/CrxApi~getInstallStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InstallStatus}
     */
    getInstallStatus(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InstallStatus;
      return this.apiClient.callApi(
        '/crx/packmgr/installstatus.jsp', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPackageManagerServlet operation.
     * @callback module:api/CrxApi~getPackageManagerServletCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/CrxApi~getPackageManagerServletCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getPackageManagerServlet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['text/html'];
      let returnType = null;
      return this.apiClient.callApi(
        '/crx/packmgr/service/script.html', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postPackageService operation.
     * @callback module:api/CrxApi~postPackageServiceCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} cmd 
     * @param {module:api/CrxApi~postPackageServiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    postPackageService(cmd, callback) {
      let postBody = null;
      // verify the required parameter 'cmd' is set
      if (cmd === undefined || cmd === null) {
        throw new Error("Missing the required parameter 'cmd' when calling postPackageService");
      }

      let pathParams = {
      };
      let queryParams = {
        'cmd': cmd
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/crx/packmgr/service.jsp', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postPackageServiceJson operation.
     * @callback module:api/CrxApi~postPackageServiceJsonCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} path 
     * @param {String} cmd 
     * @param {Object} opts Optional parameters
     * @param {String} [groupName] 
     * @param {String} [packageName] 
     * @param {String} [packageVersion] 
     * @param {String} [charset] 
     * @param {Boolean} [force] 
     * @param {Boolean} [recursive] 
     * @param {File} [_package] 
     * @param {module:api/CrxApi~postPackageServiceJsonCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    postPackageServiceJson(path, cmd, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'path' is set
      if (path === undefined || path === null) {
        throw new Error("Missing the required parameter 'path' when calling postPackageServiceJson");
      }
      // verify the required parameter 'cmd' is set
      if (cmd === undefined || cmd === null) {
        throw new Error("Missing the required parameter 'cmd' when calling postPackageServiceJson");
      }

      let pathParams = {
        'path': path
      };
      let queryParams = {
        'cmd': cmd,
        'groupName': opts['groupName'],
        'packageName': opts['packageName'],
        'packageVersion': opts['packageVersion'],
        '_charset_': opts['charset'],
        'force': opts['force'],
        'recursive': opts['recursive']
      };
      let headerParams = {
      };
      let formParams = {
        'package': opts['_package']
      };

      let authNames = ['aemAuth'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/crx/packmgr/service/.json/{path}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postPackageUpdate operation.
     * @callback module:api/CrxApi~postPackageUpdateCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} groupName 
     * @param {String} packageName 
     * @param {String} version 
     * @param {String} path 
     * @param {Object} opts Optional parameters
     * @param {String} [filter] 
     * @param {String} [charset] 
     * @param {module:api/CrxApi~postPackageUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    postPackageUpdate(groupName, packageName, version, path, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'groupName' is set
      if (groupName === undefined || groupName === null) {
        throw new Error("Missing the required parameter 'groupName' when calling postPackageUpdate");
      }
      // verify the required parameter 'packageName' is set
      if (packageName === undefined || packageName === null) {
        throw new Error("Missing the required parameter 'packageName' when calling postPackageUpdate");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling postPackageUpdate");
      }
      // verify the required parameter 'path' is set
      if (path === undefined || path === null) {
        throw new Error("Missing the required parameter 'path' when calling postPackageUpdate");
      }

      let pathParams = {
      };
      let queryParams = {
        'groupName': groupName,
        'packageName': packageName,
        'version': version,
        'path': path,
        'filter': opts['filter'],
        '_charset_': opts['charset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/crx/packmgr/update.jsp', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postSetPassword operation.
     * @callback module:api/CrxApi~postSetPasswordCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} old 
     * @param {String} plain 
     * @param {String} verify 
     * @param {module:api/CrxApi~postSetPasswordCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    postSetPassword(old, plain, verify, callback) {
      let postBody = null;
      // verify the required parameter 'old' is set
      if (old === undefined || old === null) {
        throw new Error("Missing the required parameter 'old' when calling postSetPassword");
      }
      // verify the required parameter 'plain' is set
      if (plain === undefined || plain === null) {
        throw new Error("Missing the required parameter 'plain' when calling postSetPassword");
      }
      // verify the required parameter 'verify' is set
      if (verify === undefined || verify === null) {
        throw new Error("Missing the required parameter 'verify' when calling postSetPassword");
      }

      let pathParams = {
      };
      let queryParams = {
        'old': old,
        'plain': plain,
        'verify': verify
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['aemAuth'];
      let contentTypes = [];
      let accepts = ['text/plain'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/crx/explorer/ui/setpassword.jsp', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
