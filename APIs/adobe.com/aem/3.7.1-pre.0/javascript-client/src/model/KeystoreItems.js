/**
 * Adobe Experience Manager (AEM) API
 * Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
 *
 * The version of the OpenAPI document: 3.7.1-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import KeystoreChainItems from './KeystoreChainItems';

/**
 * The KeystoreItems model module.
 * @module model/KeystoreItems
 * @version 3.7.1-pre.0
 */
class KeystoreItems {
    /**
     * Constructs a new <code>KeystoreItems</code>.
     * @alias module:model/KeystoreItems
     */
    constructor() { 
        
        KeystoreItems.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>KeystoreItems</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/KeystoreItems} obj Optional instance to populate.
     * @return {module:model/KeystoreItems} The populated <code>KeystoreItems</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new KeystoreItems();

            if (data.hasOwnProperty('algorithm')) {
                obj['algorithm'] = ApiClient.convertToType(data['algorithm'], 'String');
            }
            if (data.hasOwnProperty('alias')) {
                obj['alias'] = ApiClient.convertToType(data['alias'], 'String');
            }
            if (data.hasOwnProperty('chain')) {
                obj['chain'] = ApiClient.convertToType(data['chain'], [KeystoreChainItems]);
            }
            if (data.hasOwnProperty('entryType')) {
                obj['entryType'] = ApiClient.convertToType(data['entryType'], 'String');
            }
            if (data.hasOwnProperty('format')) {
                obj['format'] = ApiClient.convertToType(data['format'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>KeystoreItems</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>KeystoreItems</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['algorithm'] && !(typeof data['algorithm'] === 'string' || data['algorithm'] instanceof String)) {
            throw new Error("Expected the field `algorithm` to be a primitive type in the JSON string but got " + data['algorithm']);
        }
        // ensure the json data is a string
        if (data['alias'] && !(typeof data['alias'] === 'string' || data['alias'] instanceof String)) {
            throw new Error("Expected the field `alias` to be a primitive type in the JSON string but got " + data['alias']);
        }
        if (data['chain']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['chain'])) {
                throw new Error("Expected the field `chain` to be an array in the JSON data but got " + data['chain']);
            }
            // validate the optional field `chain` (array)
            for (const item of data['chain']) {
                KeystoreChainItems.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['entryType'] && !(typeof data['entryType'] === 'string' || data['entryType'] instanceof String)) {
            throw new Error("Expected the field `entryType` to be a primitive type in the JSON string but got " + data['entryType']);
        }
        // ensure the json data is a string
        if (data['format'] && !(typeof data['format'] === 'string' || data['format'] instanceof String)) {
            throw new Error("Expected the field `format` to be a primitive type in the JSON string but got " + data['format']);
        }

        return true;
    }


}



/**
 * e.g. \"RSA\"
 * @member {String} algorithm
 */
KeystoreItems.prototype['algorithm'] = undefined;

/**
 * Keystore alias name
 * @member {String} alias
 */
KeystoreItems.prototype['alias'] = undefined;

/**
 * @member {Array.<module:model/KeystoreChainItems>} chain
 */
KeystoreItems.prototype['chain'] = undefined;

/**
 * e.g. \"privateKey\"
 * @member {String} entryType
 */
KeystoreItems.prototype['entryType'] = undefined;

/**
 * e.g. \"PKCS#8\"
 * @member {String} format
 */
KeystoreItems.prototype['format'] = undefined;






export default KeystoreItems;

