/**
 * Adobe Experience Manager (AEM) API
 * Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
 *
 * The version of the OpenAPI document: 3.7.1-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SamlConfigurationProperties from './SamlConfigurationProperties';

/**
 * The SamlConfigurationInfo model module.
 * @module model/SamlConfigurationInfo
 * @version 3.7.1-pre.0
 */
class SamlConfigurationInfo {
    /**
     * Constructs a new <code>SamlConfigurationInfo</code>.
     * @alias module:model/SamlConfigurationInfo
     */
    constructor() { 
        
        SamlConfigurationInfo.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SamlConfigurationInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SamlConfigurationInfo} obj Optional instance to populate.
     * @return {module:model/SamlConfigurationInfo} The populated <code>SamlConfigurationInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SamlConfigurationInfo();

            if (data.hasOwnProperty('bundle_location')) {
                obj['bundle_location'] = ApiClient.convertToType(data['bundle_location'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('pid')) {
                obj['pid'] = ApiClient.convertToType(data['pid'], 'String');
            }
            if (data.hasOwnProperty('properties')) {
                obj['properties'] = SamlConfigurationProperties.constructFromObject(data['properties']);
            }
            if (data.hasOwnProperty('service_location')) {
                obj['service_location'] = ApiClient.convertToType(data['service_location'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SamlConfigurationInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SamlConfigurationInfo</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['bundle_location'] && !(typeof data['bundle_location'] === 'string' || data['bundle_location'] instanceof String)) {
            throw new Error("Expected the field `bundle_location` to be a primitive type in the JSON string but got " + data['bundle_location']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['pid'] && !(typeof data['pid'] === 'string' || data['pid'] instanceof String)) {
            throw new Error("Expected the field `pid` to be a primitive type in the JSON string but got " + data['pid']);
        }
        // validate the optional field `properties`
        if (data['properties']) { // data not null
          SamlConfigurationProperties.validateJSON(data['properties']);
        }
        // ensure the json data is a string
        if (data['service_location'] && !(typeof data['service_location'] === 'string' || data['service_location'] instanceof String)) {
            throw new Error("Expected the field `service_location` to be a primitive type in the JSON string but got " + data['service_location']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }

        return true;
    }


}



/**
 * needed for configuration binding
 * @member {String} bundle_location
 */
SamlConfigurationInfo.prototype['bundle_location'] = undefined;

/**
 * Title
 * @member {String} description
 */
SamlConfigurationInfo.prototype['description'] = undefined;

/**
 * Persistent Identity (PID)
 * @member {String} pid
 */
SamlConfigurationInfo.prototype['pid'] = undefined;

/**
 * @member {module:model/SamlConfigurationProperties} properties
 */
SamlConfigurationInfo.prototype['properties'] = undefined;

/**
 * needed for configuraiton binding
 * @member {String} service_location
 */
SamlConfigurationInfo.prototype['service_location'] = undefined;

/**
 * Title
 * @member {String} title
 */
SamlConfigurationInfo.prototype['title'] = undefined;






export default SamlConfigurationInfo;

