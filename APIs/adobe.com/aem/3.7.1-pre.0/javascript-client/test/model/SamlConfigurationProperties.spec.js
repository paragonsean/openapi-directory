/**
 * Adobe Experience Manager (AEM) API
 * Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
 *
 * The version of the OpenAPI document: 3.7.1-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AdobeExperienceManagerAemApi);
  }
}(this, function(expect, AdobeExperienceManagerAemApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AdobeExperienceManagerAemApi.SamlConfigurationProperties();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('SamlConfigurationProperties', function() {
    it('should create an instance of SamlConfigurationProperties', function() {
      // uncomment below and update the code to test SamlConfigurationProperties
      //var instance = new AdobeExperienceManagerAemApi.SamlConfigurationProperties();
      //expect(instance).to.be.a(AdobeExperienceManagerAemApi.SamlConfigurationProperties);
    });

    it('should have the property addGroupMemberships (base name: "addGroupMemberships")', function() {
      // uncomment below and update the code to test the property addGroupMemberships
      //var instance = new AdobeExperienceManagerAemApi.SamlConfigurationProperties();
      //expect(instance).to.be();
    });

    it('should have the property assertionConsumerServiceURL (base name: "assertionConsumerServiceURL")', function() {
      // uncomment below and update the code to test the property assertionConsumerServiceURL
      //var instance = new AdobeExperienceManagerAemApi.SamlConfigurationProperties();
      //expect(instance).to.be();
    });

    it('should have the property clockTolerance (base name: "clockTolerance")', function() {
      // uncomment below and update the code to test the property clockTolerance
      //var instance = new AdobeExperienceManagerAemApi.SamlConfigurationProperties();
      //expect(instance).to.be();
    });

    it('should have the property createUser (base name: "createUser")', function() {
      // uncomment below and update the code to test the property createUser
      //var instance = new AdobeExperienceManagerAemApi.SamlConfigurationProperties();
      //expect(instance).to.be();
    });

    it('should have the property defaultGroups (base name: "defaultGroups")', function() {
      // uncomment below and update the code to test the property defaultGroups
      //var instance = new AdobeExperienceManagerAemApi.SamlConfigurationProperties();
      //expect(instance).to.be();
    });

    it('should have the property defaultRedirectUrl (base name: "defaultRedirectUrl")', function() {
      // uncomment below and update the code to test the property defaultRedirectUrl
      //var instance = new AdobeExperienceManagerAemApi.SamlConfigurationProperties();
      //expect(instance).to.be();
    });

    it('should have the property digestMethod (base name: "digestMethod")', function() {
      // uncomment below and update the code to test the property digestMethod
      //var instance = new AdobeExperienceManagerAemApi.SamlConfigurationProperties();
      //expect(instance).to.be();
    });

    it('should have the property groupMembershipAttribute (base name: "groupMembershipAttribute")', function() {
      // uncomment below and update the code to test the property groupMembershipAttribute
      //var instance = new AdobeExperienceManagerAemApi.SamlConfigurationProperties();
      //expect(instance).to.be();
    });

    it('should have the property handleLogout (base name: "handleLogout")', function() {
      // uncomment below and update the code to test the property handleLogout
      //var instance = new AdobeExperienceManagerAemApi.SamlConfigurationProperties();
      //expect(instance).to.be();
    });

    it('should have the property idpCertAlias (base name: "idpCertAlias")', function() {
      // uncomment below and update the code to test the property idpCertAlias
      //var instance = new AdobeExperienceManagerAemApi.SamlConfigurationProperties();
      //expect(instance).to.be();
    });

    it('should have the property idpHttpRedirect (base name: "idpHttpRedirect")', function() {
      // uncomment below and update the code to test the property idpHttpRedirect
      //var instance = new AdobeExperienceManagerAemApi.SamlConfigurationProperties();
      //expect(instance).to.be();
    });

    it('should have the property idpUrl (base name: "idpUrl")', function() {
      // uncomment below and update the code to test the property idpUrl
      //var instance = new AdobeExperienceManagerAemApi.SamlConfigurationProperties();
      //expect(instance).to.be();
    });

    it('should have the property keyStorePassword (base name: "keyStorePassword")', function() {
      // uncomment below and update the code to test the property keyStorePassword
      //var instance = new AdobeExperienceManagerAemApi.SamlConfigurationProperties();
      //expect(instance).to.be();
    });

    it('should have the property logoutUrl (base name: "logoutUrl")', function() {
      // uncomment below and update the code to test the property logoutUrl
      //var instance = new AdobeExperienceManagerAemApi.SamlConfigurationProperties();
      //expect(instance).to.be();
    });

    it('should have the property nameIdFormat (base name: "nameIdFormat")', function() {
      // uncomment below and update the code to test the property nameIdFormat
      //var instance = new AdobeExperienceManagerAemApi.SamlConfigurationProperties();
      //expect(instance).to.be();
    });

    it('should have the property path (base name: "path")', function() {
      // uncomment below and update the code to test the property path
      //var instance = new AdobeExperienceManagerAemApi.SamlConfigurationProperties();
      //expect(instance).to.be();
    });

    it('should have the property serviceRanking (base name: "service.ranking")', function() {
      // uncomment below and update the code to test the property serviceRanking
      //var instance = new AdobeExperienceManagerAemApi.SamlConfigurationProperties();
      //expect(instance).to.be();
    });

    it('should have the property serviceProviderEntityId (base name: "serviceProviderEntityId")', function() {
      // uncomment below and update the code to test the property serviceProviderEntityId
      //var instance = new AdobeExperienceManagerAemApi.SamlConfigurationProperties();
      //expect(instance).to.be();
    });

    it('should have the property signatureMethod (base name: "signatureMethod")', function() {
      // uncomment below and update the code to test the property signatureMethod
      //var instance = new AdobeExperienceManagerAemApi.SamlConfigurationProperties();
      //expect(instance).to.be();
    });

    it('should have the property spPrivateKeyAlias (base name: "spPrivateKeyAlias")', function() {
      // uncomment below and update the code to test the property spPrivateKeyAlias
      //var instance = new AdobeExperienceManagerAemApi.SamlConfigurationProperties();
      //expect(instance).to.be();
    });

    it('should have the property synchronizeAttributes (base name: "synchronizeAttributes")', function() {
      // uncomment below and update the code to test the property synchronizeAttributes
      //var instance = new AdobeExperienceManagerAemApi.SamlConfigurationProperties();
      //expect(instance).to.be();
    });

    it('should have the property useEncryption (base name: "useEncryption")', function() {
      // uncomment below and update the code to test the property useEncryption
      //var instance = new AdobeExperienceManagerAemApi.SamlConfigurationProperties();
      //expect(instance).to.be();
    });

    it('should have the property userIDAttribute (base name: "userIDAttribute")', function() {
      // uncomment below and update the code to test the property userIDAttribute
      //var instance = new AdobeExperienceManagerAemApi.SamlConfigurationProperties();
      //expect(instance).to.be();
    });

    it('should have the property userIntermediatePath (base name: "userIntermediatePath")', function() {
      // uncomment below and update the code to test the property userIntermediatePath
      //var instance = new AdobeExperienceManagerAemApi.SamlConfigurationProperties();
      //expect(instance).to.be();
    });

  });

}));
