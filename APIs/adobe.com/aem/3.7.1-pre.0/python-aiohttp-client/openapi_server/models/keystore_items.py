# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.keystore_chain_items import KeystoreChainItems
from openapi_server import util


class KeystoreItems(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, algorithm: str=None, alias: str=None, chain: List[KeystoreChainItems]=None, entry_type: str=None, format: str=None):
        """KeystoreItems - a model defined in OpenAPI

        :param algorithm: The algorithm of this KeystoreItems.
        :param alias: The alias of this KeystoreItems.
        :param chain: The chain of this KeystoreItems.
        :param entry_type: The entry_type of this KeystoreItems.
        :param format: The format of this KeystoreItems.
        """
        self.openapi_types = {
            'algorithm': str,
            'alias': str,
            'chain': List[KeystoreChainItems],
            'entry_type': str,
            'format': str
        }

        self.attribute_map = {
            'algorithm': 'algorithm',
            'alias': 'alias',
            'chain': 'chain',
            'entry_type': 'entryType',
            'format': 'format'
        }

        self._algorithm = algorithm
        self._alias = alias
        self._chain = chain
        self._entry_type = entry_type
        self._format = format

    @classmethod
    def from_dict(cls, dikt: dict) -> 'KeystoreItems':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The KeystoreItems of this KeystoreItems.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def algorithm(self):
        """Gets the algorithm of this KeystoreItems.

        e.g. \"RSA\"

        :return: The algorithm of this KeystoreItems.
        :rtype: str
        """
        return self._algorithm

    @algorithm.setter
    def algorithm(self, algorithm):
        """Sets the algorithm of this KeystoreItems.

        e.g. \"RSA\"

        :param algorithm: The algorithm of this KeystoreItems.
        :type algorithm: str
        """

        self._algorithm = algorithm

    @property
    def alias(self):
        """Gets the alias of this KeystoreItems.

        Keystore alias name

        :return: The alias of this KeystoreItems.
        :rtype: str
        """
        return self._alias

    @alias.setter
    def alias(self, alias):
        """Sets the alias of this KeystoreItems.

        Keystore alias name

        :param alias: The alias of this KeystoreItems.
        :type alias: str
        """

        self._alias = alias

    @property
    def chain(self):
        """Gets the chain of this KeystoreItems.


        :return: The chain of this KeystoreItems.
        :rtype: List[KeystoreChainItems]
        """
        return self._chain

    @chain.setter
    def chain(self, chain):
        """Sets the chain of this KeystoreItems.


        :param chain: The chain of this KeystoreItems.
        :type chain: List[KeystoreChainItems]
        """

        self._chain = chain

    @property
    def entry_type(self):
        """Gets the entry_type of this KeystoreItems.

        e.g. \"privateKey\"

        :return: The entry_type of this KeystoreItems.
        :rtype: str
        """
        return self._entry_type

    @entry_type.setter
    def entry_type(self, entry_type):
        """Sets the entry_type of this KeystoreItems.

        e.g. \"privateKey\"

        :param entry_type: The entry_type of this KeystoreItems.
        :type entry_type: str
        """

        self._entry_type = entry_type

    @property
    def format(self):
        """Gets the format of this KeystoreItems.

        e.g. \"PKCS#8\"

        :return: The format of this KeystoreItems.
        :rtype: str
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this KeystoreItems.

        e.g. \"PKCS#8\"

        :param format: The format of this KeystoreItems.
        :type format: str
        """

        self._format = format
