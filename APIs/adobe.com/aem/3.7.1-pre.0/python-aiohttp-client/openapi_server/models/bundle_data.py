# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.bundle_data_prop import BundleDataProp
from openapi_server import util


class BundleData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, category: str=None, fragment: bool=None, id: int=None, name: str=None, props: List[BundleDataProp]=None, state: str=None, state_raw: int=None, symbolic_name: str=None, version: str=None):
        """BundleData - a model defined in OpenAPI

        :param category: The category of this BundleData.
        :param fragment: The fragment of this BundleData.
        :param id: The id of this BundleData.
        :param name: The name of this BundleData.
        :param props: The props of this BundleData.
        :param state: The state of this BundleData.
        :param state_raw: The state_raw of this BundleData.
        :param symbolic_name: The symbolic_name of this BundleData.
        :param version: The version of this BundleData.
        """
        self.openapi_types = {
            'category': str,
            'fragment': bool,
            'id': int,
            'name': str,
            'props': List[BundleDataProp],
            'state': str,
            'state_raw': int,
            'symbolic_name': str,
            'version': str
        }

        self.attribute_map = {
            'category': 'category',
            'fragment': 'fragment',
            'id': 'id',
            'name': 'name',
            'props': 'props',
            'state': 'state',
            'state_raw': 'stateRaw',
            'symbolic_name': 'symbolicName',
            'version': 'version'
        }

        self._category = category
        self._fragment = fragment
        self._id = id
        self._name = name
        self._props = props
        self._state = state
        self._state_raw = state_raw
        self._symbolic_name = symbolic_name
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BundleData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BundleData of this BundleData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def category(self):
        """Gets the category of this BundleData.

        Bundle category

        :return: The category of this BundleData.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this BundleData.

        Bundle category

        :param category: The category of this BundleData.
        :type category: str
        """

        self._category = category

    @property
    def fragment(self):
        """Gets the fragment of this BundleData.

        Is bundle a fragment

        :return: The fragment of this BundleData.
        :rtype: bool
        """
        return self._fragment

    @fragment.setter
    def fragment(self, fragment):
        """Sets the fragment of this BundleData.

        Is bundle a fragment

        :param fragment: The fragment of this BundleData.
        :type fragment: bool
        """

        self._fragment = fragment

    @property
    def id(self):
        """Gets the id of this BundleData.

        Bundle ID

        :return: The id of this BundleData.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this BundleData.

        Bundle ID

        :param id: The id of this BundleData.
        :type id: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this BundleData.

        Bundle name

        :return: The name of this BundleData.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this BundleData.

        Bundle name

        :param name: The name of this BundleData.
        :type name: str
        """

        self._name = name

    @property
    def props(self):
        """Gets the props of this BundleData.


        :return: The props of this BundleData.
        :rtype: List[BundleDataProp]
        """
        return self._props

    @props.setter
    def props(self, props):
        """Sets the props of this BundleData.


        :param props: The props of this BundleData.
        :type props: List[BundleDataProp]
        """

        self._props = props

    @property
    def state(self):
        """Gets the state of this BundleData.

        Bundle state value

        :return: The state of this BundleData.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this BundleData.

        Bundle state value

        :param state: The state of this BundleData.
        :type state: str
        """

        self._state = state

    @property
    def state_raw(self):
        """Gets the state_raw of this BundleData.

        Numeric raw bundle state value

        :return: The state_raw of this BundleData.
        :rtype: int
        """
        return self._state_raw

    @state_raw.setter
    def state_raw(self, state_raw):
        """Sets the state_raw of this BundleData.

        Numeric raw bundle state value

        :param state_raw: The state_raw of this BundleData.
        :type state_raw: int
        """

        self._state_raw = state_raw

    @property
    def symbolic_name(self):
        """Gets the symbolic_name of this BundleData.

        Bundle symbolic name

        :return: The symbolic_name of this BundleData.
        :rtype: str
        """
        return self._symbolic_name

    @symbolic_name.setter
    def symbolic_name(self, symbolic_name):
        """Sets the symbolic_name of this BundleData.

        Bundle symbolic name

        :param symbolic_name: The symbolic_name of this BundleData.
        :type symbolic_name: str
        """

        self._symbolic_name = symbolic_name

    @property
    def version(self):
        """Gets the version of this BundleData.

        Bundle version

        :return: The version of this BundleData.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this BundleData.

        Bundle version

        :param version: The version of this BundleData.
        :type version: str
        """

        self._version = version
