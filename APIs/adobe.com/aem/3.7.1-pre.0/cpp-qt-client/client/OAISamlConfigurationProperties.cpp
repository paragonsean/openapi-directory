/**
 * Adobe Experience Manager (AEM) API
 * Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
 *
 * The version of the OpenAPI document: 3.7.1-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISamlConfigurationProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISamlConfigurationProperties::OAISamlConfigurationProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISamlConfigurationProperties::OAISamlConfigurationProperties() {
    this->initializeModel();
}

OAISamlConfigurationProperties::~OAISamlConfigurationProperties() {}

void OAISamlConfigurationProperties::initializeModel() {

    m_add_group_memberships_isSet = false;
    m_add_group_memberships_isValid = false;

    m_assertion_consumer_service_url_isSet = false;
    m_assertion_consumer_service_url_isValid = false;

    m_clock_tolerance_isSet = false;
    m_clock_tolerance_isValid = false;

    m_create_user_isSet = false;
    m_create_user_isValid = false;

    m_default_groups_isSet = false;
    m_default_groups_isValid = false;

    m_default_redirect_url_isSet = false;
    m_default_redirect_url_isValid = false;

    m_digest_method_isSet = false;
    m_digest_method_isValid = false;

    m_group_membership_attribute_isSet = false;
    m_group_membership_attribute_isValid = false;

    m_handle_logout_isSet = false;
    m_handle_logout_isValid = false;

    m_idp_cert_alias_isSet = false;
    m_idp_cert_alias_isValid = false;

    m_idp_http_redirect_isSet = false;
    m_idp_http_redirect_isValid = false;

    m_idp_url_isSet = false;
    m_idp_url_isValid = false;

    m_key_store_password_isSet = false;
    m_key_store_password_isValid = false;

    m_logout_url_isSet = false;
    m_logout_url_isValid = false;

    m_name_id_format_isSet = false;
    m_name_id_format_isValid = false;

    m_path_isSet = false;
    m_path_isValid = false;

    m_service_ranking_isSet = false;
    m_service_ranking_isValid = false;

    m_service_provider_entity_id_isSet = false;
    m_service_provider_entity_id_isValid = false;

    m_signature_method_isSet = false;
    m_signature_method_isValid = false;

    m_sp_private_key_alias_isSet = false;
    m_sp_private_key_alias_isValid = false;

    m_synchronize_attributes_isSet = false;
    m_synchronize_attributes_isValid = false;

    m_use_encryption_isSet = false;
    m_use_encryption_isValid = false;

    m_user_id_attribute_isSet = false;
    m_user_id_attribute_isValid = false;

    m_user_intermediate_path_isSet = false;
    m_user_intermediate_path_isValid = false;
}

void OAISamlConfigurationProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISamlConfigurationProperties::fromJsonObject(QJsonObject json) {

    m_add_group_memberships_isValid = ::OpenAPI::fromJsonValue(m_add_group_memberships, json[QString("addGroupMemberships")]);
    m_add_group_memberships_isSet = !json[QString("addGroupMemberships")].isNull() && m_add_group_memberships_isValid;

    m_assertion_consumer_service_url_isValid = ::OpenAPI::fromJsonValue(m_assertion_consumer_service_url, json[QString("assertionConsumerServiceURL")]);
    m_assertion_consumer_service_url_isSet = !json[QString("assertionConsumerServiceURL")].isNull() && m_assertion_consumer_service_url_isValid;

    m_clock_tolerance_isValid = ::OpenAPI::fromJsonValue(m_clock_tolerance, json[QString("clockTolerance")]);
    m_clock_tolerance_isSet = !json[QString("clockTolerance")].isNull() && m_clock_tolerance_isValid;

    m_create_user_isValid = ::OpenAPI::fromJsonValue(m_create_user, json[QString("createUser")]);
    m_create_user_isSet = !json[QString("createUser")].isNull() && m_create_user_isValid;

    m_default_groups_isValid = ::OpenAPI::fromJsonValue(m_default_groups, json[QString("defaultGroups")]);
    m_default_groups_isSet = !json[QString("defaultGroups")].isNull() && m_default_groups_isValid;

    m_default_redirect_url_isValid = ::OpenAPI::fromJsonValue(m_default_redirect_url, json[QString("defaultRedirectUrl")]);
    m_default_redirect_url_isSet = !json[QString("defaultRedirectUrl")].isNull() && m_default_redirect_url_isValid;

    m_digest_method_isValid = ::OpenAPI::fromJsonValue(m_digest_method, json[QString("digestMethod")]);
    m_digest_method_isSet = !json[QString("digestMethod")].isNull() && m_digest_method_isValid;

    m_group_membership_attribute_isValid = ::OpenAPI::fromJsonValue(m_group_membership_attribute, json[QString("groupMembershipAttribute")]);
    m_group_membership_attribute_isSet = !json[QString("groupMembershipAttribute")].isNull() && m_group_membership_attribute_isValid;

    m_handle_logout_isValid = ::OpenAPI::fromJsonValue(m_handle_logout, json[QString("handleLogout")]);
    m_handle_logout_isSet = !json[QString("handleLogout")].isNull() && m_handle_logout_isValid;

    m_idp_cert_alias_isValid = ::OpenAPI::fromJsonValue(m_idp_cert_alias, json[QString("idpCertAlias")]);
    m_idp_cert_alias_isSet = !json[QString("idpCertAlias")].isNull() && m_idp_cert_alias_isValid;

    m_idp_http_redirect_isValid = ::OpenAPI::fromJsonValue(m_idp_http_redirect, json[QString("idpHttpRedirect")]);
    m_idp_http_redirect_isSet = !json[QString("idpHttpRedirect")].isNull() && m_idp_http_redirect_isValid;

    m_idp_url_isValid = ::OpenAPI::fromJsonValue(m_idp_url, json[QString("idpUrl")]);
    m_idp_url_isSet = !json[QString("idpUrl")].isNull() && m_idp_url_isValid;

    m_key_store_password_isValid = ::OpenAPI::fromJsonValue(m_key_store_password, json[QString("keyStorePassword")]);
    m_key_store_password_isSet = !json[QString("keyStorePassword")].isNull() && m_key_store_password_isValid;

    m_logout_url_isValid = ::OpenAPI::fromJsonValue(m_logout_url, json[QString("logoutUrl")]);
    m_logout_url_isSet = !json[QString("logoutUrl")].isNull() && m_logout_url_isValid;

    m_name_id_format_isValid = ::OpenAPI::fromJsonValue(m_name_id_format, json[QString("nameIdFormat")]);
    m_name_id_format_isSet = !json[QString("nameIdFormat")].isNull() && m_name_id_format_isValid;

    m_path_isValid = ::OpenAPI::fromJsonValue(m_path, json[QString("path")]);
    m_path_isSet = !json[QString("path")].isNull() && m_path_isValid;

    m_service_ranking_isValid = ::OpenAPI::fromJsonValue(m_service_ranking, json[QString("service.ranking")]);
    m_service_ranking_isSet = !json[QString("service.ranking")].isNull() && m_service_ranking_isValid;

    m_service_provider_entity_id_isValid = ::OpenAPI::fromJsonValue(m_service_provider_entity_id, json[QString("serviceProviderEntityId")]);
    m_service_provider_entity_id_isSet = !json[QString("serviceProviderEntityId")].isNull() && m_service_provider_entity_id_isValid;

    m_signature_method_isValid = ::OpenAPI::fromJsonValue(m_signature_method, json[QString("signatureMethod")]);
    m_signature_method_isSet = !json[QString("signatureMethod")].isNull() && m_signature_method_isValid;

    m_sp_private_key_alias_isValid = ::OpenAPI::fromJsonValue(m_sp_private_key_alias, json[QString("spPrivateKeyAlias")]);
    m_sp_private_key_alias_isSet = !json[QString("spPrivateKeyAlias")].isNull() && m_sp_private_key_alias_isValid;

    m_synchronize_attributes_isValid = ::OpenAPI::fromJsonValue(m_synchronize_attributes, json[QString("synchronizeAttributes")]);
    m_synchronize_attributes_isSet = !json[QString("synchronizeAttributes")].isNull() && m_synchronize_attributes_isValid;

    m_use_encryption_isValid = ::OpenAPI::fromJsonValue(m_use_encryption, json[QString("useEncryption")]);
    m_use_encryption_isSet = !json[QString("useEncryption")].isNull() && m_use_encryption_isValid;

    m_user_id_attribute_isValid = ::OpenAPI::fromJsonValue(m_user_id_attribute, json[QString("userIDAttribute")]);
    m_user_id_attribute_isSet = !json[QString("userIDAttribute")].isNull() && m_user_id_attribute_isValid;

    m_user_intermediate_path_isValid = ::OpenAPI::fromJsonValue(m_user_intermediate_path, json[QString("userIntermediatePath")]);
    m_user_intermediate_path_isSet = !json[QString("userIntermediatePath")].isNull() && m_user_intermediate_path_isValid;
}

QString OAISamlConfigurationProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISamlConfigurationProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_add_group_memberships.isSet()) {
        obj.insert(QString("addGroupMemberships"), ::OpenAPI::toJsonValue(m_add_group_memberships));
    }
    if (m_assertion_consumer_service_url.isSet()) {
        obj.insert(QString("assertionConsumerServiceURL"), ::OpenAPI::toJsonValue(m_assertion_consumer_service_url));
    }
    if (m_clock_tolerance.isSet()) {
        obj.insert(QString("clockTolerance"), ::OpenAPI::toJsonValue(m_clock_tolerance));
    }
    if (m_create_user.isSet()) {
        obj.insert(QString("createUser"), ::OpenAPI::toJsonValue(m_create_user));
    }
    if (m_default_groups.isSet()) {
        obj.insert(QString("defaultGroups"), ::OpenAPI::toJsonValue(m_default_groups));
    }
    if (m_default_redirect_url.isSet()) {
        obj.insert(QString("defaultRedirectUrl"), ::OpenAPI::toJsonValue(m_default_redirect_url));
    }
    if (m_digest_method.isSet()) {
        obj.insert(QString("digestMethod"), ::OpenAPI::toJsonValue(m_digest_method));
    }
    if (m_group_membership_attribute.isSet()) {
        obj.insert(QString("groupMembershipAttribute"), ::OpenAPI::toJsonValue(m_group_membership_attribute));
    }
    if (m_handle_logout.isSet()) {
        obj.insert(QString("handleLogout"), ::OpenAPI::toJsonValue(m_handle_logout));
    }
    if (m_idp_cert_alias.isSet()) {
        obj.insert(QString("idpCertAlias"), ::OpenAPI::toJsonValue(m_idp_cert_alias));
    }
    if (m_idp_http_redirect.isSet()) {
        obj.insert(QString("idpHttpRedirect"), ::OpenAPI::toJsonValue(m_idp_http_redirect));
    }
    if (m_idp_url.isSet()) {
        obj.insert(QString("idpUrl"), ::OpenAPI::toJsonValue(m_idp_url));
    }
    if (m_key_store_password.isSet()) {
        obj.insert(QString("keyStorePassword"), ::OpenAPI::toJsonValue(m_key_store_password));
    }
    if (m_logout_url.isSet()) {
        obj.insert(QString("logoutUrl"), ::OpenAPI::toJsonValue(m_logout_url));
    }
    if (m_name_id_format.isSet()) {
        obj.insert(QString("nameIdFormat"), ::OpenAPI::toJsonValue(m_name_id_format));
    }
    if (m_path.isSet()) {
        obj.insert(QString("path"), ::OpenAPI::toJsonValue(m_path));
    }
    if (m_service_ranking.isSet()) {
        obj.insert(QString("service.ranking"), ::OpenAPI::toJsonValue(m_service_ranking));
    }
    if (m_service_provider_entity_id.isSet()) {
        obj.insert(QString("serviceProviderEntityId"), ::OpenAPI::toJsonValue(m_service_provider_entity_id));
    }
    if (m_signature_method.isSet()) {
        obj.insert(QString("signatureMethod"), ::OpenAPI::toJsonValue(m_signature_method));
    }
    if (m_sp_private_key_alias.isSet()) {
        obj.insert(QString("spPrivateKeyAlias"), ::OpenAPI::toJsonValue(m_sp_private_key_alias));
    }
    if (m_synchronize_attributes.isSet()) {
        obj.insert(QString("synchronizeAttributes"), ::OpenAPI::toJsonValue(m_synchronize_attributes));
    }
    if (m_use_encryption.isSet()) {
        obj.insert(QString("useEncryption"), ::OpenAPI::toJsonValue(m_use_encryption));
    }
    if (m_user_id_attribute.isSet()) {
        obj.insert(QString("userIDAttribute"), ::OpenAPI::toJsonValue(m_user_id_attribute));
    }
    if (m_user_intermediate_path.isSet()) {
        obj.insert(QString("userIntermediatePath"), ::OpenAPI::toJsonValue(m_user_intermediate_path));
    }
    return obj;
}

OAISamlConfigurationPropertyItemsBoolean OAISamlConfigurationProperties::getAddGroupMemberships() const {
    return m_add_group_memberships;
}
void OAISamlConfigurationProperties::setAddGroupMemberships(const OAISamlConfigurationPropertyItemsBoolean &add_group_memberships) {
    m_add_group_memberships = add_group_memberships;
    m_add_group_memberships_isSet = true;
}

bool OAISamlConfigurationProperties::is_add_group_memberships_Set() const{
    return m_add_group_memberships_isSet;
}

bool OAISamlConfigurationProperties::is_add_group_memberships_Valid() const{
    return m_add_group_memberships_isValid;
}

OAISamlConfigurationPropertyItemsString OAISamlConfigurationProperties::getAssertionConsumerServiceUrl() const {
    return m_assertion_consumer_service_url;
}
void OAISamlConfigurationProperties::setAssertionConsumerServiceUrl(const OAISamlConfigurationPropertyItemsString &assertion_consumer_service_url) {
    m_assertion_consumer_service_url = assertion_consumer_service_url;
    m_assertion_consumer_service_url_isSet = true;
}

bool OAISamlConfigurationProperties::is_assertion_consumer_service_url_Set() const{
    return m_assertion_consumer_service_url_isSet;
}

bool OAISamlConfigurationProperties::is_assertion_consumer_service_url_Valid() const{
    return m_assertion_consumer_service_url_isValid;
}

OAISamlConfigurationPropertyItemsLong OAISamlConfigurationProperties::getClockTolerance() const {
    return m_clock_tolerance;
}
void OAISamlConfigurationProperties::setClockTolerance(const OAISamlConfigurationPropertyItemsLong &clock_tolerance) {
    m_clock_tolerance = clock_tolerance;
    m_clock_tolerance_isSet = true;
}

bool OAISamlConfigurationProperties::is_clock_tolerance_Set() const{
    return m_clock_tolerance_isSet;
}

bool OAISamlConfigurationProperties::is_clock_tolerance_Valid() const{
    return m_clock_tolerance_isValid;
}

OAISamlConfigurationPropertyItemsBoolean OAISamlConfigurationProperties::getCreateUser() const {
    return m_create_user;
}
void OAISamlConfigurationProperties::setCreateUser(const OAISamlConfigurationPropertyItemsBoolean &create_user) {
    m_create_user = create_user;
    m_create_user_isSet = true;
}

bool OAISamlConfigurationProperties::is_create_user_Set() const{
    return m_create_user_isSet;
}

bool OAISamlConfigurationProperties::is_create_user_Valid() const{
    return m_create_user_isValid;
}

OAISamlConfigurationPropertyItemsArray OAISamlConfigurationProperties::getDefaultGroups() const {
    return m_default_groups;
}
void OAISamlConfigurationProperties::setDefaultGroups(const OAISamlConfigurationPropertyItemsArray &default_groups) {
    m_default_groups = default_groups;
    m_default_groups_isSet = true;
}

bool OAISamlConfigurationProperties::is_default_groups_Set() const{
    return m_default_groups_isSet;
}

bool OAISamlConfigurationProperties::is_default_groups_Valid() const{
    return m_default_groups_isValid;
}

OAISamlConfigurationPropertyItemsString OAISamlConfigurationProperties::getDefaultRedirectUrl() const {
    return m_default_redirect_url;
}
void OAISamlConfigurationProperties::setDefaultRedirectUrl(const OAISamlConfigurationPropertyItemsString &default_redirect_url) {
    m_default_redirect_url = default_redirect_url;
    m_default_redirect_url_isSet = true;
}

bool OAISamlConfigurationProperties::is_default_redirect_url_Set() const{
    return m_default_redirect_url_isSet;
}

bool OAISamlConfigurationProperties::is_default_redirect_url_Valid() const{
    return m_default_redirect_url_isValid;
}

OAISamlConfigurationPropertyItemsString OAISamlConfigurationProperties::getDigestMethod() const {
    return m_digest_method;
}
void OAISamlConfigurationProperties::setDigestMethod(const OAISamlConfigurationPropertyItemsString &digest_method) {
    m_digest_method = digest_method;
    m_digest_method_isSet = true;
}

bool OAISamlConfigurationProperties::is_digest_method_Set() const{
    return m_digest_method_isSet;
}

bool OAISamlConfigurationProperties::is_digest_method_Valid() const{
    return m_digest_method_isValid;
}

OAISamlConfigurationPropertyItemsString OAISamlConfigurationProperties::getGroupMembershipAttribute() const {
    return m_group_membership_attribute;
}
void OAISamlConfigurationProperties::setGroupMembershipAttribute(const OAISamlConfigurationPropertyItemsString &group_membership_attribute) {
    m_group_membership_attribute = group_membership_attribute;
    m_group_membership_attribute_isSet = true;
}

bool OAISamlConfigurationProperties::is_group_membership_attribute_Set() const{
    return m_group_membership_attribute_isSet;
}

bool OAISamlConfigurationProperties::is_group_membership_attribute_Valid() const{
    return m_group_membership_attribute_isValid;
}

OAISamlConfigurationPropertyItemsBoolean OAISamlConfigurationProperties::getHandleLogout() const {
    return m_handle_logout;
}
void OAISamlConfigurationProperties::setHandleLogout(const OAISamlConfigurationPropertyItemsBoolean &handle_logout) {
    m_handle_logout = handle_logout;
    m_handle_logout_isSet = true;
}

bool OAISamlConfigurationProperties::is_handle_logout_Set() const{
    return m_handle_logout_isSet;
}

bool OAISamlConfigurationProperties::is_handle_logout_Valid() const{
    return m_handle_logout_isValid;
}

OAISamlConfigurationPropertyItemsString OAISamlConfigurationProperties::getIdpCertAlias() const {
    return m_idp_cert_alias;
}
void OAISamlConfigurationProperties::setIdpCertAlias(const OAISamlConfigurationPropertyItemsString &idp_cert_alias) {
    m_idp_cert_alias = idp_cert_alias;
    m_idp_cert_alias_isSet = true;
}

bool OAISamlConfigurationProperties::is_idp_cert_alias_Set() const{
    return m_idp_cert_alias_isSet;
}

bool OAISamlConfigurationProperties::is_idp_cert_alias_Valid() const{
    return m_idp_cert_alias_isValid;
}

OAISamlConfigurationPropertyItemsBoolean OAISamlConfigurationProperties::getIdpHttpRedirect() const {
    return m_idp_http_redirect;
}
void OAISamlConfigurationProperties::setIdpHttpRedirect(const OAISamlConfigurationPropertyItemsBoolean &idp_http_redirect) {
    m_idp_http_redirect = idp_http_redirect;
    m_idp_http_redirect_isSet = true;
}

bool OAISamlConfigurationProperties::is_idp_http_redirect_Set() const{
    return m_idp_http_redirect_isSet;
}

bool OAISamlConfigurationProperties::is_idp_http_redirect_Valid() const{
    return m_idp_http_redirect_isValid;
}

OAISamlConfigurationPropertyItemsString OAISamlConfigurationProperties::getIdpUrl() const {
    return m_idp_url;
}
void OAISamlConfigurationProperties::setIdpUrl(const OAISamlConfigurationPropertyItemsString &idp_url) {
    m_idp_url = idp_url;
    m_idp_url_isSet = true;
}

bool OAISamlConfigurationProperties::is_idp_url_Set() const{
    return m_idp_url_isSet;
}

bool OAISamlConfigurationProperties::is_idp_url_Valid() const{
    return m_idp_url_isValid;
}

OAISamlConfigurationPropertyItemsString OAISamlConfigurationProperties::getKeyStorePassword() const {
    return m_key_store_password;
}
void OAISamlConfigurationProperties::setKeyStorePassword(const OAISamlConfigurationPropertyItemsString &key_store_password) {
    m_key_store_password = key_store_password;
    m_key_store_password_isSet = true;
}

bool OAISamlConfigurationProperties::is_key_store_password_Set() const{
    return m_key_store_password_isSet;
}

bool OAISamlConfigurationProperties::is_key_store_password_Valid() const{
    return m_key_store_password_isValid;
}

OAISamlConfigurationPropertyItemsString OAISamlConfigurationProperties::getLogoutUrl() const {
    return m_logout_url;
}
void OAISamlConfigurationProperties::setLogoutUrl(const OAISamlConfigurationPropertyItemsString &logout_url) {
    m_logout_url = logout_url;
    m_logout_url_isSet = true;
}

bool OAISamlConfigurationProperties::is_logout_url_Set() const{
    return m_logout_url_isSet;
}

bool OAISamlConfigurationProperties::is_logout_url_Valid() const{
    return m_logout_url_isValid;
}

OAISamlConfigurationPropertyItemsString OAISamlConfigurationProperties::getNameIdFormat() const {
    return m_name_id_format;
}
void OAISamlConfigurationProperties::setNameIdFormat(const OAISamlConfigurationPropertyItemsString &name_id_format) {
    m_name_id_format = name_id_format;
    m_name_id_format_isSet = true;
}

bool OAISamlConfigurationProperties::is_name_id_format_Set() const{
    return m_name_id_format_isSet;
}

bool OAISamlConfigurationProperties::is_name_id_format_Valid() const{
    return m_name_id_format_isValid;
}

OAISamlConfigurationPropertyItemsArray OAISamlConfigurationProperties::getPath() const {
    return m_path;
}
void OAISamlConfigurationProperties::setPath(const OAISamlConfigurationPropertyItemsArray &path) {
    m_path = path;
    m_path_isSet = true;
}

bool OAISamlConfigurationProperties::is_path_Set() const{
    return m_path_isSet;
}

bool OAISamlConfigurationProperties::is_path_Valid() const{
    return m_path_isValid;
}

OAISamlConfigurationPropertyItemsLong OAISamlConfigurationProperties::getServiceRanking() const {
    return m_service_ranking;
}
void OAISamlConfigurationProperties::setServiceRanking(const OAISamlConfigurationPropertyItemsLong &service_ranking) {
    m_service_ranking = service_ranking;
    m_service_ranking_isSet = true;
}

bool OAISamlConfigurationProperties::is_service_ranking_Set() const{
    return m_service_ranking_isSet;
}

bool OAISamlConfigurationProperties::is_service_ranking_Valid() const{
    return m_service_ranking_isValid;
}

OAISamlConfigurationPropertyItemsString OAISamlConfigurationProperties::getServiceProviderEntityId() const {
    return m_service_provider_entity_id;
}
void OAISamlConfigurationProperties::setServiceProviderEntityId(const OAISamlConfigurationPropertyItemsString &service_provider_entity_id) {
    m_service_provider_entity_id = service_provider_entity_id;
    m_service_provider_entity_id_isSet = true;
}

bool OAISamlConfigurationProperties::is_service_provider_entity_id_Set() const{
    return m_service_provider_entity_id_isSet;
}

bool OAISamlConfigurationProperties::is_service_provider_entity_id_Valid() const{
    return m_service_provider_entity_id_isValid;
}

OAISamlConfigurationPropertyItemsString OAISamlConfigurationProperties::getSignatureMethod() const {
    return m_signature_method;
}
void OAISamlConfigurationProperties::setSignatureMethod(const OAISamlConfigurationPropertyItemsString &signature_method) {
    m_signature_method = signature_method;
    m_signature_method_isSet = true;
}

bool OAISamlConfigurationProperties::is_signature_method_Set() const{
    return m_signature_method_isSet;
}

bool OAISamlConfigurationProperties::is_signature_method_Valid() const{
    return m_signature_method_isValid;
}

OAISamlConfigurationPropertyItemsString OAISamlConfigurationProperties::getSpPrivateKeyAlias() const {
    return m_sp_private_key_alias;
}
void OAISamlConfigurationProperties::setSpPrivateKeyAlias(const OAISamlConfigurationPropertyItemsString &sp_private_key_alias) {
    m_sp_private_key_alias = sp_private_key_alias;
    m_sp_private_key_alias_isSet = true;
}

bool OAISamlConfigurationProperties::is_sp_private_key_alias_Set() const{
    return m_sp_private_key_alias_isSet;
}

bool OAISamlConfigurationProperties::is_sp_private_key_alias_Valid() const{
    return m_sp_private_key_alias_isValid;
}

OAISamlConfigurationPropertyItemsArray OAISamlConfigurationProperties::getSynchronizeAttributes() const {
    return m_synchronize_attributes;
}
void OAISamlConfigurationProperties::setSynchronizeAttributes(const OAISamlConfigurationPropertyItemsArray &synchronize_attributes) {
    m_synchronize_attributes = synchronize_attributes;
    m_synchronize_attributes_isSet = true;
}

bool OAISamlConfigurationProperties::is_synchronize_attributes_Set() const{
    return m_synchronize_attributes_isSet;
}

bool OAISamlConfigurationProperties::is_synchronize_attributes_Valid() const{
    return m_synchronize_attributes_isValid;
}

OAISamlConfigurationPropertyItemsBoolean OAISamlConfigurationProperties::getUseEncryption() const {
    return m_use_encryption;
}
void OAISamlConfigurationProperties::setUseEncryption(const OAISamlConfigurationPropertyItemsBoolean &use_encryption) {
    m_use_encryption = use_encryption;
    m_use_encryption_isSet = true;
}

bool OAISamlConfigurationProperties::is_use_encryption_Set() const{
    return m_use_encryption_isSet;
}

bool OAISamlConfigurationProperties::is_use_encryption_Valid() const{
    return m_use_encryption_isValid;
}

OAISamlConfigurationPropertyItemsString OAISamlConfigurationProperties::getUserIdAttribute() const {
    return m_user_id_attribute;
}
void OAISamlConfigurationProperties::setUserIdAttribute(const OAISamlConfigurationPropertyItemsString &user_id_attribute) {
    m_user_id_attribute = user_id_attribute;
    m_user_id_attribute_isSet = true;
}

bool OAISamlConfigurationProperties::is_user_id_attribute_Set() const{
    return m_user_id_attribute_isSet;
}

bool OAISamlConfigurationProperties::is_user_id_attribute_Valid() const{
    return m_user_id_attribute_isValid;
}

OAISamlConfigurationPropertyItemsString OAISamlConfigurationProperties::getUserIntermediatePath() const {
    return m_user_intermediate_path;
}
void OAISamlConfigurationProperties::setUserIntermediatePath(const OAISamlConfigurationPropertyItemsString &user_intermediate_path) {
    m_user_intermediate_path = user_intermediate_path;
    m_user_intermediate_path_isSet = true;
}

bool OAISamlConfigurationProperties::is_user_intermediate_path_Set() const{
    return m_user_intermediate_path_isSet;
}

bool OAISamlConfigurationProperties::is_user_intermediate_path_Valid() const{
    return m_user_intermediate_path_isValid;
}

bool OAISamlConfigurationProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_add_group_memberships.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_assertion_consumer_service_url.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_clock_tolerance.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_user.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_groups.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_redirect_url.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_digest_method.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_membership_attribute.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_handle_logout.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_idp_cert_alias.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_idp_http_redirect.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_idp_url.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_store_password.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_logout_url.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_id_format.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_path.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_ranking.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_provider_entity_id.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_signature_method.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sp_private_key_alias.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_synchronize_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_use_encryption.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_attribute.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_intermediate_path.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISamlConfigurationProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
