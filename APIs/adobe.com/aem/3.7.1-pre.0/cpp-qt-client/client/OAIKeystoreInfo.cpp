/**
 * Adobe Experience Manager (AEM) API
 * Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
 *
 * The version of the OpenAPI document: 3.7.1-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIKeystoreInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIKeystoreInfo::OAIKeystoreInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIKeystoreInfo::OAIKeystoreInfo() {
    this->initializeModel();
}

OAIKeystoreInfo::~OAIKeystoreInfo() {}

void OAIKeystoreInfo::initializeModel() {

    m_aliases_isSet = false;
    m_aliases_isValid = false;

    m_exists_isSet = false;
    m_exists_isValid = false;
}

void OAIKeystoreInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIKeystoreInfo::fromJsonObject(QJsonObject json) {

    m_aliases_isValid = ::OpenAPI::fromJsonValue(m_aliases, json[QString("aliases")]);
    m_aliases_isSet = !json[QString("aliases")].isNull() && m_aliases_isValid;

    m_exists_isValid = ::OpenAPI::fromJsonValue(m_exists, json[QString("exists")]);
    m_exists_isSet = !json[QString("exists")].isNull() && m_exists_isValid;
}

QString OAIKeystoreInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIKeystoreInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_aliases.size() > 0) {
        obj.insert(QString("aliases"), ::OpenAPI::toJsonValue(m_aliases));
    }
    if (m_exists_isSet) {
        obj.insert(QString("exists"), ::OpenAPI::toJsonValue(m_exists));
    }
    return obj;
}

QList<OAIKeystoreItems> OAIKeystoreInfo::getAliases() const {
    return m_aliases;
}
void OAIKeystoreInfo::setAliases(const QList<OAIKeystoreItems> &aliases) {
    m_aliases = aliases;
    m_aliases_isSet = true;
}

bool OAIKeystoreInfo::is_aliases_Set() const{
    return m_aliases_isSet;
}

bool OAIKeystoreInfo::is_aliases_Valid() const{
    return m_aliases_isValid;
}

bool OAIKeystoreInfo::isExists() const {
    return m_exists;
}
void OAIKeystoreInfo::setExists(const bool &exists) {
    m_exists = exists;
    m_exists_isSet = true;
}

bool OAIKeystoreInfo::is_exists_Set() const{
    return m_exists_isSet;
}

bool OAIKeystoreInfo::is_exists_Valid() const{
    return m_exists_isValid;
}

bool OAIKeystoreInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_aliases.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_exists_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIKeystoreInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
