/**
 * Adobe Experience Manager (AEM) API
 * Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
 *
 * The version of the OpenAPI document: 3.7.1-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAICrxApi_H
#define OAI_OAICrxApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIHttpFileElement.h"
#include "OAIInstallStatus.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAICrxApi : public QObject {
    Q_OBJECT

public:
    OAICrxApi(const int timeOut = 0);
    ~OAICrxApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);


    virtual void getCrxdeStatus();


    virtual void getInstallStatus();


    virtual void getPackageManagerServlet();

    /**
    * @param[in]  cmd QString [required]
    */
    virtual void postPackageService(const QString &cmd);

    /**
    * @param[in]  path QString [required]
    * @param[in]  cmd QString [required]
    * @param[in]  group_name QString [optional]
    * @param[in]  package_name QString [optional]
    * @param[in]  package_version QString [optional]
    * @param[in]  _charset_ QString [optional]
    * @param[in]  force bool [optional]
    * @param[in]  recursive bool [optional]
    * @param[in]  package OAIHttpFileElement [optional]
    */
    virtual void postPackageServiceJson(const QString &path, const QString &cmd, const ::OpenAPI::OptionalParam<QString> &group_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &package_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &package_version = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &_charset_ = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &force = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &recursive = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<OAIHttpFileElement> &package = ::OpenAPI::OptionalParam<OAIHttpFileElement>());

    /**
    * @param[in]  group_name QString [required]
    * @param[in]  package_name QString [required]
    * @param[in]  version QString [required]
    * @param[in]  path QString [required]
    * @param[in]  filter QString [optional]
    * @param[in]  _charset_ QString [optional]
    */
    virtual void postPackageUpdate(const QString &group_name, const QString &package_name, const QString &version, const QString &path, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &_charset_ = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  old QString [required]
    * @param[in]  plain QString [required]
    * @param[in]  verify QString [required]
    */
    virtual void postSetPassword(const QString &old, const QString &plain, const QString &verify);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getCrxdeStatusCallback(OAIHttpRequestWorker *worker);
    void getInstallStatusCallback(OAIHttpRequestWorker *worker);
    void getPackageManagerServletCallback(OAIHttpRequestWorker *worker);
    void postPackageServiceCallback(OAIHttpRequestWorker *worker);
    void postPackageServiceJsonCallback(OAIHttpRequestWorker *worker);
    void postPackageUpdateCallback(OAIHttpRequestWorker *worker);
    void postSetPasswordCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getCrxdeStatusSignal(QString summary);
    void getInstallStatusSignal(OAIInstallStatus summary);
    void getPackageManagerServletSignal();
    void postPackageServiceSignal(QString summary);
    void postPackageServiceJsonSignal(QString summary);
    void postPackageUpdateSignal(QString summary);
    void postSetPasswordSignal(QString summary);


    void getCrxdeStatusSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void getInstallStatusSignalFull(OAIHttpRequestWorker *worker, OAIInstallStatus summary);
    void getPackageManagerServletSignalFull(OAIHttpRequestWorker *worker);
    void postPackageServiceSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void postPackageServiceJsonSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void postPackageUpdateSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void postSetPasswordSignalFull(OAIHttpRequestWorker *worker, QString summary);

    Q_DECL_DEPRECATED_X("Use getCrxdeStatusSignalError() instead")
    void getCrxdeStatusSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCrxdeStatusSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getInstallStatusSignalError() instead")
    void getInstallStatusSignalE(OAIInstallStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getInstallStatusSignalError(OAIInstallStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPackageManagerServletSignalError() instead")
    void getPackageManagerServletSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getPackageManagerServletSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postPackageServiceSignalError() instead")
    void postPackageServiceSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postPackageServiceSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postPackageServiceJsonSignalError() instead")
    void postPackageServiceJsonSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postPackageServiceJsonSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postPackageUpdateSignalError() instead")
    void postPackageUpdateSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postPackageUpdateSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postSetPasswordSignalError() instead")
    void postSetPasswordSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postSetPasswordSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getCrxdeStatusSignalErrorFull() instead")
    void getCrxdeStatusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCrxdeStatusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getInstallStatusSignalErrorFull() instead")
    void getInstallStatusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getInstallStatusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPackageManagerServletSignalErrorFull() instead")
    void getPackageManagerServletSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPackageManagerServletSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postPackageServiceSignalErrorFull() instead")
    void postPackageServiceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postPackageServiceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postPackageServiceJsonSignalErrorFull() instead")
    void postPackageServiceJsonSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postPackageServiceJsonSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postPackageUpdateSignalErrorFull() instead")
    void postPackageUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postPackageUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postSetPasswordSignalErrorFull() instead")
    void postSetPasswordSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postSetPasswordSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
