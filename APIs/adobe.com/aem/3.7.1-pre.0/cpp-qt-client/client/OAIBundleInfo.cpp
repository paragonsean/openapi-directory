/**
 * Adobe Experience Manager (AEM) API
 * Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
 *
 * The version of the OpenAPI document: 3.7.1-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBundleInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBundleInfo::OAIBundleInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBundleInfo::OAIBundleInfo() {
    this->initializeModel();
}

OAIBundleInfo::~OAIBundleInfo() {}

void OAIBundleInfo::initializeModel() {

    m_data_isSet = false;
    m_data_isValid = false;

    m_s_isSet = false;
    m_s_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIBundleInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBundleInfo::fromJsonObject(QJsonObject json) {

    m_data_isValid = ::OpenAPI::fromJsonValue(m_data, json[QString("data")]);
    m_data_isSet = !json[QString("data")].isNull() && m_data_isValid;

    m_s_isValid = ::OpenAPI::fromJsonValue(m_s, json[QString("s")]);
    m_s_isSet = !json[QString("s")].isNull() && m_s_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIBundleInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBundleInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_data.size() > 0) {
        obj.insert(QString("data"), ::OpenAPI::toJsonValue(m_data));
    }
    if (m_s.size() > 0) {
        obj.insert(QString("s"), ::OpenAPI::toJsonValue(m_s));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QList<OAIBundleData> OAIBundleInfo::getData() const {
    return m_data;
}
void OAIBundleInfo::setData(const QList<OAIBundleData> &data) {
    m_data = data;
    m_data_isSet = true;
}

bool OAIBundleInfo::is_data_Set() const{
    return m_data_isSet;
}

bool OAIBundleInfo::is_data_Valid() const{
    return m_data_isValid;
}

QList<qint32> OAIBundleInfo::getS() const {
    return m_s;
}
void OAIBundleInfo::setS(const QList<qint32> &s) {
    m_s = s;
    m_s_isSet = true;
}

bool OAIBundleInfo::is_s_Set() const{
    return m_s_isSet;
}

bool OAIBundleInfo::is_s_Valid() const{
    return m_s_isValid;
}

QString OAIBundleInfo::getStatus() const {
    return m_status;
}
void OAIBundleInfo::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIBundleInfo::is_status_Set() const{
    return m_status_isSet;
}

bool OAIBundleInfo::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIBundleInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_s.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBundleInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
