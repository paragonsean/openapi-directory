/**
 * Adobe Experience Manager (AEM) API
 * Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
 *
 * The version of the OpenAPI document: 3.7.1-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISamlConfigurationInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISamlConfigurationInfo::OAISamlConfigurationInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISamlConfigurationInfo::OAISamlConfigurationInfo() {
    this->initializeModel();
}

OAISamlConfigurationInfo::~OAISamlConfigurationInfo() {}

void OAISamlConfigurationInfo::initializeModel() {

    m_bundle_location_isSet = false;
    m_bundle_location_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_pid_isSet = false;
    m_pid_isValid = false;

    m_properties_isSet = false;
    m_properties_isValid = false;

    m_service_location_isSet = false;
    m_service_location_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;
}

void OAISamlConfigurationInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISamlConfigurationInfo::fromJsonObject(QJsonObject json) {

    m_bundle_location_isValid = ::OpenAPI::fromJsonValue(m_bundle_location, json[QString("bundle_location")]);
    m_bundle_location_isSet = !json[QString("bundle_location")].isNull() && m_bundle_location_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_pid_isValid = ::OpenAPI::fromJsonValue(m_pid, json[QString("pid")]);
    m_pid_isSet = !json[QString("pid")].isNull() && m_pid_isValid;

    m_properties_isValid = ::OpenAPI::fromJsonValue(m_properties, json[QString("properties")]);
    m_properties_isSet = !json[QString("properties")].isNull() && m_properties_isValid;

    m_service_location_isValid = ::OpenAPI::fromJsonValue(m_service_location, json[QString("service_location")]);
    m_service_location_isSet = !json[QString("service_location")].isNull() && m_service_location_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;
}

QString OAISamlConfigurationInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISamlConfigurationInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_bundle_location_isSet) {
        obj.insert(QString("bundle_location"), ::OpenAPI::toJsonValue(m_bundle_location));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_pid_isSet) {
        obj.insert(QString("pid"), ::OpenAPI::toJsonValue(m_pid));
    }
    if (m_properties.isSet()) {
        obj.insert(QString("properties"), ::OpenAPI::toJsonValue(m_properties));
    }
    if (m_service_location_isSet) {
        obj.insert(QString("service_location"), ::OpenAPI::toJsonValue(m_service_location));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    return obj;
}

QString OAISamlConfigurationInfo::getBundleLocation() const {
    return m_bundle_location;
}
void OAISamlConfigurationInfo::setBundleLocation(const QString &bundle_location) {
    m_bundle_location = bundle_location;
    m_bundle_location_isSet = true;
}

bool OAISamlConfigurationInfo::is_bundle_location_Set() const{
    return m_bundle_location_isSet;
}

bool OAISamlConfigurationInfo::is_bundle_location_Valid() const{
    return m_bundle_location_isValid;
}

QString OAISamlConfigurationInfo::getDescription() const {
    return m_description;
}
void OAISamlConfigurationInfo::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAISamlConfigurationInfo::is_description_Set() const{
    return m_description_isSet;
}

bool OAISamlConfigurationInfo::is_description_Valid() const{
    return m_description_isValid;
}

QString OAISamlConfigurationInfo::getPid() const {
    return m_pid;
}
void OAISamlConfigurationInfo::setPid(const QString &pid) {
    m_pid = pid;
    m_pid_isSet = true;
}

bool OAISamlConfigurationInfo::is_pid_Set() const{
    return m_pid_isSet;
}

bool OAISamlConfigurationInfo::is_pid_Valid() const{
    return m_pid_isValid;
}

OAISamlConfigurationProperties OAISamlConfigurationInfo::getProperties() const {
    return m_properties;
}
void OAISamlConfigurationInfo::setProperties(const OAISamlConfigurationProperties &properties) {
    m_properties = properties;
    m_properties_isSet = true;
}

bool OAISamlConfigurationInfo::is_properties_Set() const{
    return m_properties_isSet;
}

bool OAISamlConfigurationInfo::is_properties_Valid() const{
    return m_properties_isValid;
}

QString OAISamlConfigurationInfo::getServiceLocation() const {
    return m_service_location;
}
void OAISamlConfigurationInfo::setServiceLocation(const QString &service_location) {
    m_service_location = service_location;
    m_service_location_isSet = true;
}

bool OAISamlConfigurationInfo::is_service_location_Set() const{
    return m_service_location_isSet;
}

bool OAISamlConfigurationInfo::is_service_location_Valid() const{
    return m_service_location_isValid;
}

QString OAISamlConfigurationInfo::getTitle() const {
    return m_title;
}
void OAISamlConfigurationInfo::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAISamlConfigurationInfo::is_title_Set() const{
    return m_title_isSet;
}

bool OAISamlConfigurationInfo::is_title_Valid() const{
    return m_title_isValid;
}

bool OAISamlConfigurationInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bundle_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISamlConfigurationInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
