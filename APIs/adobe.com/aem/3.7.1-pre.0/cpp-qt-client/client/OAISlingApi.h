/**
 * Adobe Experience Manager (AEM) API
 * Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
 *
 * The version of the OpenAPI document: 3.7.1-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAISlingApi_H
#define OAI_OAISlingApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIHttpFileElement.h"
#include "OAIKeystoreInfo.h"
#include "OAITruststoreInfo.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAISlingApi : public QObject {
    Q_OBJECT

public:
    OAISlingApi(const int timeOut = 0);
    ~OAISlingApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  runmode QString [required]
    * @param[in]  name QString [required]
    */
    virtual void deleteAgent(const QString &runmode, const QString &name);

    /**
    * @param[in]  path QString [required]
    * @param[in]  name QString [required]
    */
    virtual void deleteNode(const QString &path, const QString &name);

    /**
    * @param[in]  runmode QString [required]
    * @param[in]  name QString [required]
    */
    virtual void getAgent(const QString &runmode, const QString &name);

    /**
    * @param[in]  runmode QString [required]
    */
    virtual void getAgents(const QString &runmode);

    /**
    * @param[in]  intermediate_path QString [required]
    * @param[in]  authorizable_id QString [required]
    */
    virtual void getAuthorizableKeystore(const QString &intermediate_path, const QString &authorizable_id);

    /**
    * @param[in]  intermediate_path QString [required]
    * @param[in]  authorizable_id QString [required]
    */
    virtual void getKeystore(const QString &intermediate_path, const QString &authorizable_id);

    /**
    * @param[in]  path QString [required]
    * @param[in]  name QString [required]
    */
    virtual void getNode(const QString &path, const QString &name);

    /**
    * @param[in]  group QString [required]
    * @param[in]  name QString [required]
    * @param[in]  version QString [required]
    */
    virtual void getPackage(const QString &group, const QString &name, const QString &version);

    /**
    * @param[in]  group QString [required]
    * @param[in]  name QString [required]
    * @param[in]  version QString [required]
    */
    virtual void getPackageFilter(const QString &group, const QString &name, const QString &version);

    /**
    * @param[in]  path QString [required]
    * @param[in]  p_limit double [required]
    * @param[in]  r_1_property QString [required]
    * @param[in]  r_1_property_value QString [required]
    */
    virtual void getQuery(const QString &path, const double &p_limit, const QString &r_1_property, const QString &r_1_property_value);


    virtual void getTruststore();


    virtual void getTruststoreInfo();

    /**
    * @param[in]  runmode QString [required]
    * @param[in]  name QString [required]
    * @param[in]  jcrcontent_cqdistribute bool [optional]
    * @param[in]  jcrcontent_cqdistribute_type_hint QString [optional]
    * @param[in]  jcrcontent_cqname QString [optional]
    * @param[in]  jcrcontent_cqtemplate QString [optional]
    * @param[in]  jcrcontent_enabled bool [optional]
    * @param[in]  jcrcontent_jcrdescription QString [optional]
    * @param[in]  jcrcontent_jcrlast_modified QString [optional]
    * @param[in]  jcrcontent_jcrlast_modified_by QString [optional]
    * @param[in]  jcrcontent_jcrmixin_types QString [optional]
    * @param[in]  jcrcontent_jcrtitle QString [optional]
    * @param[in]  jcrcontent_log_level QString [optional]
    * @param[in]  jcrcontent_no_status_update bool [optional]
    * @param[in]  jcrcontent_no_versioning bool [optional]
    * @param[in]  jcrcontent_protocol_connect_timeout double [optional]
    * @param[in]  jcrcontent_protocol_http_connection_closed bool [optional]
    * @param[in]  jcrcontent_protocol_http_expired QString [optional]
    * @param[in]  jcrcontent_protocol_http_headers QList<QString> [optional]
    * @param[in]  jcrcontent_protocol_http_headers_type_hint QString [optional]
    * @param[in]  jcrcontent_protocol_http_method QString [optional]
    * @param[in]  jcrcontent_protocol_https_relaxed bool [optional]
    * @param[in]  jcrcontent_protocol_interface QString [optional]
    * @param[in]  jcrcontent_protocol_socket_timeout double [optional]
    * @param[in]  jcrcontent_protocol_version QString [optional]
    * @param[in]  jcrcontent_proxy_ntlm_domain QString [optional]
    * @param[in]  jcrcontent_proxy_ntlm_host QString [optional]
    * @param[in]  jcrcontent_proxy_host QString [optional]
    * @param[in]  jcrcontent_proxy_password QString [optional]
    * @param[in]  jcrcontent_proxy_port double [optional]
    * @param[in]  jcrcontent_proxy_user QString [optional]
    * @param[in]  jcrcontent_queue_batch_max_size double [optional]
    * @param[in]  jcrcontent_queue_batch_mode QString [optional]
    * @param[in]  jcrcontent_queue_batch_wait_time double [optional]
    * @param[in]  jcrcontent_retry_delay QString [optional]
    * @param[in]  jcrcontent_reverse_replication bool [optional]
    * @param[in]  jcrcontent_serialization_type QString [optional]
    * @param[in]  jcrcontent_slingresource_type QString [optional]
    * @param[in]  jcrcontent_ssl QString [optional]
    * @param[in]  jcrcontent_transport_ntlm_domain QString [optional]
    * @param[in]  jcrcontent_transport_ntlm_host QString [optional]
    * @param[in]  jcrcontent_transport_password QString [optional]
    * @param[in]  jcrcontent_transport_uri QString [optional]
    * @param[in]  jcrcontent_transport_user QString [optional]
    * @param[in]  jcrcontent_trigger_distribute bool [optional]
    * @param[in]  jcrcontent_trigger_modified bool [optional]
    * @param[in]  jcrcontent_trigger_on_off_time bool [optional]
    * @param[in]  jcrcontent_trigger_receive bool [optional]
    * @param[in]  jcrcontent_trigger_specific bool [optional]
    * @param[in]  jcrcontent_user_id QString [optional]
    * @param[in]  jcrprimary_type QString [optional]
    * @param[in]  operation QString [optional]
    */
    virtual void postAgent(const QString &runmode, const QString &name, const ::OpenAPI::OptionalParam<bool> &jcrcontent_cqdistribute = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &jcrcontent_cqdistribute_type_hint = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &jcrcontent_cqname = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &jcrcontent_cqtemplate = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &jcrcontent_enabled = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &jcrcontent_jcrdescription = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &jcrcontent_jcrlast_modified = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &jcrcontent_jcrlast_modified_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &jcrcontent_jcrmixin_types = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &jcrcontent_jcrtitle = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &jcrcontent_log_level = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &jcrcontent_no_status_update = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &jcrcontent_no_versioning = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<double> &jcrcontent_protocol_connect_timeout = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<bool> &jcrcontent_protocol_http_connection_closed = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &jcrcontent_protocol_http_expired = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &jcrcontent_protocol_http_headers = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &jcrcontent_protocol_http_headers_type_hint = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &jcrcontent_protocol_http_method = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &jcrcontent_protocol_https_relaxed = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &jcrcontent_protocol_interface = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &jcrcontent_protocol_socket_timeout = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &jcrcontent_protocol_version = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &jcrcontent_proxy_ntlm_domain = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &jcrcontent_proxy_ntlm_host = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &jcrcontent_proxy_host = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &jcrcontent_proxy_password = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &jcrcontent_proxy_port = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &jcrcontent_proxy_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &jcrcontent_queue_batch_max_size = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &jcrcontent_queue_batch_mode = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &jcrcontent_queue_batch_wait_time = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &jcrcontent_retry_delay = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &jcrcontent_reverse_replication = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &jcrcontent_serialization_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &jcrcontent_slingresource_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &jcrcontent_ssl = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &jcrcontent_transport_ntlm_domain = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &jcrcontent_transport_ntlm_host = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &jcrcontent_transport_password = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &jcrcontent_transport_uri = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &jcrcontent_transport_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &jcrcontent_trigger_distribute = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &jcrcontent_trigger_modified = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &jcrcontent_trigger_on_off_time = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &jcrcontent_trigger_receive = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &jcrcontent_trigger_specific = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &jcrcontent_user_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &jcrprimary_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &operation = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  intermediate_path QString [required]
    * @param[in]  authorizable_id QString [required]
    * @param[in]  operation QString [optional]
    * @param[in]  current_password QString [optional]
    * @param[in]  new_password QString [optional]
    * @param[in]  re_password QString [optional]
    * @param[in]  key_password QString [optional]
    * @param[in]  key_store_pass QString [optional]
    * @param[in]  alias QString [optional]
    * @param[in]  new_alias QString [optional]
    * @param[in]  remove_alias QString [optional]
    * @param[in]  cert_chain OAIHttpFileElement [optional]
    * @param[in]  key_store OAIHttpFileElement [optional]
    * @param[in]  pk OAIHttpFileElement [optional]
    */
    virtual void postAuthorizableKeystore(const QString &intermediate_path, const QString &authorizable_id, const ::OpenAPI::OptionalParam<QString> &operation = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &current_password = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &new_password = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &re_password = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key_password = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key_store_pass = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alias = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &new_alias = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &remove_alias = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIHttpFileElement> &cert_chain = ::OpenAPI::OptionalParam<OAIHttpFileElement>(), const ::OpenAPI::OptionalParam<OAIHttpFileElement> &key_store = ::OpenAPI::OptionalParam<OAIHttpFileElement>(), const ::OpenAPI::OptionalParam<OAIHttpFileElement> &pk = ::OpenAPI::OptionalParam<OAIHttpFileElement>());

    /**
    * @param[in]  authorizable_id QString [required]
    * @param[in]  intermediate_path QString [required]
    * @param[in]  create_user QString [optional]
    * @param[in]  create_group QString [optional]
    * @param[in]  reppassword QString [optional]
    * @param[in]  profile_given_name QString [optional]
    */
    virtual void postAuthorizables(const QString &authorizable_id, const QString &intermediate_path, const ::OpenAPI::OptionalParam<QString> &create_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &create_group = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &reppassword = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &profile_given_name = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  key_store_password QString [optional]
    * @param[in]  key_store_password_type_hint QString [optional]
    * @param[in]  service_ranking qint32 [optional]
    * @param[in]  service_ranking_type_hint QString [optional]
    * @param[in]  idp_http_redirect bool [optional]
    * @param[in]  idp_http_redirect_type_hint QString [optional]
    * @param[in]  create_user bool [optional]
    * @param[in]  create_user_type_hint QString [optional]
    * @param[in]  default_redirect_url QString [optional]
    * @param[in]  default_redirect_url_type_hint QString [optional]
    * @param[in]  user_id_attribute QString [optional]
    * @param[in]  user_id_attribute_type_hint QString [optional]
    * @param[in]  default_groups QList<QString> [optional]
    * @param[in]  default_groups_type_hint QString [optional]
    * @param[in]  idp_cert_alias QString [optional]
    * @param[in]  idp_cert_alias_type_hint QString [optional]
    * @param[in]  add_group_memberships bool [optional]
    * @param[in]  add_group_memberships_type_hint QString [optional]
    * @param[in]  path QList<QString> [optional]
    * @param[in]  path_type_hint QString [optional]
    * @param[in]  synchronize_attributes QList<QString> [optional]
    * @param[in]  synchronize_attributes_type_hint QString [optional]
    * @param[in]  clock_tolerance qint32 [optional]
    * @param[in]  clock_tolerance_type_hint QString [optional]
    * @param[in]  group_membership_attribute QString [optional]
    * @param[in]  group_membership_attribute_type_hint QString [optional]
    * @param[in]  idp_url QString [optional]
    * @param[in]  idp_url_type_hint QString [optional]
    * @param[in]  logout_url QString [optional]
    * @param[in]  logout_url_type_hint QString [optional]
    * @param[in]  service_provider_entity_id QString [optional]
    * @param[in]  service_provider_entity_id_type_hint QString [optional]
    * @param[in]  assertion_consumer_service_url QString [optional]
    * @param[in]  assertion_consumer_service_url_type_hint QString [optional]
    * @param[in]  handle_logout bool [optional]
    * @param[in]  handle_logout_type_hint QString [optional]
    * @param[in]  sp_private_key_alias QString [optional]
    * @param[in]  sp_private_key_alias_type_hint QString [optional]
    * @param[in]  use_encryption bool [optional]
    * @param[in]  use_encryption_type_hint QString [optional]
    * @param[in]  name_id_format QString [optional]
    * @param[in]  name_id_format_type_hint QString [optional]
    * @param[in]  digest_method QString [optional]
    * @param[in]  digest_method_type_hint QString [optional]
    * @param[in]  signature_method QString [optional]
    * @param[in]  signature_method_type_hint QString [optional]
    * @param[in]  user_intermediate_path QString [optional]
    * @param[in]  user_intermediate_path_type_hint QString [optional]
    */
    virtual void postConfigAdobeGraniteSamlAuthenticationHandler(const ::OpenAPI::OptionalParam<QString> &key_store_password = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key_store_password_type_hint = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &service_ranking = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &service_ranking_type_hint = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &idp_http_redirect = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &idp_http_redirect_type_hint = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &create_user = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &create_user_type_hint = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &default_redirect_url = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &default_redirect_url_type_hint = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user_id_attribute = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user_id_attribute_type_hint = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &default_groups = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &default_groups_type_hint = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &idp_cert_alias = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &idp_cert_alias_type_hint = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &add_group_memberships = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &add_group_memberships_type_hint = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &path = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &path_type_hint = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &synchronize_attributes = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &synchronize_attributes_type_hint = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &clock_tolerance = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &clock_tolerance_type_hint = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &group_membership_attribute = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &group_membership_attribute_type_hint = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &idp_url = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &idp_url_type_hint = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &logout_url = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &logout_url_type_hint = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &service_provider_entity_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &service_provider_entity_id_type_hint = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &assertion_consumer_service_url = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &assertion_consumer_service_url_type_hint = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &handle_logout = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &handle_logout_type_hint = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sp_private_key_alias = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sp_private_key_alias_type_hint = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &use_encryption = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &use_encryption_type_hint = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name_id_format = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name_id_format_type_hint = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &digest_method = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &digest_method_type_hint = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &signature_method = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &signature_method_type_hint = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user_intermediate_path = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user_intermediate_path_type_hint = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  org_apache_felix_https_nio bool [optional]
    * @param[in]  org_apache_felix_https_nio_type_hint QString [optional]
    * @param[in]  org_apache_felix_https_keystore QString [optional]
    * @param[in]  org_apache_felix_https_keystore_type_hint QString [optional]
    * @param[in]  org_apache_felix_https_keystore_password QString [optional]
    * @param[in]  org_apache_felix_https_keystore_password_type_hint QString [optional]
    * @param[in]  org_apache_felix_https_keystore_key QString [optional]
    * @param[in]  org_apache_felix_https_keystore_key_type_hint QString [optional]
    * @param[in]  org_apache_felix_https_keystore_key_password QString [optional]
    * @param[in]  org_apache_felix_https_keystore_key_password_type_hint QString [optional]
    * @param[in]  org_apache_felix_https_truststore QString [optional]
    * @param[in]  org_apache_felix_https_truststore_type_hint QString [optional]
    * @param[in]  org_apache_felix_https_truststore_password QString [optional]
    * @param[in]  org_apache_felix_https_truststore_password_type_hint QString [optional]
    * @param[in]  org_apache_felix_https_clientcertificate QString [optional]
    * @param[in]  org_apache_felix_https_clientcertificate_type_hint QString [optional]
    * @param[in]  org_apache_felix_https_enable bool [optional]
    * @param[in]  org_apache_felix_https_enable_type_hint QString [optional]
    * @param[in]  org_osgi_service_http_port_secure QString [optional]
    * @param[in]  org_osgi_service_http_port_secure_type_hint QString [optional]
    */
    virtual void postConfigApacheFelixJettyBasedHttpService(const ::OpenAPI::OptionalParam<bool> &org_apache_felix_https_nio = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &org_apache_felix_https_nio_type_hint = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &org_apache_felix_https_keystore = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &org_apache_felix_https_keystore_type_hint = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &org_apache_felix_https_keystore_password = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &org_apache_felix_https_keystore_password_type_hint = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &org_apache_felix_https_keystore_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &org_apache_felix_https_keystore_key_type_hint = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &org_apache_felix_https_keystore_key_password = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &org_apache_felix_https_keystore_key_password_type_hint = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &org_apache_felix_https_truststore = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &org_apache_felix_https_truststore_type_hint = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &org_apache_felix_https_truststore_password = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &org_apache_felix_https_truststore_password_type_hint = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &org_apache_felix_https_clientcertificate = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &org_apache_felix_https_clientcertificate_type_hint = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &org_apache_felix_https_enable = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &org_apache_felix_https_enable_type_hint = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &org_osgi_service_http_port_secure = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &org_osgi_service_http_port_secure_type_hint = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  proxy_host QString [optional]
    * @param[in]  proxy_host_type_hint QString [optional]
    * @param[in]  proxy_port qint32 [optional]
    * @param[in]  proxy_port_type_hint QString [optional]
    * @param[in]  proxy_exceptions QList<QString> [optional]
    * @param[in]  proxy_exceptions_type_hint QString [optional]
    * @param[in]  proxy_enabled bool [optional]
    * @param[in]  proxy_enabled_type_hint QString [optional]
    * @param[in]  proxy_user QString [optional]
    * @param[in]  proxy_user_type_hint QString [optional]
    * @param[in]  proxy_password QString [optional]
    * @param[in]  proxy_password_type_hint QString [optional]
    */
    virtual void postConfigApacheHttpComponentsProxyConfiguration(const ::OpenAPI::OptionalParam<QString> &proxy_host = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &proxy_host_type_hint = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &proxy_port = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &proxy_port_type_hint = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &proxy_exceptions = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &proxy_exceptions_type_hint = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &proxy_enabled = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &proxy_enabled_type_hint = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &proxy_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &proxy_user_type_hint = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &proxy_password = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &proxy_password_type_hint = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  alias QString [optional]
    * @param[in]  alias_type_hint QString [optional]
    * @param[in]  dav_create_absolute_uri bool [optional]
    * @param[in]  dav_create_absolute_uri_type_hint QString [optional]
    */
    virtual void postConfigApacheSlingDavExServlet(const ::OpenAPI::OptionalParam<QString> &alias = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alias_type_hint = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &dav_create_absolute_uri = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &dav_create_absolute_uri_type_hint = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  json_maximumresults QString [optional]
    * @param[in]  json_maximumresults_type_hint QString [optional]
    * @param[in]  enable_html bool [optional]
    * @param[in]  enable_html_type_hint QString [optional]
    * @param[in]  enable_txt bool [optional]
    * @param[in]  enable_txt_type_hint QString [optional]
    * @param[in]  enable_xml bool [optional]
    * @param[in]  enable_xml_type_hint QString [optional]
    */
    virtual void postConfigApacheSlingGetServlet(const ::OpenAPI::OptionalParam<QString> &json_maximumresults = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &json_maximumresults_type_hint = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &enable_html = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &enable_html_type_hint = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &enable_txt = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &enable_txt_type_hint = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &enable_xml = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &enable_xml_type_hint = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  allow_empty bool [optional]
    * @param[in]  allow_empty_type_hint QString [optional]
    * @param[in]  allow_hosts QString [optional]
    * @param[in]  allow_hosts_type_hint QString [optional]
    * @param[in]  allow_hosts_regexp QString [optional]
    * @param[in]  allow_hosts_regexp_type_hint QString [optional]
    * @param[in]  filter_methods QString [optional]
    * @param[in]  filter_methods_type_hint QString [optional]
    */
    virtual void postConfigApacheSlingReferrerFilter(const ::OpenAPI::OptionalParam<bool> &allow_empty = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &allow_empty_type_hint = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &allow_hosts = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &allow_hosts_type_hint = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &allow_hosts_regexp = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &allow_hosts_regexp_type_hint = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter_methods = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter_methods_type_hint = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  config_node_name QString [required]
    */
    virtual void postConfigProperty(const QString &config_node_name);

    /**
    * @param[in]  path QString [required]
    * @param[in]  name QString [required]
    * @param[in]  operation QString [optional]
    * @param[in]  delete_authorizable QString [optional]
    * @param[in]  file OAIHttpFileElement [optional]
    */
    virtual void postNode(const QString &path, const QString &name, const ::OpenAPI::OptionalParam<QString> &operation = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &delete_authorizable = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIHttpFileElement> &file = ::OpenAPI::OptionalParam<OAIHttpFileElement>());

    /**
    * @param[in]  path QString [required]
    * @param[in]  name QString [required]
    * @param[in]  add_members QString [optional]
    */
    virtual void postNodeRw(const QString &path, const QString &name, const ::OpenAPI::OptionalParam<QString> &add_members = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  path QString [required]
    * @param[in]  jcrprimary_type QString [required]
    * @param[in]  name QString [required]
    */
    virtual void postPath(const QString &path, const QString &jcrprimary_type, const QString &name);

    /**
    * @param[in]  path QString [required]
    * @param[in]  p_limit double [required]
    * @param[in]  r_1_property QString [required]
    * @param[in]  r_1_property_value QString [required]
    */
    virtual void postQuery(const QString &path, const double &p_limit, const QString &r_1_property, const QString &r_1_property_value);

    /**
    * @param[in]  ignoredeactivated bool [required]
    * @param[in]  onlymodified bool [required]
    * @param[in]  path QString [required]
    * @param[in]  cmd QString [required]
    */
    virtual void postTreeActivation(const bool &ignoredeactivated, const bool &onlymodified, const QString &path, const QString &cmd);

    /**
    * @param[in]  operation QString [optional]
    * @param[in]  new_password QString [optional]
    * @param[in]  re_password QString [optional]
    * @param[in]  key_store_type QString [optional]
    * @param[in]  remove_alias QString [optional]
    * @param[in]  certificate OAIHttpFileElement [optional]
    */
    virtual void postTruststore(const ::OpenAPI::OptionalParam<QString> &operation = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &new_password = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &re_password = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key_store_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &remove_alias = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIHttpFileElement> &certificate = ::OpenAPI::OptionalParam<OAIHttpFileElement>());

    /**
    * @param[in]  truststore_p12 OAIHttpFileElement [optional]
    */
    virtual void postTruststorePKCS12(const ::OpenAPI::OptionalParam<OAIHttpFileElement> &truststore_p12 = ::OpenAPI::OptionalParam<OAIHttpFileElement>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void deleteAgentCallback(OAIHttpRequestWorker *worker);
    void deleteNodeCallback(OAIHttpRequestWorker *worker);
    void getAgentCallback(OAIHttpRequestWorker *worker);
    void getAgentsCallback(OAIHttpRequestWorker *worker);
    void getAuthorizableKeystoreCallback(OAIHttpRequestWorker *worker);
    void getKeystoreCallback(OAIHttpRequestWorker *worker);
    void getNodeCallback(OAIHttpRequestWorker *worker);
    void getPackageCallback(OAIHttpRequestWorker *worker);
    void getPackageFilterCallback(OAIHttpRequestWorker *worker);
    void getQueryCallback(OAIHttpRequestWorker *worker);
    void getTruststoreCallback(OAIHttpRequestWorker *worker);
    void getTruststoreInfoCallback(OAIHttpRequestWorker *worker);
    void postAgentCallback(OAIHttpRequestWorker *worker);
    void postAuthorizableKeystoreCallback(OAIHttpRequestWorker *worker);
    void postAuthorizablesCallback(OAIHttpRequestWorker *worker);
    void postConfigAdobeGraniteSamlAuthenticationHandlerCallback(OAIHttpRequestWorker *worker);
    void postConfigApacheFelixJettyBasedHttpServiceCallback(OAIHttpRequestWorker *worker);
    void postConfigApacheHttpComponentsProxyConfigurationCallback(OAIHttpRequestWorker *worker);
    void postConfigApacheSlingDavExServletCallback(OAIHttpRequestWorker *worker);
    void postConfigApacheSlingGetServletCallback(OAIHttpRequestWorker *worker);
    void postConfigApacheSlingReferrerFilterCallback(OAIHttpRequestWorker *worker);
    void postConfigPropertyCallback(OAIHttpRequestWorker *worker);
    void postNodeCallback(OAIHttpRequestWorker *worker);
    void postNodeRwCallback(OAIHttpRequestWorker *worker);
    void postPathCallback(OAIHttpRequestWorker *worker);
    void postQueryCallback(OAIHttpRequestWorker *worker);
    void postTreeActivationCallback(OAIHttpRequestWorker *worker);
    void postTruststoreCallback(OAIHttpRequestWorker *worker);
    void postTruststorePKCS12Callback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void deleteAgentSignal();
    void deleteNodeSignal();
    void getAgentSignal();
    void getAgentsSignal(QString summary);
    void getAuthorizableKeystoreSignal(OAIKeystoreInfo summary);
    void getKeystoreSignal(OAIHttpFileElement summary);
    void getNodeSignal();
    void getPackageSignal(OAIHttpFileElement summary);
    void getPackageFilterSignal(QString summary);
    void getQuerySignal(QString summary);
    void getTruststoreSignal(OAIHttpFileElement summary);
    void getTruststoreInfoSignal(OAITruststoreInfo summary);
    void postAgentSignal();
    void postAuthorizableKeystoreSignal(OAIKeystoreInfo summary);
    void postAuthorizablesSignal(QString summary);
    void postConfigAdobeGraniteSamlAuthenticationHandlerSignal();
    void postConfigApacheFelixJettyBasedHttpServiceSignal();
    void postConfigApacheHttpComponentsProxyConfigurationSignal();
    void postConfigApacheSlingDavExServletSignal();
    void postConfigApacheSlingGetServletSignal();
    void postConfigApacheSlingReferrerFilterSignal();
    void postConfigPropertySignal();
    void postNodeSignal();
    void postNodeRwSignal();
    void postPathSignal();
    void postQuerySignal(QString summary);
    void postTreeActivationSignal();
    void postTruststoreSignal(QString summary);
    void postTruststorePKCS12Signal(QString summary);


    void deleteAgentSignalFull(OAIHttpRequestWorker *worker);
    void deleteNodeSignalFull(OAIHttpRequestWorker *worker);
    void getAgentSignalFull(OAIHttpRequestWorker *worker);
    void getAgentsSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void getAuthorizableKeystoreSignalFull(OAIHttpRequestWorker *worker, OAIKeystoreInfo summary);
    void getKeystoreSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void getNodeSignalFull(OAIHttpRequestWorker *worker);
    void getPackageSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void getPackageFilterSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void getQuerySignalFull(OAIHttpRequestWorker *worker, QString summary);
    void getTruststoreSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void getTruststoreInfoSignalFull(OAIHttpRequestWorker *worker, OAITruststoreInfo summary);
    void postAgentSignalFull(OAIHttpRequestWorker *worker);
    void postAuthorizableKeystoreSignalFull(OAIHttpRequestWorker *worker, OAIKeystoreInfo summary);
    void postAuthorizablesSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void postConfigAdobeGraniteSamlAuthenticationHandlerSignalFull(OAIHttpRequestWorker *worker);
    void postConfigApacheFelixJettyBasedHttpServiceSignalFull(OAIHttpRequestWorker *worker);
    void postConfigApacheHttpComponentsProxyConfigurationSignalFull(OAIHttpRequestWorker *worker);
    void postConfigApacheSlingDavExServletSignalFull(OAIHttpRequestWorker *worker);
    void postConfigApacheSlingGetServletSignalFull(OAIHttpRequestWorker *worker);
    void postConfigApacheSlingReferrerFilterSignalFull(OAIHttpRequestWorker *worker);
    void postConfigPropertySignalFull(OAIHttpRequestWorker *worker);
    void postNodeSignalFull(OAIHttpRequestWorker *worker);
    void postNodeRwSignalFull(OAIHttpRequestWorker *worker);
    void postPathSignalFull(OAIHttpRequestWorker *worker);
    void postQuerySignalFull(OAIHttpRequestWorker *worker, QString summary);
    void postTreeActivationSignalFull(OAIHttpRequestWorker *worker);
    void postTruststoreSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void postTruststorePKCS12SignalFull(OAIHttpRequestWorker *worker, QString summary);

    Q_DECL_DEPRECATED_X("Use deleteAgentSignalError() instead")
    void deleteAgentSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteAgentSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNodeSignalError() instead")
    void deleteNodeSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNodeSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAgentSignalError() instead")
    void getAgentSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getAgentSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAgentsSignalError() instead")
    void getAgentsSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAgentsSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAuthorizableKeystoreSignalError() instead")
    void getAuthorizableKeystoreSignalE(OAIKeystoreInfo summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAuthorizableKeystoreSignalError(OAIKeystoreInfo summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getKeystoreSignalError() instead")
    void getKeystoreSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getKeystoreSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNodeSignalError() instead")
    void getNodeSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getNodeSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPackageSignalError() instead")
    void getPackageSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPackageSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPackageFilterSignalError() instead")
    void getPackageFilterSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPackageFilterSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getQuerySignalError() instead")
    void getQuerySignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getQuerySignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTruststoreSignalError() instead")
    void getTruststoreSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTruststoreSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTruststoreInfoSignalError() instead")
    void getTruststoreInfoSignalE(OAITruststoreInfo summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTruststoreInfoSignalError(OAITruststoreInfo summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postAgentSignalError() instead")
    void postAgentSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void postAgentSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postAuthorizableKeystoreSignalError() instead")
    void postAuthorizableKeystoreSignalE(OAIKeystoreInfo summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postAuthorizableKeystoreSignalError(OAIKeystoreInfo summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postAuthorizablesSignalError() instead")
    void postAuthorizablesSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postAuthorizablesSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postConfigAdobeGraniteSamlAuthenticationHandlerSignalError() instead")
    void postConfigAdobeGraniteSamlAuthenticationHandlerSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void postConfigAdobeGraniteSamlAuthenticationHandlerSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postConfigApacheFelixJettyBasedHttpServiceSignalError() instead")
    void postConfigApacheFelixJettyBasedHttpServiceSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void postConfigApacheFelixJettyBasedHttpServiceSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postConfigApacheHttpComponentsProxyConfigurationSignalError() instead")
    void postConfigApacheHttpComponentsProxyConfigurationSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void postConfigApacheHttpComponentsProxyConfigurationSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postConfigApacheSlingDavExServletSignalError() instead")
    void postConfigApacheSlingDavExServletSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void postConfigApacheSlingDavExServletSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postConfigApacheSlingGetServletSignalError() instead")
    void postConfigApacheSlingGetServletSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void postConfigApacheSlingGetServletSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postConfigApacheSlingReferrerFilterSignalError() instead")
    void postConfigApacheSlingReferrerFilterSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void postConfigApacheSlingReferrerFilterSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postConfigPropertySignalError() instead")
    void postConfigPropertySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void postConfigPropertySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postNodeSignalError() instead")
    void postNodeSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void postNodeSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postNodeRwSignalError() instead")
    void postNodeRwSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void postNodeRwSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postPathSignalError() instead")
    void postPathSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void postPathSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postQuerySignalError() instead")
    void postQuerySignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postQuerySignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postTreeActivationSignalError() instead")
    void postTreeActivationSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void postTreeActivationSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postTruststoreSignalError() instead")
    void postTruststoreSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postTruststoreSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postTruststorePKCS12SignalError() instead")
    void postTruststorePKCS12SignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postTruststorePKCS12SignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use deleteAgentSignalErrorFull() instead")
    void deleteAgentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteAgentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteNodeSignalErrorFull() instead")
    void deleteNodeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteNodeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAgentSignalErrorFull() instead")
    void getAgentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAgentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAgentsSignalErrorFull() instead")
    void getAgentsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAgentsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAuthorizableKeystoreSignalErrorFull() instead")
    void getAuthorizableKeystoreSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAuthorizableKeystoreSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getKeystoreSignalErrorFull() instead")
    void getKeystoreSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getKeystoreSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNodeSignalErrorFull() instead")
    void getNodeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNodeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPackageSignalErrorFull() instead")
    void getPackageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPackageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPackageFilterSignalErrorFull() instead")
    void getPackageFilterSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPackageFilterSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getQuerySignalErrorFull() instead")
    void getQuerySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getQuerySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTruststoreSignalErrorFull() instead")
    void getTruststoreSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTruststoreSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTruststoreInfoSignalErrorFull() instead")
    void getTruststoreInfoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTruststoreInfoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postAgentSignalErrorFull() instead")
    void postAgentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postAgentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postAuthorizableKeystoreSignalErrorFull() instead")
    void postAuthorizableKeystoreSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postAuthorizableKeystoreSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postAuthorizablesSignalErrorFull() instead")
    void postAuthorizablesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postAuthorizablesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postConfigAdobeGraniteSamlAuthenticationHandlerSignalErrorFull() instead")
    void postConfigAdobeGraniteSamlAuthenticationHandlerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postConfigAdobeGraniteSamlAuthenticationHandlerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postConfigApacheFelixJettyBasedHttpServiceSignalErrorFull() instead")
    void postConfigApacheFelixJettyBasedHttpServiceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postConfigApacheFelixJettyBasedHttpServiceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postConfigApacheHttpComponentsProxyConfigurationSignalErrorFull() instead")
    void postConfigApacheHttpComponentsProxyConfigurationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postConfigApacheHttpComponentsProxyConfigurationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postConfigApacheSlingDavExServletSignalErrorFull() instead")
    void postConfigApacheSlingDavExServletSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postConfigApacheSlingDavExServletSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postConfigApacheSlingGetServletSignalErrorFull() instead")
    void postConfigApacheSlingGetServletSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postConfigApacheSlingGetServletSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postConfigApacheSlingReferrerFilterSignalErrorFull() instead")
    void postConfigApacheSlingReferrerFilterSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postConfigApacheSlingReferrerFilterSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postConfigPropertySignalErrorFull() instead")
    void postConfigPropertySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postConfigPropertySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postNodeSignalErrorFull() instead")
    void postNodeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postNodeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postNodeRwSignalErrorFull() instead")
    void postNodeRwSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postNodeRwSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postPathSignalErrorFull() instead")
    void postPathSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postPathSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postQuerySignalErrorFull() instead")
    void postQuerySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postQuerySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postTreeActivationSignalErrorFull() instead")
    void postTreeActivationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postTreeActivationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postTruststoreSignalErrorFull() instead")
    void postTruststoreSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postTruststoreSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postTruststorePKCS12SignalErrorFull() instead")
    void postTruststorePKCS12SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postTruststorePKCS12SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
