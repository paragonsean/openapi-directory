/**
 * Adobe Experience Manager (AEM) API
 * Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
 *
 * The version of the OpenAPI document: 3.7.1-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISamlConfigurationPropertyItemsArray.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISamlConfigurationPropertyItemsArray::OAISamlConfigurationPropertyItemsArray(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISamlConfigurationPropertyItemsArray::OAISamlConfigurationPropertyItemsArray() {
    this->initializeModel();
}

OAISamlConfigurationPropertyItemsArray::~OAISamlConfigurationPropertyItemsArray() {}

void OAISamlConfigurationPropertyItemsArray::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_is_set_isSet = false;
    m_is_set_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_optional_isSet = false;
    m_optional_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_values_isSet = false;
    m_values_isValid = false;
}

void OAISamlConfigurationPropertyItemsArray::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISamlConfigurationPropertyItemsArray::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_is_set_isValid = ::OpenAPI::fromJsonValue(m_is_set, json[QString("is_set")]);
    m_is_set_isSet = !json[QString("is_set")].isNull() && m_is_set_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_optional_isValid = ::OpenAPI::fromJsonValue(m_optional, json[QString("optional")]);
    m_optional_isSet = !json[QString("optional")].isNull() && m_optional_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_values_isValid = ::OpenAPI::fromJsonValue(m_values, json[QString("values")]);
    m_values_isSet = !json[QString("values")].isNull() && m_values_isValid;
}

QString OAISamlConfigurationPropertyItemsArray::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISamlConfigurationPropertyItemsArray::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_is_set_isSet) {
        obj.insert(QString("is_set"), ::OpenAPI::toJsonValue(m_is_set));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_optional_isSet) {
        obj.insert(QString("optional"), ::OpenAPI::toJsonValue(m_optional));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_values.size() > 0) {
        obj.insert(QString("values"), ::OpenAPI::toJsonValue(m_values));
    }
    return obj;
}

QString OAISamlConfigurationPropertyItemsArray::getDescription() const {
    return m_description;
}
void OAISamlConfigurationPropertyItemsArray::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAISamlConfigurationPropertyItemsArray::is_description_Set() const{
    return m_description_isSet;
}

bool OAISamlConfigurationPropertyItemsArray::is_description_Valid() const{
    return m_description_isValid;
}

bool OAISamlConfigurationPropertyItemsArray::isIsSet() const {
    return m_is_set;
}
void OAISamlConfigurationPropertyItemsArray::setIsSet(const bool &is_set) {
    m_is_set = is_set;
    m_is_set_isSet = true;
}

bool OAISamlConfigurationPropertyItemsArray::is_is_set_Set() const{
    return m_is_set_isSet;
}

bool OAISamlConfigurationPropertyItemsArray::is_is_set_Valid() const{
    return m_is_set_isValid;
}

QString OAISamlConfigurationPropertyItemsArray::getName() const {
    return m_name;
}
void OAISamlConfigurationPropertyItemsArray::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAISamlConfigurationPropertyItemsArray::is_name_Set() const{
    return m_name_isSet;
}

bool OAISamlConfigurationPropertyItemsArray::is_name_Valid() const{
    return m_name_isValid;
}

bool OAISamlConfigurationPropertyItemsArray::isOptional() const {
    return m_optional;
}
void OAISamlConfigurationPropertyItemsArray::setOptional(const bool &optional) {
    m_optional = optional;
    m_optional_isSet = true;
}

bool OAISamlConfigurationPropertyItemsArray::is_optional_Set() const{
    return m_optional_isSet;
}

bool OAISamlConfigurationPropertyItemsArray::is_optional_Valid() const{
    return m_optional_isValid;
}

qint32 OAISamlConfigurationPropertyItemsArray::getType() const {
    return m_type;
}
void OAISamlConfigurationPropertyItemsArray::setType(const qint32 &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAISamlConfigurationPropertyItemsArray::is_type_Set() const{
    return m_type_isSet;
}

bool OAISamlConfigurationPropertyItemsArray::is_type_Valid() const{
    return m_type_isValid;
}

QList<QString> OAISamlConfigurationPropertyItemsArray::getValues() const {
    return m_values;
}
void OAISamlConfigurationPropertyItemsArray::setValues(const QList<QString> &values) {
    m_values = values;
    m_values_isSet = true;
}

bool OAISamlConfigurationPropertyItemsArray::is_values_Set() const{
    return m_values_isSet;
}

bool OAISamlConfigurationPropertyItemsArray::is_values_Valid() const{
    return m_values_isValid;
}

bool OAISamlConfigurationPropertyItemsArray::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_set_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_optional_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_values.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISamlConfigurationPropertyItemsArray::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
