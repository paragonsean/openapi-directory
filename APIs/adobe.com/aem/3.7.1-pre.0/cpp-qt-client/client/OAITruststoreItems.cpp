/**
 * Adobe Experience Manager (AEM) API
 * Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
 *
 * The version of the OpenAPI document: 3.7.1-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITruststoreItems.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITruststoreItems::OAITruststoreItems(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITruststoreItems::OAITruststoreItems() {
    this->initializeModel();
}

OAITruststoreItems::~OAITruststoreItems() {}

void OAITruststoreItems::initializeModel() {

    m_alias_isSet = false;
    m_alias_isValid = false;

    m_entry_type_isSet = false;
    m_entry_type_isValid = false;

    m_issuer_isSet = false;
    m_issuer_isValid = false;

    m_not_after_isSet = false;
    m_not_after_isValid = false;

    m_not_before_isSet = false;
    m_not_before_isValid = false;

    m_serial_number_isSet = false;
    m_serial_number_isValid = false;

    m_subject_isSet = false;
    m_subject_isValid = false;
}

void OAITruststoreItems::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITruststoreItems::fromJsonObject(QJsonObject json) {

    m_alias_isValid = ::OpenAPI::fromJsonValue(m_alias, json[QString("alias")]);
    m_alias_isSet = !json[QString("alias")].isNull() && m_alias_isValid;

    m_entry_type_isValid = ::OpenAPI::fromJsonValue(m_entry_type, json[QString("entryType")]);
    m_entry_type_isSet = !json[QString("entryType")].isNull() && m_entry_type_isValid;

    m_issuer_isValid = ::OpenAPI::fromJsonValue(m_issuer, json[QString("issuer")]);
    m_issuer_isSet = !json[QString("issuer")].isNull() && m_issuer_isValid;

    m_not_after_isValid = ::OpenAPI::fromJsonValue(m_not_after, json[QString("notAfter")]);
    m_not_after_isSet = !json[QString("notAfter")].isNull() && m_not_after_isValid;

    m_not_before_isValid = ::OpenAPI::fromJsonValue(m_not_before, json[QString("notBefore")]);
    m_not_before_isSet = !json[QString("notBefore")].isNull() && m_not_before_isValid;

    m_serial_number_isValid = ::OpenAPI::fromJsonValue(m_serial_number, json[QString("serialNumber")]);
    m_serial_number_isSet = !json[QString("serialNumber")].isNull() && m_serial_number_isValid;

    m_subject_isValid = ::OpenAPI::fromJsonValue(m_subject, json[QString("subject")]);
    m_subject_isSet = !json[QString("subject")].isNull() && m_subject_isValid;
}

QString OAITruststoreItems::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITruststoreItems::asJsonObject() const {
    QJsonObject obj;
    if (m_alias_isSet) {
        obj.insert(QString("alias"), ::OpenAPI::toJsonValue(m_alias));
    }
    if (m_entry_type_isSet) {
        obj.insert(QString("entryType"), ::OpenAPI::toJsonValue(m_entry_type));
    }
    if (m_issuer_isSet) {
        obj.insert(QString("issuer"), ::OpenAPI::toJsonValue(m_issuer));
    }
    if (m_not_after_isSet) {
        obj.insert(QString("notAfter"), ::OpenAPI::toJsonValue(m_not_after));
    }
    if (m_not_before_isSet) {
        obj.insert(QString("notBefore"), ::OpenAPI::toJsonValue(m_not_before));
    }
    if (m_serial_number_isSet) {
        obj.insert(QString("serialNumber"), ::OpenAPI::toJsonValue(m_serial_number));
    }
    if (m_subject_isSet) {
        obj.insert(QString("subject"), ::OpenAPI::toJsonValue(m_subject));
    }
    return obj;
}

QString OAITruststoreItems::getAlias() const {
    return m_alias;
}
void OAITruststoreItems::setAlias(const QString &alias) {
    m_alias = alias;
    m_alias_isSet = true;
}

bool OAITruststoreItems::is_alias_Set() const{
    return m_alias_isSet;
}

bool OAITruststoreItems::is_alias_Valid() const{
    return m_alias_isValid;
}

QString OAITruststoreItems::getEntryType() const {
    return m_entry_type;
}
void OAITruststoreItems::setEntryType(const QString &entry_type) {
    m_entry_type = entry_type;
    m_entry_type_isSet = true;
}

bool OAITruststoreItems::is_entry_type_Set() const{
    return m_entry_type_isSet;
}

bool OAITruststoreItems::is_entry_type_Valid() const{
    return m_entry_type_isValid;
}

QString OAITruststoreItems::getIssuer() const {
    return m_issuer;
}
void OAITruststoreItems::setIssuer(const QString &issuer) {
    m_issuer = issuer;
    m_issuer_isSet = true;
}

bool OAITruststoreItems::is_issuer_Set() const{
    return m_issuer_isSet;
}

bool OAITruststoreItems::is_issuer_Valid() const{
    return m_issuer_isValid;
}

QString OAITruststoreItems::getNotAfter() const {
    return m_not_after;
}
void OAITruststoreItems::setNotAfter(const QString &not_after) {
    m_not_after = not_after;
    m_not_after_isSet = true;
}

bool OAITruststoreItems::is_not_after_Set() const{
    return m_not_after_isSet;
}

bool OAITruststoreItems::is_not_after_Valid() const{
    return m_not_after_isValid;
}

QString OAITruststoreItems::getNotBefore() const {
    return m_not_before;
}
void OAITruststoreItems::setNotBefore(const QString &not_before) {
    m_not_before = not_before;
    m_not_before_isSet = true;
}

bool OAITruststoreItems::is_not_before_Set() const{
    return m_not_before_isSet;
}

bool OAITruststoreItems::is_not_before_Valid() const{
    return m_not_before_isValid;
}

qint32 OAITruststoreItems::getSerialNumber() const {
    return m_serial_number;
}
void OAITruststoreItems::setSerialNumber(const qint32 &serial_number) {
    m_serial_number = serial_number;
    m_serial_number_isSet = true;
}

bool OAITruststoreItems::is_serial_number_Set() const{
    return m_serial_number_isSet;
}

bool OAITruststoreItems::is_serial_number_Valid() const{
    return m_serial_number_isValid;
}

QString OAITruststoreItems::getSubject() const {
    return m_subject;
}
void OAITruststoreItems::setSubject(const QString &subject) {
    m_subject = subject;
    m_subject_isSet = true;
}

bool OAITruststoreItems::is_subject_Set() const{
    return m_subject_isSet;
}

bool OAITruststoreItems::is_subject_Valid() const{
    return m_subject_isValid;
}

bool OAITruststoreItems::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_alias_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entry_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_issuer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_not_after_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_not_before_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_serial_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subject_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITruststoreItems::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
