/**
 * Adobe Experience Manager (AEM) API
 * Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
 *
 * The version of the OpenAPI document: 3.7.1-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIConsoleApi_H
#define OAI_OAIConsoleApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBundleInfo.h"
#include "OAISamlConfigurationInfo.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIConsoleApi : public QObject {
    Q_OBJECT

public:
    OAIConsoleApi(const int timeOut = 0);
    ~OAIConsoleApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);


    virtual void getAemProductInfo();

    /**
    * @param[in]  name QString [required]
    */
    virtual void getBundleInfo(const QString &name);


    virtual void getConfigMgr();

    /**
    * @param[in]  name QString [required]
    * @param[in]  action QString [required]
    */
    virtual void postBundle(const QString &name, const QString &action);

    /**
    * @param[in]  action QString [required]
    */
    virtual void postJmxRepository(const QString &action);

    /**
    * @param[in]  post bool [optional]
    * @param[in]  apply bool [optional]
    * @param[in]  r_delete bool [optional]
    * @param[in]  action QString [optional]
    * @param[in]  location QString [optional]
    * @param[in]  path QList<QString> [optional]
    * @param[in]  service_ranking qint32 [optional]
    * @param[in]  idp_url QString [optional]
    * @param[in]  idp_cert_alias QString [optional]
    * @param[in]  idp_http_redirect bool [optional]
    * @param[in]  service_provider_entity_id QString [optional]
    * @param[in]  assertion_consumer_service_url QString [optional]
    * @param[in]  sp_private_key_alias QString [optional]
    * @param[in]  key_store_password QString [optional]
    * @param[in]  default_redirect_url QString [optional]
    * @param[in]  user_id_attribute QString [optional]
    * @param[in]  use_encryption bool [optional]
    * @param[in]  create_user bool [optional]
    * @param[in]  add_group_memberships bool [optional]
    * @param[in]  group_membership_attribute QString [optional]
    * @param[in]  default_groups QList<QString> [optional]
    * @param[in]  name_id_format QString [optional]
    * @param[in]  synchronize_attributes QList<QString> [optional]
    * @param[in]  handle_logout bool [optional]
    * @param[in]  logout_url QString [optional]
    * @param[in]  clock_tolerance qint32 [optional]
    * @param[in]  digest_method QString [optional]
    * @param[in]  signature_method QString [optional]
    * @param[in]  user_intermediate_path QString [optional]
    * @param[in]  propertylist QList<QString> [optional]
    */
    virtual void postSamlConfiguration(const ::OpenAPI::OptionalParam<bool> &post = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &apply = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &r_delete = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &action = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &location = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &path = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &service_ranking = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &idp_url = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &idp_cert_alias = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &idp_http_redirect = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &service_provider_entity_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &assertion_consumer_service_url = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sp_private_key_alias = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key_store_password = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &default_redirect_url = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user_id_attribute = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &use_encryption = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &create_user = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &add_group_memberships = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &group_membership_attribute = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &default_groups = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &name_id_format = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &synchronize_attributes = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &handle_logout = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &logout_url = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &clock_tolerance = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &digest_method = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &signature_method = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user_intermediate_path = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &propertylist = ::OpenAPI::OptionalParam<QList<QString>>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getAemProductInfoCallback(OAIHttpRequestWorker *worker);
    void getBundleInfoCallback(OAIHttpRequestWorker *worker);
    void getConfigMgrCallback(OAIHttpRequestWorker *worker);
    void postBundleCallback(OAIHttpRequestWorker *worker);
    void postJmxRepositoryCallback(OAIHttpRequestWorker *worker);
    void postSamlConfigurationCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getAemProductInfoSignal(QList<QString> summary);
    void getBundleInfoSignal(OAIBundleInfo summary);
    void getConfigMgrSignal(QString summary);
    void postBundleSignal();
    void postJmxRepositorySignal();
    void postSamlConfigurationSignal(OAISamlConfigurationInfo summary);


    void getAemProductInfoSignalFull(OAIHttpRequestWorker *worker, QList<QString> summary);
    void getBundleInfoSignalFull(OAIHttpRequestWorker *worker, OAIBundleInfo summary);
    void getConfigMgrSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void postBundleSignalFull(OAIHttpRequestWorker *worker);
    void postJmxRepositorySignalFull(OAIHttpRequestWorker *worker);
    void postSamlConfigurationSignalFull(OAIHttpRequestWorker *worker, OAISamlConfigurationInfo summary);

    Q_DECL_DEPRECATED_X("Use getAemProductInfoSignalError() instead")
    void getAemProductInfoSignalE(QList<QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAemProductInfoSignalError(QList<QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getBundleInfoSignalError() instead")
    void getBundleInfoSignalE(OAIBundleInfo summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getBundleInfoSignalError(OAIBundleInfo summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getConfigMgrSignalError() instead")
    void getConfigMgrSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getConfigMgrSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postBundleSignalError() instead")
    void postBundleSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void postBundleSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postJmxRepositorySignalError() instead")
    void postJmxRepositorySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void postJmxRepositorySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postSamlConfigurationSignalError() instead")
    void postSamlConfigurationSignalE(OAISamlConfigurationInfo summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postSamlConfigurationSignalError(OAISamlConfigurationInfo summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getAemProductInfoSignalErrorFull() instead")
    void getAemProductInfoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAemProductInfoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getBundleInfoSignalErrorFull() instead")
    void getBundleInfoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getBundleInfoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getConfigMgrSignalErrorFull() instead")
    void getConfigMgrSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getConfigMgrSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postBundleSignalErrorFull() instead")
    void postBundleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postBundleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postJmxRepositorySignalErrorFull() instead")
    void postJmxRepositorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postJmxRepositorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postSamlConfigurationSignalErrorFull() instead")
    void postSamlConfigurationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postSamlConfigurationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
