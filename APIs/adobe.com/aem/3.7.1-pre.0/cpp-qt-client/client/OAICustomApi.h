/**
 * Adobe Experience Manager (AEM) API
 * Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
 *
 * The version of the OpenAPI document: 3.7.1-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAICustomApi_H
#define OAI_OAICustomApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAICustomApi : public QObject {
    Q_OBJECT

public:
    OAICustomApi(const int timeOut = 0);
    ~OAICustomApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  tags QString [optional]
    * @param[in]  combine_tags_or bool [optional]
    */
    virtual void getAemHealthCheck(const ::OpenAPI::OptionalParam<QString> &tags = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &combine_tags_or = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  bundles_ignored QList<QString> [optional]
    * @param[in]  bundles_ignored_type_hint QString [optional]
    */
    virtual void postConfigAemHealthCheckServlet(const ::OpenAPI::OptionalParam<QList<QString>> &bundles_ignored = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &bundles_ignored_type_hint = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  pwdreset_authorizables QList<QString> [optional]
    * @param[in]  pwdreset_authorizables_type_hint QString [optional]
    */
    virtual void postConfigAemPasswordReset(const ::OpenAPI::OptionalParam<QList<QString>> &pwdreset_authorizables = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &pwdreset_authorizables_type_hint = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getAemHealthCheckCallback(OAIHttpRequestWorker *worker);
    void postConfigAemHealthCheckServletCallback(OAIHttpRequestWorker *worker);
    void postConfigAemPasswordResetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getAemHealthCheckSignal(QString summary);
    void postConfigAemHealthCheckServletSignal();
    void postConfigAemPasswordResetSignal();


    void getAemHealthCheckSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void postConfigAemHealthCheckServletSignalFull(OAIHttpRequestWorker *worker);
    void postConfigAemPasswordResetSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use getAemHealthCheckSignalError() instead")
    void getAemHealthCheckSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAemHealthCheckSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postConfigAemHealthCheckServletSignalError() instead")
    void postConfigAemHealthCheckServletSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void postConfigAemHealthCheckServletSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postConfigAemPasswordResetSignalError() instead")
    void postConfigAemPasswordResetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void postConfigAemPasswordResetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getAemHealthCheckSignalErrorFull() instead")
    void getAemHealthCheckSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAemHealthCheckSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postConfigAemHealthCheckServletSignalErrorFull() instead")
    void postConfigAemHealthCheckServletSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postConfigAemHealthCheckServletSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postConfigAemPasswordResetSignalErrorFull() instead")
    void postConfigAemPasswordResetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postConfigAemPasswordResetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
