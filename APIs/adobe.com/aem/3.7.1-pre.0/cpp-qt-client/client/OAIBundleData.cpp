/**
 * Adobe Experience Manager (AEM) API
 * Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
 *
 * The version of the OpenAPI document: 3.7.1-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBundleData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBundleData::OAIBundleData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBundleData::OAIBundleData() {
    this->initializeModel();
}

OAIBundleData::~OAIBundleData() {}

void OAIBundleData::initializeModel() {

    m_category_isSet = false;
    m_category_isValid = false;

    m_fragment_isSet = false;
    m_fragment_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_props_isSet = false;
    m_props_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_state_raw_isSet = false;
    m_state_raw_isValid = false;

    m_symbolic_name_isSet = false;
    m_symbolic_name_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIBundleData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBundleData::fromJsonObject(QJsonObject json) {

    m_category_isValid = ::OpenAPI::fromJsonValue(m_category, json[QString("category")]);
    m_category_isSet = !json[QString("category")].isNull() && m_category_isValid;

    m_fragment_isValid = ::OpenAPI::fromJsonValue(m_fragment, json[QString("fragment")]);
    m_fragment_isSet = !json[QString("fragment")].isNull() && m_fragment_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_props_isValid = ::OpenAPI::fromJsonValue(m_props, json[QString("props")]);
    m_props_isSet = !json[QString("props")].isNull() && m_props_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_state_raw_isValid = ::OpenAPI::fromJsonValue(m_state_raw, json[QString("stateRaw")]);
    m_state_raw_isSet = !json[QString("stateRaw")].isNull() && m_state_raw_isValid;

    m_symbolic_name_isValid = ::OpenAPI::fromJsonValue(m_symbolic_name, json[QString("symbolicName")]);
    m_symbolic_name_isSet = !json[QString("symbolicName")].isNull() && m_symbolic_name_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAIBundleData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBundleData::asJsonObject() const {
    QJsonObject obj;
    if (m_category_isSet) {
        obj.insert(QString("category"), ::OpenAPI::toJsonValue(m_category));
    }
    if (m_fragment_isSet) {
        obj.insert(QString("fragment"), ::OpenAPI::toJsonValue(m_fragment));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_props.size() > 0) {
        obj.insert(QString("props"), ::OpenAPI::toJsonValue(m_props));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_state_raw_isSet) {
        obj.insert(QString("stateRaw"), ::OpenAPI::toJsonValue(m_state_raw));
    }
    if (m_symbolic_name_isSet) {
        obj.insert(QString("symbolicName"), ::OpenAPI::toJsonValue(m_symbolic_name));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

QString OAIBundleData::getCategory() const {
    return m_category;
}
void OAIBundleData::setCategory(const QString &category) {
    m_category = category;
    m_category_isSet = true;
}

bool OAIBundleData::is_category_Set() const{
    return m_category_isSet;
}

bool OAIBundleData::is_category_Valid() const{
    return m_category_isValid;
}

bool OAIBundleData::isFragment() const {
    return m_fragment;
}
void OAIBundleData::setFragment(const bool &fragment) {
    m_fragment = fragment;
    m_fragment_isSet = true;
}

bool OAIBundleData::is_fragment_Set() const{
    return m_fragment_isSet;
}

bool OAIBundleData::is_fragment_Valid() const{
    return m_fragment_isValid;
}

qint32 OAIBundleData::getId() const {
    return m_id;
}
void OAIBundleData::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIBundleData::is_id_Set() const{
    return m_id_isSet;
}

bool OAIBundleData::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIBundleData::getName() const {
    return m_name;
}
void OAIBundleData::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIBundleData::is_name_Set() const{
    return m_name_isSet;
}

bool OAIBundleData::is_name_Valid() const{
    return m_name_isValid;
}

QList<OAIBundleDataProp> OAIBundleData::getProps() const {
    return m_props;
}
void OAIBundleData::setProps(const QList<OAIBundleDataProp> &props) {
    m_props = props;
    m_props_isSet = true;
}

bool OAIBundleData::is_props_Set() const{
    return m_props_isSet;
}

bool OAIBundleData::is_props_Valid() const{
    return m_props_isValid;
}

QString OAIBundleData::getState() const {
    return m_state;
}
void OAIBundleData::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIBundleData::is_state_Set() const{
    return m_state_isSet;
}

bool OAIBundleData::is_state_Valid() const{
    return m_state_isValid;
}

qint32 OAIBundleData::getStateRaw() const {
    return m_state_raw;
}
void OAIBundleData::setStateRaw(const qint32 &state_raw) {
    m_state_raw = state_raw;
    m_state_raw_isSet = true;
}

bool OAIBundleData::is_state_raw_Set() const{
    return m_state_raw_isSet;
}

bool OAIBundleData::is_state_raw_Valid() const{
    return m_state_raw_isValid;
}

QString OAIBundleData::getSymbolicName() const {
    return m_symbolic_name;
}
void OAIBundleData::setSymbolicName(const QString &symbolic_name) {
    m_symbolic_name = symbolic_name;
    m_symbolic_name_isSet = true;
}

bool OAIBundleData::is_symbolic_name_Set() const{
    return m_symbolic_name_isSet;
}

bool OAIBundleData::is_symbolic_name_Valid() const{
    return m_symbolic_name_isValid;
}

QString OAIBundleData::getVersion() const {
    return m_version;
}
void OAIBundleData::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIBundleData::is_version_Set() const{
    return m_version_isSet;
}

bool OAIBundleData::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIBundleData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fragment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_props.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_raw_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_symbolic_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBundleData::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
