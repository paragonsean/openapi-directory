/**
 * Adobe Experience Manager (AEM) API
 * Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
 *
 * The version of the OpenAPI document: 3.7.1-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInstallStatus_status.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInstallStatus_status::OAIInstallStatus_status(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInstallStatus_status::OAIInstallStatus_status() {
    this->initializeModel();
}

OAIInstallStatus_status::~OAIInstallStatus_status() {}

void OAIInstallStatus_status::initializeModel() {

    m_finished_isSet = false;
    m_finished_isValid = false;

    m_item_count_isSet = false;
    m_item_count_isValid = false;
}

void OAIInstallStatus_status::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInstallStatus_status::fromJsonObject(QJsonObject json) {

    m_finished_isValid = ::OpenAPI::fromJsonValue(m_finished, json[QString("finished")]);
    m_finished_isSet = !json[QString("finished")].isNull() && m_finished_isValid;

    m_item_count_isValid = ::OpenAPI::fromJsonValue(m_item_count, json[QString("itemCount")]);
    m_item_count_isSet = !json[QString("itemCount")].isNull() && m_item_count_isValid;
}

QString OAIInstallStatus_status::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInstallStatus_status::asJsonObject() const {
    QJsonObject obj;
    if (m_finished_isSet) {
        obj.insert(QString("finished"), ::OpenAPI::toJsonValue(m_finished));
    }
    if (m_item_count_isSet) {
        obj.insert(QString("itemCount"), ::OpenAPI::toJsonValue(m_item_count));
    }
    return obj;
}

bool OAIInstallStatus_status::isFinished() const {
    return m_finished;
}
void OAIInstallStatus_status::setFinished(const bool &finished) {
    m_finished = finished;
    m_finished_isSet = true;
}

bool OAIInstallStatus_status::is_finished_Set() const{
    return m_finished_isSet;
}

bool OAIInstallStatus_status::is_finished_Valid() const{
    return m_finished_isValid;
}

qint32 OAIInstallStatus_status::getItemCount() const {
    return m_item_count;
}
void OAIInstallStatus_status::setItemCount(const qint32 &item_count) {
    m_item_count = item_count;
    m_item_count_isSet = true;
}

bool OAIInstallStatus_status::is_item_count_Set() const{
    return m_item_count_isSet;
}

bool OAIInstallStatus_status::is_item_count_Valid() const{
    return m_item_count_isValid;
}

bool OAIInstallStatus_status::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_finished_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_item_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInstallStatus_status::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
