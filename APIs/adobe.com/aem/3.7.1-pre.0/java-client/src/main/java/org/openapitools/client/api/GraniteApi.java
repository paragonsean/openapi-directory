/*
 * Adobe Experience Manager (AEM) API
 * Swagger AEM is an OpenAPI specification for Adobe Experience Manager (AEM) API
 *
 * The version of the OpenAPI document: 3.7.1-pre.0
 * Contact: opensource@shinesolutions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.io.File;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class GraniteApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public GraniteApi() {
        this(Configuration.getDefaultApiClient());
    }

    public GraniteApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for sslSetup
     * @param keystorePassword  (required)
     * @param keystorePasswordConfirm  (required)
     * @param truststorePassword  (required)
     * @param truststorePasswordConfirm  (required)
     * @param httpsHostname  (required)
     * @param httpsPort  (required)
     * @param certificateFile  (optional)
     * @param privatekeyFile  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sslSetupCall(String keystorePassword, String keystorePasswordConfirm, String truststorePassword, String truststorePasswordConfirm, String httpsHostname, String httpsPort, File certificateFile, File privatekeyFile, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/libs/granite/security/post/sslSetup.html";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (certificateFile != null) {
            localVarFormParams.put("certificateFile", certificateFile);
        }

        if (privatekeyFile != null) {
            localVarFormParams.put("privatekeyFile", privatekeyFile);
        }

        if (keystorePassword != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("keystorePassword", keystorePassword));
        }

        if (keystorePasswordConfirm != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("keystorePasswordConfirm", keystorePasswordConfirm));
        }

        if (truststorePassword != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("truststorePassword", truststorePassword));
        }

        if (truststorePasswordConfirm != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("truststorePasswordConfirm", truststorePasswordConfirm));
        }

        if (httpsHostname != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("httpsHostname", httpsHostname));
        }

        if (httpsPort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("httpsPort", httpsPort));
        }

        final String[] localVarAccepts = {
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "aemAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sslSetupValidateBeforeCall(String keystorePassword, String keystorePasswordConfirm, String truststorePassword, String truststorePasswordConfirm, String httpsHostname, String httpsPort, File certificateFile, File privatekeyFile, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'keystorePassword' is set
        if (keystorePassword == null) {
            throw new ApiException("Missing the required parameter 'keystorePassword' when calling sslSetup(Async)");
        }

        // verify the required parameter 'keystorePasswordConfirm' is set
        if (keystorePasswordConfirm == null) {
            throw new ApiException("Missing the required parameter 'keystorePasswordConfirm' when calling sslSetup(Async)");
        }

        // verify the required parameter 'truststorePassword' is set
        if (truststorePassword == null) {
            throw new ApiException("Missing the required parameter 'truststorePassword' when calling sslSetup(Async)");
        }

        // verify the required parameter 'truststorePasswordConfirm' is set
        if (truststorePasswordConfirm == null) {
            throw new ApiException("Missing the required parameter 'truststorePasswordConfirm' when calling sslSetup(Async)");
        }

        // verify the required parameter 'httpsHostname' is set
        if (httpsHostname == null) {
            throw new ApiException("Missing the required parameter 'httpsHostname' when calling sslSetup(Async)");
        }

        // verify the required parameter 'httpsPort' is set
        if (httpsPort == null) {
            throw new ApiException("Missing the required parameter 'httpsPort' when calling sslSetup(Async)");
        }

        return sslSetupCall(keystorePassword, keystorePasswordConfirm, truststorePassword, truststorePasswordConfirm, httpsHostname, httpsPort, certificateFile, privatekeyFile, _callback);

    }

    /**
     * 
     * 
     * @param keystorePassword  (required)
     * @param keystorePasswordConfirm  (required)
     * @param truststorePassword  (required)
     * @param truststorePasswordConfirm  (required)
     * @param httpsHostname  (required)
     * @param httpsPort  (required)
     * @param certificateFile  (optional)
     * @param privatekeyFile  (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public String sslSetup(String keystorePassword, String keystorePasswordConfirm, String truststorePassword, String truststorePasswordConfirm, String httpsHostname, String httpsPort, File certificateFile, File privatekeyFile) throws ApiException {
        ApiResponse<String> localVarResp = sslSetupWithHttpInfo(keystorePassword, keystorePasswordConfirm, truststorePassword, truststorePasswordConfirm, httpsHostname, httpsPort, certificateFile, privatekeyFile);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param keystorePassword  (required)
     * @param keystorePasswordConfirm  (required)
     * @param truststorePassword  (required)
     * @param truststorePasswordConfirm  (required)
     * @param httpsHostname  (required)
     * @param httpsPort  (required)
     * @param certificateFile  (optional)
     * @param privatekeyFile  (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> sslSetupWithHttpInfo(String keystorePassword, String keystorePasswordConfirm, String truststorePassword, String truststorePasswordConfirm, String httpsHostname, String httpsPort, File certificateFile, File privatekeyFile) throws ApiException {
        okhttp3.Call localVarCall = sslSetupValidateBeforeCall(keystorePassword, keystorePasswordConfirm, truststorePassword, truststorePasswordConfirm, httpsHostname, httpsPort, certificateFile, privatekeyFile, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param keystorePassword  (required)
     * @param keystorePasswordConfirm  (required)
     * @param truststorePassword  (required)
     * @param truststorePasswordConfirm  (required)
     * @param httpsHostname  (required)
     * @param httpsPort  (required)
     * @param certificateFile  (optional)
     * @param privatekeyFile  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Default response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sslSetupAsync(String keystorePassword, String keystorePasswordConfirm, String truststorePassword, String truststorePasswordConfirm, String httpsHostname, String httpsPort, File certificateFile, File privatekeyFile, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = sslSetupValidateBeforeCall(keystorePassword, keystorePasswordConfirm, truststorePassword, truststorePasswordConfirm, httpsHostname, httpsPort, certificateFile, privatekeyFile, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
