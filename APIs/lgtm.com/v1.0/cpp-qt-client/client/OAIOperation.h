/**
 * LGTM API specification
 * The REST API for LGTM provides data so that you can customize how you integrate LGTM analysis into your workflow. It includes the following resources:   * `/` ([API root](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-API-root))&mdash;get version information or download the specification in OpenAPI format.   * `/projects` ([Projects](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Projects))&mdash;list projects, get a summary of the current status for a project, or add new projects.   * `/analyses` ([Analyses](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Analyses))&mdash;get a summary of results, download all the alerts, or trigger analysis for a specific commit.   * `/codereviews` ([Code reviews](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Code-reviews))&mdash;trigger code review for a patch, and view the results.   * `/operations` ([Operations](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Operations))&mdash;get information about long-running tasks, for example, analyses or code reviews that you've requested.   * `/snapshots` ([Snapshots](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Snapshots))&mdash;download and upload databases representing a snapshot of a codebase.   * `/queryjobs` ([Query jobs](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Query-jobs))&mdash;submit queries to evaluate against existing projects, and download their results.   * `/system` ([System](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-System))&mdash;get information on the health or usage of the system.  For an overview and getting started topics, see [API for LGTM](https://lgtm.com/help/lgtm/api/api-for-lgtm). 
 *
 * The version of the OpenAPI document: v1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIOperation.h
 *
 * 
 */

#ifndef OAIOperation_H
#define OAIOperation_H

#include <QJsonObject>

#include "OAIOperation_task_result.h"
#include "OAIUpload_session.h"
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIOperation_task_result;
class OAIUpload_session;

class OAIOperation : public OAIObject {
public:
    OAIOperation();
    OAIOperation(QString json);
    ~OAIOperation() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint64 getId() const;
    void setId(const qint64 &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QString getStatus() const;
    void setStatus(const QString &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    OAIOperation_task_result getTaskResult() const;
    void setTaskResult(const OAIOperation_task_result &task_result);
    bool is_task_result_Set() const;
    bool is_task_result_Valid() const;

    QString getTaskResultUrl() const;
    void setTaskResultUrl(const QString &task_result_url);
    bool is_task_result_url_Set() const;
    bool is_task_result_url_Valid() const;

    QString getTaskType() const;
    void setTaskType(const QString &task_type);
    bool is_task_type_Set() const;
    bool is_task_type_Valid() const;

    QMap<QString, OAIUpload_session> getUploads() const;
    void setUploads(const QMap<QString, OAIUpload_session> &uploads);
    bool is_uploads_Set() const;
    bool is_uploads_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint64 m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    QString m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    OAIOperation_task_result m_task_result;
    bool m_task_result_isSet;
    bool m_task_result_isValid;

    QString m_task_result_url;
    bool m_task_result_url_isSet;
    bool m_task_result_url_isValid;

    QString m_task_type;
    bool m_task_type_isSet;
    bool m_task_type_isValid;

    QMap<QString, OAIUpload_session> m_uploads;
    bool m_uploads_isSet;
    bool m_uploads_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIOperation)

#endif // OAIOperation_H
