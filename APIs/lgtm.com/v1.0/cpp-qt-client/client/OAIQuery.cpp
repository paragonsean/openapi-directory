/**
 * LGTM API specification
 * The REST API for LGTM provides data so that you can customize how you integrate LGTM analysis into your workflow. It includes the following resources:   * `/` ([API root](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-API-root))&mdash;get version information or download the specification in OpenAPI format.   * `/projects` ([Projects](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Projects))&mdash;list projects, get a summary of the current status for a project, or add new projects.   * `/analyses` ([Analyses](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Analyses))&mdash;get a summary of results, download all the alerts, or trigger analysis for a specific commit.   * `/codereviews` ([Code reviews](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Code-reviews))&mdash;trigger code review for a patch, and view the results.   * `/operations` ([Operations](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Operations))&mdash;get information about long-running tasks, for example, analyses or code reviews that you've requested.   * `/snapshots` ([Snapshots](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Snapshots))&mdash;download and upload databases representing a snapshot of a codebase.   * `/queryjobs` ([Query jobs](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Query-jobs))&mdash;submit queries to evaluate against existing projects, and download their results.   * `/system` ([System](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-System))&mdash;get information on the health or usage of the system.  For an overview and getting started topics, see [API for LGTM](https://lgtm.com/help/lgtm/api/api-for-lgtm). 
 *
 * The version of the OpenAPI document: v1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIQuery.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIQuery::OAIQuery(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIQuery::OAIQuery() {
    this->initializeModel();
}

OAIQuery::~OAIQuery() {}

void OAIQuery::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_language_isSet = false;
    m_language_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_pack_isSet = false;
    m_pack_isValid = false;

    m_properties_isSet = false;
    m_properties_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIQuery::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIQuery::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_language_isValid = ::OpenAPI::fromJsonValue(m_language, json[QString("language")]);
    m_language_isSet = !json[QString("language")].isNull() && m_language_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_pack_isValid = ::OpenAPI::fromJsonValue(m_pack, json[QString("pack")]);
    m_pack_isSet = !json[QString("pack")].isNull() && m_pack_isValid;

    m_properties_isValid = ::OpenAPI::fromJsonValue(m_properties, json[QString("properties")]);
    m_properties_isSet = !json[QString("properties")].isNull() && m_properties_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIQuery::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIQuery::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_language_isSet) {
        obj.insert(QString("language"), ::OpenAPI::toJsonValue(m_language));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_pack_isSet) {
        obj.insert(QString("pack"), ::OpenAPI::toJsonValue(m_pack));
    }
    if (m_properties.isSet()) {
        obj.insert(QString("properties"), ::OpenAPI::toJsonValue(m_properties));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

qint64 OAIQuery::getId() const {
    return m_id;
}
void OAIQuery::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIQuery::is_id_Set() const{
    return m_id_isSet;
}

bool OAIQuery::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIQuery::getLanguage() const {
    return m_language;
}
void OAIQuery::setLanguage(const QString &language) {
    m_language = language;
    m_language_isSet = true;
}

bool OAIQuery::is_language_Set() const{
    return m_language_isSet;
}

bool OAIQuery::is_language_Valid() const{
    return m_language_isValid;
}

QString OAIQuery::getName() const {
    return m_name;
}
void OAIQuery::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIQuery::is_name_Set() const{
    return m_name_isSet;
}

bool OAIQuery::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIQuery::getPack() const {
    return m_pack;
}
void OAIQuery::setPack(const QString &pack) {
    m_pack = pack;
    m_pack_isSet = true;
}

bool OAIQuery::is_pack_Set() const{
    return m_pack_isSet;
}

bool OAIQuery::is_pack_Valid() const{
    return m_pack_isValid;
}

OAIQuery_properties OAIQuery::getProperties() const {
    return m_properties;
}
void OAIQuery::setProperties(const OAIQuery_properties &properties) {
    m_properties = properties;
    m_properties_isSet = true;
}

bool OAIQuery::is_properties_Set() const{
    return m_properties_isSet;
}

bool OAIQuery::is_properties_Valid() const{
    return m_properties_isValid;
}

QString OAIQuery::getUrl() const {
    return m_url;
}
void OAIQuery::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIQuery::is_url_Set() const{
    return m_url_isSet;
}

bool OAIQuery::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIQuery::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pack_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIQuery::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
