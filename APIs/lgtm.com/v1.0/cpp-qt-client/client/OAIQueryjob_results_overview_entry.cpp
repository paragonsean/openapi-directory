/**
 * LGTM API specification
 * The REST API for LGTM provides data so that you can customize how you integrate LGTM analysis into your workflow. It includes the following resources:   * `/` ([API root](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-API-root))&mdash;get version information or download the specification in OpenAPI format.   * `/projects` ([Projects](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Projects))&mdash;list projects, get a summary of the current status for a project, or add new projects.   * `/analyses` ([Analyses](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Analyses))&mdash;get a summary of results, download all the alerts, or trigger analysis for a specific commit.   * `/codereviews` ([Code reviews](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Code-reviews))&mdash;trigger code review for a patch, and view the results.   * `/operations` ([Operations](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Operations))&mdash;get information about long-running tasks, for example, analyses or code reviews that you've requested.   * `/snapshots` ([Snapshots](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Snapshots))&mdash;download and upload databases representing a snapshot of a codebase.   * `/queryjobs` ([Query jobs](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Query-jobs))&mdash;submit queries to evaluate against existing projects, and download their results.   * `/system` ([System](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-System))&mdash;get information on the health or usage of the system.  For an overview and getting started topics, see [API for LGTM](https://lgtm.com/help/lgtm/api/api-for-lgtm). 
 *
 * The version of the OpenAPI document: v1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIQueryjob_results_overview_entry.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIQueryjob_results_overview_entry::OAIQueryjob_results_overview_entry(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIQueryjob_results_overview_entry::OAIQueryjob_results_overview_entry() {
    this->initializeModel();
}

OAIQueryjob_results_overview_entry::~OAIQueryjob_results_overview_entry() {}

void OAIQueryjob_results_overview_entry::initializeModel() {

    m_error_isSet = false;
    m_error_isValid = false;

    m_external_isSet = false;
    m_external_isValid = false;

    m_internal_isSet = false;
    m_internal_isValid = false;

    m_project_isSet = false;
    m_project_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_total_isSet = false;
    m_total_isValid = false;
}

void OAIQueryjob_results_overview_entry::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIQueryjob_results_overview_entry::fromJsonObject(QJsonObject json) {

    m_error_isValid = ::OpenAPI::fromJsonValue(m_error, json[QString("error")]);
    m_error_isSet = !json[QString("error")].isNull() && m_error_isValid;

    m_external_isValid = ::OpenAPI::fromJsonValue(m_external, json[QString("external")]);
    m_external_isSet = !json[QString("external")].isNull() && m_external_isValid;

    m_internal_isValid = ::OpenAPI::fromJsonValue(m_internal, json[QString("internal")]);
    m_internal_isSet = !json[QString("internal")].isNull() && m_internal_isValid;

    m_project_isValid = ::OpenAPI::fromJsonValue(m_project, json[QString("project")]);
    m_project_isSet = !json[QString("project")].isNull() && m_project_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_total_isValid = ::OpenAPI::fromJsonValue(m_total, json[QString("total")]);
    m_total_isSet = !json[QString("total")].isNull() && m_total_isValid;
}

QString OAIQueryjob_results_overview_entry::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIQueryjob_results_overview_entry::asJsonObject() const {
    QJsonObject obj;
    if (m_error_isSet) {
        obj.insert(QString("error"), ::OpenAPI::toJsonValue(m_error));
    }
    if (m_external_isSet) {
        obj.insert(QString("external"), ::OpenAPI::toJsonValue(m_external));
    }
    if (m_internal_isSet) {
        obj.insert(QString("internal"), ::OpenAPI::toJsonValue(m_internal));
    }
    if (m_project.isSet()) {
        obj.insert(QString("project"), ::OpenAPI::toJsonValue(m_project));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_total_isSet) {
        obj.insert(QString("total"), ::OpenAPI::toJsonValue(m_total));
    }
    return obj;
}

QString OAIQueryjob_results_overview_entry::getError() const {
    return m_error;
}
void OAIQueryjob_results_overview_entry::setError(const QString &error) {
    m_error = error;
    m_error_isSet = true;
}

bool OAIQueryjob_results_overview_entry::is_error_Set() const{
    return m_error_isSet;
}

bool OAIQueryjob_results_overview_entry::is_error_Valid() const{
    return m_error_isValid;
}

qint32 OAIQueryjob_results_overview_entry::getExternal() const {
    return m_external;
}
void OAIQueryjob_results_overview_entry::setExternal(const qint32 &external) {
    m_external = external;
    m_external_isSet = true;
}

bool OAIQueryjob_results_overview_entry::is_external_Set() const{
    return m_external_isSet;
}

bool OAIQueryjob_results_overview_entry::is_external_Valid() const{
    return m_external_isValid;
}

qint32 OAIQueryjob_results_overview_entry::getInternal() const {
    return m_internal;
}
void OAIQueryjob_results_overview_entry::setInternal(const qint32 &internal) {
    m_internal = internal;
    m_internal_isSet = true;
}

bool OAIQueryjob_results_overview_entry::is_internal_Set() const{
    return m_internal_isSet;
}

bool OAIQueryjob_results_overview_entry::is_internal_Valid() const{
    return m_internal_isValid;
}

OAIProject OAIQueryjob_results_overview_entry::getProject() const {
    return m_project;
}
void OAIQueryjob_results_overview_entry::setProject(const OAIProject &project) {
    m_project = project;
    m_project_isSet = true;
}

bool OAIQueryjob_results_overview_entry::is_project_Set() const{
    return m_project_isSet;
}

bool OAIQueryjob_results_overview_entry::is_project_Valid() const{
    return m_project_isValid;
}

QString OAIQueryjob_results_overview_entry::getStatus() const {
    return m_status;
}
void OAIQueryjob_results_overview_entry::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIQueryjob_results_overview_entry::is_status_Set() const{
    return m_status_isSet;
}

bool OAIQueryjob_results_overview_entry::is_status_Valid() const{
    return m_status_isValid;
}

qint32 OAIQueryjob_results_overview_entry::getTotal() const {
    return m_total;
}
void OAIQueryjob_results_overview_entry::setTotal(const qint32 &total) {
    m_total = total;
    m_total_isSet = true;
}

bool OAIQueryjob_results_overview_entry::is_total_Set() const{
    return m_total_isSet;
}

bool OAIQueryjob_results_overview_entry::is_total_Valid() const{
    return m_total_isValid;
}

bool OAIQueryjob_results_overview_entry::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_error_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_internal_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIQueryjob_results_overview_entry::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
