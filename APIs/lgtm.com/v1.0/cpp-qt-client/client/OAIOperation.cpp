/**
 * LGTM API specification
 * The REST API for LGTM provides data so that you can customize how you integrate LGTM analysis into your workflow. It includes the following resources:   * `/` ([API root](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-API-root))&mdash;get version information or download the specification in OpenAPI format.   * `/projects` ([Projects](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Projects))&mdash;list projects, get a summary of the current status for a project, or add new projects.   * `/analyses` ([Analyses](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Analyses))&mdash;get a summary of results, download all the alerts, or trigger analysis for a specific commit.   * `/codereviews` ([Code reviews](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Code-reviews))&mdash;trigger code review for a patch, and view the results.   * `/operations` ([Operations](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Operations))&mdash;get information about long-running tasks, for example, analyses or code reviews that you've requested.   * `/snapshots` ([Snapshots](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Snapshots))&mdash;download and upload databases representing a snapshot of a codebase.   * `/queryjobs` ([Query jobs](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Query-jobs))&mdash;submit queries to evaluate against existing projects, and download their results.   * `/system` ([System](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-System))&mdash;get information on the health or usage of the system.  For an overview and getting started topics, see [API for LGTM](https://lgtm.com/help/lgtm/api/api-for-lgtm). 
 *
 * The version of the OpenAPI document: v1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOperation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOperation::OAIOperation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOperation::OAIOperation() {
    this->initializeModel();
}

OAIOperation::~OAIOperation() {}

void OAIOperation::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_task_result_isSet = false;
    m_task_result_isValid = false;

    m_task_result_url_isSet = false;
    m_task_result_url_isValid = false;

    m_task_type_isSet = false;
    m_task_type_isValid = false;

    m_uploads_isSet = false;
    m_uploads_isValid = false;
}

void OAIOperation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOperation::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_task_result_isValid = ::OpenAPI::fromJsonValue(m_task_result, json[QString("task-result")]);
    m_task_result_isSet = !json[QString("task-result")].isNull() && m_task_result_isValid;

    m_task_result_url_isValid = ::OpenAPI::fromJsonValue(m_task_result_url, json[QString("task-result-url")]);
    m_task_result_url_isSet = !json[QString("task-result-url")].isNull() && m_task_result_url_isValid;

    m_task_type_isValid = ::OpenAPI::fromJsonValue(m_task_type, json[QString("task-type")]);
    m_task_type_isSet = !json[QString("task-type")].isNull() && m_task_type_isValid;

    m_uploads_isValid = ::OpenAPI::fromJsonValue(m_uploads, json[QString("uploads")]);
    m_uploads_isSet = !json[QString("uploads")].isNull() && m_uploads_isValid;
}

QString OAIOperation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOperation::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_task_result.isSet()) {
        obj.insert(QString("task-result"), ::OpenAPI::toJsonValue(m_task_result));
    }
    if (m_task_result_url_isSet) {
        obj.insert(QString("task-result-url"), ::OpenAPI::toJsonValue(m_task_result_url));
    }
    if (m_task_type_isSet) {
        obj.insert(QString("task-type"), ::OpenAPI::toJsonValue(m_task_type));
    }
    if (m_uploads.size() > 0) {
        obj.insert(QString("uploads"), ::OpenAPI::toJsonValue(m_uploads));
    }
    return obj;
}

qint64 OAIOperation::getId() const {
    return m_id;
}
void OAIOperation::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIOperation::is_id_Set() const{
    return m_id_isSet;
}

bool OAIOperation::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIOperation::getStatus() const {
    return m_status;
}
void OAIOperation::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIOperation::is_status_Set() const{
    return m_status_isSet;
}

bool OAIOperation::is_status_Valid() const{
    return m_status_isValid;
}

OAIOperation_task_result OAIOperation::getTaskResult() const {
    return m_task_result;
}
void OAIOperation::setTaskResult(const OAIOperation_task_result &task_result) {
    m_task_result = task_result;
    m_task_result_isSet = true;
}

bool OAIOperation::is_task_result_Set() const{
    return m_task_result_isSet;
}

bool OAIOperation::is_task_result_Valid() const{
    return m_task_result_isValid;
}

QString OAIOperation::getTaskResultUrl() const {
    return m_task_result_url;
}
void OAIOperation::setTaskResultUrl(const QString &task_result_url) {
    m_task_result_url = task_result_url;
    m_task_result_url_isSet = true;
}

bool OAIOperation::is_task_result_url_Set() const{
    return m_task_result_url_isSet;
}

bool OAIOperation::is_task_result_url_Valid() const{
    return m_task_result_url_isValid;
}

QString OAIOperation::getTaskType() const {
    return m_task_type;
}
void OAIOperation::setTaskType(const QString &task_type) {
    m_task_type = task_type;
    m_task_type_isSet = true;
}

bool OAIOperation::is_task_type_Set() const{
    return m_task_type_isSet;
}

bool OAIOperation::is_task_type_Valid() const{
    return m_task_type_isValid;
}

QMap<QString, OAIUpload_session> OAIOperation::getUploads() const {
    return m_uploads;
}
void OAIOperation::setUploads(const QMap<QString, OAIUpload_session> &uploads) {
    m_uploads = uploads;
    m_uploads_isSet = true;
}

bool OAIOperation::is_uploads_Set() const{
    return m_uploads_isSet;
}

bool OAIOperation::is_uploads_Valid() const{
    return m_uploads_isValid;
}

bool OAIOperation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_task_result.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_task_result_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_task_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uploads.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOperation::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_task_type_isValid && true;
}

} // namespace OpenAPI
