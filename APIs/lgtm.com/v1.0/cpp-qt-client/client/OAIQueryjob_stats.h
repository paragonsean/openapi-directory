/**
 * LGTM API specification
 * The REST API for LGTM provides data so that you can customize how you integrate LGTM analysis into your workflow. It includes the following resources:   * `/` ([API root](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-API-root))&mdash;get version information or download the specification in OpenAPI format.   * `/projects` ([Projects](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Projects))&mdash;list projects, get a summary of the current status for a project, or add new projects.   * `/analyses` ([Analyses](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Analyses))&mdash;get a summary of results, download all the alerts, or trigger analysis for a specific commit.   * `/codereviews` ([Code reviews](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Code-reviews))&mdash;trigger code review for a patch, and view the results.   * `/operations` ([Operations](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Operations))&mdash;get information about long-running tasks, for example, analyses or code reviews that you've requested.   * `/snapshots` ([Snapshots](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Snapshots))&mdash;download and upload databases representing a snapshot of a codebase.   * `/queryjobs` ([Query jobs](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Query-jobs))&mdash;submit queries to evaluate against existing projects, and download their results.   * `/system` ([System](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-System))&mdash;get information on the health or usage of the system.  For an overview and getting started topics, see [API for LGTM](https://lgtm.com/help/lgtm/api/api-for-lgtm). 
 *
 * The version of the OpenAPI document: v1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIQueryjob_stats.h
 *
 * 
 */

#ifndef OAIQueryjob_stats_H
#define OAIQueryjob_stats_H

#include <QJsonObject>


#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIQueryjob_stats : public OAIObject {
public:
    OAIQueryjob_stats();
    OAIQueryjob_stats(QString json);
    ~OAIQueryjob_stats() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getFailed() const;
    void setFailed(const qint32 &failed);
    bool is_failed_Set() const;
    bool is_failed_Valid() const;

    qint32 getPending() const;
    void setPending(const qint32 &pending);
    bool is_pending_Set() const;
    bool is_pending_Valid() const;

    qint32 getSuccessWithResult() const;
    void setSuccessWithResult(const qint32 &success_with_result);
    bool is_success_with_result_Set() const;
    bool is_success_with_result_Valid() const;

    qint32 getSuccessWithoutResult() const;
    void setSuccessWithoutResult(const qint32 &success_without_result);
    bool is_success_without_result_Set() const;
    bool is_success_without_result_Valid() const;

    qint32 getSuccessful() const;
    void setSuccessful(const qint32 &successful);
    bool is_successful_Set() const;
    bool is_successful_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_failed;
    bool m_failed_isSet;
    bool m_failed_isValid;

    qint32 m_pending;
    bool m_pending_isSet;
    bool m_pending_isValid;

    qint32 m_success_with_result;
    bool m_success_with_result_isSet;
    bool m_success_with_result_isValid;

    qint32 m_success_without_result;
    bool m_success_without_result_isSet;
    bool m_success_without_result_isValid;

    qint32 m_successful;
    bool m_successful_isSet;
    bool m_successful_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIQueryjob_stats)

#endif // OAIQueryjob_stats_H
