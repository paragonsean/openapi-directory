/**
 * LGTM API specification
 * The REST API for LGTM provides data so that you can customize how you integrate LGTM analysis into your workflow. It includes the following resources:   * `/` ([API root](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-API-root))&mdash;get version information or download the specification in OpenAPI format.   * `/projects` ([Projects](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Projects))&mdash;list projects, get a summary of the current status for a project, or add new projects.   * `/analyses` ([Analyses](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Analyses))&mdash;get a summary of results, download all the alerts, or trigger analysis for a specific commit.   * `/codereviews` ([Code reviews](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Code-reviews))&mdash;trigger code review for a patch, and view the results.   * `/operations` ([Operations](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Operations))&mdash;get information about long-running tasks, for example, analyses or code reviews that you've requested.   * `/snapshots` ([Snapshots](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Snapshots))&mdash;download and upload databases representing a snapshot of a codebase.   * `/queryjobs` ([Query jobs](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Query-jobs))&mdash;submit queries to evaluate against existing projects, and download their results.   * `/system` ([System](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-System))&mdash;get information on the health or usage of the system.  For an overview and getting started topics, see [API for LGTM](https://lgtm.com/help/lgtm/api/api-for-lgtm). 
 *
 * The version of the OpenAPI document: v1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAnalysis.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAnalysis::OAIAnalysis(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAnalysis::OAIAnalysis() {
    this->initializeModel();
}

OAIAnalysis::~OAIAnalysis() {}

void OAIAnalysis::initializeModel() {

    m_commit_id_isSet = false;
    m_commit_id_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_languages_isSet = false;
    m_languages_isValid = false;

    m_log_url_isSet = false;
    m_log_url_isValid = false;

    m_project_isSet = false;
    m_project_isValid = false;

    m_results_url_isSet = false;
    m_results_url_isValid = false;
}

void OAIAnalysis::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAnalysis::fromJsonObject(QJsonObject json) {

    m_commit_id_isValid = ::OpenAPI::fromJsonValue(m_commit_id, json[QString("commit-id")]);
    m_commit_id_isSet = !json[QString("commit-id")].isNull() && m_commit_id_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_languages_isValid = ::OpenAPI::fromJsonValue(m_languages, json[QString("languages")]);
    m_languages_isSet = !json[QString("languages")].isNull() && m_languages_isValid;

    m_log_url_isValid = ::OpenAPI::fromJsonValue(m_log_url, json[QString("log-url")]);
    m_log_url_isSet = !json[QString("log-url")].isNull() && m_log_url_isValid;

    m_project_isValid = ::OpenAPI::fromJsonValue(m_project, json[QString("project")]);
    m_project_isSet = !json[QString("project")].isNull() && m_project_isValid;

    m_results_url_isValid = ::OpenAPI::fromJsonValue(m_results_url, json[QString("results-url")]);
    m_results_url_isSet = !json[QString("results-url")].isNull() && m_results_url_isValid;
}

QString OAIAnalysis::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAnalysis::asJsonObject() const {
    QJsonObject obj;
    if (m_commit_id_isSet) {
        obj.insert(QString("commit-id"), ::OpenAPI::toJsonValue(m_commit_id));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_languages.size() > 0) {
        obj.insert(QString("languages"), ::OpenAPI::toJsonValue(m_languages));
    }
    if (m_log_url_isSet) {
        obj.insert(QString("log-url"), ::OpenAPI::toJsonValue(m_log_url));
    }
    if (m_project.isSet()) {
        obj.insert(QString("project"), ::OpenAPI::toJsonValue(m_project));
    }
    if (m_results_url_isSet) {
        obj.insert(QString("results-url"), ::OpenAPI::toJsonValue(m_results_url));
    }
    return obj;
}

QString OAIAnalysis::getCommitId() const {
    return m_commit_id;
}
void OAIAnalysis::setCommitId(const QString &commit_id) {
    m_commit_id = commit_id;
    m_commit_id_isSet = true;
}

bool OAIAnalysis::is_commit_id_Set() const{
    return m_commit_id_isSet;
}

bool OAIAnalysis::is_commit_id_Valid() const{
    return m_commit_id_isValid;
}

QString OAIAnalysis::getId() const {
    return m_id;
}
void OAIAnalysis::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIAnalysis::is_id_Set() const{
    return m_id_isSet;
}

bool OAIAnalysis::is_id_Valid() const{
    return m_id_isValid;
}

QList<OAILanguage_stats> OAIAnalysis::getLanguages() const {
    return m_languages;
}
void OAIAnalysis::setLanguages(const QList<OAILanguage_stats> &languages) {
    m_languages = languages;
    m_languages_isSet = true;
}

bool OAIAnalysis::is_languages_Set() const{
    return m_languages_isSet;
}

bool OAIAnalysis::is_languages_Valid() const{
    return m_languages_isValid;
}

QString OAIAnalysis::getLogUrl() const {
    return m_log_url;
}
void OAIAnalysis::setLogUrl(const QString &log_url) {
    m_log_url = log_url;
    m_log_url_isSet = true;
}

bool OAIAnalysis::is_log_url_Set() const{
    return m_log_url_isSet;
}

bool OAIAnalysis::is_log_url_Valid() const{
    return m_log_url_isValid;
}

OAIProject OAIAnalysis::getProject() const {
    return m_project;
}
void OAIAnalysis::setProject(const OAIProject &project) {
    m_project = project;
    m_project_isSet = true;
}

bool OAIAnalysis::is_project_Set() const{
    return m_project_isSet;
}

bool OAIAnalysis::is_project_Valid() const{
    return m_project_isValid;
}

QString OAIAnalysis::getResultsUrl() const {
    return m_results_url;
}
void OAIAnalysis::setResultsUrl(const QString &results_url) {
    m_results_url = results_url;
    m_results_url_isSet = true;
}

bool OAIAnalysis::is_results_url_Set() const{
    return m_results_url_isSet;
}

bool OAIAnalysis::is_results_url_Valid() const{
    return m_results_url_isValid;
}

bool OAIAnalysis::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_commit_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_languages.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_log_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_results_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAnalysis::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
