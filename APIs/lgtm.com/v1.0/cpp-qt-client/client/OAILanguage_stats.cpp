/**
 * LGTM API specification
 * The REST API for LGTM provides data so that you can customize how you integrate LGTM analysis into your workflow. It includes the following resources:   * `/` ([API root](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-API-root))&mdash;get version information or download the specification in OpenAPI format.   * `/projects` ([Projects](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Projects))&mdash;list projects, get a summary of the current status for a project, or add new projects.   * `/analyses` ([Analyses](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Analyses))&mdash;get a summary of results, download all the alerts, or trigger analysis for a specific commit.   * `/codereviews` ([Code reviews](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Code-reviews))&mdash;trigger code review for a patch, and view the results.   * `/operations` ([Operations](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Operations))&mdash;get information about long-running tasks, for example, analyses or code reviews that you've requested.   * `/snapshots` ([Snapshots](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Snapshots))&mdash;download and upload databases representing a snapshot of a codebase.   * `/queryjobs` ([Query jobs](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Query-jobs))&mdash;submit queries to evaluate against existing projects, and download their results.   * `/system` ([System](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-System))&mdash;get information on the health or usage of the system.  For an overview and getting started topics, see [API for LGTM](https://lgtm.com/help/lgtm/api/api-for-lgtm). 
 *
 * The version of the OpenAPI document: v1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILanguage_stats.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILanguage_stats::OAILanguage_stats(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILanguage_stats::OAILanguage_stats() {
    this->initializeModel();
}

OAILanguage_stats::~OAILanguage_stats() {}

void OAILanguage_stats::initializeModel() {

    m_alerts_isSet = false;
    m_alerts_isValid = false;

    m_analysis_date_isSet = false;
    m_analysis_date_isValid = false;

    m_commit_date_isSet = false;
    m_commit_date_isValid = false;

    m_commit_id_isSet = false;
    m_commit_id_isValid = false;

    m_language_isSet = false;
    m_language_isValid = false;

    m_lines_isSet = false;
    m_lines_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAILanguage_stats::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILanguage_stats::fromJsonObject(QJsonObject json) {

    m_alerts_isValid = ::OpenAPI::fromJsonValue(m_alerts, json[QString("alerts")]);
    m_alerts_isSet = !json[QString("alerts")].isNull() && m_alerts_isValid;

    m_analysis_date_isValid = ::OpenAPI::fromJsonValue(m_analysis_date, json[QString("analysis-date")]);
    m_analysis_date_isSet = !json[QString("analysis-date")].isNull() && m_analysis_date_isValid;

    m_commit_date_isValid = ::OpenAPI::fromJsonValue(m_commit_date, json[QString("commit-date")]);
    m_commit_date_isSet = !json[QString("commit-date")].isNull() && m_commit_date_isValid;

    m_commit_id_isValid = ::OpenAPI::fromJsonValue(m_commit_id, json[QString("commit-id")]);
    m_commit_id_isSet = !json[QString("commit-id")].isNull() && m_commit_id_isValid;

    m_language_isValid = ::OpenAPI::fromJsonValue(m_language, json[QString("language")]);
    m_language_isSet = !json[QString("language")].isNull() && m_language_isValid;

    m_lines_isValid = ::OpenAPI::fromJsonValue(m_lines, json[QString("lines")]);
    m_lines_isSet = !json[QString("lines")].isNull() && m_lines_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAILanguage_stats::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILanguage_stats::asJsonObject() const {
    QJsonObject obj;
    if (m_alerts_isSet) {
        obj.insert(QString("alerts"), ::OpenAPI::toJsonValue(m_alerts));
    }
    if (m_analysis_date_isSet) {
        obj.insert(QString("analysis-date"), ::OpenAPI::toJsonValue(m_analysis_date));
    }
    if (m_commit_date_isSet) {
        obj.insert(QString("commit-date"), ::OpenAPI::toJsonValue(m_commit_date));
    }
    if (m_commit_id_isSet) {
        obj.insert(QString("commit-id"), ::OpenAPI::toJsonValue(m_commit_id));
    }
    if (m_language_isSet) {
        obj.insert(QString("language"), ::OpenAPI::toJsonValue(m_language));
    }
    if (m_lines_isSet) {
        obj.insert(QString("lines"), ::OpenAPI::toJsonValue(m_lines));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

qint32 OAILanguage_stats::getAlerts() const {
    return m_alerts;
}
void OAILanguage_stats::setAlerts(const qint32 &alerts) {
    m_alerts = alerts;
    m_alerts_isSet = true;
}

bool OAILanguage_stats::is_alerts_Set() const{
    return m_alerts_isSet;
}

bool OAILanguage_stats::is_alerts_Valid() const{
    return m_alerts_isValid;
}

QDateTime OAILanguage_stats::getAnalysisDate() const {
    return m_analysis_date;
}
void OAILanguage_stats::setAnalysisDate(const QDateTime &analysis_date) {
    m_analysis_date = analysis_date;
    m_analysis_date_isSet = true;
}

bool OAILanguage_stats::is_analysis_date_Set() const{
    return m_analysis_date_isSet;
}

bool OAILanguage_stats::is_analysis_date_Valid() const{
    return m_analysis_date_isValid;
}

QDateTime OAILanguage_stats::getCommitDate() const {
    return m_commit_date;
}
void OAILanguage_stats::setCommitDate(const QDateTime &commit_date) {
    m_commit_date = commit_date;
    m_commit_date_isSet = true;
}

bool OAILanguage_stats::is_commit_date_Set() const{
    return m_commit_date_isSet;
}

bool OAILanguage_stats::is_commit_date_Valid() const{
    return m_commit_date_isValid;
}

QString OAILanguage_stats::getCommitId() const {
    return m_commit_id;
}
void OAILanguage_stats::setCommitId(const QString &commit_id) {
    m_commit_id = commit_id;
    m_commit_id_isSet = true;
}

bool OAILanguage_stats::is_commit_id_Set() const{
    return m_commit_id_isSet;
}

bool OAILanguage_stats::is_commit_id_Valid() const{
    return m_commit_id_isValid;
}

QString OAILanguage_stats::getLanguage() const {
    return m_language;
}
void OAILanguage_stats::setLanguage(const QString &language) {
    m_language = language;
    m_language_isSet = true;
}

bool OAILanguage_stats::is_language_Set() const{
    return m_language_isSet;
}

bool OAILanguage_stats::is_language_Valid() const{
    return m_language_isValid;
}

qint32 OAILanguage_stats::getLines() const {
    return m_lines;
}
void OAILanguage_stats::setLines(const qint32 &lines) {
    m_lines = lines;
    m_lines_isSet = true;
}

bool OAILanguage_stats::is_lines_Set() const{
    return m_lines_isSet;
}

bool OAILanguage_stats::is_lines_Valid() const{
    return m_lines_isValid;
}

QString OAILanguage_stats::getStatus() const {
    return m_status;
}
void OAILanguage_stats::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAILanguage_stats::is_status_Set() const{
    return m_status_isSet;
}

bool OAILanguage_stats::is_status_Valid() const{
    return m_status_isValid;
}

bool OAILanguage_stats::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_alerts_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_analysis_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_commit_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_commit_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lines_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILanguage_stats::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
