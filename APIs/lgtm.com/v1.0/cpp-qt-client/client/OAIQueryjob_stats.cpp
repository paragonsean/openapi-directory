/**
 * LGTM API specification
 * The REST API for LGTM provides data so that you can customize how you integrate LGTM analysis into your workflow. It includes the following resources:   * `/` ([API root](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-API-root))&mdash;get version information or download the specification in OpenAPI format.   * `/projects` ([Projects](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Projects))&mdash;list projects, get a summary of the current status for a project, or add new projects.   * `/analyses` ([Analyses](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Analyses))&mdash;get a summary of results, download all the alerts, or trigger analysis for a specific commit.   * `/codereviews` ([Code reviews](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Code-reviews))&mdash;trigger code review for a patch, and view the results.   * `/operations` ([Operations](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Operations))&mdash;get information about long-running tasks, for example, analyses or code reviews that you've requested.   * `/snapshots` ([Snapshots](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Snapshots))&mdash;download and upload databases representing a snapshot of a codebase.   * `/queryjobs` ([Query jobs](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Query-jobs))&mdash;submit queries to evaluate against existing projects, and download their results.   * `/system` ([System](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-System))&mdash;get information on the health or usage of the system.  For an overview and getting started topics, see [API for LGTM](https://lgtm.com/help/lgtm/api/api-for-lgtm). 
 *
 * The version of the OpenAPI document: v1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIQueryjob_stats.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIQueryjob_stats::OAIQueryjob_stats(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIQueryjob_stats::OAIQueryjob_stats() {
    this->initializeModel();
}

OAIQueryjob_stats::~OAIQueryjob_stats() {}

void OAIQueryjob_stats::initializeModel() {

    m_failed_isSet = false;
    m_failed_isValid = false;

    m_pending_isSet = false;
    m_pending_isValid = false;

    m_success_with_result_isSet = false;
    m_success_with_result_isValid = false;

    m_success_without_result_isSet = false;
    m_success_without_result_isValid = false;

    m_successful_isSet = false;
    m_successful_isValid = false;
}

void OAIQueryjob_stats::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIQueryjob_stats::fromJsonObject(QJsonObject json) {

    m_failed_isValid = ::OpenAPI::fromJsonValue(m_failed, json[QString("failed")]);
    m_failed_isSet = !json[QString("failed")].isNull() && m_failed_isValid;

    m_pending_isValid = ::OpenAPI::fromJsonValue(m_pending, json[QString("pending")]);
    m_pending_isSet = !json[QString("pending")].isNull() && m_pending_isValid;

    m_success_with_result_isValid = ::OpenAPI::fromJsonValue(m_success_with_result, json[QString("success-with-result")]);
    m_success_with_result_isSet = !json[QString("success-with-result")].isNull() && m_success_with_result_isValid;

    m_success_without_result_isValid = ::OpenAPI::fromJsonValue(m_success_without_result, json[QString("success-without-result")]);
    m_success_without_result_isSet = !json[QString("success-without-result")].isNull() && m_success_without_result_isValid;

    m_successful_isValid = ::OpenAPI::fromJsonValue(m_successful, json[QString("successful")]);
    m_successful_isSet = !json[QString("successful")].isNull() && m_successful_isValid;
}

QString OAIQueryjob_stats::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIQueryjob_stats::asJsonObject() const {
    QJsonObject obj;
    if (m_failed_isSet) {
        obj.insert(QString("failed"), ::OpenAPI::toJsonValue(m_failed));
    }
    if (m_pending_isSet) {
        obj.insert(QString("pending"), ::OpenAPI::toJsonValue(m_pending));
    }
    if (m_success_with_result_isSet) {
        obj.insert(QString("success-with-result"), ::OpenAPI::toJsonValue(m_success_with_result));
    }
    if (m_success_without_result_isSet) {
        obj.insert(QString("success-without-result"), ::OpenAPI::toJsonValue(m_success_without_result));
    }
    if (m_successful_isSet) {
        obj.insert(QString("successful"), ::OpenAPI::toJsonValue(m_successful));
    }
    return obj;
}

qint32 OAIQueryjob_stats::getFailed() const {
    return m_failed;
}
void OAIQueryjob_stats::setFailed(const qint32 &failed) {
    m_failed = failed;
    m_failed_isSet = true;
}

bool OAIQueryjob_stats::is_failed_Set() const{
    return m_failed_isSet;
}

bool OAIQueryjob_stats::is_failed_Valid() const{
    return m_failed_isValid;
}

qint32 OAIQueryjob_stats::getPending() const {
    return m_pending;
}
void OAIQueryjob_stats::setPending(const qint32 &pending) {
    m_pending = pending;
    m_pending_isSet = true;
}

bool OAIQueryjob_stats::is_pending_Set() const{
    return m_pending_isSet;
}

bool OAIQueryjob_stats::is_pending_Valid() const{
    return m_pending_isValid;
}

qint32 OAIQueryjob_stats::getSuccessWithResult() const {
    return m_success_with_result;
}
void OAIQueryjob_stats::setSuccessWithResult(const qint32 &success_with_result) {
    m_success_with_result = success_with_result;
    m_success_with_result_isSet = true;
}

bool OAIQueryjob_stats::is_success_with_result_Set() const{
    return m_success_with_result_isSet;
}

bool OAIQueryjob_stats::is_success_with_result_Valid() const{
    return m_success_with_result_isValid;
}

qint32 OAIQueryjob_stats::getSuccessWithoutResult() const {
    return m_success_without_result;
}
void OAIQueryjob_stats::setSuccessWithoutResult(const qint32 &success_without_result) {
    m_success_without_result = success_without_result;
    m_success_without_result_isSet = true;
}

bool OAIQueryjob_stats::is_success_without_result_Set() const{
    return m_success_without_result_isSet;
}

bool OAIQueryjob_stats::is_success_without_result_Valid() const{
    return m_success_without_result_isValid;
}

qint32 OAIQueryjob_stats::getSuccessful() const {
    return m_successful;
}
void OAIQueryjob_stats::setSuccessful(const qint32 &successful) {
    m_successful = successful;
    m_successful_isSet = true;
}

bool OAIQueryjob_stats::is_successful_Set() const{
    return m_successful_isSet;
}

bool OAIQueryjob_stats::is_successful_Valid() const{
    return m_successful_isValid;
}

bool OAIQueryjob_stats::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_failed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pending_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_success_with_result_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_success_without_result_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_successful_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIQueryjob_stats::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
