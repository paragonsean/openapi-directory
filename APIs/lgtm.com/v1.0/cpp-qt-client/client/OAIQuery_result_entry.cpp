/**
 * LGTM API specification
 * The REST API for LGTM provides data so that you can customize how you integrate LGTM analysis into your workflow. It includes the following resources:   * `/` ([API root](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-API-root))&mdash;get version information or download the specification in OpenAPI format.   * `/projects` ([Projects](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Projects))&mdash;list projects, get a summary of the current status for a project, or add new projects.   * `/analyses` ([Analyses](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Analyses))&mdash;get a summary of results, download all the alerts, or trigger analysis for a specific commit.   * `/codereviews` ([Code reviews](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Code-reviews))&mdash;trigger code review for a patch, and view the results.   * `/operations` ([Operations](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Operations))&mdash;get information about long-running tasks, for example, analyses or code reviews that you've requested.   * `/snapshots` ([Snapshots](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Snapshots))&mdash;download and upload databases representing a snapshot of a codebase.   * `/queryjobs` ([Query jobs](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Query-jobs))&mdash;submit queries to evaluate against existing projects, and download their results.   * `/system` ([System](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-System))&mdash;get information on the health or usage of the system.  For an overview and getting started topics, see [API for LGTM](https://lgtm.com/help/lgtm/api/api-for-lgtm). 
 *
 * The version of the OpenAPI document: v1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIQuery_result_entry.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIQuery_result_entry::OAIQuery_result_entry(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIQuery_result_entry::OAIQuery_result_entry() {
    this->initializeModel();
}

OAIQuery_result_entry::~OAIQuery_result_entry() {}

void OAIQuery_result_entry::initializeModel() {

    m_file_isSet = false;
    m_file_isValid = false;

    m_line_isSet = false;
    m_line_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAIQuery_result_entry::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIQuery_result_entry::fromJsonObject(QJsonObject json) {

    m_file_isValid = ::OpenAPI::fromJsonValue(m_file, json[QString("file")]);
    m_file_isSet = !json[QString("file")].isNull() && m_file_isValid;

    m_line_isValid = ::OpenAPI::fromJsonValue(m_line, json[QString("line")]);
    m_line_isSet = !json[QString("line")].isNull() && m_line_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAIQuery_result_entry::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIQuery_result_entry::asJsonObject() const {
    QJsonObject obj;
    if (m_file_isSet) {
        obj.insert(QString("file"), ::OpenAPI::toJsonValue(m_file));
    }
    if (m_line_isSet) {
        obj.insert(QString("line"), ::OpenAPI::toJsonValue(m_line));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

QString OAIQuery_result_entry::getFile() const {
    return m_file;
}
void OAIQuery_result_entry::setFile(const QString &file) {
    m_file = file;
    m_file_isSet = true;
}

bool OAIQuery_result_entry::is_file_Set() const{
    return m_file_isSet;
}

bool OAIQuery_result_entry::is_file_Valid() const{
    return m_file_isValid;
}

qint32 OAIQuery_result_entry::getLine() const {
    return m_line;
}
void OAIQuery_result_entry::setLine(const qint32 &line) {
    m_line = line;
    m_line_isSet = true;
}

bool OAIQuery_result_entry::is_line_Set() const{
    return m_line_isSet;
}

bool OAIQuery_result_entry::is_line_Valid() const{
    return m_line_isValid;
}

QString OAIQuery_result_entry::getUrl() const {
    return m_url;
}
void OAIQuery_result_entry::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIQuery_result_entry::is_url_Set() const{
    return m_url_isSet;
}

bool OAIQuery_result_entry::is_url_Valid() const{
    return m_url_isValid;
}

QString OAIQuery_result_entry::getValue() const {
    return m_value;
}
void OAIQuery_result_entry::setValue(const QString &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIQuery_result_entry::is_value_Set() const{
    return m_value_isSet;
}

bool OAIQuery_result_entry::is_value_Valid() const{
    return m_value_isValid;
}

bool OAIQuery_result_entry::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_file_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_line_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIQuery_result_entry::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
