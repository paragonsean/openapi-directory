/**
 * LGTM API specification
 * The REST API for LGTM provides data so that you can customize how you integrate LGTM analysis into your workflow. It includes the following resources:   * `/` ([API root](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-API-root))&mdash;get version information or download the specification in OpenAPI format.   * `/projects` ([Projects](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Projects))&mdash;list projects, get a summary of the current status for a project, or add new projects.   * `/analyses` ([Analyses](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Analyses))&mdash;get a summary of results, download all the alerts, or trigger analysis for a specific commit.   * `/codereviews` ([Code reviews](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Code-reviews))&mdash;trigger code review for a patch, and view the results.   * `/operations` ([Operations](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Operations))&mdash;get information about long-running tasks, for example, analyses or code reviews that you've requested.   * `/snapshots` ([Snapshots](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Snapshots))&mdash;download and upload databases representing a snapshot of a codebase.   * `/queryjobs` ([Query jobs](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Query-jobs))&mdash;submit queries to evaluate against existing projects, and download their results.   * `/system` ([System](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-System))&mdash;get information on the health or usage of the system.  For an overview and getting started topics, see [API for LGTM](https://lgtm.com/help/lgtm/api/api-for-lgtm). 
 *
 * The version of the OpenAPI document: v1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICodereview_alerts.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICodereview_alerts::OAICodereview_alerts(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICodereview_alerts::OAICodereview_alerts() {
    this->initializeModel();
}

OAICodereview_alerts::~OAICodereview_alerts() {}

void OAICodereview_alerts::initializeModel() {

    m_fixed_isSet = false;
    m_fixed_isValid = false;

    m_r_new_isSet = false;
    m_r_new_isValid = false;

    m_query_isSet = false;
    m_query_isValid = false;
}

void OAICodereview_alerts::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICodereview_alerts::fromJsonObject(QJsonObject json) {

    m_fixed_isValid = ::OpenAPI::fromJsonValue(m_fixed, json[QString("fixed")]);
    m_fixed_isSet = !json[QString("fixed")].isNull() && m_fixed_isValid;

    m_r_new_isValid = ::OpenAPI::fromJsonValue(m_r_new, json[QString("new")]);
    m_r_new_isSet = !json[QString("new")].isNull() && m_r_new_isValid;

    m_query_isValid = ::OpenAPI::fromJsonValue(m_query, json[QString("query")]);
    m_query_isSet = !json[QString("query")].isNull() && m_query_isValid;
}

QString OAICodereview_alerts::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICodereview_alerts::asJsonObject() const {
    QJsonObject obj;
    if (m_fixed_isSet) {
        obj.insert(QString("fixed"), ::OpenAPI::toJsonValue(m_fixed));
    }
    if (m_r_new_isSet) {
        obj.insert(QString("new"), ::OpenAPI::toJsonValue(m_r_new));
    }
    if (m_query.isSet()) {
        obj.insert(QString("query"), ::OpenAPI::toJsonValue(m_query));
    }
    return obj;
}

qint32 OAICodereview_alerts::getFixed() const {
    return m_fixed;
}
void OAICodereview_alerts::setFixed(const qint32 &fixed) {
    m_fixed = fixed;
    m_fixed_isSet = true;
}

bool OAICodereview_alerts::is_fixed_Set() const{
    return m_fixed_isSet;
}

bool OAICodereview_alerts::is_fixed_Valid() const{
    return m_fixed_isValid;
}

qint32 OAICodereview_alerts::getRNew() const {
    return m_r_new;
}
void OAICodereview_alerts::setRNew(const qint32 &r_new) {
    m_r_new = r_new;
    m_r_new_isSet = true;
}

bool OAICodereview_alerts::is_r_new_Set() const{
    return m_r_new_isSet;
}

bool OAICodereview_alerts::is_r_new_Valid() const{
    return m_r_new_isValid;
}

OAIQuery OAICodereview_alerts::getQuery() const {
    return m_query;
}
void OAICodereview_alerts::setQuery(const OAIQuery &query) {
    m_query = query;
    m_query_isSet = true;
}

bool OAICodereview_alerts::is_query_Set() const{
    return m_query_isSet;
}

bool OAICodereview_alerts::is_query_Valid() const{
    return m_query_isValid;
}

bool OAICodereview_alerts::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_fixed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_new_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_query.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICodereview_alerts::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
