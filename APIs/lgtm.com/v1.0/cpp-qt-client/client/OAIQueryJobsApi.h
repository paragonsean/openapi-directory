/**
 * LGTM API specification
 * The REST API for LGTM provides data so that you can customize how you integrate LGTM analysis into your workflow. It includes the following resources:   * `/` ([API root](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-API-root))&mdash;get version information or download the specification in OpenAPI format.   * `/projects` ([Projects](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Projects))&mdash;list projects, get a summary of the current status for a project, or add new projects.   * `/analyses` ([Analyses](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Analyses))&mdash;get a summary of results, download all the alerts, or trigger analysis for a specific commit.   * `/codereviews` ([Code reviews](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Code-reviews))&mdash;trigger code review for a patch, and view the results.   * `/operations` ([Operations](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Operations))&mdash;get information about long-running tasks, for example, analyses or code reviews that you've requested.   * `/snapshots` ([Snapshots](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Snapshots))&mdash;download and upload databases representing a snapshot of a codebase.   * `/queryjobs` ([Query jobs](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Query-jobs))&mdash;submit queries to evaluate against existing projects, and download their results.   * `/system` ([System](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-System))&mdash;get information on the health or usage of the system.  For an overview and getting started topics, see [API for LGTM](https://lgtm.com/help/lgtm/api/api-for-lgtm). 
 *
 * The version of the OpenAPI document: v1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIQueryJobsApi_H
#define OAI_OAIQueryJobsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIOperation.h"
#include "OAIQueryjob.h"
#include "OAIQueryjob_project_results.h"
#include "OAIQueryjob_results_overview.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIQueryJobsApi : public QObject {
    Q_OBJECT

public:
    OAIQueryJobsApi(const int timeOut = 0);
    ~OAIQueryJobsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  language QString [required]
    * @param[in]  body QString [required]
    * @param[in]  project_id QList<qint64> [optional]
    * @param[in]  projects_list QString [optional]
    */
    virtual void createQueryJob(const QString &language, const QString &body, const ::OpenAPI::OptionalParam<QList<qint64>> &project_id = ::OpenAPI::OptionalParam<QList<qint64>>(), const ::OpenAPI::OptionalParam<QString> &projects_list = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  queryjob_id QString [required]
    */
    virtual void getQueryJob(const QString &queryjob_id);

    /**
    * @param[in]  queryjob_id QString [required]
    * @param[in]  project_id QString [required]
    * @param[in]  start qint32 [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  nofilter bool [optional]
    */
    virtual void getQueryJobResultsForProject(const QString &queryjob_id, const QString &project_id, const ::OpenAPI::OptionalParam<qint32> &start = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &nofilter = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  queryjob_id QString [required]
    * @param[in]  start QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  filter QString [optional]
    */
    virtual void getQueryJobResultsOverview(const QString &queryjob_id, const ::OpenAPI::OptionalParam<QString> &start = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createQueryJobCallback(OAIHttpRequestWorker *worker);
    void getQueryJobCallback(OAIHttpRequestWorker *worker);
    void getQueryJobResultsForProjectCallback(OAIHttpRequestWorker *worker);
    void getQueryJobResultsOverviewCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createQueryJobSignal(OAIOperation summary);
    void getQueryJobSignal(OAIQueryjob summary);
    void getQueryJobResultsForProjectSignal(OAIQueryjob_project_results summary);
    void getQueryJobResultsOverviewSignal(OAIQueryjob_results_overview summary);


    void createQueryJobSignalFull(OAIHttpRequestWorker *worker, OAIOperation summary);
    void getQueryJobSignalFull(OAIHttpRequestWorker *worker, OAIQueryjob summary);
    void getQueryJobResultsForProjectSignalFull(OAIHttpRequestWorker *worker, OAIQueryjob_project_results summary);
    void getQueryJobResultsOverviewSignalFull(OAIHttpRequestWorker *worker, OAIQueryjob_results_overview summary);

    Q_DECL_DEPRECATED_X("Use createQueryJobSignalError() instead")
    void createQueryJobSignalE(OAIOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createQueryJobSignalError(OAIOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getQueryJobSignalError() instead")
    void getQueryJobSignalE(OAIQueryjob summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getQueryJobSignalError(OAIQueryjob summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getQueryJobResultsForProjectSignalError() instead")
    void getQueryJobResultsForProjectSignalE(OAIQueryjob_project_results summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getQueryJobResultsForProjectSignalError(OAIQueryjob_project_results summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getQueryJobResultsOverviewSignalError() instead")
    void getQueryJobResultsOverviewSignalE(OAIQueryjob_results_overview summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getQueryJobResultsOverviewSignalError(OAIQueryjob_results_overview summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createQueryJobSignalErrorFull() instead")
    void createQueryJobSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createQueryJobSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getQueryJobSignalErrorFull() instead")
    void getQueryJobSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getQueryJobSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getQueryJobResultsForProjectSignalErrorFull() instead")
    void getQueryJobResultsForProjectSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getQueryJobResultsForProjectSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getQueryJobResultsOverviewSignalErrorFull() instead")
    void getQueryJobResultsOverviewSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getQueryJobResultsOverviewSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
