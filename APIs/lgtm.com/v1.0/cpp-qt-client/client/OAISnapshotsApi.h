/**
 * LGTM API specification
 * The REST API for LGTM provides data so that you can customize how you integrate LGTM analysis into your workflow. It includes the following resources:   * `/` ([API root](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-API-root))&mdash;get version information or download the specification in OpenAPI format.   * `/projects` ([Projects](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Projects))&mdash;list projects, get a summary of the current status for a project, or add new projects.   * `/analyses` ([Analyses](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Analyses))&mdash;get a summary of results, download all the alerts, or trigger analysis for a specific commit.   * `/codereviews` ([Code reviews](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Code-reviews))&mdash;trigger code review for a patch, and view the results.   * `/operations` ([Operations](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Operations))&mdash;get information about long-running tasks, for example, analyses or code reviews that you've requested.   * `/snapshots` ([Snapshots](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Snapshots))&mdash;download and upload databases representing a snapshot of a codebase.   * `/queryjobs` ([Query jobs](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Query-jobs))&mdash;submit queries to evaluate against existing projects, and download their results.   * `/system` ([System](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-System))&mdash;get information on the health or usage of the system.  For an overview and getting started topics, see [API for LGTM](https://lgtm.com/help/lgtm/api/api-for-lgtm). 
 *
 * The version of the OpenAPI document: v1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAISnapshotsApi_H
#define OAI_OAISnapshotsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIHttpFileElement.h"
#include "OAIOperation.h"
#include "OAIUpload_session.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAISnapshotsApi : public QObject {
    Q_OBJECT

public:
    OAISnapshotsApi(const int timeOut = 0);
    ~OAISnapshotsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  session_id QString [required]
    */
    virtual void abortUpload(const QString &session_id);

    /**
    * @param[in]  session_id QString [required]
    */
    virtual void completeUpload(const QString &session_id);

    /**
    * @param[in]  project_id qint64 [required]
    * @param[in]  language QString [required]
    */
    virtual void getSnapshot(const qint64 &project_id, const QString &language);

    /**
    * @param[in]  project_id qint64 [required]
    * @param[in]  language QString [required]
    * @param[in]  commit QString [required]
    * @param[in]  date QDateTime [optional]
    */
    virtual void initSnapshotUpload(const qint64 &project_id, const QString &language, const QString &commit, const ::OpenAPI::OptionalParam<QDateTime> &date = ::OpenAPI::OptionalParam<QDateTime>());

    /**
    * @param[in]  session_id QString [required]
    * @param[in]  body OAIHttpFileElement [required]
    */
    virtual void uploadPart(const QString &session_id, const OAIHttpFileElement &body);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void abortUploadCallback(OAIHttpRequestWorker *worker);
    void completeUploadCallback(OAIHttpRequestWorker *worker);
    void getSnapshotCallback(OAIHttpRequestWorker *worker);
    void initSnapshotUploadCallback(OAIHttpRequestWorker *worker);
    void uploadPartCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void abortUploadSignal(OAIOperation summary);
    void completeUploadSignal(OAIOperation summary);
    void getSnapshotSignal();
    void initSnapshotUploadSignal(OAIUpload_session summary);
    void uploadPartSignal();


    void abortUploadSignalFull(OAIHttpRequestWorker *worker, OAIOperation summary);
    void completeUploadSignalFull(OAIHttpRequestWorker *worker, OAIOperation summary);
    void getSnapshotSignalFull(OAIHttpRequestWorker *worker);
    void initSnapshotUploadSignalFull(OAIHttpRequestWorker *worker, OAIUpload_session summary);
    void uploadPartSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use abortUploadSignalError() instead")
    void abortUploadSignalE(OAIOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void abortUploadSignalError(OAIOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use completeUploadSignalError() instead")
    void completeUploadSignalE(OAIOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void completeUploadSignalError(OAIOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSnapshotSignalError() instead")
    void getSnapshotSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getSnapshotSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use initSnapshotUploadSignalError() instead")
    void initSnapshotUploadSignalE(OAIUpload_session summary, QNetworkReply::NetworkError error_type, QString error_str);
    void initSnapshotUploadSignalError(OAIUpload_session summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use uploadPartSignalError() instead")
    void uploadPartSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void uploadPartSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use abortUploadSignalErrorFull() instead")
    void abortUploadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void abortUploadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use completeUploadSignalErrorFull() instead")
    void completeUploadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void completeUploadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSnapshotSignalErrorFull() instead")
    void getSnapshotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSnapshotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use initSnapshotUploadSignalErrorFull() instead")
    void initSnapshotUploadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void initSnapshotUploadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use uploadPartSignalErrorFull() instead")
    void uploadPartSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void uploadPartSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
