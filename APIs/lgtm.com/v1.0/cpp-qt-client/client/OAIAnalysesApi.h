/**
 * LGTM API specification
 * The REST API for LGTM provides data so that you can customize how you integrate LGTM analysis into your workflow. It includes the following resources:   * `/` ([API root](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-API-root))&mdash;get version information or download the specification in OpenAPI format.   * `/projects` ([Projects](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Projects))&mdash;list projects, get a summary of the current status for a project, or add new projects.   * `/analyses` ([Analyses](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Analyses))&mdash;get a summary of results, download all the alerts, or trigger analysis for a specific commit.   * `/codereviews` ([Code reviews](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Code-reviews))&mdash;trigger code review for a patch, and view the results.   * `/operations` ([Operations](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Operations))&mdash;get information about long-running tasks, for example, analyses or code reviews that you've requested.   * `/snapshots` ([Snapshots](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Snapshots))&mdash;download and upload databases representing a snapshot of a codebase.   * `/queryjobs` ([Query jobs](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Query-jobs))&mdash;submit queries to evaluate against existing projects, and download their results.   * `/system` ([System](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-System))&mdash;get information on the health or usage of the system.  For an overview and getting started topics, see [API for LGTM](https://lgtm.com/help/lgtm/api/api-for-lgtm). 
 *
 * The version of the OpenAPI document: v1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAnalysesApi_H
#define OAI_OAIAnalysesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAnalysis.h"
#include "OAIObject.h"
#include "OAIOperation.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAnalysesApi : public QObject {
    Q_OBJECT

public:
    OAIAnalysesApi(const int timeOut = 0);
    ~OAIAnalysesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  analysis_id QString [required]
    * @param[in]  sarif_version QString [optional]
    * @param[in]  excluded_files bool [optional]
    */
    virtual void getAlerts(const QString &analysis_id, const ::OpenAPI::OptionalParam<QString> &sarif_version = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &excluded_files = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  analysis_id QString [required]
    */
    virtual void getAnalysis(const QString &analysis_id);

    /**
    * @param[in]  project_id qint64 [required]
    * @param[in]  commit_id QString [required]
    */
    virtual void getAnalysisForCommit(const qint64 &project_id, const QString &commit_id);

    /**
    * @param[in]  project_id qint64 [required]
    * @param[in]  commit QString [required]
    * @param[in]  language QList<QString> [optional]
    */
    virtual void requestAnalysis(const qint64 &project_id, const QString &commit, const ::OpenAPI::OptionalParam<QList<QString>> &language = ::OpenAPI::OptionalParam<QList<QString>>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getAlertsCallback(OAIHttpRequestWorker *worker);
    void getAnalysisCallback(OAIHttpRequestWorker *worker);
    void getAnalysisForCommitCallback(OAIHttpRequestWorker *worker);
    void requestAnalysisCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getAlertsSignal(OAIObject summary);
    void getAnalysisSignal(OAIAnalysis summary);
    void getAnalysisForCommitSignal(OAIAnalysis summary);
    void requestAnalysisSignal(OAIOperation summary);


    void getAlertsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getAnalysisSignalFull(OAIHttpRequestWorker *worker, OAIAnalysis summary);
    void getAnalysisForCommitSignalFull(OAIHttpRequestWorker *worker, OAIAnalysis summary);
    void requestAnalysisSignalFull(OAIHttpRequestWorker *worker, OAIOperation summary);

    Q_DECL_DEPRECATED_X("Use getAlertsSignalError() instead")
    void getAlertsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAlertsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAnalysisSignalError() instead")
    void getAnalysisSignalE(OAIAnalysis summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAnalysisSignalError(OAIAnalysis summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAnalysisForCommitSignalError() instead")
    void getAnalysisForCommitSignalE(OAIAnalysis summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAnalysisForCommitSignalError(OAIAnalysis summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestAnalysisSignalError() instead")
    void requestAnalysisSignalE(OAIOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void requestAnalysisSignalError(OAIOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getAlertsSignalErrorFull() instead")
    void getAlertsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAlertsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAnalysisSignalErrorFull() instead")
    void getAnalysisSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAnalysisSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAnalysisForCommitSignalErrorFull() instead")
    void getAnalysisForCommitSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAnalysisForCommitSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestAnalysisSignalErrorFull() instead")
    void requestAnalysisSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void requestAnalysisSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
