/*
 * LGTM API specification
 * The REST API for LGTM provides data so that you can customize how you integrate LGTM analysis into your workflow. It includes the following resources:   * `/` ([API root](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-API-root))&mdash;get version information or download the specification in OpenAPI format.   * `/projects` ([Projects](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Projects))&mdash;list projects, get a summary of the current status for a project, or add new projects.   * `/analyses` ([Analyses](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Analyses))&mdash;get a summary of results, download all the alerts, or trigger analysis for a specific commit.   * `/codereviews` ([Code reviews](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Code-reviews))&mdash;trigger code review for a patch, and view the results.   * `/operations` ([Operations](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Operations))&mdash;get information about long-running tasks, for example, analyses or code reviews that you've requested.   * `/snapshots` ([Snapshots](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Snapshots))&mdash;download and upload databases representing a snapshot of a codebase.   * `/queryjobs` ([Query jobs](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Query-jobs))&mdash;submit queries to evaluate against existing projects, and download their results.   * `/system` ([System](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-System))&mdash;get information on the health or usage of the system.  For an overview and getting started topics, see [API for LGTM](https://lgtm.com/help/lgtm/api/api-for-lgtm). 
 *
 * The version of the OpenAPI document: v1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Analysis;
import org.openapitools.client.model.CodeReview;
import org.openapitools.client.model.CodereviewLanguages;
import org.openapitools.client.model.Project;
import org.openapitools.client.model.Queryjob;
import org.openapitools.client.model.QueryjobStats;



import java.io.IOException;
import java.lang.reflect.Type;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.JsonPrimitive;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonArray;
import com.google.gson.JsonParseException;

import org.openapitools.client.JSON;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:20:40.985942-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class OperationTaskResult extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(OperationTaskResult.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!OperationTaskResult.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'OperationTaskResult' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<Analysis> adapterAnalysis = gson.getDelegateAdapter(this, TypeToken.get(Analysis.class));
            final TypeAdapter<CodeReview> adapterCodeReview = gson.getDelegateAdapter(this, TypeToken.get(CodeReview.class));
            final TypeAdapter<Queryjob> adapterQueryjob = gson.getDelegateAdapter(this, TypeToken.get(Queryjob.class));

            return (TypeAdapter<T>) new TypeAdapter<OperationTaskResult>() {
                @Override
                public void write(JsonWriter out, OperationTaskResult value) throws IOException {
                    if (value == null || value.getActualInstance() == null) {
                        elementAdapter.write(out, null);
                        return;
                    }

                    // check if the actual instance is of the type `Analysis`
                    if (value.getActualInstance() instanceof Analysis) {
                        JsonElement element = adapterAnalysis.toJsonTree((Analysis)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `CodeReview`
                    if (value.getActualInstance() instanceof CodeReview) {
                        JsonElement element = adapterCodeReview.toJsonTree((CodeReview)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `Queryjob`
                    if (value.getActualInstance() instanceof Queryjob) {
                        JsonElement element = adapterQueryjob.toJsonTree((Queryjob)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    throw new IOException("Failed to serialize as the type doesn't match oneOf schemas: Analysis, CodeReview, Queryjob");
                }

                @Override
                public OperationTaskResult read(JsonReader in) throws IOException {
                    Object deserialized = null;
                    JsonElement jsonElement = elementAdapter.read(in);

                    int match = 0;
                    ArrayList<String> errorMessages = new ArrayList<>();
                    TypeAdapter actualAdapter = elementAdapter;

                    // deserialize Analysis
                    try {
                        // validate the JSON object to see if any exception is thrown
                        Analysis.validateJsonElement(jsonElement);
                        actualAdapter = adapterAnalysis;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'Analysis'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for Analysis failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'Analysis'", e);
                    }
                    // deserialize CodeReview
                    try {
                        // validate the JSON object to see if any exception is thrown
                        CodeReview.validateJsonElement(jsonElement);
                        actualAdapter = adapterCodeReview;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'CodeReview'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for CodeReview failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'CodeReview'", e);
                    }
                    // deserialize Queryjob
                    try {
                        // validate the JSON object to see if any exception is thrown
                        Queryjob.validateJsonElement(jsonElement);
                        actualAdapter = adapterQueryjob;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'Queryjob'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for Queryjob failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'Queryjob'", e);
                    }

                    if (match == 1) {
                        OperationTaskResult ret = new OperationTaskResult();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    }

                    throw new IOException(String.format("Failed deserialization for OperationTaskResult: %d classes match result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", match, errorMessages, jsonElement.toString()));
                }
            }.nullSafe();
        }
    }

    // store a list of schema names defined in oneOf
    public static final Map<String, Class<?>> schemas = new HashMap<String, Class<?>>();

    public OperationTaskResult() {
        super("oneOf", Boolean.FALSE);
    }

    public OperationTaskResult(Object o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("Analysis", Analysis.class);
        schemas.put("CodeReview", CodeReview.class);
        schemas.put("Queryjob", Queryjob.class);
    }

    @Override
    public Map<String, Class<?>> getSchemas() {
        return OperationTaskResult.schemas;
    }

    /**
     * Set the instance that matches the oneOf child schema, check
     * the instance parameter is valid against the oneOf child schemas:
     * Analysis, CodeReview, Queryjob
     *
     * It could be an instance of the 'oneOf' schemas.
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof Analysis) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof CodeReview) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof Queryjob) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be Analysis, CodeReview, Queryjob");
    }

    /**
     * Get the actual instance, which can be the following:
     * Analysis, CodeReview, Queryjob
     *
     * @return The actual instance (Analysis, CodeReview, Queryjob)
     */
    @SuppressWarnings("unchecked")
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `Analysis`. If the actual instance is not `Analysis`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `Analysis`
     * @throws ClassCastException if the instance is not `Analysis`
     */
    public Analysis getAnalysis() throws ClassCastException {
        return (Analysis)super.getActualInstance();
    }
    /**
     * Get the actual instance of `CodeReview`. If the actual instance is not `CodeReview`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `CodeReview`
     * @throws ClassCastException if the instance is not `CodeReview`
     */
    public CodeReview getCodeReview() throws ClassCastException {
        return (CodeReview)super.getActualInstance();
    }
    /**
     * Get the actual instance of `Queryjob`. If the actual instance is not `Queryjob`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `Queryjob`
     * @throws ClassCastException if the instance is not `Queryjob`
     */
    public Queryjob getQueryjob() throws ClassCastException {
        return (Queryjob)super.getActualInstance();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to OperationTaskResult
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        // validate oneOf schemas one by one
        int validCount = 0;
        ArrayList<String> errorMessages = new ArrayList<>();
        // validate the json string with Analysis
        try {
            Analysis.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for Analysis failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with CodeReview
        try {
            CodeReview.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for CodeReview failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with Queryjob
        try {
            Queryjob.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for Queryjob failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        if (validCount != 1) {
            throw new IOException(String.format("The JSON string is invalid for OperationTaskResult with oneOf schemas: Analysis, CodeReview, Queryjob. %d class(es) match the result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", validCount, errorMessages, jsonElement.toString()));
        }
    }

    /**
     * Create an instance of OperationTaskResult given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of OperationTaskResult
     * @throws IOException if the JSON string is invalid with respect to OperationTaskResult
     */
    public static OperationTaskResult fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, OperationTaskResult.class);
    }

    /**
     * Convert an instance of OperationTaskResult to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

