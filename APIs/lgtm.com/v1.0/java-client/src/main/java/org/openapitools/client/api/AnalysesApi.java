/*
 * LGTM API specification
 * The REST API for LGTM provides data so that you can customize how you integrate LGTM analysis into your workflow. It includes the following resources:   * `/` ([API root](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-API-root))&mdash;get version information or download the specification in OpenAPI format.   * `/projects` ([Projects](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Projects))&mdash;list projects, get a summary of the current status for a project, or add new projects.   * `/analyses` ([Analyses](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Analyses))&mdash;get a summary of results, download all the alerts, or trigger analysis for a specific commit.   * `/codereviews` ([Code reviews](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Code-reviews))&mdash;trigger code review for a patch, and view the results.   * `/operations` ([Operations](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Operations))&mdash;get information about long-running tasks, for example, analyses or code reviews that you've requested.   * `/snapshots` ([Snapshots](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Snapshots))&mdash;download and upload databases representing a snapshot of a codebase.   * `/queryjobs` ([Query jobs](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Query-jobs))&mdash;submit queries to evaluate against existing projects, and download their results.   * `/system` ([System](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-System))&mdash;get information on the health or usage of the system.  For an overview and getting started topics, see [API for LGTM](https://lgtm.com/help/lgtm/api/api-for-lgtm). 
 *
 * The version of the OpenAPI document: v1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Analysis;
import org.openapitools.client.model.Operation;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AnalysesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AnalysesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AnalysesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getAlerts
     * @param analysisId The analysis identifier. (required)
     * @param sarifVersion The desired version of the SARIF format. Currently supported versions are &#x60;1.0.0&#x60;, &#x60;2.0.0&#x60;, and &#x60;2.1.0&#x60;. (optional)
     * @param excludedFiles Set &#x60;true&#x60; to include results in files that are excluded from the output by default. This includes results in test code and generated files. For more information, see [File classification](https://lgtm.com/help/lgtm/file-classification). (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. Requested data returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAlertsCall(String analysisId, String sarifVersion, Boolean excludedFiles, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/analyses/{analysis-id}/alerts"
            .replace("{" + "analysis-id" + "}", localVarApiClient.escapeString(analysisId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sarifVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sarif-version", sarifVersion));
        }

        if (excludedFiles != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("excluded-files", excludedFiles));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/sarif+json",
            "text/csv"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "access-token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAlertsValidateBeforeCall(String analysisId, String sarifVersion, Boolean excludedFiles, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'analysisId' is set
        if (analysisId == null) {
            throw new ApiException("Missing the required parameter 'analysisId' when calling getAlerts(Async)");
        }

        return getAlertsCall(analysisId, sarifVersion, excludedFiles, _callback);

    }

    /**
     * Get detailed alert information
     * Download all the alerts found by an analysis. Use the &#x60;Accept:&#x60; request header to specify the output media type as either CSV or [SARIF](https://lgtm.com/help/lgtm/sarif-results-file):   - &#x60;application/sarif+json&#x60;: Alerts in SARIF format. If no version is specified the latest supported SARIF version is used. - &#x60;application/json&#x60;: Alerts in SARIF format (*deprecated*).    If no version is specified, [SARIF 2.0.0](http://docs.oasis-open.org/sarif/sarif/v2.0/sarif-v2.0.html)    is used for backwards compatibility.  - &#x60;text/csv&#x60;: Alerts in CSV format. The &#x60;text/csv&#x60; media type has two optional parameters:    - &#x60;charset&#x60;: determines the character encoding of the text, by default UTF-8.    - &#x60;header&#x60;: determines whether a header row with column names is &#x60;present&#x60; or &#x60;absent&#x60;.       The default value for this parameter is &#x60;present&#x60;.       For example, an Accept header with value &#x60;text/csv; header&#x3D;absent&#x60;        would result in CSV output without a header row.         To find the analysis identifier for a commit, use the &#x60;/analyses/{project-id}/commits/{commit-id}&#x60;  endpoint. For more information, see [Get analysis summary for a specific commit](https://lgtm.com/help/lgtm/api/api-v1#opIdgetAnalysisForCommit).  
     * @param analysisId The analysis identifier. (required)
     * @param sarifVersion The desired version of the SARIF format. Currently supported versions are &#x60;1.0.0&#x60;, &#x60;2.0.0&#x60;, and &#x60;2.1.0&#x60;. (optional)
     * @param excludedFiles Set &#x60;true&#x60; to include results in files that are excluded from the output by default. This includes results in test code and generated files. For more information, see [File classification](https://lgtm.com/help/lgtm/file-classification). (optional, default to false)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. Requested data returned. </td><td>  -  </td></tr>
     </table>
     */
    public Object getAlerts(String analysisId, String sarifVersion, Boolean excludedFiles) throws ApiException {
        ApiResponse<Object> localVarResp = getAlertsWithHttpInfo(analysisId, sarifVersion, excludedFiles);
        return localVarResp.getData();
    }

    /**
     * Get detailed alert information
     * Download all the alerts found by an analysis. Use the &#x60;Accept:&#x60; request header to specify the output media type as either CSV or [SARIF](https://lgtm.com/help/lgtm/sarif-results-file):   - &#x60;application/sarif+json&#x60;: Alerts in SARIF format. If no version is specified the latest supported SARIF version is used. - &#x60;application/json&#x60;: Alerts in SARIF format (*deprecated*).    If no version is specified, [SARIF 2.0.0](http://docs.oasis-open.org/sarif/sarif/v2.0/sarif-v2.0.html)    is used for backwards compatibility.  - &#x60;text/csv&#x60;: Alerts in CSV format. The &#x60;text/csv&#x60; media type has two optional parameters:    - &#x60;charset&#x60;: determines the character encoding of the text, by default UTF-8.    - &#x60;header&#x60;: determines whether a header row with column names is &#x60;present&#x60; or &#x60;absent&#x60;.       The default value for this parameter is &#x60;present&#x60;.       For example, an Accept header with value &#x60;text/csv; header&#x3D;absent&#x60;        would result in CSV output without a header row.         To find the analysis identifier for a commit, use the &#x60;/analyses/{project-id}/commits/{commit-id}&#x60;  endpoint. For more information, see [Get analysis summary for a specific commit](https://lgtm.com/help/lgtm/api/api-v1#opIdgetAnalysisForCommit).  
     * @param analysisId The analysis identifier. (required)
     * @param sarifVersion The desired version of the SARIF format. Currently supported versions are &#x60;1.0.0&#x60;, &#x60;2.0.0&#x60;, and &#x60;2.1.0&#x60;. (optional)
     * @param excludedFiles Set &#x60;true&#x60; to include results in files that are excluded from the output by default. This includes results in test code and generated files. For more information, see [File classification](https://lgtm.com/help/lgtm/file-classification). (optional, default to false)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. Requested data returned. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getAlertsWithHttpInfo(String analysisId, String sarifVersion, Boolean excludedFiles) throws ApiException {
        okhttp3.Call localVarCall = getAlertsValidateBeforeCall(analysisId, sarifVersion, excludedFiles, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get detailed alert information (asynchronously)
     * Download all the alerts found by an analysis. Use the &#x60;Accept:&#x60; request header to specify the output media type as either CSV or [SARIF](https://lgtm.com/help/lgtm/sarif-results-file):   - &#x60;application/sarif+json&#x60;: Alerts in SARIF format. If no version is specified the latest supported SARIF version is used. - &#x60;application/json&#x60;: Alerts in SARIF format (*deprecated*).    If no version is specified, [SARIF 2.0.0](http://docs.oasis-open.org/sarif/sarif/v2.0/sarif-v2.0.html)    is used for backwards compatibility.  - &#x60;text/csv&#x60;: Alerts in CSV format. The &#x60;text/csv&#x60; media type has two optional parameters:    - &#x60;charset&#x60;: determines the character encoding of the text, by default UTF-8.    - &#x60;header&#x60;: determines whether a header row with column names is &#x60;present&#x60; or &#x60;absent&#x60;.       The default value for this parameter is &#x60;present&#x60;.       For example, an Accept header with value &#x60;text/csv; header&#x3D;absent&#x60;        would result in CSV output without a header row.         To find the analysis identifier for a commit, use the &#x60;/analyses/{project-id}/commits/{commit-id}&#x60;  endpoint. For more information, see [Get analysis summary for a specific commit](https://lgtm.com/help/lgtm/api/api-v1#opIdgetAnalysisForCommit).  
     * @param analysisId The analysis identifier. (required)
     * @param sarifVersion The desired version of the SARIF format. Currently supported versions are &#x60;1.0.0&#x60;, &#x60;2.0.0&#x60;, and &#x60;2.1.0&#x60;. (optional)
     * @param excludedFiles Set &#x60;true&#x60; to include results in files that are excluded from the output by default. This includes results in test code and generated files. For more information, see [File classification](https://lgtm.com/help/lgtm/file-classification). (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. Requested data returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAlertsAsync(String analysisId, String sarifVersion, Boolean excludedFiles, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAlertsValidateBeforeCall(analysisId, sarifVersion, excludedFiles, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAnalysis
     * @param analysisId The analysis identifier. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. Requested data returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAnalysisCall(String analysisId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/analyses/{analysis-id}"
            .replace("{" + "analysis-id" + "}", localVarApiClient.escapeString(analysisId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "access-token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAnalysisValidateBeforeCall(String analysisId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'analysisId' is set
        if (analysisId == null) {
            throw new ApiException("Missing the required parameter 'analysisId' when calling getAnalysis(Async)");
        }

        return getAnalysisCall(analysisId, _callback);

    }

    /**
     * Get analysis summary
     * Get a summary of the analysis results for a specific analysis identifier.  To find the analysis identifier for a commit, use the &#x60;/analyses/{project-id}/commits/{commit-id}&#x60; endpoint. For more information, see [Get analysis summary for a specific commit](https://lgtm.com/help/lgtm/api/api-v1#opIdgetAnalysisForCommit).  This endpoint reports the commit analyzed and a summary of the results for each language. Alternatively, you can use this identifier to download full details  of all the alerts found by the analysis. For more information, see [Get detailed alert information](https://lgtm.com/help/lgtm/api/api-v1#opIdgetAlerts). 
     * @param analysisId The analysis identifier. (required)
     * @return Analysis
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. Requested data returned. </td><td>  -  </td></tr>
     </table>
     */
    public Analysis getAnalysis(String analysisId) throws ApiException {
        ApiResponse<Analysis> localVarResp = getAnalysisWithHttpInfo(analysisId);
        return localVarResp.getData();
    }

    /**
     * Get analysis summary
     * Get a summary of the analysis results for a specific analysis identifier.  To find the analysis identifier for a commit, use the &#x60;/analyses/{project-id}/commits/{commit-id}&#x60; endpoint. For more information, see [Get analysis summary for a specific commit](https://lgtm.com/help/lgtm/api/api-v1#opIdgetAnalysisForCommit).  This endpoint reports the commit analyzed and a summary of the results for each language. Alternatively, you can use this identifier to download full details  of all the alerts found by the analysis. For more information, see [Get detailed alert information](https://lgtm.com/help/lgtm/api/api-v1#opIdgetAlerts). 
     * @param analysisId The analysis identifier. (required)
     * @return ApiResponse&lt;Analysis&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. Requested data returned. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Analysis> getAnalysisWithHttpInfo(String analysisId) throws ApiException {
        okhttp3.Call localVarCall = getAnalysisValidateBeforeCall(analysisId, null);
        Type localVarReturnType = new TypeToken<Analysis>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get analysis summary (asynchronously)
     * Get a summary of the analysis results for a specific analysis identifier.  To find the analysis identifier for a commit, use the &#x60;/analyses/{project-id}/commits/{commit-id}&#x60; endpoint. For more information, see [Get analysis summary for a specific commit](https://lgtm.com/help/lgtm/api/api-v1#opIdgetAnalysisForCommit).  This endpoint reports the commit analyzed and a summary of the results for each language. Alternatively, you can use this identifier to download full details  of all the alerts found by the analysis. For more information, see [Get detailed alert information](https://lgtm.com/help/lgtm/api/api-v1#opIdgetAlerts). 
     * @param analysisId The analysis identifier. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. Requested data returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAnalysisAsync(String analysisId, final ApiCallback<Analysis> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAnalysisValidateBeforeCall(analysisId, _callback);
        Type localVarReturnType = new TypeToken<Analysis>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAnalysisForCommit
     * @param projectId The numeric project identifier. (required)
     * @param commitId The identifier of a specific commit. Alternatively, use &#x60;latest&#x60; for the most recent analyzed commit. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. Data returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAnalysisForCommitCall(Long projectId, String commitId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/analyses/{project-id}/commits/{commit-id}"
            .replace("{" + "project-id" + "}", localVarApiClient.escapeString(projectId.toString()))
            .replace("{" + "commit-id" + "}", localVarApiClient.escapeString(commitId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "access-token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAnalysisForCommitValidateBeforeCall(Long projectId, String commitId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getAnalysisForCommit(Async)");
        }

        // verify the required parameter 'commitId' is set
        if (commitId == null) {
            throw new ApiException("Missing the required parameter 'commitId' when calling getAnalysisForCommit(Async)");
        }

        return getAnalysisForCommitCall(projectId, commitId, _callback);

    }

    /**
     * Get analysis summary for a specific commit
     * Get a summary of the analysis results for a specific commit, or the latest commit, to a project. (For projects configured for sparse or upload analysis, only &#x60;latest&#x60; is supported.)   This endpoint reports a summary of results for each language, and also the analysis identifier. You can use the analysis identifier to download full details of all the alerts  found by the analysis. For more information, see [Get detailed alert information](https://lgtm.com/help/lgtm/api/api-v1#opIdgetAlerts). 
     * @param projectId The numeric project identifier. (required)
     * @param commitId The identifier of a specific commit. Alternatively, use &#x60;latest&#x60; for the most recent analyzed commit. (required)
     * @return Analysis
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. Data returned. </td><td>  -  </td></tr>
     </table>
     */
    public Analysis getAnalysisForCommit(Long projectId, String commitId) throws ApiException {
        ApiResponse<Analysis> localVarResp = getAnalysisForCommitWithHttpInfo(projectId, commitId);
        return localVarResp.getData();
    }

    /**
     * Get analysis summary for a specific commit
     * Get a summary of the analysis results for a specific commit, or the latest commit, to a project. (For projects configured for sparse or upload analysis, only &#x60;latest&#x60; is supported.)   This endpoint reports a summary of results for each language, and also the analysis identifier. You can use the analysis identifier to download full details of all the alerts  found by the analysis. For more information, see [Get detailed alert information](https://lgtm.com/help/lgtm/api/api-v1#opIdgetAlerts). 
     * @param projectId The numeric project identifier. (required)
     * @param commitId The identifier of a specific commit. Alternatively, use &#x60;latest&#x60; for the most recent analyzed commit. (required)
     * @return ApiResponse&lt;Analysis&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. Data returned. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Analysis> getAnalysisForCommitWithHttpInfo(Long projectId, String commitId) throws ApiException {
        okhttp3.Call localVarCall = getAnalysisForCommitValidateBeforeCall(projectId, commitId, null);
        Type localVarReturnType = new TypeToken<Analysis>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get analysis summary for a specific commit (asynchronously)
     * Get a summary of the analysis results for a specific commit, or the latest commit, to a project. (For projects configured for sparse or upload analysis, only &#x60;latest&#x60; is supported.)   This endpoint reports a summary of results for each language, and also the analysis identifier. You can use the analysis identifier to download full details of all the alerts  found by the analysis. For more information, see [Get detailed alert information](https://lgtm.com/help/lgtm/api/api-v1#opIdgetAlerts). 
     * @param projectId The numeric project identifier. (required)
     * @param commitId The identifier of a specific commit. Alternatively, use &#x60;latest&#x60; for the most recent analyzed commit. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. Data returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAnalysisForCommitAsync(Long projectId, String commitId, final ApiCallback<Analysis> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAnalysisForCommitValidateBeforeCall(projectId, commitId, _callback);
        Type localVarReturnType = new TypeToken<Analysis>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for requestAnalysis
     * @param projectId The numeric project identifier. (required)
     * @param commit The identifier of the commit to analyze. (required)
     * @param language The language codes of the languages to analyze. For a list of available languages, see [Supported languages](https://lgtm.com/help/lgtm/analysis-faqs#which-languages-are-supported). To specify more than one language, this parameter can be repeated. If no language is specified, all the project&#39;s languages will be analyzed.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted. Analysis triggered. Tracking data returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call requestAnalysisCall(Long projectId, String commit, List<String> language, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/analyses/{project-id}"
            .replace("{" + "project-id" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (commit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("commit", commit));
        }

        if (language != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "language", language));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "access-token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call requestAnalysisValidateBeforeCall(Long projectId, String commit, List<String> language, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling requestAnalysis(Async)");
        }

        // verify the required parameter 'commit' is set
        if (commit == null) {
            throw new ApiException("Missing the required parameter 'commit' when calling requestAnalysis(Async)");
        }

        return requestAnalysisCall(projectId, commit, language, _callback);

    }

    /**
     * Run analysis of a specific commit
     * Trigger the analysis of a specific commit to a project. If a previous attempt to analyze that commit failed, this triggers a fresh analysis.  This is supported for all LGTM projects, regardless of repository type or host. The commit must be available in the main repository, but can be on a branch that isn&#39;t tracked by LGTM. For both LGTM.com and LGTM Enterprise, you must include an access token with the &#x60;analyses:write&#x60; scope.  When you request the analysis of a commit, the API returns: - &#x60;operation-id&#x60;: used to track the status of the task using the &#x60;/operations&#x60; endpoint. For more information, see [Get operation status](https://lgtm.com/help/lgtm/api/api-v1#opIdgetOperation). - &#x60;status&#x60;: initially pending. - &#x60;task-result&#x60;: containing information about the progress and results of the analysis. 
     * @param projectId The numeric project identifier. (required)
     * @param commit The identifier of the commit to analyze. (required)
     * @param language The language codes of the languages to analyze. For a list of available languages, see [Supported languages](https://lgtm.com/help/lgtm/analysis-faqs#which-languages-are-supported). To specify more than one language, this parameter can be repeated. If no language is specified, all the project&#39;s languages will be analyzed.  (optional)
     * @return Operation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted. Analysis triggered. Tracking data returned. </td><td>  -  </td></tr>
     </table>
     */
    public Operation requestAnalysis(Long projectId, String commit, List<String> language) throws ApiException {
        ApiResponse<Operation> localVarResp = requestAnalysisWithHttpInfo(projectId, commit, language);
        return localVarResp.getData();
    }

    /**
     * Run analysis of a specific commit
     * Trigger the analysis of a specific commit to a project. If a previous attempt to analyze that commit failed, this triggers a fresh analysis.  This is supported for all LGTM projects, regardless of repository type or host. The commit must be available in the main repository, but can be on a branch that isn&#39;t tracked by LGTM. For both LGTM.com and LGTM Enterprise, you must include an access token with the &#x60;analyses:write&#x60; scope.  When you request the analysis of a commit, the API returns: - &#x60;operation-id&#x60;: used to track the status of the task using the &#x60;/operations&#x60; endpoint. For more information, see [Get operation status](https://lgtm.com/help/lgtm/api/api-v1#opIdgetOperation). - &#x60;status&#x60;: initially pending. - &#x60;task-result&#x60;: containing information about the progress and results of the analysis. 
     * @param projectId The numeric project identifier. (required)
     * @param commit The identifier of the commit to analyze. (required)
     * @param language The language codes of the languages to analyze. For a list of available languages, see [Supported languages](https://lgtm.com/help/lgtm/analysis-faqs#which-languages-are-supported). To specify more than one language, this parameter can be repeated. If no language is specified, all the project&#39;s languages will be analyzed.  (optional)
     * @return ApiResponse&lt;Operation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted. Analysis triggered. Tracking data returned. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Operation> requestAnalysisWithHttpInfo(Long projectId, String commit, List<String> language) throws ApiException {
        okhttp3.Call localVarCall = requestAnalysisValidateBeforeCall(projectId, commit, language, null);
        Type localVarReturnType = new TypeToken<Operation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Run analysis of a specific commit (asynchronously)
     * Trigger the analysis of a specific commit to a project. If a previous attempt to analyze that commit failed, this triggers a fresh analysis.  This is supported for all LGTM projects, regardless of repository type or host. The commit must be available in the main repository, but can be on a branch that isn&#39;t tracked by LGTM. For both LGTM.com and LGTM Enterprise, you must include an access token with the &#x60;analyses:write&#x60; scope.  When you request the analysis of a commit, the API returns: - &#x60;operation-id&#x60;: used to track the status of the task using the &#x60;/operations&#x60; endpoint. For more information, see [Get operation status](https://lgtm.com/help/lgtm/api/api-v1#opIdgetOperation). - &#x60;status&#x60;: initially pending. - &#x60;task-result&#x60;: containing information about the progress and results of the analysis. 
     * @param projectId The numeric project identifier. (required)
     * @param commit The identifier of the commit to analyze. (required)
     * @param language The language codes of the languages to analyze. For a list of available languages, see [Supported languages](https://lgtm.com/help/lgtm/analysis-faqs#which-languages-are-supported). To specify more than one language, this parameter can be repeated. If no language is specified, all the project&#39;s languages will be analyzed.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted. Analysis triggered. Tracking data returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call requestAnalysisAsync(Long projectId, String commit, List<String> language, final ApiCallback<Operation> _callback) throws ApiException {

        okhttp3.Call localVarCall = requestAnalysisValidateBeforeCall(projectId, commit, language, _callback);
        Type localVarReturnType = new TypeToken<Operation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
