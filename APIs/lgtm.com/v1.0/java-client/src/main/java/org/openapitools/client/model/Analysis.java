/*
 * LGTM API specification
 * The REST API for LGTM provides data so that you can customize how you integrate LGTM analysis into your workflow. It includes the following resources:   * `/` ([API root](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-API-root))&mdash;get version information or download the specification in OpenAPI format.   * `/projects` ([Projects](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Projects))&mdash;list projects, get a summary of the current status for a project, or add new projects.   * `/analyses` ([Analyses](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Analyses))&mdash;get a summary of results, download all the alerts, or trigger analysis for a specific commit.   * `/codereviews` ([Code reviews](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Code-reviews))&mdash;trigger code review for a patch, and view the results.   * `/operations` ([Operations](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Operations))&mdash;get information about long-running tasks, for example, analyses or code reviews that you've requested.   * `/snapshots` ([Snapshots](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Snapshots))&mdash;download and upload databases representing a snapshot of a codebase.   * `/queryjobs` ([Query jobs](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Query-jobs))&mdash;submit queries to evaluate against existing projects, and download their results.   * `/system` ([System](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-System))&mdash;get information on the health or usage of the system.  For an overview and getting started topics, see [API for LGTM](https://lgtm.com/help/lgtm/api/api-for-lgtm). 
 *
 * The version of the OpenAPI document: v1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.LanguageStats;
import org.openapitools.client.model.Project;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Analysis
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:20:40.985942-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Analysis {
  public static final String SERIALIZED_NAME_COMMIT_ID = "commit-id";
  @SerializedName(SERIALIZED_NAME_COMMIT_ID)
  private String commitId;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_LANGUAGES = "languages";
  @SerializedName(SERIALIZED_NAME_LANGUAGES)
  private List<LanguageStats> languages = new ArrayList<>();

  public static final String SERIALIZED_NAME_LOG_URL = "log-url";
  @SerializedName(SERIALIZED_NAME_LOG_URL)
  private String logUrl;

  public static final String SERIALIZED_NAME_PROJECT = "project";
  @SerializedName(SERIALIZED_NAME_PROJECT)
  private Project project;

  public static final String SERIALIZED_NAME_RESULTS_URL = "results-url";
  @SerializedName(SERIALIZED_NAME_RESULTS_URL)
  private String resultsUrl;

  public Analysis() {
  }

  public Analysis commitId(String commitId) {
    this.commitId = commitId;
    return this;
  }

  /**
   * The commit identifier. The commit identifier is included only if the same commit was successfully analyzed for all languages. A detailed breakdown of which commit was analyzed for each language is provided in the &#x60;languages&#x60; property. 
   * @return commitId
   */
  @javax.annotation.Nullable
  public String getCommitId() {
    return commitId;
  }

  public void setCommitId(String commitId) {
    this.commitId = commitId;
  }


  public Analysis id(String id) {
    this.id = id;
    return this;
  }

  /**
   * The analysis identifier.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public Analysis languages(List<LanguageStats> languages) {
    this.languages = languages;
    return this;
  }

  public Analysis addLanguagesItem(LanguageStats languagesItem) {
    if (this.languages == null) {
      this.languages = new ArrayList<>();
    }
    this.languages.add(languagesItem);
    return this;
  }

  /**
   * Per-language information.
   * @return languages
   */
  @javax.annotation.Nullable
  public List<LanguageStats> getLanguages() {
    return languages;
  }

  public void setLanguages(List<LanguageStats> languages) {
    this.languages = languages;
  }


  public Analysis logUrl(String logUrl) {
    this.logUrl = logUrl;
    return this;
  }

  /**
   * A page on LGTM to view the logs for this analysis.
   * @return logUrl
   */
  @javax.annotation.Nullable
  public String getLogUrl() {
    return logUrl;
  }

  public void setLogUrl(String logUrl) {
    this.logUrl = logUrl;
  }


  public Analysis project(Project project) {
    this.project = project;
    return this;
  }

  /**
   * Get project
   * @return project
   */
  @javax.annotation.Nullable
  public Project getProject() {
    return project;
  }

  public void setProject(Project project) {
    this.project = project;
  }


  public Analysis resultsUrl(String resultsUrl) {
    this.resultsUrl = resultsUrl;
    return this;
  }

  /**
   * A page on LGTM to view the results of this analysis.
   * @return resultsUrl
   */
  @javax.annotation.Nullable
  public String getResultsUrl() {
    return resultsUrl;
  }

  public void setResultsUrl(String resultsUrl) {
    this.resultsUrl = resultsUrl;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Analysis analysis = (Analysis) o;
    return Objects.equals(this.commitId, analysis.commitId) &&
        Objects.equals(this.id, analysis.id) &&
        Objects.equals(this.languages, analysis.languages) &&
        Objects.equals(this.logUrl, analysis.logUrl) &&
        Objects.equals(this.project, analysis.project) &&
        Objects.equals(this.resultsUrl, analysis.resultsUrl);
  }

  @Override
  public int hashCode() {
    return Objects.hash(commitId, id, languages, logUrl, project, resultsUrl);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Analysis {\n");
    sb.append("    commitId: ").append(toIndentedString(commitId)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    languages: ").append(toIndentedString(languages)).append("\n");
    sb.append("    logUrl: ").append(toIndentedString(logUrl)).append("\n");
    sb.append("    project: ").append(toIndentedString(project)).append("\n");
    sb.append("    resultsUrl: ").append(toIndentedString(resultsUrl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("commit-id");
    openapiFields.add("id");
    openapiFields.add("languages");
    openapiFields.add("log-url");
    openapiFields.add("project");
    openapiFields.add("results-url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Analysis
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Analysis.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Analysis is not found in the empty JSON string", Analysis.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Analysis.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Analysis` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("commit-id") != null && !jsonObj.get("commit-id").isJsonNull()) && !jsonObj.get("commit-id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `commit-id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("commit-id").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (jsonObj.get("languages") != null && !jsonObj.get("languages").isJsonNull()) {
        JsonArray jsonArraylanguages = jsonObj.getAsJsonArray("languages");
        if (jsonArraylanguages != null) {
          // ensure the json data is an array
          if (!jsonObj.get("languages").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `languages` to be an array in the JSON string but got `%s`", jsonObj.get("languages").toString()));
          }

          // validate the optional field `languages` (array)
          for (int i = 0; i < jsonArraylanguages.size(); i++) {
            LanguageStats.validateJsonElement(jsonArraylanguages.get(i));
          };
        }
      }
      if ((jsonObj.get("log-url") != null && !jsonObj.get("log-url").isJsonNull()) && !jsonObj.get("log-url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `log-url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("log-url").toString()));
      }
      // validate the optional field `project`
      if (jsonObj.get("project") != null && !jsonObj.get("project").isJsonNull()) {
        Project.validateJsonElement(jsonObj.get("project"));
      }
      if ((jsonObj.get("results-url") != null && !jsonObj.get("results-url").isJsonNull()) && !jsonObj.get("results-url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `results-url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("results-url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Analysis.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Analysis' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Analysis> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Analysis.class));

       return (TypeAdapter<T>) new TypeAdapter<Analysis>() {
           @Override
           public void write(JsonWriter out, Analysis value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Analysis read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Analysis given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Analysis
   * @throws IOException if the JSON string is invalid with respect to Analysis
   */
  public static Analysis fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Analysis.class);
  }

  /**
   * Convert an instance of Analysis to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

