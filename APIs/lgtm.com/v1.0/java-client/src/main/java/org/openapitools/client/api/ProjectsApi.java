/*
 * LGTM API specification
 * The REST API for LGTM provides data so that you can customize how you integrate LGTM analysis into your workflow. It includes the following resources:   * `/` ([API root](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-API-root))&mdash;get version information or download the specification in OpenAPI format.   * `/projects` ([Projects](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Projects))&mdash;list projects, get a summary of the current status for a project, or add new projects.   * `/analyses` ([Analyses](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Analyses))&mdash;get a summary of results, download all the alerts, or trigger analysis for a specific commit.   * `/codereviews` ([Code reviews](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Code-reviews))&mdash;trigger code review for a patch, and view the results.   * `/operations` ([Operations](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Operations))&mdash;get information about long-running tasks, for example, analyses or code reviews that you've requested.   * `/snapshots` ([Snapshots](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Snapshots))&mdash;download and upload databases representing a snapshot of a codebase.   * `/queryjobs` ([Query jobs](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Query-jobs))&mdash;submit queries to evaluate against existing projects, and download their results.   * `/system` ([System](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-System))&mdash;get information on the health or usage of the system.  For an overview and getting started topics, see [API for LGTM](https://lgtm.com/help/lgtm/api/api-for-lgtm). 
 *
 * The version of the OpenAPI document: v1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.time.OffsetDateTime;
import org.openapitools.client.model.Operation;
import org.openapitools.client.model.ProjectDetails;
import org.openapitools.client.model.ProjectList;
import java.net.URI;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ProjectsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ProjectsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ProjectsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for addProject
     * @param repository The URL of the repository to analyze. LGTM tests this against the [repository providers](https://lgtm.com/admin/help/adding-repository-providers) defined for the system. If it doesn&#39;t match any of them, the request fails. (required)
     * @param language Optional, a [language code](https://lgtm.com/help/lgtm/analysis-faqs#which-languages-are-supported) to specify which language to analyze. To request the analysis of more than one language, specify a query parameter for each language. By default, LGTM tries to analyze all supported languages.  (optional)
     * @param mode The analysis mode of the new project. When set to &#x60;full&#x60; all commits of the project are analyzed; when set to &#x60;sparse&#x60; the latest commit of the project is analyzed periodically; when set to &#x60;upload&#x60;,  no automatic analysis is performed, instead externally-generated databases should be uploaded. For new projects the default value is &#x60;full&#x60;. The &#x60;mode&#x60; parameter cannot be used to change the analysis mode of existing projects. Therefore, for existing projects, it should either be left blank or set to match the analysis mode of the project.  (optional)
     * @param commit Required when &#x60;mode&#x3D;upload&#x60;, specify the identifier of the commit used to generate the database. (optional)
     * @param date Optional when &#x60;mode&#x3D;upload&#x60;, specify the date and time of the commit used to generate the database; defaults to the current time. (optional)
     * @param workerLabel Optional, any [labels](https://lgtm.com/admin/help/defining-worker-labels) required by workers to analyze this project.  To specify more than one label, repeat the query parameter.  (optional)
     * @param body An optional [lgtm.yml project configuration](https://lgtm.com/help/lgtm/lgtm.yml-configuration-file) file to customize the LGTM code analysis and results display for the project. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted. Analysis attempts triggered or upload URLs returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addProjectCall(URI repository, List<String> language, String mode, String commit, OffsetDateTime date, List<String> workerLabel, String body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/projects";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (repository != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("repository", repository));
        }

        if (language != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "language", language));
        }

        if (mode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mode", mode));
        }

        if (commit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("commit", commit));
        }

        if (date != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date", date));
        }

        if (workerLabel != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "worker-label", workerLabel));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-yaml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "access-token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addProjectValidateBeforeCall(URI repository, List<String> language, String mode, String commit, OffsetDateTime date, List<String> workerLabel, String body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'repository' is set
        if (repository == null) {
            throw new ApiException("Missing the required parameter 'repository' when calling addProject(Async)");
        }

        return addProjectCall(repository, language, mode, commit, date, workerLabel, body, _callback);

    }

    /**
     * Add a project to LGTM
     * LGTM administrators can add a new project to LGTM by providing a repository URL. By default, LGTM tries to build and analyze the project in the same way as for projects added through the user interface. If at least one language is successfully analyzed, and the repository doesn&#39;t already exist on LGTM, a new project is created. If the project already exists but your API call triggers a successful analysis  of additional languages, LGTM adds those languages to the project.  You can configure how LGTM processes the project using query parameters to:   * Specify the languages to analyze.   * Create a new project in [sparse mode](https://help.semmle.com/lgtm-enterprise/user/help/analysis-faqs.html#what-is-sparse-analysis).   * Create a new project in [upload mode](https://help.semmle.com/lgtm-enterprise/user/help/analysis-faqs.html#what-is-upload-analysis) to analyze externally-generated databases. Each database represents a snapshot of the codebase.    Use this option when you want to upload databases that were generated by the CodeQL CLI (or the QL command-line tools).   The version of the command line used to generate the database   must be the same version as LGTM Enterprise.   With any of these options, you can also include an &#x60;lgtm.yml&#x60; in the body of the request to [customize extraction](https://lgtm.com/help/lgtm/customizing-code-extraction). 
     * @param repository The URL of the repository to analyze. LGTM tests this against the [repository providers](https://lgtm.com/admin/help/adding-repository-providers) defined for the system. If it doesn&#39;t match any of them, the request fails. (required)
     * @param language Optional, a [language code](https://lgtm.com/help/lgtm/analysis-faqs#which-languages-are-supported) to specify which language to analyze. To request the analysis of more than one language, specify a query parameter for each language. By default, LGTM tries to analyze all supported languages.  (optional)
     * @param mode The analysis mode of the new project. When set to &#x60;full&#x60; all commits of the project are analyzed; when set to &#x60;sparse&#x60; the latest commit of the project is analyzed periodically; when set to &#x60;upload&#x60;,  no automatic analysis is performed, instead externally-generated databases should be uploaded. For new projects the default value is &#x60;full&#x60;. The &#x60;mode&#x60; parameter cannot be used to change the analysis mode of existing projects. Therefore, for existing projects, it should either be left blank or set to match the analysis mode of the project.  (optional)
     * @param commit Required when &#x60;mode&#x3D;upload&#x60;, specify the identifier of the commit used to generate the database. (optional)
     * @param date Optional when &#x60;mode&#x3D;upload&#x60;, specify the date and time of the commit used to generate the database; defaults to the current time. (optional)
     * @param workerLabel Optional, any [labels](https://lgtm.com/admin/help/defining-worker-labels) required by workers to analyze this project.  To specify more than one label, repeat the query parameter.  (optional)
     * @param body An optional [lgtm.yml project configuration](https://lgtm.com/help/lgtm/lgtm.yml-configuration-file) file to customize the LGTM code analysis and results display for the project. (optional)
     * @return Operation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted. Analysis attempts triggered or upload URLs returned. </td><td>  -  </td></tr>
     </table>
     */
    public Operation addProject(URI repository, List<String> language, String mode, String commit, OffsetDateTime date, List<String> workerLabel, String body) throws ApiException {
        ApiResponse<Operation> localVarResp = addProjectWithHttpInfo(repository, language, mode, commit, date, workerLabel, body);
        return localVarResp.getData();
    }

    /**
     * Add a project to LGTM
     * LGTM administrators can add a new project to LGTM by providing a repository URL. By default, LGTM tries to build and analyze the project in the same way as for projects added through the user interface. If at least one language is successfully analyzed, and the repository doesn&#39;t already exist on LGTM, a new project is created. If the project already exists but your API call triggers a successful analysis  of additional languages, LGTM adds those languages to the project.  You can configure how LGTM processes the project using query parameters to:   * Specify the languages to analyze.   * Create a new project in [sparse mode](https://help.semmle.com/lgtm-enterprise/user/help/analysis-faqs.html#what-is-sparse-analysis).   * Create a new project in [upload mode](https://help.semmle.com/lgtm-enterprise/user/help/analysis-faqs.html#what-is-upload-analysis) to analyze externally-generated databases. Each database represents a snapshot of the codebase.    Use this option when you want to upload databases that were generated by the CodeQL CLI (or the QL command-line tools).   The version of the command line used to generate the database   must be the same version as LGTM Enterprise.   With any of these options, you can also include an &#x60;lgtm.yml&#x60; in the body of the request to [customize extraction](https://lgtm.com/help/lgtm/customizing-code-extraction). 
     * @param repository The URL of the repository to analyze. LGTM tests this against the [repository providers](https://lgtm.com/admin/help/adding-repository-providers) defined for the system. If it doesn&#39;t match any of them, the request fails. (required)
     * @param language Optional, a [language code](https://lgtm.com/help/lgtm/analysis-faqs#which-languages-are-supported) to specify which language to analyze. To request the analysis of more than one language, specify a query parameter for each language. By default, LGTM tries to analyze all supported languages.  (optional)
     * @param mode The analysis mode of the new project. When set to &#x60;full&#x60; all commits of the project are analyzed; when set to &#x60;sparse&#x60; the latest commit of the project is analyzed periodically; when set to &#x60;upload&#x60;,  no automatic analysis is performed, instead externally-generated databases should be uploaded. For new projects the default value is &#x60;full&#x60;. The &#x60;mode&#x60; parameter cannot be used to change the analysis mode of existing projects. Therefore, for existing projects, it should either be left blank or set to match the analysis mode of the project.  (optional)
     * @param commit Required when &#x60;mode&#x3D;upload&#x60;, specify the identifier of the commit used to generate the database. (optional)
     * @param date Optional when &#x60;mode&#x3D;upload&#x60;, specify the date and time of the commit used to generate the database; defaults to the current time. (optional)
     * @param workerLabel Optional, any [labels](https://lgtm.com/admin/help/defining-worker-labels) required by workers to analyze this project.  To specify more than one label, repeat the query parameter.  (optional)
     * @param body An optional [lgtm.yml project configuration](https://lgtm.com/help/lgtm/lgtm.yml-configuration-file) file to customize the LGTM code analysis and results display for the project. (optional)
     * @return ApiResponse&lt;Operation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted. Analysis attempts triggered or upload URLs returned. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Operation> addProjectWithHttpInfo(URI repository, List<String> language, String mode, String commit, OffsetDateTime date, List<String> workerLabel, String body) throws ApiException {
        okhttp3.Call localVarCall = addProjectValidateBeforeCall(repository, language, mode, commit, date, workerLabel, body, null);
        Type localVarReturnType = new TypeToken<Operation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add a project to LGTM (asynchronously)
     * LGTM administrators can add a new project to LGTM by providing a repository URL. By default, LGTM tries to build and analyze the project in the same way as for projects added through the user interface. If at least one language is successfully analyzed, and the repository doesn&#39;t already exist on LGTM, a new project is created. If the project already exists but your API call triggers a successful analysis  of additional languages, LGTM adds those languages to the project.  You can configure how LGTM processes the project using query parameters to:   * Specify the languages to analyze.   * Create a new project in [sparse mode](https://help.semmle.com/lgtm-enterprise/user/help/analysis-faqs.html#what-is-sparse-analysis).   * Create a new project in [upload mode](https://help.semmle.com/lgtm-enterprise/user/help/analysis-faqs.html#what-is-upload-analysis) to analyze externally-generated databases. Each database represents a snapshot of the codebase.    Use this option when you want to upload databases that were generated by the CodeQL CLI (or the QL command-line tools).   The version of the command line used to generate the database   must be the same version as LGTM Enterprise.   With any of these options, you can also include an &#x60;lgtm.yml&#x60; in the body of the request to [customize extraction](https://lgtm.com/help/lgtm/customizing-code-extraction). 
     * @param repository The URL of the repository to analyze. LGTM tests this against the [repository providers](https://lgtm.com/admin/help/adding-repository-providers) defined for the system. If it doesn&#39;t match any of them, the request fails. (required)
     * @param language Optional, a [language code](https://lgtm.com/help/lgtm/analysis-faqs#which-languages-are-supported) to specify which language to analyze. To request the analysis of more than one language, specify a query parameter for each language. By default, LGTM tries to analyze all supported languages.  (optional)
     * @param mode The analysis mode of the new project. When set to &#x60;full&#x60; all commits of the project are analyzed; when set to &#x60;sparse&#x60; the latest commit of the project is analyzed periodically; when set to &#x60;upload&#x60;,  no automatic analysis is performed, instead externally-generated databases should be uploaded. For new projects the default value is &#x60;full&#x60;. The &#x60;mode&#x60; parameter cannot be used to change the analysis mode of existing projects. Therefore, for existing projects, it should either be left blank or set to match the analysis mode of the project.  (optional)
     * @param commit Required when &#x60;mode&#x3D;upload&#x60;, specify the identifier of the commit used to generate the database. (optional)
     * @param date Optional when &#x60;mode&#x3D;upload&#x60;, specify the date and time of the commit used to generate the database; defaults to the current time. (optional)
     * @param workerLabel Optional, any [labels](https://lgtm.com/admin/help/defining-worker-labels) required by workers to analyze this project.  To specify more than one label, repeat the query parameter.  (optional)
     * @param body An optional [lgtm.yml project configuration](https://lgtm.com/help/lgtm/lgtm.yml-configuration-file) file to customize the LGTM code analysis and results display for the project. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted. Analysis attempts triggered or upload URLs returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addProjectAsync(URI repository, List<String> language, String mode, String commit, OffsetDateTime date, List<String> workerLabel, String body, final ApiCallback<Operation> _callback) throws ApiException {

        okhttp3.Call localVarCall = addProjectValidateBeforeCall(repository, language, mode, commit, date, workerLabel, body, _callback);
        Type localVarReturnType = new TypeToken<Operation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteProject
     * @param projectId The numeric project identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. Details of the deleted project returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteProjectCall(Long projectId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/projects/{project-id}"
            .replace("{" + "project-id" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "access-token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteProjectValidateBeforeCall(Long projectId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling deleteProject(Async)");
        }

        return deleteProjectCall(projectId, _callback);

    }

    /**
     * Delete project by numeric identifier
     * Delete a project with a particular numeric project identifier. In addition to access to the project, administrative access to LGTM or the LGTM Enterprise instance is required to delete projects. 
     * @param projectId The numeric project identifier (required)
     * @return ProjectDetails
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. Details of the deleted project returned. </td><td>  -  </td></tr>
     </table>
     */
    public ProjectDetails deleteProject(Long projectId) throws ApiException {
        ApiResponse<ProjectDetails> localVarResp = deleteProjectWithHttpInfo(projectId);
        return localVarResp.getData();
    }

    /**
     * Delete project by numeric identifier
     * Delete a project with a particular numeric project identifier. In addition to access to the project, administrative access to LGTM or the LGTM Enterprise instance is required to delete projects. 
     * @param projectId The numeric project identifier (required)
     * @return ApiResponse&lt;ProjectDetails&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. Details of the deleted project returned. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProjectDetails> deleteProjectWithHttpInfo(Long projectId) throws ApiException {
        okhttp3.Call localVarCall = deleteProjectValidateBeforeCall(projectId, null);
        Type localVarReturnType = new TypeToken<ProjectDetails>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete project by numeric identifier (asynchronously)
     * Delete a project with a particular numeric project identifier. In addition to access to the project, administrative access to LGTM or the LGTM Enterprise instance is required to delete projects. 
     * @param projectId The numeric project identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. Details of the deleted project returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteProjectAsync(Long projectId, final ApiCallback<ProjectDetails> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteProjectValidateBeforeCall(projectId, _callback);
        Type localVarReturnType = new TypeToken<ProjectDetails>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getProject
     * @param projectId The numeric project identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. Requested data returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProjectCall(Long projectId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/projects/{project-id}"
            .replace("{" + "project-id" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "access-token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProjectValidateBeforeCall(Long projectId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getProject(Async)");
        }

        return getProjectCall(projectId, _callback);

    }

    /**
     * Get project by numeric identifier
     * Get the latest summary for a specific project using the numeric project identifier.  To find the LGTM identifier for a project, list all projects using the &#x60;/projects&#x60;  endpoint and look up the project by name. Alternatively, use the &#x60;/projects/{provider}/{org}/{name}&#x60; endpoint. If you have administration access, the project identifier is also displayed in  the administration page for the project. 
     * @param projectId The numeric project identifier (required)
     * @return ProjectDetails
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. Requested data returned. </td><td>  -  </td></tr>
     </table>
     */
    public ProjectDetails getProject(Long projectId) throws ApiException {
        ApiResponse<ProjectDetails> localVarResp = getProjectWithHttpInfo(projectId);
        return localVarResp.getData();
    }

    /**
     * Get project by numeric identifier
     * Get the latest summary for a specific project using the numeric project identifier.  To find the LGTM identifier for a project, list all projects using the &#x60;/projects&#x60;  endpoint and look up the project by name. Alternatively, use the &#x60;/projects/{provider}/{org}/{name}&#x60; endpoint. If you have administration access, the project identifier is also displayed in  the administration page for the project. 
     * @param projectId The numeric project identifier (required)
     * @return ApiResponse&lt;ProjectDetails&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. Requested data returned. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProjectDetails> getProjectWithHttpInfo(Long projectId) throws ApiException {
        okhttp3.Call localVarCall = getProjectValidateBeforeCall(projectId, null);
        Type localVarReturnType = new TypeToken<ProjectDetails>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get project by numeric identifier (asynchronously)
     * Get the latest summary for a specific project using the numeric project identifier.  To find the LGTM identifier for a project, list all projects using the &#x60;/projects&#x60;  endpoint and look up the project by name. Alternatively, use the &#x60;/projects/{provider}/{org}/{name}&#x60; endpoint. If you have administration access, the project identifier is also displayed in  the administration page for the project. 
     * @param projectId The numeric project identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. Requested data returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProjectAsync(Long projectId, final ApiCallback<ProjectDetails> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProjectValidateBeforeCall(projectId, _callback);
        Type localVarReturnType = new TypeToken<ProjectDetails>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getProjectByUrlIdentifier
     * @param provider The first part of the URL identifier of a project, which represents the repository host. (required)
     * @param org The second part of the URL identifier of a project, the organization. (required)
     * @param name The third part of the URL identifier of a project, the repository name. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. Requested data returned. </td><td>  -  </td></tr>
        <tr><td> 307 </td><td> Redirect. The project has been renamed. Request redirected to numeric identifier for the project.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProjectByUrlIdentifierCall(String provider, String org, String name, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/projects/{provider}/{org}/{name}"
            .replace("{" + "provider" + "}", localVarApiClient.escapeString(provider.toString()))
            .replace("{" + "org" + "}", localVarApiClient.escapeString(org.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "access-token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProjectByUrlIdentifierValidateBeforeCall(String provider, String org, String name, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'provider' is set
        if (provider == null) {
            throw new ApiException("Missing the required parameter 'provider' when calling getProjectByUrlIdentifier(Async)");
        }

        // verify the required parameter 'org' is set
        if (org == null) {
            throw new ApiException("Missing the required parameter 'org' when calling getProjectByUrlIdentifier(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getProjectByUrlIdentifier(Async)");
        }

        return getProjectByUrlIdentifierCall(provider, org, name, _callback);

    }

    /**
     * Get project by URL identifier
     * Get the latest summary for a specific project using the project&#39;s URL identifier &#x60;{provider}/{org}/{name}&#x60;.  To find the URL identifier for a project, view the project overview page in LGTM. The URL identifier follows after &#x60;/projects&#x60;. For example, for a project with the URL &#x60;https://lgtm.example.com/projects/g/apache/commons-io&#x60; the URL identifier is &#x60;g/apache/commons-io&#x60;. In the example, &#x60;g&#x60; represents the &#x60;provider&#x60; (repository host), &#x60;apache&#x60; is the &#x60;organization&#x60; and &#x60;commons-io&#x60; is the &#x60;name&#x60; of the repository. 
     * @param provider The first part of the URL identifier of a project, which represents the repository host. (required)
     * @param org The second part of the URL identifier of a project, the organization. (required)
     * @param name The third part of the URL identifier of a project, the repository name. (required)
     * @return ProjectDetails
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. Requested data returned. </td><td>  -  </td></tr>
        <tr><td> 307 </td><td> Redirect. The project has been renamed. Request redirected to numeric identifier for the project.  </td><td>  -  </td></tr>
     </table>
     */
    public ProjectDetails getProjectByUrlIdentifier(String provider, String org, String name) throws ApiException {
        ApiResponse<ProjectDetails> localVarResp = getProjectByUrlIdentifierWithHttpInfo(provider, org, name);
        return localVarResp.getData();
    }

    /**
     * Get project by URL identifier
     * Get the latest summary for a specific project using the project&#39;s URL identifier &#x60;{provider}/{org}/{name}&#x60;.  To find the URL identifier for a project, view the project overview page in LGTM. The URL identifier follows after &#x60;/projects&#x60;. For example, for a project with the URL &#x60;https://lgtm.example.com/projects/g/apache/commons-io&#x60; the URL identifier is &#x60;g/apache/commons-io&#x60;. In the example, &#x60;g&#x60; represents the &#x60;provider&#x60; (repository host), &#x60;apache&#x60; is the &#x60;organization&#x60; and &#x60;commons-io&#x60; is the &#x60;name&#x60; of the repository. 
     * @param provider The first part of the URL identifier of a project, which represents the repository host. (required)
     * @param org The second part of the URL identifier of a project, the organization. (required)
     * @param name The third part of the URL identifier of a project, the repository name. (required)
     * @return ApiResponse&lt;ProjectDetails&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. Requested data returned. </td><td>  -  </td></tr>
        <tr><td> 307 </td><td> Redirect. The project has been renamed. Request redirected to numeric identifier for the project.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProjectDetails> getProjectByUrlIdentifierWithHttpInfo(String provider, String org, String name) throws ApiException {
        okhttp3.Call localVarCall = getProjectByUrlIdentifierValidateBeforeCall(provider, org, name, null);
        Type localVarReturnType = new TypeToken<ProjectDetails>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get project by URL identifier (asynchronously)
     * Get the latest summary for a specific project using the project&#39;s URL identifier &#x60;{provider}/{org}/{name}&#x60;.  To find the URL identifier for a project, view the project overview page in LGTM. The URL identifier follows after &#x60;/projects&#x60;. For example, for a project with the URL &#x60;https://lgtm.example.com/projects/g/apache/commons-io&#x60; the URL identifier is &#x60;g/apache/commons-io&#x60;. In the example, &#x60;g&#x60; represents the &#x60;provider&#x60; (repository host), &#x60;apache&#x60; is the &#x60;organization&#x60; and &#x60;commons-io&#x60; is the &#x60;name&#x60; of the repository. 
     * @param provider The first part of the URL identifier of a project, which represents the repository host. (required)
     * @param org The second part of the URL identifier of a project, the organization. (required)
     * @param name The third part of the URL identifier of a project, the repository name. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. Requested data returned. </td><td>  -  </td></tr>
        <tr><td> 307 </td><td> Redirect. The project has been renamed. Request redirected to numeric identifier for the project.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProjectByUrlIdentifierAsync(String provider, String org, String name, final ApiCallback<ProjectDetails> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProjectByUrlIdentifierValidateBeforeCall(provider, org, name, _callback);
        Type localVarReturnType = new TypeToken<ProjectDetails>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getProjectConfig
     * @param projectId The numeric project identifier (required)
     * @param source The type of project configuration to retrieve. If this parameter isn&#39;t specified, the request retrieves the effective configuration. That is, the configuration that is actually applied to the project, which may be from: * the repository * the administrator-set, project configuration * the global configuration.  If you do specify this value, it must be one of:   * &#x60;repository&#x60; to retrieve the configuration specified by a YAML file in the repository. A 404 status is returned if there is no repository configuration.    * &#x60;administrator&#x60; to retrieve the administrator-set, project configuration. A 404 status is returned if there is no administrator configuration.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. Requested data returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Only YAML is supported. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProjectConfigCall(Long projectId, String source, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/projects/{project-id}/settings/analysis-configuration"
            .replace("{" + "project-id" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (source != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("source", source));
        }

        final String[] localVarAccepts = {
            "application/x-yaml",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "access-token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProjectConfigValidateBeforeCall(Long projectId, String source, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getProjectConfig(Async)");
        }

        return getProjectConfigCall(projectId, source, _callback);

    }

    /**
     * Get configuration for a project identified by numeric identifier
     * Get the latest configuration for a specific project using the numeric project identifier.
     * @param projectId The numeric project identifier (required)
     * @param source The type of project configuration to retrieve. If this parameter isn&#39;t specified, the request retrieves the effective configuration. That is, the configuration that is actually applied to the project, which may be from: * the repository * the administrator-set, project configuration * the global configuration.  If you do specify this value, it must be one of:   * &#x60;repository&#x60; to retrieve the configuration specified by a YAML file in the repository. A 404 status is returned if there is no repository configuration.    * &#x60;administrator&#x60; to retrieve the administrator-set, project configuration. A 404 status is returned if there is no administrator configuration.  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. Requested data returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Only YAML is supported. </td><td>  -  </td></tr>
     </table>
     */
    public Object getProjectConfig(Long projectId, String source) throws ApiException {
        ApiResponse<Object> localVarResp = getProjectConfigWithHttpInfo(projectId, source);
        return localVarResp.getData();
    }

    /**
     * Get configuration for a project identified by numeric identifier
     * Get the latest configuration for a specific project using the numeric project identifier.
     * @param projectId The numeric project identifier (required)
     * @param source The type of project configuration to retrieve. If this parameter isn&#39;t specified, the request retrieves the effective configuration. That is, the configuration that is actually applied to the project, which may be from: * the repository * the administrator-set, project configuration * the global configuration.  If you do specify this value, it must be one of:   * &#x60;repository&#x60; to retrieve the configuration specified by a YAML file in the repository. A 404 status is returned if there is no repository configuration.    * &#x60;administrator&#x60; to retrieve the administrator-set, project configuration. A 404 status is returned if there is no administrator configuration.  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. Requested data returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Only YAML is supported. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getProjectConfigWithHttpInfo(Long projectId, String source) throws ApiException {
        okhttp3.Call localVarCall = getProjectConfigValidateBeforeCall(projectId, source, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get configuration for a project identified by numeric identifier (asynchronously)
     * Get the latest configuration for a specific project using the numeric project identifier.
     * @param projectId The numeric project identifier (required)
     * @param source The type of project configuration to retrieve. If this parameter isn&#39;t specified, the request retrieves the effective configuration. That is, the configuration that is actually applied to the project, which may be from: * the repository * the administrator-set, project configuration * the global configuration.  If you do specify this value, it must be one of:   * &#x60;repository&#x60; to retrieve the configuration specified by a YAML file in the repository. A 404 status is returned if there is no repository configuration.    * &#x60;administrator&#x60; to retrieve the administrator-set, project configuration. A 404 status is returned if there is no administrator configuration.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. Requested data returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Only YAML is supported. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProjectConfigAsync(Long projectId, String source, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProjectConfigValidateBeforeCall(projectId, source, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getProjects
     * @param limit The maximum number of projects to return in each response (1-100). (optional, default to 100)
     * @param start An opaque identifier generated by the API. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. Requested data returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProjectsCall(Integer limit, String start, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/projects";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "access-token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProjectsValidateBeforeCall(Integer limit, String start, final ApiCallback _callback) throws ApiException {
        return getProjectsCall(limit, start, _callback);

    }

    /**
     * List projects
     * List all the projects the current user has authorization to view.   A maximum of 100 projects are returned in each response. When further results are available, the response includes the URL you need to request the next page of results.  Use the optional parameter, &#x60;limit&#x60;, to change the number of results reported in each response (range of 1&amp;mdash;100). If you supply an invalid value for this  parameter, the default value of 100 is used.  When more than one page of results is available, each response includes a &#x60;nextPageUrl&#x60; response parameter. You can use this URL to request the next page of results. The &#x60;nextPageUrl&#x60; includes an automatically generated &#x60;start&#x60; parameter, which specifies the projects to return in the next page of results. 
     * @param limit The maximum number of projects to return in each response (1-100). (optional, default to 100)
     * @param start An opaque identifier generated by the API. (optional)
     * @return ProjectList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. Requested data returned. </td><td>  -  </td></tr>
     </table>
     */
    public ProjectList getProjects(Integer limit, String start) throws ApiException {
        ApiResponse<ProjectList> localVarResp = getProjectsWithHttpInfo(limit, start);
        return localVarResp.getData();
    }

    /**
     * List projects
     * List all the projects the current user has authorization to view.   A maximum of 100 projects are returned in each response. When further results are available, the response includes the URL you need to request the next page of results.  Use the optional parameter, &#x60;limit&#x60;, to change the number of results reported in each response (range of 1&amp;mdash;100). If you supply an invalid value for this  parameter, the default value of 100 is used.  When more than one page of results is available, each response includes a &#x60;nextPageUrl&#x60; response parameter. You can use this URL to request the next page of results. The &#x60;nextPageUrl&#x60; includes an automatically generated &#x60;start&#x60; parameter, which specifies the projects to return in the next page of results. 
     * @param limit The maximum number of projects to return in each response (1-100). (optional, default to 100)
     * @param start An opaque identifier generated by the API. (optional)
     * @return ApiResponse&lt;ProjectList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. Requested data returned. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProjectList> getProjectsWithHttpInfo(Integer limit, String start) throws ApiException {
        okhttp3.Call localVarCall = getProjectsValidateBeforeCall(limit, start, null);
        Type localVarReturnType = new TypeToken<ProjectList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List projects (asynchronously)
     * List all the projects the current user has authorization to view.   A maximum of 100 projects are returned in each response. When further results are available, the response includes the URL you need to request the next page of results.  Use the optional parameter, &#x60;limit&#x60;, to change the number of results reported in each response (range of 1&amp;mdash;100). If you supply an invalid value for this  parameter, the default value of 100 is used.  When more than one page of results is available, each response includes a &#x60;nextPageUrl&#x60; response parameter. You can use this URL to request the next page of results. The &#x60;nextPageUrl&#x60; includes an automatically generated &#x60;start&#x60; parameter, which specifies the projects to return in the next page of results. 
     * @param limit The maximum number of projects to return in each response (1-100). (optional, default to 100)
     * @param start An opaque identifier generated by the API. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. Requested data returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProjectsAsync(Integer limit, String start, final ApiCallback<ProjectList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProjectsValidateBeforeCall(limit, start, _callback);
        Type localVarReturnType = new TypeToken<ProjectList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setProjectConfig
     * @param projectId The numeric project identifier (required)
     * @param body The project configuration to set. Note that this only sets the administrator project configuration. It can be overridden by the repository configuration. In addition to access to the project, administrative access to LGTM or the LGTM Enterprise instance is required to set administrator project configurations.  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. The new effective project configuration is returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setProjectConfigCall(Long projectId, String body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/projects/{project-id}/settings/analysis-configuration"
            .replace("{" + "project-id" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/x-yaml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-yaml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "access-token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setProjectConfigValidateBeforeCall(Long projectId, String body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling setProjectConfig(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling setProjectConfig(Async)");
        }

        return setProjectConfigCall(projectId, body, _callback);

    }

    /**
     * Set the administrator configuration for a project identified by numeric identifier
     * Set the administrator configuration for a specific project using the numeric project identifier.
     * @param projectId The numeric project identifier (required)
     * @param body The project configuration to set. Note that this only sets the administrator project configuration. It can be overridden by the repository configuration. In addition to access to the project, administrative access to LGTM or the LGTM Enterprise instance is required to set administrator project configurations.  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. The new effective project configuration is returned. </td><td>  -  </td></tr>
     </table>
     */
    public Object setProjectConfig(Long projectId, String body) throws ApiException {
        ApiResponse<Object> localVarResp = setProjectConfigWithHttpInfo(projectId, body);
        return localVarResp.getData();
    }

    /**
     * Set the administrator configuration for a project identified by numeric identifier
     * Set the administrator configuration for a specific project using the numeric project identifier.
     * @param projectId The numeric project identifier (required)
     * @param body The project configuration to set. Note that this only sets the administrator project configuration. It can be overridden by the repository configuration. In addition to access to the project, administrative access to LGTM or the LGTM Enterprise instance is required to set administrator project configurations.  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. The new effective project configuration is returned. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> setProjectConfigWithHttpInfo(Long projectId, String body) throws ApiException {
        okhttp3.Call localVarCall = setProjectConfigValidateBeforeCall(projectId, body, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Set the administrator configuration for a project identified by numeric identifier (asynchronously)
     * Set the administrator configuration for a specific project using the numeric project identifier.
     * @param projectId The numeric project identifier (required)
     * @param body The project configuration to set. Note that this only sets the administrator project configuration. It can be overridden by the repository configuration. In addition to access to the project, administrative access to LGTM or the LGTM Enterprise instance is required to set administrator project configurations.  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. The new effective project configuration is returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setProjectConfigAsync(Long projectId, String body, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = setProjectConfigValidateBeforeCall(projectId, body, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
