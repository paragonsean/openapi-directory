/*
 * LGTM API specification
 * The REST API for LGTM provides data so that you can customize how you integrate LGTM analysis into your workflow. It includes the following resources:   * `/` ([API root](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-API-root))&mdash;get version information or download the specification in OpenAPI format.   * `/projects` ([Projects](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Projects))&mdash;list projects, get a summary of the current status for a project, or add new projects.   * `/analyses` ([Analyses](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Analyses))&mdash;get a summary of results, download all the alerts, or trigger analysis for a specific commit.   * `/codereviews` ([Code reviews](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Code-reviews))&mdash;trigger code review for a patch, and view the results.   * `/operations` ([Operations](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Operations))&mdash;get information about long-running tasks, for example, analyses or code reviews that you've requested.   * `/snapshots` ([Snapshots](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Snapshots))&mdash;download and upload databases representing a snapshot of a codebase.   * `/queryjobs` ([Query jobs](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Query-jobs))&mdash;submit queries to evaluate against existing projects, and download their results.   * `/system` ([System](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-System))&mdash;get information on the health or usage of the system.  For an overview and getting started topics, see [API for LGTM](https://lgtm.com/help/lgtm/api/api-for-lgtm). 
 *
 * The version of the OpenAPI document: v1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CodeReview;
import java.io.File;
import org.openapitools.client.model.Operation;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CodeReviewsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CodeReviewsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CodeReviewsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getCodeReview
     * @param reviewId The identifier for the review (from the &#x60;task-result-url&#x60;). (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. Requested data returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCodeReviewCall(String reviewId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/codereviews/{review-id}"
            .replace("{" + "review-id" + "}", localVarApiClient.escapeString(reviewId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "access-token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCodeReviewValidateBeforeCall(String reviewId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'reviewId' is set
        if (reviewId == null) {
            throw new ApiException("Missing the required parameter 'reviewId' when calling getCodeReview(Async)");
        }

        return getCodeReviewCall(reviewId, _callback);

    }

    /**
     * Get results of code review
     * Get the results of a code review using the review identifier for the task.  When you request a code review, the response includes a task result URL of the form: &#x60;/codereviews/{review-id}&#x60;.  This endpoint reports the results of a complete code review, or the status of a review  that&#39;s still in progress. 
     * @param reviewId The identifier for the review (from the &#x60;task-result-url&#x60;). (required)
     * @return List&lt;CodeReview&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. Requested data returned. </td><td>  -  </td></tr>
     </table>
     */
    public List<CodeReview> getCodeReview(String reviewId) throws ApiException {
        ApiResponse<List<CodeReview>> localVarResp = getCodeReviewWithHttpInfo(reviewId);
        return localVarResp.getData();
    }

    /**
     * Get results of code review
     * Get the results of a code review using the review identifier for the task.  When you request a code review, the response includes a task result URL of the form: &#x60;/codereviews/{review-id}&#x60;.  This endpoint reports the results of a complete code review, or the status of a review  that&#39;s still in progress. 
     * @param reviewId The identifier for the review (from the &#x60;task-result-url&#x60;). (required)
     * @return ApiResponse&lt;List&lt;CodeReview&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. Requested data returned. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<CodeReview>> getCodeReviewWithHttpInfo(String reviewId) throws ApiException {
        okhttp3.Call localVarCall = getCodeReviewValidateBeforeCall(reviewId, null);
        Type localVarReturnType = new TypeToken<List<CodeReview>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get results of code review (asynchronously)
     * Get the results of a code review using the review identifier for the task.  When you request a code review, the response includes a task result URL of the form: &#x60;/codereviews/{review-id}&#x60;.  This endpoint reports the results of a complete code review, or the status of a review  that&#39;s still in progress. 
     * @param reviewId The identifier for the review (from the &#x60;task-result-url&#x60;). (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. Requested data returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCodeReviewAsync(String reviewId, final ApiCallback<List<CodeReview>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCodeReviewValidateBeforeCall(reviewId, _callback);
        Type localVarReturnType = new TypeToken<List<CodeReview>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for requestReview
     * @param projectId The numeric project identifier. (required)
     * @param base The identifier for the base commit. (required)
     * @param externalId Your reference number for the code review. (required)
     * @param body The patch containing the code changes for review. (required)
     * @param reviewUrl An informative back-link to an external system. (optional)
     * @param callbackUrl The callback URL for LGTM to post to on completion of the review. When the code review is complete, the API sends an HTTP POST request to the callback URL with the result of the code review in the request body. The code review results in the request body are identical to the results accessed through the [&#x60;/codereviews/{review-id}&#x60;](https://lgtm.com/help/lgtm/api/api-v1#opIdgetCodeReview) end-point. If you specify a &#x60;callback-secret&#x60;, the request also includes an &#x60;x-lgtm-signature&#x60; header with a digital signature of the request&#39;s contents.  (optional)
     * @param callbackSecret The &#x60;callback-secret&#x60; is used to compute a signature which is included in the &#x60;x-lgtm-signature&#x60; header of the callback response. The receiver of the callback can check the validity of the response by computing the signature using HMAC-SHA1 and verifying that it matches the &#x60;x-lgtm-signature&#x60; header value. The HMAC algorithm requires byte sequences as inputs for both the secret and the message. The callback secret string must be converted to bytes using UTF-8 encoding. The response body should ideally be read as a plain byte sequence. Conversion to, for example a JSON object, and back to a byte sequence might change the formatting, and would invalidate the signature.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted. Code review triggered. Tracking data returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call requestReviewCall(Long projectId, String base, Integer externalId, File body, String reviewUrl, String callbackUrl, String callbackSecret, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/codereviews/{project-id}"
            .replace("{" + "project-id" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (base != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("base", base));
        }

        if (externalId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("external-id", externalId));
        }

        if (reviewUrl != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("review-url", reviewUrl));
        }

        if (callbackUrl != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("callback-url", callbackUrl));
        }

        if (callbackSecret != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("callback-secret", callbackSecret));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/octet-stream"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "access-token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call requestReviewValidateBeforeCall(Long projectId, String base, Integer externalId, File body, String reviewUrl, String callbackUrl, String callbackSecret, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling requestReview(Async)");
        }

        // verify the required parameter 'base' is set
        if (base == null) {
            throw new ApiException("Missing the required parameter 'base' when calling requestReview(Async)");
        }

        // verify the required parameter 'externalId' is set
        if (externalId == null) {
            throw new ApiException("Missing the required parameter 'externalId' when calling requestReview(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling requestReview(Async)");
        }

        return requestReviewCall(projectId, base, externalId, body, reviewUrl, callbackUrl, callbackSecret, _callback);

    }

    /**
     * Run code review for a patch
     * Trigger the code review of a patch. This is available for projects with Git repositories.  Your request must include:    * Identifier for the base commit   * Patch generated using &#x60;git diff --binary&#x60; (see [git diff](https://git-scm.com/docs/git-diff))   * Header &#x60;Content-Type: application/octet-stream&#x60;   * For both LGTM.com and LGTM Enterprise, an access token with the &#x60;codereviews:write&#x60; scope  Note that if you make a request using Curl, you&#39;ll also need to add &#x60;--data-binary&#x60; to the request to ensure that the patch you supply in the body is sent with newlines unchanged. You can track the progress of the review using the task result URL returned on creation of the task, or by calling the &#x60;/operations&#x60; endpoint with the operations identifier returned by the request. For more information, see [Get operation status](https://lgtm.com/help/lgtm/api/api-v1#opIdgetOperation). Alternatively, if you supply a callback URL you&#39;ll get a post-back automatically on completion of the review.  When the review is complete, you can access the results using the task result URL. 
     * @param projectId The numeric project identifier. (required)
     * @param base The identifier for the base commit. (required)
     * @param externalId Your reference number for the code review. (required)
     * @param body The patch containing the code changes for review. (required)
     * @param reviewUrl An informative back-link to an external system. (optional)
     * @param callbackUrl The callback URL for LGTM to post to on completion of the review. When the code review is complete, the API sends an HTTP POST request to the callback URL with the result of the code review in the request body. The code review results in the request body are identical to the results accessed through the [&#x60;/codereviews/{review-id}&#x60;](https://lgtm.com/help/lgtm/api/api-v1#opIdgetCodeReview) end-point. If you specify a &#x60;callback-secret&#x60;, the request also includes an &#x60;x-lgtm-signature&#x60; header with a digital signature of the request&#39;s contents.  (optional)
     * @param callbackSecret The &#x60;callback-secret&#x60; is used to compute a signature which is included in the &#x60;x-lgtm-signature&#x60; header of the callback response. The receiver of the callback can check the validity of the response by computing the signature using HMAC-SHA1 and verifying that it matches the &#x60;x-lgtm-signature&#x60; header value. The HMAC algorithm requires byte sequences as inputs for both the secret and the message. The callback secret string must be converted to bytes using UTF-8 encoding. The response body should ideally be read as a plain byte sequence. Conversion to, for example a JSON object, and back to a byte sequence might change the formatting, and would invalidate the signature.  (optional)
     * @return Operation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted. Code review triggered. Tracking data returned. </td><td>  -  </td></tr>
     </table>
     */
    public Operation requestReview(Long projectId, String base, Integer externalId, File body, String reviewUrl, String callbackUrl, String callbackSecret) throws ApiException {
        ApiResponse<Operation> localVarResp = requestReviewWithHttpInfo(projectId, base, externalId, body, reviewUrl, callbackUrl, callbackSecret);
        return localVarResp.getData();
    }

    /**
     * Run code review for a patch
     * Trigger the code review of a patch. This is available for projects with Git repositories.  Your request must include:    * Identifier for the base commit   * Patch generated using &#x60;git diff --binary&#x60; (see [git diff](https://git-scm.com/docs/git-diff))   * Header &#x60;Content-Type: application/octet-stream&#x60;   * For both LGTM.com and LGTM Enterprise, an access token with the &#x60;codereviews:write&#x60; scope  Note that if you make a request using Curl, you&#39;ll also need to add &#x60;--data-binary&#x60; to the request to ensure that the patch you supply in the body is sent with newlines unchanged. You can track the progress of the review using the task result URL returned on creation of the task, or by calling the &#x60;/operations&#x60; endpoint with the operations identifier returned by the request. For more information, see [Get operation status](https://lgtm.com/help/lgtm/api/api-v1#opIdgetOperation). Alternatively, if you supply a callback URL you&#39;ll get a post-back automatically on completion of the review.  When the review is complete, you can access the results using the task result URL. 
     * @param projectId The numeric project identifier. (required)
     * @param base The identifier for the base commit. (required)
     * @param externalId Your reference number for the code review. (required)
     * @param body The patch containing the code changes for review. (required)
     * @param reviewUrl An informative back-link to an external system. (optional)
     * @param callbackUrl The callback URL for LGTM to post to on completion of the review. When the code review is complete, the API sends an HTTP POST request to the callback URL with the result of the code review in the request body. The code review results in the request body are identical to the results accessed through the [&#x60;/codereviews/{review-id}&#x60;](https://lgtm.com/help/lgtm/api/api-v1#opIdgetCodeReview) end-point. If you specify a &#x60;callback-secret&#x60;, the request also includes an &#x60;x-lgtm-signature&#x60; header with a digital signature of the request&#39;s contents.  (optional)
     * @param callbackSecret The &#x60;callback-secret&#x60; is used to compute a signature which is included in the &#x60;x-lgtm-signature&#x60; header of the callback response. The receiver of the callback can check the validity of the response by computing the signature using HMAC-SHA1 and verifying that it matches the &#x60;x-lgtm-signature&#x60; header value. The HMAC algorithm requires byte sequences as inputs for both the secret and the message. The callback secret string must be converted to bytes using UTF-8 encoding. The response body should ideally be read as a plain byte sequence. Conversion to, for example a JSON object, and back to a byte sequence might change the formatting, and would invalidate the signature.  (optional)
     * @return ApiResponse&lt;Operation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted. Code review triggered. Tracking data returned. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Operation> requestReviewWithHttpInfo(Long projectId, String base, Integer externalId, File body, String reviewUrl, String callbackUrl, String callbackSecret) throws ApiException {
        okhttp3.Call localVarCall = requestReviewValidateBeforeCall(projectId, base, externalId, body, reviewUrl, callbackUrl, callbackSecret, null);
        Type localVarReturnType = new TypeToken<Operation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Run code review for a patch (asynchronously)
     * Trigger the code review of a patch. This is available for projects with Git repositories.  Your request must include:    * Identifier for the base commit   * Patch generated using &#x60;git diff --binary&#x60; (see [git diff](https://git-scm.com/docs/git-diff))   * Header &#x60;Content-Type: application/octet-stream&#x60;   * For both LGTM.com and LGTM Enterprise, an access token with the &#x60;codereviews:write&#x60; scope  Note that if you make a request using Curl, you&#39;ll also need to add &#x60;--data-binary&#x60; to the request to ensure that the patch you supply in the body is sent with newlines unchanged. You can track the progress of the review using the task result URL returned on creation of the task, or by calling the &#x60;/operations&#x60; endpoint with the operations identifier returned by the request. For more information, see [Get operation status](https://lgtm.com/help/lgtm/api/api-v1#opIdgetOperation). Alternatively, if you supply a callback URL you&#39;ll get a post-back automatically on completion of the review.  When the review is complete, you can access the results using the task result URL. 
     * @param projectId The numeric project identifier. (required)
     * @param base The identifier for the base commit. (required)
     * @param externalId Your reference number for the code review. (required)
     * @param body The patch containing the code changes for review. (required)
     * @param reviewUrl An informative back-link to an external system. (optional)
     * @param callbackUrl The callback URL for LGTM to post to on completion of the review. When the code review is complete, the API sends an HTTP POST request to the callback URL with the result of the code review in the request body. The code review results in the request body are identical to the results accessed through the [&#x60;/codereviews/{review-id}&#x60;](https://lgtm.com/help/lgtm/api/api-v1#opIdgetCodeReview) end-point. If you specify a &#x60;callback-secret&#x60;, the request also includes an &#x60;x-lgtm-signature&#x60; header with a digital signature of the request&#39;s contents.  (optional)
     * @param callbackSecret The &#x60;callback-secret&#x60; is used to compute a signature which is included in the &#x60;x-lgtm-signature&#x60; header of the callback response. The receiver of the callback can check the validity of the response by computing the signature using HMAC-SHA1 and verifying that it matches the &#x60;x-lgtm-signature&#x60; header value. The HMAC algorithm requires byte sequences as inputs for both the secret and the message. The callback secret string must be converted to bytes using UTF-8 encoding. The response body should ideally be read as a plain byte sequence. Conversion to, for example a JSON object, and back to a byte sequence might change the formatting, and would invalidate the signature.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted. Code review triggered. Tracking data returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call requestReviewAsync(Long projectId, String base, Integer externalId, File body, String reviewUrl, String callbackUrl, String callbackSecret, final ApiCallback<Operation> _callback) throws ApiException {

        okhttp3.Call localVarCall = requestReviewValidateBeforeCall(projectId, base, externalId, body, reviewUrl, callbackUrl, callbackSecret, _callback);
        Type localVarReturnType = new TypeToken<Operation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
