/*
 * LGTM API specification
 * The REST API for LGTM provides data so that you can customize how you integrate LGTM analysis into your workflow. It includes the following resources:   * `/` ([API root](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-API-root))&mdash;get version information or download the specification in OpenAPI format.   * `/projects` ([Projects](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Projects))&mdash;list projects, get a summary of the current status for a project, or add new projects.   * `/analyses` ([Analyses](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Analyses))&mdash;get a summary of results, download all the alerts, or trigger analysis for a specific commit.   * `/codereviews` ([Code reviews](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Code-reviews))&mdash;trigger code review for a patch, and view the results.   * `/operations` ([Operations](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Operations))&mdash;get information about long-running tasks, for example, analyses or code reviews that you've requested.   * `/snapshots` ([Snapshots](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Snapshots))&mdash;download and upload databases representing a snapshot of a codebase.   * `/queryjobs` ([Query jobs](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Query-jobs))&mdash;submit queries to evaluate against existing projects, and download their results.   * `/system` ([System](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-System))&mdash;get information on the health or usage of the system.  For an overview and getting started topics, see [API for LGTM](https://lgtm.com/help/lgtm/api/api-for-lgtm). 
 *
 * The version of the OpenAPI document: v1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;



import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class IssuesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public IssuesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public IssuesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getIssue
     * @param projectId The numeric project identifier. (required)
     * @param alertKey The alert key is generated by LGTM when it posts an issue &#x60;create&#x60; webhook request   to an external system using the [issue tracker Webhook API](https://lgtm.com/admin/help/issuetracker-webhook-api).  This key is an opaque identifier that tracks the alert&#39;s location over time. For example, if a file containing the alert  is modified, the SARIF data will reflect the updated location of the alert.  Note that the key needs to be URL encoded as it may contain characters that are not web-safe.    (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. Requested data returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getIssueCall(Long projectId, String alertKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/issues/{project-id}/{alert-key}"
            .replace("{" + "project-id" + "}", localVarApiClient.escapeString(projectId.toString()))
            .replace("{" + "alert-key" + "}", localVarApiClient.escapeString(alertKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/sarif+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "access-token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getIssueValidateBeforeCall(Long projectId, String alertKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getIssue(Async)");
        }

        // verify the required parameter 'alertKey' is set
        if (alertKey == null) {
            throw new ApiException("Missing the required parameter 'alertKey' when calling getIssue(Async)");
        }

        return getIssueCall(projectId, alertKey, _callback);

    }

    /**
     * Get detailed alert information for an issue
     * Fetch the alert information for an issue in [SARIF](https://lgtm.com/help/lgtm/sarif-results-file) format. 
     * @param projectId The numeric project identifier. (required)
     * @param alertKey The alert key is generated by LGTM when it posts an issue &#x60;create&#x60; webhook request   to an external system using the [issue tracker Webhook API](https://lgtm.com/admin/help/issuetracker-webhook-api).  This key is an opaque identifier that tracks the alert&#39;s location over time. For example, if a file containing the alert  is modified, the SARIF data will reflect the updated location of the alert.  Note that the key needs to be URL encoded as it may contain characters that are not web-safe.    (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. Requested data returned. </td><td>  -  </td></tr>
     </table>
     */
    public Object getIssue(Long projectId, String alertKey) throws ApiException {
        ApiResponse<Object> localVarResp = getIssueWithHttpInfo(projectId, alertKey);
        return localVarResp.getData();
    }

    /**
     * Get detailed alert information for an issue
     * Fetch the alert information for an issue in [SARIF](https://lgtm.com/help/lgtm/sarif-results-file) format. 
     * @param projectId The numeric project identifier. (required)
     * @param alertKey The alert key is generated by LGTM when it posts an issue &#x60;create&#x60; webhook request   to an external system using the [issue tracker Webhook API](https://lgtm.com/admin/help/issuetracker-webhook-api).  This key is an opaque identifier that tracks the alert&#39;s location over time. For example, if a file containing the alert  is modified, the SARIF data will reflect the updated location of the alert.  Note that the key needs to be URL encoded as it may contain characters that are not web-safe.    (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. Requested data returned. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getIssueWithHttpInfo(Long projectId, String alertKey) throws ApiException {
        okhttp3.Call localVarCall = getIssueValidateBeforeCall(projectId, alertKey, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get detailed alert information for an issue (asynchronously)
     * Fetch the alert information for an issue in [SARIF](https://lgtm.com/help/lgtm/sarif-results-file) format. 
     * @param projectId The numeric project identifier. (required)
     * @param alertKey The alert key is generated by LGTM when it posts an issue &#x60;create&#x60; webhook request   to an external system using the [issue tracker Webhook API](https://lgtm.com/admin/help/issuetracker-webhook-api).  This key is an opaque identifier that tracks the alert&#39;s location over time. For example, if a file containing the alert  is modified, the SARIF data will reflect the updated location of the alert.  Note that the key needs to be URL encoded as it may contain characters that are not web-safe.    (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. Requested data returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getIssueAsync(Long projectId, String alertKey, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getIssueValidateBeforeCall(projectId, alertKey, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
