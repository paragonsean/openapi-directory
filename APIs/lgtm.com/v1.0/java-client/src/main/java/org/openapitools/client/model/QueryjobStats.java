/*
 * LGTM API specification
 * The REST API for LGTM provides data so that you can customize how you integrate LGTM analysis into your workflow. It includes the following resources:   * `/` ([API root](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-API-root))&mdash;get version information or download the specification in OpenAPI format.   * `/projects` ([Projects](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Projects))&mdash;list projects, get a summary of the current status for a project, or add new projects.   * `/analyses` ([Analyses](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Analyses))&mdash;get a summary of results, download all the alerts, or trigger analysis for a specific commit.   * `/codereviews` ([Code reviews](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Code-reviews))&mdash;trigger code review for a patch, and view the results.   * `/operations` ([Operations](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Operations))&mdash;get information about long-running tasks, for example, analyses or code reviews that you've requested.   * `/snapshots` ([Snapshots](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Snapshots))&mdash;download and upload databases representing a snapshot of a codebase.   * `/queryjobs` ([Query jobs](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Query-jobs))&mdash;submit queries to evaluate against existing projects, and download their results.   * `/system` ([System](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-System))&mdash;get information on the health or usage of the system.  For an overview and getting started topics, see [API for LGTM](https://lgtm.com/help/lgtm/api/api-for-lgtm). 
 *
 * The version of the OpenAPI document: v1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * QueryjobStats
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:20:40.985942-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class QueryjobStats {
  public static final String SERIALIZED_NAME_FAILED = "failed";
  @SerializedName(SERIALIZED_NAME_FAILED)
  private Integer failed;

  public static final String SERIALIZED_NAME_PENDING = "pending";
  @SerializedName(SERIALIZED_NAME_PENDING)
  private Integer pending;

  public static final String SERIALIZED_NAME_SUCCESS_WITH_RESULT = "success-with-result";
  @SerializedName(SERIALIZED_NAME_SUCCESS_WITH_RESULT)
  private Integer successWithResult;

  public static final String SERIALIZED_NAME_SUCCESS_WITHOUT_RESULT = "success-without-result";
  @SerializedName(SERIALIZED_NAME_SUCCESS_WITHOUT_RESULT)
  private Integer successWithoutResult;

  public static final String SERIALIZED_NAME_SUCCESSFUL = "successful";
  @SerializedName(SERIALIZED_NAME_SUCCESSFUL)
  private Integer successful;

  public QueryjobStats() {
  }

  public QueryjobStats failed(Integer failed) {
    this.failed = failed;
    return this;
  }

  /**
   * The number of projects for which the query failed.
   * @return failed
   */
  @javax.annotation.Nullable
  public Integer getFailed() {
    return failed;
  }

  public void setFailed(Integer failed) {
    this.failed = failed;
  }


  public QueryjobStats pending(Integer pending) {
    this.pending = pending;
    return this;
  }

  /**
   * The number of projects scheduled for execution but pending. For very large jobs, not all projects are scheduled at the same time. Therefore, this number might increase as more projects are scheduled. This means that &#x60;successful + failed + pending&#x60; might be smaller than the total number of project that will be analyzed. 
   * @return pending
   */
  @javax.annotation.Nullable
  public Integer getPending() {
    return pending;
  }

  public void setPending(Integer pending) {
    this.pending = pending;
  }


  public QueryjobStats successWithResult(Integer successWithResult) {
    this.successWithResult = successWithResult;
    return this;
  }

  /**
   * The number of projects for which the query returned results.
   * @return successWithResult
   */
  @javax.annotation.Nullable
  public Integer getSuccessWithResult() {
    return successWithResult;
  }

  public void setSuccessWithResult(Integer successWithResult) {
    this.successWithResult = successWithResult;
  }


  public QueryjobStats successWithoutResult(Integer successWithoutResult) {
    this.successWithoutResult = successWithoutResult;
    return this;
  }

  /**
   * The number of projects for which the query was successful but returned no results.
   * @return successWithoutResult
   */
  @javax.annotation.Nullable
  public Integer getSuccessWithoutResult() {
    return successWithoutResult;
  }

  public void setSuccessWithoutResult(Integer successWithoutResult) {
    this.successWithoutResult = successWithoutResult;
  }


  public QueryjobStats successful(Integer successful) {
    this.successful = successful;
    return this;
  }

  /**
   * The number of projects for which the query completed succesfully. These are broken down further between the ones that have results (&#x60;success-with-result&#x60;) and the ones that do not (&#x60;success-without-result&#x60;): &#x60;successful &#x3D; success-with-result + success-without-result&#x60;. 
   * @return successful
   */
  @javax.annotation.Nullable
  public Integer getSuccessful() {
    return successful;
  }

  public void setSuccessful(Integer successful) {
    this.successful = successful;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    QueryjobStats queryjobStats = (QueryjobStats) o;
    return Objects.equals(this.failed, queryjobStats.failed) &&
        Objects.equals(this.pending, queryjobStats.pending) &&
        Objects.equals(this.successWithResult, queryjobStats.successWithResult) &&
        Objects.equals(this.successWithoutResult, queryjobStats.successWithoutResult) &&
        Objects.equals(this.successful, queryjobStats.successful);
  }

  @Override
  public int hashCode() {
    return Objects.hash(failed, pending, successWithResult, successWithoutResult, successful);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class QueryjobStats {\n");
    sb.append("    failed: ").append(toIndentedString(failed)).append("\n");
    sb.append("    pending: ").append(toIndentedString(pending)).append("\n");
    sb.append("    successWithResult: ").append(toIndentedString(successWithResult)).append("\n");
    sb.append("    successWithoutResult: ").append(toIndentedString(successWithoutResult)).append("\n");
    sb.append("    successful: ").append(toIndentedString(successful)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("failed");
    openapiFields.add("pending");
    openapiFields.add("success-with-result");
    openapiFields.add("success-without-result");
    openapiFields.add("successful");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to QueryjobStats
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!QueryjobStats.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in QueryjobStats is not found in the empty JSON string", QueryjobStats.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!QueryjobStats.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `QueryjobStats` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!QueryjobStats.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'QueryjobStats' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<QueryjobStats> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(QueryjobStats.class));

       return (TypeAdapter<T>) new TypeAdapter<QueryjobStats>() {
           @Override
           public void write(JsonWriter out, QueryjobStats value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public QueryjobStats read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of QueryjobStats given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of QueryjobStats
   * @throws IOException if the JSON string is invalid with respect to QueryjobStats
   */
  public static QueryjobStats fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, QueryjobStats.class);
  }

  /**
   * Convert an instance of QueryjobStats to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

