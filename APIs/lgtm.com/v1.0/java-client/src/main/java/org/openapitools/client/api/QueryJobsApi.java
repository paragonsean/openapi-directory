/*
 * LGTM API specification
 * The REST API for LGTM provides data so that you can customize how you integrate LGTM analysis into your workflow. It includes the following resources:   * `/` ([API root](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-API-root))&mdash;get version information or download the specification in OpenAPI format.   * `/projects` ([Projects](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Projects))&mdash;list projects, get a summary of the current status for a project, or add new projects.   * `/analyses` ([Analyses](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Analyses))&mdash;get a summary of results, download all the alerts, or trigger analysis for a specific commit.   * `/codereviews` ([Code reviews](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Code-reviews))&mdash;trigger code review for a patch, and view the results.   * `/operations` ([Operations](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Operations))&mdash;get information about long-running tasks, for example, analyses or code reviews that you've requested.   * `/snapshots` ([Snapshots](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Snapshots))&mdash;download and upload databases representing a snapshot of a codebase.   * `/queryjobs` ([Query jobs](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Query-jobs))&mdash;submit queries to evaluate against existing projects, and download their results.   * `/system` ([System](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-System))&mdash;get information on the health or usage of the system.  For an overview and getting started topics, see [API for LGTM](https://lgtm.com/help/lgtm/api/api-for-lgtm). 
 *
 * The version of the OpenAPI document: v1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Operation;
import org.openapitools.client.model.Queryjob;
import org.openapitools.client.model.QueryjobProjectResults;
import org.openapitools.client.model.QueryjobResultsOverview;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class QueryJobsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public QueryJobsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public QueryJobsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createQueryJob
     * @param language The [language](https://lgtm.com/help/lgtm/analysis-faqs#which-languages-are-supported) you want to analyze.  (required)
     * @param body The query to run. (required)
     * @param projectId The identifier of the project to analyze. Either &#x60;project-id&#x60; or &#x60;projects-list&#x60; must be specified. (optional)
     * @param projectsList Name of the list containing the projects to analyze. Either &#x60;project-id&#x60; or &#x60;projects-list&#x60; must be specified. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted. Query submitted. Tracking data returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createQueryJobCall(String language, String body, List<Long> projectId, String projectsList, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/queryjobs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (language != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("language", language));
        }

        if (projectId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "project-id", projectId));
        }

        if (projectsList != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("projects-list", projectsList));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/plain"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "access-token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createQueryJobValidateBeforeCall(String language, String body, List<Long> projectId, String projectsList, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'language' is set
        if (language == null) {
            throw new ApiException("Missing the required parameter 'language' when calling createQueryJob(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createQueryJob(Async)");
        }

        return createQueryJobCall(language, body, projectId, projectsList, _callback);

    }

    /**
     * Run a CodeQL query on one or more projects
     * Submit a query to run on one or more projects on LGTM. The query is included in the body of the request. 
     * @param language The [language](https://lgtm.com/help/lgtm/analysis-faqs#which-languages-are-supported) you want to analyze.  (required)
     * @param body The query to run. (required)
     * @param projectId The identifier of the project to analyze. Either &#x60;project-id&#x60; or &#x60;projects-list&#x60; must be specified. (optional)
     * @param projectsList Name of the list containing the projects to analyze. Either &#x60;project-id&#x60; or &#x60;projects-list&#x60; must be specified. (optional)
     * @return Operation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted. Query submitted. Tracking data returned. </td><td>  -  </td></tr>
     </table>
     */
    public Operation createQueryJob(String language, String body, List<Long> projectId, String projectsList) throws ApiException {
        ApiResponse<Operation> localVarResp = createQueryJobWithHttpInfo(language, body, projectId, projectsList);
        return localVarResp.getData();
    }

    /**
     * Run a CodeQL query on one or more projects
     * Submit a query to run on one or more projects on LGTM. The query is included in the body of the request. 
     * @param language The [language](https://lgtm.com/help/lgtm/analysis-faqs#which-languages-are-supported) you want to analyze.  (required)
     * @param body The query to run. (required)
     * @param projectId The identifier of the project to analyze. Either &#x60;project-id&#x60; or &#x60;projects-list&#x60; must be specified. (optional)
     * @param projectsList Name of the list containing the projects to analyze. Either &#x60;project-id&#x60; or &#x60;projects-list&#x60; must be specified. (optional)
     * @return ApiResponse&lt;Operation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted. Query submitted. Tracking data returned. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Operation> createQueryJobWithHttpInfo(String language, String body, List<Long> projectId, String projectsList) throws ApiException {
        okhttp3.Call localVarCall = createQueryJobValidateBeforeCall(language, body, projectId, projectsList, null);
        Type localVarReturnType = new TypeToken<Operation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Run a CodeQL query on one or more projects (asynchronously)
     * Submit a query to run on one or more projects on LGTM. The query is included in the body of the request. 
     * @param language The [language](https://lgtm.com/help/lgtm/analysis-faqs#which-languages-are-supported) you want to analyze.  (required)
     * @param body The query to run. (required)
     * @param projectId The identifier of the project to analyze. Either &#x60;project-id&#x60; or &#x60;projects-list&#x60; must be specified. (optional)
     * @param projectsList Name of the list containing the projects to analyze. Either &#x60;project-id&#x60; or &#x60;projects-list&#x60; must be specified. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted. Query submitted. Tracking data returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createQueryJobAsync(String language, String body, List<Long> projectId, String projectsList, final ApiCallback<Operation> _callback) throws ApiException {

        okhttp3.Call localVarCall = createQueryJobValidateBeforeCall(language, body, projectId, projectsList, _callback);
        Type localVarReturnType = new TypeToken<Operation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getQueryJob
     * @param queryjobId The identifier of the query job, from the &#x60;task-result&#x60; given in the response to the initial &#x60;POST /queryjobs&#x60; request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. Requested data returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getQueryJobCall(String queryjobId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/queryjobs/{queryjob-id}"
            .replace("{" + "queryjob-id" + "}", localVarApiClient.escapeString(queryjobId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "access-token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getQueryJobValidateBeforeCall(String queryjobId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'queryjobId' is set
        if (queryjobId == null) {
            throw new ApiException("Missing the required parameter 'queryjobId' when calling getQueryJob(Async)");
        }

        return getQueryJobCall(queryjobId, _callback);

    }

    /**
     * Get the status of a query job
     * Get the status of a query job using the query job identifier for the task.  When you create a query job, the response includes a task result URL of the form: &#x60;/queryjobs/{queryjob-id}&#x60;. 
     * @param queryjobId The identifier of the query job, from the &#x60;task-result&#x60; given in the response to the initial &#x60;POST /queryjobs&#x60; request. (required)
     * @return Queryjob
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. Requested data returned. </td><td>  -  </td></tr>
     </table>
     */
    public Queryjob getQueryJob(String queryjobId) throws ApiException {
        ApiResponse<Queryjob> localVarResp = getQueryJobWithHttpInfo(queryjobId);
        return localVarResp.getData();
    }

    /**
     * Get the status of a query job
     * Get the status of a query job using the query job identifier for the task.  When you create a query job, the response includes a task result URL of the form: &#x60;/queryjobs/{queryjob-id}&#x60;. 
     * @param queryjobId The identifier of the query job, from the &#x60;task-result&#x60; given in the response to the initial &#x60;POST /queryjobs&#x60; request. (required)
     * @return ApiResponse&lt;Queryjob&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. Requested data returned. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Queryjob> getQueryJobWithHttpInfo(String queryjobId) throws ApiException {
        okhttp3.Call localVarCall = getQueryJobValidateBeforeCall(queryjobId, null);
        Type localVarReturnType = new TypeToken<Queryjob>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the status of a query job (asynchronously)
     * Get the status of a query job using the query job identifier for the task.  When you create a query job, the response includes a task result URL of the form: &#x60;/queryjobs/{queryjob-id}&#x60;. 
     * @param queryjobId The identifier of the query job, from the &#x60;task-result&#x60; given in the response to the initial &#x60;POST /queryjobs&#x60; request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. Requested data returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getQueryJobAsync(String queryjobId, final ApiCallback<Queryjob> _callback) throws ApiException {

        okhttp3.Call localVarCall = getQueryJobValidateBeforeCall(queryjobId, _callback);
        Type localVarReturnType = new TypeToken<Queryjob>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getQueryJobResultsForProject
     * @param queryjobId The identifier of the query job, from the &#x60;task-result&#x60; given in the response to the initial &#x60;POST /queryjobs&#x60; request. (required)
     * @param projectId The identifier for the project. (required)
     * @param start Start point for the page of results. (optional)
     * @param limit The maximum number of results to display (less than 100). (optional, default to 100)
     * @param nofilter Include results that are not part of the source tree. These results are filtered out by default. (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. The result contains three items: column headers, data, and pagination information. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getQueryJobResultsForProjectCall(String queryjobId, String projectId, Integer start, Integer limit, Boolean nofilter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/queryjobs/{queryjob-id}/results/{project-id}"
            .replace("{" + "queryjob-id" + "}", localVarApiClient.escapeString(queryjobId.toString()))
            .replace("{" + "project-id" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (nofilter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nofilter", nofilter));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "access-token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getQueryJobResultsForProjectValidateBeforeCall(String queryjobId, String projectId, Integer start, Integer limit, Boolean nofilter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'queryjobId' is set
        if (queryjobId == null) {
            throw new ApiException("Missing the required parameter 'queryjobId' when calling getQueryJobResultsForProject(Async)");
        }

        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getQueryJobResultsForProject(Async)");
        }

        return getQueryJobResultsForProjectCall(queryjobId, projectId, start, limit, nofilter, _callback);

    }

    /**
     * Fetch the results of a query job for a specific project
     * Fetch the results for a specific project. The endpoint succeeds only if the query was successful,  and returns a &#x60;404&#x60; error otherwise.  By default, the endpoint provides only results that are within the source tree. To obtain all results, specify the &#x60;nofilter&#x60; parameter. 
     * @param queryjobId The identifier of the query job, from the &#x60;task-result&#x60; given in the response to the initial &#x60;POST /queryjobs&#x60; request. (required)
     * @param projectId The identifier for the project. (required)
     * @param start Start point for the page of results. (optional)
     * @param limit The maximum number of results to display (less than 100). (optional, default to 100)
     * @param nofilter Include results that are not part of the source tree. These results are filtered out by default. (optional, default to false)
     * @return QueryjobProjectResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. The result contains three items: column headers, data, and pagination information. </td><td>  -  </td></tr>
     </table>
     */
    public QueryjobProjectResults getQueryJobResultsForProject(String queryjobId, String projectId, Integer start, Integer limit, Boolean nofilter) throws ApiException {
        ApiResponse<QueryjobProjectResults> localVarResp = getQueryJobResultsForProjectWithHttpInfo(queryjobId, projectId, start, limit, nofilter);
        return localVarResp.getData();
    }

    /**
     * Fetch the results of a query job for a specific project
     * Fetch the results for a specific project. The endpoint succeeds only if the query was successful,  and returns a &#x60;404&#x60; error otherwise.  By default, the endpoint provides only results that are within the source tree. To obtain all results, specify the &#x60;nofilter&#x60; parameter. 
     * @param queryjobId The identifier of the query job, from the &#x60;task-result&#x60; given in the response to the initial &#x60;POST /queryjobs&#x60; request. (required)
     * @param projectId The identifier for the project. (required)
     * @param start Start point for the page of results. (optional)
     * @param limit The maximum number of results to display (less than 100). (optional, default to 100)
     * @param nofilter Include results that are not part of the source tree. These results are filtered out by default. (optional, default to false)
     * @return ApiResponse&lt;QueryjobProjectResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. The result contains three items: column headers, data, and pagination information. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<QueryjobProjectResults> getQueryJobResultsForProjectWithHttpInfo(String queryjobId, String projectId, Integer start, Integer limit, Boolean nofilter) throws ApiException {
        okhttp3.Call localVarCall = getQueryJobResultsForProjectValidateBeforeCall(queryjobId, projectId, start, limit, nofilter, null);
        Type localVarReturnType = new TypeToken<QueryjobProjectResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Fetch the results of a query job for a specific project (asynchronously)
     * Fetch the results for a specific project. The endpoint succeeds only if the query was successful,  and returns a &#x60;404&#x60; error otherwise.  By default, the endpoint provides only results that are within the source tree. To obtain all results, specify the &#x60;nofilter&#x60; parameter. 
     * @param queryjobId The identifier of the query job, from the &#x60;task-result&#x60; given in the response to the initial &#x60;POST /queryjobs&#x60; request. (required)
     * @param projectId The identifier for the project. (required)
     * @param start Start point for the page of results. (optional)
     * @param limit The maximum number of results to display (less than 100). (optional, default to 100)
     * @param nofilter Include results that are not part of the source tree. These results are filtered out by default. (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. The result contains three items: column headers, data, and pagination information. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getQueryJobResultsForProjectAsync(String queryjobId, String projectId, Integer start, Integer limit, Boolean nofilter, final ApiCallback<QueryjobProjectResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = getQueryJobResultsForProjectValidateBeforeCall(queryjobId, projectId, start, limit, nofilter, _callback);
        Type localVarReturnType = new TypeToken<QueryjobProjectResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getQueryJobResultsOverview
     * @param queryjobId The identifier of the query job, from the &#x60;task-result&#x60; given in the response to the initial &#x60;POST /queryjobs&#x60; request. (required)
     * @param start An opaque identifier generated by the API used for pagination.  This identifier will be included as part of the response for this endpoint whenever more than one page of results is available.   (optional)
     * @param limit The number of results to return. Useful for pagination. (optional, default to 100)
     * @param filter Only return a subset of results. Legal values are &#x60;w-results&#x60;, &#x60;wo-results&#x60;, &#x60;error&#x60;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. Requested data returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getQueryJobResultsOverviewCall(String queryjobId, String start, Integer limit, String filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/queryjobs/{queryjob-id}/results"
            .replace("{" + "queryjob-id" + "}", localVarApiClient.escapeString(queryjobId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "access-token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getQueryJobResultsOverviewValidateBeforeCall(String queryjobId, String start, Integer limit, String filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'queryjobId' is set
        if (queryjobId == null) {
            throw new ApiException("Missing the required parameter 'queryjobId' when calling getQueryJobResultsOverview(Async)");
        }

        return getQueryJobResultsOverviewCall(queryjobId, start, limit, filter, _callback);

    }

    /**
     * Provide a summary of results for the projects in the query job
     * This endpoint provides a summary of the results generated by completed query runs for each  project specified in the the POST /queryjobs endpoint.  For completed query jobs, the summary includes:    * The number of results for successful query runs.   * Error information for failed query runs.  No information is included in the response for any project for which the query  run is still in progress. 
     * @param queryjobId The identifier of the query job, from the &#x60;task-result&#x60; given in the response to the initial &#x60;POST /queryjobs&#x60; request. (required)
     * @param start An opaque identifier generated by the API used for pagination.  This identifier will be included as part of the response for this endpoint whenever more than one page of results is available.   (optional)
     * @param limit The number of results to return. Useful for pagination. (optional, default to 100)
     * @param filter Only return a subset of results. Legal values are &#x60;w-results&#x60;, &#x60;wo-results&#x60;, &#x60;error&#x60;. (optional)
     * @return QueryjobResultsOverview
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. Requested data returned. </td><td>  -  </td></tr>
     </table>
     */
    public QueryjobResultsOverview getQueryJobResultsOverview(String queryjobId, String start, Integer limit, String filter) throws ApiException {
        ApiResponse<QueryjobResultsOverview> localVarResp = getQueryJobResultsOverviewWithHttpInfo(queryjobId, start, limit, filter);
        return localVarResp.getData();
    }

    /**
     * Provide a summary of results for the projects in the query job
     * This endpoint provides a summary of the results generated by completed query runs for each  project specified in the the POST /queryjobs endpoint.  For completed query jobs, the summary includes:    * The number of results for successful query runs.   * Error information for failed query runs.  No information is included in the response for any project for which the query  run is still in progress. 
     * @param queryjobId The identifier of the query job, from the &#x60;task-result&#x60; given in the response to the initial &#x60;POST /queryjobs&#x60; request. (required)
     * @param start An opaque identifier generated by the API used for pagination.  This identifier will be included as part of the response for this endpoint whenever more than one page of results is available.   (optional)
     * @param limit The number of results to return. Useful for pagination. (optional, default to 100)
     * @param filter Only return a subset of results. Legal values are &#x60;w-results&#x60;, &#x60;wo-results&#x60;, &#x60;error&#x60;. (optional)
     * @return ApiResponse&lt;QueryjobResultsOverview&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. Requested data returned. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<QueryjobResultsOverview> getQueryJobResultsOverviewWithHttpInfo(String queryjobId, String start, Integer limit, String filter) throws ApiException {
        okhttp3.Call localVarCall = getQueryJobResultsOverviewValidateBeforeCall(queryjobId, start, limit, filter, null);
        Type localVarReturnType = new TypeToken<QueryjobResultsOverview>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Provide a summary of results for the projects in the query job (asynchronously)
     * This endpoint provides a summary of the results generated by completed query runs for each  project specified in the the POST /queryjobs endpoint.  For completed query jobs, the summary includes:    * The number of results for successful query runs.   * Error information for failed query runs.  No information is included in the response for any project for which the query  run is still in progress. 
     * @param queryjobId The identifier of the query job, from the &#x60;task-result&#x60; given in the response to the initial &#x60;POST /queryjobs&#x60; request. (required)
     * @param start An opaque identifier generated by the API used for pagination.  This identifier will be included as part of the response for this endpoint whenever more than one page of results is available.   (optional)
     * @param limit The number of results to return. Useful for pagination. (optional, default to 100)
     * @param filter Only return a subset of results. Legal values are &#x60;w-results&#x60;, &#x60;wo-results&#x60;, &#x60;error&#x60;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. Requested data returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getQueryJobResultsOverviewAsync(String queryjobId, String start, Integer limit, String filter, final ApiCallback<QueryjobResultsOverview> _callback) throws ApiException {

        okhttp3.Call localVarCall = getQueryJobResultsOverviewValidateBeforeCall(queryjobId, start, limit, filter, _callback);
        Type localVarReturnType = new TypeToken<QueryjobResultsOverview>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
