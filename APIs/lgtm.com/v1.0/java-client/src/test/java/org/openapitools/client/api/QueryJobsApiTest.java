/*
 * LGTM API specification
 * The REST API for LGTM provides data so that you can customize how you integrate LGTM analysis into your workflow. It includes the following resources:   * `/` ([API root](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-API-root))&mdash;get version information or download the specification in OpenAPI format.   * `/projects` ([Projects](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Projects))&mdash;list projects, get a summary of the current status for a project, or add new projects.   * `/analyses` ([Analyses](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Analyses))&mdash;get a summary of results, download all the alerts, or trigger analysis for a specific commit.   * `/codereviews` ([Code reviews](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Code-reviews))&mdash;trigger code review for a patch, and view the results.   * `/operations` ([Operations](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Operations))&mdash;get information about long-running tasks, for example, analyses or code reviews that you've requested.   * `/snapshots` ([Snapshots](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Snapshots))&mdash;download and upload databases representing a snapshot of a codebase.   * `/queryjobs` ([Query jobs](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Query-jobs))&mdash;submit queries to evaluate against existing projects, and download their results.   * `/system` ([System](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-System))&mdash;get information on the health or usage of the system.  For an overview and getting started topics, see [API for LGTM](https://lgtm.com/help/lgtm/api/api-for-lgtm). 
 *
 * The version of the OpenAPI document: v1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Operation;
import org.openapitools.client.model.Queryjob;
import org.openapitools.client.model.QueryjobProjectResults;
import org.openapitools.client.model.QueryjobResultsOverview;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for QueryJobsApi
 */
@Disabled
public class QueryJobsApiTest {

    private final QueryJobsApi api = new QueryJobsApi();

    /**
     * Run a CodeQL query on one or more projects
     *
     * Submit a query to run on one or more projects on LGTM. The query is included in the body of the request. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createQueryJobTest() throws ApiException {
        String language = null;
        String body = null;
        List<Long> projectId = null;
        String projectsList = null;
        Operation response = api.createQueryJob(language, body, projectId, projectsList);
        // TODO: test validations
    }

    /**
     * Get the status of a query job
     *
     * Get the status of a query job using the query job identifier for the task.  When you create a query job, the response includes a task result URL of the form: &#x60;/queryjobs/{queryjob-id}&#x60;. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getQueryJobTest() throws ApiException {
        String queryjobId = null;
        Queryjob response = api.getQueryJob(queryjobId);
        // TODO: test validations
    }

    /**
     * Fetch the results of a query job for a specific project
     *
     * Fetch the results for a specific project. The endpoint succeeds only if the query was successful,  and returns a &#x60;404&#x60; error otherwise.  By default, the endpoint provides only results that are within the source tree. To obtain all results, specify the &#x60;nofilter&#x60; parameter. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getQueryJobResultsForProjectTest() throws ApiException {
        String queryjobId = null;
        String projectId = null;
        Integer start = null;
        Integer limit = null;
        Boolean nofilter = null;
        QueryjobProjectResults response = api.getQueryJobResultsForProject(queryjobId, projectId, start, limit, nofilter);
        // TODO: test validations
    }

    /**
     * Provide a summary of results for the projects in the query job
     *
     * This endpoint provides a summary of the results generated by completed query runs for each  project specified in the the POST /queryjobs endpoint.  For completed query jobs, the summary includes:    * The number of results for successful query runs.   * Error information for failed query runs.  No information is included in the response for any project for which the query  run is still in progress. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getQueryJobResultsOverviewTest() throws ApiException {
        String queryjobId = null;
        String start = null;
        Integer limit = null;
        String filter = null;
        QueryjobResultsOverview response = api.getQueryJobResultsOverview(queryjobId, start, limit, filter);
        // TODO: test validations
    }

}
