/*
 * LGTM API specification
 * The REST API for LGTM provides data so that you can customize how you integrate LGTM analysis into your workflow. It includes the following resources:   * `/` ([API root](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-API-root))&mdash;get version information or download the specification in OpenAPI format.   * `/projects` ([Projects](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Projects))&mdash;list projects, get a summary of the current status for a project, or add new projects.   * `/analyses` ([Analyses](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Analyses))&mdash;get a summary of results, download all the alerts, or trigger analysis for a specific commit.   * `/codereviews` ([Code reviews](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Code-reviews))&mdash;trigger code review for a patch, and view the results.   * `/operations` ([Operations](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Operations))&mdash;get information about long-running tasks, for example, analyses or code reviews that you've requested.   * `/snapshots` ([Snapshots](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Snapshots))&mdash;download and upload databases representing a snapshot of a codebase.   * `/queryjobs` ([Query jobs](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Query-jobs))&mdash;submit queries to evaluate against existing projects, and download their results.   * `/system` ([System](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-System))&mdash;get information on the health or usage of the system.  For an overview and getting started topics, see [API for LGTM](https://lgtm.com/help/lgtm/api/api-for-lgtm). 
 *
 * The version of the OpenAPI document: v1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CodeReview;
import java.io.File;
import org.openapitools.client.model.Operation;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for CodeReviewsApi
 */
@Disabled
public class CodeReviewsApiTest {

    private final CodeReviewsApi api = new CodeReviewsApi();

    /**
     * Get results of code review
     *
     * Get the results of a code review using the review identifier for the task.  When you request a code review, the response includes a task result URL of the form: &#x60;/codereviews/{review-id}&#x60;.  This endpoint reports the results of a complete code review, or the status of a review  that&#39;s still in progress. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCodeReviewTest() throws ApiException {
        String reviewId = null;
        List<CodeReview> response = api.getCodeReview(reviewId);
        // TODO: test validations
    }

    /**
     * Run code review for a patch
     *
     * Trigger the code review of a patch. This is available for projects with Git repositories.  Your request must include:    * Identifier for the base commit   * Patch generated using &#x60;git diff --binary&#x60; (see [git diff](https://git-scm.com/docs/git-diff))   * Header &#x60;Content-Type: application/octet-stream&#x60;   * For both LGTM.com and LGTM Enterprise, an access token with the &#x60;codereviews:write&#x60; scope  Note that if you make a request using Curl, you&#39;ll also need to add &#x60;--data-binary&#x60; to the request to ensure that the patch you supply in the body is sent with newlines unchanged. You can track the progress of the review using the task result URL returned on creation of the task, or by calling the &#x60;/operations&#x60; endpoint with the operations identifier returned by the request. For more information, see [Get operation status](https://lgtm.com/help/lgtm/api/api-v1#opIdgetOperation). Alternatively, if you supply a callback URL you&#39;ll get a post-back automatically on completion of the review.  When the review is complete, you can access the results using the task result URL. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void requestReviewTest() throws ApiException {
        Long projectId = null;
        String base = null;
        Integer externalId = null;
        File body = null;
        String reviewUrl = null;
        String callbackUrl = null;
        String callbackSecret = null;
        Operation response = api.requestReview(projectId, base, externalId, body, reviewUrl, callbackUrl, callbackSecret);
        // TODO: test validations
    }

}
