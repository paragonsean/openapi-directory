/*
 * LGTM API specification
 * The REST API for LGTM provides data so that you can customize how you integrate LGTM analysis into your workflow. It includes the following resources:   * `/` ([API root](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-API-root))&mdash;get version information or download the specification in OpenAPI format.   * `/projects` ([Projects](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Projects))&mdash;list projects, get a summary of the current status for a project, or add new projects.   * `/analyses` ([Analyses](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Analyses))&mdash;get a summary of results, download all the alerts, or trigger analysis for a specific commit.   * `/codereviews` ([Code reviews](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Code-reviews))&mdash;trigger code review for a patch, and view the results.   * `/operations` ([Operations](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Operations))&mdash;get information about long-running tasks, for example, analyses or code reviews that you've requested.   * `/snapshots` ([Snapshots](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Snapshots))&mdash;download and upload databases representing a snapshot of a codebase.   * `/queryjobs` ([Query jobs](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Query-jobs))&mdash;submit queries to evaluate against existing projects, and download their results.   * `/system` ([System](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-System))&mdash;get information on the health or usage of the system.  For an overview and getting started topics, see [API for LGTM](https://lgtm.com/help/lgtm/api/api-for-lgtm). 
 *
 * The version of the OpenAPI document: v1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import java.time.OffsetDateTime;
import org.openapitools.client.model.Operation;
import org.openapitools.client.model.ProjectDetails;
import org.openapitools.client.model.ProjectList;
import java.net.URI;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ProjectsApi
 */
@Disabled
public class ProjectsApiTest {

    private final ProjectsApi api = new ProjectsApi();

    /**
     * Add a project to LGTM
     *
     * LGTM administrators can add a new project to LGTM by providing a repository URL. By default, LGTM tries to build and analyze the project in the same way as for projects added through the user interface. If at least one language is successfully analyzed, and the repository doesn&#39;t already exist on LGTM, a new project is created. If the project already exists but your API call triggers a successful analysis  of additional languages, LGTM adds those languages to the project.  You can configure how LGTM processes the project using query parameters to:   * Specify the languages to analyze.   * Create a new project in [sparse mode](https://help.semmle.com/lgtm-enterprise/user/help/analysis-faqs.html#what-is-sparse-analysis).   * Create a new project in [upload mode](https://help.semmle.com/lgtm-enterprise/user/help/analysis-faqs.html#what-is-upload-analysis) to analyze externally-generated databases. Each database represents a snapshot of the codebase.    Use this option when you want to upload databases that were generated by the CodeQL CLI (or the QL command-line tools).   The version of the command line used to generate the database   must be the same version as LGTM Enterprise.   With any of these options, you can also include an &#x60;lgtm.yml&#x60; in the body of the request to [customize extraction](https://lgtm.com/help/lgtm/customizing-code-extraction). 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addProjectTest() throws ApiException {
        URI repository = null;
        List<String> language = null;
        String mode = null;
        String commit = null;
        OffsetDateTime date = null;
        List<String> workerLabel = null;
        String body = null;
        Operation response = api.addProject(repository, language, mode, commit, date, workerLabel, body);
        // TODO: test validations
    }

    /**
     * Delete project by numeric identifier
     *
     * Delete a project with a particular numeric project identifier. In addition to access to the project, administrative access to LGTM or the LGTM Enterprise instance is required to delete projects. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteProjectTest() throws ApiException {
        Long projectId = null;
        ProjectDetails response = api.deleteProject(projectId);
        // TODO: test validations
    }

    /**
     * Get project by numeric identifier
     *
     * Get the latest summary for a specific project using the numeric project identifier.  To find the LGTM identifier for a project, list all projects using the &#x60;/projects&#x60;  endpoint and look up the project by name. Alternatively, use the &#x60;/projects/{provider}/{org}/{name}&#x60; endpoint. If you have administration access, the project identifier is also displayed in  the administration page for the project. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getProjectTest() throws ApiException {
        Long projectId = null;
        ProjectDetails response = api.getProject(projectId);
        // TODO: test validations
    }

    /**
     * Get project by URL identifier
     *
     * Get the latest summary for a specific project using the project&#39;s URL identifier &#x60;{provider}/{org}/{name}&#x60;.  To find the URL identifier for a project, view the project overview page in LGTM. The URL identifier follows after &#x60;/projects&#x60;. For example, for a project with the URL &#x60;https://lgtm.example.com/projects/g/apache/commons-io&#x60; the URL identifier is &#x60;g/apache/commons-io&#x60;. In the example, &#x60;g&#x60; represents the &#x60;provider&#x60; (repository host), &#x60;apache&#x60; is the &#x60;organization&#x60; and &#x60;commons-io&#x60; is the &#x60;name&#x60; of the repository. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getProjectByUrlIdentifierTest() throws ApiException {
        String provider = null;
        String org = null;
        String name = null;
        ProjectDetails response = api.getProjectByUrlIdentifier(provider, org, name);
        // TODO: test validations
    }

    /**
     * Get configuration for a project identified by numeric identifier
     *
     * Get the latest configuration for a specific project using the numeric project identifier.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getProjectConfigTest() throws ApiException {
        Long projectId = null;
        String source = null;
        Object response = api.getProjectConfig(projectId, source);
        // TODO: test validations
    }

    /**
     * List projects
     *
     * List all the projects the current user has authorization to view.   A maximum of 100 projects are returned in each response. When further results are available, the response includes the URL you need to request the next page of results.  Use the optional parameter, &#x60;limit&#x60;, to change the number of results reported in each response (range of 1&amp;mdash;100). If you supply an invalid value for this  parameter, the default value of 100 is used.  When more than one page of results is available, each response includes a &#x60;nextPageUrl&#x60; response parameter. You can use this URL to request the next page of results. The &#x60;nextPageUrl&#x60; includes an automatically generated &#x60;start&#x60; parameter, which specifies the projects to return in the next page of results. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getProjectsTest() throws ApiException {
        Integer limit = null;
        String start = null;
        ProjectList response = api.getProjects(limit, start);
        // TODO: test validations
    }

    /**
     * Set the administrator configuration for a project identified by numeric identifier
     *
     * Set the administrator configuration for a specific project using the numeric project identifier.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void setProjectConfigTest() throws ApiException {
        Long projectId = null;
        String body = null;
        Object response = api.setProjectConfig(projectId, body);
        // TODO: test validations
    }

}
