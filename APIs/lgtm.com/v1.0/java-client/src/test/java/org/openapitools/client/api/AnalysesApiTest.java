/*
 * LGTM API specification
 * The REST API for LGTM provides data so that you can customize how you integrate LGTM analysis into your workflow. It includes the following resources:   * `/` ([API root](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-API-root))&mdash;get version information or download the specification in OpenAPI format.   * `/projects` ([Projects](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Projects))&mdash;list projects, get a summary of the current status for a project, or add new projects.   * `/analyses` ([Analyses](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Analyses))&mdash;get a summary of results, download all the alerts, or trigger analysis for a specific commit.   * `/codereviews` ([Code reviews](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Code-reviews))&mdash;trigger code review for a patch, and view the results.   * `/operations` ([Operations](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Operations))&mdash;get information about long-running tasks, for example, analyses or code reviews that you've requested.   * `/snapshots` ([Snapshots](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Snapshots))&mdash;download and upload databases representing a snapshot of a codebase.   * `/queryjobs` ([Query jobs](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Query-jobs))&mdash;submit queries to evaluate against existing projects, and download their results.   * `/system` ([System](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-System))&mdash;get information on the health or usage of the system.  For an overview and getting started topics, see [API for LGTM](https://lgtm.com/help/lgtm/api/api-for-lgtm). 
 *
 * The version of the OpenAPI document: v1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Analysis;
import org.openapitools.client.model.Operation;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AnalysesApi
 */
@Disabled
public class AnalysesApiTest {

    private final AnalysesApi api = new AnalysesApi();

    /**
     * Get detailed alert information
     *
     * Download all the alerts found by an analysis. Use the &#x60;Accept:&#x60; request header to specify the output media type as either CSV or [SARIF](https://lgtm.com/help/lgtm/sarif-results-file):   - &#x60;application/sarif+json&#x60;: Alerts in SARIF format. If no version is specified the latest supported SARIF version is used. - &#x60;application/json&#x60;: Alerts in SARIF format (*deprecated*).    If no version is specified, [SARIF 2.0.0](http://docs.oasis-open.org/sarif/sarif/v2.0/sarif-v2.0.html)    is used for backwards compatibility.  - &#x60;text/csv&#x60;: Alerts in CSV format. The &#x60;text/csv&#x60; media type has two optional parameters:    - &#x60;charset&#x60;: determines the character encoding of the text, by default UTF-8.    - &#x60;header&#x60;: determines whether a header row with column names is &#x60;present&#x60; or &#x60;absent&#x60;.       The default value for this parameter is &#x60;present&#x60;.       For example, an Accept header with value &#x60;text/csv; header&#x3D;absent&#x60;        would result in CSV output without a header row.         To find the analysis identifier for a commit, use the &#x60;/analyses/{project-id}/commits/{commit-id}&#x60;  endpoint. For more information, see [Get analysis summary for a specific commit](https://lgtm.com/help/lgtm/api/api-v1#opIdgetAnalysisForCommit).  
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAlertsTest() throws ApiException {
        String analysisId = null;
        String sarifVersion = null;
        Boolean excludedFiles = null;
        Object response = api.getAlerts(analysisId, sarifVersion, excludedFiles);
        // TODO: test validations
    }

    /**
     * Get analysis summary
     *
     * Get a summary of the analysis results for a specific analysis identifier.  To find the analysis identifier for a commit, use the &#x60;/analyses/{project-id}/commits/{commit-id}&#x60; endpoint. For more information, see [Get analysis summary for a specific commit](https://lgtm.com/help/lgtm/api/api-v1#opIdgetAnalysisForCommit).  This endpoint reports the commit analyzed and a summary of the results for each language. Alternatively, you can use this identifier to download full details  of all the alerts found by the analysis. For more information, see [Get detailed alert information](https://lgtm.com/help/lgtm/api/api-v1#opIdgetAlerts). 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAnalysisTest() throws ApiException {
        String analysisId = null;
        Analysis response = api.getAnalysis(analysisId);
        // TODO: test validations
    }

    /**
     * Get analysis summary for a specific commit
     *
     * Get a summary of the analysis results for a specific commit, or the latest commit, to a project. (For projects configured for sparse or upload analysis, only &#x60;latest&#x60; is supported.)   This endpoint reports a summary of results for each language, and also the analysis identifier. You can use the analysis identifier to download full details of all the alerts  found by the analysis. For more information, see [Get detailed alert information](https://lgtm.com/help/lgtm/api/api-v1#opIdgetAlerts). 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAnalysisForCommitTest() throws ApiException {
        Long projectId = null;
        String commitId = null;
        Analysis response = api.getAnalysisForCommit(projectId, commitId);
        // TODO: test validations
    }

    /**
     * Run analysis of a specific commit
     *
     * Trigger the analysis of a specific commit to a project. If a previous attempt to analyze that commit failed, this triggers a fresh analysis.  This is supported for all LGTM projects, regardless of repository type or host. The commit must be available in the main repository, but can be on a branch that isn&#39;t tracked by LGTM. For both LGTM.com and LGTM Enterprise, you must include an access token with the &#x60;analyses:write&#x60; scope.  When you request the analysis of a commit, the API returns: - &#x60;operation-id&#x60;: used to track the status of the task using the &#x60;/operations&#x60; endpoint. For more information, see [Get operation status](https://lgtm.com/help/lgtm/api/api-v1#opIdgetOperation). - &#x60;status&#x60;: initially pending. - &#x60;task-result&#x60;: containing information about the progress and results of the analysis. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void requestAnalysisTest() throws ApiException {
        Long projectId = null;
        String commit = null;
        List<String> language = null;
        Operation response = api.requestAnalysis(projectId, commit, language);
        // TODO: test validations
    }

}
