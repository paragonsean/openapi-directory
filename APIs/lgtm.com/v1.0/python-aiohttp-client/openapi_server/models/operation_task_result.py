# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.analysis import Analysis
from openapi_server.models.code_review import CodeReview
from openapi_server.models.codereview_languages import CodereviewLanguages
from openapi_server.models.project import Project
from openapi_server.models.queryjob import Queryjob
from openapi_server.models.queryjob_stats import QueryjobStats
from openapi_server import util


class OperationTaskResult(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, commit_id: str=None, id: str=None, languages: List[CodereviewLanguages]=None, log_url: str=None, project: Project=None, results_url: str=None, status: str=None, status_message: str=None, result_url: str=None, stats: QueryjobStats=None):
        """OperationTaskResult - a model defined in OpenAPI

        :param commit_id: The commit_id of this OperationTaskResult.
        :param id: The id of this OperationTaskResult.
        :param languages: The languages of this OperationTaskResult.
        :param log_url: The log_url of this OperationTaskResult.
        :param project: The project of this OperationTaskResult.
        :param results_url: The results_url of this OperationTaskResult.
        :param status: The status of this OperationTaskResult.
        :param status_message: The status_message of this OperationTaskResult.
        :param result_url: The result_url of this OperationTaskResult.
        :param stats: The stats of this OperationTaskResult.
        """
        self.openapi_types = {
            'commit_id': str,
            'id': str,
            'languages': List[CodereviewLanguages],
            'log_url': str,
            'project': Project,
            'results_url': str,
            'status': str,
            'status_message': str,
            'result_url': str,
            'stats': QueryjobStats
        }

        self.attribute_map = {
            'commit_id': 'commit-id',
            'id': 'id',
            'languages': 'languages',
            'log_url': 'log-url',
            'project': 'project',
            'results_url': 'results-url',
            'status': 'status',
            'status_message': 'status-message',
            'result_url': 'result-url',
            'stats': 'stats'
        }

        self._commit_id = commit_id
        self._id = id
        self._languages = languages
        self._log_url = log_url
        self._project = project
        self._results_url = results_url
        self._status = status
        self._status_message = status_message
        self._result_url = result_url
        self._stats = stats

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OperationTaskResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The operation_task_result of this OperationTaskResult.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def commit_id(self):
        """Gets the commit_id of this OperationTaskResult.

        The commit identifier. The commit identifier is included only if the same commit was successfully analyzed for all languages. A detailed breakdown of which commit was analyzed for each language is provided in the `languages` property. 

        :return: The commit_id of this OperationTaskResult.
        :rtype: str
        """
        return self._commit_id

    @commit_id.setter
    def commit_id(self, commit_id):
        """Sets the commit_id of this OperationTaskResult.

        The commit identifier. The commit identifier is included only if the same commit was successfully analyzed for all languages. A detailed breakdown of which commit was analyzed for each language is provided in the `languages` property. 

        :param commit_id: The commit_id of this OperationTaskResult.
        :type commit_id: str
        """

        self._commit_id = commit_id

    @property
    def id(self):
        """Gets the id of this OperationTaskResult.

        The identifier for the QueryJob.

        :return: The id of this OperationTaskResult.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this OperationTaskResult.

        The identifier for the QueryJob.

        :param id: The id of this OperationTaskResult.
        :type id: str
        """

        self._id = id

    @property
    def languages(self):
        """Gets the languages of this OperationTaskResult.

        Detailed information for each language analyzed.

        :return: The languages of this OperationTaskResult.
        :rtype: List[CodereviewLanguages]
        """
        return self._languages

    @languages.setter
    def languages(self, languages):
        """Sets the languages of this OperationTaskResult.

        Detailed information for each language analyzed.

        :param languages: The languages of this OperationTaskResult.
        :type languages: List[CodereviewLanguages]
        """

        self._languages = languages

    @property
    def log_url(self):
        """Gets the log_url of this OperationTaskResult.

        A page on LGTM to view the logs for this analysis.

        :return: The log_url of this OperationTaskResult.
        :rtype: str
        """
        return self._log_url

    @log_url.setter
    def log_url(self, log_url):
        """Sets the log_url of this OperationTaskResult.

        A page on LGTM to view the logs for this analysis.

        :param log_url: The log_url of this OperationTaskResult.
        :type log_url: str
        """

        self._log_url = log_url

    @property
    def project(self):
        """Gets the project of this OperationTaskResult.


        :return: The project of this OperationTaskResult.
        :rtype: Project
        """
        return self._project

    @project.setter
    def project(self, project):
        """Sets the project of this OperationTaskResult.


        :param project: The project of this OperationTaskResult.
        :type project: Project
        """

        self._project = project

    @property
    def results_url(self):
        """Gets the results_url of this OperationTaskResult.

        A page on LGTM to view the status and results of this code review.

        :return: The results_url of this OperationTaskResult.
        :rtype: str
        """
        return self._results_url

    @results_url.setter
    def results_url(self, results_url):
        """Sets the results_url of this OperationTaskResult.

        A page on LGTM to view the status and results of this code review.

        :param results_url: The results_url of this OperationTaskResult.
        :type results_url: str
        """

        self._results_url = results_url

    @property
    def status(self):
        """Gets the status of this OperationTaskResult.

        The status of the code review.

        :return: The status of this OperationTaskResult.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this OperationTaskResult.

        The status of the code review.

        :param status: The status of this OperationTaskResult.
        :type status: str
        """
        allowed_values = ["pending", "failure", "success"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def status_message(self):
        """Gets the status_message of this OperationTaskResult.

        A summary of the current status of the code review.

        :return: The status_message of this OperationTaskResult.
        :rtype: str
        """
        return self._status_message

    @status_message.setter
    def status_message(self, status_message):
        """Sets the status_message of this OperationTaskResult.

        A summary of the current status of the code review.

        :param status_message: The status_message of this OperationTaskResult.
        :type status_message: str
        """

        self._status_message = status_message

    @property
    def result_url(self):
        """Gets the result_url of this OperationTaskResult.

        URL to view the result of the query job.

        :return: The result_url of this OperationTaskResult.
        :rtype: str
        """
        return self._result_url

    @result_url.setter
    def result_url(self, result_url):
        """Sets the result_url of this OperationTaskResult.

        URL to view the result of the query job.

        :param result_url: The result_url of this OperationTaskResult.
        :type result_url: str
        """

        self._result_url = result_url

    @property
    def stats(self):
        """Gets the stats of this OperationTaskResult.


        :return: The stats of this OperationTaskResult.
        :rtype: QueryjobStats
        """
        return self._stats

    @stats.setter
    def stats(self, stats):
        """Sets the stats of this OperationTaskResult.


        :param stats: The stats of this OperationTaskResult.
        :type stats: QueryjobStats
        """

        self._stats = stats
