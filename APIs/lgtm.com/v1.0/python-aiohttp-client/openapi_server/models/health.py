# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Health(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, details: Dict[str, Health]=None, status: str=None):
        """Health - a model defined in OpenAPI

        :param description: The description of this Health.
        :param details: The details of this Health.
        :param status: The status of this Health.
        """
        self.openapi_types = {
            'description': str,
            'details': Dict[str, Health],
            'status': str
        }

        self.attribute_map = {
            'description': 'description',
            'details': 'details',
            'status': 'status'
        }

        self._description = description
        self._details = details
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Health':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The health of this Health.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this Health.

        A description of the status of the service.

        :return: The description of this Health.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Health.

        A description of the status of the service.

        :param description: The description of this Health.
        :type description: str
        """

        self._description = description

    @property
    def details(self):
        """Gets the details of this Health.

        Details of the health of the service. This contains information about the status of the components on which the service depends.

        :return: The details of this Health.
        :rtype: Dict[str, Health]
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this Health.

        Details of the health of the service. This contains information about the status of the components on which the service depends.

        :param details: The details of this Health.
        :type details: Dict[str, Health]
        """

        self._details = details

    @property
    def status(self):
        """Gets the status of this Health.

        The status of the service.

        :return: The status of this Health.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Health.

        The status of the service.

        :param status: The status of this Health.
        :type status: str
        """
        allowed_values = ["UNKNOWN", "UP", "DOWN"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status
