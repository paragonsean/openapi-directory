# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.language_stats import LanguageStats
from openapi_server.models.project import Project
from openapi_server import util


class Analysis(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, commit_id: str=None, id: str=None, languages: List[LanguageStats]=None, log_url: str=None, project: Project=None, results_url: str=None):
        """Analysis - a model defined in OpenAPI

        :param commit_id: The commit_id of this Analysis.
        :param id: The id of this Analysis.
        :param languages: The languages of this Analysis.
        :param log_url: The log_url of this Analysis.
        :param project: The project of this Analysis.
        :param results_url: The results_url of this Analysis.
        """
        self.openapi_types = {
            'commit_id': str,
            'id': str,
            'languages': List[LanguageStats],
            'log_url': str,
            'project': Project,
            'results_url': str
        }

        self.attribute_map = {
            'commit_id': 'commit-id',
            'id': 'id',
            'languages': 'languages',
            'log_url': 'log-url',
            'project': 'project',
            'results_url': 'results-url'
        }

        self._commit_id = commit_id
        self._id = id
        self._languages = languages
        self._log_url = log_url
        self._project = project
        self._results_url = results_url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Analysis':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The analysis of this Analysis.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def commit_id(self):
        """Gets the commit_id of this Analysis.

        The commit identifier. The commit identifier is included only if the same commit was successfully analyzed for all languages. A detailed breakdown of which commit was analyzed for each language is provided in the `languages` property. 

        :return: The commit_id of this Analysis.
        :rtype: str
        """
        return self._commit_id

    @commit_id.setter
    def commit_id(self, commit_id):
        """Sets the commit_id of this Analysis.

        The commit identifier. The commit identifier is included only if the same commit was successfully analyzed for all languages. A detailed breakdown of which commit was analyzed for each language is provided in the `languages` property. 

        :param commit_id: The commit_id of this Analysis.
        :type commit_id: str
        """

        self._commit_id = commit_id

    @property
    def id(self):
        """Gets the id of this Analysis.

        The analysis identifier.

        :return: The id of this Analysis.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Analysis.

        The analysis identifier.

        :param id: The id of this Analysis.
        :type id: str
        """

        self._id = id

    @property
    def languages(self):
        """Gets the languages of this Analysis.

        Per-language information.

        :return: The languages of this Analysis.
        :rtype: List[LanguageStats]
        """
        return self._languages

    @languages.setter
    def languages(self, languages):
        """Sets the languages of this Analysis.

        Per-language information.

        :param languages: The languages of this Analysis.
        :type languages: List[LanguageStats]
        """

        self._languages = languages

    @property
    def log_url(self):
        """Gets the log_url of this Analysis.

        A page on LGTM to view the logs for this analysis.

        :return: The log_url of this Analysis.
        :rtype: str
        """
        return self._log_url

    @log_url.setter
    def log_url(self, log_url):
        """Sets the log_url of this Analysis.

        A page on LGTM to view the logs for this analysis.

        :param log_url: The log_url of this Analysis.
        :type log_url: str
        """

        self._log_url = log_url

    @property
    def project(self):
        """Gets the project of this Analysis.


        :return: The project of this Analysis.
        :rtype: Project
        """
        return self._project

    @project.setter
    def project(self, project):
        """Sets the project of this Analysis.


        :param project: The project of this Analysis.
        :type project: Project
        """

        self._project = project

    @property
    def results_url(self):
        """Gets the results_url of this Analysis.

        A page on LGTM to view the results of this analysis.

        :return: The results_url of this Analysis.
        :rtype: str
        """
        return self._results_url

    @results_url.setter
    def results_url(self, results_url):
        """Sets the results_url of this Analysis.

        A page on LGTM to view the results of this analysis.

        :param results_url: The results_url of this Analysis.
        :type results_url: str
        """

        self._results_url = results_url
