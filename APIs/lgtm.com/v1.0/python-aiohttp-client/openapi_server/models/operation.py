# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.operation_task_result import OperationTaskResult
from openapi_server.models.upload_session import UploadSession
from openapi_server import util


class Operation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, status: str=None, task_result: OperationTaskResult=None, task_result_url: str=None, task_type: str=None, uploads: Dict[str, UploadSession]=None):
        """Operation - a model defined in OpenAPI

        :param id: The id of this Operation.
        :param status: The status of this Operation.
        :param task_result: The task_result of this Operation.
        :param task_result_url: The task_result_url of this Operation.
        :param task_type: The task_type of this Operation.
        :param uploads: The uploads of this Operation.
        """
        self.openapi_types = {
            'id': int,
            'status': str,
            'task_result': OperationTaskResult,
            'task_result_url': str,
            'task_type': str,
            'uploads': Dict[str, UploadSession]
        }

        self.attribute_map = {
            'id': 'id',
            'status': 'status',
            'task_result': 'task-result',
            'task_result_url': 'task-result-url',
            'task_type': 'task-type',
            'uploads': 'uploads'
        }

        self._id = id
        self._status = status
        self._task_result = task_result
        self._task_result_url = task_result_url
        self._task_type = task_type
        self._uploads = uploads

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Operation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The operation of this Operation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this Operation.

        The identifier for the operation.

        :return: The id of this Operation.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Operation.

        The identifier for the operation.

        :param id: The id of this Operation.
        :type id: int
        """

        self._id = id

    @property
    def status(self):
        """Gets the status of this Operation.

        Status of the operation.

        :return: The status of this Operation.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Operation.

        Status of the operation.

        :param status: The status of this Operation.
        :type status: str
        """
        allowed_values = ["pending", "done"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def task_result(self):
        """Gets the task_result of this Operation.


        :return: The task_result of this Operation.
        :rtype: OperationTaskResult
        """
        return self._task_result

    @task_result.setter
    def task_result(self, task_result):
        """Sets the task_result of this Operation.


        :param task_result: The task_result of this Operation.
        :type task_result: OperationTaskResult
        """

        self._task_result = task_result

    @property
    def task_result_url(self):
        """Gets the task_result_url of this Operation.

        The URL for the result of the task. For some operations, included only on completion.

        :return: The task_result_url of this Operation.
        :rtype: str
        """
        return self._task_result_url

    @task_result_url.setter
    def task_result_url(self, task_result_url):
        """Sets the task_result_url of this Operation.

        The URL for the result of the task. For some operations, included only on completion.

        :param task_result_url: The task_result_url of this Operation.
        :type task_result_url: str
        """

        self._task_result_url = task_result_url

    @property
    def task_type(self):
        """Gets the task_type of this Operation.


        :return: The task_type of this Operation.
        :rtype: str
        """
        return self._task_type

    @task_type.setter
    def task_type(self, task_type):
        """Sets the task_type of this Operation.


        :param task_type: The task_type of this Operation.
        :type task_type: str
        """
        allowed_values = ["analysis", "codereview", "queryjob"]  # noqa: E501
        if task_type not in allowed_values:
            raise ValueError(
                "Invalid value for `task_type` ({0}), must be one of {1}"
                .format(task_type, allowed_values)
            )

        self._task_type = task_type

    @property
    def uploads(self):
        """Gets the uploads of this Operation.


        :return: The uploads of this Operation.
        :rtype: Dict[str, UploadSession]
        """
        return self._uploads

    @uploads.setter
    def uploads(self, uploads):
        """Sets the uploads of this Operation.


        :param uploads: The uploads of this Operation.
        :type uploads: Dict[str, UploadSession]
        """

        self._uploads = uploads
