# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class QueryjobStats(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, failed: int=None, pending: int=None, success_with_result: int=None, success_without_result: int=None, successful: int=None):
        """QueryjobStats - a model defined in OpenAPI

        :param failed: The failed of this QueryjobStats.
        :param pending: The pending of this QueryjobStats.
        :param success_with_result: The success_with_result of this QueryjobStats.
        :param success_without_result: The success_without_result of this QueryjobStats.
        :param successful: The successful of this QueryjobStats.
        """
        self.openapi_types = {
            'failed': int,
            'pending': int,
            'success_with_result': int,
            'success_without_result': int,
            'successful': int
        }

        self.attribute_map = {
            'failed': 'failed',
            'pending': 'pending',
            'success_with_result': 'success-with-result',
            'success_without_result': 'success-without-result',
            'successful': 'successful'
        }

        self._failed = failed
        self._pending = pending
        self._success_with_result = success_with_result
        self._success_without_result = success_without_result
        self._successful = successful

    @classmethod
    def from_dict(cls, dikt: dict) -> 'QueryjobStats':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The queryjob_stats of this QueryjobStats.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def failed(self):
        """Gets the failed of this QueryjobStats.

        The number of projects for which the query failed.

        :return: The failed of this QueryjobStats.
        :rtype: int
        """
        return self._failed

    @failed.setter
    def failed(self, failed):
        """Sets the failed of this QueryjobStats.

        The number of projects for which the query failed.

        :param failed: The failed of this QueryjobStats.
        :type failed: int
        """

        self._failed = failed

    @property
    def pending(self):
        """Gets the pending of this QueryjobStats.

        The number of projects scheduled for execution but pending. For very large jobs, not all projects are scheduled at the same time. Therefore, this number might increase as more projects are scheduled. This means that `successful + failed + pending` might be smaller than the total number of project that will be analyzed. 

        :return: The pending of this QueryjobStats.
        :rtype: int
        """
        return self._pending

    @pending.setter
    def pending(self, pending):
        """Sets the pending of this QueryjobStats.

        The number of projects scheduled for execution but pending. For very large jobs, not all projects are scheduled at the same time. Therefore, this number might increase as more projects are scheduled. This means that `successful + failed + pending` might be smaller than the total number of project that will be analyzed. 

        :param pending: The pending of this QueryjobStats.
        :type pending: int
        """

        self._pending = pending

    @property
    def success_with_result(self):
        """Gets the success_with_result of this QueryjobStats.

        The number of projects for which the query returned results.

        :return: The success_with_result of this QueryjobStats.
        :rtype: int
        """
        return self._success_with_result

    @success_with_result.setter
    def success_with_result(self, success_with_result):
        """Sets the success_with_result of this QueryjobStats.

        The number of projects for which the query returned results.

        :param success_with_result: The success_with_result of this QueryjobStats.
        :type success_with_result: int
        """

        self._success_with_result = success_with_result

    @property
    def success_without_result(self):
        """Gets the success_without_result of this QueryjobStats.

        The number of projects for which the query was successful but returned no results.

        :return: The success_without_result of this QueryjobStats.
        :rtype: int
        """
        return self._success_without_result

    @success_without_result.setter
    def success_without_result(self, success_without_result):
        """Sets the success_without_result of this QueryjobStats.

        The number of projects for which the query was successful but returned no results.

        :param success_without_result: The success_without_result of this QueryjobStats.
        :type success_without_result: int
        """

        self._success_without_result = success_without_result

    @property
    def successful(self):
        """Gets the successful of this QueryjobStats.

        The number of projects for which the query completed succesfully. These are broken down further between the ones that have results (`success-with-result`) and the ones that do not (`success-without-result`): `successful = success-with-result + success-without-result`. 

        :return: The successful of this QueryjobStats.
        :rtype: int
        """
        return self._successful

    @successful.setter
    def successful(self, successful):
        """Sets the successful of this QueryjobStats.

        The number of projects for which the query completed succesfully. These are broken down further between the ones that have results (`success-with-result`) and the ones that do not (`success-without-result`): `successful = success-with-result + success-without-result`. 

        :param successful: The successful of this QueryjobStats.
        :type successful: int
        """

        self._successful = successful
