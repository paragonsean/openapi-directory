# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LanguageStats(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, alerts: int=None, analysis_date: datetime=None, commit_date: datetime=None, commit_id: str=None, language: str=None, lines: int=None, status: str=None):
        """LanguageStats - a model defined in OpenAPI

        :param alerts: The alerts of this LanguageStats.
        :param analysis_date: The analysis_date of this LanguageStats.
        :param commit_date: The commit_date of this LanguageStats.
        :param commit_id: The commit_id of this LanguageStats.
        :param language: The language of this LanguageStats.
        :param lines: The lines of this LanguageStats.
        :param status: The status of this LanguageStats.
        """
        self.openapi_types = {
            'alerts': int,
            'analysis_date': datetime,
            'commit_date': datetime,
            'commit_id': str,
            'language': str,
            'lines': int,
            'status': str
        }

        self.attribute_map = {
            'alerts': 'alerts',
            'analysis_date': 'analysis-date',
            'commit_date': 'commit-date',
            'commit_id': 'commit-id',
            'language': 'language',
            'lines': 'lines',
            'status': 'status'
        }

        self._alerts = alerts
        self._analysis_date = analysis_date
        self._commit_date = commit_date
        self._commit_id = commit_id
        self._language = language
        self._lines = lines
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LanguageStats':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The language-stats of this LanguageStats.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def alerts(self):
        """Gets the alerts of this LanguageStats.

        The number of alerts for this language.

        :return: The alerts of this LanguageStats.
        :rtype: int
        """
        return self._alerts

    @alerts.setter
    def alerts(self, alerts):
        """Sets the alerts of this LanguageStats.

        The number of alerts for this language.

        :param alerts: The alerts of this LanguageStats.
        :type alerts: int
        """

        self._alerts = alerts

    @property
    def analysis_date(self):
        """Gets the analysis_date of this LanguageStats.

        The time the commit was analyzed.

        :return: The analysis_date of this LanguageStats.
        :rtype: datetime
        """
        return self._analysis_date

    @analysis_date.setter
    def analysis_date(self, analysis_date):
        """Sets the analysis_date of this LanguageStats.

        The time the commit was analyzed.

        :param analysis_date: The analysis_date of this LanguageStats.
        :type analysis_date: datetime
        """

        self._analysis_date = analysis_date

    @property
    def commit_date(self):
        """Gets the commit_date of this LanguageStats.

        The time of the commit.

        :return: The commit_date of this LanguageStats.
        :rtype: datetime
        """
        return self._commit_date

    @commit_date.setter
    def commit_date(self, commit_date):
        """Sets the commit_date of this LanguageStats.

        The time of the commit.

        :param commit_date: The commit_date of this LanguageStats.
        :type commit_date: datetime
        """

        self._commit_date = commit_date

    @property
    def commit_id(self):
        """Gets the commit_id of this LanguageStats.

        The latest successfully analyzed commit for the language. All statistics refer to this commit.

        :return: The commit_id of this LanguageStats.
        :rtype: str
        """
        return self._commit_id

    @commit_id.setter
    def commit_id(self, commit_id):
        """Sets the commit_id of this LanguageStats.

        The latest successfully analyzed commit for the language. All statistics refer to this commit.

        :param commit_id: The commit_id of this LanguageStats.
        :type commit_id: str
        """

        self._commit_id = commit_id

    @property
    def language(self):
        """Gets the language of this LanguageStats.

        The short name for the language.

        :return: The language of this LanguageStats.
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this LanguageStats.

        The short name for the language.

        :param language: The language of this LanguageStats.
        :type language: str
        """

        self._language = language

    @property
    def lines(self):
        """Gets the lines of this LanguageStats.

        The number of lines of code for this language.

        :return: The lines of this LanguageStats.
        :rtype: int
        """
        return self._lines

    @lines.setter
    def lines(self, lines):
        """Sets the lines of this LanguageStats.

        The number of lines of code for this language.

        :param lines: The lines of this LanguageStats.
        :type lines: int
        """

        self._lines = lines

    @property
    def status(self):
        """Gets the status of this LanguageStats.

        The status of the analysis of this language.

        :return: The status of this LanguageStats.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this LanguageStats.

        The status of the analysis of this language.

        :param status: The status of this LanguageStats.
        :type status: str
        """
        allowed_values = ["success", "failure", "pending"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status
