# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.codereview_alerts import CodereviewAlerts
from openapi_server import util


class CodereviewLanguages(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, alerts: List[CodereviewAlerts]=None, fixed: int=None, language: str=None, new: int=None, status: str=None, status_message: str=None):
        """CodereviewLanguages - a model defined in OpenAPI

        :param alerts: The alerts of this CodereviewLanguages.
        :param fixed: The fixed of this CodereviewLanguages.
        :param language: The language of this CodereviewLanguages.
        :param new: The new of this CodereviewLanguages.
        :param status: The status of this CodereviewLanguages.
        :param status_message: The status_message of this CodereviewLanguages.
        """
        self.openapi_types = {
            'alerts': List[CodereviewAlerts],
            'fixed': int,
            'language': str,
            'new': int,
            'status': str,
            'status_message': str
        }

        self.attribute_map = {
            'alerts': 'alerts',
            'fixed': 'fixed',
            'language': 'language',
            'new': 'new',
            'status': 'status',
            'status_message': 'status-message'
        }

        self._alerts = alerts
        self._fixed = fixed
        self._language = language
        self._new = new
        self._status = status
        self._status_message = status_message

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CodereviewLanguages':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The codereview_languages of this CodereviewLanguages.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def alerts(self):
        """Gets the alerts of this CodereviewLanguages.

        The list of added and fixed alerts per query for this language.

        :return: The alerts of this CodereviewLanguages.
        :rtype: List[CodereviewAlerts]
        """
        return self._alerts

    @alerts.setter
    def alerts(self, alerts):
        """Sets the alerts of this CodereviewLanguages.

        The list of added and fixed alerts per query for this language.

        :param alerts: The alerts of this CodereviewLanguages.
        :type alerts: List[CodereviewAlerts]
        """

        self._alerts = alerts

    @property
    def fixed(self):
        """Gets the fixed of this CodereviewLanguages.

        The total number of alerts fixed by the patch for this language.

        :return: The fixed of this CodereviewLanguages.
        :rtype: int
        """
        return self._fixed

    @fixed.setter
    def fixed(self, fixed):
        """Sets the fixed of this CodereviewLanguages.

        The total number of alerts fixed by the patch for this language.

        :param fixed: The fixed of this CodereviewLanguages.
        :type fixed: int
        """

        self._fixed = fixed

    @property
    def language(self):
        """Gets the language of this CodereviewLanguages.

        The language analyzed.

        :return: The language of this CodereviewLanguages.
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this CodereviewLanguages.

        The language analyzed.

        :param language: The language of this CodereviewLanguages.
        :type language: str
        """

        self._language = language

    @property
    def new(self):
        """Gets the new of this CodereviewLanguages.

        The total number of alerts introduced by the patch for this language.

        :return: The new of this CodereviewLanguages.
        :rtype: int
        """
        return self._new

    @new.setter
    def new(self, new):
        """Sets the new of this CodereviewLanguages.

        The total number of alerts introduced by the patch for this language.

        :param new: The new of this CodereviewLanguages.
        :type new: int
        """

        self._new = new

    @property
    def status(self):
        """Gets the status of this CodereviewLanguages.

        The status for analysis of this language.

        :return: The status of this CodereviewLanguages.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this CodereviewLanguages.

        The status for analysis of this language.

        :param status: The status of this CodereviewLanguages.
        :type status: str
        """
        allowed_values = ["pending", "failure", "success"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def status_message(self):
        """Gets the status_message of this CodereviewLanguages.

        The current state of analysis of this langauge. When available, a summary of analysis results.

        :return: The status_message of this CodereviewLanguages.
        :rtype: str
        """
        return self._status_message

    @status_message.setter
    def status_message(self, status_message):
        """Sets the status_message of this CodereviewLanguages.

        The current state of analysis of this langauge. When available, a summary of analysis results.

        :param status_message: The status_message of this CodereviewLanguages.
        :type status_message: str
        """

        self._status_message = status_message
