# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.codereview_languages import CodereviewLanguages
from openapi_server import util


class CodeReview(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, languages: List[CodereviewLanguages]=None, results_url: str=None, status: str=None, status_message: str=None):
        """CodeReview - a model defined in OpenAPI

        :param id: The id of this CodeReview.
        :param languages: The languages of this CodeReview.
        :param results_url: The results_url of this CodeReview.
        :param status: The status of this CodeReview.
        :param status_message: The status_message of this CodeReview.
        """
        self.openapi_types = {
            'id': str,
            'languages': List[CodereviewLanguages],
            'results_url': str,
            'status': str,
            'status_message': str
        }

        self.attribute_map = {
            'id': 'id',
            'languages': 'languages',
            'results_url': 'results-url',
            'status': 'status',
            'status_message': 'status-message'
        }

        self._id = id
        self._languages = languages
        self._results_url = results_url
        self._status = status
        self._status_message = status_message

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CodeReview':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The code-review of this CodeReview.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this CodeReview.

        The identifier for the review.

        :return: The id of this CodeReview.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CodeReview.

        The identifier for the review.

        :param id: The id of this CodeReview.
        :type id: str
        """

        self._id = id

    @property
    def languages(self):
        """Gets the languages of this CodeReview.

        Detailed information for each language analyzed.

        :return: The languages of this CodeReview.
        :rtype: List[CodereviewLanguages]
        """
        return self._languages

    @languages.setter
    def languages(self, languages):
        """Sets the languages of this CodeReview.

        Detailed information for each language analyzed.

        :param languages: The languages of this CodeReview.
        :type languages: List[CodereviewLanguages]
        """

        self._languages = languages

    @property
    def results_url(self):
        """Gets the results_url of this CodeReview.

        A page on LGTM to view the status and results of this code review.

        :return: The results_url of this CodeReview.
        :rtype: str
        """
        return self._results_url

    @results_url.setter
    def results_url(self, results_url):
        """Sets the results_url of this CodeReview.

        A page on LGTM to view the status and results of this code review.

        :param results_url: The results_url of this CodeReview.
        :type results_url: str
        """

        self._results_url = results_url

    @property
    def status(self):
        """Gets the status of this CodeReview.

        The status of the code review.

        :return: The status of this CodeReview.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this CodeReview.

        The status of the code review.

        :param status: The status of this CodeReview.
        :type status: str
        """
        allowed_values = ["pending", "failure", "success"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def status_message(self):
        """Gets the status_message of this CodeReview.

        A summary of the current status of the code review.

        :return: The status_message of this CodeReview.
        :rtype: str
        """
        return self._status_message

    @status_message.setter
    def status_message(self, status_message):
        """Sets the status_message of this CodeReview.

        A summary of the current status of the code review.

        :param status_message: The status_message of this CodeReview.
        :type status_message: str
        """

        self._status_message = status_message
