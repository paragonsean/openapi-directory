# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.project import Project
from openapi_server import util


class QueryjobResultsOverviewEntry(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, error: str=None, external: int=None, internal: int=None, project: Project=None, status: str=None, total: int=None):
        """QueryjobResultsOverviewEntry - a model defined in OpenAPI

        :param error: The error of this QueryjobResultsOverviewEntry.
        :param external: The external of this QueryjobResultsOverviewEntry.
        :param internal: The internal of this QueryjobResultsOverviewEntry.
        :param project: The project of this QueryjobResultsOverviewEntry.
        :param status: The status of this QueryjobResultsOverviewEntry.
        :param total: The total of this QueryjobResultsOverviewEntry.
        """
        self.openapi_types = {
            'error': str,
            'external': int,
            'internal': int,
            'project': Project,
            'status': str,
            'total': int
        }

        self.attribute_map = {
            'error': 'error',
            'external': 'external',
            'internal': 'internal',
            'project': 'project',
            'status': 'status',
            'total': 'total'
        }

        self._error = error
        self._external = external
        self._internal = internal
        self._project = project
        self._status = status
        self._total = total

    @classmethod
    def from_dict(cls, dikt: dict) -> 'QueryjobResultsOverviewEntry':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The queryjob-results-overview-entry of this QueryjobResultsOverviewEntry.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def error(self):
        """Gets the error of this QueryjobResultsOverviewEntry.

        Error message. Only applies if `status` is `error`.

        :return: The error of this QueryjobResultsOverviewEntry.
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this QueryjobResultsOverviewEntry.

        Error message. Only applies if `status` is `error`.

        :param error: The error of this QueryjobResultsOverviewEntry.
        :type error: str
        """

        self._error = error

    @property
    def external(self):
        """Gets the external of this QueryjobResultsOverviewEntry.

        Number of results that refer to elements outside the source tree (e.g., libraries). Only applies if `status` is `success`.

        :return: The external of this QueryjobResultsOverviewEntry.
        :rtype: int
        """
        return self._external

    @external.setter
    def external(self, external):
        """Sets the external of this QueryjobResultsOverviewEntry.

        Number of results that refer to elements outside the source tree (e.g., libraries). Only applies if `status` is `success`.

        :param external: The external of this QueryjobResultsOverviewEntry.
        :type external: int
        """

        self._external = external

    @property
    def internal(self):
        """Gets the internal of this QueryjobResultsOverviewEntry.

        Number of results that refer to elements within the source tree. Only applies if `status` is `success`.

        :return: The internal of this QueryjobResultsOverviewEntry.
        :rtype: int
        """
        return self._internal

    @internal.setter
    def internal(self, internal):
        """Sets the internal of this QueryjobResultsOverviewEntry.

        Number of results that refer to elements within the source tree. Only applies if `status` is `success`.

        :param internal: The internal of this QueryjobResultsOverviewEntry.
        :type internal: int
        """

        self._internal = internal

    @property
    def project(self):
        """Gets the project of this QueryjobResultsOverviewEntry.


        :return: The project of this QueryjobResultsOverviewEntry.
        :rtype: Project
        """
        return self._project

    @project.setter
    def project(self, project):
        """Sets the project of this QueryjobResultsOverviewEntry.


        :param project: The project of this QueryjobResultsOverviewEntry.
        :type project: Project
        """

        self._project = project

    @property
    def status(self):
        """Gets the status of this QueryjobResultsOverviewEntry.

        Describes whether the query was sucessfully executed against the project.

        :return: The status of this QueryjobResultsOverviewEntry.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this QueryjobResultsOverviewEntry.

        Describes whether the query was sucessfully executed against the project.

        :param status: The status of this QueryjobResultsOverviewEntry.
        :type status: str
        """
        allowed_values = ["success", "error"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def total(self):
        """Gets the total of this QueryjobResultsOverviewEntry.

        Number of results returned by the query. This is broken down further into `internal` and `external` results. Only applies if `status` is `success`. 

        :return: The total of this QueryjobResultsOverviewEntry.
        :rtype: int
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this QueryjobResultsOverviewEntry.

        Number of results returned by the query. This is broken down further into `internal` and `external` results. Only applies if `status` is `success`. 

        :param total: The total of this QueryjobResultsOverviewEntry.
        :type total: int
        """

        self._total = total
