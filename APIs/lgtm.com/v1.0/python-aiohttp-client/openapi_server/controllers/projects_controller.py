from typing import List, Dict
from aiohttp import web

from openapi_server.models.operation import Operation
from openapi_server.models.project_details import ProjectDetails
from openapi_server.models.project_list import ProjectList
from openapi_server import util


async def add_project(request: web.Request, repository, language=None, mode=None, commit=None, _date=None, worker_label=None, body=None) -> web.Response:
    """Add a project to LGTM

    LGTM administrators can add a new project to LGTM by providing a repository URL. By default, LGTM tries to build and analyze the project in the same way as for projects added through the user interface. If at least one language is successfully analyzed, and the repository doesn&#39;t already exist on LGTM, a new project is created. If the project already exists but your API call triggers a successful analysis  of additional languages, LGTM adds those languages to the project.  You can configure how LGTM processes the project using query parameters to:   * Specify the languages to analyze.   * Create a new project in [sparse mode](https://help.semmle.com/lgtm-enterprise/user/help/analysis-faqs.html#what-is-sparse-analysis).   * Create a new project in [upload mode](https://help.semmle.com/lgtm-enterprise/user/help/analysis-faqs.html#what-is-upload-analysis) to analyze externally-generated databases. Each database represents a snapshot of the codebase.    Use this option when you want to upload databases that were generated by the CodeQL CLI (or the QL command-line tools).   The version of the command line used to generate the database   must be the same version as LGTM Enterprise.   With any of these options, you can also include an &#x60;lgtm.yml&#x60; in the body of the request to [customize extraction](https://lgtm.com/help/lgtm/customizing-code-extraction). 

    :param repository: The URL of the repository to analyze. LGTM tests this against the [repository providers](https://lgtm.com/admin/help/adding-repository-providers) defined for the system. If it doesn&#39;t match any of them, the request fails.
    :type repository: str
    :param language: Optional, a [language code](https://lgtm.com/help/lgtm/analysis-faqs#which-languages-are-supported) to specify which language to analyze. To request the analysis of more than one language, specify a query parameter for each language. By default, LGTM tries to analyze all supported languages. 
    :type language: List[str]
    :param mode: The analysis mode of the new project. When set to &#x60;full&#x60; all commits of the project are analyzed; when set to &#x60;sparse&#x60; the latest commit of the project is analyzed periodically; when set to &#x60;upload&#x60;,  no automatic analysis is performed, instead externally-generated databases should be uploaded. For new projects the default value is &#x60;full&#x60;. The &#x60;mode&#x60; parameter cannot be used to change the analysis mode of existing projects. Therefore, for existing projects, it should either be left blank or set to match the analysis mode of the project. 
    :type mode: str
    :param commit: Required when &#x60;mode&#x3D;upload&#x60;, specify the identifier of the commit used to generate the database.
    :type commit: str
    :param _date: Optional when &#x60;mode&#x3D;upload&#x60;, specify the date and time of the commit used to generate the database; defaults to the current time.
    :type _date: str
    :param worker_label: Optional, any [labels](https://lgtm.com/admin/help/defining-worker-labels) required by workers to analyze this project.  To specify more than one label, repeat the query parameter. 
    :type worker_label: List[str]
    :param body: An optional [lgtm.yml project configuration](https://lgtm.com/help/lgtm/lgtm.yml-configuration-file) file to customize the LGTM code analysis and results display for the project.
    :type body: str

    """
    _date = util.deserialize_datetime(_date)
    return web.Response(status=200)


async def delete_project(request: web.Request, project_id) -> web.Response:
    """Delete project by numeric identifier

    Delete a project with a particular numeric project identifier. In addition to access to the project, administrative access to LGTM or the LGTM Enterprise instance is required to delete projects. 

    :param project_id: The numeric project identifier
    :type project_id: int

    """
    return web.Response(status=200)


async def get_project(request: web.Request, project_id) -> web.Response:
    """Get project by numeric identifier

    Get the latest summary for a specific project using the numeric project identifier.  To find the LGTM identifier for a project, list all projects using the &#x60;/projects&#x60;  endpoint and look up the project by name. Alternatively, use the &#x60;/projects/{provider}/{org}/{name}&#x60; endpoint. If you have administration access, the project identifier is also displayed in  the administration page for the project. 

    :param project_id: The numeric project identifier
    :type project_id: int

    """
    return web.Response(status=200)


async def get_project_by_url_identifier(request: web.Request, provider, org, name) -> web.Response:
    """Get project by URL identifier

    Get the latest summary for a specific project using the project&#39;s URL identifier &#x60;{provider}/{org}/{name}&#x60;.  To find the URL identifier for a project, view the project overview page in LGTM. The URL identifier follows after &#x60;/projects&#x60;. For example, for a project with the URL &#x60;https://lgtm.example.com/projects/g/apache/commons-io&#x60; the URL identifier is &#x60;g/apache/commons-io&#x60;. In the example, &#x60;g&#x60; represents the &#x60;provider&#x60; (repository host), &#x60;apache&#x60; is the &#x60;organization&#x60; and &#x60;commons-io&#x60; is the &#x60;name&#x60; of the repository. 

    :param provider: The first part of the URL identifier of a project, which represents the repository host.
    :type provider: str
    :param org: The second part of the URL identifier of a project, the organization.
    :type org: str
    :param name: The third part of the URL identifier of a project, the repository name.
    :type name: str

    """
    return web.Response(status=200)


async def get_project_config(request: web.Request, project_id, source=None) -> web.Response:
    """Get configuration for a project identified by numeric identifier

    Get the latest configuration for a specific project using the numeric project identifier.

    :param project_id: The numeric project identifier
    :type project_id: int
    :param source: The type of project configuration to retrieve. If this parameter isn&#39;t specified, the request retrieves the effective configuration. That is, the configuration that is actually applied to the project, which may be from: * the repository * the administrator-set, project configuration * the global configuration.  If you do specify this value, it must be one of:   * &#x60;repository&#x60; to retrieve the configuration specified by a YAML file in the repository. A 404 status is returned if there is no repository configuration.    * &#x60;administrator&#x60; to retrieve the administrator-set, project configuration. A 404 status is returned if there is no administrator configuration. 
    :type source: str

    """
    return web.Response(status=200)


async def get_projects(request: web.Request, limit=None, start=None) -> web.Response:
    """List projects

    List all the projects the current user has authorization to view.   A maximum of 100 projects are returned in each response. When further results are available, the response includes the URL you need to request the next page of results.  Use the optional parameter, &#x60;limit&#x60;, to change the number of results reported in each response (range of 1&amp;mdash;100). If you supply an invalid value for this  parameter, the default value of 100 is used.  When more than one page of results is available, each response includes a &#x60;nextPageUrl&#x60; response parameter. You can use this URL to request the next page of results. The &#x60;nextPageUrl&#x60; includes an automatically generated &#x60;start&#x60; parameter, which specifies the projects to return in the next page of results. 

    :param limit: The maximum number of projects to return in each response (1-100).
    :type limit: int
    :param start: An opaque identifier generated by the API.
    :type start: str

    """
    return web.Response(status=200)


async def set_project_config(request: web.Request, project_id, body) -> web.Response:
    """Set the administrator configuration for a project identified by numeric identifier

    Set the administrator configuration for a specific project using the numeric project identifier.

    :param project_id: The numeric project identifier
    :type project_id: int
    :param body: The project configuration to set. Note that this only sets the administrator project configuration. It can be overridden by the repository configuration. In addition to access to the project, administrative access to LGTM or the LGTM Enterprise instance is required to set administrator project configurations. 
    :type body: str

    """
    return web.Response(status=200)
