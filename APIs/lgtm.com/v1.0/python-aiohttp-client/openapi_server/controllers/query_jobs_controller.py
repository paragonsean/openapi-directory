from typing import List, Dict
from aiohttp import web

from openapi_server.models.operation import Operation
from openapi_server.models.queryjob import Queryjob
from openapi_server.models.queryjob_project_results import QueryjobProjectResults
from openapi_server.models.queryjob_results_overview import QueryjobResultsOverview
from openapi_server import util


async def create_query_job(request: web.Request, language, body, project_id=None, projects_list=None) -> web.Response:
    """Run a CodeQL query on one or more projects

    Submit a query to run on one or more projects on LGTM. The query is included in the body of the request. 

    :param language: The [language](https://lgtm.com/help/lgtm/analysis-faqs#which-languages-are-supported) you want to analyze. 
    :type language: str
    :param body: The query to run.
    :type body: str
    :param project_id: The identifier of the project to analyze. Either &#x60;project-id&#x60; or &#x60;projects-list&#x60; must be specified.
    :type project_id: List[int]
    :param projects_list: Name of the list containing the projects to analyze. Either &#x60;project-id&#x60; or &#x60;projects-list&#x60; must be specified.
    :type projects_list: str

    """
    return web.Response(status=200)


async def get_query_job(request: web.Request, queryjob_id) -> web.Response:
    """Get the status of a query job

    Get the status of a query job using the query job identifier for the task.  When you create a query job, the response includes a task result URL of the form: &#x60;/queryjobs/{queryjob-id}&#x60;. 

    :param queryjob_id: The identifier of the query job, from the &#x60;task-result&#x60; given in the response to the initial &#x60;POST /queryjobs&#x60; request.
    :type queryjob_id: str

    """
    return web.Response(status=200)


async def get_query_job_results_for_project(request: web.Request, queryjob_id, project_id, start=None, limit=None, nofilter=None) -> web.Response:
    """Fetch the results of a query job for a specific project

    Fetch the results for a specific project. The endpoint succeeds only if the query was successful,  and returns a &#x60;404&#x60; error otherwise.  By default, the endpoint provides only results that are within the source tree. To obtain all results, specify the &#x60;nofilter&#x60; parameter. 

    :param queryjob_id: The identifier of the query job, from the &#x60;task-result&#x60; given in the response to the initial &#x60;POST /queryjobs&#x60; request.
    :type queryjob_id: str
    :param project_id: The identifier for the project.
    :type project_id: str
    :param start: Start point for the page of results.
    :type start: int
    :param limit: The maximum number of results to display (less than 100).
    :type limit: int
    :param nofilter: Include results that are not part of the source tree. These results are filtered out by default.
    :type nofilter: bool

    """
    return web.Response(status=200)


async def get_query_job_results_overview(request: web.Request, queryjob_id, start=None, limit=None, filter=None) -> web.Response:
    """Provide a summary of results for the projects in the query job

    This endpoint provides a summary of the results generated by completed query runs for each  project specified in the the POST /queryjobs endpoint.  For completed query jobs, the summary includes:    * The number of results for successful query runs.   * Error information for failed query runs.  No information is included in the response for any project for which the query  run is still in progress. 

    :param queryjob_id: The identifier of the query job, from the &#x60;task-result&#x60; given in the response to the initial &#x60;POST /queryjobs&#x60; request.
    :type queryjob_id: str
    :param start: An opaque identifier generated by the API used for pagination.  This identifier will be included as part of the response for this endpoint whenever more than one page of results is available.  
    :type start: str
    :param limit: The number of results to return. Useful for pagination.
    :type limit: int
    :param filter: Only return a subset of results. Legal values are &#x60;w-results&#x60;, &#x60;wo-results&#x60;, &#x60;error&#x60;.
    :type filter: str

    """
    return web.Response(status=200)
