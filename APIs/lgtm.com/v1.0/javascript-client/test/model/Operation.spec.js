/**
 * LGTM API specification
 * The REST API for LGTM provides data so that you can customize how you integrate LGTM analysis into your workflow. It includes the following resources:   * `/` ([API root](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-API-root))&mdash;get version information or download the specification in OpenAPI format.   * `/projects` ([Projects](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Projects))&mdash;list projects, get a summary of the current status for a project, or add new projects.   * `/analyses` ([Analyses](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Analyses))&mdash;get a summary of results, download all the alerts, or trigger analysis for a specific commit.   * `/codereviews` ([Code reviews](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Code-reviews))&mdash;trigger code review for a patch, and view the results.   * `/operations` ([Operations](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Operations))&mdash;get information about long-running tasks, for example, analyses or code reviews that you've requested.   * `/snapshots` ([Snapshots](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Snapshots))&mdash;download and upload databases representing a snapshot of a codebase.   * `/queryjobs` ([Query jobs](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Query-jobs))&mdash;submit queries to evaluate against existing projects, and download their results.   * `/system` ([System](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-System))&mdash;get information on the health or usage of the system.  For an overview and getting started topics, see [API for LGTM](https://lgtm.com/help/lgtm/api/api-for-lgtm). 
 *
 * The version of the OpenAPI document: v1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.LgtmApiSpecification);
  }
}(this, function(expect, LgtmApiSpecification) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new LgtmApiSpecification.Operation();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Operation', function() {
    it('should create an instance of Operation', function() {
      // uncomment below and update the code to test Operation
      //var instance = new LgtmApiSpecification.Operation();
      //expect(instance).to.be.a(LgtmApiSpecification.Operation);
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new LgtmApiSpecification.Operation();
      //expect(instance).to.be();
    });

    it('should have the property status (base name: "status")', function() {
      // uncomment below and update the code to test the property status
      //var instance = new LgtmApiSpecification.Operation();
      //expect(instance).to.be();
    });

    it('should have the property taskResult (base name: "task-result")', function() {
      // uncomment below and update the code to test the property taskResult
      //var instance = new LgtmApiSpecification.Operation();
      //expect(instance).to.be();
    });

    it('should have the property taskResultUrl (base name: "task-result-url")', function() {
      // uncomment below and update the code to test the property taskResultUrl
      //var instance = new LgtmApiSpecification.Operation();
      //expect(instance).to.be();
    });

    it('should have the property taskType (base name: "task-type")', function() {
      // uncomment below and update the code to test the property taskType
      //var instance = new LgtmApiSpecification.Operation();
      //expect(instance).to.be();
    });

    it('should have the property uploads (base name: "uploads")', function() {
      // uncomment below and update the code to test the property uploads
      //var instance = new LgtmApiSpecification.Operation();
      //expect(instance).to.be();
    });

  });

}));
