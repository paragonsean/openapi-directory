/**
 * LGTM API specification
 * The REST API for LGTM provides data so that you can customize how you integrate LGTM analysis into your workflow. It includes the following resources:   * `/` ([API root](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-API-root))&mdash;get version information or download the specification in OpenAPI format.   * `/projects` ([Projects](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Projects))&mdash;list projects, get a summary of the current status for a project, or add new projects.   * `/analyses` ([Analyses](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Analyses))&mdash;get a summary of results, download all the alerts, or trigger analysis for a specific commit.   * `/codereviews` ([Code reviews](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Code-reviews))&mdash;trigger code review for a patch, and view the results.   * `/operations` ([Operations](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Operations))&mdash;get information about long-running tasks, for example, analyses or code reviews that you've requested.   * `/snapshots` ([Snapshots](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Snapshots))&mdash;download and upload databases representing a snapshot of a codebase.   * `/queryjobs` ([Query jobs](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Query-jobs))&mdash;submit queries to evaluate against existing projects, and download their results.   * `/system` ([System](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-System))&mdash;get information on the health or usage of the system.  For an overview and getting started topics, see [API for LGTM](https://lgtm.com/help/lgtm/api/api-for-lgtm). 
 *
 * The version of the OpenAPI document: v1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Analysis from '../model/Analysis';
import Operation from '../model/Operation';

/**
* Analyses service.
* @module api/AnalysesApi
* @version v1.0
*/
export default class AnalysesApi {

    /**
    * Constructs a new AnalysesApi. 
    * @alias module:api/AnalysesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getAlerts operation.
     * @callback module:api/AnalysesApi~getAlertsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get detailed alert information
     * Download all the alerts found by an analysis. Use the `Accept:` request header to specify the output media type as either CSV or [SARIF](https://lgtm.com/help/lgtm/sarif-results-file):   - `application/sarif+json`: Alerts in SARIF format. If no version is specified the latest supported SARIF version is used. - `application/json`: Alerts in SARIF format (*deprecated*).    If no version is specified, [SARIF 2.0.0](http://docs.oasis-open.org/sarif/sarif/v2.0/sarif-v2.0.html)    is used for backwards compatibility.  - `text/csv`: Alerts in CSV format. The `text/csv` media type has two optional parameters:    - `charset`: determines the character encoding of the text, by default UTF-8.    - `header`: determines whether a header row with column names is `present` or `absent`.       The default value for this parameter is `present`.       For example, an Accept header with value `text/csv; header=absent`        would result in CSV output without a header row.         To find the analysis identifier for a commit, use the `/analyses/{project-id}/commits/{commit-id}`  endpoint. For more information, see [Get analysis summary for a specific commit](https://lgtm.com/help/lgtm/api/api-v1#opIdgetAnalysisForCommit).  
     * @param {String} analysisId The analysis identifier.
     * @param {Object} opts Optional parameters
     * @param {String} [sarifVersion] The desired version of the SARIF format. Currently supported versions are `1.0.0`, `2.0.0`, and `2.1.0`.
     * @param {Boolean} [excludedFiles = false)] Set `true` to include results in files that are excluded from the output by default. This includes results in test code and generated files. For more information, see [File classification](https://lgtm.com/help/lgtm/file-classification).
     * @param {module:api/AnalysesApi~getAlertsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getAlerts(analysisId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'analysisId' is set
      if (analysisId === undefined || analysisId === null) {
        throw new Error("Missing the required parameter 'analysisId' when calling getAlerts");
      }

      let pathParams = {
        'analysis-id': analysisId
      };
      let queryParams = {
        'sarif-version': opts['sarifVersion'],
        'excluded-files': opts['excludedFiles']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access-token'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/sarif+json', 'text/csv'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/analyses/{analysis-id}/alerts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAnalysis operation.
     * @callback module:api/AnalysesApi~getAnalysisCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Analysis} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get analysis summary
     * Get a summary of the analysis results for a specific analysis identifier.  To find the analysis identifier for a commit, use the `/analyses/{project-id}/commits/{commit-id}` endpoint. For more information, see [Get analysis summary for a specific commit](https://lgtm.com/help/lgtm/api/api-v1#opIdgetAnalysisForCommit).  This endpoint reports the commit analyzed and a summary of the results for each language. Alternatively, you can use this identifier to download full details  of all the alerts found by the analysis. For more information, see [Get detailed alert information](https://lgtm.com/help/lgtm/api/api-v1#opIdgetAlerts). 
     * @param {String} analysisId The analysis identifier.
     * @param {module:api/AnalysesApi~getAnalysisCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Analysis}
     */
    getAnalysis(analysisId, callback) {
      let postBody = null;
      // verify the required parameter 'analysisId' is set
      if (analysisId === undefined || analysisId === null) {
        throw new Error("Missing the required parameter 'analysisId' when calling getAnalysis");
      }

      let pathParams = {
        'analysis-id': analysisId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Analysis;
      return this.apiClient.callApi(
        '/analyses/{analysis-id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAnalysisForCommit operation.
     * @callback module:api/AnalysesApi~getAnalysisForCommitCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Analysis} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get analysis summary for a specific commit
     * Get a summary of the analysis results for a specific commit, or the latest commit, to a project. (For projects configured for sparse or upload analysis, only `latest` is supported.)   This endpoint reports a summary of results for each language, and also the analysis identifier. You can use the analysis identifier to download full details of all the alerts  found by the analysis. For more information, see [Get detailed alert information](https://lgtm.com/help/lgtm/api/api-v1#opIdgetAlerts). 
     * @param {Number} projectId The numeric project identifier.
     * @param {String} commitId The identifier of a specific commit. Alternatively, use `latest` for the most recent analyzed commit.
     * @param {module:api/AnalysesApi~getAnalysisForCommitCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Analysis}
     */
    getAnalysisForCommit(projectId, commitId, callback) {
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling getAnalysisForCommit");
      }
      // verify the required parameter 'commitId' is set
      if (commitId === undefined || commitId === null) {
        throw new Error("Missing the required parameter 'commitId' when calling getAnalysisForCommit");
      }

      let pathParams = {
        'project-id': projectId,
        'commit-id': commitId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Analysis;
      return this.apiClient.callApi(
        '/analyses/{project-id}/commits/{commit-id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the requestAnalysis operation.
     * @callback module:api/AnalysesApi~requestAnalysisCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Operation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Run analysis of a specific commit
     * Trigger the analysis of a specific commit to a project. If a previous attempt to analyze that commit failed, this triggers a fresh analysis.  This is supported for all LGTM projects, regardless of repository type or host. The commit must be available in the main repository, but can be on a branch that isn't tracked by LGTM. For both LGTM.com and LGTM Enterprise, you must include an access token with the `analyses:write` scope.  When you request the analysis of a commit, the API returns: - `operation-id`: used to track the status of the task using the `/operations` endpoint. For more information, see [Get operation status](https://lgtm.com/help/lgtm/api/api-v1#opIdgetOperation). - `status`: initially pending. - `task-result`: containing information about the progress and results of the analysis. 
     * @param {Number} projectId The numeric project identifier.
     * @param {String} commit The identifier of the commit to analyze.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [language] The language codes of the languages to analyze. For a list of available languages, see [Supported languages](https://lgtm.com/help/lgtm/analysis-faqs#which-languages-are-supported). To specify more than one language, this parameter can be repeated. If no language is specified, all the project's languages will be analyzed. 
     * @param {module:api/AnalysesApi~requestAnalysisCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Operation}
     */
    requestAnalysis(projectId, commit, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling requestAnalysis");
      }
      // verify the required parameter 'commit' is set
      if (commit === undefined || commit === null) {
        throw new Error("Missing the required parameter 'commit' when calling requestAnalysis");
      }

      let pathParams = {
        'project-id': projectId
      };
      let queryParams = {
        'commit': commit,
        'language': this.apiClient.buildCollectionParam(opts['language'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Operation;
      return this.apiClient.callApi(
        '/analyses/{project-id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
