/**
 * LGTM API specification
 * The REST API for LGTM provides data so that you can customize how you integrate LGTM analysis into your workflow. It includes the following resources:   * `/` ([API root](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-API-root))&mdash;get version information or download the specification in OpenAPI format.   * `/projects` ([Projects](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Projects))&mdash;list projects, get a summary of the current status for a project, or add new projects.   * `/analyses` ([Analyses](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Analyses))&mdash;get a summary of results, download all the alerts, or trigger analysis for a specific commit.   * `/codereviews` ([Code reviews](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Code-reviews))&mdash;trigger code review for a patch, and view the results.   * `/operations` ([Operations](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Operations))&mdash;get information about long-running tasks, for example, analyses or code reviews that you've requested.   * `/snapshots` ([Snapshots](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Snapshots))&mdash;download and upload databases representing a snapshot of a codebase.   * `/queryjobs` ([Query jobs](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Query-jobs))&mdash;submit queries to evaluate against existing projects, and download their results.   * `/system` ([System](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-System))&mdash;get information on the health or usage of the system.  For an overview and getting started topics, see [API for LGTM](https://lgtm.com/help/lgtm/api/api-for-lgtm). 
 *
 * The version of the OpenAPI document: v1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Operation from '../model/Operation';
import ProjectDetails from '../model/ProjectDetails';
import ProjectList from '../model/ProjectList';

/**
* Projects service.
* @module api/ProjectsApi
* @version v1.0
*/
export default class ProjectsApi {

    /**
    * Constructs a new ProjectsApi. 
    * @alias module:api/ProjectsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addProject operation.
     * @callback module:api/ProjectsApi~addProjectCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Operation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a project to LGTM
     * LGTM administrators can add a new project to LGTM by providing a repository URL. By default, LGTM tries to build and analyze the project in the same way as for projects added through the user interface. If at least one language is successfully analyzed, and the repository doesn't already exist on LGTM, a new project is created. If the project already exists but your API call triggers a successful analysis  of additional languages, LGTM adds those languages to the project.  You can configure how LGTM processes the project using query parameters to:   * Specify the languages to analyze.   * Create a new project in [sparse mode](https://help.semmle.com/lgtm-enterprise/user/help/analysis-faqs.html#what-is-sparse-analysis).   * Create a new project in [upload mode](https://help.semmle.com/lgtm-enterprise/user/help/analysis-faqs.html#what-is-upload-analysis) to analyze externally-generated databases. Each database represents a snapshot of the codebase.    Use this option when you want to upload databases that were generated by the CodeQL CLI (or the QL command-line tools).   The version of the command line used to generate the database   must be the same version as LGTM Enterprise.   With any of these options, you can also include an `lgtm.yml` in the body of the request to [customize extraction](https://lgtm.com/help/lgtm/customizing-code-extraction). 
     * @param {String} repository The URL of the repository to analyze. LGTM tests this against the [repository providers](https://lgtm.com/admin/help/adding-repository-providers) defined for the system. If it doesn't match any of them, the request fails.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [language] Optional, a [language code](https://lgtm.com/help/lgtm/analysis-faqs#which-languages-are-supported) to specify which language to analyze. To request the analysis of more than one language, specify a query parameter for each language. By default, LGTM tries to analyze all supported languages. 
     * @param {module:model/String} [mode] The analysis mode of the new project. When set to `full` all commits of the project are analyzed; when set to `sparse` the latest commit of the project is analyzed periodically; when set to `upload`,  no automatic analysis is performed, instead externally-generated databases should be uploaded. For new projects the default value is `full`. The `mode` parameter cannot be used to change the analysis mode of existing projects. Therefore, for existing projects, it should either be left blank or set to match the analysis mode of the project. 
     * @param {String} [commit] Required when `mode=upload`, specify the identifier of the commit used to generate the database.
     * @param {Date} [date] Optional when `mode=upload`, specify the date and time of the commit used to generate the database; defaults to the current time.
     * @param {Array.<String>} [workerLabel] Optional, any [labels](https://lgtm.com/admin/help/defining-worker-labels) required by workers to analyze this project.  To specify more than one label, repeat the query parameter. 
     * @param {String} [body] An optional [lgtm.yml project configuration](https://lgtm.com/help/lgtm/lgtm.yml-configuration-file) file to customize the LGTM code analysis and results display for the project.
     * @param {module:api/ProjectsApi~addProjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Operation}
     */
    addProject(repository, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'repository' is set
      if (repository === undefined || repository === null) {
        throw new Error("Missing the required parameter 'repository' when calling addProject");
      }

      let pathParams = {
      };
      let queryParams = {
        'repository': repository,
        'language': this.apiClient.buildCollectionParam(opts['language'], 'multi'),
        'mode': opts['mode'],
        'commit': opts['commit'],
        'date': opts['date'],
        'worker-label': this.apiClient.buildCollectionParam(opts['workerLabel'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access-token'];
      let contentTypes = ['application/x-yaml'];
      let accepts = ['application/json'];
      let returnType = Operation;
      return this.apiClient.callApi(
        '/projects', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteProject operation.
     * @callback module:api/ProjectsApi~deleteProjectCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProjectDetails} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete project by numeric identifier
     * Delete a project with a particular numeric project identifier. In addition to access to the project, administrative access to LGTM or the LGTM Enterprise instance is required to delete projects. 
     * @param {Number} projectId The numeric project identifier
     * @param {module:api/ProjectsApi~deleteProjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProjectDetails}
     */
    deleteProject(projectId, callback) {
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling deleteProject");
      }

      let pathParams = {
        'project-id': projectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProjectDetails;
      return this.apiClient.callApi(
        '/projects/{project-id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProject operation.
     * @callback module:api/ProjectsApi~getProjectCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProjectDetails} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get project by numeric identifier
     * Get the latest summary for a specific project using the numeric project identifier.  To find the LGTM identifier for a project, list all projects using the `/projects`  endpoint and look up the project by name. Alternatively, use the `/projects/{provider}/{org}/{name}` endpoint. If you have administration access, the project identifier is also displayed in  the administration page for the project. 
     * @param {Number} projectId The numeric project identifier
     * @param {module:api/ProjectsApi~getProjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProjectDetails}
     */
    getProject(projectId, callback) {
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling getProject");
      }

      let pathParams = {
        'project-id': projectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProjectDetails;
      return this.apiClient.callApi(
        '/projects/{project-id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProjectByUrlIdentifier operation.
     * @callback module:api/ProjectsApi~getProjectByUrlIdentifierCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProjectDetails} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get project by URL identifier
     * Get the latest summary for a specific project using the project's URL identifier `{provider}/{org}/{name}`.  To find the URL identifier for a project, view the project overview page in LGTM. The URL identifier follows after `/projects`. For example, for a project with the URL `https://lgtm.example.com/projects/g/apache/commons-io` the URL identifier is `g/apache/commons-io`. In the example, `g` represents the `provider` (repository host), `apache` is the `organization` and `commons-io` is the `name` of the repository. 
     * @param {String} provider The first part of the URL identifier of a project, which represents the repository host.
     * @param {String} org The second part of the URL identifier of a project, the organization.
     * @param {String} name The third part of the URL identifier of a project, the repository name.
     * @param {module:api/ProjectsApi~getProjectByUrlIdentifierCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProjectDetails}
     */
    getProjectByUrlIdentifier(provider, org, name, callback) {
      let postBody = null;
      // verify the required parameter 'provider' is set
      if (provider === undefined || provider === null) {
        throw new Error("Missing the required parameter 'provider' when calling getProjectByUrlIdentifier");
      }
      // verify the required parameter 'org' is set
      if (org === undefined || org === null) {
        throw new Error("Missing the required parameter 'org' when calling getProjectByUrlIdentifier");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling getProjectByUrlIdentifier");
      }

      let pathParams = {
        'provider': provider,
        'org': org,
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProjectDetails;
      return this.apiClient.callApi(
        '/projects/{provider}/{org}/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProjectConfig operation.
     * @callback module:api/ProjectsApi~getProjectConfigCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get configuration for a project identified by numeric identifier
     * Get the latest configuration for a specific project using the numeric project identifier.
     * @param {Number} projectId The numeric project identifier
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [source] The type of project configuration to retrieve. If this parameter isn't specified, the request retrieves the effective configuration. That is, the configuration that is actually applied to the project, which may be from: * the repository * the administrator-set, project configuration * the global configuration.  If you do specify this value, it must be one of:   * `repository` to retrieve the configuration specified by a YAML file in the repository. A 404 status is returned if there is no repository configuration.    * `administrator` to retrieve the administrator-set, project configuration. A 404 status is returned if there is no administrator configuration. 
     * @param {module:api/ProjectsApi~getProjectConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getProjectConfig(projectId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling getProjectConfig");
      }

      let pathParams = {
        'project-id': projectId
      };
      let queryParams = {
        'source': opts['source']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access-token'];
      let contentTypes = [];
      let accepts = ['application/x-yaml', 'application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/projects/{project-id}/settings/analysis-configuration', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProjects operation.
     * @callback module:api/ProjectsApi~getProjectsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProjectList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List projects
     * List all the projects the current user has authorization to view.   A maximum of 100 projects are returned in each response. When further results are available, the response includes the URL you need to request the next page of results.  Use the optional parameter, `limit`, to change the number of results reported in each response (range of 1&mdash;100). If you supply an invalid value for this  parameter, the default value of 100 is used.  When more than one page of results is available, each response includes a `nextPageUrl` response parameter. You can use this URL to request the next page of results. The `nextPageUrl` includes an automatically generated `start` parameter, which specifies the projects to return in the next page of results. 
     * @param {Object} opts Optional parameters
     * @param {Number} [limit = 100)] The maximum number of projects to return in each response (1-100).
     * @param {String} [start] An opaque identifier generated by the API.
     * @param {module:api/ProjectsApi~getProjectsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProjectList}
     */
    getProjects(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'start': opts['start']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProjectList;
      return this.apiClient.callApi(
        '/projects', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setProjectConfig operation.
     * @callback module:api/ProjectsApi~setProjectConfigCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set the administrator configuration for a project identified by numeric identifier
     * Set the administrator configuration for a specific project using the numeric project identifier.
     * @param {Number} projectId The numeric project identifier
     * @param {String} body The project configuration to set. Note that this only sets the administrator project configuration. It can be overridden by the repository configuration. In addition to access to the project, administrative access to LGTM or the LGTM Enterprise instance is required to set administrator project configurations. 
     * @param {module:api/ProjectsApi~setProjectConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    setProjectConfig(projectId, body, callback) {
      let postBody = body;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling setProjectConfig");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling setProjectConfig");
      }

      let pathParams = {
        'project-id': projectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access-token'];
      let contentTypes = ['application/x-yaml'];
      let accepts = ['application/x-yaml'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/projects/{project-id}/settings/analysis-configuration', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
