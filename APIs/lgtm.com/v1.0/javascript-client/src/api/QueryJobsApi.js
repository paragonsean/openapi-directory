/**
 * LGTM API specification
 * The REST API for LGTM provides data so that you can customize how you integrate LGTM analysis into your workflow. It includes the following resources:   * `/` ([API root](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-API-root))&mdash;get version information or download the specification in OpenAPI format.   * `/projects` ([Projects](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Projects))&mdash;list projects, get a summary of the current status for a project, or add new projects.   * `/analyses` ([Analyses](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Analyses))&mdash;get a summary of results, download all the alerts, or trigger analysis for a specific commit.   * `/codereviews` ([Code reviews](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Code-reviews))&mdash;trigger code review for a patch, and view the results.   * `/operations` ([Operations](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Operations))&mdash;get information about long-running tasks, for example, analyses or code reviews that you've requested.   * `/snapshots` ([Snapshots](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Snapshots))&mdash;download and upload databases representing a snapshot of a codebase.   * `/queryjobs` ([Query jobs](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Query-jobs))&mdash;submit queries to evaluate against existing projects, and download their results.   * `/system` ([System](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-System))&mdash;get information on the health or usage of the system.  For an overview and getting started topics, see [API for LGTM](https://lgtm.com/help/lgtm/api/api-for-lgtm). 
 *
 * The version of the OpenAPI document: v1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Operation from '../model/Operation';
import Queryjob from '../model/Queryjob';
import QueryjobProjectResults from '../model/QueryjobProjectResults';
import QueryjobResultsOverview from '../model/QueryjobResultsOverview';

/**
* QueryJobs service.
* @module api/QueryJobsApi
* @version v1.0
*/
export default class QueryJobsApi {

    /**
    * Constructs a new QueryJobsApi. 
    * @alias module:api/QueryJobsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createQueryJob operation.
     * @callback module:api/QueryJobsApi~createQueryJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Operation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Run a CodeQL query on one or more projects
     * Submit a query to run on one or more projects on LGTM. The query is included in the body of the request. 
     * @param {String} language The [language](https://lgtm.com/help/lgtm/analysis-faqs#which-languages-are-supported) you want to analyze. 
     * @param {String} body The query to run.
     * @param {Object} opts Optional parameters
     * @param {Array.<Number>} [projectId] The identifier of the project to analyze. Either `project-id` or `projects-list` must be specified.
     * @param {String} [projectsList] Name of the list containing the projects to analyze. Either `project-id` or `projects-list` must be specified.
     * @param {module:api/QueryJobsApi~createQueryJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Operation}
     */
    createQueryJob(language, body, opts, callback) {
      opts = opts || {};
      let postBody = body;
      // verify the required parameter 'language' is set
      if (language === undefined || language === null) {
        throw new Error("Missing the required parameter 'language' when calling createQueryJob");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createQueryJob");
      }

      let pathParams = {
      };
      let queryParams = {
        'language': language,
        'project-id': this.apiClient.buildCollectionParam(opts['projectId'], 'multi'),
        'projects-list': opts['projectsList']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access-token'];
      let contentTypes = ['text/plain'];
      let accepts = ['application/json'];
      let returnType = Operation;
      return this.apiClient.callApi(
        '/queryjobs', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getQueryJob operation.
     * @callback module:api/QueryJobsApi~getQueryJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Queryjob} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the status of a query job
     * Get the status of a query job using the query job identifier for the task.  When you create a query job, the response includes a task result URL of the form: `/queryjobs/{queryjob-id}`. 
     * @param {String} queryjobId The identifier of the query job, from the `task-result` given in the response to the initial `POST /queryjobs` request.
     * @param {module:api/QueryJobsApi~getQueryJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Queryjob}
     */
    getQueryJob(queryjobId, callback) {
      let postBody = null;
      // verify the required parameter 'queryjobId' is set
      if (queryjobId === undefined || queryjobId === null) {
        throw new Error("Missing the required parameter 'queryjobId' when calling getQueryJob");
      }

      let pathParams = {
        'queryjob-id': queryjobId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Queryjob;
      return this.apiClient.callApi(
        '/queryjobs/{queryjob-id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getQueryJobResultsForProject operation.
     * @callback module:api/QueryJobsApi~getQueryJobResultsForProjectCallback
     * @param {String} error Error message, if any.
     * @param {module:model/QueryjobProjectResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch the results of a query job for a specific project
     * Fetch the results for a specific project. The endpoint succeeds only if the query was successful,  and returns a `404` error otherwise.  By default, the endpoint provides only results that are within the source tree. To obtain all results, specify the `nofilter` parameter. 
     * @param {String} queryjobId The identifier of the query job, from the `task-result` given in the response to the initial `POST /queryjobs` request.
     * @param {String} projectId The identifier for the project.
     * @param {Object} opts Optional parameters
     * @param {Number} [start] Start point for the page of results.
     * @param {Number} [limit = 100)] The maximum number of results to display (less than 100).
     * @param {Boolean} [nofilter = false)] Include results that are not part of the source tree. These results are filtered out by default.
     * @param {module:api/QueryJobsApi~getQueryJobResultsForProjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/QueryjobProjectResults}
     */
    getQueryJobResultsForProject(queryjobId, projectId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'queryjobId' is set
      if (queryjobId === undefined || queryjobId === null) {
        throw new Error("Missing the required parameter 'queryjobId' when calling getQueryJobResultsForProject");
      }
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling getQueryJobResultsForProject");
      }

      let pathParams = {
        'queryjob-id': queryjobId,
        'project-id': projectId
      };
      let queryParams = {
        'start': opts['start'],
        'limit': opts['limit'],
        'nofilter': opts['nofilter']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = QueryjobProjectResults;
      return this.apiClient.callApi(
        '/queryjobs/{queryjob-id}/results/{project-id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getQueryJobResultsOverview operation.
     * @callback module:api/QueryJobsApi~getQueryJobResultsOverviewCallback
     * @param {String} error Error message, if any.
     * @param {module:model/QueryjobResultsOverview} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Provide a summary of results for the projects in the query job
     * This endpoint provides a summary of the results generated by completed query runs for each  project specified in the the POST /queryjobs endpoint.  For completed query jobs, the summary includes:    * The number of results for successful query runs.   * Error information for failed query runs.  No information is included in the response for any project for which the query  run is still in progress. 
     * @param {String} queryjobId The identifier of the query job, from the `task-result` given in the response to the initial `POST /queryjobs` request.
     * @param {Object} opts Optional parameters
     * @param {String} [start] An opaque identifier generated by the API used for pagination.  This identifier will be included as part of the response for this endpoint whenever more than one page of results is available.  
     * @param {Number} [limit = 100)] The number of results to return. Useful for pagination.
     * @param {String} [filter] Only return a subset of results. Legal values are `w-results`, `wo-results`, `error`.
     * @param {module:api/QueryJobsApi~getQueryJobResultsOverviewCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/QueryjobResultsOverview}
     */
    getQueryJobResultsOverview(queryjobId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'queryjobId' is set
      if (queryjobId === undefined || queryjobId === null) {
        throw new Error("Missing the required parameter 'queryjobId' when calling getQueryJobResultsOverview");
      }

      let pathParams = {
        'queryjob-id': queryjobId
      };
      let queryParams = {
        'start': opts['start'],
        'limit': opts['limit'],
        'filter': opts['filter']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = QueryjobResultsOverview;
      return this.apiClient.callApi(
        '/queryjobs/{queryjob-id}/results', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
