/**
 * LGTM API specification
 * The REST API for LGTM provides data so that you can customize how you integrate LGTM analysis into your workflow. It includes the following resources:   * `/` ([API root](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-API-root))&mdash;get version information or download the specification in OpenAPI format.   * `/projects` ([Projects](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Projects))&mdash;list projects, get a summary of the current status for a project, or add new projects.   * `/analyses` ([Analyses](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Analyses))&mdash;get a summary of results, download all the alerts, or trigger analysis for a specific commit.   * `/codereviews` ([Code reviews](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Code-reviews))&mdash;trigger code review for a patch, and view the results.   * `/operations` ([Operations](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Operations))&mdash;get information about long-running tasks, for example, analyses or code reviews that you've requested.   * `/snapshots` ([Snapshots](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Snapshots))&mdash;download and upload databases representing a snapshot of a codebase.   * `/queryjobs` ([Query jobs](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Query-jobs))&mdash;submit queries to evaluate against existing projects, and download their results.   * `/system` ([System](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-System))&mdash;get information on the health or usage of the system.  For an overview and getting started topics, see [API for LGTM](https://lgtm.com/help/lgtm/api/api-for-lgtm). 
 *
 * The version of the OpenAPI document: v1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Health from '../model/Health';
import Metric from '../model/Metric';
import MetricsList from '../model/MetricsList';

/**
* System service.
* @module api/SystemApi
* @version v1.0
*/
export default class SystemApi {

    /**
    * Constructs a new SystemApi. 
    * @alias module:api/SystemApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getHealth operation.
     * @callback module:api/SystemApi~getHealthCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Health} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a summary of the application's health
     * Return an indication of whether the application is working as expected (up) or needs  attention (down).  \\> The `description` and `details` fields are reported only if the request includes an access token for a user account that has administration rights for this LGTM server. 
     * @param {module:api/SystemApi~getHealthCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Health}
     */
    getHealth(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Health;
      return this.apiClient.callApi(
        '/system/health', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMetric operation.
     * @callback module:api/SystemApi~getMetricCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Metric} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the computed values of the specified metric
     * LGTM administrators can download usage data using this endpoint. The response includes up to 1000 values for the specified metric and reports the date-time that each value was calculated. There is normally one value per day. 
     * @param {String} metricId The identifier of the metric.
     * @param {module:api/SystemApi~getMetricCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Metric}
     */
    getMetric(metricId, callback) {
      let postBody = null;
      // verify the required parameter 'metricId' is set
      if (metricId === undefined || metricId === null) {
        throw new Error("Missing the required parameter 'metricId' when calling getMetric");
      }

      let pathParams = {
        'metric-id': metricId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Metric;
      return this.apiClient.callApi(
        '/system/metrics/{metric-id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMetrics operation.
     * @callback module:api/SystemApi~getMetricsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MetricsList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the identifiers and descriptions of the usage metrics
     * LGTM administrators can use this endpoint to list the usage metrics that are available to download. 
     * @param {module:api/SystemApi~getMetricsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MetricsList}
     */
    getMetrics(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['access-token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MetricsList;
      return this.apiClient.callApi(
        '/system/metrics', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
