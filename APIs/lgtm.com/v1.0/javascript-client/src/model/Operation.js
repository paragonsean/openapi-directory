/**
 * LGTM API specification
 * The REST API for LGTM provides data so that you can customize how you integrate LGTM analysis into your workflow. It includes the following resources:   * `/` ([API root](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-API-root))&mdash;get version information or download the specification in OpenAPI format.   * `/projects` ([Projects](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Projects))&mdash;list projects, get a summary of the current status for a project, or add new projects.   * `/analyses` ([Analyses](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Analyses))&mdash;get a summary of results, download all the alerts, or trigger analysis for a specific commit.   * `/codereviews` ([Code reviews](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Code-reviews))&mdash;trigger code review for a patch, and view the results.   * `/operations` ([Operations](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Operations))&mdash;get information about long-running tasks, for example, analyses or code reviews that you've requested.   * `/snapshots` ([Snapshots](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Snapshots))&mdash;download and upload databases representing a snapshot of a codebase.   * `/queryjobs` ([Query jobs](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Query-jobs))&mdash;submit queries to evaluate against existing projects, and download their results.   * `/system` ([System](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-System))&mdash;get information on the health or usage of the system.  For an overview and getting started topics, see [API for LGTM](https://lgtm.com/help/lgtm/api/api-for-lgtm). 
 *
 * The version of the OpenAPI document: v1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import OperationTaskResult from './OperationTaskResult';
import UploadSession from './UploadSession';

/**
 * The Operation model module.
 * @module model/Operation
 * @version v1.0
 */
class Operation {
    /**
     * Constructs a new <code>Operation</code>.
     * @alias module:model/Operation
     * @param taskType {module:model/Operation.TaskTypeEnum} 
     */
    constructor(taskType) { 
        
        Operation.initialize(this, taskType);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, taskType) { 
        obj['task-type'] = taskType;
    }

    /**
     * Constructs a <code>Operation</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Operation} obj Optional instance to populate.
     * @return {module:model/Operation} The populated <code>Operation</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Operation();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('task-result')) {
                obj['task-result'] = OperationTaskResult.constructFromObject(data['task-result']);
            }
            if (data.hasOwnProperty('task-result-url')) {
                obj['task-result-url'] = ApiClient.convertToType(data['task-result-url'], 'String');
            }
            if (data.hasOwnProperty('task-type')) {
                obj['task-type'] = ApiClient.convertToType(data['task-type'], 'String');
            }
            if (data.hasOwnProperty('uploads')) {
                obj['uploads'] = ApiClient.convertToType(data['uploads'], {'String': UploadSession});
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Operation</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Operation</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Operation.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // validate the optional field `task-result`
        if (data['task-result']) { // data not null
          OperationTaskResult.validateJSON(data['task-result']);
        }
        // ensure the json data is a string
        if (data['task-result-url'] && !(typeof data['task-result-url'] === 'string' || data['task-result-url'] instanceof String)) {
            throw new Error("Expected the field `task-result-url` to be a primitive type in the JSON string but got " + data['task-result-url']);
        }
        // ensure the json data is a string
        if (data['task-type'] && !(typeof data['task-type'] === 'string' || data['task-type'] instanceof String)) {
            throw new Error("Expected the field `task-type` to be a primitive type in the JSON string but got " + data['task-type']);
        }

        return true;
    }


}

Operation.RequiredProperties = ["task-type"];

/**
 * The identifier for the operation.
 * @member {Number} id
 */
Operation.prototype['id'] = undefined;

/**
 * Status of the operation.
 * @member {module:model/Operation.StatusEnum} status
 */
Operation.prototype['status'] = undefined;

/**
 * @member {module:model/OperationTaskResult} task-result
 */
Operation.prototype['task-result'] = undefined;

/**
 * The URL for the result of the task. For some operations, included only on completion.
 * @member {String} task-result-url
 */
Operation.prototype['task-result-url'] = undefined;

/**
 * @member {module:model/Operation.TaskTypeEnum} task-type
 */
Operation.prototype['task-type'] = undefined;

/**
 * @member {Object.<String, module:model/UploadSession>} uploads
 */
Operation.prototype['uploads'] = undefined;





/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
Operation['StatusEnum'] = {

    /**
     * value: "pending"
     * @const
     */
    "pending": "pending",

    /**
     * value: "done"
     * @const
     */
    "done": "done"
};


/**
 * Allowed values for the <code>task-type</code> property.
 * @enum {String}
 * @readonly
 */
Operation['TaskTypeEnum'] = {

    /**
     * value: "analysis"
     * @const
     */
    "analysis": "analysis",

    /**
     * value: "codereview"
     * @const
     */
    "codereview": "codereview",

    /**
     * value: "queryjob"
     * @const
     */
    "queryjob": "queryjob"
};



export default Operation;

