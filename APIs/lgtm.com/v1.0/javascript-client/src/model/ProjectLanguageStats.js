/**
 * LGTM API specification
 * The REST API for LGTM provides data so that you can customize how you integrate LGTM analysis into your workflow. It includes the following resources:   * `/` ([API root](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-API-root))&mdash;get version information or download the specification in OpenAPI format.   * `/projects` ([Projects](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Projects))&mdash;list projects, get a summary of the current status for a project, or add new projects.   * `/analyses` ([Analyses](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Analyses))&mdash;get a summary of results, download all the alerts, or trigger analysis for a specific commit.   * `/codereviews` ([Code reviews](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Code-reviews))&mdash;trigger code review for a patch, and view the results.   * `/operations` ([Operations](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Operations))&mdash;get information about long-running tasks, for example, analyses or code reviews that you've requested.   * `/snapshots` ([Snapshots](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Snapshots))&mdash;download and upload databases representing a snapshot of a codebase.   * `/queryjobs` ([Query jobs](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Query-jobs))&mdash;submit queries to evaluate against existing projects, and download their results.   * `/system` ([System](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-System))&mdash;get information on the health or usage of the system.  For an overview and getting started topics, see [API for LGTM](https://lgtm.com/help/lgtm/api/api-for-lgtm). 
 *
 * The version of the OpenAPI document: v1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import LanguageStats from './LanguageStats';

/**
 * The ProjectLanguageStats model module.
 * @module model/ProjectLanguageStats
 * @version v1.0
 */
class ProjectLanguageStats {
    /**
     * Constructs a new <code>ProjectLanguageStats</code>.
     * @alias module:model/ProjectLanguageStats
     * @implements module:model/LanguageStats
     */
    constructor() { 
        LanguageStats.initialize(this);
        ProjectLanguageStats.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ProjectLanguageStats</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ProjectLanguageStats} obj Optional instance to populate.
     * @return {module:model/ProjectLanguageStats} The populated <code>ProjectLanguageStats</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ProjectLanguageStats();
            LanguageStats.constructFromObject(data, obj);

            if (data.hasOwnProperty('alerts')) {
                obj['alerts'] = ApiClient.convertToType(data['alerts'], 'Number');
            }
            if (data.hasOwnProperty('analysis-date')) {
                obj['analysis-date'] = ApiClient.convertToType(data['analysis-date'], 'Date');
            }
            if (data.hasOwnProperty('commit-date')) {
                obj['commit-date'] = ApiClient.convertToType(data['commit-date'], 'Date');
            }
            if (data.hasOwnProperty('commit-id')) {
                obj['commit-id'] = ApiClient.convertToType(data['commit-id'], 'String');
            }
            if (data.hasOwnProperty('language')) {
                obj['language'] = ApiClient.convertToType(data['language'], 'String');
            }
            if (data.hasOwnProperty('lines')) {
                obj['lines'] = ApiClient.convertToType(data['lines'], 'Number');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('grade')) {
                obj['grade'] = ApiClient.convertToType(data['grade'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ProjectLanguageStats</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ProjectLanguageStats</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['commit-id'] && !(typeof data['commit-id'] === 'string' || data['commit-id'] instanceof String)) {
            throw new Error("Expected the field `commit-id` to be a primitive type in the JSON string but got " + data['commit-id']);
        }
        // ensure the json data is a string
        if (data['language'] && !(typeof data['language'] === 'string' || data['language'] instanceof String)) {
            throw new Error("Expected the field `language` to be a primitive type in the JSON string but got " + data['language']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['grade'] && !(typeof data['grade'] === 'string' || data['grade'] instanceof String)) {
            throw new Error("Expected the field `grade` to be a primitive type in the JSON string but got " + data['grade']);
        }

        return true;
    }


}



/**
 * The number of alerts for this language.
 * @member {Number} alerts
 */
ProjectLanguageStats.prototype['alerts'] = undefined;

/**
 * The time the commit was analyzed.
 * @member {Date} analysis-date
 */
ProjectLanguageStats.prototype['analysis-date'] = undefined;

/**
 * The time of the commit.
 * @member {Date} commit-date
 */
ProjectLanguageStats.prototype['commit-date'] = undefined;

/**
 * The latest successfully analyzed commit for the language. All statistics refer to this commit.
 * @member {String} commit-id
 */
ProjectLanguageStats.prototype['commit-id'] = undefined;

/**
 * The short name for the language.
 * @member {String} language
 */
ProjectLanguageStats.prototype['language'] = undefined;

/**
 * The number of lines of code for this language.
 * @member {Number} lines
 */
ProjectLanguageStats.prototype['lines'] = undefined;

/**
 * The status of the analysis of this language.
 * @member {module:model/ProjectLanguageStats.StatusEnum} status
 */
ProjectLanguageStats.prototype['status'] = undefined;

/**
 * The grade of the code for this language.
 * @member {module:model/ProjectLanguageStats.GradeEnum} grade
 */
ProjectLanguageStats.prototype['grade'] = undefined;


// Implement LanguageStats interface:
/**
 * The number of alerts for this language.
 * @member {Number} alerts
 */
LanguageStats.prototype['alerts'] = undefined;
/**
 * The time the commit was analyzed.
 * @member {Date} analysis-date
 */
LanguageStats.prototype['analysis-date'] = undefined;
/**
 * The time of the commit.
 * @member {Date} commit-date
 */
LanguageStats.prototype['commit-date'] = undefined;
/**
 * The latest successfully analyzed commit for the language. All statistics refer to this commit.
 * @member {String} commit-id
 */
LanguageStats.prototype['commit-id'] = undefined;
/**
 * The short name for the language.
 * @member {String} language
 */
LanguageStats.prototype['language'] = undefined;
/**
 * The number of lines of code for this language.
 * @member {Number} lines
 */
LanguageStats.prototype['lines'] = undefined;
/**
 * The status of the analysis of this language.
 * @member {module:model/LanguageStats.StatusEnum} status
 */
LanguageStats.prototype['status'] = undefined;



/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
ProjectLanguageStats['StatusEnum'] = {

    /**
     * value: "success"
     * @const
     */
    "success": "success",

    /**
     * value: "failure"
     * @const
     */
    "failure": "failure",

    /**
     * value: "pending"
     * @const
     */
    "pending": "pending"
};


/**
 * Allowed values for the <code>grade</code> property.
 * @enum {String}
 * @readonly
 */
ProjectLanguageStats['GradeEnum'] = {

    /**
     * value: "A+"
     * @const
     */
    "A+": "A+",

    /**
     * value: "A"
     * @const
     */
    "A": "A",

    /**
     * value: "B"
     * @const
     */
    "B": "B",

    /**
     * value: "C"
     * @const
     */
    "C": "C",

    /**
     * value: "D"
     * @const
     */
    "D": "D",

    /**
     * value: "E"
     * @const
     */
    "E": "E"
};



export default ProjectLanguageStats;

