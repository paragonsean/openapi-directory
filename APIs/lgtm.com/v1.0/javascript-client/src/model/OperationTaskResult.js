/**
 * LGTM API specification
 * The REST API for LGTM provides data so that you can customize how you integrate LGTM analysis into your workflow. It includes the following resources:   * `/` ([API root](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-API-root))&mdash;get version information or download the specification in OpenAPI format.   * `/projects` ([Projects](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Projects))&mdash;list projects, get a summary of the current status for a project, or add new projects.   * `/analyses` ([Analyses](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Analyses))&mdash;get a summary of results, download all the alerts, or trigger analysis for a specific commit.   * `/codereviews` ([Code reviews](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Code-reviews))&mdash;trigger code review for a patch, and view the results.   * `/operations` ([Operations](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Operations))&mdash;get information about long-running tasks, for example, analyses or code reviews that you've requested.   * `/snapshots` ([Snapshots](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Snapshots))&mdash;download and upload databases representing a snapshot of a codebase.   * `/queryjobs` ([Query jobs](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Query-jobs))&mdash;submit queries to evaluate against existing projects, and download their results.   * `/system` ([System](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-System))&mdash;get information on the health or usage of the system.  For an overview and getting started topics, see [API for LGTM](https://lgtm.com/help/lgtm/api/api-for-lgtm). 
 *
 * The version of the OpenAPI document: v1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Analysis from './Analysis';
import CodeReview from './CodeReview';
import CodereviewLanguages from './CodereviewLanguages';
import Project from './Project';
import Queryjob from './Queryjob';
import QueryjobStats from './QueryjobStats';

/**
 * The OperationTaskResult model module.
 * @module model/OperationTaskResult
 * @version v1.0
 */
class OperationTaskResult {
    /**
     * Constructs a new <code>OperationTaskResult</code>.
     * @alias module:model/OperationTaskResult
     * @param {(module:model/Analysis|module:model/CodeReview|module:model/Queryjob)} instance The actual instance to initialize OperationTaskResult.
     */
    constructor(instance = null) {
        if (instance === null) {
            this.actualInstance = null;
            return;
        }
        var match = 0;
        var errorMessages = [];
        try {
            if (typeof instance === "Analysis") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                Analysis.validateJSON(instance); // throw an exception if no match
                // create Analysis from JS object
                this.actualInstance = Analysis.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into Analysis
            errorMessages.push("Failed to construct Analysis: " + err)
        }

        try {
            if (typeof instance === "CodeReview") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                CodeReview.validateJSON(instance); // throw an exception if no match
                // create CodeReview from JS object
                this.actualInstance = CodeReview.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into CodeReview
            errorMessages.push("Failed to construct CodeReview: " + err)
        }

        try {
            if (typeof instance === "Queryjob") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                Queryjob.validateJSON(instance); // throw an exception if no match
                // create Queryjob from JS object
                this.actualInstance = Queryjob.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into Queryjob
            errorMessages.push("Failed to construct Queryjob: " + err)
        }

        if (match > 1) {
            throw new Error("Multiple matches found constructing `OperationTaskResult` with oneOf schemas Analysis, CodeReview, Queryjob. Input: " + JSON.stringify(instance));
        } else if (match === 0) {
            this.actualInstance = null; // clear the actual instance in case there are multiple matches
            throw new Error("No match found constructing `OperationTaskResult` with oneOf schemas Analysis, CodeReview, Queryjob. Details: " +
                            errorMessages.join(", "));
        } else { // only 1 match
            // the input is valid
        }
    }

    /**
     * Constructs a <code>OperationTaskResult</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/OperationTaskResult} obj Optional instance to populate.
     * @return {module:model/OperationTaskResult} The populated <code>OperationTaskResult</code> instance.
     */
    static constructFromObject(data, obj) {
        return new OperationTaskResult(data);
    }

    /**
     * Gets the actual instance, which can be <code>Analysis</code>, <code>CodeReview</code>, <code>Queryjob</code>.
     * @return {(module:model/Analysis|module:model/CodeReview|module:model/Queryjob)} The actual instance.
     */
    getActualInstance() {
        return this.actualInstance;
    }

    /**
     * Sets the actual instance, which can be <code>Analysis</code>, <code>CodeReview</code>, <code>Queryjob</code>.
     * @param {(module:model/Analysis|module:model/CodeReview|module:model/Queryjob)} obj The actual instance.
     */
    setActualInstance(obj) {
       this.actualInstance = OperationTaskResult.constructFromObject(obj).getActualInstance();
    }

    /**
     * Returns the JSON representation of the actual instance.
     * @return {string}
     */
    toJSON = function(){
        return this.getActualInstance();
    }

    /**
     * Create an instance of OperationTaskResult from a JSON string.
     * @param {string} json_string JSON string.
     * @return {module:model/OperationTaskResult} An instance of OperationTaskResult.
     */
    static fromJSON = function(json_string){
        return OperationTaskResult.constructFromObject(JSON.parse(json_string));
    }
}

/**
 * The commit identifier. The commit identifier is included only if the same commit was successfully analyzed for all languages. A detailed breakdown of which commit was analyzed for each language is provided in the `languages` property. 
 * @member {String} commit-id
 */
OperationTaskResult.prototype['commit-id'] = undefined;

/**
 * The identifier for the QueryJob.
 * @member {String} id
 */
OperationTaskResult.prototype['id'] = undefined;

/**
 * Detailed information for each language analyzed.
 * @member {Array.<module:model/CodereviewLanguages>} languages
 */
OperationTaskResult.prototype['languages'] = undefined;

/**
 * A page on LGTM to view the logs for this analysis.
 * @member {String} log-url
 */
OperationTaskResult.prototype['log-url'] = undefined;

/**
 * @member {module:model/Project} project
 */
OperationTaskResult.prototype['project'] = undefined;

/**
 * A page on LGTM to view the status and results of this code review.
 * @member {String} results-url
 */
OperationTaskResult.prototype['results-url'] = undefined;

/**
 * The status of the code review.
 * @member {module:model/OperationTaskResult.StatusEnum} status
 */
OperationTaskResult.prototype['status'] = undefined;

/**
 * A summary of the current status of the code review.
 * @member {String} status-message
 */
OperationTaskResult.prototype['status-message'] = undefined;

/**
 * URL to view the result of the query job.
 * @member {String} result-url
 */
OperationTaskResult.prototype['result-url'] = undefined;

/**
 * @member {module:model/QueryjobStats} stats
 */
OperationTaskResult.prototype['stats'] = undefined;


OperationTaskResult.OneOf = ["Analysis", "CodeReview", "Queryjob"];

export default OperationTaskResult;

