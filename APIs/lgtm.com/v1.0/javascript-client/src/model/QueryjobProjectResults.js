/**
 * LGTM API specification
 * The REST API for LGTM provides data so that you can customize how you integrate LGTM analysis into your workflow. It includes the following resources:   * `/` ([API root](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-API-root))&mdash;get version information or download the specification in OpenAPI format.   * `/projects` ([Projects](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Projects))&mdash;list projects, get a summary of the current status for a project, or add new projects.   * `/analyses` ([Analyses](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Analyses))&mdash;get a summary of results, download all the alerts, or trigger analysis for a specific commit.   * `/codereviews` ([Code reviews](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Code-reviews))&mdash;trigger code review for a patch, and view the results.   * `/operations` ([Operations](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Operations))&mdash;get information about long-running tasks, for example, analyses or code reviews that you've requested.   * `/snapshots` ([Snapshots](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Snapshots))&mdash;download and upload databases representing a snapshot of a codebase.   * `/queryjobs` ([Query jobs](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Query-jobs))&mdash;submit queries to evaluate against existing projects, and download their results.   * `/system` ([System](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-System))&mdash;get information on the health or usage of the system.  For an overview and getting started topics, see [API for LGTM](https://lgtm.com/help/lgtm/api/api-for-lgtm). 
 *
 * The version of the OpenAPI document: v1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Project from './Project';
import QueryResultEntry from './QueryResultEntry';

/**
 * The QueryjobProjectResults model module.
 * @module model/QueryjobProjectResults
 * @version v1.0
 */
class QueryjobProjectResults {
    /**
     * Constructs a new <code>QueryjobProjectResults</code>.
     * @alias module:model/QueryjobProjectResults
     */
    constructor() { 
        
        QueryjobProjectResults.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>QueryjobProjectResults</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/QueryjobProjectResults} obj Optional instance to populate.
     * @return {module:model/QueryjobProjectResults} The populated <code>QueryjobProjectResults</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new QueryjobProjectResults();

            if (data.hasOwnProperty('columns')) {
                obj['columns'] = ApiClient.convertToType(data['columns'], ['String']);
            }
            if (data.hasOwnProperty('data')) {
                obj['data'] = ApiClient.convertToType(data['data'], [[QueryResultEntry]]);
            }
            if (data.hasOwnProperty('next')) {
                obj['next'] = ApiClient.convertToType(data['next'], 'String');
            }
            if (data.hasOwnProperty('project')) {
                obj['project'] = Project.constructFromObject(data['project']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>QueryjobProjectResults</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>QueryjobProjectResults</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['columns'])) {
            throw new Error("Expected the field `columns` to be an array in the JSON data but got " + data['columns']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['data'])) {
            throw new Error("Expected the field `data` to be an array in the JSON data but got " + data['data']);
        }
        // ensure the json data is a string
        if (data['next'] && !(typeof data['next'] === 'string' || data['next'] instanceof String)) {
            throw new Error("Expected the field `next` to be a primitive type in the JSON string but got " + data['next']);
        }
        // validate the optional field `project`
        if (data['project']) { // data not null
          Project.validateJSON(data['project']);
        }

        return true;
    }


}



/**
 * Columns returned by the query.
 * @member {Array.<String>} columns
 */
QueryjobProjectResults.prototype['columns'] = undefined;

/**
 * Results of the query divided by row.
 * @member {Array.<Array.<module:model/QueryResultEntry>>} data
 */
QueryjobProjectResults.prototype['data'] = undefined;

/**
 * URL for retrieving the next part of the results (if applicable).
 * @member {String} next
 */
QueryjobProjectResults.prototype['next'] = undefined;

/**
 * @member {module:model/Project} project
 */
QueryjobProjectResults.prototype['project'] = undefined;






export default QueryjobProjectResults;

