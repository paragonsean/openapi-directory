/**
 * LGTM API specification
 * The REST API for LGTM provides data so that you can customize how you integrate LGTM analysis into your workflow. It includes the following resources:   * `/` ([API root](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-API-root))&mdash;get version information or download the specification in OpenAPI format.   * `/projects` ([Projects](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Projects))&mdash;list projects, get a summary of the current status for a project, or add new projects.   * `/analyses` ([Analyses](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Analyses))&mdash;get a summary of results, download all the alerts, or trigger analysis for a specific commit.   * `/codereviews` ([Code reviews](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Code-reviews))&mdash;trigger code review for a patch, and view the results.   * `/operations` ([Operations](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Operations))&mdash;get information about long-running tasks, for example, analyses or code reviews that you've requested.   * `/snapshots` ([Snapshots](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Snapshots))&mdash;download and upload databases representing a snapshot of a codebase.   * `/queryjobs` ([Query jobs](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Query-jobs))&mdash;submit queries to evaluate against existing projects, and download their results.   * `/system` ([System](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-System))&mdash;get information on the health or usage of the system.  For an overview and getting started topics, see [API for LGTM](https://lgtm.com/help/lgtm/api/api-for-lgtm). 
 *
 * The version of the OpenAPI document: v1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import QueryjobStats from './QueryjobStats';

/**
 * The Queryjob model module.
 * @module model/Queryjob
 * @version v1.0
 */
class Queryjob {
    /**
     * Constructs a new <code>Queryjob</code>.
     * @alias module:model/Queryjob
     */
    constructor() { 
        
        Queryjob.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Queryjob</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Queryjob} obj Optional instance to populate.
     * @return {module:model/Queryjob} The populated <code>Queryjob</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Queryjob();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('result-url')) {
                obj['result-url'] = ApiClient.convertToType(data['result-url'], 'String');
            }
            if (data.hasOwnProperty('stats')) {
                obj['stats'] = QueryjobStats.constructFromObject(data['stats']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Queryjob</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Queryjob</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['result-url'] && !(typeof data['result-url'] === 'string' || data['result-url'] instanceof String)) {
            throw new Error("Expected the field `result-url` to be a primitive type in the JSON string but got " + data['result-url']);
        }
        // validate the optional field `stats`
        if (data['stats']) { // data not null
          QueryjobStats.validateJSON(data['stats']);
        }

        return true;
    }


}



/**
 * The identifier for the QueryJob.
 * @member {String} id
 */
Queryjob.prototype['id'] = undefined;

/**
 * URL to view the result of the query job.
 * @member {String} result-url
 */
Queryjob.prototype['result-url'] = undefined;

/**
 * @member {module:model/QueryjobStats} stats
 */
Queryjob.prototype['stats'] = undefined;






export default Queryjob;

