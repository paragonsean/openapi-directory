/**
 * LGTM API specification
 * The REST API for LGTM provides data so that you can customize how you integrate LGTM analysis into your workflow. It includes the following resources:   * `/` ([API root](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-API-root))&mdash;get version information or download the specification in OpenAPI format.   * `/projects` ([Projects](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Projects))&mdash;list projects, get a summary of the current status for a project, or add new projects.   * `/analyses` ([Analyses](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Analyses))&mdash;get a summary of results, download all the alerts, or trigger analysis for a specific commit.   * `/codereviews` ([Code reviews](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Code-reviews))&mdash;trigger code review for a patch, and view the results.   * `/operations` ([Operations](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Operations))&mdash;get information about long-running tasks, for example, analyses or code reviews that you've requested.   * `/snapshots` ([Snapshots](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Snapshots))&mdash;download and upload databases representing a snapshot of a codebase.   * `/queryjobs` ([Query jobs](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Query-jobs))&mdash;submit queries to evaluate against existing projects, and download their results.   * `/system` ([System](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-System))&mdash;get information on the health or usage of the system.  For an overview and getting started topics, see [API for LGTM](https://lgtm.com/help/lgtm/api/api-for-lgtm). 
 *
 * The version of the OpenAPI document: v1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from './ApiClient';
import Analysis from './model/Analysis';
import CodeReview from './model/CodeReview';
import CodereviewAlerts from './model/CodereviewAlerts';
import CodereviewLanguages from './model/CodereviewLanguages';
import Health from './model/Health';
import LanguageStats from './model/LanguageStats';
import Measurement from './model/Measurement';
import Metric from './model/Metric';
import MetricName from './model/MetricName';
import MetricsList from './model/MetricsList';
import Operation from './model/Operation';
import OperationTaskResult from './model/OperationTaskResult';
import Project from './model/Project';
import ProjectDetails from './model/ProjectDetails';
import ProjectLanguageStats from './model/ProjectLanguageStats';
import ProjectList from './model/ProjectList';
import Query from './model/Query';
import QueryProperties from './model/QueryProperties';
import QueryResultEntry from './model/QueryResultEntry';
import Queryjob from './model/Queryjob';
import QueryjobProjectResults from './model/QueryjobProjectResults';
import QueryjobResultsOverview from './model/QueryjobResultsOverview';
import QueryjobResultsOverviewEntry from './model/QueryjobResultsOverviewEntry';
import QueryjobStats from './model/QueryjobStats';
import UploadSession from './model/UploadSession';
import Version from './model/Version';
import APIRootApi from './api/APIRootApi';
import AnalysesApi from './api/AnalysesApi';
import CodeReviewsApi from './api/CodeReviewsApi';
import IssuesApi from './api/IssuesApi';
import OperationsApi from './api/OperationsApi';
import ProjectsApi from './api/ProjectsApi';
import QueryJobsApi from './api/QueryJobsApi';
import SnapshotsApi from './api/SnapshotsApi';
import SystemApi from './api/SystemApi';


/**
* The REST API for LGTM provides data so that you can customize how you integrate LGTM analysis into your workflow. It includes the following resources:   * &#x60;/&#x60; ([API root](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-API-root))&amp;mdash;get version information or download the specification in OpenAPI format.   * &#x60;/projects&#x60; ([Projects](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Projects))&amp;mdash;list projects, get a summary of the current status for a project, or add new projects.   * &#x60;/analyses&#x60; ([Analyses](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Analyses))&amp;mdash;get a summary of results, download all the alerts, or trigger analysis for a specific commit.   * &#x60;/codereviews&#x60; ([Code reviews](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Code-reviews))&amp;mdash;trigger code review for a patch, and view the results.   * &#x60;/operations&#x60; ([Operations](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Operations))&amp;mdash;get information about long-running tasks, for example, analyses or code reviews that you&#39;ve requested.   * &#x60;/snapshots&#x60; ([Snapshots](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Snapshots))&amp;mdash;download and upload databases representing a snapshot of a codebase.   * &#x60;/queryjobs&#x60; ([Query jobs](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-Query-jobs))&amp;mdash;submit queries to evaluate against existing projects, and download their results.   * &#x60;/system&#x60; ([System](https://lgtm.com/help/lgtm/api/api-v1#LGTM-API-specification-System))&amp;mdash;get information on the health or usage of the system.  For an overview and getting started topics, see [API for LGTM](https://lgtm.com/help/lgtm/api/api-for-lgtm). .<br>
* The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
* <p>
* An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
* <pre>
* var LgtmApiSpecification = require('index'); // See note below*.
* var xxxSvc = new LgtmApiSpecification.XxxApi(); // Allocate the API class we're going to use.
* var yyyModel = new LgtmApiSpecification.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
* and put the application logic within the callback function.</em>
* </p>
* <p>
* A non-AMD browser application (discouraged) might do something like this:
* <pre>
* var xxxSvc = new LgtmApiSpecification.XxxApi(); // Allocate the API class we're going to use.
* var yyy = new LgtmApiSpecification.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* </p>
* @module index
* @version v1.0
*/
export {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient,

    /**
     * The Analysis model constructor.
     * @property {module:model/Analysis}
     */
    Analysis,

    /**
     * The CodeReview model constructor.
     * @property {module:model/CodeReview}
     */
    CodeReview,

    /**
     * The CodereviewAlerts model constructor.
     * @property {module:model/CodereviewAlerts}
     */
    CodereviewAlerts,

    /**
     * The CodereviewLanguages model constructor.
     * @property {module:model/CodereviewLanguages}
     */
    CodereviewLanguages,

    /**
     * The Health model constructor.
     * @property {module:model/Health}
     */
    Health,

    /**
     * The LanguageStats model constructor.
     * @property {module:model/LanguageStats}
     */
    LanguageStats,

    /**
     * The Measurement model constructor.
     * @property {module:model/Measurement}
     */
    Measurement,

    /**
     * The Metric model constructor.
     * @property {module:model/Metric}
     */
    Metric,

    /**
     * The MetricName model constructor.
     * @property {module:model/MetricName}
     */
    MetricName,

    /**
     * The MetricsList model constructor.
     * @property {module:model/MetricsList}
     */
    MetricsList,

    /**
     * The Operation model constructor.
     * @property {module:model/Operation}
     */
    Operation,

    /**
     * The OperationTaskResult model constructor.
     * @property {module:model/OperationTaskResult}
     */
    OperationTaskResult,

    /**
     * The Project model constructor.
     * @property {module:model/Project}
     */
    Project,

    /**
     * The ProjectDetails model constructor.
     * @property {module:model/ProjectDetails}
     */
    ProjectDetails,

    /**
     * The ProjectLanguageStats model constructor.
     * @property {module:model/ProjectLanguageStats}
     */
    ProjectLanguageStats,

    /**
     * The ProjectList model constructor.
     * @property {module:model/ProjectList}
     */
    ProjectList,

    /**
     * The Query model constructor.
     * @property {module:model/Query}
     */
    Query,

    /**
     * The QueryProperties model constructor.
     * @property {module:model/QueryProperties}
     */
    QueryProperties,

    /**
     * The QueryResultEntry model constructor.
     * @property {module:model/QueryResultEntry}
     */
    QueryResultEntry,

    /**
     * The Queryjob model constructor.
     * @property {module:model/Queryjob}
     */
    Queryjob,

    /**
     * The QueryjobProjectResults model constructor.
     * @property {module:model/QueryjobProjectResults}
     */
    QueryjobProjectResults,

    /**
     * The QueryjobResultsOverview model constructor.
     * @property {module:model/QueryjobResultsOverview}
     */
    QueryjobResultsOverview,

    /**
     * The QueryjobResultsOverviewEntry model constructor.
     * @property {module:model/QueryjobResultsOverviewEntry}
     */
    QueryjobResultsOverviewEntry,

    /**
     * The QueryjobStats model constructor.
     * @property {module:model/QueryjobStats}
     */
    QueryjobStats,

    /**
     * The UploadSession model constructor.
     * @property {module:model/UploadSession}
     */
    UploadSession,

    /**
     * The Version model constructor.
     * @property {module:model/Version}
     */
    Version,

    /**
    * The APIRootApi service constructor.
    * @property {module:api/APIRootApi}
    */
    APIRootApi,

    /**
    * The AnalysesApi service constructor.
    * @property {module:api/AnalysesApi}
    */
    AnalysesApi,

    /**
    * The CodeReviewsApi service constructor.
    * @property {module:api/CodeReviewsApi}
    */
    CodeReviewsApi,

    /**
    * The IssuesApi service constructor.
    * @property {module:api/IssuesApi}
    */
    IssuesApi,

    /**
    * The OperationsApi service constructor.
    * @property {module:api/OperationsApi}
    */
    OperationsApi,

    /**
    * The ProjectsApi service constructor.
    * @property {module:api/ProjectsApi}
    */
    ProjectsApi,

    /**
    * The QueryJobsApi service constructor.
    * @property {module:api/QueryJobsApi}
    */
    QueryJobsApi,

    /**
    * The SnapshotsApi service constructor.
    * @property {module:api/SnapshotsApi}
    */
    SnapshotsApi,

    /**
    * The SystemApi service constructor.
    * @property {module:api/SystemApi}
    */
    SystemApi
};
