/**
 * Bulk Data Storage System Services
 * Bulk Data Storage System (BDSS) allows the public to discover, search, and download patent and trademark data in bulk form.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ProductFileModel model module.
 * @module model/ProductFileModel
 * @version 1.0.0
 */
class ProductFileModel {
    /**
     * Constructs a new <code>ProductFileModel</code>.
     * @alias module:model/ProductFileModel
     */
    constructor() { 
        
        ProductFileModel.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ProductFileModel</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ProductFileModel} obj Optional instance to populate.
     * @return {module:model/ProductFileModel} The populated <code>ProductFileModel</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ProductFileModel();

            if (data.hasOwnProperty('fileDownloadUrl')) {
                obj['fileDownloadUrl'] = ApiClient.convertToType(data['fileDownloadUrl'], 'String');
            }
            if (data.hasOwnProperty('fileFromTime')) {
                obj['fileFromTime'] = ApiClient.convertToType(data['fileFromTime'], 'String');
            }
            if (data.hasOwnProperty('fileIdentifier')) {
                obj['fileIdentifier'] = ApiClient.convertToType(data['fileIdentifier'], 'Number');
            }
            if (data.hasOwnProperty('fileLinkPath')) {
                obj['fileLinkPath'] = ApiClient.convertToType(data['fileLinkPath'], 'String');
            }
            if (data.hasOwnProperty('fileName')) {
                obj['fileName'] = ApiClient.convertToType(data['fileName'], 'String');
            }
            if (data.hasOwnProperty('fileReleaseDate')) {
                obj['fileReleaseDate'] = ApiClient.convertToType(data['fileReleaseDate'], 'String');
            }
            if (data.hasOwnProperty('fileSize')) {
                obj['fileSize'] = ApiClient.convertToType(data['fileSize'], 'Number');
            }
            if (data.hasOwnProperty('fileToTime')) {
                obj['fileToTime'] = ApiClient.convertToType(data['fileToTime'], 'String');
            }
            if (data.hasOwnProperty('fileType')) {
                obj['fileType'] = ApiClient.convertToType(data['fileType'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ProductFileModel</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ProductFileModel</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['fileDownloadUrl'] && !(typeof data['fileDownloadUrl'] === 'string' || data['fileDownloadUrl'] instanceof String)) {
            throw new Error("Expected the field `fileDownloadUrl` to be a primitive type in the JSON string but got " + data['fileDownloadUrl']);
        }
        // ensure the json data is a string
        if (data['fileFromTime'] && !(typeof data['fileFromTime'] === 'string' || data['fileFromTime'] instanceof String)) {
            throw new Error("Expected the field `fileFromTime` to be a primitive type in the JSON string but got " + data['fileFromTime']);
        }
        // ensure the json data is a string
        if (data['fileLinkPath'] && !(typeof data['fileLinkPath'] === 'string' || data['fileLinkPath'] instanceof String)) {
            throw new Error("Expected the field `fileLinkPath` to be a primitive type in the JSON string but got " + data['fileLinkPath']);
        }
        // ensure the json data is a string
        if (data['fileName'] && !(typeof data['fileName'] === 'string' || data['fileName'] instanceof String)) {
            throw new Error("Expected the field `fileName` to be a primitive type in the JSON string but got " + data['fileName']);
        }
        // ensure the json data is a string
        if (data['fileReleaseDate'] && !(typeof data['fileReleaseDate'] === 'string' || data['fileReleaseDate'] instanceof String)) {
            throw new Error("Expected the field `fileReleaseDate` to be a primitive type in the JSON string but got " + data['fileReleaseDate']);
        }
        // ensure the json data is a string
        if (data['fileToTime'] && !(typeof data['fileToTime'] === 'string' || data['fileToTime'] instanceof String)) {
            throw new Error("Expected the field `fileToTime` to be a primitive type in the JSON string but got " + data['fileToTime']);
        }
        // ensure the json data is a string
        if (data['fileType'] && !(typeof data['fileType'] === 'string' || data['fileType'] instanceof String)) {
            throw new Error("Expected the field `fileType` to be a primitive type in the JSON string but got " + data['fileType']);
        }

        return true;
    }


}



/**
 * @member {String} fileDownloadUrl
 */
ProductFileModel.prototype['fileDownloadUrl'] = undefined;

/**
 * @member {String} fileFromTime
 */
ProductFileModel.prototype['fileFromTime'] = undefined;

/**
 * @member {Number} fileIdentifier
 */
ProductFileModel.prototype['fileIdentifier'] = undefined;

/**
 * @member {String} fileLinkPath
 */
ProductFileModel.prototype['fileLinkPath'] = undefined;

/**
 * @member {String} fileName
 */
ProductFileModel.prototype['fileName'] = undefined;

/**
 * @member {String} fileReleaseDate
 */
ProductFileModel.prototype['fileReleaseDate'] = undefined;

/**
 * @member {Number} fileSize
 */
ProductFileModel.prototype['fileSize'] = undefined;

/**
 * @member {String} fileToTime
 */
ProductFileModel.prototype['fileToTime'] = undefined;

/**
 * @member {String} fileType
 */
ProductFileModel.prototype['fileType'] = undefined;






export default ProductFileModel;

