/**
 * Bulk Data Storage System Services
 * Bulk Data Storage System (BDSS) allows the public to discover, search, and download patent and trademark data in bulk form.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ProductFileModel from './ProductFileModel';

/**
 * The ProductModel model module.
 * @module model/ProductModel
 * @version 1.0.0
 */
class ProductModel {
    /**
     * Constructs a new <code>ProductModel</code>.
     * Product Model
     * @alias module:model/ProductModel
     */
    constructor() { 
        
        ProductModel.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ProductModel</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ProductModel} obj Optional instance to populate.
     * @return {module:model/ProductModel} The populated <code>ProductModel</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ProductModel();

            if (data.hasOwnProperty('numberOfFiles')) {
                obj['numberOfFiles'] = ApiClient.convertToType(data['numberOfFiles'], 'Number');
            }
            if (data.hasOwnProperty('parentProduct')) {
                obj['parentProduct'] = ProductModel.constructFromObject(data['parentProduct']);
            }
            if (data.hasOwnProperty('productDesc')) {
                obj['productDesc'] = ApiClient.convertToType(data['productDesc'], 'String');
            }
            if (data.hasOwnProperty('productFiles')) {
                obj['productFiles'] = ApiClient.convertToType(data['productFiles'], [ProductFileModel]);
            }
            if (data.hasOwnProperty('productFrequency')) {
                obj['productFrequency'] = ApiClient.convertToType(data['productFrequency'], 'String');
            }
            if (data.hasOwnProperty('productFromDate')) {
                obj['productFromDate'] = ApiClient.convertToType(data['productFromDate'], 'String');
            }
            if (data.hasOwnProperty('productIdentifier')) {
                obj['productIdentifier'] = ApiClient.convertToType(data['productIdentifier'], 'Number');
            }
            if (data.hasOwnProperty('productLevel')) {
                obj['productLevel'] = ApiClient.convertToType(data['productLevel'], 'String');
            }
            if (data.hasOwnProperty('productLinkPath')) {
                obj['productLinkPath'] = ApiClient.convertToType(data['productLinkPath'], 'String');
            }
            if (data.hasOwnProperty('productShortName')) {
                obj['productShortName'] = ApiClient.convertToType(data['productShortName'], 'String');
            }
            if (data.hasOwnProperty('productTitle')) {
                obj['productTitle'] = ApiClient.convertToType(data['productTitle'], 'String');
            }
            if (data.hasOwnProperty('productToDate')) {
                obj['productToDate'] = ApiClient.convertToType(data['productToDate'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ProductModel</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ProductModel</code>.
     */
    static validateJSON(data) {
        // validate the optional field `parentProduct`
        if (data['parentProduct']) { // data not null
          ProductModel.validateJSON(data['parentProduct']);
        }
        // ensure the json data is a string
        if (data['productDesc'] && !(typeof data['productDesc'] === 'string' || data['productDesc'] instanceof String)) {
            throw new Error("Expected the field `productDesc` to be a primitive type in the JSON string but got " + data['productDesc']);
        }
        if (data['productFiles']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['productFiles'])) {
                throw new Error("Expected the field `productFiles` to be an array in the JSON data but got " + data['productFiles']);
            }
            // validate the optional field `productFiles` (array)
            for (const item of data['productFiles']) {
                ProductFileModel.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['productFrequency'] && !(typeof data['productFrequency'] === 'string' || data['productFrequency'] instanceof String)) {
            throw new Error("Expected the field `productFrequency` to be a primitive type in the JSON string but got " + data['productFrequency']);
        }
        // ensure the json data is a string
        if (data['productFromDate'] && !(typeof data['productFromDate'] === 'string' || data['productFromDate'] instanceof String)) {
            throw new Error("Expected the field `productFromDate` to be a primitive type in the JSON string but got " + data['productFromDate']);
        }
        // ensure the json data is a string
        if (data['productLevel'] && !(typeof data['productLevel'] === 'string' || data['productLevel'] instanceof String)) {
            throw new Error("Expected the field `productLevel` to be a primitive type in the JSON string but got " + data['productLevel']);
        }
        // ensure the json data is a string
        if (data['productLinkPath'] && !(typeof data['productLinkPath'] === 'string' || data['productLinkPath'] instanceof String)) {
            throw new Error("Expected the field `productLinkPath` to be a primitive type in the JSON string but got " + data['productLinkPath']);
        }
        // ensure the json data is a string
        if (data['productShortName'] && !(typeof data['productShortName'] === 'string' || data['productShortName'] instanceof String)) {
            throw new Error("Expected the field `productShortName` to be a primitive type in the JSON string but got " + data['productShortName']);
        }
        // ensure the json data is a string
        if (data['productTitle'] && !(typeof data['productTitle'] === 'string' || data['productTitle'] instanceof String)) {
            throw new Error("Expected the field `productTitle` to be a primitive type in the JSON string but got " + data['productTitle']);
        }
        // ensure the json data is a string
        if (data['productToDate'] && !(typeof data['productToDate'] === 'string' || data['productToDate'] instanceof String)) {
            throw new Error("Expected the field `productToDate` to be a primitive type in the JSON string but got " + data['productToDate']);
        }

        return true;
    }


}



/**
 * @member {Number} numberOfFiles
 */
ProductModel.prototype['numberOfFiles'] = undefined;

/**
 * @member {module:model/ProductModel} parentProduct
 */
ProductModel.prototype['parentProduct'] = undefined;

/**
 * @member {String} productDesc
 */
ProductModel.prototype['productDesc'] = undefined;

/**
 * @member {Array.<module:model/ProductFileModel>} productFiles
 */
ProductModel.prototype['productFiles'] = undefined;

/**
 * @member {String} productFrequency
 */
ProductModel.prototype['productFrequency'] = undefined;

/**
 * @member {String} productFromDate
 */
ProductModel.prototype['productFromDate'] = undefined;

/**
 * @member {Number} productIdentifier
 */
ProductModel.prototype['productIdentifier'] = undefined;

/**
 * Represents the Level in the Product hierarchy.
 * @member {module:model/ProductModel.ProductLevelEnum} productLevel
 */
ProductModel.prototype['productLevel'] = undefined;

/**
 * @member {String} productLinkPath
 */
ProductModel.prototype['productLinkPath'] = undefined;

/**
 * @member {String} productShortName
 */
ProductModel.prototype['productShortName'] = undefined;

/**
 * @member {String} productTitle
 */
ProductModel.prototype['productTitle'] = undefined;

/**
 * @member {String} productToDate
 */
ProductModel.prototype['productToDate'] = undefined;





/**
 * Allowed values for the <code>productLevel</code> property.
 * @enum {String}
 * @readonly
 */
ProductModel['ProductLevelEnum'] = {

    /**
     * value: "available"
     * @const
     */
    "available": "available",

    /**
     * value: "pending"
     * @const
     */
    "pending": "pending",

    /**
     * value: "sold"
     * @const
     */
    "sold": "sold"
};



export default ProductModel;

