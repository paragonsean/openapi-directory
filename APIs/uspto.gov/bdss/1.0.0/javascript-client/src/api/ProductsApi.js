/**
 * Bulk Data Storage System Services
 * Bulk Data Storage System (BDSS) allows the public to discover, search, and download patent and trademark data in bulk form.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";

/**
* Products service.
* @module api/ProductsApi
* @version 1.0.0
*/
export default class ProductsApi {

    /**
    * Constructs a new ProductsApi. 
    * @alias module:api/ProductsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getLatestProductFilesByProductIdAndTime operation.
     * @callback module:api/ProductsApi~getLatestProductFilesByProductIdAndTimeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns products along with their latest files by short names.
     * Use this GET to search for latest released bulk data products by their short names and release year. The return response will include the latest files within the year specified.  An error message will be returned if product(s) cannot be found for the year specified
     * @param {String} shortName Short name of the product, for example, \"PTGRSP\"
     * @param {Object} opts Optional parameters
     * @param {Number} [year] Year of the product files  needed, for example, 2001.
     * @param {String} [hierarchy = 'false')] Boolean flag (possible values: true and false) to indicate if product hierarchy needs to be return in the response. By default it doesn't return the hierarchy in the response.
     * @param {module:api/ProductsApi~getLatestProductFilesByProductIdAndTimeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getLatestProductFilesByProductIdAndTime(shortName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'shortName' is set
      if (shortName === undefined || shortName === null) {
        throw new Error("Missing the required parameter 'shortName' when calling getLatestProductFilesByProductIdAndTime");
      }

      let pathParams = {
        'shortName': shortName
      };
      let queryParams = {
        'year': opts['year'],
        'hierarchy': opts['hierarchy']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/products/{shortName}/latest', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPopulartProducts operation.
     * @callback module:api/ProductsApi~getPopulartProductsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns popular products along with latest files.
     * Use this GET to retrieve these bulk data files by their popularity. The response includes product fields such as title, description, frequency, and level.
     * @param {module:api/ProductsApi~getPopulartProductsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getPopulartProducts(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/products/popular', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProductSubTree operation.
     * @callback module:api/ProductsApi~getProductSubTreeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns products' hierarchical subtree.
     * Use this GET to search for bulk data products by their short names. This works almost like products/tree GET, the difference is that it returns subtree data starting from a particular tree node (i.e. the GET returns all children if parent short name is entered). If a product cannot be found by its short name (has to be exact match and is not case sensitive), then an error message will appear in response body.
     * @param {String} shortName Short name of the product, for example, \"PTISSD\"
     * @param {module:api/ProductsApi~getProductSubTreeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getProductSubTree(shortName, callback) {
      let postBody = null;
      // verify the required parameter 'shortName' is set
      if (shortName === undefined || shortName === null) {
        throw new Error("Missing the required parameter 'shortName' when calling getProductSubTree");
      }

      let pathParams = {
        'shortName': shortName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/products/tree/{shortName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProductsByName operation.
     * @callback module:api/ProductsApi~getProductsByNameCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns files associated with products (of level PRODUCT) based on their full or partial names.
     * Use this GET to search for bulk data services by product name or description. An error message will be returned if the product cannot be found by name. Note that product name is not case sensitive. You can enter full or partial name of an existing product to receive bulk data services. Default values for field names are as follows - if both years are not defined, toYear will be set equal to current year, fromYear will be set equal to previous year - if fromYear is defined, toYear will be set equal to fromYear+1 - if fromMonth not defined, current month will be used - if toMonth not defined, it will be set equal to fromMonth - if fromDay is not defined, it will be set equal to current day (today) - if toDay is not defined, it will be set to the last day of toMonth/toYear
     * @param {String} productName Name of the product, for example, \"Trademark\"
     * @param {Object} opts Optional parameters
     * @param {Number} [fromYear] Year from when the product files are needed, for example, 1999.
     * @param {Number} [toYear] Year until when the product files are needed, for example, 2000.
     * @param {Number} [fromMonth] Month from when the product files are needed, for example, 01.
     * @param {Number} [toMonth] Month until when the product files are needed, for example, 12.
     * @param {Number} [fromDay] Day from when the product files are needed, for example, 01.
     * @param {Number} [toDay] Day until when the product files are needed, for example, 31.
     * @param {String} [hierarchy = 'false')] Boolean flag to indicate if product hierarchy needs to be return in the response. By default it doesn't return the hierarchy in the response.
     * @param {Number} [maxFiles = 20)] Max. number of files to retrieve, per product. Set value to -1 to get all files
     * @param {module:api/ProductsApi~getProductsByNameCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getProductsByName(productName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'productName' is set
      if (productName === undefined || productName === null) {
        throw new Error("Missing the required parameter 'productName' when calling getProductsByName");
      }

      let pathParams = {
        'productName': productName
      };
      let queryParams = {
        'fromYear': opts['fromYear'],
        'toYear': opts['toYear'],
        'fromMonth': opts['fromMonth'],
        'toMonth': opts['toMonth'],
        'fromDay': opts['fromDay'],
        'toDay': opts['toDay'],
        'hierarchy': opts['hierarchy'],
        'maxFiles': opts['maxFiles']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/products/byname/{productName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProductsByShortName operation.
     * @callback module:api/ProductsApi~getProductsByShortNameCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns products along with their associated files by short names.
     * Use this GET to search for bulk data products by their short names and description. Note that \"From\" and \"To\" dates can be inputted separately as year/month/day values or as a single date string in format \"YYYY-MM-DD\". If all values are entered, single date strings have a higher priority For the list of default values rules, see GET /products/byname/{productName} above
     * @param {String} shortName Short name  of the product, for example, \"PTGRSP\"
     * @param {Object} opts Optional parameters
     * @param {Number} [fromYear] Year from when the product files are needed, for example, 1999.
     * @param {Number} [toYear] Year until when the product files are needed, for example, 2000.
     * @param {Number} [fromMonth] Month from when the product files are needed, for example, 01.
     * @param {Number} [toMonth] Month until when the product files are needed, for example, 12.
     * @param {Number} [fromDay] Day from when the product files are needed, for example, 01.
     * @param {Number} [toDay] Day until when the product files are needed, for example, 31.
     * @param {String} [fromDate] Year from when the product files are needed, for example, 1999-01-01.
     * @param {String} [toDate] Year until when the product files are needed, for example, 2001-12-31.
     * @param {String} [hierarchy = 'false')] Boolean flag (possible values: true and false) to indicate if product hierarchy needs to be return in the response. By default it doesn't return the hierarchy in the response.
     * @param {module:api/ProductsApi~getProductsByShortNameCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getProductsByShortName(shortName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'shortName' is set
      if (shortName === undefined || shortName === null) {
        throw new Error("Missing the required parameter 'shortName' when calling getProductsByShortName");
      }

      let pathParams = {
        'shortName': shortName
      };
      let queryParams = {
        'fromYear': opts['fromYear'],
        'toYear': opts['toYear'],
        'fromMonth': opts['fromMonth'],
        'toMonth': opts['toMonth'],
        'fromDay': opts['fromDay'],
        'toDay': opts['toDay'],
        'fromDate': opts['fromDate'],
        'toDate': opts['toDate'],
        'hierarchy': opts['hierarchy']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/products/{shortName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProductsTree operation.
     * @callback module:api/ProductsApi~getProductsTreeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns products' hierarchical tree.
     * Use this GET to retrieve short name and parent/child relationships for bulk data products. Short names are unique IDs of the products and should be used in other GETs where {shortName} parameter is required Use this GET to perform initial exploration of the existing products hierarchy Short names are unique IDs of the products and should be used in other GETs where {shortName} parameter is required
     * @param {module:api/ProductsApi~getProductsTreeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getProductsTree(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/products/tree', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProductsWithLatestProductFiles operation.
     * @callback module:api/ProductsApi~getProductsWithLatestProductFilesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns all products with Latest Files.
     * Use this GET to retrieve latest released bulk data products. Note that there is one file per product. The response includes product fields such as title, description, frequency, and level.
     * @param {module:api/ProductsApi~getProductsWithLatestProductFilesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getProductsWithLatestProductFiles(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/products/all/latest', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
