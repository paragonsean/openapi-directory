/**
 * Bulk Data Storage System Services
 * Bulk Data Storage System (BDSS) allows the public to discover, search, and download patent and trademark data in bulk form.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProductModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProductModel::OAIProductModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProductModel::OAIProductModel() {
    this->initializeModel();
}

OAIProductModel::~OAIProductModel() {}

void OAIProductModel::initializeModel() {

    m_number_of_files_isSet = false;
    m_number_of_files_isValid = false;

    m_parent_product_isSet = false;
    m_parent_product_isValid = false;

    m_product_desc_isSet = false;
    m_product_desc_isValid = false;

    m_product_files_isSet = false;
    m_product_files_isValid = false;

    m_product_frequency_isSet = false;
    m_product_frequency_isValid = false;

    m_product_from_date_isSet = false;
    m_product_from_date_isValid = false;

    m_product_identifier_isSet = false;
    m_product_identifier_isValid = false;

    m_product_level_isSet = false;
    m_product_level_isValid = false;

    m_product_link_path_isSet = false;
    m_product_link_path_isValid = false;

    m_product_short_name_isSet = false;
    m_product_short_name_isValid = false;

    m_product_title_isSet = false;
    m_product_title_isValid = false;

    m_product_to_date_isSet = false;
    m_product_to_date_isValid = false;
}

void OAIProductModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProductModel::fromJsonObject(QJsonObject json) {

    m_number_of_files_isValid = ::OpenAPI::fromJsonValue(m_number_of_files, json[QString("numberOfFiles")]);
    m_number_of_files_isSet = !json[QString("numberOfFiles")].isNull() && m_number_of_files_isValid;

    m_parent_product_isValid = ::OpenAPI::fromJsonValue(m_parent_product, json[QString("parentProduct")]);
    m_parent_product_isSet = !json[QString("parentProduct")].isNull() && m_parent_product_isValid;

    m_product_desc_isValid = ::OpenAPI::fromJsonValue(m_product_desc, json[QString("productDesc")]);
    m_product_desc_isSet = !json[QString("productDesc")].isNull() && m_product_desc_isValid;

    m_product_files_isValid = ::OpenAPI::fromJsonValue(m_product_files, json[QString("productFiles")]);
    m_product_files_isSet = !json[QString("productFiles")].isNull() && m_product_files_isValid;

    m_product_frequency_isValid = ::OpenAPI::fromJsonValue(m_product_frequency, json[QString("productFrequency")]);
    m_product_frequency_isSet = !json[QString("productFrequency")].isNull() && m_product_frequency_isValid;

    m_product_from_date_isValid = ::OpenAPI::fromJsonValue(m_product_from_date, json[QString("productFromDate")]);
    m_product_from_date_isSet = !json[QString("productFromDate")].isNull() && m_product_from_date_isValid;

    m_product_identifier_isValid = ::OpenAPI::fromJsonValue(m_product_identifier, json[QString("productIdentifier")]);
    m_product_identifier_isSet = !json[QString("productIdentifier")].isNull() && m_product_identifier_isValid;

    m_product_level_isValid = ::OpenAPI::fromJsonValue(m_product_level, json[QString("productLevel")]);
    m_product_level_isSet = !json[QString("productLevel")].isNull() && m_product_level_isValid;

    m_product_link_path_isValid = ::OpenAPI::fromJsonValue(m_product_link_path, json[QString("productLinkPath")]);
    m_product_link_path_isSet = !json[QString("productLinkPath")].isNull() && m_product_link_path_isValid;

    m_product_short_name_isValid = ::OpenAPI::fromJsonValue(m_product_short_name, json[QString("productShortName")]);
    m_product_short_name_isSet = !json[QString("productShortName")].isNull() && m_product_short_name_isValid;

    m_product_title_isValid = ::OpenAPI::fromJsonValue(m_product_title, json[QString("productTitle")]);
    m_product_title_isSet = !json[QString("productTitle")].isNull() && m_product_title_isValid;

    m_product_to_date_isValid = ::OpenAPI::fromJsonValue(m_product_to_date, json[QString("productToDate")]);
    m_product_to_date_isSet = !json[QString("productToDate")].isNull() && m_product_to_date_isValid;
}

QString OAIProductModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProductModel::asJsonObject() const {
    QJsonObject obj;
    if (m_number_of_files_isSet) {
        obj.insert(QString("numberOfFiles"), ::OpenAPI::toJsonValue(m_number_of_files));
    }
    if (m_parent_product.isSet()) {
        obj.insert(QString("parentProduct"), ::OpenAPI::toJsonValue(m_parent_product));
    }
    if (m_product_desc_isSet) {
        obj.insert(QString("productDesc"), ::OpenAPI::toJsonValue(m_product_desc));
    }
    if (m_product_files.size() > 0) {
        obj.insert(QString("productFiles"), ::OpenAPI::toJsonValue(m_product_files));
    }
    if (m_product_frequency_isSet) {
        obj.insert(QString("productFrequency"), ::OpenAPI::toJsonValue(m_product_frequency));
    }
    if (m_product_from_date_isSet) {
        obj.insert(QString("productFromDate"), ::OpenAPI::toJsonValue(m_product_from_date));
    }
    if (m_product_identifier_isSet) {
        obj.insert(QString("productIdentifier"), ::OpenAPI::toJsonValue(m_product_identifier));
    }
    if (m_product_level_isSet) {
        obj.insert(QString("productLevel"), ::OpenAPI::toJsonValue(m_product_level));
    }
    if (m_product_link_path_isSet) {
        obj.insert(QString("productLinkPath"), ::OpenAPI::toJsonValue(m_product_link_path));
    }
    if (m_product_short_name_isSet) {
        obj.insert(QString("productShortName"), ::OpenAPI::toJsonValue(m_product_short_name));
    }
    if (m_product_title_isSet) {
        obj.insert(QString("productTitle"), ::OpenAPI::toJsonValue(m_product_title));
    }
    if (m_product_to_date_isSet) {
        obj.insert(QString("productToDate"), ::OpenAPI::toJsonValue(m_product_to_date));
    }
    return obj;
}

qint64 OAIProductModel::getNumberOfFiles() const {
    return m_number_of_files;
}
void OAIProductModel::setNumberOfFiles(const qint64 &number_of_files) {
    m_number_of_files = number_of_files;
    m_number_of_files_isSet = true;
}

bool OAIProductModel::is_number_of_files_Set() const{
    return m_number_of_files_isSet;
}

bool OAIProductModel::is_number_of_files_Valid() const{
    return m_number_of_files_isValid;
}

OAIProductModel OAIProductModel::getParentProduct() const {
    return m_parent_product;
}
void OAIProductModel::setParentProduct(const OAIProductModel &parent_product) {
    m_parent_product = parent_product;
    m_parent_product_isSet = true;
}

bool OAIProductModel::is_parent_product_Set() const{
    return m_parent_product_isSet;
}

bool OAIProductModel::is_parent_product_Valid() const{
    return m_parent_product_isValid;
}

QString OAIProductModel::getProductDesc() const {
    return m_product_desc;
}
void OAIProductModel::setProductDesc(const QString &product_desc) {
    m_product_desc = product_desc;
    m_product_desc_isSet = true;
}

bool OAIProductModel::is_product_desc_Set() const{
    return m_product_desc_isSet;
}

bool OAIProductModel::is_product_desc_Valid() const{
    return m_product_desc_isValid;
}

QList<OAIProductFileModel> OAIProductModel::getProductFiles() const {
    return m_product_files;
}
void OAIProductModel::setProductFiles(const QList<OAIProductFileModel> &product_files) {
    m_product_files = product_files;
    m_product_files_isSet = true;
}

bool OAIProductModel::is_product_files_Set() const{
    return m_product_files_isSet;
}

bool OAIProductModel::is_product_files_Valid() const{
    return m_product_files_isValid;
}

QString OAIProductModel::getProductFrequency() const {
    return m_product_frequency;
}
void OAIProductModel::setProductFrequency(const QString &product_frequency) {
    m_product_frequency = product_frequency;
    m_product_frequency_isSet = true;
}

bool OAIProductModel::is_product_frequency_Set() const{
    return m_product_frequency_isSet;
}

bool OAIProductModel::is_product_frequency_Valid() const{
    return m_product_frequency_isValid;
}

QString OAIProductModel::getProductFromDate() const {
    return m_product_from_date;
}
void OAIProductModel::setProductFromDate(const QString &product_from_date) {
    m_product_from_date = product_from_date;
    m_product_from_date_isSet = true;
}

bool OAIProductModel::is_product_from_date_Set() const{
    return m_product_from_date_isSet;
}

bool OAIProductModel::is_product_from_date_Valid() const{
    return m_product_from_date_isValid;
}

qint32 OAIProductModel::getProductIdentifier() const {
    return m_product_identifier;
}
void OAIProductModel::setProductIdentifier(const qint32 &product_identifier) {
    m_product_identifier = product_identifier;
    m_product_identifier_isSet = true;
}

bool OAIProductModel::is_product_identifier_Set() const{
    return m_product_identifier_isSet;
}

bool OAIProductModel::is_product_identifier_Valid() const{
    return m_product_identifier_isValid;
}

QString OAIProductModel::getProductLevel() const {
    return m_product_level;
}
void OAIProductModel::setProductLevel(const QString &product_level) {
    m_product_level = product_level;
    m_product_level_isSet = true;
}

bool OAIProductModel::is_product_level_Set() const{
    return m_product_level_isSet;
}

bool OAIProductModel::is_product_level_Valid() const{
    return m_product_level_isValid;
}

QString OAIProductModel::getProductLinkPath() const {
    return m_product_link_path;
}
void OAIProductModel::setProductLinkPath(const QString &product_link_path) {
    m_product_link_path = product_link_path;
    m_product_link_path_isSet = true;
}

bool OAIProductModel::is_product_link_path_Set() const{
    return m_product_link_path_isSet;
}

bool OAIProductModel::is_product_link_path_Valid() const{
    return m_product_link_path_isValid;
}

QString OAIProductModel::getProductShortName() const {
    return m_product_short_name;
}
void OAIProductModel::setProductShortName(const QString &product_short_name) {
    m_product_short_name = product_short_name;
    m_product_short_name_isSet = true;
}

bool OAIProductModel::is_product_short_name_Set() const{
    return m_product_short_name_isSet;
}

bool OAIProductModel::is_product_short_name_Valid() const{
    return m_product_short_name_isValid;
}

QString OAIProductModel::getProductTitle() const {
    return m_product_title;
}
void OAIProductModel::setProductTitle(const QString &product_title) {
    m_product_title = product_title;
    m_product_title_isSet = true;
}

bool OAIProductModel::is_product_title_Set() const{
    return m_product_title_isSet;
}

bool OAIProductModel::is_product_title_Valid() const{
    return m_product_title_isValid;
}

QString OAIProductModel::getProductToDate() const {
    return m_product_to_date;
}
void OAIProductModel::setProductToDate(const QString &product_to_date) {
    m_product_to_date = product_to_date;
    m_product_to_date_isSet = true;
}

bool OAIProductModel::is_product_to_date_Set() const{
    return m_product_to_date_isSet;
}

bool OAIProductModel::is_product_to_date_Valid() const{
    return m_product_to_date_isValid;
}

bool OAIProductModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_number_of_files_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_product.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_desc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_files.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_frequency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_from_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_link_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_short_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_to_date_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProductModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
