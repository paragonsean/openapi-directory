/**
 * Bulk Data Storage System Services
 * Bulk Data Storage System (BDSS) allows the public to discover, search, and download patent and trademark data in bulk form.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProductFileModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProductFileModel::OAIProductFileModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProductFileModel::OAIProductFileModel() {
    this->initializeModel();
}

OAIProductFileModel::~OAIProductFileModel() {}

void OAIProductFileModel::initializeModel() {

    m_file_download_url_isSet = false;
    m_file_download_url_isValid = false;

    m_file_from_time_isSet = false;
    m_file_from_time_isValid = false;

    m_file_identifier_isSet = false;
    m_file_identifier_isValid = false;

    m_file_link_path_isSet = false;
    m_file_link_path_isValid = false;

    m_file_name_isSet = false;
    m_file_name_isValid = false;

    m_file_release_date_isSet = false;
    m_file_release_date_isValid = false;

    m_file_size_isSet = false;
    m_file_size_isValid = false;

    m_file_to_time_isSet = false;
    m_file_to_time_isValid = false;

    m_file_type_isSet = false;
    m_file_type_isValid = false;
}

void OAIProductFileModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProductFileModel::fromJsonObject(QJsonObject json) {

    m_file_download_url_isValid = ::OpenAPI::fromJsonValue(m_file_download_url, json[QString("fileDownloadUrl")]);
    m_file_download_url_isSet = !json[QString("fileDownloadUrl")].isNull() && m_file_download_url_isValid;

    m_file_from_time_isValid = ::OpenAPI::fromJsonValue(m_file_from_time, json[QString("fileFromTime")]);
    m_file_from_time_isSet = !json[QString("fileFromTime")].isNull() && m_file_from_time_isValid;

    m_file_identifier_isValid = ::OpenAPI::fromJsonValue(m_file_identifier, json[QString("fileIdentifier")]);
    m_file_identifier_isSet = !json[QString("fileIdentifier")].isNull() && m_file_identifier_isValid;

    m_file_link_path_isValid = ::OpenAPI::fromJsonValue(m_file_link_path, json[QString("fileLinkPath")]);
    m_file_link_path_isSet = !json[QString("fileLinkPath")].isNull() && m_file_link_path_isValid;

    m_file_name_isValid = ::OpenAPI::fromJsonValue(m_file_name, json[QString("fileName")]);
    m_file_name_isSet = !json[QString("fileName")].isNull() && m_file_name_isValid;

    m_file_release_date_isValid = ::OpenAPI::fromJsonValue(m_file_release_date, json[QString("fileReleaseDate")]);
    m_file_release_date_isSet = !json[QString("fileReleaseDate")].isNull() && m_file_release_date_isValid;

    m_file_size_isValid = ::OpenAPI::fromJsonValue(m_file_size, json[QString("fileSize")]);
    m_file_size_isSet = !json[QString("fileSize")].isNull() && m_file_size_isValid;

    m_file_to_time_isValid = ::OpenAPI::fromJsonValue(m_file_to_time, json[QString("fileToTime")]);
    m_file_to_time_isSet = !json[QString("fileToTime")].isNull() && m_file_to_time_isValid;

    m_file_type_isValid = ::OpenAPI::fromJsonValue(m_file_type, json[QString("fileType")]);
    m_file_type_isSet = !json[QString("fileType")].isNull() && m_file_type_isValid;
}

QString OAIProductFileModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProductFileModel::asJsonObject() const {
    QJsonObject obj;
    if (m_file_download_url_isSet) {
        obj.insert(QString("fileDownloadUrl"), ::OpenAPI::toJsonValue(m_file_download_url));
    }
    if (m_file_from_time_isSet) {
        obj.insert(QString("fileFromTime"), ::OpenAPI::toJsonValue(m_file_from_time));
    }
    if (m_file_identifier_isSet) {
        obj.insert(QString("fileIdentifier"), ::OpenAPI::toJsonValue(m_file_identifier));
    }
    if (m_file_link_path_isSet) {
        obj.insert(QString("fileLinkPath"), ::OpenAPI::toJsonValue(m_file_link_path));
    }
    if (m_file_name_isSet) {
        obj.insert(QString("fileName"), ::OpenAPI::toJsonValue(m_file_name));
    }
    if (m_file_release_date_isSet) {
        obj.insert(QString("fileReleaseDate"), ::OpenAPI::toJsonValue(m_file_release_date));
    }
    if (m_file_size_isSet) {
        obj.insert(QString("fileSize"), ::OpenAPI::toJsonValue(m_file_size));
    }
    if (m_file_to_time_isSet) {
        obj.insert(QString("fileToTime"), ::OpenAPI::toJsonValue(m_file_to_time));
    }
    if (m_file_type_isSet) {
        obj.insert(QString("fileType"), ::OpenAPI::toJsonValue(m_file_type));
    }
    return obj;
}

QString OAIProductFileModel::getFileDownloadUrl() const {
    return m_file_download_url;
}
void OAIProductFileModel::setFileDownloadUrl(const QString &file_download_url) {
    m_file_download_url = file_download_url;
    m_file_download_url_isSet = true;
}

bool OAIProductFileModel::is_file_download_url_Set() const{
    return m_file_download_url_isSet;
}

bool OAIProductFileModel::is_file_download_url_Valid() const{
    return m_file_download_url_isValid;
}

QString OAIProductFileModel::getFileFromTime() const {
    return m_file_from_time;
}
void OAIProductFileModel::setFileFromTime(const QString &file_from_time) {
    m_file_from_time = file_from_time;
    m_file_from_time_isSet = true;
}

bool OAIProductFileModel::is_file_from_time_Set() const{
    return m_file_from_time_isSet;
}

bool OAIProductFileModel::is_file_from_time_Valid() const{
    return m_file_from_time_isValid;
}

qint32 OAIProductFileModel::getFileIdentifier() const {
    return m_file_identifier;
}
void OAIProductFileModel::setFileIdentifier(const qint32 &file_identifier) {
    m_file_identifier = file_identifier;
    m_file_identifier_isSet = true;
}

bool OAIProductFileModel::is_file_identifier_Set() const{
    return m_file_identifier_isSet;
}

bool OAIProductFileModel::is_file_identifier_Valid() const{
    return m_file_identifier_isValid;
}

QString OAIProductFileModel::getFileLinkPath() const {
    return m_file_link_path;
}
void OAIProductFileModel::setFileLinkPath(const QString &file_link_path) {
    m_file_link_path = file_link_path;
    m_file_link_path_isSet = true;
}

bool OAIProductFileModel::is_file_link_path_Set() const{
    return m_file_link_path_isSet;
}

bool OAIProductFileModel::is_file_link_path_Valid() const{
    return m_file_link_path_isValid;
}

QString OAIProductFileModel::getFileName() const {
    return m_file_name;
}
void OAIProductFileModel::setFileName(const QString &file_name) {
    m_file_name = file_name;
    m_file_name_isSet = true;
}

bool OAIProductFileModel::is_file_name_Set() const{
    return m_file_name_isSet;
}

bool OAIProductFileModel::is_file_name_Valid() const{
    return m_file_name_isValid;
}

QString OAIProductFileModel::getFileReleaseDate() const {
    return m_file_release_date;
}
void OAIProductFileModel::setFileReleaseDate(const QString &file_release_date) {
    m_file_release_date = file_release_date;
    m_file_release_date_isSet = true;
}

bool OAIProductFileModel::is_file_release_date_Set() const{
    return m_file_release_date_isSet;
}

bool OAIProductFileModel::is_file_release_date_Valid() const{
    return m_file_release_date_isValid;
}

qint32 OAIProductFileModel::getFileSize() const {
    return m_file_size;
}
void OAIProductFileModel::setFileSize(const qint32 &file_size) {
    m_file_size = file_size;
    m_file_size_isSet = true;
}

bool OAIProductFileModel::is_file_size_Set() const{
    return m_file_size_isSet;
}

bool OAIProductFileModel::is_file_size_Valid() const{
    return m_file_size_isValid;
}

QString OAIProductFileModel::getFileToTime() const {
    return m_file_to_time;
}
void OAIProductFileModel::setFileToTime(const QString &file_to_time) {
    m_file_to_time = file_to_time;
    m_file_to_time_isSet = true;
}

bool OAIProductFileModel::is_file_to_time_Set() const{
    return m_file_to_time_isSet;
}

bool OAIProductFileModel::is_file_to_time_Valid() const{
    return m_file_to_time_isValid;
}

QString OAIProductFileModel::getFileType() const {
    return m_file_type;
}
void OAIProductFileModel::setFileType(const QString &file_type) {
    m_file_type = file_type;
    m_file_type_isSet = true;
}

bool OAIProductFileModel::is_file_type_Set() const{
    return m_file_type_isSet;
}

bool OAIProductFileModel::is_file_type_Valid() const{
    return m_file_type_isValid;
}

bool OAIProductFileModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_file_download_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_from_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_link_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_release_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_to_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProductFileModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
