/**
 * Bulk Data Storage System Services
 * Bulk Data Storage System (BDSS) allows the public to discover, search, and download patent and trademark data in bulk form.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIProductsApi_H
#define OAI_OAIProductsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIProductsApi : public QObject {
    Q_OBJECT

public:
    OAIProductsApi(const int timeOut = 0);
    ~OAIProductsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  short_name QString [required]
    * @param[in]  year qint32 [optional]
    * @param[in]  hierarchy QString [optional]
    */
    virtual void getLatestProductFilesByProductIdAndTime(const QString &short_name, const ::OpenAPI::OptionalParam<qint32> &year = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &hierarchy = ::OpenAPI::OptionalParam<QString>());


    virtual void getPopulartProducts();

    /**
    * @param[in]  short_name QString [required]
    */
    virtual void getProductSubTree(const QString &short_name);

    /**
    * @param[in]  product_name QString [required]
    * @param[in]  from_year qint32 [optional]
    * @param[in]  to_year qint32 [optional]
    * @param[in]  from_month qint32 [optional]
    * @param[in]  to_month qint32 [optional]
    * @param[in]  from_day qint32 [optional]
    * @param[in]  to_day qint32 [optional]
    * @param[in]  hierarchy QString [optional]
    * @param[in]  max_files qint32 [optional]
    */
    virtual void getProductsByName(const QString &product_name, const ::OpenAPI::OptionalParam<qint32> &from_year = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &to_year = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &from_month = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &to_month = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &from_day = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &to_day = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &hierarchy = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_files = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  short_name QString [required]
    * @param[in]  from_year qint32 [optional]
    * @param[in]  to_year qint32 [optional]
    * @param[in]  from_month qint32 [optional]
    * @param[in]  to_month qint32 [optional]
    * @param[in]  from_day qint32 [optional]
    * @param[in]  to_day qint32 [optional]
    * @param[in]  from_date QString [optional]
    * @param[in]  to_date QString [optional]
    * @param[in]  hierarchy QString [optional]
    */
    virtual void getProductsByShortName(const QString &short_name, const ::OpenAPI::OptionalParam<qint32> &from_year = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &to_year = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &from_month = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &to_month = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &from_day = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &to_day = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &from_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &to_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &hierarchy = ::OpenAPI::OptionalParam<QString>());


    virtual void getProductsTree();


    virtual void getProductsWithLatestProductFiles();


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getLatestProductFilesByProductIdAndTimeCallback(OAIHttpRequestWorker *worker);
    void getPopulartProductsCallback(OAIHttpRequestWorker *worker);
    void getProductSubTreeCallback(OAIHttpRequestWorker *worker);
    void getProductsByNameCallback(OAIHttpRequestWorker *worker);
    void getProductsByShortNameCallback(OAIHttpRequestWorker *worker);
    void getProductsTreeCallback(OAIHttpRequestWorker *worker);
    void getProductsWithLatestProductFilesCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getLatestProductFilesByProductIdAndTimeSignal();
    void getPopulartProductsSignal();
    void getProductSubTreeSignal();
    void getProductsByNameSignal();
    void getProductsByShortNameSignal();
    void getProductsTreeSignal();
    void getProductsWithLatestProductFilesSignal();


    void getLatestProductFilesByProductIdAndTimeSignalFull(OAIHttpRequestWorker *worker);
    void getPopulartProductsSignalFull(OAIHttpRequestWorker *worker);
    void getProductSubTreeSignalFull(OAIHttpRequestWorker *worker);
    void getProductsByNameSignalFull(OAIHttpRequestWorker *worker);
    void getProductsByShortNameSignalFull(OAIHttpRequestWorker *worker);
    void getProductsTreeSignalFull(OAIHttpRequestWorker *worker);
    void getProductsWithLatestProductFilesSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use getLatestProductFilesByProductIdAndTimeSignalError() instead")
    void getLatestProductFilesByProductIdAndTimeSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getLatestProductFilesByProductIdAndTimeSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPopulartProductsSignalError() instead")
    void getPopulartProductsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getPopulartProductsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProductSubTreeSignalError() instead")
    void getProductSubTreeSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getProductSubTreeSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProductsByNameSignalError() instead")
    void getProductsByNameSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getProductsByNameSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProductsByShortNameSignalError() instead")
    void getProductsByShortNameSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getProductsByShortNameSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProductsTreeSignalError() instead")
    void getProductsTreeSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getProductsTreeSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProductsWithLatestProductFilesSignalError() instead")
    void getProductsWithLatestProductFilesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getProductsWithLatestProductFilesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getLatestProductFilesByProductIdAndTimeSignalErrorFull() instead")
    void getLatestProductFilesByProductIdAndTimeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getLatestProductFilesByProductIdAndTimeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPopulartProductsSignalErrorFull() instead")
    void getPopulartProductsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPopulartProductsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProductSubTreeSignalErrorFull() instead")
    void getProductSubTreeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getProductSubTreeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProductsByNameSignalErrorFull() instead")
    void getProductsByNameSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getProductsByNameSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProductsByShortNameSignalErrorFull() instead")
    void getProductsByShortNameSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getProductsByShortNameSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProductsTreeSignalErrorFull() instead")
    void getProductsTreeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getProductsTreeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProductsWithLatestProductFilesSignalErrorFull() instead")
    void getProductsWithLatestProductFilesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getProductsWithLatestProductFilesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
