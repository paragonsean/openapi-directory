/**
 * Bulk Data Storage System Services
 * Bulk Data Storage System (BDSS) allows the public to discover, search, and download patent and trademark data in bulk form.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProductModelShort.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProductModelShort::OAIProductModelShort(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProductModelShort::OAIProductModelShort() {
    this->initializeModel();
}

OAIProductModelShort::~OAIProductModelShort() {}

void OAIProductModelShort::initializeModel() {

    m_product_children_isSet = false;
    m_product_children_isValid = false;

    m_product_link_path_isSet = false;
    m_product_link_path_isValid = false;

    m_product_short_name_isSet = false;
    m_product_short_name_isValid = false;

    m_product_title_isSet = false;
    m_product_title_isValid = false;
}

void OAIProductModelShort::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProductModelShort::fromJsonObject(QJsonObject json) {

    m_product_children_isValid = ::OpenAPI::fromJsonValue(m_product_children, json[QString("productChildren")]);
    m_product_children_isSet = !json[QString("productChildren")].isNull() && m_product_children_isValid;

    m_product_link_path_isValid = ::OpenAPI::fromJsonValue(m_product_link_path, json[QString("productLinkPath")]);
    m_product_link_path_isSet = !json[QString("productLinkPath")].isNull() && m_product_link_path_isValid;

    m_product_short_name_isValid = ::OpenAPI::fromJsonValue(m_product_short_name, json[QString("productShortName")]);
    m_product_short_name_isSet = !json[QString("productShortName")].isNull() && m_product_short_name_isValid;

    m_product_title_isValid = ::OpenAPI::fromJsonValue(m_product_title, json[QString("productTitle")]);
    m_product_title_isSet = !json[QString("productTitle")].isNull() && m_product_title_isValid;
}

QString OAIProductModelShort::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProductModelShort::asJsonObject() const {
    QJsonObject obj;
    if (m_product_children.size() > 0) {
        obj.insert(QString("productChildren"), ::OpenAPI::toJsonValue(m_product_children));
    }
    if (m_product_link_path_isSet) {
        obj.insert(QString("productLinkPath"), ::OpenAPI::toJsonValue(m_product_link_path));
    }
    if (m_product_short_name_isSet) {
        obj.insert(QString("productShortName"), ::OpenAPI::toJsonValue(m_product_short_name));
    }
    if (m_product_title_isSet) {
        obj.insert(QString("productTitle"), ::OpenAPI::toJsonValue(m_product_title));
    }
    return obj;
}

QList<OAIProductModelShort> OAIProductModelShort::getProductChildren() const {
    return m_product_children;
}
void OAIProductModelShort::setProductChildren(const QList<OAIProductModelShort> &product_children) {
    m_product_children = product_children;
    m_product_children_isSet = true;
}

bool OAIProductModelShort::is_product_children_Set() const{
    return m_product_children_isSet;
}

bool OAIProductModelShort::is_product_children_Valid() const{
    return m_product_children_isValid;
}

QString OAIProductModelShort::getProductLinkPath() const {
    return m_product_link_path;
}
void OAIProductModelShort::setProductLinkPath(const QString &product_link_path) {
    m_product_link_path = product_link_path;
    m_product_link_path_isSet = true;
}

bool OAIProductModelShort::is_product_link_path_Set() const{
    return m_product_link_path_isSet;
}

bool OAIProductModelShort::is_product_link_path_Valid() const{
    return m_product_link_path_isValid;
}

QString OAIProductModelShort::getProductShortName() const {
    return m_product_short_name;
}
void OAIProductModelShort::setProductShortName(const QString &product_short_name) {
    m_product_short_name = product_short_name;
    m_product_short_name_isSet = true;
}

bool OAIProductModelShort::is_product_short_name_Set() const{
    return m_product_short_name_isSet;
}

bool OAIProductModelShort::is_product_short_name_Valid() const{
    return m_product_short_name_isValid;
}

QString OAIProductModelShort::getProductTitle() const {
    return m_product_title;
}
void OAIProductModelShort::setProductTitle(const QString &product_title) {
    m_product_title = product_title;
    m_product_title_isSet = true;
}

bool OAIProductModelShort::is_product_title_Set() const{
    return m_product_title_isSet;
}

bool OAIProductModelShort::is_product_title_Valid() const{
    return m_product_title_isValid;
}

bool OAIProductModelShort::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_product_children.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_link_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_short_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_title_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProductModelShort::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
