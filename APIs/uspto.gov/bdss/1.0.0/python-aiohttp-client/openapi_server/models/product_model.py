# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.product_file_model import ProductFileModel
from openapi_server import util


class ProductModel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, number_of_files: int=None, parent_product: ProductModel=None, product_desc: str=None, product_files: List[ProductFileModel]=None, product_frequency: str=None, product_from_date: str=None, product_identifier: int=None, product_level: str=None, product_link_path: str=None, product_short_name: str=None, product_title: str=None, product_to_date: str=None):
        """ProductModel - a model defined in OpenAPI

        :param number_of_files: The number_of_files of this ProductModel.
        :param parent_product: The parent_product of this ProductModel.
        :param product_desc: The product_desc of this ProductModel.
        :param product_files: The product_files of this ProductModel.
        :param product_frequency: The product_frequency of this ProductModel.
        :param product_from_date: The product_from_date of this ProductModel.
        :param product_identifier: The product_identifier of this ProductModel.
        :param product_level: The product_level of this ProductModel.
        :param product_link_path: The product_link_path of this ProductModel.
        :param product_short_name: The product_short_name of this ProductModel.
        :param product_title: The product_title of this ProductModel.
        :param product_to_date: The product_to_date of this ProductModel.
        """
        self.openapi_types = {
            'number_of_files': int,
            'parent_product': ProductModel,
            'product_desc': str,
            'product_files': List[ProductFileModel],
            'product_frequency': str,
            'product_from_date': str,
            'product_identifier': int,
            'product_level': str,
            'product_link_path': str,
            'product_short_name': str,
            'product_title': str,
            'product_to_date': str
        }

        self.attribute_map = {
            'number_of_files': 'numberOfFiles',
            'parent_product': 'parentProduct',
            'product_desc': 'productDesc',
            'product_files': 'productFiles',
            'product_frequency': 'productFrequency',
            'product_from_date': 'productFromDate',
            'product_identifier': 'productIdentifier',
            'product_level': 'productLevel',
            'product_link_path': 'productLinkPath',
            'product_short_name': 'productShortName',
            'product_title': 'productTitle',
            'product_to_date': 'productToDate'
        }

        self._number_of_files = number_of_files
        self._parent_product = parent_product
        self._product_desc = product_desc
        self._product_files = product_files
        self._product_frequency = product_frequency
        self._product_from_date = product_from_date
        self._product_identifier = product_identifier
        self._product_level = product_level
        self._product_link_path = product_link_path
        self._product_short_name = product_short_name
        self._product_title = product_title
        self._product_to_date = product_to_date

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProductModel':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ProductModel of this ProductModel.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def number_of_files(self):
        """Gets the number_of_files of this ProductModel.


        :return: The number_of_files of this ProductModel.
        :rtype: int
        """
        return self._number_of_files

    @number_of_files.setter
    def number_of_files(self, number_of_files):
        """Sets the number_of_files of this ProductModel.


        :param number_of_files: The number_of_files of this ProductModel.
        :type number_of_files: int
        """

        self._number_of_files = number_of_files

    @property
    def parent_product(self):
        """Gets the parent_product of this ProductModel.


        :return: The parent_product of this ProductModel.
        :rtype: ProductModel
        """
        return self._parent_product

    @parent_product.setter
    def parent_product(self, parent_product):
        """Sets the parent_product of this ProductModel.


        :param parent_product: The parent_product of this ProductModel.
        :type parent_product: ProductModel
        """

        self._parent_product = parent_product

    @property
    def product_desc(self):
        """Gets the product_desc of this ProductModel.


        :return: The product_desc of this ProductModel.
        :rtype: str
        """
        return self._product_desc

    @product_desc.setter
    def product_desc(self, product_desc):
        """Sets the product_desc of this ProductModel.


        :param product_desc: The product_desc of this ProductModel.
        :type product_desc: str
        """

        self._product_desc = product_desc

    @property
    def product_files(self):
        """Gets the product_files of this ProductModel.


        :return: The product_files of this ProductModel.
        :rtype: List[ProductFileModel]
        """
        return self._product_files

    @product_files.setter
    def product_files(self, product_files):
        """Sets the product_files of this ProductModel.


        :param product_files: The product_files of this ProductModel.
        :type product_files: List[ProductFileModel]
        """

        self._product_files = product_files

    @property
    def product_frequency(self):
        """Gets the product_frequency of this ProductModel.


        :return: The product_frequency of this ProductModel.
        :rtype: str
        """
        return self._product_frequency

    @product_frequency.setter
    def product_frequency(self, product_frequency):
        """Sets the product_frequency of this ProductModel.


        :param product_frequency: The product_frequency of this ProductModel.
        :type product_frequency: str
        """

        self._product_frequency = product_frequency

    @property
    def product_from_date(self):
        """Gets the product_from_date of this ProductModel.


        :return: The product_from_date of this ProductModel.
        :rtype: str
        """
        return self._product_from_date

    @product_from_date.setter
    def product_from_date(self, product_from_date):
        """Sets the product_from_date of this ProductModel.


        :param product_from_date: The product_from_date of this ProductModel.
        :type product_from_date: str
        """

        self._product_from_date = product_from_date

    @property
    def product_identifier(self):
        """Gets the product_identifier of this ProductModel.


        :return: The product_identifier of this ProductModel.
        :rtype: int
        """
        return self._product_identifier

    @product_identifier.setter
    def product_identifier(self, product_identifier):
        """Sets the product_identifier of this ProductModel.


        :param product_identifier: The product_identifier of this ProductModel.
        :type product_identifier: int
        """

        self._product_identifier = product_identifier

    @property
    def product_level(self):
        """Gets the product_level of this ProductModel.

        Represents the Level in the Product hierarchy.

        :return: The product_level of this ProductModel.
        :rtype: str
        """
        return self._product_level

    @product_level.setter
    def product_level(self, product_level):
        """Sets the product_level of this ProductModel.

        Represents the Level in the Product hierarchy.

        :param product_level: The product_level of this ProductModel.
        :type product_level: str
        """
        allowed_values = ["available", "pending", "sold"]  # noqa: E501
        if product_level not in allowed_values:
            raise ValueError(
                "Invalid value for `product_level` ({0}), must be one of {1}"
                .format(product_level, allowed_values)
            )

        self._product_level = product_level

    @property
    def product_link_path(self):
        """Gets the product_link_path of this ProductModel.


        :return: The product_link_path of this ProductModel.
        :rtype: str
        """
        return self._product_link_path

    @product_link_path.setter
    def product_link_path(self, product_link_path):
        """Sets the product_link_path of this ProductModel.


        :param product_link_path: The product_link_path of this ProductModel.
        :type product_link_path: str
        """

        self._product_link_path = product_link_path

    @property
    def product_short_name(self):
        """Gets the product_short_name of this ProductModel.


        :return: The product_short_name of this ProductModel.
        :rtype: str
        """
        return self._product_short_name

    @product_short_name.setter
    def product_short_name(self, product_short_name):
        """Sets the product_short_name of this ProductModel.


        :param product_short_name: The product_short_name of this ProductModel.
        :type product_short_name: str
        """

        self._product_short_name = product_short_name

    @property
    def product_title(self):
        """Gets the product_title of this ProductModel.


        :return: The product_title of this ProductModel.
        :rtype: str
        """
        return self._product_title

    @product_title.setter
    def product_title(self, product_title):
        """Sets the product_title of this ProductModel.


        :param product_title: The product_title of this ProductModel.
        :type product_title: str
        """

        self._product_title = product_title

    @property
    def product_to_date(self):
        """Gets the product_to_date of this ProductModel.


        :return: The product_to_date of this ProductModel.
        :rtype: str
        """
        return self._product_to_date

    @product_to_date.setter
    def product_to_date(self, product_to_date):
        """Sets the product_to_date of this ProductModel.


        :param product_to_date: The product_to_date of this ProductModel.
        :type product_to_date: str
        """

        self._product_to_date = product_to_date
