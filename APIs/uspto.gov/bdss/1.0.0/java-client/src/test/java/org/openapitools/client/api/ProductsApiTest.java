/*
 * Bulk Data Storage System Services
 * Bulk Data Storage System (BDSS) allows the public to discover, search, and download patent and trademark data in bulk form.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ProductsApi
 */
@Disabled
public class ProductsApiTest {

    private final ProductsApi api = new ProductsApi();

    /**
     * Returns products along with their latest files by short names.
     *
     * Use this GET to search for latest released bulk data products by their short names and release year. The return response will include the latest files within the year specified.  An error message will be returned if product(s) cannot be found for the year specified
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getLatestProductFilesByProductIdAndTimeTest() throws ApiException {
        String shortName = null;
        Integer year = null;
        String hierarchy = null;
        api.getLatestProductFilesByProductIdAndTime(shortName, year, hierarchy);
        // TODO: test validations
    }

    /**
     * Returns popular products along with latest files.
     *
     * Use this GET to retrieve these bulk data files by their popularity. The response includes product fields such as title, description, frequency, and level.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPopulartProductsTest() throws ApiException {
        api.getPopulartProducts();
        // TODO: test validations
    }

    /**
     * Returns products&#39; hierarchical subtree.
     *
     * Use this GET to search for bulk data products by their short names. This works almost like products/tree GET, the difference is that it returns subtree data starting from a particular tree node (i.e. the GET returns all children if parent short name is entered). If a product cannot be found by its short name (has to be exact match and is not case sensitive), then an error message will appear in response body.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getProductSubTreeTest() throws ApiException {
        String shortName = null;
        api.getProductSubTree(shortName);
        // TODO: test validations
    }

    /**
     * Returns files associated with products (of level PRODUCT) based on their full or partial names.
     *
     * Use this GET to search for bulk data services by product name or description. An error message will be returned if the product cannot be found by name. Note that product name is not case sensitive. You can enter full or partial name of an existing product to receive bulk data services. Default values for field names are as follows - if both years are not defined, toYear will be set equal to current year, fromYear will be set equal to previous year - if fromYear is defined, toYear will be set equal to fromYear+1 - if fromMonth not defined, current month will be used - if toMonth not defined, it will be set equal to fromMonth - if fromDay is not defined, it will be set equal to current day (today) - if toDay is not defined, it will be set to the last day of toMonth/toYear
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getProductsByNameTest() throws ApiException {
        String productName = null;
        Integer fromYear = null;
        Integer toYear = null;
        Integer fromMonth = null;
        Integer toMonth = null;
        Integer fromDay = null;
        Integer toDay = null;
        String hierarchy = null;
        Integer maxFiles = null;
        api.getProductsByName(productName, fromYear, toYear, fromMonth, toMonth, fromDay, toDay, hierarchy, maxFiles);
        // TODO: test validations
    }

    /**
     * Returns products along with their associated files by short names.
     *
     * Use this GET to search for bulk data products by their short names and description. Note that \&quot;From\&quot; and \&quot;To\&quot; dates can be inputted separately as year/month/day values or as a single date string in format \&quot;YYYY-MM-DD\&quot;. If all values are entered, single date strings have a higher priority For the list of default values rules, see GET /products/byname/{productName} above
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getProductsByShortNameTest() throws ApiException {
        String shortName = null;
        Integer fromYear = null;
        Integer toYear = null;
        Integer fromMonth = null;
        Integer toMonth = null;
        Integer fromDay = null;
        Integer toDay = null;
        String fromDate = null;
        String toDate = null;
        String hierarchy = null;
        api.getProductsByShortName(shortName, fromYear, toYear, fromMonth, toMonth, fromDay, toDay, fromDate, toDate, hierarchy);
        // TODO: test validations
    }

    /**
     * Returns products&#39; hierarchical tree.
     *
     * Use this GET to retrieve short name and parent/child relationships for bulk data products. Short names are unique IDs of the products and should be used in other GETs where {shortName} parameter is required Use this GET to perform initial exploration of the existing products hierarchy Short names are unique IDs of the products and should be used in other GETs where {shortName} parameter is required
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getProductsTreeTest() throws ApiException {
        api.getProductsTree();
        // TODO: test validations
    }

    /**
     * Returns all products with Latest Files.
     *
     * Use this GET to retrieve latest released bulk data products. Note that there is one file per product. The response includes product fields such as title, description, frequency, and level.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getProductsWithLatestProductFilesTest() throws ApiException {
        api.getProductsWithLatestProductFiles();
        // TODO: test validations
    }

}
