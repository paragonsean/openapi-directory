/*
 * Bulk Data Storage System Services
 * Bulk Data Storage System (BDSS) allows the public to discover, search, and download patent and trademark data in bulk form.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.net.URI;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ProductFileModel
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:54:28.074243-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ProductFileModel {
  public static final String SERIALIZED_NAME_FILE_DOWNLOAD_URL = "fileDownloadUrl";
  @SerializedName(SERIALIZED_NAME_FILE_DOWNLOAD_URL)
  private String fileDownloadUrl;

  public static final String SERIALIZED_NAME_FILE_FROM_TIME = "fileFromTime";
  @SerializedName(SERIALIZED_NAME_FILE_FROM_TIME)
  private String fileFromTime;

  public static final String SERIALIZED_NAME_FILE_IDENTIFIER = "fileIdentifier";
  @SerializedName(SERIALIZED_NAME_FILE_IDENTIFIER)
  private Integer fileIdentifier;

  public static final String SERIALIZED_NAME_FILE_LINK_PATH = "fileLinkPath";
  @SerializedName(SERIALIZED_NAME_FILE_LINK_PATH)
  private URI fileLinkPath;

  public static final String SERIALIZED_NAME_FILE_NAME = "fileName";
  @SerializedName(SERIALIZED_NAME_FILE_NAME)
  private String fileName;

  public static final String SERIALIZED_NAME_FILE_RELEASE_DATE = "fileReleaseDate";
  @SerializedName(SERIALIZED_NAME_FILE_RELEASE_DATE)
  private String fileReleaseDate;

  public static final String SERIALIZED_NAME_FILE_SIZE = "fileSize";
  @SerializedName(SERIALIZED_NAME_FILE_SIZE)
  private Integer fileSize;

  public static final String SERIALIZED_NAME_FILE_TO_TIME = "fileToTime";
  @SerializedName(SERIALIZED_NAME_FILE_TO_TIME)
  private String fileToTime;

  public static final String SERIALIZED_NAME_FILE_TYPE = "fileType";
  @SerializedName(SERIALIZED_NAME_FILE_TYPE)
  private String fileType;

  public ProductFileModel() {
  }

  public ProductFileModel fileDownloadUrl(String fileDownloadUrl) {
    this.fileDownloadUrl = fileDownloadUrl;
    return this;
  }

  /**
   * Get fileDownloadUrl
   * @return fileDownloadUrl
   */
  @javax.annotation.Nullable
  public String getFileDownloadUrl() {
    return fileDownloadUrl;
  }

  public void setFileDownloadUrl(String fileDownloadUrl) {
    this.fileDownloadUrl = fileDownloadUrl;
  }


  public ProductFileModel fileFromTime(String fileFromTime) {
    this.fileFromTime = fileFromTime;
    return this;
  }

  /**
   * Get fileFromTime
   * @return fileFromTime
   */
  @javax.annotation.Nullable
  public String getFileFromTime() {
    return fileFromTime;
  }

  public void setFileFromTime(String fileFromTime) {
    this.fileFromTime = fileFromTime;
  }


  public ProductFileModel fileIdentifier(Integer fileIdentifier) {
    this.fileIdentifier = fileIdentifier;
    return this;
  }

  /**
   * Get fileIdentifier
   * @return fileIdentifier
   */
  @javax.annotation.Nullable
  public Integer getFileIdentifier() {
    return fileIdentifier;
  }

  public void setFileIdentifier(Integer fileIdentifier) {
    this.fileIdentifier = fileIdentifier;
  }


  public ProductFileModel fileLinkPath(URI fileLinkPath) {
    this.fileLinkPath = fileLinkPath;
    return this;
  }

  /**
   * Get fileLinkPath
   * @return fileLinkPath
   */
  @javax.annotation.Nullable
  public URI getFileLinkPath() {
    return fileLinkPath;
  }

  public void setFileLinkPath(URI fileLinkPath) {
    this.fileLinkPath = fileLinkPath;
  }


  public ProductFileModel fileName(String fileName) {
    this.fileName = fileName;
    return this;
  }

  /**
   * Get fileName
   * @return fileName
   */
  @javax.annotation.Nullable
  public String getFileName() {
    return fileName;
  }

  public void setFileName(String fileName) {
    this.fileName = fileName;
  }


  public ProductFileModel fileReleaseDate(String fileReleaseDate) {
    this.fileReleaseDate = fileReleaseDate;
    return this;
  }

  /**
   * Get fileReleaseDate
   * @return fileReleaseDate
   */
  @javax.annotation.Nullable
  public String getFileReleaseDate() {
    return fileReleaseDate;
  }

  public void setFileReleaseDate(String fileReleaseDate) {
    this.fileReleaseDate = fileReleaseDate;
  }


  public ProductFileModel fileSize(Integer fileSize) {
    this.fileSize = fileSize;
    return this;
  }

  /**
   * Get fileSize
   * @return fileSize
   */
  @javax.annotation.Nullable
  public Integer getFileSize() {
    return fileSize;
  }

  public void setFileSize(Integer fileSize) {
    this.fileSize = fileSize;
  }


  public ProductFileModel fileToTime(String fileToTime) {
    this.fileToTime = fileToTime;
    return this;
  }

  /**
   * Get fileToTime
   * @return fileToTime
   */
  @javax.annotation.Nullable
  public String getFileToTime() {
    return fileToTime;
  }

  public void setFileToTime(String fileToTime) {
    this.fileToTime = fileToTime;
  }


  public ProductFileModel fileType(String fileType) {
    this.fileType = fileType;
    return this;
  }

  /**
   * Get fileType
   * @return fileType
   */
  @javax.annotation.Nullable
  public String getFileType() {
    return fileType;
  }

  public void setFileType(String fileType) {
    this.fileType = fileType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProductFileModel productFileModel = (ProductFileModel) o;
    return Objects.equals(this.fileDownloadUrl, productFileModel.fileDownloadUrl) &&
        Objects.equals(this.fileFromTime, productFileModel.fileFromTime) &&
        Objects.equals(this.fileIdentifier, productFileModel.fileIdentifier) &&
        Objects.equals(this.fileLinkPath, productFileModel.fileLinkPath) &&
        Objects.equals(this.fileName, productFileModel.fileName) &&
        Objects.equals(this.fileReleaseDate, productFileModel.fileReleaseDate) &&
        Objects.equals(this.fileSize, productFileModel.fileSize) &&
        Objects.equals(this.fileToTime, productFileModel.fileToTime) &&
        Objects.equals(this.fileType, productFileModel.fileType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(fileDownloadUrl, fileFromTime, fileIdentifier, fileLinkPath, fileName, fileReleaseDate, fileSize, fileToTime, fileType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProductFileModel {\n");
    sb.append("    fileDownloadUrl: ").append(toIndentedString(fileDownloadUrl)).append("\n");
    sb.append("    fileFromTime: ").append(toIndentedString(fileFromTime)).append("\n");
    sb.append("    fileIdentifier: ").append(toIndentedString(fileIdentifier)).append("\n");
    sb.append("    fileLinkPath: ").append(toIndentedString(fileLinkPath)).append("\n");
    sb.append("    fileName: ").append(toIndentedString(fileName)).append("\n");
    sb.append("    fileReleaseDate: ").append(toIndentedString(fileReleaseDate)).append("\n");
    sb.append("    fileSize: ").append(toIndentedString(fileSize)).append("\n");
    sb.append("    fileToTime: ").append(toIndentedString(fileToTime)).append("\n");
    sb.append("    fileType: ").append(toIndentedString(fileType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("fileDownloadUrl");
    openapiFields.add("fileFromTime");
    openapiFields.add("fileIdentifier");
    openapiFields.add("fileLinkPath");
    openapiFields.add("fileName");
    openapiFields.add("fileReleaseDate");
    openapiFields.add("fileSize");
    openapiFields.add("fileToTime");
    openapiFields.add("fileType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ProductFileModel
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ProductFileModel.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ProductFileModel is not found in the empty JSON string", ProductFileModel.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ProductFileModel.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ProductFileModel` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("fileDownloadUrl") != null && !jsonObj.get("fileDownloadUrl").isJsonNull()) && !jsonObj.get("fileDownloadUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fileDownloadUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fileDownloadUrl").toString()));
      }
      if ((jsonObj.get("fileFromTime") != null && !jsonObj.get("fileFromTime").isJsonNull()) && !jsonObj.get("fileFromTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fileFromTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fileFromTime").toString()));
      }
      if ((jsonObj.get("fileLinkPath") != null && !jsonObj.get("fileLinkPath").isJsonNull()) && !jsonObj.get("fileLinkPath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fileLinkPath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fileLinkPath").toString()));
      }
      if ((jsonObj.get("fileName") != null && !jsonObj.get("fileName").isJsonNull()) && !jsonObj.get("fileName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fileName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fileName").toString()));
      }
      if ((jsonObj.get("fileReleaseDate") != null && !jsonObj.get("fileReleaseDate").isJsonNull()) && !jsonObj.get("fileReleaseDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fileReleaseDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fileReleaseDate").toString()));
      }
      if ((jsonObj.get("fileToTime") != null && !jsonObj.get("fileToTime").isJsonNull()) && !jsonObj.get("fileToTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fileToTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fileToTime").toString()));
      }
      if ((jsonObj.get("fileType") != null && !jsonObj.get("fileType").isJsonNull()) && !jsonObj.get("fileType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fileType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fileType").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ProductFileModel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ProductFileModel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ProductFileModel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ProductFileModel.class));

       return (TypeAdapter<T>) new TypeAdapter<ProductFileModel>() {
           @Override
           public void write(JsonWriter out, ProductFileModel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ProductFileModel read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ProductFileModel given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ProductFileModel
   * @throws IOException if the JSON string is invalid with respect to ProductFileModel
   */
  public static ProductFileModel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ProductFileModel.class);
  }

  /**
   * Convert an instance of ProductFileModel to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

