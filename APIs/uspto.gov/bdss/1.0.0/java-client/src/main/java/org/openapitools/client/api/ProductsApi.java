/*
 * Bulk Data Storage System Services
 * Bulk Data Storage System (BDSS) allows the public to discover, search, and download patent and trademark data in bulk form.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;



import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ProductsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ProductsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ProductsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getLatestProductFilesByProductIdAndTime
     * @param shortName Short name of the product, for example, \&quot;PTGRSP\&quot; (required)
     * @param year Year of the product files  needed, for example, 2001. (optional)
     * @param hierarchy Boolean flag (possible values: true and false) to indicate if product hierarchy needs to be return in the response. By default it doesn&#39;t return the hierarchy in the response. (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Product not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLatestProductFilesByProductIdAndTimeCall(String shortName, Integer year, String hierarchy, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/products/{shortName}/latest"
            .replace("{" + "shortName" + "}", localVarApiClient.escapeString(shortName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (year != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("year", year));
        }

        if (hierarchy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hierarchy", hierarchy));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getLatestProductFilesByProductIdAndTimeValidateBeforeCall(String shortName, Integer year, String hierarchy, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'shortName' is set
        if (shortName == null) {
            throw new ApiException("Missing the required parameter 'shortName' when calling getLatestProductFilesByProductIdAndTime(Async)");
        }

        return getLatestProductFilesByProductIdAndTimeCall(shortName, year, hierarchy, _callback);

    }

    /**
     * Returns products along with their latest files by short names.
     * Use this GET to search for latest released bulk data products by their short names and release year. The return response will include the latest files within the year specified.  An error message will be returned if product(s) cannot be found for the year specified
     * @param shortName Short name of the product, for example, \&quot;PTGRSP\&quot; (required)
     * @param year Year of the product files  needed, for example, 2001. (optional)
     * @param hierarchy Boolean flag (possible values: true and false) to indicate if product hierarchy needs to be return in the response. By default it doesn&#39;t return the hierarchy in the response. (optional, default to false)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Product not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public void getLatestProductFilesByProductIdAndTime(String shortName, Integer year, String hierarchy) throws ApiException {
        getLatestProductFilesByProductIdAndTimeWithHttpInfo(shortName, year, hierarchy);
    }

    /**
     * Returns products along with their latest files by short names.
     * Use this GET to search for latest released bulk data products by their short names and release year. The return response will include the latest files within the year specified.  An error message will be returned if product(s) cannot be found for the year specified
     * @param shortName Short name of the product, for example, \&quot;PTGRSP\&quot; (required)
     * @param year Year of the product files  needed, for example, 2001. (optional)
     * @param hierarchy Boolean flag (possible values: true and false) to indicate if product hierarchy needs to be return in the response. By default it doesn&#39;t return the hierarchy in the response. (optional, default to false)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Product not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getLatestProductFilesByProductIdAndTimeWithHttpInfo(String shortName, Integer year, String hierarchy) throws ApiException {
        okhttp3.Call localVarCall = getLatestProductFilesByProductIdAndTimeValidateBeforeCall(shortName, year, hierarchy, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Returns products along with their latest files by short names. (asynchronously)
     * Use this GET to search for latest released bulk data products by their short names and release year. The return response will include the latest files within the year specified.  An error message will be returned if product(s) cannot be found for the year specified
     * @param shortName Short name of the product, for example, \&quot;PTGRSP\&quot; (required)
     * @param year Year of the product files  needed, for example, 2001. (optional)
     * @param hierarchy Boolean flag (possible values: true and false) to indicate if product hierarchy needs to be return in the response. By default it doesn&#39;t return the hierarchy in the response. (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Product not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLatestProductFilesByProductIdAndTimeAsync(String shortName, Integer year, String hierarchy, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getLatestProductFilesByProductIdAndTimeValidateBeforeCall(shortName, year, hierarchy, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPopulartProducts
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Unexpected error accessing metadata. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPopulartProductsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/products/popular";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPopulartProductsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getPopulartProductsCall(_callback);

    }

    /**
     * Returns popular products along with latest files.
     * Use this GET to retrieve these bulk data files by their popularity. The response includes product fields such as title, description, frequency, and level.
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Unexpected error accessing metadata. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public void getPopulartProducts() throws ApiException {
        getPopulartProductsWithHttpInfo();
    }

    /**
     * Returns popular products along with latest files.
     * Use this GET to retrieve these bulk data files by their popularity. The response includes product fields such as title, description, frequency, and level.
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Unexpected error accessing metadata. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getPopulartProductsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getPopulartProductsValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Returns popular products along with latest files. (asynchronously)
     * Use this GET to retrieve these bulk data files by their popularity. The response includes product fields such as title, description, frequency, and level.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Unexpected error accessing metadata. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPopulartProductsAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPopulartProductsValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getProductSubTree
     * @param shortName Short name of the product, for example, \&quot;PTISSD\&quot; (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Product not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProductSubTreeCall(String shortName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/products/tree/{shortName}"
            .replace("{" + "shortName" + "}", localVarApiClient.escapeString(shortName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProductSubTreeValidateBeforeCall(String shortName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'shortName' is set
        if (shortName == null) {
            throw new ApiException("Missing the required parameter 'shortName' when calling getProductSubTree(Async)");
        }

        return getProductSubTreeCall(shortName, _callback);

    }

    /**
     * Returns products&#39; hierarchical subtree.
     * Use this GET to search for bulk data products by their short names. This works almost like products/tree GET, the difference is that it returns subtree data starting from a particular tree node (i.e. the GET returns all children if parent short name is entered). If a product cannot be found by its short name (has to be exact match and is not case sensitive), then an error message will appear in response body.
     * @param shortName Short name of the product, for example, \&quot;PTISSD\&quot; (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Product not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public void getProductSubTree(String shortName) throws ApiException {
        getProductSubTreeWithHttpInfo(shortName);
    }

    /**
     * Returns products&#39; hierarchical subtree.
     * Use this GET to search for bulk data products by their short names. This works almost like products/tree GET, the difference is that it returns subtree data starting from a particular tree node (i.e. the GET returns all children if parent short name is entered). If a product cannot be found by its short name (has to be exact match and is not case sensitive), then an error message will appear in response body.
     * @param shortName Short name of the product, for example, \&quot;PTISSD\&quot; (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Product not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getProductSubTreeWithHttpInfo(String shortName) throws ApiException {
        okhttp3.Call localVarCall = getProductSubTreeValidateBeforeCall(shortName, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Returns products&#39; hierarchical subtree. (asynchronously)
     * Use this GET to search for bulk data products by their short names. This works almost like products/tree GET, the difference is that it returns subtree data starting from a particular tree node (i.e. the GET returns all children if parent short name is entered). If a product cannot be found by its short name (has to be exact match and is not case sensitive), then an error message will appear in response body.
     * @param shortName Short name of the product, for example, \&quot;PTISSD\&quot; (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Product not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProductSubTreeAsync(String shortName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProductSubTreeValidateBeforeCall(shortName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getProductsByName
     * @param productName Name of the product, for example, \&quot;Trademark\&quot; (required)
     * @param fromYear Year from when the product files are needed, for example, 1999. (optional)
     * @param toYear Year until when the product files are needed, for example, 2000. (optional)
     * @param fromMonth Month from when the product files are needed, for example, 01. (optional)
     * @param toMonth Month until when the product files are needed, for example, 12. (optional)
     * @param fromDay Day from when the product files are needed, for example, 01. (optional)
     * @param toDay Day until when the product files are needed, for example, 31. (optional)
     * @param hierarchy Boolean flag to indicate if product hierarchy needs to be return in the response. By default it doesn&#39;t return the hierarchy in the response. (optional, default to false)
     * @param maxFiles Max. number of files to retrieve, per product. Set value to -1 to get all files (optional, default to 20)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Unexpected error accessing metadata. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProductsByNameCall(String productName, Integer fromYear, Integer toYear, Integer fromMonth, Integer toMonth, Integer fromDay, Integer toDay, String hierarchy, Integer maxFiles, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/products/byname/{productName}"
            .replace("{" + "productName" + "}", localVarApiClient.escapeString(productName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fromYear != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fromYear", fromYear));
        }

        if (toYear != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("toYear", toYear));
        }

        if (fromMonth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fromMonth", fromMonth));
        }

        if (toMonth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("toMonth", toMonth));
        }

        if (fromDay != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fromDay", fromDay));
        }

        if (toDay != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("toDay", toDay));
        }

        if (hierarchy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hierarchy", hierarchy));
        }

        if (maxFiles != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxFiles", maxFiles));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProductsByNameValidateBeforeCall(String productName, Integer fromYear, Integer toYear, Integer fromMonth, Integer toMonth, Integer fromDay, Integer toDay, String hierarchy, Integer maxFiles, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'productName' is set
        if (productName == null) {
            throw new ApiException("Missing the required parameter 'productName' when calling getProductsByName(Async)");
        }

        return getProductsByNameCall(productName, fromYear, toYear, fromMonth, toMonth, fromDay, toDay, hierarchy, maxFiles, _callback);

    }

    /**
     * Returns files associated with products (of level PRODUCT) based on their full or partial names.
     * Use this GET to search for bulk data services by product name or description. An error message will be returned if the product cannot be found by name. Note that product name is not case sensitive. You can enter full or partial name of an existing product to receive bulk data services. Default values for field names are as follows - if both years are not defined, toYear will be set equal to current year, fromYear will be set equal to previous year - if fromYear is defined, toYear will be set equal to fromYear+1 - if fromMonth not defined, current month will be used - if toMonth not defined, it will be set equal to fromMonth - if fromDay is not defined, it will be set equal to current day (today) - if toDay is not defined, it will be set to the last day of toMonth/toYear
     * @param productName Name of the product, for example, \&quot;Trademark\&quot; (required)
     * @param fromYear Year from when the product files are needed, for example, 1999. (optional)
     * @param toYear Year until when the product files are needed, for example, 2000. (optional)
     * @param fromMonth Month from when the product files are needed, for example, 01. (optional)
     * @param toMonth Month until when the product files are needed, for example, 12. (optional)
     * @param fromDay Day from when the product files are needed, for example, 01. (optional)
     * @param toDay Day until when the product files are needed, for example, 31. (optional)
     * @param hierarchy Boolean flag to indicate if product hierarchy needs to be return in the response. By default it doesn&#39;t return the hierarchy in the response. (optional, default to false)
     * @param maxFiles Max. number of files to retrieve, per product. Set value to -1 to get all files (optional, default to 20)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Unexpected error accessing metadata. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public void getProductsByName(String productName, Integer fromYear, Integer toYear, Integer fromMonth, Integer toMonth, Integer fromDay, Integer toDay, String hierarchy, Integer maxFiles) throws ApiException {
        getProductsByNameWithHttpInfo(productName, fromYear, toYear, fromMonth, toMonth, fromDay, toDay, hierarchy, maxFiles);
    }

    /**
     * Returns files associated with products (of level PRODUCT) based on their full or partial names.
     * Use this GET to search for bulk data services by product name or description. An error message will be returned if the product cannot be found by name. Note that product name is not case sensitive. You can enter full or partial name of an existing product to receive bulk data services. Default values for field names are as follows - if both years are not defined, toYear will be set equal to current year, fromYear will be set equal to previous year - if fromYear is defined, toYear will be set equal to fromYear+1 - if fromMonth not defined, current month will be used - if toMonth not defined, it will be set equal to fromMonth - if fromDay is not defined, it will be set equal to current day (today) - if toDay is not defined, it will be set to the last day of toMonth/toYear
     * @param productName Name of the product, for example, \&quot;Trademark\&quot; (required)
     * @param fromYear Year from when the product files are needed, for example, 1999. (optional)
     * @param toYear Year until when the product files are needed, for example, 2000. (optional)
     * @param fromMonth Month from when the product files are needed, for example, 01. (optional)
     * @param toMonth Month until when the product files are needed, for example, 12. (optional)
     * @param fromDay Day from when the product files are needed, for example, 01. (optional)
     * @param toDay Day until when the product files are needed, for example, 31. (optional)
     * @param hierarchy Boolean flag to indicate if product hierarchy needs to be return in the response. By default it doesn&#39;t return the hierarchy in the response. (optional, default to false)
     * @param maxFiles Max. number of files to retrieve, per product. Set value to -1 to get all files (optional, default to 20)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Unexpected error accessing metadata. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getProductsByNameWithHttpInfo(String productName, Integer fromYear, Integer toYear, Integer fromMonth, Integer toMonth, Integer fromDay, Integer toDay, String hierarchy, Integer maxFiles) throws ApiException {
        okhttp3.Call localVarCall = getProductsByNameValidateBeforeCall(productName, fromYear, toYear, fromMonth, toMonth, fromDay, toDay, hierarchy, maxFiles, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Returns files associated with products (of level PRODUCT) based on their full or partial names. (asynchronously)
     * Use this GET to search for bulk data services by product name or description. An error message will be returned if the product cannot be found by name. Note that product name is not case sensitive. You can enter full or partial name of an existing product to receive bulk data services. Default values for field names are as follows - if both years are not defined, toYear will be set equal to current year, fromYear will be set equal to previous year - if fromYear is defined, toYear will be set equal to fromYear+1 - if fromMonth not defined, current month will be used - if toMonth not defined, it will be set equal to fromMonth - if fromDay is not defined, it will be set equal to current day (today) - if toDay is not defined, it will be set to the last day of toMonth/toYear
     * @param productName Name of the product, for example, \&quot;Trademark\&quot; (required)
     * @param fromYear Year from when the product files are needed, for example, 1999. (optional)
     * @param toYear Year until when the product files are needed, for example, 2000. (optional)
     * @param fromMonth Month from when the product files are needed, for example, 01. (optional)
     * @param toMonth Month until when the product files are needed, for example, 12. (optional)
     * @param fromDay Day from when the product files are needed, for example, 01. (optional)
     * @param toDay Day until when the product files are needed, for example, 31. (optional)
     * @param hierarchy Boolean flag to indicate if product hierarchy needs to be return in the response. By default it doesn&#39;t return the hierarchy in the response. (optional, default to false)
     * @param maxFiles Max. number of files to retrieve, per product. Set value to -1 to get all files (optional, default to 20)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Unexpected error accessing metadata. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProductsByNameAsync(String productName, Integer fromYear, Integer toYear, Integer fromMonth, Integer toMonth, Integer fromDay, Integer toDay, String hierarchy, Integer maxFiles, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProductsByNameValidateBeforeCall(productName, fromYear, toYear, fromMonth, toMonth, fromDay, toDay, hierarchy, maxFiles, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getProductsByShortName
     * @param shortName Short name  of the product, for example, \&quot;PTGRSP\&quot; (required)
     * @param fromYear Year from when the product files are needed, for example, 1999. (optional)
     * @param toYear Year until when the product files are needed, for example, 2000. (optional)
     * @param fromMonth Month from when the product files are needed, for example, 01. (optional)
     * @param toMonth Month until when the product files are needed, for example, 12. (optional)
     * @param fromDay Day from when the product files are needed, for example, 01. (optional)
     * @param toDay Day until when the product files are needed, for example, 31. (optional)
     * @param fromDate Year from when the product files are needed, for example, 1999-01-01. (optional)
     * @param toDate Year until when the product files are needed, for example, 2001-12-31. (optional)
     * @param hierarchy Boolean flag (possible values: true and false) to indicate if product hierarchy needs to be return in the response. By default it doesn&#39;t return the hierarchy in the response. (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Product not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProductsByShortNameCall(String shortName, Integer fromYear, Integer toYear, Integer fromMonth, Integer toMonth, Integer fromDay, Integer toDay, String fromDate, String toDate, String hierarchy, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/products/{shortName}"
            .replace("{" + "shortName" + "}", localVarApiClient.escapeString(shortName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fromYear != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fromYear", fromYear));
        }

        if (toYear != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("toYear", toYear));
        }

        if (fromMonth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fromMonth", fromMonth));
        }

        if (toMonth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("toMonth", toMonth));
        }

        if (fromDay != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fromDay", fromDay));
        }

        if (toDay != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("toDay", toDay));
        }

        if (fromDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fromDate", fromDate));
        }

        if (toDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("toDate", toDate));
        }

        if (hierarchy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hierarchy", hierarchy));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProductsByShortNameValidateBeforeCall(String shortName, Integer fromYear, Integer toYear, Integer fromMonth, Integer toMonth, Integer fromDay, Integer toDay, String fromDate, String toDate, String hierarchy, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'shortName' is set
        if (shortName == null) {
            throw new ApiException("Missing the required parameter 'shortName' when calling getProductsByShortName(Async)");
        }

        return getProductsByShortNameCall(shortName, fromYear, toYear, fromMonth, toMonth, fromDay, toDay, fromDate, toDate, hierarchy, _callback);

    }

    /**
     * Returns products along with their associated files by short names.
     * Use this GET to search for bulk data products by their short names and description. Note that \&quot;From\&quot; and \&quot;To\&quot; dates can be inputted separately as year/month/day values or as a single date string in format \&quot;YYYY-MM-DD\&quot;. If all values are entered, single date strings have a higher priority For the list of default values rules, see GET /products/byname/{productName} above
     * @param shortName Short name  of the product, for example, \&quot;PTGRSP\&quot; (required)
     * @param fromYear Year from when the product files are needed, for example, 1999. (optional)
     * @param toYear Year until when the product files are needed, for example, 2000. (optional)
     * @param fromMonth Month from when the product files are needed, for example, 01. (optional)
     * @param toMonth Month until when the product files are needed, for example, 12. (optional)
     * @param fromDay Day from when the product files are needed, for example, 01. (optional)
     * @param toDay Day until when the product files are needed, for example, 31. (optional)
     * @param fromDate Year from when the product files are needed, for example, 1999-01-01. (optional)
     * @param toDate Year until when the product files are needed, for example, 2001-12-31. (optional)
     * @param hierarchy Boolean flag (possible values: true and false) to indicate if product hierarchy needs to be return in the response. By default it doesn&#39;t return the hierarchy in the response. (optional, default to false)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Product not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public void getProductsByShortName(String shortName, Integer fromYear, Integer toYear, Integer fromMonth, Integer toMonth, Integer fromDay, Integer toDay, String fromDate, String toDate, String hierarchy) throws ApiException {
        getProductsByShortNameWithHttpInfo(shortName, fromYear, toYear, fromMonth, toMonth, fromDay, toDay, fromDate, toDate, hierarchy);
    }

    /**
     * Returns products along with their associated files by short names.
     * Use this GET to search for bulk data products by their short names and description. Note that \&quot;From\&quot; and \&quot;To\&quot; dates can be inputted separately as year/month/day values or as a single date string in format \&quot;YYYY-MM-DD\&quot;. If all values are entered, single date strings have a higher priority For the list of default values rules, see GET /products/byname/{productName} above
     * @param shortName Short name  of the product, for example, \&quot;PTGRSP\&quot; (required)
     * @param fromYear Year from when the product files are needed, for example, 1999. (optional)
     * @param toYear Year until when the product files are needed, for example, 2000. (optional)
     * @param fromMonth Month from when the product files are needed, for example, 01. (optional)
     * @param toMonth Month until when the product files are needed, for example, 12. (optional)
     * @param fromDay Day from when the product files are needed, for example, 01. (optional)
     * @param toDay Day until when the product files are needed, for example, 31. (optional)
     * @param fromDate Year from when the product files are needed, for example, 1999-01-01. (optional)
     * @param toDate Year until when the product files are needed, for example, 2001-12-31. (optional)
     * @param hierarchy Boolean flag (possible values: true and false) to indicate if product hierarchy needs to be return in the response. By default it doesn&#39;t return the hierarchy in the response. (optional, default to false)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Product not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getProductsByShortNameWithHttpInfo(String shortName, Integer fromYear, Integer toYear, Integer fromMonth, Integer toMonth, Integer fromDay, Integer toDay, String fromDate, String toDate, String hierarchy) throws ApiException {
        okhttp3.Call localVarCall = getProductsByShortNameValidateBeforeCall(shortName, fromYear, toYear, fromMonth, toMonth, fromDay, toDay, fromDate, toDate, hierarchy, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Returns products along with their associated files by short names. (asynchronously)
     * Use this GET to search for bulk data products by their short names and description. Note that \&quot;From\&quot; and \&quot;To\&quot; dates can be inputted separately as year/month/day values or as a single date string in format \&quot;YYYY-MM-DD\&quot;. If all values are entered, single date strings have a higher priority For the list of default values rules, see GET /products/byname/{productName} above
     * @param shortName Short name  of the product, for example, \&quot;PTGRSP\&quot; (required)
     * @param fromYear Year from when the product files are needed, for example, 1999. (optional)
     * @param toYear Year until when the product files are needed, for example, 2000. (optional)
     * @param fromMonth Month from when the product files are needed, for example, 01. (optional)
     * @param toMonth Month until when the product files are needed, for example, 12. (optional)
     * @param fromDay Day from when the product files are needed, for example, 01. (optional)
     * @param toDay Day until when the product files are needed, for example, 31. (optional)
     * @param fromDate Year from when the product files are needed, for example, 1999-01-01. (optional)
     * @param toDate Year until when the product files are needed, for example, 2001-12-31. (optional)
     * @param hierarchy Boolean flag (possible values: true and false) to indicate if product hierarchy needs to be return in the response. By default it doesn&#39;t return the hierarchy in the response. (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Product not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProductsByShortNameAsync(String shortName, Integer fromYear, Integer toYear, Integer fromMonth, Integer toMonth, Integer fromDay, Integer toDay, String fromDate, String toDate, String hierarchy, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProductsByShortNameValidateBeforeCall(shortName, fromYear, toYear, fromMonth, toMonth, fromDay, toDay, fromDate, toDate, hierarchy, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getProductsTree
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Unexpected error accessing metadata. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProductsTreeCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/products/tree";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProductsTreeValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getProductsTreeCall(_callback);

    }

    /**
     * Returns products&#39; hierarchical tree.
     * Use this GET to retrieve short name and parent/child relationships for bulk data products. Short names are unique IDs of the products and should be used in other GETs where {shortName} parameter is required Use this GET to perform initial exploration of the existing products hierarchy Short names are unique IDs of the products and should be used in other GETs where {shortName} parameter is required
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Unexpected error accessing metadata. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public void getProductsTree() throws ApiException {
        getProductsTreeWithHttpInfo();
    }

    /**
     * Returns products&#39; hierarchical tree.
     * Use this GET to retrieve short name and parent/child relationships for bulk data products. Short names are unique IDs of the products and should be used in other GETs where {shortName} parameter is required Use this GET to perform initial exploration of the existing products hierarchy Short names are unique IDs of the products and should be used in other GETs where {shortName} parameter is required
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Unexpected error accessing metadata. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getProductsTreeWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getProductsTreeValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Returns products&#39; hierarchical tree. (asynchronously)
     * Use this GET to retrieve short name and parent/child relationships for bulk data products. Short names are unique IDs of the products and should be used in other GETs where {shortName} parameter is required Use this GET to perform initial exploration of the existing products hierarchy Short names are unique IDs of the products and should be used in other GETs where {shortName} parameter is required
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Unexpected error accessing metadata. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProductsTreeAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProductsTreeValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getProductsWithLatestProductFiles
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Unexpected error accessing metadata. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProductsWithLatestProductFilesCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/products/all/latest";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProductsWithLatestProductFilesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getProductsWithLatestProductFilesCall(_callback);

    }

    /**
     * Returns all products with Latest Files.
     * Use this GET to retrieve latest released bulk data products. Note that there is one file per product. The response includes product fields such as title, description, frequency, and level.
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Unexpected error accessing metadata. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public void getProductsWithLatestProductFiles() throws ApiException {
        getProductsWithLatestProductFilesWithHttpInfo();
    }

    /**
     * Returns all products with Latest Files.
     * Use this GET to retrieve latest released bulk data products. Note that there is one file per product. The response includes product fields such as title, description, frequency, and level.
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Unexpected error accessing metadata. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getProductsWithLatestProductFilesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getProductsWithLatestProductFilesValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Returns all products with Latest Files. (asynchronously)
     * Use this GET to retrieve latest released bulk data products. Note that there is one file per product. The response includes product fields such as title, description, frequency, and level.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Unexpected error accessing metadata. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProductsWithLatestProductFilesAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProductsWithLatestProductFilesValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
