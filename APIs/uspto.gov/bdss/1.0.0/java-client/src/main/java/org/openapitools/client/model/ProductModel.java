/*
 * Bulk Data Storage System Services
 * Bulk Data Storage System (BDSS) allows the public to discover, search, and download patent and trademark data in bulk form.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.net.URI;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ProductFileModel;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Product Model
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:54:28.074243-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ProductModel {
  public static final String SERIALIZED_NAME_NUMBER_OF_FILES = "numberOfFiles";
  @SerializedName(SERIALIZED_NAME_NUMBER_OF_FILES)
  private Long numberOfFiles;

  public static final String SERIALIZED_NAME_PARENT_PRODUCT = "parentProduct";
  @SerializedName(SERIALIZED_NAME_PARENT_PRODUCT)
  private ProductModel parentProduct;

  public static final String SERIALIZED_NAME_PRODUCT_DESC = "productDesc";
  @SerializedName(SERIALIZED_NAME_PRODUCT_DESC)
  private String productDesc;

  public static final String SERIALIZED_NAME_PRODUCT_FILES = "productFiles";
  @SerializedName(SERIALIZED_NAME_PRODUCT_FILES)
  private List<ProductFileModel> productFiles = new ArrayList<>();

  public static final String SERIALIZED_NAME_PRODUCT_FREQUENCY = "productFrequency";
  @SerializedName(SERIALIZED_NAME_PRODUCT_FREQUENCY)
  private String productFrequency;

  public static final String SERIALIZED_NAME_PRODUCT_FROM_DATE = "productFromDate";
  @SerializedName(SERIALIZED_NAME_PRODUCT_FROM_DATE)
  private String productFromDate;

  public static final String SERIALIZED_NAME_PRODUCT_IDENTIFIER = "productIdentifier";
  @SerializedName(SERIALIZED_NAME_PRODUCT_IDENTIFIER)
  private Integer productIdentifier;

  /**
   * Represents the Level in the Product hierarchy.
   */
  @JsonAdapter(ProductLevelEnum.Adapter.class)
  public enum ProductLevelEnum {
    AVAILABLE("available"),
    
    PENDING("pending"),
    
    SOLD("sold");

    private String value;

    ProductLevelEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ProductLevelEnum fromValue(String value) {
      for (ProductLevelEnum b : ProductLevelEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ProductLevelEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProductLevelEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProductLevelEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ProductLevelEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ProductLevelEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PRODUCT_LEVEL = "productLevel";
  @SerializedName(SERIALIZED_NAME_PRODUCT_LEVEL)
  private ProductLevelEnum productLevel;

  public static final String SERIALIZED_NAME_PRODUCT_LINK_PATH = "productLinkPath";
  @SerializedName(SERIALIZED_NAME_PRODUCT_LINK_PATH)
  private URI productLinkPath;

  public static final String SERIALIZED_NAME_PRODUCT_SHORT_NAME = "productShortName";
  @SerializedName(SERIALIZED_NAME_PRODUCT_SHORT_NAME)
  private String productShortName;

  public static final String SERIALIZED_NAME_PRODUCT_TITLE = "productTitle";
  @SerializedName(SERIALIZED_NAME_PRODUCT_TITLE)
  private String productTitle;

  public static final String SERIALIZED_NAME_PRODUCT_TO_DATE = "productToDate";
  @SerializedName(SERIALIZED_NAME_PRODUCT_TO_DATE)
  private String productToDate;

  public ProductModel() {
  }

  public ProductModel numberOfFiles(Long numberOfFiles) {
    this.numberOfFiles = numberOfFiles;
    return this;
  }

  /**
   * Get numberOfFiles
   * @return numberOfFiles
   */
  @javax.annotation.Nullable
  public Long getNumberOfFiles() {
    return numberOfFiles;
  }

  public void setNumberOfFiles(Long numberOfFiles) {
    this.numberOfFiles = numberOfFiles;
  }


  public ProductModel parentProduct(ProductModel parentProduct) {
    this.parentProduct = parentProduct;
    return this;
  }

  /**
   * Get parentProduct
   * @return parentProduct
   */
  @javax.annotation.Nullable
  public ProductModel getParentProduct() {
    return parentProduct;
  }

  public void setParentProduct(ProductModel parentProduct) {
    this.parentProduct = parentProduct;
  }


  public ProductModel productDesc(String productDesc) {
    this.productDesc = productDesc;
    return this;
  }

  /**
   * Get productDesc
   * @return productDesc
   */
  @javax.annotation.Nullable
  public String getProductDesc() {
    return productDesc;
  }

  public void setProductDesc(String productDesc) {
    this.productDesc = productDesc;
  }


  public ProductModel productFiles(List<ProductFileModel> productFiles) {
    this.productFiles = productFiles;
    return this;
  }

  public ProductModel addProductFilesItem(ProductFileModel productFilesItem) {
    if (this.productFiles == null) {
      this.productFiles = new ArrayList<>();
    }
    this.productFiles.add(productFilesItem);
    return this;
  }

  /**
   * Get productFiles
   * @return productFiles
   */
  @javax.annotation.Nullable
  public List<ProductFileModel> getProductFiles() {
    return productFiles;
  }

  public void setProductFiles(List<ProductFileModel> productFiles) {
    this.productFiles = productFiles;
  }


  public ProductModel productFrequency(String productFrequency) {
    this.productFrequency = productFrequency;
    return this;
  }

  /**
   * Get productFrequency
   * @return productFrequency
   */
  @javax.annotation.Nullable
  public String getProductFrequency() {
    return productFrequency;
  }

  public void setProductFrequency(String productFrequency) {
    this.productFrequency = productFrequency;
  }


  public ProductModel productFromDate(String productFromDate) {
    this.productFromDate = productFromDate;
    return this;
  }

  /**
   * Get productFromDate
   * @return productFromDate
   */
  @javax.annotation.Nullable
  public String getProductFromDate() {
    return productFromDate;
  }

  public void setProductFromDate(String productFromDate) {
    this.productFromDate = productFromDate;
  }


  public ProductModel productIdentifier(Integer productIdentifier) {
    this.productIdentifier = productIdentifier;
    return this;
  }

  /**
   * Get productIdentifier
   * @return productIdentifier
   */
  @javax.annotation.Nullable
  public Integer getProductIdentifier() {
    return productIdentifier;
  }

  public void setProductIdentifier(Integer productIdentifier) {
    this.productIdentifier = productIdentifier;
  }


  public ProductModel productLevel(ProductLevelEnum productLevel) {
    this.productLevel = productLevel;
    return this;
  }

  /**
   * Represents the Level in the Product hierarchy.
   * @return productLevel
   */
  @javax.annotation.Nullable
  public ProductLevelEnum getProductLevel() {
    return productLevel;
  }

  public void setProductLevel(ProductLevelEnum productLevel) {
    this.productLevel = productLevel;
  }


  public ProductModel productLinkPath(URI productLinkPath) {
    this.productLinkPath = productLinkPath;
    return this;
  }

  /**
   * Get productLinkPath
   * @return productLinkPath
   */
  @javax.annotation.Nullable
  public URI getProductLinkPath() {
    return productLinkPath;
  }

  public void setProductLinkPath(URI productLinkPath) {
    this.productLinkPath = productLinkPath;
  }


  public ProductModel productShortName(String productShortName) {
    this.productShortName = productShortName;
    return this;
  }

  /**
   * Get productShortName
   * @return productShortName
   */
  @javax.annotation.Nullable
  public String getProductShortName() {
    return productShortName;
  }

  public void setProductShortName(String productShortName) {
    this.productShortName = productShortName;
  }


  public ProductModel productTitle(String productTitle) {
    this.productTitle = productTitle;
    return this;
  }

  /**
   * Get productTitle
   * @return productTitle
   */
  @javax.annotation.Nullable
  public String getProductTitle() {
    return productTitle;
  }

  public void setProductTitle(String productTitle) {
    this.productTitle = productTitle;
  }


  public ProductModel productToDate(String productToDate) {
    this.productToDate = productToDate;
    return this;
  }

  /**
   * Get productToDate
   * @return productToDate
   */
  @javax.annotation.Nullable
  public String getProductToDate() {
    return productToDate;
  }

  public void setProductToDate(String productToDate) {
    this.productToDate = productToDate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProductModel productModel = (ProductModel) o;
    return Objects.equals(this.numberOfFiles, productModel.numberOfFiles) &&
        Objects.equals(this.parentProduct, productModel.parentProduct) &&
        Objects.equals(this.productDesc, productModel.productDesc) &&
        Objects.equals(this.productFiles, productModel.productFiles) &&
        Objects.equals(this.productFrequency, productModel.productFrequency) &&
        Objects.equals(this.productFromDate, productModel.productFromDate) &&
        Objects.equals(this.productIdentifier, productModel.productIdentifier) &&
        Objects.equals(this.productLevel, productModel.productLevel) &&
        Objects.equals(this.productLinkPath, productModel.productLinkPath) &&
        Objects.equals(this.productShortName, productModel.productShortName) &&
        Objects.equals(this.productTitle, productModel.productTitle) &&
        Objects.equals(this.productToDate, productModel.productToDate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(numberOfFiles, parentProduct, productDesc, productFiles, productFrequency, productFromDate, productIdentifier, productLevel, productLinkPath, productShortName, productTitle, productToDate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProductModel {\n");
    sb.append("    numberOfFiles: ").append(toIndentedString(numberOfFiles)).append("\n");
    sb.append("    parentProduct: ").append(toIndentedString(parentProduct)).append("\n");
    sb.append("    productDesc: ").append(toIndentedString(productDesc)).append("\n");
    sb.append("    productFiles: ").append(toIndentedString(productFiles)).append("\n");
    sb.append("    productFrequency: ").append(toIndentedString(productFrequency)).append("\n");
    sb.append("    productFromDate: ").append(toIndentedString(productFromDate)).append("\n");
    sb.append("    productIdentifier: ").append(toIndentedString(productIdentifier)).append("\n");
    sb.append("    productLevel: ").append(toIndentedString(productLevel)).append("\n");
    sb.append("    productLinkPath: ").append(toIndentedString(productLinkPath)).append("\n");
    sb.append("    productShortName: ").append(toIndentedString(productShortName)).append("\n");
    sb.append("    productTitle: ").append(toIndentedString(productTitle)).append("\n");
    sb.append("    productToDate: ").append(toIndentedString(productToDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("numberOfFiles");
    openapiFields.add("parentProduct");
    openapiFields.add("productDesc");
    openapiFields.add("productFiles");
    openapiFields.add("productFrequency");
    openapiFields.add("productFromDate");
    openapiFields.add("productIdentifier");
    openapiFields.add("productLevel");
    openapiFields.add("productLinkPath");
    openapiFields.add("productShortName");
    openapiFields.add("productTitle");
    openapiFields.add("productToDate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ProductModel
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ProductModel.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ProductModel is not found in the empty JSON string", ProductModel.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ProductModel.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ProductModel` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `parentProduct`
      if (jsonObj.get("parentProduct") != null && !jsonObj.get("parentProduct").isJsonNull()) {
        ProductModel.validateJsonElement(jsonObj.get("parentProduct"));
      }
      if ((jsonObj.get("productDesc") != null && !jsonObj.get("productDesc").isJsonNull()) && !jsonObj.get("productDesc").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `productDesc` to be a primitive type in the JSON string but got `%s`", jsonObj.get("productDesc").toString()));
      }
      if (jsonObj.get("productFiles") != null && !jsonObj.get("productFiles").isJsonNull()) {
        JsonArray jsonArrayproductFiles = jsonObj.getAsJsonArray("productFiles");
        if (jsonArrayproductFiles != null) {
          // ensure the json data is an array
          if (!jsonObj.get("productFiles").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `productFiles` to be an array in the JSON string but got `%s`", jsonObj.get("productFiles").toString()));
          }

          // validate the optional field `productFiles` (array)
          for (int i = 0; i < jsonArrayproductFiles.size(); i++) {
            ProductFileModel.validateJsonElement(jsonArrayproductFiles.get(i));
          };
        }
      }
      if ((jsonObj.get("productFrequency") != null && !jsonObj.get("productFrequency").isJsonNull()) && !jsonObj.get("productFrequency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `productFrequency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("productFrequency").toString()));
      }
      if ((jsonObj.get("productFromDate") != null && !jsonObj.get("productFromDate").isJsonNull()) && !jsonObj.get("productFromDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `productFromDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("productFromDate").toString()));
      }
      if ((jsonObj.get("productLevel") != null && !jsonObj.get("productLevel").isJsonNull()) && !jsonObj.get("productLevel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `productLevel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("productLevel").toString()));
      }
      // validate the optional field `productLevel`
      if (jsonObj.get("productLevel") != null && !jsonObj.get("productLevel").isJsonNull()) {
        ProductLevelEnum.validateJsonElement(jsonObj.get("productLevel"));
      }
      if ((jsonObj.get("productLinkPath") != null && !jsonObj.get("productLinkPath").isJsonNull()) && !jsonObj.get("productLinkPath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `productLinkPath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("productLinkPath").toString()));
      }
      if ((jsonObj.get("productShortName") != null && !jsonObj.get("productShortName").isJsonNull()) && !jsonObj.get("productShortName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `productShortName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("productShortName").toString()));
      }
      if ((jsonObj.get("productTitle") != null && !jsonObj.get("productTitle").isJsonNull()) && !jsonObj.get("productTitle").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `productTitle` to be a primitive type in the JSON string but got `%s`", jsonObj.get("productTitle").toString()));
      }
      if ((jsonObj.get("productToDate") != null && !jsonObj.get("productToDate").isJsonNull()) && !jsonObj.get("productToDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `productToDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("productToDate").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ProductModel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ProductModel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ProductModel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ProductModel.class));

       return (TypeAdapter<T>) new TypeAdapter<ProductModel>() {
           @Override
           public void write(JsonWriter out, ProductModel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ProductModel read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ProductModel given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ProductModel
   * @throws IOException if the JSON string is invalid with respect to ProductModel
   */
  public static ProductModel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ProductModel.class);
  }

  /**
   * Convert an instance of ProductModel to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

