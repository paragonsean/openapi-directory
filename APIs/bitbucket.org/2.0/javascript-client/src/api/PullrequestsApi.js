/**
 * Bitbucket API
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@bitbucket.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Account from '../model/Account';
import CommentResolution from '../model/CommentResolution';
import Error from '../model/Error';
import PaginatedAccounts from '../model/PaginatedAccounts';
import PaginatedCommitstatuses from '../model/PaginatedCommitstatuses';
import PaginatedDefaultReviewerAndType from '../model/PaginatedDefaultReviewerAndType';
import PaginatedPullrequestComments from '../model/PaginatedPullrequestComments';
import PaginatedPullrequests from '../model/PaginatedPullrequests';
import Participant from '../model/Participant';
import Pullrequest from '../model/Pullrequest';
import PullrequestComment from '../model/PullrequestComment';
import PullrequestMergeParameters from '../model/PullrequestMergeParameters';

/**
* Pullrequests service.
* @module api/PullrequestsApi
* @version 2.0
*/
export default class PullrequestsApi {

    /**
    * Constructs a new PullrequestsApi. 
    * @alias module:api/PullrequestsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getPullrequestsForCommit operation.
     * @callback module:api/PullrequestsApi~getPullrequestsForCommitCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedPullrequests} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List pull requests that contain a commit
     * Returns a paginated list of all pull requests as part of which this commit was reviewed. Pull Request Commit Links app must be installed first before using this API; installation automatically occurs when 'Go to pull request' is clicked from the web interface for a commit's details.
     * @param {String} workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces
     * @param {String} repoSlug The repository; either the UUID in curly braces, or the slug
     * @param {String} commit The SHA1 of the commit
     * @param {Object} opts Optional parameters
     * @param {Number} [page = 1)] Which page to retrieve
     * @param {Number} [pagelen = 30)] How many pull requests to retrieve per page
     * @param {module:api/PullrequestsApi~getPullrequestsForCommitCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedPullrequests}
     */
    getPullrequestsForCommit(workspace, repoSlug, commit, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'workspace' is set
      if (workspace === undefined || workspace === null) {
        throw new Error("Missing the required parameter 'workspace' when calling getPullrequestsForCommit");
      }
      // verify the required parameter 'repoSlug' is set
      if (repoSlug === undefined || repoSlug === null) {
        throw new Error("Missing the required parameter 'repoSlug' when calling getPullrequestsForCommit");
      }
      // verify the required parameter 'commit' is set
      if (commit === undefined || commit === null) {
        throw new Error("Missing the required parameter 'commit' when calling getPullrequestsForCommit");
      }

      let pathParams = {
        'workspace': workspace,
        'repo_slug': repoSlug,
        'commit': commit
      };
      let queryParams = {
        'page': opts['page'],
        'pagelen': opts['pagelen']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PaginatedPullrequests;
      return this.apiClient.callApi(
        '/repositories/{workspace}/{repo_slug}/commit/{commit}/pullrequests', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pullrequestsSelectedUserGet operation.
     * @callback module:api/PullrequestsApi~pullrequestsSelectedUserGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedPullrequests} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List pull requests for a user
     * Returns all pull requests authored by the specified user.  By default only open pull requests are returned. This can be controlled using the `state` query parameter. To retrieve pull requests that are in one of multiple states, repeat the `state` parameter for each individual state.  This endpoint also supports filtering and sorting of the results. See [filtering and sorting](/cloud/bitbucket/rest/intro/#filtering) for more details.
     * @param {String} selectedUser This can either be the username of the pull request author, the author's UUID surrounded by curly-braces, for example: `{account UUID}`, or the author's Atlassian ID. 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [state] Only return pull requests that are in this state. This parameter can be repeated.
     * @param {module:api/PullrequestsApi~pullrequestsSelectedUserGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedPullrequests}
     */
    pullrequestsSelectedUserGet(selectedUser, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'selectedUser' is set
      if (selectedUser === undefined || selectedUser === null) {
        throw new Error("Missing the required parameter 'selectedUser' when calling pullrequestsSelectedUserGet");
      }

      let pathParams = {
        'selected_user': selectedUser
      };
      let queryParams = {
        'state': opts['state']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'oauth2', 'basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PaginatedPullrequests;
      return this.apiClient.callApi(
        '/pullrequests/{selected_user}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the repositoriesWorkspaceRepoSlugDefaultReviewersGet operation.
     * @callback module:api/PullrequestsApi~repositoriesWorkspaceRepoSlugDefaultReviewersGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedAccounts} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List default reviewers
     * Returns the repository's default reviewers.  These are the users that are automatically added as reviewers on every new pull request that is created. To obtain the repository's default reviewers as well as the default reviewers inherited from the project, use the [effective-default-reveiwers](#api-repositories-workspace-repo-slug-effective-default-reviewers-get) endpoint.
     * @param {String} repoSlug This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: `{repository UUID}`. 
     * @param {String} workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: `{workspace UUID}`. 
     * @param {module:api/PullrequestsApi~repositoriesWorkspaceRepoSlugDefaultReviewersGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedAccounts}
     */
    repositoriesWorkspaceRepoSlugDefaultReviewersGet(repoSlug, workspace, callback) {
      let postBody = null;
      // verify the required parameter 'repoSlug' is set
      if (repoSlug === undefined || repoSlug === null) {
        throw new Error("Missing the required parameter 'repoSlug' when calling repositoriesWorkspaceRepoSlugDefaultReviewersGet");
      }
      // verify the required parameter 'workspace' is set
      if (workspace === undefined || workspace === null) {
        throw new Error("Missing the required parameter 'workspace' when calling repositoriesWorkspaceRepoSlugDefaultReviewersGet");
      }

      let pathParams = {
        'repo_slug': repoSlug,
        'workspace': workspace
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'oauth2', 'basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PaginatedAccounts;
      return this.apiClient.callApi(
        '/repositories/{workspace}/{repo_slug}/default-reviewers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the repositoriesWorkspaceRepoSlugDefaultReviewersTargetUsernameDelete operation.
     * @callback module:api/PullrequestsApi~repositoriesWorkspaceRepoSlugDefaultReviewersTargetUsernameDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a user from the default reviewers
     * Removes a default reviewer from the repository.
     * @param {String} repoSlug This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: `{repository UUID}`. 
     * @param {String} targetUsername This can either be the username or the UUID of the default reviewer, surrounded by curly-braces, for example: `{account UUID}`. 
     * @param {String} workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: `{workspace UUID}`. 
     * @param {module:api/PullrequestsApi~repositoriesWorkspaceRepoSlugDefaultReviewersTargetUsernameDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    repositoriesWorkspaceRepoSlugDefaultReviewersTargetUsernameDelete(repoSlug, targetUsername, workspace, callback) {
      let postBody = null;
      // verify the required parameter 'repoSlug' is set
      if (repoSlug === undefined || repoSlug === null) {
        throw new Error("Missing the required parameter 'repoSlug' when calling repositoriesWorkspaceRepoSlugDefaultReviewersTargetUsernameDelete");
      }
      // verify the required parameter 'targetUsername' is set
      if (targetUsername === undefined || targetUsername === null) {
        throw new Error("Missing the required parameter 'targetUsername' when calling repositoriesWorkspaceRepoSlugDefaultReviewersTargetUsernameDelete");
      }
      // verify the required parameter 'workspace' is set
      if (workspace === undefined || workspace === null) {
        throw new Error("Missing the required parameter 'workspace' when calling repositoriesWorkspaceRepoSlugDefaultReviewersTargetUsernameDelete");
      }

      let pathParams = {
        'repo_slug': repoSlug,
        'target_username': targetUsername,
        'workspace': workspace
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'oauth2', 'basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/repositories/{workspace}/{repo_slug}/default-reviewers/{target_username}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the repositoriesWorkspaceRepoSlugDefaultReviewersTargetUsernameGet operation.
     * @callback module:api/PullrequestsApi~repositoriesWorkspaceRepoSlugDefaultReviewersTargetUsernameGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Account} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a default reviewer
     * Returns the specified reviewer.  This can be used to test whether a user is among the repository's default reviewers list. A 404 indicates that that specified user is not a default reviewer.
     * @param {String} repoSlug This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: `{repository UUID}`. 
     * @param {String} targetUsername This can either be the username or the UUID of the default reviewer, surrounded by curly-braces, for example: `{account UUID}`. 
     * @param {String} workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: `{workspace UUID}`. 
     * @param {module:api/PullrequestsApi~repositoriesWorkspaceRepoSlugDefaultReviewersTargetUsernameGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Account}
     */
    repositoriesWorkspaceRepoSlugDefaultReviewersTargetUsernameGet(repoSlug, targetUsername, workspace, callback) {
      let postBody = null;
      // verify the required parameter 'repoSlug' is set
      if (repoSlug === undefined || repoSlug === null) {
        throw new Error("Missing the required parameter 'repoSlug' when calling repositoriesWorkspaceRepoSlugDefaultReviewersTargetUsernameGet");
      }
      // verify the required parameter 'targetUsername' is set
      if (targetUsername === undefined || targetUsername === null) {
        throw new Error("Missing the required parameter 'targetUsername' when calling repositoriesWorkspaceRepoSlugDefaultReviewersTargetUsernameGet");
      }
      // verify the required parameter 'workspace' is set
      if (workspace === undefined || workspace === null) {
        throw new Error("Missing the required parameter 'workspace' when calling repositoriesWorkspaceRepoSlugDefaultReviewersTargetUsernameGet");
      }

      let pathParams = {
        'repo_slug': repoSlug,
        'target_username': targetUsername,
        'workspace': workspace
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'oauth2', 'basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Account;
      return this.apiClient.callApi(
        '/repositories/{workspace}/{repo_slug}/default-reviewers/{target_username}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the repositoriesWorkspaceRepoSlugDefaultReviewersTargetUsernamePut operation.
     * @callback module:api/PullrequestsApi~repositoriesWorkspaceRepoSlugDefaultReviewersTargetUsernamePutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Account} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a user to the default reviewers
     * Adds the specified user to the repository's list of default reviewers.  This method is idempotent. Adding a user a second time has no effect.
     * @param {String} repoSlug This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: `{repository UUID}`. 
     * @param {String} targetUsername This can either be the username or the UUID of the default reviewer, surrounded by curly-braces, for example: `{account UUID}`. 
     * @param {String} workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: `{workspace UUID}`. 
     * @param {module:api/PullrequestsApi~repositoriesWorkspaceRepoSlugDefaultReviewersTargetUsernamePutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Account}
     */
    repositoriesWorkspaceRepoSlugDefaultReviewersTargetUsernamePut(repoSlug, targetUsername, workspace, callback) {
      let postBody = null;
      // verify the required parameter 'repoSlug' is set
      if (repoSlug === undefined || repoSlug === null) {
        throw new Error("Missing the required parameter 'repoSlug' when calling repositoriesWorkspaceRepoSlugDefaultReviewersTargetUsernamePut");
      }
      // verify the required parameter 'targetUsername' is set
      if (targetUsername === undefined || targetUsername === null) {
        throw new Error("Missing the required parameter 'targetUsername' when calling repositoriesWorkspaceRepoSlugDefaultReviewersTargetUsernamePut");
      }
      // verify the required parameter 'workspace' is set
      if (workspace === undefined || workspace === null) {
        throw new Error("Missing the required parameter 'workspace' when calling repositoriesWorkspaceRepoSlugDefaultReviewersTargetUsernamePut");
      }

      let pathParams = {
        'repo_slug': repoSlug,
        'target_username': targetUsername,
        'workspace': workspace
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'oauth2', 'basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Account;
      return this.apiClient.callApi(
        '/repositories/{workspace}/{repo_slug}/default-reviewers/{target_username}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the repositoriesWorkspaceRepoSlugEffectiveDefaultReviewersGet operation.
     * @callback module:api/PullrequestsApi~repositoriesWorkspaceRepoSlugEffectiveDefaultReviewersGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedDefaultReviewerAndType} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List effective default reviewers
     * Returns the repository's effective default reviewers. This includes both default reviewers defined at the repository level as well as those inherited from its project.  These are the users that are automatically added as reviewers on every new pull request that is created.  ``` $ curl https://api.bitbucket.org/2.0/repositories/{workspace_slug}/{repo_slug}/effective-default-reviewers?page=1&pagelen=20 {     \"pagelen\": 20,     \"values\": [         {             \"user\": {                 \"display_name\": \"Patrick Wolf\",                 \"uuid\": \"{9565301a-a3cf-4b5d-88f4-dd6af8078d7e}\"             },             \"reviewer_type\": \"project\",             \"type\": \"default_reviewer\",         },         {             \"user\": {                 \"display_name\": \"Davis Lee\",                 \"uuid\": \"{f0e0e8e9-66c1-4b85-a784-44a9eb9ef1a6}\"             },             \"reviewer_type\": \"repository\",             \"type\": \"default_reviewer\",         }     ],     \"page\": 1,     \"size\": 2 } ```
     * @param {String} repoSlug This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: `{repository UUID}`. 
     * @param {String} workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: `{workspace UUID}`. 
     * @param {module:api/PullrequestsApi~repositoriesWorkspaceRepoSlugEffectiveDefaultReviewersGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedDefaultReviewerAndType}
     */
    repositoriesWorkspaceRepoSlugEffectiveDefaultReviewersGet(repoSlug, workspace, callback) {
      let postBody = null;
      // verify the required parameter 'repoSlug' is set
      if (repoSlug === undefined || repoSlug === null) {
        throw new Error("Missing the required parameter 'repoSlug' when calling repositoriesWorkspaceRepoSlugEffectiveDefaultReviewersGet");
      }
      // verify the required parameter 'workspace' is set
      if (workspace === undefined || workspace === null) {
        throw new Error("Missing the required parameter 'workspace' when calling repositoriesWorkspaceRepoSlugEffectiveDefaultReviewersGet");
      }

      let pathParams = {
        'repo_slug': repoSlug,
        'workspace': workspace
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'oauth2', 'basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PaginatedDefaultReviewerAndType;
      return this.apiClient.callApi(
        '/repositories/{workspace}/{repo_slug}/effective-default-reviewers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the repositoriesWorkspaceRepoSlugPullrequestsActivityGet operation.
     * @callback module:api/PullrequestsApi~repositoriesWorkspaceRepoSlugPullrequestsActivityGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List a pull request activity log
     * Returns a paginated list of the pull request's activity log.  This handler serves both a v20 and internal endpoint. The v20 endpoint returns reviewer comments, updates, approvals and request changes. The internal endpoint includes those plus tasks and attachments.  Comments created on a file or a line of code have an inline property.  Comment example: ``` {     \"pagelen\": 20,     \"values\": [         {             \"comment\": {                 \"links\": {                     \"self\": {                         \"href\": \"https://api.bitbucket.org/2.0/repositories/atlassian/atlaskit-mk-2/pullrequests/5695/comments/118571088\"                     },                     \"html\": {                         \"href\": \"https://bitbucket.org/atlassian/atlaskit-mk-2/pull-requests/5695/_/diff#comment-118571088\"                     }                 },                 \"deleted\": false,                 \"pullrequest\": {                     \"type\": \"pullrequest\",                     \"id\": 5695,                     \"links\": {                         \"self\": {                             \"href\": \"https://api.bitbucket.org/2.0/repositories/atlassian/atlaskit-mk-2/pullrequests/5695\"                         },                         \"html\": {                             \"href\": \"https://bitbucket.org/atlassian/atlaskit-mk-2/pull-requests/5695\"                         }                     },                     \"title\": \"username/NONE: small change from onFocus to onClick to handle tabbing through the page and not expand the editor unless a click event triggers it\"                 },                 \"content\": {                     \"raw\": \"inline with to a dn from lines\",                     \"markup\": \"markdown\",                     \"html\": \"<p>inline with to a dn from lines</p>\",                     \"type\": \"rendered\"                 },                 \"created_on\": \"2019-09-27T00:33:46.039178+00:00\",                 \"user\": {                     \"display_name\": \"Name Lastname\",                     \"uuid\": \"{}\",                     \"links\": {                         \"self\": {                             \"href\": \"https://api.bitbucket.org/2.0/users/%7B%7D\"                         },                         \"html\": {                             \"href\": \"https://bitbucket.org/%7B%7D/\"                         },                         \"avatar\": {                             \"href\": \"https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/:/128\"                         }                     },                     \"type\": \"user\",                     \"nickname\": \"Name\",                     \"account_id\": \"\"                 },                 \"created_on\": \"2019-09-27T00:33:46.039178+00:00\",                 \"user\": {                     \"display_name\": \"Name Lastname\",                     \"uuid\": \"{}\",                     \"links\": {                         \"self\": {                             \"href\": \"https://api.bitbucket.org/2.0/users/%7B%7D\"                         },                         \"html\": {                             \"href\": \"https://bitbucket.org/%7B%7D/\"                         },                         \"avatar\": {                             \"href\": \"https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/:/128\"                         }                     },                     \"type\": \"user\",                     \"nickname\": \"Name\",                     \"account_id\": \"\"                 },                 \"updated_on\": \"2019-09-27T00:33:46.055384+00:00\",                 \"inline\": {                     \"context_lines\": \"\",                     \"to\": null,                     \"path\": \"\",                     \"outdated\": false,                     \"from\": 211                 },                 \"type\": \"pullrequest_comment\",                 \"id\": 118571088             },             \"pull_request\": {                 \"type\": \"pullrequest\",                 \"id\": 5695,                 \"links\": {                     \"self\": {                         \"href\": \"https://api.bitbucket.org/2.0/repositories/atlassian/atlaskit-mk-2/pullrequests/5695\"                     },                     \"html\": {                         \"href\": \"https://bitbucket.org/atlassian/atlaskit-mk-2/pull-requests/5695\"                     }                 },                 \"title\": \"username/NONE: small change from onFocus to onClick to handle tabbing through the page and not expand the editor unless a click event triggers it\"             }         }     ] } ```  Updates include a state property of OPEN, MERGED, or DECLINED.  Update example: ``` {     \"pagelen\": 20,     \"values\": [         {             \"update\": {                 \"description\": \"\",                 \"title\": \"username/NONE: small change from onFocus to onClick to handle tabbing through the page and not expand the editor unless a click event triggers it\",                 \"destination\": {                     \"commit\": {                         \"type\": \"commit\",                         \"hash\": \"6a2c16e4a152\",                         \"links\": {                             \"self\": {                                 \"href\": \"https://api.bitbucket.org/2.0/repositories/atlassian/atlaskit-mk-2/commit/6a2c16e4a152\"                             },                             \"html\": {                                 \"href\": \"https://bitbucket.org/atlassian/atlaskit-mk-2/commits/6a2c16e4a152\"                             }                         }                     },                     \"branch\": {                         \"name\": \"master\"                     },                     \"repository\": {                         \"name\": \"Atlaskit-MK-2\",                         \"type\": \"repository\",                         \"full_name\": \"atlassian/atlaskit-mk-2\",                         \"links\": {                             \"self\": {                                 \"href\": \"https://api.bitbucket.org/2.0/repositories/atlassian/atlaskit-mk-2\"                             },                             \"html\": {                                 \"href\": \"https://bitbucket.org/atlassian/atlaskit-mk-2\"                             },                             \"avatar\": {                                 \"href\": \"https://bytebucket.org/ravatar/%7B%7D?ts=js\"                             }                         },                         \"uuid\": \"{}\"                     }                 },                 \"reason\": \"\",                 \"source\": {                     \"commit\": {                         \"type\": \"commit\",                         \"hash\": \"728c8bad1813\",                         \"links\": {                             \"self\": {                                 \"href\": \"https://api.bitbucket.org/2.0/repositories/atlassian/atlaskit-mk-2/commit/728c8bad1813\"                             },                             \"html\": {                                 \"href\": \"https://bitbucket.org/atlassian/atlaskit-mk-2/commits/728c8bad1813\"                             }                         }                     },                     \"branch\": {                         \"name\": \"username/NONE-add-onClick-prop-for-accessibility\"                     },                     \"repository\": {                         \"name\": \"Atlaskit-MK-2\",                         \"type\": \"repository\",                         \"full_name\": \"atlassian/atlaskit-mk-2\",                         \"links\": {                             \"self\": {                                 \"href\": \"https://api.bitbucket.org/2.0/repositories/atlassian/atlaskit-mk-2\"                             },                             \"html\": {                                 \"href\": \"https://bitbucket.org/atlassian/atlaskit-mk-2\"                             },                             \"avatar\": {                                 \"href\": \"https://bytebucket.org/ravatar/%7B%7D?ts=js\"                             }                         },                         \"uuid\": \"{}\"                     }                 },                 \"state\": \"OPEN\",                 \"author\": {                     \"display_name\": \"Name Lastname\",                     \"uuid\": \"{}\",                     \"links\": {                         \"self\": {                             \"href\": \"https://api.bitbucket.org/2.0/users/%7B%7D\"                         },                         \"html\": {                             \"href\": \"https://bitbucket.org/%7B%7D/\"                         },                         \"avatar\": {                             \"href\": \"https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/:/128\"                         }                     },                     \"type\": \"user\",                     \"nickname\": \"Name\",                     \"account_id\": \"\"                 },                 \"date\": \"2019-05-10T06:48:25.305565+00:00\"             },             \"pull_request\": {                 \"type\": \"pullrequest\",                 \"id\": 5695,                 \"links\": {                     \"self\": {                         \"href\": \"https://api.bitbucket.org/2.0/repositories/atlassian/atlaskit-mk-2/pullrequests/5695\"                     },                     \"html\": {                         \"href\": \"https://bitbucket.org/atlassian/atlaskit-mk-2/pull-requests/5695\"                     }                 },                 \"title\": \"username/NONE: small change from onFocus to onClick to handle tabbing through the page and not expand the editor unless a click event triggers it\"             }         }     ] } ```  Approval example: ``` {     \"pagelen\": 20,     \"values\": [         {             \"approval\": {                 \"date\": \"2019-09-27T00:37:19.849534+00:00\",                 \"pullrequest\": {                     \"type\": \"pullrequest\",                     \"id\": 5695,                     \"links\": {                         \"self\": {                             \"href\": \"https://api.bitbucket.org/2.0/repositories/atlassian/atlaskit-mk-2/pullrequests/5695\"                         },                         \"html\": {                             \"href\": \"https://bitbucket.org/atlassian/atlaskit-mk-2/pull-requests/5695\"                         }                     },                     \"title\": \"username/NONE: small change from onFocus to onClick to handle tabbing through the page and not expand the editor unless a click event triggers it\"                 },                 \"user\": {                     \"display_name\": \"Name Lastname\",                     \"uuid\": \"{}\",                     \"links\": {                         \"self\": {                             \"href\": \"https://api.bitbucket.org/2.0/users/%7B%7D\"                         },                         \"html\": {                             \"href\": \"https://bitbucket.org/%7B%7D/\"                         },                         \"avatar\": {                             \"href\": \"https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/:/128\"                         }                     },                     \"type\": \"user\",                     \"nickname\": \"Name\",                     \"account_id\": \"\"                 }             },             \"pull_request\": {                 \"type\": \"pullrequest\",                 \"id\": 5695,                 \"links\": {                     \"self\": {                         \"href\": \"https://api.bitbucket.org/2.0/repositories/atlassian/atlaskit-mk-2/pullrequests/5695\"                     },                     \"html\": {                         \"href\": \"https://bitbucket.org/atlassian/atlaskit-mk-2/pull-requests/5695\"                     }                 },                 \"title\": \"username/NONE: small change from onFocus to onClick to handle tabbing through the page and not expand the editor unless a click event triggers it\"             }         }     ] } ```
     * @param {String} repoSlug This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: `{repository UUID}`. 
     * @param {String} workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: `{workspace UUID}`. 
     * @param {module:api/PullrequestsApi~repositoriesWorkspaceRepoSlugPullrequestsActivityGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    repositoriesWorkspaceRepoSlugPullrequestsActivityGet(repoSlug, workspace, callback) {
      let postBody = null;
      // verify the required parameter 'repoSlug' is set
      if (repoSlug === undefined || repoSlug === null) {
        throw new Error("Missing the required parameter 'repoSlug' when calling repositoriesWorkspaceRepoSlugPullrequestsActivityGet");
      }
      // verify the required parameter 'workspace' is set
      if (workspace === undefined || workspace === null) {
        throw new Error("Missing the required parameter 'workspace' when calling repositoriesWorkspaceRepoSlugPullrequestsActivityGet");
      }

      let pathParams = {
        'repo_slug': repoSlug,
        'workspace': workspace
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'oauth2', 'basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/repositories/{workspace}/{repo_slug}/pullrequests/activity', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the repositoriesWorkspaceRepoSlugPullrequestsGet operation.
     * @callback module:api/PullrequestsApi~repositoriesWorkspaceRepoSlugPullrequestsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedPullrequests} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List pull requests
     * Returns all pull requests on the specified repository.  By default only open pull requests are returned. This can be controlled using the `state` query parameter. To retrieve pull requests that are in one of multiple states, repeat the `state` parameter for each individual state.  This endpoint also supports filtering and sorting of the results. See [filtering and sorting](/cloud/bitbucket/rest/intro/#filtering) for more details.
     * @param {String} repoSlug This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: `{repository UUID}`. 
     * @param {String} workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: `{workspace UUID}`. 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [state] Only return pull requests that are in this state. This parameter can be repeated.
     * @param {module:api/PullrequestsApi~repositoriesWorkspaceRepoSlugPullrequestsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedPullrequests}
     */
    repositoriesWorkspaceRepoSlugPullrequestsGet(repoSlug, workspace, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'repoSlug' is set
      if (repoSlug === undefined || repoSlug === null) {
        throw new Error("Missing the required parameter 'repoSlug' when calling repositoriesWorkspaceRepoSlugPullrequestsGet");
      }
      // verify the required parameter 'workspace' is set
      if (workspace === undefined || workspace === null) {
        throw new Error("Missing the required parameter 'workspace' when calling repositoriesWorkspaceRepoSlugPullrequestsGet");
      }

      let pathParams = {
        'repo_slug': repoSlug,
        'workspace': workspace
      };
      let queryParams = {
        'state': opts['state']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'oauth2', 'basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PaginatedPullrequests;
      return this.apiClient.callApi(
        '/repositories/{workspace}/{repo_slug}/pullrequests', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the repositoriesWorkspaceRepoSlugPullrequestsPost operation.
     * @callback module:api/PullrequestsApi~repositoriesWorkspaceRepoSlugPullrequestsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Pullrequest} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a pull request
     * Creates a new pull request where the destination repository is this repository and the author is the authenticated user.  The minimum required fields to create a pull request are `title` and `source`, specified by a branch name.  ``` curl https://api.bitbucket.org/2.0/repositories/my-workspace/my-repository/pullrequests \\     -u my-username:my-password \\     --request POST \\     --header 'Content-Type: application/json' \\     --data '{         \"title\": \"My Title\",         \"source\": {             \"branch\": {                 \"name\": \"staging\"             }         }     }' ```  If the pull request's `destination` is not specified, it will default to the `repository.mainbranch`. To open a pull request to a different branch, say from a feature branch to a staging branch, specify a `destination` (same format as the `source`):  ``` {     \"title\": \"My Title\",     \"source\": {         \"branch\": {             \"name\": \"my-feature-branch\"         }     },     \"destination\": {         \"branch\": {             \"name\": \"staging\"         }     } } ```  Reviewers can be specified by adding an array of user objects as the `reviewers` property.  ``` {     \"title\": \"My Title\",     \"source\": {         \"branch\": {             \"name\": \"my-feature-branch\"         }     },     \"reviewers\": [         {             \"uuid\": \"{504c3b62-8120-4f0c-a7bc-87800b9d6f70}\"         }     ] } ```  Other fields:  * `description` - a string * `close_source_branch` - boolean that specifies if the source branch should be closed upon merging
     * @param {String} repoSlug This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: `{repository UUID}`. 
     * @param {String} workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: `{workspace UUID}`. 
     * @param {Object} opts Optional parameters
     * @param {module:model/Pullrequest} [pullrequest] The new pull request.  The request URL you POST to becomes the destination repository URL. For this reason, you must specify an explicit source repository in the request object if you want to pull from a different repository (fork).  Since not all elements are required or even mutable, you only need to include the elements you want to initialize, such as the source branch and the title.
     * @param {module:api/PullrequestsApi~repositoriesWorkspaceRepoSlugPullrequestsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Pullrequest}
     */
    repositoriesWorkspaceRepoSlugPullrequestsPost(repoSlug, workspace, opts, callback) {
      opts = opts || {};
      let postBody = opts['pullrequest'];
      // verify the required parameter 'repoSlug' is set
      if (repoSlug === undefined || repoSlug === null) {
        throw new Error("Missing the required parameter 'repoSlug' when calling repositoriesWorkspaceRepoSlugPullrequestsPost");
      }
      // verify the required parameter 'workspace' is set
      if (workspace === undefined || workspace === null) {
        throw new Error("Missing the required parameter 'workspace' when calling repositoriesWorkspaceRepoSlugPullrequestsPost");
      }

      let pathParams = {
        'repo_slug': repoSlug,
        'workspace': workspace
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'oauth2', 'basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Pullrequest;
      return this.apiClient.callApi(
        '/repositories/{workspace}/{repo_slug}/pullrequests', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdActivityGet operation.
     * @callback module:api/PullrequestsApi~repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdActivityGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List a pull request activity log
     * Returns a paginated list of the pull request's activity log.  This handler serves both a v20 and internal endpoint. The v20 endpoint returns reviewer comments, updates, approvals and request changes. The internal endpoint includes those plus tasks and attachments.  Comments created on a file or a line of code have an inline property.  Comment example: ``` {     \"pagelen\": 20,     \"values\": [         {             \"comment\": {                 \"links\": {                     \"self\": {                         \"href\": \"https://api.bitbucket.org/2.0/repositories/atlassian/atlaskit-mk-2/pullrequests/5695/comments/118571088\"                     },                     \"html\": {                         \"href\": \"https://bitbucket.org/atlassian/atlaskit-mk-2/pull-requests/5695/_/diff#comment-118571088\"                     }                 },                 \"deleted\": false,                 \"pullrequest\": {                     \"type\": \"pullrequest\",                     \"id\": 5695,                     \"links\": {                         \"self\": {                             \"href\": \"https://api.bitbucket.org/2.0/repositories/atlassian/atlaskit-mk-2/pullrequests/5695\"                         },                         \"html\": {                             \"href\": \"https://bitbucket.org/atlassian/atlaskit-mk-2/pull-requests/5695\"                         }                     },                     \"title\": \"username/NONE: small change from onFocus to onClick to handle tabbing through the page and not expand the editor unless a click event triggers it\"                 },                 \"content\": {                     \"raw\": \"inline with to a dn from lines\",                     \"markup\": \"markdown\",                     \"html\": \"<p>inline with to a dn from lines</p>\",                     \"type\": \"rendered\"                 },                 \"created_on\": \"2019-09-27T00:33:46.039178+00:00\",                 \"user\": {                     \"display_name\": \"Name Lastname\",                     \"uuid\": \"{}\",                     \"links\": {                         \"self\": {                             \"href\": \"https://api.bitbucket.org/2.0/users/%7B%7D\"                         },                         \"html\": {                             \"href\": \"https://bitbucket.org/%7B%7D/\"                         },                         \"avatar\": {                             \"href\": \"https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/:/128\"                         }                     },                     \"type\": \"user\",                     \"nickname\": \"Name\",                     \"account_id\": \"\"                 },                 \"created_on\": \"2019-09-27T00:33:46.039178+00:00\",                 \"user\": {                     \"display_name\": \"Name Lastname\",                     \"uuid\": \"{}\",                     \"links\": {                         \"self\": {                             \"href\": \"https://api.bitbucket.org/2.0/users/%7B%7D\"                         },                         \"html\": {                             \"href\": \"https://bitbucket.org/%7B%7D/\"                         },                         \"avatar\": {                             \"href\": \"https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/:/128\"                         }                     },                     \"type\": \"user\",                     \"nickname\": \"Name\",                     \"account_id\": \"\"                 },                 \"updated_on\": \"2019-09-27T00:33:46.055384+00:00\",                 \"inline\": {                     \"context_lines\": \"\",                     \"to\": null,                     \"path\": \"\",                     \"outdated\": false,                     \"from\": 211                 },                 \"type\": \"pullrequest_comment\",                 \"id\": 118571088             },             \"pull_request\": {                 \"type\": \"pullrequest\",                 \"id\": 5695,                 \"links\": {                     \"self\": {                         \"href\": \"https://api.bitbucket.org/2.0/repositories/atlassian/atlaskit-mk-2/pullrequests/5695\"                     },                     \"html\": {                         \"href\": \"https://bitbucket.org/atlassian/atlaskit-mk-2/pull-requests/5695\"                     }                 },                 \"title\": \"username/NONE: small change from onFocus to onClick to handle tabbing through the page and not expand the editor unless a click event triggers it\"             }         }     ] } ```  Updates include a state property of OPEN, MERGED, or DECLINED.  Update example: ``` {     \"pagelen\": 20,     \"values\": [         {             \"update\": {                 \"description\": \"\",                 \"title\": \"username/NONE: small change from onFocus to onClick to handle tabbing through the page and not expand the editor unless a click event triggers it\",                 \"destination\": {                     \"commit\": {                         \"type\": \"commit\",                         \"hash\": \"6a2c16e4a152\",                         \"links\": {                             \"self\": {                                 \"href\": \"https://api.bitbucket.org/2.0/repositories/atlassian/atlaskit-mk-2/commit/6a2c16e4a152\"                             },                             \"html\": {                                 \"href\": \"https://bitbucket.org/atlassian/atlaskit-mk-2/commits/6a2c16e4a152\"                             }                         }                     },                     \"branch\": {                         \"name\": \"master\"                     },                     \"repository\": {                         \"name\": \"Atlaskit-MK-2\",                         \"type\": \"repository\",                         \"full_name\": \"atlassian/atlaskit-mk-2\",                         \"links\": {                             \"self\": {                                 \"href\": \"https://api.bitbucket.org/2.0/repositories/atlassian/atlaskit-mk-2\"                             },                             \"html\": {                                 \"href\": \"https://bitbucket.org/atlassian/atlaskit-mk-2\"                             },                             \"avatar\": {                                 \"href\": \"https://bytebucket.org/ravatar/%7B%7D?ts=js\"                             }                         },                         \"uuid\": \"{}\"                     }                 },                 \"reason\": \"\",                 \"source\": {                     \"commit\": {                         \"type\": \"commit\",                         \"hash\": \"728c8bad1813\",                         \"links\": {                             \"self\": {                                 \"href\": \"https://api.bitbucket.org/2.0/repositories/atlassian/atlaskit-mk-2/commit/728c8bad1813\"                             },                             \"html\": {                                 \"href\": \"https://bitbucket.org/atlassian/atlaskit-mk-2/commits/728c8bad1813\"                             }                         }                     },                     \"branch\": {                         \"name\": \"username/NONE-add-onClick-prop-for-accessibility\"                     },                     \"repository\": {                         \"name\": \"Atlaskit-MK-2\",                         \"type\": \"repository\",                         \"full_name\": \"atlassian/atlaskit-mk-2\",                         \"links\": {                             \"self\": {                                 \"href\": \"https://api.bitbucket.org/2.0/repositories/atlassian/atlaskit-mk-2\"                             },                             \"html\": {                                 \"href\": \"https://bitbucket.org/atlassian/atlaskit-mk-2\"                             },                             \"avatar\": {                                 \"href\": \"https://bytebucket.org/ravatar/%7B%7D?ts=js\"                             }                         },                         \"uuid\": \"{}\"                     }                 },                 \"state\": \"OPEN\",                 \"author\": {                     \"display_name\": \"Name Lastname\",                     \"uuid\": \"{}\",                     \"links\": {                         \"self\": {                             \"href\": \"https://api.bitbucket.org/2.0/users/%7B%7D\"                         },                         \"html\": {                             \"href\": \"https://bitbucket.org/%7B%7D/\"                         },                         \"avatar\": {                             \"href\": \"https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/:/128\"                         }                     },                     \"type\": \"user\",                     \"nickname\": \"Name\",                     \"account_id\": \"\"                 },                 \"date\": \"2019-05-10T06:48:25.305565+00:00\"             },             \"pull_request\": {                 \"type\": \"pullrequest\",                 \"id\": 5695,                 \"links\": {                     \"self\": {                         \"href\": \"https://api.bitbucket.org/2.0/repositories/atlassian/atlaskit-mk-2/pullrequests/5695\"                     },                     \"html\": {                         \"href\": \"https://bitbucket.org/atlassian/atlaskit-mk-2/pull-requests/5695\"                     }                 },                 \"title\": \"username/NONE: small change from onFocus to onClick to handle tabbing through the page and not expand the editor unless a click event triggers it\"             }         }     ] } ```  Approval example: ``` {     \"pagelen\": 20,     \"values\": [         {             \"approval\": {                 \"date\": \"2019-09-27T00:37:19.849534+00:00\",                 \"pullrequest\": {                     \"type\": \"pullrequest\",                     \"id\": 5695,                     \"links\": {                         \"self\": {                             \"href\": \"https://api.bitbucket.org/2.0/repositories/atlassian/atlaskit-mk-2/pullrequests/5695\"                         },                         \"html\": {                             \"href\": \"https://bitbucket.org/atlassian/atlaskit-mk-2/pull-requests/5695\"                         }                     },                     \"title\": \"username/NONE: small change from onFocus to onClick to handle tabbing through the page and not expand the editor unless a click event triggers it\"                 },                 \"user\": {                     \"display_name\": \"Name Lastname\",                     \"uuid\": \"{}\",                     \"links\": {                         \"self\": {                             \"href\": \"https://api.bitbucket.org/2.0/users/%7B%7D\"                         },                         \"html\": {                             \"href\": \"https://bitbucket.org/%7B%7D/\"                         },                         \"avatar\": {                             \"href\": \"https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/:/128\"                         }                     },                     \"type\": \"user\",                     \"nickname\": \"Name\",                     \"account_id\": \"\"                 }             },             \"pull_request\": {                 \"type\": \"pullrequest\",                 \"id\": 5695,                 \"links\": {                     \"self\": {                         \"href\": \"https://api.bitbucket.org/2.0/repositories/atlassian/atlaskit-mk-2/pullrequests/5695\"                     },                     \"html\": {                         \"href\": \"https://bitbucket.org/atlassian/atlaskit-mk-2/pull-requests/5695\"                     }                 },                 \"title\": \"username/NONE: small change from onFocus to onClick to handle tabbing through the page and not expand the editor unless a click event triggers it\"             }         }     ] } ```
     * @param {Number} pullRequestId The id of the pull request.
     * @param {String} repoSlug This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: `{repository UUID}`. 
     * @param {String} workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: `{workspace UUID}`. 
     * @param {module:api/PullrequestsApi~repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdActivityGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdActivityGet(pullRequestId, repoSlug, workspace, callback) {
      let postBody = null;
      // verify the required parameter 'pullRequestId' is set
      if (pullRequestId === undefined || pullRequestId === null) {
        throw new Error("Missing the required parameter 'pullRequestId' when calling repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdActivityGet");
      }
      // verify the required parameter 'repoSlug' is set
      if (repoSlug === undefined || repoSlug === null) {
        throw new Error("Missing the required parameter 'repoSlug' when calling repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdActivityGet");
      }
      // verify the required parameter 'workspace' is set
      if (workspace === undefined || workspace === null) {
        throw new Error("Missing the required parameter 'workspace' when calling repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdActivityGet");
      }

      let pathParams = {
        'pull_request_id': pullRequestId,
        'repo_slug': repoSlug,
        'workspace': workspace
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'oauth2', 'basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/repositories/{workspace}/{repo_slug}/pullrequests/{pull_request_id}/activity', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdApproveDelete operation.
     * @callback module:api/PullrequestsApi~repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdApproveDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Unapprove a pull request
     * Redact the authenticated user's approval of the specified pull request.
     * @param {Number} pullRequestId The id of the pull request.
     * @param {String} repoSlug This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: `{repository UUID}`. 
     * @param {String} workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: `{workspace UUID}`. 
     * @param {module:api/PullrequestsApi~repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdApproveDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdApproveDelete(pullRequestId, repoSlug, workspace, callback) {
      let postBody = null;
      // verify the required parameter 'pullRequestId' is set
      if (pullRequestId === undefined || pullRequestId === null) {
        throw new Error("Missing the required parameter 'pullRequestId' when calling repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdApproveDelete");
      }
      // verify the required parameter 'repoSlug' is set
      if (repoSlug === undefined || repoSlug === null) {
        throw new Error("Missing the required parameter 'repoSlug' when calling repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdApproveDelete");
      }
      // verify the required parameter 'workspace' is set
      if (workspace === undefined || workspace === null) {
        throw new Error("Missing the required parameter 'workspace' when calling repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdApproveDelete");
      }

      let pathParams = {
        'pull_request_id': pullRequestId,
        'repo_slug': repoSlug,
        'workspace': workspace
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'oauth2', 'basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/repositories/{workspace}/{repo_slug}/pullrequests/{pull_request_id}/approve', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdApprovePost operation.
     * @callback module:api/PullrequestsApi~repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdApprovePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Participant} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Approve a pull request
     * Approve the specified pull request as the authenticated user.
     * @param {Number} pullRequestId The id of the pull request.
     * @param {String} repoSlug This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: `{repository UUID}`. 
     * @param {String} workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: `{workspace UUID}`. 
     * @param {module:api/PullrequestsApi~repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdApprovePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Participant}
     */
    repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdApprovePost(pullRequestId, repoSlug, workspace, callback) {
      let postBody = null;
      // verify the required parameter 'pullRequestId' is set
      if (pullRequestId === undefined || pullRequestId === null) {
        throw new Error("Missing the required parameter 'pullRequestId' when calling repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdApprovePost");
      }
      // verify the required parameter 'repoSlug' is set
      if (repoSlug === undefined || repoSlug === null) {
        throw new Error("Missing the required parameter 'repoSlug' when calling repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdApprovePost");
      }
      // verify the required parameter 'workspace' is set
      if (workspace === undefined || workspace === null) {
        throw new Error("Missing the required parameter 'workspace' when calling repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdApprovePost");
      }

      let pathParams = {
        'pull_request_id': pullRequestId,
        'repo_slug': repoSlug,
        'workspace': workspace
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'oauth2', 'basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Participant;
      return this.apiClient.callApi(
        '/repositories/{workspace}/{repo_slug}/pullrequests/{pull_request_id}/approve', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdDelete operation.
     * @callback module:api/PullrequestsApi~repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a comment on a pull request
     * Deletes a specific pull request comment.
     * @param {Number} commentId The id of the comment.
     * @param {Number} pullRequestId The id of the pull request.
     * @param {String} repoSlug This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: `{repository UUID}`. 
     * @param {String} workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: `{workspace UUID}`. 
     * @param {module:api/PullrequestsApi~repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdDelete(commentId, pullRequestId, repoSlug, workspace, callback) {
      let postBody = null;
      // verify the required parameter 'commentId' is set
      if (commentId === undefined || commentId === null) {
        throw new Error("Missing the required parameter 'commentId' when calling repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdDelete");
      }
      // verify the required parameter 'pullRequestId' is set
      if (pullRequestId === undefined || pullRequestId === null) {
        throw new Error("Missing the required parameter 'pullRequestId' when calling repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdDelete");
      }
      // verify the required parameter 'repoSlug' is set
      if (repoSlug === undefined || repoSlug === null) {
        throw new Error("Missing the required parameter 'repoSlug' when calling repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdDelete");
      }
      // verify the required parameter 'workspace' is set
      if (workspace === undefined || workspace === null) {
        throw new Error("Missing the required parameter 'workspace' when calling repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdDelete");
      }

      let pathParams = {
        'comment_id': commentId,
        'pull_request_id': pullRequestId,
        'repo_slug': repoSlug,
        'workspace': workspace
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'oauth2', 'basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/repositories/{workspace}/{repo_slug}/pullrequests/{pull_request_id}/comments/{comment_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdGet operation.
     * @callback module:api/PullrequestsApi~repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PullrequestComment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a comment on a pull request
     * Returns a specific pull request comment.
     * @param {Number} commentId The id of the comment.
     * @param {Number} pullRequestId The id of the pull request.
     * @param {String} repoSlug This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: `{repository UUID}`. 
     * @param {String} workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: `{workspace UUID}`. 
     * @param {module:api/PullrequestsApi~repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PullrequestComment}
     */
    repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdGet(commentId, pullRequestId, repoSlug, workspace, callback) {
      let postBody = null;
      // verify the required parameter 'commentId' is set
      if (commentId === undefined || commentId === null) {
        throw new Error("Missing the required parameter 'commentId' when calling repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdGet");
      }
      // verify the required parameter 'pullRequestId' is set
      if (pullRequestId === undefined || pullRequestId === null) {
        throw new Error("Missing the required parameter 'pullRequestId' when calling repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdGet");
      }
      // verify the required parameter 'repoSlug' is set
      if (repoSlug === undefined || repoSlug === null) {
        throw new Error("Missing the required parameter 'repoSlug' when calling repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdGet");
      }
      // verify the required parameter 'workspace' is set
      if (workspace === undefined || workspace === null) {
        throw new Error("Missing the required parameter 'workspace' when calling repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdGet");
      }

      let pathParams = {
        'comment_id': commentId,
        'pull_request_id': pullRequestId,
        'repo_slug': repoSlug,
        'workspace': workspace
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'oauth2', 'basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PullrequestComment;
      return this.apiClient.callApi(
        '/repositories/{workspace}/{repo_slug}/pullrequests/{pull_request_id}/comments/{comment_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdPut operation.
     * @callback module:api/PullrequestsApi~repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PullrequestComment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a comment on a pull request
     * Updates a specific pull request comment.
     * @param {Number} commentId The id of the comment.
     * @param {Number} pullRequestId The id of the pull request.
     * @param {String} repoSlug This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: `{repository UUID}`. 
     * @param {String} workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: `{workspace UUID}`. 
     * @param {module:model/PullrequestComment} pullrequestComment The contents of the updated comment.
     * @param {module:api/PullrequestsApi~repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PullrequestComment}
     */
    repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdPut(commentId, pullRequestId, repoSlug, workspace, pullrequestComment, callback) {
      let postBody = pullrequestComment;
      // verify the required parameter 'commentId' is set
      if (commentId === undefined || commentId === null) {
        throw new Error("Missing the required parameter 'commentId' when calling repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdPut");
      }
      // verify the required parameter 'pullRequestId' is set
      if (pullRequestId === undefined || pullRequestId === null) {
        throw new Error("Missing the required parameter 'pullRequestId' when calling repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdPut");
      }
      // verify the required parameter 'repoSlug' is set
      if (repoSlug === undefined || repoSlug === null) {
        throw new Error("Missing the required parameter 'repoSlug' when calling repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdPut");
      }
      // verify the required parameter 'workspace' is set
      if (workspace === undefined || workspace === null) {
        throw new Error("Missing the required parameter 'workspace' when calling repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdPut");
      }
      // verify the required parameter 'pullrequestComment' is set
      if (pullrequestComment === undefined || pullrequestComment === null) {
        throw new Error("Missing the required parameter 'pullrequestComment' when calling repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdPut");
      }

      let pathParams = {
        'comment_id': commentId,
        'pull_request_id': pullRequestId,
        'repo_slug': repoSlug,
        'workspace': workspace
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'oauth2', 'basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PullrequestComment;
      return this.apiClient.callApi(
        '/repositories/{workspace}/{repo_slug}/pullrequests/{pull_request_id}/comments/{comment_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdResolveDelete operation.
     * @callback module:api/PullrequestsApi~repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdResolveDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reopen a comment thread
     * 
     * @param {Number} commentId The id of the comment.
     * @param {Number} pullRequestId The id of the pull request.
     * @param {String} repoSlug This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: `{repository UUID}`. 
     * @param {String} workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: `{workspace UUID}`. 
     * @param {module:api/PullrequestsApi~repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdResolveDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdResolveDelete(commentId, pullRequestId, repoSlug, workspace, callback) {
      let postBody = null;
      // verify the required parameter 'commentId' is set
      if (commentId === undefined || commentId === null) {
        throw new Error("Missing the required parameter 'commentId' when calling repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdResolveDelete");
      }
      // verify the required parameter 'pullRequestId' is set
      if (pullRequestId === undefined || pullRequestId === null) {
        throw new Error("Missing the required parameter 'pullRequestId' when calling repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdResolveDelete");
      }
      // verify the required parameter 'repoSlug' is set
      if (repoSlug === undefined || repoSlug === null) {
        throw new Error("Missing the required parameter 'repoSlug' when calling repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdResolveDelete");
      }
      // verify the required parameter 'workspace' is set
      if (workspace === undefined || workspace === null) {
        throw new Error("Missing the required parameter 'workspace' when calling repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdResolveDelete");
      }

      let pathParams = {
        'comment_id': commentId,
        'pull_request_id': pullRequestId,
        'repo_slug': repoSlug,
        'workspace': workspace
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'oauth2', 'basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/repositories/{workspace}/{repo_slug}/pullrequests/{pull_request_id}/comments/{comment_id}/resolve', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdResolvePost operation.
     * @callback module:api/PullrequestsApi~repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdResolvePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CommentResolution} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Resolve a comment thread
     * 
     * @param {Number} commentId The id of the comment.
     * @param {Number} pullRequestId The id of the pull request.
     * @param {String} repoSlug This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: `{repository UUID}`. 
     * @param {String} workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: `{workspace UUID}`. 
     * @param {module:api/PullrequestsApi~repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdResolvePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CommentResolution}
     */
    repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdResolvePost(commentId, pullRequestId, repoSlug, workspace, callback) {
      let postBody = null;
      // verify the required parameter 'commentId' is set
      if (commentId === undefined || commentId === null) {
        throw new Error("Missing the required parameter 'commentId' when calling repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdResolvePost");
      }
      // verify the required parameter 'pullRequestId' is set
      if (pullRequestId === undefined || pullRequestId === null) {
        throw new Error("Missing the required parameter 'pullRequestId' when calling repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdResolvePost");
      }
      // verify the required parameter 'repoSlug' is set
      if (repoSlug === undefined || repoSlug === null) {
        throw new Error("Missing the required parameter 'repoSlug' when calling repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdResolvePost");
      }
      // verify the required parameter 'workspace' is set
      if (workspace === undefined || workspace === null) {
        throw new Error("Missing the required parameter 'workspace' when calling repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdResolvePost");
      }

      let pathParams = {
        'comment_id': commentId,
        'pull_request_id': pullRequestId,
        'repo_slug': repoSlug,
        'workspace': workspace
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'oauth2', 'basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CommentResolution;
      return this.apiClient.callApi(
        '/repositories/{workspace}/{repo_slug}/pullrequests/{pull_request_id}/comments/{comment_id}/resolve', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsGet operation.
     * @callback module:api/PullrequestsApi~repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedPullrequestComments} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List comments on a pull request
     * Returns a paginated list of the pull request's comments.  This includes both global, inline comments and replies.  The default sorting is oldest to newest and can be overridden with the `sort` query parameter.  This endpoint also supports filtering and sorting of the results. See [filtering and sorting](/cloud/bitbucket/rest/intro/#filtering) for more details.
     * @param {Number} pullRequestId The id of the pull request.
     * @param {String} repoSlug This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: `{repository UUID}`. 
     * @param {String} workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: `{workspace UUID}`. 
     * @param {module:api/PullrequestsApi~repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedPullrequestComments}
     */
    repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsGet(pullRequestId, repoSlug, workspace, callback) {
      let postBody = null;
      // verify the required parameter 'pullRequestId' is set
      if (pullRequestId === undefined || pullRequestId === null) {
        throw new Error("Missing the required parameter 'pullRequestId' when calling repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsGet");
      }
      // verify the required parameter 'repoSlug' is set
      if (repoSlug === undefined || repoSlug === null) {
        throw new Error("Missing the required parameter 'repoSlug' when calling repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsGet");
      }
      // verify the required parameter 'workspace' is set
      if (workspace === undefined || workspace === null) {
        throw new Error("Missing the required parameter 'workspace' when calling repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsGet");
      }

      let pathParams = {
        'pull_request_id': pullRequestId,
        'repo_slug': repoSlug,
        'workspace': workspace
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'oauth2', 'basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PaginatedPullrequestComments;
      return this.apiClient.callApi(
        '/repositories/{workspace}/{repo_slug}/pullrequests/{pull_request_id}/comments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsPost operation.
     * @callback module:api/PullrequestsApi~repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PullrequestComment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a comment on a pull request
     * Creates a new pull request comment.  Returns the newly created pull request comment.
     * @param {Number} pullRequestId The id of the pull request.
     * @param {String} repoSlug This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: `{repository UUID}`. 
     * @param {String} workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: `{workspace UUID}`. 
     * @param {module:model/PullrequestComment} pullrequestComment The comment object.
     * @param {module:api/PullrequestsApi~repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PullrequestComment}
     */
    repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsPost(pullRequestId, repoSlug, workspace, pullrequestComment, callback) {
      let postBody = pullrequestComment;
      // verify the required parameter 'pullRequestId' is set
      if (pullRequestId === undefined || pullRequestId === null) {
        throw new Error("Missing the required parameter 'pullRequestId' when calling repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsPost");
      }
      // verify the required parameter 'repoSlug' is set
      if (repoSlug === undefined || repoSlug === null) {
        throw new Error("Missing the required parameter 'repoSlug' when calling repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsPost");
      }
      // verify the required parameter 'workspace' is set
      if (workspace === undefined || workspace === null) {
        throw new Error("Missing the required parameter 'workspace' when calling repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsPost");
      }
      // verify the required parameter 'pullrequestComment' is set
      if (pullrequestComment === undefined || pullrequestComment === null) {
        throw new Error("Missing the required parameter 'pullrequestComment' when calling repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsPost");
      }

      let pathParams = {
        'pull_request_id': pullRequestId,
        'repo_slug': repoSlug,
        'workspace': workspace
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'oauth2', 'basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PullrequestComment;
      return this.apiClient.callApi(
        '/repositories/{workspace}/{repo_slug}/pullrequests/{pull_request_id}/comments', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommitsGet operation.
     * @callback module:api/PullrequestsApi~repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommitsGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List commits on a pull request
     * Returns a paginated list of the pull request's commits.  These are the commits that are being merged into the destination branch when the pull requests gets accepted.
     * @param {Number} pullRequestId The id of the pull request.
     * @param {String} repoSlug This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: `{repository UUID}`. 
     * @param {String} workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: `{workspace UUID}`. 
     * @param {module:api/PullrequestsApi~repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommitsGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommitsGet(pullRequestId, repoSlug, workspace, callback) {
      let postBody = null;
      // verify the required parameter 'pullRequestId' is set
      if (pullRequestId === undefined || pullRequestId === null) {
        throw new Error("Missing the required parameter 'pullRequestId' when calling repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommitsGet");
      }
      // verify the required parameter 'repoSlug' is set
      if (repoSlug === undefined || repoSlug === null) {
        throw new Error("Missing the required parameter 'repoSlug' when calling repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommitsGet");
      }
      // verify the required parameter 'workspace' is set
      if (workspace === undefined || workspace === null) {
        throw new Error("Missing the required parameter 'workspace' when calling repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommitsGet");
      }

      let pathParams = {
        'pull_request_id': pullRequestId,
        'repo_slug': repoSlug,
        'workspace': workspace
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'oauth2', 'basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/repositories/{workspace}/{repo_slug}/pullrequests/{pull_request_id}/commits', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdDeclinePost operation.
     * @callback module:api/PullrequestsApi~repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdDeclinePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Pullrequest} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Decline a pull request
     * Declines the pull request.
     * @param {Number} pullRequestId The id of the pull request.
     * @param {String} repoSlug This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: `{repository UUID}`. 
     * @param {String} workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: `{workspace UUID}`. 
     * @param {module:api/PullrequestsApi~repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdDeclinePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Pullrequest}
     */
    repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdDeclinePost(pullRequestId, repoSlug, workspace, callback) {
      let postBody = null;
      // verify the required parameter 'pullRequestId' is set
      if (pullRequestId === undefined || pullRequestId === null) {
        throw new Error("Missing the required parameter 'pullRequestId' when calling repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdDeclinePost");
      }
      // verify the required parameter 'repoSlug' is set
      if (repoSlug === undefined || repoSlug === null) {
        throw new Error("Missing the required parameter 'repoSlug' when calling repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdDeclinePost");
      }
      // verify the required parameter 'workspace' is set
      if (workspace === undefined || workspace === null) {
        throw new Error("Missing the required parameter 'workspace' when calling repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdDeclinePost");
      }

      let pathParams = {
        'pull_request_id': pullRequestId,
        'repo_slug': repoSlug,
        'workspace': workspace
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'oauth2', 'basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Pullrequest;
      return this.apiClient.callApi(
        '/repositories/{workspace}/{repo_slug}/pullrequests/{pull_request_id}/decline', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdDiffGet operation.
     * @callback module:api/PullrequestsApi~repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdDiffGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List changes in a pull request
     * Redirects to the [repository diff](/cloud/bitbucket/rest/api-group-commits/#api-repositories-workspace-repo-slug-diff-spec-get) with the revspec that corresponds to the pull request.
     * @param {Number} pullRequestId The id of the pull request.
     * @param {String} repoSlug This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: `{repository UUID}`. 
     * @param {String} workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: `{workspace UUID}`. 
     * @param {module:api/PullrequestsApi~repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdDiffGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdDiffGet(pullRequestId, repoSlug, workspace, callback) {
      let postBody = null;
      // verify the required parameter 'pullRequestId' is set
      if (pullRequestId === undefined || pullRequestId === null) {
        throw new Error("Missing the required parameter 'pullRequestId' when calling repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdDiffGet");
      }
      // verify the required parameter 'repoSlug' is set
      if (repoSlug === undefined || repoSlug === null) {
        throw new Error("Missing the required parameter 'repoSlug' when calling repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdDiffGet");
      }
      // verify the required parameter 'workspace' is set
      if (workspace === undefined || workspace === null) {
        throw new Error("Missing the required parameter 'workspace' when calling repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdDiffGet");
      }

      let pathParams = {
        'pull_request_id': pullRequestId,
        'repo_slug': repoSlug,
        'workspace': workspace
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'oauth2', 'basic'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/repositories/{workspace}/{repo_slug}/pullrequests/{pull_request_id}/diff', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdDiffstatGet operation.
     * @callback module:api/PullrequestsApi~repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdDiffstatGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the diff stat for a pull request
     * Redirects to the [repository diffstat](/cloud/bitbucket/rest/api-group-commits/#api-repositories-workspace-repo-slug-diffstat-spec-get) with the revspec that corresponds to the pull request.
     * @param {Number} pullRequestId The id of the pull request.
     * @param {String} repoSlug This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: `{repository UUID}`. 
     * @param {String} workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: `{workspace UUID}`. 
     * @param {module:api/PullrequestsApi~repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdDiffstatGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdDiffstatGet(pullRequestId, repoSlug, workspace, callback) {
      let postBody = null;
      // verify the required parameter 'pullRequestId' is set
      if (pullRequestId === undefined || pullRequestId === null) {
        throw new Error("Missing the required parameter 'pullRequestId' when calling repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdDiffstatGet");
      }
      // verify the required parameter 'repoSlug' is set
      if (repoSlug === undefined || repoSlug === null) {
        throw new Error("Missing the required parameter 'repoSlug' when calling repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdDiffstatGet");
      }
      // verify the required parameter 'workspace' is set
      if (workspace === undefined || workspace === null) {
        throw new Error("Missing the required parameter 'workspace' when calling repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdDiffstatGet");
      }

      let pathParams = {
        'pull_request_id': pullRequestId,
        'repo_slug': repoSlug,
        'workspace': workspace
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'oauth2', 'basic'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/repositories/{workspace}/{repo_slug}/pullrequests/{pull_request_id}/diffstat', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdGet operation.
     * @callback module:api/PullrequestsApi~repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Pullrequest} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a pull request
     * Returns the specified pull request.
     * @param {Number} pullRequestId The id of the pull request.
     * @param {String} repoSlug This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: `{repository UUID}`. 
     * @param {String} workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: `{workspace UUID}`. 
     * @param {module:api/PullrequestsApi~repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Pullrequest}
     */
    repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdGet(pullRequestId, repoSlug, workspace, callback) {
      let postBody = null;
      // verify the required parameter 'pullRequestId' is set
      if (pullRequestId === undefined || pullRequestId === null) {
        throw new Error("Missing the required parameter 'pullRequestId' when calling repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdGet");
      }
      // verify the required parameter 'repoSlug' is set
      if (repoSlug === undefined || repoSlug === null) {
        throw new Error("Missing the required parameter 'repoSlug' when calling repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdGet");
      }
      // verify the required parameter 'workspace' is set
      if (workspace === undefined || workspace === null) {
        throw new Error("Missing the required parameter 'workspace' when calling repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdGet");
      }

      let pathParams = {
        'pull_request_id': pullRequestId,
        'repo_slug': repoSlug,
        'workspace': workspace
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'oauth2', 'basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Pullrequest;
      return this.apiClient.callApi(
        '/repositories/{workspace}/{repo_slug}/pullrequests/{pull_request_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdMergePost operation.
     * @callback module:api/PullrequestsApi~repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdMergePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Pullrequest} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Merge a pull request
     * Merges the pull request.
     * @param {Number} pullRequestId The id of the pull request.
     * @param {String} repoSlug This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: `{repository UUID}`. 
     * @param {String} workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: `{workspace UUID}`. 
     * @param {Object} opts Optional parameters
     * @param {Boolean} [async] Default value is false.   When set to true, runs merge asynchronously and immediately returns a 202 with polling link to the task-status API in the Location header.   When set to false, runs merge and waits for it to complete, returning 200 when it succeeds. If the duration of the merge exceeds a timeout threshold, the API returns a 202 with polling link to the task-status API in the Location header.
     * @param {module:model/PullrequestMergeParameters} [pullrequestMergeParameters] 
     * @param {module:api/PullrequestsApi~repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdMergePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Pullrequest}
     */
    repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdMergePost(pullRequestId, repoSlug, workspace, opts, callback) {
      opts = opts || {};
      let postBody = opts['pullrequestMergeParameters'];
      // verify the required parameter 'pullRequestId' is set
      if (pullRequestId === undefined || pullRequestId === null) {
        throw new Error("Missing the required parameter 'pullRequestId' when calling repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdMergePost");
      }
      // verify the required parameter 'repoSlug' is set
      if (repoSlug === undefined || repoSlug === null) {
        throw new Error("Missing the required parameter 'repoSlug' when calling repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdMergePost");
      }
      // verify the required parameter 'workspace' is set
      if (workspace === undefined || workspace === null) {
        throw new Error("Missing the required parameter 'workspace' when calling repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdMergePost");
      }

      let pathParams = {
        'pull_request_id': pullRequestId,
        'repo_slug': repoSlug,
        'workspace': workspace
      };
      let queryParams = {
        'async': opts['async']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'oauth2', 'basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Pullrequest;
      return this.apiClient.callApi(
        '/repositories/{workspace}/{repo_slug}/pullrequests/{pull_request_id}/merge', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdMergeTaskStatusTaskIdGet operation.
     * @callback module:api/PullrequestsApi~repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdMergeTaskStatusTaskIdGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the merge task status for a pull request
     * When merging a pull request takes too long, the client receives a task ID along with a 202 status code. The task ID can be used in a call to this endpoint to check the status of a merge task.  ``` curl -X GET https://api.bitbucket.org/2.0/repositories/atlassian/bitbucket/pullrequests/2286/merge/task-status/<task_id> ```  If the merge task is not yet finished, a PENDING status will be returned.  ``` HTTP/2 200 {     \"task_status\": \"PENDING\",     \"links\": {         \"self\": {             \"href\": \"https://api.bitbucket.org/2.0/repositories/atlassian/bitbucket/pullrequests/2286/merge/task-status/<task_id>\"         }     } } ```  If the merge was successful, a SUCCESS status will be returned.  ``` HTTP/2 200 {     \"task_status\": \"SUCCESS\",     \"links\": {         \"self\": {             \"href\": \"https://api.bitbucket.org/2.0/repositories/atlassian/bitbucket/pullrequests/2286/merge/task-status/<task_id>\"         }     },     \"merge_result\": <the merged pull request object> } ```  If the merge task failed, an error will be returned.  ``` {     \"type\": \"error\",     \"error\": {         \"message\": \"<error message>\"     } } ```
     * @param {Number} pullRequestId The id of the pull request.
     * @param {String} repoSlug This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: `{repository UUID}`. 
     * @param {String} taskId ID of the merge task
     * @param {String} workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: `{workspace UUID}`. 
     * @param {module:api/PullrequestsApi~repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdMergeTaskStatusTaskIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdMergeTaskStatusTaskIdGet(pullRequestId, repoSlug, taskId, workspace, callback) {
      let postBody = null;
      // verify the required parameter 'pullRequestId' is set
      if (pullRequestId === undefined || pullRequestId === null) {
        throw new Error("Missing the required parameter 'pullRequestId' when calling repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdMergeTaskStatusTaskIdGet");
      }
      // verify the required parameter 'repoSlug' is set
      if (repoSlug === undefined || repoSlug === null) {
        throw new Error("Missing the required parameter 'repoSlug' when calling repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdMergeTaskStatusTaskIdGet");
      }
      // verify the required parameter 'taskId' is set
      if (taskId === undefined || taskId === null) {
        throw new Error("Missing the required parameter 'taskId' when calling repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdMergeTaskStatusTaskIdGet");
      }
      // verify the required parameter 'workspace' is set
      if (workspace === undefined || workspace === null) {
        throw new Error("Missing the required parameter 'workspace' when calling repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdMergeTaskStatusTaskIdGet");
      }

      let pathParams = {
        'pull_request_id': pullRequestId,
        'repo_slug': repoSlug,
        'task_id': taskId,
        'workspace': workspace
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'oauth2', 'basic'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/repositories/{workspace}/{repo_slug}/pullrequests/{pull_request_id}/merge/task-status/{task_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdPatchGet operation.
     * @callback module:api/PullrequestsApi~repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdPatchGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the patch for a pull request
     * Redirects to the [repository patch](/cloud/bitbucket/rest/api-group-commits/#api-repositories-workspace-repo-slug-patch-spec-get) with the revspec that corresponds to pull request.
     * @param {Number} pullRequestId The id of the pull request.
     * @param {String} repoSlug This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: `{repository UUID}`. 
     * @param {String} workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: `{workspace UUID}`. 
     * @param {module:api/PullrequestsApi~repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdPatchGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdPatchGet(pullRequestId, repoSlug, workspace, callback) {
      let postBody = null;
      // verify the required parameter 'pullRequestId' is set
      if (pullRequestId === undefined || pullRequestId === null) {
        throw new Error("Missing the required parameter 'pullRequestId' when calling repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdPatchGet");
      }
      // verify the required parameter 'repoSlug' is set
      if (repoSlug === undefined || repoSlug === null) {
        throw new Error("Missing the required parameter 'repoSlug' when calling repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdPatchGet");
      }
      // verify the required parameter 'workspace' is set
      if (workspace === undefined || workspace === null) {
        throw new Error("Missing the required parameter 'workspace' when calling repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdPatchGet");
      }

      let pathParams = {
        'pull_request_id': pullRequestId,
        'repo_slug': repoSlug,
        'workspace': workspace
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'oauth2', 'basic'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/repositories/{workspace}/{repo_slug}/pullrequests/{pull_request_id}/patch', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdPut operation.
     * @callback module:api/PullrequestsApi~repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Pullrequest} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a pull request
     * Mutates the specified pull request.  This can be used to change the pull request's branches or description.  Only open pull requests can be mutated.
     * @param {Number} pullRequestId The id of the pull request.
     * @param {String} repoSlug This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: `{repository UUID}`. 
     * @param {String} workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: `{workspace UUID}`. 
     * @param {Object} opts Optional parameters
     * @param {module:model/Pullrequest} [pullrequest] The pull request that is to be updated.
     * @param {module:api/PullrequestsApi~repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Pullrequest}
     */
    repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdPut(pullRequestId, repoSlug, workspace, opts, callback) {
      opts = opts || {};
      let postBody = opts['pullrequest'];
      // verify the required parameter 'pullRequestId' is set
      if (pullRequestId === undefined || pullRequestId === null) {
        throw new Error("Missing the required parameter 'pullRequestId' when calling repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdPut");
      }
      // verify the required parameter 'repoSlug' is set
      if (repoSlug === undefined || repoSlug === null) {
        throw new Error("Missing the required parameter 'repoSlug' when calling repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdPut");
      }
      // verify the required parameter 'workspace' is set
      if (workspace === undefined || workspace === null) {
        throw new Error("Missing the required parameter 'workspace' when calling repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdPut");
      }

      let pathParams = {
        'pull_request_id': pullRequestId,
        'repo_slug': repoSlug,
        'workspace': workspace
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'oauth2', 'basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Pullrequest;
      return this.apiClient.callApi(
        '/repositories/{workspace}/{repo_slug}/pullrequests/{pull_request_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdRequestChangesDelete operation.
     * @callback module:api/PullrequestsApi~repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdRequestChangesDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove change request for a pull request
     * 
     * @param {Number} pullRequestId The id of the pull request.
     * @param {String} repoSlug This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: `{repository UUID}`. 
     * @param {String} workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: `{workspace UUID}`. 
     * @param {module:api/PullrequestsApi~repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdRequestChangesDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdRequestChangesDelete(pullRequestId, repoSlug, workspace, callback) {
      let postBody = null;
      // verify the required parameter 'pullRequestId' is set
      if (pullRequestId === undefined || pullRequestId === null) {
        throw new Error("Missing the required parameter 'pullRequestId' when calling repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdRequestChangesDelete");
      }
      // verify the required parameter 'repoSlug' is set
      if (repoSlug === undefined || repoSlug === null) {
        throw new Error("Missing the required parameter 'repoSlug' when calling repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdRequestChangesDelete");
      }
      // verify the required parameter 'workspace' is set
      if (workspace === undefined || workspace === null) {
        throw new Error("Missing the required parameter 'workspace' when calling repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdRequestChangesDelete");
      }

      let pathParams = {
        'pull_request_id': pullRequestId,
        'repo_slug': repoSlug,
        'workspace': workspace
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'oauth2', 'basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/repositories/{workspace}/{repo_slug}/pullrequests/{pull_request_id}/request-changes', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdRequestChangesPost operation.
     * @callback module:api/PullrequestsApi~repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdRequestChangesPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Participant} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Request changes for a pull request
     * 
     * @param {Number} pullRequestId The id of the pull request.
     * @param {String} repoSlug This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: `{repository UUID}`. 
     * @param {String} workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: `{workspace UUID}`. 
     * @param {module:api/PullrequestsApi~repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdRequestChangesPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Participant}
     */
    repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdRequestChangesPost(pullRequestId, repoSlug, workspace, callback) {
      let postBody = null;
      // verify the required parameter 'pullRequestId' is set
      if (pullRequestId === undefined || pullRequestId === null) {
        throw new Error("Missing the required parameter 'pullRequestId' when calling repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdRequestChangesPost");
      }
      // verify the required parameter 'repoSlug' is set
      if (repoSlug === undefined || repoSlug === null) {
        throw new Error("Missing the required parameter 'repoSlug' when calling repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdRequestChangesPost");
      }
      // verify the required parameter 'workspace' is set
      if (workspace === undefined || workspace === null) {
        throw new Error("Missing the required parameter 'workspace' when calling repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdRequestChangesPost");
      }

      let pathParams = {
        'pull_request_id': pullRequestId,
        'repo_slug': repoSlug,
        'workspace': workspace
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'oauth2', 'basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Participant;
      return this.apiClient.callApi(
        '/repositories/{workspace}/{repo_slug}/pullrequests/{pull_request_id}/request-changes', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdStatusesGet operation.
     * @callback module:api/PullrequestsApi~repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdStatusesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedCommitstatuses} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List commit statuses for a pull request
     * Returns all statuses (e.g. build results) for the given pull request.
     * @param {Number} pullRequestId The id of the pull request.
     * @param {String} repoSlug This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: `{repository UUID}`. 
     * @param {String} workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: `{workspace UUID}`. 
     * @param {Object} opts Optional parameters
     * @param {String} [q] Query string to narrow down the response as per [filtering and sorting](/cloud/bitbucket/rest/intro/#filtering). 
     * @param {String} [sort] Field by which the results should be sorted as per [filtering and sorting](/cloud/bitbucket/rest/intro/#filtering). Defaults to `created_on`. 
     * @param {module:api/PullrequestsApi~repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdStatusesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedCommitstatuses}
     */
    repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdStatusesGet(pullRequestId, repoSlug, workspace, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'pullRequestId' is set
      if (pullRequestId === undefined || pullRequestId === null) {
        throw new Error("Missing the required parameter 'pullRequestId' when calling repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdStatusesGet");
      }
      // verify the required parameter 'repoSlug' is set
      if (repoSlug === undefined || repoSlug === null) {
        throw new Error("Missing the required parameter 'repoSlug' when calling repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdStatusesGet");
      }
      // verify the required parameter 'workspace' is set
      if (workspace === undefined || workspace === null) {
        throw new Error("Missing the required parameter 'workspace' when calling repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdStatusesGet");
      }

      let pathParams = {
        'pull_request_id': pullRequestId,
        'repo_slug': repoSlug,
        'workspace': workspace
      };
      let queryParams = {
        'q': opts['q'],
        'sort': opts['sort']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'oauth2', 'basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PaginatedCommitstatuses;
      return this.apiClient.callApi(
        '/repositories/{workspace}/{repo_slug}/pullrequests/{pull_request_id}/statuses', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
