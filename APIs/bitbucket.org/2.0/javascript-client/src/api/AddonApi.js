/**
 * Bitbucket API
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@bitbucket.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Error from '../model/Error';

/**
* Addon service.
* @module api/AddonApi
* @version 2.0
*/
export default class AddonApi {

    /**
    * Constructs a new AddonApi. 
    * @alias module:api/AddonApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addonDelete operation.
     * @callback module:api/AddonApi~addonDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an app
     * Deletes the application for the user.  This endpoint is intended to be used by Bitbucket Connect apps and only supports JWT authentication -- that is how Bitbucket identifies the particular installation of the app. Developers with applications registered in the \"Develop Apps\" section of Bitbucket Marketplace need not use this endpoint as updates for those applications can be sent out via the UI of that section.  ``` $ curl -X DELETE https://api.bitbucket.org/2.0/addon \\   -H \"Authorization: JWT <JWT Token>\" ```
     * @param {module:api/AddonApi~addonDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addonDelete(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'oauth2', 'basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/addon', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addonLinkersGet operation.
     * @callback module:api/AddonApi~addonLinkersGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List linkers for an app
     * Gets a list of all [linkers](/cloud/bitbucket/modules/linker/) for the authenticated application.
     * @param {module:api/AddonApi~addonLinkersGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addonLinkersGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'oauth2', 'basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/addon/linkers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addonLinkersLinkerKeyGet operation.
     * @callback module:api/AddonApi~addonLinkersLinkerKeyGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a linker for an app
     * Gets a [linker](/cloud/bitbucket/modules/linker/) specified by `linker_key` for the authenticated application.
     * @param {String} linkerKey The unique key of a [linker module](/cloud/bitbucket/modules/linker/) as defined in an application descriptor.
     * @param {module:api/AddonApi~addonLinkersLinkerKeyGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addonLinkersLinkerKeyGet(linkerKey, callback) {
      let postBody = null;
      // verify the required parameter 'linkerKey' is set
      if (linkerKey === undefined || linkerKey === null) {
        throw new Error("Missing the required parameter 'linkerKey' when calling addonLinkersLinkerKeyGet");
      }

      let pathParams = {
        'linker_key': linkerKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'oauth2', 'basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/addon/linkers/{linker_key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addonLinkersLinkerKeyValuesDelete operation.
     * @callback module:api/AddonApi~addonLinkersLinkerKeyValuesDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete all linker values
     * Delete all [linker](/cloud/bitbucket/modules/linker/) values for the specified linker of the authenticated application.
     * @param {String} linkerKey The unique key of a [linker module](/cloud/bitbucket/modules/linker/) as defined in an application descriptor.
     * @param {module:api/AddonApi~addonLinkersLinkerKeyValuesDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addonLinkersLinkerKeyValuesDelete(linkerKey, callback) {
      let postBody = null;
      // verify the required parameter 'linkerKey' is set
      if (linkerKey === undefined || linkerKey === null) {
        throw new Error("Missing the required parameter 'linkerKey' when calling addonLinkersLinkerKeyValuesDelete");
      }

      let pathParams = {
        'linker_key': linkerKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'oauth2', 'basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/addon/linkers/{linker_key}/values', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addonLinkersLinkerKeyValuesGet operation.
     * @callback module:api/AddonApi~addonLinkersLinkerKeyValuesGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List linker values for a linker
     * Gets a list of all [linker](/cloud/bitbucket/modules/linker/) values for the specified linker of the authenticated application.  A linker value lets applications supply values to modify its regular expression.  The base regular expression must use a Bitbucket-specific match group `(?K)` which will be translated to `([\\w\\-]+)`. A value must match this pattern.  [Read more about linker values](/cloud/bitbucket/modules/linker/#usingthebitbucketapitosupplyvalues)
     * @param {String} linkerKey The unique key of a [linker module](/cloud/bitbucket/modules/linker/) as defined in an application descriptor.
     * @param {module:api/AddonApi~addonLinkersLinkerKeyValuesGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addonLinkersLinkerKeyValuesGet(linkerKey, callback) {
      let postBody = null;
      // verify the required parameter 'linkerKey' is set
      if (linkerKey === undefined || linkerKey === null) {
        throw new Error("Missing the required parameter 'linkerKey' when calling addonLinkersLinkerKeyValuesGet");
      }

      let pathParams = {
        'linker_key': linkerKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'oauth2', 'basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/addon/linkers/{linker_key}/values', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addonLinkersLinkerKeyValuesPost operation.
     * @callback module:api/AddonApi~addonLinkersLinkerKeyValuesPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a linker value
     * Creates a [linker](/cloud/bitbucket/modules/linker/) value for the specified linker of authenticated application.  A linker value lets applications supply values to modify its regular expression.  The base regular expression must use a Bitbucket-specific match group `(?K)` which will be translated to `([\\w\\-]+)`. A value must match this pattern.  [Read more about linker values](/cloud/bitbucket/modules/linker/#usingthebitbucketapitosupplyvalues)
     * @param {String} linkerKey The unique key of a [linker module](/cloud/bitbucket/modules/linker/) as defined in an application descriptor.
     * @param {module:api/AddonApi~addonLinkersLinkerKeyValuesPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addonLinkersLinkerKeyValuesPost(linkerKey, callback) {
      let postBody = null;
      // verify the required parameter 'linkerKey' is set
      if (linkerKey === undefined || linkerKey === null) {
        throw new Error("Missing the required parameter 'linkerKey' when calling addonLinkersLinkerKeyValuesPost");
      }

      let pathParams = {
        'linker_key': linkerKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'oauth2', 'basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/addon/linkers/{linker_key}/values', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addonLinkersLinkerKeyValuesPut operation.
     * @callback module:api/AddonApi~addonLinkersLinkerKeyValuesPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a linker value
     * Bulk update [linker](/cloud/bitbucket/modules/linker/) values for the specified linker of the authenticated application.  A linker value lets applications supply values to modify its regular expression.  The base regular expression must use a Bitbucket-specific match group `(?K)` which will be translated to `([\\w\\-]+)`. A value must match this pattern.  [Read more about linker values](/cloud/bitbucket/modules/linker/#usingthebitbucketapitosupplyvalues)
     * @param {String} linkerKey The unique key of a [linker module](/cloud/bitbucket/modules/linker/) as defined in an application descriptor.
     * @param {module:api/AddonApi~addonLinkersLinkerKeyValuesPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addonLinkersLinkerKeyValuesPut(linkerKey, callback) {
      let postBody = null;
      // verify the required parameter 'linkerKey' is set
      if (linkerKey === undefined || linkerKey === null) {
        throw new Error("Missing the required parameter 'linkerKey' when calling addonLinkersLinkerKeyValuesPut");
      }

      let pathParams = {
        'linker_key': linkerKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'oauth2', 'basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/addon/linkers/{linker_key}/values', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addonLinkersLinkerKeyValuesValueIdDelete operation.
     * @callback module:api/AddonApi~addonLinkersLinkerKeyValuesValueIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a linker value
     * Delete a single [linker](/cloud/bitbucket/modules/linker/) value of the authenticated application.
     * @param {String} linkerKey The unique key of a [linker module](/cloud/bitbucket/modules/linker/) as defined in an application descriptor.
     * @param {Number} valueId The numeric ID of the linker value.
     * @param {module:api/AddonApi~addonLinkersLinkerKeyValuesValueIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addonLinkersLinkerKeyValuesValueIdDelete(linkerKey, valueId, callback) {
      let postBody = null;
      // verify the required parameter 'linkerKey' is set
      if (linkerKey === undefined || linkerKey === null) {
        throw new Error("Missing the required parameter 'linkerKey' when calling addonLinkersLinkerKeyValuesValueIdDelete");
      }
      // verify the required parameter 'valueId' is set
      if (valueId === undefined || valueId === null) {
        throw new Error("Missing the required parameter 'valueId' when calling addonLinkersLinkerKeyValuesValueIdDelete");
      }

      let pathParams = {
        'linker_key': linkerKey,
        'value_id': valueId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'oauth2', 'basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/addon/linkers/{linker_key}/values/{value_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addonLinkersLinkerKeyValuesValueIdGet operation.
     * @callback module:api/AddonApi~addonLinkersLinkerKeyValuesValueIdGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a linker value
     * Get a single [linker](/cloud/bitbucket/modules/linker/) value of the authenticated application.
     * @param {String} linkerKey The unique key of a [linker module](/cloud/bitbucket/modules/linker/) as defined in an application descriptor.
     * @param {Number} valueId The numeric ID of the linker value.
     * @param {module:api/AddonApi~addonLinkersLinkerKeyValuesValueIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addonLinkersLinkerKeyValuesValueIdGet(linkerKey, valueId, callback) {
      let postBody = null;
      // verify the required parameter 'linkerKey' is set
      if (linkerKey === undefined || linkerKey === null) {
        throw new Error("Missing the required parameter 'linkerKey' when calling addonLinkersLinkerKeyValuesValueIdGet");
      }
      // verify the required parameter 'valueId' is set
      if (valueId === undefined || valueId === null) {
        throw new Error("Missing the required parameter 'valueId' when calling addonLinkersLinkerKeyValuesValueIdGet");
      }

      let pathParams = {
        'linker_key': linkerKey,
        'value_id': valueId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'oauth2', 'basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/addon/linkers/{linker_key}/values/{value_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addonPut operation.
     * @callback module:api/AddonApi~addonPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an installed app
     * Updates the application installation for the user.  This endpoint is intended to be used by Bitbucket Connect apps and only supports JWT authentication -- that is how Bitbucket identifies the particular installation of the app. Developers with applications registered in the \"Develop Apps\" section of Bitbucket need not use this endpoint as updates for those applications can be sent out via the UI of that section.  Passing an empty body will update the installation using the existing descriptor URL.  ``` $ curl -X PUT https://api.bitbucket.org/2.0/addon \\   -H \"Authorization: JWT <JWT Token>\" \\   --header \"Content-Type: application/json\" \\   --data '{}' ```  The new `descriptor` for the installation can be also provided in the body directly.  ``` $ curl -X PUT https://api.bitbucket.org/2.0/addon \\   -H \"Authorization: JWT <JWT Token>\" \\   --header \"Content-Type: application/json\" \\   --data '{\"descriptor\": $NEW_DESCRIPTOR}' ```  In both these modes the URL of the descriptor cannot be changed. To change the descriptor location and upgrade an installation the request must be made exclusively with a `descriptor_url`.   ``` $ curl -X PUT https://api.bitbucket.org/2.0/addon \\   -H \"Authorization: JWT <JWT Token>\" \\   --header \"Content-Type: application/json\" \\   --data '{\"descriptor_url\": $NEW_URL}' ```  The `descriptor_url` must exactly match the marketplace registration that Atlassian has for the application. Contact your Atlassian developer advocate to update this registration. Once the registration has been updated you may call this resource for each installation.  Note that the scopes of the application cannot be increased in the new descriptor nor reduced to none.
     * @param {module:api/AddonApi~addonPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addonPut(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'oauth2', 'basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/addon', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
