/**
 * Bitbucket API
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@bitbucket.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Error from '../model/Error';
import PaginatedProjects from '../model/PaginatedProjects';
import PaginatedRepositoryPermissions from '../model/PaginatedRepositoryPermissions';
import PaginatedWebhookSubscriptions from '../model/PaginatedWebhookSubscriptions';
import PaginatedWorkspaceMemberships from '../model/PaginatedWorkspaceMemberships';
import PaginatedWorkspaces from '../model/PaginatedWorkspaces';
import Project from '../model/Project';
import WebhookSubscription from '../model/WebhookSubscription';
import Workspace from '../model/Workspace';
import WorkspaceMembership from '../model/WorkspaceMembership';

/**
* Workspaces service.
* @module api/WorkspacesApi
* @version 2.0
*/
export default class WorkspacesApi {

    /**
    * Constructs a new WorkspacesApi. 
    * @alias module:api/WorkspacesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the userPermissionsWorkspacesGet operation.
     * @callback module:api/WorkspacesApi~userPermissionsWorkspacesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedWorkspaceMemberships} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List workspaces for the current user
     * Returns an object for each workspace the caller is a member of, and their effective role - the highest level of privilege the caller has. If a user is a member of multiple groups with distinct roles, only the highest level is returned.  Permissions can be:  * `owner` * `collaborator` * `member`  **The `collaborator` role is being removed from the Bitbucket Cloud API. For more information, see the [deprecation announcement](/cloud/bitbucket/deprecation-notice-collaborator-role/).**  Example:  ``` $ curl https://api.bitbucket.org/2.0/user/permissions/workspaces  {   \"pagelen\": 10,   \"page\": 1,   \"size\": 1,   \"values\": [     {       \"type\": \"workspace_membership\",       \"permission\": \"owner\",       \"last_accessed\": \"2019-03-07T12:35:02.900024+00:00\",       \"added_on\": \"2018-10-11T17:42:02.961424+00:00\",       \"user\": {         \"type\": \"user\",         \"uuid\": \"{470c176d-3574-44ea-bb41-89e8638bcca4}\",         \"nickname\": \"evzijst\",         \"display_name\": \"Erik van Zijst\",       },       \"workspace\": {         \"type\": \"workspace\",         \"uuid\": \"{a15fb181-db1f-48f7-b41f-e1eff06929d6}\",         \"slug\": \"bbworkspace1\",         \"name\": \"Atlassian Bitbucket\",       }     }   ] } ```  Results may be further [filtered or sorted](/cloud/bitbucket/rest/intro/#filtering) by workspace or permission by adding the following query string parameters:  * `q=workspace.slug=\"bbworkspace1\"` or `q=permission=\"owner\"` * `sort=workspace.slug`  Note that the query parameter values need to be URL escaped so that `=` would become `%3D`.
     * @param {Object} opts Optional parameters
     * @param {String} [q]  Query string to narrow down the response. See [filtering and sorting](/cloud/bitbucket/rest/intro/#filtering) for details.
     * @param {String} [sort]  Name of a response property to sort results. See [filtering and sorting](/cloud/bitbucket/rest/intro/#sorting-query-results) for details. 
     * @param {module:api/WorkspacesApi~userPermissionsWorkspacesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedWorkspaceMemberships}
     */
    userPermissionsWorkspacesGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'q': opts['q'],
        'sort': opts['sort']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'oauth2', 'basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PaginatedWorkspaceMemberships;
      return this.apiClient.callApi(
        '/user/permissions/workspaces', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the workspacesGet operation.
     * @callback module:api/WorkspacesApi~workspacesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedWorkspaces} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List workspaces for user
     * Returns a list of workspaces accessible by the authenticated user.  Example:  ``` $ curl https://api.bitbucket.org/2.0/workspaces  {   \"pagelen\": 10,   \"page\": 1,   \"size\": 1,   \"values\": [     {         \"uuid\": \"{a15fb181-db1f-48f7-b41f-e1eff06929d6}\",         \"links\": {             \"owners\": {                 \"href\": \"https://api.bitbucket.org/2.0/workspaces/bbworkspace1/members?q=permission%3D%22owner%22\"             },             \"self\": {                 \"href\": \"https://api.bitbucket.org/2.0/workspaces/bbworkspace1\"             },             \"repositories\": {                 \"href\": \"https://api.bitbucket.org/2.0/repositories/bbworkspace1\"             },             \"snippets\": {                 \"href\": \"https://api.bitbucket.org/2.0/snippets/bbworkspace1\"             },             \"html\": {                 \"href\": \"https://bitbucket.org/bbworkspace1/\"             },             \"avatar\": {                 \"href\": \"https://bitbucket.org/workspaces/bbworkspace1/avatar/?ts=1543465801\"             },             \"members\": {                 \"href\": \"https://api.bitbucket.org/2.0/workspaces/bbworkspace1/members\"             },             \"projects\": {                 \"href\": \"https://api.bitbucket.org/2.0/workspaces/bbworkspace1/projects\"             }         },         \"created_on\": \"2018-11-14T19:15:05.058566+00:00\",         \"type\": \"workspace\",         \"slug\": \"bbworkspace1\",         \"is_private\": true,         \"name\": \"Atlassian Bitbucket\"     }   ] } ```  Results may be further [filtered or sorted](/cloud/bitbucket/rest/intro/#filtering) by workspace or permission by adding the following query string parameters:  * `q=slug=\"bbworkspace1\"` or `q=is_private=true` * `sort=created_on`  Note that the query parameter values need to be URL escaped so that `=` would become `%3D`.  **The `collaborator` role is being removed from the Bitbucket Cloud API. For more information, see the [deprecation announcement](/cloud/bitbucket/deprecation-notice-collaborator-role/).**
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [role]              Filters the workspaces based on the authenticated user's role on each workspace.              * **member**: returns a list of all the workspaces which the caller is a member of                 at least one workspace group or repository             * **collaborator**: returns a list of workspaces which the caller has write access                 to at least one repository in the workspace             * **owner**: returns a list of workspaces which the caller has administrator access             
     * @param {String} [q]  Query string to narrow down the response. See [filtering and sorting](/cloud/bitbucket/rest/intro/#filtering) for details.
     * @param {String} [sort]  Name of a response property to sort results. See [filtering and sorting](/cloud/bitbucket/rest/intro/#sorting-query-results) for details. 
     * @param {module:api/WorkspacesApi~workspacesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedWorkspaces}
     */
    workspacesGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'role': opts['role'],
        'q': opts['q'],
        'sort': opts['sort']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'oauth2', 'basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PaginatedWorkspaces;
      return this.apiClient.callApi(
        '/workspaces', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the workspacesWorkspaceGet operation.
     * @callback module:api/WorkspacesApi~workspacesWorkspaceGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Workspace} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a workspace
     * Returns the requested workspace.
     * @param {String} workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: `{workspace UUID}`. 
     * @param {module:api/WorkspacesApi~workspacesWorkspaceGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Workspace}
     */
    workspacesWorkspaceGet(workspace, callback) {
      let postBody = null;
      // verify the required parameter 'workspace' is set
      if (workspace === undefined || workspace === null) {
        throw new Error("Missing the required parameter 'workspace' when calling workspacesWorkspaceGet");
      }

      let pathParams = {
        'workspace': workspace
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'oauth2', 'basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Workspace;
      return this.apiClient.callApi(
        '/workspaces/{workspace}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the workspacesWorkspaceHooksGet operation.
     * @callback module:api/WorkspacesApi~workspacesWorkspaceHooksGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedWebhookSubscriptions} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List webhooks for a workspace
     * Returns a paginated list of webhooks installed on this workspace.
     * @param {String} workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: `{workspace UUID}`. 
     * @param {module:api/WorkspacesApi~workspacesWorkspaceHooksGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedWebhookSubscriptions}
     */
    workspacesWorkspaceHooksGet(workspace, callback) {
      let postBody = null;
      // verify the required parameter 'workspace' is set
      if (workspace === undefined || workspace === null) {
        throw new Error("Missing the required parameter 'workspace' when calling workspacesWorkspaceHooksGet");
      }

      let pathParams = {
        'workspace': workspace
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'oauth2', 'basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PaginatedWebhookSubscriptions;
      return this.apiClient.callApi(
        '/workspaces/{workspace}/hooks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the workspacesWorkspaceHooksPost operation.
     * @callback module:api/WorkspacesApi~workspacesWorkspaceHooksPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WebhookSubscription} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a webhook for a workspace
     * Creates a new webhook on the specified workspace.  Workspace webhooks are fired for events from all repositories contained by that workspace.  Example:  ``` $ curl -X POST -u credentials -H 'Content-Type: application/json'   https://api.bitbucket.org/2.0/workspaces/my-workspace/hooks   -d '     {       \"description\": \"Webhook Description\",       \"url\": \"https://example.com/\",       \"active\": true,       \"events\": [         \"repo:push\",         \"issue:created\",         \"issue:updated\"       ]     }' ```  This call requires the webhook scope, as well as any scope that applies to the events that the webhook subscribes to. In the example above that means: `webhook`, `repository` and `issue`.  The `url` must properly resolve and cannot be an internal, non-routed address.  Only workspace owners can install webhooks on workspaces.
     * @param {String} workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: `{workspace UUID}`. 
     * @param {module:api/WorkspacesApi~workspacesWorkspaceHooksPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WebhookSubscription}
     */
    workspacesWorkspaceHooksPost(workspace, callback) {
      let postBody = null;
      // verify the required parameter 'workspace' is set
      if (workspace === undefined || workspace === null) {
        throw new Error("Missing the required parameter 'workspace' when calling workspacesWorkspaceHooksPost");
      }

      let pathParams = {
        'workspace': workspace
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'oauth2', 'basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = WebhookSubscription;
      return this.apiClient.callApi(
        '/workspaces/{workspace}/hooks', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the workspacesWorkspaceHooksUidDelete operation.
     * @callback module:api/WorkspacesApi~workspacesWorkspaceHooksUidDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a webhook for a workspace
     * Deletes the specified webhook subscription from the given workspace.
     * @param {String} uid Installed webhook's ID
     * @param {String} workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: `{workspace UUID}`. 
     * @param {module:api/WorkspacesApi~workspacesWorkspaceHooksUidDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    workspacesWorkspaceHooksUidDelete(uid, workspace, callback) {
      let postBody = null;
      // verify the required parameter 'uid' is set
      if (uid === undefined || uid === null) {
        throw new Error("Missing the required parameter 'uid' when calling workspacesWorkspaceHooksUidDelete");
      }
      // verify the required parameter 'workspace' is set
      if (workspace === undefined || workspace === null) {
        throw new Error("Missing the required parameter 'workspace' when calling workspacesWorkspaceHooksUidDelete");
      }

      let pathParams = {
        'uid': uid,
        'workspace': workspace
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'oauth2', 'basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/workspaces/{workspace}/hooks/{uid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the workspacesWorkspaceHooksUidGet operation.
     * @callback module:api/WorkspacesApi~workspacesWorkspaceHooksUidGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WebhookSubscription} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a webhook for a workspace
     * Returns the webhook with the specified id installed on the given workspace.
     * @param {String} uid Installed webhook's ID
     * @param {String} workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: `{workspace UUID}`. 
     * @param {module:api/WorkspacesApi~workspacesWorkspaceHooksUidGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WebhookSubscription}
     */
    workspacesWorkspaceHooksUidGet(uid, workspace, callback) {
      let postBody = null;
      // verify the required parameter 'uid' is set
      if (uid === undefined || uid === null) {
        throw new Error("Missing the required parameter 'uid' when calling workspacesWorkspaceHooksUidGet");
      }
      // verify the required parameter 'workspace' is set
      if (workspace === undefined || workspace === null) {
        throw new Error("Missing the required parameter 'workspace' when calling workspacesWorkspaceHooksUidGet");
      }

      let pathParams = {
        'uid': uid,
        'workspace': workspace
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'oauth2', 'basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = WebhookSubscription;
      return this.apiClient.callApi(
        '/workspaces/{workspace}/hooks/{uid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the workspacesWorkspaceHooksUidPut operation.
     * @callback module:api/WorkspacesApi~workspacesWorkspaceHooksUidPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WebhookSubscription} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a webhook for a workspace
     * Updates the specified webhook subscription.  The following properties can be mutated:  * `description` * `url` * `active` * `events`
     * @param {String} uid Installed webhook's ID
     * @param {String} workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: `{workspace UUID}`. 
     * @param {module:api/WorkspacesApi~workspacesWorkspaceHooksUidPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WebhookSubscription}
     */
    workspacesWorkspaceHooksUidPut(uid, workspace, callback) {
      let postBody = null;
      // verify the required parameter 'uid' is set
      if (uid === undefined || uid === null) {
        throw new Error("Missing the required parameter 'uid' when calling workspacesWorkspaceHooksUidPut");
      }
      // verify the required parameter 'workspace' is set
      if (workspace === undefined || workspace === null) {
        throw new Error("Missing the required parameter 'workspace' when calling workspacesWorkspaceHooksUidPut");
      }

      let pathParams = {
        'uid': uid,
        'workspace': workspace
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'oauth2', 'basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = WebhookSubscription;
      return this.apiClient.callApi(
        '/workspaces/{workspace}/hooks/{uid}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the workspacesWorkspaceMembersGet operation.
     * @callback module:api/WorkspacesApi~workspacesWorkspaceMembersGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedWorkspaceMemberships} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List users in a workspace
     * Returns all members of the requested workspace.
     * @param {String} workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: `{workspace UUID}`. 
     * @param {module:api/WorkspacesApi~workspacesWorkspaceMembersGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedWorkspaceMemberships}
     */
    workspacesWorkspaceMembersGet(workspace, callback) {
      let postBody = null;
      // verify the required parameter 'workspace' is set
      if (workspace === undefined || workspace === null) {
        throw new Error("Missing the required parameter 'workspace' when calling workspacesWorkspaceMembersGet");
      }

      let pathParams = {
        'workspace': workspace
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'oauth2', 'basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PaginatedWorkspaceMemberships;
      return this.apiClient.callApi(
        '/workspaces/{workspace}/members', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the workspacesWorkspaceMembersMemberGet operation.
     * @callback module:api/WorkspacesApi~workspacesWorkspaceMembersMemberGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WorkspaceMembership} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get user membership for a workspace
     * Returns the workspace membership, which includes a `User` object for the member and a `Workspace` object for the requested workspace.
     * @param {String} member Member's UUID or Atlassian ID.
     * @param {String} workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: `{workspace UUID}`. 
     * @param {module:api/WorkspacesApi~workspacesWorkspaceMembersMemberGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WorkspaceMembership}
     */
    workspacesWorkspaceMembersMemberGet(member, workspace, callback) {
      let postBody = null;
      // verify the required parameter 'member' is set
      if (member === undefined || member === null) {
        throw new Error("Missing the required parameter 'member' when calling workspacesWorkspaceMembersMemberGet");
      }
      // verify the required parameter 'workspace' is set
      if (workspace === undefined || workspace === null) {
        throw new Error("Missing the required parameter 'workspace' when calling workspacesWorkspaceMembersMemberGet");
      }

      let pathParams = {
        'member': member,
        'workspace': workspace
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'oauth2', 'basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = WorkspaceMembership;
      return this.apiClient.callApi(
        '/workspaces/{workspace}/members/{member}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the workspacesWorkspacePermissionsGet operation.
     * @callback module:api/WorkspacesApi~workspacesWorkspacePermissionsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedWorkspaceMemberships} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List user permissions in a workspace
     * Returns the list of members in a workspace and their permission levels. Permission can be: * `owner` * `collaborator` * `member`  **The `collaborator` role is being removed from the Bitbucket Cloud API. For more information, see the [deprecation announcement](/cloud/bitbucket/deprecation-notice-collaborator-role/).**  Example:  ``` $ curl -X https://api.bitbucket.org/2.0/workspaces/bbworkspace1/permissions  {     \"pagelen\": 10,     \"values\": [         {             \"permission\": \"owner\",             \"type\": \"workspace_membership\",             \"user\": {                 \"type\": \"user\",                 \"uuid\": \"{470c176d-3574-44ea-bb41-89e8638bcca4}\",                 \"display_name\": \"Erik van Zijst\",             },             \"workspace\": {                 \"type\": \"workspace\",                 \"uuid\": \"{a15fb181-db1f-48f7-b41f-e1eff06929d6}\",                 \"slug\": \"bbworkspace1\",                 \"name\": \"Atlassian Bitbucket\",             }         },         {             \"permission\": \"member\",             \"type\": \"workspace_membership\",             \"user\": {                 \"type\": \"user\",                 \"nickname\": \"seanaty\",                 \"display_name\": \"Sean Conaty\",                 \"uuid\": \"{504c3b62-8120-4f0c-a7bc-87800b9d6f70}\"             },             \"workspace\": {                 \"type\": \"workspace\",                 \"uuid\": \"{a15fb181-db1f-48f7-b41f-e1eff06929d6}\",                 \"slug\": \"bbworkspace1\",                 \"name\": \"Atlassian Bitbucket\",             }         }     ],     \"page\": 1,     \"size\": 2 } ```  Results may be further [filtered](/cloud/bitbucket/rest/intro/#filtering) by permission by adding the following query string parameters:  * `q=permission=\"owner\"`
     * @param {String} workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: `{workspace UUID}`. 
     * @param {Object} opts Optional parameters
     * @param {String} [q]  Query string to narrow down the response as per [filtering and sorting](/cloud/bitbucket/rest/intro/#filtering).
     * @param {module:api/WorkspacesApi~workspacesWorkspacePermissionsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedWorkspaceMemberships}
     */
    workspacesWorkspacePermissionsGet(workspace, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'workspace' is set
      if (workspace === undefined || workspace === null) {
        throw new Error("Missing the required parameter 'workspace' when calling workspacesWorkspacePermissionsGet");
      }

      let pathParams = {
        'workspace': workspace
      };
      let queryParams = {
        'q': opts['q']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'oauth2', 'basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PaginatedWorkspaceMemberships;
      return this.apiClient.callApi(
        '/workspaces/{workspace}/permissions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the workspacesWorkspacePermissionsRepositoriesGet operation.
     * @callback module:api/WorkspacesApi~workspacesWorkspacePermissionsRepositoriesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedRepositoryPermissions} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all repository permissions for a workspace
     * Returns an object for each repository permission for all of a workspace's repositories.  Permissions returned are effective permissions: the highest level of permission the user has. This does not distinguish between direct and indirect (group) privileges.  Only users with admin permission for the team may access this resource.  Permissions can be:  * `admin` * `write` * `read`  Example:  ``` $ curl https://api.bitbucket.org/2.0/workspaces/atlassian_tutorial/permissions/repositories  {   \"pagelen\": 10,   \"values\": [     {       \"type\": \"repository_permission\",       \"user\": {         \"type\": \"user\",         \"display_name\": \"Erik van Zijst\",         \"uuid\": \"{d301aafa-d676-4ee0-88be-962be7417567}\"       },       \"repository\": {         \"type\": \"repository\",         \"name\": \"geordi\",         \"full_name\": \"atlassian_tutorial/geordi\",         \"uuid\": \"{85d08b4e-571d-44e9-a507-fa476535aa98}\"       },       \"permission\": \"admin\"     },     {       \"type\": \"repository_permission\",       \"user\": {         \"type\": \"user\",         \"display_name\": \"Sean Conaty\",         \"uuid\": \"{504c3b62-8120-4f0c-a7bc-87800b9d6f70}\"       },       \"repository\": {         \"type\": \"repository\",         \"name\": \"geordi\",         \"full_name\": \"atlassian_tutorial/geordi\",         \"uuid\": \"{85d08b4e-571d-44e9-a507-fa476535aa98}\"       },       \"permission\": \"write\"     },     {       \"type\": \"repository_permission\",       \"user\": {         \"type\": \"user\",         \"display_name\": \"Jeff Zeng\",         \"uuid\": \"{47f92a9a-c3a3-4d0b-bc4e-782a969c5c72}\"       },       \"repository\": {         \"type\": \"repository\",         \"name\": \"whee\",         \"full_name\": \"atlassian_tutorial/whee\",         \"uuid\": \"{30ba25e9-51ff-4555-8dd0-fc7ee2fa0895}\"       },       \"permission\": \"admin\"     }   ],   \"page\": 1,   \"size\": 3 } ```  Results may be further [filtered or sorted](/cloud/bitbucket/rest/intro/#filtering) by repository, user, or permission by adding the following query string parameters:  * `q=repository.name=\"geordi\"` or `q=permission>\"read\"` * `sort=user.display_name`  Note that the query parameter values need to be URL escaped so that `=` would become `%3D`.
     * @param {String} workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: `{workspace UUID}`. 
     * @param {Object} opts Optional parameters
     * @param {String} [q]  Query string to narrow down the response as per [filtering and sorting](/cloud/bitbucket/rest/intro/#filtering).
     * @param {String} [sort]  Name of a response property sort the result by as per [filtering and sorting](/cloud/bitbucket/rest/intro/#sorting-query-results). 
     * @param {module:api/WorkspacesApi~workspacesWorkspacePermissionsRepositoriesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedRepositoryPermissions}
     */
    workspacesWorkspacePermissionsRepositoriesGet(workspace, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'workspace' is set
      if (workspace === undefined || workspace === null) {
        throw new Error("Missing the required parameter 'workspace' when calling workspacesWorkspacePermissionsRepositoriesGet");
      }

      let pathParams = {
        'workspace': workspace
      };
      let queryParams = {
        'q': opts['q'],
        'sort': opts['sort']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'oauth2', 'basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PaginatedRepositoryPermissions;
      return this.apiClient.callApi(
        '/workspaces/{workspace}/permissions/repositories', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the workspacesWorkspacePermissionsRepositoriesRepoSlugGet operation.
     * @callback module:api/WorkspacesApi~workspacesWorkspacePermissionsRepositoriesRepoSlugGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedRepositoryPermissions} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List a repository permissions for a workspace
     * Returns an object for the repository permission of each user in the requested repository.  Permissions returned are effective permissions: the highest level of permission the user has. This does not distinguish between direct and indirect (group) privileges.  Only users with admin permission for the repository may access this resource.  Permissions can be:  * `admin` * `write` * `read`  Example:  ``` $ curl https://api.bitbucket.org/2.0/workspaces/atlassian_tutorial/permissions/repositories/geordi  {   \"pagelen\": 10,   \"values\": [     {       \"type\": \"repository_permission\",       \"user\": {         \"type\": \"user\",         \"display_name\": \"Erik van Zijst\",         \"uuid\": \"{d301aafa-d676-4ee0-88be-962be7417567}\"       },       \"repository\": {         \"type\": \"repository\",         \"name\": \"geordi\",         \"full_name\": \"atlassian_tutorial/geordi\",         \"uuid\": \"{85d08b4e-571d-44e9-a507-fa476535aa98}\"       },       \"permission\": \"admin\"     },     {       \"type\": \"repository_permission\",       \"user\": {         \"type\": \"user\",         \"display_name\": \"Sean Conaty\",         \"uuid\": \"{504c3b62-8120-4f0c-a7bc-87800b9d6f70}\"       },       \"repository\": {         \"type\": \"repository\",         \"name\": \"geordi\",         \"full_name\": \"atlassian_tutorial/geordi\",         \"uuid\": \"{85d08b4e-571d-44e9-a507-fa476535aa98}\"       },       \"permission\": \"write\"     }   ],   \"page\": 1,   \"size\": 2 } ```  Results may be further [filtered or sorted](/cloud/bitbucket/rest/intro/#filtering) by user, or permission by adding the following query string parameters:  * `q=permission>\"read\"` * `sort=user.display_name`  Note that the query parameter values need to be URL escaped so that `=` would become `%3D`.
     * @param {String} repoSlug This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: `{repository UUID}`. 
     * @param {String} workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: `{workspace UUID}`. 
     * @param {Object} opts Optional parameters
     * @param {String} [q]  Query string to narrow down the response as per [filtering and sorting](/cloud/bitbucket/rest/intro/#filtering).
     * @param {String} [sort]  Name of a response property sort the result by as per [filtering and sorting](/cloud/bitbucket/rest/intro/#sorting-query-results). 
     * @param {module:api/WorkspacesApi~workspacesWorkspacePermissionsRepositoriesRepoSlugGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedRepositoryPermissions}
     */
    workspacesWorkspacePermissionsRepositoriesRepoSlugGet(repoSlug, workspace, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'repoSlug' is set
      if (repoSlug === undefined || repoSlug === null) {
        throw new Error("Missing the required parameter 'repoSlug' when calling workspacesWorkspacePermissionsRepositoriesRepoSlugGet");
      }
      // verify the required parameter 'workspace' is set
      if (workspace === undefined || workspace === null) {
        throw new Error("Missing the required parameter 'workspace' when calling workspacesWorkspacePermissionsRepositoriesRepoSlugGet");
      }

      let pathParams = {
        'repo_slug': repoSlug,
        'workspace': workspace
      };
      let queryParams = {
        'q': opts['q'],
        'sort': opts['sort']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'oauth2', 'basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PaginatedRepositoryPermissions;
      return this.apiClient.callApi(
        '/workspaces/{workspace}/permissions/repositories/{repo_slug}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the workspacesWorkspaceProjectsGet operation.
     * @callback module:api/WorkspacesApi~workspacesWorkspaceProjectsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedProjects} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List projects in a workspace
     * Returns the list of projects in this workspace.
     * @param {String} workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: `{workspace UUID}`. 
     * @param {module:api/WorkspacesApi~workspacesWorkspaceProjectsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedProjects}
     */
    workspacesWorkspaceProjectsGet(workspace, callback) {
      let postBody = null;
      // verify the required parameter 'workspace' is set
      if (workspace === undefined || workspace === null) {
        throw new Error("Missing the required parameter 'workspace' when calling workspacesWorkspaceProjectsGet");
      }

      let pathParams = {
        'workspace': workspace
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'oauth2', 'basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PaginatedProjects;
      return this.apiClient.callApi(
        '/workspaces/{workspace}/projects', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the workspacesWorkspaceProjectsProjectKeyGet_0 operation.
     * @callback module:api/WorkspacesApi~workspacesWorkspaceProjectsProjectKeyGet_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Project} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a project for a workspace
     * Returns the requested project.
     * @param {String} projectKey The project in question. This is the actual `key` assigned to the project. 
     * @param {String} workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: `{workspace UUID}`. 
     * @param {module:api/WorkspacesApi~workspacesWorkspaceProjectsProjectKeyGet_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Project}
     */
    workspacesWorkspaceProjectsProjectKeyGet_0(projectKey, workspace, callback) {
      let postBody = null;
      // verify the required parameter 'projectKey' is set
      if (projectKey === undefined || projectKey === null) {
        throw new Error("Missing the required parameter 'projectKey' when calling workspacesWorkspaceProjectsProjectKeyGet_0");
      }
      // verify the required parameter 'workspace' is set
      if (workspace === undefined || workspace === null) {
        throw new Error("Missing the required parameter 'workspace' when calling workspacesWorkspaceProjectsProjectKeyGet_0");
      }

      let pathParams = {
        'project_key': projectKey,
        'workspace': workspace
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'oauth2', 'basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Project;
      return this.apiClient.callApi(
        '/workspaces/{workspace}/projects/{project_key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
