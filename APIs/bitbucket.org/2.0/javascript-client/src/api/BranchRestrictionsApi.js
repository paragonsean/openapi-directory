/**
 * Bitbucket API
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@bitbucket.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Branchrestriction from '../model/Branchrestriction';
import Error from '../model/Error';
import PaginatedBranchrestrictions from '../model/PaginatedBranchrestrictions';

/**
* BranchRestrictions service.
* @module api/BranchRestrictionsApi
* @version 2.0
*/
export default class BranchRestrictionsApi {

    /**
    * Constructs a new BranchRestrictionsApi. 
    * @alias module:api/BranchRestrictionsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the repositoriesWorkspaceRepoSlugBranchRestrictionsGet operation.
     * @callback module:api/BranchRestrictionsApi~repositoriesWorkspaceRepoSlugBranchRestrictionsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedBranchrestrictions} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List branch restrictions
     * Returns a paginated list of all branch restrictions on the repository.
     * @param {String} repoSlug This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: `{repository UUID}`. 
     * @param {String} workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: `{workspace UUID}`. 
     * @param {Object} opts Optional parameters
     * @param {String} [kind] Branch restrictions of this type
     * @param {String} [pattern] Branch restrictions applied to branches of this pattern
     * @param {module:api/BranchRestrictionsApi~repositoriesWorkspaceRepoSlugBranchRestrictionsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedBranchrestrictions}
     */
    repositoriesWorkspaceRepoSlugBranchRestrictionsGet(repoSlug, workspace, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'repoSlug' is set
      if (repoSlug === undefined || repoSlug === null) {
        throw new Error("Missing the required parameter 'repoSlug' when calling repositoriesWorkspaceRepoSlugBranchRestrictionsGet");
      }
      // verify the required parameter 'workspace' is set
      if (workspace === undefined || workspace === null) {
        throw new Error("Missing the required parameter 'workspace' when calling repositoriesWorkspaceRepoSlugBranchRestrictionsGet");
      }

      let pathParams = {
        'repo_slug': repoSlug,
        'workspace': workspace
      };
      let queryParams = {
        'kind': opts['kind'],
        'pattern': opts['pattern']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'oauth2', 'basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PaginatedBranchrestrictions;
      return this.apiClient.callApi(
        '/repositories/{workspace}/{repo_slug}/branch-restrictions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the repositoriesWorkspaceRepoSlugBranchRestrictionsIdDelete operation.
     * @callback module:api/BranchRestrictionsApi~repositoriesWorkspaceRepoSlugBranchRestrictionsIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a branch restriction rule
     * Deletes an existing branch restriction rule.
     * @param {String} id The restriction rule's id
     * @param {String} repoSlug This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: `{repository UUID}`. 
     * @param {String} workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: `{workspace UUID}`. 
     * @param {module:api/BranchRestrictionsApi~repositoriesWorkspaceRepoSlugBranchRestrictionsIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    repositoriesWorkspaceRepoSlugBranchRestrictionsIdDelete(id, repoSlug, workspace, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling repositoriesWorkspaceRepoSlugBranchRestrictionsIdDelete");
      }
      // verify the required parameter 'repoSlug' is set
      if (repoSlug === undefined || repoSlug === null) {
        throw new Error("Missing the required parameter 'repoSlug' when calling repositoriesWorkspaceRepoSlugBranchRestrictionsIdDelete");
      }
      // verify the required parameter 'workspace' is set
      if (workspace === undefined || workspace === null) {
        throw new Error("Missing the required parameter 'workspace' when calling repositoriesWorkspaceRepoSlugBranchRestrictionsIdDelete");
      }

      let pathParams = {
        'id': id,
        'repo_slug': repoSlug,
        'workspace': workspace
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'oauth2', 'basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/repositories/{workspace}/{repo_slug}/branch-restrictions/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the repositoriesWorkspaceRepoSlugBranchRestrictionsIdGet operation.
     * @callback module:api/BranchRestrictionsApi~repositoriesWorkspaceRepoSlugBranchRestrictionsIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Branchrestriction} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a branch restriction rule
     * Returns a specific branch restriction rule.
     * @param {String} id The restriction rule's id
     * @param {String} repoSlug This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: `{repository UUID}`. 
     * @param {String} workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: `{workspace UUID}`. 
     * @param {module:api/BranchRestrictionsApi~repositoriesWorkspaceRepoSlugBranchRestrictionsIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Branchrestriction}
     */
    repositoriesWorkspaceRepoSlugBranchRestrictionsIdGet(id, repoSlug, workspace, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling repositoriesWorkspaceRepoSlugBranchRestrictionsIdGet");
      }
      // verify the required parameter 'repoSlug' is set
      if (repoSlug === undefined || repoSlug === null) {
        throw new Error("Missing the required parameter 'repoSlug' when calling repositoriesWorkspaceRepoSlugBranchRestrictionsIdGet");
      }
      // verify the required parameter 'workspace' is set
      if (workspace === undefined || workspace === null) {
        throw new Error("Missing the required parameter 'workspace' when calling repositoriesWorkspaceRepoSlugBranchRestrictionsIdGet");
      }

      let pathParams = {
        'id': id,
        'repo_slug': repoSlug,
        'workspace': workspace
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'oauth2', 'basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Branchrestriction;
      return this.apiClient.callApi(
        '/repositories/{workspace}/{repo_slug}/branch-restrictions/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the repositoriesWorkspaceRepoSlugBranchRestrictionsIdPut operation.
     * @callback module:api/BranchRestrictionsApi~repositoriesWorkspaceRepoSlugBranchRestrictionsIdPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Branchrestriction} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a branch restriction rule
     * Updates an existing branch restriction rule.  Fields not present in the request body are ignored.  See [`POST`](/cloud/bitbucket/rest/api-group-branch-restrictions/#api-repositories-workspace-repo-slug-branch-restrictions-post) for details.
     * @param {String} id The restriction rule's id
     * @param {String} repoSlug This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: `{repository UUID}`. 
     * @param {String} workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: `{workspace UUID}`. 
     * @param {module:model/Branchrestriction} branchrestriction The new version of the existing rule
     * @param {module:api/BranchRestrictionsApi~repositoriesWorkspaceRepoSlugBranchRestrictionsIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Branchrestriction}
     */
    repositoriesWorkspaceRepoSlugBranchRestrictionsIdPut(id, repoSlug, workspace, branchrestriction, callback) {
      let postBody = branchrestriction;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling repositoriesWorkspaceRepoSlugBranchRestrictionsIdPut");
      }
      // verify the required parameter 'repoSlug' is set
      if (repoSlug === undefined || repoSlug === null) {
        throw new Error("Missing the required parameter 'repoSlug' when calling repositoriesWorkspaceRepoSlugBranchRestrictionsIdPut");
      }
      // verify the required parameter 'workspace' is set
      if (workspace === undefined || workspace === null) {
        throw new Error("Missing the required parameter 'workspace' when calling repositoriesWorkspaceRepoSlugBranchRestrictionsIdPut");
      }
      // verify the required parameter 'branchrestriction' is set
      if (branchrestriction === undefined || branchrestriction === null) {
        throw new Error("Missing the required parameter 'branchrestriction' when calling repositoriesWorkspaceRepoSlugBranchRestrictionsIdPut");
      }

      let pathParams = {
        'id': id,
        'repo_slug': repoSlug,
        'workspace': workspace
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'oauth2', 'basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Branchrestriction;
      return this.apiClient.callApi(
        '/repositories/{workspace}/{repo_slug}/branch-restrictions/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the repositoriesWorkspaceRepoSlugBranchRestrictionsPost operation.
     * @callback module:api/BranchRestrictionsApi~repositoriesWorkspaceRepoSlugBranchRestrictionsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Branchrestriction} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a branch restriction rule
     * Creates a new branch restriction rule for a repository.  `kind` describes what will be restricted. Allowed values include: `push`, `force`, `delete` and `restrict_merges`.  Different kinds of branch restrictions have different requirements:  * `push` and `restrict_merges` require `users` and `groups` to be   specified. Empty lists are allowed, in which case permission is   denied for everybody.  The restriction applies to all branches that match. There are two ways to match a branch. It is configured in `branch_match_kind`:  1. `glob`: Matches a branch against the `pattern`. A `'*'` in    `pattern` will expand to match zero or more characters, and every    other character matches itself. For example, `'foo*'` will match    `'foo'` and `'foobar'`, but not `'barfoo'`. `'*'` will match all    branches. 2. `branching_model`: Matches a branch against the repository's    branching model. The `branch_type` controls the type of branch    to match. Allowed values include: `production`, `development`,    `bugfix`, `release`, `feature` and `hotfix`.  The combination of `kind` and match must be unique. This means that two `glob` restrictions in a repository cannot have the same `kind` and `pattern`. Additionally, two `branching_model` restrictions in a repository cannot have the same `kind` and `branch_type`.  `users` and `groups` are lists of users and groups that are except from the restriction. They can only be configured in `push` and `restrict_merges` restrictions. The `push` restriction stops a user pushing to matching branches unless that user is in `users` or is a member of a group in `groups`. The `restrict_merges` stops a user merging pull requests to matching branches unless that user is in `users` or is a member of a group in `groups`. Adding new users or groups to an existing restriction should be done via `PUT`.  Note that branch restrictions with overlapping matchers is allowed, but the resulting behavior may be surprising.
     * @param {String} repoSlug This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: `{repository UUID}`. 
     * @param {String} workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: `{workspace UUID}`. 
     * @param {module:model/Branchrestriction} branchrestriction The new rule
     * @param {module:api/BranchRestrictionsApi~repositoriesWorkspaceRepoSlugBranchRestrictionsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Branchrestriction}
     */
    repositoriesWorkspaceRepoSlugBranchRestrictionsPost(repoSlug, workspace, branchrestriction, callback) {
      let postBody = branchrestriction;
      // verify the required parameter 'repoSlug' is set
      if (repoSlug === undefined || repoSlug === null) {
        throw new Error("Missing the required parameter 'repoSlug' when calling repositoriesWorkspaceRepoSlugBranchRestrictionsPost");
      }
      // verify the required parameter 'workspace' is set
      if (workspace === undefined || workspace === null) {
        throw new Error("Missing the required parameter 'workspace' when calling repositoriesWorkspaceRepoSlugBranchRestrictionsPost");
      }
      // verify the required parameter 'branchrestriction' is set
      if (branchrestriction === undefined || branchrestriction === null) {
        throw new Error("Missing the required parameter 'branchrestriction' when calling repositoriesWorkspaceRepoSlugBranchRestrictionsPost");
      }

      let pathParams = {
        'repo_slug': repoSlug,
        'workspace': workspace
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'oauth2', 'basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Branchrestriction;
      return this.apiClient.callApi(
        '/repositories/{workspace}/{repo_slug}/branch-restrictions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
