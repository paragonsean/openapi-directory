/**
 * Bitbucket API
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@bitbucket.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DeployKey from '../model/DeployKey';
import Deployment from '../model/Deployment';
import DeploymentEnvironment from '../model/DeploymentEnvironment';
import Error from '../model/Error';
import PaginatedDeployKeys from '../model/PaginatedDeployKeys';
import PaginatedDeployments from '../model/PaginatedDeployments';
import PaginatedEnvironments from '../model/PaginatedEnvironments';
import PaginatedProjectDeployKeys from '../model/PaginatedProjectDeployKeys';
import ProjectDeployKey from '../model/ProjectDeployKey';

/**
* Deployments service.
* @module api/DeploymentsApi
* @version 2.0
*/
export default class DeploymentsApi {

    /**
    * Constructs a new DeploymentsApi. 
    * @alias module:api/DeploymentsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createEnvironment operation.
     * @callback module:api/DeploymentsApi~createEnvironmentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeploymentEnvironment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an environment
     * Create an environment.
     * @param {String} workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example `{workspace UUID}`.
     * @param {String} repoSlug The repository.
     * @param {module:model/DeploymentEnvironment} deploymentEnvironment The environment to create.
     * @param {module:api/DeploymentsApi~createEnvironmentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeploymentEnvironment}
     */
    createEnvironment(workspace, repoSlug, deploymentEnvironment, callback) {
      let postBody = deploymentEnvironment;
      // verify the required parameter 'workspace' is set
      if (workspace === undefined || workspace === null) {
        throw new Error("Missing the required parameter 'workspace' when calling createEnvironment");
      }
      // verify the required parameter 'repoSlug' is set
      if (repoSlug === undefined || repoSlug === null) {
        throw new Error("Missing the required parameter 'repoSlug' when calling createEnvironment");
      }
      // verify the required parameter 'deploymentEnvironment' is set
      if (deploymentEnvironment === undefined || deploymentEnvironment === null) {
        throw new Error("Missing the required parameter 'deploymentEnvironment' when calling createEnvironment");
      }

      let pathParams = {
        'workspace': workspace,
        'repo_slug': repoSlug
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeploymentEnvironment;
      return this.apiClient.callApi(
        '/repositories/{workspace}/{repo_slug}/environments', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteEnvironmentForRepository operation.
     * @callback module:api/DeploymentsApi~deleteEnvironmentForRepositoryCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an environment
     * Delete an environment
     * @param {String} workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example `{workspace UUID}`.
     * @param {String} repoSlug The repository.
     * @param {String} environmentUuid The environment UUID.
     * @param {module:api/DeploymentsApi~deleteEnvironmentForRepositoryCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteEnvironmentForRepository(workspace, repoSlug, environmentUuid, callback) {
      let postBody = null;
      // verify the required parameter 'workspace' is set
      if (workspace === undefined || workspace === null) {
        throw new Error("Missing the required parameter 'workspace' when calling deleteEnvironmentForRepository");
      }
      // verify the required parameter 'repoSlug' is set
      if (repoSlug === undefined || repoSlug === null) {
        throw new Error("Missing the required parameter 'repoSlug' when calling deleteEnvironmentForRepository");
      }
      // verify the required parameter 'environmentUuid' is set
      if (environmentUuid === undefined || environmentUuid === null) {
        throw new Error("Missing the required parameter 'environmentUuid' when calling deleteEnvironmentForRepository");
      }

      let pathParams = {
        'workspace': workspace,
        'repo_slug': repoSlug,
        'environment_uuid': environmentUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/repositories/{workspace}/{repo_slug}/environments/{environment_uuid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDeploymentForRepository operation.
     * @callback module:api/DeploymentsApi~getDeploymentForRepositoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Deployment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a deployment
     * Retrieve a deployment
     * @param {String} workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example `{workspace UUID}`.
     * @param {String} repoSlug The repository.
     * @param {String} deploymentUuid The deployment UUID.
     * @param {module:api/DeploymentsApi~getDeploymentForRepositoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Deployment}
     */
    getDeploymentForRepository(workspace, repoSlug, deploymentUuid, callback) {
      let postBody = null;
      // verify the required parameter 'workspace' is set
      if (workspace === undefined || workspace === null) {
        throw new Error("Missing the required parameter 'workspace' when calling getDeploymentForRepository");
      }
      // verify the required parameter 'repoSlug' is set
      if (repoSlug === undefined || repoSlug === null) {
        throw new Error("Missing the required parameter 'repoSlug' when calling getDeploymentForRepository");
      }
      // verify the required parameter 'deploymentUuid' is set
      if (deploymentUuid === undefined || deploymentUuid === null) {
        throw new Error("Missing the required parameter 'deploymentUuid' when calling getDeploymentForRepository");
      }

      let pathParams = {
        'workspace': workspace,
        'repo_slug': repoSlug,
        'deployment_uuid': deploymentUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Deployment;
      return this.apiClient.callApi(
        '/repositories/{workspace}/{repo_slug}/deployments/{deployment_uuid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDeploymentsForRepository operation.
     * @callback module:api/DeploymentsApi~getDeploymentsForRepositoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedDeployments} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List deployments
     * Find deployments
     * @param {String} workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example `{workspace UUID}`.
     * @param {String} repoSlug The repository.
     * @param {module:api/DeploymentsApi~getDeploymentsForRepositoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedDeployments}
     */
    getDeploymentsForRepository(workspace, repoSlug, callback) {
      let postBody = null;
      // verify the required parameter 'workspace' is set
      if (workspace === undefined || workspace === null) {
        throw new Error("Missing the required parameter 'workspace' when calling getDeploymentsForRepository");
      }
      // verify the required parameter 'repoSlug' is set
      if (repoSlug === undefined || repoSlug === null) {
        throw new Error("Missing the required parameter 'repoSlug' when calling getDeploymentsForRepository");
      }

      let pathParams = {
        'workspace': workspace,
        'repo_slug': repoSlug
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PaginatedDeployments;
      return this.apiClient.callApi(
        '/repositories/{workspace}/{repo_slug}/deployments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEnvironmentForRepository operation.
     * @callback module:api/DeploymentsApi~getEnvironmentForRepositoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeploymentEnvironment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get an environment
     * Retrieve an environment
     * @param {String} workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example `{workspace UUID}`.
     * @param {String} repoSlug The repository.
     * @param {String} environmentUuid The environment UUID.
     * @param {module:api/DeploymentsApi~getEnvironmentForRepositoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeploymentEnvironment}
     */
    getEnvironmentForRepository(workspace, repoSlug, environmentUuid, callback) {
      let postBody = null;
      // verify the required parameter 'workspace' is set
      if (workspace === undefined || workspace === null) {
        throw new Error("Missing the required parameter 'workspace' when calling getEnvironmentForRepository");
      }
      // verify the required parameter 'repoSlug' is set
      if (repoSlug === undefined || repoSlug === null) {
        throw new Error("Missing the required parameter 'repoSlug' when calling getEnvironmentForRepository");
      }
      // verify the required parameter 'environmentUuid' is set
      if (environmentUuid === undefined || environmentUuid === null) {
        throw new Error("Missing the required parameter 'environmentUuid' when calling getEnvironmentForRepository");
      }

      let pathParams = {
        'workspace': workspace,
        'repo_slug': repoSlug,
        'environment_uuid': environmentUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeploymentEnvironment;
      return this.apiClient.callApi(
        '/repositories/{workspace}/{repo_slug}/environments/{environment_uuid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEnvironmentsForRepository operation.
     * @callback module:api/DeploymentsApi~getEnvironmentsForRepositoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedEnvironments} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List environments
     * Find environments
     * @param {String} workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example `{workspace UUID}`.
     * @param {String} repoSlug The repository.
     * @param {module:api/DeploymentsApi~getEnvironmentsForRepositoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedEnvironments}
     */
    getEnvironmentsForRepository(workspace, repoSlug, callback) {
      let postBody = null;
      // verify the required parameter 'workspace' is set
      if (workspace === undefined || workspace === null) {
        throw new Error("Missing the required parameter 'workspace' when calling getEnvironmentsForRepository");
      }
      // verify the required parameter 'repoSlug' is set
      if (repoSlug === undefined || repoSlug === null) {
        throw new Error("Missing the required parameter 'repoSlug' when calling getEnvironmentsForRepository");
      }

      let pathParams = {
        'workspace': workspace,
        'repo_slug': repoSlug
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PaginatedEnvironments;
      return this.apiClient.callApi(
        '/repositories/{workspace}/{repo_slug}/environments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the repositoriesWorkspaceRepoSlugDeployKeysGet operation.
     * @callback module:api/DeploymentsApi~repositoriesWorkspaceRepoSlugDeployKeysGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedDeployKeys} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List repository deploy keys
     * Returns all deploy-keys belonging to a repository.  Example: ``` $ curl -H \"Authorization <auth header>\" \\ https://api.bitbucket.org/2.0/repositories/mleu/test/deploy-keys  Output: {     \"pagelen\": 10,     \"values\": [         {             \"id\": 123,             \"key\": \"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDAK/b1cHHDr/TEV1JGQl+WjCwStKG6Bhrv0rFpEsYlyTBm1fzN0VOJJYn4ZOPCPJwqse6fGbXntEs+BbXiptR+++HycVgl65TMR0b5ul5AgwrVdZdT7qjCOCgaSV74/9xlHDK8oqgGnfA7ZoBBU+qpVyaloSjBdJfLtPY/xqj4yHnXKYzrtn/uFc4Kp9Tb7PUg9Io3qohSTGJGVHnsVblq/rToJG7L5xIo0OxK0SJSQ5vuId93ZuFZrCNMXj8JDHZeSEtjJzpRCBEXHxpOPhAcbm4MzULgkFHhAVgp4JbkrT99/wpvZ7r9AdkTg7HGqL3rlaDrEcWfL7Lu6TnhBdq5\",             \"label\": \"mykey\",             \"type\": \"deploy_key\",             \"created_on\": \"2018-08-15T23:50:59.993890+00:00\",             \"repository\": {                 \"full_name\": \"mleu/test\",                 \"name\": \"test\",                 \"type\": \"repository\",                 \"uuid\": \"{85d08b4e-571d-44e9-a507-fa476535aa98}\"             },             \"links\":{                 \"self\":{                     \"href\": \"https://api.bitbucket.org/2.0/repositories/mleu/test/deploy-keys/123\"                 }             }             \"last_used\": null,             \"comment\": \"mleu@C02W454JHTD8\"         }     ],     \"page\": 1,     \"size\": 1 } ```
     * @param {String} repoSlug This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: `{repository UUID}`. 
     * @param {String} workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: `{workspace UUID}`. 
     * @param {module:api/DeploymentsApi~repositoriesWorkspaceRepoSlugDeployKeysGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedDeployKeys}
     */
    repositoriesWorkspaceRepoSlugDeployKeysGet(repoSlug, workspace, callback) {
      let postBody = null;
      // verify the required parameter 'repoSlug' is set
      if (repoSlug === undefined || repoSlug === null) {
        throw new Error("Missing the required parameter 'repoSlug' when calling repositoriesWorkspaceRepoSlugDeployKeysGet");
      }
      // verify the required parameter 'workspace' is set
      if (workspace === undefined || workspace === null) {
        throw new Error("Missing the required parameter 'workspace' when calling repositoriesWorkspaceRepoSlugDeployKeysGet");
      }

      let pathParams = {
        'repo_slug': repoSlug,
        'workspace': workspace
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'oauth2', 'basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PaginatedDeployKeys;
      return this.apiClient.callApi(
        '/repositories/{workspace}/{repo_slug}/deploy-keys', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the repositoriesWorkspaceRepoSlugDeployKeysKeyIdDelete operation.
     * @callback module:api/DeploymentsApi~repositoriesWorkspaceRepoSlugDeployKeysKeyIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a repository deploy key
     * This deletes a deploy key from a repository.  Example: ``` $ curl -XDELETE \\ -H \"Authorization <auth header>\" \\ https://api.bitbucket.org/2.0/repositories/mleu/test/deploy-keys/1234 ```
     * @param {String} keyId The key ID matching the deploy key.
     * @param {String} repoSlug This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: `{repository UUID}`. 
     * @param {String} workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: `{workspace UUID}`. 
     * @param {module:api/DeploymentsApi~repositoriesWorkspaceRepoSlugDeployKeysKeyIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    repositoriesWorkspaceRepoSlugDeployKeysKeyIdDelete(keyId, repoSlug, workspace, callback) {
      let postBody = null;
      // verify the required parameter 'keyId' is set
      if (keyId === undefined || keyId === null) {
        throw new Error("Missing the required parameter 'keyId' when calling repositoriesWorkspaceRepoSlugDeployKeysKeyIdDelete");
      }
      // verify the required parameter 'repoSlug' is set
      if (repoSlug === undefined || repoSlug === null) {
        throw new Error("Missing the required parameter 'repoSlug' when calling repositoriesWorkspaceRepoSlugDeployKeysKeyIdDelete");
      }
      // verify the required parameter 'workspace' is set
      if (workspace === undefined || workspace === null) {
        throw new Error("Missing the required parameter 'workspace' when calling repositoriesWorkspaceRepoSlugDeployKeysKeyIdDelete");
      }

      let pathParams = {
        'key_id': keyId,
        'repo_slug': repoSlug,
        'workspace': workspace
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'oauth2', 'basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/repositories/{workspace}/{repo_slug}/deploy-keys/{key_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the repositoriesWorkspaceRepoSlugDeployKeysKeyIdGet operation.
     * @callback module:api/DeploymentsApi~repositoriesWorkspaceRepoSlugDeployKeysKeyIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeployKey} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a repository deploy key
     * Returns the deploy key belonging to a specific key.  Example: ``` $ curl -H \"Authorization <auth header>\" \\ https://api.bitbucket.org/2.0/repositories/mleu/test/deploy-key/1234  Output: {     \"comment\": \"mleu@C02W454JHTD8\",     \"last_used\": null,     \"links\": {         \"self\": {             \"href\": https://api.bitbucket.org/2.0/repositories/mleu/test/deploy-key/1234\"         }     },     \"repository\": {         \"full_name\": \"mleu/test\",         \"name\": \"test\",         \"type\": \"repository\",         \"uuid\": \"{85d08b4e-571d-44e9-a507-fa476535aa98}\"     },     \"label\": \"mykey\",     \"created_on\": \"2018-08-15T23:50:59.993890+00:00\",     \"key\": \"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDAK/b1cHHDr/TEV1JGQl+WjCwStKG6Bhrv0rFpEsYlyTBm1fzN0VOJJYn4ZOPCPJwqse6fGbXntEs+BbXiptR+++HycVgl65TMR0b5ul5AgwrVdZdT7qjCOCgaSV74/9xlHDK8oqgGnfA7ZoBBU+qpVyaloSjBdJfLtPY/xqj4yHnXKYzrtn/uFc4Kp9Tb7PUg9Io3qohSTGJGVHnsVblq/rToJG7L5xIo0OxK0SJSQ5vuId93ZuFZrCNMXj8JDHZeSEtjJzpRCBEXHxpOPhAcbm4MzULgkFHhAVgp4JbkrT99/wpvZ7r9AdkTg7HGqL3rlaDrEcWfL7Lu6TnhBdq5\",     \"id\": 1234,     \"type\": \"deploy_key\" } ```
     * @param {String} keyId The key ID matching the deploy key.
     * @param {String} repoSlug This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: `{repository UUID}`. 
     * @param {String} workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: `{workspace UUID}`. 
     * @param {module:api/DeploymentsApi~repositoriesWorkspaceRepoSlugDeployKeysKeyIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeployKey}
     */
    repositoriesWorkspaceRepoSlugDeployKeysKeyIdGet(keyId, repoSlug, workspace, callback) {
      let postBody = null;
      // verify the required parameter 'keyId' is set
      if (keyId === undefined || keyId === null) {
        throw new Error("Missing the required parameter 'keyId' when calling repositoriesWorkspaceRepoSlugDeployKeysKeyIdGet");
      }
      // verify the required parameter 'repoSlug' is set
      if (repoSlug === undefined || repoSlug === null) {
        throw new Error("Missing the required parameter 'repoSlug' when calling repositoriesWorkspaceRepoSlugDeployKeysKeyIdGet");
      }
      // verify the required parameter 'workspace' is set
      if (workspace === undefined || workspace === null) {
        throw new Error("Missing the required parameter 'workspace' when calling repositoriesWorkspaceRepoSlugDeployKeysKeyIdGet");
      }

      let pathParams = {
        'key_id': keyId,
        'repo_slug': repoSlug,
        'workspace': workspace
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'oauth2', 'basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeployKey;
      return this.apiClient.callApi(
        '/repositories/{workspace}/{repo_slug}/deploy-keys/{key_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the repositoriesWorkspaceRepoSlugDeployKeysKeyIdPut operation.
     * @callback module:api/DeploymentsApi~repositoriesWorkspaceRepoSlugDeployKeysKeyIdPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeployKey} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a repository deploy key
     * Create a new deploy key in a repository.  The same key needs to be passed in but the comment and label can change.  Example: ``` $ curl -XPUT \\ -H \"Authorization <auth header>\" \\ -H \"Content-type: application/json\" \\ https://api.bitbucket.org/2.0/repositories/mleu/test/deploy-keys/1234 -d \\ '{     \"label\": \"newlabel\",     \"key\": \"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDAK/b1cHHDr/TEV1JGQl+WjCwStKG6Bhrv0rFpEsYlyTBm1fzN0VOJJYn4ZOPCPJwqse6fGbXntEs+BbXiptR+++HycVgl65TMR0b5ul5AgwrVdZdT7qjCOCgaSV74/9xlHDK8oqgGnfA7ZoBBU+qpVyaloSjBdJfLtPY/xqj4yHnXKYzrtn/uFc4Kp9Tb7PUg9Io3qohSTGJGVHnsVblq/rToJG7L5xIo0OxK0SJSQ5vuId93ZuFZrCNMXj8JDHZeSEtjJzpRCBEXHxpOPhAcbm4MzULgkFHhAVgp4JbkrT99/wpvZ7r9AdkTg7HGqL3rlaDrEcWfL7Lu6TnhBdq5 newcomment\", }'  Output: {     \"comment\": \"newcomment\",     \"last_used\": null,     \"links\": {         \"self\": {             \"href\": \"https://api.bitbucket.org/2.0/repositories/mleu/test/deploy-keys/1234\"         }     },     \"repository\": {         \"full_name\": \"mleu/test\",         \"name\": \"test\",         \"type\": \"repository\",         \"uuid\": \"{85d08b4e-571d-44e9-a507-fa476535aa98}\"     },     \"label\": \"newlabel\",     \"created_on\": \"2018-08-15T23:50:59.993890+00:00\",     \"key\": \"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDAK/b1cHHDr/TEV1JGQl+WjCwStKG6Bhrv0rFpEsYlyTBm1fzN0VOJJYn4ZOPCPJwqse6fGbXntEs+BbXiptR+++HycVgl65TMR0b5ul5AgwrVdZdT7qjCOCgaSV74/9xlHDK8oqgGnfA7ZoBBU+qpVyaloSjBdJfLtPY/xqj4yHnXKYzrtn/uFc4Kp9Tb7PUg9Io3qohSTGJGVHnsVblq/rToJG7L5xIo0OxK0SJSQ5vuId93ZuFZrCNMXj8JDHZeSEtjJzpRCBEXHxpOPhAcbm4MzULgkFHhAVgp4JbkrT99/wpvZ7r9AdkTg7HGqL3rlaDrEcWfL7Lu6TnhBdq5\",     \"id\": 1234,     \"type\": \"deploy_key\" } ```
     * @param {String} keyId The key ID matching the deploy key.
     * @param {String} repoSlug This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: `{repository UUID}`. 
     * @param {String} workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: `{workspace UUID}`. 
     * @param {module:api/DeploymentsApi~repositoriesWorkspaceRepoSlugDeployKeysKeyIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeployKey}
     */
    repositoriesWorkspaceRepoSlugDeployKeysKeyIdPut(keyId, repoSlug, workspace, callback) {
      let postBody = null;
      // verify the required parameter 'keyId' is set
      if (keyId === undefined || keyId === null) {
        throw new Error("Missing the required parameter 'keyId' when calling repositoriesWorkspaceRepoSlugDeployKeysKeyIdPut");
      }
      // verify the required parameter 'repoSlug' is set
      if (repoSlug === undefined || repoSlug === null) {
        throw new Error("Missing the required parameter 'repoSlug' when calling repositoriesWorkspaceRepoSlugDeployKeysKeyIdPut");
      }
      // verify the required parameter 'workspace' is set
      if (workspace === undefined || workspace === null) {
        throw new Error("Missing the required parameter 'workspace' when calling repositoriesWorkspaceRepoSlugDeployKeysKeyIdPut");
      }

      let pathParams = {
        'key_id': keyId,
        'repo_slug': repoSlug,
        'workspace': workspace
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'oauth2', 'basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeployKey;
      return this.apiClient.callApi(
        '/repositories/{workspace}/{repo_slug}/deploy-keys/{key_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the repositoriesWorkspaceRepoSlugDeployKeysPost operation.
     * @callback module:api/DeploymentsApi~repositoriesWorkspaceRepoSlugDeployKeysPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeployKey} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a repository deploy key
     * Create a new deploy key in a repository. Note: If authenticating a deploy key with an OAuth consumer, any changes to the OAuth consumer will subsequently invalidate the deploy key.   Example: ``` $ curl -XPOST \\ -H \"Authorization <auth header>\" \\ -H \"Content-type: application/json\" \\ https://api.bitbucket.org/2.0/repositories/mleu/test/deploy-keys -d \\ '{     \"key\": \"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDAK/b1cHHDr/TEV1JGQl+WjCwStKG6Bhrv0rFpEsYlyTBm1fzN0VOJJYn4ZOPCPJwqse6fGbXntEs+BbXiptR+++HycVgl65TMR0b5ul5AgwrVdZdT7qjCOCgaSV74/9xlHDK8oqgGnfA7ZoBBU+qpVyaloSjBdJfLtPY/xqj4yHnXKYzrtn/uFc4Kp9Tb7PUg9Io3qohSTGJGVHnsVblq/rToJG7L5xIo0OxK0SJSQ5vuId93ZuFZrCNMXj8JDHZeSEtjJzpRCBEXHxpOPhAcbm4MzULgkFHhAVgp4JbkrT99/wpvZ7r9AdkTg7HGqL3rlaDrEcWfL7Lu6TnhBdq5 mleu@C02W454JHTD8\",     \"label\": \"mydeploykey\" }'  Output: {     \"id\": 123,     \"key\": \"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDAK/b1cHHDr/TEV1JGQl+WjCwStKG6Bhrv0rFpEsYlyTBm1fzN0VOJJYn4ZOPCPJwqse6fGbXntEs+BbXiptR+++HycVgl65TMR0b5ul5AgwrVdZdT7qjCOCgaSV74/9xlHDK8oqgGnfA7ZoBBU+qpVyaloSjBdJfLtPY/xqj4yHnXKYzrtn/uFc4Kp9Tb7PUg9Io3qohSTGJGVHnsVblq/rToJG7L5xIo0OxK0SJSQ5vuId93ZuFZrCNMXj8JDHZeSEtjJzpRCBEXHxpOPhAcbm4MzULgkFHhAVgp4JbkrT99/wpvZ7r9AdkTg7HGqL3rlaDrEcWfL7Lu6TnhBdq5\",     \"label\": \"mydeploykey\",     \"type\": \"deploy_key\",     \"created_on\": \"2018-08-15T23:50:59.993890+00:00\",     \"repository\": {         \"full_name\": \"mleu/test\",         \"name\": \"test\",         \"type\": \"repository\",         \"uuid\": \"{85d08b4e-571d-44e9-a507-fa476535aa98}\"     },     \"links\":{         \"self\":{             \"href\": \"https://api.bitbucket.org/2.0/repositories/mleu/test/deploy-keys/123\"         }     }     \"last_used\": null,     \"comment\": \"mleu@C02W454JHTD8\" } ```
     * @param {String} repoSlug This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: `{repository UUID}`. 
     * @param {String} workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: `{workspace UUID}`. 
     * @param {module:api/DeploymentsApi~repositoriesWorkspaceRepoSlugDeployKeysPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeployKey}
     */
    repositoriesWorkspaceRepoSlugDeployKeysPost(repoSlug, workspace, callback) {
      let postBody = null;
      // verify the required parameter 'repoSlug' is set
      if (repoSlug === undefined || repoSlug === null) {
        throw new Error("Missing the required parameter 'repoSlug' when calling repositoriesWorkspaceRepoSlugDeployKeysPost");
      }
      // verify the required parameter 'workspace' is set
      if (workspace === undefined || workspace === null) {
        throw new Error("Missing the required parameter 'workspace' when calling repositoriesWorkspaceRepoSlugDeployKeysPost");
      }

      let pathParams = {
        'repo_slug': repoSlug,
        'workspace': workspace
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'oauth2', 'basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeployKey;
      return this.apiClient.callApi(
        '/repositories/{workspace}/{repo_slug}/deploy-keys', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateEnvironmentForRepository operation.
     * @callback module:api/DeploymentsApi~updateEnvironmentForRepositoryCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an environment
     * Update an environment
     * @param {String} workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example `{workspace UUID}`.
     * @param {String} repoSlug The repository.
     * @param {String} environmentUuid The environment UUID.
     * @param {module:api/DeploymentsApi~updateEnvironmentForRepositoryCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateEnvironmentForRepository(workspace, repoSlug, environmentUuid, callback) {
      let postBody = null;
      // verify the required parameter 'workspace' is set
      if (workspace === undefined || workspace === null) {
        throw new Error("Missing the required parameter 'workspace' when calling updateEnvironmentForRepository");
      }
      // verify the required parameter 'repoSlug' is set
      if (repoSlug === undefined || repoSlug === null) {
        throw new Error("Missing the required parameter 'repoSlug' when calling updateEnvironmentForRepository");
      }
      // verify the required parameter 'environmentUuid' is set
      if (environmentUuid === undefined || environmentUuid === null) {
        throw new Error("Missing the required parameter 'environmentUuid' when calling updateEnvironmentForRepository");
      }

      let pathParams = {
        'workspace': workspace,
        'repo_slug': repoSlug,
        'environment_uuid': environmentUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/repositories/{workspace}/{repo_slug}/environments/{environment_uuid}/changes', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the workspacesWorkspaceProjectsProjectKeyDeployKeysGet operation.
     * @callback module:api/DeploymentsApi~workspacesWorkspaceProjectsProjectKeyDeployKeysGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedProjectDeployKeys} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List project deploy keys
     * Returns all deploy keys belonging to a project.  Example: ``` $ curl -H \"Authorization <auth header>\" \\ https://api.bitbucket.org/2.0/workspaces/standard/projects/TEST_PROJECT/deploy-keys  Output: {     \"pagelen\":10,     \"values\":[         {             \"comment\":\"thakseth@C02W454JHTD8\",             \"last_used\":null,             \"links\":{                 \"self\":{                     \"href\":\"https://api.bitbucket.org/2.0/workspaces/standard/projects/TEST_PROJECT/deploy-keys/1234\"                 }             },             \"label\":\"test\",             \"project\":{                 \"links\":{                     \"self\":{                         \"href\":\"https://api.bitbucket.org/2.0/workspaces/standard/projects/TEST_PROJECT\"                     }                 },                 \"type\":\"project\",                 \"name\":\"cooperative standard\",                 \"key\":\"TEST_PROJECT\",                 \"uuid\":\"{3b3e510b-7f2b-414d-a2b7-76c4e405c1c0}\"             },             \"created_on\":\"2021-07-28T21:20:19.491721+00:00\",             \"key\":\"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDX5yfMOEw6HG9jKTYTisbmDTJ4MCUTSVGr5e4OWvY3UuI2A6F8SdzQqa2f5BABA/4g5Sk5awJrYHlNu3EzV1V2I44tR3A4fnZAG71ZKyDPi1wvdO7UYmFgxV/Vd18H9QZFFjICGDM7W0PT2mI0kON/jN3qNWi+GiB/xgaeQKSqynysdysDp8lnnI/8Sh3ikURP9UP83ShRCpAXszOUNaa+UUlcYQYBDLIGowsg51c4PCkC3DNhAMxppkNRKoSOWwyl+oRVXHSDylkiJSBHW3HH4Q6WHieD54kGrjbhWBKdnnxKX7QAAZBDseY+t01N36m6/ljvXSUEcBWtHxBYye0r\",             \"type\":\"project_deploy_key\",             \"id\":1234         }     ],     \"page\":1,     \"size\":1 } ```
     * @param {String} projectKey The project in question. This is the actual `key` assigned to the project. 
     * @param {String} workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: `{workspace UUID}`. 
     * @param {module:api/DeploymentsApi~workspacesWorkspaceProjectsProjectKeyDeployKeysGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedProjectDeployKeys}
     */
    workspacesWorkspaceProjectsProjectKeyDeployKeysGet(projectKey, workspace, callback) {
      let postBody = null;
      // verify the required parameter 'projectKey' is set
      if (projectKey === undefined || projectKey === null) {
        throw new Error("Missing the required parameter 'projectKey' when calling workspacesWorkspaceProjectsProjectKeyDeployKeysGet");
      }
      // verify the required parameter 'workspace' is set
      if (workspace === undefined || workspace === null) {
        throw new Error("Missing the required parameter 'workspace' when calling workspacesWorkspaceProjectsProjectKeyDeployKeysGet");
      }

      let pathParams = {
        'project_key': projectKey,
        'workspace': workspace
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'oauth2', 'basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PaginatedProjectDeployKeys;
      return this.apiClient.callApi(
        '/workspaces/{workspace}/projects/{project_key}/deploy-keys', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the workspacesWorkspaceProjectsProjectKeyDeployKeysKeyIdDelete operation.
     * @callback module:api/DeploymentsApi~workspacesWorkspaceProjectsProjectKeyDeployKeysKeyIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a deploy key from a project
     * This deletes a deploy key from a project.  Example: ``` $ curl -XDELETE \\ -H \"Authorization <auth header>\" \\ https://api.bitbucket.org/2.0/workspaces/jzeng/projects/JZ/deploy-keys/1234 ```
     * @param {String} keyId The key ID matching the project deploy key.
     * @param {String} projectKey The project in question. This is the actual `key` assigned to the project. 
     * @param {String} workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: `{workspace UUID}`. 
     * @param {module:api/DeploymentsApi~workspacesWorkspaceProjectsProjectKeyDeployKeysKeyIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    workspacesWorkspaceProjectsProjectKeyDeployKeysKeyIdDelete(keyId, projectKey, workspace, callback) {
      let postBody = null;
      // verify the required parameter 'keyId' is set
      if (keyId === undefined || keyId === null) {
        throw new Error("Missing the required parameter 'keyId' when calling workspacesWorkspaceProjectsProjectKeyDeployKeysKeyIdDelete");
      }
      // verify the required parameter 'projectKey' is set
      if (projectKey === undefined || projectKey === null) {
        throw new Error("Missing the required parameter 'projectKey' when calling workspacesWorkspaceProjectsProjectKeyDeployKeysKeyIdDelete");
      }
      // verify the required parameter 'workspace' is set
      if (workspace === undefined || workspace === null) {
        throw new Error("Missing the required parameter 'workspace' when calling workspacesWorkspaceProjectsProjectKeyDeployKeysKeyIdDelete");
      }

      let pathParams = {
        'key_id': keyId,
        'project_key': projectKey,
        'workspace': workspace
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'oauth2', 'basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/workspaces/{workspace}/projects/{project_key}/deploy-keys/{key_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the workspacesWorkspaceProjectsProjectKeyDeployKeysKeyIdGet operation.
     * @callback module:api/DeploymentsApi~workspacesWorkspaceProjectsProjectKeyDeployKeysKeyIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProjectDeployKey} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a project deploy key
     * Returns the deploy key belonging to a specific key ID.  Example: ``` $ curl -H \"Authorization <auth header>\" \\ https://api.bitbucket.org/2.0/workspaces/standard/projects/TEST_PROJECT/deploy-keys/1234  Output: {     \"pagelen\":10,     \"values\":[         {             \"comment\":\"thakseth@C02W454JHTD8\",             \"last_used\":null,             \"links\":{                 \"self\":{                     \"href\":\"https://api.bitbucket.org/2.0/workspaces/standard/projects/TEST_PROJECT/deploy-keys/1234\"                 }             },             \"label\":\"test\",             \"project\":{                 \"links\":{                     \"self\":{                         \"href\":\"https://api.bitbucket.org/2.0/workspaces/standard/projects/TEST_PROJECT\"                     }                 },                 \"type\":\"project\",                 \"name\":\"cooperative standard\",                 \"key\":\"TEST_PROJECT\",                 \"uuid\":\"{3b3e510b-7f2b-414d-a2b7-76c4e405c1c0}\"             },             \"created_on\":\"2021-07-28T21:20:19.491721+00:00\",             \"key\":\"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDX5yfMOEw6HG9jKTYTisbmDTJ4MCUTSVGr5e4OWvY3UuI2A6F8SdzQqa2f5BABA/4g5Sk5awJrYHlNu3EzV1V2I44tR3A4fnZAG71ZKyDPi1wvdO7UYmFgxV/Vd18H9QZFFjICGDM7W0PT2mI0kON/jN3qNWi+GiB/xgaeQKSqynysdysDp8lnnI/8Sh3ikURP9UP83ShRCpAXszOUNaa+UUlcYQYBDLIGowsg51c4PCkC3DNhAMxppkNRKoSOWwyl+oRVXHSDylkiJSBHW3HH4Q6WHieD54kGrjbhWBKdnnxKX7QAAZBDseY+t01N36m6/ljvXSUEcBWtHxBYye0r\",             \"type\":\"project_deploy_key\",             \"id\":1234         }     ], } ```
     * @param {String} keyId The key ID matching the project deploy key.
     * @param {String} projectKey The project in question. This is the actual `key` assigned to the project. 
     * @param {String} workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: `{workspace UUID}`. 
     * @param {module:api/DeploymentsApi~workspacesWorkspaceProjectsProjectKeyDeployKeysKeyIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProjectDeployKey}
     */
    workspacesWorkspaceProjectsProjectKeyDeployKeysKeyIdGet(keyId, projectKey, workspace, callback) {
      let postBody = null;
      // verify the required parameter 'keyId' is set
      if (keyId === undefined || keyId === null) {
        throw new Error("Missing the required parameter 'keyId' when calling workspacesWorkspaceProjectsProjectKeyDeployKeysKeyIdGet");
      }
      // verify the required parameter 'projectKey' is set
      if (projectKey === undefined || projectKey === null) {
        throw new Error("Missing the required parameter 'projectKey' when calling workspacesWorkspaceProjectsProjectKeyDeployKeysKeyIdGet");
      }
      // verify the required parameter 'workspace' is set
      if (workspace === undefined || workspace === null) {
        throw new Error("Missing the required parameter 'workspace' when calling workspacesWorkspaceProjectsProjectKeyDeployKeysKeyIdGet");
      }

      let pathParams = {
        'key_id': keyId,
        'project_key': projectKey,
        'workspace': workspace
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'oauth2', 'basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProjectDeployKey;
      return this.apiClient.callApi(
        '/workspaces/{workspace}/projects/{project_key}/deploy-keys/{key_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the workspacesWorkspaceProjectsProjectKeyDeployKeysPost operation.
     * @callback module:api/DeploymentsApi~workspacesWorkspaceProjectsProjectKeyDeployKeysPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProjectDeployKey} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a project deploy key
     * Create a new deploy key in a project.  Example: ``` $ curl -XPOST \\ -H \"Authorization <auth header>\" \\ -H \"Content-type: application/json\" \\ https://api.bitbucket.org/2.0/workspaces/jzeng/projects/JZ/deploy-keys/ -d \\ '{     \"key\": \"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDAK/b1cHHDr/TEV1JGQl+WjCwStKG6Bhrv0rFpEsYlyTBm1fzN0VOJJYn4ZOPCPJwqse6fGbXntEs+BbXiptR+++HycVgl65TMR0b5ul5AgwrVdZdT7qjCOCgaSV74/9xlHDK8oqgGnfA7ZoBBU+qpVyaloSjBdJfLtPY/xqj4yHnXKYzrtn/uFc4Kp9Tb7PUg9Io3qohSTGJGVHnsVblq/rToJG7L5xIo0OxK0SJSQ5vuId93ZuFZrCNMXj8JDHZeSEtjJzpRCBEXHxpOPhAcbm4MzULgkFHhAVgp4JbkrT99/wpvZ7r9AdkTg7HGqL3rlaDrEcWfL7Lu6TnhBdq5 mleu@C02W454JHTD8\",     \"label\": \"mydeploykey\" }'  Output: {     \"comment\": \"mleu@C02W454JHTD8\",     \"last_used\": null,     \"links\": {         \"self\": {             \"href\": \"https://api.bitbucket.org/2.0/workspaces/testadfsa/projects/ASDF/deploy-keys/5/\"         }     },     \"label\": \"myprojectkey\",     \"project\": {         ...     },     \"created_on\": \"2021-08-10T05:28:00.570859+00:00\",     \"key\": \"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDAK/b1cHHDr/TEV1JGQl+WjCwStKG6Bhrv0rFpEsYlyTBm1fzN0VOJJYn4ZOPCPJwqse6fGbXntEs+BbXiptR+++HycVgl65TMR0b5ul5AgwrVdZdT7qjCOCgaSV74/9xlHDK8oqgGnfA7ZoBBU+qpVyaloSjBdJfLtPY/xqj4yHnXKYzrtn/uFc4Kp9Tb7PUg9Io3qohSTGJGVHnsVblq/rToJG7L5xIo0OxK0SJSQ5vuId93ZuFZrCNMXj8JDHZeSEtjJzpRCBEXHxpOPhAcbm4MzULgkFHhAVgp4JbkrT99/wpvZ7r9AdkTg7HGqL3rlaDrEcWfL7Lu6TnhBdq5\",     \"type\": \"project_deploy_key\",     \"id\": 5 } ```
     * @param {String} projectKey The project in question. This is the actual `key` assigned to the project. 
     * @param {String} workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: `{workspace UUID}`. 
     * @param {module:api/DeploymentsApi~workspacesWorkspaceProjectsProjectKeyDeployKeysPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProjectDeployKey}
     */
    workspacesWorkspaceProjectsProjectKeyDeployKeysPost(projectKey, workspace, callback) {
      let postBody = null;
      // verify the required parameter 'projectKey' is set
      if (projectKey === undefined || projectKey === null) {
        throw new Error("Missing the required parameter 'projectKey' when calling workspacesWorkspaceProjectsProjectKeyDeployKeysPost");
      }
      // verify the required parameter 'workspace' is set
      if (workspace === undefined || workspace === null) {
        throw new Error("Missing the required parameter 'workspace' when calling workspacesWorkspaceProjectsProjectKeyDeployKeysPost");
      }

      let pathParams = {
        'project_key': projectKey,
        'workspace': workspace
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'oauth2', 'basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProjectDeployKey;
      return this.apiClient.callApi(
        '/workspaces/{workspace}/projects/{project_key}/deploy-keys', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
