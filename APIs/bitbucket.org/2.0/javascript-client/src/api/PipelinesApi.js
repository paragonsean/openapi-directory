/**
 * Bitbucket API
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@bitbucket.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DeploymentVariable from '../model/DeploymentVariable';
import Error from '../model/Error';
import PaginatedDeploymentVariable from '../model/PaginatedDeploymentVariable';
import PaginatedPipelineCaches from '../model/PaginatedPipelineCaches';
import PaginatedPipelineKnownHosts from '../model/PaginatedPipelineKnownHosts';
import PaginatedPipelineScheduleExecutions from '../model/PaginatedPipelineScheduleExecutions';
import PaginatedPipelineSchedules from '../model/PaginatedPipelineSchedules';
import PaginatedPipelineSteps from '../model/PaginatedPipelineSteps';
import PaginatedPipelineVariables from '../model/PaginatedPipelineVariables';
import PaginatedPipelines from '../model/PaginatedPipelines';
import Pipeline from '../model/Pipeline';
import PipelineBuildNumber from '../model/PipelineBuildNumber';
import PipelineCacheContentUri from '../model/PipelineCacheContentUri';
import PipelineKnownHost from '../model/PipelineKnownHost';
import PipelineSchedule from '../model/PipelineSchedule';
import PipelineSchedulePostRequestBody from '../model/PipelineSchedulePostRequestBody';
import PipelineSchedulePutRequestBody from '../model/PipelineSchedulePutRequestBody';
import PipelineSshKeyPair from '../model/PipelineSshKeyPair';
import PipelineStep from '../model/PipelineStep';
import PipelineVariable from '../model/PipelineVariable';
import PipelinesConfig from '../model/PipelinesConfig';

/**
* Pipelines service.
* @module api/PipelinesApi
* @version 2.0
*/
export default class PipelinesApi {

    /**
    * Constructs a new PipelinesApi. 
    * @alias module:api/PipelinesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createDeploymentVariable operation.
     * @callback module:api/PipelinesApi~createDeploymentVariableCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeploymentVariable} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a variable for an environment
     * Create a deployment environment level variable.
     * @param {String} workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example `{workspace UUID}`.
     * @param {String} repoSlug The repository.
     * @param {String} environmentUuid The environment.
     * @param {module:model/DeploymentVariable} deploymentVariable The variable to create
     * @param {module:api/PipelinesApi~createDeploymentVariableCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeploymentVariable}
     */
    createDeploymentVariable(workspace, repoSlug, environmentUuid, deploymentVariable, callback) {
      let postBody = deploymentVariable;
      // verify the required parameter 'workspace' is set
      if (workspace === undefined || workspace === null) {
        throw new Error("Missing the required parameter 'workspace' when calling createDeploymentVariable");
      }
      // verify the required parameter 'repoSlug' is set
      if (repoSlug === undefined || repoSlug === null) {
        throw new Error("Missing the required parameter 'repoSlug' when calling createDeploymentVariable");
      }
      // verify the required parameter 'environmentUuid' is set
      if (environmentUuid === undefined || environmentUuid === null) {
        throw new Error("Missing the required parameter 'environmentUuid' when calling createDeploymentVariable");
      }
      // verify the required parameter 'deploymentVariable' is set
      if (deploymentVariable === undefined || deploymentVariable === null) {
        throw new Error("Missing the required parameter 'deploymentVariable' when calling createDeploymentVariable");
      }

      let pathParams = {
        'workspace': workspace,
        'repo_slug': repoSlug,
        'environment_uuid': environmentUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeploymentVariable;
      return this.apiClient.callApi(
        '/repositories/{workspace}/{repo_slug}/deployments_config/environments/{environment_uuid}/variables', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createPipelineForRepository operation.
     * @callback module:api/PipelinesApi~createPipelineForRepositoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Pipeline} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Run a pipeline
     * Endpoint to create and initiate a pipeline. There are a couple of different options to initiate a pipeline, where the payload of the request will determine which type of pipeline will be instantiated. # Trigger a Pipeline for a branch One way to trigger pipelines is by specifying the branch for which you want to trigger a pipeline. The specified branch will be used to determine which pipeline definition from the `bitbucket-pipelines.yml` file will be applied to initiate the pipeline. The pipeline will then do a clone of the repository and checkout the latest revision of the specified branch.  ### Example  ``` $ curl -X POST -is -u username:password \\   -H 'Content-Type: application/json' \\  https://api.bitbucket.org/2.0/repositories/jeroendr/meat-demo2/pipelines/ \\   -d '   {     \"target\": {       \"ref_type\": \"branch\",       \"type\": \"pipeline_ref_target\",       \"ref_name\": \"master\"     }   }' ``` # Trigger a Pipeline for a commit on a branch or tag You can initiate a pipeline for a specific commit and in the context of a specified reference (e.g. a branch, tag or bookmark). The specified reference will be used to determine which pipeline definition from the bitbucket-pipelines.yml file will be applied to initiate the pipeline. The pipeline will clone the repository and then do a checkout the specified reference.  The following reference types are supported:  * `branch` * `named_branch` * `bookmark`  * `tag`  ### Example  ``` $ curl -X POST -is -u username:password \\   -H 'Content-Type: application/json' \\   https://api.bitbucket.org/2.0/repositories/jeroendr/meat-demo2/pipelines/ \\   -d '   {     \"target\": {       \"commit\": {         \"type\": \"commit\",         \"hash\": \"ce5b7431602f7cbba007062eeb55225c6e18e956\"       },       \"ref_type\": \"branch\",       \"type\": \"pipeline_ref_target\",       \"ref_name\": \"master\"     }   }' ``` # Trigger a specific pipeline definition for a commit You can trigger a specific pipeline that is defined in your `bitbucket-pipelines.yml` file for a specific commit. In addition to the commit revision, you specify the type and pattern of the selector that identifies the pipeline definition. The resulting pipeline will then clone the repository and checkout the specified revision.  ### Example  ``` $ curl -X POST -is -u username:password \\   -H 'Content-Type: application/json' \\  https://api.bitbucket.org/2.0/repositories/jeroendr/meat-demo2/pipelines/ \\  -d '   {      \"target\": {       \"commit\": {          \"hash\":\"a3c4e02c9a3755eccdc3764e6ea13facdf30f923\",          \"type\":\"commit\"        },         \"selector\": {            \"type\":\"custom\",               \"pattern\":\"Deploy to production\"           },         \"type\":\"pipeline_commit_target\"    }   }' ``` # Trigger a specific pipeline definition for a commit on a branch or tag You can trigger a specific pipeline that is defined in your `bitbucket-pipelines.yml` file for a specific commit in the context of a specified reference. In addition to the commit revision, you specify the type and pattern of the selector that identifies the pipeline definition, as well as the reference information. The resulting pipeline will then clone the repository a checkout the specified reference.  ### Example  ``` $ curl -X POST -is -u username:password \\   -H 'Content-Type: application/json' \\  https://api.bitbucket.org/2.0/repositories/jeroendr/meat-demo2/pipelines/ \\  -d '   {      \"target\": {       \"commit\": {          \"hash\":\"a3c4e02c9a3755eccdc3764e6ea13facdf30f923\",          \"type\":\"commit\"        },        \"selector\": {           \"type\": \"custom\",           \"pattern\": \"Deploy to production\"        },        \"type\": \"pipeline_ref_target\",        \"ref_name\": \"master\",        \"ref_type\": \"branch\"      }   }' ```   # Trigger a custom pipeline with variables In addition to triggering a custom pipeline that is defined in your `bitbucket-pipelines.yml` file as shown in the examples above, you can specify variables that will be available for your build. In the request, provide a list of variables, specifying the following for each variable: key, value, and whether it should be secured or not (this field is optional and defaults to not secured).  ### Example  ``` $ curl -X POST -is -u username:password \\   -H 'Content-Type: application/json' \\  https://api.bitbucket.org/2.0/repositories/{workspace}/{repo_slug}/pipelines/ \\  -d '   {     \"target\": {       \"type\": \"pipeline_ref_target\",       \"ref_type\": \"branch\",       \"ref_name\": \"master\",       \"selector\": {         \"type\": \"custom\",         \"pattern\": \"Deploy to production\"       }     },     \"variables\": [       {         \"key\": \"var1key\",         \"value\": \"var1value\",         \"secured\": true       },       {         \"key\": \"var2key\",         \"value\": \"var2value\"       }     ]   }' ```  # Trigger a pull request pipeline  You can also initiate a pipeline for a specific pull request.  ### Example  ``` $ curl -X POST -is -u username:password \\   -H 'Content-Type: application/json' \\  https://api.bitbucket.org/2.0/repositories/{workspace}/{repo_slug}/pipelines/ \\  -d '   {  \"target\": {       \"type\": \"pipeline_pullrequest_target\",    \"source\": \"pull-request-branch\",       \"destination\": \"master\",       \"destination_commit\": {         \"hash\" : \"9f848b7\"       },       \"commit\": {        \"hash\" : \"1a372fc\"       },       \"pullrequest\" : {        \"id\" : \"3\"       },    \"selector\": {         \"type\": \"pull-requests\",         \"pattern\": \"**\"       }     }   }' ``` 
     * @param {String} workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example `{workspace UUID}`.
     * @param {String} repoSlug The repository.
     * @param {module:model/Pipeline} pipeline The pipeline to initiate.
     * @param {module:api/PipelinesApi~createPipelineForRepositoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Pipeline}
     */
    createPipelineForRepository(workspace, repoSlug, pipeline, callback) {
      let postBody = pipeline;
      // verify the required parameter 'workspace' is set
      if (workspace === undefined || workspace === null) {
        throw new Error("Missing the required parameter 'workspace' when calling createPipelineForRepository");
      }
      // verify the required parameter 'repoSlug' is set
      if (repoSlug === undefined || repoSlug === null) {
        throw new Error("Missing the required parameter 'repoSlug' when calling createPipelineForRepository");
      }
      // verify the required parameter 'pipeline' is set
      if (pipeline === undefined || pipeline === null) {
        throw new Error("Missing the required parameter 'pipeline' when calling createPipelineForRepository");
      }

      let pathParams = {
        'workspace': workspace,
        'repo_slug': repoSlug
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Pipeline;
      return this.apiClient.callApi(
        '/repositories/{workspace}/{repo_slug}/pipelines', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createPipelineVariableForTeam operation.
     * @callback module:api/PipelinesApi~createPipelineVariableForTeamCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PipelineVariable} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a variable for a user
     * Create an account level variable. This endpoint has been deprecated, and you should use the new workspaces endpoint. For more information, see [the announcement](https://developer.atlassian.com/cloud/bitbucket/bitbucket-api-teams-deprecation/).
     * @param {String} username The account.
     * @param {Object} opts Optional parameters
     * @param {module:model/PipelineVariable} [pipelineVariable] The variable to create.
     * @param {module:api/PipelinesApi~createPipelineVariableForTeamCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PipelineVariable}
     */
    createPipelineVariableForTeam(username, opts, callback) {
      opts = opts || {};
      let postBody = opts['pipelineVariable'];
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling createPipelineVariableForTeam");
      }

      let pathParams = {
        'username': username
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PipelineVariable;
      return this.apiClient.callApi(
        '/teams/{username}/pipelines_config/variables', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createPipelineVariableForUser operation.
     * @callback module:api/PipelinesApi~createPipelineVariableForUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PipelineVariable} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a variable for a user
     * Create a user level variable. This endpoint has been deprecated, and you should use the new workspaces endpoint. For more information, see [the announcement](https://developer.atlassian.com/cloud/bitbucket/bitbucket-api-teams-deprecation/).
     * @param {String} selectedUser Either the UUID of the account surrounded by curly-braces, for example `{account UUID}`, OR an Atlassian Account ID.
     * @param {Object} opts Optional parameters
     * @param {module:model/PipelineVariable} [pipelineVariable] The variable to create.
     * @param {module:api/PipelinesApi~createPipelineVariableForUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PipelineVariable}
     */
    createPipelineVariableForUser(selectedUser, opts, callback) {
      opts = opts || {};
      let postBody = opts['pipelineVariable'];
      // verify the required parameter 'selectedUser' is set
      if (selectedUser === undefined || selectedUser === null) {
        throw new Error("Missing the required parameter 'selectedUser' when calling createPipelineVariableForUser");
      }

      let pathParams = {
        'selected_user': selectedUser
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PipelineVariable;
      return this.apiClient.callApi(
        '/users/{selected_user}/pipelines_config/variables', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createPipelineVariableForWorkspace operation.
     * @callback module:api/PipelinesApi~createPipelineVariableForWorkspaceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PipelineVariable} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a variable for a workspace
     * Create a workspace level variable.
     * @param {String} workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example `{workspace UUID}`.
     * @param {Object} opts Optional parameters
     * @param {module:model/PipelineVariable} [pipelineVariable] The variable to create.
     * @param {module:api/PipelinesApi~createPipelineVariableForWorkspaceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PipelineVariable}
     */
    createPipelineVariableForWorkspace(workspace, opts, callback) {
      opts = opts || {};
      let postBody = opts['pipelineVariable'];
      // verify the required parameter 'workspace' is set
      if (workspace === undefined || workspace === null) {
        throw new Error("Missing the required parameter 'workspace' when calling createPipelineVariableForWorkspace");
      }

      let pathParams = {
        'workspace': workspace
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PipelineVariable;
      return this.apiClient.callApi(
        '/workspaces/{workspace}/pipelines-config/variables', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createRepositoryPipelineKnownHost operation.
     * @callback module:api/PipelinesApi~createRepositoryPipelineKnownHostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PipelineKnownHost} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a known host
     * Create a repository level known host.
     * @param {String} workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example `{workspace UUID}`.
     * @param {String} repoSlug The repository.
     * @param {module:model/PipelineKnownHost} pipelineKnownHost The known host to create.
     * @param {module:api/PipelinesApi~createRepositoryPipelineKnownHostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PipelineKnownHost}
     */
    createRepositoryPipelineKnownHost(workspace, repoSlug, pipelineKnownHost, callback) {
      let postBody = pipelineKnownHost;
      // verify the required parameter 'workspace' is set
      if (workspace === undefined || workspace === null) {
        throw new Error("Missing the required parameter 'workspace' when calling createRepositoryPipelineKnownHost");
      }
      // verify the required parameter 'repoSlug' is set
      if (repoSlug === undefined || repoSlug === null) {
        throw new Error("Missing the required parameter 'repoSlug' when calling createRepositoryPipelineKnownHost");
      }
      // verify the required parameter 'pipelineKnownHost' is set
      if (pipelineKnownHost === undefined || pipelineKnownHost === null) {
        throw new Error("Missing the required parameter 'pipelineKnownHost' when calling createRepositoryPipelineKnownHost");
      }

      let pathParams = {
        'workspace': workspace,
        'repo_slug': repoSlug
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PipelineKnownHost;
      return this.apiClient.callApi(
        '/repositories/{workspace}/{repo_slug}/pipelines_config/ssh/known_hosts', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createRepositoryPipelineSchedule operation.
     * @callback module:api/PipelinesApi~createRepositoryPipelineScheduleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PipelineSchedule} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a schedule
     * Create a schedule for the given repository.
     * @param {String} workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example `{workspace UUID}`.
     * @param {String} repoSlug The repository.
     * @param {module:model/PipelineSchedulePostRequestBody} pipelineSchedulePostRequestBody The schedule to create.
     * @param {module:api/PipelinesApi~createRepositoryPipelineScheduleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PipelineSchedule}
     */
    createRepositoryPipelineSchedule(workspace, repoSlug, pipelineSchedulePostRequestBody, callback) {
      let postBody = pipelineSchedulePostRequestBody;
      // verify the required parameter 'workspace' is set
      if (workspace === undefined || workspace === null) {
        throw new Error("Missing the required parameter 'workspace' when calling createRepositoryPipelineSchedule");
      }
      // verify the required parameter 'repoSlug' is set
      if (repoSlug === undefined || repoSlug === null) {
        throw new Error("Missing the required parameter 'repoSlug' when calling createRepositoryPipelineSchedule");
      }
      // verify the required parameter 'pipelineSchedulePostRequestBody' is set
      if (pipelineSchedulePostRequestBody === undefined || pipelineSchedulePostRequestBody === null) {
        throw new Error("Missing the required parameter 'pipelineSchedulePostRequestBody' when calling createRepositoryPipelineSchedule");
      }

      let pathParams = {
        'workspace': workspace,
        'repo_slug': repoSlug
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PipelineSchedule;
      return this.apiClient.callApi(
        '/repositories/{workspace}/{repo_slug}/pipelines_config/schedules', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createRepositoryPipelineVariable operation.
     * @callback module:api/PipelinesApi~createRepositoryPipelineVariableCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PipelineVariable} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a variable for a repository
     * Create a repository level variable.
     * @param {String} workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example `{workspace UUID}`.
     * @param {String} repoSlug The repository.
     * @param {module:model/PipelineVariable} pipelineVariable The variable to create.
     * @param {module:api/PipelinesApi~createRepositoryPipelineVariableCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PipelineVariable}
     */
    createRepositoryPipelineVariable(workspace, repoSlug, pipelineVariable, callback) {
      let postBody = pipelineVariable;
      // verify the required parameter 'workspace' is set
      if (workspace === undefined || workspace === null) {
        throw new Error("Missing the required parameter 'workspace' when calling createRepositoryPipelineVariable");
      }
      // verify the required parameter 'repoSlug' is set
      if (repoSlug === undefined || repoSlug === null) {
        throw new Error("Missing the required parameter 'repoSlug' when calling createRepositoryPipelineVariable");
      }
      // verify the required parameter 'pipelineVariable' is set
      if (pipelineVariable === undefined || pipelineVariable === null) {
        throw new Error("Missing the required parameter 'pipelineVariable' when calling createRepositoryPipelineVariable");
      }

      let pathParams = {
        'workspace': workspace,
        'repo_slug': repoSlug
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PipelineVariable;
      return this.apiClient.callApi(
        '/repositories/{workspace}/{repo_slug}/pipelines_config/variables', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteDeploymentVariable operation.
     * @callback module:api/PipelinesApi~deleteDeploymentVariableCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a variable for an environment
     * Delete a deployment environment level variable.
     * @param {String} workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example `{workspace UUID}`.
     * @param {String} repoSlug The repository.
     * @param {String} environmentUuid The environment.
     * @param {String} variableUuid The UUID of the variable to delete.
     * @param {module:api/PipelinesApi~deleteDeploymentVariableCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteDeploymentVariable(workspace, repoSlug, environmentUuid, variableUuid, callback) {
      let postBody = null;
      // verify the required parameter 'workspace' is set
      if (workspace === undefined || workspace === null) {
        throw new Error("Missing the required parameter 'workspace' when calling deleteDeploymentVariable");
      }
      // verify the required parameter 'repoSlug' is set
      if (repoSlug === undefined || repoSlug === null) {
        throw new Error("Missing the required parameter 'repoSlug' when calling deleteDeploymentVariable");
      }
      // verify the required parameter 'environmentUuid' is set
      if (environmentUuid === undefined || environmentUuid === null) {
        throw new Error("Missing the required parameter 'environmentUuid' when calling deleteDeploymentVariable");
      }
      // verify the required parameter 'variableUuid' is set
      if (variableUuid === undefined || variableUuid === null) {
        throw new Error("Missing the required parameter 'variableUuid' when calling deleteDeploymentVariable");
      }

      let pathParams = {
        'workspace': workspace,
        'repo_slug': repoSlug,
        'environment_uuid': environmentUuid,
        'variable_uuid': variableUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/repositories/{workspace}/{repo_slug}/deployments_config/environments/{environment_uuid}/variables/{variable_uuid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deletePipelineVariableForTeam operation.
     * @callback module:api/PipelinesApi~deletePipelineVariableForTeamCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a variable for a team
     * Delete a team level variable. This endpoint has been deprecated, and you should use the new workspaces endpoint. For more information, see [the announcement](https://developer.atlassian.com/cloud/bitbucket/bitbucket-api-teams-deprecation/).
     * @param {String} username The account.
     * @param {String} variableUuid The UUID of the variable to delete.
     * @param {module:api/PipelinesApi~deletePipelineVariableForTeamCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deletePipelineVariableForTeam(username, variableUuid, callback) {
      let postBody = null;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling deletePipelineVariableForTeam");
      }
      // verify the required parameter 'variableUuid' is set
      if (variableUuid === undefined || variableUuid === null) {
        throw new Error("Missing the required parameter 'variableUuid' when calling deletePipelineVariableForTeam");
      }

      let pathParams = {
        'username': username,
        'variable_uuid': variableUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/teams/{username}/pipelines_config/variables/{variable_uuid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deletePipelineVariableForUser operation.
     * @callback module:api/PipelinesApi~deletePipelineVariableForUserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a variable for a user
     * Delete an account level variable. This endpoint has been deprecated, and you should use the new workspaces endpoint. For more information, see [the announcement](https://developer.atlassian.com/cloud/bitbucket/bitbucket-api-teams-deprecation/).
     * @param {String} selectedUser Either the UUID of the account surrounded by curly-braces, for example `{account UUID}`, OR an Atlassian Account ID.
     * @param {String} variableUuid The UUID of the variable to delete.
     * @param {module:api/PipelinesApi~deletePipelineVariableForUserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deletePipelineVariableForUser(selectedUser, variableUuid, callback) {
      let postBody = null;
      // verify the required parameter 'selectedUser' is set
      if (selectedUser === undefined || selectedUser === null) {
        throw new Error("Missing the required parameter 'selectedUser' when calling deletePipelineVariableForUser");
      }
      // verify the required parameter 'variableUuid' is set
      if (variableUuid === undefined || variableUuid === null) {
        throw new Error("Missing the required parameter 'variableUuid' when calling deletePipelineVariableForUser");
      }

      let pathParams = {
        'selected_user': selectedUser,
        'variable_uuid': variableUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/users/{selected_user}/pipelines_config/variables/{variable_uuid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deletePipelineVariableForWorkspace operation.
     * @callback module:api/PipelinesApi~deletePipelineVariableForWorkspaceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a variable for a workspace
     * Delete a workspace level variable.
     * @param {String} workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example `{workspace UUID}`.
     * @param {String} variableUuid The UUID of the variable to delete.
     * @param {module:api/PipelinesApi~deletePipelineVariableForWorkspaceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deletePipelineVariableForWorkspace(workspace, variableUuid, callback) {
      let postBody = null;
      // verify the required parameter 'workspace' is set
      if (workspace === undefined || workspace === null) {
        throw new Error("Missing the required parameter 'workspace' when calling deletePipelineVariableForWorkspace");
      }
      // verify the required parameter 'variableUuid' is set
      if (variableUuid === undefined || variableUuid === null) {
        throw new Error("Missing the required parameter 'variableUuid' when calling deletePipelineVariableForWorkspace");
      }

      let pathParams = {
        'workspace': workspace,
        'variable_uuid': variableUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/workspaces/{workspace}/pipelines-config/variables/{variable_uuid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteRepositoryPipelineCache operation.
     * @callback module:api/PipelinesApi~deleteRepositoryPipelineCacheCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a cache
     * Delete a repository cache.
     * @param {String} workspace The account.
     * @param {String} repoSlug The repository.
     * @param {String} cacheUuid The UUID of the cache to delete.
     * @param {module:api/PipelinesApi~deleteRepositoryPipelineCacheCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteRepositoryPipelineCache(workspace, repoSlug, cacheUuid, callback) {
      let postBody = null;
      // verify the required parameter 'workspace' is set
      if (workspace === undefined || workspace === null) {
        throw new Error("Missing the required parameter 'workspace' when calling deleteRepositoryPipelineCache");
      }
      // verify the required parameter 'repoSlug' is set
      if (repoSlug === undefined || repoSlug === null) {
        throw new Error("Missing the required parameter 'repoSlug' when calling deleteRepositoryPipelineCache");
      }
      // verify the required parameter 'cacheUuid' is set
      if (cacheUuid === undefined || cacheUuid === null) {
        throw new Error("Missing the required parameter 'cacheUuid' when calling deleteRepositoryPipelineCache");
      }

      let pathParams = {
        'workspace': workspace,
        'repo_slug': repoSlug,
        'cache_uuid': cacheUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/repositories/{workspace}/{repo_slug}/pipelines-config/caches/{cache_uuid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteRepositoryPipelineCaches operation.
     * @callback module:api/PipelinesApi~deleteRepositoryPipelineCachesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete caches
     * Delete repository cache versions by name.
     * @param {String} workspace The account.
     * @param {String} repoSlug The repository.
     * @param {String} name The cache name.
     * @param {module:api/PipelinesApi~deleteRepositoryPipelineCachesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteRepositoryPipelineCaches(workspace, repoSlug, name, callback) {
      let postBody = null;
      // verify the required parameter 'workspace' is set
      if (workspace === undefined || workspace === null) {
        throw new Error("Missing the required parameter 'workspace' when calling deleteRepositoryPipelineCaches");
      }
      // verify the required parameter 'repoSlug' is set
      if (repoSlug === undefined || repoSlug === null) {
        throw new Error("Missing the required parameter 'repoSlug' when calling deleteRepositoryPipelineCaches");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling deleteRepositoryPipelineCaches");
      }

      let pathParams = {
        'workspace': workspace,
        'repo_slug': repoSlug
      };
      let queryParams = {
        'name': name
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/repositories/{workspace}/{repo_slug}/pipelines-config/caches', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteRepositoryPipelineKeyPair operation.
     * @callback module:api/PipelinesApi~deleteRepositoryPipelineKeyPairCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete SSH key pair
     * Delete the repository SSH key pair.
     * @param {String} workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example `{workspace UUID}`.
     * @param {String} repoSlug The repository.
     * @param {module:api/PipelinesApi~deleteRepositoryPipelineKeyPairCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteRepositoryPipelineKeyPair(workspace, repoSlug, callback) {
      let postBody = null;
      // verify the required parameter 'workspace' is set
      if (workspace === undefined || workspace === null) {
        throw new Error("Missing the required parameter 'workspace' when calling deleteRepositoryPipelineKeyPair");
      }
      // verify the required parameter 'repoSlug' is set
      if (repoSlug === undefined || repoSlug === null) {
        throw new Error("Missing the required parameter 'repoSlug' when calling deleteRepositoryPipelineKeyPair");
      }

      let pathParams = {
        'workspace': workspace,
        'repo_slug': repoSlug
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/repositories/{workspace}/{repo_slug}/pipelines_config/ssh/key_pair', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteRepositoryPipelineKnownHost operation.
     * @callback module:api/PipelinesApi~deleteRepositoryPipelineKnownHostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a known host
     * Delete a repository level known host.
     * @param {String} workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example `{workspace UUID}`.
     * @param {String} repoSlug The repository.
     * @param {String} knownHostUuid The UUID of the known host to delete.
     * @param {module:api/PipelinesApi~deleteRepositoryPipelineKnownHostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteRepositoryPipelineKnownHost(workspace, repoSlug, knownHostUuid, callback) {
      let postBody = null;
      // verify the required parameter 'workspace' is set
      if (workspace === undefined || workspace === null) {
        throw new Error("Missing the required parameter 'workspace' when calling deleteRepositoryPipelineKnownHost");
      }
      // verify the required parameter 'repoSlug' is set
      if (repoSlug === undefined || repoSlug === null) {
        throw new Error("Missing the required parameter 'repoSlug' when calling deleteRepositoryPipelineKnownHost");
      }
      // verify the required parameter 'knownHostUuid' is set
      if (knownHostUuid === undefined || knownHostUuid === null) {
        throw new Error("Missing the required parameter 'knownHostUuid' when calling deleteRepositoryPipelineKnownHost");
      }

      let pathParams = {
        'workspace': workspace,
        'repo_slug': repoSlug,
        'known_host_uuid': knownHostUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/repositories/{workspace}/{repo_slug}/pipelines_config/ssh/known_hosts/{known_host_uuid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteRepositoryPipelineSchedule operation.
     * @callback module:api/PipelinesApi~deleteRepositoryPipelineScheduleCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a schedule
     * Delete a schedule.
     * @param {String} workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example `{workspace UUID}`.
     * @param {String} repoSlug The repository.
     * @param {String} scheduleUuid The uuid of the schedule.
     * @param {module:api/PipelinesApi~deleteRepositoryPipelineScheduleCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteRepositoryPipelineSchedule(workspace, repoSlug, scheduleUuid, callback) {
      let postBody = null;
      // verify the required parameter 'workspace' is set
      if (workspace === undefined || workspace === null) {
        throw new Error("Missing the required parameter 'workspace' when calling deleteRepositoryPipelineSchedule");
      }
      // verify the required parameter 'repoSlug' is set
      if (repoSlug === undefined || repoSlug === null) {
        throw new Error("Missing the required parameter 'repoSlug' when calling deleteRepositoryPipelineSchedule");
      }
      // verify the required parameter 'scheduleUuid' is set
      if (scheduleUuid === undefined || scheduleUuid === null) {
        throw new Error("Missing the required parameter 'scheduleUuid' when calling deleteRepositoryPipelineSchedule");
      }

      let pathParams = {
        'workspace': workspace,
        'repo_slug': repoSlug,
        'schedule_uuid': scheduleUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/repositories/{workspace}/{repo_slug}/pipelines_config/schedules/{schedule_uuid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteRepositoryPipelineVariable operation.
     * @callback module:api/PipelinesApi~deleteRepositoryPipelineVariableCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a variable for a repository
     * Delete a repository level variable.
     * @param {String} workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example `{workspace UUID}`.
     * @param {String} repoSlug The repository.
     * @param {String} variableUuid The UUID of the variable to delete.
     * @param {module:api/PipelinesApi~deleteRepositoryPipelineVariableCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteRepositoryPipelineVariable(workspace, repoSlug, variableUuid, callback) {
      let postBody = null;
      // verify the required parameter 'workspace' is set
      if (workspace === undefined || workspace === null) {
        throw new Error("Missing the required parameter 'workspace' when calling deleteRepositoryPipelineVariable");
      }
      // verify the required parameter 'repoSlug' is set
      if (repoSlug === undefined || repoSlug === null) {
        throw new Error("Missing the required parameter 'repoSlug' when calling deleteRepositoryPipelineVariable");
      }
      // verify the required parameter 'variableUuid' is set
      if (variableUuid === undefined || variableUuid === null) {
        throw new Error("Missing the required parameter 'variableUuid' when calling deleteRepositoryPipelineVariable");
      }

      let pathParams = {
        'workspace': workspace,
        'repo_slug': repoSlug,
        'variable_uuid': variableUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/repositories/{workspace}/{repo_slug}/pipelines_config/variables/{variable_uuid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDeploymentVariables operation.
     * @callback module:api/PipelinesApi~getDeploymentVariablesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedDeploymentVariable} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List variables for an environment
     * Find deployment environment level variables.
     * @param {String} workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example `{workspace UUID}`.
     * @param {String} repoSlug The repository.
     * @param {String} environmentUuid The environment.
     * @param {module:api/PipelinesApi~getDeploymentVariablesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedDeploymentVariable}
     */
    getDeploymentVariables(workspace, repoSlug, environmentUuid, callback) {
      let postBody = null;
      // verify the required parameter 'workspace' is set
      if (workspace === undefined || workspace === null) {
        throw new Error("Missing the required parameter 'workspace' when calling getDeploymentVariables");
      }
      // verify the required parameter 'repoSlug' is set
      if (repoSlug === undefined || repoSlug === null) {
        throw new Error("Missing the required parameter 'repoSlug' when calling getDeploymentVariables");
      }
      // verify the required parameter 'environmentUuid' is set
      if (environmentUuid === undefined || environmentUuid === null) {
        throw new Error("Missing the required parameter 'environmentUuid' when calling getDeploymentVariables");
      }

      let pathParams = {
        'workspace': workspace,
        'repo_slug': repoSlug,
        'environment_uuid': environmentUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PaginatedDeploymentVariable;
      return this.apiClient.callApi(
        '/repositories/{workspace}/{repo_slug}/deployments_config/environments/{environment_uuid}/variables', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOIDCConfiguration operation.
     * @callback module:api/PipelinesApi~getOIDCConfigurationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get OpenID configuration for OIDC in Pipelines
     * This is part of OpenID Connect for Pipelines, see https://support.atlassian.com/bitbucket-cloud/docs/integrate-pipelines-with-resource-servers-using-oidc/
     * @param {String} workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example `{workspace UUID}`.
     * @param {module:api/PipelinesApi~getOIDCConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getOIDCConfiguration(workspace, callback) {
      let postBody = null;
      // verify the required parameter 'workspace' is set
      if (workspace === undefined || workspace === null) {
        throw new Error("Missing the required parameter 'workspace' when calling getOIDCConfiguration");
      }

      let pathParams = {
        'workspace': workspace
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/workspaces/{workspace}/pipelines-config/identity/oidc/.well-known/openid-configuration', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOIDCKeys operation.
     * @callback module:api/PipelinesApi~getOIDCKeysCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get keys for OIDC in Pipelines
     * This is part of OpenID Connect for Pipelines, see https://support.atlassian.com/bitbucket-cloud/docs/integrate-pipelines-with-resource-servers-using-oidc/
     * @param {String} workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example `{workspace UUID}`.
     * @param {module:api/PipelinesApi~getOIDCKeysCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getOIDCKeys(workspace, callback) {
      let postBody = null;
      // verify the required parameter 'workspace' is set
      if (workspace === undefined || workspace === null) {
        throw new Error("Missing the required parameter 'workspace' when calling getOIDCKeys");
      }

      let pathParams = {
        'workspace': workspace
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/workspaces/{workspace}/pipelines-config/identity/oidc/keys.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPipelineContainerLog operation.
     * @callback module:api/PipelinesApi~getPipelineContainerLogCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the logs for the build container or a service container for a given step of a pipeline.
     * Retrieve the log file for a build container or service container.  This endpoint supports (and encourages!) the use of [HTTP Range requests](https://tools.ietf.org/html/rfc7233) to deal with potentially very large log files.
     * @param {String} workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example `{workspace UUID}`.
     * @param {String} repoSlug The repository.
     * @param {String} pipelineUuid The UUID of the pipeline.
     * @param {String} stepUuid The UUID of the step.
     * @param {String} logUuid For the main build container specify the step UUID; for a service container specify the service container UUID
     * @param {module:api/PipelinesApi~getPipelineContainerLogCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getPipelineContainerLog(workspace, repoSlug, pipelineUuid, stepUuid, logUuid, callback) {
      let postBody = null;
      // verify the required parameter 'workspace' is set
      if (workspace === undefined || workspace === null) {
        throw new Error("Missing the required parameter 'workspace' when calling getPipelineContainerLog");
      }
      // verify the required parameter 'repoSlug' is set
      if (repoSlug === undefined || repoSlug === null) {
        throw new Error("Missing the required parameter 'repoSlug' when calling getPipelineContainerLog");
      }
      // verify the required parameter 'pipelineUuid' is set
      if (pipelineUuid === undefined || pipelineUuid === null) {
        throw new Error("Missing the required parameter 'pipelineUuid' when calling getPipelineContainerLog");
      }
      // verify the required parameter 'stepUuid' is set
      if (stepUuid === undefined || stepUuid === null) {
        throw new Error("Missing the required parameter 'stepUuid' when calling getPipelineContainerLog");
      }
      // verify the required parameter 'logUuid' is set
      if (logUuid === undefined || logUuid === null) {
        throw new Error("Missing the required parameter 'logUuid' when calling getPipelineContainerLog");
      }

      let pathParams = {
        'workspace': workspace,
        'repo_slug': repoSlug,
        'pipeline_uuid': pipelineUuid,
        'step_uuid': stepUuid,
        'log_uuid': logUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/octet-stream'];
      let returnType = null;
      return this.apiClient.callApi(
        '/repositories/{workspace}/{repo_slug}/pipelines/{pipeline_uuid}/steps/{step_uuid}/logs/{log_uuid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPipelineForRepository operation.
     * @callback module:api/PipelinesApi~getPipelineForRepositoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Pipeline} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a pipeline
     * Retrieve a specified pipeline
     * @param {String} workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example `{workspace UUID}`.
     * @param {String} repoSlug The repository.
     * @param {String} pipelineUuid The pipeline UUID.
     * @param {module:api/PipelinesApi~getPipelineForRepositoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Pipeline}
     */
    getPipelineForRepository(workspace, repoSlug, pipelineUuid, callback) {
      let postBody = null;
      // verify the required parameter 'workspace' is set
      if (workspace === undefined || workspace === null) {
        throw new Error("Missing the required parameter 'workspace' when calling getPipelineForRepository");
      }
      // verify the required parameter 'repoSlug' is set
      if (repoSlug === undefined || repoSlug === null) {
        throw new Error("Missing the required parameter 'repoSlug' when calling getPipelineForRepository");
      }
      // verify the required parameter 'pipelineUuid' is set
      if (pipelineUuid === undefined || pipelineUuid === null) {
        throw new Error("Missing the required parameter 'pipelineUuid' when calling getPipelineForRepository");
      }

      let pathParams = {
        'workspace': workspace,
        'repo_slug': repoSlug,
        'pipeline_uuid': pipelineUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Pipeline;
      return this.apiClient.callApi(
        '/repositories/{workspace}/{repo_slug}/pipelines/{pipeline_uuid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPipelineStepForRepository operation.
     * @callback module:api/PipelinesApi~getPipelineStepForRepositoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PipelineStep} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a step of a pipeline
     * Retrieve a given step of a pipeline.
     * @param {String} workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example `{workspace UUID}`.
     * @param {String} repoSlug The repository.
     * @param {String} pipelineUuid The UUID of the pipeline.
     * @param {String} stepUuid The UUID of the step.
     * @param {module:api/PipelinesApi~getPipelineStepForRepositoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PipelineStep}
     */
    getPipelineStepForRepository(workspace, repoSlug, pipelineUuid, stepUuid, callback) {
      let postBody = null;
      // verify the required parameter 'workspace' is set
      if (workspace === undefined || workspace === null) {
        throw new Error("Missing the required parameter 'workspace' when calling getPipelineStepForRepository");
      }
      // verify the required parameter 'repoSlug' is set
      if (repoSlug === undefined || repoSlug === null) {
        throw new Error("Missing the required parameter 'repoSlug' when calling getPipelineStepForRepository");
      }
      // verify the required parameter 'pipelineUuid' is set
      if (pipelineUuid === undefined || pipelineUuid === null) {
        throw new Error("Missing the required parameter 'pipelineUuid' when calling getPipelineStepForRepository");
      }
      // verify the required parameter 'stepUuid' is set
      if (stepUuid === undefined || stepUuid === null) {
        throw new Error("Missing the required parameter 'stepUuid' when calling getPipelineStepForRepository");
      }

      let pathParams = {
        'workspace': workspace,
        'repo_slug': repoSlug,
        'pipeline_uuid': pipelineUuid,
        'step_uuid': stepUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PipelineStep;
      return this.apiClient.callApi(
        '/repositories/{workspace}/{repo_slug}/pipelines/{pipeline_uuid}/steps/{step_uuid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPipelineStepLogForRepository operation.
     * @callback module:api/PipelinesApi~getPipelineStepLogForRepositoryCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get log file for a step
     * Retrieve the log file for a given step of a pipeline.  This endpoint supports (and encourages!) the use of [HTTP Range requests](https://tools.ietf.org/html/rfc7233) to deal with potentially very large log files.
     * @param {String} workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example `{workspace UUID}`.
     * @param {String} repoSlug The repository.
     * @param {String} pipelineUuid The UUID of the pipeline.
     * @param {String} stepUuid The UUID of the step.
     * @param {module:api/PipelinesApi~getPipelineStepLogForRepositoryCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getPipelineStepLogForRepository(workspace, repoSlug, pipelineUuid, stepUuid, callback) {
      let postBody = null;
      // verify the required parameter 'workspace' is set
      if (workspace === undefined || workspace === null) {
        throw new Error("Missing the required parameter 'workspace' when calling getPipelineStepLogForRepository");
      }
      // verify the required parameter 'repoSlug' is set
      if (repoSlug === undefined || repoSlug === null) {
        throw new Error("Missing the required parameter 'repoSlug' when calling getPipelineStepLogForRepository");
      }
      // verify the required parameter 'pipelineUuid' is set
      if (pipelineUuid === undefined || pipelineUuid === null) {
        throw new Error("Missing the required parameter 'pipelineUuid' when calling getPipelineStepLogForRepository");
      }
      // verify the required parameter 'stepUuid' is set
      if (stepUuid === undefined || stepUuid === null) {
        throw new Error("Missing the required parameter 'stepUuid' when calling getPipelineStepLogForRepository");
      }

      let pathParams = {
        'workspace': workspace,
        'repo_slug': repoSlug,
        'pipeline_uuid': pipelineUuid,
        'step_uuid': stepUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/octet-stream'];
      let returnType = null;
      return this.apiClient.callApi(
        '/repositories/{workspace}/{repo_slug}/pipelines/{pipeline_uuid}/steps/{step_uuid}/log', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPipelineStepsForRepository operation.
     * @callback module:api/PipelinesApi~getPipelineStepsForRepositoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedPipelineSteps} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List steps for a pipeline
     * Find steps for the given pipeline.
     * @param {String} workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example `{workspace UUID}`.
     * @param {String} repoSlug The repository.
     * @param {String} pipelineUuid The UUID of the pipeline.
     * @param {module:api/PipelinesApi~getPipelineStepsForRepositoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedPipelineSteps}
     */
    getPipelineStepsForRepository(workspace, repoSlug, pipelineUuid, callback) {
      let postBody = null;
      // verify the required parameter 'workspace' is set
      if (workspace === undefined || workspace === null) {
        throw new Error("Missing the required parameter 'workspace' when calling getPipelineStepsForRepository");
      }
      // verify the required parameter 'repoSlug' is set
      if (repoSlug === undefined || repoSlug === null) {
        throw new Error("Missing the required parameter 'repoSlug' when calling getPipelineStepsForRepository");
      }
      // verify the required parameter 'pipelineUuid' is set
      if (pipelineUuid === undefined || pipelineUuid === null) {
        throw new Error("Missing the required parameter 'pipelineUuid' when calling getPipelineStepsForRepository");
      }

      let pathParams = {
        'workspace': workspace,
        'repo_slug': repoSlug,
        'pipeline_uuid': pipelineUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PaginatedPipelineSteps;
      return this.apiClient.callApi(
        '/repositories/{workspace}/{repo_slug}/pipelines/{pipeline_uuid}/steps', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPipelineTestReportTestCaseReasons operation.
     * @callback module:api/PipelinesApi~getPipelineTestReportTestCaseReasonsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get test case reasons (output) for a given test case in a step of a pipeline.
     * @param {String} workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example `{workspace UUID}`.
     * @param {String} repoSlug The repository.
     * @param {String} pipelineUuid The UUID of the pipeline.
     * @param {String} stepUuid The UUID of the step.
     * @param {String} testCaseUuid The UUID of the test case.
     * @param {module:api/PipelinesApi~getPipelineTestReportTestCaseReasonsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getPipelineTestReportTestCaseReasons(workspace, repoSlug, pipelineUuid, stepUuid, testCaseUuid, callback) {
      let postBody = null;
      // verify the required parameter 'workspace' is set
      if (workspace === undefined || workspace === null) {
        throw new Error("Missing the required parameter 'workspace' when calling getPipelineTestReportTestCaseReasons");
      }
      // verify the required parameter 'repoSlug' is set
      if (repoSlug === undefined || repoSlug === null) {
        throw new Error("Missing the required parameter 'repoSlug' when calling getPipelineTestReportTestCaseReasons");
      }
      // verify the required parameter 'pipelineUuid' is set
      if (pipelineUuid === undefined || pipelineUuid === null) {
        throw new Error("Missing the required parameter 'pipelineUuid' when calling getPipelineTestReportTestCaseReasons");
      }
      // verify the required parameter 'stepUuid' is set
      if (stepUuid === undefined || stepUuid === null) {
        throw new Error("Missing the required parameter 'stepUuid' when calling getPipelineTestReportTestCaseReasons");
      }
      // verify the required parameter 'testCaseUuid' is set
      if (testCaseUuid === undefined || testCaseUuid === null) {
        throw new Error("Missing the required parameter 'testCaseUuid' when calling getPipelineTestReportTestCaseReasons");
      }

      let pathParams = {
        'workspace': workspace,
        'repo_slug': repoSlug,
        'pipeline_uuid': pipelineUuid,
        'step_uuid': stepUuid,
        'test_case_uuid': testCaseUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/repositories/{workspace}/{repo_slug}/pipelines/{pipeline_uuid}/steps/{step_uuid}/test_reports/test_cases/{test_case_uuid}/test_case_reasons', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPipelineTestReportTestCases operation.
     * @callback module:api/PipelinesApi~getPipelineTestReportTestCasesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get test cases for a given step of a pipeline.
     * @param {String} workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example `{workspace UUID}`.
     * @param {String} repoSlug The repository.
     * @param {String} pipelineUuid The UUID of the pipeline.
     * @param {String} stepUuid The UUID of the step.
     * @param {module:api/PipelinesApi~getPipelineTestReportTestCasesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getPipelineTestReportTestCases(workspace, repoSlug, pipelineUuid, stepUuid, callback) {
      let postBody = null;
      // verify the required parameter 'workspace' is set
      if (workspace === undefined || workspace === null) {
        throw new Error("Missing the required parameter 'workspace' when calling getPipelineTestReportTestCases");
      }
      // verify the required parameter 'repoSlug' is set
      if (repoSlug === undefined || repoSlug === null) {
        throw new Error("Missing the required parameter 'repoSlug' when calling getPipelineTestReportTestCases");
      }
      // verify the required parameter 'pipelineUuid' is set
      if (pipelineUuid === undefined || pipelineUuid === null) {
        throw new Error("Missing the required parameter 'pipelineUuid' when calling getPipelineTestReportTestCases");
      }
      // verify the required parameter 'stepUuid' is set
      if (stepUuid === undefined || stepUuid === null) {
        throw new Error("Missing the required parameter 'stepUuid' when calling getPipelineTestReportTestCases");
      }

      let pathParams = {
        'workspace': workspace,
        'repo_slug': repoSlug,
        'pipeline_uuid': pipelineUuid,
        'step_uuid': stepUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/repositories/{workspace}/{repo_slug}/pipelines/{pipeline_uuid}/steps/{step_uuid}/test_reports/test_cases', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPipelineTestReports operation.
     * @callback module:api/PipelinesApi~getPipelineTestReportsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a summary of test reports for a given step of a pipeline.
     * @param {String} workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example `{workspace UUID}`.
     * @param {String} repoSlug The repository.
     * @param {String} pipelineUuid The UUID of the pipeline.
     * @param {String} stepUuid The UUID of the step.
     * @param {module:api/PipelinesApi~getPipelineTestReportsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getPipelineTestReports(workspace, repoSlug, pipelineUuid, stepUuid, callback) {
      let postBody = null;
      // verify the required parameter 'workspace' is set
      if (workspace === undefined || workspace === null) {
        throw new Error("Missing the required parameter 'workspace' when calling getPipelineTestReports");
      }
      // verify the required parameter 'repoSlug' is set
      if (repoSlug === undefined || repoSlug === null) {
        throw new Error("Missing the required parameter 'repoSlug' when calling getPipelineTestReports");
      }
      // verify the required parameter 'pipelineUuid' is set
      if (pipelineUuid === undefined || pipelineUuid === null) {
        throw new Error("Missing the required parameter 'pipelineUuid' when calling getPipelineTestReports");
      }
      // verify the required parameter 'stepUuid' is set
      if (stepUuid === undefined || stepUuid === null) {
        throw new Error("Missing the required parameter 'stepUuid' when calling getPipelineTestReports");
      }

      let pathParams = {
        'workspace': workspace,
        'repo_slug': repoSlug,
        'pipeline_uuid': pipelineUuid,
        'step_uuid': stepUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/repositories/{workspace}/{repo_slug}/pipelines/{pipeline_uuid}/steps/{step_uuid}/test_reports', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPipelineVariableForTeam operation.
     * @callback module:api/PipelinesApi~getPipelineVariableForTeamCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PipelineVariable} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a variable for a team
     * Retrieve a team level variable. This endpoint has been deprecated, and you should use the new workspaces endpoint. For more information, see [the announcement](https://developer.atlassian.com/cloud/bitbucket/bitbucket-api-teams-deprecation/).
     * @param {String} username The account.
     * @param {String} variableUuid The UUID of the variable to retrieve.
     * @param {module:api/PipelinesApi~getPipelineVariableForTeamCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PipelineVariable}
     */
    getPipelineVariableForTeam(username, variableUuid, callback) {
      let postBody = null;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling getPipelineVariableForTeam");
      }
      // verify the required parameter 'variableUuid' is set
      if (variableUuid === undefined || variableUuid === null) {
        throw new Error("Missing the required parameter 'variableUuid' when calling getPipelineVariableForTeam");
      }

      let pathParams = {
        'username': username,
        'variable_uuid': variableUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PipelineVariable;
      return this.apiClient.callApi(
        '/teams/{username}/pipelines_config/variables/{variable_uuid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPipelineVariableForUser operation.
     * @callback module:api/PipelinesApi~getPipelineVariableForUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PipelineVariable} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a variable for a user
     * Retrieve a user level variable. This endpoint has been deprecated, and you should use the new workspaces endpoint. For more information, see [the announcement](https://developer.atlassian.com/cloud/bitbucket/bitbucket-api-teams-deprecation/).
     * @param {String} selectedUser Either the UUID of the account surrounded by curly-braces, for example `{account UUID}`, OR an Atlassian Account ID.
     * @param {String} variableUuid The UUID of the variable to retrieve.
     * @param {module:api/PipelinesApi~getPipelineVariableForUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PipelineVariable}
     */
    getPipelineVariableForUser(selectedUser, variableUuid, callback) {
      let postBody = null;
      // verify the required parameter 'selectedUser' is set
      if (selectedUser === undefined || selectedUser === null) {
        throw new Error("Missing the required parameter 'selectedUser' when calling getPipelineVariableForUser");
      }
      // verify the required parameter 'variableUuid' is set
      if (variableUuid === undefined || variableUuid === null) {
        throw new Error("Missing the required parameter 'variableUuid' when calling getPipelineVariableForUser");
      }

      let pathParams = {
        'selected_user': selectedUser,
        'variable_uuid': variableUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PipelineVariable;
      return this.apiClient.callApi(
        '/users/{selected_user}/pipelines_config/variables/{variable_uuid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPipelineVariableForWorkspace operation.
     * @callback module:api/PipelinesApi~getPipelineVariableForWorkspaceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PipelineVariable} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get variable for a workspace
     * Retrieve a workspace level variable.
     * @param {String} workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example `{workspace UUID}`.
     * @param {String} variableUuid The UUID of the variable to retrieve.
     * @param {module:api/PipelinesApi~getPipelineVariableForWorkspaceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PipelineVariable}
     */
    getPipelineVariableForWorkspace(workspace, variableUuid, callback) {
      let postBody = null;
      // verify the required parameter 'workspace' is set
      if (workspace === undefined || workspace === null) {
        throw new Error("Missing the required parameter 'workspace' when calling getPipelineVariableForWorkspace");
      }
      // verify the required parameter 'variableUuid' is set
      if (variableUuid === undefined || variableUuid === null) {
        throw new Error("Missing the required parameter 'variableUuid' when calling getPipelineVariableForWorkspace");
      }

      let pathParams = {
        'workspace': workspace,
        'variable_uuid': variableUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PipelineVariable;
      return this.apiClient.callApi(
        '/workspaces/{workspace}/pipelines-config/variables/{variable_uuid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPipelineVariablesForTeam operation.
     * @callback module:api/PipelinesApi~getPipelineVariablesForTeamCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedPipelineVariables} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List variables for an account
     * Find account level variables. This endpoint has been deprecated, and you should use the new workspaces endpoint. For more information, see [the announcement](https://developer.atlassian.com/cloud/bitbucket/bitbucket-api-teams-deprecation/).
     * @param {String} username The account.
     * @param {module:api/PipelinesApi~getPipelineVariablesForTeamCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedPipelineVariables}
     */
    getPipelineVariablesForTeam(username, callback) {
      let postBody = null;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling getPipelineVariablesForTeam");
      }

      let pathParams = {
        'username': username
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PaginatedPipelineVariables;
      return this.apiClient.callApi(
        '/teams/{username}/pipelines_config/variables', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPipelineVariablesForUser operation.
     * @callback module:api/PipelinesApi~getPipelineVariablesForUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedPipelineVariables} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List variables for a user
     * Find user level variables. This endpoint has been deprecated, and you should use the new workspaces endpoint. For more information, see [the announcement](https://developer.atlassian.com/cloud/bitbucket/bitbucket-api-teams-deprecation/).
     * @param {String} selectedUser Either the UUID of the account surrounded by curly-braces, for example `{account UUID}`, OR an Atlassian Account ID.
     * @param {module:api/PipelinesApi~getPipelineVariablesForUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedPipelineVariables}
     */
    getPipelineVariablesForUser(selectedUser, callback) {
      let postBody = null;
      // verify the required parameter 'selectedUser' is set
      if (selectedUser === undefined || selectedUser === null) {
        throw new Error("Missing the required parameter 'selectedUser' when calling getPipelineVariablesForUser");
      }

      let pathParams = {
        'selected_user': selectedUser
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PaginatedPipelineVariables;
      return this.apiClient.callApi(
        '/users/{selected_user}/pipelines_config/variables', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPipelineVariablesForWorkspace operation.
     * @callback module:api/PipelinesApi~getPipelineVariablesForWorkspaceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedPipelineVariables} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List variables for a workspace
     * Find workspace level variables.
     * @param {String} workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example `{workspace UUID}`.
     * @param {module:api/PipelinesApi~getPipelineVariablesForWorkspaceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedPipelineVariables}
     */
    getPipelineVariablesForWorkspace(workspace, callback) {
      let postBody = null;
      // verify the required parameter 'workspace' is set
      if (workspace === undefined || workspace === null) {
        throw new Error("Missing the required parameter 'workspace' when calling getPipelineVariablesForWorkspace");
      }

      let pathParams = {
        'workspace': workspace
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PaginatedPipelineVariables;
      return this.apiClient.callApi(
        '/workspaces/{workspace}/pipelines-config/variables', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPipelinesForRepository operation.
     * @callback module:api/PipelinesApi~getPipelinesForRepositoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedPipelines} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List pipelines
     * Find pipelines
     * @param {String} workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example `{workspace UUID}`.
     * @param {String} repoSlug The repository.
     * @param {module:api/PipelinesApi~getPipelinesForRepositoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedPipelines}
     */
    getPipelinesForRepository(workspace, repoSlug, callback) {
      let postBody = null;
      // verify the required parameter 'workspace' is set
      if (workspace === undefined || workspace === null) {
        throw new Error("Missing the required parameter 'workspace' when calling getPipelinesForRepository");
      }
      // verify the required parameter 'repoSlug' is set
      if (repoSlug === undefined || repoSlug === null) {
        throw new Error("Missing the required parameter 'repoSlug' when calling getPipelinesForRepository");
      }

      let pathParams = {
        'workspace': workspace,
        'repo_slug': repoSlug
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PaginatedPipelines;
      return this.apiClient.callApi(
        '/repositories/{workspace}/{repo_slug}/pipelines', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRepositoryPipelineCacheContentURI operation.
     * @callback module:api/PipelinesApi~getRepositoryPipelineCacheContentURICallback
     * @param {String} error Error message, if any.
     * @param {module:model/PipelineCacheContentUri} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get cache content URI
     * Retrieve the URI of the content of the specified cache.
     * @param {String} workspace The account.
     * @param {String} repoSlug The repository.
     * @param {String} cacheUuid The UUID of the cache.
     * @param {module:api/PipelinesApi~getRepositoryPipelineCacheContentURICallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PipelineCacheContentUri}
     */
    getRepositoryPipelineCacheContentURI(workspace, repoSlug, cacheUuid, callback) {
      let postBody = null;
      // verify the required parameter 'workspace' is set
      if (workspace === undefined || workspace === null) {
        throw new Error("Missing the required parameter 'workspace' when calling getRepositoryPipelineCacheContentURI");
      }
      // verify the required parameter 'repoSlug' is set
      if (repoSlug === undefined || repoSlug === null) {
        throw new Error("Missing the required parameter 'repoSlug' when calling getRepositoryPipelineCacheContentURI");
      }
      // verify the required parameter 'cacheUuid' is set
      if (cacheUuid === undefined || cacheUuid === null) {
        throw new Error("Missing the required parameter 'cacheUuid' when calling getRepositoryPipelineCacheContentURI");
      }

      let pathParams = {
        'workspace': workspace,
        'repo_slug': repoSlug,
        'cache_uuid': cacheUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PipelineCacheContentUri;
      return this.apiClient.callApi(
        '/repositories/{workspace}/{repo_slug}/pipelines-config/caches/{cache_uuid}/content-uri', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRepositoryPipelineCaches operation.
     * @callback module:api/PipelinesApi~getRepositoryPipelineCachesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedPipelineCaches} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List caches
     * Retrieve the repository pipelines caches.
     * @param {String} workspace The account.
     * @param {String} repoSlug The repository.
     * @param {module:api/PipelinesApi~getRepositoryPipelineCachesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedPipelineCaches}
     */
    getRepositoryPipelineCaches(workspace, repoSlug, callback) {
      let postBody = null;
      // verify the required parameter 'workspace' is set
      if (workspace === undefined || workspace === null) {
        throw new Error("Missing the required parameter 'workspace' when calling getRepositoryPipelineCaches");
      }
      // verify the required parameter 'repoSlug' is set
      if (repoSlug === undefined || repoSlug === null) {
        throw new Error("Missing the required parameter 'repoSlug' when calling getRepositoryPipelineCaches");
      }

      let pathParams = {
        'workspace': workspace,
        'repo_slug': repoSlug
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PaginatedPipelineCaches;
      return this.apiClient.callApi(
        '/repositories/{workspace}/{repo_slug}/pipelines-config/caches', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRepositoryPipelineConfig operation.
     * @callback module:api/PipelinesApi~getRepositoryPipelineConfigCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PipelinesConfig} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get configuration
     * Retrieve the repository pipelines configuration.
     * @param {String} workspace The account.
     * @param {String} repoSlug The repository.
     * @param {module:api/PipelinesApi~getRepositoryPipelineConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PipelinesConfig}
     */
    getRepositoryPipelineConfig(workspace, repoSlug, callback) {
      let postBody = null;
      // verify the required parameter 'workspace' is set
      if (workspace === undefined || workspace === null) {
        throw new Error("Missing the required parameter 'workspace' when calling getRepositoryPipelineConfig");
      }
      // verify the required parameter 'repoSlug' is set
      if (repoSlug === undefined || repoSlug === null) {
        throw new Error("Missing the required parameter 'repoSlug' when calling getRepositoryPipelineConfig");
      }

      let pathParams = {
        'workspace': workspace,
        'repo_slug': repoSlug
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PipelinesConfig;
      return this.apiClient.callApi(
        '/repositories/{workspace}/{repo_slug}/pipelines_config', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRepositoryPipelineKnownHost operation.
     * @callback module:api/PipelinesApi~getRepositoryPipelineKnownHostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PipelineKnownHost} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a known host
     * Retrieve a repository level known host.
     * @param {String} workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example `{workspace UUID}`.
     * @param {String} repoSlug The repository.
     * @param {String} knownHostUuid The UUID of the known host to retrieve.
     * @param {module:api/PipelinesApi~getRepositoryPipelineKnownHostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PipelineKnownHost}
     */
    getRepositoryPipelineKnownHost(workspace, repoSlug, knownHostUuid, callback) {
      let postBody = null;
      // verify the required parameter 'workspace' is set
      if (workspace === undefined || workspace === null) {
        throw new Error("Missing the required parameter 'workspace' when calling getRepositoryPipelineKnownHost");
      }
      // verify the required parameter 'repoSlug' is set
      if (repoSlug === undefined || repoSlug === null) {
        throw new Error("Missing the required parameter 'repoSlug' when calling getRepositoryPipelineKnownHost");
      }
      // verify the required parameter 'knownHostUuid' is set
      if (knownHostUuid === undefined || knownHostUuid === null) {
        throw new Error("Missing the required parameter 'knownHostUuid' when calling getRepositoryPipelineKnownHost");
      }

      let pathParams = {
        'workspace': workspace,
        'repo_slug': repoSlug,
        'known_host_uuid': knownHostUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PipelineKnownHost;
      return this.apiClient.callApi(
        '/repositories/{workspace}/{repo_slug}/pipelines_config/ssh/known_hosts/{known_host_uuid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRepositoryPipelineKnownHosts operation.
     * @callback module:api/PipelinesApi~getRepositoryPipelineKnownHostsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedPipelineKnownHosts} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List known hosts
     * Find repository level known hosts.
     * @param {String} workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example `{workspace UUID}`.
     * @param {String} repoSlug The repository.
     * @param {module:api/PipelinesApi~getRepositoryPipelineKnownHostsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedPipelineKnownHosts}
     */
    getRepositoryPipelineKnownHosts(workspace, repoSlug, callback) {
      let postBody = null;
      // verify the required parameter 'workspace' is set
      if (workspace === undefined || workspace === null) {
        throw new Error("Missing the required parameter 'workspace' when calling getRepositoryPipelineKnownHosts");
      }
      // verify the required parameter 'repoSlug' is set
      if (repoSlug === undefined || repoSlug === null) {
        throw new Error("Missing the required parameter 'repoSlug' when calling getRepositoryPipelineKnownHosts");
      }

      let pathParams = {
        'workspace': workspace,
        'repo_slug': repoSlug
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PaginatedPipelineKnownHosts;
      return this.apiClient.callApi(
        '/repositories/{workspace}/{repo_slug}/pipelines_config/ssh/known_hosts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRepositoryPipelineSchedule operation.
     * @callback module:api/PipelinesApi~getRepositoryPipelineScheduleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PipelineSchedule} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a schedule
     * Retrieve a schedule by its UUID.
     * @param {String} workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example `{workspace UUID}`.
     * @param {String} repoSlug The repository.
     * @param {String} scheduleUuid The uuid of the schedule.
     * @param {module:api/PipelinesApi~getRepositoryPipelineScheduleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PipelineSchedule}
     */
    getRepositoryPipelineSchedule(workspace, repoSlug, scheduleUuid, callback) {
      let postBody = null;
      // verify the required parameter 'workspace' is set
      if (workspace === undefined || workspace === null) {
        throw new Error("Missing the required parameter 'workspace' when calling getRepositoryPipelineSchedule");
      }
      // verify the required parameter 'repoSlug' is set
      if (repoSlug === undefined || repoSlug === null) {
        throw new Error("Missing the required parameter 'repoSlug' when calling getRepositoryPipelineSchedule");
      }
      // verify the required parameter 'scheduleUuid' is set
      if (scheduleUuid === undefined || scheduleUuid === null) {
        throw new Error("Missing the required parameter 'scheduleUuid' when calling getRepositoryPipelineSchedule");
      }

      let pathParams = {
        'workspace': workspace,
        'repo_slug': repoSlug,
        'schedule_uuid': scheduleUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PipelineSchedule;
      return this.apiClient.callApi(
        '/repositories/{workspace}/{repo_slug}/pipelines_config/schedules/{schedule_uuid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRepositoryPipelineScheduleExecutions operation.
     * @callback module:api/PipelinesApi~getRepositoryPipelineScheduleExecutionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedPipelineScheduleExecutions} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List executions of a schedule
     * Retrieve the executions of a given schedule.
     * @param {String} workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example `{workspace UUID}`.
     * @param {String} repoSlug The repository.
     * @param {String} scheduleUuid The uuid of the schedule.
     * @param {module:api/PipelinesApi~getRepositoryPipelineScheduleExecutionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedPipelineScheduleExecutions}
     */
    getRepositoryPipelineScheduleExecutions(workspace, repoSlug, scheduleUuid, callback) {
      let postBody = null;
      // verify the required parameter 'workspace' is set
      if (workspace === undefined || workspace === null) {
        throw new Error("Missing the required parameter 'workspace' when calling getRepositoryPipelineScheduleExecutions");
      }
      // verify the required parameter 'repoSlug' is set
      if (repoSlug === undefined || repoSlug === null) {
        throw new Error("Missing the required parameter 'repoSlug' when calling getRepositoryPipelineScheduleExecutions");
      }
      // verify the required parameter 'scheduleUuid' is set
      if (scheduleUuid === undefined || scheduleUuid === null) {
        throw new Error("Missing the required parameter 'scheduleUuid' when calling getRepositoryPipelineScheduleExecutions");
      }

      let pathParams = {
        'workspace': workspace,
        'repo_slug': repoSlug,
        'schedule_uuid': scheduleUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PaginatedPipelineScheduleExecutions;
      return this.apiClient.callApi(
        '/repositories/{workspace}/{repo_slug}/pipelines_config/schedules/{schedule_uuid}/executions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRepositoryPipelineSchedules operation.
     * @callback module:api/PipelinesApi~getRepositoryPipelineSchedulesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedPipelineSchedules} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List schedules
     * Retrieve the configured schedules for the given repository.
     * @param {String} workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example `{workspace UUID}`.
     * @param {String} repoSlug The repository.
     * @param {module:api/PipelinesApi~getRepositoryPipelineSchedulesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedPipelineSchedules}
     */
    getRepositoryPipelineSchedules(workspace, repoSlug, callback) {
      let postBody = null;
      // verify the required parameter 'workspace' is set
      if (workspace === undefined || workspace === null) {
        throw new Error("Missing the required parameter 'workspace' when calling getRepositoryPipelineSchedules");
      }
      // verify the required parameter 'repoSlug' is set
      if (repoSlug === undefined || repoSlug === null) {
        throw new Error("Missing the required parameter 'repoSlug' when calling getRepositoryPipelineSchedules");
      }

      let pathParams = {
        'workspace': workspace,
        'repo_slug': repoSlug
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PaginatedPipelineSchedules;
      return this.apiClient.callApi(
        '/repositories/{workspace}/{repo_slug}/pipelines_config/schedules', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRepositoryPipelineSshKeyPair operation.
     * @callback module:api/PipelinesApi~getRepositoryPipelineSshKeyPairCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PipelineSshKeyPair} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get SSH key pair
     * Retrieve the repository SSH key pair excluding the SSH private key. The private key is a write only field and will never be exposed in the logs or the REST API.
     * @param {String} workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example `{workspace UUID}`.
     * @param {String} repoSlug The repository.
     * @param {module:api/PipelinesApi~getRepositoryPipelineSshKeyPairCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PipelineSshKeyPair}
     */
    getRepositoryPipelineSshKeyPair(workspace, repoSlug, callback) {
      let postBody = null;
      // verify the required parameter 'workspace' is set
      if (workspace === undefined || workspace === null) {
        throw new Error("Missing the required parameter 'workspace' when calling getRepositoryPipelineSshKeyPair");
      }
      // verify the required parameter 'repoSlug' is set
      if (repoSlug === undefined || repoSlug === null) {
        throw new Error("Missing the required parameter 'repoSlug' when calling getRepositoryPipelineSshKeyPair");
      }

      let pathParams = {
        'workspace': workspace,
        'repo_slug': repoSlug
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PipelineSshKeyPair;
      return this.apiClient.callApi(
        '/repositories/{workspace}/{repo_slug}/pipelines_config/ssh/key_pair', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRepositoryPipelineVariable operation.
     * @callback module:api/PipelinesApi~getRepositoryPipelineVariableCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PipelineVariable} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a variable for a repository
     * Retrieve a repository level variable.
     * @param {String} workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example `{workspace UUID}`.
     * @param {String} repoSlug The repository.
     * @param {String} variableUuid The UUID of the variable to retrieve.
     * @param {module:api/PipelinesApi~getRepositoryPipelineVariableCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PipelineVariable}
     */
    getRepositoryPipelineVariable(workspace, repoSlug, variableUuid, callback) {
      let postBody = null;
      // verify the required parameter 'workspace' is set
      if (workspace === undefined || workspace === null) {
        throw new Error("Missing the required parameter 'workspace' when calling getRepositoryPipelineVariable");
      }
      // verify the required parameter 'repoSlug' is set
      if (repoSlug === undefined || repoSlug === null) {
        throw new Error("Missing the required parameter 'repoSlug' when calling getRepositoryPipelineVariable");
      }
      // verify the required parameter 'variableUuid' is set
      if (variableUuid === undefined || variableUuid === null) {
        throw new Error("Missing the required parameter 'variableUuid' when calling getRepositoryPipelineVariable");
      }

      let pathParams = {
        'workspace': workspace,
        'repo_slug': repoSlug,
        'variable_uuid': variableUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PipelineVariable;
      return this.apiClient.callApi(
        '/repositories/{workspace}/{repo_slug}/pipelines_config/variables/{variable_uuid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRepositoryPipelineVariables operation.
     * @callback module:api/PipelinesApi~getRepositoryPipelineVariablesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedPipelineVariables} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List variables for a repository
     * Find repository level variables.
     * @param {String} workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example `{workspace UUID}`.
     * @param {String} repoSlug The repository.
     * @param {module:api/PipelinesApi~getRepositoryPipelineVariablesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedPipelineVariables}
     */
    getRepositoryPipelineVariables(workspace, repoSlug, callback) {
      let postBody = null;
      // verify the required parameter 'workspace' is set
      if (workspace === undefined || workspace === null) {
        throw new Error("Missing the required parameter 'workspace' when calling getRepositoryPipelineVariables");
      }
      // verify the required parameter 'repoSlug' is set
      if (repoSlug === undefined || repoSlug === null) {
        throw new Error("Missing the required parameter 'repoSlug' when calling getRepositoryPipelineVariables");
      }

      let pathParams = {
        'workspace': workspace,
        'repo_slug': repoSlug
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PaginatedPipelineVariables;
      return this.apiClient.callApi(
        '/repositories/{workspace}/{repo_slug}/pipelines_config/variables', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the stopPipeline operation.
     * @callback module:api/PipelinesApi~stopPipelineCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Stop a pipeline
     * Signal the stop of a pipeline and all of its steps that not have completed yet.
     * @param {String} workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example `{workspace UUID}`.
     * @param {String} repoSlug The repository.
     * @param {String} pipelineUuid The UUID of the pipeline.
     * @param {module:api/PipelinesApi~stopPipelineCallback} callback The callback function, accepting three arguments: error, data, response
     */
    stopPipeline(workspace, repoSlug, pipelineUuid, callback) {
      let postBody = null;
      // verify the required parameter 'workspace' is set
      if (workspace === undefined || workspace === null) {
        throw new Error("Missing the required parameter 'workspace' when calling stopPipeline");
      }
      // verify the required parameter 'repoSlug' is set
      if (repoSlug === undefined || repoSlug === null) {
        throw new Error("Missing the required parameter 'repoSlug' when calling stopPipeline");
      }
      // verify the required parameter 'pipelineUuid' is set
      if (pipelineUuid === undefined || pipelineUuid === null) {
        throw new Error("Missing the required parameter 'pipelineUuid' when calling stopPipeline");
      }

      let pathParams = {
        'workspace': workspace,
        'repo_slug': repoSlug,
        'pipeline_uuid': pipelineUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/repositories/{workspace}/{repo_slug}/pipelines/{pipeline_uuid}/stopPipeline', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateDeploymentVariable operation.
     * @callback module:api/PipelinesApi~updateDeploymentVariableCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeploymentVariable} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a variable for an environment
     * Update a deployment environment level variable.
     * @param {String} workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example `{workspace UUID}`.
     * @param {String} repoSlug The repository.
     * @param {String} environmentUuid The environment.
     * @param {String} variableUuid The UUID of the variable to update.
     * @param {module:model/DeploymentVariable} deploymentVariable The updated deployment variable.
     * @param {module:api/PipelinesApi~updateDeploymentVariableCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeploymentVariable}
     */
    updateDeploymentVariable(workspace, repoSlug, environmentUuid, variableUuid, deploymentVariable, callback) {
      let postBody = deploymentVariable;
      // verify the required parameter 'workspace' is set
      if (workspace === undefined || workspace === null) {
        throw new Error("Missing the required parameter 'workspace' when calling updateDeploymentVariable");
      }
      // verify the required parameter 'repoSlug' is set
      if (repoSlug === undefined || repoSlug === null) {
        throw new Error("Missing the required parameter 'repoSlug' when calling updateDeploymentVariable");
      }
      // verify the required parameter 'environmentUuid' is set
      if (environmentUuid === undefined || environmentUuid === null) {
        throw new Error("Missing the required parameter 'environmentUuid' when calling updateDeploymentVariable");
      }
      // verify the required parameter 'variableUuid' is set
      if (variableUuid === undefined || variableUuid === null) {
        throw new Error("Missing the required parameter 'variableUuid' when calling updateDeploymentVariable");
      }
      // verify the required parameter 'deploymentVariable' is set
      if (deploymentVariable === undefined || deploymentVariable === null) {
        throw new Error("Missing the required parameter 'deploymentVariable' when calling updateDeploymentVariable");
      }

      let pathParams = {
        'workspace': workspace,
        'repo_slug': repoSlug,
        'environment_uuid': environmentUuid,
        'variable_uuid': variableUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeploymentVariable;
      return this.apiClient.callApi(
        '/repositories/{workspace}/{repo_slug}/deployments_config/environments/{environment_uuid}/variables/{variable_uuid}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updatePipelineVariableForTeam operation.
     * @callback module:api/PipelinesApi~updatePipelineVariableForTeamCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PipelineVariable} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a variable for a team
     * Update a team level variable. This endpoint has been deprecated, and you should use the new workspaces endpoint. For more information, see [the announcement](https://developer.atlassian.com/cloud/bitbucket/bitbucket-api-teams-deprecation/).
     * @param {String} username The account.
     * @param {String} variableUuid The UUID of the variable.
     * @param {module:model/PipelineVariable} pipelineVariable The updated variable.
     * @param {module:api/PipelinesApi~updatePipelineVariableForTeamCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PipelineVariable}
     */
    updatePipelineVariableForTeam(username, variableUuid, pipelineVariable, callback) {
      let postBody = pipelineVariable;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling updatePipelineVariableForTeam");
      }
      // verify the required parameter 'variableUuid' is set
      if (variableUuid === undefined || variableUuid === null) {
        throw new Error("Missing the required parameter 'variableUuid' when calling updatePipelineVariableForTeam");
      }
      // verify the required parameter 'pipelineVariable' is set
      if (pipelineVariable === undefined || pipelineVariable === null) {
        throw new Error("Missing the required parameter 'pipelineVariable' when calling updatePipelineVariableForTeam");
      }

      let pathParams = {
        'username': username,
        'variable_uuid': variableUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PipelineVariable;
      return this.apiClient.callApi(
        '/teams/{username}/pipelines_config/variables/{variable_uuid}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updatePipelineVariableForUser operation.
     * @callback module:api/PipelinesApi~updatePipelineVariableForUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PipelineVariable} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a variable for a user
     * Update a user level variable. This endpoint has been deprecated, and you should use the new workspaces endpoint. For more information, see [the announcement](https://developer.atlassian.com/cloud/bitbucket/bitbucket-api-teams-deprecation/).
     * @param {String} selectedUser Either the UUID of the account surrounded by curly-braces, for example `{account UUID}`, OR an Atlassian Account ID.
     * @param {String} variableUuid The UUID of the variable.
     * @param {module:model/PipelineVariable} pipelineVariable The updated variable.
     * @param {module:api/PipelinesApi~updatePipelineVariableForUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PipelineVariable}
     */
    updatePipelineVariableForUser(selectedUser, variableUuid, pipelineVariable, callback) {
      let postBody = pipelineVariable;
      // verify the required parameter 'selectedUser' is set
      if (selectedUser === undefined || selectedUser === null) {
        throw new Error("Missing the required parameter 'selectedUser' when calling updatePipelineVariableForUser");
      }
      // verify the required parameter 'variableUuid' is set
      if (variableUuid === undefined || variableUuid === null) {
        throw new Error("Missing the required parameter 'variableUuid' when calling updatePipelineVariableForUser");
      }
      // verify the required parameter 'pipelineVariable' is set
      if (pipelineVariable === undefined || pipelineVariable === null) {
        throw new Error("Missing the required parameter 'pipelineVariable' when calling updatePipelineVariableForUser");
      }

      let pathParams = {
        'selected_user': selectedUser,
        'variable_uuid': variableUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PipelineVariable;
      return this.apiClient.callApi(
        '/users/{selected_user}/pipelines_config/variables/{variable_uuid}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updatePipelineVariableForWorkspace operation.
     * @callback module:api/PipelinesApi~updatePipelineVariableForWorkspaceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PipelineVariable} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update variable for a workspace
     * Update a workspace level variable.
     * @param {String} workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example `{workspace UUID}`.
     * @param {String} variableUuid The UUID of the variable.
     * @param {module:model/PipelineVariable} pipelineVariable The updated variable.
     * @param {module:api/PipelinesApi~updatePipelineVariableForWorkspaceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PipelineVariable}
     */
    updatePipelineVariableForWorkspace(workspace, variableUuid, pipelineVariable, callback) {
      let postBody = pipelineVariable;
      // verify the required parameter 'workspace' is set
      if (workspace === undefined || workspace === null) {
        throw new Error("Missing the required parameter 'workspace' when calling updatePipelineVariableForWorkspace");
      }
      // verify the required parameter 'variableUuid' is set
      if (variableUuid === undefined || variableUuid === null) {
        throw new Error("Missing the required parameter 'variableUuid' when calling updatePipelineVariableForWorkspace");
      }
      // verify the required parameter 'pipelineVariable' is set
      if (pipelineVariable === undefined || pipelineVariable === null) {
        throw new Error("Missing the required parameter 'pipelineVariable' when calling updatePipelineVariableForWorkspace");
      }

      let pathParams = {
        'workspace': workspace,
        'variable_uuid': variableUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PipelineVariable;
      return this.apiClient.callApi(
        '/workspaces/{workspace}/pipelines-config/variables/{variable_uuid}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateRepositoryBuildNumber operation.
     * @callback module:api/PipelinesApi~updateRepositoryBuildNumberCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PipelineBuildNumber} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the next build number
     * Update the next build number that should be assigned to a pipeline. The next build number that will be configured has to be strictly higher than the current latest build number for this repository.
     * @param {String} workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example `{workspace UUID}`.
     * @param {String} repoSlug The repository.
     * @param {module:model/PipelineBuildNumber} pipelineBuildNumber The build number to update.
     * @param {module:api/PipelinesApi~updateRepositoryBuildNumberCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PipelineBuildNumber}
     */
    updateRepositoryBuildNumber(workspace, repoSlug, pipelineBuildNumber, callback) {
      let postBody = pipelineBuildNumber;
      // verify the required parameter 'workspace' is set
      if (workspace === undefined || workspace === null) {
        throw new Error("Missing the required parameter 'workspace' when calling updateRepositoryBuildNumber");
      }
      // verify the required parameter 'repoSlug' is set
      if (repoSlug === undefined || repoSlug === null) {
        throw new Error("Missing the required parameter 'repoSlug' when calling updateRepositoryBuildNumber");
      }
      // verify the required parameter 'pipelineBuildNumber' is set
      if (pipelineBuildNumber === undefined || pipelineBuildNumber === null) {
        throw new Error("Missing the required parameter 'pipelineBuildNumber' when calling updateRepositoryBuildNumber");
      }

      let pathParams = {
        'workspace': workspace,
        'repo_slug': repoSlug
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PipelineBuildNumber;
      return this.apiClient.callApi(
        '/repositories/{workspace}/{repo_slug}/pipelines_config/build_number', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateRepositoryPipelineConfig operation.
     * @callback module:api/PipelinesApi~updateRepositoryPipelineConfigCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PipelinesConfig} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update configuration
     * Update the pipelines configuration for a repository.
     * @param {String} workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example `{workspace UUID}`.
     * @param {String} repoSlug The repository.
     * @param {module:model/PipelinesConfig} pipelinesConfig The updated repository pipelines configuration.
     * @param {module:api/PipelinesApi~updateRepositoryPipelineConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PipelinesConfig}
     */
    updateRepositoryPipelineConfig(workspace, repoSlug, pipelinesConfig, callback) {
      let postBody = pipelinesConfig;
      // verify the required parameter 'workspace' is set
      if (workspace === undefined || workspace === null) {
        throw new Error("Missing the required parameter 'workspace' when calling updateRepositoryPipelineConfig");
      }
      // verify the required parameter 'repoSlug' is set
      if (repoSlug === undefined || repoSlug === null) {
        throw new Error("Missing the required parameter 'repoSlug' when calling updateRepositoryPipelineConfig");
      }
      // verify the required parameter 'pipelinesConfig' is set
      if (pipelinesConfig === undefined || pipelinesConfig === null) {
        throw new Error("Missing the required parameter 'pipelinesConfig' when calling updateRepositoryPipelineConfig");
      }

      let pathParams = {
        'workspace': workspace,
        'repo_slug': repoSlug
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PipelinesConfig;
      return this.apiClient.callApi(
        '/repositories/{workspace}/{repo_slug}/pipelines_config', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateRepositoryPipelineKeyPair operation.
     * @callback module:api/PipelinesApi~updateRepositoryPipelineKeyPairCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PipelineSshKeyPair} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update SSH key pair
     * Create or update the repository SSH key pair. The private key will be set as a default SSH identity in your build container.
     * @param {String} workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example `{workspace UUID}`.
     * @param {String} repoSlug The repository.
     * @param {module:model/PipelineSshKeyPair} pipelineSshKeyPair The created or updated SSH key pair.
     * @param {module:api/PipelinesApi~updateRepositoryPipelineKeyPairCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PipelineSshKeyPair}
     */
    updateRepositoryPipelineKeyPair(workspace, repoSlug, pipelineSshKeyPair, callback) {
      let postBody = pipelineSshKeyPair;
      // verify the required parameter 'workspace' is set
      if (workspace === undefined || workspace === null) {
        throw new Error("Missing the required parameter 'workspace' when calling updateRepositoryPipelineKeyPair");
      }
      // verify the required parameter 'repoSlug' is set
      if (repoSlug === undefined || repoSlug === null) {
        throw new Error("Missing the required parameter 'repoSlug' when calling updateRepositoryPipelineKeyPair");
      }
      // verify the required parameter 'pipelineSshKeyPair' is set
      if (pipelineSshKeyPair === undefined || pipelineSshKeyPair === null) {
        throw new Error("Missing the required parameter 'pipelineSshKeyPair' when calling updateRepositoryPipelineKeyPair");
      }

      let pathParams = {
        'workspace': workspace,
        'repo_slug': repoSlug
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PipelineSshKeyPair;
      return this.apiClient.callApi(
        '/repositories/{workspace}/{repo_slug}/pipelines_config/ssh/key_pair', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateRepositoryPipelineKnownHost operation.
     * @callback module:api/PipelinesApi~updateRepositoryPipelineKnownHostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PipelineKnownHost} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a known host
     * Update a repository level known host.
     * @param {String} workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example `{workspace UUID}`.
     * @param {String} repoSlug The repository.
     * @param {String} knownHostUuid The UUID of the known host to update.
     * @param {module:model/PipelineKnownHost} pipelineKnownHost The updated known host.
     * @param {module:api/PipelinesApi~updateRepositoryPipelineKnownHostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PipelineKnownHost}
     */
    updateRepositoryPipelineKnownHost(workspace, repoSlug, knownHostUuid, pipelineKnownHost, callback) {
      let postBody = pipelineKnownHost;
      // verify the required parameter 'workspace' is set
      if (workspace === undefined || workspace === null) {
        throw new Error("Missing the required parameter 'workspace' when calling updateRepositoryPipelineKnownHost");
      }
      // verify the required parameter 'repoSlug' is set
      if (repoSlug === undefined || repoSlug === null) {
        throw new Error("Missing the required parameter 'repoSlug' when calling updateRepositoryPipelineKnownHost");
      }
      // verify the required parameter 'knownHostUuid' is set
      if (knownHostUuid === undefined || knownHostUuid === null) {
        throw new Error("Missing the required parameter 'knownHostUuid' when calling updateRepositoryPipelineKnownHost");
      }
      // verify the required parameter 'pipelineKnownHost' is set
      if (pipelineKnownHost === undefined || pipelineKnownHost === null) {
        throw new Error("Missing the required parameter 'pipelineKnownHost' when calling updateRepositoryPipelineKnownHost");
      }

      let pathParams = {
        'workspace': workspace,
        'repo_slug': repoSlug,
        'known_host_uuid': knownHostUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PipelineKnownHost;
      return this.apiClient.callApi(
        '/repositories/{workspace}/{repo_slug}/pipelines_config/ssh/known_hosts/{known_host_uuid}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateRepositoryPipelineSchedule operation.
     * @callback module:api/PipelinesApi~updateRepositoryPipelineScheduleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PipelineSchedule} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a schedule
     * Update a schedule.
     * @param {String} workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example `{workspace UUID}`.
     * @param {String} repoSlug The repository.
     * @param {String} scheduleUuid The uuid of the schedule.
     * @param {module:model/PipelineSchedulePutRequestBody} pipelineSchedulePutRequestBody The schedule to update.
     * @param {module:api/PipelinesApi~updateRepositoryPipelineScheduleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PipelineSchedule}
     */
    updateRepositoryPipelineSchedule(workspace, repoSlug, scheduleUuid, pipelineSchedulePutRequestBody, callback) {
      let postBody = pipelineSchedulePutRequestBody;
      // verify the required parameter 'workspace' is set
      if (workspace === undefined || workspace === null) {
        throw new Error("Missing the required parameter 'workspace' when calling updateRepositoryPipelineSchedule");
      }
      // verify the required parameter 'repoSlug' is set
      if (repoSlug === undefined || repoSlug === null) {
        throw new Error("Missing the required parameter 'repoSlug' when calling updateRepositoryPipelineSchedule");
      }
      // verify the required parameter 'scheduleUuid' is set
      if (scheduleUuid === undefined || scheduleUuid === null) {
        throw new Error("Missing the required parameter 'scheduleUuid' when calling updateRepositoryPipelineSchedule");
      }
      // verify the required parameter 'pipelineSchedulePutRequestBody' is set
      if (pipelineSchedulePutRequestBody === undefined || pipelineSchedulePutRequestBody === null) {
        throw new Error("Missing the required parameter 'pipelineSchedulePutRequestBody' when calling updateRepositoryPipelineSchedule");
      }

      let pathParams = {
        'workspace': workspace,
        'repo_slug': repoSlug,
        'schedule_uuid': scheduleUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PipelineSchedule;
      return this.apiClient.callApi(
        '/repositories/{workspace}/{repo_slug}/pipelines_config/schedules/{schedule_uuid}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateRepositoryPipelineVariable operation.
     * @callback module:api/PipelinesApi~updateRepositoryPipelineVariableCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PipelineVariable} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a variable for a repository
     * Update a repository level variable.
     * @param {String} workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example `{workspace UUID}`.
     * @param {String} repoSlug The repository.
     * @param {String} variableUuid The UUID of the variable to update.
     * @param {module:model/PipelineVariable} pipelineVariable The updated variable
     * @param {module:api/PipelinesApi~updateRepositoryPipelineVariableCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PipelineVariable}
     */
    updateRepositoryPipelineVariable(workspace, repoSlug, variableUuid, pipelineVariable, callback) {
      let postBody = pipelineVariable;
      // verify the required parameter 'workspace' is set
      if (workspace === undefined || workspace === null) {
        throw new Error("Missing the required parameter 'workspace' when calling updateRepositoryPipelineVariable");
      }
      // verify the required parameter 'repoSlug' is set
      if (repoSlug === undefined || repoSlug === null) {
        throw new Error("Missing the required parameter 'repoSlug' when calling updateRepositoryPipelineVariable");
      }
      // verify the required parameter 'variableUuid' is set
      if (variableUuid === undefined || variableUuid === null) {
        throw new Error("Missing the required parameter 'variableUuid' when calling updateRepositoryPipelineVariable");
      }
      // verify the required parameter 'pipelineVariable' is set
      if (pipelineVariable === undefined || pipelineVariable === null) {
        throw new Error("Missing the required parameter 'pipelineVariable' when calling updateRepositoryPipelineVariable");
      }

      let pathParams = {
        'workspace': workspace,
        'repo_slug': repoSlug,
        'variable_uuid': variableUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PipelineVariable;
      return this.apiClient.callApi(
        '/repositories/{workspace}/{repo_slug}/pipelines_config/variables/{variable_uuid}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
