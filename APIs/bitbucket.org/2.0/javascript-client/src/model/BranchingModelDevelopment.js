/**
 * Bitbucket API
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@bitbucket.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Branch from './Branch';

/**
 * The BranchingModelDevelopment model module.
 * @module model/BranchingModelDevelopment
 * @version 2.0
 */
class BranchingModelDevelopment {
    /**
     * Constructs a new <code>BranchingModelDevelopment</code>.
     * @alias module:model/BranchingModelDevelopment
     * @param name {String} Name of the target branch. Will be listed here even when the target branch does not exist. Will be `null` if targeting the main branch and the repository is empty.
     * @param useMainbranch {Boolean} Indicates if the setting points at an explicit branch (`false`) or tracks the main branch (`true`).
     */
    constructor(name, useMainbranch) { 
        
        BranchingModelDevelopment.initialize(this, name, useMainbranch);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name, useMainbranch) { 
        obj['name'] = name;
        obj['use_mainbranch'] = useMainbranch;
    }

    /**
     * Constructs a <code>BranchingModelDevelopment</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BranchingModelDevelopment} obj Optional instance to populate.
     * @return {module:model/BranchingModelDevelopment} The populated <code>BranchingModelDevelopment</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BranchingModelDevelopment();

            if (data.hasOwnProperty('branch')) {
                obj['branch'] = Branch.constructFromObject(data['branch']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('use_mainbranch')) {
                obj['use_mainbranch'] = ApiClient.convertToType(data['use_mainbranch'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BranchingModelDevelopment</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BranchingModelDevelopment</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of BranchingModelDevelopment.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `branch`
        if (data['branch']) { // data not null
          Branch.validateJSON(data['branch']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }

        return true;
    }


}

BranchingModelDevelopment.RequiredProperties = ["name", "use_mainbranch"];

/**
 * @member {module:model/Branch} branch
 */
BranchingModelDevelopment.prototype['branch'] = undefined;

/**
 * Name of the target branch. Will be listed here even when the target branch does not exist. Will be `null` if targeting the main branch and the repository is empty.
 * @member {String} name
 */
BranchingModelDevelopment.prototype['name'] = undefined;

/**
 * Indicates if the setting points at an explicit branch (`false`) or tracks the main branch (`true`).
 * @member {Boolean} use_mainbranch
 */
BranchingModelDevelopment.prototype['use_mainbranch'] = undefined;






export default BranchingModelDevelopment;

