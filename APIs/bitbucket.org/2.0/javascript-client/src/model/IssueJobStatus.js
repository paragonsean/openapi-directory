/**
 * Bitbucket API
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@bitbucket.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The IssueJobStatus model module.
 * @module model/IssueJobStatus
 * @version 2.0
 */
class IssueJobStatus {
    /**
     * Constructs a new <code>IssueJobStatus</code>.
     * The status of an import or export job
     * @alias module:model/IssueJobStatus
     */
    constructor() { 
        
        IssueJobStatus.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>IssueJobStatus</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/IssueJobStatus} obj Optional instance to populate.
     * @return {module:model/IssueJobStatus} The populated <code>IssueJobStatus</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new IssueJobStatus();

            if (data.hasOwnProperty('count')) {
                obj['count'] = ApiClient.convertToType(data['count'], 'Number');
            }
            if (data.hasOwnProperty('pct')) {
                obj['pct'] = ApiClient.convertToType(data['pct'], 'Number');
            }
            if (data.hasOwnProperty('phase')) {
                obj['phase'] = ApiClient.convertToType(data['phase'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('total')) {
                obj['total'] = ApiClient.convertToType(data['total'], 'Number');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>IssueJobStatus</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>IssueJobStatus</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['phase'] && !(typeof data['phase'] === 'string' || data['phase'] instanceof String)) {
            throw new Error("Expected the field `phase` to be a primitive type in the JSON string but got " + data['phase']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * The total number of issues already imported/exported
 * @member {Number} count
 */
IssueJobStatus.prototype['count'] = undefined;

/**
 * The percentage of issues already imported/exported
 * @member {Number} pct
 */
IssueJobStatus.prototype['pct'] = undefined;

/**
 * The phase of the import/export job
 * @member {String} phase
 */
IssueJobStatus.prototype['phase'] = undefined;

/**
 * The status of the import/export job
 * @member {module:model/IssueJobStatus.StatusEnum} status
 */
IssueJobStatus.prototype['status'] = undefined;

/**
 * The total number of issues being imported/exported
 * @member {Number} total
 */
IssueJobStatus.prototype['total'] = undefined;

/**
 * @member {String} type
 */
IssueJobStatus.prototype['type'] = undefined;





/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
IssueJobStatus['StatusEnum'] = {

    /**
     * value: "ACCEPTED"
     * @const
     */
    "ACCEPTED": "ACCEPTED",

    /**
     * value: "STARTED"
     * @const
     */
    "STARTED": "STARTED",

    /**
     * value: "RUNNING"
     * @const
     */
    "RUNNING": "RUNNING",

    /**
     * value: "FAILURE"
     * @const
     */
    "FAILURE": "FAILURE"
};



export default IssueJobStatus;

