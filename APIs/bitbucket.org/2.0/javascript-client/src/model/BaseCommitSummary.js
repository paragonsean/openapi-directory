/**
 * Bitbucket API
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@bitbucket.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The BaseCommitSummary model module.
 * @module model/BaseCommitSummary
 * @version 2.0
 */
class BaseCommitSummary {
    /**
     * Constructs a new <code>BaseCommitSummary</code>.
     * @alias module:model/BaseCommitSummary
     */
    constructor() { 
        
        BaseCommitSummary.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>BaseCommitSummary</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BaseCommitSummary} obj Optional instance to populate.
     * @return {module:model/BaseCommitSummary} The populated <code>BaseCommitSummary</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BaseCommitSummary();

            if (data.hasOwnProperty('html')) {
                obj['html'] = ApiClient.convertToType(data['html'], 'String');
            }
            if (data.hasOwnProperty('markup')) {
                obj['markup'] = ApiClient.convertToType(data['markup'], 'String');
            }
            if (data.hasOwnProperty('raw')) {
                obj['raw'] = ApiClient.convertToType(data['raw'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BaseCommitSummary</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BaseCommitSummary</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['html'] && !(typeof data['html'] === 'string' || data['html'] instanceof String)) {
            throw new Error("Expected the field `html` to be a primitive type in the JSON string but got " + data['html']);
        }
        // ensure the json data is a string
        if (data['markup'] && !(typeof data['markup'] === 'string' || data['markup'] instanceof String)) {
            throw new Error("Expected the field `markup` to be a primitive type in the JSON string but got " + data['markup']);
        }
        // ensure the json data is a string
        if (data['raw'] && !(typeof data['raw'] === 'string' || data['raw'] instanceof String)) {
            throw new Error("Expected the field `raw` to be a primitive type in the JSON string but got " + data['raw']);
        }

        return true;
    }


}



/**
 * The user's content rendered as HTML.
 * @member {String} html
 */
BaseCommitSummary.prototype['html'] = undefined;

/**
 * The type of markup language the raw content is to be interpreted in.
 * @member {module:model/BaseCommitSummary.MarkupEnum} markup
 */
BaseCommitSummary.prototype['markup'] = undefined;

/**
 * The text as it was typed by a user.
 * @member {String} raw
 */
BaseCommitSummary.prototype['raw'] = undefined;





/**
 * Allowed values for the <code>markup</code> property.
 * @enum {String}
 * @readonly
 */
BaseCommitSummary['MarkupEnum'] = {

    /**
     * value: "markdown"
     * @const
     */
    "markdown": "markdown",

    /**
     * value: "creole"
     * @const
     */
    "creole": "creole",

    /**
     * value: "plaintext"
     * @const
     */
    "plaintext": "plaintext"
};



export default BaseCommitSummary;

