/**
 * Bitbucket API
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@bitbucket.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Group from './Group';
import Repository from './Repository';
import RepositoryGroupPermissionLinks from './RepositoryGroupPermissionLinks';

/**
 * The RepositoryGroupPermission model module.
 * @module model/RepositoryGroupPermission
 * @version 2.0
 */
class RepositoryGroupPermission {
    /**
     * Constructs a new <code>RepositoryGroupPermission</code>.
     * A group&#39;s permission for a given repository.
     * @alias module:model/RepositoryGroupPermission
     * @extends Object
     * @param type {String} 
     */
    constructor(type) { 
        
        RepositoryGroupPermission.initialize(this, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, type) { 
        obj['type'] = type;
    }

    /**
     * Constructs a <code>RepositoryGroupPermission</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RepositoryGroupPermission} obj Optional instance to populate.
     * @return {module:model/RepositoryGroupPermission} The populated <code>RepositoryGroupPermission</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RepositoryGroupPermission();

            ApiClient.constructFromObject(data, obj, 'Object');
            

            if (data.hasOwnProperty('group')) {
                obj['group'] = Group.constructFromObject(data['group']);
            }
            if (data.hasOwnProperty('links')) {
                obj['links'] = RepositoryGroupPermissionLinks.constructFromObject(data['links']);
            }
            if (data.hasOwnProperty('permission')) {
                obj['permission'] = ApiClient.convertToType(data['permission'], 'String');
            }
            if (data.hasOwnProperty('repository')) {
                obj['repository'] = Repository.constructFromObject(data['repository']);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RepositoryGroupPermission</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RepositoryGroupPermission</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of RepositoryGroupPermission.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `group`
        if (data['group']) { // data not null
          Group.validateJSON(data['group']);
        }
        // validate the optional field `links`
        if (data['links']) { // data not null
          RepositoryGroupPermissionLinks.validateJSON(data['links']);
        }
        // ensure the json data is a string
        if (data['permission'] && !(typeof data['permission'] === 'string' || data['permission'] instanceof String)) {
            throw new Error("Expected the field `permission` to be a primitive type in the JSON string but got " + data['permission']);
        }
        // validate the optional field `repository`
        if (data['repository']) { // data not null
          Repository.validateJSON(data['repository']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

RepositoryGroupPermission.RequiredProperties = ["type"];

/**
 * @member {module:model/Group} group
 */
RepositoryGroupPermission.prototype['group'] = undefined;

/**
 * @member {module:model/RepositoryGroupPermissionLinks} links
 */
RepositoryGroupPermission.prototype['links'] = undefined;

/**
 * @member {module:model/RepositoryGroupPermission.PermissionEnum} permission
 */
RepositoryGroupPermission.prototype['permission'] = undefined;

/**
 * @member {module:model/Repository} repository
 */
RepositoryGroupPermission.prototype['repository'] = undefined;

/**
 * @member {String} type
 */
RepositoryGroupPermission.prototype['type'] = undefined;





/**
 * Allowed values for the <code>permission</code> property.
 * @enum {String}
 * @readonly
 */
RepositoryGroupPermission['PermissionEnum'] = {

    /**
     * value: "read"
     * @const
     */
    "read": "read",

    /**
     * value: "write"
     * @const
     */
    "write": "write",

    /**
     * value: "admin"
     * @const
     */
    "admin": "admin",

    /**
     * value: "none"
     * @const
     */
    "none": "none"
};



export default RepositoryGroupPermission;

