/**
 * Bitbucket API
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@bitbucket.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Author from './Author';
import BaseCommit from './BaseCommit';
import BaseCommitSummary from './BaseCommitSummary';
import Snippet from './Snippet';
import SnippetCommitLinks from './SnippetCommitLinks';

/**
 * The SnippetCommit model module.
 * @module model/SnippetCommit
 * @version 2.0
 */
class SnippetCommit {
    /**
     * Constructs a new <code>SnippetCommit</code>.
     * @alias module:model/SnippetCommit
     * @extends module:model/BaseCommit
     * @implements module:model/BaseCommit
     * @param type {String} 
     */
    constructor(type) { 
        BaseCommit.initialize(this, type);
        SnippetCommit.initialize(this, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, type) { 
    }

    /**
     * Constructs a <code>SnippetCommit</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SnippetCommit} obj Optional instance to populate.
     * @return {module:model/SnippetCommit} The populated <code>SnippetCommit</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SnippetCommit();
            BaseCommit.constructFromObject(data, obj);
            BaseCommit.constructFromObject(data, obj);

            if (data.hasOwnProperty('links')) {
                obj['links'] = SnippetCommitLinks.constructFromObject(data['links']);
            }
            if (data.hasOwnProperty('snippet')) {
                obj['snippet'] = Snippet.constructFromObject(data['snippet']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SnippetCommit</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SnippetCommit</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of SnippetCommit.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `links`
        if (data['links']) { // data not null
          SnippetCommitLinks.validateJSON(data['links']);
        }
        // validate the optional field `snippet`
        if (data['snippet']) { // data not null
          Snippet.validateJSON(data['snippet']);
        }

        return true;
    }


}

SnippetCommit.RequiredProperties = ["type"];

/**
 * @member {module:model/SnippetCommitLinks} links
 */
SnippetCommit.prototype['links'] = undefined;

/**
 * @member {module:model/Snippet} snippet
 */
SnippetCommit.prototype['snippet'] = undefined;


// Implement BaseCommit interface:
/**
 * @member {String} type
 */
BaseCommit.prototype['type'] = undefined;
/**
 * @member {module:model/Author} author
 */
BaseCommit.prototype['author'] = undefined;
/**
 * @member {Date} date
 */
BaseCommit.prototype['date'] = undefined;
/**
 * @member {String} hash
 */
BaseCommit.prototype['hash'] = undefined;
/**
 * @member {String} message
 */
BaseCommit.prototype['message'] = undefined;
/**
 * @member {Array.<module:model/BaseCommit>} parents
 */
BaseCommit.prototype['parents'] = undefined;
/**
 * @member {module:model/BaseCommitSummary} summary
 */
BaseCommit.prototype['summary'] = undefined;




export default SnippetCommit;

