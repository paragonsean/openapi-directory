/**
 * Bitbucket API
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@bitbucket.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Account from './Account';
import Issue from './Issue';
import IssueChangeChanges from './IssueChangeChanges';
import IssueChangeLinks from './IssueChangeLinks';
import IssueChangeMessage from './IssueChangeMessage';

/**
 * The IssueChange model module.
 * @module model/IssueChange
 * @version 2.0
 */
class IssueChange {
    /**
     * Constructs a new <code>IssueChange</code>.
     * An issue change.
     * @alias module:model/IssueChange
     * @extends Object
     * @param type {String} 
     */
    constructor(type) { 
        
        IssueChange.initialize(this, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, type) { 
        obj['type'] = type;
    }

    /**
     * Constructs a <code>IssueChange</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/IssueChange} obj Optional instance to populate.
     * @return {module:model/IssueChange} The populated <code>IssueChange</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new IssueChange();

            ApiClient.constructFromObject(data, obj, 'Object');
            

            if (data.hasOwnProperty('changes')) {
                obj['changes'] = IssueChangeChanges.constructFromObject(data['changes']);
            }
            if (data.hasOwnProperty('created_on')) {
                obj['created_on'] = ApiClient.convertToType(data['created_on'], 'Date');
            }
            if (data.hasOwnProperty('issue')) {
                obj['issue'] = Issue.constructFromObject(data['issue']);
            }
            if (data.hasOwnProperty('links')) {
                obj['links'] = IssueChangeLinks.constructFromObject(data['links']);
            }
            if (data.hasOwnProperty('message')) {
                obj['message'] = IssueChangeMessage.constructFromObject(data['message']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('user')) {
                obj['user'] = Account.constructFromObject(data['user']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>IssueChange</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>IssueChange</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of IssueChange.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `changes`
        if (data['changes']) { // data not null
          IssueChangeChanges.validateJSON(data['changes']);
        }
        // validate the optional field `issue`
        if (data['issue']) { // data not null
          Issue.validateJSON(data['issue']);
        }
        // validate the optional field `links`
        if (data['links']) { // data not null
          IssueChangeLinks.validateJSON(data['links']);
        }
        // validate the optional field `message`
        if (data['message']) { // data not null
          IssueChangeMessage.validateJSON(data['message']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // validate the optional field `user`
        if (data['user']) { // data not null
          Account.validateJSON(data['user']);
        }

        return true;
    }


}

IssueChange.RequiredProperties = ["type"];

/**
 * @member {module:model/IssueChangeChanges} changes
 */
IssueChange.prototype['changes'] = undefined;

/**
 * @member {Date} created_on
 */
IssueChange.prototype['created_on'] = undefined;

/**
 * @member {module:model/Issue} issue
 */
IssueChange.prototype['issue'] = undefined;

/**
 * @member {module:model/IssueChangeLinks} links
 */
IssueChange.prototype['links'] = undefined;

/**
 * @member {module:model/IssueChangeMessage} message
 */
IssueChange.prototype['message'] = undefined;

/**
 * @member {String} name
 */
IssueChange.prototype['name'] = undefined;

/**
 * @member {String} type
 */
IssueChange.prototype['type'] = undefined;

/**
 * @member {module:model/Account} user
 */
IssueChange.prototype['user'] = undefined;






export default IssueChange;

