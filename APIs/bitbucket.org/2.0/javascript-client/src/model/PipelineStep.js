/**
 * Bitbucket API
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@bitbucket.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ModelObject from './ModelObject';
import PipelineCommand from './PipelineCommand';
import PipelineImage from './PipelineImage';
import PipelineStepState from './PipelineStepState';

/**
 * The PipelineStep model module.
 * @module model/PipelineStep
 * @version 2.0
 */
class PipelineStep {
    /**
     * Constructs a new <code>PipelineStep</code>.
     * @alias module:model/PipelineStep
     * @extends module:model/ModelObject
     * @implements module:model/ModelObject
     * @param type {String} 
     */
    constructor(type) { 
        ModelObject.initialize(this, type);
        PipelineStep.initialize(this, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, type) { 
    }

    /**
     * Constructs a <code>PipelineStep</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PipelineStep} obj Optional instance to populate.
     * @return {module:model/PipelineStep} The populated <code>PipelineStep</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PipelineStep();
            ModelObject.constructFromObject(data, obj);
            ModelObject.constructFromObject(data, obj);

            if (data.hasOwnProperty('completed_on')) {
                obj['completed_on'] = ApiClient.convertToType(data['completed_on'], 'Date');
            }
            if (data.hasOwnProperty('image')) {
                obj['image'] = PipelineImage.constructFromObject(data['image']);
            }
            if (data.hasOwnProperty('script_commands')) {
                obj['script_commands'] = ApiClient.convertToType(data['script_commands'], [PipelineCommand]);
            }
            if (data.hasOwnProperty('setup_commands')) {
                obj['setup_commands'] = ApiClient.convertToType(data['setup_commands'], [PipelineCommand]);
            }
            if (data.hasOwnProperty('started_on')) {
                obj['started_on'] = ApiClient.convertToType(data['started_on'], 'Date');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = PipelineStepState.constructFromObject(data['state']);
            }
            if (data.hasOwnProperty('uuid')) {
                obj['uuid'] = ApiClient.convertToType(data['uuid'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PipelineStep</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PipelineStep</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PipelineStep.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `image`
        if (data['image']) { // data not null
          PipelineImage.validateJSON(data['image']);
        }
        if (data['script_commands']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['script_commands'])) {
                throw new Error("Expected the field `script_commands` to be an array in the JSON data but got " + data['script_commands']);
            }
            // validate the optional field `script_commands` (array)
            for (const item of data['script_commands']) {
                PipelineCommand.validateJSON(item);
            };
        }
        if (data['setup_commands']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['setup_commands'])) {
                throw new Error("Expected the field `setup_commands` to be an array in the JSON data but got " + data['setup_commands']);
            }
            // validate the optional field `setup_commands` (array)
            for (const item of data['setup_commands']) {
                PipelineCommand.validateJSON(item);
            };
        }
        // validate the optional field `state`
        if (data['state']) { // data not null
          PipelineStepState.validateJSON(data['state']);
        }
        // ensure the json data is a string
        if (data['uuid'] && !(typeof data['uuid'] === 'string' || data['uuid'] instanceof String)) {
            throw new Error("Expected the field `uuid` to be a primitive type in the JSON string but got " + data['uuid']);
        }

        return true;
    }


}

PipelineStep.RequiredProperties = ["type"];

/**
 * The timestamp when the step execution was completed. This is not set if the step is still in progress.
 * @member {Date} completed_on
 */
PipelineStep.prototype['completed_on'] = undefined;

/**
 * @member {module:model/PipelineImage} image
 */
PipelineStep.prototype['image'] = undefined;

/**
 * The list of build commands. These commands are executed in the build container.
 * @member {Array.<module:model/PipelineCommand>} script_commands
 */
PipelineStep.prototype['script_commands'] = undefined;

/**
 * The list of commands that are executed as part of the setup phase of the build. These commands are executed outside the build container.
 * @member {Array.<module:model/PipelineCommand>} setup_commands
 */
PipelineStep.prototype['setup_commands'] = undefined;

/**
 * The timestamp when the step execution was started. This is not set when the step hasn't executed yet.
 * @member {Date} started_on
 */
PipelineStep.prototype['started_on'] = undefined;

/**
 * @member {module:model/PipelineStepState} state
 */
PipelineStep.prototype['state'] = undefined;

/**
 * The UUID identifying the step.
 * @member {String} uuid
 */
PipelineStep.prototype['uuid'] = undefined;


// Implement ModelObject interface:
/**
 * @member {String} type
 */
ModelObject.prototype['type'] = undefined;




export default PipelineStep;

