/**
 * Bitbucket API
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@bitbucket.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Commit from './Commit';
import Ref from './Ref';
import RefLinks from './RefLinks';

/**
 * The Branch model module.
 * @module model/Branch
 * @version 2.0
 */
class Branch {
    /**
     * Constructs a new <code>Branch</code>.
     * @alias module:model/Branch
     * @implements module:model/Ref
     * @param type {String} 
     */
    constructor(type) { 
        Ref.initialize(this, type);
        Branch.initialize(this, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, type) { 
        obj['type'] = type;
    }

    /**
     * Constructs a <code>Branch</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Branch} obj Optional instance to populate.
     * @return {module:model/Branch} The populated <code>Branch</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Branch();
            Ref.constructFromObject(data, obj);

            if (data.hasOwnProperty('links')) {
                obj['links'] = RefLinks.constructFromObject(data['links']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('target')) {
                obj['target'] = Commit.constructFromObject(data['target']);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('default_merge_strategy')) {
                obj['default_merge_strategy'] = ApiClient.convertToType(data['default_merge_strategy'], 'String');
            }
            if (data.hasOwnProperty('merge_strategies')) {
                obj['merge_strategies'] = ApiClient.convertToType(data['merge_strategies'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Branch</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Branch</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Branch.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `links`
        if (data['links']) { // data not null
          RefLinks.validateJSON(data['links']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `target`
        if (data['target']) { // data not null
          Commit.validateJSON(data['target']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['default_merge_strategy'] && !(typeof data['default_merge_strategy'] === 'string' || data['default_merge_strategy'] instanceof String)) {
            throw new Error("Expected the field `default_merge_strategy` to be a primitive type in the JSON string but got " + data['default_merge_strategy']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['merge_strategies'])) {
            throw new Error("Expected the field `merge_strategies` to be an array in the JSON data but got " + data['merge_strategies']);
        }

        return true;
    }


}

Branch.RequiredProperties = ["type"];

/**
 * @member {module:model/RefLinks} links
 */
Branch.prototype['links'] = undefined;

/**
 * The name of the ref.
 * @member {String} name
 */
Branch.prototype['name'] = undefined;

/**
 * @member {module:model/Commit} target
 */
Branch.prototype['target'] = undefined;

/**
 * @member {String} type
 */
Branch.prototype['type'] = undefined;

/**
 * The default merge strategy for pull requests targeting this branch.
 * @member {String} default_merge_strategy
 */
Branch.prototype['default_merge_strategy'] = undefined;

/**
 * Available merge strategies for pull requests targeting this branch.
 * @member {Array.<module:model/Branch.MergeStrategiesEnum>} merge_strategies
 */
Branch.prototype['merge_strategies'] = undefined;


// Implement Ref interface:
/**
 * @member {module:model/RefLinks} links
 */
Ref.prototype['links'] = undefined;
/**
 * The name of the ref.
 * @member {String} name
 */
Ref.prototype['name'] = undefined;
/**
 * @member {module:model/Commit} target
 */
Ref.prototype['target'] = undefined;
/**
 * @member {String} type
 */
Ref.prototype['type'] = undefined;



/**
 * Allowed values for the <code>mergeStrategies</code> property.
 * @enum {String}
 * @readonly
 */
Branch['MergeStrategiesEnum'] = {

    /**
     * value: "merge_commit"
     * @const
     */
    "merge_commit": "merge_commit",

    /**
     * value: "squash"
     * @const
     */
    "squash": "squash",

    /**
     * value: "fast_forward"
     * @const
     */
    "fast_forward": "fast_forward"
};



export default Branch;

