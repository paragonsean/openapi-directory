/**
 * Bitbucket API
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@bitbucket.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BranchingModelSettingsBranchTypes from './BranchingModelSettingsBranchTypes';
import BranchingModelSettingsDevelopment from './BranchingModelSettingsDevelopment';
import BranchingModelSettingsLinks from './BranchingModelSettingsLinks';
import BranchingModelSettingsProduction from './BranchingModelSettingsProduction';
import ModelObject from './ModelObject';

/**
 * The BranchingModelSettings model module.
 * @module model/BranchingModelSettings
 * @version 2.0
 */
class BranchingModelSettings {
    /**
     * Constructs a new <code>BranchingModelSettings</code>.
     * @alias module:model/BranchingModelSettings
     * @extends module:model/ModelObject
     * @implements module:model/ModelObject
     * @param type {String} 
     */
    constructor(type) { 
        ModelObject.initialize(this, type);
        BranchingModelSettings.initialize(this, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, type) { 
    }

    /**
     * Constructs a <code>BranchingModelSettings</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BranchingModelSettings} obj Optional instance to populate.
     * @return {module:model/BranchingModelSettings} The populated <code>BranchingModelSettings</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BranchingModelSettings();
            ModelObject.constructFromObject(data, obj);
            ModelObject.constructFromObject(data, obj);

            if (data.hasOwnProperty('branch_types')) {
                obj['branch_types'] = ApiClient.convertToType(data['branch_types'], [BranchingModelSettingsBranchTypes]);
            }
            if (data.hasOwnProperty('development')) {
                obj['development'] = BranchingModelSettingsDevelopment.constructFromObject(data['development']);
            }
            if (data.hasOwnProperty('links')) {
                obj['links'] = BranchingModelSettingsLinks.constructFromObject(data['links']);
            }
            if (data.hasOwnProperty('production')) {
                obj['production'] = BranchingModelSettingsProduction.constructFromObject(data['production']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BranchingModelSettings</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BranchingModelSettings</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of BranchingModelSettings.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['branch_types']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['branch_types'])) {
                throw new Error("Expected the field `branch_types` to be an array in the JSON data but got " + data['branch_types']);
            }
            // validate the optional field `branch_types` (array)
            for (const item of data['branch_types']) {
                BranchingModelSettingsBranchTypes.validateJSON(item);
            };
        }
        // validate the optional field `development`
        if (data['development']) { // data not null
          BranchingModelSettingsDevelopment.validateJSON(data['development']);
        }
        // validate the optional field `links`
        if (data['links']) { // data not null
          BranchingModelSettingsLinks.validateJSON(data['links']);
        }
        // validate the optional field `production`
        if (data['production']) { // data not null
          BranchingModelSettingsProduction.validateJSON(data['production']);
        }

        return true;
    }


}

BranchingModelSettings.RequiredProperties = ["type"];

/**
 * @member {Array.<module:model/BranchingModelSettingsBranchTypes>} branch_types
 */
BranchingModelSettings.prototype['branch_types'] = undefined;

/**
 * @member {module:model/BranchingModelSettingsDevelopment} development
 */
BranchingModelSettings.prototype['development'] = undefined;

/**
 * @member {module:model/BranchingModelSettingsLinks} links
 */
BranchingModelSettings.prototype['links'] = undefined;

/**
 * @member {module:model/BranchingModelSettingsProduction} production
 */
BranchingModelSettings.prototype['production'] = undefined;


// Implement ModelObject interface:
/**
 * @member {String} type
 */
ModelObject.prototype['type'] = undefined;




export default BranchingModelSettings;

