/**
 * Bitbucket API
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@bitbucket.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Account from './Account';
import AccountLinks from './AccountLinks';

/**
 * The AppUser model module.
 * @module model/AppUser
 * @version 2.0
 */
class AppUser {
    /**
     * Constructs a new <code>AppUser</code>.
     * @alias module:model/AppUser
     * @extends module:model/Account
     * @implements module:model/Account
     * @param type {String} 
     */
    constructor(type) { 
        Account.initialize(this, type);
        AppUser.initialize(this, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, type) { 
    }

    /**
     * Constructs a <code>AppUser</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AppUser} obj Optional instance to populate.
     * @return {module:model/AppUser} The populated <code>AppUser</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AppUser();
            Account.constructFromObject(data, obj);
            Account.constructFromObject(data, obj);

            if (data.hasOwnProperty('account_id')) {
                obj['account_id'] = ApiClient.convertToType(data['account_id'], 'String');
            }
            if (data.hasOwnProperty('account_status')) {
                obj['account_status'] = ApiClient.convertToType(data['account_status'], 'String');
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AppUser</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AppUser</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of AppUser.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['account_id'] && !(typeof data['account_id'] === 'string' || data['account_id'] instanceof String)) {
            throw new Error("Expected the field `account_id` to be a primitive type in the JSON string but got " + data['account_id']);
        }
        // ensure the json data is a string
        if (data['account_status'] && !(typeof data['account_status'] === 'string' || data['account_status'] instanceof String)) {
            throw new Error("Expected the field `account_status` to be a primitive type in the JSON string but got " + data['account_status']);
        }
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }

        return true;
    }


}

AppUser.RequiredProperties = ["type"];

/**
 * The user's Atlassian account ID.
 * @member {String} account_id
 */
AppUser.prototype['account_id'] = undefined;

/**
 * The status of the account. Currently the only possible value is \"active\", but more values may be added in the future.
 * @member {String} account_status
 */
AppUser.prototype['account_status'] = undefined;

/**
 * The kind of App User.
 * @member {String} kind
 */
AppUser.prototype['kind'] = undefined;


// Implement Account interface:
/**
 * @member {String} type
 */
Account.prototype['type'] = undefined;
/**
 * @member {Date} created_on
 */
Account.prototype['created_on'] = undefined;
/**
 * @member {String} display_name
 */
Account.prototype['display_name'] = undefined;
/**
 * @member {module:model/AccountLinks} links
 */
Account.prototype['links'] = undefined;
/**
 * @member {String} username
 */
Account.prototype['username'] = undefined;
/**
 * @member {String} uuid
 */
Account.prototype['uuid'] = undefined;




export default AppUser;

