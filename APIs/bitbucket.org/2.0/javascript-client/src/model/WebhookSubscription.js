/**
 * Bitbucket API
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@bitbucket.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ModelObject from './ModelObject';

/**
 * The WebhookSubscription model module.
 * @module model/WebhookSubscription
 * @version 2.0
 */
class WebhookSubscription {
    /**
     * Constructs a new <code>WebhookSubscription</code>.
     * @alias module:model/WebhookSubscription
     * @extends module:model/ModelObject
     * @implements module:model/ModelObject
     * @param type {String} 
     */
    constructor(type) { 
        ModelObject.initialize(this, type);
        WebhookSubscription.initialize(this, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, type) { 
    }

    /**
     * Constructs a <code>WebhookSubscription</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/WebhookSubscription} obj Optional instance to populate.
     * @return {module:model/WebhookSubscription} The populated <code>WebhookSubscription</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new WebhookSubscription();
            ModelObject.constructFromObject(data, obj);
            ModelObject.constructFromObject(data, obj);

            if (data.hasOwnProperty('active')) {
                obj['active'] = ApiClient.convertToType(data['active'], 'Boolean');
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Date');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('events')) {
                obj['events'] = ApiClient.convertToType(data['events'], ['String']);
            }
            if (data.hasOwnProperty('subject')) {
                obj['subject'] = Object.constructFromObject(data['subject']);
            }
            if (data.hasOwnProperty('subject_type')) {
                obj['subject_type'] = ApiClient.convertToType(data['subject_type'], 'String');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
            if (data.hasOwnProperty('uuid')) {
                obj['uuid'] = ApiClient.convertToType(data['uuid'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>WebhookSubscription</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>WebhookSubscription</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of WebhookSubscription.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['events'])) {
            throw new Error("Expected the field `events` to be an array in the JSON data but got " + data['events']);
        }
        // ensure the json data is a string
        if (data['subject_type'] && !(typeof data['subject_type'] === 'string' || data['subject_type'] instanceof String)) {
            throw new Error("Expected the field `subject_type` to be a primitive type in the JSON string but got " + data['subject_type']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }
        // ensure the json data is a string
        if (data['uuid'] && !(typeof data['uuid'] === 'string' || data['uuid'] instanceof String)) {
            throw new Error("Expected the field `uuid` to be a primitive type in the JSON string but got " + data['uuid']);
        }

        return true;
    }


}

WebhookSubscription.RequiredProperties = ["type"];

/**
 * @member {Boolean} active
 */
WebhookSubscription.prototype['active'] = undefined;

/**
 * @member {Date} created_at
 */
WebhookSubscription.prototype['created_at'] = undefined;

/**
 * A user-defined description of the webhook.
 * @member {String} description
 */
WebhookSubscription.prototype['description'] = undefined;

/**
 * The events this webhook is subscribed to.
 * @member {Array.<module:model/WebhookSubscription.EventsEnum>} events
 */
WebhookSubscription.prototype['events'] = undefined;

/**
 * @member {Object} subject
 */
WebhookSubscription.prototype['subject'] = undefined;

/**
 * The type of entity. Set to either `repository` or `workspace` based on where the subscription is defined.
 * @member {module:model/WebhookSubscription.SubjectTypeEnum} subject_type
 */
WebhookSubscription.prototype['subject_type'] = undefined;

/**
 * The URL events get delivered to.
 * @member {String} url
 */
WebhookSubscription.prototype['url'] = undefined;

/**
 * The webhook's id
 * @member {String} uuid
 */
WebhookSubscription.prototype['uuid'] = undefined;


// Implement ModelObject interface:
/**
 * @member {String} type
 */
ModelObject.prototype['type'] = undefined;



/**
 * Allowed values for the <code>events</code> property.
 * @enum {String}
 * @readonly
 */
WebhookSubscription['EventsEnum'] = {

    /**
     * value: "pullrequest:changes_request_removed"
     * @const
     */
    "pullrequest:changes_request_removed": "pullrequest:changes_request_removed",

    /**
     * value: "issue:comment_created"
     * @const
     */
    "issue:comment_created": "issue:comment_created",

    /**
     * value: "repo:push"
     * @const
     */
    "repo:push": "repo:push",

    /**
     * value: "repo:commit_status_updated"
     * @const
     */
    "repo:commit_status_updated": "repo:commit_status_updated",

    /**
     * value: "repo:imported"
     * @const
     */
    "repo:imported": "repo:imported",

    /**
     * value: "pullrequest:unapproved"
     * @const
     */
    "pullrequest:unapproved": "pullrequest:unapproved",

    /**
     * value: "repo:updated"
     * @const
     */
    "repo:updated": "repo:updated",

    /**
     * value: "pullrequest:rejected"
     * @const
     */
    "pullrequest:rejected": "pullrequest:rejected",

    /**
     * value: "pullrequest:fulfilled"
     * @const
     */
    "pullrequest:fulfilled": "pullrequest:fulfilled",

    /**
     * value: "pullrequest:created"
     * @const
     */
    "pullrequest:created": "pullrequest:created",

    /**
     * value: "pullrequest:approved"
     * @const
     */
    "pullrequest:approved": "pullrequest:approved",

    /**
     * value: "repo:transfer"
     * @const
     */
    "repo:transfer": "repo:transfer",

    /**
     * value: "repo:commit_status_created"
     * @const
     */
    "repo:commit_status_created": "repo:commit_status_created",

    /**
     * value: "repo:fork"
     * @const
     */
    "repo:fork": "repo:fork",

    /**
     * value: "issue:updated"
     * @const
     */
    "issue:updated": "issue:updated",

    /**
     * value: "project:updated"
     * @const
     */
    "project:updated": "project:updated",

    /**
     * value: "repo:created"
     * @const
     */
    "repo:created": "repo:created",

    /**
     * value: "issue:created"
     * @const
     */
    "issue:created": "issue:created",

    /**
     * value: "repo:commit_comment_created"
     * @const
     */
    "repo:commit_comment_created": "repo:commit_comment_created",

    /**
     * value: "pullrequest:updated"
     * @const
     */
    "pullrequest:updated": "pullrequest:updated",

    /**
     * value: "repo:deleted"
     * @const
     */
    "repo:deleted": "repo:deleted",

    /**
     * value: "pullrequest:comment_updated"
     * @const
     */
    "pullrequest:comment_updated": "pullrequest:comment_updated",

    /**
     * value: "pullrequest:changes_request_created"
     * @const
     */
    "pullrequest:changes_request_created": "pullrequest:changes_request_created",

    /**
     * value: "pullrequest:comment_deleted"
     * @const
     */
    "pullrequest:comment_deleted": "pullrequest:comment_deleted",

    /**
     * value: "pullrequest:comment_created"
     * @const
     */
    "pullrequest:comment_created": "pullrequest:comment_created"
};


/**
 * Allowed values for the <code>subject_type</code> property.
 * @enum {String}
 * @readonly
 */
WebhookSubscription['SubjectTypeEnum'] = {

    /**
     * value: "repository"
     * @const
     */
    "repository": "repository",

    /**
     * value: "workspace"
     * @const
     */
    "workspace": "workspace"
};



export default WebhookSubscription;

