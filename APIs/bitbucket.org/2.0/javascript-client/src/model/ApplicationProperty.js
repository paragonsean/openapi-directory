/**
 * Bitbucket API
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@bitbucket.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ApplicationProperty model module.
 * @module model/ApplicationProperty
 * @version 2.0
 */
class ApplicationProperty {
    /**
     * Constructs a new <code>ApplicationProperty</code>.
     * An application property. It is a caller defined JSON object that Bitbucket will store and return.  The &#x60;_attributes&#x60; field at its top level can be used to control who is allowed to read and update the property.  The keys of the JSON object must match an allowed pattern. For details,  see [Application properties](/cloud/bitbucket/application-properties/). 
     * @alias module:model/ApplicationProperty
     * @extends Object
     */
    constructor() { 
        
        ApplicationProperty.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ApplicationProperty</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ApplicationProperty} obj Optional instance to populate.
     * @return {module:model/ApplicationProperty} The populated <code>ApplicationProperty</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ApplicationProperty();

            ApiClient.constructFromObject(data, obj, 'Object');
            

            if (data.hasOwnProperty('_attributes')) {
                obj['_attributes'] = ApiClient.convertToType(data['_attributes'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ApplicationProperty</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ApplicationProperty</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['_attributes'])) {
            throw new Error("Expected the field `_attributes` to be an array in the JSON data but got " + data['_attributes']);
        }

        return true;
    }


}



/**
 * @member {Array.<module:model/ApplicationProperty.AttributesEnum>} _attributes
 */
ApplicationProperty.prototype['_attributes'] = undefined;





/**
 * Allowed values for the <code>attributes</code> property.
 * @enum {String}
 * @readonly
 */
ApplicationProperty['AttributesEnum'] = {

    /**
     * value: "public"
     * @const
     */
    "public": "public",

    /**
     * value: "read_only"
     * @const
     */
    "read_only": "read_only"
};



export default ApplicationProperty;

