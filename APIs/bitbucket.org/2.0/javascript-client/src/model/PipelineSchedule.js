/**
 * Bitbucket API
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@bitbucket.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ModelObject from './ModelObject';
import PipelineRefTarget from './PipelineRefTarget';

/**
 * The PipelineSchedule model module.
 * @module model/PipelineSchedule
 * @version 2.0
 */
class PipelineSchedule {
    /**
     * Constructs a new <code>PipelineSchedule</code>.
     * @alias module:model/PipelineSchedule
     * @extends module:model/ModelObject
     * @implements module:model/ModelObject
     * @param type {String} 
     */
    constructor(type) { 
        ModelObject.initialize(this, type);
        PipelineSchedule.initialize(this, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, type) { 
    }

    /**
     * Constructs a <code>PipelineSchedule</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PipelineSchedule} obj Optional instance to populate.
     * @return {module:model/PipelineSchedule} The populated <code>PipelineSchedule</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PipelineSchedule();
            ModelObject.constructFromObject(data, obj);
            ModelObject.constructFromObject(data, obj);

            if (data.hasOwnProperty('created_on')) {
                obj['created_on'] = ApiClient.convertToType(data['created_on'], 'Date');
            }
            if (data.hasOwnProperty('cron_pattern')) {
                obj['cron_pattern'] = ApiClient.convertToType(data['cron_pattern'], 'String');
            }
            if (data.hasOwnProperty('enabled')) {
                obj['enabled'] = ApiClient.convertToType(data['enabled'], 'Boolean');
            }
            if (data.hasOwnProperty('target')) {
                obj['target'] = PipelineRefTarget.constructFromObject(data['target']);
            }
            if (data.hasOwnProperty('updated_on')) {
                obj['updated_on'] = ApiClient.convertToType(data['updated_on'], 'Date');
            }
            if (data.hasOwnProperty('uuid')) {
                obj['uuid'] = ApiClient.convertToType(data['uuid'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PipelineSchedule</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PipelineSchedule</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PipelineSchedule.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['cron_pattern'] && !(typeof data['cron_pattern'] === 'string' || data['cron_pattern'] instanceof String)) {
            throw new Error("Expected the field `cron_pattern` to be a primitive type in the JSON string but got " + data['cron_pattern']);
        }
        // validate the optional field `target`
        if (data['target']) { // data not null
          PipelineRefTarget.validateJSON(data['target']);
        }
        // ensure the json data is a string
        if (data['uuid'] && !(typeof data['uuid'] === 'string' || data['uuid'] instanceof String)) {
            throw new Error("Expected the field `uuid` to be a primitive type in the JSON string but got " + data['uuid']);
        }

        return true;
    }


}

PipelineSchedule.RequiredProperties = ["type"];

/**
 * The timestamp when the schedule was created.
 * @member {Date} created_on
 */
PipelineSchedule.prototype['created_on'] = undefined;

/**
 * The cron expression with second precision (7 fields) that the schedule applies. For example, for expression: 0 0 12 * * ? *, will execute at 12pm UTC every day.
 * @member {String} cron_pattern
 */
PipelineSchedule.prototype['cron_pattern'] = undefined;

/**
 * Whether the schedule is enabled.
 * @member {Boolean} enabled
 */
PipelineSchedule.prototype['enabled'] = undefined;

/**
 * @member {module:model/PipelineRefTarget} target
 */
PipelineSchedule.prototype['target'] = undefined;

/**
 * The timestamp when the schedule was updated.
 * @member {Date} updated_on
 */
PipelineSchedule.prototype['updated_on'] = undefined;

/**
 * The UUID identifying the schedule.
 * @member {String} uuid
 */
PipelineSchedule.prototype['uuid'] = undefined;


// Implement ModelObject interface:
/**
 * @member {String} type
 */
ModelObject.prototype['type'] = undefined;




export default PipelineSchedule;

