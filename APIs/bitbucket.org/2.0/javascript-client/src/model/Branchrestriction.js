/**
 * Bitbucket API
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@bitbucket.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Account from './Account';
import Group from './Group';
import ModelObject from './ModelObject';

/**
 * The Branchrestriction model module.
 * @module model/Branchrestriction
 * @version 2.0
 */
class Branchrestriction {
    /**
     * Constructs a new <code>Branchrestriction</code>.
     * @alias module:model/Branchrestriction
     * @extends module:model/ModelObject
     * @implements module:model/ModelObject
     * @param type {String} 
     */
    constructor(type) { 
        ModelObject.initialize(this, type);
        Branchrestriction.initialize(this, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, type) { 
    }

    /**
     * Constructs a <code>Branchrestriction</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Branchrestriction} obj Optional instance to populate.
     * @return {module:model/Branchrestriction} The populated <code>Branchrestriction</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Branchrestriction();
            ModelObject.constructFromObject(data, obj);
            ModelObject.constructFromObject(data, obj);

            if (data.hasOwnProperty('groups')) {
                obj['groups'] = ApiClient.convertToType(data['groups'], [Group]);
            }
            if (data.hasOwnProperty('users')) {
                obj['users'] = ApiClient.convertToType(data['users'], [Account]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Branchrestriction</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Branchrestriction</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Branchrestriction.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['groups']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['groups'])) {
                throw new Error("Expected the field `groups` to be an array in the JSON data but got " + data['groups']);
            }
            // validate the optional field `groups` (array)
            for (const item of data['groups']) {
                Group.validateJSON(item);
            };
        }
        if (data['users']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['users'])) {
                throw new Error("Expected the field `users` to be an array in the JSON data but got " + data['users']);
            }
            // validate the optional field `users` (array)
            for (const item of data['users']) {
                Account.validateJSON(item);
            };
        }

        return true;
    }


}

Branchrestriction.RequiredProperties = ["type"];

/**
 * @member {Array.<module:model/Group>} groups
 */
Branchrestriction.prototype['groups'] = undefined;

/**
 * @member {Array.<module:model/Account>} users
 */
Branchrestriction.prototype['users'] = undefined;


// Implement ModelObject interface:
/**
 * @member {String} type
 */
ModelObject.prototype['type'] = undefined;




export default Branchrestriction;

