/**
 * Bitbucket API
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@bitbucket.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ModelObject from './ModelObject';
import ReportData from './ReportData';

/**
 * The Report model module.
 * @module model/Report
 * @version 2.0
 */
class Report {
    /**
     * Constructs a new <code>Report</code>.
     * @alias module:model/Report
     * @extends module:model/ModelObject
     * @implements module:model/ModelObject
     * @param type {String} 
     */
    constructor(type) { 
        ModelObject.initialize(this, type);
        Report.initialize(this, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, type) { 
    }

    /**
     * Constructs a <code>Report</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Report} obj Optional instance to populate.
     * @return {module:model/Report} The populated <code>Report</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Report();
            ModelObject.constructFromObject(data, obj);
            ModelObject.constructFromObject(data, obj);

            if (data.hasOwnProperty('created_on')) {
                obj['created_on'] = ApiClient.convertToType(data['created_on'], 'Date');
            }
            if (data.hasOwnProperty('data')) {
                obj['data'] = ApiClient.convertToType(data['data'], [ReportData]);
            }
            if (data.hasOwnProperty('details')) {
                obj['details'] = ApiClient.convertToType(data['details'], 'String');
            }
            if (data.hasOwnProperty('external_id')) {
                obj['external_id'] = ApiClient.convertToType(data['external_id'], 'String');
            }
            if (data.hasOwnProperty('link')) {
                obj['link'] = ApiClient.convertToType(data['link'], 'String');
            }
            if (data.hasOwnProperty('logo_url')) {
                obj['logo_url'] = ApiClient.convertToType(data['logo_url'], 'String');
            }
            if (data.hasOwnProperty('remote_link_enabled')) {
                obj['remote_link_enabled'] = ApiClient.convertToType(data['remote_link_enabled'], 'Boolean');
            }
            if (data.hasOwnProperty('report_type')) {
                obj['report_type'] = ApiClient.convertToType(data['report_type'], 'String');
            }
            if (data.hasOwnProperty('reporter')) {
                obj['reporter'] = ApiClient.convertToType(data['reporter'], 'String');
            }
            if (data.hasOwnProperty('result')) {
                obj['result'] = ApiClient.convertToType(data['result'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('updated_on')) {
                obj['updated_on'] = ApiClient.convertToType(data['updated_on'], 'Date');
            }
            if (data.hasOwnProperty('uuid')) {
                obj['uuid'] = ApiClient.convertToType(data['uuid'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Report</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Report</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Report.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['data']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['data'])) {
                throw new Error("Expected the field `data` to be an array in the JSON data but got " + data['data']);
            }
            // validate the optional field `data` (array)
            for (const item of data['data']) {
                ReportData.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['details'] && !(typeof data['details'] === 'string' || data['details'] instanceof String)) {
            throw new Error("Expected the field `details` to be a primitive type in the JSON string but got " + data['details']);
        }
        // ensure the json data is a string
        if (data['external_id'] && !(typeof data['external_id'] === 'string' || data['external_id'] instanceof String)) {
            throw new Error("Expected the field `external_id` to be a primitive type in the JSON string but got " + data['external_id']);
        }
        // ensure the json data is a string
        if (data['link'] && !(typeof data['link'] === 'string' || data['link'] instanceof String)) {
            throw new Error("Expected the field `link` to be a primitive type in the JSON string but got " + data['link']);
        }
        // ensure the json data is a string
        if (data['logo_url'] && !(typeof data['logo_url'] === 'string' || data['logo_url'] instanceof String)) {
            throw new Error("Expected the field `logo_url` to be a primitive type in the JSON string but got " + data['logo_url']);
        }
        // ensure the json data is a string
        if (data['report_type'] && !(typeof data['report_type'] === 'string' || data['report_type'] instanceof String)) {
            throw new Error("Expected the field `report_type` to be a primitive type in the JSON string but got " + data['report_type']);
        }
        // ensure the json data is a string
        if (data['reporter'] && !(typeof data['reporter'] === 'string' || data['reporter'] instanceof String)) {
            throw new Error("Expected the field `reporter` to be a primitive type in the JSON string but got " + data['reporter']);
        }
        // ensure the json data is a string
        if (data['result'] && !(typeof data['result'] === 'string' || data['result'] instanceof String)) {
            throw new Error("Expected the field `result` to be a primitive type in the JSON string but got " + data['result']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // ensure the json data is a string
        if (data['uuid'] && !(typeof data['uuid'] === 'string' || data['uuid'] instanceof String)) {
            throw new Error("Expected the field `uuid` to be a primitive type in the JSON string but got " + data['uuid']);
        }

        return true;
    }


}

Report.RequiredProperties = ["type"];

/**
 * The timestamp when the report was created.
 * @member {Date} created_on
 */
Report.prototype['created_on'] = undefined;

/**
 * An array of data fields to display information on the report. Maximum 10.
 * @member {Array.<module:model/ReportData>} data
 */
Report.prototype['data'] = undefined;

/**
 * A string to describe the purpose of the report.
 * @member {String} details
 */
Report.prototype['details'] = undefined;

/**
 * ID of the report provided by the report creator. It can be used to identify the report as an alternative to it's generated uuid. It is not used by Bitbucket, but only by the report creator for updating or deleting this specific report. Needs to be unique.
 * @member {String} external_id
 */
Report.prototype['external_id'] = undefined;

/**
 * A URL linking to the results of the report in an external tool.
 * @member {String} link
 */
Report.prototype['link'] = undefined;

/**
 * A URL to the report logo. If none is provided, the default insights logo will be used.
 * @member {String} logo_url
 */
Report.prototype['logo_url'] = undefined;

/**
 * If enabled, a remote link is created in Jira for the issue associated with the commit the report belongs to.
 * @member {Boolean} remote_link_enabled
 */
Report.prototype['remote_link_enabled'] = undefined;

/**
 * The type of the report.
 * @member {module:model/Report.ReportTypeEnum} report_type
 */
Report.prototype['report_type'] = undefined;

/**
 * A string to describe the tool or company who created the report.
 * @member {String} reporter
 */
Report.prototype['reporter'] = undefined;

/**
 * The state of the report. May be set to PENDING and later updated.
 * @member {module:model/Report.ResultEnum} result
 */
Report.prototype['result'] = undefined;

/**
 * The title of the report.
 * @member {String} title
 */
Report.prototype['title'] = undefined;

/**
 * The timestamp when the report was updated.
 * @member {Date} updated_on
 */
Report.prototype['updated_on'] = undefined;

/**
 * The UUID that can be used to identify the report.
 * @member {String} uuid
 */
Report.prototype['uuid'] = undefined;


// Implement ModelObject interface:
/**
 * @member {String} type
 */
ModelObject.prototype['type'] = undefined;



/**
 * Allowed values for the <code>report_type</code> property.
 * @enum {String}
 * @readonly
 */
Report['ReportTypeEnum'] = {

    /**
     * value: "SECURITY"
     * @const
     */
    "SECURITY": "SECURITY",

    /**
     * value: "COVERAGE"
     * @const
     */
    "COVERAGE": "COVERAGE",

    /**
     * value: "TEST"
     * @const
     */
    "TEST": "TEST",

    /**
     * value: "BUG"
     * @const
     */
    "BUG": "BUG"
};


/**
 * Allowed values for the <code>result</code> property.
 * @enum {String}
 * @readonly
 */
Report['ResultEnum'] = {

    /**
     * value: "PASSED"
     * @const
     */
    "PASSED": "PASSED",

    /**
     * value: "FAILED"
     * @const
     */
    "FAILED": "FAILED",

    /**
     * value: "PENDING"
     * @const
     */
    "PENDING": "PENDING"
};



export default Report;

