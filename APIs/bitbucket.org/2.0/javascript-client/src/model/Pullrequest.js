/**
 * Bitbucket API
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@bitbucket.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Account from './Account';
import BaseCommitSummary from './BaseCommitSummary';
import ModelObject from './ModelObject';
import Participant from './Participant';
import PullRequestCommit from './PullRequestCommit';
import PullRequestLinks from './PullRequestLinks';
import PullrequestEndpoint from './PullrequestEndpoint';
import RenderedPullRequestMarkup from './RenderedPullRequestMarkup';

/**
 * The Pullrequest model module.
 * @module model/Pullrequest
 * @version 2.0
 */
class Pullrequest {
    /**
     * Constructs a new <code>Pullrequest</code>.
     * @alias module:model/Pullrequest
     * @extends module:model/ModelObject
     * @implements module:model/ModelObject
     * @param type {String} 
     */
    constructor(type) { 
        ModelObject.initialize(this, type);
        Pullrequest.initialize(this, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, type) { 
    }

    /**
     * Constructs a <code>Pullrequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Pullrequest} obj Optional instance to populate.
     * @return {module:model/Pullrequest} The populated <code>Pullrequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Pullrequest();
            ModelObject.constructFromObject(data, obj);
            ModelObject.constructFromObject(data, obj);

            if (data.hasOwnProperty('author')) {
                obj['author'] = Account.constructFromObject(data['author']);
            }
            if (data.hasOwnProperty('close_source_branch')) {
                obj['close_source_branch'] = ApiClient.convertToType(data['close_source_branch'], 'Boolean');
            }
            if (data.hasOwnProperty('closed_by')) {
                obj['closed_by'] = Account.constructFromObject(data['closed_by']);
            }
            if (data.hasOwnProperty('comment_count')) {
                obj['comment_count'] = ApiClient.convertToType(data['comment_count'], 'Number');
            }
            if (data.hasOwnProperty('created_on')) {
                obj['created_on'] = ApiClient.convertToType(data['created_on'], 'Date');
            }
            if (data.hasOwnProperty('destination')) {
                obj['destination'] = PullrequestEndpoint.constructFromObject(data['destination']);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('links')) {
                obj['links'] = PullRequestLinks.constructFromObject(data['links']);
            }
            if (data.hasOwnProperty('merge_commit')) {
                obj['merge_commit'] = PullRequestCommit.constructFromObject(data['merge_commit']);
            }
            if (data.hasOwnProperty('participants')) {
                obj['participants'] = ApiClient.convertToType(data['participants'], [Participant]);
            }
            if (data.hasOwnProperty('reason')) {
                obj['reason'] = ApiClient.convertToType(data['reason'], 'String');
            }
            if (data.hasOwnProperty('rendered')) {
                obj['rendered'] = RenderedPullRequestMarkup.constructFromObject(data['rendered']);
            }
            if (data.hasOwnProperty('reviewers')) {
                obj['reviewers'] = ApiClient.convertToType(data['reviewers'], [Account]);
            }
            if (data.hasOwnProperty('source')) {
                obj['source'] = PullrequestEndpoint.constructFromObject(data['source']);
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('summary')) {
                obj['summary'] = BaseCommitSummary.constructFromObject(data['summary']);
            }
            if (data.hasOwnProperty('task_count')) {
                obj['task_count'] = ApiClient.convertToType(data['task_count'], 'Number');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('updated_on')) {
                obj['updated_on'] = ApiClient.convertToType(data['updated_on'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Pullrequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Pullrequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Pullrequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `author`
        if (data['author']) { // data not null
          Account.validateJSON(data['author']);
        }
        // validate the optional field `closed_by`
        if (data['closed_by']) { // data not null
          Account.validateJSON(data['closed_by']);
        }
        // validate the optional field `destination`
        if (data['destination']) { // data not null
          PullrequestEndpoint.validateJSON(data['destination']);
        }
        // validate the optional field `links`
        if (data['links']) { // data not null
          PullRequestLinks.validateJSON(data['links']);
        }
        // validate the optional field `merge_commit`
        if (data['merge_commit']) { // data not null
          PullRequestCommit.validateJSON(data['merge_commit']);
        }
        if (data['participants']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['participants'])) {
                throw new Error("Expected the field `participants` to be an array in the JSON data but got " + data['participants']);
            }
            // validate the optional field `participants` (array)
            for (const item of data['participants']) {
                Participant.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['reason'] && !(typeof data['reason'] === 'string' || data['reason'] instanceof String)) {
            throw new Error("Expected the field `reason` to be a primitive type in the JSON string but got " + data['reason']);
        }
        // validate the optional field `rendered`
        if (data['rendered']) { // data not null
          RenderedPullRequestMarkup.validateJSON(data['rendered']);
        }
        if (data['reviewers']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['reviewers'])) {
                throw new Error("Expected the field `reviewers` to be an array in the JSON data but got " + data['reviewers']);
            }
            // validate the optional field `reviewers` (array)
            for (const item of data['reviewers']) {
                Account.validateJSON(item);
            };
        }
        // validate the optional field `source`
        if (data['source']) { // data not null
          PullrequestEndpoint.validateJSON(data['source']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // validate the optional field `summary`
        if (data['summary']) { // data not null
          BaseCommitSummary.validateJSON(data['summary']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }

        return true;
    }


}

Pullrequest.RequiredProperties = ["type"];

/**
 * @member {module:model/Account} author
 */
Pullrequest.prototype['author'] = undefined;

/**
 * A boolean flag indicating if merging the pull request closes the source branch.
 * @member {Boolean} close_source_branch
 */
Pullrequest.prototype['close_source_branch'] = undefined;

/**
 * @member {module:model/Account} closed_by
 */
Pullrequest.prototype['closed_by'] = undefined;

/**
 * The number of comments for a specific pull request.
 * @member {Number} comment_count
 */
Pullrequest.prototype['comment_count'] = undefined;

/**
 * The ISO8601 timestamp the request was created.
 * @member {Date} created_on
 */
Pullrequest.prototype['created_on'] = undefined;

/**
 * @member {module:model/PullrequestEndpoint} destination
 */
Pullrequest.prototype['destination'] = undefined;

/**
 * The pull request's unique ID. Note that pull request IDs are only unique within their associated repository.
 * @member {Number} id
 */
Pullrequest.prototype['id'] = undefined;

/**
 * @member {module:model/PullRequestLinks} links
 */
Pullrequest.prototype['links'] = undefined;

/**
 * @member {module:model/PullRequestCommit} merge_commit
 */
Pullrequest.prototype['merge_commit'] = undefined;

/**
 *         The list of users that are collaborating on this pull request.         Collaborators are user that:          * are added to the pull request as a reviewer (part of the reviewers           list)         * are not explicit reviewers, but have commented on the pull request         * are not explicit reviewers, but have approved the pull request          Each user is wrapped in an object that indicates the user's role and         whether they have approved the pull request. For performance reasons,         the API only returns this list when an API requests a pull request by         id.         
 * @member {Array.<module:model/Participant>} participants
 */
Pullrequest.prototype['participants'] = undefined;

/**
 * Explains why a pull request was declined. This field is only applicable to pull requests in rejected state.
 * @member {String} reason
 */
Pullrequest.prototype['reason'] = undefined;

/**
 * @member {module:model/RenderedPullRequestMarkup} rendered
 */
Pullrequest.prototype['rendered'] = undefined;

/**
 * The list of users that were added as reviewers on this pull request when it was created. For performance reasons, the API only includes this list on a pull request's `self` URL.
 * @member {Array.<module:model/Account>} reviewers
 */
Pullrequest.prototype['reviewers'] = undefined;

/**
 * @member {module:model/PullrequestEndpoint} source
 */
Pullrequest.prototype['source'] = undefined;

/**
 * The pull request's current status.
 * @member {module:model/Pullrequest.StateEnum} state
 */
Pullrequest.prototype['state'] = undefined;

/**
 * @member {module:model/BaseCommitSummary} summary
 */
Pullrequest.prototype['summary'] = undefined;

/**
 * The number of open tasks for a specific pull request.
 * @member {Number} task_count
 */
Pullrequest.prototype['task_count'] = undefined;

/**
 * Title of the pull request.
 * @member {String} title
 */
Pullrequest.prototype['title'] = undefined;

/**
 * The ISO8601 timestamp the request was last updated.
 * @member {Date} updated_on
 */
Pullrequest.prototype['updated_on'] = undefined;


// Implement ModelObject interface:
/**
 * @member {String} type
 */
ModelObject.prototype['type'] = undefined;



/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
Pullrequest['StateEnum'] = {

    /**
     * value: "OPEN"
     * @const
     */
    "OPEN": "OPEN",

    /**
     * value: "MERGED"
     * @const
     */
    "MERGED": "MERGED",

    /**
     * value: "DECLINED"
     * @const
     */
    "DECLINED": "DECLINED",

    /**
     * value: "SUPERSEDED"
     * @const
     */
    "SUPERSEDED": "SUPERSEDED"
};



export default Pullrequest;

