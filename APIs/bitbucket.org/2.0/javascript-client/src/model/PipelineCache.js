/**
 * Bitbucket API
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@bitbucket.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ModelObject from './ModelObject';

/**
 * The PipelineCache model module.
 * @module model/PipelineCache
 * @version 2.0
 */
class PipelineCache {
    /**
     * Constructs a new <code>PipelineCache</code>.
     * @alias module:model/PipelineCache
     * @extends module:model/ModelObject
     * @implements module:model/ModelObject
     * @param type {String} 
     */
    constructor(type) { 
        ModelObject.initialize(this, type);
        PipelineCache.initialize(this, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, type) { 
    }

    /**
     * Constructs a <code>PipelineCache</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PipelineCache} obj Optional instance to populate.
     * @return {module:model/PipelineCache} The populated <code>PipelineCache</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PipelineCache();
            ModelObject.constructFromObject(data, obj);
            ModelObject.constructFromObject(data, obj);

            if (data.hasOwnProperty('created_on')) {
                obj['created_on'] = ApiClient.convertToType(data['created_on'], 'Date');
            }
            if (data.hasOwnProperty('file_size_bytes')) {
                obj['file_size_bytes'] = ApiClient.convertToType(data['file_size_bytes'], 'Number');
            }
            if (data.hasOwnProperty('key_hash')) {
                obj['key_hash'] = ApiClient.convertToType(data['key_hash'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('path')) {
                obj['path'] = ApiClient.convertToType(data['path'], 'String');
            }
            if (data.hasOwnProperty('pipeline_uuid')) {
                obj['pipeline_uuid'] = ApiClient.convertToType(data['pipeline_uuid'], 'String');
            }
            if (data.hasOwnProperty('step_uuid')) {
                obj['step_uuid'] = ApiClient.convertToType(data['step_uuid'], 'String');
            }
            if (data.hasOwnProperty('uuid')) {
                obj['uuid'] = ApiClient.convertToType(data['uuid'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PipelineCache</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PipelineCache</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PipelineCache.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['key_hash'] && !(typeof data['key_hash'] === 'string' || data['key_hash'] instanceof String)) {
            throw new Error("Expected the field `key_hash` to be a primitive type in the JSON string but got " + data['key_hash']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['path'] && !(typeof data['path'] === 'string' || data['path'] instanceof String)) {
            throw new Error("Expected the field `path` to be a primitive type in the JSON string but got " + data['path']);
        }
        // ensure the json data is a string
        if (data['pipeline_uuid'] && !(typeof data['pipeline_uuid'] === 'string' || data['pipeline_uuid'] instanceof String)) {
            throw new Error("Expected the field `pipeline_uuid` to be a primitive type in the JSON string but got " + data['pipeline_uuid']);
        }
        // ensure the json data is a string
        if (data['step_uuid'] && !(typeof data['step_uuid'] === 'string' || data['step_uuid'] instanceof String)) {
            throw new Error("Expected the field `step_uuid` to be a primitive type in the JSON string but got " + data['step_uuid']);
        }
        // ensure the json data is a string
        if (data['uuid'] && !(typeof data['uuid'] === 'string' || data['uuid'] instanceof String)) {
            throw new Error("Expected the field `uuid` to be a primitive type in the JSON string but got " + data['uuid']);
        }

        return true;
    }


}

PipelineCache.RequiredProperties = ["type"];

/**
 * The timestamp when the cache was created.
 * @member {Date} created_on
 */
PipelineCache.prototype['created_on'] = undefined;

/**
 * The size of the file containing the archive of the cache.
 * @member {Number} file_size_bytes
 */
PipelineCache.prototype['file_size_bytes'] = undefined;

/**
 * The key hash of the cache version.
 * @member {String} key_hash
 */
PipelineCache.prototype['key_hash'] = undefined;

/**
 * The name of the cache.
 * @member {String} name
 */
PipelineCache.prototype['name'] = undefined;

/**
 * The path where the cache contents were retrieved from.
 * @member {String} path
 */
PipelineCache.prototype['path'] = undefined;

/**
 * The UUID of the pipeline that created the cache.
 * @member {String} pipeline_uuid
 */
PipelineCache.prototype['pipeline_uuid'] = undefined;

/**
 * The uuid of the step that created the cache.
 * @member {String} step_uuid
 */
PipelineCache.prototype['step_uuid'] = undefined;

/**
 * The UUID identifying the pipeline cache.
 * @member {String} uuid
 */
PipelineCache.prototype['uuid'] = undefined;


// Implement ModelObject interface:
/**
 * @member {String} type
 */
ModelObject.prototype['type'] = undefined;




export default PipelineCache;

