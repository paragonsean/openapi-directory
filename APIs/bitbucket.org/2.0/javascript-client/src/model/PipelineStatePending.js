/**
 * Bitbucket API
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@bitbucket.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PipelineState from './PipelineState';

/**
 * The PipelineStatePending model module.
 * @module model/PipelineStatePending
 * @version 2.0
 */
class PipelineStatePending {
    /**
     * Constructs a new <code>PipelineStatePending</code>.
     * @alias module:model/PipelineStatePending
     * @extends module:model/PipelineState
     * @implements module:model/PipelineState
     * @param type {String} 
     */
    constructor(type) { 
        PipelineState.initialize(this, type);
        PipelineStatePending.initialize(this, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, type) { 
    }

    /**
     * Constructs a <code>PipelineStatePending</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PipelineStatePending} obj Optional instance to populate.
     * @return {module:model/PipelineStatePending} The populated <code>PipelineStatePending</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PipelineStatePending();
            PipelineState.constructFromObject(data, obj);
            PipelineState.constructFromObject(data, obj);

            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PipelineStatePending</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PipelineStatePending</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PipelineStatePending.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }

        return true;
    }


}

PipelineStatePending.RequiredProperties = ["type"];

/**
 * The name of pipeline state (PENDING).
 * @member {module:model/PipelineStatePending.NameEnum} name
 */
PipelineStatePending.prototype['name'] = undefined;


// Implement PipelineState interface:
/**
 * @member {String} type
 */
PipelineState.prototype['type'] = undefined;



/**
 * Allowed values for the <code>name</code> property.
 * @enum {String}
 * @readonly
 */
PipelineStatePending['NameEnum'] = {

    /**
     * value: "PENDING"
     * @const
     */
    "PENDING": "PENDING"
};



export default PipelineStatePending;

