/**
 * Bitbucket API
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@bitbucket.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import User from './User';

/**
 * The DefaultReviewerAndType model module.
 * @module model/DefaultReviewerAndType
 * @version 2.0
 */
class DefaultReviewerAndType {
    /**
     * Constructs a new <code>DefaultReviewerAndType</code>.
     * Object containing a user that is a default reviewer and the type of reviewer
     * @alias module:model/DefaultReviewerAndType
     * @extends Object
     * @param type {String} 
     */
    constructor(type) { 
        
        DefaultReviewerAndType.initialize(this, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, type) { 
        obj['type'] = type;
    }

    /**
     * Constructs a <code>DefaultReviewerAndType</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DefaultReviewerAndType} obj Optional instance to populate.
     * @return {module:model/DefaultReviewerAndType} The populated <code>DefaultReviewerAndType</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DefaultReviewerAndType();

            ApiClient.constructFromObject(data, obj, 'Object');
            

            if (data.hasOwnProperty('reviewer_type')) {
                obj['reviewer_type'] = ApiClient.convertToType(data['reviewer_type'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('user')) {
                obj['user'] = User.constructFromObject(data['user']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DefaultReviewerAndType</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DefaultReviewerAndType</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of DefaultReviewerAndType.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['reviewer_type'] && !(typeof data['reviewer_type'] === 'string' || data['reviewer_type'] instanceof String)) {
            throw new Error("Expected the field `reviewer_type` to be a primitive type in the JSON string but got " + data['reviewer_type']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // validate the optional field `user`
        if (data['user']) { // data not null
          User.validateJSON(data['user']);
        }

        return true;
    }


}

DefaultReviewerAndType.RequiredProperties = ["type"];

/**
 * @member {String} reviewer_type
 */
DefaultReviewerAndType.prototype['reviewer_type'] = undefined;

/**
 * @member {String} type
 */
DefaultReviewerAndType.prototype['type'] = undefined;

/**
 * @member {module:model/User} user
 */
DefaultReviewerAndType.prototype['user'] = undefined;






export default DefaultReviewerAndType;

