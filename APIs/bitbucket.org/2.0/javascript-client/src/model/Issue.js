/**
 * Bitbucket API
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@bitbucket.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Account from './Account';
import BaseCommitSummary from './BaseCommitSummary';
import Component from './Component';
import IssueLinks from './IssueLinks';
import Milestone from './Milestone';
import ModelObject from './ModelObject';
import Repository from './Repository';
import Version from './Version';

/**
 * The Issue model module.
 * @module model/Issue
 * @version 2.0
 */
class Issue {
    /**
     * Constructs a new <code>Issue</code>.
     * @alias module:model/Issue
     * @extends module:model/ModelObject
     * @implements module:model/ModelObject
     * @param type {String} 
     */
    constructor(type) { 
        ModelObject.initialize(this, type);
        Issue.initialize(this, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, type) { 
    }

    /**
     * Constructs a <code>Issue</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Issue} obj Optional instance to populate.
     * @return {module:model/Issue} The populated <code>Issue</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Issue();
            ModelObject.constructFromObject(data, obj);
            ModelObject.constructFromObject(data, obj);

            if (data.hasOwnProperty('assignee')) {
                obj['assignee'] = Account.constructFromObject(data['assignee']);
            }
            if (data.hasOwnProperty('component')) {
                obj['component'] = Component.constructFromObject(data['component']);
            }
            if (data.hasOwnProperty('content')) {
                obj['content'] = BaseCommitSummary.constructFromObject(data['content']);
            }
            if (data.hasOwnProperty('created_on')) {
                obj['created_on'] = ApiClient.convertToType(data['created_on'], 'Date');
            }
            if (data.hasOwnProperty('edited_on')) {
                obj['edited_on'] = ApiClient.convertToType(data['edited_on'], 'Date');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('links')) {
                obj['links'] = IssueLinks.constructFromObject(data['links']);
            }
            if (data.hasOwnProperty('milestone')) {
                obj['milestone'] = Milestone.constructFromObject(data['milestone']);
            }
            if (data.hasOwnProperty('priority')) {
                obj['priority'] = ApiClient.convertToType(data['priority'], 'String');
            }
            if (data.hasOwnProperty('reporter')) {
                obj['reporter'] = Account.constructFromObject(data['reporter']);
            }
            if (data.hasOwnProperty('repository')) {
                obj['repository'] = Repository.constructFromObject(data['repository']);
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('updated_on')) {
                obj['updated_on'] = ApiClient.convertToType(data['updated_on'], 'Date');
            }
            if (data.hasOwnProperty('version')) {
                obj['version'] = Version.constructFromObject(data['version']);
            }
            if (data.hasOwnProperty('votes')) {
                obj['votes'] = ApiClient.convertToType(data['votes'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Issue</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Issue</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Issue.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `assignee`
        if (data['assignee']) { // data not null
          Account.validateJSON(data['assignee']);
        }
        // validate the optional field `component`
        if (data['component']) { // data not null
          Component.validateJSON(data['component']);
        }
        // validate the optional field `content`
        if (data['content']) { // data not null
          BaseCommitSummary.validateJSON(data['content']);
        }
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }
        // validate the optional field `links`
        if (data['links']) { // data not null
          IssueLinks.validateJSON(data['links']);
        }
        // validate the optional field `milestone`
        if (data['milestone']) { // data not null
          Milestone.validateJSON(data['milestone']);
        }
        // ensure the json data is a string
        if (data['priority'] && !(typeof data['priority'] === 'string' || data['priority'] instanceof String)) {
            throw new Error("Expected the field `priority` to be a primitive type in the JSON string but got " + data['priority']);
        }
        // validate the optional field `reporter`
        if (data['reporter']) { // data not null
          Account.validateJSON(data['reporter']);
        }
        // validate the optional field `repository`
        if (data['repository']) { // data not null
          Repository.validateJSON(data['repository']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // validate the optional field `version`
        if (data['version']) { // data not null
          Version.validateJSON(data['version']);
        }

        return true;
    }


}

Issue.RequiredProperties = ["type"];

/**
 * @member {module:model/Account} assignee
 */
Issue.prototype['assignee'] = undefined;

/**
 * @member {module:model/Component} component
 */
Issue.prototype['component'] = undefined;

/**
 * @member {module:model/BaseCommitSummary} content
 */
Issue.prototype['content'] = undefined;

/**
 * @member {Date} created_on
 */
Issue.prototype['created_on'] = undefined;

/**
 * @member {Date} edited_on
 */
Issue.prototype['edited_on'] = undefined;

/**
 * @member {Number} id
 */
Issue.prototype['id'] = undefined;

/**
 * @member {module:model/Issue.KindEnum} kind
 */
Issue.prototype['kind'] = undefined;

/**
 * @member {module:model/IssueLinks} links
 */
Issue.prototype['links'] = undefined;

/**
 * @member {module:model/Milestone} milestone
 */
Issue.prototype['milestone'] = undefined;

/**
 * @member {module:model/Issue.PriorityEnum} priority
 */
Issue.prototype['priority'] = undefined;

/**
 * @member {module:model/Account} reporter
 */
Issue.prototype['reporter'] = undefined;

/**
 * @member {module:model/Repository} repository
 */
Issue.prototype['repository'] = undefined;

/**
 * @member {module:model/Issue.StateEnum} state
 */
Issue.prototype['state'] = undefined;

/**
 * @member {String} title
 */
Issue.prototype['title'] = undefined;

/**
 * @member {Date} updated_on
 */
Issue.prototype['updated_on'] = undefined;

/**
 * @member {module:model/Version} version
 */
Issue.prototype['version'] = undefined;

/**
 * @member {Number} votes
 */
Issue.prototype['votes'] = undefined;


// Implement ModelObject interface:
/**
 * @member {String} type
 */
ModelObject.prototype['type'] = undefined;



/**
 * Allowed values for the <code>kind</code> property.
 * @enum {String}
 * @readonly
 */
Issue['KindEnum'] = {

    /**
     * value: "bug"
     * @const
     */
    "bug": "bug",

    /**
     * value: "enhancement"
     * @const
     */
    "enhancement": "enhancement",

    /**
     * value: "proposal"
     * @const
     */
    "proposal": "proposal",

    /**
     * value: "task"
     * @const
     */
    "task": "task"
};


/**
 * Allowed values for the <code>priority</code> property.
 * @enum {String}
 * @readonly
 */
Issue['PriorityEnum'] = {

    /**
     * value: "trivial"
     * @const
     */
    "trivial": "trivial",

    /**
     * value: "minor"
     * @const
     */
    "minor": "minor",

    /**
     * value: "major"
     * @const
     */
    "major": "major",

    /**
     * value: "critical"
     * @const
     */
    "critical": "critical",

    /**
     * value: "blocker"
     * @const
     */
    "blocker": "blocker"
};


/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
Issue['StateEnum'] = {

    /**
     * value: "submitted"
     * @const
     */
    "submitted": "submitted",

    /**
     * value: "new"
     * @const
     */
    "new": "new",

    /**
     * value: "open"
     * @const
     */
    "open": "open",

    /**
     * value: "resolved"
     * @const
     */
    "resolved": "resolved",

    /**
     * value: "on hold"
     * @const
     */
    "on hold": "on hold",

    /**
     * value: "invalid"
     * @const
     */
    "invalid": "invalid",

    /**
     * value: "duplicate"
     * @const
     */
    "duplicate": "duplicate",

    /**
     * value: "wontfix"
     * @const
     */
    "wontfix": "wontfix",

    /**
     * value: "closed"
     * @const
     */
    "closed": "closed"
};



export default Issue;

