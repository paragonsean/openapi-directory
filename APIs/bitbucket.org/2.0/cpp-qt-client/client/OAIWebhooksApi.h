/**
 * Bitbucket API
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@bitbucket.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIWebhooksApi_H
#define OAI_OAIWebhooksApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIError.h"
#include "OAIPaginated_hook_events.h"
#include "OAIPaginated_webhook_subscriptions.h"
#include "OAISubject_types.h"
#include "OAIWebhook_subscription.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIWebhooksApi : public QObject {
    Q_OBJECT

public:
    OAIWebhooksApi(const int timeOut = 0);
    ~OAIWebhooksApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);


    virtual void hookEventsGet();

    /**
    * @param[in]  subject_type QString [required]
    */
    virtual void hookEventsSubjectTypeGet(const QString &subject_type);

    /**
    * @param[in]  repo_slug QString [required]
    * @param[in]  workspace QString [required]
    */
    virtual void repositoriesWorkspaceRepoSlugHooksGet(const QString &repo_slug, const QString &workspace);

    /**
    * @param[in]  repo_slug QString [required]
    * @param[in]  workspace QString [required]
    */
    virtual void repositoriesWorkspaceRepoSlugHooksPost(const QString &repo_slug, const QString &workspace);

    /**
    * @param[in]  repo_slug QString [required]
    * @param[in]  uid QString [required]
    * @param[in]  workspace QString [required]
    */
    virtual void repositoriesWorkspaceRepoSlugHooksUidDelete(const QString &repo_slug, const QString &uid, const QString &workspace);

    /**
    * @param[in]  repo_slug QString [required]
    * @param[in]  uid QString [required]
    * @param[in]  workspace QString [required]
    */
    virtual void repositoriesWorkspaceRepoSlugHooksUidGet(const QString &repo_slug, const QString &uid, const QString &workspace);

    /**
    * @param[in]  repo_slug QString [required]
    * @param[in]  uid QString [required]
    * @param[in]  workspace QString [required]
    */
    virtual void repositoriesWorkspaceRepoSlugHooksUidPut(const QString &repo_slug, const QString &uid, const QString &workspace);

    /**
    * @param[in]  workspace QString [required]
    */
    virtual void workspacesWorkspaceHooksGet(const QString &workspace);

    /**
    * @param[in]  workspace QString [required]
    */
    virtual void workspacesWorkspaceHooksPost(const QString &workspace);

    /**
    * @param[in]  uid QString [required]
    * @param[in]  workspace QString [required]
    */
    virtual void workspacesWorkspaceHooksUidDelete(const QString &uid, const QString &workspace);

    /**
    * @param[in]  uid QString [required]
    * @param[in]  workspace QString [required]
    */
    virtual void workspacesWorkspaceHooksUidGet(const QString &uid, const QString &workspace);

    /**
    * @param[in]  uid QString [required]
    * @param[in]  workspace QString [required]
    */
    virtual void workspacesWorkspaceHooksUidPut(const QString &uid, const QString &workspace);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void hookEventsGetCallback(OAIHttpRequestWorker *worker);
    void hookEventsSubjectTypeGetCallback(OAIHttpRequestWorker *worker);
    void repositoriesWorkspaceRepoSlugHooksGetCallback(OAIHttpRequestWorker *worker);
    void repositoriesWorkspaceRepoSlugHooksPostCallback(OAIHttpRequestWorker *worker);
    void repositoriesWorkspaceRepoSlugHooksUidDeleteCallback(OAIHttpRequestWorker *worker);
    void repositoriesWorkspaceRepoSlugHooksUidGetCallback(OAIHttpRequestWorker *worker);
    void repositoriesWorkspaceRepoSlugHooksUidPutCallback(OAIHttpRequestWorker *worker);
    void workspacesWorkspaceHooksGetCallback(OAIHttpRequestWorker *worker);
    void workspacesWorkspaceHooksPostCallback(OAIHttpRequestWorker *worker);
    void workspacesWorkspaceHooksUidDeleteCallback(OAIHttpRequestWorker *worker);
    void workspacesWorkspaceHooksUidGetCallback(OAIHttpRequestWorker *worker);
    void workspacesWorkspaceHooksUidPutCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void hookEventsGetSignal(OAISubject_types summary);
    void hookEventsSubjectTypeGetSignal(OAIPaginated_hook_events summary);
    void repositoriesWorkspaceRepoSlugHooksGetSignal(OAIPaginated_webhook_subscriptions summary);
    void repositoriesWorkspaceRepoSlugHooksPostSignal(OAIWebhook_subscription summary);
    void repositoriesWorkspaceRepoSlugHooksUidDeleteSignal();
    void repositoriesWorkspaceRepoSlugHooksUidGetSignal(OAIWebhook_subscription summary);
    void repositoriesWorkspaceRepoSlugHooksUidPutSignal(OAIWebhook_subscription summary);
    void workspacesWorkspaceHooksGetSignal(OAIPaginated_webhook_subscriptions summary);
    void workspacesWorkspaceHooksPostSignal(OAIWebhook_subscription summary);
    void workspacesWorkspaceHooksUidDeleteSignal();
    void workspacesWorkspaceHooksUidGetSignal(OAIWebhook_subscription summary);
    void workspacesWorkspaceHooksUidPutSignal(OAIWebhook_subscription summary);


    void hookEventsGetSignalFull(OAIHttpRequestWorker *worker, OAISubject_types summary);
    void hookEventsSubjectTypeGetSignalFull(OAIHttpRequestWorker *worker, OAIPaginated_hook_events summary);
    void repositoriesWorkspaceRepoSlugHooksGetSignalFull(OAIHttpRequestWorker *worker, OAIPaginated_webhook_subscriptions summary);
    void repositoriesWorkspaceRepoSlugHooksPostSignalFull(OAIHttpRequestWorker *worker, OAIWebhook_subscription summary);
    void repositoriesWorkspaceRepoSlugHooksUidDeleteSignalFull(OAIHttpRequestWorker *worker);
    void repositoriesWorkspaceRepoSlugHooksUidGetSignalFull(OAIHttpRequestWorker *worker, OAIWebhook_subscription summary);
    void repositoriesWorkspaceRepoSlugHooksUidPutSignalFull(OAIHttpRequestWorker *worker, OAIWebhook_subscription summary);
    void workspacesWorkspaceHooksGetSignalFull(OAIHttpRequestWorker *worker, OAIPaginated_webhook_subscriptions summary);
    void workspacesWorkspaceHooksPostSignalFull(OAIHttpRequestWorker *worker, OAIWebhook_subscription summary);
    void workspacesWorkspaceHooksUidDeleteSignalFull(OAIHttpRequestWorker *worker);
    void workspacesWorkspaceHooksUidGetSignalFull(OAIHttpRequestWorker *worker, OAIWebhook_subscription summary);
    void workspacesWorkspaceHooksUidPutSignalFull(OAIHttpRequestWorker *worker, OAIWebhook_subscription summary);

    Q_DECL_DEPRECATED_X("Use hookEventsGetSignalError() instead")
    void hookEventsGetSignalE(OAISubject_types summary, QNetworkReply::NetworkError error_type, QString error_str);
    void hookEventsGetSignalError(OAISubject_types summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use hookEventsSubjectTypeGetSignalError() instead")
    void hookEventsSubjectTypeGetSignalE(OAIPaginated_hook_events summary, QNetworkReply::NetworkError error_type, QString error_str);
    void hookEventsSubjectTypeGetSignalError(OAIPaginated_hook_events summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugHooksGetSignalError() instead")
    void repositoriesWorkspaceRepoSlugHooksGetSignalE(OAIPaginated_webhook_subscriptions summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugHooksGetSignalError(OAIPaginated_webhook_subscriptions summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugHooksPostSignalError() instead")
    void repositoriesWorkspaceRepoSlugHooksPostSignalE(OAIWebhook_subscription summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugHooksPostSignalError(OAIWebhook_subscription summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugHooksUidDeleteSignalError() instead")
    void repositoriesWorkspaceRepoSlugHooksUidDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugHooksUidDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugHooksUidGetSignalError() instead")
    void repositoriesWorkspaceRepoSlugHooksUidGetSignalE(OAIWebhook_subscription summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugHooksUidGetSignalError(OAIWebhook_subscription summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugHooksUidPutSignalError() instead")
    void repositoriesWorkspaceRepoSlugHooksUidPutSignalE(OAIWebhook_subscription summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugHooksUidPutSignalError(OAIWebhook_subscription summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workspacesWorkspaceHooksGetSignalError() instead")
    void workspacesWorkspaceHooksGetSignalE(OAIPaginated_webhook_subscriptions summary, QNetworkReply::NetworkError error_type, QString error_str);
    void workspacesWorkspaceHooksGetSignalError(OAIPaginated_webhook_subscriptions summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workspacesWorkspaceHooksPostSignalError() instead")
    void workspacesWorkspaceHooksPostSignalE(OAIWebhook_subscription summary, QNetworkReply::NetworkError error_type, QString error_str);
    void workspacesWorkspaceHooksPostSignalError(OAIWebhook_subscription summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workspacesWorkspaceHooksUidDeleteSignalError() instead")
    void workspacesWorkspaceHooksUidDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void workspacesWorkspaceHooksUidDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workspacesWorkspaceHooksUidGetSignalError() instead")
    void workspacesWorkspaceHooksUidGetSignalE(OAIWebhook_subscription summary, QNetworkReply::NetworkError error_type, QString error_str);
    void workspacesWorkspaceHooksUidGetSignalError(OAIWebhook_subscription summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workspacesWorkspaceHooksUidPutSignalError() instead")
    void workspacesWorkspaceHooksUidPutSignalE(OAIWebhook_subscription summary, QNetworkReply::NetworkError error_type, QString error_str);
    void workspacesWorkspaceHooksUidPutSignalError(OAIWebhook_subscription summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use hookEventsGetSignalErrorFull() instead")
    void hookEventsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void hookEventsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use hookEventsSubjectTypeGetSignalErrorFull() instead")
    void hookEventsSubjectTypeGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void hookEventsSubjectTypeGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugHooksGetSignalErrorFull() instead")
    void repositoriesWorkspaceRepoSlugHooksGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugHooksGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugHooksPostSignalErrorFull() instead")
    void repositoriesWorkspaceRepoSlugHooksPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugHooksPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugHooksUidDeleteSignalErrorFull() instead")
    void repositoriesWorkspaceRepoSlugHooksUidDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugHooksUidDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugHooksUidGetSignalErrorFull() instead")
    void repositoriesWorkspaceRepoSlugHooksUidGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugHooksUidGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugHooksUidPutSignalErrorFull() instead")
    void repositoriesWorkspaceRepoSlugHooksUidPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugHooksUidPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workspacesWorkspaceHooksGetSignalErrorFull() instead")
    void workspacesWorkspaceHooksGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void workspacesWorkspaceHooksGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workspacesWorkspaceHooksPostSignalErrorFull() instead")
    void workspacesWorkspaceHooksPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void workspacesWorkspaceHooksPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workspacesWorkspaceHooksUidDeleteSignalErrorFull() instead")
    void workspacesWorkspaceHooksUidDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void workspacesWorkspaceHooksUidDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workspacesWorkspaceHooksUidGetSignalErrorFull() instead")
    void workspacesWorkspaceHooksUidGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void workspacesWorkspaceHooksUidGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workspacesWorkspaceHooksUidPutSignalErrorFull() instead")
    void workspacesWorkspaceHooksUidPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void workspacesWorkspaceHooksUidPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
