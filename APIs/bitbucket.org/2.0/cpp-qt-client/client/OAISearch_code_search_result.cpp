/**
 * Bitbucket API
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@bitbucket.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISearch_code_search_result.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISearch_code_search_result::OAISearch_code_search_result(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISearch_code_search_result::OAISearch_code_search_result() {
    this->initializeModel();
}

OAISearch_code_search_result::~OAISearch_code_search_result() {}

void OAISearch_code_search_result::initializeModel() {

    m_content_match_count_isSet = false;
    m_content_match_count_isValid = false;

    m_content_matches_isSet = false;
    m_content_matches_isValid = false;

    m_file_isSet = false;
    m_file_isValid = false;

    m_path_matches_isSet = false;
    m_path_matches_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAISearch_code_search_result::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISearch_code_search_result::fromJsonObject(QJsonObject json) {

    m_content_match_count_isValid = ::OpenAPI::fromJsonValue(m_content_match_count, json[QString("content_match_count")]);
    m_content_match_count_isSet = !json[QString("content_match_count")].isNull() && m_content_match_count_isValid;

    m_content_matches_isValid = ::OpenAPI::fromJsonValue(m_content_matches, json[QString("content_matches")]);
    m_content_matches_isSet = !json[QString("content_matches")].isNull() && m_content_matches_isValid;

    m_file_isValid = ::OpenAPI::fromJsonValue(m_file, json[QString("file")]);
    m_file_isSet = !json[QString("file")].isNull() && m_file_isValid;

    m_path_matches_isValid = ::OpenAPI::fromJsonValue(m_path_matches, json[QString("path_matches")]);
    m_path_matches_isSet = !json[QString("path_matches")].isNull() && m_path_matches_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAISearch_code_search_result::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISearch_code_search_result::asJsonObject() const {
    QJsonObject obj;
    if (m_content_match_count_isSet) {
        obj.insert(QString("content_match_count"), ::OpenAPI::toJsonValue(m_content_match_count));
    }
    if (m_content_matches.size() > 0) {
        obj.insert(QString("content_matches"), ::OpenAPI::toJsonValue(m_content_matches));
    }
    if (m_file.isSet()) {
        obj.insert(QString("file"), ::OpenAPI::toJsonValue(m_file));
    }
    if (m_path_matches.size() > 0) {
        obj.insert(QString("path_matches"), ::OpenAPI::toJsonValue(m_path_matches));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

qint64 OAISearch_code_search_result::getContentMatchCount() const {
    return m_content_match_count;
}
void OAISearch_code_search_result::setContentMatchCount(const qint64 &content_match_count) {
    m_content_match_count = content_match_count;
    m_content_match_count_isSet = true;
}

bool OAISearch_code_search_result::is_content_match_count_Set() const{
    return m_content_match_count_isSet;
}

bool OAISearch_code_search_result::is_content_match_count_Valid() const{
    return m_content_match_count_isValid;
}

QList<OAISearch_content_match> OAISearch_code_search_result::getContentMatches() const {
    return m_content_matches;
}
void OAISearch_code_search_result::setContentMatches(const QList<OAISearch_content_match> &content_matches) {
    m_content_matches = content_matches;
    m_content_matches_isSet = true;
}

bool OAISearch_code_search_result::is_content_matches_Set() const{
    return m_content_matches_isSet;
}

bool OAISearch_code_search_result::is_content_matches_Valid() const{
    return m_content_matches_isValid;
}

OAICommit_file OAISearch_code_search_result::getFile() const {
    return m_file;
}
void OAISearch_code_search_result::setFile(const OAICommit_file &file) {
    m_file = file;
    m_file_isSet = true;
}

bool OAISearch_code_search_result::is_file_Set() const{
    return m_file_isSet;
}

bool OAISearch_code_search_result::is_file_Valid() const{
    return m_file_isValid;
}

QList<OAISearch_segment> OAISearch_code_search_result::getPathMatches() const {
    return m_path_matches;
}
void OAISearch_code_search_result::setPathMatches(const QList<OAISearch_segment> &path_matches) {
    m_path_matches = path_matches;
    m_path_matches_isSet = true;
}

bool OAISearch_code_search_result::is_path_matches_Set() const{
    return m_path_matches_isSet;
}

bool OAISearch_code_search_result::is_path_matches_Valid() const{
    return m_path_matches_isValid;
}

QString OAISearch_code_search_result::getType() const {
    return m_type;
}
void OAISearch_code_search_result::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAISearch_code_search_result::is_type_Set() const{
    return m_type_isSet;
}

bool OAISearch_code_search_result::is_type_Valid() const{
    return m_type_isValid;
}

bool OAISearch_code_search_result::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_content_match_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_matches.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_file.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_matches.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISearch_code_search_result::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
