/**
 * Bitbucket API
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@bitbucket.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIRepository_user_permission.h
 *
 * A user&#39;s direct permission for a given repository.
 */

#ifndef OAIRepository_user_permission_H
#define OAIRepository_user_permission_H

#include <QJsonObject>

#include "OAIRepository.h"
#include "OAIRepository_group_permission_links.h"
#include "OAIUser.h"
#include <QJsonValue>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIRepository_group_permission_links;
class OAIRepository;
class OAIUser;

class OAIRepository_user_permission : public OAIObject {
public:
    OAIRepository_user_permission();
    OAIRepository_user_permission(QString json);
    ~OAIRepository_user_permission() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIRepository_group_permission_links getLinks() const;
    void setLinks(const OAIRepository_group_permission_links &links);
    bool is_links_Set() const;
    bool is_links_Valid() const;

    QString getPermission() const;
    void setPermission(const QString &permission);
    bool is_permission_Set() const;
    bool is_permission_Valid() const;

    OAIRepository getRepository() const;
    void setRepository(const OAIRepository &repository);
    bool is_repository_Set() const;
    bool is_repository_Valid() const;

    QString getType() const;
    void setType(const QString &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    OAIUser getUser() const;
    void setUser(const OAIUser &user);
    bool is_user_Set() const;
    bool is_user_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIRepository_group_permission_links m_links;
    bool m_links_isSet;
    bool m_links_isValid;

    QString m_permission;
    bool m_permission_isSet;
    bool m_permission_isValid;

    OAIRepository m_repository;
    bool m_repository_isSet;
    bool m_repository_isValid;

    QString m_type;
    bool m_type_isSet;
    bool m_type_isValid;

    OAIUser m_user;
    bool m_user_isSet;
    bool m_user_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIRepository_user_permission)

#endif // OAIRepository_user_permission_H
