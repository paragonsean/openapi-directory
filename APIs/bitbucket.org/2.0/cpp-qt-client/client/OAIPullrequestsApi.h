/**
 * Bitbucket API
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@bitbucket.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIPullrequestsApi_H
#define OAI_OAIPullrequestsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAccount.h"
#include "OAIComment_resolution.h"
#include "OAIError.h"
#include "OAIPaginated_accounts.h"
#include "OAIPaginated_commitstatuses.h"
#include "OAIPaginated_default_reviewer_and_type.h"
#include "OAIPaginated_pullrequest_comments.h"
#include "OAIPaginated_pullrequests.h"
#include "OAIParticipant.h"
#include "OAIPullrequest.h"
#include "OAIPullrequest_comment.h"
#include "OAIPullrequest_merge_parameters.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIPullrequestsApi : public QObject {
    Q_OBJECT

public:
    OAIPullrequestsApi(const int timeOut = 0);
    ~OAIPullrequestsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  workspace QString [required]
    * @param[in]  repo_slug QString [required]
    * @param[in]  commit QString [required]
    * @param[in]  page qint32 [optional]
    * @param[in]  pagelen qint32 [optional]
    */
    virtual void getPullrequestsForCommit(const QString &workspace, const QString &repo_slug, const QString &commit, const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &pagelen = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  selected_user QString [required]
    * @param[in]  state QString [optional]
    */
    virtual void pullrequestsSelectedUserGet(const QString &selected_user, const ::OpenAPI::OptionalParam<QString> &state = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  repo_slug QString [required]
    * @param[in]  workspace QString [required]
    */
    virtual void repositoriesWorkspaceRepoSlugDefaultReviewersGet(const QString &repo_slug, const QString &workspace);

    /**
    * @param[in]  repo_slug QString [required]
    * @param[in]  target_username QString [required]
    * @param[in]  workspace QString [required]
    */
    virtual void repositoriesWorkspaceRepoSlugDefaultReviewersTargetUsernameDelete(const QString &repo_slug, const QString &target_username, const QString &workspace);

    /**
    * @param[in]  repo_slug QString [required]
    * @param[in]  target_username QString [required]
    * @param[in]  workspace QString [required]
    */
    virtual void repositoriesWorkspaceRepoSlugDefaultReviewersTargetUsernameGet(const QString &repo_slug, const QString &target_username, const QString &workspace);

    /**
    * @param[in]  repo_slug QString [required]
    * @param[in]  target_username QString [required]
    * @param[in]  workspace QString [required]
    */
    virtual void repositoriesWorkspaceRepoSlugDefaultReviewersTargetUsernamePut(const QString &repo_slug, const QString &target_username, const QString &workspace);

    /**
    * @param[in]  repo_slug QString [required]
    * @param[in]  workspace QString [required]
    */
    virtual void repositoriesWorkspaceRepoSlugEffectiveDefaultReviewersGet(const QString &repo_slug, const QString &workspace);

    /**
    * @param[in]  repo_slug QString [required]
    * @param[in]  workspace QString [required]
    */
    virtual void repositoriesWorkspaceRepoSlugPullrequestsActivityGet(const QString &repo_slug, const QString &workspace);

    /**
    * @param[in]  repo_slug QString [required]
    * @param[in]  workspace QString [required]
    * @param[in]  state QString [optional]
    */
    virtual void repositoriesWorkspaceRepoSlugPullrequestsGet(const QString &repo_slug, const QString &workspace, const ::OpenAPI::OptionalParam<QString> &state = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  repo_slug QString [required]
    * @param[in]  workspace QString [required]
    * @param[in]  oai_pullrequest OAIPullrequest [optional]
    */
    virtual void repositoriesWorkspaceRepoSlugPullrequestsPost(const QString &repo_slug, const QString &workspace, const ::OpenAPI::OptionalParam<OAIPullrequest> &oai_pullrequest = ::OpenAPI::OptionalParam<OAIPullrequest>());

    /**
    * @param[in]  pull_request_id qint32 [required]
    * @param[in]  repo_slug QString [required]
    * @param[in]  workspace QString [required]
    */
    virtual void repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdActivityGet(const qint32 &pull_request_id, const QString &repo_slug, const QString &workspace);

    /**
    * @param[in]  pull_request_id qint32 [required]
    * @param[in]  repo_slug QString [required]
    * @param[in]  workspace QString [required]
    */
    virtual void repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdApproveDelete(const qint32 &pull_request_id, const QString &repo_slug, const QString &workspace);

    /**
    * @param[in]  pull_request_id qint32 [required]
    * @param[in]  repo_slug QString [required]
    * @param[in]  workspace QString [required]
    */
    virtual void repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdApprovePost(const qint32 &pull_request_id, const QString &repo_slug, const QString &workspace);

    /**
    * @param[in]  comment_id qint32 [required]
    * @param[in]  pull_request_id qint32 [required]
    * @param[in]  repo_slug QString [required]
    * @param[in]  workspace QString [required]
    */
    virtual void repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdDelete(const qint32 &comment_id, const qint32 &pull_request_id, const QString &repo_slug, const QString &workspace);

    /**
    * @param[in]  comment_id qint32 [required]
    * @param[in]  pull_request_id qint32 [required]
    * @param[in]  repo_slug QString [required]
    * @param[in]  workspace QString [required]
    */
    virtual void repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdGet(const qint32 &comment_id, const qint32 &pull_request_id, const QString &repo_slug, const QString &workspace);

    /**
    * @param[in]  comment_id qint32 [required]
    * @param[in]  pull_request_id qint32 [required]
    * @param[in]  repo_slug QString [required]
    * @param[in]  workspace QString [required]
    * @param[in]  oai_pullrequest_comment OAIPullrequest_comment [required]
    */
    virtual void repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdPut(const qint32 &comment_id, const qint32 &pull_request_id, const QString &repo_slug, const QString &workspace, const OAIPullrequest_comment &oai_pullrequest_comment);

    /**
    * @param[in]  comment_id qint32 [required]
    * @param[in]  pull_request_id qint32 [required]
    * @param[in]  repo_slug QString [required]
    * @param[in]  workspace QString [required]
    */
    virtual void repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdResolveDelete(const qint32 &comment_id, const qint32 &pull_request_id, const QString &repo_slug, const QString &workspace);

    /**
    * @param[in]  comment_id qint32 [required]
    * @param[in]  pull_request_id qint32 [required]
    * @param[in]  repo_slug QString [required]
    * @param[in]  workspace QString [required]
    */
    virtual void repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdResolvePost(const qint32 &comment_id, const qint32 &pull_request_id, const QString &repo_slug, const QString &workspace);

    /**
    * @param[in]  pull_request_id qint32 [required]
    * @param[in]  repo_slug QString [required]
    * @param[in]  workspace QString [required]
    */
    virtual void repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsGet(const qint32 &pull_request_id, const QString &repo_slug, const QString &workspace);

    /**
    * @param[in]  pull_request_id qint32 [required]
    * @param[in]  repo_slug QString [required]
    * @param[in]  workspace QString [required]
    * @param[in]  oai_pullrequest_comment OAIPullrequest_comment [required]
    */
    virtual void repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsPost(const qint32 &pull_request_id, const QString &repo_slug, const QString &workspace, const OAIPullrequest_comment &oai_pullrequest_comment);

    /**
    * @param[in]  pull_request_id qint32 [required]
    * @param[in]  repo_slug QString [required]
    * @param[in]  workspace QString [required]
    */
    virtual void repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommitsGet(const qint32 &pull_request_id, const QString &repo_slug, const QString &workspace);

    /**
    * @param[in]  pull_request_id qint32 [required]
    * @param[in]  repo_slug QString [required]
    * @param[in]  workspace QString [required]
    */
    virtual void repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdDeclinePost(const qint32 &pull_request_id, const QString &repo_slug, const QString &workspace);

    /**
    * @param[in]  pull_request_id qint32 [required]
    * @param[in]  repo_slug QString [required]
    * @param[in]  workspace QString [required]
    */
    virtual void repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdDiffGet(const qint32 &pull_request_id, const QString &repo_slug, const QString &workspace);

    /**
    * @param[in]  pull_request_id qint32 [required]
    * @param[in]  repo_slug QString [required]
    * @param[in]  workspace QString [required]
    */
    virtual void repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdDiffstatGet(const qint32 &pull_request_id, const QString &repo_slug, const QString &workspace);

    /**
    * @param[in]  pull_request_id qint32 [required]
    * @param[in]  repo_slug QString [required]
    * @param[in]  workspace QString [required]
    */
    virtual void repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdGet(const qint32 &pull_request_id, const QString &repo_slug, const QString &workspace);

    /**
    * @param[in]  pull_request_id qint32 [required]
    * @param[in]  repo_slug QString [required]
    * @param[in]  workspace QString [required]
    * @param[in]  async bool [optional]
    * @param[in]  oai_pullrequest_merge_parameters OAIPullrequest_merge_parameters [optional]
    */
    virtual void repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdMergePost(const qint32 &pull_request_id, const QString &repo_slug, const QString &workspace, const ::OpenAPI::OptionalParam<bool> &async = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<OAIPullrequest_merge_parameters> &oai_pullrequest_merge_parameters = ::OpenAPI::OptionalParam<OAIPullrequest_merge_parameters>());

    /**
    * @param[in]  pull_request_id qint32 [required]
    * @param[in]  repo_slug QString [required]
    * @param[in]  task_id QString [required]
    * @param[in]  workspace QString [required]
    */
    virtual void repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdMergeTaskStatusTaskIdGet(const qint32 &pull_request_id, const QString &repo_slug, const QString &task_id, const QString &workspace);

    /**
    * @param[in]  pull_request_id qint32 [required]
    * @param[in]  repo_slug QString [required]
    * @param[in]  workspace QString [required]
    */
    virtual void repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdPatchGet(const qint32 &pull_request_id, const QString &repo_slug, const QString &workspace);

    /**
    * @param[in]  pull_request_id qint32 [required]
    * @param[in]  repo_slug QString [required]
    * @param[in]  workspace QString [required]
    * @param[in]  oai_pullrequest OAIPullrequest [optional]
    */
    virtual void repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdPut(const qint32 &pull_request_id, const QString &repo_slug, const QString &workspace, const ::OpenAPI::OptionalParam<OAIPullrequest> &oai_pullrequest = ::OpenAPI::OptionalParam<OAIPullrequest>());

    /**
    * @param[in]  pull_request_id qint32 [required]
    * @param[in]  repo_slug QString [required]
    * @param[in]  workspace QString [required]
    */
    virtual void repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdRequestChangesDelete(const qint32 &pull_request_id, const QString &repo_slug, const QString &workspace);

    /**
    * @param[in]  pull_request_id qint32 [required]
    * @param[in]  repo_slug QString [required]
    * @param[in]  workspace QString [required]
    */
    virtual void repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdRequestChangesPost(const qint32 &pull_request_id, const QString &repo_slug, const QString &workspace);

    /**
    * @param[in]  pull_request_id qint32 [required]
    * @param[in]  repo_slug QString [required]
    * @param[in]  workspace QString [required]
    * @param[in]  q QString [optional]
    * @param[in]  sort QString [optional]
    */
    virtual void repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdStatusesGet(const qint32 &pull_request_id, const QString &repo_slug, const QString &workspace, const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getPullrequestsForCommitCallback(OAIHttpRequestWorker *worker);
    void pullrequestsSelectedUserGetCallback(OAIHttpRequestWorker *worker);
    void repositoriesWorkspaceRepoSlugDefaultReviewersGetCallback(OAIHttpRequestWorker *worker);
    void repositoriesWorkspaceRepoSlugDefaultReviewersTargetUsernameDeleteCallback(OAIHttpRequestWorker *worker);
    void repositoriesWorkspaceRepoSlugDefaultReviewersTargetUsernameGetCallback(OAIHttpRequestWorker *worker);
    void repositoriesWorkspaceRepoSlugDefaultReviewersTargetUsernamePutCallback(OAIHttpRequestWorker *worker);
    void repositoriesWorkspaceRepoSlugEffectiveDefaultReviewersGetCallback(OAIHttpRequestWorker *worker);
    void repositoriesWorkspaceRepoSlugPullrequestsActivityGetCallback(OAIHttpRequestWorker *worker);
    void repositoriesWorkspaceRepoSlugPullrequestsGetCallback(OAIHttpRequestWorker *worker);
    void repositoriesWorkspaceRepoSlugPullrequestsPostCallback(OAIHttpRequestWorker *worker);
    void repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdActivityGetCallback(OAIHttpRequestWorker *worker);
    void repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdApproveDeleteCallback(OAIHttpRequestWorker *worker);
    void repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdApprovePostCallback(OAIHttpRequestWorker *worker);
    void repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdDeleteCallback(OAIHttpRequestWorker *worker);
    void repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdGetCallback(OAIHttpRequestWorker *worker);
    void repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdPutCallback(OAIHttpRequestWorker *worker);
    void repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdResolveDeleteCallback(OAIHttpRequestWorker *worker);
    void repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdResolvePostCallback(OAIHttpRequestWorker *worker);
    void repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsGetCallback(OAIHttpRequestWorker *worker);
    void repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsPostCallback(OAIHttpRequestWorker *worker);
    void repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommitsGetCallback(OAIHttpRequestWorker *worker);
    void repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdDeclinePostCallback(OAIHttpRequestWorker *worker);
    void repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdDiffGetCallback(OAIHttpRequestWorker *worker);
    void repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdDiffstatGetCallback(OAIHttpRequestWorker *worker);
    void repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdGetCallback(OAIHttpRequestWorker *worker);
    void repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdMergePostCallback(OAIHttpRequestWorker *worker);
    void repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdMergeTaskStatusTaskIdGetCallback(OAIHttpRequestWorker *worker);
    void repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdPatchGetCallback(OAIHttpRequestWorker *worker);
    void repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdPutCallback(OAIHttpRequestWorker *worker);
    void repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdRequestChangesDeleteCallback(OAIHttpRequestWorker *worker);
    void repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdRequestChangesPostCallback(OAIHttpRequestWorker *worker);
    void repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdStatusesGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getPullrequestsForCommitSignal(OAIPaginated_pullrequests summary);
    void pullrequestsSelectedUserGetSignal(OAIPaginated_pullrequests summary);
    void repositoriesWorkspaceRepoSlugDefaultReviewersGetSignal(OAIPaginated_accounts summary);
    void repositoriesWorkspaceRepoSlugDefaultReviewersTargetUsernameDeleteSignal();
    void repositoriesWorkspaceRepoSlugDefaultReviewersTargetUsernameGetSignal(OAIAccount summary);
    void repositoriesWorkspaceRepoSlugDefaultReviewersTargetUsernamePutSignal(OAIAccount summary);
    void repositoriesWorkspaceRepoSlugEffectiveDefaultReviewersGetSignal(OAIPaginated_default_reviewer_and_type summary);
    void repositoriesWorkspaceRepoSlugPullrequestsActivityGetSignal();
    void repositoriesWorkspaceRepoSlugPullrequestsGetSignal(OAIPaginated_pullrequests summary);
    void repositoriesWorkspaceRepoSlugPullrequestsPostSignal(OAIPullrequest summary);
    void repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdActivityGetSignal();
    void repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdApproveDeleteSignal();
    void repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdApprovePostSignal(OAIParticipant summary);
    void repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdDeleteSignal();
    void repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdGetSignal(OAIPullrequest_comment summary);
    void repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdPutSignal(OAIPullrequest_comment summary);
    void repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdResolveDeleteSignal();
    void repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdResolvePostSignal(OAIComment_resolution summary);
    void repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsGetSignal(OAIPaginated_pullrequest_comments summary);
    void repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsPostSignal(OAIPullrequest_comment summary);
    void repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommitsGetSignal();
    void repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdDeclinePostSignal(OAIPullrequest summary);
    void repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdDiffGetSignal();
    void repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdDiffstatGetSignal();
    void repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdGetSignal(OAIPullrequest summary);
    void repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdMergePostSignal(OAIPullrequest summary);
    void repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdMergeTaskStatusTaskIdGetSignal();
    void repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdPatchGetSignal();
    void repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdPutSignal(OAIPullrequest summary);
    void repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdRequestChangesDeleteSignal();
    void repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdRequestChangesPostSignal(OAIParticipant summary);
    void repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdStatusesGetSignal(OAIPaginated_commitstatuses summary);


    void getPullrequestsForCommitSignalFull(OAIHttpRequestWorker *worker, OAIPaginated_pullrequests summary);
    void pullrequestsSelectedUserGetSignalFull(OAIHttpRequestWorker *worker, OAIPaginated_pullrequests summary);
    void repositoriesWorkspaceRepoSlugDefaultReviewersGetSignalFull(OAIHttpRequestWorker *worker, OAIPaginated_accounts summary);
    void repositoriesWorkspaceRepoSlugDefaultReviewersTargetUsernameDeleteSignalFull(OAIHttpRequestWorker *worker);
    void repositoriesWorkspaceRepoSlugDefaultReviewersTargetUsernameGetSignalFull(OAIHttpRequestWorker *worker, OAIAccount summary);
    void repositoriesWorkspaceRepoSlugDefaultReviewersTargetUsernamePutSignalFull(OAIHttpRequestWorker *worker, OAIAccount summary);
    void repositoriesWorkspaceRepoSlugEffectiveDefaultReviewersGetSignalFull(OAIHttpRequestWorker *worker, OAIPaginated_default_reviewer_and_type summary);
    void repositoriesWorkspaceRepoSlugPullrequestsActivityGetSignalFull(OAIHttpRequestWorker *worker);
    void repositoriesWorkspaceRepoSlugPullrequestsGetSignalFull(OAIHttpRequestWorker *worker, OAIPaginated_pullrequests summary);
    void repositoriesWorkspaceRepoSlugPullrequestsPostSignalFull(OAIHttpRequestWorker *worker, OAIPullrequest summary);
    void repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdActivityGetSignalFull(OAIHttpRequestWorker *worker);
    void repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdApproveDeleteSignalFull(OAIHttpRequestWorker *worker);
    void repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdApprovePostSignalFull(OAIHttpRequestWorker *worker, OAIParticipant summary);
    void repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdDeleteSignalFull(OAIHttpRequestWorker *worker);
    void repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdGetSignalFull(OAIHttpRequestWorker *worker, OAIPullrequest_comment summary);
    void repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdPutSignalFull(OAIHttpRequestWorker *worker, OAIPullrequest_comment summary);
    void repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdResolveDeleteSignalFull(OAIHttpRequestWorker *worker);
    void repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdResolvePostSignalFull(OAIHttpRequestWorker *worker, OAIComment_resolution summary);
    void repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsGetSignalFull(OAIHttpRequestWorker *worker, OAIPaginated_pullrequest_comments summary);
    void repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsPostSignalFull(OAIHttpRequestWorker *worker, OAIPullrequest_comment summary);
    void repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommitsGetSignalFull(OAIHttpRequestWorker *worker);
    void repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdDeclinePostSignalFull(OAIHttpRequestWorker *worker, OAIPullrequest summary);
    void repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdDiffGetSignalFull(OAIHttpRequestWorker *worker);
    void repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdDiffstatGetSignalFull(OAIHttpRequestWorker *worker);
    void repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdGetSignalFull(OAIHttpRequestWorker *worker, OAIPullrequest summary);
    void repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdMergePostSignalFull(OAIHttpRequestWorker *worker, OAIPullrequest summary);
    void repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdMergeTaskStatusTaskIdGetSignalFull(OAIHttpRequestWorker *worker);
    void repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdPatchGetSignalFull(OAIHttpRequestWorker *worker);
    void repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdPutSignalFull(OAIHttpRequestWorker *worker, OAIPullrequest summary);
    void repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdRequestChangesDeleteSignalFull(OAIHttpRequestWorker *worker);
    void repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdRequestChangesPostSignalFull(OAIHttpRequestWorker *worker, OAIParticipant summary);
    void repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdStatusesGetSignalFull(OAIHttpRequestWorker *worker, OAIPaginated_commitstatuses summary);

    Q_DECL_DEPRECATED_X("Use getPullrequestsForCommitSignalError() instead")
    void getPullrequestsForCommitSignalE(OAIPaginated_pullrequests summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPullrequestsForCommitSignalError(OAIPaginated_pullrequests summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pullrequestsSelectedUserGetSignalError() instead")
    void pullrequestsSelectedUserGetSignalE(OAIPaginated_pullrequests summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pullrequestsSelectedUserGetSignalError(OAIPaginated_pullrequests summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugDefaultReviewersGetSignalError() instead")
    void repositoriesWorkspaceRepoSlugDefaultReviewersGetSignalE(OAIPaginated_accounts summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugDefaultReviewersGetSignalError(OAIPaginated_accounts summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugDefaultReviewersTargetUsernameDeleteSignalError() instead")
    void repositoriesWorkspaceRepoSlugDefaultReviewersTargetUsernameDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugDefaultReviewersTargetUsernameDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugDefaultReviewersTargetUsernameGetSignalError() instead")
    void repositoriesWorkspaceRepoSlugDefaultReviewersTargetUsernameGetSignalE(OAIAccount summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugDefaultReviewersTargetUsernameGetSignalError(OAIAccount summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugDefaultReviewersTargetUsernamePutSignalError() instead")
    void repositoriesWorkspaceRepoSlugDefaultReviewersTargetUsernamePutSignalE(OAIAccount summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugDefaultReviewersTargetUsernamePutSignalError(OAIAccount summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugEffectiveDefaultReviewersGetSignalError() instead")
    void repositoriesWorkspaceRepoSlugEffectiveDefaultReviewersGetSignalE(OAIPaginated_default_reviewer_and_type summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugEffectiveDefaultReviewersGetSignalError(OAIPaginated_default_reviewer_and_type summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugPullrequestsActivityGetSignalError() instead")
    void repositoriesWorkspaceRepoSlugPullrequestsActivityGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugPullrequestsActivityGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugPullrequestsGetSignalError() instead")
    void repositoriesWorkspaceRepoSlugPullrequestsGetSignalE(OAIPaginated_pullrequests summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugPullrequestsGetSignalError(OAIPaginated_pullrequests summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugPullrequestsPostSignalError() instead")
    void repositoriesWorkspaceRepoSlugPullrequestsPostSignalE(OAIPullrequest summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugPullrequestsPostSignalError(OAIPullrequest summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdActivityGetSignalError() instead")
    void repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdActivityGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdActivityGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdApproveDeleteSignalError() instead")
    void repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdApproveDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdApproveDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdApprovePostSignalError() instead")
    void repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdApprovePostSignalE(OAIParticipant summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdApprovePostSignalError(OAIParticipant summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdDeleteSignalError() instead")
    void repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdGetSignalError() instead")
    void repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdGetSignalE(OAIPullrequest_comment summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdGetSignalError(OAIPullrequest_comment summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdPutSignalError() instead")
    void repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdPutSignalE(OAIPullrequest_comment summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdPutSignalError(OAIPullrequest_comment summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdResolveDeleteSignalError() instead")
    void repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdResolveDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdResolveDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdResolvePostSignalError() instead")
    void repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdResolvePostSignalE(OAIComment_resolution summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdResolvePostSignalError(OAIComment_resolution summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsGetSignalError() instead")
    void repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsGetSignalE(OAIPaginated_pullrequest_comments summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsGetSignalError(OAIPaginated_pullrequest_comments summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsPostSignalError() instead")
    void repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsPostSignalE(OAIPullrequest_comment summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsPostSignalError(OAIPullrequest_comment summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommitsGetSignalError() instead")
    void repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommitsGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommitsGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdDeclinePostSignalError() instead")
    void repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdDeclinePostSignalE(OAIPullrequest summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdDeclinePostSignalError(OAIPullrequest summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdDiffGetSignalError() instead")
    void repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdDiffGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdDiffGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdDiffstatGetSignalError() instead")
    void repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdDiffstatGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdDiffstatGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdGetSignalError() instead")
    void repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdGetSignalE(OAIPullrequest summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdGetSignalError(OAIPullrequest summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdMergePostSignalError() instead")
    void repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdMergePostSignalE(OAIPullrequest summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdMergePostSignalError(OAIPullrequest summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdMergeTaskStatusTaskIdGetSignalError() instead")
    void repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdMergeTaskStatusTaskIdGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdMergeTaskStatusTaskIdGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdPatchGetSignalError() instead")
    void repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdPatchGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdPatchGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdPutSignalError() instead")
    void repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdPutSignalE(OAIPullrequest summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdPutSignalError(OAIPullrequest summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdRequestChangesDeleteSignalError() instead")
    void repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdRequestChangesDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdRequestChangesDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdRequestChangesPostSignalError() instead")
    void repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdRequestChangesPostSignalE(OAIParticipant summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdRequestChangesPostSignalError(OAIParticipant summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdStatusesGetSignalError() instead")
    void repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdStatusesGetSignalE(OAIPaginated_commitstatuses summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdStatusesGetSignalError(OAIPaginated_commitstatuses summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getPullrequestsForCommitSignalErrorFull() instead")
    void getPullrequestsForCommitSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPullrequestsForCommitSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pullrequestsSelectedUserGetSignalErrorFull() instead")
    void pullrequestsSelectedUserGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pullrequestsSelectedUserGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugDefaultReviewersGetSignalErrorFull() instead")
    void repositoriesWorkspaceRepoSlugDefaultReviewersGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugDefaultReviewersGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugDefaultReviewersTargetUsernameDeleteSignalErrorFull() instead")
    void repositoriesWorkspaceRepoSlugDefaultReviewersTargetUsernameDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugDefaultReviewersTargetUsernameDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugDefaultReviewersTargetUsernameGetSignalErrorFull() instead")
    void repositoriesWorkspaceRepoSlugDefaultReviewersTargetUsernameGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugDefaultReviewersTargetUsernameGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugDefaultReviewersTargetUsernamePutSignalErrorFull() instead")
    void repositoriesWorkspaceRepoSlugDefaultReviewersTargetUsernamePutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugDefaultReviewersTargetUsernamePutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugEffectiveDefaultReviewersGetSignalErrorFull() instead")
    void repositoriesWorkspaceRepoSlugEffectiveDefaultReviewersGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugEffectiveDefaultReviewersGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugPullrequestsActivityGetSignalErrorFull() instead")
    void repositoriesWorkspaceRepoSlugPullrequestsActivityGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugPullrequestsActivityGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugPullrequestsGetSignalErrorFull() instead")
    void repositoriesWorkspaceRepoSlugPullrequestsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugPullrequestsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugPullrequestsPostSignalErrorFull() instead")
    void repositoriesWorkspaceRepoSlugPullrequestsPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugPullrequestsPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdActivityGetSignalErrorFull() instead")
    void repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdActivityGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdActivityGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdApproveDeleteSignalErrorFull() instead")
    void repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdApproveDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdApproveDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdApprovePostSignalErrorFull() instead")
    void repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdApprovePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdApprovePostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdDeleteSignalErrorFull() instead")
    void repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdGetSignalErrorFull() instead")
    void repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdPutSignalErrorFull() instead")
    void repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdResolveDeleteSignalErrorFull() instead")
    void repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdResolveDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdResolveDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdResolvePostSignalErrorFull() instead")
    void repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdResolvePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdResolvePostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsGetSignalErrorFull() instead")
    void repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsPostSignalErrorFull() instead")
    void repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommitsGetSignalErrorFull() instead")
    void repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommitsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommitsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdDeclinePostSignalErrorFull() instead")
    void repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdDeclinePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdDeclinePostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdDiffGetSignalErrorFull() instead")
    void repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdDiffGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdDiffGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdDiffstatGetSignalErrorFull() instead")
    void repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdDiffstatGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdDiffstatGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdGetSignalErrorFull() instead")
    void repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdMergePostSignalErrorFull() instead")
    void repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdMergePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdMergePostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdMergeTaskStatusTaskIdGetSignalErrorFull() instead")
    void repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdMergeTaskStatusTaskIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdMergeTaskStatusTaskIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdPatchGetSignalErrorFull() instead")
    void repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdPatchGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdPatchGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdPutSignalErrorFull() instead")
    void repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdRequestChangesDeleteSignalErrorFull() instead")
    void repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdRequestChangesDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdRequestChangesDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdRequestChangesPostSignalErrorFull() instead")
    void repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdRequestChangesPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdRequestChangesPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdStatusesGetSignalErrorFull() instead")
    void repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdStatusesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdStatusesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
