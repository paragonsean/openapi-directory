/**
 * Bitbucket API
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@bitbucket.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPullrequest_merge_parameters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPullrequest_merge_parameters::OAIPullrequest_merge_parameters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPullrequest_merge_parameters::OAIPullrequest_merge_parameters() {
    this->initializeModel();
}

OAIPullrequest_merge_parameters::~OAIPullrequest_merge_parameters() {}

void OAIPullrequest_merge_parameters::initializeModel() {

    m_close_source_branch_isSet = false;
    m_close_source_branch_isValid = false;

    m_merge_strategy_isSet = false;
    m_merge_strategy_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIPullrequest_merge_parameters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPullrequest_merge_parameters::fromJsonObject(QJsonObject json) {

    m_close_source_branch_isValid = ::OpenAPI::fromJsonValue(m_close_source_branch, json[QString("close_source_branch")]);
    m_close_source_branch_isSet = !json[QString("close_source_branch")].isNull() && m_close_source_branch_isValid;

    m_merge_strategy_isValid = ::OpenAPI::fromJsonValue(m_merge_strategy, json[QString("merge_strategy")]);
    m_merge_strategy_isSet = !json[QString("merge_strategy")].isNull() && m_merge_strategy_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIPullrequest_merge_parameters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPullrequest_merge_parameters::asJsonObject() const {
    QJsonObject obj;
    if (m_close_source_branch_isSet) {
        obj.insert(QString("close_source_branch"), ::OpenAPI::toJsonValue(m_close_source_branch));
    }
    if (m_merge_strategy_isSet) {
        obj.insert(QString("merge_strategy"), ::OpenAPI::toJsonValue(m_merge_strategy));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

bool OAIPullrequest_merge_parameters::isCloseSourceBranch() const {
    return m_close_source_branch;
}
void OAIPullrequest_merge_parameters::setCloseSourceBranch(const bool &close_source_branch) {
    m_close_source_branch = close_source_branch;
    m_close_source_branch_isSet = true;
}

bool OAIPullrequest_merge_parameters::is_close_source_branch_Set() const{
    return m_close_source_branch_isSet;
}

bool OAIPullrequest_merge_parameters::is_close_source_branch_Valid() const{
    return m_close_source_branch_isValid;
}

QString OAIPullrequest_merge_parameters::getMergeStrategy() const {
    return m_merge_strategy;
}
void OAIPullrequest_merge_parameters::setMergeStrategy(const QString &merge_strategy) {
    m_merge_strategy = merge_strategy;
    m_merge_strategy_isSet = true;
}

bool OAIPullrequest_merge_parameters::is_merge_strategy_Set() const{
    return m_merge_strategy_isSet;
}

bool OAIPullrequest_merge_parameters::is_merge_strategy_Valid() const{
    return m_merge_strategy_isValid;
}

QString OAIPullrequest_merge_parameters::getMessage() const {
    return m_message;
}
void OAIPullrequest_merge_parameters::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIPullrequest_merge_parameters::is_message_Set() const{
    return m_message_isSet;
}

bool OAIPullrequest_merge_parameters::is_message_Valid() const{
    return m_message_isValid;
}

QString OAIPullrequest_merge_parameters::getType() const {
    return m_type;
}
void OAIPullrequest_merge_parameters::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIPullrequest_merge_parameters::is_type_Set() const{
    return m_type_isSet;
}

bool OAIPullrequest_merge_parameters::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIPullrequest_merge_parameters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_close_source_branch_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_merge_strategy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPullrequest_merge_parameters::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_type_isValid && true;
}

} // namespace OpenAPI
