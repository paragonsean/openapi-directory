/**
 * Bitbucket API
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@bitbucket.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAISourceApi_H
#define OAI_OAISourceApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIError.h"
#include "OAIPaginated_files.h"
#include "OAIPaginated_treeentries.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAISourceApi : public QObject {
    Q_OBJECT

public:
    OAISourceApi(const int timeOut = 0);
    ~OAISourceApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  commit QString [required]
    * @param[in]  path QString [required]
    * @param[in]  repo_slug QString [required]
    * @param[in]  workspace QString [required]
    * @param[in]  renames QString [optional]
    * @param[in]  q QString [optional]
    * @param[in]  sort QString [optional]
    */
    virtual void repositoriesWorkspaceRepoSlugFilehistoryCommitPathGet(const QString &commit, const QString &path, const QString &repo_slug, const QString &workspace, const ::OpenAPI::OptionalParam<QString> &renames = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  commit QString [required]
    * @param[in]  path QString [required]
    * @param[in]  repo_slug QString [required]
    * @param[in]  workspace QString [required]
    * @param[in]  format QString [optional]
    * @param[in]  q QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  max_depth qint32 [optional]
    */
    virtual void repositoriesWorkspaceRepoSlugSrcCommitPathGet(const QString &commit, const QString &path, const QString &repo_slug, const QString &workspace, const ::OpenAPI::OptionalParam<QString> &format = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_depth = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  repo_slug QString [required]
    * @param[in]  workspace QString [required]
    * @param[in]  format QString [optional]
    */
    virtual void repositoriesWorkspaceRepoSlugSrcGet(const QString &repo_slug, const QString &workspace, const ::OpenAPI::OptionalParam<QString> &format = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  repo_slug QString [required]
    * @param[in]  workspace QString [required]
    * @param[in]  message QString [optional]
    * @param[in]  author QString [optional]
    * @param[in]  parents QString [optional]
    * @param[in]  files QString [optional]
    * @param[in]  branch QString [optional]
    */
    virtual void repositoriesWorkspaceRepoSlugSrcPost(const QString &repo_slug, const QString &workspace, const ::OpenAPI::OptionalParam<QString> &message = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &author = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &parents = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &files = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &branch = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void repositoriesWorkspaceRepoSlugFilehistoryCommitPathGetCallback(OAIHttpRequestWorker *worker);
    void repositoriesWorkspaceRepoSlugSrcCommitPathGetCallback(OAIHttpRequestWorker *worker);
    void repositoriesWorkspaceRepoSlugSrcGetCallback(OAIHttpRequestWorker *worker);
    void repositoriesWorkspaceRepoSlugSrcPostCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void repositoriesWorkspaceRepoSlugFilehistoryCommitPathGetSignal(OAIPaginated_files summary);
    void repositoriesWorkspaceRepoSlugSrcCommitPathGetSignal(OAIPaginated_treeentries summary);
    void repositoriesWorkspaceRepoSlugSrcGetSignal(OAIPaginated_treeentries summary);
    void repositoriesWorkspaceRepoSlugSrcPostSignal();


    void repositoriesWorkspaceRepoSlugFilehistoryCommitPathGetSignalFull(OAIHttpRequestWorker *worker, OAIPaginated_files summary);
    void repositoriesWorkspaceRepoSlugSrcCommitPathGetSignalFull(OAIHttpRequestWorker *worker, OAIPaginated_treeentries summary);
    void repositoriesWorkspaceRepoSlugSrcGetSignalFull(OAIHttpRequestWorker *worker, OAIPaginated_treeentries summary);
    void repositoriesWorkspaceRepoSlugSrcPostSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugFilehistoryCommitPathGetSignalError() instead")
    void repositoriesWorkspaceRepoSlugFilehistoryCommitPathGetSignalE(OAIPaginated_files summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugFilehistoryCommitPathGetSignalError(OAIPaginated_files summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugSrcCommitPathGetSignalError() instead")
    void repositoriesWorkspaceRepoSlugSrcCommitPathGetSignalE(OAIPaginated_treeentries summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugSrcCommitPathGetSignalError(OAIPaginated_treeentries summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugSrcGetSignalError() instead")
    void repositoriesWorkspaceRepoSlugSrcGetSignalE(OAIPaginated_treeentries summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugSrcGetSignalError(OAIPaginated_treeentries summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugSrcPostSignalError() instead")
    void repositoriesWorkspaceRepoSlugSrcPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugSrcPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugFilehistoryCommitPathGetSignalErrorFull() instead")
    void repositoriesWorkspaceRepoSlugFilehistoryCommitPathGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugFilehistoryCommitPathGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugSrcCommitPathGetSignalErrorFull() instead")
    void repositoriesWorkspaceRepoSlugSrcCommitPathGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugSrcCommitPathGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugSrcGetSignalErrorFull() instead")
    void repositoriesWorkspaceRepoSlugSrcGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugSrcGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugSrcPostSignalErrorFull() instead")
    void repositoriesWorkspaceRepoSlugSrcPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugSrcPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
