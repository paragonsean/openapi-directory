/**
 * Bitbucket API
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@bitbucket.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIssue_change_message.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIssue_change_message::OAIIssue_change_message(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIssue_change_message::OAIIssue_change_message() {
    this->initializeModel();
}

OAIIssue_change_message::~OAIIssue_change_message() {}

void OAIIssue_change_message::initializeModel() {

    m_html_isSet = false;
    m_html_isValid = false;

    m_markup_isSet = false;
    m_markup_isValid = false;

    m_raw_isSet = false;
    m_raw_isValid = false;
}

void OAIIssue_change_message::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIssue_change_message::fromJsonObject(QJsonObject json) {

    m_html_isValid = ::OpenAPI::fromJsonValue(m_html, json[QString("html")]);
    m_html_isSet = !json[QString("html")].isNull() && m_html_isValid;

    m_markup_isValid = ::OpenAPI::fromJsonValue(m_markup, json[QString("markup")]);
    m_markup_isSet = !json[QString("markup")].isNull() && m_markup_isValid;

    m_raw_isValid = ::OpenAPI::fromJsonValue(m_raw, json[QString("raw")]);
    m_raw_isSet = !json[QString("raw")].isNull() && m_raw_isValid;
}

QString OAIIssue_change_message::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIssue_change_message::asJsonObject() const {
    QJsonObject obj;
    if (m_html_isSet) {
        obj.insert(QString("html"), ::OpenAPI::toJsonValue(m_html));
    }
    if (m_markup_isSet) {
        obj.insert(QString("markup"), ::OpenAPI::toJsonValue(m_markup));
    }
    if (m_raw_isSet) {
        obj.insert(QString("raw"), ::OpenAPI::toJsonValue(m_raw));
    }
    return obj;
}

QString OAIIssue_change_message::getHtml() const {
    return m_html;
}
void OAIIssue_change_message::setHtml(const QString &html) {
    m_html = html;
    m_html_isSet = true;
}

bool OAIIssue_change_message::is_html_Set() const{
    return m_html_isSet;
}

bool OAIIssue_change_message::is_html_Valid() const{
    return m_html_isValid;
}

QString OAIIssue_change_message::getMarkup() const {
    return m_markup;
}
void OAIIssue_change_message::setMarkup(const QString &markup) {
    m_markup = markup;
    m_markup_isSet = true;
}

bool OAIIssue_change_message::is_markup_Set() const{
    return m_markup_isSet;
}

bool OAIIssue_change_message::is_markup_Valid() const{
    return m_markup_isValid;
}

QString OAIIssue_change_message::getRaw() const {
    return m_raw;
}
void OAIIssue_change_message::setRaw(const QString &raw) {
    m_raw = raw;
    m_raw_isSet = true;
}

bool OAIIssue_change_message::is_raw_Set() const{
    return m_raw_isSet;
}

bool OAIIssue_change_message::is_raw_Valid() const{
    return m_raw_isValid;
}

bool OAIIssue_change_message::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_html_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_markup_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_raw_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIssue_change_message::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
