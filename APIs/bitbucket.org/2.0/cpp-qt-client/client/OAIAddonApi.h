/**
 * Bitbucket API
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@bitbucket.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAddonApi_H
#define OAI_OAIAddonApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIError.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAddonApi : public QObject {
    Q_OBJECT

public:
    OAIAddonApi(const int timeOut = 0);
    ~OAIAddonApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);


    virtual void addonDelete();


    virtual void addonLinkersGet();

    /**
    * @param[in]  linker_key QString [required]
    */
    virtual void addonLinkersLinkerKeyGet(const QString &linker_key);

    /**
    * @param[in]  linker_key QString [required]
    */
    virtual void addonLinkersLinkerKeyValuesDelete(const QString &linker_key);

    /**
    * @param[in]  linker_key QString [required]
    */
    virtual void addonLinkersLinkerKeyValuesGet(const QString &linker_key);

    /**
    * @param[in]  linker_key QString [required]
    */
    virtual void addonLinkersLinkerKeyValuesPost(const QString &linker_key);

    /**
    * @param[in]  linker_key QString [required]
    */
    virtual void addonLinkersLinkerKeyValuesPut(const QString &linker_key);

    /**
    * @param[in]  linker_key QString [required]
    * @param[in]  value_id qint32 [required]
    */
    virtual void addonLinkersLinkerKeyValuesValueIdDelete(const QString &linker_key, const qint32 &value_id);

    /**
    * @param[in]  linker_key QString [required]
    * @param[in]  value_id qint32 [required]
    */
    virtual void addonLinkersLinkerKeyValuesValueIdGet(const QString &linker_key, const qint32 &value_id);


    virtual void addonPut();


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void addonDeleteCallback(OAIHttpRequestWorker *worker);
    void addonLinkersGetCallback(OAIHttpRequestWorker *worker);
    void addonLinkersLinkerKeyGetCallback(OAIHttpRequestWorker *worker);
    void addonLinkersLinkerKeyValuesDeleteCallback(OAIHttpRequestWorker *worker);
    void addonLinkersLinkerKeyValuesGetCallback(OAIHttpRequestWorker *worker);
    void addonLinkersLinkerKeyValuesPostCallback(OAIHttpRequestWorker *worker);
    void addonLinkersLinkerKeyValuesPutCallback(OAIHttpRequestWorker *worker);
    void addonLinkersLinkerKeyValuesValueIdDeleteCallback(OAIHttpRequestWorker *worker);
    void addonLinkersLinkerKeyValuesValueIdGetCallback(OAIHttpRequestWorker *worker);
    void addonPutCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void addonDeleteSignal();
    void addonLinkersGetSignal();
    void addonLinkersLinkerKeyGetSignal();
    void addonLinkersLinkerKeyValuesDeleteSignal();
    void addonLinkersLinkerKeyValuesGetSignal();
    void addonLinkersLinkerKeyValuesPostSignal();
    void addonLinkersLinkerKeyValuesPutSignal();
    void addonLinkersLinkerKeyValuesValueIdDeleteSignal();
    void addonLinkersLinkerKeyValuesValueIdGetSignal();
    void addonPutSignal();


    void addonDeleteSignalFull(OAIHttpRequestWorker *worker);
    void addonLinkersGetSignalFull(OAIHttpRequestWorker *worker);
    void addonLinkersLinkerKeyGetSignalFull(OAIHttpRequestWorker *worker);
    void addonLinkersLinkerKeyValuesDeleteSignalFull(OAIHttpRequestWorker *worker);
    void addonLinkersLinkerKeyValuesGetSignalFull(OAIHttpRequestWorker *worker);
    void addonLinkersLinkerKeyValuesPostSignalFull(OAIHttpRequestWorker *worker);
    void addonLinkersLinkerKeyValuesPutSignalFull(OAIHttpRequestWorker *worker);
    void addonLinkersLinkerKeyValuesValueIdDeleteSignalFull(OAIHttpRequestWorker *worker);
    void addonLinkersLinkerKeyValuesValueIdGetSignalFull(OAIHttpRequestWorker *worker);
    void addonPutSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use addonDeleteSignalError() instead")
    void addonDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void addonDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addonLinkersGetSignalError() instead")
    void addonLinkersGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void addonLinkersGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addonLinkersLinkerKeyGetSignalError() instead")
    void addonLinkersLinkerKeyGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void addonLinkersLinkerKeyGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addonLinkersLinkerKeyValuesDeleteSignalError() instead")
    void addonLinkersLinkerKeyValuesDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void addonLinkersLinkerKeyValuesDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addonLinkersLinkerKeyValuesGetSignalError() instead")
    void addonLinkersLinkerKeyValuesGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void addonLinkersLinkerKeyValuesGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addonLinkersLinkerKeyValuesPostSignalError() instead")
    void addonLinkersLinkerKeyValuesPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void addonLinkersLinkerKeyValuesPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addonLinkersLinkerKeyValuesPutSignalError() instead")
    void addonLinkersLinkerKeyValuesPutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void addonLinkersLinkerKeyValuesPutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addonLinkersLinkerKeyValuesValueIdDeleteSignalError() instead")
    void addonLinkersLinkerKeyValuesValueIdDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void addonLinkersLinkerKeyValuesValueIdDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addonLinkersLinkerKeyValuesValueIdGetSignalError() instead")
    void addonLinkersLinkerKeyValuesValueIdGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void addonLinkersLinkerKeyValuesValueIdGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addonPutSignalError() instead")
    void addonPutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void addonPutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use addonDeleteSignalErrorFull() instead")
    void addonDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addonDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addonLinkersGetSignalErrorFull() instead")
    void addonLinkersGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addonLinkersGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addonLinkersLinkerKeyGetSignalErrorFull() instead")
    void addonLinkersLinkerKeyGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addonLinkersLinkerKeyGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addonLinkersLinkerKeyValuesDeleteSignalErrorFull() instead")
    void addonLinkersLinkerKeyValuesDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addonLinkersLinkerKeyValuesDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addonLinkersLinkerKeyValuesGetSignalErrorFull() instead")
    void addonLinkersLinkerKeyValuesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addonLinkersLinkerKeyValuesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addonLinkersLinkerKeyValuesPostSignalErrorFull() instead")
    void addonLinkersLinkerKeyValuesPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addonLinkersLinkerKeyValuesPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addonLinkersLinkerKeyValuesPutSignalErrorFull() instead")
    void addonLinkersLinkerKeyValuesPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addonLinkersLinkerKeyValuesPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addonLinkersLinkerKeyValuesValueIdDeleteSignalErrorFull() instead")
    void addonLinkersLinkerKeyValuesValueIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addonLinkersLinkerKeyValuesValueIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addonLinkersLinkerKeyValuesValueIdGetSignalErrorFull() instead")
    void addonLinkersLinkerKeyValuesValueIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addonLinkersLinkerKeyValuesValueIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addonPutSignalErrorFull() instead")
    void addonPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addonPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
