/**
 * Bitbucket API
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@bitbucket.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIBranchRestrictionsApi_H
#define OAI_OAIBranchRestrictionsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBranchrestriction.h"
#include "OAIError.h"
#include "OAIPaginated_branchrestrictions.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIBranchRestrictionsApi : public QObject {
    Q_OBJECT

public:
    OAIBranchRestrictionsApi(const int timeOut = 0);
    ~OAIBranchRestrictionsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  repo_slug QString [required]
    * @param[in]  workspace QString [required]
    * @param[in]  kind QString [optional]
    * @param[in]  pattern QString [optional]
    */
    virtual void repositoriesWorkspaceRepoSlugBranchRestrictionsGet(const QString &repo_slug, const QString &workspace, const ::OpenAPI::OptionalParam<QString> &kind = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &pattern = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  repo_slug QString [required]
    * @param[in]  workspace QString [required]
    */
    virtual void repositoriesWorkspaceRepoSlugBranchRestrictionsIdDelete(const QString &id, const QString &repo_slug, const QString &workspace);

    /**
    * @param[in]  id QString [required]
    * @param[in]  repo_slug QString [required]
    * @param[in]  workspace QString [required]
    */
    virtual void repositoriesWorkspaceRepoSlugBranchRestrictionsIdGet(const QString &id, const QString &repo_slug, const QString &workspace);

    /**
    * @param[in]  id QString [required]
    * @param[in]  repo_slug QString [required]
    * @param[in]  workspace QString [required]
    * @param[in]  oai_branchrestriction OAIBranchrestriction [required]
    */
    virtual void repositoriesWorkspaceRepoSlugBranchRestrictionsIdPut(const QString &id, const QString &repo_slug, const QString &workspace, const OAIBranchrestriction &oai_branchrestriction);

    /**
    * @param[in]  repo_slug QString [required]
    * @param[in]  workspace QString [required]
    * @param[in]  oai_branchrestriction OAIBranchrestriction [required]
    */
    virtual void repositoriesWorkspaceRepoSlugBranchRestrictionsPost(const QString &repo_slug, const QString &workspace, const OAIBranchrestriction &oai_branchrestriction);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void repositoriesWorkspaceRepoSlugBranchRestrictionsGetCallback(OAIHttpRequestWorker *worker);
    void repositoriesWorkspaceRepoSlugBranchRestrictionsIdDeleteCallback(OAIHttpRequestWorker *worker);
    void repositoriesWorkspaceRepoSlugBranchRestrictionsIdGetCallback(OAIHttpRequestWorker *worker);
    void repositoriesWorkspaceRepoSlugBranchRestrictionsIdPutCallback(OAIHttpRequestWorker *worker);
    void repositoriesWorkspaceRepoSlugBranchRestrictionsPostCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void repositoriesWorkspaceRepoSlugBranchRestrictionsGetSignal(OAIPaginated_branchrestrictions summary);
    void repositoriesWorkspaceRepoSlugBranchRestrictionsIdDeleteSignal();
    void repositoriesWorkspaceRepoSlugBranchRestrictionsIdGetSignal(OAIBranchrestriction summary);
    void repositoriesWorkspaceRepoSlugBranchRestrictionsIdPutSignal(OAIBranchrestriction summary);
    void repositoriesWorkspaceRepoSlugBranchRestrictionsPostSignal(OAIBranchrestriction summary);


    void repositoriesWorkspaceRepoSlugBranchRestrictionsGetSignalFull(OAIHttpRequestWorker *worker, OAIPaginated_branchrestrictions summary);
    void repositoriesWorkspaceRepoSlugBranchRestrictionsIdDeleteSignalFull(OAIHttpRequestWorker *worker);
    void repositoriesWorkspaceRepoSlugBranchRestrictionsIdGetSignalFull(OAIHttpRequestWorker *worker, OAIBranchrestriction summary);
    void repositoriesWorkspaceRepoSlugBranchRestrictionsIdPutSignalFull(OAIHttpRequestWorker *worker, OAIBranchrestriction summary);
    void repositoriesWorkspaceRepoSlugBranchRestrictionsPostSignalFull(OAIHttpRequestWorker *worker, OAIBranchrestriction summary);

    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugBranchRestrictionsGetSignalError() instead")
    void repositoriesWorkspaceRepoSlugBranchRestrictionsGetSignalE(OAIPaginated_branchrestrictions summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugBranchRestrictionsGetSignalError(OAIPaginated_branchrestrictions summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugBranchRestrictionsIdDeleteSignalError() instead")
    void repositoriesWorkspaceRepoSlugBranchRestrictionsIdDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugBranchRestrictionsIdDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugBranchRestrictionsIdGetSignalError() instead")
    void repositoriesWorkspaceRepoSlugBranchRestrictionsIdGetSignalE(OAIBranchrestriction summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugBranchRestrictionsIdGetSignalError(OAIBranchrestriction summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugBranchRestrictionsIdPutSignalError() instead")
    void repositoriesWorkspaceRepoSlugBranchRestrictionsIdPutSignalE(OAIBranchrestriction summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugBranchRestrictionsIdPutSignalError(OAIBranchrestriction summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugBranchRestrictionsPostSignalError() instead")
    void repositoriesWorkspaceRepoSlugBranchRestrictionsPostSignalE(OAIBranchrestriction summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugBranchRestrictionsPostSignalError(OAIBranchrestriction summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugBranchRestrictionsGetSignalErrorFull() instead")
    void repositoriesWorkspaceRepoSlugBranchRestrictionsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugBranchRestrictionsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugBranchRestrictionsIdDeleteSignalErrorFull() instead")
    void repositoriesWorkspaceRepoSlugBranchRestrictionsIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugBranchRestrictionsIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugBranchRestrictionsIdGetSignalErrorFull() instead")
    void repositoriesWorkspaceRepoSlugBranchRestrictionsIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugBranchRestrictionsIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugBranchRestrictionsIdPutSignalErrorFull() instead")
    void repositoriesWorkspaceRepoSlugBranchRestrictionsIdPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugBranchRestrictionsIdPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugBranchRestrictionsPostSignalErrorFull() instead")
    void repositoriesWorkspaceRepoSlugBranchRestrictionsPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugBranchRestrictionsPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
