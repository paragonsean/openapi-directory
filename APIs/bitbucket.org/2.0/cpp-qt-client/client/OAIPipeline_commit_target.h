/**
 * Bitbucket API
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@bitbucket.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIPipeline_commit_target.h
 *
 * 
 */

#ifndef OAIPipeline_commit_target_H
#define OAIPipeline_commit_target_H

#include <QJsonObject>

#include "OAICommit.h"
#include "OAIPipeline_selector.h"
#include "OAIPipeline_target.h"
#include <QJsonValue>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAICommit;
class OAIPipeline_selector;

class OAIPipeline_commit_target : public OAIObject {
public:
    OAIPipeline_commit_target();
    OAIPipeline_commit_target(QString json);
    ~OAIPipeline_commit_target() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getType() const;
    void setType(const QString &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    OAICommit getCommit() const;
    void setCommit(const OAICommit &commit);
    bool is_commit_Set() const;
    bool is_commit_Valid() const;

    OAIPipeline_selector getSelector() const;
    void setSelector(const OAIPipeline_selector &selector);
    bool is_selector_Set() const;
    bool is_selector_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_type;
    bool m_type_isSet;
    bool m_type_isValid;

    OAICommit m_commit;
    bool m_commit_isSet;
    bool m_commit_isValid;

    OAIPipeline_selector m_selector;
    bool m_selector_isSet;
    bool m_selector_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIPipeline_commit_target)

#endif // OAIPipeline_commit_target_H
