/**
 * Bitbucket API
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@bitbucket.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDefault_reviewer_and_type.h
 *
 * Object containing a user that is a default reviewer and the type of reviewer
 */

#ifndef OAIDefault_reviewer_and_type_H
#define OAIDefault_reviewer_and_type_H

#include <QJsonObject>

#include "OAIUser.h"
#include <QJsonValue>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIUser;

class OAIDefault_reviewer_and_type : public OAIObject {
public:
    OAIDefault_reviewer_and_type();
    OAIDefault_reviewer_and_type(QString json);
    ~OAIDefault_reviewer_and_type() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getReviewerType() const;
    void setReviewerType(const QString &reviewer_type);
    bool is_reviewer_type_Set() const;
    bool is_reviewer_type_Valid() const;

    QString getType() const;
    void setType(const QString &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    OAIUser getUser() const;
    void setUser(const OAIUser &user);
    bool is_user_Set() const;
    bool is_user_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_reviewer_type;
    bool m_reviewer_type_isSet;
    bool m_reviewer_type_isValid;

    QString m_type;
    bool m_type_isSet;
    bool m_type_isValid;

    OAIUser m_user;
    bool m_user_isSet;
    bool m_user_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDefault_reviewer_and_type)

#endif // OAIDefault_reviewer_and_type_H
