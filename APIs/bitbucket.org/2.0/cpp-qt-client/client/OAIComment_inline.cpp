/**
 * Bitbucket API
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@bitbucket.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIComment_inline.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIComment_inline::OAIComment_inline(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIComment_inline::OAIComment_inline() {
    this->initializeModel();
}

OAIComment_inline::~OAIComment_inline() {}

void OAIComment_inline::initializeModel() {

    m_from_isSet = false;
    m_from_isValid = false;

    m_path_isSet = false;
    m_path_isValid = false;

    m_to_isSet = false;
    m_to_isValid = false;
}

void OAIComment_inline::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIComment_inline::fromJsonObject(QJsonObject json) {

    m_from_isValid = ::OpenAPI::fromJsonValue(m_from, json[QString("from")]);
    m_from_isSet = !json[QString("from")].isNull() && m_from_isValid;

    m_path_isValid = ::OpenAPI::fromJsonValue(m_path, json[QString("path")]);
    m_path_isSet = !json[QString("path")].isNull() && m_path_isValid;

    m_to_isValid = ::OpenAPI::fromJsonValue(m_to, json[QString("to")]);
    m_to_isSet = !json[QString("to")].isNull() && m_to_isValid;
}

QString OAIComment_inline::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIComment_inline::asJsonObject() const {
    QJsonObject obj;
    if (m_from_isSet) {
        obj.insert(QString("from"), ::OpenAPI::toJsonValue(m_from));
    }
    if (m_path_isSet) {
        obj.insert(QString("path"), ::OpenAPI::toJsonValue(m_path));
    }
    if (m_to_isSet) {
        obj.insert(QString("to"), ::OpenAPI::toJsonValue(m_to));
    }
    return obj;
}

qint32 OAIComment_inline::getFrom() const {
    return m_from;
}
void OAIComment_inline::setFrom(const qint32 &from) {
    m_from = from;
    m_from_isSet = true;
}

bool OAIComment_inline::is_from_Set() const{
    return m_from_isSet;
}

bool OAIComment_inline::is_from_Valid() const{
    return m_from_isValid;
}

QString OAIComment_inline::getPath() const {
    return m_path;
}
void OAIComment_inline::setPath(const QString &path) {
    m_path = path;
    m_path_isSet = true;
}

bool OAIComment_inline::is_path_Set() const{
    return m_path_isSet;
}

bool OAIComment_inline::is_path_Valid() const{
    return m_path_isValid;
}

qint32 OAIComment_inline::getTo() const {
    return m_to;
}
void OAIComment_inline::setTo(const qint32 &to) {
    m_to = to;
    m_to_isSet = true;
}

bool OAIComment_inline::is_to_Set() const{
    return m_to_isSet;
}

bool OAIComment_inline::is_to_Valid() const{
    return m_to_isValid;
}

bool OAIComment_inline::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_from_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_to_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIComment_inline::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_path_isValid && true;
}

} // namespace OpenAPI
