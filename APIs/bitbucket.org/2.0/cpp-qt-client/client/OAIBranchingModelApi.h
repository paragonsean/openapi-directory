/**
 * Bitbucket API
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@bitbucket.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIBranchingModelApi_H
#define OAI_OAIBranchingModelApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBranching_model.h"
#include "OAIBranching_model_settings.h"
#include "OAIEffective_repo_branching_model.h"
#include "OAIError.h"
#include "OAIProject_branching_model.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIBranchingModelApi : public QObject {
    Q_OBJECT

public:
    OAIBranchingModelApi(const int timeOut = 0);
    ~OAIBranchingModelApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  repo_slug QString [required]
    * @param[in]  workspace QString [required]
    */
    virtual void repositoriesWorkspaceRepoSlugBranchingModelGet(const QString &repo_slug, const QString &workspace);

    /**
    * @param[in]  repo_slug QString [required]
    * @param[in]  workspace QString [required]
    */
    virtual void repositoriesWorkspaceRepoSlugBranchingModelSettingsGet(const QString &repo_slug, const QString &workspace);

    /**
    * @param[in]  repo_slug QString [required]
    * @param[in]  workspace QString [required]
    */
    virtual void repositoriesWorkspaceRepoSlugBranchingModelSettingsPut(const QString &repo_slug, const QString &workspace);

    /**
    * @param[in]  repo_slug QString [required]
    * @param[in]  workspace QString [required]
    */
    virtual void repositoriesWorkspaceRepoSlugEffectiveBranchingModelGet(const QString &repo_slug, const QString &workspace);

    /**
    * @param[in]  project_key QString [required]
    * @param[in]  workspace QString [required]
    */
    virtual void workspacesWorkspaceProjectsProjectKeyBranchingModelGet(const QString &project_key, const QString &workspace);

    /**
    * @param[in]  project_key QString [required]
    * @param[in]  workspace QString [required]
    */
    virtual void workspacesWorkspaceProjectsProjectKeyBranchingModelSettingsGet(const QString &project_key, const QString &workspace);

    /**
    * @param[in]  project_key QString [required]
    * @param[in]  workspace QString [required]
    */
    virtual void workspacesWorkspaceProjectsProjectKeyBranchingModelSettingsPut(const QString &project_key, const QString &workspace);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void repositoriesWorkspaceRepoSlugBranchingModelGetCallback(OAIHttpRequestWorker *worker);
    void repositoriesWorkspaceRepoSlugBranchingModelSettingsGetCallback(OAIHttpRequestWorker *worker);
    void repositoriesWorkspaceRepoSlugBranchingModelSettingsPutCallback(OAIHttpRequestWorker *worker);
    void repositoriesWorkspaceRepoSlugEffectiveBranchingModelGetCallback(OAIHttpRequestWorker *worker);
    void workspacesWorkspaceProjectsProjectKeyBranchingModelGetCallback(OAIHttpRequestWorker *worker);
    void workspacesWorkspaceProjectsProjectKeyBranchingModelSettingsGetCallback(OAIHttpRequestWorker *worker);
    void workspacesWorkspaceProjectsProjectKeyBranchingModelSettingsPutCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void repositoriesWorkspaceRepoSlugBranchingModelGetSignal(OAIBranching_model summary);
    void repositoriesWorkspaceRepoSlugBranchingModelSettingsGetSignal(OAIBranching_model_settings summary);
    void repositoriesWorkspaceRepoSlugBranchingModelSettingsPutSignal(OAIBranching_model_settings summary);
    void repositoriesWorkspaceRepoSlugEffectiveBranchingModelGetSignal(OAIEffective_repo_branching_model summary);
    void workspacesWorkspaceProjectsProjectKeyBranchingModelGetSignal(OAIProject_branching_model summary);
    void workspacesWorkspaceProjectsProjectKeyBranchingModelSettingsGetSignal(OAIBranching_model_settings summary);
    void workspacesWorkspaceProjectsProjectKeyBranchingModelSettingsPutSignal(OAIBranching_model_settings summary);


    void repositoriesWorkspaceRepoSlugBranchingModelGetSignalFull(OAIHttpRequestWorker *worker, OAIBranching_model summary);
    void repositoriesWorkspaceRepoSlugBranchingModelSettingsGetSignalFull(OAIHttpRequestWorker *worker, OAIBranching_model_settings summary);
    void repositoriesWorkspaceRepoSlugBranchingModelSettingsPutSignalFull(OAIHttpRequestWorker *worker, OAIBranching_model_settings summary);
    void repositoriesWorkspaceRepoSlugEffectiveBranchingModelGetSignalFull(OAIHttpRequestWorker *worker, OAIEffective_repo_branching_model summary);
    void workspacesWorkspaceProjectsProjectKeyBranchingModelGetSignalFull(OAIHttpRequestWorker *worker, OAIProject_branching_model summary);
    void workspacesWorkspaceProjectsProjectKeyBranchingModelSettingsGetSignalFull(OAIHttpRequestWorker *worker, OAIBranching_model_settings summary);
    void workspacesWorkspaceProjectsProjectKeyBranchingModelSettingsPutSignalFull(OAIHttpRequestWorker *worker, OAIBranching_model_settings summary);

    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugBranchingModelGetSignalError() instead")
    void repositoriesWorkspaceRepoSlugBranchingModelGetSignalE(OAIBranching_model summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugBranchingModelGetSignalError(OAIBranching_model summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugBranchingModelSettingsGetSignalError() instead")
    void repositoriesWorkspaceRepoSlugBranchingModelSettingsGetSignalE(OAIBranching_model_settings summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugBranchingModelSettingsGetSignalError(OAIBranching_model_settings summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugBranchingModelSettingsPutSignalError() instead")
    void repositoriesWorkspaceRepoSlugBranchingModelSettingsPutSignalE(OAIBranching_model_settings summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugBranchingModelSettingsPutSignalError(OAIBranching_model_settings summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugEffectiveBranchingModelGetSignalError() instead")
    void repositoriesWorkspaceRepoSlugEffectiveBranchingModelGetSignalE(OAIEffective_repo_branching_model summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugEffectiveBranchingModelGetSignalError(OAIEffective_repo_branching_model summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workspacesWorkspaceProjectsProjectKeyBranchingModelGetSignalError() instead")
    void workspacesWorkspaceProjectsProjectKeyBranchingModelGetSignalE(OAIProject_branching_model summary, QNetworkReply::NetworkError error_type, QString error_str);
    void workspacesWorkspaceProjectsProjectKeyBranchingModelGetSignalError(OAIProject_branching_model summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workspacesWorkspaceProjectsProjectKeyBranchingModelSettingsGetSignalError() instead")
    void workspacesWorkspaceProjectsProjectKeyBranchingModelSettingsGetSignalE(OAIBranching_model_settings summary, QNetworkReply::NetworkError error_type, QString error_str);
    void workspacesWorkspaceProjectsProjectKeyBranchingModelSettingsGetSignalError(OAIBranching_model_settings summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workspacesWorkspaceProjectsProjectKeyBranchingModelSettingsPutSignalError() instead")
    void workspacesWorkspaceProjectsProjectKeyBranchingModelSettingsPutSignalE(OAIBranching_model_settings summary, QNetworkReply::NetworkError error_type, QString error_str);
    void workspacesWorkspaceProjectsProjectKeyBranchingModelSettingsPutSignalError(OAIBranching_model_settings summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugBranchingModelGetSignalErrorFull() instead")
    void repositoriesWorkspaceRepoSlugBranchingModelGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugBranchingModelGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugBranchingModelSettingsGetSignalErrorFull() instead")
    void repositoriesWorkspaceRepoSlugBranchingModelSettingsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugBranchingModelSettingsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugBranchingModelSettingsPutSignalErrorFull() instead")
    void repositoriesWorkspaceRepoSlugBranchingModelSettingsPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugBranchingModelSettingsPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugEffectiveBranchingModelGetSignalErrorFull() instead")
    void repositoriesWorkspaceRepoSlugEffectiveBranchingModelGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugEffectiveBranchingModelGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workspacesWorkspaceProjectsProjectKeyBranchingModelGetSignalErrorFull() instead")
    void workspacesWorkspaceProjectsProjectKeyBranchingModelGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void workspacesWorkspaceProjectsProjectKeyBranchingModelGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workspacesWorkspaceProjectsProjectKeyBranchingModelSettingsGetSignalErrorFull() instead")
    void workspacesWorkspaceProjectsProjectKeyBranchingModelSettingsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void workspacesWorkspaceProjectsProjectKeyBranchingModelSettingsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workspacesWorkspaceProjectsProjectKeyBranchingModelSettingsPutSignalErrorFull() instead")
    void workspacesWorkspaceProjectsProjectKeyBranchingModelSettingsPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void workspacesWorkspaceProjectsProjectKeyBranchingModelSettingsPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
