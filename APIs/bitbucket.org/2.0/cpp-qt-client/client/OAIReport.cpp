/**
 * Bitbucket API
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@bitbucket.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReport.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReport::OAIReport(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReport::OAIReport() {
    this->initializeModel();
}

OAIReport::~OAIReport() {}

void OAIReport::initializeModel() {

    m_type_isSet = false;
    m_type_isValid = false;

    m_created_on_isSet = false;
    m_created_on_isValid = false;

    m_data_isSet = false;
    m_data_isValid = false;

    m_details_isSet = false;
    m_details_isValid = false;

    m_external_id_isSet = false;
    m_external_id_isValid = false;

    m_link_isSet = false;
    m_link_isValid = false;

    m_logo_url_isSet = false;
    m_logo_url_isValid = false;

    m_remote_link_enabled_isSet = false;
    m_remote_link_enabled_isValid = false;

    m_report_type_isSet = false;
    m_report_type_isValid = false;

    m_reporter_isSet = false;
    m_reporter_isValid = false;

    m_result_isSet = false;
    m_result_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_updated_on_isSet = false;
    m_updated_on_isValid = false;

    m_uuid_isSet = false;
    m_uuid_isValid = false;
}

void OAIReport::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReport::fromJsonObject(QJsonObject json) {

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_created_on_isValid = ::OpenAPI::fromJsonValue(m_created_on, json[QString("created_on")]);
    m_created_on_isSet = !json[QString("created_on")].isNull() && m_created_on_isValid;

    m_data_isValid = ::OpenAPI::fromJsonValue(m_data, json[QString("data")]);
    m_data_isSet = !json[QString("data")].isNull() && m_data_isValid;

    m_details_isValid = ::OpenAPI::fromJsonValue(m_details, json[QString("details")]);
    m_details_isSet = !json[QString("details")].isNull() && m_details_isValid;

    m_external_id_isValid = ::OpenAPI::fromJsonValue(m_external_id, json[QString("external_id")]);
    m_external_id_isSet = !json[QString("external_id")].isNull() && m_external_id_isValid;

    m_link_isValid = ::OpenAPI::fromJsonValue(m_link, json[QString("link")]);
    m_link_isSet = !json[QString("link")].isNull() && m_link_isValid;

    m_logo_url_isValid = ::OpenAPI::fromJsonValue(m_logo_url, json[QString("logo_url")]);
    m_logo_url_isSet = !json[QString("logo_url")].isNull() && m_logo_url_isValid;

    m_remote_link_enabled_isValid = ::OpenAPI::fromJsonValue(m_remote_link_enabled, json[QString("remote_link_enabled")]);
    m_remote_link_enabled_isSet = !json[QString("remote_link_enabled")].isNull() && m_remote_link_enabled_isValid;

    m_report_type_isValid = ::OpenAPI::fromJsonValue(m_report_type, json[QString("report_type")]);
    m_report_type_isSet = !json[QString("report_type")].isNull() && m_report_type_isValid;

    m_reporter_isValid = ::OpenAPI::fromJsonValue(m_reporter, json[QString("reporter")]);
    m_reporter_isSet = !json[QString("reporter")].isNull() && m_reporter_isValid;

    m_result_isValid = ::OpenAPI::fromJsonValue(m_result, json[QString("result")]);
    m_result_isSet = !json[QString("result")].isNull() && m_result_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_updated_on_isValid = ::OpenAPI::fromJsonValue(m_updated_on, json[QString("updated_on")]);
    m_updated_on_isSet = !json[QString("updated_on")].isNull() && m_updated_on_isValid;

    m_uuid_isValid = ::OpenAPI::fromJsonValue(m_uuid, json[QString("uuid")]);
    m_uuid_isSet = !json[QString("uuid")].isNull() && m_uuid_isValid;
}

QString OAIReport::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReport::asJsonObject() const {
    QJsonObject obj;
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_created_on_isSet) {
        obj.insert(QString("created_on"), ::OpenAPI::toJsonValue(m_created_on));
    }
    if (m_data.size() > 0) {
        obj.insert(QString("data"), ::OpenAPI::toJsonValue(m_data));
    }
    if (m_details_isSet) {
        obj.insert(QString("details"), ::OpenAPI::toJsonValue(m_details));
    }
    if (m_external_id_isSet) {
        obj.insert(QString("external_id"), ::OpenAPI::toJsonValue(m_external_id));
    }
    if (m_link_isSet) {
        obj.insert(QString("link"), ::OpenAPI::toJsonValue(m_link));
    }
    if (m_logo_url_isSet) {
        obj.insert(QString("logo_url"), ::OpenAPI::toJsonValue(m_logo_url));
    }
    if (m_remote_link_enabled_isSet) {
        obj.insert(QString("remote_link_enabled"), ::OpenAPI::toJsonValue(m_remote_link_enabled));
    }
    if (m_report_type_isSet) {
        obj.insert(QString("report_type"), ::OpenAPI::toJsonValue(m_report_type));
    }
    if (m_reporter_isSet) {
        obj.insert(QString("reporter"), ::OpenAPI::toJsonValue(m_reporter));
    }
    if (m_result_isSet) {
        obj.insert(QString("result"), ::OpenAPI::toJsonValue(m_result));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_updated_on_isSet) {
        obj.insert(QString("updated_on"), ::OpenAPI::toJsonValue(m_updated_on));
    }
    if (m_uuid_isSet) {
        obj.insert(QString("uuid"), ::OpenAPI::toJsonValue(m_uuid));
    }
    return obj;
}

QString OAIReport::getType() const {
    return m_type;
}
void OAIReport::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIReport::is_type_Set() const{
    return m_type_isSet;
}

bool OAIReport::is_type_Valid() const{
    return m_type_isValid;
}

QDateTime OAIReport::getCreatedOn() const {
    return m_created_on;
}
void OAIReport::setCreatedOn(const QDateTime &created_on) {
    m_created_on = created_on;
    m_created_on_isSet = true;
}

bool OAIReport::is_created_on_Set() const{
    return m_created_on_isSet;
}

bool OAIReport::is_created_on_Valid() const{
    return m_created_on_isValid;
}

QList<OAIReport_data> OAIReport::getData() const {
    return m_data;
}
void OAIReport::setData(const QList<OAIReport_data> &data) {
    m_data = data;
    m_data_isSet = true;
}

bool OAIReport::is_data_Set() const{
    return m_data_isSet;
}

bool OAIReport::is_data_Valid() const{
    return m_data_isValid;
}

QString OAIReport::getDetails() const {
    return m_details;
}
void OAIReport::setDetails(const QString &details) {
    m_details = details;
    m_details_isSet = true;
}

bool OAIReport::is_details_Set() const{
    return m_details_isSet;
}

bool OAIReport::is_details_Valid() const{
    return m_details_isValid;
}

QString OAIReport::getExternalId() const {
    return m_external_id;
}
void OAIReport::setExternalId(const QString &external_id) {
    m_external_id = external_id;
    m_external_id_isSet = true;
}

bool OAIReport::is_external_id_Set() const{
    return m_external_id_isSet;
}

bool OAIReport::is_external_id_Valid() const{
    return m_external_id_isValid;
}

QString OAIReport::getLink() const {
    return m_link;
}
void OAIReport::setLink(const QString &link) {
    m_link = link;
    m_link_isSet = true;
}

bool OAIReport::is_link_Set() const{
    return m_link_isSet;
}

bool OAIReport::is_link_Valid() const{
    return m_link_isValid;
}

QString OAIReport::getLogoUrl() const {
    return m_logo_url;
}
void OAIReport::setLogoUrl(const QString &logo_url) {
    m_logo_url = logo_url;
    m_logo_url_isSet = true;
}

bool OAIReport::is_logo_url_Set() const{
    return m_logo_url_isSet;
}

bool OAIReport::is_logo_url_Valid() const{
    return m_logo_url_isValid;
}

bool OAIReport::isRemoteLinkEnabled() const {
    return m_remote_link_enabled;
}
void OAIReport::setRemoteLinkEnabled(const bool &remote_link_enabled) {
    m_remote_link_enabled = remote_link_enabled;
    m_remote_link_enabled_isSet = true;
}

bool OAIReport::is_remote_link_enabled_Set() const{
    return m_remote_link_enabled_isSet;
}

bool OAIReport::is_remote_link_enabled_Valid() const{
    return m_remote_link_enabled_isValid;
}

QString OAIReport::getReportType() const {
    return m_report_type;
}
void OAIReport::setReportType(const QString &report_type) {
    m_report_type = report_type;
    m_report_type_isSet = true;
}

bool OAIReport::is_report_type_Set() const{
    return m_report_type_isSet;
}

bool OAIReport::is_report_type_Valid() const{
    return m_report_type_isValid;
}

QString OAIReport::getReporter() const {
    return m_reporter;
}
void OAIReport::setReporter(const QString &reporter) {
    m_reporter = reporter;
    m_reporter_isSet = true;
}

bool OAIReport::is_reporter_Set() const{
    return m_reporter_isSet;
}

bool OAIReport::is_reporter_Valid() const{
    return m_reporter_isValid;
}

QString OAIReport::getResult() const {
    return m_result;
}
void OAIReport::setResult(const QString &result) {
    m_result = result;
    m_result_isSet = true;
}

bool OAIReport::is_result_Set() const{
    return m_result_isSet;
}

bool OAIReport::is_result_Valid() const{
    return m_result_isValid;
}

QString OAIReport::getTitle() const {
    return m_title;
}
void OAIReport::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIReport::is_title_Set() const{
    return m_title_isSet;
}

bool OAIReport::is_title_Valid() const{
    return m_title_isValid;
}

QDateTime OAIReport::getUpdatedOn() const {
    return m_updated_on;
}
void OAIReport::setUpdatedOn(const QDateTime &updated_on) {
    m_updated_on = updated_on;
    m_updated_on_isSet = true;
}

bool OAIReport::is_updated_on_Set() const{
    return m_updated_on_isSet;
}

bool OAIReport::is_updated_on_Valid() const{
    return m_updated_on_isValid;
}

QString OAIReport::getUuid() const {
    return m_uuid;
}
void OAIReport::setUuid(const QString &uuid) {
    m_uuid = uuid;
    m_uuid_isSet = true;
}

bool OAIReport::is_uuid_Set() const{
    return m_uuid_isSet;
}

bool OAIReport::is_uuid_Valid() const{
    return m_uuid_isValid;
}

bool OAIReport::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_on_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_details_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_logo_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_remote_link_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_report_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reporter_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_result_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_on_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uuid_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReport::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_type_isValid && true;
}

} // namespace OpenAPI
