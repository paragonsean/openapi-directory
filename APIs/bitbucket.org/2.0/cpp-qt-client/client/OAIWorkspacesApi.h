/**
 * Bitbucket API
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@bitbucket.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIWorkspacesApi_H
#define OAI_OAIWorkspacesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIError.h"
#include "OAIPaginated_projects.h"
#include "OAIPaginated_repository_permissions.h"
#include "OAIPaginated_webhook_subscriptions.h"
#include "OAIPaginated_workspace_memberships.h"
#include "OAIPaginated_workspaces.h"
#include "OAIProject.h"
#include "OAIWebhook_subscription.h"
#include "OAIWorkspace.h"
#include "OAIWorkspace_membership.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIWorkspacesApi : public QObject {
    Q_OBJECT

public:
    OAIWorkspacesApi(const int timeOut = 0);
    ~OAIWorkspacesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  q QString [optional]
    * @param[in]  sort QString [optional]
    */
    virtual void userPermissionsWorkspacesGet(const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  role QString [optional]
    * @param[in]  q QString [optional]
    * @param[in]  sort QString [optional]
    */
    virtual void workspacesGet(const ::OpenAPI::OptionalParam<QString> &role = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  workspace QString [required]
    */
    virtual void workspacesWorkspaceGet(const QString &workspace);

    /**
    * @param[in]  workspace QString [required]
    */
    virtual void workspacesWorkspaceHooksGet(const QString &workspace);

    /**
    * @param[in]  workspace QString [required]
    */
    virtual void workspacesWorkspaceHooksPost(const QString &workspace);

    /**
    * @param[in]  uid QString [required]
    * @param[in]  workspace QString [required]
    */
    virtual void workspacesWorkspaceHooksUidDelete(const QString &uid, const QString &workspace);

    /**
    * @param[in]  uid QString [required]
    * @param[in]  workspace QString [required]
    */
    virtual void workspacesWorkspaceHooksUidGet(const QString &uid, const QString &workspace);

    /**
    * @param[in]  uid QString [required]
    * @param[in]  workspace QString [required]
    */
    virtual void workspacesWorkspaceHooksUidPut(const QString &uid, const QString &workspace);

    /**
    * @param[in]  workspace QString [required]
    */
    virtual void workspacesWorkspaceMembersGet(const QString &workspace);

    /**
    * @param[in]  member QString [required]
    * @param[in]  workspace QString [required]
    */
    virtual void workspacesWorkspaceMembersMemberGet(const QString &member, const QString &workspace);

    /**
    * @param[in]  workspace QString [required]
    * @param[in]  q QString [optional]
    */
    virtual void workspacesWorkspacePermissionsGet(const QString &workspace, const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  workspace QString [required]
    * @param[in]  q QString [optional]
    * @param[in]  sort QString [optional]
    */
    virtual void workspacesWorkspacePermissionsRepositoriesGet(const QString &workspace, const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  repo_slug QString [required]
    * @param[in]  workspace QString [required]
    * @param[in]  q QString [optional]
    * @param[in]  sort QString [optional]
    */
    virtual void workspacesWorkspacePermissionsRepositoriesRepoSlugGet(const QString &repo_slug, const QString &workspace, const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  workspace QString [required]
    */
    virtual void workspacesWorkspaceProjectsGet(const QString &workspace);

    /**
    * @param[in]  project_key QString [required]
    * @param[in]  workspace QString [required]
    */
    virtual void workspacesWorkspaceProjectsProjectKeyGet(const QString &project_key, const QString &workspace);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void userPermissionsWorkspacesGetCallback(OAIHttpRequestWorker *worker);
    void workspacesGetCallback(OAIHttpRequestWorker *worker);
    void workspacesWorkspaceGetCallback(OAIHttpRequestWorker *worker);
    void workspacesWorkspaceHooksGetCallback(OAIHttpRequestWorker *worker);
    void workspacesWorkspaceHooksPostCallback(OAIHttpRequestWorker *worker);
    void workspacesWorkspaceHooksUidDeleteCallback(OAIHttpRequestWorker *worker);
    void workspacesWorkspaceHooksUidGetCallback(OAIHttpRequestWorker *worker);
    void workspacesWorkspaceHooksUidPutCallback(OAIHttpRequestWorker *worker);
    void workspacesWorkspaceMembersGetCallback(OAIHttpRequestWorker *worker);
    void workspacesWorkspaceMembersMemberGetCallback(OAIHttpRequestWorker *worker);
    void workspacesWorkspacePermissionsGetCallback(OAIHttpRequestWorker *worker);
    void workspacesWorkspacePermissionsRepositoriesGetCallback(OAIHttpRequestWorker *worker);
    void workspacesWorkspacePermissionsRepositoriesRepoSlugGetCallback(OAIHttpRequestWorker *worker);
    void workspacesWorkspaceProjectsGetCallback(OAIHttpRequestWorker *worker);
    void workspacesWorkspaceProjectsProjectKeyGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void userPermissionsWorkspacesGetSignal(OAIPaginated_workspace_memberships summary);
    void workspacesGetSignal(OAIPaginated_workspaces summary);
    void workspacesWorkspaceGetSignal(OAIWorkspace summary);
    void workspacesWorkspaceHooksGetSignal(OAIPaginated_webhook_subscriptions summary);
    void workspacesWorkspaceHooksPostSignal(OAIWebhook_subscription summary);
    void workspacesWorkspaceHooksUidDeleteSignal();
    void workspacesWorkspaceHooksUidGetSignal(OAIWebhook_subscription summary);
    void workspacesWorkspaceHooksUidPutSignal(OAIWebhook_subscription summary);
    void workspacesWorkspaceMembersGetSignal(OAIPaginated_workspace_memberships summary);
    void workspacesWorkspaceMembersMemberGetSignal(OAIWorkspace_membership summary);
    void workspacesWorkspacePermissionsGetSignal(OAIPaginated_workspace_memberships summary);
    void workspacesWorkspacePermissionsRepositoriesGetSignal(OAIPaginated_repository_permissions summary);
    void workspacesWorkspacePermissionsRepositoriesRepoSlugGetSignal(OAIPaginated_repository_permissions summary);
    void workspacesWorkspaceProjectsGetSignal(OAIPaginated_projects summary);
    void workspacesWorkspaceProjectsProjectKeyGetSignal(OAIProject summary);


    void userPermissionsWorkspacesGetSignalFull(OAIHttpRequestWorker *worker, OAIPaginated_workspace_memberships summary);
    void workspacesGetSignalFull(OAIHttpRequestWorker *worker, OAIPaginated_workspaces summary);
    void workspacesWorkspaceGetSignalFull(OAIHttpRequestWorker *worker, OAIWorkspace summary);
    void workspacesWorkspaceHooksGetSignalFull(OAIHttpRequestWorker *worker, OAIPaginated_webhook_subscriptions summary);
    void workspacesWorkspaceHooksPostSignalFull(OAIHttpRequestWorker *worker, OAIWebhook_subscription summary);
    void workspacesWorkspaceHooksUidDeleteSignalFull(OAIHttpRequestWorker *worker);
    void workspacesWorkspaceHooksUidGetSignalFull(OAIHttpRequestWorker *worker, OAIWebhook_subscription summary);
    void workspacesWorkspaceHooksUidPutSignalFull(OAIHttpRequestWorker *worker, OAIWebhook_subscription summary);
    void workspacesWorkspaceMembersGetSignalFull(OAIHttpRequestWorker *worker, OAIPaginated_workspace_memberships summary);
    void workspacesWorkspaceMembersMemberGetSignalFull(OAIHttpRequestWorker *worker, OAIWorkspace_membership summary);
    void workspacesWorkspacePermissionsGetSignalFull(OAIHttpRequestWorker *worker, OAIPaginated_workspace_memberships summary);
    void workspacesWorkspacePermissionsRepositoriesGetSignalFull(OAIHttpRequestWorker *worker, OAIPaginated_repository_permissions summary);
    void workspacesWorkspacePermissionsRepositoriesRepoSlugGetSignalFull(OAIHttpRequestWorker *worker, OAIPaginated_repository_permissions summary);
    void workspacesWorkspaceProjectsGetSignalFull(OAIHttpRequestWorker *worker, OAIPaginated_projects summary);
    void workspacesWorkspaceProjectsProjectKeyGetSignalFull(OAIHttpRequestWorker *worker, OAIProject summary);

    Q_DECL_DEPRECATED_X("Use userPermissionsWorkspacesGetSignalError() instead")
    void userPermissionsWorkspacesGetSignalE(OAIPaginated_workspace_memberships summary, QNetworkReply::NetworkError error_type, QString error_str);
    void userPermissionsWorkspacesGetSignalError(OAIPaginated_workspace_memberships summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workspacesGetSignalError() instead")
    void workspacesGetSignalE(OAIPaginated_workspaces summary, QNetworkReply::NetworkError error_type, QString error_str);
    void workspacesGetSignalError(OAIPaginated_workspaces summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workspacesWorkspaceGetSignalError() instead")
    void workspacesWorkspaceGetSignalE(OAIWorkspace summary, QNetworkReply::NetworkError error_type, QString error_str);
    void workspacesWorkspaceGetSignalError(OAIWorkspace summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workspacesWorkspaceHooksGetSignalError() instead")
    void workspacesWorkspaceHooksGetSignalE(OAIPaginated_webhook_subscriptions summary, QNetworkReply::NetworkError error_type, QString error_str);
    void workspacesWorkspaceHooksGetSignalError(OAIPaginated_webhook_subscriptions summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workspacesWorkspaceHooksPostSignalError() instead")
    void workspacesWorkspaceHooksPostSignalE(OAIWebhook_subscription summary, QNetworkReply::NetworkError error_type, QString error_str);
    void workspacesWorkspaceHooksPostSignalError(OAIWebhook_subscription summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workspacesWorkspaceHooksUidDeleteSignalError() instead")
    void workspacesWorkspaceHooksUidDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void workspacesWorkspaceHooksUidDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workspacesWorkspaceHooksUidGetSignalError() instead")
    void workspacesWorkspaceHooksUidGetSignalE(OAIWebhook_subscription summary, QNetworkReply::NetworkError error_type, QString error_str);
    void workspacesWorkspaceHooksUidGetSignalError(OAIWebhook_subscription summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workspacesWorkspaceHooksUidPutSignalError() instead")
    void workspacesWorkspaceHooksUidPutSignalE(OAIWebhook_subscription summary, QNetworkReply::NetworkError error_type, QString error_str);
    void workspacesWorkspaceHooksUidPutSignalError(OAIWebhook_subscription summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workspacesWorkspaceMembersGetSignalError() instead")
    void workspacesWorkspaceMembersGetSignalE(OAIPaginated_workspace_memberships summary, QNetworkReply::NetworkError error_type, QString error_str);
    void workspacesWorkspaceMembersGetSignalError(OAIPaginated_workspace_memberships summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workspacesWorkspaceMembersMemberGetSignalError() instead")
    void workspacesWorkspaceMembersMemberGetSignalE(OAIWorkspace_membership summary, QNetworkReply::NetworkError error_type, QString error_str);
    void workspacesWorkspaceMembersMemberGetSignalError(OAIWorkspace_membership summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workspacesWorkspacePermissionsGetSignalError() instead")
    void workspacesWorkspacePermissionsGetSignalE(OAIPaginated_workspace_memberships summary, QNetworkReply::NetworkError error_type, QString error_str);
    void workspacesWorkspacePermissionsGetSignalError(OAIPaginated_workspace_memberships summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workspacesWorkspacePermissionsRepositoriesGetSignalError() instead")
    void workspacesWorkspacePermissionsRepositoriesGetSignalE(OAIPaginated_repository_permissions summary, QNetworkReply::NetworkError error_type, QString error_str);
    void workspacesWorkspacePermissionsRepositoriesGetSignalError(OAIPaginated_repository_permissions summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workspacesWorkspacePermissionsRepositoriesRepoSlugGetSignalError() instead")
    void workspacesWorkspacePermissionsRepositoriesRepoSlugGetSignalE(OAIPaginated_repository_permissions summary, QNetworkReply::NetworkError error_type, QString error_str);
    void workspacesWorkspacePermissionsRepositoriesRepoSlugGetSignalError(OAIPaginated_repository_permissions summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workspacesWorkspaceProjectsGetSignalError() instead")
    void workspacesWorkspaceProjectsGetSignalE(OAIPaginated_projects summary, QNetworkReply::NetworkError error_type, QString error_str);
    void workspacesWorkspaceProjectsGetSignalError(OAIPaginated_projects summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workspacesWorkspaceProjectsProjectKeyGetSignalError() instead")
    void workspacesWorkspaceProjectsProjectKeyGetSignalE(OAIProject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void workspacesWorkspaceProjectsProjectKeyGetSignalError(OAIProject summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use userPermissionsWorkspacesGetSignalErrorFull() instead")
    void userPermissionsWorkspacesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void userPermissionsWorkspacesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workspacesGetSignalErrorFull() instead")
    void workspacesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void workspacesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workspacesWorkspaceGetSignalErrorFull() instead")
    void workspacesWorkspaceGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void workspacesWorkspaceGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workspacesWorkspaceHooksGetSignalErrorFull() instead")
    void workspacesWorkspaceHooksGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void workspacesWorkspaceHooksGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workspacesWorkspaceHooksPostSignalErrorFull() instead")
    void workspacesWorkspaceHooksPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void workspacesWorkspaceHooksPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workspacesWorkspaceHooksUidDeleteSignalErrorFull() instead")
    void workspacesWorkspaceHooksUidDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void workspacesWorkspaceHooksUidDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workspacesWorkspaceHooksUidGetSignalErrorFull() instead")
    void workspacesWorkspaceHooksUidGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void workspacesWorkspaceHooksUidGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workspacesWorkspaceHooksUidPutSignalErrorFull() instead")
    void workspacesWorkspaceHooksUidPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void workspacesWorkspaceHooksUidPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workspacesWorkspaceMembersGetSignalErrorFull() instead")
    void workspacesWorkspaceMembersGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void workspacesWorkspaceMembersGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workspacesWorkspaceMembersMemberGetSignalErrorFull() instead")
    void workspacesWorkspaceMembersMemberGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void workspacesWorkspaceMembersMemberGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workspacesWorkspacePermissionsGetSignalErrorFull() instead")
    void workspacesWorkspacePermissionsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void workspacesWorkspacePermissionsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workspacesWorkspacePermissionsRepositoriesGetSignalErrorFull() instead")
    void workspacesWorkspacePermissionsRepositoriesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void workspacesWorkspacePermissionsRepositoriesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workspacesWorkspacePermissionsRepositoriesRepoSlugGetSignalErrorFull() instead")
    void workspacesWorkspacePermissionsRepositoriesRepoSlugGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void workspacesWorkspacePermissionsRepositoriesRepoSlugGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workspacesWorkspaceProjectsGetSignalErrorFull() instead")
    void workspacesWorkspaceProjectsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void workspacesWorkspaceProjectsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workspacesWorkspaceProjectsProjectKeyGetSignalErrorFull() instead")
    void workspacesWorkspaceProjectsProjectKeyGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void workspacesWorkspaceProjectsProjectKeyGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
