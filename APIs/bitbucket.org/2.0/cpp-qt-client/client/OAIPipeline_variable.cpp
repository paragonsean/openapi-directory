/**
 * Bitbucket API
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@bitbucket.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPipeline_variable.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPipeline_variable::OAIPipeline_variable(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPipeline_variable::OAIPipeline_variable() {
    this->initializeModel();
}

OAIPipeline_variable::~OAIPipeline_variable() {}

void OAIPipeline_variable::initializeModel() {

    m_type_isSet = false;
    m_type_isValid = false;

    m_key_isSet = false;
    m_key_isValid = false;

    m_secured_isSet = false;
    m_secured_isValid = false;

    m_uuid_isSet = false;
    m_uuid_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAIPipeline_variable::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPipeline_variable::fromJsonObject(QJsonObject json) {

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_key_isValid = ::OpenAPI::fromJsonValue(m_key, json[QString("key")]);
    m_key_isSet = !json[QString("key")].isNull() && m_key_isValid;

    m_secured_isValid = ::OpenAPI::fromJsonValue(m_secured, json[QString("secured")]);
    m_secured_isSet = !json[QString("secured")].isNull() && m_secured_isValid;

    m_uuid_isValid = ::OpenAPI::fromJsonValue(m_uuid, json[QString("uuid")]);
    m_uuid_isSet = !json[QString("uuid")].isNull() && m_uuid_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAIPipeline_variable::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPipeline_variable::asJsonObject() const {
    QJsonObject obj;
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_key_isSet) {
        obj.insert(QString("key"), ::OpenAPI::toJsonValue(m_key));
    }
    if (m_secured_isSet) {
        obj.insert(QString("secured"), ::OpenAPI::toJsonValue(m_secured));
    }
    if (m_uuid_isSet) {
        obj.insert(QString("uuid"), ::OpenAPI::toJsonValue(m_uuid));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

QString OAIPipeline_variable::getType() const {
    return m_type;
}
void OAIPipeline_variable::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIPipeline_variable::is_type_Set() const{
    return m_type_isSet;
}

bool OAIPipeline_variable::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIPipeline_variable::getKey() const {
    return m_key;
}
void OAIPipeline_variable::setKey(const QString &key) {
    m_key = key;
    m_key_isSet = true;
}

bool OAIPipeline_variable::is_key_Set() const{
    return m_key_isSet;
}

bool OAIPipeline_variable::is_key_Valid() const{
    return m_key_isValid;
}

bool OAIPipeline_variable::isSecured() const {
    return m_secured;
}
void OAIPipeline_variable::setSecured(const bool &secured) {
    m_secured = secured;
    m_secured_isSet = true;
}

bool OAIPipeline_variable::is_secured_Set() const{
    return m_secured_isSet;
}

bool OAIPipeline_variable::is_secured_Valid() const{
    return m_secured_isValid;
}

QString OAIPipeline_variable::getUuid() const {
    return m_uuid;
}
void OAIPipeline_variable::setUuid(const QString &uuid) {
    m_uuid = uuid;
    m_uuid_isSet = true;
}

bool OAIPipeline_variable::is_uuid_Set() const{
    return m_uuid_isSet;
}

bool OAIPipeline_variable::is_uuid_Valid() const{
    return m_uuid_isValid;
}

QString OAIPipeline_variable::getValue() const {
    return m_value;
}
void OAIPipeline_variable::setValue(const QString &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIPipeline_variable::is_value_Set() const{
    return m_value_isSet;
}

bool OAIPipeline_variable::is_value_Valid() const{
    return m_value_isValid;
}

bool OAIPipeline_variable::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_secured_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uuid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPipeline_variable::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_type_isValid && true;
}

} // namespace OpenAPI
