/**
 * Bitbucket API
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@bitbucket.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIssue_job_status.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIssue_job_status::OAIIssue_job_status(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIssue_job_status::OAIIssue_job_status() {
    this->initializeModel();
}

OAIIssue_job_status::~OAIIssue_job_status() {}

void OAIIssue_job_status::initializeModel() {

    m_count_isSet = false;
    m_count_isValid = false;

    m_pct_isSet = false;
    m_pct_isValid = false;

    m_phase_isSet = false;
    m_phase_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_total_isSet = false;
    m_total_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIIssue_job_status::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIssue_job_status::fromJsonObject(QJsonObject json) {

    m_count_isValid = ::OpenAPI::fromJsonValue(m_count, json[QString("count")]);
    m_count_isSet = !json[QString("count")].isNull() && m_count_isValid;

    m_pct_isValid = ::OpenAPI::fromJsonValue(m_pct, json[QString("pct")]);
    m_pct_isSet = !json[QString("pct")].isNull() && m_pct_isValid;

    m_phase_isValid = ::OpenAPI::fromJsonValue(m_phase, json[QString("phase")]);
    m_phase_isSet = !json[QString("phase")].isNull() && m_phase_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_total_isValid = ::OpenAPI::fromJsonValue(m_total, json[QString("total")]);
    m_total_isSet = !json[QString("total")].isNull() && m_total_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIIssue_job_status::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIssue_job_status::asJsonObject() const {
    QJsonObject obj;
    if (m_count_isSet) {
        obj.insert(QString("count"), ::OpenAPI::toJsonValue(m_count));
    }
    if (m_pct_isSet) {
        obj.insert(QString("pct"), ::OpenAPI::toJsonValue(m_pct));
    }
    if (m_phase_isSet) {
        obj.insert(QString("phase"), ::OpenAPI::toJsonValue(m_phase));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_total_isSet) {
        obj.insert(QString("total"), ::OpenAPI::toJsonValue(m_total));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

qint32 OAIIssue_job_status::getCount() const {
    return m_count;
}
void OAIIssue_job_status::setCount(const qint32 &count) {
    m_count = count;
    m_count_isSet = true;
}

bool OAIIssue_job_status::is_count_Set() const{
    return m_count_isSet;
}

bool OAIIssue_job_status::is_count_Valid() const{
    return m_count_isValid;
}

double OAIIssue_job_status::getPct() const {
    return m_pct;
}
void OAIIssue_job_status::setPct(const double &pct) {
    m_pct = pct;
    m_pct_isSet = true;
}

bool OAIIssue_job_status::is_pct_Set() const{
    return m_pct_isSet;
}

bool OAIIssue_job_status::is_pct_Valid() const{
    return m_pct_isValid;
}

QString OAIIssue_job_status::getPhase() const {
    return m_phase;
}
void OAIIssue_job_status::setPhase(const QString &phase) {
    m_phase = phase;
    m_phase_isSet = true;
}

bool OAIIssue_job_status::is_phase_Set() const{
    return m_phase_isSet;
}

bool OAIIssue_job_status::is_phase_Valid() const{
    return m_phase_isValid;
}

QString OAIIssue_job_status::getStatus() const {
    return m_status;
}
void OAIIssue_job_status::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIIssue_job_status::is_status_Set() const{
    return m_status_isSet;
}

bool OAIIssue_job_status::is_status_Valid() const{
    return m_status_isValid;
}

qint32 OAIIssue_job_status::getTotal() const {
    return m_total;
}
void OAIIssue_job_status::setTotal(const qint32 &total) {
    m_total = total;
    m_total_isSet = true;
}

bool OAIIssue_job_status::is_total_Set() const{
    return m_total_isSet;
}

bool OAIIssue_job_status::is_total_Valid() const{
    return m_total_isValid;
}

QString OAIIssue_job_status::getType() const {
    return m_type;
}
void OAIIssue_job_status::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIIssue_job_status::is_type_Set() const{
    return m_type_isSet;
}

bool OAIIssue_job_status::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIIssue_job_status::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pct_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phase_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIssue_job_status::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
