/**
 * Bitbucket API
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@bitbucket.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWorkspace_links.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWorkspace_links::OAIWorkspace_links(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWorkspace_links::OAIWorkspace_links() {
    this->initializeModel();
}

OAIWorkspace_links::~OAIWorkspace_links() {}

void OAIWorkspace_links::initializeModel() {

    m_avatar_isSet = false;
    m_avatar_isValid = false;

    m_html_isSet = false;
    m_html_isValid = false;

    m_members_isSet = false;
    m_members_isValid = false;

    m_owners_isSet = false;
    m_owners_isValid = false;

    m_projects_isSet = false;
    m_projects_isValid = false;

    m_repositories_isSet = false;
    m_repositories_isValid = false;

    m_self_isSet = false;
    m_self_isValid = false;

    m_snippets_isSet = false;
    m_snippets_isValid = false;
}

void OAIWorkspace_links::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWorkspace_links::fromJsonObject(QJsonObject json) {

    m_avatar_isValid = ::OpenAPI::fromJsonValue(m_avatar, json[QString("avatar")]);
    m_avatar_isSet = !json[QString("avatar")].isNull() && m_avatar_isValid;

    m_html_isValid = ::OpenAPI::fromJsonValue(m_html, json[QString("html")]);
    m_html_isSet = !json[QString("html")].isNull() && m_html_isValid;

    m_members_isValid = ::OpenAPI::fromJsonValue(m_members, json[QString("members")]);
    m_members_isSet = !json[QString("members")].isNull() && m_members_isValid;

    m_owners_isValid = ::OpenAPI::fromJsonValue(m_owners, json[QString("owners")]);
    m_owners_isSet = !json[QString("owners")].isNull() && m_owners_isValid;

    m_projects_isValid = ::OpenAPI::fromJsonValue(m_projects, json[QString("projects")]);
    m_projects_isSet = !json[QString("projects")].isNull() && m_projects_isValid;

    m_repositories_isValid = ::OpenAPI::fromJsonValue(m_repositories, json[QString("repositories")]);
    m_repositories_isSet = !json[QString("repositories")].isNull() && m_repositories_isValid;

    m_self_isValid = ::OpenAPI::fromJsonValue(m_self, json[QString("self")]);
    m_self_isSet = !json[QString("self")].isNull() && m_self_isValid;

    m_snippets_isValid = ::OpenAPI::fromJsonValue(m_snippets, json[QString("snippets")]);
    m_snippets_isSet = !json[QString("snippets")].isNull() && m_snippets_isValid;
}

QString OAIWorkspace_links::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWorkspace_links::asJsonObject() const {
    QJsonObject obj;
    if (m_avatar.isSet()) {
        obj.insert(QString("avatar"), ::OpenAPI::toJsonValue(m_avatar));
    }
    if (m_html.isSet()) {
        obj.insert(QString("html"), ::OpenAPI::toJsonValue(m_html));
    }
    if (m_members.isSet()) {
        obj.insert(QString("members"), ::OpenAPI::toJsonValue(m_members));
    }
    if (m_owners.isSet()) {
        obj.insert(QString("owners"), ::OpenAPI::toJsonValue(m_owners));
    }
    if (m_projects.isSet()) {
        obj.insert(QString("projects"), ::OpenAPI::toJsonValue(m_projects));
    }
    if (m_repositories.isSet()) {
        obj.insert(QString("repositories"), ::OpenAPI::toJsonValue(m_repositories));
    }
    if (m_self.isSet()) {
        obj.insert(QString("self"), ::OpenAPI::toJsonValue(m_self));
    }
    if (m_snippets.isSet()) {
        obj.insert(QString("snippets"), ::OpenAPI::toJsonValue(m_snippets));
    }
    return obj;
}

OAILink OAIWorkspace_links::getAvatar() const {
    return m_avatar;
}
void OAIWorkspace_links::setAvatar(const OAILink &avatar) {
    m_avatar = avatar;
    m_avatar_isSet = true;
}

bool OAIWorkspace_links::is_avatar_Set() const{
    return m_avatar_isSet;
}

bool OAIWorkspace_links::is_avatar_Valid() const{
    return m_avatar_isValid;
}

OAILink OAIWorkspace_links::getHtml() const {
    return m_html;
}
void OAIWorkspace_links::setHtml(const OAILink &html) {
    m_html = html;
    m_html_isSet = true;
}

bool OAIWorkspace_links::is_html_Set() const{
    return m_html_isSet;
}

bool OAIWorkspace_links::is_html_Valid() const{
    return m_html_isValid;
}

OAILink OAIWorkspace_links::getMembers() const {
    return m_members;
}
void OAIWorkspace_links::setMembers(const OAILink &members) {
    m_members = members;
    m_members_isSet = true;
}

bool OAIWorkspace_links::is_members_Set() const{
    return m_members_isSet;
}

bool OAIWorkspace_links::is_members_Valid() const{
    return m_members_isValid;
}

OAILink OAIWorkspace_links::getOwners() const {
    return m_owners;
}
void OAIWorkspace_links::setOwners(const OAILink &owners) {
    m_owners = owners;
    m_owners_isSet = true;
}

bool OAIWorkspace_links::is_owners_Set() const{
    return m_owners_isSet;
}

bool OAIWorkspace_links::is_owners_Valid() const{
    return m_owners_isValid;
}

OAILink OAIWorkspace_links::getProjects() const {
    return m_projects;
}
void OAIWorkspace_links::setProjects(const OAILink &projects) {
    m_projects = projects;
    m_projects_isSet = true;
}

bool OAIWorkspace_links::is_projects_Set() const{
    return m_projects_isSet;
}

bool OAIWorkspace_links::is_projects_Valid() const{
    return m_projects_isValid;
}

OAILink OAIWorkspace_links::getRepositories() const {
    return m_repositories;
}
void OAIWorkspace_links::setRepositories(const OAILink &repositories) {
    m_repositories = repositories;
    m_repositories_isSet = true;
}

bool OAIWorkspace_links::is_repositories_Set() const{
    return m_repositories_isSet;
}

bool OAIWorkspace_links::is_repositories_Valid() const{
    return m_repositories_isValid;
}

OAILink OAIWorkspace_links::getSelf() const {
    return m_self;
}
void OAIWorkspace_links::setSelf(const OAILink &self) {
    m_self = self;
    m_self_isSet = true;
}

bool OAIWorkspace_links::is_self_Set() const{
    return m_self_isSet;
}

bool OAIWorkspace_links::is_self_Valid() const{
    return m_self_isValid;
}

OAILink OAIWorkspace_links::getSnippets() const {
    return m_snippets;
}
void OAIWorkspace_links::setSnippets(const OAILink &snippets) {
    m_snippets = snippets;
    m_snippets_isSet = true;
}

bool OAIWorkspace_links::is_snippets_Set() const{
    return m_snippets_isSet;
}

bool OAIWorkspace_links::is_snippets_Valid() const{
    return m_snippets_isValid;
}

bool OAIWorkspace_links::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_avatar.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_html.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_members.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_owners.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_projects.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_repositories.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_self.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_snippets.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWorkspace_links::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
