/**
 * Bitbucket API
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@bitbucket.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIssue_change_changes_assignee.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIssue_change_changes_assignee::OAIIssue_change_changes_assignee(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIssue_change_changes_assignee::OAIIssue_change_changes_assignee() {
    this->initializeModel();
}

OAIIssue_change_changes_assignee::~OAIIssue_change_changes_assignee() {}

void OAIIssue_change_changes_assignee::initializeModel() {

    m_r_new_isSet = false;
    m_r_new_isValid = false;

    m_old_isSet = false;
    m_old_isValid = false;
}

void OAIIssue_change_changes_assignee::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIssue_change_changes_assignee::fromJsonObject(QJsonObject json) {

    m_r_new_isValid = ::OpenAPI::fromJsonValue(m_r_new, json[QString("new")]);
    m_r_new_isSet = !json[QString("new")].isNull() && m_r_new_isValid;

    m_old_isValid = ::OpenAPI::fromJsonValue(m_old, json[QString("old")]);
    m_old_isSet = !json[QString("old")].isNull() && m_old_isValid;
}

QString OAIIssue_change_changes_assignee::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIssue_change_changes_assignee::asJsonObject() const {
    QJsonObject obj;
    if (m_r_new_isSet) {
        obj.insert(QString("new"), ::OpenAPI::toJsonValue(m_r_new));
    }
    if (m_old_isSet) {
        obj.insert(QString("old"), ::OpenAPI::toJsonValue(m_old));
    }
    return obj;
}

QString OAIIssue_change_changes_assignee::getRNew() const {
    return m_r_new;
}
void OAIIssue_change_changes_assignee::setRNew(const QString &r_new) {
    m_r_new = r_new;
    m_r_new_isSet = true;
}

bool OAIIssue_change_changes_assignee::is_r_new_Set() const{
    return m_r_new_isSet;
}

bool OAIIssue_change_changes_assignee::is_r_new_Valid() const{
    return m_r_new_isValid;
}

QString OAIIssue_change_changes_assignee::getOld() const {
    return m_old;
}
void OAIIssue_change_changes_assignee::setOld(const QString &old) {
    m_old = old;
    m_old_isSet = true;
}

bool OAIIssue_change_changes_assignee::is_old_Set() const{
    return m_old_isSet;
}

bool OAIIssue_change_changes_assignee::is_old_Valid() const{
    return m_old_isValid;
}

bool OAIIssue_change_changes_assignee::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_r_new_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_old_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIssue_change_changes_assignee::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
