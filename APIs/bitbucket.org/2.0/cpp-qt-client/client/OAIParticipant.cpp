/**
 * Bitbucket API
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@bitbucket.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIParticipant.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIParticipant::OAIParticipant(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIParticipant::OAIParticipant() {
    this->initializeModel();
}

OAIParticipant::~OAIParticipant() {}

void OAIParticipant::initializeModel() {

    m_type_isSet = false;
    m_type_isValid = false;

    m_approved_isSet = false;
    m_approved_isValid = false;

    m_participated_on_isSet = false;
    m_participated_on_isValid = false;

    m_role_isSet = false;
    m_role_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;
}

void OAIParticipant::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIParticipant::fromJsonObject(QJsonObject json) {

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_approved_isValid = ::OpenAPI::fromJsonValue(m_approved, json[QString("approved")]);
    m_approved_isSet = !json[QString("approved")].isNull() && m_approved_isValid;

    m_participated_on_isValid = ::OpenAPI::fromJsonValue(m_participated_on, json[QString("participated_on")]);
    m_participated_on_isSet = !json[QString("participated_on")].isNull() && m_participated_on_isValid;

    m_role_isValid = ::OpenAPI::fromJsonValue(m_role, json[QString("role")]);
    m_role_isSet = !json[QString("role")].isNull() && m_role_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;
}

QString OAIParticipant::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIParticipant::asJsonObject() const {
    QJsonObject obj;
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_approved_isSet) {
        obj.insert(QString("approved"), ::OpenAPI::toJsonValue(m_approved));
    }
    if (m_participated_on_isSet) {
        obj.insert(QString("participated_on"), ::OpenAPI::toJsonValue(m_participated_on));
    }
    if (m_role_isSet) {
        obj.insert(QString("role"), ::OpenAPI::toJsonValue(m_role));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_user.isSet()) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    return obj;
}

QString OAIParticipant::getType() const {
    return m_type;
}
void OAIParticipant::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIParticipant::is_type_Set() const{
    return m_type_isSet;
}

bool OAIParticipant::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIParticipant::isApproved() const {
    return m_approved;
}
void OAIParticipant::setApproved(const bool &approved) {
    m_approved = approved;
    m_approved_isSet = true;
}

bool OAIParticipant::is_approved_Set() const{
    return m_approved_isSet;
}

bool OAIParticipant::is_approved_Valid() const{
    return m_approved_isValid;
}

QDateTime OAIParticipant::getParticipatedOn() const {
    return m_participated_on;
}
void OAIParticipant::setParticipatedOn(const QDateTime &participated_on) {
    m_participated_on = participated_on;
    m_participated_on_isSet = true;
}

bool OAIParticipant::is_participated_on_Set() const{
    return m_participated_on_isSet;
}

bool OAIParticipant::is_participated_on_Valid() const{
    return m_participated_on_isValid;
}

QString OAIParticipant::getRole() const {
    return m_role;
}
void OAIParticipant::setRole(const QString &role) {
    m_role = role;
    m_role_isSet = true;
}

bool OAIParticipant::is_role_Set() const{
    return m_role_isSet;
}

bool OAIParticipant::is_role_Valid() const{
    return m_role_isValid;
}

QString OAIParticipant::getState() const {
    return m_state;
}
void OAIParticipant::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIParticipant::is_state_Set() const{
    return m_state_isSet;
}

bool OAIParticipant::is_state_Valid() const{
    return m_state_isValid;
}

OAIAccount OAIParticipant::getUser() const {
    return m_user;
}
void OAIParticipant::setUser(const OAIAccount &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAIParticipant::is_user_Set() const{
    return m_user_isSet;
}

bool OAIParticipant::is_user_Valid() const{
    return m_user_isValid;
}

bool OAIParticipant::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_approved_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_participated_on_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIParticipant::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_type_isValid && true;
}

} // namespace OpenAPI
