/**
 * Bitbucket API
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@bitbucket.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIIssueTrackerApi_H
#define OAI_OAIIssueTrackerApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIComponent.h"
#include "OAIError.h"
#include "OAIExport_options.h"
#include "OAIIssue.h"
#include "OAIIssue_change.h"
#include "OAIIssue_comment.h"
#include "OAIIssue_job_status.h"
#include "OAIMilestone.h"
#include "OAIPaginated_components.h"
#include "OAIPaginated_issue_attachments.h"
#include "OAIPaginated_issue_comments.h"
#include "OAIPaginated_issues.h"
#include "OAIPaginated_log_entries.h"
#include "OAIPaginated_milestones.h"
#include "OAIPaginated_versions.h"
#include "OAIVersion.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIIssueTrackerApi : public QObject {
    Q_OBJECT

public:
    OAIIssueTrackerApi(const int timeOut = 0);
    ~OAIIssueTrackerApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  component_id qint32 [required]
    * @param[in]  repo_slug QString [required]
    * @param[in]  workspace QString [required]
    */
    virtual void repositoriesWorkspaceRepoSlugComponentsComponentIdGet(const qint32 &component_id, const QString &repo_slug, const QString &workspace);

    /**
    * @param[in]  repo_slug QString [required]
    * @param[in]  workspace QString [required]
    */
    virtual void repositoriesWorkspaceRepoSlugComponentsGet(const QString &repo_slug, const QString &workspace);

    /**
    * @param[in]  repo_slug QString [required]
    * @param[in]  workspace QString [required]
    * @param[in]  oai_export_options OAIExport_options [optional]
    */
    virtual void repositoriesWorkspaceRepoSlugIssuesExportPost(const QString &repo_slug, const QString &workspace, const ::OpenAPI::OptionalParam<OAIExport_options> &oai_export_options = ::OpenAPI::OptionalParam<OAIExport_options>());

    /**
    * @param[in]  repo_name QString [required]
    * @param[in]  repo_slug QString [required]
    * @param[in]  task_id QString [required]
    * @param[in]  workspace QString [required]
    */
    virtual void repositoriesWorkspaceRepoSlugIssuesExportRepoNameIssuesTaskIdZipGet(const QString &repo_name, const QString &repo_slug, const QString &task_id, const QString &workspace);

    /**
    * @param[in]  repo_slug QString [required]
    * @param[in]  workspace QString [required]
    */
    virtual void repositoriesWorkspaceRepoSlugIssuesGet(const QString &repo_slug, const QString &workspace);

    /**
    * @param[in]  repo_slug QString [required]
    * @param[in]  workspace QString [required]
    */
    virtual void repositoriesWorkspaceRepoSlugIssuesImportGet(const QString &repo_slug, const QString &workspace);

    /**
    * @param[in]  repo_slug QString [required]
    * @param[in]  workspace QString [required]
    */
    virtual void repositoriesWorkspaceRepoSlugIssuesImportPost(const QString &repo_slug, const QString &workspace);

    /**
    * @param[in]  issue_id QString [required]
    * @param[in]  repo_slug QString [required]
    * @param[in]  workspace QString [required]
    */
    virtual void repositoriesWorkspaceRepoSlugIssuesIssueIdAttachmentsGet(const QString &issue_id, const QString &repo_slug, const QString &workspace);

    /**
    * @param[in]  issue_id QString [required]
    * @param[in]  path QString [required]
    * @param[in]  repo_slug QString [required]
    * @param[in]  workspace QString [required]
    */
    virtual void repositoriesWorkspaceRepoSlugIssuesIssueIdAttachmentsPathDelete(const QString &issue_id, const QString &path, const QString &repo_slug, const QString &workspace);

    /**
    * @param[in]  issue_id QString [required]
    * @param[in]  path QString [required]
    * @param[in]  repo_slug QString [required]
    * @param[in]  workspace QString [required]
    */
    virtual void repositoriesWorkspaceRepoSlugIssuesIssueIdAttachmentsPathGet(const QString &issue_id, const QString &path, const QString &repo_slug, const QString &workspace);

    /**
    * @param[in]  issue_id QString [required]
    * @param[in]  repo_slug QString [required]
    * @param[in]  workspace QString [required]
    */
    virtual void repositoriesWorkspaceRepoSlugIssuesIssueIdAttachmentsPost(const QString &issue_id, const QString &repo_slug, const QString &workspace);

    /**
    * @param[in]  change_id QString [required]
    * @param[in]  issue_id QString [required]
    * @param[in]  repo_slug QString [required]
    * @param[in]  workspace QString [required]
    */
    virtual void repositoriesWorkspaceRepoSlugIssuesIssueIdChangesChangeIdGet(const QString &change_id, const QString &issue_id, const QString &repo_slug, const QString &workspace);

    /**
    * @param[in]  issue_id QString [required]
    * @param[in]  repo_slug QString [required]
    * @param[in]  workspace QString [required]
    * @param[in]  q QString [optional]
    * @param[in]  sort QString [optional]
    */
    virtual void repositoriesWorkspaceRepoSlugIssuesIssueIdChangesGet(const QString &issue_id, const QString &repo_slug, const QString &workspace, const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  issue_id QString [required]
    * @param[in]  repo_slug QString [required]
    * @param[in]  workspace QString [required]
    * @param[in]  oai_issue_change OAIIssue_change [required]
    */
    virtual void repositoriesWorkspaceRepoSlugIssuesIssueIdChangesPost(const QString &issue_id, const QString &repo_slug, const QString &workspace, const OAIIssue_change &oai_issue_change);

    /**
    * @param[in]  comment_id qint32 [required]
    * @param[in]  issue_id QString [required]
    * @param[in]  repo_slug QString [required]
    * @param[in]  workspace QString [required]
    */
    virtual void repositoriesWorkspaceRepoSlugIssuesIssueIdCommentsCommentIdDelete(const qint32 &comment_id, const QString &issue_id, const QString &repo_slug, const QString &workspace);

    /**
    * @param[in]  comment_id qint32 [required]
    * @param[in]  issue_id QString [required]
    * @param[in]  repo_slug QString [required]
    * @param[in]  workspace QString [required]
    */
    virtual void repositoriesWorkspaceRepoSlugIssuesIssueIdCommentsCommentIdGet(const qint32 &comment_id, const QString &issue_id, const QString &repo_slug, const QString &workspace);

    /**
    * @param[in]  comment_id qint32 [required]
    * @param[in]  issue_id QString [required]
    * @param[in]  repo_slug QString [required]
    * @param[in]  workspace QString [required]
    * @param[in]  oai_issue_comment OAIIssue_comment [required]
    */
    virtual void repositoriesWorkspaceRepoSlugIssuesIssueIdCommentsCommentIdPut(const qint32 &comment_id, const QString &issue_id, const QString &repo_slug, const QString &workspace, const OAIIssue_comment &oai_issue_comment);

    /**
    * @param[in]  issue_id QString [required]
    * @param[in]  repo_slug QString [required]
    * @param[in]  workspace QString [required]
    * @param[in]  q QString [optional]
    */
    virtual void repositoriesWorkspaceRepoSlugIssuesIssueIdCommentsGet(const QString &issue_id, const QString &repo_slug, const QString &workspace, const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  issue_id QString [required]
    * @param[in]  repo_slug QString [required]
    * @param[in]  workspace QString [required]
    * @param[in]  oai_issue_comment OAIIssue_comment [required]
    */
    virtual void repositoriesWorkspaceRepoSlugIssuesIssueIdCommentsPost(const QString &issue_id, const QString &repo_slug, const QString &workspace, const OAIIssue_comment &oai_issue_comment);

    /**
    * @param[in]  issue_id QString [required]
    * @param[in]  repo_slug QString [required]
    * @param[in]  workspace QString [required]
    */
    virtual void repositoriesWorkspaceRepoSlugIssuesIssueIdDelete(const QString &issue_id, const QString &repo_slug, const QString &workspace);

    /**
    * @param[in]  issue_id QString [required]
    * @param[in]  repo_slug QString [required]
    * @param[in]  workspace QString [required]
    */
    virtual void repositoriesWorkspaceRepoSlugIssuesIssueIdGet(const QString &issue_id, const QString &repo_slug, const QString &workspace);

    /**
    * @param[in]  issue_id QString [required]
    * @param[in]  repo_slug QString [required]
    * @param[in]  workspace QString [required]
    */
    virtual void repositoriesWorkspaceRepoSlugIssuesIssueIdPut(const QString &issue_id, const QString &repo_slug, const QString &workspace);

    /**
    * @param[in]  issue_id QString [required]
    * @param[in]  repo_slug QString [required]
    * @param[in]  workspace QString [required]
    */
    virtual void repositoriesWorkspaceRepoSlugIssuesIssueIdVoteDelete(const QString &issue_id, const QString &repo_slug, const QString &workspace);

    /**
    * @param[in]  issue_id QString [required]
    * @param[in]  repo_slug QString [required]
    * @param[in]  workspace QString [required]
    */
    virtual void repositoriesWorkspaceRepoSlugIssuesIssueIdVoteGet(const QString &issue_id, const QString &repo_slug, const QString &workspace);

    /**
    * @param[in]  issue_id QString [required]
    * @param[in]  repo_slug QString [required]
    * @param[in]  workspace QString [required]
    */
    virtual void repositoriesWorkspaceRepoSlugIssuesIssueIdVotePut(const QString &issue_id, const QString &repo_slug, const QString &workspace);

    /**
    * @param[in]  issue_id QString [required]
    * @param[in]  repo_slug QString [required]
    * @param[in]  workspace QString [required]
    */
    virtual void repositoriesWorkspaceRepoSlugIssuesIssueIdWatchDelete(const QString &issue_id, const QString &repo_slug, const QString &workspace);

    /**
    * @param[in]  issue_id QString [required]
    * @param[in]  repo_slug QString [required]
    * @param[in]  workspace QString [required]
    */
    virtual void repositoriesWorkspaceRepoSlugIssuesIssueIdWatchGet(const QString &issue_id, const QString &repo_slug, const QString &workspace);

    /**
    * @param[in]  issue_id QString [required]
    * @param[in]  repo_slug QString [required]
    * @param[in]  workspace QString [required]
    */
    virtual void repositoriesWorkspaceRepoSlugIssuesIssueIdWatchPut(const QString &issue_id, const QString &repo_slug, const QString &workspace);

    /**
    * @param[in]  repo_slug QString [required]
    * @param[in]  workspace QString [required]
    * @param[in]  oai_issue OAIIssue [required]
    */
    virtual void repositoriesWorkspaceRepoSlugIssuesPost(const QString &repo_slug, const QString &workspace, const OAIIssue &oai_issue);

    /**
    * @param[in]  repo_slug QString [required]
    * @param[in]  workspace QString [required]
    */
    virtual void repositoriesWorkspaceRepoSlugMilestonesGet(const QString &repo_slug, const QString &workspace);

    /**
    * @param[in]  milestone_id qint32 [required]
    * @param[in]  repo_slug QString [required]
    * @param[in]  workspace QString [required]
    */
    virtual void repositoriesWorkspaceRepoSlugMilestonesMilestoneIdGet(const qint32 &milestone_id, const QString &repo_slug, const QString &workspace);

    /**
    * @param[in]  repo_slug QString [required]
    * @param[in]  workspace QString [required]
    */
    virtual void repositoriesWorkspaceRepoSlugVersionsGet(const QString &repo_slug, const QString &workspace);

    /**
    * @param[in]  repo_slug QString [required]
    * @param[in]  version_id qint32 [required]
    * @param[in]  workspace QString [required]
    */
    virtual void repositoriesWorkspaceRepoSlugVersionsVersionIdGet(const QString &repo_slug, const qint32 &version_id, const QString &workspace);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void repositoriesWorkspaceRepoSlugComponentsComponentIdGetCallback(OAIHttpRequestWorker *worker);
    void repositoriesWorkspaceRepoSlugComponentsGetCallback(OAIHttpRequestWorker *worker);
    void repositoriesWorkspaceRepoSlugIssuesExportPostCallback(OAIHttpRequestWorker *worker);
    void repositoriesWorkspaceRepoSlugIssuesExportRepoNameIssuesTaskIdZipGetCallback(OAIHttpRequestWorker *worker);
    void repositoriesWorkspaceRepoSlugIssuesGetCallback(OAIHttpRequestWorker *worker);
    void repositoriesWorkspaceRepoSlugIssuesImportGetCallback(OAIHttpRequestWorker *worker);
    void repositoriesWorkspaceRepoSlugIssuesImportPostCallback(OAIHttpRequestWorker *worker);
    void repositoriesWorkspaceRepoSlugIssuesIssueIdAttachmentsGetCallback(OAIHttpRequestWorker *worker);
    void repositoriesWorkspaceRepoSlugIssuesIssueIdAttachmentsPathDeleteCallback(OAIHttpRequestWorker *worker);
    void repositoriesWorkspaceRepoSlugIssuesIssueIdAttachmentsPathGetCallback(OAIHttpRequestWorker *worker);
    void repositoriesWorkspaceRepoSlugIssuesIssueIdAttachmentsPostCallback(OAIHttpRequestWorker *worker);
    void repositoriesWorkspaceRepoSlugIssuesIssueIdChangesChangeIdGetCallback(OAIHttpRequestWorker *worker);
    void repositoriesWorkspaceRepoSlugIssuesIssueIdChangesGetCallback(OAIHttpRequestWorker *worker);
    void repositoriesWorkspaceRepoSlugIssuesIssueIdChangesPostCallback(OAIHttpRequestWorker *worker);
    void repositoriesWorkspaceRepoSlugIssuesIssueIdCommentsCommentIdDeleteCallback(OAIHttpRequestWorker *worker);
    void repositoriesWorkspaceRepoSlugIssuesIssueIdCommentsCommentIdGetCallback(OAIHttpRequestWorker *worker);
    void repositoriesWorkspaceRepoSlugIssuesIssueIdCommentsCommentIdPutCallback(OAIHttpRequestWorker *worker);
    void repositoriesWorkspaceRepoSlugIssuesIssueIdCommentsGetCallback(OAIHttpRequestWorker *worker);
    void repositoriesWorkspaceRepoSlugIssuesIssueIdCommentsPostCallback(OAIHttpRequestWorker *worker);
    void repositoriesWorkspaceRepoSlugIssuesIssueIdDeleteCallback(OAIHttpRequestWorker *worker);
    void repositoriesWorkspaceRepoSlugIssuesIssueIdGetCallback(OAIHttpRequestWorker *worker);
    void repositoriesWorkspaceRepoSlugIssuesIssueIdPutCallback(OAIHttpRequestWorker *worker);
    void repositoriesWorkspaceRepoSlugIssuesIssueIdVoteDeleteCallback(OAIHttpRequestWorker *worker);
    void repositoriesWorkspaceRepoSlugIssuesIssueIdVoteGetCallback(OAIHttpRequestWorker *worker);
    void repositoriesWorkspaceRepoSlugIssuesIssueIdVotePutCallback(OAIHttpRequestWorker *worker);
    void repositoriesWorkspaceRepoSlugIssuesIssueIdWatchDeleteCallback(OAIHttpRequestWorker *worker);
    void repositoriesWorkspaceRepoSlugIssuesIssueIdWatchGetCallback(OAIHttpRequestWorker *worker);
    void repositoriesWorkspaceRepoSlugIssuesIssueIdWatchPutCallback(OAIHttpRequestWorker *worker);
    void repositoriesWorkspaceRepoSlugIssuesPostCallback(OAIHttpRequestWorker *worker);
    void repositoriesWorkspaceRepoSlugMilestonesGetCallback(OAIHttpRequestWorker *worker);
    void repositoriesWorkspaceRepoSlugMilestonesMilestoneIdGetCallback(OAIHttpRequestWorker *worker);
    void repositoriesWorkspaceRepoSlugVersionsGetCallback(OAIHttpRequestWorker *worker);
    void repositoriesWorkspaceRepoSlugVersionsVersionIdGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void repositoriesWorkspaceRepoSlugComponentsComponentIdGetSignal(OAIComponent summary);
    void repositoriesWorkspaceRepoSlugComponentsGetSignal(OAIPaginated_components summary);
    void repositoriesWorkspaceRepoSlugIssuesExportPostSignal();
    void repositoriesWorkspaceRepoSlugIssuesExportRepoNameIssuesTaskIdZipGetSignal(OAIIssue_job_status summary);
    void repositoriesWorkspaceRepoSlugIssuesGetSignal(OAIPaginated_issues summary);
    void repositoriesWorkspaceRepoSlugIssuesImportGetSignal(OAIIssue_job_status summary);
    void repositoriesWorkspaceRepoSlugIssuesImportPostSignal(OAIIssue_job_status summary);
    void repositoriesWorkspaceRepoSlugIssuesIssueIdAttachmentsGetSignal(OAIPaginated_issue_attachments summary);
    void repositoriesWorkspaceRepoSlugIssuesIssueIdAttachmentsPathDeleteSignal();
    void repositoriesWorkspaceRepoSlugIssuesIssueIdAttachmentsPathGetSignal();
    void repositoriesWorkspaceRepoSlugIssuesIssueIdAttachmentsPostSignal();
    void repositoriesWorkspaceRepoSlugIssuesIssueIdChangesChangeIdGetSignal(OAIIssue_change summary);
    void repositoriesWorkspaceRepoSlugIssuesIssueIdChangesGetSignal(OAIPaginated_log_entries summary);
    void repositoriesWorkspaceRepoSlugIssuesIssueIdChangesPostSignal(OAIIssue_change summary);
    void repositoriesWorkspaceRepoSlugIssuesIssueIdCommentsCommentIdDeleteSignal();
    void repositoriesWorkspaceRepoSlugIssuesIssueIdCommentsCommentIdGetSignal(OAIIssue_comment summary);
    void repositoriesWorkspaceRepoSlugIssuesIssueIdCommentsCommentIdPutSignal(OAIIssue_comment summary);
    void repositoriesWorkspaceRepoSlugIssuesIssueIdCommentsGetSignal(OAIPaginated_issue_comments summary);
    void repositoriesWorkspaceRepoSlugIssuesIssueIdCommentsPostSignal();
    void repositoriesWorkspaceRepoSlugIssuesIssueIdDeleteSignal(OAIIssue summary);
    void repositoriesWorkspaceRepoSlugIssuesIssueIdGetSignal(OAIIssue summary);
    void repositoriesWorkspaceRepoSlugIssuesIssueIdPutSignal(OAIIssue summary);
    void repositoriesWorkspaceRepoSlugIssuesIssueIdVoteDeleteSignal(OAIError summary);
    void repositoriesWorkspaceRepoSlugIssuesIssueIdVoteGetSignal(OAIError summary);
    void repositoriesWorkspaceRepoSlugIssuesIssueIdVotePutSignal(OAIError summary);
    void repositoriesWorkspaceRepoSlugIssuesIssueIdWatchDeleteSignal(OAIError summary);
    void repositoriesWorkspaceRepoSlugIssuesIssueIdWatchGetSignal(OAIError summary);
    void repositoriesWorkspaceRepoSlugIssuesIssueIdWatchPutSignal(OAIError summary);
    void repositoriesWorkspaceRepoSlugIssuesPostSignal(OAIIssue summary);
    void repositoriesWorkspaceRepoSlugMilestonesGetSignal(OAIPaginated_milestones summary);
    void repositoriesWorkspaceRepoSlugMilestonesMilestoneIdGetSignal(OAIMilestone summary);
    void repositoriesWorkspaceRepoSlugVersionsGetSignal(OAIPaginated_versions summary);
    void repositoriesWorkspaceRepoSlugVersionsVersionIdGetSignal(OAIVersion summary);


    void repositoriesWorkspaceRepoSlugComponentsComponentIdGetSignalFull(OAIHttpRequestWorker *worker, OAIComponent summary);
    void repositoriesWorkspaceRepoSlugComponentsGetSignalFull(OAIHttpRequestWorker *worker, OAIPaginated_components summary);
    void repositoriesWorkspaceRepoSlugIssuesExportPostSignalFull(OAIHttpRequestWorker *worker);
    void repositoriesWorkspaceRepoSlugIssuesExportRepoNameIssuesTaskIdZipGetSignalFull(OAIHttpRequestWorker *worker, OAIIssue_job_status summary);
    void repositoriesWorkspaceRepoSlugIssuesGetSignalFull(OAIHttpRequestWorker *worker, OAIPaginated_issues summary);
    void repositoriesWorkspaceRepoSlugIssuesImportGetSignalFull(OAIHttpRequestWorker *worker, OAIIssue_job_status summary);
    void repositoriesWorkspaceRepoSlugIssuesImportPostSignalFull(OAIHttpRequestWorker *worker, OAIIssue_job_status summary);
    void repositoriesWorkspaceRepoSlugIssuesIssueIdAttachmentsGetSignalFull(OAIHttpRequestWorker *worker, OAIPaginated_issue_attachments summary);
    void repositoriesWorkspaceRepoSlugIssuesIssueIdAttachmentsPathDeleteSignalFull(OAIHttpRequestWorker *worker);
    void repositoriesWorkspaceRepoSlugIssuesIssueIdAttachmentsPathGetSignalFull(OAIHttpRequestWorker *worker);
    void repositoriesWorkspaceRepoSlugIssuesIssueIdAttachmentsPostSignalFull(OAIHttpRequestWorker *worker);
    void repositoriesWorkspaceRepoSlugIssuesIssueIdChangesChangeIdGetSignalFull(OAIHttpRequestWorker *worker, OAIIssue_change summary);
    void repositoriesWorkspaceRepoSlugIssuesIssueIdChangesGetSignalFull(OAIHttpRequestWorker *worker, OAIPaginated_log_entries summary);
    void repositoriesWorkspaceRepoSlugIssuesIssueIdChangesPostSignalFull(OAIHttpRequestWorker *worker, OAIIssue_change summary);
    void repositoriesWorkspaceRepoSlugIssuesIssueIdCommentsCommentIdDeleteSignalFull(OAIHttpRequestWorker *worker);
    void repositoriesWorkspaceRepoSlugIssuesIssueIdCommentsCommentIdGetSignalFull(OAIHttpRequestWorker *worker, OAIIssue_comment summary);
    void repositoriesWorkspaceRepoSlugIssuesIssueIdCommentsCommentIdPutSignalFull(OAIHttpRequestWorker *worker, OAIIssue_comment summary);
    void repositoriesWorkspaceRepoSlugIssuesIssueIdCommentsGetSignalFull(OAIHttpRequestWorker *worker, OAIPaginated_issue_comments summary);
    void repositoriesWorkspaceRepoSlugIssuesIssueIdCommentsPostSignalFull(OAIHttpRequestWorker *worker);
    void repositoriesWorkspaceRepoSlugIssuesIssueIdDeleteSignalFull(OAIHttpRequestWorker *worker, OAIIssue summary);
    void repositoriesWorkspaceRepoSlugIssuesIssueIdGetSignalFull(OAIHttpRequestWorker *worker, OAIIssue summary);
    void repositoriesWorkspaceRepoSlugIssuesIssueIdPutSignalFull(OAIHttpRequestWorker *worker, OAIIssue summary);
    void repositoriesWorkspaceRepoSlugIssuesIssueIdVoteDeleteSignalFull(OAIHttpRequestWorker *worker, OAIError summary);
    void repositoriesWorkspaceRepoSlugIssuesIssueIdVoteGetSignalFull(OAIHttpRequestWorker *worker, OAIError summary);
    void repositoriesWorkspaceRepoSlugIssuesIssueIdVotePutSignalFull(OAIHttpRequestWorker *worker, OAIError summary);
    void repositoriesWorkspaceRepoSlugIssuesIssueIdWatchDeleteSignalFull(OAIHttpRequestWorker *worker, OAIError summary);
    void repositoriesWorkspaceRepoSlugIssuesIssueIdWatchGetSignalFull(OAIHttpRequestWorker *worker, OAIError summary);
    void repositoriesWorkspaceRepoSlugIssuesIssueIdWatchPutSignalFull(OAIHttpRequestWorker *worker, OAIError summary);
    void repositoriesWorkspaceRepoSlugIssuesPostSignalFull(OAIHttpRequestWorker *worker, OAIIssue summary);
    void repositoriesWorkspaceRepoSlugMilestonesGetSignalFull(OAIHttpRequestWorker *worker, OAIPaginated_milestones summary);
    void repositoriesWorkspaceRepoSlugMilestonesMilestoneIdGetSignalFull(OAIHttpRequestWorker *worker, OAIMilestone summary);
    void repositoriesWorkspaceRepoSlugVersionsGetSignalFull(OAIHttpRequestWorker *worker, OAIPaginated_versions summary);
    void repositoriesWorkspaceRepoSlugVersionsVersionIdGetSignalFull(OAIHttpRequestWorker *worker, OAIVersion summary);

    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugComponentsComponentIdGetSignalError() instead")
    void repositoriesWorkspaceRepoSlugComponentsComponentIdGetSignalE(OAIComponent summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugComponentsComponentIdGetSignalError(OAIComponent summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugComponentsGetSignalError() instead")
    void repositoriesWorkspaceRepoSlugComponentsGetSignalE(OAIPaginated_components summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugComponentsGetSignalError(OAIPaginated_components summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugIssuesExportPostSignalError() instead")
    void repositoriesWorkspaceRepoSlugIssuesExportPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugIssuesExportPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugIssuesExportRepoNameIssuesTaskIdZipGetSignalError() instead")
    void repositoriesWorkspaceRepoSlugIssuesExportRepoNameIssuesTaskIdZipGetSignalE(OAIIssue_job_status summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugIssuesExportRepoNameIssuesTaskIdZipGetSignalError(OAIIssue_job_status summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugIssuesGetSignalError() instead")
    void repositoriesWorkspaceRepoSlugIssuesGetSignalE(OAIPaginated_issues summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugIssuesGetSignalError(OAIPaginated_issues summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugIssuesImportGetSignalError() instead")
    void repositoriesWorkspaceRepoSlugIssuesImportGetSignalE(OAIIssue_job_status summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugIssuesImportGetSignalError(OAIIssue_job_status summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugIssuesImportPostSignalError() instead")
    void repositoriesWorkspaceRepoSlugIssuesImportPostSignalE(OAIIssue_job_status summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugIssuesImportPostSignalError(OAIIssue_job_status summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugIssuesIssueIdAttachmentsGetSignalError() instead")
    void repositoriesWorkspaceRepoSlugIssuesIssueIdAttachmentsGetSignalE(OAIPaginated_issue_attachments summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugIssuesIssueIdAttachmentsGetSignalError(OAIPaginated_issue_attachments summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugIssuesIssueIdAttachmentsPathDeleteSignalError() instead")
    void repositoriesWorkspaceRepoSlugIssuesIssueIdAttachmentsPathDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugIssuesIssueIdAttachmentsPathDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugIssuesIssueIdAttachmentsPathGetSignalError() instead")
    void repositoriesWorkspaceRepoSlugIssuesIssueIdAttachmentsPathGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugIssuesIssueIdAttachmentsPathGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugIssuesIssueIdAttachmentsPostSignalError() instead")
    void repositoriesWorkspaceRepoSlugIssuesIssueIdAttachmentsPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugIssuesIssueIdAttachmentsPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugIssuesIssueIdChangesChangeIdGetSignalError() instead")
    void repositoriesWorkspaceRepoSlugIssuesIssueIdChangesChangeIdGetSignalE(OAIIssue_change summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugIssuesIssueIdChangesChangeIdGetSignalError(OAIIssue_change summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugIssuesIssueIdChangesGetSignalError() instead")
    void repositoriesWorkspaceRepoSlugIssuesIssueIdChangesGetSignalE(OAIPaginated_log_entries summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugIssuesIssueIdChangesGetSignalError(OAIPaginated_log_entries summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugIssuesIssueIdChangesPostSignalError() instead")
    void repositoriesWorkspaceRepoSlugIssuesIssueIdChangesPostSignalE(OAIIssue_change summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugIssuesIssueIdChangesPostSignalError(OAIIssue_change summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugIssuesIssueIdCommentsCommentIdDeleteSignalError() instead")
    void repositoriesWorkspaceRepoSlugIssuesIssueIdCommentsCommentIdDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugIssuesIssueIdCommentsCommentIdDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugIssuesIssueIdCommentsCommentIdGetSignalError() instead")
    void repositoriesWorkspaceRepoSlugIssuesIssueIdCommentsCommentIdGetSignalE(OAIIssue_comment summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugIssuesIssueIdCommentsCommentIdGetSignalError(OAIIssue_comment summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugIssuesIssueIdCommentsCommentIdPutSignalError() instead")
    void repositoriesWorkspaceRepoSlugIssuesIssueIdCommentsCommentIdPutSignalE(OAIIssue_comment summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugIssuesIssueIdCommentsCommentIdPutSignalError(OAIIssue_comment summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugIssuesIssueIdCommentsGetSignalError() instead")
    void repositoriesWorkspaceRepoSlugIssuesIssueIdCommentsGetSignalE(OAIPaginated_issue_comments summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugIssuesIssueIdCommentsGetSignalError(OAIPaginated_issue_comments summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugIssuesIssueIdCommentsPostSignalError() instead")
    void repositoriesWorkspaceRepoSlugIssuesIssueIdCommentsPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugIssuesIssueIdCommentsPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugIssuesIssueIdDeleteSignalError() instead")
    void repositoriesWorkspaceRepoSlugIssuesIssueIdDeleteSignalE(OAIIssue summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugIssuesIssueIdDeleteSignalError(OAIIssue summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugIssuesIssueIdGetSignalError() instead")
    void repositoriesWorkspaceRepoSlugIssuesIssueIdGetSignalE(OAIIssue summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugIssuesIssueIdGetSignalError(OAIIssue summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugIssuesIssueIdPutSignalError() instead")
    void repositoriesWorkspaceRepoSlugIssuesIssueIdPutSignalE(OAIIssue summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugIssuesIssueIdPutSignalError(OAIIssue summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugIssuesIssueIdVoteDeleteSignalError() instead")
    void repositoriesWorkspaceRepoSlugIssuesIssueIdVoteDeleteSignalE(OAIError summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugIssuesIssueIdVoteDeleteSignalError(OAIError summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugIssuesIssueIdVoteGetSignalError() instead")
    void repositoriesWorkspaceRepoSlugIssuesIssueIdVoteGetSignalE(OAIError summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugIssuesIssueIdVoteGetSignalError(OAIError summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugIssuesIssueIdVotePutSignalError() instead")
    void repositoriesWorkspaceRepoSlugIssuesIssueIdVotePutSignalE(OAIError summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugIssuesIssueIdVotePutSignalError(OAIError summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugIssuesIssueIdWatchDeleteSignalError() instead")
    void repositoriesWorkspaceRepoSlugIssuesIssueIdWatchDeleteSignalE(OAIError summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugIssuesIssueIdWatchDeleteSignalError(OAIError summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugIssuesIssueIdWatchGetSignalError() instead")
    void repositoriesWorkspaceRepoSlugIssuesIssueIdWatchGetSignalE(OAIError summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugIssuesIssueIdWatchGetSignalError(OAIError summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugIssuesIssueIdWatchPutSignalError() instead")
    void repositoriesWorkspaceRepoSlugIssuesIssueIdWatchPutSignalE(OAIError summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugIssuesIssueIdWatchPutSignalError(OAIError summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugIssuesPostSignalError() instead")
    void repositoriesWorkspaceRepoSlugIssuesPostSignalE(OAIIssue summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugIssuesPostSignalError(OAIIssue summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugMilestonesGetSignalError() instead")
    void repositoriesWorkspaceRepoSlugMilestonesGetSignalE(OAIPaginated_milestones summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugMilestonesGetSignalError(OAIPaginated_milestones summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugMilestonesMilestoneIdGetSignalError() instead")
    void repositoriesWorkspaceRepoSlugMilestonesMilestoneIdGetSignalE(OAIMilestone summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugMilestonesMilestoneIdGetSignalError(OAIMilestone summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugVersionsGetSignalError() instead")
    void repositoriesWorkspaceRepoSlugVersionsGetSignalE(OAIPaginated_versions summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugVersionsGetSignalError(OAIPaginated_versions summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugVersionsVersionIdGetSignalError() instead")
    void repositoriesWorkspaceRepoSlugVersionsVersionIdGetSignalE(OAIVersion summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugVersionsVersionIdGetSignalError(OAIVersion summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugComponentsComponentIdGetSignalErrorFull() instead")
    void repositoriesWorkspaceRepoSlugComponentsComponentIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugComponentsComponentIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugComponentsGetSignalErrorFull() instead")
    void repositoriesWorkspaceRepoSlugComponentsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugComponentsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugIssuesExportPostSignalErrorFull() instead")
    void repositoriesWorkspaceRepoSlugIssuesExportPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugIssuesExportPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugIssuesExportRepoNameIssuesTaskIdZipGetSignalErrorFull() instead")
    void repositoriesWorkspaceRepoSlugIssuesExportRepoNameIssuesTaskIdZipGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugIssuesExportRepoNameIssuesTaskIdZipGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugIssuesGetSignalErrorFull() instead")
    void repositoriesWorkspaceRepoSlugIssuesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugIssuesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugIssuesImportGetSignalErrorFull() instead")
    void repositoriesWorkspaceRepoSlugIssuesImportGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugIssuesImportGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugIssuesImportPostSignalErrorFull() instead")
    void repositoriesWorkspaceRepoSlugIssuesImportPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugIssuesImportPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugIssuesIssueIdAttachmentsGetSignalErrorFull() instead")
    void repositoriesWorkspaceRepoSlugIssuesIssueIdAttachmentsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugIssuesIssueIdAttachmentsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugIssuesIssueIdAttachmentsPathDeleteSignalErrorFull() instead")
    void repositoriesWorkspaceRepoSlugIssuesIssueIdAttachmentsPathDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugIssuesIssueIdAttachmentsPathDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugIssuesIssueIdAttachmentsPathGetSignalErrorFull() instead")
    void repositoriesWorkspaceRepoSlugIssuesIssueIdAttachmentsPathGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugIssuesIssueIdAttachmentsPathGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugIssuesIssueIdAttachmentsPostSignalErrorFull() instead")
    void repositoriesWorkspaceRepoSlugIssuesIssueIdAttachmentsPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugIssuesIssueIdAttachmentsPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugIssuesIssueIdChangesChangeIdGetSignalErrorFull() instead")
    void repositoriesWorkspaceRepoSlugIssuesIssueIdChangesChangeIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugIssuesIssueIdChangesChangeIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugIssuesIssueIdChangesGetSignalErrorFull() instead")
    void repositoriesWorkspaceRepoSlugIssuesIssueIdChangesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugIssuesIssueIdChangesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugIssuesIssueIdChangesPostSignalErrorFull() instead")
    void repositoriesWorkspaceRepoSlugIssuesIssueIdChangesPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugIssuesIssueIdChangesPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugIssuesIssueIdCommentsCommentIdDeleteSignalErrorFull() instead")
    void repositoriesWorkspaceRepoSlugIssuesIssueIdCommentsCommentIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugIssuesIssueIdCommentsCommentIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugIssuesIssueIdCommentsCommentIdGetSignalErrorFull() instead")
    void repositoriesWorkspaceRepoSlugIssuesIssueIdCommentsCommentIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugIssuesIssueIdCommentsCommentIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugIssuesIssueIdCommentsCommentIdPutSignalErrorFull() instead")
    void repositoriesWorkspaceRepoSlugIssuesIssueIdCommentsCommentIdPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugIssuesIssueIdCommentsCommentIdPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugIssuesIssueIdCommentsGetSignalErrorFull() instead")
    void repositoriesWorkspaceRepoSlugIssuesIssueIdCommentsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugIssuesIssueIdCommentsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugIssuesIssueIdCommentsPostSignalErrorFull() instead")
    void repositoriesWorkspaceRepoSlugIssuesIssueIdCommentsPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugIssuesIssueIdCommentsPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugIssuesIssueIdDeleteSignalErrorFull() instead")
    void repositoriesWorkspaceRepoSlugIssuesIssueIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugIssuesIssueIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugIssuesIssueIdGetSignalErrorFull() instead")
    void repositoriesWorkspaceRepoSlugIssuesIssueIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugIssuesIssueIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugIssuesIssueIdPutSignalErrorFull() instead")
    void repositoriesWorkspaceRepoSlugIssuesIssueIdPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugIssuesIssueIdPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugIssuesIssueIdVoteDeleteSignalErrorFull() instead")
    void repositoriesWorkspaceRepoSlugIssuesIssueIdVoteDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugIssuesIssueIdVoteDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugIssuesIssueIdVoteGetSignalErrorFull() instead")
    void repositoriesWorkspaceRepoSlugIssuesIssueIdVoteGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugIssuesIssueIdVoteGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugIssuesIssueIdVotePutSignalErrorFull() instead")
    void repositoriesWorkspaceRepoSlugIssuesIssueIdVotePutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugIssuesIssueIdVotePutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugIssuesIssueIdWatchDeleteSignalErrorFull() instead")
    void repositoriesWorkspaceRepoSlugIssuesIssueIdWatchDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugIssuesIssueIdWatchDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugIssuesIssueIdWatchGetSignalErrorFull() instead")
    void repositoriesWorkspaceRepoSlugIssuesIssueIdWatchGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugIssuesIssueIdWatchGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugIssuesIssueIdWatchPutSignalErrorFull() instead")
    void repositoriesWorkspaceRepoSlugIssuesIssueIdWatchPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugIssuesIssueIdWatchPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugIssuesPostSignalErrorFull() instead")
    void repositoriesWorkspaceRepoSlugIssuesPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugIssuesPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugMilestonesGetSignalErrorFull() instead")
    void repositoriesWorkspaceRepoSlugMilestonesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugMilestonesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugMilestonesMilestoneIdGetSignalErrorFull() instead")
    void repositoriesWorkspaceRepoSlugMilestonesMilestoneIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugMilestonesMilestoneIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugVersionsGetSignalErrorFull() instead")
    void repositoriesWorkspaceRepoSlugVersionsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugVersionsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugVersionsVersionIdGetSignalErrorFull() instead")
    void repositoriesWorkspaceRepoSlugVersionsVersionIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugVersionsVersionIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
