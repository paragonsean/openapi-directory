/**
 * Bitbucket API
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@bitbucket.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISearch_segment.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISearch_segment::OAISearch_segment(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISearch_segment::OAISearch_segment() {
    this->initializeModel();
}

OAISearch_segment::~OAISearch_segment() {}

void OAISearch_segment::initializeModel() {

    m_match_isSet = false;
    m_match_isValid = false;

    m_text_isSet = false;
    m_text_isValid = false;
}

void OAISearch_segment::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISearch_segment::fromJsonObject(QJsonObject json) {

    m_match_isValid = ::OpenAPI::fromJsonValue(m_match, json[QString("match")]);
    m_match_isSet = !json[QString("match")].isNull() && m_match_isValid;

    m_text_isValid = ::OpenAPI::fromJsonValue(m_text, json[QString("text")]);
    m_text_isSet = !json[QString("text")].isNull() && m_text_isValid;
}

QString OAISearch_segment::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISearch_segment::asJsonObject() const {
    QJsonObject obj;
    if (m_match_isSet) {
        obj.insert(QString("match"), ::OpenAPI::toJsonValue(m_match));
    }
    if (m_text_isSet) {
        obj.insert(QString("text"), ::OpenAPI::toJsonValue(m_text));
    }
    return obj;
}

bool OAISearch_segment::isMatch() const {
    return m_match;
}
void OAISearch_segment::setMatch(const bool &match) {
    m_match = match;
    m_match_isSet = true;
}

bool OAISearch_segment::is_match_Set() const{
    return m_match_isSet;
}

bool OAISearch_segment::is_match_Valid() const{
    return m_match_isValid;
}

QString OAISearch_segment::getText() const {
    return m_text;
}
void OAISearch_segment::setText(const QString &text) {
    m_text = text;
    m_text_isSet = true;
}

bool OAISearch_segment::is_text_Set() const{
    return m_text_isSet;
}

bool OAISearch_segment::is_text_Valid() const{
    return m_text_isValid;
}

bool OAISearch_segment::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_match_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISearch_segment::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
