/**
 * Bitbucket API
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@bitbucket.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHook_event.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHook_event::OAIHook_event(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHook_event::OAIHook_event() {
    this->initializeModel();
}

OAIHook_event::~OAIHook_event() {}

void OAIHook_event::initializeModel() {

    m_category_isSet = false;
    m_category_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_event_isSet = false;
    m_event_isValid = false;

    m_label_isSet = false;
    m_label_isValid = false;
}

void OAIHook_event::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHook_event::fromJsonObject(QJsonObject json) {

    m_category_isValid = ::OpenAPI::fromJsonValue(m_category, json[QString("category")]);
    m_category_isSet = !json[QString("category")].isNull() && m_category_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_event_isValid = ::OpenAPI::fromJsonValue(m_event, json[QString("event")]);
    m_event_isSet = !json[QString("event")].isNull() && m_event_isValid;

    m_label_isValid = ::OpenAPI::fromJsonValue(m_label, json[QString("label")]);
    m_label_isSet = !json[QString("label")].isNull() && m_label_isValid;
}

QString OAIHook_event::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHook_event::asJsonObject() const {
    QJsonObject obj;
    if (m_category_isSet) {
        obj.insert(QString("category"), ::OpenAPI::toJsonValue(m_category));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_event_isSet) {
        obj.insert(QString("event"), ::OpenAPI::toJsonValue(m_event));
    }
    if (m_label_isSet) {
        obj.insert(QString("label"), ::OpenAPI::toJsonValue(m_label));
    }
    return obj;
}

QString OAIHook_event::getCategory() const {
    return m_category;
}
void OAIHook_event::setCategory(const QString &category) {
    m_category = category;
    m_category_isSet = true;
}

bool OAIHook_event::is_category_Set() const{
    return m_category_isSet;
}

bool OAIHook_event::is_category_Valid() const{
    return m_category_isValid;
}

QString OAIHook_event::getDescription() const {
    return m_description;
}
void OAIHook_event::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIHook_event::is_description_Set() const{
    return m_description_isSet;
}

bool OAIHook_event::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIHook_event::getEvent() const {
    return m_event;
}
void OAIHook_event::setEvent(const QString &event) {
    m_event = event;
    m_event_isSet = true;
}

bool OAIHook_event::is_event_Set() const{
    return m_event_isSet;
}

bool OAIHook_event::is_event_Valid() const{
    return m_event_isValid;
}

QString OAIHook_event::getLabel() const {
    return m_label;
}
void OAIHook_event::setLabel(const QString &label) {
    m_label = label;
    m_label_isSet = true;
}

bool OAIHook_event::is_label_Set() const{
    return m_label_isSet;
}

bool OAIHook_event::is_label_Valid() const{
    return m_label_isValid;
}

bool OAIHook_event::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_label_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHook_event::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
