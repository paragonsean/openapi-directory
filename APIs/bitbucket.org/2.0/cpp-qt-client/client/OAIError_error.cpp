/**
 * Bitbucket API
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@bitbucket.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIError_error.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIError_error::OAIError_error(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIError_error::OAIError_error() {
    this->initializeModel();
}

OAIError_error::~OAIError_error() {}

void OAIError_error::initializeModel() {

    m_data_isSet = false;
    m_data_isValid = false;

    m_detail_isSet = false;
    m_detail_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;
}

void OAIError_error::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIError_error::fromJsonObject(QJsonObject json) {

    m_data_isValid = ::OpenAPI::fromJsonValue(m_data, json[QString("data")]);
    m_data_isSet = !json[QString("data")].isNull() && m_data_isValid;

    m_detail_isValid = ::OpenAPI::fromJsonValue(m_detail, json[QString("detail")]);
    m_detail_isSet = !json[QString("detail")].isNull() && m_detail_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;
}

QString OAIError_error::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIError_error::asJsonObject() const {
    QJsonObject obj;
    if (m_data.size() > 0) {
        obj.insert(QString("data"), ::OpenAPI::toJsonValue(m_data));
    }
    if (m_detail_isSet) {
        obj.insert(QString("detail"), ::OpenAPI::toJsonValue(m_detail));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    return obj;
}

QMap<QString, QJsonValue> OAIError_error::getData() const {
    return m_data;
}
void OAIError_error::setData(const QMap<QString, QJsonValue> &data) {
    m_data = data;
    m_data_isSet = true;
}

bool OAIError_error::is_data_Set() const{
    return m_data_isSet;
}

bool OAIError_error::is_data_Valid() const{
    return m_data_isValid;
}

QString OAIError_error::getDetail() const {
    return m_detail;
}
void OAIError_error::setDetail(const QString &detail) {
    m_detail = detail;
    m_detail_isSet = true;
}

bool OAIError_error::is_detail_Set() const{
    return m_detail_isSet;
}

bool OAIError_error::is_detail_Valid() const{
    return m_detail_isValid;
}

QString OAIError_error::getMessage() const {
    return m_message;
}
void OAIError_error::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIError_error::is_message_Set() const{
    return m_message_isSet;
}

bool OAIError_error::is_message_Valid() const{
    return m_message_isValid;
}

bool OAIError_error::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_detail_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIError_error::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_message_isValid && true;
}

} // namespace OpenAPI
