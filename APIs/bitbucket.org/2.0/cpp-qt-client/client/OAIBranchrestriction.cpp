/**
 * Bitbucket API
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@bitbucket.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBranchrestriction.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBranchrestriction::OAIBranchrestriction(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBranchrestriction::OAIBranchrestriction() {
    this->initializeModel();
}

OAIBranchrestriction::~OAIBranchrestriction() {}

void OAIBranchrestriction::initializeModel() {

    m_type_isSet = false;
    m_type_isValid = false;

    m_groups_isSet = false;
    m_groups_isValid = false;

    m_users_isSet = false;
    m_users_isValid = false;
}

void OAIBranchrestriction::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBranchrestriction::fromJsonObject(QJsonObject json) {

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_groups_isValid = ::OpenAPI::fromJsonValue(m_groups, json[QString("groups")]);
    m_groups_isSet = !json[QString("groups")].isNull() && m_groups_isValid;

    m_users_isValid = ::OpenAPI::fromJsonValue(m_users, json[QString("users")]);
    m_users_isSet = !json[QString("users")].isNull() && m_users_isValid;
}

QString OAIBranchrestriction::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBranchrestriction::asJsonObject() const {
    QJsonObject obj;
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_groups.size() > 0) {
        obj.insert(QString("groups"), ::OpenAPI::toJsonValue(m_groups));
    }
    if (m_users.size() > 0) {
        obj.insert(QString("users"), ::OpenAPI::toJsonValue(m_users));
    }
    return obj;
}

QString OAIBranchrestriction::getType() const {
    return m_type;
}
void OAIBranchrestriction::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIBranchrestriction::is_type_Set() const{
    return m_type_isSet;
}

bool OAIBranchrestriction::is_type_Valid() const{
    return m_type_isValid;
}

QList<OAIGroup> OAIBranchrestriction::getGroups() const {
    return m_groups;
}
void OAIBranchrestriction::setGroups(const QList<OAIGroup> &groups) {
    m_groups = groups;
    m_groups_isSet = true;
}

bool OAIBranchrestriction::is_groups_Set() const{
    return m_groups_isSet;
}

bool OAIBranchrestriction::is_groups_Valid() const{
    return m_groups_isValid;
}

QList<OAIAccount> OAIBranchrestriction::getUsers() const {
    return m_users;
}
void OAIBranchrestriction::setUsers(const QList<OAIAccount> &users) {
    m_users = users;
    m_users_isSet = true;
}

bool OAIBranchrestriction::is_users_Set() const{
    return m_users_isSet;
}

bool OAIBranchrestriction::is_users_Valid() const{
    return m_users_isValid;
}

bool OAIBranchrestriction::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_groups.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_users.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBranchrestriction::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_type_isValid && true;
}

} // namespace OpenAPI
