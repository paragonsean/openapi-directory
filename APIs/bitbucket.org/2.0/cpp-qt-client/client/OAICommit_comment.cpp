/**
 * Bitbucket API
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@bitbucket.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICommit_comment.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICommit_comment::OAICommit_comment(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICommit_comment::OAICommit_comment() {
    this->initializeModel();
}

OAICommit_comment::~OAICommit_comment() {}

void OAICommit_comment::initializeModel() {

    m_type_isSet = false;
    m_type_isValid = false;

    m_content_isSet = false;
    m_content_isValid = false;

    m_created_on_isSet = false;
    m_created_on_isValid = false;

    m_deleted_isSet = false;
    m_deleted_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_r_inline_isSet = false;
    m_r_inline_isValid = false;

    m_links_isSet = false;
    m_links_isValid = false;

    m_parent_isSet = false;
    m_parent_isValid = false;

    m_updated_on_isSet = false;
    m_updated_on_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;

    m_commit_isSet = false;
    m_commit_isValid = false;
}

void OAICommit_comment::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICommit_comment::fromJsonObject(QJsonObject json) {

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_content_isValid = ::OpenAPI::fromJsonValue(m_content, json[QString("content")]);
    m_content_isSet = !json[QString("content")].isNull() && m_content_isValid;

    m_created_on_isValid = ::OpenAPI::fromJsonValue(m_created_on, json[QString("created_on")]);
    m_created_on_isSet = !json[QString("created_on")].isNull() && m_created_on_isValid;

    m_deleted_isValid = ::OpenAPI::fromJsonValue(m_deleted, json[QString("deleted")]);
    m_deleted_isSet = !json[QString("deleted")].isNull() && m_deleted_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_r_inline_isValid = ::OpenAPI::fromJsonValue(m_r_inline, json[QString("inline")]);
    m_r_inline_isSet = !json[QString("inline")].isNull() && m_r_inline_isValid;

    m_links_isValid = ::OpenAPI::fromJsonValue(m_links, json[QString("links")]);
    m_links_isSet = !json[QString("links")].isNull() && m_links_isValid;

    m_parent_isValid = ::OpenAPI::fromJsonValue(m_parent, json[QString("parent")]);
    m_parent_isSet = !json[QString("parent")].isNull() && m_parent_isValid;

    m_updated_on_isValid = ::OpenAPI::fromJsonValue(m_updated_on, json[QString("updated_on")]);
    m_updated_on_isSet = !json[QString("updated_on")].isNull() && m_updated_on_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;

    m_commit_isValid = ::OpenAPI::fromJsonValue(m_commit, json[QString("commit")]);
    m_commit_isSet = !json[QString("commit")].isNull() && m_commit_isValid;
}

QString OAICommit_comment::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICommit_comment::asJsonObject() const {
    QJsonObject obj;
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_content.isSet()) {
        obj.insert(QString("content"), ::OpenAPI::toJsonValue(m_content));
    }
    if (m_created_on_isSet) {
        obj.insert(QString("created_on"), ::OpenAPI::toJsonValue(m_created_on));
    }
    if (m_deleted_isSet) {
        obj.insert(QString("deleted"), ::OpenAPI::toJsonValue(m_deleted));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_r_inline.isSet()) {
        obj.insert(QString("inline"), ::OpenAPI::toJsonValue(m_r_inline));
    }
    if (m_links.isSet()) {
        obj.insert(QString("links"), ::OpenAPI::toJsonValue(m_links));
    }
    if (m_parent.isSet()) {
        obj.insert(QString("parent"), ::OpenAPI::toJsonValue(m_parent));
    }
    if (m_updated_on_isSet) {
        obj.insert(QString("updated_on"), ::OpenAPI::toJsonValue(m_updated_on));
    }
    if (m_user.isSet()) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    if (m_commit.isSet()) {
        obj.insert(QString("commit"), ::OpenAPI::toJsonValue(m_commit));
    }
    return obj;
}

QString OAICommit_comment::getType() const {
    return m_type;
}
void OAICommit_comment::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAICommit_comment::is_type_Set() const{
    return m_type_isSet;
}

bool OAICommit_comment::is_type_Valid() const{
    return m_type_isValid;
}

OAIBase_Commit_summary OAICommit_comment::getContent() const {
    return m_content;
}
void OAICommit_comment::setContent(const OAIBase_Commit_summary &content) {
    m_content = content;
    m_content_isSet = true;
}

bool OAICommit_comment::is_content_Set() const{
    return m_content_isSet;
}

bool OAICommit_comment::is_content_Valid() const{
    return m_content_isValid;
}

QDateTime OAICommit_comment::getCreatedOn() const {
    return m_created_on;
}
void OAICommit_comment::setCreatedOn(const QDateTime &created_on) {
    m_created_on = created_on;
    m_created_on_isSet = true;
}

bool OAICommit_comment::is_created_on_Set() const{
    return m_created_on_isSet;
}

bool OAICommit_comment::is_created_on_Valid() const{
    return m_created_on_isValid;
}

bool OAICommit_comment::isDeleted() const {
    return m_deleted;
}
void OAICommit_comment::setDeleted(const bool &deleted) {
    m_deleted = deleted;
    m_deleted_isSet = true;
}

bool OAICommit_comment::is_deleted_Set() const{
    return m_deleted_isSet;
}

bool OAICommit_comment::is_deleted_Valid() const{
    return m_deleted_isValid;
}

qint32 OAICommit_comment::getId() const {
    return m_id;
}
void OAICommit_comment::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAICommit_comment::is_id_Set() const{
    return m_id_isSet;
}

bool OAICommit_comment::is_id_Valid() const{
    return m_id_isValid;
}

OAIComment_inline OAICommit_comment::getRInline() const {
    return m_r_inline;
}
void OAICommit_comment::setRInline(const OAIComment_inline &r_inline) {
    m_r_inline = r_inline;
    m_r_inline_isSet = true;
}

bool OAICommit_comment::is_r_inline_Set() const{
    return m_r_inline_isSet;
}

bool OAICommit_comment::is_r_inline_Valid() const{
    return m_r_inline_isValid;
}

OAIComment_links OAICommit_comment::getLinks() const {
    return m_links;
}
void OAICommit_comment::setLinks(const OAIComment_links &links) {
    m_links = links;
    m_links_isSet = true;
}

bool OAICommit_comment::is_links_Set() const{
    return m_links_isSet;
}

bool OAICommit_comment::is_links_Valid() const{
    return m_links_isValid;
}

OAIComment OAICommit_comment::getParent() const {
    return m_parent;
}
void OAICommit_comment::setParent(const OAIComment &parent) {
    m_parent = parent;
    m_parent_isSet = true;
}

bool OAICommit_comment::is_parent_Set() const{
    return m_parent_isSet;
}

bool OAICommit_comment::is_parent_Valid() const{
    return m_parent_isValid;
}

QDateTime OAICommit_comment::getUpdatedOn() const {
    return m_updated_on;
}
void OAICommit_comment::setUpdatedOn(const QDateTime &updated_on) {
    m_updated_on = updated_on;
    m_updated_on_isSet = true;
}

bool OAICommit_comment::is_updated_on_Set() const{
    return m_updated_on_isSet;
}

bool OAICommit_comment::is_updated_on_Valid() const{
    return m_updated_on_isValid;
}

OAIAccount OAICommit_comment::getUser() const {
    return m_user;
}
void OAICommit_comment::setUser(const OAIAccount &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAICommit_comment::is_user_Set() const{
    return m_user_isSet;
}

bool OAICommit_comment::is_user_Valid() const{
    return m_user_isValid;
}

OAICommit OAICommit_comment::getCommit() const {
    return m_commit;
}
void OAICommit_comment::setCommit(const OAICommit &commit) {
    m_commit = commit;
    m_commit_isSet = true;
}

bool OAICommit_comment::is_commit_Set() const{
    return m_commit_isSet;
}

bool OAICommit_comment::is_commit_Valid() const{
    return m_commit_isValid;
}

bool OAICommit_comment::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_content.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_on_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deleted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_inline.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_links.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_on_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_commit.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICommit_comment::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_type_isValid && true;
}

} // namespace OpenAPI
