/**
 * Bitbucket API
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@bitbucket.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProject_Branching_Model_development.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProject_Branching_Model_development::OAIProject_Branching_Model_development(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProject_Branching_Model_development::OAIProject_Branching_Model_development() {
    this->initializeModel();
}

OAIProject_Branching_Model_development::~OAIProject_Branching_Model_development() {}

void OAIProject_Branching_Model_development::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_use_mainbranch_isSet = false;
    m_use_mainbranch_isValid = false;
}

void OAIProject_Branching_Model_development::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProject_Branching_Model_development::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_use_mainbranch_isValid = ::OpenAPI::fromJsonValue(m_use_mainbranch, json[QString("use_mainbranch")]);
    m_use_mainbranch_isSet = !json[QString("use_mainbranch")].isNull() && m_use_mainbranch_isValid;
}

QString OAIProject_Branching_Model_development::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProject_Branching_Model_development::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_use_mainbranch_isSet) {
        obj.insert(QString("use_mainbranch"), ::OpenAPI::toJsonValue(m_use_mainbranch));
    }
    return obj;
}

QString OAIProject_Branching_Model_development::getName() const {
    return m_name;
}
void OAIProject_Branching_Model_development::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIProject_Branching_Model_development::is_name_Set() const{
    return m_name_isSet;
}

bool OAIProject_Branching_Model_development::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIProject_Branching_Model_development::isUseMainbranch() const {
    return m_use_mainbranch;
}
void OAIProject_Branching_Model_development::setUseMainbranch(const bool &use_mainbranch) {
    m_use_mainbranch = use_mainbranch;
    m_use_mainbranch_isSet = true;
}

bool OAIProject_Branching_Model_development::is_use_mainbranch_Set() const{
    return m_use_mainbranch_isSet;
}

bool OAIProject_Branching_Model_development::is_use_mainbranch_Valid() const{
    return m_use_mainbranch_isValid;
}

bool OAIProject_Branching_Model_development::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_use_mainbranch_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProject_Branching_Model_development::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_use_mainbranch_isValid && true;
}

} // namespace OpenAPI
