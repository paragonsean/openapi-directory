/**
 * Bitbucket API
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@bitbucket.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIssue_links.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIssue_links::OAIIssue_links(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIssue_links::OAIIssue_links() {
    this->initializeModel();
}

OAIIssue_links::~OAIIssue_links() {}

void OAIIssue_links::initializeModel() {

    m_attachments_isSet = false;
    m_attachments_isValid = false;

    m_comments_isSet = false;
    m_comments_isValid = false;

    m_html_isSet = false;
    m_html_isValid = false;

    m_self_isSet = false;
    m_self_isValid = false;

    m_vote_isSet = false;
    m_vote_isValid = false;

    m_watch_isSet = false;
    m_watch_isValid = false;
}

void OAIIssue_links::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIssue_links::fromJsonObject(QJsonObject json) {

    m_attachments_isValid = ::OpenAPI::fromJsonValue(m_attachments, json[QString("attachments")]);
    m_attachments_isSet = !json[QString("attachments")].isNull() && m_attachments_isValid;

    m_comments_isValid = ::OpenAPI::fromJsonValue(m_comments, json[QString("comments")]);
    m_comments_isSet = !json[QString("comments")].isNull() && m_comments_isValid;

    m_html_isValid = ::OpenAPI::fromJsonValue(m_html, json[QString("html")]);
    m_html_isSet = !json[QString("html")].isNull() && m_html_isValid;

    m_self_isValid = ::OpenAPI::fromJsonValue(m_self, json[QString("self")]);
    m_self_isSet = !json[QString("self")].isNull() && m_self_isValid;

    m_vote_isValid = ::OpenAPI::fromJsonValue(m_vote, json[QString("vote")]);
    m_vote_isSet = !json[QString("vote")].isNull() && m_vote_isValid;

    m_watch_isValid = ::OpenAPI::fromJsonValue(m_watch, json[QString("watch")]);
    m_watch_isSet = !json[QString("watch")].isNull() && m_watch_isValid;
}

QString OAIIssue_links::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIssue_links::asJsonObject() const {
    QJsonObject obj;
    if (m_attachments.isSet()) {
        obj.insert(QString("attachments"), ::OpenAPI::toJsonValue(m_attachments));
    }
    if (m_comments.isSet()) {
        obj.insert(QString("comments"), ::OpenAPI::toJsonValue(m_comments));
    }
    if (m_html.isSet()) {
        obj.insert(QString("html"), ::OpenAPI::toJsonValue(m_html));
    }
    if (m_self.isSet()) {
        obj.insert(QString("self"), ::OpenAPI::toJsonValue(m_self));
    }
    if (m_vote.isSet()) {
        obj.insert(QString("vote"), ::OpenAPI::toJsonValue(m_vote));
    }
    if (m_watch.isSet()) {
        obj.insert(QString("watch"), ::OpenAPI::toJsonValue(m_watch));
    }
    return obj;
}

OAILink OAIIssue_links::getAttachments() const {
    return m_attachments;
}
void OAIIssue_links::setAttachments(const OAILink &attachments) {
    m_attachments = attachments;
    m_attachments_isSet = true;
}

bool OAIIssue_links::is_attachments_Set() const{
    return m_attachments_isSet;
}

bool OAIIssue_links::is_attachments_Valid() const{
    return m_attachments_isValid;
}

OAILink OAIIssue_links::getComments() const {
    return m_comments;
}
void OAIIssue_links::setComments(const OAILink &comments) {
    m_comments = comments;
    m_comments_isSet = true;
}

bool OAIIssue_links::is_comments_Set() const{
    return m_comments_isSet;
}

bool OAIIssue_links::is_comments_Valid() const{
    return m_comments_isValid;
}

OAILink OAIIssue_links::getHtml() const {
    return m_html;
}
void OAIIssue_links::setHtml(const OAILink &html) {
    m_html = html;
    m_html_isSet = true;
}

bool OAIIssue_links::is_html_Set() const{
    return m_html_isSet;
}

bool OAIIssue_links::is_html_Valid() const{
    return m_html_isValid;
}

OAILink OAIIssue_links::getSelf() const {
    return m_self;
}
void OAIIssue_links::setSelf(const OAILink &self) {
    m_self = self;
    m_self_isSet = true;
}

bool OAIIssue_links::is_self_Set() const{
    return m_self_isSet;
}

bool OAIIssue_links::is_self_Valid() const{
    return m_self_isValid;
}

OAILink OAIIssue_links::getVote() const {
    return m_vote;
}
void OAIIssue_links::setVote(const OAILink &vote) {
    m_vote = vote;
    m_vote_isSet = true;
}

bool OAIIssue_links::is_vote_Set() const{
    return m_vote_isSet;
}

bool OAIIssue_links::is_vote_Valid() const{
    return m_vote_isValid;
}

OAILink OAIIssue_links::getWatch() const {
    return m_watch;
}
void OAIIssue_links::setWatch(const OAILink &watch) {
    m_watch = watch;
    m_watch_isSet = true;
}

bool OAIIssue_links::is_watch_Set() const{
    return m_watch_isSet;
}

bool OAIIssue_links::is_watch_Valid() const{
    return m_watch_isValid;
}

bool OAIIssue_links::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attachments.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_comments.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_html.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_self.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vote.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_watch.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIssue_links::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
