/**
 * Bitbucket API
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@bitbucket.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPull_Request_links.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPull_Request_links::OAIPull_Request_links(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPull_Request_links::OAIPull_Request_links() {
    this->initializeModel();
}

OAIPull_Request_links::~OAIPull_Request_links() {}

void OAIPull_Request_links::initializeModel() {

    m_activity_isSet = false;
    m_activity_isValid = false;

    m_approve_isSet = false;
    m_approve_isValid = false;

    m_comments_isSet = false;
    m_comments_isValid = false;

    m_commits_isSet = false;
    m_commits_isValid = false;

    m_decline_isSet = false;
    m_decline_isValid = false;

    m_diff_isSet = false;
    m_diff_isValid = false;

    m_diffstat_isSet = false;
    m_diffstat_isValid = false;

    m_html_isSet = false;
    m_html_isValid = false;

    m_merge_isSet = false;
    m_merge_isValid = false;

    m_self_isSet = false;
    m_self_isValid = false;
}

void OAIPull_Request_links::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPull_Request_links::fromJsonObject(QJsonObject json) {

    m_activity_isValid = ::OpenAPI::fromJsonValue(m_activity, json[QString("activity")]);
    m_activity_isSet = !json[QString("activity")].isNull() && m_activity_isValid;

    m_approve_isValid = ::OpenAPI::fromJsonValue(m_approve, json[QString("approve")]);
    m_approve_isSet = !json[QString("approve")].isNull() && m_approve_isValid;

    m_comments_isValid = ::OpenAPI::fromJsonValue(m_comments, json[QString("comments")]);
    m_comments_isSet = !json[QString("comments")].isNull() && m_comments_isValid;

    m_commits_isValid = ::OpenAPI::fromJsonValue(m_commits, json[QString("commits")]);
    m_commits_isSet = !json[QString("commits")].isNull() && m_commits_isValid;

    m_decline_isValid = ::OpenAPI::fromJsonValue(m_decline, json[QString("decline")]);
    m_decline_isSet = !json[QString("decline")].isNull() && m_decline_isValid;

    m_diff_isValid = ::OpenAPI::fromJsonValue(m_diff, json[QString("diff")]);
    m_diff_isSet = !json[QString("diff")].isNull() && m_diff_isValid;

    m_diffstat_isValid = ::OpenAPI::fromJsonValue(m_diffstat, json[QString("diffstat")]);
    m_diffstat_isSet = !json[QString("diffstat")].isNull() && m_diffstat_isValid;

    m_html_isValid = ::OpenAPI::fromJsonValue(m_html, json[QString("html")]);
    m_html_isSet = !json[QString("html")].isNull() && m_html_isValid;

    m_merge_isValid = ::OpenAPI::fromJsonValue(m_merge, json[QString("merge")]);
    m_merge_isSet = !json[QString("merge")].isNull() && m_merge_isValid;

    m_self_isValid = ::OpenAPI::fromJsonValue(m_self, json[QString("self")]);
    m_self_isSet = !json[QString("self")].isNull() && m_self_isValid;
}

QString OAIPull_Request_links::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPull_Request_links::asJsonObject() const {
    QJsonObject obj;
    if (m_activity.isSet()) {
        obj.insert(QString("activity"), ::OpenAPI::toJsonValue(m_activity));
    }
    if (m_approve.isSet()) {
        obj.insert(QString("approve"), ::OpenAPI::toJsonValue(m_approve));
    }
    if (m_comments.isSet()) {
        obj.insert(QString("comments"), ::OpenAPI::toJsonValue(m_comments));
    }
    if (m_commits.isSet()) {
        obj.insert(QString("commits"), ::OpenAPI::toJsonValue(m_commits));
    }
    if (m_decline.isSet()) {
        obj.insert(QString("decline"), ::OpenAPI::toJsonValue(m_decline));
    }
    if (m_diff.isSet()) {
        obj.insert(QString("diff"), ::OpenAPI::toJsonValue(m_diff));
    }
    if (m_diffstat.isSet()) {
        obj.insert(QString("diffstat"), ::OpenAPI::toJsonValue(m_diffstat));
    }
    if (m_html.isSet()) {
        obj.insert(QString("html"), ::OpenAPI::toJsonValue(m_html));
    }
    if (m_merge.isSet()) {
        obj.insert(QString("merge"), ::OpenAPI::toJsonValue(m_merge));
    }
    if (m_self.isSet()) {
        obj.insert(QString("self"), ::OpenAPI::toJsonValue(m_self));
    }
    return obj;
}

OAILink OAIPull_Request_links::getActivity() const {
    return m_activity;
}
void OAIPull_Request_links::setActivity(const OAILink &activity) {
    m_activity = activity;
    m_activity_isSet = true;
}

bool OAIPull_Request_links::is_activity_Set() const{
    return m_activity_isSet;
}

bool OAIPull_Request_links::is_activity_Valid() const{
    return m_activity_isValid;
}

OAILink OAIPull_Request_links::getApprove() const {
    return m_approve;
}
void OAIPull_Request_links::setApprove(const OAILink &approve) {
    m_approve = approve;
    m_approve_isSet = true;
}

bool OAIPull_Request_links::is_approve_Set() const{
    return m_approve_isSet;
}

bool OAIPull_Request_links::is_approve_Valid() const{
    return m_approve_isValid;
}

OAILink OAIPull_Request_links::getComments() const {
    return m_comments;
}
void OAIPull_Request_links::setComments(const OAILink &comments) {
    m_comments = comments;
    m_comments_isSet = true;
}

bool OAIPull_Request_links::is_comments_Set() const{
    return m_comments_isSet;
}

bool OAIPull_Request_links::is_comments_Valid() const{
    return m_comments_isValid;
}

OAILink OAIPull_Request_links::getCommits() const {
    return m_commits;
}
void OAIPull_Request_links::setCommits(const OAILink &commits) {
    m_commits = commits;
    m_commits_isSet = true;
}

bool OAIPull_Request_links::is_commits_Set() const{
    return m_commits_isSet;
}

bool OAIPull_Request_links::is_commits_Valid() const{
    return m_commits_isValid;
}

OAILink OAIPull_Request_links::getDecline() const {
    return m_decline;
}
void OAIPull_Request_links::setDecline(const OAILink &decline) {
    m_decline = decline;
    m_decline_isSet = true;
}

bool OAIPull_Request_links::is_decline_Set() const{
    return m_decline_isSet;
}

bool OAIPull_Request_links::is_decline_Valid() const{
    return m_decline_isValid;
}

OAILink OAIPull_Request_links::getDiff() const {
    return m_diff;
}
void OAIPull_Request_links::setDiff(const OAILink &diff) {
    m_diff = diff;
    m_diff_isSet = true;
}

bool OAIPull_Request_links::is_diff_Set() const{
    return m_diff_isSet;
}

bool OAIPull_Request_links::is_diff_Valid() const{
    return m_diff_isValid;
}

OAILink OAIPull_Request_links::getDiffstat() const {
    return m_diffstat;
}
void OAIPull_Request_links::setDiffstat(const OAILink &diffstat) {
    m_diffstat = diffstat;
    m_diffstat_isSet = true;
}

bool OAIPull_Request_links::is_diffstat_Set() const{
    return m_diffstat_isSet;
}

bool OAIPull_Request_links::is_diffstat_Valid() const{
    return m_diffstat_isValid;
}

OAILink OAIPull_Request_links::getHtml() const {
    return m_html;
}
void OAIPull_Request_links::setHtml(const OAILink &html) {
    m_html = html;
    m_html_isSet = true;
}

bool OAIPull_Request_links::is_html_Set() const{
    return m_html_isSet;
}

bool OAIPull_Request_links::is_html_Valid() const{
    return m_html_isValid;
}

OAILink OAIPull_Request_links::getMerge() const {
    return m_merge;
}
void OAIPull_Request_links::setMerge(const OAILink &merge) {
    m_merge = merge;
    m_merge_isSet = true;
}

bool OAIPull_Request_links::is_merge_Set() const{
    return m_merge_isSet;
}

bool OAIPull_Request_links::is_merge_Valid() const{
    return m_merge_isValid;
}

OAILink OAIPull_Request_links::getSelf() const {
    return m_self;
}
void OAIPull_Request_links::setSelf(const OAILink &self) {
    m_self = self;
    m_self_isSet = true;
}

bool OAIPull_Request_links::is_self_Set() const{
    return m_self_isSet;
}

bool OAIPull_Request_links::is_self_Valid() const{
    return m_self_isValid;
}

bool OAIPull_Request_links::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_activity.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_approve.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_comments.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_commits.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_decline.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_diff.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_diffstat.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_html.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_merge.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_self.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPull_Request_links::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
