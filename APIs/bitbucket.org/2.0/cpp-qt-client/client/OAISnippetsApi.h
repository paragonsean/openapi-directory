/**
 * Bitbucket API
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@bitbucket.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAISnippetsApi_H
#define OAI_OAISnippetsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIError.h"
#include "OAIPaginated_accounts.h"
#include "OAIPaginated_snippet_comments.h"
#include "OAIPaginated_snippet_commit.h"
#include "OAIPaginated_snippets.h"
#include "OAISnippet.h"
#include "OAISnippet_comment.h"
#include "OAISnippet_commit.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAISnippetsApi : public QObject {
    Q_OBJECT

public:
    OAISnippetsApi(const int timeOut = 0);
    ~OAISnippetsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  role QString [optional]
    */
    virtual void snippetsGet(const ::OpenAPI::OptionalParam<QString> &role = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_snippet OAISnippet [required]
    */
    virtual void snippetsPost(const OAISnippet &oai_snippet);

    /**
    * @param[in]  comment_id qint32 [required]
    * @param[in]  encoded_id QString [required]
    * @param[in]  workspace QString [required]
    */
    virtual void snippetsWorkspaceEncodedIdCommentsCommentIdDelete(const qint32 &comment_id, const QString &encoded_id, const QString &workspace);

    /**
    * @param[in]  comment_id qint32 [required]
    * @param[in]  encoded_id QString [required]
    * @param[in]  workspace QString [required]
    */
    virtual void snippetsWorkspaceEncodedIdCommentsCommentIdGet(const qint32 &comment_id, const QString &encoded_id, const QString &workspace);

    /**
    * @param[in]  comment_id qint32 [required]
    * @param[in]  encoded_id QString [required]
    * @param[in]  workspace QString [required]
    * @param[in]  oai_snippet_comment OAISnippet_comment [required]
    */
    virtual void snippetsWorkspaceEncodedIdCommentsCommentIdPut(const qint32 &comment_id, const QString &encoded_id, const QString &workspace, const OAISnippet_comment &oai_snippet_comment);

    /**
    * @param[in]  encoded_id QString [required]
    * @param[in]  workspace QString [required]
    */
    virtual void snippetsWorkspaceEncodedIdCommentsGet(const QString &encoded_id, const QString &workspace);

    /**
    * @param[in]  encoded_id QString [required]
    * @param[in]  workspace QString [required]
    * @param[in]  oai_snippet_comment OAISnippet_comment [required]
    */
    virtual void snippetsWorkspaceEncodedIdCommentsPost(const QString &encoded_id, const QString &workspace, const OAISnippet_comment &oai_snippet_comment);

    /**
    * @param[in]  encoded_id QString [required]
    * @param[in]  workspace QString [required]
    */
    virtual void snippetsWorkspaceEncodedIdCommitsGet(const QString &encoded_id, const QString &workspace);

    /**
    * @param[in]  encoded_id QString [required]
    * @param[in]  revision QString [required]
    * @param[in]  workspace QString [required]
    */
    virtual void snippetsWorkspaceEncodedIdCommitsRevisionGet(const QString &encoded_id, const QString &revision, const QString &workspace);

    /**
    * @param[in]  encoded_id QString [required]
    * @param[in]  workspace QString [required]
    */
    virtual void snippetsWorkspaceEncodedIdDelete(const QString &encoded_id, const QString &workspace);

    /**
    * @param[in]  encoded_id QString [required]
    * @param[in]  path QString [required]
    * @param[in]  workspace QString [required]
    */
    virtual void snippetsWorkspaceEncodedIdFilesPathGet(const QString &encoded_id, const QString &path, const QString &workspace);

    /**
    * @param[in]  encoded_id QString [required]
    * @param[in]  workspace QString [required]
    */
    virtual void snippetsWorkspaceEncodedIdGet(const QString &encoded_id, const QString &workspace);

    /**
    * @param[in]  encoded_id QString [required]
    * @param[in]  node_id QString [required]
    * @param[in]  workspace QString [required]
    */
    virtual void snippetsWorkspaceEncodedIdNodeIdDelete(const QString &encoded_id, const QString &node_id, const QString &workspace);

    /**
    * @param[in]  encoded_id QString [required]
    * @param[in]  node_id QString [required]
    * @param[in]  path QString [required]
    * @param[in]  workspace QString [required]
    */
    virtual void snippetsWorkspaceEncodedIdNodeIdFilesPathGet(const QString &encoded_id, const QString &node_id, const QString &path, const QString &workspace);

    /**
    * @param[in]  encoded_id QString [required]
    * @param[in]  node_id QString [required]
    * @param[in]  workspace QString [required]
    */
    virtual void snippetsWorkspaceEncodedIdNodeIdGet(const QString &encoded_id, const QString &node_id, const QString &workspace);

    /**
    * @param[in]  encoded_id QString [required]
    * @param[in]  node_id QString [required]
    * @param[in]  workspace QString [required]
    */
    virtual void snippetsWorkspaceEncodedIdNodeIdPut(const QString &encoded_id, const QString &node_id, const QString &workspace);

    /**
    * @param[in]  encoded_id QString [required]
    * @param[in]  workspace QString [required]
    */
    virtual void snippetsWorkspaceEncodedIdPut(const QString &encoded_id, const QString &workspace);

    /**
    * @param[in]  encoded_id QString [required]
    * @param[in]  revision QString [required]
    * @param[in]  workspace QString [required]
    * @param[in]  path QString [optional]
    */
    virtual void snippetsWorkspaceEncodedIdRevisionDiffGet(const QString &encoded_id, const QString &revision, const QString &workspace, const ::OpenAPI::OptionalParam<QString> &path = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  encoded_id QString [required]
    * @param[in]  revision QString [required]
    * @param[in]  workspace QString [required]
    */
    virtual void snippetsWorkspaceEncodedIdRevisionPatchGet(const QString &encoded_id, const QString &revision, const QString &workspace);

    /**
    * @param[in]  encoded_id QString [required]
    * @param[in]  workspace QString [required]
    */
    virtual void snippetsWorkspaceEncodedIdWatchDelete(const QString &encoded_id, const QString &workspace);

    /**
    * @param[in]  encoded_id QString [required]
    * @param[in]  workspace QString [required]
    */
    virtual void snippetsWorkspaceEncodedIdWatchGet(const QString &encoded_id, const QString &workspace);

    /**
    * @param[in]  encoded_id QString [required]
    * @param[in]  workspace QString [required]
    */
    virtual void snippetsWorkspaceEncodedIdWatchPut(const QString &encoded_id, const QString &workspace);

    /**
    * @param[in]  encoded_id QString [required]
    * @param[in]  workspace QString [required]
    */
    Q_DECL_DEPRECATED virtual void snippetsWorkspaceEncodedIdWatchersGet(const QString &encoded_id, const QString &workspace);

    /**
    * @param[in]  workspace QString [required]
    * @param[in]  role QString [optional]
    */
    virtual void snippetsWorkspaceGet(const QString &workspace, const ::OpenAPI::OptionalParam<QString> &role = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  workspace QString [required]
    * @param[in]  oai_snippet OAISnippet [required]
    */
    virtual void snippetsWorkspacePost(const QString &workspace, const OAISnippet &oai_snippet);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void snippetsGetCallback(OAIHttpRequestWorker *worker);
    void snippetsPostCallback(OAIHttpRequestWorker *worker);
    void snippetsWorkspaceEncodedIdCommentsCommentIdDeleteCallback(OAIHttpRequestWorker *worker);
    void snippetsWorkspaceEncodedIdCommentsCommentIdGetCallback(OAIHttpRequestWorker *worker);
    void snippetsWorkspaceEncodedIdCommentsCommentIdPutCallback(OAIHttpRequestWorker *worker);
    void snippetsWorkspaceEncodedIdCommentsGetCallback(OAIHttpRequestWorker *worker);
    void snippetsWorkspaceEncodedIdCommentsPostCallback(OAIHttpRequestWorker *worker);
    void snippetsWorkspaceEncodedIdCommitsGetCallback(OAIHttpRequestWorker *worker);
    void snippetsWorkspaceEncodedIdCommitsRevisionGetCallback(OAIHttpRequestWorker *worker);
    void snippetsWorkspaceEncodedIdDeleteCallback(OAIHttpRequestWorker *worker);
    void snippetsWorkspaceEncodedIdFilesPathGetCallback(OAIHttpRequestWorker *worker);
    void snippetsWorkspaceEncodedIdGetCallback(OAIHttpRequestWorker *worker);
    void snippetsWorkspaceEncodedIdNodeIdDeleteCallback(OAIHttpRequestWorker *worker);
    void snippetsWorkspaceEncodedIdNodeIdFilesPathGetCallback(OAIHttpRequestWorker *worker);
    void snippetsWorkspaceEncodedIdNodeIdGetCallback(OAIHttpRequestWorker *worker);
    void snippetsWorkspaceEncodedIdNodeIdPutCallback(OAIHttpRequestWorker *worker);
    void snippetsWorkspaceEncodedIdPutCallback(OAIHttpRequestWorker *worker);
    void snippetsWorkspaceEncodedIdRevisionDiffGetCallback(OAIHttpRequestWorker *worker);
    void snippetsWorkspaceEncodedIdRevisionPatchGetCallback(OAIHttpRequestWorker *worker);
    void snippetsWorkspaceEncodedIdWatchDeleteCallback(OAIHttpRequestWorker *worker);
    void snippetsWorkspaceEncodedIdWatchGetCallback(OAIHttpRequestWorker *worker);
    void snippetsWorkspaceEncodedIdWatchPutCallback(OAIHttpRequestWorker *worker);
    void snippetsWorkspaceEncodedIdWatchersGetCallback(OAIHttpRequestWorker *worker);
    void snippetsWorkspaceGetCallback(OAIHttpRequestWorker *worker);
    void snippetsWorkspacePostCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void snippetsGetSignal(OAIPaginated_snippets summary);
    void snippetsPostSignal(OAISnippet summary);
    void snippetsWorkspaceEncodedIdCommentsCommentIdDeleteSignal();
    void snippetsWorkspaceEncodedIdCommentsCommentIdGetSignal(OAISnippet_comment summary);
    void snippetsWorkspaceEncodedIdCommentsCommentIdPutSignal(OAISnippet_comment summary);
    void snippetsWorkspaceEncodedIdCommentsGetSignal(OAIPaginated_snippet_comments summary);
    void snippetsWorkspaceEncodedIdCommentsPostSignal(OAISnippet_comment summary);
    void snippetsWorkspaceEncodedIdCommitsGetSignal(OAIPaginated_snippet_commit summary);
    void snippetsWorkspaceEncodedIdCommitsRevisionGetSignal(OAISnippet_commit summary);
    void snippetsWorkspaceEncodedIdDeleteSignal();
    void snippetsWorkspaceEncodedIdFilesPathGetSignal();
    void snippetsWorkspaceEncodedIdGetSignal(OAISnippet summary);
    void snippetsWorkspaceEncodedIdNodeIdDeleteSignal();
    void snippetsWorkspaceEncodedIdNodeIdFilesPathGetSignal();
    void snippetsWorkspaceEncodedIdNodeIdGetSignal(OAISnippet summary);
    void snippetsWorkspaceEncodedIdNodeIdPutSignal(OAISnippet summary);
    void snippetsWorkspaceEncodedIdPutSignal(OAISnippet summary);
    void snippetsWorkspaceEncodedIdRevisionDiffGetSignal();
    void snippetsWorkspaceEncodedIdRevisionPatchGetSignal();
    void snippetsWorkspaceEncodedIdWatchDeleteSignal();
    void snippetsWorkspaceEncodedIdWatchGetSignal();
    void snippetsWorkspaceEncodedIdWatchPutSignal();
    void snippetsWorkspaceEncodedIdWatchersGetSignal(OAIPaginated_accounts summary);
    void snippetsWorkspaceGetSignal(OAIPaginated_snippets summary);
    void snippetsWorkspacePostSignal(OAISnippet summary);


    void snippetsGetSignalFull(OAIHttpRequestWorker *worker, OAIPaginated_snippets summary);
    void snippetsPostSignalFull(OAIHttpRequestWorker *worker, OAISnippet summary);
    void snippetsWorkspaceEncodedIdCommentsCommentIdDeleteSignalFull(OAIHttpRequestWorker *worker);
    void snippetsWorkspaceEncodedIdCommentsCommentIdGetSignalFull(OAIHttpRequestWorker *worker, OAISnippet_comment summary);
    void snippetsWorkspaceEncodedIdCommentsCommentIdPutSignalFull(OAIHttpRequestWorker *worker, OAISnippet_comment summary);
    void snippetsWorkspaceEncodedIdCommentsGetSignalFull(OAIHttpRequestWorker *worker, OAIPaginated_snippet_comments summary);
    void snippetsWorkspaceEncodedIdCommentsPostSignalFull(OAIHttpRequestWorker *worker, OAISnippet_comment summary);
    void snippetsWorkspaceEncodedIdCommitsGetSignalFull(OAIHttpRequestWorker *worker, OAIPaginated_snippet_commit summary);
    void snippetsWorkspaceEncodedIdCommitsRevisionGetSignalFull(OAIHttpRequestWorker *worker, OAISnippet_commit summary);
    void snippetsWorkspaceEncodedIdDeleteSignalFull(OAIHttpRequestWorker *worker);
    void snippetsWorkspaceEncodedIdFilesPathGetSignalFull(OAIHttpRequestWorker *worker);
    void snippetsWorkspaceEncodedIdGetSignalFull(OAIHttpRequestWorker *worker, OAISnippet summary);
    void snippetsWorkspaceEncodedIdNodeIdDeleteSignalFull(OAIHttpRequestWorker *worker);
    void snippetsWorkspaceEncodedIdNodeIdFilesPathGetSignalFull(OAIHttpRequestWorker *worker);
    void snippetsWorkspaceEncodedIdNodeIdGetSignalFull(OAIHttpRequestWorker *worker, OAISnippet summary);
    void snippetsWorkspaceEncodedIdNodeIdPutSignalFull(OAIHttpRequestWorker *worker, OAISnippet summary);
    void snippetsWorkspaceEncodedIdPutSignalFull(OAIHttpRequestWorker *worker, OAISnippet summary);
    void snippetsWorkspaceEncodedIdRevisionDiffGetSignalFull(OAIHttpRequestWorker *worker);
    void snippetsWorkspaceEncodedIdRevisionPatchGetSignalFull(OAIHttpRequestWorker *worker);
    void snippetsWorkspaceEncodedIdWatchDeleteSignalFull(OAIHttpRequestWorker *worker);
    void snippetsWorkspaceEncodedIdWatchGetSignalFull(OAIHttpRequestWorker *worker);
    void snippetsWorkspaceEncodedIdWatchPutSignalFull(OAIHttpRequestWorker *worker);
    void snippetsWorkspaceEncodedIdWatchersGetSignalFull(OAIHttpRequestWorker *worker, OAIPaginated_accounts summary);
    void snippetsWorkspaceGetSignalFull(OAIHttpRequestWorker *worker, OAIPaginated_snippets summary);
    void snippetsWorkspacePostSignalFull(OAIHttpRequestWorker *worker, OAISnippet summary);

    Q_DECL_DEPRECATED_X("Use snippetsGetSignalError() instead")
    void snippetsGetSignalE(OAIPaginated_snippets summary, QNetworkReply::NetworkError error_type, QString error_str);
    void snippetsGetSignalError(OAIPaginated_snippets summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use snippetsPostSignalError() instead")
    void snippetsPostSignalE(OAISnippet summary, QNetworkReply::NetworkError error_type, QString error_str);
    void snippetsPostSignalError(OAISnippet summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use snippetsWorkspaceEncodedIdCommentsCommentIdDeleteSignalError() instead")
    void snippetsWorkspaceEncodedIdCommentsCommentIdDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void snippetsWorkspaceEncodedIdCommentsCommentIdDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use snippetsWorkspaceEncodedIdCommentsCommentIdGetSignalError() instead")
    void snippetsWorkspaceEncodedIdCommentsCommentIdGetSignalE(OAISnippet_comment summary, QNetworkReply::NetworkError error_type, QString error_str);
    void snippetsWorkspaceEncodedIdCommentsCommentIdGetSignalError(OAISnippet_comment summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use snippetsWorkspaceEncodedIdCommentsCommentIdPutSignalError() instead")
    void snippetsWorkspaceEncodedIdCommentsCommentIdPutSignalE(OAISnippet_comment summary, QNetworkReply::NetworkError error_type, QString error_str);
    void snippetsWorkspaceEncodedIdCommentsCommentIdPutSignalError(OAISnippet_comment summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use snippetsWorkspaceEncodedIdCommentsGetSignalError() instead")
    void snippetsWorkspaceEncodedIdCommentsGetSignalE(OAIPaginated_snippet_comments summary, QNetworkReply::NetworkError error_type, QString error_str);
    void snippetsWorkspaceEncodedIdCommentsGetSignalError(OAIPaginated_snippet_comments summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use snippetsWorkspaceEncodedIdCommentsPostSignalError() instead")
    void snippetsWorkspaceEncodedIdCommentsPostSignalE(OAISnippet_comment summary, QNetworkReply::NetworkError error_type, QString error_str);
    void snippetsWorkspaceEncodedIdCommentsPostSignalError(OAISnippet_comment summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use snippetsWorkspaceEncodedIdCommitsGetSignalError() instead")
    void snippetsWorkspaceEncodedIdCommitsGetSignalE(OAIPaginated_snippet_commit summary, QNetworkReply::NetworkError error_type, QString error_str);
    void snippetsWorkspaceEncodedIdCommitsGetSignalError(OAIPaginated_snippet_commit summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use snippetsWorkspaceEncodedIdCommitsRevisionGetSignalError() instead")
    void snippetsWorkspaceEncodedIdCommitsRevisionGetSignalE(OAISnippet_commit summary, QNetworkReply::NetworkError error_type, QString error_str);
    void snippetsWorkspaceEncodedIdCommitsRevisionGetSignalError(OAISnippet_commit summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use snippetsWorkspaceEncodedIdDeleteSignalError() instead")
    void snippetsWorkspaceEncodedIdDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void snippetsWorkspaceEncodedIdDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use snippetsWorkspaceEncodedIdFilesPathGetSignalError() instead")
    void snippetsWorkspaceEncodedIdFilesPathGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void snippetsWorkspaceEncodedIdFilesPathGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use snippetsWorkspaceEncodedIdGetSignalError() instead")
    void snippetsWorkspaceEncodedIdGetSignalE(OAISnippet summary, QNetworkReply::NetworkError error_type, QString error_str);
    void snippetsWorkspaceEncodedIdGetSignalError(OAISnippet summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use snippetsWorkspaceEncodedIdNodeIdDeleteSignalError() instead")
    void snippetsWorkspaceEncodedIdNodeIdDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void snippetsWorkspaceEncodedIdNodeIdDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use snippetsWorkspaceEncodedIdNodeIdFilesPathGetSignalError() instead")
    void snippetsWorkspaceEncodedIdNodeIdFilesPathGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void snippetsWorkspaceEncodedIdNodeIdFilesPathGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use snippetsWorkspaceEncodedIdNodeIdGetSignalError() instead")
    void snippetsWorkspaceEncodedIdNodeIdGetSignalE(OAISnippet summary, QNetworkReply::NetworkError error_type, QString error_str);
    void snippetsWorkspaceEncodedIdNodeIdGetSignalError(OAISnippet summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use snippetsWorkspaceEncodedIdNodeIdPutSignalError() instead")
    void snippetsWorkspaceEncodedIdNodeIdPutSignalE(OAISnippet summary, QNetworkReply::NetworkError error_type, QString error_str);
    void snippetsWorkspaceEncodedIdNodeIdPutSignalError(OAISnippet summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use snippetsWorkspaceEncodedIdPutSignalError() instead")
    void snippetsWorkspaceEncodedIdPutSignalE(OAISnippet summary, QNetworkReply::NetworkError error_type, QString error_str);
    void snippetsWorkspaceEncodedIdPutSignalError(OAISnippet summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use snippetsWorkspaceEncodedIdRevisionDiffGetSignalError() instead")
    void snippetsWorkspaceEncodedIdRevisionDiffGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void snippetsWorkspaceEncodedIdRevisionDiffGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use snippetsWorkspaceEncodedIdRevisionPatchGetSignalError() instead")
    void snippetsWorkspaceEncodedIdRevisionPatchGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void snippetsWorkspaceEncodedIdRevisionPatchGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use snippetsWorkspaceEncodedIdWatchDeleteSignalError() instead")
    void snippetsWorkspaceEncodedIdWatchDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void snippetsWorkspaceEncodedIdWatchDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use snippetsWorkspaceEncodedIdWatchGetSignalError() instead")
    void snippetsWorkspaceEncodedIdWatchGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void snippetsWorkspaceEncodedIdWatchGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use snippetsWorkspaceEncodedIdWatchPutSignalError() instead")
    void snippetsWorkspaceEncodedIdWatchPutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void snippetsWorkspaceEncodedIdWatchPutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use snippetsWorkspaceEncodedIdWatchersGetSignalError() instead")
    void snippetsWorkspaceEncodedIdWatchersGetSignalE(OAIPaginated_accounts summary, QNetworkReply::NetworkError error_type, QString error_str);
    void snippetsWorkspaceEncodedIdWatchersGetSignalError(OAIPaginated_accounts summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use snippetsWorkspaceGetSignalError() instead")
    void snippetsWorkspaceGetSignalE(OAIPaginated_snippets summary, QNetworkReply::NetworkError error_type, QString error_str);
    void snippetsWorkspaceGetSignalError(OAIPaginated_snippets summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use snippetsWorkspacePostSignalError() instead")
    void snippetsWorkspacePostSignalE(OAISnippet summary, QNetworkReply::NetworkError error_type, QString error_str);
    void snippetsWorkspacePostSignalError(OAISnippet summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use snippetsGetSignalErrorFull() instead")
    void snippetsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void snippetsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use snippetsPostSignalErrorFull() instead")
    void snippetsPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void snippetsPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use snippetsWorkspaceEncodedIdCommentsCommentIdDeleteSignalErrorFull() instead")
    void snippetsWorkspaceEncodedIdCommentsCommentIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void snippetsWorkspaceEncodedIdCommentsCommentIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use snippetsWorkspaceEncodedIdCommentsCommentIdGetSignalErrorFull() instead")
    void snippetsWorkspaceEncodedIdCommentsCommentIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void snippetsWorkspaceEncodedIdCommentsCommentIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use snippetsWorkspaceEncodedIdCommentsCommentIdPutSignalErrorFull() instead")
    void snippetsWorkspaceEncodedIdCommentsCommentIdPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void snippetsWorkspaceEncodedIdCommentsCommentIdPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use snippetsWorkspaceEncodedIdCommentsGetSignalErrorFull() instead")
    void snippetsWorkspaceEncodedIdCommentsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void snippetsWorkspaceEncodedIdCommentsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use snippetsWorkspaceEncodedIdCommentsPostSignalErrorFull() instead")
    void snippetsWorkspaceEncodedIdCommentsPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void snippetsWorkspaceEncodedIdCommentsPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use snippetsWorkspaceEncodedIdCommitsGetSignalErrorFull() instead")
    void snippetsWorkspaceEncodedIdCommitsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void snippetsWorkspaceEncodedIdCommitsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use snippetsWorkspaceEncodedIdCommitsRevisionGetSignalErrorFull() instead")
    void snippetsWorkspaceEncodedIdCommitsRevisionGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void snippetsWorkspaceEncodedIdCommitsRevisionGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use snippetsWorkspaceEncodedIdDeleteSignalErrorFull() instead")
    void snippetsWorkspaceEncodedIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void snippetsWorkspaceEncodedIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use snippetsWorkspaceEncodedIdFilesPathGetSignalErrorFull() instead")
    void snippetsWorkspaceEncodedIdFilesPathGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void snippetsWorkspaceEncodedIdFilesPathGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use snippetsWorkspaceEncodedIdGetSignalErrorFull() instead")
    void snippetsWorkspaceEncodedIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void snippetsWorkspaceEncodedIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use snippetsWorkspaceEncodedIdNodeIdDeleteSignalErrorFull() instead")
    void snippetsWorkspaceEncodedIdNodeIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void snippetsWorkspaceEncodedIdNodeIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use snippetsWorkspaceEncodedIdNodeIdFilesPathGetSignalErrorFull() instead")
    void snippetsWorkspaceEncodedIdNodeIdFilesPathGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void snippetsWorkspaceEncodedIdNodeIdFilesPathGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use snippetsWorkspaceEncodedIdNodeIdGetSignalErrorFull() instead")
    void snippetsWorkspaceEncodedIdNodeIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void snippetsWorkspaceEncodedIdNodeIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use snippetsWorkspaceEncodedIdNodeIdPutSignalErrorFull() instead")
    void snippetsWorkspaceEncodedIdNodeIdPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void snippetsWorkspaceEncodedIdNodeIdPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use snippetsWorkspaceEncodedIdPutSignalErrorFull() instead")
    void snippetsWorkspaceEncodedIdPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void snippetsWorkspaceEncodedIdPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use snippetsWorkspaceEncodedIdRevisionDiffGetSignalErrorFull() instead")
    void snippetsWorkspaceEncodedIdRevisionDiffGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void snippetsWorkspaceEncodedIdRevisionDiffGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use snippetsWorkspaceEncodedIdRevisionPatchGetSignalErrorFull() instead")
    void snippetsWorkspaceEncodedIdRevisionPatchGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void snippetsWorkspaceEncodedIdRevisionPatchGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use snippetsWorkspaceEncodedIdWatchDeleteSignalErrorFull() instead")
    void snippetsWorkspaceEncodedIdWatchDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void snippetsWorkspaceEncodedIdWatchDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use snippetsWorkspaceEncodedIdWatchGetSignalErrorFull() instead")
    void snippetsWorkspaceEncodedIdWatchGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void snippetsWorkspaceEncodedIdWatchGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use snippetsWorkspaceEncodedIdWatchPutSignalErrorFull() instead")
    void snippetsWorkspaceEncodedIdWatchPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void snippetsWorkspaceEncodedIdWatchPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use snippetsWorkspaceEncodedIdWatchersGetSignalErrorFull() instead")
    void snippetsWorkspaceEncodedIdWatchersGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void snippetsWorkspaceEncodedIdWatchersGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use snippetsWorkspaceGetSignalErrorFull() instead")
    void snippetsWorkspaceGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void snippetsWorkspaceGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use snippetsWorkspacePostSignalErrorFull() instead")
    void snippetsWorkspacePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void snippetsWorkspacePostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
