/**
 * Bitbucket API
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@bitbucket.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBranching_model_settings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBranching_model_settings::OAIBranching_model_settings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBranching_model_settings::OAIBranching_model_settings() {
    this->initializeModel();
}

OAIBranching_model_settings::~OAIBranching_model_settings() {}

void OAIBranching_model_settings::initializeModel() {

    m_type_isSet = false;
    m_type_isValid = false;

    m_branch_types_isSet = false;
    m_branch_types_isValid = false;

    m_development_isSet = false;
    m_development_isValid = false;

    m_links_isSet = false;
    m_links_isValid = false;

    m_production_isSet = false;
    m_production_isValid = false;
}

void OAIBranching_model_settings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBranching_model_settings::fromJsonObject(QJsonObject json) {

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_branch_types_isValid = ::OpenAPI::fromJsonValue(m_branch_types, json[QString("branch_types")]);
    m_branch_types_isSet = !json[QString("branch_types")].isNull() && m_branch_types_isValid;

    m_development_isValid = ::OpenAPI::fromJsonValue(m_development, json[QString("development")]);
    m_development_isSet = !json[QString("development")].isNull() && m_development_isValid;

    m_links_isValid = ::OpenAPI::fromJsonValue(m_links, json[QString("links")]);
    m_links_isSet = !json[QString("links")].isNull() && m_links_isValid;

    m_production_isValid = ::OpenAPI::fromJsonValue(m_production, json[QString("production")]);
    m_production_isSet = !json[QString("production")].isNull() && m_production_isValid;
}

QString OAIBranching_model_settings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBranching_model_settings::asJsonObject() const {
    QJsonObject obj;
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_branch_types.size() > 0) {
        obj.insert(QString("branch_types"), ::OpenAPI::toJsonValue(m_branch_types));
    }
    if (m_development.isSet()) {
        obj.insert(QString("development"), ::OpenAPI::toJsonValue(m_development));
    }
    if (m_links.isSet()) {
        obj.insert(QString("links"), ::OpenAPI::toJsonValue(m_links));
    }
    if (m_production.isSet()) {
        obj.insert(QString("production"), ::OpenAPI::toJsonValue(m_production));
    }
    return obj;
}

QString OAIBranching_model_settings::getType() const {
    return m_type;
}
void OAIBranching_model_settings::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIBranching_model_settings::is_type_Set() const{
    return m_type_isSet;
}

bool OAIBranching_model_settings::is_type_Valid() const{
    return m_type_isValid;
}

QSet<OAIBranching_Model_Settings_branch_types> OAIBranching_model_settings::getBranchTypes() const {
    return m_branch_types;
}
void OAIBranching_model_settings::setBranchTypes(const QSet<OAIBranching_Model_Settings_branch_types> &branch_types) {
    m_branch_types = branch_types;
    m_branch_types_isSet = true;
}

bool OAIBranching_model_settings::is_branch_types_Set() const{
    return m_branch_types_isSet;
}

bool OAIBranching_model_settings::is_branch_types_Valid() const{
    return m_branch_types_isValid;
}

OAIBranching_Model_Settings_development OAIBranching_model_settings::getDevelopment() const {
    return m_development;
}
void OAIBranching_model_settings::setDevelopment(const OAIBranching_Model_Settings_development &development) {
    m_development = development;
    m_development_isSet = true;
}

bool OAIBranching_model_settings::is_development_Set() const{
    return m_development_isSet;
}

bool OAIBranching_model_settings::is_development_Valid() const{
    return m_development_isValid;
}

OAIBranching_Model_Settings_links OAIBranching_model_settings::getLinks() const {
    return m_links;
}
void OAIBranching_model_settings::setLinks(const OAIBranching_Model_Settings_links &links) {
    m_links = links;
    m_links_isSet = true;
}

bool OAIBranching_model_settings::is_links_Set() const{
    return m_links_isSet;
}

bool OAIBranching_model_settings::is_links_Valid() const{
    return m_links_isValid;
}

OAIBranching_Model_Settings_production OAIBranching_model_settings::getProduction() const {
    return m_production;
}
void OAIBranching_model_settings::setProduction(const OAIBranching_Model_Settings_production &production) {
    m_production = production;
    m_production_isSet = true;
}

bool OAIBranching_model_settings::is_production_Set() const{
    return m_production_isSet;
}

bool OAIBranching_model_settings::is_production_Valid() const{
    return m_production_isValid;
}

bool OAIBranching_model_settings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_branch_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_development.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_links.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_production.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBranching_model_settings::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_type_isValid && true;
}

} // namespace OpenAPI
