/**
 * Bitbucket API
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@bitbucket.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIPropertiesApi_H
#define OAI_OAIPropertiesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIApplication_property.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIPropertiesApi : public QObject {
    Q_OBJECT

public:
    OAIPropertiesApi(const int timeOut = 0);
    ~OAIPropertiesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  workspace QString [required]
    * @param[in]  repo_slug QString [required]
    * @param[in]  commit QString [required]
    * @param[in]  app_key QString [required]
    * @param[in]  property_name QString [required]
    */
    virtual void deleteCommitHostedPropertyValue(const QString &workspace, const QString &repo_slug, const QString &commit, const QString &app_key, const QString &property_name);

    /**
    * @param[in]  workspace QString [required]
    * @param[in]  repo_slug QString [required]
    * @param[in]  pullrequest_id QString [required]
    * @param[in]  app_key QString [required]
    * @param[in]  property_name QString [required]
    */
    virtual void deletePullRequestHostedPropertyValue(const QString &workspace, const QString &repo_slug, const QString &pullrequest_id, const QString &app_key, const QString &property_name);

    /**
    * @param[in]  workspace QString [required]
    * @param[in]  repo_slug QString [required]
    * @param[in]  app_key QString [required]
    * @param[in]  property_name QString [required]
    */
    virtual void deleteRepositoryHostedPropertyValue(const QString &workspace, const QString &repo_slug, const QString &app_key, const QString &property_name);

    /**
    * @param[in]  selected_user QString [required]
    * @param[in]  app_key QString [required]
    * @param[in]  property_name QString [required]
    */
    virtual void deleteUserHostedPropertyValue(const QString &selected_user, const QString &app_key, const QString &property_name);

    /**
    * @param[in]  workspace QString [required]
    * @param[in]  repo_slug QString [required]
    * @param[in]  commit QString [required]
    * @param[in]  app_key QString [required]
    * @param[in]  property_name QString [required]
    */
    virtual void getCommitHostedPropertyValue(const QString &workspace, const QString &repo_slug, const QString &commit, const QString &app_key, const QString &property_name);

    /**
    * @param[in]  workspace QString [required]
    * @param[in]  repo_slug QString [required]
    * @param[in]  pullrequest_id QString [required]
    * @param[in]  app_key QString [required]
    * @param[in]  property_name QString [required]
    */
    virtual void getPullRequestHostedPropertyValue(const QString &workspace, const QString &repo_slug, const QString &pullrequest_id, const QString &app_key, const QString &property_name);

    /**
    * @param[in]  workspace QString [required]
    * @param[in]  repo_slug QString [required]
    * @param[in]  app_key QString [required]
    * @param[in]  property_name QString [required]
    */
    virtual void getRepositoryHostedPropertyValue(const QString &workspace, const QString &repo_slug, const QString &app_key, const QString &property_name);

    /**
    * @param[in]  selected_user QString [required]
    * @param[in]  app_key QString [required]
    * @param[in]  property_name QString [required]
    */
    virtual void retrieveUserHostedPropertyValue(const QString &selected_user, const QString &app_key, const QString &property_name);

    /**
    * @param[in]  workspace QString [required]
    * @param[in]  repo_slug QString [required]
    * @param[in]  commit QString [required]
    * @param[in]  app_key QString [required]
    * @param[in]  property_name QString [required]
    * @param[in]  oai_application_property OAIApplication_property [required]
    */
    virtual void updateCommitHostedPropertyValue(const QString &workspace, const QString &repo_slug, const QString &commit, const QString &app_key, const QString &property_name, const OAIApplication_property &oai_application_property);

    /**
    * @param[in]  workspace QString [required]
    * @param[in]  repo_slug QString [required]
    * @param[in]  pullrequest_id QString [required]
    * @param[in]  app_key QString [required]
    * @param[in]  property_name QString [required]
    * @param[in]  oai_application_property OAIApplication_property [required]
    */
    virtual void updatePullRequestHostedPropertyValue(const QString &workspace, const QString &repo_slug, const QString &pullrequest_id, const QString &app_key, const QString &property_name, const OAIApplication_property &oai_application_property);

    /**
    * @param[in]  workspace QString [required]
    * @param[in]  repo_slug QString [required]
    * @param[in]  app_key QString [required]
    * @param[in]  property_name QString [required]
    * @param[in]  oai_application_property OAIApplication_property [required]
    */
    virtual void updateRepositoryHostedPropertyValue(const QString &workspace, const QString &repo_slug, const QString &app_key, const QString &property_name, const OAIApplication_property &oai_application_property);

    /**
    * @param[in]  selected_user QString [required]
    * @param[in]  app_key QString [required]
    * @param[in]  property_name QString [required]
    * @param[in]  oai_application_property OAIApplication_property [required]
    */
    virtual void updateUserHostedPropertyValue(const QString &selected_user, const QString &app_key, const QString &property_name, const OAIApplication_property &oai_application_property);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void deleteCommitHostedPropertyValueCallback(OAIHttpRequestWorker *worker);
    void deletePullRequestHostedPropertyValueCallback(OAIHttpRequestWorker *worker);
    void deleteRepositoryHostedPropertyValueCallback(OAIHttpRequestWorker *worker);
    void deleteUserHostedPropertyValueCallback(OAIHttpRequestWorker *worker);
    void getCommitHostedPropertyValueCallback(OAIHttpRequestWorker *worker);
    void getPullRequestHostedPropertyValueCallback(OAIHttpRequestWorker *worker);
    void getRepositoryHostedPropertyValueCallback(OAIHttpRequestWorker *worker);
    void retrieveUserHostedPropertyValueCallback(OAIHttpRequestWorker *worker);
    void updateCommitHostedPropertyValueCallback(OAIHttpRequestWorker *worker);
    void updatePullRequestHostedPropertyValueCallback(OAIHttpRequestWorker *worker);
    void updateRepositoryHostedPropertyValueCallback(OAIHttpRequestWorker *worker);
    void updateUserHostedPropertyValueCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void deleteCommitHostedPropertyValueSignal();
    void deletePullRequestHostedPropertyValueSignal();
    void deleteRepositoryHostedPropertyValueSignal();
    void deleteUserHostedPropertyValueSignal();
    void getCommitHostedPropertyValueSignal(OAIApplication_property summary);
    void getPullRequestHostedPropertyValueSignal(OAIApplication_property summary);
    void getRepositoryHostedPropertyValueSignal(OAIApplication_property summary);
    void retrieveUserHostedPropertyValueSignal(OAIApplication_property summary);
    void updateCommitHostedPropertyValueSignal();
    void updatePullRequestHostedPropertyValueSignal();
    void updateRepositoryHostedPropertyValueSignal();
    void updateUserHostedPropertyValueSignal();


    void deleteCommitHostedPropertyValueSignalFull(OAIHttpRequestWorker *worker);
    void deletePullRequestHostedPropertyValueSignalFull(OAIHttpRequestWorker *worker);
    void deleteRepositoryHostedPropertyValueSignalFull(OAIHttpRequestWorker *worker);
    void deleteUserHostedPropertyValueSignalFull(OAIHttpRequestWorker *worker);
    void getCommitHostedPropertyValueSignalFull(OAIHttpRequestWorker *worker, OAIApplication_property summary);
    void getPullRequestHostedPropertyValueSignalFull(OAIHttpRequestWorker *worker, OAIApplication_property summary);
    void getRepositoryHostedPropertyValueSignalFull(OAIHttpRequestWorker *worker, OAIApplication_property summary);
    void retrieveUserHostedPropertyValueSignalFull(OAIHttpRequestWorker *worker, OAIApplication_property summary);
    void updateCommitHostedPropertyValueSignalFull(OAIHttpRequestWorker *worker);
    void updatePullRequestHostedPropertyValueSignalFull(OAIHttpRequestWorker *worker);
    void updateRepositoryHostedPropertyValueSignalFull(OAIHttpRequestWorker *worker);
    void updateUserHostedPropertyValueSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use deleteCommitHostedPropertyValueSignalError() instead")
    void deleteCommitHostedPropertyValueSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteCommitHostedPropertyValueSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deletePullRequestHostedPropertyValueSignalError() instead")
    void deletePullRequestHostedPropertyValueSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deletePullRequestHostedPropertyValueSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteRepositoryHostedPropertyValueSignalError() instead")
    void deleteRepositoryHostedPropertyValueSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteRepositoryHostedPropertyValueSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteUserHostedPropertyValueSignalError() instead")
    void deleteUserHostedPropertyValueSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteUserHostedPropertyValueSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCommitHostedPropertyValueSignalError() instead")
    void getCommitHostedPropertyValueSignalE(OAIApplication_property summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCommitHostedPropertyValueSignalError(OAIApplication_property summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPullRequestHostedPropertyValueSignalError() instead")
    void getPullRequestHostedPropertyValueSignalE(OAIApplication_property summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPullRequestHostedPropertyValueSignalError(OAIApplication_property summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRepositoryHostedPropertyValueSignalError() instead")
    void getRepositoryHostedPropertyValueSignalE(OAIApplication_property summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getRepositoryHostedPropertyValueSignalError(OAIApplication_property summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retrieveUserHostedPropertyValueSignalError() instead")
    void retrieveUserHostedPropertyValueSignalE(OAIApplication_property summary, QNetworkReply::NetworkError error_type, QString error_str);
    void retrieveUserHostedPropertyValueSignalError(OAIApplication_property summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateCommitHostedPropertyValueSignalError() instead")
    void updateCommitHostedPropertyValueSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateCommitHostedPropertyValueSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updatePullRequestHostedPropertyValueSignalError() instead")
    void updatePullRequestHostedPropertyValueSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updatePullRequestHostedPropertyValueSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateRepositoryHostedPropertyValueSignalError() instead")
    void updateRepositoryHostedPropertyValueSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateRepositoryHostedPropertyValueSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateUserHostedPropertyValueSignalError() instead")
    void updateUserHostedPropertyValueSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateUserHostedPropertyValueSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use deleteCommitHostedPropertyValueSignalErrorFull() instead")
    void deleteCommitHostedPropertyValueSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteCommitHostedPropertyValueSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deletePullRequestHostedPropertyValueSignalErrorFull() instead")
    void deletePullRequestHostedPropertyValueSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deletePullRequestHostedPropertyValueSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteRepositoryHostedPropertyValueSignalErrorFull() instead")
    void deleteRepositoryHostedPropertyValueSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteRepositoryHostedPropertyValueSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteUserHostedPropertyValueSignalErrorFull() instead")
    void deleteUserHostedPropertyValueSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteUserHostedPropertyValueSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCommitHostedPropertyValueSignalErrorFull() instead")
    void getCommitHostedPropertyValueSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCommitHostedPropertyValueSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPullRequestHostedPropertyValueSignalErrorFull() instead")
    void getPullRequestHostedPropertyValueSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPullRequestHostedPropertyValueSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRepositoryHostedPropertyValueSignalErrorFull() instead")
    void getRepositoryHostedPropertyValueSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getRepositoryHostedPropertyValueSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retrieveUserHostedPropertyValueSignalErrorFull() instead")
    void retrieveUserHostedPropertyValueSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void retrieveUserHostedPropertyValueSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateCommitHostedPropertyValueSignalErrorFull() instead")
    void updateCommitHostedPropertyValueSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateCommitHostedPropertyValueSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updatePullRequestHostedPropertyValueSignalErrorFull() instead")
    void updatePullRequestHostedPropertyValueSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updatePullRequestHostedPropertyValueSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateRepositoryHostedPropertyValueSignalErrorFull() instead")
    void updateRepositoryHostedPropertyValueSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateRepositoryHostedPropertyValueSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateUserHostedPropertyValueSignalErrorFull() instead")
    void updateUserHostedPropertyValueSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateUserHostedPropertyValueSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
