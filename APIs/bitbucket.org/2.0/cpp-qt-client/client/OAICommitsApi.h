/**
 * Bitbucket API
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@bitbucket.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAICommitsApi_H
#define OAI_OAICommitsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICommit.h"
#include "OAICommit_comment.h"
#include "OAIError.h"
#include "OAIPaginated_annotations.h"
#include "OAIPaginated_changeset.h"
#include "OAIPaginated_commit_comments.h"
#include "OAIPaginated_diffstats.h"
#include "OAIPaginated_reports.h"
#include "OAIParticipant.h"
#include "OAIReport.h"
#include "OAIReport_annotation.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAICommitsApi : public QObject {
    Q_OBJECT

public:
    OAICommitsApi(const int timeOut = 0);
    ~OAICommitsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  workspace QString [required]
    * @param[in]  repo_slug QString [required]
    * @param[in]  commit QString [required]
    * @param[in]  report_id QString [required]
    * @param[in]  oai_report_annotation QList<OAIReport_annotation> [required]
    */
    virtual void bulkCreateOrUpdateAnnotations(const QString &workspace, const QString &repo_slug, const QString &commit, const QString &report_id, const QList<OAIReport_annotation> &oai_report_annotation);

    /**
    * @param[in]  workspace QString [required]
    * @param[in]  repo_slug QString [required]
    * @param[in]  commit QString [required]
    * @param[in]  report_id QString [required]
    * @param[in]  annotation_id QString [required]
    * @param[in]  oai_report_annotation OAIReport_annotation [required]
    */
    virtual void createOrUpdateAnnotation(const QString &workspace, const QString &repo_slug, const QString &commit, const QString &report_id, const QString &annotation_id, const OAIReport_annotation &oai_report_annotation);

    /**
    * @param[in]  workspace QString [required]
    * @param[in]  repo_slug QString [required]
    * @param[in]  commit QString [required]
    * @param[in]  report_id QString [required]
    * @param[in]  oai_report OAIReport [required]
    */
    virtual void createOrUpdateReport(const QString &workspace, const QString &repo_slug, const QString &commit, const QString &report_id, const OAIReport &oai_report);

    /**
    * @param[in]  workspace QString [required]
    * @param[in]  repo_slug QString [required]
    * @param[in]  commit QString [required]
    * @param[in]  report_id QString [required]
    * @param[in]  annotation_id QString [required]
    */
    virtual void deleteAnnotation(const QString &workspace, const QString &repo_slug, const QString &commit, const QString &report_id, const QString &annotation_id);

    /**
    * @param[in]  workspace QString [required]
    * @param[in]  repo_slug QString [required]
    * @param[in]  commit QString [required]
    * @param[in]  report_id QString [required]
    */
    virtual void deleteReport(const QString &workspace, const QString &repo_slug, const QString &commit, const QString &report_id);

    /**
    * @param[in]  workspace QString [required]
    * @param[in]  repo_slug QString [required]
    * @param[in]  commit QString [required]
    * @param[in]  report_id QString [required]
    * @param[in]  annotation_id QString [required]
    */
    virtual void getAnnotation(const QString &workspace, const QString &repo_slug, const QString &commit, const QString &report_id, const QString &annotation_id);

    /**
    * @param[in]  workspace QString [required]
    * @param[in]  repo_slug QString [required]
    * @param[in]  commit QString [required]
    * @param[in]  report_id QString [required]
    */
    virtual void getAnnotationsForReport(const QString &workspace, const QString &repo_slug, const QString &commit, const QString &report_id);

    /**
    * @param[in]  workspace QString [required]
    * @param[in]  repo_slug QString [required]
    * @param[in]  commit QString [required]
    * @param[in]  report_id QString [required]
    */
    virtual void getReport(const QString &workspace, const QString &repo_slug, const QString &commit, const QString &report_id);

    /**
    * @param[in]  workspace QString [required]
    * @param[in]  repo_slug QString [required]
    * @param[in]  commit QString [required]
    */
    virtual void getReportsForCommit(const QString &workspace, const QString &repo_slug, const QString &commit);

    /**
    * @param[in]  commit QString [required]
    * @param[in]  repo_slug QString [required]
    * @param[in]  workspace QString [required]
    */
    virtual void repositoriesWorkspaceRepoSlugCommitCommitApproveDelete(const QString &commit, const QString &repo_slug, const QString &workspace);

    /**
    * @param[in]  commit QString [required]
    * @param[in]  repo_slug QString [required]
    * @param[in]  workspace QString [required]
    */
    virtual void repositoriesWorkspaceRepoSlugCommitCommitApprovePost(const QString &commit, const QString &repo_slug, const QString &workspace);

    /**
    * @param[in]  comment_id qint32 [required]
    * @param[in]  commit QString [required]
    * @param[in]  repo_slug QString [required]
    * @param[in]  workspace QString [required]
    */
    virtual void repositoriesWorkspaceRepoSlugCommitCommitCommentsCommentIdDelete(const qint32 &comment_id, const QString &commit, const QString &repo_slug, const QString &workspace);

    /**
    * @param[in]  comment_id qint32 [required]
    * @param[in]  commit QString [required]
    * @param[in]  repo_slug QString [required]
    * @param[in]  workspace QString [required]
    */
    virtual void repositoriesWorkspaceRepoSlugCommitCommitCommentsCommentIdGet(const qint32 &comment_id, const QString &commit, const QString &repo_slug, const QString &workspace);

    /**
    * @param[in]  comment_id qint32 [required]
    * @param[in]  commit QString [required]
    * @param[in]  repo_slug QString [required]
    * @param[in]  workspace QString [required]
    * @param[in]  oai_commit_comment OAICommit_comment [required]
    */
    virtual void repositoriesWorkspaceRepoSlugCommitCommitCommentsCommentIdPut(const qint32 &comment_id, const QString &commit, const QString &repo_slug, const QString &workspace, const OAICommit_comment &oai_commit_comment);

    /**
    * @param[in]  commit QString [required]
    * @param[in]  repo_slug QString [required]
    * @param[in]  workspace QString [required]
    * @param[in]  q QString [optional]
    * @param[in]  sort QString [optional]
    */
    virtual void repositoriesWorkspaceRepoSlugCommitCommitCommentsGet(const QString &commit, const QString &repo_slug, const QString &workspace, const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  commit QString [required]
    * @param[in]  repo_slug QString [required]
    * @param[in]  workspace QString [required]
    * @param[in]  oai_commit_comment OAICommit_comment [required]
    */
    virtual void repositoriesWorkspaceRepoSlugCommitCommitCommentsPost(const QString &commit, const QString &repo_slug, const QString &workspace, const OAICommit_comment &oai_commit_comment);

    /**
    * @param[in]  commit QString [required]
    * @param[in]  repo_slug QString [required]
    * @param[in]  workspace QString [required]
    */
    virtual void repositoriesWorkspaceRepoSlugCommitCommitGet(const QString &commit, const QString &repo_slug, const QString &workspace);

    /**
    * @param[in]  repo_slug QString [required]
    * @param[in]  workspace QString [required]
    */
    virtual void repositoriesWorkspaceRepoSlugCommitsGet(const QString &repo_slug, const QString &workspace);

    /**
    * @param[in]  repo_slug QString [required]
    * @param[in]  workspace QString [required]
    */
    virtual void repositoriesWorkspaceRepoSlugCommitsPost(const QString &repo_slug, const QString &workspace);

    /**
    * @param[in]  repo_slug QString [required]
    * @param[in]  revision QString [required]
    * @param[in]  workspace QString [required]
    */
    virtual void repositoriesWorkspaceRepoSlugCommitsRevisionGet(const QString &repo_slug, const QString &revision, const QString &workspace);

    /**
    * @param[in]  repo_slug QString [required]
    * @param[in]  revision QString [required]
    * @param[in]  workspace QString [required]
    */
    virtual void repositoriesWorkspaceRepoSlugCommitsRevisionPost(const QString &repo_slug, const QString &revision, const QString &workspace);

    /**
    * @param[in]  repo_slug QString [required]
    * @param[in]  spec QString [required]
    * @param[in]  workspace QString [required]
    * @param[in]  context qint32 [optional]
    * @param[in]  path QString [optional]
    * @param[in]  ignore_whitespace bool [optional]
    * @param[in]  binary bool [optional]
    * @param[in]  renames bool [optional]
    * @param[in]  merge bool [optional]
    * @param[in]  topic bool [optional]
    */
    virtual void repositoriesWorkspaceRepoSlugDiffSpecGet(const QString &repo_slug, const QString &spec, const QString &workspace, const ::OpenAPI::OptionalParam<qint32> &context = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &path = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &ignore_whitespace = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &binary = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &renames = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &merge = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &topic = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  repo_slug QString [required]
    * @param[in]  spec QString [required]
    * @param[in]  workspace QString [required]
    * @param[in]  ignore_whitespace bool [optional]
    * @param[in]  merge bool [optional]
    * @param[in]  path QString [optional]
    * @param[in]  renames bool [optional]
    * @param[in]  topic bool [optional]
    */
    virtual void repositoriesWorkspaceRepoSlugDiffstatSpecGet(const QString &repo_slug, const QString &spec, const QString &workspace, const ::OpenAPI::OptionalParam<bool> &ignore_whitespace = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &merge = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &path = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &renames = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &topic = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  repo_slug QString [required]
    * @param[in]  revspec QString [required]
    * @param[in]  workspace QString [required]
    */
    virtual void repositoriesWorkspaceRepoSlugMergeBaseRevspecGet(const QString &repo_slug, const QString &revspec, const QString &workspace);

    /**
    * @param[in]  repo_slug QString [required]
    * @param[in]  spec QString [required]
    * @param[in]  workspace QString [required]
    */
    virtual void repositoriesWorkspaceRepoSlugPatchSpecGet(const QString &repo_slug, const QString &spec, const QString &workspace);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void bulkCreateOrUpdateAnnotationsCallback(OAIHttpRequestWorker *worker);
    void createOrUpdateAnnotationCallback(OAIHttpRequestWorker *worker);
    void createOrUpdateReportCallback(OAIHttpRequestWorker *worker);
    void deleteAnnotationCallback(OAIHttpRequestWorker *worker);
    void deleteReportCallback(OAIHttpRequestWorker *worker);
    void getAnnotationCallback(OAIHttpRequestWorker *worker);
    void getAnnotationsForReportCallback(OAIHttpRequestWorker *worker);
    void getReportCallback(OAIHttpRequestWorker *worker);
    void getReportsForCommitCallback(OAIHttpRequestWorker *worker);
    void repositoriesWorkspaceRepoSlugCommitCommitApproveDeleteCallback(OAIHttpRequestWorker *worker);
    void repositoriesWorkspaceRepoSlugCommitCommitApprovePostCallback(OAIHttpRequestWorker *worker);
    void repositoriesWorkspaceRepoSlugCommitCommitCommentsCommentIdDeleteCallback(OAIHttpRequestWorker *worker);
    void repositoriesWorkspaceRepoSlugCommitCommitCommentsCommentIdGetCallback(OAIHttpRequestWorker *worker);
    void repositoriesWorkspaceRepoSlugCommitCommitCommentsCommentIdPutCallback(OAIHttpRequestWorker *worker);
    void repositoriesWorkspaceRepoSlugCommitCommitCommentsGetCallback(OAIHttpRequestWorker *worker);
    void repositoriesWorkspaceRepoSlugCommitCommitCommentsPostCallback(OAIHttpRequestWorker *worker);
    void repositoriesWorkspaceRepoSlugCommitCommitGetCallback(OAIHttpRequestWorker *worker);
    void repositoriesWorkspaceRepoSlugCommitsGetCallback(OAIHttpRequestWorker *worker);
    void repositoriesWorkspaceRepoSlugCommitsPostCallback(OAIHttpRequestWorker *worker);
    void repositoriesWorkspaceRepoSlugCommitsRevisionGetCallback(OAIHttpRequestWorker *worker);
    void repositoriesWorkspaceRepoSlugCommitsRevisionPostCallback(OAIHttpRequestWorker *worker);
    void repositoriesWorkspaceRepoSlugDiffSpecGetCallback(OAIHttpRequestWorker *worker);
    void repositoriesWorkspaceRepoSlugDiffstatSpecGetCallback(OAIHttpRequestWorker *worker);
    void repositoriesWorkspaceRepoSlugMergeBaseRevspecGetCallback(OAIHttpRequestWorker *worker);
    void repositoriesWorkspaceRepoSlugPatchSpecGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void bulkCreateOrUpdateAnnotationsSignal(QList<OAIReport_annotation> summary);
    void createOrUpdateAnnotationSignal(OAIReport_annotation summary);
    void createOrUpdateReportSignal(OAIReport summary);
    void deleteAnnotationSignal();
    void deleteReportSignal();
    void getAnnotationSignal(OAIReport_annotation summary);
    void getAnnotationsForReportSignal(OAIPaginated_annotations summary);
    void getReportSignal(OAIReport summary);
    void getReportsForCommitSignal(OAIPaginated_reports summary);
    void repositoriesWorkspaceRepoSlugCommitCommitApproveDeleteSignal();
    void repositoriesWorkspaceRepoSlugCommitCommitApprovePostSignal(OAIParticipant summary);
    void repositoriesWorkspaceRepoSlugCommitCommitCommentsCommentIdDeleteSignal();
    void repositoriesWorkspaceRepoSlugCommitCommitCommentsCommentIdGetSignal(OAICommit_comment summary);
    void repositoriesWorkspaceRepoSlugCommitCommitCommentsCommentIdPutSignal();
    void repositoriesWorkspaceRepoSlugCommitCommitCommentsGetSignal(OAIPaginated_commit_comments summary);
    void repositoriesWorkspaceRepoSlugCommitCommitCommentsPostSignal();
    void repositoriesWorkspaceRepoSlugCommitCommitGetSignal(OAICommit summary);
    void repositoriesWorkspaceRepoSlugCommitsGetSignal(OAIPaginated_changeset summary);
    void repositoriesWorkspaceRepoSlugCommitsPostSignal(OAIPaginated_changeset summary);
    void repositoriesWorkspaceRepoSlugCommitsRevisionGetSignal(OAIPaginated_changeset summary);
    void repositoriesWorkspaceRepoSlugCommitsRevisionPostSignal(OAIPaginated_changeset summary);
    void repositoriesWorkspaceRepoSlugDiffSpecGetSignal();
    void repositoriesWorkspaceRepoSlugDiffstatSpecGetSignal(OAIPaginated_diffstats summary);
    void repositoriesWorkspaceRepoSlugMergeBaseRevspecGetSignal(OAICommit summary);
    void repositoriesWorkspaceRepoSlugPatchSpecGetSignal();


    void bulkCreateOrUpdateAnnotationsSignalFull(OAIHttpRequestWorker *worker, QList<OAIReport_annotation> summary);
    void createOrUpdateAnnotationSignalFull(OAIHttpRequestWorker *worker, OAIReport_annotation summary);
    void createOrUpdateReportSignalFull(OAIHttpRequestWorker *worker, OAIReport summary);
    void deleteAnnotationSignalFull(OAIHttpRequestWorker *worker);
    void deleteReportSignalFull(OAIHttpRequestWorker *worker);
    void getAnnotationSignalFull(OAIHttpRequestWorker *worker, OAIReport_annotation summary);
    void getAnnotationsForReportSignalFull(OAIHttpRequestWorker *worker, OAIPaginated_annotations summary);
    void getReportSignalFull(OAIHttpRequestWorker *worker, OAIReport summary);
    void getReportsForCommitSignalFull(OAIHttpRequestWorker *worker, OAIPaginated_reports summary);
    void repositoriesWorkspaceRepoSlugCommitCommitApproveDeleteSignalFull(OAIHttpRequestWorker *worker);
    void repositoriesWorkspaceRepoSlugCommitCommitApprovePostSignalFull(OAIHttpRequestWorker *worker, OAIParticipant summary);
    void repositoriesWorkspaceRepoSlugCommitCommitCommentsCommentIdDeleteSignalFull(OAIHttpRequestWorker *worker);
    void repositoriesWorkspaceRepoSlugCommitCommitCommentsCommentIdGetSignalFull(OAIHttpRequestWorker *worker, OAICommit_comment summary);
    void repositoriesWorkspaceRepoSlugCommitCommitCommentsCommentIdPutSignalFull(OAIHttpRequestWorker *worker);
    void repositoriesWorkspaceRepoSlugCommitCommitCommentsGetSignalFull(OAIHttpRequestWorker *worker, OAIPaginated_commit_comments summary);
    void repositoriesWorkspaceRepoSlugCommitCommitCommentsPostSignalFull(OAIHttpRequestWorker *worker);
    void repositoriesWorkspaceRepoSlugCommitCommitGetSignalFull(OAIHttpRequestWorker *worker, OAICommit summary);
    void repositoriesWorkspaceRepoSlugCommitsGetSignalFull(OAIHttpRequestWorker *worker, OAIPaginated_changeset summary);
    void repositoriesWorkspaceRepoSlugCommitsPostSignalFull(OAIHttpRequestWorker *worker, OAIPaginated_changeset summary);
    void repositoriesWorkspaceRepoSlugCommitsRevisionGetSignalFull(OAIHttpRequestWorker *worker, OAIPaginated_changeset summary);
    void repositoriesWorkspaceRepoSlugCommitsRevisionPostSignalFull(OAIHttpRequestWorker *worker, OAIPaginated_changeset summary);
    void repositoriesWorkspaceRepoSlugDiffSpecGetSignalFull(OAIHttpRequestWorker *worker);
    void repositoriesWorkspaceRepoSlugDiffstatSpecGetSignalFull(OAIHttpRequestWorker *worker, OAIPaginated_diffstats summary);
    void repositoriesWorkspaceRepoSlugMergeBaseRevspecGetSignalFull(OAIHttpRequestWorker *worker, OAICommit summary);
    void repositoriesWorkspaceRepoSlugPatchSpecGetSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use bulkCreateOrUpdateAnnotationsSignalError() instead")
    void bulkCreateOrUpdateAnnotationsSignalE(QList<OAIReport_annotation> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void bulkCreateOrUpdateAnnotationsSignalError(QList<OAIReport_annotation> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createOrUpdateAnnotationSignalError() instead")
    void createOrUpdateAnnotationSignalE(OAIReport_annotation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createOrUpdateAnnotationSignalError(OAIReport_annotation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createOrUpdateReportSignalError() instead")
    void createOrUpdateReportSignalE(OAIReport summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createOrUpdateReportSignalError(OAIReport summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteAnnotationSignalError() instead")
    void deleteAnnotationSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteAnnotationSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteReportSignalError() instead")
    void deleteReportSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteReportSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAnnotationSignalError() instead")
    void getAnnotationSignalE(OAIReport_annotation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAnnotationSignalError(OAIReport_annotation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAnnotationsForReportSignalError() instead")
    void getAnnotationsForReportSignalE(OAIPaginated_annotations summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAnnotationsForReportSignalError(OAIPaginated_annotations summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getReportSignalError() instead")
    void getReportSignalE(OAIReport summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getReportSignalError(OAIReport summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getReportsForCommitSignalError() instead")
    void getReportsForCommitSignalE(OAIPaginated_reports summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getReportsForCommitSignalError(OAIPaginated_reports summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugCommitCommitApproveDeleteSignalError() instead")
    void repositoriesWorkspaceRepoSlugCommitCommitApproveDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugCommitCommitApproveDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugCommitCommitApprovePostSignalError() instead")
    void repositoriesWorkspaceRepoSlugCommitCommitApprovePostSignalE(OAIParticipant summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugCommitCommitApprovePostSignalError(OAIParticipant summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugCommitCommitCommentsCommentIdDeleteSignalError() instead")
    void repositoriesWorkspaceRepoSlugCommitCommitCommentsCommentIdDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugCommitCommitCommentsCommentIdDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugCommitCommitCommentsCommentIdGetSignalError() instead")
    void repositoriesWorkspaceRepoSlugCommitCommitCommentsCommentIdGetSignalE(OAICommit_comment summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugCommitCommitCommentsCommentIdGetSignalError(OAICommit_comment summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugCommitCommitCommentsCommentIdPutSignalError() instead")
    void repositoriesWorkspaceRepoSlugCommitCommitCommentsCommentIdPutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugCommitCommitCommentsCommentIdPutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugCommitCommitCommentsGetSignalError() instead")
    void repositoriesWorkspaceRepoSlugCommitCommitCommentsGetSignalE(OAIPaginated_commit_comments summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugCommitCommitCommentsGetSignalError(OAIPaginated_commit_comments summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugCommitCommitCommentsPostSignalError() instead")
    void repositoriesWorkspaceRepoSlugCommitCommitCommentsPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugCommitCommitCommentsPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugCommitCommitGetSignalError() instead")
    void repositoriesWorkspaceRepoSlugCommitCommitGetSignalE(OAICommit summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugCommitCommitGetSignalError(OAICommit summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugCommitsGetSignalError() instead")
    void repositoriesWorkspaceRepoSlugCommitsGetSignalE(OAIPaginated_changeset summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugCommitsGetSignalError(OAIPaginated_changeset summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugCommitsPostSignalError() instead")
    void repositoriesWorkspaceRepoSlugCommitsPostSignalE(OAIPaginated_changeset summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugCommitsPostSignalError(OAIPaginated_changeset summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugCommitsRevisionGetSignalError() instead")
    void repositoriesWorkspaceRepoSlugCommitsRevisionGetSignalE(OAIPaginated_changeset summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugCommitsRevisionGetSignalError(OAIPaginated_changeset summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugCommitsRevisionPostSignalError() instead")
    void repositoriesWorkspaceRepoSlugCommitsRevisionPostSignalE(OAIPaginated_changeset summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugCommitsRevisionPostSignalError(OAIPaginated_changeset summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugDiffSpecGetSignalError() instead")
    void repositoriesWorkspaceRepoSlugDiffSpecGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugDiffSpecGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugDiffstatSpecGetSignalError() instead")
    void repositoriesWorkspaceRepoSlugDiffstatSpecGetSignalE(OAIPaginated_diffstats summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugDiffstatSpecGetSignalError(OAIPaginated_diffstats summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugMergeBaseRevspecGetSignalError() instead")
    void repositoriesWorkspaceRepoSlugMergeBaseRevspecGetSignalE(OAICommit summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugMergeBaseRevspecGetSignalError(OAICommit summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugPatchSpecGetSignalError() instead")
    void repositoriesWorkspaceRepoSlugPatchSpecGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugPatchSpecGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use bulkCreateOrUpdateAnnotationsSignalErrorFull() instead")
    void bulkCreateOrUpdateAnnotationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void bulkCreateOrUpdateAnnotationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createOrUpdateAnnotationSignalErrorFull() instead")
    void createOrUpdateAnnotationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createOrUpdateAnnotationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createOrUpdateReportSignalErrorFull() instead")
    void createOrUpdateReportSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createOrUpdateReportSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteAnnotationSignalErrorFull() instead")
    void deleteAnnotationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteAnnotationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteReportSignalErrorFull() instead")
    void deleteReportSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteReportSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAnnotationSignalErrorFull() instead")
    void getAnnotationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAnnotationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAnnotationsForReportSignalErrorFull() instead")
    void getAnnotationsForReportSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAnnotationsForReportSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getReportSignalErrorFull() instead")
    void getReportSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getReportSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getReportsForCommitSignalErrorFull() instead")
    void getReportsForCommitSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getReportsForCommitSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugCommitCommitApproveDeleteSignalErrorFull() instead")
    void repositoriesWorkspaceRepoSlugCommitCommitApproveDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugCommitCommitApproveDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugCommitCommitApprovePostSignalErrorFull() instead")
    void repositoriesWorkspaceRepoSlugCommitCommitApprovePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugCommitCommitApprovePostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugCommitCommitCommentsCommentIdDeleteSignalErrorFull() instead")
    void repositoriesWorkspaceRepoSlugCommitCommitCommentsCommentIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugCommitCommitCommentsCommentIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugCommitCommitCommentsCommentIdGetSignalErrorFull() instead")
    void repositoriesWorkspaceRepoSlugCommitCommitCommentsCommentIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugCommitCommitCommentsCommentIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugCommitCommitCommentsCommentIdPutSignalErrorFull() instead")
    void repositoriesWorkspaceRepoSlugCommitCommitCommentsCommentIdPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugCommitCommitCommentsCommentIdPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugCommitCommitCommentsGetSignalErrorFull() instead")
    void repositoriesWorkspaceRepoSlugCommitCommitCommentsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugCommitCommitCommentsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugCommitCommitCommentsPostSignalErrorFull() instead")
    void repositoriesWorkspaceRepoSlugCommitCommitCommentsPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugCommitCommitCommentsPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugCommitCommitGetSignalErrorFull() instead")
    void repositoriesWorkspaceRepoSlugCommitCommitGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugCommitCommitGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugCommitsGetSignalErrorFull() instead")
    void repositoriesWorkspaceRepoSlugCommitsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugCommitsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugCommitsPostSignalErrorFull() instead")
    void repositoriesWorkspaceRepoSlugCommitsPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugCommitsPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugCommitsRevisionGetSignalErrorFull() instead")
    void repositoriesWorkspaceRepoSlugCommitsRevisionGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugCommitsRevisionGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugCommitsRevisionPostSignalErrorFull() instead")
    void repositoriesWorkspaceRepoSlugCommitsRevisionPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugCommitsRevisionPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugDiffSpecGetSignalErrorFull() instead")
    void repositoriesWorkspaceRepoSlugDiffSpecGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugDiffSpecGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugDiffstatSpecGetSignalErrorFull() instead")
    void repositoriesWorkspaceRepoSlugDiffstatSpecGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugDiffstatSpecGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugMergeBaseRevspecGetSignalErrorFull() instead")
    void repositoriesWorkspaceRepoSlugMergeBaseRevspecGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugMergeBaseRevspecGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugPatchSpecGetSignalErrorFull() instead")
    void repositoriesWorkspaceRepoSlugPatchSpecGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugPatchSpecGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
