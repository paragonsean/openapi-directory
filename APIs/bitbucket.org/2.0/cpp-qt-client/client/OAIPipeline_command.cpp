/**
 * Bitbucket API
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@bitbucket.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPipeline_command.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPipeline_command::OAIPipeline_command(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPipeline_command::OAIPipeline_command() {
    this->initializeModel();
}

OAIPipeline_command::~OAIPipeline_command() {}

void OAIPipeline_command::initializeModel() {

    m_command_isSet = false;
    m_command_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;
}

void OAIPipeline_command::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPipeline_command::fromJsonObject(QJsonObject json) {

    m_command_isValid = ::OpenAPI::fromJsonValue(m_command, json[QString("command")]);
    m_command_isSet = !json[QString("command")].isNull() && m_command_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;
}

QString OAIPipeline_command::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPipeline_command::asJsonObject() const {
    QJsonObject obj;
    if (m_command_isSet) {
        obj.insert(QString("command"), ::OpenAPI::toJsonValue(m_command));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    return obj;
}

QString OAIPipeline_command::getCommand() const {
    return m_command;
}
void OAIPipeline_command::setCommand(const QString &command) {
    m_command = command;
    m_command_isSet = true;
}

bool OAIPipeline_command::is_command_Set() const{
    return m_command_isSet;
}

bool OAIPipeline_command::is_command_Valid() const{
    return m_command_isValid;
}

QString OAIPipeline_command::getName() const {
    return m_name;
}
void OAIPipeline_command::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIPipeline_command::is_name_Set() const{
    return m_name_isSet;
}

bool OAIPipeline_command::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIPipeline_command::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_command_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPipeline_command::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
