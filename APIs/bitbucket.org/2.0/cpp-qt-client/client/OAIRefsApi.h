/**
 * Bitbucket API
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@bitbucket.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIRefsApi_H
#define OAI_OAIRefsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBranch.h"
#include "OAIError.h"
#include "OAIPaginated_branches.h"
#include "OAIPaginated_refs.h"
#include "OAIPaginated_tags.h"
#include "OAITag.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIRefsApi : public QObject {
    Q_OBJECT

public:
    OAIRefsApi(const int timeOut = 0);
    ~OAIRefsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  repo_slug QString [required]
    * @param[in]  workspace QString [required]
    * @param[in]  q QString [optional]
    * @param[in]  sort QString [optional]
    */
    virtual void repositoriesWorkspaceRepoSlugRefsBranchesGet(const QString &repo_slug, const QString &workspace, const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  repo_slug QString [required]
    * @param[in]  workspace QString [required]
    */
    virtual void repositoriesWorkspaceRepoSlugRefsBranchesNameDelete(const QString &name, const QString &repo_slug, const QString &workspace);

    /**
    * @param[in]  name QString [required]
    * @param[in]  repo_slug QString [required]
    * @param[in]  workspace QString [required]
    */
    virtual void repositoriesWorkspaceRepoSlugRefsBranchesNameGet(const QString &name, const QString &repo_slug, const QString &workspace);

    /**
    * @param[in]  repo_slug QString [required]
    * @param[in]  workspace QString [required]
    */
    virtual void repositoriesWorkspaceRepoSlugRefsBranchesPost(const QString &repo_slug, const QString &workspace);

    /**
    * @param[in]  repo_slug QString [required]
    * @param[in]  workspace QString [required]
    * @param[in]  q QString [optional]
    * @param[in]  sort QString [optional]
    */
    virtual void repositoriesWorkspaceRepoSlugRefsGet(const QString &repo_slug, const QString &workspace, const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  repo_slug QString [required]
    * @param[in]  workspace QString [required]
    * @param[in]  q QString [optional]
    * @param[in]  sort QString [optional]
    */
    virtual void repositoriesWorkspaceRepoSlugRefsTagsGet(const QString &repo_slug, const QString &workspace, const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  repo_slug QString [required]
    * @param[in]  workspace QString [required]
    */
    virtual void repositoriesWorkspaceRepoSlugRefsTagsNameDelete(const QString &name, const QString &repo_slug, const QString &workspace);

    /**
    * @param[in]  name QString [required]
    * @param[in]  repo_slug QString [required]
    * @param[in]  workspace QString [required]
    */
    virtual void repositoriesWorkspaceRepoSlugRefsTagsNameGet(const QString &name, const QString &repo_slug, const QString &workspace);

    /**
    * @param[in]  repo_slug QString [required]
    * @param[in]  workspace QString [required]
    * @param[in]  oai_tag OAITag [required]
    */
    virtual void repositoriesWorkspaceRepoSlugRefsTagsPost(const QString &repo_slug, const QString &workspace, const OAITag &oai_tag);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void repositoriesWorkspaceRepoSlugRefsBranchesGetCallback(OAIHttpRequestWorker *worker);
    void repositoriesWorkspaceRepoSlugRefsBranchesNameDeleteCallback(OAIHttpRequestWorker *worker);
    void repositoriesWorkspaceRepoSlugRefsBranchesNameGetCallback(OAIHttpRequestWorker *worker);
    void repositoriesWorkspaceRepoSlugRefsBranchesPostCallback(OAIHttpRequestWorker *worker);
    void repositoriesWorkspaceRepoSlugRefsGetCallback(OAIHttpRequestWorker *worker);
    void repositoriesWorkspaceRepoSlugRefsTagsGetCallback(OAIHttpRequestWorker *worker);
    void repositoriesWorkspaceRepoSlugRefsTagsNameDeleteCallback(OAIHttpRequestWorker *worker);
    void repositoriesWorkspaceRepoSlugRefsTagsNameGetCallback(OAIHttpRequestWorker *worker);
    void repositoriesWorkspaceRepoSlugRefsTagsPostCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void repositoriesWorkspaceRepoSlugRefsBranchesGetSignal(OAIPaginated_branches summary);
    void repositoriesWorkspaceRepoSlugRefsBranchesNameDeleteSignal();
    void repositoriesWorkspaceRepoSlugRefsBranchesNameGetSignal(OAIBranch summary);
    void repositoriesWorkspaceRepoSlugRefsBranchesPostSignal(OAIBranch summary);
    void repositoriesWorkspaceRepoSlugRefsGetSignal(OAIPaginated_refs summary);
    void repositoriesWorkspaceRepoSlugRefsTagsGetSignal(OAIPaginated_tags summary);
    void repositoriesWorkspaceRepoSlugRefsTagsNameDeleteSignal();
    void repositoriesWorkspaceRepoSlugRefsTagsNameGetSignal(OAITag summary);
    void repositoriesWorkspaceRepoSlugRefsTagsPostSignal(OAITag summary);


    void repositoriesWorkspaceRepoSlugRefsBranchesGetSignalFull(OAIHttpRequestWorker *worker, OAIPaginated_branches summary);
    void repositoriesWorkspaceRepoSlugRefsBranchesNameDeleteSignalFull(OAIHttpRequestWorker *worker);
    void repositoriesWorkspaceRepoSlugRefsBranchesNameGetSignalFull(OAIHttpRequestWorker *worker, OAIBranch summary);
    void repositoriesWorkspaceRepoSlugRefsBranchesPostSignalFull(OAIHttpRequestWorker *worker, OAIBranch summary);
    void repositoriesWorkspaceRepoSlugRefsGetSignalFull(OAIHttpRequestWorker *worker, OAIPaginated_refs summary);
    void repositoriesWorkspaceRepoSlugRefsTagsGetSignalFull(OAIHttpRequestWorker *worker, OAIPaginated_tags summary);
    void repositoriesWorkspaceRepoSlugRefsTagsNameDeleteSignalFull(OAIHttpRequestWorker *worker);
    void repositoriesWorkspaceRepoSlugRefsTagsNameGetSignalFull(OAIHttpRequestWorker *worker, OAITag summary);
    void repositoriesWorkspaceRepoSlugRefsTagsPostSignalFull(OAIHttpRequestWorker *worker, OAITag summary);

    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugRefsBranchesGetSignalError() instead")
    void repositoriesWorkspaceRepoSlugRefsBranchesGetSignalE(OAIPaginated_branches summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugRefsBranchesGetSignalError(OAIPaginated_branches summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugRefsBranchesNameDeleteSignalError() instead")
    void repositoriesWorkspaceRepoSlugRefsBranchesNameDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugRefsBranchesNameDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugRefsBranchesNameGetSignalError() instead")
    void repositoriesWorkspaceRepoSlugRefsBranchesNameGetSignalE(OAIBranch summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugRefsBranchesNameGetSignalError(OAIBranch summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugRefsBranchesPostSignalError() instead")
    void repositoriesWorkspaceRepoSlugRefsBranchesPostSignalE(OAIBranch summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugRefsBranchesPostSignalError(OAIBranch summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugRefsGetSignalError() instead")
    void repositoriesWorkspaceRepoSlugRefsGetSignalE(OAIPaginated_refs summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugRefsGetSignalError(OAIPaginated_refs summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugRefsTagsGetSignalError() instead")
    void repositoriesWorkspaceRepoSlugRefsTagsGetSignalE(OAIPaginated_tags summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugRefsTagsGetSignalError(OAIPaginated_tags summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugRefsTagsNameDeleteSignalError() instead")
    void repositoriesWorkspaceRepoSlugRefsTagsNameDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugRefsTagsNameDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugRefsTagsNameGetSignalError() instead")
    void repositoriesWorkspaceRepoSlugRefsTagsNameGetSignalE(OAITag summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugRefsTagsNameGetSignalError(OAITag summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugRefsTagsPostSignalError() instead")
    void repositoriesWorkspaceRepoSlugRefsTagsPostSignalE(OAITag summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugRefsTagsPostSignalError(OAITag summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugRefsBranchesGetSignalErrorFull() instead")
    void repositoriesWorkspaceRepoSlugRefsBranchesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugRefsBranchesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugRefsBranchesNameDeleteSignalErrorFull() instead")
    void repositoriesWorkspaceRepoSlugRefsBranchesNameDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugRefsBranchesNameDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugRefsBranchesNameGetSignalErrorFull() instead")
    void repositoriesWorkspaceRepoSlugRefsBranchesNameGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugRefsBranchesNameGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugRefsBranchesPostSignalErrorFull() instead")
    void repositoriesWorkspaceRepoSlugRefsBranchesPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugRefsBranchesPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugRefsGetSignalErrorFull() instead")
    void repositoriesWorkspaceRepoSlugRefsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugRefsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugRefsTagsGetSignalErrorFull() instead")
    void repositoriesWorkspaceRepoSlugRefsTagsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugRefsTagsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugRefsTagsNameDeleteSignalErrorFull() instead")
    void repositoriesWorkspaceRepoSlugRefsTagsNameDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugRefsTagsNameDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugRefsTagsNameGetSignalErrorFull() instead")
    void repositoriesWorkspaceRepoSlugRefsTagsNameGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugRefsTagsNameGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugRefsTagsPostSignalErrorFull() instead")
    void repositoriesWorkspaceRepoSlugRefsTagsPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugRefsTagsPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
