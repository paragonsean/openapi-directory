/**
 * Bitbucket API
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@bitbucket.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISearch_result_page.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISearch_result_page::OAISearch_result_page(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISearch_result_page::OAISearch_result_page() {
    this->initializeModel();
}

OAISearch_result_page::~OAISearch_result_page() {}

void OAISearch_result_page::initializeModel() {

    m_next_isSet = false;
    m_next_isValid = false;

    m_page_isSet = false;
    m_page_isValid = false;

    m_pagelen_isSet = false;
    m_pagelen_isValid = false;

    m_previous_isSet = false;
    m_previous_isValid = false;

    m_query_substituted_isSet = false;
    m_query_substituted_isValid = false;

    m_size_isSet = false;
    m_size_isValid = false;

    m_values_isSet = false;
    m_values_isValid = false;
}

void OAISearch_result_page::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISearch_result_page::fromJsonObject(QJsonObject json) {

    m_next_isValid = ::OpenAPI::fromJsonValue(m_next, json[QString("next")]);
    m_next_isSet = !json[QString("next")].isNull() && m_next_isValid;

    m_page_isValid = ::OpenAPI::fromJsonValue(m_page, json[QString("page")]);
    m_page_isSet = !json[QString("page")].isNull() && m_page_isValid;

    m_pagelen_isValid = ::OpenAPI::fromJsonValue(m_pagelen, json[QString("pagelen")]);
    m_pagelen_isSet = !json[QString("pagelen")].isNull() && m_pagelen_isValid;

    m_previous_isValid = ::OpenAPI::fromJsonValue(m_previous, json[QString("previous")]);
    m_previous_isSet = !json[QString("previous")].isNull() && m_previous_isValid;

    m_query_substituted_isValid = ::OpenAPI::fromJsonValue(m_query_substituted, json[QString("query_substituted")]);
    m_query_substituted_isSet = !json[QString("query_substituted")].isNull() && m_query_substituted_isValid;

    m_size_isValid = ::OpenAPI::fromJsonValue(m_size, json[QString("size")]);
    m_size_isSet = !json[QString("size")].isNull() && m_size_isValid;

    m_values_isValid = ::OpenAPI::fromJsonValue(m_values, json[QString("values")]);
    m_values_isSet = !json[QString("values")].isNull() && m_values_isValid;
}

QString OAISearch_result_page::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISearch_result_page::asJsonObject() const {
    QJsonObject obj;
    if (m_next_isSet) {
        obj.insert(QString("next"), ::OpenAPI::toJsonValue(m_next));
    }
    if (m_page_isSet) {
        obj.insert(QString("page"), ::OpenAPI::toJsonValue(m_page));
    }
    if (m_pagelen_isSet) {
        obj.insert(QString("pagelen"), ::OpenAPI::toJsonValue(m_pagelen));
    }
    if (m_previous_isSet) {
        obj.insert(QString("previous"), ::OpenAPI::toJsonValue(m_previous));
    }
    if (m_query_substituted_isSet) {
        obj.insert(QString("query_substituted"), ::OpenAPI::toJsonValue(m_query_substituted));
    }
    if (m_size_isSet) {
        obj.insert(QString("size"), ::OpenAPI::toJsonValue(m_size));
    }
    if (m_values.size() > 0) {
        obj.insert(QString("values"), ::OpenAPI::toJsonValue(m_values));
    }
    return obj;
}

QString OAISearch_result_page::getNext() const {
    return m_next;
}
void OAISearch_result_page::setNext(const QString &next) {
    m_next = next;
    m_next_isSet = true;
}

bool OAISearch_result_page::is_next_Set() const{
    return m_next_isSet;
}

bool OAISearch_result_page::is_next_Valid() const{
    return m_next_isValid;
}

qint32 OAISearch_result_page::getPage() const {
    return m_page;
}
void OAISearch_result_page::setPage(const qint32 &page) {
    m_page = page;
    m_page_isSet = true;
}

bool OAISearch_result_page::is_page_Set() const{
    return m_page_isSet;
}

bool OAISearch_result_page::is_page_Valid() const{
    return m_page_isValid;
}

qint32 OAISearch_result_page::getPagelen() const {
    return m_pagelen;
}
void OAISearch_result_page::setPagelen(const qint32 &pagelen) {
    m_pagelen = pagelen;
    m_pagelen_isSet = true;
}

bool OAISearch_result_page::is_pagelen_Set() const{
    return m_pagelen_isSet;
}

bool OAISearch_result_page::is_pagelen_Valid() const{
    return m_pagelen_isValid;
}

QString OAISearch_result_page::getPrevious() const {
    return m_previous;
}
void OAISearch_result_page::setPrevious(const QString &previous) {
    m_previous = previous;
    m_previous_isSet = true;
}

bool OAISearch_result_page::is_previous_Set() const{
    return m_previous_isSet;
}

bool OAISearch_result_page::is_previous_Valid() const{
    return m_previous_isValid;
}

bool OAISearch_result_page::isQuerySubstituted() const {
    return m_query_substituted;
}
void OAISearch_result_page::setQuerySubstituted(const bool &query_substituted) {
    m_query_substituted = query_substituted;
    m_query_substituted_isSet = true;
}

bool OAISearch_result_page::is_query_substituted_Set() const{
    return m_query_substituted_isSet;
}

bool OAISearch_result_page::is_query_substituted_Valid() const{
    return m_query_substituted_isValid;
}

qint64 OAISearch_result_page::getSize() const {
    return m_size;
}
void OAISearch_result_page::setSize(const qint64 &size) {
    m_size = size;
    m_size_isSet = true;
}

bool OAISearch_result_page::is_size_Set() const{
    return m_size_isSet;
}

bool OAISearch_result_page::is_size_Valid() const{
    return m_size_isValid;
}

QList<OAISearch_code_search_result> OAISearch_result_page::getValues() const {
    return m_values;
}
void OAISearch_result_page::setValues(const QList<OAISearch_code_search_result> &values) {
    m_values = values;
    m_values_isSet = true;
}

bool OAISearch_result_page::is_values_Set() const{
    return m_values_isSet;
}

bool OAISearch_result_page::is_values_Valid() const{
    return m_values_isValid;
}

bool OAISearch_result_page::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_next_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pagelen_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_previous_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_query_substituted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_values.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISearch_result_page::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
