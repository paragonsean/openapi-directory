/**
 * Bitbucket API
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@bitbucket.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAICommitStatusesApi_H
#define OAI_OAICommitStatusesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICommitstatus.h"
#include "OAIError.h"
#include "OAIPaginated_commitstatuses.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAICommitStatusesApi : public QObject {
    Q_OBJECT

public:
    OAICommitStatusesApi(const int timeOut = 0);
    ~OAICommitStatusesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  commit QString [required]
    * @param[in]  key QString [required]
    * @param[in]  repo_slug QString [required]
    * @param[in]  workspace QString [required]
    */
    virtual void repositoriesWorkspaceRepoSlugCommitCommitStatusesBuildKeyGet(const QString &commit, const QString &key, const QString &repo_slug, const QString &workspace);

    /**
    * @param[in]  commit QString [required]
    * @param[in]  key QString [required]
    * @param[in]  repo_slug QString [required]
    * @param[in]  workspace QString [required]
    * @param[in]  oai_commitstatus OAICommitstatus [optional]
    */
    virtual void repositoriesWorkspaceRepoSlugCommitCommitStatusesBuildKeyPut(const QString &commit, const QString &key, const QString &repo_slug, const QString &workspace, const ::OpenAPI::OptionalParam<OAICommitstatus> &oai_commitstatus = ::OpenAPI::OptionalParam<OAICommitstatus>());

    /**
    * @param[in]  commit QString [required]
    * @param[in]  repo_slug QString [required]
    * @param[in]  workspace QString [required]
    * @param[in]  oai_commitstatus OAICommitstatus [optional]
    */
    virtual void repositoriesWorkspaceRepoSlugCommitCommitStatusesBuildPost(const QString &commit, const QString &repo_slug, const QString &workspace, const ::OpenAPI::OptionalParam<OAICommitstatus> &oai_commitstatus = ::OpenAPI::OptionalParam<OAICommitstatus>());

    /**
    * @param[in]  commit QString [required]
    * @param[in]  repo_slug QString [required]
    * @param[in]  workspace QString [required]
    * @param[in]  q QString [optional]
    * @param[in]  sort QString [optional]
    */
    virtual void repositoriesWorkspaceRepoSlugCommitCommitStatusesGet(const QString &commit, const QString &repo_slug, const QString &workspace, const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  pull_request_id qint32 [required]
    * @param[in]  repo_slug QString [required]
    * @param[in]  workspace QString [required]
    * @param[in]  q QString [optional]
    * @param[in]  sort QString [optional]
    */
    virtual void repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdStatusesGet(const qint32 &pull_request_id, const QString &repo_slug, const QString &workspace, const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void repositoriesWorkspaceRepoSlugCommitCommitStatusesBuildKeyGetCallback(OAIHttpRequestWorker *worker);
    void repositoriesWorkspaceRepoSlugCommitCommitStatusesBuildKeyPutCallback(OAIHttpRequestWorker *worker);
    void repositoriesWorkspaceRepoSlugCommitCommitStatusesBuildPostCallback(OAIHttpRequestWorker *worker);
    void repositoriesWorkspaceRepoSlugCommitCommitStatusesGetCallback(OAIHttpRequestWorker *worker);
    void repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdStatusesGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void repositoriesWorkspaceRepoSlugCommitCommitStatusesBuildKeyGetSignal(OAICommitstatus summary);
    void repositoriesWorkspaceRepoSlugCommitCommitStatusesBuildKeyPutSignal(OAICommitstatus summary);
    void repositoriesWorkspaceRepoSlugCommitCommitStatusesBuildPostSignal(OAICommitstatus summary);
    void repositoriesWorkspaceRepoSlugCommitCommitStatusesGetSignal(OAIPaginated_commitstatuses summary);
    void repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdStatusesGetSignal(OAIPaginated_commitstatuses summary);


    void repositoriesWorkspaceRepoSlugCommitCommitStatusesBuildKeyGetSignalFull(OAIHttpRequestWorker *worker, OAICommitstatus summary);
    void repositoriesWorkspaceRepoSlugCommitCommitStatusesBuildKeyPutSignalFull(OAIHttpRequestWorker *worker, OAICommitstatus summary);
    void repositoriesWorkspaceRepoSlugCommitCommitStatusesBuildPostSignalFull(OAIHttpRequestWorker *worker, OAICommitstatus summary);
    void repositoriesWorkspaceRepoSlugCommitCommitStatusesGetSignalFull(OAIHttpRequestWorker *worker, OAIPaginated_commitstatuses summary);
    void repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdStatusesGetSignalFull(OAIHttpRequestWorker *worker, OAIPaginated_commitstatuses summary);

    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugCommitCommitStatusesBuildKeyGetSignalError() instead")
    void repositoriesWorkspaceRepoSlugCommitCommitStatusesBuildKeyGetSignalE(OAICommitstatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugCommitCommitStatusesBuildKeyGetSignalError(OAICommitstatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugCommitCommitStatusesBuildKeyPutSignalError() instead")
    void repositoriesWorkspaceRepoSlugCommitCommitStatusesBuildKeyPutSignalE(OAICommitstatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugCommitCommitStatusesBuildKeyPutSignalError(OAICommitstatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugCommitCommitStatusesBuildPostSignalError() instead")
    void repositoriesWorkspaceRepoSlugCommitCommitStatusesBuildPostSignalE(OAICommitstatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugCommitCommitStatusesBuildPostSignalError(OAICommitstatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugCommitCommitStatusesGetSignalError() instead")
    void repositoriesWorkspaceRepoSlugCommitCommitStatusesGetSignalE(OAIPaginated_commitstatuses summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugCommitCommitStatusesGetSignalError(OAIPaginated_commitstatuses summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdStatusesGetSignalError() instead")
    void repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdStatusesGetSignalE(OAIPaginated_commitstatuses summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdStatusesGetSignalError(OAIPaginated_commitstatuses summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugCommitCommitStatusesBuildKeyGetSignalErrorFull() instead")
    void repositoriesWorkspaceRepoSlugCommitCommitStatusesBuildKeyGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugCommitCommitStatusesBuildKeyGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugCommitCommitStatusesBuildKeyPutSignalErrorFull() instead")
    void repositoriesWorkspaceRepoSlugCommitCommitStatusesBuildKeyPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugCommitCommitStatusesBuildKeyPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugCommitCommitStatusesBuildPostSignalErrorFull() instead")
    void repositoriesWorkspaceRepoSlugCommitCommitStatusesBuildPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugCommitCommitStatusesBuildPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugCommitCommitStatusesGetSignalErrorFull() instead")
    void repositoriesWorkspaceRepoSlugCommitCommitStatusesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugCommitCommitStatusesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdStatusesGetSignalErrorFull() instead")
    void repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdStatusesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdStatusesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
