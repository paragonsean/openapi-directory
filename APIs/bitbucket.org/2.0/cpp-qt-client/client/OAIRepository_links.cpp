/**
 * Bitbucket API
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@bitbucket.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRepository_links.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRepository_links::OAIRepository_links(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRepository_links::OAIRepository_links() {
    this->initializeModel();
}

OAIRepository_links::~OAIRepository_links() {}

void OAIRepository_links::initializeModel() {

    m_avatar_isSet = false;
    m_avatar_isValid = false;

    m_clone_isSet = false;
    m_clone_isValid = false;

    m_commits_isSet = false;
    m_commits_isValid = false;

    m_downloads_isSet = false;
    m_downloads_isValid = false;

    m_forks_isSet = false;
    m_forks_isValid = false;

    m_hooks_isSet = false;
    m_hooks_isValid = false;

    m_html_isSet = false;
    m_html_isValid = false;

    m_pullrequests_isSet = false;
    m_pullrequests_isValid = false;

    m_self_isSet = false;
    m_self_isValid = false;

    m_watchers_isSet = false;
    m_watchers_isValid = false;
}

void OAIRepository_links::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRepository_links::fromJsonObject(QJsonObject json) {

    m_avatar_isValid = ::OpenAPI::fromJsonValue(m_avatar, json[QString("avatar")]);
    m_avatar_isSet = !json[QString("avatar")].isNull() && m_avatar_isValid;

    m_clone_isValid = ::OpenAPI::fromJsonValue(m_clone, json[QString("clone")]);
    m_clone_isSet = !json[QString("clone")].isNull() && m_clone_isValid;

    m_commits_isValid = ::OpenAPI::fromJsonValue(m_commits, json[QString("commits")]);
    m_commits_isSet = !json[QString("commits")].isNull() && m_commits_isValid;

    m_downloads_isValid = ::OpenAPI::fromJsonValue(m_downloads, json[QString("downloads")]);
    m_downloads_isSet = !json[QString("downloads")].isNull() && m_downloads_isValid;

    m_forks_isValid = ::OpenAPI::fromJsonValue(m_forks, json[QString("forks")]);
    m_forks_isSet = !json[QString("forks")].isNull() && m_forks_isValid;

    m_hooks_isValid = ::OpenAPI::fromJsonValue(m_hooks, json[QString("hooks")]);
    m_hooks_isSet = !json[QString("hooks")].isNull() && m_hooks_isValid;

    m_html_isValid = ::OpenAPI::fromJsonValue(m_html, json[QString("html")]);
    m_html_isSet = !json[QString("html")].isNull() && m_html_isValid;

    m_pullrequests_isValid = ::OpenAPI::fromJsonValue(m_pullrequests, json[QString("pullrequests")]);
    m_pullrequests_isSet = !json[QString("pullrequests")].isNull() && m_pullrequests_isValid;

    m_self_isValid = ::OpenAPI::fromJsonValue(m_self, json[QString("self")]);
    m_self_isSet = !json[QString("self")].isNull() && m_self_isValid;

    m_watchers_isValid = ::OpenAPI::fromJsonValue(m_watchers, json[QString("watchers")]);
    m_watchers_isSet = !json[QString("watchers")].isNull() && m_watchers_isValid;
}

QString OAIRepository_links::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRepository_links::asJsonObject() const {
    QJsonObject obj;
    if (m_avatar.isSet()) {
        obj.insert(QString("avatar"), ::OpenAPI::toJsonValue(m_avatar));
    }
    if (m_clone.size() > 0) {
        obj.insert(QString("clone"), ::OpenAPI::toJsonValue(m_clone));
    }
    if (m_commits.isSet()) {
        obj.insert(QString("commits"), ::OpenAPI::toJsonValue(m_commits));
    }
    if (m_downloads.isSet()) {
        obj.insert(QString("downloads"), ::OpenAPI::toJsonValue(m_downloads));
    }
    if (m_forks.isSet()) {
        obj.insert(QString("forks"), ::OpenAPI::toJsonValue(m_forks));
    }
    if (m_hooks.isSet()) {
        obj.insert(QString("hooks"), ::OpenAPI::toJsonValue(m_hooks));
    }
    if (m_html.isSet()) {
        obj.insert(QString("html"), ::OpenAPI::toJsonValue(m_html));
    }
    if (m_pullrequests.isSet()) {
        obj.insert(QString("pullrequests"), ::OpenAPI::toJsonValue(m_pullrequests));
    }
    if (m_self.isSet()) {
        obj.insert(QString("self"), ::OpenAPI::toJsonValue(m_self));
    }
    if (m_watchers.isSet()) {
        obj.insert(QString("watchers"), ::OpenAPI::toJsonValue(m_watchers));
    }
    return obj;
}

OAILink OAIRepository_links::getAvatar() const {
    return m_avatar;
}
void OAIRepository_links::setAvatar(const OAILink &avatar) {
    m_avatar = avatar;
    m_avatar_isSet = true;
}

bool OAIRepository_links::is_avatar_Set() const{
    return m_avatar_isSet;
}

bool OAIRepository_links::is_avatar_Valid() const{
    return m_avatar_isValid;
}

QList<OAILink> OAIRepository_links::getClone() const {
    return m_clone;
}
void OAIRepository_links::setClone(const QList<OAILink> &clone) {
    m_clone = clone;
    m_clone_isSet = true;
}

bool OAIRepository_links::is_clone_Set() const{
    return m_clone_isSet;
}

bool OAIRepository_links::is_clone_Valid() const{
    return m_clone_isValid;
}

OAILink OAIRepository_links::getCommits() const {
    return m_commits;
}
void OAIRepository_links::setCommits(const OAILink &commits) {
    m_commits = commits;
    m_commits_isSet = true;
}

bool OAIRepository_links::is_commits_Set() const{
    return m_commits_isSet;
}

bool OAIRepository_links::is_commits_Valid() const{
    return m_commits_isValid;
}

OAILink OAIRepository_links::getDownloads() const {
    return m_downloads;
}
void OAIRepository_links::setDownloads(const OAILink &downloads) {
    m_downloads = downloads;
    m_downloads_isSet = true;
}

bool OAIRepository_links::is_downloads_Set() const{
    return m_downloads_isSet;
}

bool OAIRepository_links::is_downloads_Valid() const{
    return m_downloads_isValid;
}

OAILink OAIRepository_links::getForks() const {
    return m_forks;
}
void OAIRepository_links::setForks(const OAILink &forks) {
    m_forks = forks;
    m_forks_isSet = true;
}

bool OAIRepository_links::is_forks_Set() const{
    return m_forks_isSet;
}

bool OAIRepository_links::is_forks_Valid() const{
    return m_forks_isValid;
}

OAILink OAIRepository_links::getHooks() const {
    return m_hooks;
}
void OAIRepository_links::setHooks(const OAILink &hooks) {
    m_hooks = hooks;
    m_hooks_isSet = true;
}

bool OAIRepository_links::is_hooks_Set() const{
    return m_hooks_isSet;
}

bool OAIRepository_links::is_hooks_Valid() const{
    return m_hooks_isValid;
}

OAILink OAIRepository_links::getHtml() const {
    return m_html;
}
void OAIRepository_links::setHtml(const OAILink &html) {
    m_html = html;
    m_html_isSet = true;
}

bool OAIRepository_links::is_html_Set() const{
    return m_html_isSet;
}

bool OAIRepository_links::is_html_Valid() const{
    return m_html_isValid;
}

OAILink OAIRepository_links::getPullrequests() const {
    return m_pullrequests;
}
void OAIRepository_links::setPullrequests(const OAILink &pullrequests) {
    m_pullrequests = pullrequests;
    m_pullrequests_isSet = true;
}

bool OAIRepository_links::is_pullrequests_Set() const{
    return m_pullrequests_isSet;
}

bool OAIRepository_links::is_pullrequests_Valid() const{
    return m_pullrequests_isValid;
}

OAILink OAIRepository_links::getSelf() const {
    return m_self;
}
void OAIRepository_links::setSelf(const OAILink &self) {
    m_self = self;
    m_self_isSet = true;
}

bool OAIRepository_links::is_self_Set() const{
    return m_self_isSet;
}

bool OAIRepository_links::is_self_Valid() const{
    return m_self_isValid;
}

OAILink OAIRepository_links::getWatchers() const {
    return m_watchers;
}
void OAIRepository_links::setWatchers(const OAILink &watchers) {
    m_watchers = watchers;
    m_watchers_isSet = true;
}

bool OAIRepository_links::is_watchers_Set() const{
    return m_watchers_isSet;
}

bool OAIRepository_links::is_watchers_Valid() const{
    return m_watchers_isValid;
}

bool OAIRepository_links::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_avatar.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_clone.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_commits.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_downloads.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_forks.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_hooks.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_html.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_pullrequests.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_self.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_watchers.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRepository_links::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
