/**
 * Bitbucket API
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@bitbucket.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeploy_key.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeploy_key::OAIDeploy_key(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeploy_key::OAIDeploy_key() {
    this->initializeModel();
}

OAIDeploy_key::~OAIDeploy_key() {}

void OAIDeploy_key::initializeModel() {

    m_type_isSet = false;
    m_type_isValid = false;

    m_added_on_isSet = false;
    m_added_on_isValid = false;

    m_comment_isSet = false;
    m_comment_isValid = false;

    m_key_isSet = false;
    m_key_isValid = false;

    m_label_isSet = false;
    m_label_isValid = false;

    m_last_used_isSet = false;
    m_last_used_isValid = false;

    m_links_isSet = false;
    m_links_isValid = false;

    m_owner_isSet = false;
    m_owner_isValid = false;

    m_repository_isSet = false;
    m_repository_isValid = false;
}

void OAIDeploy_key::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeploy_key::fromJsonObject(QJsonObject json) {

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_added_on_isValid = ::OpenAPI::fromJsonValue(m_added_on, json[QString("added_on")]);
    m_added_on_isSet = !json[QString("added_on")].isNull() && m_added_on_isValid;

    m_comment_isValid = ::OpenAPI::fromJsonValue(m_comment, json[QString("comment")]);
    m_comment_isSet = !json[QString("comment")].isNull() && m_comment_isValid;

    m_key_isValid = ::OpenAPI::fromJsonValue(m_key, json[QString("key")]);
    m_key_isSet = !json[QString("key")].isNull() && m_key_isValid;

    m_label_isValid = ::OpenAPI::fromJsonValue(m_label, json[QString("label")]);
    m_label_isSet = !json[QString("label")].isNull() && m_label_isValid;

    m_last_used_isValid = ::OpenAPI::fromJsonValue(m_last_used, json[QString("last_used")]);
    m_last_used_isSet = !json[QString("last_used")].isNull() && m_last_used_isValid;

    m_links_isValid = ::OpenAPI::fromJsonValue(m_links, json[QString("links")]);
    m_links_isSet = !json[QString("links")].isNull() && m_links_isValid;

    m_owner_isValid = ::OpenAPI::fromJsonValue(m_owner, json[QString("owner")]);
    m_owner_isSet = !json[QString("owner")].isNull() && m_owner_isValid;

    m_repository_isValid = ::OpenAPI::fromJsonValue(m_repository, json[QString("repository")]);
    m_repository_isSet = !json[QString("repository")].isNull() && m_repository_isValid;
}

QString OAIDeploy_key::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeploy_key::asJsonObject() const {
    QJsonObject obj;
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_added_on_isSet) {
        obj.insert(QString("added_on"), ::OpenAPI::toJsonValue(m_added_on));
    }
    if (m_comment_isSet) {
        obj.insert(QString("comment"), ::OpenAPI::toJsonValue(m_comment));
    }
    if (m_key_isSet) {
        obj.insert(QString("key"), ::OpenAPI::toJsonValue(m_key));
    }
    if (m_label_isSet) {
        obj.insert(QString("label"), ::OpenAPI::toJsonValue(m_label));
    }
    if (m_last_used_isSet) {
        obj.insert(QString("last_used"), ::OpenAPI::toJsonValue(m_last_used));
    }
    if (m_links.isSet()) {
        obj.insert(QString("links"), ::OpenAPI::toJsonValue(m_links));
    }
    if (m_owner.isSet()) {
        obj.insert(QString("owner"), ::OpenAPI::toJsonValue(m_owner));
    }
    if (m_repository.isSet()) {
        obj.insert(QString("repository"), ::OpenAPI::toJsonValue(m_repository));
    }
    return obj;
}

QString OAIDeploy_key::getType() const {
    return m_type;
}
void OAIDeploy_key::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIDeploy_key::is_type_Set() const{
    return m_type_isSet;
}

bool OAIDeploy_key::is_type_Valid() const{
    return m_type_isValid;
}

QDateTime OAIDeploy_key::getAddedOn() const {
    return m_added_on;
}
void OAIDeploy_key::setAddedOn(const QDateTime &added_on) {
    m_added_on = added_on;
    m_added_on_isSet = true;
}

bool OAIDeploy_key::is_added_on_Set() const{
    return m_added_on_isSet;
}

bool OAIDeploy_key::is_added_on_Valid() const{
    return m_added_on_isValid;
}

QString OAIDeploy_key::getComment() const {
    return m_comment;
}
void OAIDeploy_key::setComment(const QString &comment) {
    m_comment = comment;
    m_comment_isSet = true;
}

bool OAIDeploy_key::is_comment_Set() const{
    return m_comment_isSet;
}

bool OAIDeploy_key::is_comment_Valid() const{
    return m_comment_isValid;
}

QString OAIDeploy_key::getKey() const {
    return m_key;
}
void OAIDeploy_key::setKey(const QString &key) {
    m_key = key;
    m_key_isSet = true;
}

bool OAIDeploy_key::is_key_Set() const{
    return m_key_isSet;
}

bool OAIDeploy_key::is_key_Valid() const{
    return m_key_isValid;
}

QString OAIDeploy_key::getLabel() const {
    return m_label;
}
void OAIDeploy_key::setLabel(const QString &label) {
    m_label = label;
    m_label_isSet = true;
}

bool OAIDeploy_key::is_label_Set() const{
    return m_label_isSet;
}

bool OAIDeploy_key::is_label_Valid() const{
    return m_label_isValid;
}

QDateTime OAIDeploy_key::getLastUsed() const {
    return m_last_used;
}
void OAIDeploy_key::setLastUsed(const QDateTime &last_used) {
    m_last_used = last_used;
    m_last_used_isSet = true;
}

bool OAIDeploy_key::is_last_used_Set() const{
    return m_last_used_isSet;
}

bool OAIDeploy_key::is_last_used_Valid() const{
    return m_last_used_isValid;
}

OAIBranching_Model_Settings_links OAIDeploy_key::getLinks() const {
    return m_links;
}
void OAIDeploy_key::setLinks(const OAIBranching_Model_Settings_links &links) {
    m_links = links;
    m_links_isSet = true;
}

bool OAIDeploy_key::is_links_Set() const{
    return m_links_isSet;
}

bool OAIDeploy_key::is_links_Valid() const{
    return m_links_isValid;
}

OAIAccount OAIDeploy_key::getOwner() const {
    return m_owner;
}
void OAIDeploy_key::setOwner(const OAIAccount &owner) {
    m_owner = owner;
    m_owner_isSet = true;
}

bool OAIDeploy_key::is_owner_Set() const{
    return m_owner_isSet;
}

bool OAIDeploy_key::is_owner_Valid() const{
    return m_owner_isValid;
}

OAIRepository OAIDeploy_key::getRepository() const {
    return m_repository;
}
void OAIDeploy_key::setRepository(const OAIRepository &repository) {
    m_repository = repository;
    m_repository_isSet = true;
}

bool OAIDeploy_key::is_repository_Set() const{
    return m_repository_isSet;
}

bool OAIDeploy_key::is_repository_Valid() const{
    return m_repository_isValid;
}

bool OAIDeploy_key::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_added_on_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_comment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_used_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_links.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_repository.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeploy_key::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_type_isValid && true;
}

} // namespace OpenAPI
