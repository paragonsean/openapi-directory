/**
 * Bitbucket API
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@bitbucket.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAISearchApi_H
#define OAI_OAISearchApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIError.h"
#include "OAISearch_result_page.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAISearchApi : public QObject {
    Q_OBJECT

public:
    OAISearchApi(const int timeOut = 0);
    ~OAISearchApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  selected_user QString [required]
    * @param[in]  search_query QString [required]
    * @param[in]  page qint32 [optional]
    * @param[in]  pagelen qint32 [optional]
    */
    virtual void searchAccount(const QString &selected_user, const QString &search_query, const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &pagelen = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  username QString [required]
    * @param[in]  search_query QString [required]
    * @param[in]  page qint32 [optional]
    * @param[in]  pagelen qint32 [optional]
    */
    virtual void searchTeam(const QString &username, const QString &search_query, const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &pagelen = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  workspace QString [required]
    * @param[in]  search_query QString [required]
    * @param[in]  page qint32 [optional]
    * @param[in]  pagelen qint32 [optional]
    */
    virtual void searchWorkspace(const QString &workspace, const QString &search_query, const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &pagelen = ::OpenAPI::OptionalParam<qint32>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void searchAccountCallback(OAIHttpRequestWorker *worker);
    void searchTeamCallback(OAIHttpRequestWorker *worker);
    void searchWorkspaceCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void searchAccountSignal(OAISearch_result_page summary);
    void searchTeamSignal(OAISearch_result_page summary);
    void searchWorkspaceSignal(OAISearch_result_page summary);


    void searchAccountSignalFull(OAIHttpRequestWorker *worker, OAISearch_result_page summary);
    void searchTeamSignalFull(OAIHttpRequestWorker *worker, OAISearch_result_page summary);
    void searchWorkspaceSignalFull(OAIHttpRequestWorker *worker, OAISearch_result_page summary);

    Q_DECL_DEPRECATED_X("Use searchAccountSignalError() instead")
    void searchAccountSignalE(OAISearch_result_page summary, QNetworkReply::NetworkError error_type, QString error_str);
    void searchAccountSignalError(OAISearch_result_page summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchTeamSignalError() instead")
    void searchTeamSignalE(OAISearch_result_page summary, QNetworkReply::NetworkError error_type, QString error_str);
    void searchTeamSignalError(OAISearch_result_page summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchWorkspaceSignalError() instead")
    void searchWorkspaceSignalE(OAISearch_result_page summary, QNetworkReply::NetworkError error_type, QString error_str);
    void searchWorkspaceSignalError(OAISearch_result_page summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use searchAccountSignalErrorFull() instead")
    void searchAccountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void searchAccountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchTeamSignalErrorFull() instead")
    void searchTeamSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void searchTeamSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchWorkspaceSignalErrorFull() instead")
    void searchWorkspaceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void searchWorkspaceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
