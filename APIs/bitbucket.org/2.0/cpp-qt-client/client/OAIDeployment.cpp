/**
 * Bitbucket API
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@bitbucket.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeployment.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeployment::OAIDeployment(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeployment::OAIDeployment() {
    this->initializeModel();
}

OAIDeployment::~OAIDeployment() {}

void OAIDeployment::initializeModel() {

    m_type_isSet = false;
    m_type_isValid = false;

    m_environment_isSet = false;
    m_environment_isValid = false;

    m_release_isSet = false;
    m_release_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_uuid_isSet = false;
    m_uuid_isValid = false;
}

void OAIDeployment::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeployment::fromJsonObject(QJsonObject json) {

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_environment_isValid = ::OpenAPI::fromJsonValue(m_environment, json[QString("environment")]);
    m_environment_isSet = !json[QString("environment")].isNull() && m_environment_isValid;

    m_release_isValid = ::OpenAPI::fromJsonValue(m_release, json[QString("release")]);
    m_release_isSet = !json[QString("release")].isNull() && m_release_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_uuid_isValid = ::OpenAPI::fromJsonValue(m_uuid, json[QString("uuid")]);
    m_uuid_isSet = !json[QString("uuid")].isNull() && m_uuid_isValid;
}

QString OAIDeployment::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeployment::asJsonObject() const {
    QJsonObject obj;
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_environment.isSet()) {
        obj.insert(QString("environment"), ::OpenAPI::toJsonValue(m_environment));
    }
    if (m_release.isSet()) {
        obj.insert(QString("release"), ::OpenAPI::toJsonValue(m_release));
    }
    if (m_state.isSet()) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_uuid_isSet) {
        obj.insert(QString("uuid"), ::OpenAPI::toJsonValue(m_uuid));
    }
    return obj;
}

QString OAIDeployment::getType() const {
    return m_type;
}
void OAIDeployment::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIDeployment::is_type_Set() const{
    return m_type_isSet;
}

bool OAIDeployment::is_type_Valid() const{
    return m_type_isValid;
}

OAIDeployment_environment OAIDeployment::getEnvironment() const {
    return m_environment;
}
void OAIDeployment::setEnvironment(const OAIDeployment_environment &environment) {
    m_environment = environment;
    m_environment_isSet = true;
}

bool OAIDeployment::is_environment_Set() const{
    return m_environment_isSet;
}

bool OAIDeployment::is_environment_Valid() const{
    return m_environment_isValid;
}

OAIDeployment_release OAIDeployment::getRelease() const {
    return m_release;
}
void OAIDeployment::setRelease(const OAIDeployment_release &release) {
    m_release = release;
    m_release_isSet = true;
}

bool OAIDeployment::is_release_Set() const{
    return m_release_isSet;
}

bool OAIDeployment::is_release_Valid() const{
    return m_release_isValid;
}

OAIDeployment_state OAIDeployment::getState() const {
    return m_state;
}
void OAIDeployment::setState(const OAIDeployment_state &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIDeployment::is_state_Set() const{
    return m_state_isSet;
}

bool OAIDeployment::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIDeployment::getUuid() const {
    return m_uuid;
}
void OAIDeployment::setUuid(const QString &uuid) {
    m_uuid = uuid;
    m_uuid_isSet = true;
}

bool OAIDeployment::is_uuid_Set() const{
    return m_uuid_isSet;
}

bool OAIDeployment::is_uuid_Valid() const{
    return m_uuid_isValid;
}

bool OAIDeployment::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_environment.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_release.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_uuid_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeployment::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_type_isValid && true;
}

} // namespace OpenAPI
