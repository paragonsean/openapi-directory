/**
 * Bitbucket API
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@bitbucket.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICommit_Status_links.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICommit_Status_links::OAICommit_Status_links(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICommit_Status_links::OAICommit_Status_links() {
    this->initializeModel();
}

OAICommit_Status_links::~OAICommit_Status_links() {}

void OAICommit_Status_links::initializeModel() {

    m_commit_isSet = false;
    m_commit_isValid = false;

    m_self_isSet = false;
    m_self_isValid = false;
}

void OAICommit_Status_links::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICommit_Status_links::fromJsonObject(QJsonObject json) {

    m_commit_isValid = ::OpenAPI::fromJsonValue(m_commit, json[QString("commit")]);
    m_commit_isSet = !json[QString("commit")].isNull() && m_commit_isValid;

    m_self_isValid = ::OpenAPI::fromJsonValue(m_self, json[QString("self")]);
    m_self_isSet = !json[QString("self")].isNull() && m_self_isValid;
}

QString OAICommit_Status_links::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICommit_Status_links::asJsonObject() const {
    QJsonObject obj;
    if (m_commit.isSet()) {
        obj.insert(QString("commit"), ::OpenAPI::toJsonValue(m_commit));
    }
    if (m_self.isSet()) {
        obj.insert(QString("self"), ::OpenAPI::toJsonValue(m_self));
    }
    return obj;
}

OAILink OAICommit_Status_links::getCommit() const {
    return m_commit;
}
void OAICommit_Status_links::setCommit(const OAILink &commit) {
    m_commit = commit;
    m_commit_isSet = true;
}

bool OAICommit_Status_links::is_commit_Set() const{
    return m_commit_isSet;
}

bool OAICommit_Status_links::is_commit_Valid() const{
    return m_commit_isValid;
}

OAILink OAICommit_Status_links::getSelf() const {
    return m_self;
}
void OAICommit_Status_links::setSelf(const OAILink &self) {
    m_self = self;
    m_self_isSet = true;
}

bool OAICommit_Status_links::is_self_Set() const{
    return m_self_isSet;
}

bool OAICommit_Status_links::is_self_Valid() const{
    return m_self_isValid;
}

bool OAICommit_Status_links::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_commit.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_self.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICommit_Status_links::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
