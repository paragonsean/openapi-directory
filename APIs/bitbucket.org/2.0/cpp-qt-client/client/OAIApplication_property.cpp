/**
 * Bitbucket API
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@bitbucket.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApplication_property.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApplication_property::OAIApplication_property(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApplication_property::OAIApplication_property() {
    this->initializeModel();
}

OAIApplication_property::~OAIApplication_property() {}

void OAIApplication_property::initializeModel() {

    m__attributes_isSet = false;
    m__attributes_isValid = false;
}

void OAIApplication_property::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApplication_property::fromJsonObject(QJsonObject json) {

    m__attributes_isValid = ::OpenAPI::fromJsonValue(m__attributes, json[QString("_attributes")]);
    m__attributes_isSet = !json[QString("_attributes")].isNull() && m__attributes_isValid;
}

QString OAIApplication_property::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApplication_property::asJsonObject() const {
    QJsonObject obj;
    if (m__attributes.size() > 0) {
        obj.insert(QString("_attributes"), ::OpenAPI::toJsonValue(m__attributes));
    }
    return obj;
}

QList<QString> OAIApplication_property::getAttributes() const {
    return m__attributes;
}
void OAIApplication_property::setAttributes(const QList<QString> &_attributes) {
    m__attributes = _attributes;
    m__attributes_isSet = true;
}

bool OAIApplication_property::is__attributes_Set() const{
    return m__attributes_isSet;
}

bool OAIApplication_property::is__attributes_Valid() const{
    return m__attributes_isValid;
}

bool OAIApplication_property::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m__attributes.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApplication_property::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
