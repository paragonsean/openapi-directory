/**
 * Bitbucket API
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@bitbucket.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeployment_state_completed.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeployment_state_completed::OAIDeployment_state_completed(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeployment_state_completed::OAIDeployment_state_completed() {
    this->initializeModel();
}

OAIDeployment_state_completed::~OAIDeployment_state_completed() {}

void OAIDeployment_state_completed::initializeModel() {

    m_type_isSet = false;
    m_type_isValid = false;

    m_completion_date_isSet = false;
    m_completion_date_isValid = false;

    m_deployer_isSet = false;
    m_deployer_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_start_date_isSet = false;
    m_start_date_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIDeployment_state_completed::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeployment_state_completed::fromJsonObject(QJsonObject json) {

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_completion_date_isValid = ::OpenAPI::fromJsonValue(m_completion_date, json[QString("completion_date")]);
    m_completion_date_isSet = !json[QString("completion_date")].isNull() && m_completion_date_isValid;

    m_deployer_isValid = ::OpenAPI::fromJsonValue(m_deployer, json[QString("deployer")]);
    m_deployer_isSet = !json[QString("deployer")].isNull() && m_deployer_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_start_date_isValid = ::OpenAPI::fromJsonValue(m_start_date, json[QString("start_date")]);
    m_start_date_isSet = !json[QString("start_date")].isNull() && m_start_date_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIDeployment_state_completed::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeployment_state_completed::asJsonObject() const {
    QJsonObject obj;
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_completion_date_isSet) {
        obj.insert(QString("completion_date"), ::OpenAPI::toJsonValue(m_completion_date));
    }
    if (m_deployer.isSet()) {
        obj.insert(QString("deployer"), ::OpenAPI::toJsonValue(m_deployer));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_start_date_isSet) {
        obj.insert(QString("start_date"), ::OpenAPI::toJsonValue(m_start_date));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QString OAIDeployment_state_completed::getType() const {
    return m_type;
}
void OAIDeployment_state_completed::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIDeployment_state_completed::is_type_Set() const{
    return m_type_isSet;
}

bool OAIDeployment_state_completed::is_type_Valid() const{
    return m_type_isValid;
}

QDateTime OAIDeployment_state_completed::getCompletionDate() const {
    return m_completion_date;
}
void OAIDeployment_state_completed::setCompletionDate(const QDateTime &completion_date) {
    m_completion_date = completion_date;
    m_completion_date_isSet = true;
}

bool OAIDeployment_state_completed::is_completion_date_Set() const{
    return m_completion_date_isSet;
}

bool OAIDeployment_state_completed::is_completion_date_Valid() const{
    return m_completion_date_isValid;
}

OAIAccount OAIDeployment_state_completed::getDeployer() const {
    return m_deployer;
}
void OAIDeployment_state_completed::setDeployer(const OAIAccount &deployer) {
    m_deployer = deployer;
    m_deployer_isSet = true;
}

bool OAIDeployment_state_completed::is_deployer_Set() const{
    return m_deployer_isSet;
}

bool OAIDeployment_state_completed::is_deployer_Valid() const{
    return m_deployer_isValid;
}

QString OAIDeployment_state_completed::getName() const {
    return m_name;
}
void OAIDeployment_state_completed::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIDeployment_state_completed::is_name_Set() const{
    return m_name_isSet;
}

bool OAIDeployment_state_completed::is_name_Valid() const{
    return m_name_isValid;
}

QDateTime OAIDeployment_state_completed::getStartDate() const {
    return m_start_date;
}
void OAIDeployment_state_completed::setStartDate(const QDateTime &start_date) {
    m_start_date = start_date;
    m_start_date_isSet = true;
}

bool OAIDeployment_state_completed::is_start_date_Set() const{
    return m_start_date_isSet;
}

bool OAIDeployment_state_completed::is_start_date_Valid() const{
    return m_start_date_isValid;
}

OAIDeployment_state_completed_status OAIDeployment_state_completed::getStatus() const {
    return m_status;
}
void OAIDeployment_state_completed::setStatus(const OAIDeployment_state_completed_status &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIDeployment_state_completed::is_status_Set() const{
    return m_status_isSet;
}

bool OAIDeployment_state_completed::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIDeployment_state_completed::getUrl() const {
    return m_url;
}
void OAIDeployment_state_completed::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIDeployment_state_completed::is_url_Set() const{
    return m_url_isSet;
}

bool OAIDeployment_state_completed::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIDeployment_state_completed::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_completion_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deployer.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeployment_state_completed::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_type_isValid && true;
}

} // namespace OpenAPI
