/**
 * Bitbucket API
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@bitbucket.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPipeline_schedule.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPipeline_schedule::OAIPipeline_schedule(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPipeline_schedule::OAIPipeline_schedule() {
    this->initializeModel();
}

OAIPipeline_schedule::~OAIPipeline_schedule() {}

void OAIPipeline_schedule::initializeModel() {

    m_type_isSet = false;
    m_type_isValid = false;

    m_created_on_isSet = false;
    m_created_on_isValid = false;

    m_cron_pattern_isSet = false;
    m_cron_pattern_isValid = false;

    m_enabled_isSet = false;
    m_enabled_isValid = false;

    m_target_isSet = false;
    m_target_isValid = false;

    m_updated_on_isSet = false;
    m_updated_on_isValid = false;

    m_uuid_isSet = false;
    m_uuid_isValid = false;
}

void OAIPipeline_schedule::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPipeline_schedule::fromJsonObject(QJsonObject json) {

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_created_on_isValid = ::OpenAPI::fromJsonValue(m_created_on, json[QString("created_on")]);
    m_created_on_isSet = !json[QString("created_on")].isNull() && m_created_on_isValid;

    m_cron_pattern_isValid = ::OpenAPI::fromJsonValue(m_cron_pattern, json[QString("cron_pattern")]);
    m_cron_pattern_isSet = !json[QString("cron_pattern")].isNull() && m_cron_pattern_isValid;

    m_enabled_isValid = ::OpenAPI::fromJsonValue(m_enabled, json[QString("enabled")]);
    m_enabled_isSet = !json[QString("enabled")].isNull() && m_enabled_isValid;

    m_target_isValid = ::OpenAPI::fromJsonValue(m_target, json[QString("target")]);
    m_target_isSet = !json[QString("target")].isNull() && m_target_isValid;

    m_updated_on_isValid = ::OpenAPI::fromJsonValue(m_updated_on, json[QString("updated_on")]);
    m_updated_on_isSet = !json[QString("updated_on")].isNull() && m_updated_on_isValid;

    m_uuid_isValid = ::OpenAPI::fromJsonValue(m_uuid, json[QString("uuid")]);
    m_uuid_isSet = !json[QString("uuid")].isNull() && m_uuid_isValid;
}

QString OAIPipeline_schedule::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPipeline_schedule::asJsonObject() const {
    QJsonObject obj;
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_created_on_isSet) {
        obj.insert(QString("created_on"), ::OpenAPI::toJsonValue(m_created_on));
    }
    if (m_cron_pattern_isSet) {
        obj.insert(QString("cron_pattern"), ::OpenAPI::toJsonValue(m_cron_pattern));
    }
    if (m_enabled_isSet) {
        obj.insert(QString("enabled"), ::OpenAPI::toJsonValue(m_enabled));
    }
    if (m_target.isSet()) {
        obj.insert(QString("target"), ::OpenAPI::toJsonValue(m_target));
    }
    if (m_updated_on_isSet) {
        obj.insert(QString("updated_on"), ::OpenAPI::toJsonValue(m_updated_on));
    }
    if (m_uuid_isSet) {
        obj.insert(QString("uuid"), ::OpenAPI::toJsonValue(m_uuid));
    }
    return obj;
}

QString OAIPipeline_schedule::getType() const {
    return m_type;
}
void OAIPipeline_schedule::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIPipeline_schedule::is_type_Set() const{
    return m_type_isSet;
}

bool OAIPipeline_schedule::is_type_Valid() const{
    return m_type_isValid;
}

QDateTime OAIPipeline_schedule::getCreatedOn() const {
    return m_created_on;
}
void OAIPipeline_schedule::setCreatedOn(const QDateTime &created_on) {
    m_created_on = created_on;
    m_created_on_isSet = true;
}

bool OAIPipeline_schedule::is_created_on_Set() const{
    return m_created_on_isSet;
}

bool OAIPipeline_schedule::is_created_on_Valid() const{
    return m_created_on_isValid;
}

QString OAIPipeline_schedule::getCronPattern() const {
    return m_cron_pattern;
}
void OAIPipeline_schedule::setCronPattern(const QString &cron_pattern) {
    m_cron_pattern = cron_pattern;
    m_cron_pattern_isSet = true;
}

bool OAIPipeline_schedule::is_cron_pattern_Set() const{
    return m_cron_pattern_isSet;
}

bool OAIPipeline_schedule::is_cron_pattern_Valid() const{
    return m_cron_pattern_isValid;
}

bool OAIPipeline_schedule::isEnabled() const {
    return m_enabled;
}
void OAIPipeline_schedule::setEnabled(const bool &enabled) {
    m_enabled = enabled;
    m_enabled_isSet = true;
}

bool OAIPipeline_schedule::is_enabled_Set() const{
    return m_enabled_isSet;
}

bool OAIPipeline_schedule::is_enabled_Valid() const{
    return m_enabled_isValid;
}

OAIPipeline_ref_target OAIPipeline_schedule::getTarget() const {
    return m_target;
}
void OAIPipeline_schedule::setTarget(const OAIPipeline_ref_target &target) {
    m_target = target;
    m_target_isSet = true;
}

bool OAIPipeline_schedule::is_target_Set() const{
    return m_target_isSet;
}

bool OAIPipeline_schedule::is_target_Valid() const{
    return m_target_isValid;
}

QDateTime OAIPipeline_schedule::getUpdatedOn() const {
    return m_updated_on;
}
void OAIPipeline_schedule::setUpdatedOn(const QDateTime &updated_on) {
    m_updated_on = updated_on;
    m_updated_on_isSet = true;
}

bool OAIPipeline_schedule::is_updated_on_Set() const{
    return m_updated_on_isSet;
}

bool OAIPipeline_schedule::is_updated_on_Valid() const{
    return m_updated_on_isValid;
}

QString OAIPipeline_schedule::getUuid() const {
    return m_uuid;
}
void OAIPipeline_schedule::setUuid(const QString &uuid) {
    m_uuid = uuid;
    m_uuid_isSet = true;
}

bool OAIPipeline_schedule::is_uuid_Set() const{
    return m_uuid_isSet;
}

bool OAIPipeline_schedule::is_uuid_Valid() const{
    return m_uuid_isValid;
}

bool OAIPipeline_schedule::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_on_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cron_pattern_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_on_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uuid_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPipeline_schedule::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_type_isValid && true;
}

} // namespace OpenAPI
