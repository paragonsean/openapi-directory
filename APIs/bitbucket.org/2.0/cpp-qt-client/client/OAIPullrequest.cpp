/**
 * Bitbucket API
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@bitbucket.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPullrequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPullrequest::OAIPullrequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPullrequest::OAIPullrequest() {
    this->initializeModel();
}

OAIPullrequest::~OAIPullrequest() {}

void OAIPullrequest::initializeModel() {

    m_type_isSet = false;
    m_type_isValid = false;

    m_author_isSet = false;
    m_author_isValid = false;

    m_close_source_branch_isSet = false;
    m_close_source_branch_isValid = false;

    m_closed_by_isSet = false;
    m_closed_by_isValid = false;

    m_comment_count_isSet = false;
    m_comment_count_isValid = false;

    m_created_on_isSet = false;
    m_created_on_isValid = false;

    m_destination_isSet = false;
    m_destination_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_links_isSet = false;
    m_links_isValid = false;

    m_merge_commit_isSet = false;
    m_merge_commit_isValid = false;

    m_participants_isSet = false;
    m_participants_isValid = false;

    m_reason_isSet = false;
    m_reason_isValid = false;

    m_rendered_isSet = false;
    m_rendered_isValid = false;

    m_reviewers_isSet = false;
    m_reviewers_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_summary_isSet = false;
    m_summary_isValid = false;

    m_task_count_isSet = false;
    m_task_count_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_updated_on_isSet = false;
    m_updated_on_isValid = false;
}

void OAIPullrequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPullrequest::fromJsonObject(QJsonObject json) {

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_author_isValid = ::OpenAPI::fromJsonValue(m_author, json[QString("author")]);
    m_author_isSet = !json[QString("author")].isNull() && m_author_isValid;

    m_close_source_branch_isValid = ::OpenAPI::fromJsonValue(m_close_source_branch, json[QString("close_source_branch")]);
    m_close_source_branch_isSet = !json[QString("close_source_branch")].isNull() && m_close_source_branch_isValid;

    m_closed_by_isValid = ::OpenAPI::fromJsonValue(m_closed_by, json[QString("closed_by")]);
    m_closed_by_isSet = !json[QString("closed_by")].isNull() && m_closed_by_isValid;

    m_comment_count_isValid = ::OpenAPI::fromJsonValue(m_comment_count, json[QString("comment_count")]);
    m_comment_count_isSet = !json[QString("comment_count")].isNull() && m_comment_count_isValid;

    m_created_on_isValid = ::OpenAPI::fromJsonValue(m_created_on, json[QString("created_on")]);
    m_created_on_isSet = !json[QString("created_on")].isNull() && m_created_on_isValid;

    m_destination_isValid = ::OpenAPI::fromJsonValue(m_destination, json[QString("destination")]);
    m_destination_isSet = !json[QString("destination")].isNull() && m_destination_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_links_isValid = ::OpenAPI::fromJsonValue(m_links, json[QString("links")]);
    m_links_isSet = !json[QString("links")].isNull() && m_links_isValid;

    m_merge_commit_isValid = ::OpenAPI::fromJsonValue(m_merge_commit, json[QString("merge_commit")]);
    m_merge_commit_isSet = !json[QString("merge_commit")].isNull() && m_merge_commit_isValid;

    m_participants_isValid = ::OpenAPI::fromJsonValue(m_participants, json[QString("participants")]);
    m_participants_isSet = !json[QString("participants")].isNull() && m_participants_isValid;

    m_reason_isValid = ::OpenAPI::fromJsonValue(m_reason, json[QString("reason")]);
    m_reason_isSet = !json[QString("reason")].isNull() && m_reason_isValid;

    m_rendered_isValid = ::OpenAPI::fromJsonValue(m_rendered, json[QString("rendered")]);
    m_rendered_isSet = !json[QString("rendered")].isNull() && m_rendered_isValid;

    m_reviewers_isValid = ::OpenAPI::fromJsonValue(m_reviewers, json[QString("reviewers")]);
    m_reviewers_isSet = !json[QString("reviewers")].isNull() && m_reviewers_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("source")]);
    m_source_isSet = !json[QString("source")].isNull() && m_source_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_summary_isValid = ::OpenAPI::fromJsonValue(m_summary, json[QString("summary")]);
    m_summary_isSet = !json[QString("summary")].isNull() && m_summary_isValid;

    m_task_count_isValid = ::OpenAPI::fromJsonValue(m_task_count, json[QString("task_count")]);
    m_task_count_isSet = !json[QString("task_count")].isNull() && m_task_count_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_updated_on_isValid = ::OpenAPI::fromJsonValue(m_updated_on, json[QString("updated_on")]);
    m_updated_on_isSet = !json[QString("updated_on")].isNull() && m_updated_on_isValid;
}

QString OAIPullrequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPullrequest::asJsonObject() const {
    QJsonObject obj;
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_author.isSet()) {
        obj.insert(QString("author"), ::OpenAPI::toJsonValue(m_author));
    }
    if (m_close_source_branch_isSet) {
        obj.insert(QString("close_source_branch"), ::OpenAPI::toJsonValue(m_close_source_branch));
    }
    if (m_closed_by.isSet()) {
        obj.insert(QString("closed_by"), ::OpenAPI::toJsonValue(m_closed_by));
    }
    if (m_comment_count_isSet) {
        obj.insert(QString("comment_count"), ::OpenAPI::toJsonValue(m_comment_count));
    }
    if (m_created_on_isSet) {
        obj.insert(QString("created_on"), ::OpenAPI::toJsonValue(m_created_on));
    }
    if (m_destination.isSet()) {
        obj.insert(QString("destination"), ::OpenAPI::toJsonValue(m_destination));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_links.isSet()) {
        obj.insert(QString("links"), ::OpenAPI::toJsonValue(m_links));
    }
    if (m_merge_commit.isSet()) {
        obj.insert(QString("merge_commit"), ::OpenAPI::toJsonValue(m_merge_commit));
    }
    if (m_participants.size() > 0) {
        obj.insert(QString("participants"), ::OpenAPI::toJsonValue(m_participants));
    }
    if (m_reason_isSet) {
        obj.insert(QString("reason"), ::OpenAPI::toJsonValue(m_reason));
    }
    if (m_rendered.isSet()) {
        obj.insert(QString("rendered"), ::OpenAPI::toJsonValue(m_rendered));
    }
    if (m_reviewers.size() > 0) {
        obj.insert(QString("reviewers"), ::OpenAPI::toJsonValue(m_reviewers));
    }
    if (m_source.isSet()) {
        obj.insert(QString("source"), ::OpenAPI::toJsonValue(m_source));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_summary.isSet()) {
        obj.insert(QString("summary"), ::OpenAPI::toJsonValue(m_summary));
    }
    if (m_task_count_isSet) {
        obj.insert(QString("task_count"), ::OpenAPI::toJsonValue(m_task_count));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_updated_on_isSet) {
        obj.insert(QString("updated_on"), ::OpenAPI::toJsonValue(m_updated_on));
    }
    return obj;
}

QString OAIPullrequest::getType() const {
    return m_type;
}
void OAIPullrequest::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIPullrequest::is_type_Set() const{
    return m_type_isSet;
}

bool OAIPullrequest::is_type_Valid() const{
    return m_type_isValid;
}

OAIAccount OAIPullrequest::getAuthor() const {
    return m_author;
}
void OAIPullrequest::setAuthor(const OAIAccount &author) {
    m_author = author;
    m_author_isSet = true;
}

bool OAIPullrequest::is_author_Set() const{
    return m_author_isSet;
}

bool OAIPullrequest::is_author_Valid() const{
    return m_author_isValid;
}

bool OAIPullrequest::isCloseSourceBranch() const {
    return m_close_source_branch;
}
void OAIPullrequest::setCloseSourceBranch(const bool &close_source_branch) {
    m_close_source_branch = close_source_branch;
    m_close_source_branch_isSet = true;
}

bool OAIPullrequest::is_close_source_branch_Set() const{
    return m_close_source_branch_isSet;
}

bool OAIPullrequest::is_close_source_branch_Valid() const{
    return m_close_source_branch_isValid;
}

OAIAccount OAIPullrequest::getClosedBy() const {
    return m_closed_by;
}
void OAIPullrequest::setClosedBy(const OAIAccount &closed_by) {
    m_closed_by = closed_by;
    m_closed_by_isSet = true;
}

bool OAIPullrequest::is_closed_by_Set() const{
    return m_closed_by_isSet;
}

bool OAIPullrequest::is_closed_by_Valid() const{
    return m_closed_by_isValid;
}

qint32 OAIPullrequest::getCommentCount() const {
    return m_comment_count;
}
void OAIPullrequest::setCommentCount(const qint32 &comment_count) {
    m_comment_count = comment_count;
    m_comment_count_isSet = true;
}

bool OAIPullrequest::is_comment_count_Set() const{
    return m_comment_count_isSet;
}

bool OAIPullrequest::is_comment_count_Valid() const{
    return m_comment_count_isValid;
}

QDateTime OAIPullrequest::getCreatedOn() const {
    return m_created_on;
}
void OAIPullrequest::setCreatedOn(const QDateTime &created_on) {
    m_created_on = created_on;
    m_created_on_isSet = true;
}

bool OAIPullrequest::is_created_on_Set() const{
    return m_created_on_isSet;
}

bool OAIPullrequest::is_created_on_Valid() const{
    return m_created_on_isValid;
}

OAIPullrequest_endpoint OAIPullrequest::getDestination() const {
    return m_destination;
}
void OAIPullrequest::setDestination(const OAIPullrequest_endpoint &destination) {
    m_destination = destination;
    m_destination_isSet = true;
}

bool OAIPullrequest::is_destination_Set() const{
    return m_destination_isSet;
}

bool OAIPullrequest::is_destination_Valid() const{
    return m_destination_isValid;
}

qint32 OAIPullrequest::getId() const {
    return m_id;
}
void OAIPullrequest::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIPullrequest::is_id_Set() const{
    return m_id_isSet;
}

bool OAIPullrequest::is_id_Valid() const{
    return m_id_isValid;
}

OAIPull_Request_links OAIPullrequest::getLinks() const {
    return m_links;
}
void OAIPullrequest::setLinks(const OAIPull_Request_links &links) {
    m_links = links;
    m_links_isSet = true;
}

bool OAIPullrequest::is_links_Set() const{
    return m_links_isSet;
}

bool OAIPullrequest::is_links_Valid() const{
    return m_links_isValid;
}

OAIPull_Request_Commit OAIPullrequest::getMergeCommit() const {
    return m_merge_commit;
}
void OAIPullrequest::setMergeCommit(const OAIPull_Request_Commit &merge_commit) {
    m_merge_commit = merge_commit;
    m_merge_commit_isSet = true;
}

bool OAIPullrequest::is_merge_commit_Set() const{
    return m_merge_commit_isSet;
}

bool OAIPullrequest::is_merge_commit_Valid() const{
    return m_merge_commit_isValid;
}

QList<OAIParticipant> OAIPullrequest::getParticipants() const {
    return m_participants;
}
void OAIPullrequest::setParticipants(const QList<OAIParticipant> &participants) {
    m_participants = participants;
    m_participants_isSet = true;
}

bool OAIPullrequest::is_participants_Set() const{
    return m_participants_isSet;
}

bool OAIPullrequest::is_participants_Valid() const{
    return m_participants_isValid;
}

QString OAIPullrequest::getReason() const {
    return m_reason;
}
void OAIPullrequest::setReason(const QString &reason) {
    m_reason = reason;
    m_reason_isSet = true;
}

bool OAIPullrequest::is_reason_Set() const{
    return m_reason_isSet;
}

bool OAIPullrequest::is_reason_Valid() const{
    return m_reason_isValid;
}

OAIRendered_Pull_Request_Markup OAIPullrequest::getRendered() const {
    return m_rendered;
}
void OAIPullrequest::setRendered(const OAIRendered_Pull_Request_Markup &rendered) {
    m_rendered = rendered;
    m_rendered_isSet = true;
}

bool OAIPullrequest::is_rendered_Set() const{
    return m_rendered_isSet;
}

bool OAIPullrequest::is_rendered_Valid() const{
    return m_rendered_isValid;
}

QList<OAIAccount> OAIPullrequest::getReviewers() const {
    return m_reviewers;
}
void OAIPullrequest::setReviewers(const QList<OAIAccount> &reviewers) {
    m_reviewers = reviewers;
    m_reviewers_isSet = true;
}

bool OAIPullrequest::is_reviewers_Set() const{
    return m_reviewers_isSet;
}

bool OAIPullrequest::is_reviewers_Valid() const{
    return m_reviewers_isValid;
}

OAIPullrequest_endpoint OAIPullrequest::getSource() const {
    return m_source;
}
void OAIPullrequest::setSource(const OAIPullrequest_endpoint &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAIPullrequest::is_source_Set() const{
    return m_source_isSet;
}

bool OAIPullrequest::is_source_Valid() const{
    return m_source_isValid;
}

QString OAIPullrequest::getState() const {
    return m_state;
}
void OAIPullrequest::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIPullrequest::is_state_Set() const{
    return m_state_isSet;
}

bool OAIPullrequest::is_state_Valid() const{
    return m_state_isValid;
}

OAIBase_Commit_summary OAIPullrequest::getSummary() const {
    return m_summary;
}
void OAIPullrequest::setSummary(const OAIBase_Commit_summary &summary) {
    m_summary = summary;
    m_summary_isSet = true;
}

bool OAIPullrequest::is_summary_Set() const{
    return m_summary_isSet;
}

bool OAIPullrequest::is_summary_Valid() const{
    return m_summary_isValid;
}

qint32 OAIPullrequest::getTaskCount() const {
    return m_task_count;
}
void OAIPullrequest::setTaskCount(const qint32 &task_count) {
    m_task_count = task_count;
    m_task_count_isSet = true;
}

bool OAIPullrequest::is_task_count_Set() const{
    return m_task_count_isSet;
}

bool OAIPullrequest::is_task_count_Valid() const{
    return m_task_count_isValid;
}

QString OAIPullrequest::getTitle() const {
    return m_title;
}
void OAIPullrequest::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIPullrequest::is_title_Set() const{
    return m_title_isSet;
}

bool OAIPullrequest::is_title_Valid() const{
    return m_title_isValid;
}

QDateTime OAIPullrequest::getUpdatedOn() const {
    return m_updated_on;
}
void OAIPullrequest::setUpdatedOn(const QDateTime &updated_on) {
    m_updated_on = updated_on;
    m_updated_on_isSet = true;
}

bool OAIPullrequest::is_updated_on_Set() const{
    return m_updated_on_isSet;
}

bool OAIPullrequest::is_updated_on_Valid() const{
    return m_updated_on_isValid;
}

bool OAIPullrequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_author.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_close_source_branch_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_closed_by.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_comment_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_on_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_links.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_merge_commit.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_participants.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rendered.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_reviewers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_summary.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_task_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_on_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPullrequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_type_isValid && true;
}

} // namespace OpenAPI
