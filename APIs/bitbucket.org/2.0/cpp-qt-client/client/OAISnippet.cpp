/**
 * Bitbucket API
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@bitbucket.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISnippet.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISnippet::OAISnippet(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISnippet::OAISnippet() {
    this->initializeModel();
}

OAISnippet::~OAISnippet() {}

void OAISnippet::initializeModel() {

    m_type_isSet = false;
    m_type_isValid = false;

    m_created_on_isSet = false;
    m_created_on_isValid = false;

    m_creator_isSet = false;
    m_creator_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_is_private_isSet = false;
    m_is_private_isValid = false;

    m_owner_isSet = false;
    m_owner_isValid = false;

    m_scm_isSet = false;
    m_scm_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_updated_on_isSet = false;
    m_updated_on_isValid = false;
}

void OAISnippet::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISnippet::fromJsonObject(QJsonObject json) {

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_created_on_isValid = ::OpenAPI::fromJsonValue(m_created_on, json[QString("created_on")]);
    m_created_on_isSet = !json[QString("created_on")].isNull() && m_created_on_isValid;

    m_creator_isValid = ::OpenAPI::fromJsonValue(m_creator, json[QString("creator")]);
    m_creator_isSet = !json[QString("creator")].isNull() && m_creator_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_is_private_isValid = ::OpenAPI::fromJsonValue(m_is_private, json[QString("is_private")]);
    m_is_private_isSet = !json[QString("is_private")].isNull() && m_is_private_isValid;

    m_owner_isValid = ::OpenAPI::fromJsonValue(m_owner, json[QString("owner")]);
    m_owner_isSet = !json[QString("owner")].isNull() && m_owner_isValid;

    m_scm_isValid = ::OpenAPI::fromJsonValue(m_scm, json[QString("scm")]);
    m_scm_isSet = !json[QString("scm")].isNull() && m_scm_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_updated_on_isValid = ::OpenAPI::fromJsonValue(m_updated_on, json[QString("updated_on")]);
    m_updated_on_isSet = !json[QString("updated_on")].isNull() && m_updated_on_isValid;
}

QString OAISnippet::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISnippet::asJsonObject() const {
    QJsonObject obj;
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_created_on_isSet) {
        obj.insert(QString("created_on"), ::OpenAPI::toJsonValue(m_created_on));
    }
    if (m_creator.isSet()) {
        obj.insert(QString("creator"), ::OpenAPI::toJsonValue(m_creator));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_is_private_isSet) {
        obj.insert(QString("is_private"), ::OpenAPI::toJsonValue(m_is_private));
    }
    if (m_owner.isSet()) {
        obj.insert(QString("owner"), ::OpenAPI::toJsonValue(m_owner));
    }
    if (m_scm_isSet) {
        obj.insert(QString("scm"), ::OpenAPI::toJsonValue(m_scm));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_updated_on_isSet) {
        obj.insert(QString("updated_on"), ::OpenAPI::toJsonValue(m_updated_on));
    }
    return obj;
}

QString OAISnippet::getType() const {
    return m_type;
}
void OAISnippet::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAISnippet::is_type_Set() const{
    return m_type_isSet;
}

bool OAISnippet::is_type_Valid() const{
    return m_type_isValid;
}

QDateTime OAISnippet::getCreatedOn() const {
    return m_created_on;
}
void OAISnippet::setCreatedOn(const QDateTime &created_on) {
    m_created_on = created_on;
    m_created_on_isSet = true;
}

bool OAISnippet::is_created_on_Set() const{
    return m_created_on_isSet;
}

bool OAISnippet::is_created_on_Valid() const{
    return m_created_on_isValid;
}

OAIAccount OAISnippet::getCreator() const {
    return m_creator;
}
void OAISnippet::setCreator(const OAIAccount &creator) {
    m_creator = creator;
    m_creator_isSet = true;
}

bool OAISnippet::is_creator_Set() const{
    return m_creator_isSet;
}

bool OAISnippet::is_creator_Valid() const{
    return m_creator_isValid;
}

qint32 OAISnippet::getId() const {
    return m_id;
}
void OAISnippet::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAISnippet::is_id_Set() const{
    return m_id_isSet;
}

bool OAISnippet::is_id_Valid() const{
    return m_id_isValid;
}

bool OAISnippet::isIsPrivate() const {
    return m_is_private;
}
void OAISnippet::setIsPrivate(const bool &is_private) {
    m_is_private = is_private;
    m_is_private_isSet = true;
}

bool OAISnippet::is_is_private_Set() const{
    return m_is_private_isSet;
}

bool OAISnippet::is_is_private_Valid() const{
    return m_is_private_isValid;
}

OAIAccount OAISnippet::getOwner() const {
    return m_owner;
}
void OAISnippet::setOwner(const OAIAccount &owner) {
    m_owner = owner;
    m_owner_isSet = true;
}

bool OAISnippet::is_owner_Set() const{
    return m_owner_isSet;
}

bool OAISnippet::is_owner_Valid() const{
    return m_owner_isValid;
}

QString OAISnippet::getScm() const {
    return m_scm;
}
void OAISnippet::setScm(const QString &scm) {
    m_scm = scm;
    m_scm_isSet = true;
}

bool OAISnippet::is_scm_Set() const{
    return m_scm_isSet;
}

bool OAISnippet::is_scm_Valid() const{
    return m_scm_isValid;
}

QString OAISnippet::getTitle() const {
    return m_title;
}
void OAISnippet::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAISnippet::is_title_Set() const{
    return m_title_isSet;
}

bool OAISnippet::is_title_Valid() const{
    return m_title_isValid;
}

QDateTime OAISnippet::getUpdatedOn() const {
    return m_updated_on;
}
void OAISnippet::setUpdatedOn(const QDateTime &updated_on) {
    m_updated_on = updated_on;
    m_updated_on_isSet = true;
}

bool OAISnippet::is_updated_on_Set() const{
    return m_updated_on_isSet;
}

bool OAISnippet::is_updated_on_Valid() const{
    return m_updated_on_isValid;
}

bool OAISnippet::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_on_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creator.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_private_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_scm_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_on_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISnippet::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_type_isValid && true;
}

} // namespace OpenAPI
