/**
 * Bitbucket API
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@bitbucket.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeploymentsApi.h"
#include "OAIServerConfiguration.h"
#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAIDeploymentsApi::OAIDeploymentsApi(const int timeOut)
    : _timeOut(timeOut),
      _manager(nullptr),
      _isResponseCompressionEnabled(false),
      _isRequestCompressionEnabled(false) {
    initializeServerConfigs();
}

OAIDeploymentsApi::~OAIDeploymentsApi() {
}

void OAIDeploymentsApi::initializeServerConfigs() {
    //Default server
    QList<OAIServerConfiguration> defaultConf = QList<OAIServerConfiguration>();
    //varying endpoint server
    defaultConf.append(OAIServerConfiguration(
    QUrl("https://api.bitbucket.org/2.0"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("createEnvironment", defaultConf);
    _serverIndices.insert("createEnvironment", 0);
    _serverConfigs.insert("deleteEnvironmentForRepository", defaultConf);
    _serverIndices.insert("deleteEnvironmentForRepository", 0);
    _serverConfigs.insert("getDeploymentForRepository", defaultConf);
    _serverIndices.insert("getDeploymentForRepository", 0);
    _serverConfigs.insert("getDeploymentsForRepository", defaultConf);
    _serverIndices.insert("getDeploymentsForRepository", 0);
    _serverConfigs.insert("getEnvironmentForRepository", defaultConf);
    _serverIndices.insert("getEnvironmentForRepository", 0);
    _serverConfigs.insert("getEnvironmentsForRepository", defaultConf);
    _serverIndices.insert("getEnvironmentsForRepository", 0);
    _serverConfigs.insert("repositoriesWorkspaceRepoSlugDeployKeysGet", defaultConf);
    _serverIndices.insert("repositoriesWorkspaceRepoSlugDeployKeysGet", 0);
    _serverConfigs.insert("repositoriesWorkspaceRepoSlugDeployKeysKeyIdDelete", defaultConf);
    _serverIndices.insert("repositoriesWorkspaceRepoSlugDeployKeysKeyIdDelete", 0);
    _serverConfigs.insert("repositoriesWorkspaceRepoSlugDeployKeysKeyIdGet", defaultConf);
    _serverIndices.insert("repositoriesWorkspaceRepoSlugDeployKeysKeyIdGet", 0);
    _serverConfigs.insert("repositoriesWorkspaceRepoSlugDeployKeysKeyIdPut", defaultConf);
    _serverIndices.insert("repositoriesWorkspaceRepoSlugDeployKeysKeyIdPut", 0);
    _serverConfigs.insert("repositoriesWorkspaceRepoSlugDeployKeysPost", defaultConf);
    _serverIndices.insert("repositoriesWorkspaceRepoSlugDeployKeysPost", 0);
    _serverConfigs.insert("updateEnvironmentForRepository", defaultConf);
    _serverIndices.insert("updateEnvironmentForRepository", 0);
    _serverConfigs.insert("workspacesWorkspaceProjectsProjectKeyDeployKeysGet", defaultConf);
    _serverIndices.insert("workspacesWorkspaceProjectsProjectKeyDeployKeysGet", 0);
    _serverConfigs.insert("workspacesWorkspaceProjectsProjectKeyDeployKeysKeyIdDelete", defaultConf);
    _serverIndices.insert("workspacesWorkspaceProjectsProjectKeyDeployKeysKeyIdDelete", 0);
    _serverConfigs.insert("workspacesWorkspaceProjectsProjectKeyDeployKeysKeyIdGet", defaultConf);
    _serverIndices.insert("workspacesWorkspaceProjectsProjectKeyDeployKeysKeyIdGet", 0);
    _serverConfigs.insert("workspacesWorkspaceProjectsProjectKeyDeployKeysPost", defaultConf);
    _serverIndices.insert("workspacesWorkspaceProjectsProjectKeyDeployKeysPost", 0);
}

/**
* returns 0 on success and -1, -2 or -3 on failure.
* -1 when the variable does not exist and -2 if the value is not defined in the enum and -3 if the operation or server index is not found
*/
int OAIDeploymentsApi::setDefaultServerValue(int serverIndex, const QString &operation, const QString &variable, const QString &value) {
    auto it = _serverConfigs.find(operation);
    if (it != _serverConfigs.end() && serverIndex < it.value().size()) {
      return _serverConfigs[operation][serverIndex].setDefaultValue(variable,value);
    }
    return -3;
}
void OAIDeploymentsApi::setServerIndex(const QString &operation, int serverIndex) {
    if (_serverIndices.contains(operation) && serverIndex < _serverConfigs.find(operation).value().size()) {
        _serverIndices[operation] = serverIndex;
    }
}

void OAIDeploymentsApi::setApiKey(const QString &apiKeyName, const QString &apiKey) {
    _apiKeys.insert(apiKeyName, apiKey);
}

void OAIDeploymentsApi::setBearerToken(const QString &token) {
    _bearerToken = token;
}

void OAIDeploymentsApi::setUsername(const QString &username) {
    _username = username;
}

void OAIDeploymentsApi::setPassword(const QString &password) {
    _password = password;
}


void OAIDeploymentsApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAIDeploymentsApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAIDeploymentsApi::setNetworkAccessManager(QNetworkAccessManager* manager) {
    _manager = manager;
}

/**
    * Appends a new ServerConfiguration to the config map for a specific operation.
    * @param operation The id to the target operation.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    * returns the index of the new server config on success and -1 if the operation is not found
    */
int OAIDeploymentsApi::addServerConfiguration(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    if (_serverConfigs.contains(operation)) {
        _serverConfigs[operation].append(OAIServerConfiguration(
                    url,
                    description,
                    variables));
        return _serverConfigs[operation].size()-1;
    } else {
        return -1;
    }
}

/**
    * Appends a new ServerConfiguration to the config map for a all operations and sets the index to that server.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIDeploymentsApi::setNewServerForAllOperations(const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    for (auto keyIt = _serverIndices.keyBegin(); keyIt != _serverIndices.keyEnd(); keyIt++) {
        setServerIndex(*keyIt, addServerConfiguration(*keyIt, url, description, variables));
    }
}

/**
    * Appends a new ServerConfiguration to the config map for an operations and sets the index to that server.
    * @param URL A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIDeploymentsApi::setNewServer(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    setServerIndex(operation, addServerConfiguration(operation, url, description, variables));
}

void OAIDeploymentsApi::addHeaders(const QString &key, const QString &value) {
    _defaultHeaders.insert(key, value);
}

void OAIDeploymentsApi::enableRequestCompression() {
    _isRequestCompressionEnabled = true;
}

void OAIDeploymentsApi::enableResponseCompression() {
    _isResponseCompressionEnabled = true;
}

void OAIDeploymentsApi::abortRequests() {
    Q_EMIT abortRequestsSignal();
}

QString OAIDeploymentsApi::getParamStylePrefix(const QString &style) {
    if (style == "matrix") {
        return ";";
    } else if (style == "label") {
        return ".";
    } else if (style == "form") {
        return "&";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "&";
    } else if (style == "pipeDelimited") {
        return "&";
    } else {
        return "none";
    }
}

QString OAIDeploymentsApi::getParamStyleSuffix(const QString &style) {
    if (style == "matrix") {
        return "=";
    } else if (style == "label") {
        return "";
    } else if (style == "form") {
        return "=";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "=";
    } else if (style == "pipeDelimited") {
        return "=";
    } else {
        return "none";
    }
}

QString OAIDeploymentsApi::getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode) {

    if (style == "matrix") {
        return (isExplode) ? ";" + name + "=" : ",";

    } else if (style == "label") {
        return (isExplode) ? "." : ",";

    } else if (style == "form") {
        return (isExplode) ? "&" + name + "=" : ",";

    } else if (style == "simple") {
        return ",";
    } else if (style == "spaceDelimited") {
        return (isExplode) ? "&" + name + "=" : " ";

    } else if (style == "pipeDelimited") {
        return (isExplode) ? "&" + name + "=" : "|";

    } else if (style == "deepObject") {
        return (isExplode) ? "&" : "none";

    } else {
        return "none";
    }
}

void OAIDeploymentsApi::createEnvironment(const QString &workspace, const QString &repo_slug, const OAIDeployment_environment &oai_deployment_environment) {
    QString fullPath = QString(_serverConfigs["createEnvironment"][_serverIndices.value("createEnvironment")].URL()+"/repositories/{workspace}/{repo_slug}/environments");
    
    
    {
        QString workspacePathParam("{");
        workspacePathParam.append("workspace").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "workspace", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"workspace"+pathSuffix : pathPrefix;
        fullPath.replace(workspacePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(workspace)));
    }
    
    {
        QString repo_slugPathParam("{");
        repo_slugPathParam.append("repo_slug").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "repo_slug", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"repo_slug"+pathSuffix : pathPrefix;
        fullPath.replace(repo_slugPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(repo_slug)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oai_deployment_environment.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDeploymentsApi::createEnvironmentCallback);
    connect(this, &OAIDeploymentsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDeploymentsApi::createEnvironmentCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIDeployment_environment output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT createEnvironmentSignal(output);
        Q_EMIT createEnvironmentSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT createEnvironmentSignalE(output, error_type, error_str);
        Q_EMIT createEnvironmentSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT createEnvironmentSignalError(output, error_type, error_str);
        Q_EMIT createEnvironmentSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDeploymentsApi::deleteEnvironmentForRepository(const QString &workspace, const QString &repo_slug, const QString &environment_uuid) {
    QString fullPath = QString(_serverConfigs["deleteEnvironmentForRepository"][_serverIndices.value("deleteEnvironmentForRepository")].URL()+"/repositories/{workspace}/{repo_slug}/environments/{environment_uuid}");
    
    
    {
        QString workspacePathParam("{");
        workspacePathParam.append("workspace").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "workspace", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"workspace"+pathSuffix : pathPrefix;
        fullPath.replace(workspacePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(workspace)));
    }
    
    {
        QString repo_slugPathParam("{");
        repo_slugPathParam.append("repo_slug").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "repo_slug", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"repo_slug"+pathSuffix : pathPrefix;
        fullPath.replace(repo_slugPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(repo_slug)));
    }
    
    {
        QString environment_uuidPathParam("{");
        environment_uuidPathParam.append("environment_uuid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "environment_uuid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"environment_uuid"+pathSuffix : pathPrefix;
        fullPath.replace(environment_uuidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(environment_uuid)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDeploymentsApi::deleteEnvironmentForRepositoryCallback);
    connect(this, &OAIDeploymentsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDeploymentsApi::deleteEnvironmentForRepositoryCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT deleteEnvironmentForRepositorySignal();
        Q_EMIT deleteEnvironmentForRepositorySignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT deleteEnvironmentForRepositorySignalE(error_type, error_str);
        Q_EMIT deleteEnvironmentForRepositorySignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT deleteEnvironmentForRepositorySignalError(error_type, error_str);
        Q_EMIT deleteEnvironmentForRepositorySignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDeploymentsApi::getDeploymentForRepository(const QString &workspace, const QString &repo_slug, const QString &deployment_uuid) {
    QString fullPath = QString(_serverConfigs["getDeploymentForRepository"][_serverIndices.value("getDeploymentForRepository")].URL()+"/repositories/{workspace}/{repo_slug}/deployments/{deployment_uuid}");
    
    
    {
        QString workspacePathParam("{");
        workspacePathParam.append("workspace").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "workspace", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"workspace"+pathSuffix : pathPrefix;
        fullPath.replace(workspacePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(workspace)));
    }
    
    {
        QString repo_slugPathParam("{");
        repo_slugPathParam.append("repo_slug").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "repo_slug", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"repo_slug"+pathSuffix : pathPrefix;
        fullPath.replace(repo_slugPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(repo_slug)));
    }
    
    {
        QString deployment_uuidPathParam("{");
        deployment_uuidPathParam.append("deployment_uuid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "deployment_uuid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"deployment_uuid"+pathSuffix : pathPrefix;
        fullPath.replace(deployment_uuidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(deployment_uuid)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDeploymentsApi::getDeploymentForRepositoryCallback);
    connect(this, &OAIDeploymentsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDeploymentsApi::getDeploymentForRepositoryCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIDeployment output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getDeploymentForRepositorySignal(output);
        Q_EMIT getDeploymentForRepositorySignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getDeploymentForRepositorySignalE(output, error_type, error_str);
        Q_EMIT getDeploymentForRepositorySignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getDeploymentForRepositorySignalError(output, error_type, error_str);
        Q_EMIT getDeploymentForRepositorySignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDeploymentsApi::getDeploymentsForRepository(const QString &workspace, const QString &repo_slug) {
    QString fullPath = QString(_serverConfigs["getDeploymentsForRepository"][_serverIndices.value("getDeploymentsForRepository")].URL()+"/repositories/{workspace}/{repo_slug}/deployments");
    
    
    {
        QString workspacePathParam("{");
        workspacePathParam.append("workspace").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "workspace", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"workspace"+pathSuffix : pathPrefix;
        fullPath.replace(workspacePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(workspace)));
    }
    
    {
        QString repo_slugPathParam("{");
        repo_slugPathParam.append("repo_slug").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "repo_slug", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"repo_slug"+pathSuffix : pathPrefix;
        fullPath.replace(repo_slugPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(repo_slug)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDeploymentsApi::getDeploymentsForRepositoryCallback);
    connect(this, &OAIDeploymentsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDeploymentsApi::getDeploymentsForRepositoryCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIPaginated_deployments output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getDeploymentsForRepositorySignal(output);
        Q_EMIT getDeploymentsForRepositorySignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getDeploymentsForRepositorySignalE(output, error_type, error_str);
        Q_EMIT getDeploymentsForRepositorySignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getDeploymentsForRepositorySignalError(output, error_type, error_str);
        Q_EMIT getDeploymentsForRepositorySignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDeploymentsApi::getEnvironmentForRepository(const QString &workspace, const QString &repo_slug, const QString &environment_uuid) {
    QString fullPath = QString(_serverConfigs["getEnvironmentForRepository"][_serverIndices.value("getEnvironmentForRepository")].URL()+"/repositories/{workspace}/{repo_slug}/environments/{environment_uuid}");
    
    
    {
        QString workspacePathParam("{");
        workspacePathParam.append("workspace").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "workspace", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"workspace"+pathSuffix : pathPrefix;
        fullPath.replace(workspacePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(workspace)));
    }
    
    {
        QString repo_slugPathParam("{");
        repo_slugPathParam.append("repo_slug").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "repo_slug", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"repo_slug"+pathSuffix : pathPrefix;
        fullPath.replace(repo_slugPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(repo_slug)));
    }
    
    {
        QString environment_uuidPathParam("{");
        environment_uuidPathParam.append("environment_uuid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "environment_uuid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"environment_uuid"+pathSuffix : pathPrefix;
        fullPath.replace(environment_uuidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(environment_uuid)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDeploymentsApi::getEnvironmentForRepositoryCallback);
    connect(this, &OAIDeploymentsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDeploymentsApi::getEnvironmentForRepositoryCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIDeployment_environment output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getEnvironmentForRepositorySignal(output);
        Q_EMIT getEnvironmentForRepositorySignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getEnvironmentForRepositorySignalE(output, error_type, error_str);
        Q_EMIT getEnvironmentForRepositorySignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getEnvironmentForRepositorySignalError(output, error_type, error_str);
        Q_EMIT getEnvironmentForRepositorySignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDeploymentsApi::getEnvironmentsForRepository(const QString &workspace, const QString &repo_slug) {
    QString fullPath = QString(_serverConfigs["getEnvironmentsForRepository"][_serverIndices.value("getEnvironmentsForRepository")].URL()+"/repositories/{workspace}/{repo_slug}/environments");
    
    
    {
        QString workspacePathParam("{");
        workspacePathParam.append("workspace").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "workspace", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"workspace"+pathSuffix : pathPrefix;
        fullPath.replace(workspacePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(workspace)));
    }
    
    {
        QString repo_slugPathParam("{");
        repo_slugPathParam.append("repo_slug").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "repo_slug", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"repo_slug"+pathSuffix : pathPrefix;
        fullPath.replace(repo_slugPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(repo_slug)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDeploymentsApi::getEnvironmentsForRepositoryCallback);
    connect(this, &OAIDeploymentsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDeploymentsApi::getEnvironmentsForRepositoryCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIPaginated_environments output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getEnvironmentsForRepositorySignal(output);
        Q_EMIT getEnvironmentsForRepositorySignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getEnvironmentsForRepositorySignalE(output, error_type, error_str);
        Q_EMIT getEnvironmentsForRepositorySignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getEnvironmentsForRepositorySignalError(output, error_type, error_str);
        Q_EMIT getEnvironmentsForRepositorySignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDeploymentsApi::repositoriesWorkspaceRepoSlugDeployKeysGet(const QString &repo_slug, const QString &workspace) {
    QString fullPath = QString(_serverConfigs["repositoriesWorkspaceRepoSlugDeployKeysGet"][_serverIndices.value("repositoriesWorkspaceRepoSlugDeployKeysGet")].URL()+"/repositories/{workspace}/{repo_slug}/deploy-keys");
    
    if (_apiKeys.contains("api_key")) {
        addHeaders("api_key",_apiKeys.find("api_key").value());
    }
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString repo_slugPathParam("{");
        repo_slugPathParam.append("repo_slug").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "repo_slug", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"repo_slug"+pathSuffix : pathPrefix;
        fullPath.replace(repo_slugPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(repo_slug)));
    }
    
    {
        QString workspacePathParam("{");
        workspacePathParam.append("workspace").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "workspace", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"workspace"+pathSuffix : pathPrefix;
        fullPath.replace(workspacePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(workspace)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDeploymentsApi::repositoriesWorkspaceRepoSlugDeployKeysGetCallback);
    connect(this, &OAIDeploymentsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });
    _OauthMethod = 2;
    _implicitFlow.unlink();
    _credentialFlow.unlink();
    _passwordFlow.unlink();
    _authFlow.link();
    QStringList scope;
    scope.append("repository");
    scope.append("repository:admin");
    auto token = _authFlow.getToken(scope.join(" "));
    if(token.isValid())
        input.headers.insert("Authorization", "Bearer " + token.getToken());

    _latestWorker = new OAIHttpRequestWorker(this, _manager);
    _latestWorker->setTimeOut(_timeOut);
    _latestWorker->setWorkingDirectory(_workingDirectory);

    connect(_latestWorker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDeploymentsApi::repositoriesWorkspaceRepoSlugDeployKeysGetCallback);
    connect(this, &OAIDeploymentsApi::abortRequestsSignal, _latestWorker, &QObject::deleteLater);
    connect(_latestWorker, &QObject::destroyed, [this](){
        if(findChildren<OAIHttpRequestWorker*>().count() == 0){
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    _latestInput = input;
    _latestScope = scope;




    worker->execute(&input);
}

void OAIDeploymentsApi::repositoriesWorkspaceRepoSlugDeployKeysGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIPaginated_deploy_keys output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT repositoriesWorkspaceRepoSlugDeployKeysGetSignal(output);
        Q_EMIT repositoriesWorkspaceRepoSlugDeployKeysGetSignalFull(worker, output);
    } else if(worker->error_type == QNetworkReply::AuthenticationRequiredError){
        connect(&_authFlow, SIGNAL(tokenReceived()), this, SLOT(tokenAvailable()));
        QStringList scope;
        scope.append("repository");
        scope.append("repository:admin");
        QString scopeStr = scope.join(" ");
        QString authorizationUrl("https://bitbucket.org/site/oauth2/authorize");
        QString tokenUrl("https://bitbucket.org/site/oauth2/access_token");
        //TODO get clientID and Secret and state in the config? https://swagger.io/docs/specification/authentication/oauth2/ states that you should do as you like
        _authFlow.setVariables(authorizationUrl, tokenUrl, scopeStr, "state" , "http://127.0.0.1:9999", "clientId", "clientSecret");
        Q_EMIT _authFlow.authenticationNeeded();



    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT repositoriesWorkspaceRepoSlugDeployKeysGetSignalE(output, error_type, error_str);
        Q_EMIT repositoriesWorkspaceRepoSlugDeployKeysGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT repositoriesWorkspaceRepoSlugDeployKeysGetSignalError(output, error_type, error_str);
        Q_EMIT repositoriesWorkspaceRepoSlugDeployKeysGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDeploymentsApi::repositoriesWorkspaceRepoSlugDeployKeysKeyIdDelete(const QString &key_id, const QString &repo_slug, const QString &workspace) {
    QString fullPath = QString(_serverConfigs["repositoriesWorkspaceRepoSlugDeployKeysKeyIdDelete"][_serverIndices.value("repositoriesWorkspaceRepoSlugDeployKeysKeyIdDelete")].URL()+"/repositories/{workspace}/{repo_slug}/deploy-keys/{key_id}");
    
    if (_apiKeys.contains("api_key")) {
        addHeaders("api_key",_apiKeys.find("api_key").value());
    }
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString key_idPathParam("{");
        key_idPathParam.append("key_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "key_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"key_id"+pathSuffix : pathPrefix;
        fullPath.replace(key_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(key_id)));
    }
    
    {
        QString repo_slugPathParam("{");
        repo_slugPathParam.append("repo_slug").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "repo_slug", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"repo_slug"+pathSuffix : pathPrefix;
        fullPath.replace(repo_slugPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(repo_slug)));
    }
    
    {
        QString workspacePathParam("{");
        workspacePathParam.append("workspace").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "workspace", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"workspace"+pathSuffix : pathPrefix;
        fullPath.replace(workspacePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(workspace)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDeploymentsApi::repositoriesWorkspaceRepoSlugDeployKeysKeyIdDeleteCallback);
    connect(this, &OAIDeploymentsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });
    _OauthMethod = 2;
    _implicitFlow.unlink();
    _credentialFlow.unlink();
    _passwordFlow.unlink();
    _authFlow.link();
    QStringList scope;
    scope.append("repository");
    scope.append("repository:admin");
    auto token = _authFlow.getToken(scope.join(" "));
    if(token.isValid())
        input.headers.insert("Authorization", "Bearer " + token.getToken());

    _latestWorker = new OAIHttpRequestWorker(this, _manager);
    _latestWorker->setTimeOut(_timeOut);
    _latestWorker->setWorkingDirectory(_workingDirectory);

    connect(_latestWorker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDeploymentsApi::repositoriesWorkspaceRepoSlugDeployKeysKeyIdDeleteCallback);
    connect(this, &OAIDeploymentsApi::abortRequestsSignal, _latestWorker, &QObject::deleteLater);
    connect(_latestWorker, &QObject::destroyed, [this](){
        if(findChildren<OAIHttpRequestWorker*>().count() == 0){
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    _latestInput = input;
    _latestScope = scope;




    worker->execute(&input);
}

void OAIDeploymentsApi::repositoriesWorkspaceRepoSlugDeployKeysKeyIdDeleteCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT repositoriesWorkspaceRepoSlugDeployKeysKeyIdDeleteSignal();
        Q_EMIT repositoriesWorkspaceRepoSlugDeployKeysKeyIdDeleteSignalFull(worker);
    } else if(worker->error_type == QNetworkReply::AuthenticationRequiredError){
        connect(&_authFlow, SIGNAL(tokenReceived()), this, SLOT(tokenAvailable()));
        QStringList scope;
        scope.append("repository");
        scope.append("repository:admin");
        QString scopeStr = scope.join(" ");
        QString authorizationUrl("https://bitbucket.org/site/oauth2/authorize");
        QString tokenUrl("https://bitbucket.org/site/oauth2/access_token");
        //TODO get clientID and Secret and state in the config? https://swagger.io/docs/specification/authentication/oauth2/ states that you should do as you like
        _authFlow.setVariables(authorizationUrl, tokenUrl, scopeStr, "state" , "http://127.0.0.1:9999", "clientId", "clientSecret");
        Q_EMIT _authFlow.authenticationNeeded();



    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT repositoriesWorkspaceRepoSlugDeployKeysKeyIdDeleteSignalE(error_type, error_str);
        Q_EMIT repositoriesWorkspaceRepoSlugDeployKeysKeyIdDeleteSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT repositoriesWorkspaceRepoSlugDeployKeysKeyIdDeleteSignalError(error_type, error_str);
        Q_EMIT repositoriesWorkspaceRepoSlugDeployKeysKeyIdDeleteSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDeploymentsApi::repositoriesWorkspaceRepoSlugDeployKeysKeyIdGet(const QString &key_id, const QString &repo_slug, const QString &workspace) {
    QString fullPath = QString(_serverConfigs["repositoriesWorkspaceRepoSlugDeployKeysKeyIdGet"][_serverIndices.value("repositoriesWorkspaceRepoSlugDeployKeysKeyIdGet")].URL()+"/repositories/{workspace}/{repo_slug}/deploy-keys/{key_id}");
    
    if (_apiKeys.contains("api_key")) {
        addHeaders("api_key",_apiKeys.find("api_key").value());
    }
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString key_idPathParam("{");
        key_idPathParam.append("key_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "key_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"key_id"+pathSuffix : pathPrefix;
        fullPath.replace(key_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(key_id)));
    }
    
    {
        QString repo_slugPathParam("{");
        repo_slugPathParam.append("repo_slug").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "repo_slug", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"repo_slug"+pathSuffix : pathPrefix;
        fullPath.replace(repo_slugPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(repo_slug)));
    }
    
    {
        QString workspacePathParam("{");
        workspacePathParam.append("workspace").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "workspace", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"workspace"+pathSuffix : pathPrefix;
        fullPath.replace(workspacePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(workspace)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDeploymentsApi::repositoriesWorkspaceRepoSlugDeployKeysKeyIdGetCallback);
    connect(this, &OAIDeploymentsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });
    _OauthMethod = 2;
    _implicitFlow.unlink();
    _credentialFlow.unlink();
    _passwordFlow.unlink();
    _authFlow.link();
    QStringList scope;
    scope.append("repository");
    scope.append("repository:admin");
    auto token = _authFlow.getToken(scope.join(" "));
    if(token.isValid())
        input.headers.insert("Authorization", "Bearer " + token.getToken());

    _latestWorker = new OAIHttpRequestWorker(this, _manager);
    _latestWorker->setTimeOut(_timeOut);
    _latestWorker->setWorkingDirectory(_workingDirectory);

    connect(_latestWorker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDeploymentsApi::repositoriesWorkspaceRepoSlugDeployKeysKeyIdGetCallback);
    connect(this, &OAIDeploymentsApi::abortRequestsSignal, _latestWorker, &QObject::deleteLater);
    connect(_latestWorker, &QObject::destroyed, [this](){
        if(findChildren<OAIHttpRequestWorker*>().count() == 0){
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    _latestInput = input;
    _latestScope = scope;




    worker->execute(&input);
}

void OAIDeploymentsApi::repositoriesWorkspaceRepoSlugDeployKeysKeyIdGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIDeploy_key output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT repositoriesWorkspaceRepoSlugDeployKeysKeyIdGetSignal(output);
        Q_EMIT repositoriesWorkspaceRepoSlugDeployKeysKeyIdGetSignalFull(worker, output);
    } else if(worker->error_type == QNetworkReply::AuthenticationRequiredError){
        connect(&_authFlow, SIGNAL(tokenReceived()), this, SLOT(tokenAvailable()));
        QStringList scope;
        scope.append("repository");
        scope.append("repository:admin");
        QString scopeStr = scope.join(" ");
        QString authorizationUrl("https://bitbucket.org/site/oauth2/authorize");
        QString tokenUrl("https://bitbucket.org/site/oauth2/access_token");
        //TODO get clientID and Secret and state in the config? https://swagger.io/docs/specification/authentication/oauth2/ states that you should do as you like
        _authFlow.setVariables(authorizationUrl, tokenUrl, scopeStr, "state" , "http://127.0.0.1:9999", "clientId", "clientSecret");
        Q_EMIT _authFlow.authenticationNeeded();



    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT repositoriesWorkspaceRepoSlugDeployKeysKeyIdGetSignalE(output, error_type, error_str);
        Q_EMIT repositoriesWorkspaceRepoSlugDeployKeysKeyIdGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT repositoriesWorkspaceRepoSlugDeployKeysKeyIdGetSignalError(output, error_type, error_str);
        Q_EMIT repositoriesWorkspaceRepoSlugDeployKeysKeyIdGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDeploymentsApi::repositoriesWorkspaceRepoSlugDeployKeysKeyIdPut(const QString &key_id, const QString &repo_slug, const QString &workspace) {
    QString fullPath = QString(_serverConfigs["repositoriesWorkspaceRepoSlugDeployKeysKeyIdPut"][_serverIndices.value("repositoriesWorkspaceRepoSlugDeployKeysKeyIdPut")].URL()+"/repositories/{workspace}/{repo_slug}/deploy-keys/{key_id}");
    
    if (_apiKeys.contains("api_key")) {
        addHeaders("api_key",_apiKeys.find("api_key").value());
    }
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString key_idPathParam("{");
        key_idPathParam.append("key_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "key_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"key_id"+pathSuffix : pathPrefix;
        fullPath.replace(key_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(key_id)));
    }
    
    {
        QString repo_slugPathParam("{");
        repo_slugPathParam.append("repo_slug").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "repo_slug", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"repo_slug"+pathSuffix : pathPrefix;
        fullPath.replace(repo_slugPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(repo_slug)));
    }
    
    {
        QString workspacePathParam("{");
        workspacePathParam.append("workspace").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "workspace", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"workspace"+pathSuffix : pathPrefix;
        fullPath.replace(workspacePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(workspace)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PUT");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDeploymentsApi::repositoriesWorkspaceRepoSlugDeployKeysKeyIdPutCallback);
    connect(this, &OAIDeploymentsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });
    _OauthMethod = 2;
    _implicitFlow.unlink();
    _credentialFlow.unlink();
    _passwordFlow.unlink();
    _authFlow.link();
    QStringList scope;
    scope.append("repository");
    scope.append("repository:admin");
    auto token = _authFlow.getToken(scope.join(" "));
    if(token.isValid())
        input.headers.insert("Authorization", "Bearer " + token.getToken());

    _latestWorker = new OAIHttpRequestWorker(this, _manager);
    _latestWorker->setTimeOut(_timeOut);
    _latestWorker->setWorkingDirectory(_workingDirectory);

    connect(_latestWorker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDeploymentsApi::repositoriesWorkspaceRepoSlugDeployKeysKeyIdPutCallback);
    connect(this, &OAIDeploymentsApi::abortRequestsSignal, _latestWorker, &QObject::deleteLater);
    connect(_latestWorker, &QObject::destroyed, [this](){
        if(findChildren<OAIHttpRequestWorker*>().count() == 0){
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    _latestInput = input;
    _latestScope = scope;




    worker->execute(&input);
}

void OAIDeploymentsApi::repositoriesWorkspaceRepoSlugDeployKeysKeyIdPutCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIDeploy_key output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT repositoriesWorkspaceRepoSlugDeployKeysKeyIdPutSignal(output);
        Q_EMIT repositoriesWorkspaceRepoSlugDeployKeysKeyIdPutSignalFull(worker, output);
    } else if(worker->error_type == QNetworkReply::AuthenticationRequiredError){
        connect(&_authFlow, SIGNAL(tokenReceived()), this, SLOT(tokenAvailable()));
        QStringList scope;
        scope.append("repository");
        scope.append("repository:admin");
        QString scopeStr = scope.join(" ");
        QString authorizationUrl("https://bitbucket.org/site/oauth2/authorize");
        QString tokenUrl("https://bitbucket.org/site/oauth2/access_token");
        //TODO get clientID and Secret and state in the config? https://swagger.io/docs/specification/authentication/oauth2/ states that you should do as you like
        _authFlow.setVariables(authorizationUrl, tokenUrl, scopeStr, "state" , "http://127.0.0.1:9999", "clientId", "clientSecret");
        Q_EMIT _authFlow.authenticationNeeded();



    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT repositoriesWorkspaceRepoSlugDeployKeysKeyIdPutSignalE(output, error_type, error_str);
        Q_EMIT repositoriesWorkspaceRepoSlugDeployKeysKeyIdPutSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT repositoriesWorkspaceRepoSlugDeployKeysKeyIdPutSignalError(output, error_type, error_str);
        Q_EMIT repositoriesWorkspaceRepoSlugDeployKeysKeyIdPutSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDeploymentsApi::repositoriesWorkspaceRepoSlugDeployKeysPost(const QString &repo_slug, const QString &workspace) {
    QString fullPath = QString(_serverConfigs["repositoriesWorkspaceRepoSlugDeployKeysPost"][_serverIndices.value("repositoriesWorkspaceRepoSlugDeployKeysPost")].URL()+"/repositories/{workspace}/{repo_slug}/deploy-keys");
    
    if (_apiKeys.contains("api_key")) {
        addHeaders("api_key",_apiKeys.find("api_key").value());
    }
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString repo_slugPathParam("{");
        repo_slugPathParam.append("repo_slug").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "repo_slug", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"repo_slug"+pathSuffix : pathPrefix;
        fullPath.replace(repo_slugPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(repo_slug)));
    }
    
    {
        QString workspacePathParam("{");
        workspacePathParam.append("workspace").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "workspace", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"workspace"+pathSuffix : pathPrefix;
        fullPath.replace(workspacePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(workspace)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDeploymentsApi::repositoriesWorkspaceRepoSlugDeployKeysPostCallback);
    connect(this, &OAIDeploymentsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });
    _OauthMethod = 2;
    _implicitFlow.unlink();
    _credentialFlow.unlink();
    _passwordFlow.unlink();
    _authFlow.link();
    QStringList scope;
    scope.append("repository");
    scope.append("repository:admin");
    auto token = _authFlow.getToken(scope.join(" "));
    if(token.isValid())
        input.headers.insert("Authorization", "Bearer " + token.getToken());

    _latestWorker = new OAIHttpRequestWorker(this, _manager);
    _latestWorker->setTimeOut(_timeOut);
    _latestWorker->setWorkingDirectory(_workingDirectory);

    connect(_latestWorker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDeploymentsApi::repositoriesWorkspaceRepoSlugDeployKeysPostCallback);
    connect(this, &OAIDeploymentsApi::abortRequestsSignal, _latestWorker, &QObject::deleteLater);
    connect(_latestWorker, &QObject::destroyed, [this](){
        if(findChildren<OAIHttpRequestWorker*>().count() == 0){
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    _latestInput = input;
    _latestScope = scope;




    worker->execute(&input);
}

void OAIDeploymentsApi::repositoriesWorkspaceRepoSlugDeployKeysPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIDeploy_key output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT repositoriesWorkspaceRepoSlugDeployKeysPostSignal(output);
        Q_EMIT repositoriesWorkspaceRepoSlugDeployKeysPostSignalFull(worker, output);
    } else if(worker->error_type == QNetworkReply::AuthenticationRequiredError){
        connect(&_authFlow, SIGNAL(tokenReceived()), this, SLOT(tokenAvailable()));
        QStringList scope;
        scope.append("repository");
        scope.append("repository:admin");
        QString scopeStr = scope.join(" ");
        QString authorizationUrl("https://bitbucket.org/site/oauth2/authorize");
        QString tokenUrl("https://bitbucket.org/site/oauth2/access_token");
        //TODO get clientID and Secret and state in the config? https://swagger.io/docs/specification/authentication/oauth2/ states that you should do as you like
        _authFlow.setVariables(authorizationUrl, tokenUrl, scopeStr, "state" , "http://127.0.0.1:9999", "clientId", "clientSecret");
        Q_EMIT _authFlow.authenticationNeeded();



    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT repositoriesWorkspaceRepoSlugDeployKeysPostSignalE(output, error_type, error_str);
        Q_EMIT repositoriesWorkspaceRepoSlugDeployKeysPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT repositoriesWorkspaceRepoSlugDeployKeysPostSignalError(output, error_type, error_str);
        Q_EMIT repositoriesWorkspaceRepoSlugDeployKeysPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDeploymentsApi::updateEnvironmentForRepository(const QString &workspace, const QString &repo_slug, const QString &environment_uuid) {
    QString fullPath = QString(_serverConfigs["updateEnvironmentForRepository"][_serverIndices.value("updateEnvironmentForRepository")].URL()+"/repositories/{workspace}/{repo_slug}/environments/{environment_uuid}/changes");
    
    
    {
        QString workspacePathParam("{");
        workspacePathParam.append("workspace").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "workspace", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"workspace"+pathSuffix : pathPrefix;
        fullPath.replace(workspacePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(workspace)));
    }
    
    {
        QString repo_slugPathParam("{");
        repo_slugPathParam.append("repo_slug").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "repo_slug", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"repo_slug"+pathSuffix : pathPrefix;
        fullPath.replace(repo_slugPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(repo_slug)));
    }
    
    {
        QString environment_uuidPathParam("{");
        environment_uuidPathParam.append("environment_uuid").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "environment_uuid", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"environment_uuid"+pathSuffix : pathPrefix;
        fullPath.replace(environment_uuidPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(environment_uuid)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDeploymentsApi::updateEnvironmentForRepositoryCallback);
    connect(this, &OAIDeploymentsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDeploymentsApi::updateEnvironmentForRepositoryCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT updateEnvironmentForRepositorySignal();
        Q_EMIT updateEnvironmentForRepositorySignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT updateEnvironmentForRepositorySignalE(error_type, error_str);
        Q_EMIT updateEnvironmentForRepositorySignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT updateEnvironmentForRepositorySignalError(error_type, error_str);
        Q_EMIT updateEnvironmentForRepositorySignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDeploymentsApi::workspacesWorkspaceProjectsProjectKeyDeployKeysGet(const QString &project_key, const QString &workspace) {
    QString fullPath = QString(_serverConfigs["workspacesWorkspaceProjectsProjectKeyDeployKeysGet"][_serverIndices.value("workspacesWorkspaceProjectsProjectKeyDeployKeysGet")].URL()+"/workspaces/{workspace}/projects/{project_key}/deploy-keys");
    
    if (_apiKeys.contains("api_key")) {
        addHeaders("api_key",_apiKeys.find("api_key").value());
    }
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString project_keyPathParam("{");
        project_keyPathParam.append("project_key").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "project_key", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"project_key"+pathSuffix : pathPrefix;
        fullPath.replace(project_keyPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(project_key)));
    }
    
    {
        QString workspacePathParam("{");
        workspacePathParam.append("workspace").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "workspace", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"workspace"+pathSuffix : pathPrefix;
        fullPath.replace(workspacePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(workspace)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDeploymentsApi::workspacesWorkspaceProjectsProjectKeyDeployKeysGetCallback);
    connect(this, &OAIDeploymentsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });
    _OauthMethod = 2;
    _implicitFlow.unlink();
    _credentialFlow.unlink();
    _passwordFlow.unlink();
    _authFlow.link();
    QStringList scope;
    scope.append("project");
    scope.append("project:admin");
    auto token = _authFlow.getToken(scope.join(" "));
    if(token.isValid())
        input.headers.insert("Authorization", "Bearer " + token.getToken());

    _latestWorker = new OAIHttpRequestWorker(this, _manager);
    _latestWorker->setTimeOut(_timeOut);
    _latestWorker->setWorkingDirectory(_workingDirectory);

    connect(_latestWorker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDeploymentsApi::workspacesWorkspaceProjectsProjectKeyDeployKeysGetCallback);
    connect(this, &OAIDeploymentsApi::abortRequestsSignal, _latestWorker, &QObject::deleteLater);
    connect(_latestWorker, &QObject::destroyed, [this](){
        if(findChildren<OAIHttpRequestWorker*>().count() == 0){
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    _latestInput = input;
    _latestScope = scope;




    worker->execute(&input);
}

void OAIDeploymentsApi::workspacesWorkspaceProjectsProjectKeyDeployKeysGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIPaginated_project_deploy_keys output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT workspacesWorkspaceProjectsProjectKeyDeployKeysGetSignal(output);
        Q_EMIT workspacesWorkspaceProjectsProjectKeyDeployKeysGetSignalFull(worker, output);
    } else if(worker->error_type == QNetworkReply::AuthenticationRequiredError){
        connect(&_authFlow, SIGNAL(tokenReceived()), this, SLOT(tokenAvailable()));
        QStringList scope;
        scope.append("project");
        scope.append("project:admin");
        QString scopeStr = scope.join(" ");
        QString authorizationUrl("https://bitbucket.org/site/oauth2/authorize");
        QString tokenUrl("https://bitbucket.org/site/oauth2/access_token");
        //TODO get clientID and Secret and state in the config? https://swagger.io/docs/specification/authentication/oauth2/ states that you should do as you like
        _authFlow.setVariables(authorizationUrl, tokenUrl, scopeStr, "state" , "http://127.0.0.1:9999", "clientId", "clientSecret");
        Q_EMIT _authFlow.authenticationNeeded();



    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT workspacesWorkspaceProjectsProjectKeyDeployKeysGetSignalE(output, error_type, error_str);
        Q_EMIT workspacesWorkspaceProjectsProjectKeyDeployKeysGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT workspacesWorkspaceProjectsProjectKeyDeployKeysGetSignalError(output, error_type, error_str);
        Q_EMIT workspacesWorkspaceProjectsProjectKeyDeployKeysGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDeploymentsApi::workspacesWorkspaceProjectsProjectKeyDeployKeysKeyIdDelete(const QString &key_id, const QString &project_key, const QString &workspace) {
    QString fullPath = QString(_serverConfigs["workspacesWorkspaceProjectsProjectKeyDeployKeysKeyIdDelete"][_serverIndices.value("workspacesWorkspaceProjectsProjectKeyDeployKeysKeyIdDelete")].URL()+"/workspaces/{workspace}/projects/{project_key}/deploy-keys/{key_id}");
    
    if (_apiKeys.contains("api_key")) {
        addHeaders("api_key",_apiKeys.find("api_key").value());
    }
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString key_idPathParam("{");
        key_idPathParam.append("key_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "key_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"key_id"+pathSuffix : pathPrefix;
        fullPath.replace(key_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(key_id)));
    }
    
    {
        QString project_keyPathParam("{");
        project_keyPathParam.append("project_key").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "project_key", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"project_key"+pathSuffix : pathPrefix;
        fullPath.replace(project_keyPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(project_key)));
    }
    
    {
        QString workspacePathParam("{");
        workspacePathParam.append("workspace").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "workspace", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"workspace"+pathSuffix : pathPrefix;
        fullPath.replace(workspacePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(workspace)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDeploymentsApi::workspacesWorkspaceProjectsProjectKeyDeployKeysKeyIdDeleteCallback);
    connect(this, &OAIDeploymentsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });
    _OauthMethod = 2;
    _implicitFlow.unlink();
    _credentialFlow.unlink();
    _passwordFlow.unlink();
    _authFlow.link();
    QStringList scope;
    scope.append("project");
    scope.append("project:admin");
    auto token = _authFlow.getToken(scope.join(" "));
    if(token.isValid())
        input.headers.insert("Authorization", "Bearer " + token.getToken());

    _latestWorker = new OAIHttpRequestWorker(this, _manager);
    _latestWorker->setTimeOut(_timeOut);
    _latestWorker->setWorkingDirectory(_workingDirectory);

    connect(_latestWorker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDeploymentsApi::workspacesWorkspaceProjectsProjectKeyDeployKeysKeyIdDeleteCallback);
    connect(this, &OAIDeploymentsApi::abortRequestsSignal, _latestWorker, &QObject::deleteLater);
    connect(_latestWorker, &QObject::destroyed, [this](){
        if(findChildren<OAIHttpRequestWorker*>().count() == 0){
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    _latestInput = input;
    _latestScope = scope;




    worker->execute(&input);
}

void OAIDeploymentsApi::workspacesWorkspaceProjectsProjectKeyDeployKeysKeyIdDeleteCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT workspacesWorkspaceProjectsProjectKeyDeployKeysKeyIdDeleteSignal();
        Q_EMIT workspacesWorkspaceProjectsProjectKeyDeployKeysKeyIdDeleteSignalFull(worker);
    } else if(worker->error_type == QNetworkReply::AuthenticationRequiredError){
        connect(&_authFlow, SIGNAL(tokenReceived()), this, SLOT(tokenAvailable()));
        QStringList scope;
        scope.append("project");
        scope.append("project:admin");
        QString scopeStr = scope.join(" ");
        QString authorizationUrl("https://bitbucket.org/site/oauth2/authorize");
        QString tokenUrl("https://bitbucket.org/site/oauth2/access_token");
        //TODO get clientID and Secret and state in the config? https://swagger.io/docs/specification/authentication/oauth2/ states that you should do as you like
        _authFlow.setVariables(authorizationUrl, tokenUrl, scopeStr, "state" , "http://127.0.0.1:9999", "clientId", "clientSecret");
        Q_EMIT _authFlow.authenticationNeeded();



    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT workspacesWorkspaceProjectsProjectKeyDeployKeysKeyIdDeleteSignalE(error_type, error_str);
        Q_EMIT workspacesWorkspaceProjectsProjectKeyDeployKeysKeyIdDeleteSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT workspacesWorkspaceProjectsProjectKeyDeployKeysKeyIdDeleteSignalError(error_type, error_str);
        Q_EMIT workspacesWorkspaceProjectsProjectKeyDeployKeysKeyIdDeleteSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDeploymentsApi::workspacesWorkspaceProjectsProjectKeyDeployKeysKeyIdGet(const QString &key_id, const QString &project_key, const QString &workspace) {
    QString fullPath = QString(_serverConfigs["workspacesWorkspaceProjectsProjectKeyDeployKeysKeyIdGet"][_serverIndices.value("workspacesWorkspaceProjectsProjectKeyDeployKeysKeyIdGet")].URL()+"/workspaces/{workspace}/projects/{project_key}/deploy-keys/{key_id}");
    
    if (_apiKeys.contains("api_key")) {
        addHeaders("api_key",_apiKeys.find("api_key").value());
    }
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString key_idPathParam("{");
        key_idPathParam.append("key_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "key_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"key_id"+pathSuffix : pathPrefix;
        fullPath.replace(key_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(key_id)));
    }
    
    {
        QString project_keyPathParam("{");
        project_keyPathParam.append("project_key").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "project_key", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"project_key"+pathSuffix : pathPrefix;
        fullPath.replace(project_keyPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(project_key)));
    }
    
    {
        QString workspacePathParam("{");
        workspacePathParam.append("workspace").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "workspace", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"workspace"+pathSuffix : pathPrefix;
        fullPath.replace(workspacePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(workspace)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDeploymentsApi::workspacesWorkspaceProjectsProjectKeyDeployKeysKeyIdGetCallback);
    connect(this, &OAIDeploymentsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });
    _OauthMethod = 2;
    _implicitFlow.unlink();
    _credentialFlow.unlink();
    _passwordFlow.unlink();
    _authFlow.link();
    QStringList scope;
    scope.append("project");
    scope.append("project:admin");
    auto token = _authFlow.getToken(scope.join(" "));
    if(token.isValid())
        input.headers.insert("Authorization", "Bearer " + token.getToken());

    _latestWorker = new OAIHttpRequestWorker(this, _manager);
    _latestWorker->setTimeOut(_timeOut);
    _latestWorker->setWorkingDirectory(_workingDirectory);

    connect(_latestWorker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDeploymentsApi::workspacesWorkspaceProjectsProjectKeyDeployKeysKeyIdGetCallback);
    connect(this, &OAIDeploymentsApi::abortRequestsSignal, _latestWorker, &QObject::deleteLater);
    connect(_latestWorker, &QObject::destroyed, [this](){
        if(findChildren<OAIHttpRequestWorker*>().count() == 0){
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    _latestInput = input;
    _latestScope = scope;




    worker->execute(&input);
}

void OAIDeploymentsApi::workspacesWorkspaceProjectsProjectKeyDeployKeysKeyIdGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIProject_deploy_key output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT workspacesWorkspaceProjectsProjectKeyDeployKeysKeyIdGetSignal(output);
        Q_EMIT workspacesWorkspaceProjectsProjectKeyDeployKeysKeyIdGetSignalFull(worker, output);
    } else if(worker->error_type == QNetworkReply::AuthenticationRequiredError){
        connect(&_authFlow, SIGNAL(tokenReceived()), this, SLOT(tokenAvailable()));
        QStringList scope;
        scope.append("project");
        scope.append("project:admin");
        QString scopeStr = scope.join(" ");
        QString authorizationUrl("https://bitbucket.org/site/oauth2/authorize");
        QString tokenUrl("https://bitbucket.org/site/oauth2/access_token");
        //TODO get clientID and Secret and state in the config? https://swagger.io/docs/specification/authentication/oauth2/ states that you should do as you like
        _authFlow.setVariables(authorizationUrl, tokenUrl, scopeStr, "state" , "http://127.0.0.1:9999", "clientId", "clientSecret");
        Q_EMIT _authFlow.authenticationNeeded();



    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT workspacesWorkspaceProjectsProjectKeyDeployKeysKeyIdGetSignalE(output, error_type, error_str);
        Q_EMIT workspacesWorkspaceProjectsProjectKeyDeployKeysKeyIdGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT workspacesWorkspaceProjectsProjectKeyDeployKeysKeyIdGetSignalError(output, error_type, error_str);
        Q_EMIT workspacesWorkspaceProjectsProjectKeyDeployKeysKeyIdGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDeploymentsApi::workspacesWorkspaceProjectsProjectKeyDeployKeysPost(const QString &project_key, const QString &workspace) {
    QString fullPath = QString(_serverConfigs["workspacesWorkspaceProjectsProjectKeyDeployKeysPost"][_serverIndices.value("workspacesWorkspaceProjectsProjectKeyDeployKeysPost")].URL()+"/workspaces/{workspace}/projects/{project_key}/deploy-keys");
    
    if (_apiKeys.contains("api_key")) {
        addHeaders("api_key",_apiKeys.find("api_key").value());
    }
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString project_keyPathParam("{");
        project_keyPathParam.append("project_key").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "project_key", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"project_key"+pathSuffix : pathPrefix;
        fullPath.replace(project_keyPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(project_key)));
    }
    
    {
        QString workspacePathParam("{");
        workspacePathParam.append("workspace").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "workspace", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"workspace"+pathSuffix : pathPrefix;
        fullPath.replace(workspacePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(workspace)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDeploymentsApi::workspacesWorkspaceProjectsProjectKeyDeployKeysPostCallback);
    connect(this, &OAIDeploymentsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });
    _OauthMethod = 2;
    _implicitFlow.unlink();
    _credentialFlow.unlink();
    _passwordFlow.unlink();
    _authFlow.link();
    QStringList scope;
    scope.append("project");
    scope.append("project:admin");
    auto token = _authFlow.getToken(scope.join(" "));
    if(token.isValid())
        input.headers.insert("Authorization", "Bearer " + token.getToken());

    _latestWorker = new OAIHttpRequestWorker(this, _manager);
    _latestWorker->setTimeOut(_timeOut);
    _latestWorker->setWorkingDirectory(_workingDirectory);

    connect(_latestWorker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDeploymentsApi::workspacesWorkspaceProjectsProjectKeyDeployKeysPostCallback);
    connect(this, &OAIDeploymentsApi::abortRequestsSignal, _latestWorker, &QObject::deleteLater);
    connect(_latestWorker, &QObject::destroyed, [this](){
        if(findChildren<OAIHttpRequestWorker*>().count() == 0){
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    _latestInput = input;
    _latestScope = scope;




    worker->execute(&input);
}

void OAIDeploymentsApi::workspacesWorkspaceProjectsProjectKeyDeployKeysPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIProject_deploy_key output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT workspacesWorkspaceProjectsProjectKeyDeployKeysPostSignal(output);
        Q_EMIT workspacesWorkspaceProjectsProjectKeyDeployKeysPostSignalFull(worker, output);
    } else if(worker->error_type == QNetworkReply::AuthenticationRequiredError){
        connect(&_authFlow, SIGNAL(tokenReceived()), this, SLOT(tokenAvailable()));
        QStringList scope;
        scope.append("project");
        scope.append("project:admin");
        QString scopeStr = scope.join(" ");
        QString authorizationUrl("https://bitbucket.org/site/oauth2/authorize");
        QString tokenUrl("https://bitbucket.org/site/oauth2/access_token");
        //TODO get clientID and Secret and state in the config? https://swagger.io/docs/specification/authentication/oauth2/ states that you should do as you like
        _authFlow.setVariables(authorizationUrl, tokenUrl, scopeStr, "state" , "http://127.0.0.1:9999", "clientId", "clientSecret");
        Q_EMIT _authFlow.authenticationNeeded();



    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT workspacesWorkspaceProjectsProjectKeyDeployKeysPostSignalE(output, error_type, error_str);
        Q_EMIT workspacesWorkspaceProjectsProjectKeyDeployKeysPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT workspacesWorkspaceProjectsProjectKeyDeployKeysPostSignalError(output, error_type, error_str);
        Q_EMIT workspacesWorkspaceProjectsProjectKeyDeployKeysPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDeploymentsApi::tokenAvailable(){

    oauthToken token;
    switch (_OauthMethod) {
    case 1: //implicit flow
        token = _implicitFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _implicitFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 2: //authorization flow
        token = _authFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _authFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 3: //client credentials flow
        token = _credentialFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 4: //resource owner password flow
        token = _passwordFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    default:
        qDebug() << "No Oauth method set!";
        break;
    }
}
} // namespace OpenAPI
