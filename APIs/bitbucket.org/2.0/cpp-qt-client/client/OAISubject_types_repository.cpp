/**
 * Bitbucket API
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@bitbucket.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISubject_types_repository.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISubject_types_repository::OAISubject_types_repository(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISubject_types_repository::OAISubject_types_repository() {
    this->initializeModel();
}

OAISubject_types_repository::~OAISubject_types_repository() {}

void OAISubject_types_repository::initializeModel() {

    m_events_isSet = false;
    m_events_isValid = false;
}

void OAISubject_types_repository::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISubject_types_repository::fromJsonObject(QJsonObject json) {

    m_events_isValid = ::OpenAPI::fromJsonValue(m_events, json[QString("events")]);
    m_events_isSet = !json[QString("events")].isNull() && m_events_isValid;
}

QString OAISubject_types_repository::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISubject_types_repository::asJsonObject() const {
    QJsonObject obj;
    if (m_events.isSet()) {
        obj.insert(QString("events"), ::OpenAPI::toJsonValue(m_events));
    }
    return obj;
}

OAILink_1 OAISubject_types_repository::getEvents() const {
    return m_events;
}
void OAISubject_types_repository::setEvents(const OAILink_1 &events) {
    m_events = events;
    m_events_isSet = true;
}

bool OAISubject_types_repository::is_events_Set() const{
    return m_events_isSet;
}

bool OAISubject_types_repository::is_events_Valid() const{
    return m_events_isValid;
}

bool OAISubject_types_repository::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_events.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISubject_types_repository::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
