/**
 * Bitbucket API
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@bitbucket.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWebhook_subscription.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWebhook_subscription::OAIWebhook_subscription(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWebhook_subscription::OAIWebhook_subscription() {
    this->initializeModel();
}

OAIWebhook_subscription::~OAIWebhook_subscription() {}

void OAIWebhook_subscription::initializeModel() {

    m_type_isSet = false;
    m_type_isValid = false;

    m_active_isSet = false;
    m_active_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_events_isSet = false;
    m_events_isValid = false;

    m_subject_isSet = false;
    m_subject_isValid = false;

    m_subject_type_isSet = false;
    m_subject_type_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_uuid_isSet = false;
    m_uuid_isValid = false;
}

void OAIWebhook_subscription::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWebhook_subscription::fromJsonObject(QJsonObject json) {

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_active_isValid = ::OpenAPI::fromJsonValue(m_active, json[QString("active")]);
    m_active_isSet = !json[QString("active")].isNull() && m_active_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_events_isValid = ::OpenAPI::fromJsonValue(m_events, json[QString("events")]);
    m_events_isSet = !json[QString("events")].isNull() && m_events_isValid;

    m_subject_isValid = ::OpenAPI::fromJsonValue(m_subject, json[QString("subject")]);
    m_subject_isSet = !json[QString("subject")].isNull() && m_subject_isValid;

    m_subject_type_isValid = ::OpenAPI::fromJsonValue(m_subject_type, json[QString("subject_type")]);
    m_subject_type_isSet = !json[QString("subject_type")].isNull() && m_subject_type_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_uuid_isValid = ::OpenAPI::fromJsonValue(m_uuid, json[QString("uuid")]);
    m_uuid_isSet = !json[QString("uuid")].isNull() && m_uuid_isValid;
}

QString OAIWebhook_subscription::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWebhook_subscription::asJsonObject() const {
    QJsonObject obj;
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_active_isSet) {
        obj.insert(QString("active"), ::OpenAPI::toJsonValue(m_active));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_events.size() > 0) {
        obj.insert(QString("events"), ::OpenAPI::toJsonValue(m_events));
    }
    if (m_subject.isSet()) {
        obj.insert(QString("subject"), ::OpenAPI::toJsonValue(m_subject));
    }
    if (m_subject_type_isSet) {
        obj.insert(QString("subject_type"), ::OpenAPI::toJsonValue(m_subject_type));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_uuid_isSet) {
        obj.insert(QString("uuid"), ::OpenAPI::toJsonValue(m_uuid));
    }
    return obj;
}

QString OAIWebhook_subscription::getType() const {
    return m_type;
}
void OAIWebhook_subscription::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIWebhook_subscription::is_type_Set() const{
    return m_type_isSet;
}

bool OAIWebhook_subscription::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIWebhook_subscription::isActive() const {
    return m_active;
}
void OAIWebhook_subscription::setActive(const bool &active) {
    m_active = active;
    m_active_isSet = true;
}

bool OAIWebhook_subscription::is_active_Set() const{
    return m_active_isSet;
}

bool OAIWebhook_subscription::is_active_Valid() const{
    return m_active_isValid;
}

QDateTime OAIWebhook_subscription::getCreatedAt() const {
    return m_created_at;
}
void OAIWebhook_subscription::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIWebhook_subscription::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIWebhook_subscription::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIWebhook_subscription::getDescription() const {
    return m_description;
}
void OAIWebhook_subscription::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIWebhook_subscription::is_description_Set() const{
    return m_description_isSet;
}

bool OAIWebhook_subscription::is_description_Valid() const{
    return m_description_isValid;
}

QSet<QString> OAIWebhook_subscription::getEvents() const {
    return m_events;
}
void OAIWebhook_subscription::setEvents(const QSet<QString> &events) {
    m_events = events;
    m_events_isSet = true;
}

bool OAIWebhook_subscription::is_events_Set() const{
    return m_events_isSet;
}

bool OAIWebhook_subscription::is_events_Valid() const{
    return m_events_isValid;
}

OAIObject OAIWebhook_subscription::getSubject() const {
    return m_subject;
}
void OAIWebhook_subscription::setSubject(const OAIObject &subject) {
    m_subject = subject;
    m_subject_isSet = true;
}

bool OAIWebhook_subscription::is_subject_Set() const{
    return m_subject_isSet;
}

bool OAIWebhook_subscription::is_subject_Valid() const{
    return m_subject_isValid;
}

QString OAIWebhook_subscription::getSubjectType() const {
    return m_subject_type;
}
void OAIWebhook_subscription::setSubjectType(const QString &subject_type) {
    m_subject_type = subject_type;
    m_subject_type_isSet = true;
}

bool OAIWebhook_subscription::is_subject_type_Set() const{
    return m_subject_type_isSet;
}

bool OAIWebhook_subscription::is_subject_type_Valid() const{
    return m_subject_type_isValid;
}

QString OAIWebhook_subscription::getUrl() const {
    return m_url;
}
void OAIWebhook_subscription::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIWebhook_subscription::is_url_Set() const{
    return m_url_isSet;
}

bool OAIWebhook_subscription::is_url_Valid() const{
    return m_url_isValid;
}

QString OAIWebhook_subscription::getUuid() const {
    return m_uuid;
}
void OAIWebhook_subscription::setUuid(const QString &uuid) {
    m_uuid = uuid;
    m_uuid_isSet = true;
}

bool OAIWebhook_subscription::is_uuid_Set() const{
    return m_uuid_isSet;
}

bool OAIWebhook_subscription::is_uuid_Valid() const{
    return m_uuid_isValid;
}

bool OAIWebhook_subscription::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_active_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_events.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_subject.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_subject_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uuid_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWebhook_subscription::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_type_isValid && true;
}

} // namespace OpenAPI
