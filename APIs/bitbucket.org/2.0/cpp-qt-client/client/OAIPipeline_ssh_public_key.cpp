/**
 * Bitbucket API
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@bitbucket.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPipeline_ssh_public_key.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPipeline_ssh_public_key::OAIPipeline_ssh_public_key(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPipeline_ssh_public_key::OAIPipeline_ssh_public_key() {
    this->initializeModel();
}

OAIPipeline_ssh_public_key::~OAIPipeline_ssh_public_key() {}

void OAIPipeline_ssh_public_key::initializeModel() {

    m_type_isSet = false;
    m_type_isValid = false;

    m_key_isSet = false;
    m_key_isValid = false;

    m_key_type_isSet = false;
    m_key_type_isValid = false;

    m_md5_fingerprint_isSet = false;
    m_md5_fingerprint_isValid = false;

    m_sha256_fingerprint_isSet = false;
    m_sha256_fingerprint_isValid = false;
}

void OAIPipeline_ssh_public_key::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPipeline_ssh_public_key::fromJsonObject(QJsonObject json) {

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_key_isValid = ::OpenAPI::fromJsonValue(m_key, json[QString("key")]);
    m_key_isSet = !json[QString("key")].isNull() && m_key_isValid;

    m_key_type_isValid = ::OpenAPI::fromJsonValue(m_key_type, json[QString("key_type")]);
    m_key_type_isSet = !json[QString("key_type")].isNull() && m_key_type_isValid;

    m_md5_fingerprint_isValid = ::OpenAPI::fromJsonValue(m_md5_fingerprint, json[QString("md5_fingerprint")]);
    m_md5_fingerprint_isSet = !json[QString("md5_fingerprint")].isNull() && m_md5_fingerprint_isValid;

    m_sha256_fingerprint_isValid = ::OpenAPI::fromJsonValue(m_sha256_fingerprint, json[QString("sha256_fingerprint")]);
    m_sha256_fingerprint_isSet = !json[QString("sha256_fingerprint")].isNull() && m_sha256_fingerprint_isValid;
}

QString OAIPipeline_ssh_public_key::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPipeline_ssh_public_key::asJsonObject() const {
    QJsonObject obj;
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_key_isSet) {
        obj.insert(QString("key"), ::OpenAPI::toJsonValue(m_key));
    }
    if (m_key_type_isSet) {
        obj.insert(QString("key_type"), ::OpenAPI::toJsonValue(m_key_type));
    }
    if (m_md5_fingerprint_isSet) {
        obj.insert(QString("md5_fingerprint"), ::OpenAPI::toJsonValue(m_md5_fingerprint));
    }
    if (m_sha256_fingerprint_isSet) {
        obj.insert(QString("sha256_fingerprint"), ::OpenAPI::toJsonValue(m_sha256_fingerprint));
    }
    return obj;
}

QString OAIPipeline_ssh_public_key::getType() const {
    return m_type;
}
void OAIPipeline_ssh_public_key::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIPipeline_ssh_public_key::is_type_Set() const{
    return m_type_isSet;
}

bool OAIPipeline_ssh_public_key::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIPipeline_ssh_public_key::getKey() const {
    return m_key;
}
void OAIPipeline_ssh_public_key::setKey(const QString &key) {
    m_key = key;
    m_key_isSet = true;
}

bool OAIPipeline_ssh_public_key::is_key_Set() const{
    return m_key_isSet;
}

bool OAIPipeline_ssh_public_key::is_key_Valid() const{
    return m_key_isValid;
}

QString OAIPipeline_ssh_public_key::getKeyType() const {
    return m_key_type;
}
void OAIPipeline_ssh_public_key::setKeyType(const QString &key_type) {
    m_key_type = key_type;
    m_key_type_isSet = true;
}

bool OAIPipeline_ssh_public_key::is_key_type_Set() const{
    return m_key_type_isSet;
}

bool OAIPipeline_ssh_public_key::is_key_type_Valid() const{
    return m_key_type_isValid;
}

QString OAIPipeline_ssh_public_key::getMd5Fingerprint() const {
    return m_md5_fingerprint;
}
void OAIPipeline_ssh_public_key::setMd5Fingerprint(const QString &md5_fingerprint) {
    m_md5_fingerprint = md5_fingerprint;
    m_md5_fingerprint_isSet = true;
}

bool OAIPipeline_ssh_public_key::is_md5_fingerprint_Set() const{
    return m_md5_fingerprint_isSet;
}

bool OAIPipeline_ssh_public_key::is_md5_fingerprint_Valid() const{
    return m_md5_fingerprint_isValid;
}

QString OAIPipeline_ssh_public_key::getSha256Fingerprint() const {
    return m_sha256_fingerprint;
}
void OAIPipeline_ssh_public_key::setSha256Fingerprint(const QString &sha256_fingerprint) {
    m_sha256_fingerprint = sha256_fingerprint;
    m_sha256_fingerprint_isSet = true;
}

bool OAIPipeline_ssh_public_key::is_sha256_fingerprint_Set() const{
    return m_sha256_fingerprint_isSet;
}

bool OAIPipeline_ssh_public_key::is_sha256_fingerprint_Valid() const{
    return m_sha256_fingerprint_isValid;
}

bool OAIPipeline_ssh_public_key::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_md5_fingerprint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sha256_fingerprint_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPipeline_ssh_public_key::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_type_isValid && true;
}

} // namespace OpenAPI
