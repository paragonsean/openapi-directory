/**
 * Bitbucket API
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@bitbucket.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIssue_change_changes.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIssue_change_changes::OAIIssue_change_changes(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIssue_change_changes::OAIIssue_change_changes() {
    this->initializeModel();
}

OAIIssue_change_changes::~OAIIssue_change_changes() {}

void OAIIssue_change_changes::initializeModel() {

    m_assignee_isSet = false;
    m_assignee_isValid = false;

    m_component_isSet = false;
    m_component_isValid = false;

    m_content_isSet = false;
    m_content_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_milestone_isSet = false;
    m_milestone_isValid = false;

    m_priority_isSet = false;
    m_priority_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIIssue_change_changes::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIssue_change_changes::fromJsonObject(QJsonObject json) {

    m_assignee_isValid = ::OpenAPI::fromJsonValue(m_assignee, json[QString("assignee")]);
    m_assignee_isSet = !json[QString("assignee")].isNull() && m_assignee_isValid;

    m_component_isValid = ::OpenAPI::fromJsonValue(m_component, json[QString("component")]);
    m_component_isSet = !json[QString("component")].isNull() && m_component_isValid;

    m_content_isValid = ::OpenAPI::fromJsonValue(m_content, json[QString("content")]);
    m_content_isSet = !json[QString("content")].isNull() && m_content_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_milestone_isValid = ::OpenAPI::fromJsonValue(m_milestone, json[QString("milestone")]);
    m_milestone_isSet = !json[QString("milestone")].isNull() && m_milestone_isValid;

    m_priority_isValid = ::OpenAPI::fromJsonValue(m_priority, json[QString("priority")]);
    m_priority_isSet = !json[QString("priority")].isNull() && m_priority_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAIIssue_change_changes::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIssue_change_changes::asJsonObject() const {
    QJsonObject obj;
    if (m_assignee.isSet()) {
        obj.insert(QString("assignee"), ::OpenAPI::toJsonValue(m_assignee));
    }
    if (m_component.isSet()) {
        obj.insert(QString("component"), ::OpenAPI::toJsonValue(m_component));
    }
    if (m_content.isSet()) {
        obj.insert(QString("content"), ::OpenAPI::toJsonValue(m_content));
    }
    if (m_kind.isSet()) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_milestone.isSet()) {
        obj.insert(QString("milestone"), ::OpenAPI::toJsonValue(m_milestone));
    }
    if (m_priority.isSet()) {
        obj.insert(QString("priority"), ::OpenAPI::toJsonValue(m_priority));
    }
    if (m_state.isSet()) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_title.isSet()) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_version.isSet()) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

OAIIssue_change_changes_assignee OAIIssue_change_changes::getAssignee() const {
    return m_assignee;
}
void OAIIssue_change_changes::setAssignee(const OAIIssue_change_changes_assignee &assignee) {
    m_assignee = assignee;
    m_assignee_isSet = true;
}

bool OAIIssue_change_changes::is_assignee_Set() const{
    return m_assignee_isSet;
}

bool OAIIssue_change_changes::is_assignee_Valid() const{
    return m_assignee_isValid;
}

OAIIssue_change_changes_assignee OAIIssue_change_changes::getComponent() const {
    return m_component;
}
void OAIIssue_change_changes::setComponent(const OAIIssue_change_changes_assignee &component) {
    m_component = component;
    m_component_isSet = true;
}

bool OAIIssue_change_changes::is_component_Set() const{
    return m_component_isSet;
}

bool OAIIssue_change_changes::is_component_Valid() const{
    return m_component_isValid;
}

OAIIssue_change_changes_assignee OAIIssue_change_changes::getContent() const {
    return m_content;
}
void OAIIssue_change_changes::setContent(const OAIIssue_change_changes_assignee &content) {
    m_content = content;
    m_content_isSet = true;
}

bool OAIIssue_change_changes::is_content_Set() const{
    return m_content_isSet;
}

bool OAIIssue_change_changes::is_content_Valid() const{
    return m_content_isValid;
}

OAIIssue_change_changes_assignee OAIIssue_change_changes::getKind() const {
    return m_kind;
}
void OAIIssue_change_changes::setKind(const OAIIssue_change_changes_assignee &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIIssue_change_changes::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIIssue_change_changes::is_kind_Valid() const{
    return m_kind_isValid;
}

OAIIssue_change_changes_assignee OAIIssue_change_changes::getMilestone() const {
    return m_milestone;
}
void OAIIssue_change_changes::setMilestone(const OAIIssue_change_changes_assignee &milestone) {
    m_milestone = milestone;
    m_milestone_isSet = true;
}

bool OAIIssue_change_changes::is_milestone_Set() const{
    return m_milestone_isSet;
}

bool OAIIssue_change_changes::is_milestone_Valid() const{
    return m_milestone_isValid;
}

OAIIssue_change_changes_assignee OAIIssue_change_changes::getPriority() const {
    return m_priority;
}
void OAIIssue_change_changes::setPriority(const OAIIssue_change_changes_assignee &priority) {
    m_priority = priority;
    m_priority_isSet = true;
}

bool OAIIssue_change_changes::is_priority_Set() const{
    return m_priority_isSet;
}

bool OAIIssue_change_changes::is_priority_Valid() const{
    return m_priority_isValid;
}

OAIIssue_change_changes_assignee OAIIssue_change_changes::getState() const {
    return m_state;
}
void OAIIssue_change_changes::setState(const OAIIssue_change_changes_assignee &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIIssue_change_changes::is_state_Set() const{
    return m_state_isSet;
}

bool OAIIssue_change_changes::is_state_Valid() const{
    return m_state_isValid;
}

OAIIssue_change_changes_assignee OAIIssue_change_changes::getTitle() const {
    return m_title;
}
void OAIIssue_change_changes::setTitle(const OAIIssue_change_changes_assignee &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIIssue_change_changes::is_title_Set() const{
    return m_title_isSet;
}

bool OAIIssue_change_changes::is_title_Valid() const{
    return m_title_isValid;
}

OAIIssue_change_changes_assignee OAIIssue_change_changes::getVersion() const {
    return m_version;
}
void OAIIssue_change_changes::setVersion(const OAIIssue_change_changes_assignee &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIIssue_change_changes::is_version_Set() const{
    return m_version_isSet;
}

bool OAIIssue_change_changes::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIIssue_change_changes::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_assignee.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_component.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_content.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_milestone.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_priority.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_title.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_version.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIssue_change_changes::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
