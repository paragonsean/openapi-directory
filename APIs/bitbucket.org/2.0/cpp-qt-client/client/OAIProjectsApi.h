/**
 * Bitbucket API
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@bitbucket.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIProjectsApi_H
#define OAI_OAIProjectsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIError.h"
#include "OAIPaginated_default_reviewer_and_type.h"
#include "OAIProject.h"
#include "OAIUser.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIProjectsApi : public QObject {
    Q_OBJECT

public:
    OAIProjectsApi(const int timeOut = 0);
    ~OAIProjectsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  workspace QString [required]
    * @param[in]  oai_project OAIProject [required]
    */
    virtual void workspacesWorkspaceProjectsPost(const QString &workspace, const OAIProject &oai_project);

    /**
    * @param[in]  project_key QString [required]
    * @param[in]  workspace QString [required]
    */
    virtual void workspacesWorkspaceProjectsProjectKeyDefaultReviewersGet(const QString &project_key, const QString &workspace);

    /**
    * @param[in]  project_key QString [required]
    * @param[in]  selected_user QString [required]
    * @param[in]  workspace QString [required]
    */
    virtual void workspacesWorkspaceProjectsProjectKeyDefaultReviewersSelectedUserDelete(const QString &project_key, const QString &selected_user, const QString &workspace);

    /**
    * @param[in]  project_key QString [required]
    * @param[in]  selected_user QString [required]
    * @param[in]  workspace QString [required]
    */
    virtual void workspacesWorkspaceProjectsProjectKeyDefaultReviewersSelectedUserGet(const QString &project_key, const QString &selected_user, const QString &workspace);

    /**
    * @param[in]  project_key QString [required]
    * @param[in]  selected_user QString [required]
    * @param[in]  workspace QString [required]
    */
    virtual void workspacesWorkspaceProjectsProjectKeyDefaultReviewersSelectedUserPut(const QString &project_key, const QString &selected_user, const QString &workspace);

    /**
    * @param[in]  project_key QString [required]
    * @param[in]  workspace QString [required]
    */
    virtual void workspacesWorkspaceProjectsProjectKeyDelete(const QString &project_key, const QString &workspace);

    /**
    * @param[in]  project_key QString [required]
    * @param[in]  workspace QString [required]
    */
    virtual void workspacesWorkspaceProjectsProjectKeyGet(const QString &project_key, const QString &workspace);

    /**
    * @param[in]  project_key QString [required]
    * @param[in]  workspace QString [required]
    * @param[in]  oai_project OAIProject [required]
    */
    virtual void workspacesWorkspaceProjectsProjectKeyPut(const QString &project_key, const QString &workspace, const OAIProject &oai_project);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void workspacesWorkspaceProjectsPostCallback(OAIHttpRequestWorker *worker);
    void workspacesWorkspaceProjectsProjectKeyDefaultReviewersGetCallback(OAIHttpRequestWorker *worker);
    void workspacesWorkspaceProjectsProjectKeyDefaultReviewersSelectedUserDeleteCallback(OAIHttpRequestWorker *worker);
    void workspacesWorkspaceProjectsProjectKeyDefaultReviewersSelectedUserGetCallback(OAIHttpRequestWorker *worker);
    void workspacesWorkspaceProjectsProjectKeyDefaultReviewersSelectedUserPutCallback(OAIHttpRequestWorker *worker);
    void workspacesWorkspaceProjectsProjectKeyDeleteCallback(OAIHttpRequestWorker *worker);
    void workspacesWorkspaceProjectsProjectKeyGetCallback(OAIHttpRequestWorker *worker);
    void workspacesWorkspaceProjectsProjectKeyPutCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void workspacesWorkspaceProjectsPostSignal(OAIProject summary);
    void workspacesWorkspaceProjectsProjectKeyDefaultReviewersGetSignal(OAIPaginated_default_reviewer_and_type summary);
    void workspacesWorkspaceProjectsProjectKeyDefaultReviewersSelectedUserDeleteSignal();
    void workspacesWorkspaceProjectsProjectKeyDefaultReviewersSelectedUserGetSignal(OAIUser summary);
    void workspacesWorkspaceProjectsProjectKeyDefaultReviewersSelectedUserPutSignal(OAIUser summary);
    void workspacesWorkspaceProjectsProjectKeyDeleteSignal();
    void workspacesWorkspaceProjectsProjectKeyGetSignal(OAIProject summary);
    void workspacesWorkspaceProjectsProjectKeyPutSignal(OAIProject summary);


    void workspacesWorkspaceProjectsPostSignalFull(OAIHttpRequestWorker *worker, OAIProject summary);
    void workspacesWorkspaceProjectsProjectKeyDefaultReviewersGetSignalFull(OAIHttpRequestWorker *worker, OAIPaginated_default_reviewer_and_type summary);
    void workspacesWorkspaceProjectsProjectKeyDefaultReviewersSelectedUserDeleteSignalFull(OAIHttpRequestWorker *worker);
    void workspacesWorkspaceProjectsProjectKeyDefaultReviewersSelectedUserGetSignalFull(OAIHttpRequestWorker *worker, OAIUser summary);
    void workspacesWorkspaceProjectsProjectKeyDefaultReviewersSelectedUserPutSignalFull(OAIHttpRequestWorker *worker, OAIUser summary);
    void workspacesWorkspaceProjectsProjectKeyDeleteSignalFull(OAIHttpRequestWorker *worker);
    void workspacesWorkspaceProjectsProjectKeyGetSignalFull(OAIHttpRequestWorker *worker, OAIProject summary);
    void workspacesWorkspaceProjectsProjectKeyPutSignalFull(OAIHttpRequestWorker *worker, OAIProject summary);

    Q_DECL_DEPRECATED_X("Use workspacesWorkspaceProjectsPostSignalError() instead")
    void workspacesWorkspaceProjectsPostSignalE(OAIProject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void workspacesWorkspaceProjectsPostSignalError(OAIProject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workspacesWorkspaceProjectsProjectKeyDefaultReviewersGetSignalError() instead")
    void workspacesWorkspaceProjectsProjectKeyDefaultReviewersGetSignalE(OAIPaginated_default_reviewer_and_type summary, QNetworkReply::NetworkError error_type, QString error_str);
    void workspacesWorkspaceProjectsProjectKeyDefaultReviewersGetSignalError(OAIPaginated_default_reviewer_and_type summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workspacesWorkspaceProjectsProjectKeyDefaultReviewersSelectedUserDeleteSignalError() instead")
    void workspacesWorkspaceProjectsProjectKeyDefaultReviewersSelectedUserDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void workspacesWorkspaceProjectsProjectKeyDefaultReviewersSelectedUserDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workspacesWorkspaceProjectsProjectKeyDefaultReviewersSelectedUserGetSignalError() instead")
    void workspacesWorkspaceProjectsProjectKeyDefaultReviewersSelectedUserGetSignalE(OAIUser summary, QNetworkReply::NetworkError error_type, QString error_str);
    void workspacesWorkspaceProjectsProjectKeyDefaultReviewersSelectedUserGetSignalError(OAIUser summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workspacesWorkspaceProjectsProjectKeyDefaultReviewersSelectedUserPutSignalError() instead")
    void workspacesWorkspaceProjectsProjectKeyDefaultReviewersSelectedUserPutSignalE(OAIUser summary, QNetworkReply::NetworkError error_type, QString error_str);
    void workspacesWorkspaceProjectsProjectKeyDefaultReviewersSelectedUserPutSignalError(OAIUser summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workspacesWorkspaceProjectsProjectKeyDeleteSignalError() instead")
    void workspacesWorkspaceProjectsProjectKeyDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void workspacesWorkspaceProjectsProjectKeyDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workspacesWorkspaceProjectsProjectKeyGetSignalError() instead")
    void workspacesWorkspaceProjectsProjectKeyGetSignalE(OAIProject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void workspacesWorkspaceProjectsProjectKeyGetSignalError(OAIProject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workspacesWorkspaceProjectsProjectKeyPutSignalError() instead")
    void workspacesWorkspaceProjectsProjectKeyPutSignalE(OAIProject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void workspacesWorkspaceProjectsProjectKeyPutSignalError(OAIProject summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use workspacesWorkspaceProjectsPostSignalErrorFull() instead")
    void workspacesWorkspaceProjectsPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void workspacesWorkspaceProjectsPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workspacesWorkspaceProjectsProjectKeyDefaultReviewersGetSignalErrorFull() instead")
    void workspacesWorkspaceProjectsProjectKeyDefaultReviewersGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void workspacesWorkspaceProjectsProjectKeyDefaultReviewersGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workspacesWorkspaceProjectsProjectKeyDefaultReviewersSelectedUserDeleteSignalErrorFull() instead")
    void workspacesWorkspaceProjectsProjectKeyDefaultReviewersSelectedUserDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void workspacesWorkspaceProjectsProjectKeyDefaultReviewersSelectedUserDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workspacesWorkspaceProjectsProjectKeyDefaultReviewersSelectedUserGetSignalErrorFull() instead")
    void workspacesWorkspaceProjectsProjectKeyDefaultReviewersSelectedUserGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void workspacesWorkspaceProjectsProjectKeyDefaultReviewersSelectedUserGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workspacesWorkspaceProjectsProjectKeyDefaultReviewersSelectedUserPutSignalErrorFull() instead")
    void workspacesWorkspaceProjectsProjectKeyDefaultReviewersSelectedUserPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void workspacesWorkspaceProjectsProjectKeyDefaultReviewersSelectedUserPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workspacesWorkspaceProjectsProjectKeyDeleteSignalErrorFull() instead")
    void workspacesWorkspaceProjectsProjectKeyDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void workspacesWorkspaceProjectsProjectKeyDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workspacesWorkspaceProjectsProjectKeyGetSignalErrorFull() instead")
    void workspacesWorkspaceProjectsProjectKeyGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void workspacesWorkspaceProjectsProjectKeyGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workspacesWorkspaceProjectsProjectKeyPutSignalErrorFull() instead")
    void workspacesWorkspaceProjectsProjectKeyPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void workspacesWorkspaceProjectsProjectKeyPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
