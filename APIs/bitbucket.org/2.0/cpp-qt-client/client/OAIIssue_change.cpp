/**
 * Bitbucket API
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@bitbucket.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIssue_change.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIssue_change::OAIIssue_change(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIssue_change::OAIIssue_change() {
    this->initializeModel();
}

OAIIssue_change::~OAIIssue_change() {}

void OAIIssue_change::initializeModel() {

    m_changes_isSet = false;
    m_changes_isValid = false;

    m_created_on_isSet = false;
    m_created_on_isValid = false;

    m_issue_isSet = false;
    m_issue_isValid = false;

    m_links_isSet = false;
    m_links_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;
}

void OAIIssue_change::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIssue_change::fromJsonObject(QJsonObject json) {

    m_changes_isValid = ::OpenAPI::fromJsonValue(m_changes, json[QString("changes")]);
    m_changes_isSet = !json[QString("changes")].isNull() && m_changes_isValid;

    m_created_on_isValid = ::OpenAPI::fromJsonValue(m_created_on, json[QString("created_on")]);
    m_created_on_isSet = !json[QString("created_on")].isNull() && m_created_on_isValid;

    m_issue_isValid = ::OpenAPI::fromJsonValue(m_issue, json[QString("issue")]);
    m_issue_isSet = !json[QString("issue")].isNull() && m_issue_isValid;

    m_links_isValid = ::OpenAPI::fromJsonValue(m_links, json[QString("links")]);
    m_links_isSet = !json[QString("links")].isNull() && m_links_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;
}

QString OAIIssue_change::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIssue_change::asJsonObject() const {
    QJsonObject obj;
    if (m_changes.isSet()) {
        obj.insert(QString("changes"), ::OpenAPI::toJsonValue(m_changes));
    }
    if (m_created_on_isSet) {
        obj.insert(QString("created_on"), ::OpenAPI::toJsonValue(m_created_on));
    }
    if (m_issue.isSet()) {
        obj.insert(QString("issue"), ::OpenAPI::toJsonValue(m_issue));
    }
    if (m_links.isSet()) {
        obj.insert(QString("links"), ::OpenAPI::toJsonValue(m_links));
    }
    if (m_message.isSet()) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_user.isSet()) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    return obj;
}

OAIIssue_change_changes OAIIssue_change::getChanges() const {
    return m_changes;
}
void OAIIssue_change::setChanges(const OAIIssue_change_changes &changes) {
    m_changes = changes;
    m_changes_isSet = true;
}

bool OAIIssue_change::is_changes_Set() const{
    return m_changes_isSet;
}

bool OAIIssue_change::is_changes_Valid() const{
    return m_changes_isValid;
}

QDateTime OAIIssue_change::getCreatedOn() const {
    return m_created_on;
}
void OAIIssue_change::setCreatedOn(const QDateTime &created_on) {
    m_created_on = created_on;
    m_created_on_isSet = true;
}

bool OAIIssue_change::is_created_on_Set() const{
    return m_created_on_isSet;
}

bool OAIIssue_change::is_created_on_Valid() const{
    return m_created_on_isValid;
}

OAIIssue OAIIssue_change::getIssue() const {
    return m_issue;
}
void OAIIssue_change::setIssue(const OAIIssue &issue) {
    m_issue = issue;
    m_issue_isSet = true;
}

bool OAIIssue_change::is_issue_Set() const{
    return m_issue_isSet;
}

bool OAIIssue_change::is_issue_Valid() const{
    return m_issue_isValid;
}

OAIIssue_change_links OAIIssue_change::getLinks() const {
    return m_links;
}
void OAIIssue_change::setLinks(const OAIIssue_change_links &links) {
    m_links = links;
    m_links_isSet = true;
}

bool OAIIssue_change::is_links_Set() const{
    return m_links_isSet;
}

bool OAIIssue_change::is_links_Valid() const{
    return m_links_isValid;
}

OAIIssue_change_message OAIIssue_change::getMessage() const {
    return m_message;
}
void OAIIssue_change::setMessage(const OAIIssue_change_message &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIIssue_change::is_message_Set() const{
    return m_message_isSet;
}

bool OAIIssue_change::is_message_Valid() const{
    return m_message_isValid;
}

QString OAIIssue_change::getName() const {
    return m_name;
}
void OAIIssue_change::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIIssue_change::is_name_Set() const{
    return m_name_isSet;
}

bool OAIIssue_change::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIIssue_change::getType() const {
    return m_type;
}
void OAIIssue_change::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIIssue_change::is_type_Set() const{
    return m_type_isSet;
}

bool OAIIssue_change::is_type_Valid() const{
    return m_type_isValid;
}

OAIAccount OAIIssue_change::getUser() const {
    return m_user;
}
void OAIIssue_change::setUser(const OAIAccount &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAIIssue_change::is_user_Set() const{
    return m_user_isSet;
}

bool OAIIssue_change::is_user_Valid() const{
    return m_user_isValid;
}

bool OAIIssue_change::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_changes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_on_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_issue.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_links.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_message.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIssue_change::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_type_isValid && true;
}

} // namespace OpenAPI
