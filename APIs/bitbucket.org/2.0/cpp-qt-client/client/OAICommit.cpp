/**
 * Bitbucket API
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@bitbucket.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICommit.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICommit::OAICommit(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICommit::OAICommit() {
    this->initializeModel();
}

OAICommit::~OAICommit() {}

void OAICommit::initializeModel() {

    m_type_isSet = false;
    m_type_isValid = false;

    m_author_isSet = false;
    m_author_isValid = false;

    m_date_isSet = false;
    m_date_isValid = false;

    m_hash_isSet = false;
    m_hash_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_parents_isSet = false;
    m_parents_isValid = false;

    m_summary_isSet = false;
    m_summary_isValid = false;

    m_participants_isSet = false;
    m_participants_isValid = false;

    m_repository_isSet = false;
    m_repository_isValid = false;
}

void OAICommit::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICommit::fromJsonObject(QJsonObject json) {

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_author_isValid = ::OpenAPI::fromJsonValue(m_author, json[QString("author")]);
    m_author_isSet = !json[QString("author")].isNull() && m_author_isValid;

    m_date_isValid = ::OpenAPI::fromJsonValue(m_date, json[QString("date")]);
    m_date_isSet = !json[QString("date")].isNull() && m_date_isValid;

    m_hash_isValid = ::OpenAPI::fromJsonValue(m_hash, json[QString("hash")]);
    m_hash_isSet = !json[QString("hash")].isNull() && m_hash_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_parents_isValid = ::OpenAPI::fromJsonValue(m_parents, json[QString("parents")]);
    m_parents_isSet = !json[QString("parents")].isNull() && m_parents_isValid;

    m_summary_isValid = ::OpenAPI::fromJsonValue(m_summary, json[QString("summary")]);
    m_summary_isSet = !json[QString("summary")].isNull() && m_summary_isValid;

    m_participants_isValid = ::OpenAPI::fromJsonValue(m_participants, json[QString("participants")]);
    m_participants_isSet = !json[QString("participants")].isNull() && m_participants_isValid;

    m_repository_isValid = ::OpenAPI::fromJsonValue(m_repository, json[QString("repository")]);
    m_repository_isSet = !json[QString("repository")].isNull() && m_repository_isValid;
}

QString OAICommit::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICommit::asJsonObject() const {
    QJsonObject obj;
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_author.isSet()) {
        obj.insert(QString("author"), ::OpenAPI::toJsonValue(m_author));
    }
    if (m_date_isSet) {
        obj.insert(QString("date"), ::OpenAPI::toJsonValue(m_date));
    }
    if (m_hash_isSet) {
        obj.insert(QString("hash"), ::OpenAPI::toJsonValue(m_hash));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_parents.size() > 0) {
        obj.insert(QString("parents"), ::OpenAPI::toJsonValue(m_parents));
    }
    if (m_summary.isSet()) {
        obj.insert(QString("summary"), ::OpenAPI::toJsonValue(m_summary));
    }
    if (m_participants.size() > 0) {
        obj.insert(QString("participants"), ::OpenAPI::toJsonValue(m_participants));
    }
    if (m_repository.isSet()) {
        obj.insert(QString("repository"), ::OpenAPI::toJsonValue(m_repository));
    }
    return obj;
}

QString OAICommit::getType() const {
    return m_type;
}
void OAICommit::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAICommit::is_type_Set() const{
    return m_type_isSet;
}

bool OAICommit::is_type_Valid() const{
    return m_type_isValid;
}

OAIAuthor OAICommit::getAuthor() const {
    return m_author;
}
void OAICommit::setAuthor(const OAIAuthor &author) {
    m_author = author;
    m_author_isSet = true;
}

bool OAICommit::is_author_Set() const{
    return m_author_isSet;
}

bool OAICommit::is_author_Valid() const{
    return m_author_isValid;
}

QDateTime OAICommit::getDate() const {
    return m_date;
}
void OAICommit::setDate(const QDateTime &date) {
    m_date = date;
    m_date_isSet = true;
}

bool OAICommit::is_date_Set() const{
    return m_date_isSet;
}

bool OAICommit::is_date_Valid() const{
    return m_date_isValid;
}

QString OAICommit::getHash() const {
    return m_hash;
}
void OAICommit::setHash(const QString &hash) {
    m_hash = hash;
    m_hash_isSet = true;
}

bool OAICommit::is_hash_Set() const{
    return m_hash_isSet;
}

bool OAICommit::is_hash_Valid() const{
    return m_hash_isValid;
}

QString OAICommit::getMessage() const {
    return m_message;
}
void OAICommit::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAICommit::is_message_Set() const{
    return m_message_isSet;
}

bool OAICommit::is_message_Valid() const{
    return m_message_isValid;
}

QList<OAIBase_commit> OAICommit::getParents() const {
    return m_parents;
}
void OAICommit::setParents(const QList<OAIBase_commit> &parents) {
    m_parents = parents;
    m_parents_isSet = true;
}

bool OAICommit::is_parents_Set() const{
    return m_parents_isSet;
}

bool OAICommit::is_parents_Valid() const{
    return m_parents_isValid;
}

OAIBase_Commit_summary OAICommit::getSummary() const {
    return m_summary;
}
void OAICommit::setSummary(const OAIBase_Commit_summary &summary) {
    m_summary = summary;
    m_summary_isSet = true;
}

bool OAICommit::is_summary_Set() const{
    return m_summary_isSet;
}

bool OAICommit::is_summary_Valid() const{
    return m_summary_isValid;
}

QList<OAIParticipant> OAICommit::getParticipants() const {
    return m_participants;
}
void OAICommit::setParticipants(const QList<OAIParticipant> &participants) {
    m_participants = participants;
    m_participants_isSet = true;
}

bool OAICommit::is_participants_Set() const{
    return m_participants_isSet;
}

bool OAICommit::is_participants_Valid() const{
    return m_participants_isValid;
}

OAIRepository OAICommit::getRepository() const {
    return m_repository;
}
void OAICommit::setRepository(const OAIRepository &repository) {
    m_repository = repository;
    m_repository_isSet = true;
}

bool OAICommit::is_repository_Set() const{
    return m_repository_isSet;
}

bool OAICommit::is_repository_Valid() const{
    return m_repository_isValid;
}

bool OAICommit::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_author.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parents.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_summary.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_participants.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_repository.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICommit::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_type_isValid && true;
}

} // namespace OpenAPI
