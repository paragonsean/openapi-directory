/**
 * Bitbucket API
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@bitbucket.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIRepositoriesApi_H
#define OAI_OAIRepositoriesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIError.h"
#include "OAIPaginated_accounts.h"
#include "OAIPaginated_files.h"
#include "OAIPaginated_repositories.h"
#include "OAIPaginated_repository_group_permissions.h"
#include "OAIPaginated_repository_permissions.h"
#include "OAIPaginated_repository_user_permissions.h"
#include "OAIPaginated_treeentries.h"
#include "OAIPaginated_webhook_subscriptions.h"
#include "OAIRepository.h"
#include "OAIRepository_group_permission.h"
#include "OAIRepository_inheritance_state.h"
#include "OAIRepository_user_permission.h"
#include "OAIWebhook_subscription.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIRepositoriesApi : public QObject {
    Q_OBJECT

public:
    OAIRepositoriesApi(const int timeOut = 0);
    ~OAIRepositoriesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  after QString [optional]
    * @param[in]  role QString [optional]
    * @param[in]  q QString [optional]
    * @param[in]  sort QString [optional]
    */
    virtual void repositoriesGet(const ::OpenAPI::OptionalParam<QString> &after = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &role = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  workspace QString [required]
    * @param[in]  role QString [optional]
    * @param[in]  q QString [optional]
    * @param[in]  sort QString [optional]
    */
    virtual void repositoriesWorkspaceGet(const QString &workspace, const ::OpenAPI::OptionalParam<QString> &role = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  repo_slug QString [required]
    * @param[in]  workspace QString [required]
    * @param[in]  redirect_to QString [optional]
    */
    virtual void repositoriesWorkspaceRepoSlugDelete(const QString &repo_slug, const QString &workspace, const ::OpenAPI::OptionalParam<QString> &redirect_to = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  commit QString [required]
    * @param[in]  path QString [required]
    * @param[in]  repo_slug QString [required]
    * @param[in]  workspace QString [required]
    * @param[in]  renames QString [optional]
    * @param[in]  q QString [optional]
    * @param[in]  sort QString [optional]
    */
    virtual void repositoriesWorkspaceRepoSlugFilehistoryCommitPathGet(const QString &commit, const QString &path, const QString &repo_slug, const QString &workspace, const ::OpenAPI::OptionalParam<QString> &renames = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  repo_slug QString [required]
    * @param[in]  workspace QString [required]
    * @param[in]  role QString [optional]
    * @param[in]  q QString [optional]
    * @param[in]  sort QString [optional]
    */
    virtual void repositoriesWorkspaceRepoSlugForksGet(const QString &repo_slug, const QString &workspace, const ::OpenAPI::OptionalParam<QString> &role = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  repo_slug QString [required]
    * @param[in]  workspace QString [required]
    * @param[in]  oai_repository OAIRepository [optional]
    */
    virtual void repositoriesWorkspaceRepoSlugForksPost(const QString &repo_slug, const QString &workspace, const ::OpenAPI::OptionalParam<OAIRepository> &oai_repository = ::OpenAPI::OptionalParam<OAIRepository>());

    /**
    * @param[in]  repo_slug QString [required]
    * @param[in]  workspace QString [required]
    */
    virtual void repositoriesWorkspaceRepoSlugGet(const QString &repo_slug, const QString &workspace);

    /**
    * @param[in]  repo_slug QString [required]
    * @param[in]  workspace QString [required]
    */
    virtual void repositoriesWorkspaceRepoSlugHooksGet(const QString &repo_slug, const QString &workspace);

    /**
    * @param[in]  repo_slug QString [required]
    * @param[in]  workspace QString [required]
    */
    virtual void repositoriesWorkspaceRepoSlugHooksPost(const QString &repo_slug, const QString &workspace);

    /**
    * @param[in]  repo_slug QString [required]
    * @param[in]  uid QString [required]
    * @param[in]  workspace QString [required]
    */
    virtual void repositoriesWorkspaceRepoSlugHooksUidDelete(const QString &repo_slug, const QString &uid, const QString &workspace);

    /**
    * @param[in]  repo_slug QString [required]
    * @param[in]  uid QString [required]
    * @param[in]  workspace QString [required]
    */
    virtual void repositoriesWorkspaceRepoSlugHooksUidGet(const QString &repo_slug, const QString &uid, const QString &workspace);

    /**
    * @param[in]  repo_slug QString [required]
    * @param[in]  uid QString [required]
    * @param[in]  workspace QString [required]
    */
    virtual void repositoriesWorkspaceRepoSlugHooksUidPut(const QString &repo_slug, const QString &uid, const QString &workspace);

    /**
    * @param[in]  repo_slug QString [required]
    * @param[in]  workspace QString [required]
    */
    virtual void repositoriesWorkspaceRepoSlugOverrideSettingsGet(const QString &repo_slug, const QString &workspace);

    /**
    * @param[in]  repo_slug QString [required]
    * @param[in]  workspace QString [required]
    */
    virtual void repositoriesWorkspaceRepoSlugOverrideSettingsPut(const QString &repo_slug, const QString &workspace);

    /**
    * @param[in]  repo_slug QString [required]
    * @param[in]  workspace QString [required]
    */
    virtual void repositoriesWorkspaceRepoSlugPermissionsConfigGroupsGet(const QString &repo_slug, const QString &workspace);

    /**
    * @param[in]  group_slug QString [required]
    * @param[in]  repo_slug QString [required]
    * @param[in]  workspace QString [required]
    */
    virtual void repositoriesWorkspaceRepoSlugPermissionsConfigGroupsGroupSlugDelete(const QString &group_slug, const QString &repo_slug, const QString &workspace);

    /**
    * @param[in]  group_slug QString [required]
    * @param[in]  repo_slug QString [required]
    * @param[in]  workspace QString [required]
    */
    virtual void repositoriesWorkspaceRepoSlugPermissionsConfigGroupsGroupSlugGet(const QString &group_slug, const QString &repo_slug, const QString &workspace);

    /**
    * @param[in]  group_slug QString [required]
    * @param[in]  repo_slug QString [required]
    * @param[in]  workspace QString [required]
    */
    virtual void repositoriesWorkspaceRepoSlugPermissionsConfigGroupsGroupSlugPut(const QString &group_slug, const QString &repo_slug, const QString &workspace);

    /**
    * @param[in]  repo_slug QString [required]
    * @param[in]  workspace QString [required]
    */
    virtual void repositoriesWorkspaceRepoSlugPermissionsConfigUsersGet(const QString &repo_slug, const QString &workspace);

    /**
    * @param[in]  repo_slug QString [required]
    * @param[in]  selected_user_id QString [required]
    * @param[in]  workspace QString [required]
    */
    virtual void repositoriesWorkspaceRepoSlugPermissionsConfigUsersSelectedUserIdDelete(const QString &repo_slug, const QString &selected_user_id, const QString &workspace);

    /**
    * @param[in]  repo_slug QString [required]
    * @param[in]  selected_user_id QString [required]
    * @param[in]  workspace QString [required]
    */
    virtual void repositoriesWorkspaceRepoSlugPermissionsConfigUsersSelectedUserIdGet(const QString &repo_slug, const QString &selected_user_id, const QString &workspace);

    /**
    * @param[in]  repo_slug QString [required]
    * @param[in]  selected_user_id QString [required]
    * @param[in]  workspace QString [required]
    */
    virtual void repositoriesWorkspaceRepoSlugPermissionsConfigUsersSelectedUserIdPut(const QString &repo_slug, const QString &selected_user_id, const QString &workspace);

    /**
    * @param[in]  repo_slug QString [required]
    * @param[in]  workspace QString [required]
    * @param[in]  oai_repository OAIRepository [optional]
    */
    virtual void repositoriesWorkspaceRepoSlugPost(const QString &repo_slug, const QString &workspace, const ::OpenAPI::OptionalParam<OAIRepository> &oai_repository = ::OpenAPI::OptionalParam<OAIRepository>());

    /**
    * @param[in]  repo_slug QString [required]
    * @param[in]  workspace QString [required]
    * @param[in]  oai_repository OAIRepository [optional]
    */
    virtual void repositoriesWorkspaceRepoSlugPut(const QString &repo_slug, const QString &workspace, const ::OpenAPI::OptionalParam<OAIRepository> &oai_repository = ::OpenAPI::OptionalParam<OAIRepository>());

    /**
    * @param[in]  commit QString [required]
    * @param[in]  path QString [required]
    * @param[in]  repo_slug QString [required]
    * @param[in]  workspace QString [required]
    * @param[in]  format QString [optional]
    * @param[in]  q QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  max_depth qint32 [optional]
    */
    virtual void repositoriesWorkspaceRepoSlugSrcCommitPathGet(const QString &commit, const QString &path, const QString &repo_slug, const QString &workspace, const ::OpenAPI::OptionalParam<QString> &format = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_depth = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  repo_slug QString [required]
    * @param[in]  workspace QString [required]
    * @param[in]  format QString [optional]
    */
    virtual void repositoriesWorkspaceRepoSlugSrcGet(const QString &repo_slug, const QString &workspace, const ::OpenAPI::OptionalParam<QString> &format = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  repo_slug QString [required]
    * @param[in]  workspace QString [required]
    * @param[in]  message QString [optional]
    * @param[in]  author QString [optional]
    * @param[in]  parents QString [optional]
    * @param[in]  files QString [optional]
    * @param[in]  branch QString [optional]
    */
    virtual void repositoriesWorkspaceRepoSlugSrcPost(const QString &repo_slug, const QString &workspace, const ::OpenAPI::OptionalParam<QString> &message = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &author = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &parents = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &files = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &branch = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  repo_slug QString [required]
    * @param[in]  workspace QString [required]
    */
    virtual void repositoriesWorkspaceRepoSlugWatchersGet(const QString &repo_slug, const QString &workspace);

    /**
    * @param[in]  q QString [optional]
    * @param[in]  sort QString [optional]
    */
    virtual void userPermissionsRepositoriesGet(const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void repositoriesGetCallback(OAIHttpRequestWorker *worker);
    void repositoriesWorkspaceGetCallback(OAIHttpRequestWorker *worker);
    void repositoriesWorkspaceRepoSlugDeleteCallback(OAIHttpRequestWorker *worker);
    void repositoriesWorkspaceRepoSlugFilehistoryCommitPathGetCallback(OAIHttpRequestWorker *worker);
    void repositoriesWorkspaceRepoSlugForksGetCallback(OAIHttpRequestWorker *worker);
    void repositoriesWorkspaceRepoSlugForksPostCallback(OAIHttpRequestWorker *worker);
    void repositoriesWorkspaceRepoSlugGetCallback(OAIHttpRequestWorker *worker);
    void repositoriesWorkspaceRepoSlugHooksGetCallback(OAIHttpRequestWorker *worker);
    void repositoriesWorkspaceRepoSlugHooksPostCallback(OAIHttpRequestWorker *worker);
    void repositoriesWorkspaceRepoSlugHooksUidDeleteCallback(OAIHttpRequestWorker *worker);
    void repositoriesWorkspaceRepoSlugHooksUidGetCallback(OAIHttpRequestWorker *worker);
    void repositoriesWorkspaceRepoSlugHooksUidPutCallback(OAIHttpRequestWorker *worker);
    void repositoriesWorkspaceRepoSlugOverrideSettingsGetCallback(OAIHttpRequestWorker *worker);
    void repositoriesWorkspaceRepoSlugOverrideSettingsPutCallback(OAIHttpRequestWorker *worker);
    void repositoriesWorkspaceRepoSlugPermissionsConfigGroupsGetCallback(OAIHttpRequestWorker *worker);
    void repositoriesWorkspaceRepoSlugPermissionsConfigGroupsGroupSlugDeleteCallback(OAIHttpRequestWorker *worker);
    void repositoriesWorkspaceRepoSlugPermissionsConfigGroupsGroupSlugGetCallback(OAIHttpRequestWorker *worker);
    void repositoriesWorkspaceRepoSlugPermissionsConfigGroupsGroupSlugPutCallback(OAIHttpRequestWorker *worker);
    void repositoriesWorkspaceRepoSlugPermissionsConfigUsersGetCallback(OAIHttpRequestWorker *worker);
    void repositoriesWorkspaceRepoSlugPermissionsConfigUsersSelectedUserIdDeleteCallback(OAIHttpRequestWorker *worker);
    void repositoriesWorkspaceRepoSlugPermissionsConfigUsersSelectedUserIdGetCallback(OAIHttpRequestWorker *worker);
    void repositoriesWorkspaceRepoSlugPermissionsConfigUsersSelectedUserIdPutCallback(OAIHttpRequestWorker *worker);
    void repositoriesWorkspaceRepoSlugPostCallback(OAIHttpRequestWorker *worker);
    void repositoriesWorkspaceRepoSlugPutCallback(OAIHttpRequestWorker *worker);
    void repositoriesWorkspaceRepoSlugSrcCommitPathGetCallback(OAIHttpRequestWorker *worker);
    void repositoriesWorkspaceRepoSlugSrcGetCallback(OAIHttpRequestWorker *worker);
    void repositoriesWorkspaceRepoSlugSrcPostCallback(OAIHttpRequestWorker *worker);
    void repositoriesWorkspaceRepoSlugWatchersGetCallback(OAIHttpRequestWorker *worker);
    void userPermissionsRepositoriesGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void repositoriesGetSignal(OAIPaginated_repositories summary);
    void repositoriesWorkspaceGetSignal(OAIPaginated_repositories summary);
    void repositoriesWorkspaceRepoSlugDeleteSignal();
    void repositoriesWorkspaceRepoSlugFilehistoryCommitPathGetSignal(OAIPaginated_files summary);
    void repositoriesWorkspaceRepoSlugForksGetSignal(OAIPaginated_repositories summary);
    void repositoriesWorkspaceRepoSlugForksPostSignal(OAIRepository summary);
    void repositoriesWorkspaceRepoSlugGetSignal(OAIRepository summary);
    void repositoriesWorkspaceRepoSlugHooksGetSignal(OAIPaginated_webhook_subscriptions summary);
    void repositoriesWorkspaceRepoSlugHooksPostSignal(OAIWebhook_subscription summary);
    void repositoriesWorkspaceRepoSlugHooksUidDeleteSignal();
    void repositoriesWorkspaceRepoSlugHooksUidGetSignal(OAIWebhook_subscription summary);
    void repositoriesWorkspaceRepoSlugHooksUidPutSignal(OAIWebhook_subscription summary);
    void repositoriesWorkspaceRepoSlugOverrideSettingsGetSignal(OAIRepository_inheritance_state summary);
    void repositoriesWorkspaceRepoSlugOverrideSettingsPutSignal();
    void repositoriesWorkspaceRepoSlugPermissionsConfigGroupsGetSignal(OAIPaginated_repository_group_permissions summary);
    void repositoriesWorkspaceRepoSlugPermissionsConfigGroupsGroupSlugDeleteSignal();
    void repositoriesWorkspaceRepoSlugPermissionsConfigGroupsGroupSlugGetSignal(OAIRepository_group_permission summary);
    void repositoriesWorkspaceRepoSlugPermissionsConfigGroupsGroupSlugPutSignal(OAIRepository_group_permission summary);
    void repositoriesWorkspaceRepoSlugPermissionsConfigUsersGetSignal(OAIPaginated_repository_user_permissions summary);
    void repositoriesWorkspaceRepoSlugPermissionsConfigUsersSelectedUserIdDeleteSignal();
    void repositoriesWorkspaceRepoSlugPermissionsConfigUsersSelectedUserIdGetSignal(OAIRepository_user_permission summary);
    void repositoriesWorkspaceRepoSlugPermissionsConfigUsersSelectedUserIdPutSignal(OAIRepository_user_permission summary);
    void repositoriesWorkspaceRepoSlugPostSignal(OAIRepository summary);
    void repositoriesWorkspaceRepoSlugPutSignal(OAIRepository summary);
    void repositoriesWorkspaceRepoSlugSrcCommitPathGetSignal(OAIPaginated_treeentries summary);
    void repositoriesWorkspaceRepoSlugSrcGetSignal(OAIPaginated_treeentries summary);
    void repositoriesWorkspaceRepoSlugSrcPostSignal();
    void repositoriesWorkspaceRepoSlugWatchersGetSignal(OAIPaginated_accounts summary);
    void userPermissionsRepositoriesGetSignal(OAIPaginated_repository_permissions summary);


    void repositoriesGetSignalFull(OAIHttpRequestWorker *worker, OAIPaginated_repositories summary);
    void repositoriesWorkspaceGetSignalFull(OAIHttpRequestWorker *worker, OAIPaginated_repositories summary);
    void repositoriesWorkspaceRepoSlugDeleteSignalFull(OAIHttpRequestWorker *worker);
    void repositoriesWorkspaceRepoSlugFilehistoryCommitPathGetSignalFull(OAIHttpRequestWorker *worker, OAIPaginated_files summary);
    void repositoriesWorkspaceRepoSlugForksGetSignalFull(OAIHttpRequestWorker *worker, OAIPaginated_repositories summary);
    void repositoriesWorkspaceRepoSlugForksPostSignalFull(OAIHttpRequestWorker *worker, OAIRepository summary);
    void repositoriesWorkspaceRepoSlugGetSignalFull(OAIHttpRequestWorker *worker, OAIRepository summary);
    void repositoriesWorkspaceRepoSlugHooksGetSignalFull(OAIHttpRequestWorker *worker, OAIPaginated_webhook_subscriptions summary);
    void repositoriesWorkspaceRepoSlugHooksPostSignalFull(OAIHttpRequestWorker *worker, OAIWebhook_subscription summary);
    void repositoriesWorkspaceRepoSlugHooksUidDeleteSignalFull(OAIHttpRequestWorker *worker);
    void repositoriesWorkspaceRepoSlugHooksUidGetSignalFull(OAIHttpRequestWorker *worker, OAIWebhook_subscription summary);
    void repositoriesWorkspaceRepoSlugHooksUidPutSignalFull(OAIHttpRequestWorker *worker, OAIWebhook_subscription summary);
    void repositoriesWorkspaceRepoSlugOverrideSettingsGetSignalFull(OAIHttpRequestWorker *worker, OAIRepository_inheritance_state summary);
    void repositoriesWorkspaceRepoSlugOverrideSettingsPutSignalFull(OAIHttpRequestWorker *worker);
    void repositoriesWorkspaceRepoSlugPermissionsConfigGroupsGetSignalFull(OAIHttpRequestWorker *worker, OAIPaginated_repository_group_permissions summary);
    void repositoriesWorkspaceRepoSlugPermissionsConfigGroupsGroupSlugDeleteSignalFull(OAIHttpRequestWorker *worker);
    void repositoriesWorkspaceRepoSlugPermissionsConfigGroupsGroupSlugGetSignalFull(OAIHttpRequestWorker *worker, OAIRepository_group_permission summary);
    void repositoriesWorkspaceRepoSlugPermissionsConfigGroupsGroupSlugPutSignalFull(OAIHttpRequestWorker *worker, OAIRepository_group_permission summary);
    void repositoriesWorkspaceRepoSlugPermissionsConfigUsersGetSignalFull(OAIHttpRequestWorker *worker, OAIPaginated_repository_user_permissions summary);
    void repositoriesWorkspaceRepoSlugPermissionsConfigUsersSelectedUserIdDeleteSignalFull(OAIHttpRequestWorker *worker);
    void repositoriesWorkspaceRepoSlugPermissionsConfigUsersSelectedUserIdGetSignalFull(OAIHttpRequestWorker *worker, OAIRepository_user_permission summary);
    void repositoriesWorkspaceRepoSlugPermissionsConfigUsersSelectedUserIdPutSignalFull(OAIHttpRequestWorker *worker, OAIRepository_user_permission summary);
    void repositoriesWorkspaceRepoSlugPostSignalFull(OAIHttpRequestWorker *worker, OAIRepository summary);
    void repositoriesWorkspaceRepoSlugPutSignalFull(OAIHttpRequestWorker *worker, OAIRepository summary);
    void repositoriesWorkspaceRepoSlugSrcCommitPathGetSignalFull(OAIHttpRequestWorker *worker, OAIPaginated_treeentries summary);
    void repositoriesWorkspaceRepoSlugSrcGetSignalFull(OAIHttpRequestWorker *worker, OAIPaginated_treeentries summary);
    void repositoriesWorkspaceRepoSlugSrcPostSignalFull(OAIHttpRequestWorker *worker);
    void repositoriesWorkspaceRepoSlugWatchersGetSignalFull(OAIHttpRequestWorker *worker, OAIPaginated_accounts summary);
    void userPermissionsRepositoriesGetSignalFull(OAIHttpRequestWorker *worker, OAIPaginated_repository_permissions summary);

    Q_DECL_DEPRECATED_X("Use repositoriesGetSignalError() instead")
    void repositoriesGetSignalE(OAIPaginated_repositories summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesGetSignalError(OAIPaginated_repositories summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceGetSignalError() instead")
    void repositoriesWorkspaceGetSignalE(OAIPaginated_repositories summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceGetSignalError(OAIPaginated_repositories summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugDeleteSignalError() instead")
    void repositoriesWorkspaceRepoSlugDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugFilehistoryCommitPathGetSignalError() instead")
    void repositoriesWorkspaceRepoSlugFilehistoryCommitPathGetSignalE(OAIPaginated_files summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugFilehistoryCommitPathGetSignalError(OAIPaginated_files summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugForksGetSignalError() instead")
    void repositoriesWorkspaceRepoSlugForksGetSignalE(OAIPaginated_repositories summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugForksGetSignalError(OAIPaginated_repositories summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugForksPostSignalError() instead")
    void repositoriesWorkspaceRepoSlugForksPostSignalE(OAIRepository summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugForksPostSignalError(OAIRepository summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugGetSignalError() instead")
    void repositoriesWorkspaceRepoSlugGetSignalE(OAIRepository summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugGetSignalError(OAIRepository summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugHooksGetSignalError() instead")
    void repositoriesWorkspaceRepoSlugHooksGetSignalE(OAIPaginated_webhook_subscriptions summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugHooksGetSignalError(OAIPaginated_webhook_subscriptions summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugHooksPostSignalError() instead")
    void repositoriesWorkspaceRepoSlugHooksPostSignalE(OAIWebhook_subscription summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugHooksPostSignalError(OAIWebhook_subscription summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugHooksUidDeleteSignalError() instead")
    void repositoriesWorkspaceRepoSlugHooksUidDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugHooksUidDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugHooksUidGetSignalError() instead")
    void repositoriesWorkspaceRepoSlugHooksUidGetSignalE(OAIWebhook_subscription summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugHooksUidGetSignalError(OAIWebhook_subscription summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugHooksUidPutSignalError() instead")
    void repositoriesWorkspaceRepoSlugHooksUidPutSignalE(OAIWebhook_subscription summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugHooksUidPutSignalError(OAIWebhook_subscription summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugOverrideSettingsGetSignalError() instead")
    void repositoriesWorkspaceRepoSlugOverrideSettingsGetSignalE(OAIRepository_inheritance_state summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugOverrideSettingsGetSignalError(OAIRepository_inheritance_state summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugOverrideSettingsPutSignalError() instead")
    void repositoriesWorkspaceRepoSlugOverrideSettingsPutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugOverrideSettingsPutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugPermissionsConfigGroupsGetSignalError() instead")
    void repositoriesWorkspaceRepoSlugPermissionsConfigGroupsGetSignalE(OAIPaginated_repository_group_permissions summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugPermissionsConfigGroupsGetSignalError(OAIPaginated_repository_group_permissions summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugPermissionsConfigGroupsGroupSlugDeleteSignalError() instead")
    void repositoriesWorkspaceRepoSlugPermissionsConfigGroupsGroupSlugDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugPermissionsConfigGroupsGroupSlugDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugPermissionsConfigGroupsGroupSlugGetSignalError() instead")
    void repositoriesWorkspaceRepoSlugPermissionsConfigGroupsGroupSlugGetSignalE(OAIRepository_group_permission summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugPermissionsConfigGroupsGroupSlugGetSignalError(OAIRepository_group_permission summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugPermissionsConfigGroupsGroupSlugPutSignalError() instead")
    void repositoriesWorkspaceRepoSlugPermissionsConfigGroupsGroupSlugPutSignalE(OAIRepository_group_permission summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugPermissionsConfigGroupsGroupSlugPutSignalError(OAIRepository_group_permission summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugPermissionsConfigUsersGetSignalError() instead")
    void repositoriesWorkspaceRepoSlugPermissionsConfigUsersGetSignalE(OAIPaginated_repository_user_permissions summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugPermissionsConfigUsersGetSignalError(OAIPaginated_repository_user_permissions summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugPermissionsConfigUsersSelectedUserIdDeleteSignalError() instead")
    void repositoriesWorkspaceRepoSlugPermissionsConfigUsersSelectedUserIdDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugPermissionsConfigUsersSelectedUserIdDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugPermissionsConfigUsersSelectedUserIdGetSignalError() instead")
    void repositoriesWorkspaceRepoSlugPermissionsConfigUsersSelectedUserIdGetSignalE(OAIRepository_user_permission summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugPermissionsConfigUsersSelectedUserIdGetSignalError(OAIRepository_user_permission summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugPermissionsConfigUsersSelectedUserIdPutSignalError() instead")
    void repositoriesWorkspaceRepoSlugPermissionsConfigUsersSelectedUserIdPutSignalE(OAIRepository_user_permission summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugPermissionsConfigUsersSelectedUserIdPutSignalError(OAIRepository_user_permission summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugPostSignalError() instead")
    void repositoriesWorkspaceRepoSlugPostSignalE(OAIRepository summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugPostSignalError(OAIRepository summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugPutSignalError() instead")
    void repositoriesWorkspaceRepoSlugPutSignalE(OAIRepository summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugPutSignalError(OAIRepository summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugSrcCommitPathGetSignalError() instead")
    void repositoriesWorkspaceRepoSlugSrcCommitPathGetSignalE(OAIPaginated_treeentries summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugSrcCommitPathGetSignalError(OAIPaginated_treeentries summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugSrcGetSignalError() instead")
    void repositoriesWorkspaceRepoSlugSrcGetSignalE(OAIPaginated_treeentries summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugSrcGetSignalError(OAIPaginated_treeentries summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugSrcPostSignalError() instead")
    void repositoriesWorkspaceRepoSlugSrcPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugSrcPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugWatchersGetSignalError() instead")
    void repositoriesWorkspaceRepoSlugWatchersGetSignalE(OAIPaginated_accounts summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugWatchersGetSignalError(OAIPaginated_accounts summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userPermissionsRepositoriesGetSignalError() instead")
    void userPermissionsRepositoriesGetSignalE(OAIPaginated_repository_permissions summary, QNetworkReply::NetworkError error_type, QString error_str);
    void userPermissionsRepositoriesGetSignalError(OAIPaginated_repository_permissions summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use repositoriesGetSignalErrorFull() instead")
    void repositoriesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceGetSignalErrorFull() instead")
    void repositoriesWorkspaceGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugDeleteSignalErrorFull() instead")
    void repositoriesWorkspaceRepoSlugDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugFilehistoryCommitPathGetSignalErrorFull() instead")
    void repositoriesWorkspaceRepoSlugFilehistoryCommitPathGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugFilehistoryCommitPathGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugForksGetSignalErrorFull() instead")
    void repositoriesWorkspaceRepoSlugForksGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugForksGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugForksPostSignalErrorFull() instead")
    void repositoriesWorkspaceRepoSlugForksPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugForksPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugGetSignalErrorFull() instead")
    void repositoriesWorkspaceRepoSlugGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugHooksGetSignalErrorFull() instead")
    void repositoriesWorkspaceRepoSlugHooksGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugHooksGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugHooksPostSignalErrorFull() instead")
    void repositoriesWorkspaceRepoSlugHooksPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugHooksPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugHooksUidDeleteSignalErrorFull() instead")
    void repositoriesWorkspaceRepoSlugHooksUidDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugHooksUidDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugHooksUidGetSignalErrorFull() instead")
    void repositoriesWorkspaceRepoSlugHooksUidGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugHooksUidGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugHooksUidPutSignalErrorFull() instead")
    void repositoriesWorkspaceRepoSlugHooksUidPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugHooksUidPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugOverrideSettingsGetSignalErrorFull() instead")
    void repositoriesWorkspaceRepoSlugOverrideSettingsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugOverrideSettingsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugOverrideSettingsPutSignalErrorFull() instead")
    void repositoriesWorkspaceRepoSlugOverrideSettingsPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugOverrideSettingsPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugPermissionsConfigGroupsGetSignalErrorFull() instead")
    void repositoriesWorkspaceRepoSlugPermissionsConfigGroupsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugPermissionsConfigGroupsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugPermissionsConfigGroupsGroupSlugDeleteSignalErrorFull() instead")
    void repositoriesWorkspaceRepoSlugPermissionsConfigGroupsGroupSlugDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugPermissionsConfigGroupsGroupSlugDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugPermissionsConfigGroupsGroupSlugGetSignalErrorFull() instead")
    void repositoriesWorkspaceRepoSlugPermissionsConfigGroupsGroupSlugGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugPermissionsConfigGroupsGroupSlugGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugPermissionsConfigGroupsGroupSlugPutSignalErrorFull() instead")
    void repositoriesWorkspaceRepoSlugPermissionsConfigGroupsGroupSlugPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugPermissionsConfigGroupsGroupSlugPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugPermissionsConfigUsersGetSignalErrorFull() instead")
    void repositoriesWorkspaceRepoSlugPermissionsConfigUsersGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugPermissionsConfigUsersGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugPermissionsConfigUsersSelectedUserIdDeleteSignalErrorFull() instead")
    void repositoriesWorkspaceRepoSlugPermissionsConfigUsersSelectedUserIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugPermissionsConfigUsersSelectedUserIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugPermissionsConfigUsersSelectedUserIdGetSignalErrorFull() instead")
    void repositoriesWorkspaceRepoSlugPermissionsConfigUsersSelectedUserIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugPermissionsConfigUsersSelectedUserIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugPermissionsConfigUsersSelectedUserIdPutSignalErrorFull() instead")
    void repositoriesWorkspaceRepoSlugPermissionsConfigUsersSelectedUserIdPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugPermissionsConfigUsersSelectedUserIdPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugPostSignalErrorFull() instead")
    void repositoriesWorkspaceRepoSlugPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugPutSignalErrorFull() instead")
    void repositoriesWorkspaceRepoSlugPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugSrcCommitPathGetSignalErrorFull() instead")
    void repositoriesWorkspaceRepoSlugSrcCommitPathGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugSrcCommitPathGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugSrcGetSignalErrorFull() instead")
    void repositoriesWorkspaceRepoSlugSrcGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugSrcGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugSrcPostSignalErrorFull() instead")
    void repositoriesWorkspaceRepoSlugSrcPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugSrcPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugWatchersGetSignalErrorFull() instead")
    void repositoriesWorkspaceRepoSlugWatchersGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugWatchersGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userPermissionsRepositoriesGetSignalErrorFull() instead")
    void userPermissionsRepositoriesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void userPermissionsRepositoriesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
