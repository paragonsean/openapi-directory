/**
 * Bitbucket API
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@bitbucket.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProject.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProject::OAIProject(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProject::OAIProject() {
    this->initializeModel();
}

OAIProject::~OAIProject() {}

void OAIProject::initializeModel() {

    m_type_isSet = false;
    m_type_isValid = false;

    m_created_on_isSet = false;
    m_created_on_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_has_publicly_visible_repos_isSet = false;
    m_has_publicly_visible_repos_isValid = false;

    m_is_private_isSet = false;
    m_is_private_isValid = false;

    m_key_isSet = false;
    m_key_isValid = false;

    m_links_isSet = false;
    m_links_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_owner_isSet = false;
    m_owner_isValid = false;

    m_updated_on_isSet = false;
    m_updated_on_isValid = false;

    m_uuid_isSet = false;
    m_uuid_isValid = false;
}

void OAIProject::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProject::fromJsonObject(QJsonObject json) {

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_created_on_isValid = ::OpenAPI::fromJsonValue(m_created_on, json[QString("created_on")]);
    m_created_on_isSet = !json[QString("created_on")].isNull() && m_created_on_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_has_publicly_visible_repos_isValid = ::OpenAPI::fromJsonValue(m_has_publicly_visible_repos, json[QString("has_publicly_visible_repos")]);
    m_has_publicly_visible_repos_isSet = !json[QString("has_publicly_visible_repos")].isNull() && m_has_publicly_visible_repos_isValid;

    m_is_private_isValid = ::OpenAPI::fromJsonValue(m_is_private, json[QString("is_private")]);
    m_is_private_isSet = !json[QString("is_private")].isNull() && m_is_private_isValid;

    m_key_isValid = ::OpenAPI::fromJsonValue(m_key, json[QString("key")]);
    m_key_isSet = !json[QString("key")].isNull() && m_key_isValid;

    m_links_isValid = ::OpenAPI::fromJsonValue(m_links, json[QString("links")]);
    m_links_isSet = !json[QString("links")].isNull() && m_links_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_owner_isValid = ::OpenAPI::fromJsonValue(m_owner, json[QString("owner")]);
    m_owner_isSet = !json[QString("owner")].isNull() && m_owner_isValid;

    m_updated_on_isValid = ::OpenAPI::fromJsonValue(m_updated_on, json[QString("updated_on")]);
    m_updated_on_isSet = !json[QString("updated_on")].isNull() && m_updated_on_isValid;

    m_uuid_isValid = ::OpenAPI::fromJsonValue(m_uuid, json[QString("uuid")]);
    m_uuid_isSet = !json[QString("uuid")].isNull() && m_uuid_isValid;
}

QString OAIProject::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProject::asJsonObject() const {
    QJsonObject obj;
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_created_on_isSet) {
        obj.insert(QString("created_on"), ::OpenAPI::toJsonValue(m_created_on));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_has_publicly_visible_repos_isSet) {
        obj.insert(QString("has_publicly_visible_repos"), ::OpenAPI::toJsonValue(m_has_publicly_visible_repos));
    }
    if (m_is_private_isSet) {
        obj.insert(QString("is_private"), ::OpenAPI::toJsonValue(m_is_private));
    }
    if (m_key_isSet) {
        obj.insert(QString("key"), ::OpenAPI::toJsonValue(m_key));
    }
    if (m_links.isSet()) {
        obj.insert(QString("links"), ::OpenAPI::toJsonValue(m_links));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_owner.isSet()) {
        obj.insert(QString("owner"), ::OpenAPI::toJsonValue(m_owner));
    }
    if (m_updated_on_isSet) {
        obj.insert(QString("updated_on"), ::OpenAPI::toJsonValue(m_updated_on));
    }
    if (m_uuid_isSet) {
        obj.insert(QString("uuid"), ::OpenAPI::toJsonValue(m_uuid));
    }
    return obj;
}

QString OAIProject::getType() const {
    return m_type;
}
void OAIProject::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIProject::is_type_Set() const{
    return m_type_isSet;
}

bool OAIProject::is_type_Valid() const{
    return m_type_isValid;
}

QDateTime OAIProject::getCreatedOn() const {
    return m_created_on;
}
void OAIProject::setCreatedOn(const QDateTime &created_on) {
    m_created_on = created_on;
    m_created_on_isSet = true;
}

bool OAIProject::is_created_on_Set() const{
    return m_created_on_isSet;
}

bool OAIProject::is_created_on_Valid() const{
    return m_created_on_isValid;
}

QString OAIProject::getDescription() const {
    return m_description;
}
void OAIProject::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIProject::is_description_Set() const{
    return m_description_isSet;
}

bool OAIProject::is_description_Valid() const{
    return m_description_isValid;
}

bool OAIProject::isHasPubliclyVisibleRepos() const {
    return m_has_publicly_visible_repos;
}
void OAIProject::setHasPubliclyVisibleRepos(const bool &has_publicly_visible_repos) {
    m_has_publicly_visible_repos = has_publicly_visible_repos;
    m_has_publicly_visible_repos_isSet = true;
}

bool OAIProject::is_has_publicly_visible_repos_Set() const{
    return m_has_publicly_visible_repos_isSet;
}

bool OAIProject::is_has_publicly_visible_repos_Valid() const{
    return m_has_publicly_visible_repos_isValid;
}

bool OAIProject::isIsPrivate() const {
    return m_is_private;
}
void OAIProject::setIsPrivate(const bool &is_private) {
    m_is_private = is_private;
    m_is_private_isSet = true;
}

bool OAIProject::is_is_private_Set() const{
    return m_is_private_isSet;
}

bool OAIProject::is_is_private_Valid() const{
    return m_is_private_isValid;
}

QString OAIProject::getKey() const {
    return m_key;
}
void OAIProject::setKey(const QString &key) {
    m_key = key;
    m_key_isSet = true;
}

bool OAIProject::is_key_Set() const{
    return m_key_isSet;
}

bool OAIProject::is_key_Valid() const{
    return m_key_isValid;
}

OAIProject_links OAIProject::getLinks() const {
    return m_links;
}
void OAIProject::setLinks(const OAIProject_links &links) {
    m_links = links;
    m_links_isSet = true;
}

bool OAIProject::is_links_Set() const{
    return m_links_isSet;
}

bool OAIProject::is_links_Valid() const{
    return m_links_isValid;
}

QString OAIProject::getName() const {
    return m_name;
}
void OAIProject::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIProject::is_name_Set() const{
    return m_name_isSet;
}

bool OAIProject::is_name_Valid() const{
    return m_name_isValid;
}

OAITeam OAIProject::getOwner() const {
    return m_owner;
}
void OAIProject::setOwner(const OAITeam &owner) {
    m_owner = owner;
    m_owner_isSet = true;
}

bool OAIProject::is_owner_Set() const{
    return m_owner_isSet;
}

bool OAIProject::is_owner_Valid() const{
    return m_owner_isValid;
}

QDateTime OAIProject::getUpdatedOn() const {
    return m_updated_on;
}
void OAIProject::setUpdatedOn(const QDateTime &updated_on) {
    m_updated_on = updated_on;
    m_updated_on_isSet = true;
}

bool OAIProject::is_updated_on_Set() const{
    return m_updated_on_isSet;
}

bool OAIProject::is_updated_on_Valid() const{
    return m_updated_on_isValid;
}

QString OAIProject::getUuid() const {
    return m_uuid;
}
void OAIProject::setUuid(const QString &uuid) {
    m_uuid = uuid;
    m_uuid_isSet = true;
}

bool OAIProject::is_uuid_Set() const{
    return m_uuid_isSet;
}

bool OAIProject::is_uuid_Valid() const{
    return m_uuid_isValid;
}

bool OAIProject::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_on_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_publicly_visible_repos_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_private_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_links.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_on_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uuid_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProject::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_type_isValid && true;
}

} // namespace OpenAPI
