/**
 * Bitbucket API
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@bitbucket.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRequest_body_for_Pipeline_Schedule_POST_request_target.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRequest_body_for_Pipeline_Schedule_POST_request_target::OAIRequest_body_for_Pipeline_Schedule_POST_request_target(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRequest_body_for_Pipeline_Schedule_POST_request_target::OAIRequest_body_for_Pipeline_Schedule_POST_request_target() {
    this->initializeModel();
}

OAIRequest_body_for_Pipeline_Schedule_POST_request_target::~OAIRequest_body_for_Pipeline_Schedule_POST_request_target() {}

void OAIRequest_body_for_Pipeline_Schedule_POST_request_target::initializeModel() {

    m_ref_name_isSet = false;
    m_ref_name_isValid = false;

    m_ref_type_isSet = false;
    m_ref_type_isValid = false;

    m_selector_isSet = false;
    m_selector_isValid = false;
}

void OAIRequest_body_for_Pipeline_Schedule_POST_request_target::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRequest_body_for_Pipeline_Schedule_POST_request_target::fromJsonObject(QJsonObject json) {

    m_ref_name_isValid = ::OpenAPI::fromJsonValue(m_ref_name, json[QString("ref_name")]);
    m_ref_name_isSet = !json[QString("ref_name")].isNull() && m_ref_name_isValid;

    m_ref_type_isValid = ::OpenAPI::fromJsonValue(m_ref_type, json[QString("ref_type")]);
    m_ref_type_isSet = !json[QString("ref_type")].isNull() && m_ref_type_isValid;

    m_selector_isValid = ::OpenAPI::fromJsonValue(m_selector, json[QString("selector")]);
    m_selector_isSet = !json[QString("selector")].isNull() && m_selector_isValid;
}

QString OAIRequest_body_for_Pipeline_Schedule_POST_request_target::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRequest_body_for_Pipeline_Schedule_POST_request_target::asJsonObject() const {
    QJsonObject obj;
    if (m_ref_name_isSet) {
        obj.insert(QString("ref_name"), ::OpenAPI::toJsonValue(m_ref_name));
    }
    if (m_ref_type_isSet) {
        obj.insert(QString("ref_type"), ::OpenAPI::toJsonValue(m_ref_type));
    }
    if (m_selector.isSet()) {
        obj.insert(QString("selector"), ::OpenAPI::toJsonValue(m_selector));
    }
    return obj;
}

QString OAIRequest_body_for_Pipeline_Schedule_POST_request_target::getRefName() const {
    return m_ref_name;
}
void OAIRequest_body_for_Pipeline_Schedule_POST_request_target::setRefName(const QString &ref_name) {
    m_ref_name = ref_name;
    m_ref_name_isSet = true;
}

bool OAIRequest_body_for_Pipeline_Schedule_POST_request_target::is_ref_name_Set() const{
    return m_ref_name_isSet;
}

bool OAIRequest_body_for_Pipeline_Schedule_POST_request_target::is_ref_name_Valid() const{
    return m_ref_name_isValid;
}

QString OAIRequest_body_for_Pipeline_Schedule_POST_request_target::getRefType() const {
    return m_ref_type;
}
void OAIRequest_body_for_Pipeline_Schedule_POST_request_target::setRefType(const QString &ref_type) {
    m_ref_type = ref_type;
    m_ref_type_isSet = true;
}

bool OAIRequest_body_for_Pipeline_Schedule_POST_request_target::is_ref_type_Set() const{
    return m_ref_type_isSet;
}

bool OAIRequest_body_for_Pipeline_Schedule_POST_request_target::is_ref_type_Valid() const{
    return m_ref_type_isValid;
}

OAIPipeline_selector OAIRequest_body_for_Pipeline_Schedule_POST_request_target::getSelector() const {
    return m_selector;
}
void OAIRequest_body_for_Pipeline_Schedule_POST_request_target::setSelector(const OAIPipeline_selector &selector) {
    m_selector = selector;
    m_selector_isSet = true;
}

bool OAIRequest_body_for_Pipeline_Schedule_POST_request_target::is_selector_Set() const{
    return m_selector_isSet;
}

bool OAIRequest_body_for_Pipeline_Schedule_POST_request_target::is_selector_Valid() const{
    return m_selector_isValid;
}

bool OAIRequest_body_for_Pipeline_Schedule_POST_request_target::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ref_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ref_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_selector.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRequest_body_for_Pipeline_Schedule_POST_request_target::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_ref_name_isValid && m_ref_type_isValid && m_selector_isValid && true;
}

} // namespace OpenAPI
