/**
 * Bitbucket API
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@bitbucket.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReport_annotation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReport_annotation::OAIReport_annotation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReport_annotation::OAIReport_annotation() {
    this->initializeModel();
}

OAIReport_annotation::~OAIReport_annotation() {}

void OAIReport_annotation::initializeModel() {

    m_type_isSet = false;
    m_type_isValid = false;

    m_annotation_type_isSet = false;
    m_annotation_type_isValid = false;

    m_created_on_isSet = false;
    m_created_on_isValid = false;

    m_details_isSet = false;
    m_details_isValid = false;

    m_external_id_isSet = false;
    m_external_id_isValid = false;

    m_line_isSet = false;
    m_line_isValid = false;

    m_link_isSet = false;
    m_link_isValid = false;

    m_path_isSet = false;
    m_path_isValid = false;

    m_result_isSet = false;
    m_result_isValid = false;

    m_severity_isSet = false;
    m_severity_isValid = false;

    m_summary_isSet = false;
    m_summary_isValid = false;

    m_updated_on_isSet = false;
    m_updated_on_isValid = false;

    m_uuid_isSet = false;
    m_uuid_isValid = false;
}

void OAIReport_annotation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReport_annotation::fromJsonObject(QJsonObject json) {

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_annotation_type_isValid = ::OpenAPI::fromJsonValue(m_annotation_type, json[QString("annotation_type")]);
    m_annotation_type_isSet = !json[QString("annotation_type")].isNull() && m_annotation_type_isValid;

    m_created_on_isValid = ::OpenAPI::fromJsonValue(m_created_on, json[QString("created_on")]);
    m_created_on_isSet = !json[QString("created_on")].isNull() && m_created_on_isValid;

    m_details_isValid = ::OpenAPI::fromJsonValue(m_details, json[QString("details")]);
    m_details_isSet = !json[QString("details")].isNull() && m_details_isValid;

    m_external_id_isValid = ::OpenAPI::fromJsonValue(m_external_id, json[QString("external_id")]);
    m_external_id_isSet = !json[QString("external_id")].isNull() && m_external_id_isValid;

    m_line_isValid = ::OpenAPI::fromJsonValue(m_line, json[QString("line")]);
    m_line_isSet = !json[QString("line")].isNull() && m_line_isValid;

    m_link_isValid = ::OpenAPI::fromJsonValue(m_link, json[QString("link")]);
    m_link_isSet = !json[QString("link")].isNull() && m_link_isValid;

    m_path_isValid = ::OpenAPI::fromJsonValue(m_path, json[QString("path")]);
    m_path_isSet = !json[QString("path")].isNull() && m_path_isValid;

    m_result_isValid = ::OpenAPI::fromJsonValue(m_result, json[QString("result")]);
    m_result_isSet = !json[QString("result")].isNull() && m_result_isValid;

    m_severity_isValid = ::OpenAPI::fromJsonValue(m_severity, json[QString("severity")]);
    m_severity_isSet = !json[QString("severity")].isNull() && m_severity_isValid;

    m_summary_isValid = ::OpenAPI::fromJsonValue(m_summary, json[QString("summary")]);
    m_summary_isSet = !json[QString("summary")].isNull() && m_summary_isValid;

    m_updated_on_isValid = ::OpenAPI::fromJsonValue(m_updated_on, json[QString("updated_on")]);
    m_updated_on_isSet = !json[QString("updated_on")].isNull() && m_updated_on_isValid;

    m_uuid_isValid = ::OpenAPI::fromJsonValue(m_uuid, json[QString("uuid")]);
    m_uuid_isSet = !json[QString("uuid")].isNull() && m_uuid_isValid;
}

QString OAIReport_annotation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReport_annotation::asJsonObject() const {
    QJsonObject obj;
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_annotation_type_isSet) {
        obj.insert(QString("annotation_type"), ::OpenAPI::toJsonValue(m_annotation_type));
    }
    if (m_created_on_isSet) {
        obj.insert(QString("created_on"), ::OpenAPI::toJsonValue(m_created_on));
    }
    if (m_details_isSet) {
        obj.insert(QString("details"), ::OpenAPI::toJsonValue(m_details));
    }
    if (m_external_id_isSet) {
        obj.insert(QString("external_id"), ::OpenAPI::toJsonValue(m_external_id));
    }
    if (m_line_isSet) {
        obj.insert(QString("line"), ::OpenAPI::toJsonValue(m_line));
    }
    if (m_link_isSet) {
        obj.insert(QString("link"), ::OpenAPI::toJsonValue(m_link));
    }
    if (m_path_isSet) {
        obj.insert(QString("path"), ::OpenAPI::toJsonValue(m_path));
    }
    if (m_result_isSet) {
        obj.insert(QString("result"), ::OpenAPI::toJsonValue(m_result));
    }
    if (m_severity_isSet) {
        obj.insert(QString("severity"), ::OpenAPI::toJsonValue(m_severity));
    }
    if (m_summary_isSet) {
        obj.insert(QString("summary"), ::OpenAPI::toJsonValue(m_summary));
    }
    if (m_updated_on_isSet) {
        obj.insert(QString("updated_on"), ::OpenAPI::toJsonValue(m_updated_on));
    }
    if (m_uuid_isSet) {
        obj.insert(QString("uuid"), ::OpenAPI::toJsonValue(m_uuid));
    }
    return obj;
}

QString OAIReport_annotation::getType() const {
    return m_type;
}
void OAIReport_annotation::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIReport_annotation::is_type_Set() const{
    return m_type_isSet;
}

bool OAIReport_annotation::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIReport_annotation::getAnnotationType() const {
    return m_annotation_type;
}
void OAIReport_annotation::setAnnotationType(const QString &annotation_type) {
    m_annotation_type = annotation_type;
    m_annotation_type_isSet = true;
}

bool OAIReport_annotation::is_annotation_type_Set() const{
    return m_annotation_type_isSet;
}

bool OAIReport_annotation::is_annotation_type_Valid() const{
    return m_annotation_type_isValid;
}

QDateTime OAIReport_annotation::getCreatedOn() const {
    return m_created_on;
}
void OAIReport_annotation::setCreatedOn(const QDateTime &created_on) {
    m_created_on = created_on;
    m_created_on_isSet = true;
}

bool OAIReport_annotation::is_created_on_Set() const{
    return m_created_on_isSet;
}

bool OAIReport_annotation::is_created_on_Valid() const{
    return m_created_on_isValid;
}

QString OAIReport_annotation::getDetails() const {
    return m_details;
}
void OAIReport_annotation::setDetails(const QString &details) {
    m_details = details;
    m_details_isSet = true;
}

bool OAIReport_annotation::is_details_Set() const{
    return m_details_isSet;
}

bool OAIReport_annotation::is_details_Valid() const{
    return m_details_isValid;
}

QString OAIReport_annotation::getExternalId() const {
    return m_external_id;
}
void OAIReport_annotation::setExternalId(const QString &external_id) {
    m_external_id = external_id;
    m_external_id_isSet = true;
}

bool OAIReport_annotation::is_external_id_Set() const{
    return m_external_id_isSet;
}

bool OAIReport_annotation::is_external_id_Valid() const{
    return m_external_id_isValid;
}

qint32 OAIReport_annotation::getLine() const {
    return m_line;
}
void OAIReport_annotation::setLine(const qint32 &line) {
    m_line = line;
    m_line_isSet = true;
}

bool OAIReport_annotation::is_line_Set() const{
    return m_line_isSet;
}

bool OAIReport_annotation::is_line_Valid() const{
    return m_line_isValid;
}

QString OAIReport_annotation::getLink() const {
    return m_link;
}
void OAIReport_annotation::setLink(const QString &link) {
    m_link = link;
    m_link_isSet = true;
}

bool OAIReport_annotation::is_link_Set() const{
    return m_link_isSet;
}

bool OAIReport_annotation::is_link_Valid() const{
    return m_link_isValid;
}

QString OAIReport_annotation::getPath() const {
    return m_path;
}
void OAIReport_annotation::setPath(const QString &path) {
    m_path = path;
    m_path_isSet = true;
}

bool OAIReport_annotation::is_path_Set() const{
    return m_path_isSet;
}

bool OAIReport_annotation::is_path_Valid() const{
    return m_path_isValid;
}

QString OAIReport_annotation::getResult() const {
    return m_result;
}
void OAIReport_annotation::setResult(const QString &result) {
    m_result = result;
    m_result_isSet = true;
}

bool OAIReport_annotation::is_result_Set() const{
    return m_result_isSet;
}

bool OAIReport_annotation::is_result_Valid() const{
    return m_result_isValid;
}

QString OAIReport_annotation::getSeverity() const {
    return m_severity;
}
void OAIReport_annotation::setSeverity(const QString &severity) {
    m_severity = severity;
    m_severity_isSet = true;
}

bool OAIReport_annotation::is_severity_Set() const{
    return m_severity_isSet;
}

bool OAIReport_annotation::is_severity_Valid() const{
    return m_severity_isValid;
}

QString OAIReport_annotation::getSummary() const {
    return m_summary;
}
void OAIReport_annotation::setSummary(const QString &summary) {
    m_summary = summary;
    m_summary_isSet = true;
}

bool OAIReport_annotation::is_summary_Set() const{
    return m_summary_isSet;
}

bool OAIReport_annotation::is_summary_Valid() const{
    return m_summary_isValid;
}

QDateTime OAIReport_annotation::getUpdatedOn() const {
    return m_updated_on;
}
void OAIReport_annotation::setUpdatedOn(const QDateTime &updated_on) {
    m_updated_on = updated_on;
    m_updated_on_isSet = true;
}

bool OAIReport_annotation::is_updated_on_Set() const{
    return m_updated_on_isSet;
}

bool OAIReport_annotation::is_updated_on_Valid() const{
    return m_updated_on_isValid;
}

QString OAIReport_annotation::getUuid() const {
    return m_uuid;
}
void OAIReport_annotation::setUuid(const QString &uuid) {
    m_uuid = uuid;
    m_uuid_isSet = true;
}

bool OAIReport_annotation::is_uuid_Set() const{
    return m_uuid_isSet;
}

bool OAIReport_annotation::is_uuid_Valid() const{
    return m_uuid_isValid;
}

bool OAIReport_annotation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_annotation_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_on_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_details_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_line_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_result_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_severity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_summary_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_on_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uuid_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReport_annotation::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_type_isValid && true;
}

} // namespace OpenAPI
