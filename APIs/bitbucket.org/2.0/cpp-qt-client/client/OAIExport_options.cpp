/**
 * Bitbucket API
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@bitbucket.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExport_options.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExport_options::OAIExport_options(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExport_options::OAIExport_options() {
    this->initializeModel();
}

OAIExport_options::~OAIExport_options() {}

void OAIExport_options::initializeModel() {

    m_include_attachments_isSet = false;
    m_include_attachments_isValid = false;

    m_project_key_isSet = false;
    m_project_key_isValid = false;

    m_project_name_isSet = false;
    m_project_name_isValid = false;

    m_send_email_isSet = false;
    m_send_email_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIExport_options::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExport_options::fromJsonObject(QJsonObject json) {

    m_include_attachments_isValid = ::OpenAPI::fromJsonValue(m_include_attachments, json[QString("include_attachments")]);
    m_include_attachments_isSet = !json[QString("include_attachments")].isNull() && m_include_attachments_isValid;

    m_project_key_isValid = ::OpenAPI::fromJsonValue(m_project_key, json[QString("project_key")]);
    m_project_key_isSet = !json[QString("project_key")].isNull() && m_project_key_isValid;

    m_project_name_isValid = ::OpenAPI::fromJsonValue(m_project_name, json[QString("project_name")]);
    m_project_name_isSet = !json[QString("project_name")].isNull() && m_project_name_isValid;

    m_send_email_isValid = ::OpenAPI::fromJsonValue(m_send_email, json[QString("send_email")]);
    m_send_email_isSet = !json[QString("send_email")].isNull() && m_send_email_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIExport_options::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExport_options::asJsonObject() const {
    QJsonObject obj;
    if (m_include_attachments_isSet) {
        obj.insert(QString("include_attachments"), ::OpenAPI::toJsonValue(m_include_attachments));
    }
    if (m_project_key_isSet) {
        obj.insert(QString("project_key"), ::OpenAPI::toJsonValue(m_project_key));
    }
    if (m_project_name_isSet) {
        obj.insert(QString("project_name"), ::OpenAPI::toJsonValue(m_project_name));
    }
    if (m_send_email_isSet) {
        obj.insert(QString("send_email"), ::OpenAPI::toJsonValue(m_send_email));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

bool OAIExport_options::isIncludeAttachments() const {
    return m_include_attachments;
}
void OAIExport_options::setIncludeAttachments(const bool &include_attachments) {
    m_include_attachments = include_attachments;
    m_include_attachments_isSet = true;
}

bool OAIExport_options::is_include_attachments_Set() const{
    return m_include_attachments_isSet;
}

bool OAIExport_options::is_include_attachments_Valid() const{
    return m_include_attachments_isValid;
}

QString OAIExport_options::getProjectKey() const {
    return m_project_key;
}
void OAIExport_options::setProjectKey(const QString &project_key) {
    m_project_key = project_key;
    m_project_key_isSet = true;
}

bool OAIExport_options::is_project_key_Set() const{
    return m_project_key_isSet;
}

bool OAIExport_options::is_project_key_Valid() const{
    return m_project_key_isValid;
}

QString OAIExport_options::getProjectName() const {
    return m_project_name;
}
void OAIExport_options::setProjectName(const QString &project_name) {
    m_project_name = project_name;
    m_project_name_isSet = true;
}

bool OAIExport_options::is_project_name_Set() const{
    return m_project_name_isSet;
}

bool OAIExport_options::is_project_name_Valid() const{
    return m_project_name_isValid;
}

bool OAIExport_options::isSendEmail() const {
    return m_send_email;
}
void OAIExport_options::setSendEmail(const bool &send_email) {
    m_send_email = send_email;
    m_send_email_isSet = true;
}

bool OAIExport_options::is_send_email_Set() const{
    return m_send_email_isSet;
}

bool OAIExport_options::is_send_email_Valid() const{
    return m_send_email_isValid;
}

QString OAIExport_options::getType() const {
    return m_type;
}
void OAIExport_options::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIExport_options::is_type_Set() const{
    return m_type_isSet;
}

bool OAIExport_options::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIExport_options::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_include_attachments_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_send_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExport_options::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_type_isValid && true;
}

} // namespace OpenAPI
