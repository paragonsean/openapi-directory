/**
 * Bitbucket API
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@bitbucket.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDeploymentsApi_H
#define OAI_OAIDeploymentsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIDeploy_key.h"
#include "OAIDeployment.h"
#include "OAIDeployment_environment.h"
#include "OAIError.h"
#include "OAIPaginated_deploy_keys.h"
#include "OAIPaginated_deployments.h"
#include "OAIPaginated_environments.h"
#include "OAIPaginated_project_deploy_keys.h"
#include "OAIProject_deploy_key.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDeploymentsApi : public QObject {
    Q_OBJECT

public:
    OAIDeploymentsApi(const int timeOut = 0);
    ~OAIDeploymentsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  workspace QString [required]
    * @param[in]  repo_slug QString [required]
    * @param[in]  oai_deployment_environment OAIDeployment_environment [required]
    */
    virtual void createEnvironment(const QString &workspace, const QString &repo_slug, const OAIDeployment_environment &oai_deployment_environment);

    /**
    * @param[in]  workspace QString [required]
    * @param[in]  repo_slug QString [required]
    * @param[in]  environment_uuid QString [required]
    */
    virtual void deleteEnvironmentForRepository(const QString &workspace, const QString &repo_slug, const QString &environment_uuid);

    /**
    * @param[in]  workspace QString [required]
    * @param[in]  repo_slug QString [required]
    * @param[in]  deployment_uuid QString [required]
    */
    virtual void getDeploymentForRepository(const QString &workspace, const QString &repo_slug, const QString &deployment_uuid);

    /**
    * @param[in]  workspace QString [required]
    * @param[in]  repo_slug QString [required]
    */
    virtual void getDeploymentsForRepository(const QString &workspace, const QString &repo_slug);

    /**
    * @param[in]  workspace QString [required]
    * @param[in]  repo_slug QString [required]
    * @param[in]  environment_uuid QString [required]
    */
    virtual void getEnvironmentForRepository(const QString &workspace, const QString &repo_slug, const QString &environment_uuid);

    /**
    * @param[in]  workspace QString [required]
    * @param[in]  repo_slug QString [required]
    */
    virtual void getEnvironmentsForRepository(const QString &workspace, const QString &repo_slug);

    /**
    * @param[in]  repo_slug QString [required]
    * @param[in]  workspace QString [required]
    */
    virtual void repositoriesWorkspaceRepoSlugDeployKeysGet(const QString &repo_slug, const QString &workspace);

    /**
    * @param[in]  key_id QString [required]
    * @param[in]  repo_slug QString [required]
    * @param[in]  workspace QString [required]
    */
    virtual void repositoriesWorkspaceRepoSlugDeployKeysKeyIdDelete(const QString &key_id, const QString &repo_slug, const QString &workspace);

    /**
    * @param[in]  key_id QString [required]
    * @param[in]  repo_slug QString [required]
    * @param[in]  workspace QString [required]
    */
    virtual void repositoriesWorkspaceRepoSlugDeployKeysKeyIdGet(const QString &key_id, const QString &repo_slug, const QString &workspace);

    /**
    * @param[in]  key_id QString [required]
    * @param[in]  repo_slug QString [required]
    * @param[in]  workspace QString [required]
    */
    virtual void repositoriesWorkspaceRepoSlugDeployKeysKeyIdPut(const QString &key_id, const QString &repo_slug, const QString &workspace);

    /**
    * @param[in]  repo_slug QString [required]
    * @param[in]  workspace QString [required]
    */
    virtual void repositoriesWorkspaceRepoSlugDeployKeysPost(const QString &repo_slug, const QString &workspace);

    /**
    * @param[in]  workspace QString [required]
    * @param[in]  repo_slug QString [required]
    * @param[in]  environment_uuid QString [required]
    */
    virtual void updateEnvironmentForRepository(const QString &workspace, const QString &repo_slug, const QString &environment_uuid);

    /**
    * @param[in]  project_key QString [required]
    * @param[in]  workspace QString [required]
    */
    virtual void workspacesWorkspaceProjectsProjectKeyDeployKeysGet(const QString &project_key, const QString &workspace);

    /**
    * @param[in]  key_id QString [required]
    * @param[in]  project_key QString [required]
    * @param[in]  workspace QString [required]
    */
    virtual void workspacesWorkspaceProjectsProjectKeyDeployKeysKeyIdDelete(const QString &key_id, const QString &project_key, const QString &workspace);

    /**
    * @param[in]  key_id QString [required]
    * @param[in]  project_key QString [required]
    * @param[in]  workspace QString [required]
    */
    virtual void workspacesWorkspaceProjectsProjectKeyDeployKeysKeyIdGet(const QString &key_id, const QString &project_key, const QString &workspace);

    /**
    * @param[in]  project_key QString [required]
    * @param[in]  workspace QString [required]
    */
    virtual void workspacesWorkspaceProjectsProjectKeyDeployKeysPost(const QString &project_key, const QString &workspace);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createEnvironmentCallback(OAIHttpRequestWorker *worker);
    void deleteEnvironmentForRepositoryCallback(OAIHttpRequestWorker *worker);
    void getDeploymentForRepositoryCallback(OAIHttpRequestWorker *worker);
    void getDeploymentsForRepositoryCallback(OAIHttpRequestWorker *worker);
    void getEnvironmentForRepositoryCallback(OAIHttpRequestWorker *worker);
    void getEnvironmentsForRepositoryCallback(OAIHttpRequestWorker *worker);
    void repositoriesWorkspaceRepoSlugDeployKeysGetCallback(OAIHttpRequestWorker *worker);
    void repositoriesWorkspaceRepoSlugDeployKeysKeyIdDeleteCallback(OAIHttpRequestWorker *worker);
    void repositoriesWorkspaceRepoSlugDeployKeysKeyIdGetCallback(OAIHttpRequestWorker *worker);
    void repositoriesWorkspaceRepoSlugDeployKeysKeyIdPutCallback(OAIHttpRequestWorker *worker);
    void repositoriesWorkspaceRepoSlugDeployKeysPostCallback(OAIHttpRequestWorker *worker);
    void updateEnvironmentForRepositoryCallback(OAIHttpRequestWorker *worker);
    void workspacesWorkspaceProjectsProjectKeyDeployKeysGetCallback(OAIHttpRequestWorker *worker);
    void workspacesWorkspaceProjectsProjectKeyDeployKeysKeyIdDeleteCallback(OAIHttpRequestWorker *worker);
    void workspacesWorkspaceProjectsProjectKeyDeployKeysKeyIdGetCallback(OAIHttpRequestWorker *worker);
    void workspacesWorkspaceProjectsProjectKeyDeployKeysPostCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createEnvironmentSignal(OAIDeployment_environment summary);
    void deleteEnvironmentForRepositorySignal();
    void getDeploymentForRepositorySignal(OAIDeployment summary);
    void getDeploymentsForRepositorySignal(OAIPaginated_deployments summary);
    void getEnvironmentForRepositorySignal(OAIDeployment_environment summary);
    void getEnvironmentsForRepositorySignal(OAIPaginated_environments summary);
    void repositoriesWorkspaceRepoSlugDeployKeysGetSignal(OAIPaginated_deploy_keys summary);
    void repositoriesWorkspaceRepoSlugDeployKeysKeyIdDeleteSignal();
    void repositoriesWorkspaceRepoSlugDeployKeysKeyIdGetSignal(OAIDeploy_key summary);
    void repositoriesWorkspaceRepoSlugDeployKeysKeyIdPutSignal(OAIDeploy_key summary);
    void repositoriesWorkspaceRepoSlugDeployKeysPostSignal(OAIDeploy_key summary);
    void updateEnvironmentForRepositorySignal();
    void workspacesWorkspaceProjectsProjectKeyDeployKeysGetSignal(OAIPaginated_project_deploy_keys summary);
    void workspacesWorkspaceProjectsProjectKeyDeployKeysKeyIdDeleteSignal();
    void workspacesWorkspaceProjectsProjectKeyDeployKeysKeyIdGetSignal(OAIProject_deploy_key summary);
    void workspacesWorkspaceProjectsProjectKeyDeployKeysPostSignal(OAIProject_deploy_key summary);


    void createEnvironmentSignalFull(OAIHttpRequestWorker *worker, OAIDeployment_environment summary);
    void deleteEnvironmentForRepositorySignalFull(OAIHttpRequestWorker *worker);
    void getDeploymentForRepositorySignalFull(OAIHttpRequestWorker *worker, OAIDeployment summary);
    void getDeploymentsForRepositorySignalFull(OAIHttpRequestWorker *worker, OAIPaginated_deployments summary);
    void getEnvironmentForRepositorySignalFull(OAIHttpRequestWorker *worker, OAIDeployment_environment summary);
    void getEnvironmentsForRepositorySignalFull(OAIHttpRequestWorker *worker, OAIPaginated_environments summary);
    void repositoriesWorkspaceRepoSlugDeployKeysGetSignalFull(OAIHttpRequestWorker *worker, OAIPaginated_deploy_keys summary);
    void repositoriesWorkspaceRepoSlugDeployKeysKeyIdDeleteSignalFull(OAIHttpRequestWorker *worker);
    void repositoriesWorkspaceRepoSlugDeployKeysKeyIdGetSignalFull(OAIHttpRequestWorker *worker, OAIDeploy_key summary);
    void repositoriesWorkspaceRepoSlugDeployKeysKeyIdPutSignalFull(OAIHttpRequestWorker *worker, OAIDeploy_key summary);
    void repositoriesWorkspaceRepoSlugDeployKeysPostSignalFull(OAIHttpRequestWorker *worker, OAIDeploy_key summary);
    void updateEnvironmentForRepositorySignalFull(OAIHttpRequestWorker *worker);
    void workspacesWorkspaceProjectsProjectKeyDeployKeysGetSignalFull(OAIHttpRequestWorker *worker, OAIPaginated_project_deploy_keys summary);
    void workspacesWorkspaceProjectsProjectKeyDeployKeysKeyIdDeleteSignalFull(OAIHttpRequestWorker *worker);
    void workspacesWorkspaceProjectsProjectKeyDeployKeysKeyIdGetSignalFull(OAIHttpRequestWorker *worker, OAIProject_deploy_key summary);
    void workspacesWorkspaceProjectsProjectKeyDeployKeysPostSignalFull(OAIHttpRequestWorker *worker, OAIProject_deploy_key summary);

    Q_DECL_DEPRECATED_X("Use createEnvironmentSignalError() instead")
    void createEnvironmentSignalE(OAIDeployment_environment summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createEnvironmentSignalError(OAIDeployment_environment summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteEnvironmentForRepositorySignalError() instead")
    void deleteEnvironmentForRepositorySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteEnvironmentForRepositorySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeploymentForRepositorySignalError() instead")
    void getDeploymentForRepositorySignalE(OAIDeployment summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeploymentForRepositorySignalError(OAIDeployment summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeploymentsForRepositorySignalError() instead")
    void getDeploymentsForRepositorySignalE(OAIPaginated_deployments summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeploymentsForRepositorySignalError(OAIPaginated_deployments summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEnvironmentForRepositorySignalError() instead")
    void getEnvironmentForRepositorySignalE(OAIDeployment_environment summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getEnvironmentForRepositorySignalError(OAIDeployment_environment summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEnvironmentsForRepositorySignalError() instead")
    void getEnvironmentsForRepositorySignalE(OAIPaginated_environments summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getEnvironmentsForRepositorySignalError(OAIPaginated_environments summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugDeployKeysGetSignalError() instead")
    void repositoriesWorkspaceRepoSlugDeployKeysGetSignalE(OAIPaginated_deploy_keys summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugDeployKeysGetSignalError(OAIPaginated_deploy_keys summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugDeployKeysKeyIdDeleteSignalError() instead")
    void repositoriesWorkspaceRepoSlugDeployKeysKeyIdDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugDeployKeysKeyIdDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugDeployKeysKeyIdGetSignalError() instead")
    void repositoriesWorkspaceRepoSlugDeployKeysKeyIdGetSignalE(OAIDeploy_key summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugDeployKeysKeyIdGetSignalError(OAIDeploy_key summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugDeployKeysKeyIdPutSignalError() instead")
    void repositoriesWorkspaceRepoSlugDeployKeysKeyIdPutSignalE(OAIDeploy_key summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugDeployKeysKeyIdPutSignalError(OAIDeploy_key summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugDeployKeysPostSignalError() instead")
    void repositoriesWorkspaceRepoSlugDeployKeysPostSignalE(OAIDeploy_key summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugDeployKeysPostSignalError(OAIDeploy_key summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateEnvironmentForRepositorySignalError() instead")
    void updateEnvironmentForRepositorySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateEnvironmentForRepositorySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workspacesWorkspaceProjectsProjectKeyDeployKeysGetSignalError() instead")
    void workspacesWorkspaceProjectsProjectKeyDeployKeysGetSignalE(OAIPaginated_project_deploy_keys summary, QNetworkReply::NetworkError error_type, QString error_str);
    void workspacesWorkspaceProjectsProjectKeyDeployKeysGetSignalError(OAIPaginated_project_deploy_keys summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workspacesWorkspaceProjectsProjectKeyDeployKeysKeyIdDeleteSignalError() instead")
    void workspacesWorkspaceProjectsProjectKeyDeployKeysKeyIdDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void workspacesWorkspaceProjectsProjectKeyDeployKeysKeyIdDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workspacesWorkspaceProjectsProjectKeyDeployKeysKeyIdGetSignalError() instead")
    void workspacesWorkspaceProjectsProjectKeyDeployKeysKeyIdGetSignalE(OAIProject_deploy_key summary, QNetworkReply::NetworkError error_type, QString error_str);
    void workspacesWorkspaceProjectsProjectKeyDeployKeysKeyIdGetSignalError(OAIProject_deploy_key summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workspacesWorkspaceProjectsProjectKeyDeployKeysPostSignalError() instead")
    void workspacesWorkspaceProjectsProjectKeyDeployKeysPostSignalE(OAIProject_deploy_key summary, QNetworkReply::NetworkError error_type, QString error_str);
    void workspacesWorkspaceProjectsProjectKeyDeployKeysPostSignalError(OAIProject_deploy_key summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createEnvironmentSignalErrorFull() instead")
    void createEnvironmentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createEnvironmentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteEnvironmentForRepositorySignalErrorFull() instead")
    void deleteEnvironmentForRepositorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteEnvironmentForRepositorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeploymentForRepositorySignalErrorFull() instead")
    void getDeploymentForRepositorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeploymentForRepositorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeploymentsForRepositorySignalErrorFull() instead")
    void getDeploymentsForRepositorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeploymentsForRepositorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEnvironmentForRepositorySignalErrorFull() instead")
    void getEnvironmentForRepositorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getEnvironmentForRepositorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEnvironmentsForRepositorySignalErrorFull() instead")
    void getEnvironmentsForRepositorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getEnvironmentsForRepositorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugDeployKeysGetSignalErrorFull() instead")
    void repositoriesWorkspaceRepoSlugDeployKeysGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugDeployKeysGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugDeployKeysKeyIdDeleteSignalErrorFull() instead")
    void repositoriesWorkspaceRepoSlugDeployKeysKeyIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugDeployKeysKeyIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugDeployKeysKeyIdGetSignalErrorFull() instead")
    void repositoriesWorkspaceRepoSlugDeployKeysKeyIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugDeployKeysKeyIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugDeployKeysKeyIdPutSignalErrorFull() instead")
    void repositoriesWorkspaceRepoSlugDeployKeysKeyIdPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugDeployKeysKeyIdPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesWorkspaceRepoSlugDeployKeysPostSignalErrorFull() instead")
    void repositoriesWorkspaceRepoSlugDeployKeysPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesWorkspaceRepoSlugDeployKeysPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateEnvironmentForRepositorySignalErrorFull() instead")
    void updateEnvironmentForRepositorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateEnvironmentForRepositorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workspacesWorkspaceProjectsProjectKeyDeployKeysGetSignalErrorFull() instead")
    void workspacesWorkspaceProjectsProjectKeyDeployKeysGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void workspacesWorkspaceProjectsProjectKeyDeployKeysGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workspacesWorkspaceProjectsProjectKeyDeployKeysKeyIdDeleteSignalErrorFull() instead")
    void workspacesWorkspaceProjectsProjectKeyDeployKeysKeyIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void workspacesWorkspaceProjectsProjectKeyDeployKeysKeyIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workspacesWorkspaceProjectsProjectKeyDeployKeysKeyIdGetSignalErrorFull() instead")
    void workspacesWorkspaceProjectsProjectKeyDeployKeysKeyIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void workspacesWorkspaceProjectsProjectKeyDeployKeysKeyIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workspacesWorkspaceProjectsProjectKeyDeployKeysPostSignalErrorFull() instead")
    void workspacesWorkspaceProjectsProjectKeyDeployKeysPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void workspacesWorkspaceProjectsProjectKeyDeployKeysPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
