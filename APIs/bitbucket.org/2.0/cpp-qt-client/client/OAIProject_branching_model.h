/**
 * Bitbucket API
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@bitbucket.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIProject_branching_model.h
 *
 * 
 */

#ifndef OAIProject_branching_model_H
#define OAIProject_branching_model_H

#include <QJsonObject>

#include "OAIBranching_Model_branch_types.h"
#include "OAIProject_Branching_Model_development.h"
#include "object.h"
#include <QJsonValue>
#include <QSet>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIBranching_Model_branch_types;
class OAIProject_Branching_Model_development;

class OAIProject_branching_model : public OAIObject {
public:
    OAIProject_branching_model();
    OAIProject_branching_model(QString json);
    ~OAIProject_branching_model() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getType() const;
    void setType(const QString &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    QSet<OAIBranching_Model_branch_types> getBranchTypes() const;
    void setBranchTypes(const QSet<OAIBranching_Model_branch_types> &branch_types);
    bool is_branch_types_Set() const;
    bool is_branch_types_Valid() const;

    OAIProject_Branching_Model_development getDevelopment() const;
    void setDevelopment(const OAIProject_Branching_Model_development &development);
    bool is_development_Set() const;
    bool is_development_Valid() const;

    OAIProject_Branching_Model_development getProduction() const;
    void setProduction(const OAIProject_Branching_Model_development &production);
    bool is_production_Set() const;
    bool is_production_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_type;
    bool m_type_isSet;
    bool m_type_isValid;

    QSet<OAIBranching_Model_branch_types> m_branch_types;
    bool m_branch_types_isSet;
    bool m_branch_types_isValid;

    OAIProject_Branching_Model_development m_development;
    bool m_development_isSet;
    bool m_development_isValid;

    OAIProject_Branching_Model_development m_production;
    bool m_production_isSet;
    bool m_production_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIProject_branching_model)

#endif // OAIProject_branching_model_H
