/**
 * Bitbucket API
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@bitbucket.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAISshApi_H
#define OAI_OAISshApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIError.h"
#include "OAIPaginated_ssh_user_keys.h"
#include "OAISsh_account_key.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAISshApi : public QObject {
    Q_OBJECT

public:
    OAISshApi(const int timeOut = 0);
    ~OAISshApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  selected_user QString [required]
    */
    virtual void usersSelectedUserSshKeysGet(const QString &selected_user);

    /**
    * @param[in]  key_id QString [required]
    * @param[in]  selected_user QString [required]
    */
    virtual void usersSelectedUserSshKeysKeyIdDelete(const QString &key_id, const QString &selected_user);

    /**
    * @param[in]  key_id QString [required]
    * @param[in]  selected_user QString [required]
    */
    virtual void usersSelectedUserSshKeysKeyIdGet(const QString &key_id, const QString &selected_user);

    /**
    * @param[in]  key_id QString [required]
    * @param[in]  selected_user QString [required]
    * @param[in]  oai_ssh_account_key OAISsh_account_key [optional]
    */
    virtual void usersSelectedUserSshKeysKeyIdPut(const QString &key_id, const QString &selected_user, const ::OpenAPI::OptionalParam<OAISsh_account_key> &oai_ssh_account_key = ::OpenAPI::OptionalParam<OAISsh_account_key>());

    /**
    * @param[in]  selected_user QString [required]
    * @param[in]  oai_ssh_account_key OAISsh_account_key [optional]
    */
    virtual void usersSelectedUserSshKeysPost(const QString &selected_user, const ::OpenAPI::OptionalParam<OAISsh_account_key> &oai_ssh_account_key = ::OpenAPI::OptionalParam<OAISsh_account_key>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void usersSelectedUserSshKeysGetCallback(OAIHttpRequestWorker *worker);
    void usersSelectedUserSshKeysKeyIdDeleteCallback(OAIHttpRequestWorker *worker);
    void usersSelectedUserSshKeysKeyIdGetCallback(OAIHttpRequestWorker *worker);
    void usersSelectedUserSshKeysKeyIdPutCallback(OAIHttpRequestWorker *worker);
    void usersSelectedUserSshKeysPostCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void usersSelectedUserSshKeysGetSignal(OAIPaginated_ssh_user_keys summary);
    void usersSelectedUserSshKeysKeyIdDeleteSignal();
    void usersSelectedUserSshKeysKeyIdGetSignal(OAISsh_account_key summary);
    void usersSelectedUserSshKeysKeyIdPutSignal(OAISsh_account_key summary);
    void usersSelectedUserSshKeysPostSignal(OAISsh_account_key summary);


    void usersSelectedUserSshKeysGetSignalFull(OAIHttpRequestWorker *worker, OAIPaginated_ssh_user_keys summary);
    void usersSelectedUserSshKeysKeyIdDeleteSignalFull(OAIHttpRequestWorker *worker);
    void usersSelectedUserSshKeysKeyIdGetSignalFull(OAIHttpRequestWorker *worker, OAISsh_account_key summary);
    void usersSelectedUserSshKeysKeyIdPutSignalFull(OAIHttpRequestWorker *worker, OAISsh_account_key summary);
    void usersSelectedUserSshKeysPostSignalFull(OAIHttpRequestWorker *worker, OAISsh_account_key summary);

    Q_DECL_DEPRECATED_X("Use usersSelectedUserSshKeysGetSignalError() instead")
    void usersSelectedUserSshKeysGetSignalE(OAIPaginated_ssh_user_keys summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersSelectedUserSshKeysGetSignalError(OAIPaginated_ssh_user_keys summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersSelectedUserSshKeysKeyIdDeleteSignalError() instead")
    void usersSelectedUserSshKeysKeyIdDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void usersSelectedUserSshKeysKeyIdDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersSelectedUserSshKeysKeyIdGetSignalError() instead")
    void usersSelectedUserSshKeysKeyIdGetSignalE(OAISsh_account_key summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersSelectedUserSshKeysKeyIdGetSignalError(OAISsh_account_key summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersSelectedUserSshKeysKeyIdPutSignalError() instead")
    void usersSelectedUserSshKeysKeyIdPutSignalE(OAISsh_account_key summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersSelectedUserSshKeysKeyIdPutSignalError(OAISsh_account_key summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersSelectedUserSshKeysPostSignalError() instead")
    void usersSelectedUserSshKeysPostSignalE(OAISsh_account_key summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersSelectedUserSshKeysPostSignalError(OAISsh_account_key summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use usersSelectedUserSshKeysGetSignalErrorFull() instead")
    void usersSelectedUserSshKeysGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersSelectedUserSshKeysGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersSelectedUserSshKeysKeyIdDeleteSignalErrorFull() instead")
    void usersSelectedUserSshKeysKeyIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersSelectedUserSshKeysKeyIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersSelectedUserSshKeysKeyIdGetSignalErrorFull() instead")
    void usersSelectedUserSshKeysKeyIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersSelectedUserSshKeysKeyIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersSelectedUserSshKeysKeyIdPutSignalErrorFull() instead")
    void usersSelectedUserSshKeysKeyIdPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersSelectedUserSshKeysKeyIdPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersSelectedUserSshKeysPostSignalErrorFull() instead")
    void usersSelectedUserSshKeysPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersSelectedUserSshKeysPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
