/**
 * Bitbucket API
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@bitbucket.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPipeline_step.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPipeline_step::OAIPipeline_step(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPipeline_step::OAIPipeline_step() {
    this->initializeModel();
}

OAIPipeline_step::~OAIPipeline_step() {}

void OAIPipeline_step::initializeModel() {

    m_type_isSet = false;
    m_type_isValid = false;

    m_completed_on_isSet = false;
    m_completed_on_isValid = false;

    m_image_isSet = false;
    m_image_isValid = false;

    m_script_commands_isSet = false;
    m_script_commands_isValid = false;

    m_setup_commands_isSet = false;
    m_setup_commands_isValid = false;

    m_started_on_isSet = false;
    m_started_on_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_uuid_isSet = false;
    m_uuid_isValid = false;
}

void OAIPipeline_step::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPipeline_step::fromJsonObject(QJsonObject json) {

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_completed_on_isValid = ::OpenAPI::fromJsonValue(m_completed_on, json[QString("completed_on")]);
    m_completed_on_isSet = !json[QString("completed_on")].isNull() && m_completed_on_isValid;

    m_image_isValid = ::OpenAPI::fromJsonValue(m_image, json[QString("image")]);
    m_image_isSet = !json[QString("image")].isNull() && m_image_isValid;

    m_script_commands_isValid = ::OpenAPI::fromJsonValue(m_script_commands, json[QString("script_commands")]);
    m_script_commands_isSet = !json[QString("script_commands")].isNull() && m_script_commands_isValid;

    m_setup_commands_isValid = ::OpenAPI::fromJsonValue(m_setup_commands, json[QString("setup_commands")]);
    m_setup_commands_isSet = !json[QString("setup_commands")].isNull() && m_setup_commands_isValid;

    m_started_on_isValid = ::OpenAPI::fromJsonValue(m_started_on, json[QString("started_on")]);
    m_started_on_isSet = !json[QString("started_on")].isNull() && m_started_on_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_uuid_isValid = ::OpenAPI::fromJsonValue(m_uuid, json[QString("uuid")]);
    m_uuid_isSet = !json[QString("uuid")].isNull() && m_uuid_isValid;
}

QString OAIPipeline_step::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPipeline_step::asJsonObject() const {
    QJsonObject obj;
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_completed_on_isSet) {
        obj.insert(QString("completed_on"), ::OpenAPI::toJsonValue(m_completed_on));
    }
    if (m_image.isSet()) {
        obj.insert(QString("image"), ::OpenAPI::toJsonValue(m_image));
    }
    if (m_script_commands.size() > 0) {
        obj.insert(QString("script_commands"), ::OpenAPI::toJsonValue(m_script_commands));
    }
    if (m_setup_commands.size() > 0) {
        obj.insert(QString("setup_commands"), ::OpenAPI::toJsonValue(m_setup_commands));
    }
    if (m_started_on_isSet) {
        obj.insert(QString("started_on"), ::OpenAPI::toJsonValue(m_started_on));
    }
    if (m_state.isSet()) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_uuid_isSet) {
        obj.insert(QString("uuid"), ::OpenAPI::toJsonValue(m_uuid));
    }
    return obj;
}

QString OAIPipeline_step::getType() const {
    return m_type;
}
void OAIPipeline_step::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIPipeline_step::is_type_Set() const{
    return m_type_isSet;
}

bool OAIPipeline_step::is_type_Valid() const{
    return m_type_isValid;
}

QDateTime OAIPipeline_step::getCompletedOn() const {
    return m_completed_on;
}
void OAIPipeline_step::setCompletedOn(const QDateTime &completed_on) {
    m_completed_on = completed_on;
    m_completed_on_isSet = true;
}

bool OAIPipeline_step::is_completed_on_Set() const{
    return m_completed_on_isSet;
}

bool OAIPipeline_step::is_completed_on_Valid() const{
    return m_completed_on_isValid;
}

OAIPipeline_image OAIPipeline_step::getImage() const {
    return m_image;
}
void OAIPipeline_step::setImage(const OAIPipeline_image &image) {
    m_image = image;
    m_image_isSet = true;
}

bool OAIPipeline_step::is_image_Set() const{
    return m_image_isSet;
}

bool OAIPipeline_step::is_image_Valid() const{
    return m_image_isValid;
}

QList<OAIPipeline_command> OAIPipeline_step::getScriptCommands() const {
    return m_script_commands;
}
void OAIPipeline_step::setScriptCommands(const QList<OAIPipeline_command> &script_commands) {
    m_script_commands = script_commands;
    m_script_commands_isSet = true;
}

bool OAIPipeline_step::is_script_commands_Set() const{
    return m_script_commands_isSet;
}

bool OAIPipeline_step::is_script_commands_Valid() const{
    return m_script_commands_isValid;
}

QList<OAIPipeline_command> OAIPipeline_step::getSetupCommands() const {
    return m_setup_commands;
}
void OAIPipeline_step::setSetupCommands(const QList<OAIPipeline_command> &setup_commands) {
    m_setup_commands = setup_commands;
    m_setup_commands_isSet = true;
}

bool OAIPipeline_step::is_setup_commands_Set() const{
    return m_setup_commands_isSet;
}

bool OAIPipeline_step::is_setup_commands_Valid() const{
    return m_setup_commands_isValid;
}

QDateTime OAIPipeline_step::getStartedOn() const {
    return m_started_on;
}
void OAIPipeline_step::setStartedOn(const QDateTime &started_on) {
    m_started_on = started_on;
    m_started_on_isSet = true;
}

bool OAIPipeline_step::is_started_on_Set() const{
    return m_started_on_isSet;
}

bool OAIPipeline_step::is_started_on_Valid() const{
    return m_started_on_isValid;
}

OAIPipeline_step_state OAIPipeline_step::getState() const {
    return m_state;
}
void OAIPipeline_step::setState(const OAIPipeline_step_state &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIPipeline_step::is_state_Set() const{
    return m_state_isSet;
}

bool OAIPipeline_step::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIPipeline_step::getUuid() const {
    return m_uuid;
}
void OAIPipeline_step::setUuid(const QString &uuid) {
    m_uuid = uuid;
    m_uuid_isSet = true;
}

bool OAIPipeline_step::is_uuid_Set() const{
    return m_uuid_isSet;
}

bool OAIPipeline_step::is_uuid_Valid() const{
    return m_uuid_isValid;
}

bool OAIPipeline_step::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_completed_on_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_script_commands.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_setup_commands.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_started_on_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_uuid_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPipeline_step::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_type_isValid && true;
}

} // namespace OpenAPI
