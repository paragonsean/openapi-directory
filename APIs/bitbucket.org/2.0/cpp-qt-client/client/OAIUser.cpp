/**
 * Bitbucket API
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@bitbucket.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUser.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUser::OAIUser(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUser::OAIUser() {
    this->initializeModel();
}

OAIUser::~OAIUser() {}

void OAIUser::initializeModel() {

    m_type_isSet = false;
    m_type_isValid = false;

    m_created_on_isSet = false;
    m_created_on_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_links_isSet = false;
    m_links_isValid = false;

    m_username_isSet = false;
    m_username_isValid = false;

    m_uuid_isSet = false;
    m_uuid_isValid = false;

    m_account_id_isSet = false;
    m_account_id_isValid = false;

    m_account_status_isSet = false;
    m_account_status_isValid = false;

    m_has_2fa_enabled_isSet = false;
    m_has_2fa_enabled_isValid = false;

    m_is_staff_isSet = false;
    m_is_staff_isValid = false;

    m_nickname_isSet = false;
    m_nickname_isValid = false;

    m_website_isSet = false;
    m_website_isValid = false;
}

void OAIUser::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUser::fromJsonObject(QJsonObject json) {

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_created_on_isValid = ::OpenAPI::fromJsonValue(m_created_on, json[QString("created_on")]);
    m_created_on_isSet = !json[QString("created_on")].isNull() && m_created_on_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("display_name")]);
    m_display_name_isSet = !json[QString("display_name")].isNull() && m_display_name_isValid;

    m_links_isValid = ::OpenAPI::fromJsonValue(m_links, json[QString("links")]);
    m_links_isSet = !json[QString("links")].isNull() && m_links_isValid;

    m_username_isValid = ::OpenAPI::fromJsonValue(m_username, json[QString("username")]);
    m_username_isSet = !json[QString("username")].isNull() && m_username_isValid;

    m_uuid_isValid = ::OpenAPI::fromJsonValue(m_uuid, json[QString("uuid")]);
    m_uuid_isSet = !json[QString("uuid")].isNull() && m_uuid_isValid;

    m_account_id_isValid = ::OpenAPI::fromJsonValue(m_account_id, json[QString("account_id")]);
    m_account_id_isSet = !json[QString("account_id")].isNull() && m_account_id_isValid;

    m_account_status_isValid = ::OpenAPI::fromJsonValue(m_account_status, json[QString("account_status")]);
    m_account_status_isSet = !json[QString("account_status")].isNull() && m_account_status_isValid;

    m_has_2fa_enabled_isValid = ::OpenAPI::fromJsonValue(m_has_2fa_enabled, json[QString("has_2fa_enabled")]);
    m_has_2fa_enabled_isSet = !json[QString("has_2fa_enabled")].isNull() && m_has_2fa_enabled_isValid;

    m_is_staff_isValid = ::OpenAPI::fromJsonValue(m_is_staff, json[QString("is_staff")]);
    m_is_staff_isSet = !json[QString("is_staff")].isNull() && m_is_staff_isValid;

    m_nickname_isValid = ::OpenAPI::fromJsonValue(m_nickname, json[QString("nickname")]);
    m_nickname_isSet = !json[QString("nickname")].isNull() && m_nickname_isValid;

    m_website_isValid = ::OpenAPI::fromJsonValue(m_website, json[QString("website")]);
    m_website_isSet = !json[QString("website")].isNull() && m_website_isValid;
}

QString OAIUser::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUser::asJsonObject() const {
    QJsonObject obj;
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_created_on_isSet) {
        obj.insert(QString("created_on"), ::OpenAPI::toJsonValue(m_created_on));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("display_name"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_links.isSet()) {
        obj.insert(QString("links"), ::OpenAPI::toJsonValue(m_links));
    }
    if (m_username_isSet) {
        obj.insert(QString("username"), ::OpenAPI::toJsonValue(m_username));
    }
    if (m_uuid_isSet) {
        obj.insert(QString("uuid"), ::OpenAPI::toJsonValue(m_uuid));
    }
    if (m_account_id_isSet) {
        obj.insert(QString("account_id"), ::OpenAPI::toJsonValue(m_account_id));
    }
    if (m_account_status_isSet) {
        obj.insert(QString("account_status"), ::OpenAPI::toJsonValue(m_account_status));
    }
    if (m_has_2fa_enabled_isSet) {
        obj.insert(QString("has_2fa_enabled"), ::OpenAPI::toJsonValue(m_has_2fa_enabled));
    }
    if (m_is_staff_isSet) {
        obj.insert(QString("is_staff"), ::OpenAPI::toJsonValue(m_is_staff));
    }
    if (m_nickname_isSet) {
        obj.insert(QString("nickname"), ::OpenAPI::toJsonValue(m_nickname));
    }
    if (m_website_isSet) {
        obj.insert(QString("website"), ::OpenAPI::toJsonValue(m_website));
    }
    return obj;
}

QString OAIUser::getType() const {
    return m_type;
}
void OAIUser::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIUser::is_type_Set() const{
    return m_type_isSet;
}

bool OAIUser::is_type_Valid() const{
    return m_type_isValid;
}

QDateTime OAIUser::getCreatedOn() const {
    return m_created_on;
}
void OAIUser::setCreatedOn(const QDateTime &created_on) {
    m_created_on = created_on;
    m_created_on_isSet = true;
}

bool OAIUser::is_created_on_Set() const{
    return m_created_on_isSet;
}

bool OAIUser::is_created_on_Valid() const{
    return m_created_on_isValid;
}

QString OAIUser::getDisplayName() const {
    return m_display_name;
}
void OAIUser::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIUser::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIUser::is_display_name_Valid() const{
    return m_display_name_isValid;
}

OAIUser_links OAIUser::getLinks() const {
    return m_links;
}
void OAIUser::setLinks(const OAIUser_links &links) {
    m_links = links;
    m_links_isSet = true;
}

bool OAIUser::is_links_Set() const{
    return m_links_isSet;
}

bool OAIUser::is_links_Valid() const{
    return m_links_isValid;
}

QString OAIUser::getUsername() const {
    return m_username;
}
void OAIUser::setUsername(const QString &username) {
    m_username = username;
    m_username_isSet = true;
}

bool OAIUser::is_username_Set() const{
    return m_username_isSet;
}

bool OAIUser::is_username_Valid() const{
    return m_username_isValid;
}

QString OAIUser::getUuid() const {
    return m_uuid;
}
void OAIUser::setUuid(const QString &uuid) {
    m_uuid = uuid;
    m_uuid_isSet = true;
}

bool OAIUser::is_uuid_Set() const{
    return m_uuid_isSet;
}

bool OAIUser::is_uuid_Valid() const{
    return m_uuid_isValid;
}

QString OAIUser::getAccountId() const {
    return m_account_id;
}
void OAIUser::setAccountId(const QString &account_id) {
    m_account_id = account_id;
    m_account_id_isSet = true;
}

bool OAIUser::is_account_id_Set() const{
    return m_account_id_isSet;
}

bool OAIUser::is_account_id_Valid() const{
    return m_account_id_isValid;
}

QString OAIUser::getAccountStatus() const {
    return m_account_status;
}
void OAIUser::setAccountStatus(const QString &account_status) {
    m_account_status = account_status;
    m_account_status_isSet = true;
}

bool OAIUser::is_account_status_Set() const{
    return m_account_status_isSet;
}

bool OAIUser::is_account_status_Valid() const{
    return m_account_status_isValid;
}

bool OAIUser::isHas2faEnabled() const {
    return m_has_2fa_enabled;
}
void OAIUser::setHas2faEnabled(const bool &has_2fa_enabled) {
    m_has_2fa_enabled = has_2fa_enabled;
    m_has_2fa_enabled_isSet = true;
}

bool OAIUser::is_has_2fa_enabled_Set() const{
    return m_has_2fa_enabled_isSet;
}

bool OAIUser::is_has_2fa_enabled_Valid() const{
    return m_has_2fa_enabled_isValid;
}

bool OAIUser::isIsStaff() const {
    return m_is_staff;
}
void OAIUser::setIsStaff(const bool &is_staff) {
    m_is_staff = is_staff;
    m_is_staff_isSet = true;
}

bool OAIUser::is_is_staff_Set() const{
    return m_is_staff_isSet;
}

bool OAIUser::is_is_staff_Valid() const{
    return m_is_staff_isValid;
}

QString OAIUser::getNickname() const {
    return m_nickname;
}
void OAIUser::setNickname(const QString &nickname) {
    m_nickname = nickname;
    m_nickname_isSet = true;
}

bool OAIUser::is_nickname_Set() const{
    return m_nickname_isSet;
}

bool OAIUser::is_nickname_Valid() const{
    return m_nickname_isValid;
}

QString OAIUser::getWebsite() const {
    return m_website;
}
void OAIUser::setWebsite(const QString &website) {
    m_website = website;
    m_website_isSet = true;
}

bool OAIUser::is_website_Set() const{
    return m_website_isSet;
}

bool OAIUser::is_website_Valid() const{
    return m_website_isValid;
}

bool OAIUser::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_on_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_links.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_username_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uuid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_account_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_2fa_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_staff_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nickname_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_website_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUser::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_type_isValid && true;
}

} // namespace OpenAPI
