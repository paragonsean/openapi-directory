/**
 * Bitbucket API
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@bitbucket.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReportsApi.h"
#include "OAIServerConfiguration.h"
#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAIReportsApi::OAIReportsApi(const int timeOut)
    : _timeOut(timeOut),
      _manager(nullptr),
      _isResponseCompressionEnabled(false),
      _isRequestCompressionEnabled(false) {
    initializeServerConfigs();
}

OAIReportsApi::~OAIReportsApi() {
}

void OAIReportsApi::initializeServerConfigs() {
    //Default server
    QList<OAIServerConfiguration> defaultConf = QList<OAIServerConfiguration>();
    //varying endpoint server
    defaultConf.append(OAIServerConfiguration(
    QUrl("https://api.bitbucket.org/2.0"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("bulkCreateOrUpdateAnnotations", defaultConf);
    _serverIndices.insert("bulkCreateOrUpdateAnnotations", 0);
    _serverConfigs.insert("createOrUpdateAnnotation", defaultConf);
    _serverIndices.insert("createOrUpdateAnnotation", 0);
    _serverConfigs.insert("createOrUpdateReport", defaultConf);
    _serverIndices.insert("createOrUpdateReport", 0);
    _serverConfigs.insert("deleteAnnotation", defaultConf);
    _serverIndices.insert("deleteAnnotation", 0);
    _serverConfigs.insert("deleteReport", defaultConf);
    _serverIndices.insert("deleteReport", 0);
    _serverConfigs.insert("getAnnotation", defaultConf);
    _serverIndices.insert("getAnnotation", 0);
    _serverConfigs.insert("getAnnotationsForReport", defaultConf);
    _serverIndices.insert("getAnnotationsForReport", 0);
    _serverConfigs.insert("getReport", defaultConf);
    _serverIndices.insert("getReport", 0);
    _serverConfigs.insert("getReportsForCommit", defaultConf);
    _serverIndices.insert("getReportsForCommit", 0);
}

/**
* returns 0 on success and -1, -2 or -3 on failure.
* -1 when the variable does not exist and -2 if the value is not defined in the enum and -3 if the operation or server index is not found
*/
int OAIReportsApi::setDefaultServerValue(int serverIndex, const QString &operation, const QString &variable, const QString &value) {
    auto it = _serverConfigs.find(operation);
    if (it != _serverConfigs.end() && serverIndex < it.value().size()) {
      return _serverConfigs[operation][serverIndex].setDefaultValue(variable,value);
    }
    return -3;
}
void OAIReportsApi::setServerIndex(const QString &operation, int serverIndex) {
    if (_serverIndices.contains(operation) && serverIndex < _serverConfigs.find(operation).value().size()) {
        _serverIndices[operation] = serverIndex;
    }
}

void OAIReportsApi::setApiKey(const QString &apiKeyName, const QString &apiKey) {
    _apiKeys.insert(apiKeyName, apiKey);
}

void OAIReportsApi::setBearerToken(const QString &token) {
    _bearerToken = token;
}

void OAIReportsApi::setUsername(const QString &username) {
    _username = username;
}

void OAIReportsApi::setPassword(const QString &password) {
    _password = password;
}


void OAIReportsApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAIReportsApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAIReportsApi::setNetworkAccessManager(QNetworkAccessManager* manager) {
    _manager = manager;
}

/**
    * Appends a new ServerConfiguration to the config map for a specific operation.
    * @param operation The id to the target operation.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    * returns the index of the new server config on success and -1 if the operation is not found
    */
int OAIReportsApi::addServerConfiguration(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    if (_serverConfigs.contains(operation)) {
        _serverConfigs[operation].append(OAIServerConfiguration(
                    url,
                    description,
                    variables));
        return _serverConfigs[operation].size()-1;
    } else {
        return -1;
    }
}

/**
    * Appends a new ServerConfiguration to the config map for a all operations and sets the index to that server.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIReportsApi::setNewServerForAllOperations(const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    for (auto keyIt = _serverIndices.keyBegin(); keyIt != _serverIndices.keyEnd(); keyIt++) {
        setServerIndex(*keyIt, addServerConfiguration(*keyIt, url, description, variables));
    }
}

/**
    * Appends a new ServerConfiguration to the config map for an operations and sets the index to that server.
    * @param URL A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIReportsApi::setNewServer(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    setServerIndex(operation, addServerConfiguration(operation, url, description, variables));
}

void OAIReportsApi::addHeaders(const QString &key, const QString &value) {
    _defaultHeaders.insert(key, value);
}

void OAIReportsApi::enableRequestCompression() {
    _isRequestCompressionEnabled = true;
}

void OAIReportsApi::enableResponseCompression() {
    _isResponseCompressionEnabled = true;
}

void OAIReportsApi::abortRequests() {
    Q_EMIT abortRequestsSignal();
}

QString OAIReportsApi::getParamStylePrefix(const QString &style) {
    if (style == "matrix") {
        return ";";
    } else if (style == "label") {
        return ".";
    } else if (style == "form") {
        return "&";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "&";
    } else if (style == "pipeDelimited") {
        return "&";
    } else {
        return "none";
    }
}

QString OAIReportsApi::getParamStyleSuffix(const QString &style) {
    if (style == "matrix") {
        return "=";
    } else if (style == "label") {
        return "";
    } else if (style == "form") {
        return "=";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "=";
    } else if (style == "pipeDelimited") {
        return "=";
    } else {
        return "none";
    }
}

QString OAIReportsApi::getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode) {

    if (style == "matrix") {
        return (isExplode) ? ";" + name + "=" : ",";

    } else if (style == "label") {
        return (isExplode) ? "." : ",";

    } else if (style == "form") {
        return (isExplode) ? "&" + name + "=" : ",";

    } else if (style == "simple") {
        return ",";
    } else if (style == "spaceDelimited") {
        return (isExplode) ? "&" + name + "=" : " ";

    } else if (style == "pipeDelimited") {
        return (isExplode) ? "&" + name + "=" : "|";

    } else if (style == "deepObject") {
        return (isExplode) ? "&" : "none";

    } else {
        return "none";
    }
}

void OAIReportsApi::bulkCreateOrUpdateAnnotations(const QString &workspace, const QString &repo_slug, const QString &commit, const QString &report_id, const QList<OAIReport_annotation> &oai_report_annotation) {
    QString fullPath = QString(_serverConfigs["bulkCreateOrUpdateAnnotations"][_serverIndices.value("bulkCreateOrUpdateAnnotations")].URL()+"/repositories/{workspace}/{repo_slug}/commit/{commit}/reports/{reportId}/annotations");
    
    
    {
        QString workspacePathParam("{");
        workspacePathParam.append("workspace").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "workspace", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"workspace"+pathSuffix : pathPrefix;
        fullPath.replace(workspacePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(workspace)));
    }
    
    {
        QString repo_slugPathParam("{");
        repo_slugPathParam.append("repo_slug").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "repo_slug", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"repo_slug"+pathSuffix : pathPrefix;
        fullPath.replace(repo_slugPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(repo_slug)));
    }
    
    {
        QString commitPathParam("{");
        commitPathParam.append("commit").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "commit", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"commit"+pathSuffix : pathPrefix;
        fullPath.replace(commitPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(commit)));
    }
    
    {
        QString report_idPathParam("{");
        report_idPathParam.append("reportId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "reportId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"reportId"+pathSuffix : pathPrefix;
        fullPath.replace(report_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(report_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {
        QJsonDocument doc(::OpenAPI::toJsonValue(oai_report_annotation).toArray());
        QByteArray bytes = doc.toJson();
        input.request_body.append(bytes);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIReportsApi::bulkCreateOrUpdateAnnotationsCallback);
    connect(this, &OAIReportsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIReportsApi::bulkCreateOrUpdateAnnotationsCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAIReport_annotation> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAIReport_annotation val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT bulkCreateOrUpdateAnnotationsSignal(output);
        Q_EMIT bulkCreateOrUpdateAnnotationsSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT bulkCreateOrUpdateAnnotationsSignalE(output, error_type, error_str);
        Q_EMIT bulkCreateOrUpdateAnnotationsSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT bulkCreateOrUpdateAnnotationsSignalError(output, error_type, error_str);
        Q_EMIT bulkCreateOrUpdateAnnotationsSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIReportsApi::createOrUpdateAnnotation(const QString &workspace, const QString &repo_slug, const QString &commit, const QString &report_id, const QString &annotation_id, const OAIReport_annotation &oai_report_annotation) {
    QString fullPath = QString(_serverConfigs["createOrUpdateAnnotation"][_serverIndices.value("createOrUpdateAnnotation")].URL()+"/repositories/{workspace}/{repo_slug}/commit/{commit}/reports/{reportId}/annotations/{annotationId}");
    
    
    {
        QString workspacePathParam("{");
        workspacePathParam.append("workspace").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "workspace", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"workspace"+pathSuffix : pathPrefix;
        fullPath.replace(workspacePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(workspace)));
    }
    
    {
        QString repo_slugPathParam("{");
        repo_slugPathParam.append("repo_slug").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "repo_slug", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"repo_slug"+pathSuffix : pathPrefix;
        fullPath.replace(repo_slugPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(repo_slug)));
    }
    
    {
        QString commitPathParam("{");
        commitPathParam.append("commit").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "commit", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"commit"+pathSuffix : pathPrefix;
        fullPath.replace(commitPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(commit)));
    }
    
    {
        QString report_idPathParam("{");
        report_idPathParam.append("reportId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "reportId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"reportId"+pathSuffix : pathPrefix;
        fullPath.replace(report_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(report_id)));
    }
    
    {
        QString annotation_idPathParam("{");
        annotation_idPathParam.append("annotationId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "annotationId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"annotationId"+pathSuffix : pathPrefix;
        fullPath.replace(annotation_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(annotation_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PUT");

    {

        
        QByteArray output = oai_report_annotation.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIReportsApi::createOrUpdateAnnotationCallback);
    connect(this, &OAIReportsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIReportsApi::createOrUpdateAnnotationCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIReport_annotation output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT createOrUpdateAnnotationSignal(output);
        Q_EMIT createOrUpdateAnnotationSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT createOrUpdateAnnotationSignalE(output, error_type, error_str);
        Q_EMIT createOrUpdateAnnotationSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT createOrUpdateAnnotationSignalError(output, error_type, error_str);
        Q_EMIT createOrUpdateAnnotationSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIReportsApi::createOrUpdateReport(const QString &workspace, const QString &repo_slug, const QString &commit, const QString &report_id, const OAIReport &oai_report) {
    QString fullPath = QString(_serverConfigs["createOrUpdateReport"][_serverIndices.value("createOrUpdateReport")].URL()+"/repositories/{workspace}/{repo_slug}/commit/{commit}/reports/{reportId}");
    
    
    {
        QString workspacePathParam("{");
        workspacePathParam.append("workspace").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "workspace", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"workspace"+pathSuffix : pathPrefix;
        fullPath.replace(workspacePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(workspace)));
    }
    
    {
        QString repo_slugPathParam("{");
        repo_slugPathParam.append("repo_slug").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "repo_slug", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"repo_slug"+pathSuffix : pathPrefix;
        fullPath.replace(repo_slugPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(repo_slug)));
    }
    
    {
        QString commitPathParam("{");
        commitPathParam.append("commit").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "commit", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"commit"+pathSuffix : pathPrefix;
        fullPath.replace(commitPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(commit)));
    }
    
    {
        QString report_idPathParam("{");
        report_idPathParam.append("reportId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "reportId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"reportId"+pathSuffix : pathPrefix;
        fullPath.replace(report_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(report_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PUT");

    {

        
        QByteArray output = oai_report.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIReportsApi::createOrUpdateReportCallback);
    connect(this, &OAIReportsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIReportsApi::createOrUpdateReportCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIReport output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT createOrUpdateReportSignal(output);
        Q_EMIT createOrUpdateReportSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT createOrUpdateReportSignalE(output, error_type, error_str);
        Q_EMIT createOrUpdateReportSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT createOrUpdateReportSignalError(output, error_type, error_str);
        Q_EMIT createOrUpdateReportSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIReportsApi::deleteAnnotation(const QString &workspace, const QString &repo_slug, const QString &commit, const QString &report_id, const QString &annotation_id) {
    QString fullPath = QString(_serverConfigs["deleteAnnotation"][_serverIndices.value("deleteAnnotation")].URL()+"/repositories/{workspace}/{repo_slug}/commit/{commit}/reports/{reportId}/annotations/{annotationId}");
    
    
    {
        QString workspacePathParam("{");
        workspacePathParam.append("workspace").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "workspace", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"workspace"+pathSuffix : pathPrefix;
        fullPath.replace(workspacePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(workspace)));
    }
    
    {
        QString repo_slugPathParam("{");
        repo_slugPathParam.append("repo_slug").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "repo_slug", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"repo_slug"+pathSuffix : pathPrefix;
        fullPath.replace(repo_slugPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(repo_slug)));
    }
    
    {
        QString commitPathParam("{");
        commitPathParam.append("commit").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "commit", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"commit"+pathSuffix : pathPrefix;
        fullPath.replace(commitPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(commit)));
    }
    
    {
        QString report_idPathParam("{");
        report_idPathParam.append("reportId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "reportId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"reportId"+pathSuffix : pathPrefix;
        fullPath.replace(report_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(report_id)));
    }
    
    {
        QString annotation_idPathParam("{");
        annotation_idPathParam.append("annotationId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "annotationId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"annotationId"+pathSuffix : pathPrefix;
        fullPath.replace(annotation_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(annotation_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIReportsApi::deleteAnnotationCallback);
    connect(this, &OAIReportsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIReportsApi::deleteAnnotationCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT deleteAnnotationSignal();
        Q_EMIT deleteAnnotationSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT deleteAnnotationSignalE(error_type, error_str);
        Q_EMIT deleteAnnotationSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT deleteAnnotationSignalError(error_type, error_str);
        Q_EMIT deleteAnnotationSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIReportsApi::deleteReport(const QString &workspace, const QString &repo_slug, const QString &commit, const QString &report_id) {
    QString fullPath = QString(_serverConfigs["deleteReport"][_serverIndices.value("deleteReport")].URL()+"/repositories/{workspace}/{repo_slug}/commit/{commit}/reports/{reportId}");
    
    
    {
        QString workspacePathParam("{");
        workspacePathParam.append("workspace").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "workspace", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"workspace"+pathSuffix : pathPrefix;
        fullPath.replace(workspacePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(workspace)));
    }
    
    {
        QString repo_slugPathParam("{");
        repo_slugPathParam.append("repo_slug").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "repo_slug", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"repo_slug"+pathSuffix : pathPrefix;
        fullPath.replace(repo_slugPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(repo_slug)));
    }
    
    {
        QString commitPathParam("{");
        commitPathParam.append("commit").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "commit", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"commit"+pathSuffix : pathPrefix;
        fullPath.replace(commitPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(commit)));
    }
    
    {
        QString report_idPathParam("{");
        report_idPathParam.append("reportId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "reportId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"reportId"+pathSuffix : pathPrefix;
        fullPath.replace(report_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(report_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIReportsApi::deleteReportCallback);
    connect(this, &OAIReportsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIReportsApi::deleteReportCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT deleteReportSignal();
        Q_EMIT deleteReportSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT deleteReportSignalE(error_type, error_str);
        Q_EMIT deleteReportSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT deleteReportSignalError(error_type, error_str);
        Q_EMIT deleteReportSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIReportsApi::getAnnotation(const QString &workspace, const QString &repo_slug, const QString &commit, const QString &report_id, const QString &annotation_id) {
    QString fullPath = QString(_serverConfigs["getAnnotation"][_serverIndices.value("getAnnotation")].URL()+"/repositories/{workspace}/{repo_slug}/commit/{commit}/reports/{reportId}/annotations/{annotationId}");
    
    
    {
        QString workspacePathParam("{");
        workspacePathParam.append("workspace").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "workspace", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"workspace"+pathSuffix : pathPrefix;
        fullPath.replace(workspacePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(workspace)));
    }
    
    {
        QString repo_slugPathParam("{");
        repo_slugPathParam.append("repo_slug").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "repo_slug", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"repo_slug"+pathSuffix : pathPrefix;
        fullPath.replace(repo_slugPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(repo_slug)));
    }
    
    {
        QString commitPathParam("{");
        commitPathParam.append("commit").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "commit", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"commit"+pathSuffix : pathPrefix;
        fullPath.replace(commitPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(commit)));
    }
    
    {
        QString report_idPathParam("{");
        report_idPathParam.append("reportId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "reportId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"reportId"+pathSuffix : pathPrefix;
        fullPath.replace(report_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(report_id)));
    }
    
    {
        QString annotation_idPathParam("{");
        annotation_idPathParam.append("annotationId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "annotationId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"annotationId"+pathSuffix : pathPrefix;
        fullPath.replace(annotation_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(annotation_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIReportsApi::getAnnotationCallback);
    connect(this, &OAIReportsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIReportsApi::getAnnotationCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIReport_annotation output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getAnnotationSignal(output);
        Q_EMIT getAnnotationSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getAnnotationSignalE(output, error_type, error_str);
        Q_EMIT getAnnotationSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getAnnotationSignalError(output, error_type, error_str);
        Q_EMIT getAnnotationSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIReportsApi::getAnnotationsForReport(const QString &workspace, const QString &repo_slug, const QString &commit, const QString &report_id) {
    QString fullPath = QString(_serverConfigs["getAnnotationsForReport"][_serverIndices.value("getAnnotationsForReport")].URL()+"/repositories/{workspace}/{repo_slug}/commit/{commit}/reports/{reportId}/annotations");
    
    
    {
        QString workspacePathParam("{");
        workspacePathParam.append("workspace").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "workspace", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"workspace"+pathSuffix : pathPrefix;
        fullPath.replace(workspacePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(workspace)));
    }
    
    {
        QString repo_slugPathParam("{");
        repo_slugPathParam.append("repo_slug").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "repo_slug", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"repo_slug"+pathSuffix : pathPrefix;
        fullPath.replace(repo_slugPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(repo_slug)));
    }
    
    {
        QString commitPathParam("{");
        commitPathParam.append("commit").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "commit", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"commit"+pathSuffix : pathPrefix;
        fullPath.replace(commitPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(commit)));
    }
    
    {
        QString report_idPathParam("{");
        report_idPathParam.append("reportId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "reportId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"reportId"+pathSuffix : pathPrefix;
        fullPath.replace(report_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(report_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIReportsApi::getAnnotationsForReportCallback);
    connect(this, &OAIReportsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIReportsApi::getAnnotationsForReportCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIPaginated_annotations output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getAnnotationsForReportSignal(output);
        Q_EMIT getAnnotationsForReportSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getAnnotationsForReportSignalE(output, error_type, error_str);
        Q_EMIT getAnnotationsForReportSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getAnnotationsForReportSignalError(output, error_type, error_str);
        Q_EMIT getAnnotationsForReportSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIReportsApi::getReport(const QString &workspace, const QString &repo_slug, const QString &commit, const QString &report_id) {
    QString fullPath = QString(_serverConfigs["getReport"][_serverIndices.value("getReport")].URL()+"/repositories/{workspace}/{repo_slug}/commit/{commit}/reports/{reportId}");
    
    
    {
        QString workspacePathParam("{");
        workspacePathParam.append("workspace").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "workspace", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"workspace"+pathSuffix : pathPrefix;
        fullPath.replace(workspacePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(workspace)));
    }
    
    {
        QString repo_slugPathParam("{");
        repo_slugPathParam.append("repo_slug").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "repo_slug", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"repo_slug"+pathSuffix : pathPrefix;
        fullPath.replace(repo_slugPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(repo_slug)));
    }
    
    {
        QString commitPathParam("{");
        commitPathParam.append("commit").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "commit", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"commit"+pathSuffix : pathPrefix;
        fullPath.replace(commitPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(commit)));
    }
    
    {
        QString report_idPathParam("{");
        report_idPathParam.append("reportId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "reportId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"reportId"+pathSuffix : pathPrefix;
        fullPath.replace(report_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(report_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIReportsApi::getReportCallback);
    connect(this, &OAIReportsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIReportsApi::getReportCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIReport output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getReportSignal(output);
        Q_EMIT getReportSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getReportSignalE(output, error_type, error_str);
        Q_EMIT getReportSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getReportSignalError(output, error_type, error_str);
        Q_EMIT getReportSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIReportsApi::getReportsForCommit(const QString &workspace, const QString &repo_slug, const QString &commit) {
    QString fullPath = QString(_serverConfigs["getReportsForCommit"][_serverIndices.value("getReportsForCommit")].URL()+"/repositories/{workspace}/{repo_slug}/commit/{commit}/reports");
    
    
    {
        QString workspacePathParam("{");
        workspacePathParam.append("workspace").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "workspace", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"workspace"+pathSuffix : pathPrefix;
        fullPath.replace(workspacePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(workspace)));
    }
    
    {
        QString repo_slugPathParam("{");
        repo_slugPathParam.append("repo_slug").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "repo_slug", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"repo_slug"+pathSuffix : pathPrefix;
        fullPath.replace(repo_slugPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(repo_slug)));
    }
    
    {
        QString commitPathParam("{");
        commitPathParam.append("commit").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "commit", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"commit"+pathSuffix : pathPrefix;
        fullPath.replace(commitPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(commit)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIReportsApi::getReportsForCommitCallback);
    connect(this, &OAIReportsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIReportsApi::getReportsForCommitCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIPaginated_reports output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getReportsForCommitSignal(output);
        Q_EMIT getReportsForCommitSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getReportsForCommitSignalE(output, error_type, error_str);
        Q_EMIT getReportsForCommitSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getReportsForCommitSignalError(output, error_type, error_str);
        Q_EMIT getReportsForCommitSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIReportsApi::tokenAvailable(){

    oauthToken token;
    switch (_OauthMethod) {
    case 1: //implicit flow
        token = _implicitFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _implicitFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 2: //authorization flow
        token = _authFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _authFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 3: //client credentials flow
        token = _credentialFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 4: //resource owner password flow
        token = _passwordFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    default:
        qDebug() << "No Oauth method set!";
        break;
    }
}
} // namespace OpenAPI
