/**
 * Bitbucket API
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@bitbucket.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIPipelinesApi_H
#define OAI_OAIPipelinesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIDeployment_variable.h"
#include "OAIError.h"
#include "OAIPaginated_deployment_variable.h"
#include "OAIPaginated_pipeline_caches.h"
#include "OAIPaginated_pipeline_known_hosts.h"
#include "OAIPaginated_pipeline_schedule_executions.h"
#include "OAIPaginated_pipeline_schedules.h"
#include "OAIPaginated_pipeline_steps.h"
#include "OAIPaginated_pipeline_variables.h"
#include "OAIPaginated_pipelines.h"
#include "OAIPipeline.h"
#include "OAIPipeline_build_number.h"
#include "OAIPipeline_cache_content_uri.h"
#include "OAIPipeline_known_host.h"
#include "OAIPipeline_schedule.h"
#include "OAIPipeline_schedule_post_request_body.h"
#include "OAIPipeline_schedule_put_request_body.h"
#include "OAIPipeline_ssh_key_pair.h"
#include "OAIPipeline_step.h"
#include "OAIPipeline_variable.h"
#include "OAIPipelines_config.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIPipelinesApi : public QObject {
    Q_OBJECT

public:
    OAIPipelinesApi(const int timeOut = 0);
    ~OAIPipelinesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  workspace QString [required]
    * @param[in]  repo_slug QString [required]
    * @param[in]  environment_uuid QString [required]
    * @param[in]  oai_deployment_variable OAIDeployment_variable [required]
    */
    virtual void createDeploymentVariable(const QString &workspace, const QString &repo_slug, const QString &environment_uuid, const OAIDeployment_variable &oai_deployment_variable);

    /**
    * @param[in]  workspace QString [required]
    * @param[in]  repo_slug QString [required]
    * @param[in]  oai_pipeline OAIPipeline [required]
    */
    virtual void createPipelineForRepository(const QString &workspace, const QString &repo_slug, const OAIPipeline &oai_pipeline);

    /**
    * @param[in]  username QString [required]
    * @param[in]  oai_pipeline_variable OAIPipeline_variable [optional]
    */
    Q_DECL_DEPRECATED virtual void createPipelineVariableForTeam(const QString &username, const ::OpenAPI::OptionalParam<OAIPipeline_variable> &oai_pipeline_variable = ::OpenAPI::OptionalParam<OAIPipeline_variable>());

    /**
    * @param[in]  selected_user QString [required]
    * @param[in]  oai_pipeline_variable OAIPipeline_variable [optional]
    */
    Q_DECL_DEPRECATED virtual void createPipelineVariableForUser(const QString &selected_user, const ::OpenAPI::OptionalParam<OAIPipeline_variable> &oai_pipeline_variable = ::OpenAPI::OptionalParam<OAIPipeline_variable>());

    /**
    * @param[in]  workspace QString [required]
    * @param[in]  oai_pipeline_variable OAIPipeline_variable [optional]
    */
    virtual void createPipelineVariableForWorkspace(const QString &workspace, const ::OpenAPI::OptionalParam<OAIPipeline_variable> &oai_pipeline_variable = ::OpenAPI::OptionalParam<OAIPipeline_variable>());

    /**
    * @param[in]  workspace QString [required]
    * @param[in]  repo_slug QString [required]
    * @param[in]  oai_pipeline_known_host OAIPipeline_known_host [required]
    */
    virtual void createRepositoryPipelineKnownHost(const QString &workspace, const QString &repo_slug, const OAIPipeline_known_host &oai_pipeline_known_host);

    /**
    * @param[in]  workspace QString [required]
    * @param[in]  repo_slug QString [required]
    * @param[in]  oai_pipeline_schedule_post_request_body OAIPipeline_schedule_post_request_body [required]
    */
    virtual void createRepositoryPipelineSchedule(const QString &workspace, const QString &repo_slug, const OAIPipeline_schedule_post_request_body &oai_pipeline_schedule_post_request_body);

    /**
    * @param[in]  workspace QString [required]
    * @param[in]  repo_slug QString [required]
    * @param[in]  oai_pipeline_variable OAIPipeline_variable [required]
    */
    virtual void createRepositoryPipelineVariable(const QString &workspace, const QString &repo_slug, const OAIPipeline_variable &oai_pipeline_variable);

    /**
    * @param[in]  workspace QString [required]
    * @param[in]  repo_slug QString [required]
    * @param[in]  environment_uuid QString [required]
    * @param[in]  variable_uuid QString [required]
    */
    virtual void deleteDeploymentVariable(const QString &workspace, const QString &repo_slug, const QString &environment_uuid, const QString &variable_uuid);

    /**
    * @param[in]  username QString [required]
    * @param[in]  variable_uuid QString [required]
    */
    Q_DECL_DEPRECATED virtual void deletePipelineVariableForTeam(const QString &username, const QString &variable_uuid);

    /**
    * @param[in]  selected_user QString [required]
    * @param[in]  variable_uuid QString [required]
    */
    Q_DECL_DEPRECATED virtual void deletePipelineVariableForUser(const QString &selected_user, const QString &variable_uuid);

    /**
    * @param[in]  workspace QString [required]
    * @param[in]  variable_uuid QString [required]
    */
    virtual void deletePipelineVariableForWorkspace(const QString &workspace, const QString &variable_uuid);

    /**
    * @param[in]  workspace QString [required]
    * @param[in]  repo_slug QString [required]
    * @param[in]  cache_uuid QString [required]
    */
    virtual void deleteRepositoryPipelineCache(const QString &workspace, const QString &repo_slug, const QString &cache_uuid);

    /**
    * @param[in]  workspace QString [required]
    * @param[in]  repo_slug QString [required]
    * @param[in]  name QString [required]
    */
    virtual void deleteRepositoryPipelineCaches(const QString &workspace, const QString &repo_slug, const QString &name);

    /**
    * @param[in]  workspace QString [required]
    * @param[in]  repo_slug QString [required]
    */
    virtual void deleteRepositoryPipelineKeyPair(const QString &workspace, const QString &repo_slug);

    /**
    * @param[in]  workspace QString [required]
    * @param[in]  repo_slug QString [required]
    * @param[in]  known_host_uuid QString [required]
    */
    virtual void deleteRepositoryPipelineKnownHost(const QString &workspace, const QString &repo_slug, const QString &known_host_uuid);

    /**
    * @param[in]  workspace QString [required]
    * @param[in]  repo_slug QString [required]
    * @param[in]  schedule_uuid QString [required]
    */
    virtual void deleteRepositoryPipelineSchedule(const QString &workspace, const QString &repo_slug, const QString &schedule_uuid);

    /**
    * @param[in]  workspace QString [required]
    * @param[in]  repo_slug QString [required]
    * @param[in]  variable_uuid QString [required]
    */
    virtual void deleteRepositoryPipelineVariable(const QString &workspace, const QString &repo_slug, const QString &variable_uuid);

    /**
    * @param[in]  workspace QString [required]
    * @param[in]  repo_slug QString [required]
    * @param[in]  environment_uuid QString [required]
    */
    virtual void getDeploymentVariables(const QString &workspace, const QString &repo_slug, const QString &environment_uuid);

    /**
    * @param[in]  workspace QString [required]
    */
    virtual void getOIDCConfiguration(const QString &workspace);

    /**
    * @param[in]  workspace QString [required]
    */
    virtual void getOIDCKeys(const QString &workspace);

    /**
    * @param[in]  workspace QString [required]
    * @param[in]  repo_slug QString [required]
    * @param[in]  pipeline_uuid QString [required]
    * @param[in]  step_uuid QString [required]
    * @param[in]  log_uuid QString [required]
    */
    virtual void getPipelineContainerLog(const QString &workspace, const QString &repo_slug, const QString &pipeline_uuid, const QString &step_uuid, const QString &log_uuid);

    /**
    * @param[in]  workspace QString [required]
    * @param[in]  repo_slug QString [required]
    * @param[in]  pipeline_uuid QString [required]
    */
    virtual void getPipelineForRepository(const QString &workspace, const QString &repo_slug, const QString &pipeline_uuid);

    /**
    * @param[in]  workspace QString [required]
    * @param[in]  repo_slug QString [required]
    * @param[in]  pipeline_uuid QString [required]
    * @param[in]  step_uuid QString [required]
    */
    virtual void getPipelineStepForRepository(const QString &workspace, const QString &repo_slug, const QString &pipeline_uuid, const QString &step_uuid);

    /**
    * @param[in]  workspace QString [required]
    * @param[in]  repo_slug QString [required]
    * @param[in]  pipeline_uuid QString [required]
    * @param[in]  step_uuid QString [required]
    */
    virtual void getPipelineStepLogForRepository(const QString &workspace, const QString &repo_slug, const QString &pipeline_uuid, const QString &step_uuid);

    /**
    * @param[in]  workspace QString [required]
    * @param[in]  repo_slug QString [required]
    * @param[in]  pipeline_uuid QString [required]
    */
    virtual void getPipelineStepsForRepository(const QString &workspace, const QString &repo_slug, const QString &pipeline_uuid);

    /**
    * @param[in]  workspace QString [required]
    * @param[in]  repo_slug QString [required]
    * @param[in]  pipeline_uuid QString [required]
    * @param[in]  step_uuid QString [required]
    * @param[in]  test_case_uuid QString [required]
    */
    virtual void getPipelineTestReportTestCaseReasons(const QString &workspace, const QString &repo_slug, const QString &pipeline_uuid, const QString &step_uuid, const QString &test_case_uuid);

    /**
    * @param[in]  workspace QString [required]
    * @param[in]  repo_slug QString [required]
    * @param[in]  pipeline_uuid QString [required]
    * @param[in]  step_uuid QString [required]
    */
    virtual void getPipelineTestReportTestCases(const QString &workspace, const QString &repo_slug, const QString &pipeline_uuid, const QString &step_uuid);

    /**
    * @param[in]  workspace QString [required]
    * @param[in]  repo_slug QString [required]
    * @param[in]  pipeline_uuid QString [required]
    * @param[in]  step_uuid QString [required]
    */
    virtual void getPipelineTestReports(const QString &workspace, const QString &repo_slug, const QString &pipeline_uuid, const QString &step_uuid);

    /**
    * @param[in]  username QString [required]
    * @param[in]  variable_uuid QString [required]
    */
    Q_DECL_DEPRECATED virtual void getPipelineVariableForTeam(const QString &username, const QString &variable_uuid);

    /**
    * @param[in]  selected_user QString [required]
    * @param[in]  variable_uuid QString [required]
    */
    Q_DECL_DEPRECATED virtual void getPipelineVariableForUser(const QString &selected_user, const QString &variable_uuid);

    /**
    * @param[in]  workspace QString [required]
    * @param[in]  variable_uuid QString [required]
    */
    virtual void getPipelineVariableForWorkspace(const QString &workspace, const QString &variable_uuid);

    /**
    * @param[in]  username QString [required]
    */
    Q_DECL_DEPRECATED virtual void getPipelineVariablesForTeam(const QString &username);

    /**
    * @param[in]  selected_user QString [required]
    */
    Q_DECL_DEPRECATED virtual void getPipelineVariablesForUser(const QString &selected_user);

    /**
    * @param[in]  workspace QString [required]
    */
    virtual void getPipelineVariablesForWorkspace(const QString &workspace);

    /**
    * @param[in]  workspace QString [required]
    * @param[in]  repo_slug QString [required]
    */
    virtual void getPipelinesForRepository(const QString &workspace, const QString &repo_slug);

    /**
    * @param[in]  workspace QString [required]
    * @param[in]  repo_slug QString [required]
    * @param[in]  cache_uuid QString [required]
    */
    virtual void getRepositoryPipelineCacheContentURI(const QString &workspace, const QString &repo_slug, const QString &cache_uuid);

    /**
    * @param[in]  workspace QString [required]
    * @param[in]  repo_slug QString [required]
    */
    virtual void getRepositoryPipelineCaches(const QString &workspace, const QString &repo_slug);

    /**
    * @param[in]  workspace QString [required]
    * @param[in]  repo_slug QString [required]
    */
    virtual void getRepositoryPipelineConfig(const QString &workspace, const QString &repo_slug);

    /**
    * @param[in]  workspace QString [required]
    * @param[in]  repo_slug QString [required]
    * @param[in]  known_host_uuid QString [required]
    */
    virtual void getRepositoryPipelineKnownHost(const QString &workspace, const QString &repo_slug, const QString &known_host_uuid);

    /**
    * @param[in]  workspace QString [required]
    * @param[in]  repo_slug QString [required]
    */
    virtual void getRepositoryPipelineKnownHosts(const QString &workspace, const QString &repo_slug);

    /**
    * @param[in]  workspace QString [required]
    * @param[in]  repo_slug QString [required]
    * @param[in]  schedule_uuid QString [required]
    */
    virtual void getRepositoryPipelineSchedule(const QString &workspace, const QString &repo_slug, const QString &schedule_uuid);

    /**
    * @param[in]  workspace QString [required]
    * @param[in]  repo_slug QString [required]
    * @param[in]  schedule_uuid QString [required]
    */
    virtual void getRepositoryPipelineScheduleExecutions(const QString &workspace, const QString &repo_slug, const QString &schedule_uuid);

    /**
    * @param[in]  workspace QString [required]
    * @param[in]  repo_slug QString [required]
    */
    virtual void getRepositoryPipelineSchedules(const QString &workspace, const QString &repo_slug);

    /**
    * @param[in]  workspace QString [required]
    * @param[in]  repo_slug QString [required]
    */
    virtual void getRepositoryPipelineSshKeyPair(const QString &workspace, const QString &repo_slug);

    /**
    * @param[in]  workspace QString [required]
    * @param[in]  repo_slug QString [required]
    * @param[in]  variable_uuid QString [required]
    */
    virtual void getRepositoryPipelineVariable(const QString &workspace, const QString &repo_slug, const QString &variable_uuid);

    /**
    * @param[in]  workspace QString [required]
    * @param[in]  repo_slug QString [required]
    */
    virtual void getRepositoryPipelineVariables(const QString &workspace, const QString &repo_slug);

    /**
    * @param[in]  workspace QString [required]
    * @param[in]  repo_slug QString [required]
    * @param[in]  pipeline_uuid QString [required]
    */
    virtual void stopPipeline(const QString &workspace, const QString &repo_slug, const QString &pipeline_uuid);

    /**
    * @param[in]  workspace QString [required]
    * @param[in]  repo_slug QString [required]
    * @param[in]  environment_uuid QString [required]
    * @param[in]  variable_uuid QString [required]
    * @param[in]  oai_deployment_variable OAIDeployment_variable [required]
    */
    virtual void updateDeploymentVariable(const QString &workspace, const QString &repo_slug, const QString &environment_uuid, const QString &variable_uuid, const OAIDeployment_variable &oai_deployment_variable);

    /**
    * @param[in]  username QString [required]
    * @param[in]  variable_uuid QString [required]
    * @param[in]  oai_pipeline_variable OAIPipeline_variable [required]
    */
    Q_DECL_DEPRECATED virtual void updatePipelineVariableForTeam(const QString &username, const QString &variable_uuid, const OAIPipeline_variable &oai_pipeline_variable);

    /**
    * @param[in]  selected_user QString [required]
    * @param[in]  variable_uuid QString [required]
    * @param[in]  oai_pipeline_variable OAIPipeline_variable [required]
    */
    Q_DECL_DEPRECATED virtual void updatePipelineVariableForUser(const QString &selected_user, const QString &variable_uuid, const OAIPipeline_variable &oai_pipeline_variable);

    /**
    * @param[in]  workspace QString [required]
    * @param[in]  variable_uuid QString [required]
    * @param[in]  oai_pipeline_variable OAIPipeline_variable [required]
    */
    virtual void updatePipelineVariableForWorkspace(const QString &workspace, const QString &variable_uuid, const OAIPipeline_variable &oai_pipeline_variable);

    /**
    * @param[in]  workspace QString [required]
    * @param[in]  repo_slug QString [required]
    * @param[in]  oai_pipeline_build_number OAIPipeline_build_number [required]
    */
    virtual void updateRepositoryBuildNumber(const QString &workspace, const QString &repo_slug, const OAIPipeline_build_number &oai_pipeline_build_number);

    /**
    * @param[in]  workspace QString [required]
    * @param[in]  repo_slug QString [required]
    * @param[in]  oai_pipelines_config OAIPipelines_config [required]
    */
    virtual void updateRepositoryPipelineConfig(const QString &workspace, const QString &repo_slug, const OAIPipelines_config &oai_pipelines_config);

    /**
    * @param[in]  workspace QString [required]
    * @param[in]  repo_slug QString [required]
    * @param[in]  oai_pipeline_ssh_key_pair OAIPipeline_ssh_key_pair [required]
    */
    virtual void updateRepositoryPipelineKeyPair(const QString &workspace, const QString &repo_slug, const OAIPipeline_ssh_key_pair &oai_pipeline_ssh_key_pair);

    /**
    * @param[in]  workspace QString [required]
    * @param[in]  repo_slug QString [required]
    * @param[in]  known_host_uuid QString [required]
    * @param[in]  oai_pipeline_known_host OAIPipeline_known_host [required]
    */
    virtual void updateRepositoryPipelineKnownHost(const QString &workspace, const QString &repo_slug, const QString &known_host_uuid, const OAIPipeline_known_host &oai_pipeline_known_host);

    /**
    * @param[in]  workspace QString [required]
    * @param[in]  repo_slug QString [required]
    * @param[in]  schedule_uuid QString [required]
    * @param[in]  oai_pipeline_schedule_put_request_body OAIPipeline_schedule_put_request_body [required]
    */
    virtual void updateRepositoryPipelineSchedule(const QString &workspace, const QString &repo_slug, const QString &schedule_uuid, const OAIPipeline_schedule_put_request_body &oai_pipeline_schedule_put_request_body);

    /**
    * @param[in]  workspace QString [required]
    * @param[in]  repo_slug QString [required]
    * @param[in]  variable_uuid QString [required]
    * @param[in]  oai_pipeline_variable OAIPipeline_variable [required]
    */
    virtual void updateRepositoryPipelineVariable(const QString &workspace, const QString &repo_slug, const QString &variable_uuid, const OAIPipeline_variable &oai_pipeline_variable);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createDeploymentVariableCallback(OAIHttpRequestWorker *worker);
    void createPipelineForRepositoryCallback(OAIHttpRequestWorker *worker);
    void createPipelineVariableForTeamCallback(OAIHttpRequestWorker *worker);
    void createPipelineVariableForUserCallback(OAIHttpRequestWorker *worker);
    void createPipelineVariableForWorkspaceCallback(OAIHttpRequestWorker *worker);
    void createRepositoryPipelineKnownHostCallback(OAIHttpRequestWorker *worker);
    void createRepositoryPipelineScheduleCallback(OAIHttpRequestWorker *worker);
    void createRepositoryPipelineVariableCallback(OAIHttpRequestWorker *worker);
    void deleteDeploymentVariableCallback(OAIHttpRequestWorker *worker);
    void deletePipelineVariableForTeamCallback(OAIHttpRequestWorker *worker);
    void deletePipelineVariableForUserCallback(OAIHttpRequestWorker *worker);
    void deletePipelineVariableForWorkspaceCallback(OAIHttpRequestWorker *worker);
    void deleteRepositoryPipelineCacheCallback(OAIHttpRequestWorker *worker);
    void deleteRepositoryPipelineCachesCallback(OAIHttpRequestWorker *worker);
    void deleteRepositoryPipelineKeyPairCallback(OAIHttpRequestWorker *worker);
    void deleteRepositoryPipelineKnownHostCallback(OAIHttpRequestWorker *worker);
    void deleteRepositoryPipelineScheduleCallback(OAIHttpRequestWorker *worker);
    void deleteRepositoryPipelineVariableCallback(OAIHttpRequestWorker *worker);
    void getDeploymentVariablesCallback(OAIHttpRequestWorker *worker);
    void getOIDCConfigurationCallback(OAIHttpRequestWorker *worker);
    void getOIDCKeysCallback(OAIHttpRequestWorker *worker);
    void getPipelineContainerLogCallback(OAIHttpRequestWorker *worker);
    void getPipelineForRepositoryCallback(OAIHttpRequestWorker *worker);
    void getPipelineStepForRepositoryCallback(OAIHttpRequestWorker *worker);
    void getPipelineStepLogForRepositoryCallback(OAIHttpRequestWorker *worker);
    void getPipelineStepsForRepositoryCallback(OAIHttpRequestWorker *worker);
    void getPipelineTestReportTestCaseReasonsCallback(OAIHttpRequestWorker *worker);
    void getPipelineTestReportTestCasesCallback(OAIHttpRequestWorker *worker);
    void getPipelineTestReportsCallback(OAIHttpRequestWorker *worker);
    void getPipelineVariableForTeamCallback(OAIHttpRequestWorker *worker);
    void getPipelineVariableForUserCallback(OAIHttpRequestWorker *worker);
    void getPipelineVariableForWorkspaceCallback(OAIHttpRequestWorker *worker);
    void getPipelineVariablesForTeamCallback(OAIHttpRequestWorker *worker);
    void getPipelineVariablesForUserCallback(OAIHttpRequestWorker *worker);
    void getPipelineVariablesForWorkspaceCallback(OAIHttpRequestWorker *worker);
    void getPipelinesForRepositoryCallback(OAIHttpRequestWorker *worker);
    void getRepositoryPipelineCacheContentURICallback(OAIHttpRequestWorker *worker);
    void getRepositoryPipelineCachesCallback(OAIHttpRequestWorker *worker);
    void getRepositoryPipelineConfigCallback(OAIHttpRequestWorker *worker);
    void getRepositoryPipelineKnownHostCallback(OAIHttpRequestWorker *worker);
    void getRepositoryPipelineKnownHostsCallback(OAIHttpRequestWorker *worker);
    void getRepositoryPipelineScheduleCallback(OAIHttpRequestWorker *worker);
    void getRepositoryPipelineScheduleExecutionsCallback(OAIHttpRequestWorker *worker);
    void getRepositoryPipelineSchedulesCallback(OAIHttpRequestWorker *worker);
    void getRepositoryPipelineSshKeyPairCallback(OAIHttpRequestWorker *worker);
    void getRepositoryPipelineVariableCallback(OAIHttpRequestWorker *worker);
    void getRepositoryPipelineVariablesCallback(OAIHttpRequestWorker *worker);
    void stopPipelineCallback(OAIHttpRequestWorker *worker);
    void updateDeploymentVariableCallback(OAIHttpRequestWorker *worker);
    void updatePipelineVariableForTeamCallback(OAIHttpRequestWorker *worker);
    void updatePipelineVariableForUserCallback(OAIHttpRequestWorker *worker);
    void updatePipelineVariableForWorkspaceCallback(OAIHttpRequestWorker *worker);
    void updateRepositoryBuildNumberCallback(OAIHttpRequestWorker *worker);
    void updateRepositoryPipelineConfigCallback(OAIHttpRequestWorker *worker);
    void updateRepositoryPipelineKeyPairCallback(OAIHttpRequestWorker *worker);
    void updateRepositoryPipelineKnownHostCallback(OAIHttpRequestWorker *worker);
    void updateRepositoryPipelineScheduleCallback(OAIHttpRequestWorker *worker);
    void updateRepositoryPipelineVariableCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createDeploymentVariableSignal(OAIDeployment_variable summary);
    void createPipelineForRepositorySignal(OAIPipeline summary);
    void createPipelineVariableForTeamSignal(OAIPipeline_variable summary);
    void createPipelineVariableForUserSignal(OAIPipeline_variable summary);
    void createPipelineVariableForWorkspaceSignal(OAIPipeline_variable summary);
    void createRepositoryPipelineKnownHostSignal(OAIPipeline_known_host summary);
    void createRepositoryPipelineScheduleSignal(OAIPipeline_schedule summary);
    void createRepositoryPipelineVariableSignal(OAIPipeline_variable summary);
    void deleteDeploymentVariableSignal();
    void deletePipelineVariableForTeamSignal();
    void deletePipelineVariableForUserSignal();
    void deletePipelineVariableForWorkspaceSignal();
    void deleteRepositoryPipelineCacheSignal();
    void deleteRepositoryPipelineCachesSignal();
    void deleteRepositoryPipelineKeyPairSignal();
    void deleteRepositoryPipelineKnownHostSignal();
    void deleteRepositoryPipelineScheduleSignal();
    void deleteRepositoryPipelineVariableSignal();
    void getDeploymentVariablesSignal(OAIPaginated_deployment_variable summary);
    void getOIDCConfigurationSignal();
    void getOIDCKeysSignal();
    void getPipelineContainerLogSignal();
    void getPipelineForRepositorySignal(OAIPipeline summary);
    void getPipelineStepForRepositorySignal(OAIPipeline_step summary);
    void getPipelineStepLogForRepositorySignal();
    void getPipelineStepsForRepositorySignal(OAIPaginated_pipeline_steps summary);
    void getPipelineTestReportTestCaseReasonsSignal();
    void getPipelineTestReportTestCasesSignal();
    void getPipelineTestReportsSignal();
    void getPipelineVariableForTeamSignal(OAIPipeline_variable summary);
    void getPipelineVariableForUserSignal(OAIPipeline_variable summary);
    void getPipelineVariableForWorkspaceSignal(OAIPipeline_variable summary);
    void getPipelineVariablesForTeamSignal(OAIPaginated_pipeline_variables summary);
    void getPipelineVariablesForUserSignal(OAIPaginated_pipeline_variables summary);
    void getPipelineVariablesForWorkspaceSignal(OAIPaginated_pipeline_variables summary);
    void getPipelinesForRepositorySignal(OAIPaginated_pipelines summary);
    void getRepositoryPipelineCacheContentURISignal(OAIPipeline_cache_content_uri summary);
    void getRepositoryPipelineCachesSignal(OAIPaginated_pipeline_caches summary);
    void getRepositoryPipelineConfigSignal(OAIPipelines_config summary);
    void getRepositoryPipelineKnownHostSignal(OAIPipeline_known_host summary);
    void getRepositoryPipelineKnownHostsSignal(OAIPaginated_pipeline_known_hosts summary);
    void getRepositoryPipelineScheduleSignal(OAIPipeline_schedule summary);
    void getRepositoryPipelineScheduleExecutionsSignal(OAIPaginated_pipeline_schedule_executions summary);
    void getRepositoryPipelineSchedulesSignal(OAIPaginated_pipeline_schedules summary);
    void getRepositoryPipelineSshKeyPairSignal(OAIPipeline_ssh_key_pair summary);
    void getRepositoryPipelineVariableSignal(OAIPipeline_variable summary);
    void getRepositoryPipelineVariablesSignal(OAIPaginated_pipeline_variables summary);
    void stopPipelineSignal();
    void updateDeploymentVariableSignal(OAIDeployment_variable summary);
    void updatePipelineVariableForTeamSignal(OAIPipeline_variable summary);
    void updatePipelineVariableForUserSignal(OAIPipeline_variable summary);
    void updatePipelineVariableForWorkspaceSignal(OAIPipeline_variable summary);
    void updateRepositoryBuildNumberSignal(OAIPipeline_build_number summary);
    void updateRepositoryPipelineConfigSignal(OAIPipelines_config summary);
    void updateRepositoryPipelineKeyPairSignal(OAIPipeline_ssh_key_pair summary);
    void updateRepositoryPipelineKnownHostSignal(OAIPipeline_known_host summary);
    void updateRepositoryPipelineScheduleSignal(OAIPipeline_schedule summary);
    void updateRepositoryPipelineVariableSignal(OAIPipeline_variable summary);


    void createDeploymentVariableSignalFull(OAIHttpRequestWorker *worker, OAIDeployment_variable summary);
    void createPipelineForRepositorySignalFull(OAIHttpRequestWorker *worker, OAIPipeline summary);
    void createPipelineVariableForTeamSignalFull(OAIHttpRequestWorker *worker, OAIPipeline_variable summary);
    void createPipelineVariableForUserSignalFull(OAIHttpRequestWorker *worker, OAIPipeline_variable summary);
    void createPipelineVariableForWorkspaceSignalFull(OAIHttpRequestWorker *worker, OAIPipeline_variable summary);
    void createRepositoryPipelineKnownHostSignalFull(OAIHttpRequestWorker *worker, OAIPipeline_known_host summary);
    void createRepositoryPipelineScheduleSignalFull(OAIHttpRequestWorker *worker, OAIPipeline_schedule summary);
    void createRepositoryPipelineVariableSignalFull(OAIHttpRequestWorker *worker, OAIPipeline_variable summary);
    void deleteDeploymentVariableSignalFull(OAIHttpRequestWorker *worker);
    void deletePipelineVariableForTeamSignalFull(OAIHttpRequestWorker *worker);
    void deletePipelineVariableForUserSignalFull(OAIHttpRequestWorker *worker);
    void deletePipelineVariableForWorkspaceSignalFull(OAIHttpRequestWorker *worker);
    void deleteRepositoryPipelineCacheSignalFull(OAIHttpRequestWorker *worker);
    void deleteRepositoryPipelineCachesSignalFull(OAIHttpRequestWorker *worker);
    void deleteRepositoryPipelineKeyPairSignalFull(OAIHttpRequestWorker *worker);
    void deleteRepositoryPipelineKnownHostSignalFull(OAIHttpRequestWorker *worker);
    void deleteRepositoryPipelineScheduleSignalFull(OAIHttpRequestWorker *worker);
    void deleteRepositoryPipelineVariableSignalFull(OAIHttpRequestWorker *worker);
    void getDeploymentVariablesSignalFull(OAIHttpRequestWorker *worker, OAIPaginated_deployment_variable summary);
    void getOIDCConfigurationSignalFull(OAIHttpRequestWorker *worker);
    void getOIDCKeysSignalFull(OAIHttpRequestWorker *worker);
    void getPipelineContainerLogSignalFull(OAIHttpRequestWorker *worker);
    void getPipelineForRepositorySignalFull(OAIHttpRequestWorker *worker, OAIPipeline summary);
    void getPipelineStepForRepositorySignalFull(OAIHttpRequestWorker *worker, OAIPipeline_step summary);
    void getPipelineStepLogForRepositorySignalFull(OAIHttpRequestWorker *worker);
    void getPipelineStepsForRepositorySignalFull(OAIHttpRequestWorker *worker, OAIPaginated_pipeline_steps summary);
    void getPipelineTestReportTestCaseReasonsSignalFull(OAIHttpRequestWorker *worker);
    void getPipelineTestReportTestCasesSignalFull(OAIHttpRequestWorker *worker);
    void getPipelineTestReportsSignalFull(OAIHttpRequestWorker *worker);
    void getPipelineVariableForTeamSignalFull(OAIHttpRequestWorker *worker, OAIPipeline_variable summary);
    void getPipelineVariableForUserSignalFull(OAIHttpRequestWorker *worker, OAIPipeline_variable summary);
    void getPipelineVariableForWorkspaceSignalFull(OAIHttpRequestWorker *worker, OAIPipeline_variable summary);
    void getPipelineVariablesForTeamSignalFull(OAIHttpRequestWorker *worker, OAIPaginated_pipeline_variables summary);
    void getPipelineVariablesForUserSignalFull(OAIHttpRequestWorker *worker, OAIPaginated_pipeline_variables summary);
    void getPipelineVariablesForWorkspaceSignalFull(OAIHttpRequestWorker *worker, OAIPaginated_pipeline_variables summary);
    void getPipelinesForRepositorySignalFull(OAIHttpRequestWorker *worker, OAIPaginated_pipelines summary);
    void getRepositoryPipelineCacheContentURISignalFull(OAIHttpRequestWorker *worker, OAIPipeline_cache_content_uri summary);
    void getRepositoryPipelineCachesSignalFull(OAIHttpRequestWorker *worker, OAIPaginated_pipeline_caches summary);
    void getRepositoryPipelineConfigSignalFull(OAIHttpRequestWorker *worker, OAIPipelines_config summary);
    void getRepositoryPipelineKnownHostSignalFull(OAIHttpRequestWorker *worker, OAIPipeline_known_host summary);
    void getRepositoryPipelineKnownHostsSignalFull(OAIHttpRequestWorker *worker, OAIPaginated_pipeline_known_hosts summary);
    void getRepositoryPipelineScheduleSignalFull(OAIHttpRequestWorker *worker, OAIPipeline_schedule summary);
    void getRepositoryPipelineScheduleExecutionsSignalFull(OAIHttpRequestWorker *worker, OAIPaginated_pipeline_schedule_executions summary);
    void getRepositoryPipelineSchedulesSignalFull(OAIHttpRequestWorker *worker, OAIPaginated_pipeline_schedules summary);
    void getRepositoryPipelineSshKeyPairSignalFull(OAIHttpRequestWorker *worker, OAIPipeline_ssh_key_pair summary);
    void getRepositoryPipelineVariableSignalFull(OAIHttpRequestWorker *worker, OAIPipeline_variable summary);
    void getRepositoryPipelineVariablesSignalFull(OAIHttpRequestWorker *worker, OAIPaginated_pipeline_variables summary);
    void stopPipelineSignalFull(OAIHttpRequestWorker *worker);
    void updateDeploymentVariableSignalFull(OAIHttpRequestWorker *worker, OAIDeployment_variable summary);
    void updatePipelineVariableForTeamSignalFull(OAIHttpRequestWorker *worker, OAIPipeline_variable summary);
    void updatePipelineVariableForUserSignalFull(OAIHttpRequestWorker *worker, OAIPipeline_variable summary);
    void updatePipelineVariableForWorkspaceSignalFull(OAIHttpRequestWorker *worker, OAIPipeline_variable summary);
    void updateRepositoryBuildNumberSignalFull(OAIHttpRequestWorker *worker, OAIPipeline_build_number summary);
    void updateRepositoryPipelineConfigSignalFull(OAIHttpRequestWorker *worker, OAIPipelines_config summary);
    void updateRepositoryPipelineKeyPairSignalFull(OAIHttpRequestWorker *worker, OAIPipeline_ssh_key_pair summary);
    void updateRepositoryPipelineKnownHostSignalFull(OAIHttpRequestWorker *worker, OAIPipeline_known_host summary);
    void updateRepositoryPipelineScheduleSignalFull(OAIHttpRequestWorker *worker, OAIPipeline_schedule summary);
    void updateRepositoryPipelineVariableSignalFull(OAIHttpRequestWorker *worker, OAIPipeline_variable summary);

    Q_DECL_DEPRECATED_X("Use createDeploymentVariableSignalError() instead")
    void createDeploymentVariableSignalE(OAIDeployment_variable summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createDeploymentVariableSignalError(OAIDeployment_variable summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createPipelineForRepositorySignalError() instead")
    void createPipelineForRepositorySignalE(OAIPipeline summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createPipelineForRepositorySignalError(OAIPipeline summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createPipelineVariableForTeamSignalError() instead")
    void createPipelineVariableForTeamSignalE(OAIPipeline_variable summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createPipelineVariableForTeamSignalError(OAIPipeline_variable summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createPipelineVariableForUserSignalError() instead")
    void createPipelineVariableForUserSignalE(OAIPipeline_variable summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createPipelineVariableForUserSignalError(OAIPipeline_variable summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createPipelineVariableForWorkspaceSignalError() instead")
    void createPipelineVariableForWorkspaceSignalE(OAIPipeline_variable summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createPipelineVariableForWorkspaceSignalError(OAIPipeline_variable summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createRepositoryPipelineKnownHostSignalError() instead")
    void createRepositoryPipelineKnownHostSignalE(OAIPipeline_known_host summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createRepositoryPipelineKnownHostSignalError(OAIPipeline_known_host summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createRepositoryPipelineScheduleSignalError() instead")
    void createRepositoryPipelineScheduleSignalE(OAIPipeline_schedule summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createRepositoryPipelineScheduleSignalError(OAIPipeline_schedule summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createRepositoryPipelineVariableSignalError() instead")
    void createRepositoryPipelineVariableSignalE(OAIPipeline_variable summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createRepositoryPipelineVariableSignalError(OAIPipeline_variable summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteDeploymentVariableSignalError() instead")
    void deleteDeploymentVariableSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteDeploymentVariableSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deletePipelineVariableForTeamSignalError() instead")
    void deletePipelineVariableForTeamSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deletePipelineVariableForTeamSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deletePipelineVariableForUserSignalError() instead")
    void deletePipelineVariableForUserSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deletePipelineVariableForUserSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deletePipelineVariableForWorkspaceSignalError() instead")
    void deletePipelineVariableForWorkspaceSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deletePipelineVariableForWorkspaceSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteRepositoryPipelineCacheSignalError() instead")
    void deleteRepositoryPipelineCacheSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteRepositoryPipelineCacheSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteRepositoryPipelineCachesSignalError() instead")
    void deleteRepositoryPipelineCachesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteRepositoryPipelineCachesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteRepositoryPipelineKeyPairSignalError() instead")
    void deleteRepositoryPipelineKeyPairSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteRepositoryPipelineKeyPairSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteRepositoryPipelineKnownHostSignalError() instead")
    void deleteRepositoryPipelineKnownHostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteRepositoryPipelineKnownHostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteRepositoryPipelineScheduleSignalError() instead")
    void deleteRepositoryPipelineScheduleSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteRepositoryPipelineScheduleSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteRepositoryPipelineVariableSignalError() instead")
    void deleteRepositoryPipelineVariableSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteRepositoryPipelineVariableSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeploymentVariablesSignalError() instead")
    void getDeploymentVariablesSignalE(OAIPaginated_deployment_variable summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeploymentVariablesSignalError(OAIPaginated_deployment_variable summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOIDCConfigurationSignalError() instead")
    void getOIDCConfigurationSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getOIDCConfigurationSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOIDCKeysSignalError() instead")
    void getOIDCKeysSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getOIDCKeysSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPipelineContainerLogSignalError() instead")
    void getPipelineContainerLogSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getPipelineContainerLogSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPipelineForRepositorySignalError() instead")
    void getPipelineForRepositorySignalE(OAIPipeline summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPipelineForRepositorySignalError(OAIPipeline summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPipelineStepForRepositorySignalError() instead")
    void getPipelineStepForRepositorySignalE(OAIPipeline_step summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPipelineStepForRepositorySignalError(OAIPipeline_step summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPipelineStepLogForRepositorySignalError() instead")
    void getPipelineStepLogForRepositorySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getPipelineStepLogForRepositorySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPipelineStepsForRepositorySignalError() instead")
    void getPipelineStepsForRepositorySignalE(OAIPaginated_pipeline_steps summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPipelineStepsForRepositorySignalError(OAIPaginated_pipeline_steps summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPipelineTestReportTestCaseReasonsSignalError() instead")
    void getPipelineTestReportTestCaseReasonsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getPipelineTestReportTestCaseReasonsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPipelineTestReportTestCasesSignalError() instead")
    void getPipelineTestReportTestCasesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getPipelineTestReportTestCasesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPipelineTestReportsSignalError() instead")
    void getPipelineTestReportsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getPipelineTestReportsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPipelineVariableForTeamSignalError() instead")
    void getPipelineVariableForTeamSignalE(OAIPipeline_variable summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPipelineVariableForTeamSignalError(OAIPipeline_variable summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPipelineVariableForUserSignalError() instead")
    void getPipelineVariableForUserSignalE(OAIPipeline_variable summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPipelineVariableForUserSignalError(OAIPipeline_variable summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPipelineVariableForWorkspaceSignalError() instead")
    void getPipelineVariableForWorkspaceSignalE(OAIPipeline_variable summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPipelineVariableForWorkspaceSignalError(OAIPipeline_variable summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPipelineVariablesForTeamSignalError() instead")
    void getPipelineVariablesForTeamSignalE(OAIPaginated_pipeline_variables summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPipelineVariablesForTeamSignalError(OAIPaginated_pipeline_variables summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPipelineVariablesForUserSignalError() instead")
    void getPipelineVariablesForUserSignalE(OAIPaginated_pipeline_variables summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPipelineVariablesForUserSignalError(OAIPaginated_pipeline_variables summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPipelineVariablesForWorkspaceSignalError() instead")
    void getPipelineVariablesForWorkspaceSignalE(OAIPaginated_pipeline_variables summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPipelineVariablesForWorkspaceSignalError(OAIPaginated_pipeline_variables summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPipelinesForRepositorySignalError() instead")
    void getPipelinesForRepositorySignalE(OAIPaginated_pipelines summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPipelinesForRepositorySignalError(OAIPaginated_pipelines summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRepositoryPipelineCacheContentURISignalError() instead")
    void getRepositoryPipelineCacheContentURISignalE(OAIPipeline_cache_content_uri summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getRepositoryPipelineCacheContentURISignalError(OAIPipeline_cache_content_uri summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRepositoryPipelineCachesSignalError() instead")
    void getRepositoryPipelineCachesSignalE(OAIPaginated_pipeline_caches summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getRepositoryPipelineCachesSignalError(OAIPaginated_pipeline_caches summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRepositoryPipelineConfigSignalError() instead")
    void getRepositoryPipelineConfigSignalE(OAIPipelines_config summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getRepositoryPipelineConfigSignalError(OAIPipelines_config summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRepositoryPipelineKnownHostSignalError() instead")
    void getRepositoryPipelineKnownHostSignalE(OAIPipeline_known_host summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getRepositoryPipelineKnownHostSignalError(OAIPipeline_known_host summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRepositoryPipelineKnownHostsSignalError() instead")
    void getRepositoryPipelineKnownHostsSignalE(OAIPaginated_pipeline_known_hosts summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getRepositoryPipelineKnownHostsSignalError(OAIPaginated_pipeline_known_hosts summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRepositoryPipelineScheduleSignalError() instead")
    void getRepositoryPipelineScheduleSignalE(OAIPipeline_schedule summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getRepositoryPipelineScheduleSignalError(OAIPipeline_schedule summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRepositoryPipelineScheduleExecutionsSignalError() instead")
    void getRepositoryPipelineScheduleExecutionsSignalE(OAIPaginated_pipeline_schedule_executions summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getRepositoryPipelineScheduleExecutionsSignalError(OAIPaginated_pipeline_schedule_executions summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRepositoryPipelineSchedulesSignalError() instead")
    void getRepositoryPipelineSchedulesSignalE(OAIPaginated_pipeline_schedules summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getRepositoryPipelineSchedulesSignalError(OAIPaginated_pipeline_schedules summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRepositoryPipelineSshKeyPairSignalError() instead")
    void getRepositoryPipelineSshKeyPairSignalE(OAIPipeline_ssh_key_pair summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getRepositoryPipelineSshKeyPairSignalError(OAIPipeline_ssh_key_pair summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRepositoryPipelineVariableSignalError() instead")
    void getRepositoryPipelineVariableSignalE(OAIPipeline_variable summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getRepositoryPipelineVariableSignalError(OAIPipeline_variable summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRepositoryPipelineVariablesSignalError() instead")
    void getRepositoryPipelineVariablesSignalE(OAIPaginated_pipeline_variables summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getRepositoryPipelineVariablesSignalError(OAIPaginated_pipeline_variables summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use stopPipelineSignalError() instead")
    void stopPipelineSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void stopPipelineSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateDeploymentVariableSignalError() instead")
    void updateDeploymentVariableSignalE(OAIDeployment_variable summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateDeploymentVariableSignalError(OAIDeployment_variable summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updatePipelineVariableForTeamSignalError() instead")
    void updatePipelineVariableForTeamSignalE(OAIPipeline_variable summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updatePipelineVariableForTeamSignalError(OAIPipeline_variable summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updatePipelineVariableForUserSignalError() instead")
    void updatePipelineVariableForUserSignalE(OAIPipeline_variable summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updatePipelineVariableForUserSignalError(OAIPipeline_variable summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updatePipelineVariableForWorkspaceSignalError() instead")
    void updatePipelineVariableForWorkspaceSignalE(OAIPipeline_variable summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updatePipelineVariableForWorkspaceSignalError(OAIPipeline_variable summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateRepositoryBuildNumberSignalError() instead")
    void updateRepositoryBuildNumberSignalE(OAIPipeline_build_number summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateRepositoryBuildNumberSignalError(OAIPipeline_build_number summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateRepositoryPipelineConfigSignalError() instead")
    void updateRepositoryPipelineConfigSignalE(OAIPipelines_config summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateRepositoryPipelineConfigSignalError(OAIPipelines_config summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateRepositoryPipelineKeyPairSignalError() instead")
    void updateRepositoryPipelineKeyPairSignalE(OAIPipeline_ssh_key_pair summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateRepositoryPipelineKeyPairSignalError(OAIPipeline_ssh_key_pair summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateRepositoryPipelineKnownHostSignalError() instead")
    void updateRepositoryPipelineKnownHostSignalE(OAIPipeline_known_host summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateRepositoryPipelineKnownHostSignalError(OAIPipeline_known_host summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateRepositoryPipelineScheduleSignalError() instead")
    void updateRepositoryPipelineScheduleSignalE(OAIPipeline_schedule summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateRepositoryPipelineScheduleSignalError(OAIPipeline_schedule summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateRepositoryPipelineVariableSignalError() instead")
    void updateRepositoryPipelineVariableSignalE(OAIPipeline_variable summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateRepositoryPipelineVariableSignalError(OAIPipeline_variable summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createDeploymentVariableSignalErrorFull() instead")
    void createDeploymentVariableSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createDeploymentVariableSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createPipelineForRepositorySignalErrorFull() instead")
    void createPipelineForRepositorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createPipelineForRepositorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createPipelineVariableForTeamSignalErrorFull() instead")
    void createPipelineVariableForTeamSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createPipelineVariableForTeamSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createPipelineVariableForUserSignalErrorFull() instead")
    void createPipelineVariableForUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createPipelineVariableForUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createPipelineVariableForWorkspaceSignalErrorFull() instead")
    void createPipelineVariableForWorkspaceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createPipelineVariableForWorkspaceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createRepositoryPipelineKnownHostSignalErrorFull() instead")
    void createRepositoryPipelineKnownHostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createRepositoryPipelineKnownHostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createRepositoryPipelineScheduleSignalErrorFull() instead")
    void createRepositoryPipelineScheduleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createRepositoryPipelineScheduleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createRepositoryPipelineVariableSignalErrorFull() instead")
    void createRepositoryPipelineVariableSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createRepositoryPipelineVariableSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteDeploymentVariableSignalErrorFull() instead")
    void deleteDeploymentVariableSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteDeploymentVariableSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deletePipelineVariableForTeamSignalErrorFull() instead")
    void deletePipelineVariableForTeamSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deletePipelineVariableForTeamSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deletePipelineVariableForUserSignalErrorFull() instead")
    void deletePipelineVariableForUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deletePipelineVariableForUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deletePipelineVariableForWorkspaceSignalErrorFull() instead")
    void deletePipelineVariableForWorkspaceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deletePipelineVariableForWorkspaceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteRepositoryPipelineCacheSignalErrorFull() instead")
    void deleteRepositoryPipelineCacheSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteRepositoryPipelineCacheSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteRepositoryPipelineCachesSignalErrorFull() instead")
    void deleteRepositoryPipelineCachesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteRepositoryPipelineCachesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteRepositoryPipelineKeyPairSignalErrorFull() instead")
    void deleteRepositoryPipelineKeyPairSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteRepositoryPipelineKeyPairSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteRepositoryPipelineKnownHostSignalErrorFull() instead")
    void deleteRepositoryPipelineKnownHostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteRepositoryPipelineKnownHostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteRepositoryPipelineScheduleSignalErrorFull() instead")
    void deleteRepositoryPipelineScheduleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteRepositoryPipelineScheduleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteRepositoryPipelineVariableSignalErrorFull() instead")
    void deleteRepositoryPipelineVariableSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteRepositoryPipelineVariableSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeploymentVariablesSignalErrorFull() instead")
    void getDeploymentVariablesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeploymentVariablesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOIDCConfigurationSignalErrorFull() instead")
    void getOIDCConfigurationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOIDCConfigurationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOIDCKeysSignalErrorFull() instead")
    void getOIDCKeysSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOIDCKeysSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPipelineContainerLogSignalErrorFull() instead")
    void getPipelineContainerLogSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPipelineContainerLogSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPipelineForRepositorySignalErrorFull() instead")
    void getPipelineForRepositorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPipelineForRepositorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPipelineStepForRepositorySignalErrorFull() instead")
    void getPipelineStepForRepositorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPipelineStepForRepositorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPipelineStepLogForRepositorySignalErrorFull() instead")
    void getPipelineStepLogForRepositorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPipelineStepLogForRepositorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPipelineStepsForRepositorySignalErrorFull() instead")
    void getPipelineStepsForRepositorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPipelineStepsForRepositorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPipelineTestReportTestCaseReasonsSignalErrorFull() instead")
    void getPipelineTestReportTestCaseReasonsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPipelineTestReportTestCaseReasonsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPipelineTestReportTestCasesSignalErrorFull() instead")
    void getPipelineTestReportTestCasesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPipelineTestReportTestCasesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPipelineTestReportsSignalErrorFull() instead")
    void getPipelineTestReportsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPipelineTestReportsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPipelineVariableForTeamSignalErrorFull() instead")
    void getPipelineVariableForTeamSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPipelineVariableForTeamSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPipelineVariableForUserSignalErrorFull() instead")
    void getPipelineVariableForUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPipelineVariableForUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPipelineVariableForWorkspaceSignalErrorFull() instead")
    void getPipelineVariableForWorkspaceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPipelineVariableForWorkspaceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPipelineVariablesForTeamSignalErrorFull() instead")
    void getPipelineVariablesForTeamSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPipelineVariablesForTeamSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPipelineVariablesForUserSignalErrorFull() instead")
    void getPipelineVariablesForUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPipelineVariablesForUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPipelineVariablesForWorkspaceSignalErrorFull() instead")
    void getPipelineVariablesForWorkspaceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPipelineVariablesForWorkspaceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPipelinesForRepositorySignalErrorFull() instead")
    void getPipelinesForRepositorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPipelinesForRepositorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRepositoryPipelineCacheContentURISignalErrorFull() instead")
    void getRepositoryPipelineCacheContentURISignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getRepositoryPipelineCacheContentURISignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRepositoryPipelineCachesSignalErrorFull() instead")
    void getRepositoryPipelineCachesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getRepositoryPipelineCachesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRepositoryPipelineConfigSignalErrorFull() instead")
    void getRepositoryPipelineConfigSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getRepositoryPipelineConfigSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRepositoryPipelineKnownHostSignalErrorFull() instead")
    void getRepositoryPipelineKnownHostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getRepositoryPipelineKnownHostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRepositoryPipelineKnownHostsSignalErrorFull() instead")
    void getRepositoryPipelineKnownHostsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getRepositoryPipelineKnownHostsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRepositoryPipelineScheduleSignalErrorFull() instead")
    void getRepositoryPipelineScheduleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getRepositoryPipelineScheduleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRepositoryPipelineScheduleExecutionsSignalErrorFull() instead")
    void getRepositoryPipelineScheduleExecutionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getRepositoryPipelineScheduleExecutionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRepositoryPipelineSchedulesSignalErrorFull() instead")
    void getRepositoryPipelineSchedulesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getRepositoryPipelineSchedulesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRepositoryPipelineSshKeyPairSignalErrorFull() instead")
    void getRepositoryPipelineSshKeyPairSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getRepositoryPipelineSshKeyPairSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRepositoryPipelineVariableSignalErrorFull() instead")
    void getRepositoryPipelineVariableSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getRepositoryPipelineVariableSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRepositoryPipelineVariablesSignalErrorFull() instead")
    void getRepositoryPipelineVariablesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getRepositoryPipelineVariablesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use stopPipelineSignalErrorFull() instead")
    void stopPipelineSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void stopPipelineSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateDeploymentVariableSignalErrorFull() instead")
    void updateDeploymentVariableSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateDeploymentVariableSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updatePipelineVariableForTeamSignalErrorFull() instead")
    void updatePipelineVariableForTeamSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updatePipelineVariableForTeamSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updatePipelineVariableForUserSignalErrorFull() instead")
    void updatePipelineVariableForUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updatePipelineVariableForUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updatePipelineVariableForWorkspaceSignalErrorFull() instead")
    void updatePipelineVariableForWorkspaceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updatePipelineVariableForWorkspaceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateRepositoryBuildNumberSignalErrorFull() instead")
    void updateRepositoryBuildNumberSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateRepositoryBuildNumberSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateRepositoryPipelineConfigSignalErrorFull() instead")
    void updateRepositoryPipelineConfigSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateRepositoryPipelineConfigSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateRepositoryPipelineKeyPairSignalErrorFull() instead")
    void updateRepositoryPipelineKeyPairSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateRepositoryPipelineKeyPairSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateRepositoryPipelineKnownHostSignalErrorFull() instead")
    void updateRepositoryPipelineKnownHostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateRepositoryPipelineKnownHostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateRepositoryPipelineScheduleSignalErrorFull() instead")
    void updateRepositoryPipelineScheduleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateRepositoryPipelineScheduleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateRepositoryPipelineVariableSignalErrorFull() instead")
    void updateRepositoryPipelineVariableSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateRepositoryPipelineVariableSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
