/**
 * Bitbucket API
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@bitbucket.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPipeline.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPipeline::OAIPipeline(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPipeline::OAIPipeline() {
    this->initializeModel();
}

OAIPipeline::~OAIPipeline() {}

void OAIPipeline::initializeModel() {

    m_type_isSet = false;
    m_type_isValid = false;

    m_build_number_isSet = false;
    m_build_number_isValid = false;

    m_build_seconds_used_isSet = false;
    m_build_seconds_used_isValid = false;

    m_completed_on_isSet = false;
    m_completed_on_isValid = false;

    m_created_on_isSet = false;
    m_created_on_isValid = false;

    m_creator_isSet = false;
    m_creator_isValid = false;

    m_repository_isSet = false;
    m_repository_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_target_isSet = false;
    m_target_isValid = false;

    m_trigger_isSet = false;
    m_trigger_isValid = false;

    m_uuid_isSet = false;
    m_uuid_isValid = false;
}

void OAIPipeline::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPipeline::fromJsonObject(QJsonObject json) {

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_build_number_isValid = ::OpenAPI::fromJsonValue(m_build_number, json[QString("build_number")]);
    m_build_number_isSet = !json[QString("build_number")].isNull() && m_build_number_isValid;

    m_build_seconds_used_isValid = ::OpenAPI::fromJsonValue(m_build_seconds_used, json[QString("build_seconds_used")]);
    m_build_seconds_used_isSet = !json[QString("build_seconds_used")].isNull() && m_build_seconds_used_isValid;

    m_completed_on_isValid = ::OpenAPI::fromJsonValue(m_completed_on, json[QString("completed_on")]);
    m_completed_on_isSet = !json[QString("completed_on")].isNull() && m_completed_on_isValid;

    m_created_on_isValid = ::OpenAPI::fromJsonValue(m_created_on, json[QString("created_on")]);
    m_created_on_isSet = !json[QString("created_on")].isNull() && m_created_on_isValid;

    m_creator_isValid = ::OpenAPI::fromJsonValue(m_creator, json[QString("creator")]);
    m_creator_isSet = !json[QString("creator")].isNull() && m_creator_isValid;

    m_repository_isValid = ::OpenAPI::fromJsonValue(m_repository, json[QString("repository")]);
    m_repository_isSet = !json[QString("repository")].isNull() && m_repository_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_target_isValid = ::OpenAPI::fromJsonValue(m_target, json[QString("target")]);
    m_target_isSet = !json[QString("target")].isNull() && m_target_isValid;

    m_trigger_isValid = ::OpenAPI::fromJsonValue(m_trigger, json[QString("trigger")]);
    m_trigger_isSet = !json[QString("trigger")].isNull() && m_trigger_isValid;

    m_uuid_isValid = ::OpenAPI::fromJsonValue(m_uuid, json[QString("uuid")]);
    m_uuid_isSet = !json[QString("uuid")].isNull() && m_uuid_isValid;
}

QString OAIPipeline::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPipeline::asJsonObject() const {
    QJsonObject obj;
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_build_number_isSet) {
        obj.insert(QString("build_number"), ::OpenAPI::toJsonValue(m_build_number));
    }
    if (m_build_seconds_used_isSet) {
        obj.insert(QString("build_seconds_used"), ::OpenAPI::toJsonValue(m_build_seconds_used));
    }
    if (m_completed_on_isSet) {
        obj.insert(QString("completed_on"), ::OpenAPI::toJsonValue(m_completed_on));
    }
    if (m_created_on_isSet) {
        obj.insert(QString("created_on"), ::OpenAPI::toJsonValue(m_created_on));
    }
    if (m_creator.isSet()) {
        obj.insert(QString("creator"), ::OpenAPI::toJsonValue(m_creator));
    }
    if (m_repository.isSet()) {
        obj.insert(QString("repository"), ::OpenAPI::toJsonValue(m_repository));
    }
    if (m_state.isSet()) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_target.isSet()) {
        obj.insert(QString("target"), ::OpenAPI::toJsonValue(m_target));
    }
    if (m_trigger.isSet()) {
        obj.insert(QString("trigger"), ::OpenAPI::toJsonValue(m_trigger));
    }
    if (m_uuid_isSet) {
        obj.insert(QString("uuid"), ::OpenAPI::toJsonValue(m_uuid));
    }
    return obj;
}

QString OAIPipeline::getType() const {
    return m_type;
}
void OAIPipeline::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIPipeline::is_type_Set() const{
    return m_type_isSet;
}

bool OAIPipeline::is_type_Valid() const{
    return m_type_isValid;
}

qint32 OAIPipeline::getBuildNumber() const {
    return m_build_number;
}
void OAIPipeline::setBuildNumber(const qint32 &build_number) {
    m_build_number = build_number;
    m_build_number_isSet = true;
}

bool OAIPipeline::is_build_number_Set() const{
    return m_build_number_isSet;
}

bool OAIPipeline::is_build_number_Valid() const{
    return m_build_number_isValid;
}

qint32 OAIPipeline::getBuildSecondsUsed() const {
    return m_build_seconds_used;
}
void OAIPipeline::setBuildSecondsUsed(const qint32 &build_seconds_used) {
    m_build_seconds_used = build_seconds_used;
    m_build_seconds_used_isSet = true;
}

bool OAIPipeline::is_build_seconds_used_Set() const{
    return m_build_seconds_used_isSet;
}

bool OAIPipeline::is_build_seconds_used_Valid() const{
    return m_build_seconds_used_isValid;
}

QDateTime OAIPipeline::getCompletedOn() const {
    return m_completed_on;
}
void OAIPipeline::setCompletedOn(const QDateTime &completed_on) {
    m_completed_on = completed_on;
    m_completed_on_isSet = true;
}

bool OAIPipeline::is_completed_on_Set() const{
    return m_completed_on_isSet;
}

bool OAIPipeline::is_completed_on_Valid() const{
    return m_completed_on_isValid;
}

QDateTime OAIPipeline::getCreatedOn() const {
    return m_created_on;
}
void OAIPipeline::setCreatedOn(const QDateTime &created_on) {
    m_created_on = created_on;
    m_created_on_isSet = true;
}

bool OAIPipeline::is_created_on_Set() const{
    return m_created_on_isSet;
}

bool OAIPipeline::is_created_on_Valid() const{
    return m_created_on_isValid;
}

OAIAccount OAIPipeline::getCreator() const {
    return m_creator;
}
void OAIPipeline::setCreator(const OAIAccount &creator) {
    m_creator = creator;
    m_creator_isSet = true;
}

bool OAIPipeline::is_creator_Set() const{
    return m_creator_isSet;
}

bool OAIPipeline::is_creator_Valid() const{
    return m_creator_isValid;
}

OAIRepository OAIPipeline::getRepository() const {
    return m_repository;
}
void OAIPipeline::setRepository(const OAIRepository &repository) {
    m_repository = repository;
    m_repository_isSet = true;
}

bool OAIPipeline::is_repository_Set() const{
    return m_repository_isSet;
}

bool OAIPipeline::is_repository_Valid() const{
    return m_repository_isValid;
}

OAIPipeline_state OAIPipeline::getState() const {
    return m_state;
}
void OAIPipeline::setState(const OAIPipeline_state &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIPipeline::is_state_Set() const{
    return m_state_isSet;
}

bool OAIPipeline::is_state_Valid() const{
    return m_state_isValid;
}

OAIPipeline_target OAIPipeline::getTarget() const {
    return m_target;
}
void OAIPipeline::setTarget(const OAIPipeline_target &target) {
    m_target = target;
    m_target_isSet = true;
}

bool OAIPipeline::is_target_Set() const{
    return m_target_isSet;
}

bool OAIPipeline::is_target_Valid() const{
    return m_target_isValid;
}

OAIPipeline_trigger OAIPipeline::getTrigger() const {
    return m_trigger;
}
void OAIPipeline::setTrigger(const OAIPipeline_trigger &trigger) {
    m_trigger = trigger;
    m_trigger_isSet = true;
}

bool OAIPipeline::is_trigger_Set() const{
    return m_trigger_isSet;
}

bool OAIPipeline::is_trigger_Valid() const{
    return m_trigger_isValid;
}

QString OAIPipeline::getUuid() const {
    return m_uuid;
}
void OAIPipeline::setUuid(const QString &uuid) {
    m_uuid = uuid;
    m_uuid_isSet = true;
}

bool OAIPipeline::is_uuid_Set() const{
    return m_uuid_isSet;
}

bool OAIPipeline::is_uuid_Valid() const{
    return m_uuid_isValid;
}

bool OAIPipeline::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_build_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_build_seconds_used_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_completed_on_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_on_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creator.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_repository.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_target.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_trigger.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_uuid_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPipeline::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_type_isValid && true;
}

} // namespace OpenAPI
