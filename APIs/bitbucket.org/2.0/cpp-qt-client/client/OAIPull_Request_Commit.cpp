/**
 * Bitbucket API
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@bitbucket.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPull_Request_Commit.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPull_Request_Commit::OAIPull_Request_Commit(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPull_Request_Commit::OAIPull_Request_Commit() {
    this->initializeModel();
}

OAIPull_Request_Commit::~OAIPull_Request_Commit() {}

void OAIPull_Request_Commit::initializeModel() {

    m_hash_isSet = false;
    m_hash_isValid = false;
}

void OAIPull_Request_Commit::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPull_Request_Commit::fromJsonObject(QJsonObject json) {

    m_hash_isValid = ::OpenAPI::fromJsonValue(m_hash, json[QString("hash")]);
    m_hash_isSet = !json[QString("hash")].isNull() && m_hash_isValid;
}

QString OAIPull_Request_Commit::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPull_Request_Commit::asJsonObject() const {
    QJsonObject obj;
    if (m_hash_isSet) {
        obj.insert(QString("hash"), ::OpenAPI::toJsonValue(m_hash));
    }
    return obj;
}

QString OAIPull_Request_Commit::getHash() const {
    return m_hash;
}
void OAIPull_Request_Commit::setHash(const QString &hash) {
    m_hash = hash;
    m_hash_isSet = true;
}

bool OAIPull_Request_Commit::is_hash_Set() const{
    return m_hash_isSet;
}

bool OAIPull_Request_Commit::is_hash_Valid() const{
    return m_hash_isValid;
}

bool OAIPull_Request_Commit::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_hash_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPull_Request_Commit::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
