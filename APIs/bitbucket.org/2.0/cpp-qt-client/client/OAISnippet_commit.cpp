/**
 * Bitbucket API
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@bitbucket.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISnippet_commit.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISnippet_commit::OAISnippet_commit(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISnippet_commit::OAISnippet_commit() {
    this->initializeModel();
}

OAISnippet_commit::~OAISnippet_commit() {}

void OAISnippet_commit::initializeModel() {

    m_type_isSet = false;
    m_type_isValid = false;

    m_author_isSet = false;
    m_author_isValid = false;

    m_date_isSet = false;
    m_date_isValid = false;

    m_hash_isSet = false;
    m_hash_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_parents_isSet = false;
    m_parents_isValid = false;

    m_summary_isSet = false;
    m_summary_isValid = false;

    m_links_isSet = false;
    m_links_isValid = false;

    m_snippet_isSet = false;
    m_snippet_isValid = false;
}

void OAISnippet_commit::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISnippet_commit::fromJsonObject(QJsonObject json) {

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_author_isValid = ::OpenAPI::fromJsonValue(m_author, json[QString("author")]);
    m_author_isSet = !json[QString("author")].isNull() && m_author_isValid;

    m_date_isValid = ::OpenAPI::fromJsonValue(m_date, json[QString("date")]);
    m_date_isSet = !json[QString("date")].isNull() && m_date_isValid;

    m_hash_isValid = ::OpenAPI::fromJsonValue(m_hash, json[QString("hash")]);
    m_hash_isSet = !json[QString("hash")].isNull() && m_hash_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_parents_isValid = ::OpenAPI::fromJsonValue(m_parents, json[QString("parents")]);
    m_parents_isSet = !json[QString("parents")].isNull() && m_parents_isValid;

    m_summary_isValid = ::OpenAPI::fromJsonValue(m_summary, json[QString("summary")]);
    m_summary_isSet = !json[QString("summary")].isNull() && m_summary_isValid;

    m_links_isValid = ::OpenAPI::fromJsonValue(m_links, json[QString("links")]);
    m_links_isSet = !json[QString("links")].isNull() && m_links_isValid;

    m_snippet_isValid = ::OpenAPI::fromJsonValue(m_snippet, json[QString("snippet")]);
    m_snippet_isSet = !json[QString("snippet")].isNull() && m_snippet_isValid;
}

QString OAISnippet_commit::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISnippet_commit::asJsonObject() const {
    QJsonObject obj;
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_author.isSet()) {
        obj.insert(QString("author"), ::OpenAPI::toJsonValue(m_author));
    }
    if (m_date_isSet) {
        obj.insert(QString("date"), ::OpenAPI::toJsonValue(m_date));
    }
    if (m_hash_isSet) {
        obj.insert(QString("hash"), ::OpenAPI::toJsonValue(m_hash));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_parents.size() > 0) {
        obj.insert(QString("parents"), ::OpenAPI::toJsonValue(m_parents));
    }
    if (m_summary.isSet()) {
        obj.insert(QString("summary"), ::OpenAPI::toJsonValue(m_summary));
    }
    if (m_links.isSet()) {
        obj.insert(QString("links"), ::OpenAPI::toJsonValue(m_links));
    }
    if (m_snippet.isSet()) {
        obj.insert(QString("snippet"), ::OpenAPI::toJsonValue(m_snippet));
    }
    return obj;
}

QString OAISnippet_commit::getType() const {
    return m_type;
}
void OAISnippet_commit::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAISnippet_commit::is_type_Set() const{
    return m_type_isSet;
}

bool OAISnippet_commit::is_type_Valid() const{
    return m_type_isValid;
}

OAIAuthor OAISnippet_commit::getAuthor() const {
    return m_author;
}
void OAISnippet_commit::setAuthor(const OAIAuthor &author) {
    m_author = author;
    m_author_isSet = true;
}

bool OAISnippet_commit::is_author_Set() const{
    return m_author_isSet;
}

bool OAISnippet_commit::is_author_Valid() const{
    return m_author_isValid;
}

QDateTime OAISnippet_commit::getDate() const {
    return m_date;
}
void OAISnippet_commit::setDate(const QDateTime &date) {
    m_date = date;
    m_date_isSet = true;
}

bool OAISnippet_commit::is_date_Set() const{
    return m_date_isSet;
}

bool OAISnippet_commit::is_date_Valid() const{
    return m_date_isValid;
}

QString OAISnippet_commit::getHash() const {
    return m_hash;
}
void OAISnippet_commit::setHash(const QString &hash) {
    m_hash = hash;
    m_hash_isSet = true;
}

bool OAISnippet_commit::is_hash_Set() const{
    return m_hash_isSet;
}

bool OAISnippet_commit::is_hash_Valid() const{
    return m_hash_isValid;
}

QString OAISnippet_commit::getMessage() const {
    return m_message;
}
void OAISnippet_commit::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAISnippet_commit::is_message_Set() const{
    return m_message_isSet;
}

bool OAISnippet_commit::is_message_Valid() const{
    return m_message_isValid;
}

QList<OAIBase_commit> OAISnippet_commit::getParents() const {
    return m_parents;
}
void OAISnippet_commit::setParents(const QList<OAIBase_commit> &parents) {
    m_parents = parents;
    m_parents_isSet = true;
}

bool OAISnippet_commit::is_parents_Set() const{
    return m_parents_isSet;
}

bool OAISnippet_commit::is_parents_Valid() const{
    return m_parents_isValid;
}

OAIBase_Commit_summary OAISnippet_commit::getSummary() const {
    return m_summary;
}
void OAISnippet_commit::setSummary(const OAIBase_Commit_summary &summary) {
    m_summary = summary;
    m_summary_isSet = true;
}

bool OAISnippet_commit::is_summary_Set() const{
    return m_summary_isSet;
}

bool OAISnippet_commit::is_summary_Valid() const{
    return m_summary_isValid;
}

OAISnippet_Commit_links OAISnippet_commit::getLinks() const {
    return m_links;
}
void OAISnippet_commit::setLinks(const OAISnippet_Commit_links &links) {
    m_links = links;
    m_links_isSet = true;
}

bool OAISnippet_commit::is_links_Set() const{
    return m_links_isSet;
}

bool OAISnippet_commit::is_links_Valid() const{
    return m_links_isValid;
}

OAISnippet OAISnippet_commit::getSnippet() const {
    return m_snippet;
}
void OAISnippet_commit::setSnippet(const OAISnippet &snippet) {
    m_snippet = snippet;
    m_snippet_isSet = true;
}

bool OAISnippet_commit::is_snippet_Set() const{
    return m_snippet_isSet;
}

bool OAISnippet_commit::is_snippet_Valid() const{
    return m_snippet_isValid;
}

bool OAISnippet_commit::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_author.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parents.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_summary.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_links.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_snippet.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISnippet_commit::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_type_isValid && true;
}

} // namespace OpenAPI
