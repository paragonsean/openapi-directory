/**
 * Bitbucket API
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@bitbucket.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIssue.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIssue::OAIIssue(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIssue::OAIIssue() {
    this->initializeModel();
}

OAIIssue::~OAIIssue() {}

void OAIIssue::initializeModel() {

    m_type_isSet = false;
    m_type_isValid = false;

    m_assignee_isSet = false;
    m_assignee_isValid = false;

    m_component_isSet = false;
    m_component_isValid = false;

    m_content_isSet = false;
    m_content_isValid = false;

    m_created_on_isSet = false;
    m_created_on_isValid = false;

    m_edited_on_isSet = false;
    m_edited_on_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_links_isSet = false;
    m_links_isValid = false;

    m_milestone_isSet = false;
    m_milestone_isValid = false;

    m_priority_isSet = false;
    m_priority_isValid = false;

    m_reporter_isSet = false;
    m_reporter_isValid = false;

    m_repository_isSet = false;
    m_repository_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_updated_on_isSet = false;
    m_updated_on_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;

    m_votes_isSet = false;
    m_votes_isValid = false;
}

void OAIIssue::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIssue::fromJsonObject(QJsonObject json) {

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_assignee_isValid = ::OpenAPI::fromJsonValue(m_assignee, json[QString("assignee")]);
    m_assignee_isSet = !json[QString("assignee")].isNull() && m_assignee_isValid;

    m_component_isValid = ::OpenAPI::fromJsonValue(m_component, json[QString("component")]);
    m_component_isSet = !json[QString("component")].isNull() && m_component_isValid;

    m_content_isValid = ::OpenAPI::fromJsonValue(m_content, json[QString("content")]);
    m_content_isSet = !json[QString("content")].isNull() && m_content_isValid;

    m_created_on_isValid = ::OpenAPI::fromJsonValue(m_created_on, json[QString("created_on")]);
    m_created_on_isSet = !json[QString("created_on")].isNull() && m_created_on_isValid;

    m_edited_on_isValid = ::OpenAPI::fromJsonValue(m_edited_on, json[QString("edited_on")]);
    m_edited_on_isSet = !json[QString("edited_on")].isNull() && m_edited_on_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_links_isValid = ::OpenAPI::fromJsonValue(m_links, json[QString("links")]);
    m_links_isSet = !json[QString("links")].isNull() && m_links_isValid;

    m_milestone_isValid = ::OpenAPI::fromJsonValue(m_milestone, json[QString("milestone")]);
    m_milestone_isSet = !json[QString("milestone")].isNull() && m_milestone_isValid;

    m_priority_isValid = ::OpenAPI::fromJsonValue(m_priority, json[QString("priority")]);
    m_priority_isSet = !json[QString("priority")].isNull() && m_priority_isValid;

    m_reporter_isValid = ::OpenAPI::fromJsonValue(m_reporter, json[QString("reporter")]);
    m_reporter_isSet = !json[QString("reporter")].isNull() && m_reporter_isValid;

    m_repository_isValid = ::OpenAPI::fromJsonValue(m_repository, json[QString("repository")]);
    m_repository_isSet = !json[QString("repository")].isNull() && m_repository_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_updated_on_isValid = ::OpenAPI::fromJsonValue(m_updated_on, json[QString("updated_on")]);
    m_updated_on_isSet = !json[QString("updated_on")].isNull() && m_updated_on_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;

    m_votes_isValid = ::OpenAPI::fromJsonValue(m_votes, json[QString("votes")]);
    m_votes_isSet = !json[QString("votes")].isNull() && m_votes_isValid;
}

QString OAIIssue::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIssue::asJsonObject() const {
    QJsonObject obj;
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_assignee.isSet()) {
        obj.insert(QString("assignee"), ::OpenAPI::toJsonValue(m_assignee));
    }
    if (m_component.isSet()) {
        obj.insert(QString("component"), ::OpenAPI::toJsonValue(m_component));
    }
    if (m_content.isSet()) {
        obj.insert(QString("content"), ::OpenAPI::toJsonValue(m_content));
    }
    if (m_created_on_isSet) {
        obj.insert(QString("created_on"), ::OpenAPI::toJsonValue(m_created_on));
    }
    if (m_edited_on_isSet) {
        obj.insert(QString("edited_on"), ::OpenAPI::toJsonValue(m_edited_on));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_links.isSet()) {
        obj.insert(QString("links"), ::OpenAPI::toJsonValue(m_links));
    }
    if (m_milestone.isSet()) {
        obj.insert(QString("milestone"), ::OpenAPI::toJsonValue(m_milestone));
    }
    if (m_priority_isSet) {
        obj.insert(QString("priority"), ::OpenAPI::toJsonValue(m_priority));
    }
    if (m_reporter.isSet()) {
        obj.insert(QString("reporter"), ::OpenAPI::toJsonValue(m_reporter));
    }
    if (m_repository.isSet()) {
        obj.insert(QString("repository"), ::OpenAPI::toJsonValue(m_repository));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_updated_on_isSet) {
        obj.insert(QString("updated_on"), ::OpenAPI::toJsonValue(m_updated_on));
    }
    if (m_version.isSet()) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    if (m_votes_isSet) {
        obj.insert(QString("votes"), ::OpenAPI::toJsonValue(m_votes));
    }
    return obj;
}

QString OAIIssue::getType() const {
    return m_type;
}
void OAIIssue::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIIssue::is_type_Set() const{
    return m_type_isSet;
}

bool OAIIssue::is_type_Valid() const{
    return m_type_isValid;
}

OAIAccount OAIIssue::getAssignee() const {
    return m_assignee;
}
void OAIIssue::setAssignee(const OAIAccount &assignee) {
    m_assignee = assignee;
    m_assignee_isSet = true;
}

bool OAIIssue::is_assignee_Set() const{
    return m_assignee_isSet;
}

bool OAIIssue::is_assignee_Valid() const{
    return m_assignee_isValid;
}

OAIComponent OAIIssue::getComponent() const {
    return m_component;
}
void OAIIssue::setComponent(const OAIComponent &component) {
    m_component = component;
    m_component_isSet = true;
}

bool OAIIssue::is_component_Set() const{
    return m_component_isSet;
}

bool OAIIssue::is_component_Valid() const{
    return m_component_isValid;
}

OAIBase_Commit_summary OAIIssue::getContent() const {
    return m_content;
}
void OAIIssue::setContent(const OAIBase_Commit_summary &content) {
    m_content = content;
    m_content_isSet = true;
}

bool OAIIssue::is_content_Set() const{
    return m_content_isSet;
}

bool OAIIssue::is_content_Valid() const{
    return m_content_isValid;
}

QDateTime OAIIssue::getCreatedOn() const {
    return m_created_on;
}
void OAIIssue::setCreatedOn(const QDateTime &created_on) {
    m_created_on = created_on;
    m_created_on_isSet = true;
}

bool OAIIssue::is_created_on_Set() const{
    return m_created_on_isSet;
}

bool OAIIssue::is_created_on_Valid() const{
    return m_created_on_isValid;
}

QDateTime OAIIssue::getEditedOn() const {
    return m_edited_on;
}
void OAIIssue::setEditedOn(const QDateTime &edited_on) {
    m_edited_on = edited_on;
    m_edited_on_isSet = true;
}

bool OAIIssue::is_edited_on_Set() const{
    return m_edited_on_isSet;
}

bool OAIIssue::is_edited_on_Valid() const{
    return m_edited_on_isValid;
}

qint32 OAIIssue::getId() const {
    return m_id;
}
void OAIIssue::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIIssue::is_id_Set() const{
    return m_id_isSet;
}

bool OAIIssue::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIIssue::getKind() const {
    return m_kind;
}
void OAIIssue::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIIssue::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIIssue::is_kind_Valid() const{
    return m_kind_isValid;
}

OAIIssue_links OAIIssue::getLinks() const {
    return m_links;
}
void OAIIssue::setLinks(const OAIIssue_links &links) {
    m_links = links;
    m_links_isSet = true;
}

bool OAIIssue::is_links_Set() const{
    return m_links_isSet;
}

bool OAIIssue::is_links_Valid() const{
    return m_links_isValid;
}

OAIMilestone OAIIssue::getMilestone() const {
    return m_milestone;
}
void OAIIssue::setMilestone(const OAIMilestone &milestone) {
    m_milestone = milestone;
    m_milestone_isSet = true;
}

bool OAIIssue::is_milestone_Set() const{
    return m_milestone_isSet;
}

bool OAIIssue::is_milestone_Valid() const{
    return m_milestone_isValid;
}

QString OAIIssue::getPriority() const {
    return m_priority;
}
void OAIIssue::setPriority(const QString &priority) {
    m_priority = priority;
    m_priority_isSet = true;
}

bool OAIIssue::is_priority_Set() const{
    return m_priority_isSet;
}

bool OAIIssue::is_priority_Valid() const{
    return m_priority_isValid;
}

OAIAccount OAIIssue::getReporter() const {
    return m_reporter;
}
void OAIIssue::setReporter(const OAIAccount &reporter) {
    m_reporter = reporter;
    m_reporter_isSet = true;
}

bool OAIIssue::is_reporter_Set() const{
    return m_reporter_isSet;
}

bool OAIIssue::is_reporter_Valid() const{
    return m_reporter_isValid;
}

OAIRepository OAIIssue::getRepository() const {
    return m_repository;
}
void OAIIssue::setRepository(const OAIRepository &repository) {
    m_repository = repository;
    m_repository_isSet = true;
}

bool OAIIssue::is_repository_Set() const{
    return m_repository_isSet;
}

bool OAIIssue::is_repository_Valid() const{
    return m_repository_isValid;
}

QString OAIIssue::getState() const {
    return m_state;
}
void OAIIssue::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIIssue::is_state_Set() const{
    return m_state_isSet;
}

bool OAIIssue::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIIssue::getTitle() const {
    return m_title;
}
void OAIIssue::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIIssue::is_title_Set() const{
    return m_title_isSet;
}

bool OAIIssue::is_title_Valid() const{
    return m_title_isValid;
}

QDateTime OAIIssue::getUpdatedOn() const {
    return m_updated_on;
}
void OAIIssue::setUpdatedOn(const QDateTime &updated_on) {
    m_updated_on = updated_on;
    m_updated_on_isSet = true;
}

bool OAIIssue::is_updated_on_Set() const{
    return m_updated_on_isSet;
}

bool OAIIssue::is_updated_on_Valid() const{
    return m_updated_on_isValid;
}

OAIVersion OAIIssue::getVersion() const {
    return m_version;
}
void OAIIssue::setVersion(const OAIVersion &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIIssue::is_version_Set() const{
    return m_version_isSet;
}

bool OAIIssue::is_version_Valid() const{
    return m_version_isValid;
}

qint32 OAIIssue::getVotes() const {
    return m_votes;
}
void OAIIssue::setVotes(const qint32 &votes) {
    m_votes = votes;
    m_votes_isSet = true;
}

bool OAIIssue::is_votes_Set() const{
    return m_votes_isSet;
}

bool OAIIssue::is_votes_Valid() const{
    return m_votes_isValid;
}

bool OAIIssue::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_assignee.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_component.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_content.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_on_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_edited_on_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_links.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_milestone.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_priority_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reporter.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_repository.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_on_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_votes_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIssue::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_type_isValid && true;
}

} // namespace OpenAPI
