/**
 * Bitbucket API
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@bitbucket.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICommitstatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICommitstatus::OAICommitstatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICommitstatus::OAICommitstatus() {
    this->initializeModel();
}

OAICommitstatus::~OAICommitstatus() {}

void OAICommitstatus::initializeModel() {

    m_type_isSet = false;
    m_type_isValid = false;

    m_created_on_isSet = false;
    m_created_on_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_key_isSet = false;
    m_key_isValid = false;

    m_links_isSet = false;
    m_links_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_refname_isSet = false;
    m_refname_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_updated_on_isSet = false;
    m_updated_on_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_uuid_isSet = false;
    m_uuid_isValid = false;
}

void OAICommitstatus::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICommitstatus::fromJsonObject(QJsonObject json) {

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_created_on_isValid = ::OpenAPI::fromJsonValue(m_created_on, json[QString("created_on")]);
    m_created_on_isSet = !json[QString("created_on")].isNull() && m_created_on_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_key_isValid = ::OpenAPI::fromJsonValue(m_key, json[QString("key")]);
    m_key_isSet = !json[QString("key")].isNull() && m_key_isValid;

    m_links_isValid = ::OpenAPI::fromJsonValue(m_links, json[QString("links")]);
    m_links_isSet = !json[QString("links")].isNull() && m_links_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_refname_isValid = ::OpenAPI::fromJsonValue(m_refname, json[QString("refname")]);
    m_refname_isSet = !json[QString("refname")].isNull() && m_refname_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_updated_on_isValid = ::OpenAPI::fromJsonValue(m_updated_on, json[QString("updated_on")]);
    m_updated_on_isSet = !json[QString("updated_on")].isNull() && m_updated_on_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_uuid_isValid = ::OpenAPI::fromJsonValue(m_uuid, json[QString("uuid")]);
    m_uuid_isSet = !json[QString("uuid")].isNull() && m_uuid_isValid;
}

QString OAICommitstatus::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICommitstatus::asJsonObject() const {
    QJsonObject obj;
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_created_on_isSet) {
        obj.insert(QString("created_on"), ::OpenAPI::toJsonValue(m_created_on));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_key_isSet) {
        obj.insert(QString("key"), ::OpenAPI::toJsonValue(m_key));
    }
    if (m_links.isSet()) {
        obj.insert(QString("links"), ::OpenAPI::toJsonValue(m_links));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_refname_isSet) {
        obj.insert(QString("refname"), ::OpenAPI::toJsonValue(m_refname));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_updated_on_isSet) {
        obj.insert(QString("updated_on"), ::OpenAPI::toJsonValue(m_updated_on));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_uuid_isSet) {
        obj.insert(QString("uuid"), ::OpenAPI::toJsonValue(m_uuid));
    }
    return obj;
}

QString OAICommitstatus::getType() const {
    return m_type;
}
void OAICommitstatus::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAICommitstatus::is_type_Set() const{
    return m_type_isSet;
}

bool OAICommitstatus::is_type_Valid() const{
    return m_type_isValid;
}

QDateTime OAICommitstatus::getCreatedOn() const {
    return m_created_on;
}
void OAICommitstatus::setCreatedOn(const QDateTime &created_on) {
    m_created_on = created_on;
    m_created_on_isSet = true;
}

bool OAICommitstatus::is_created_on_Set() const{
    return m_created_on_isSet;
}

bool OAICommitstatus::is_created_on_Valid() const{
    return m_created_on_isValid;
}

QString OAICommitstatus::getDescription() const {
    return m_description;
}
void OAICommitstatus::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICommitstatus::is_description_Set() const{
    return m_description_isSet;
}

bool OAICommitstatus::is_description_Valid() const{
    return m_description_isValid;
}

QString OAICommitstatus::getKey() const {
    return m_key;
}
void OAICommitstatus::setKey(const QString &key) {
    m_key = key;
    m_key_isSet = true;
}

bool OAICommitstatus::is_key_Set() const{
    return m_key_isSet;
}

bool OAICommitstatus::is_key_Valid() const{
    return m_key_isValid;
}

OAICommit_Status_links OAICommitstatus::getLinks() const {
    return m_links;
}
void OAICommitstatus::setLinks(const OAICommit_Status_links &links) {
    m_links = links;
    m_links_isSet = true;
}

bool OAICommitstatus::is_links_Set() const{
    return m_links_isSet;
}

bool OAICommitstatus::is_links_Valid() const{
    return m_links_isValid;
}

QString OAICommitstatus::getName() const {
    return m_name;
}
void OAICommitstatus::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICommitstatus::is_name_Set() const{
    return m_name_isSet;
}

bool OAICommitstatus::is_name_Valid() const{
    return m_name_isValid;
}

QString OAICommitstatus::getRefname() const {
    return m_refname;
}
void OAICommitstatus::setRefname(const QString &refname) {
    m_refname = refname;
    m_refname_isSet = true;
}

bool OAICommitstatus::is_refname_Set() const{
    return m_refname_isSet;
}

bool OAICommitstatus::is_refname_Valid() const{
    return m_refname_isValid;
}

QString OAICommitstatus::getState() const {
    return m_state;
}
void OAICommitstatus::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAICommitstatus::is_state_Set() const{
    return m_state_isSet;
}

bool OAICommitstatus::is_state_Valid() const{
    return m_state_isValid;
}

QDateTime OAICommitstatus::getUpdatedOn() const {
    return m_updated_on;
}
void OAICommitstatus::setUpdatedOn(const QDateTime &updated_on) {
    m_updated_on = updated_on;
    m_updated_on_isSet = true;
}

bool OAICommitstatus::is_updated_on_Set() const{
    return m_updated_on_isSet;
}

bool OAICommitstatus::is_updated_on_Valid() const{
    return m_updated_on_isValid;
}

QString OAICommitstatus::getUrl() const {
    return m_url;
}
void OAICommitstatus::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAICommitstatus::is_url_Set() const{
    return m_url_isSet;
}

bool OAICommitstatus::is_url_Valid() const{
    return m_url_isValid;
}

QString OAICommitstatus::getUuid() const {
    return m_uuid;
}
void OAICommitstatus::setUuid(const QString &uuid) {
    m_uuid = uuid;
    m_uuid_isSet = true;
}

bool OAICommitstatus::is_uuid_Set() const{
    return m_uuid_isSet;
}

bool OAICommitstatus::is_uuid_Valid() const{
    return m_uuid_isValid;
}

bool OAICommitstatus::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_on_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_links.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_refname_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_on_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uuid_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICommitstatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_type_isValid && true;
}

} // namespace OpenAPI
