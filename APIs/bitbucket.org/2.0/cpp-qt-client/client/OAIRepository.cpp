/**
 * Bitbucket API
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@bitbucket.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRepository.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRepository::OAIRepository(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRepository::OAIRepository() {
    this->initializeModel();
}

OAIRepository::~OAIRepository() {}

void OAIRepository::initializeModel() {

    m_type_isSet = false;
    m_type_isValid = false;

    m_created_on_isSet = false;
    m_created_on_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_fork_policy_isSet = false;
    m_fork_policy_isValid = false;

    m_full_name_isSet = false;
    m_full_name_isValid = false;

    m_has_issues_isSet = false;
    m_has_issues_isValid = false;

    m_has_wiki_isSet = false;
    m_has_wiki_isValid = false;

    m_is_private_isSet = false;
    m_is_private_isValid = false;

    m_language_isSet = false;
    m_language_isValid = false;

    m_links_isSet = false;
    m_links_isValid = false;

    m_mainbranch_isSet = false;
    m_mainbranch_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_owner_isSet = false;
    m_owner_isValid = false;

    m_parent_isSet = false;
    m_parent_isValid = false;

    m_project_isSet = false;
    m_project_isValid = false;

    m_scm_isSet = false;
    m_scm_isValid = false;

    m_size_isSet = false;
    m_size_isValid = false;

    m_updated_on_isSet = false;
    m_updated_on_isValid = false;

    m_uuid_isSet = false;
    m_uuid_isValid = false;
}

void OAIRepository::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRepository::fromJsonObject(QJsonObject json) {

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_created_on_isValid = ::OpenAPI::fromJsonValue(m_created_on, json[QString("created_on")]);
    m_created_on_isSet = !json[QString("created_on")].isNull() && m_created_on_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_fork_policy_isValid = ::OpenAPI::fromJsonValue(m_fork_policy, json[QString("fork_policy")]);
    m_fork_policy_isSet = !json[QString("fork_policy")].isNull() && m_fork_policy_isValid;

    m_full_name_isValid = ::OpenAPI::fromJsonValue(m_full_name, json[QString("full_name")]);
    m_full_name_isSet = !json[QString("full_name")].isNull() && m_full_name_isValid;

    m_has_issues_isValid = ::OpenAPI::fromJsonValue(m_has_issues, json[QString("has_issues")]);
    m_has_issues_isSet = !json[QString("has_issues")].isNull() && m_has_issues_isValid;

    m_has_wiki_isValid = ::OpenAPI::fromJsonValue(m_has_wiki, json[QString("has_wiki")]);
    m_has_wiki_isSet = !json[QString("has_wiki")].isNull() && m_has_wiki_isValid;

    m_is_private_isValid = ::OpenAPI::fromJsonValue(m_is_private, json[QString("is_private")]);
    m_is_private_isSet = !json[QString("is_private")].isNull() && m_is_private_isValid;

    m_language_isValid = ::OpenAPI::fromJsonValue(m_language, json[QString("language")]);
    m_language_isSet = !json[QString("language")].isNull() && m_language_isValid;

    m_links_isValid = ::OpenAPI::fromJsonValue(m_links, json[QString("links")]);
    m_links_isSet = !json[QString("links")].isNull() && m_links_isValid;

    m_mainbranch_isValid = ::OpenAPI::fromJsonValue(m_mainbranch, json[QString("mainbranch")]);
    m_mainbranch_isSet = !json[QString("mainbranch")].isNull() && m_mainbranch_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_owner_isValid = ::OpenAPI::fromJsonValue(m_owner, json[QString("owner")]);
    m_owner_isSet = !json[QString("owner")].isNull() && m_owner_isValid;

    m_parent_isValid = ::OpenAPI::fromJsonValue(m_parent, json[QString("parent")]);
    m_parent_isSet = !json[QString("parent")].isNull() && m_parent_isValid;

    m_project_isValid = ::OpenAPI::fromJsonValue(m_project, json[QString("project")]);
    m_project_isSet = !json[QString("project")].isNull() && m_project_isValid;

    m_scm_isValid = ::OpenAPI::fromJsonValue(m_scm, json[QString("scm")]);
    m_scm_isSet = !json[QString("scm")].isNull() && m_scm_isValid;

    m_size_isValid = ::OpenAPI::fromJsonValue(m_size, json[QString("size")]);
    m_size_isSet = !json[QString("size")].isNull() && m_size_isValid;

    m_updated_on_isValid = ::OpenAPI::fromJsonValue(m_updated_on, json[QString("updated_on")]);
    m_updated_on_isSet = !json[QString("updated_on")].isNull() && m_updated_on_isValid;

    m_uuid_isValid = ::OpenAPI::fromJsonValue(m_uuid, json[QString("uuid")]);
    m_uuid_isSet = !json[QString("uuid")].isNull() && m_uuid_isValid;
}

QString OAIRepository::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRepository::asJsonObject() const {
    QJsonObject obj;
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_created_on_isSet) {
        obj.insert(QString("created_on"), ::OpenAPI::toJsonValue(m_created_on));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_fork_policy_isSet) {
        obj.insert(QString("fork_policy"), ::OpenAPI::toJsonValue(m_fork_policy));
    }
    if (m_full_name_isSet) {
        obj.insert(QString("full_name"), ::OpenAPI::toJsonValue(m_full_name));
    }
    if (m_has_issues_isSet) {
        obj.insert(QString("has_issues"), ::OpenAPI::toJsonValue(m_has_issues));
    }
    if (m_has_wiki_isSet) {
        obj.insert(QString("has_wiki"), ::OpenAPI::toJsonValue(m_has_wiki));
    }
    if (m_is_private_isSet) {
        obj.insert(QString("is_private"), ::OpenAPI::toJsonValue(m_is_private));
    }
    if (m_language_isSet) {
        obj.insert(QString("language"), ::OpenAPI::toJsonValue(m_language));
    }
    if (m_links.isSet()) {
        obj.insert(QString("links"), ::OpenAPI::toJsonValue(m_links));
    }
    if (m_mainbranch.isSet()) {
        obj.insert(QString("mainbranch"), ::OpenAPI::toJsonValue(m_mainbranch));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_owner.isSet()) {
        obj.insert(QString("owner"), ::OpenAPI::toJsonValue(m_owner));
    }
    if (m_parent.isSet()) {
        obj.insert(QString("parent"), ::OpenAPI::toJsonValue(m_parent));
    }
    if (m_project.isSet()) {
        obj.insert(QString("project"), ::OpenAPI::toJsonValue(m_project));
    }
    if (m_scm_isSet) {
        obj.insert(QString("scm"), ::OpenAPI::toJsonValue(m_scm));
    }
    if (m_size_isSet) {
        obj.insert(QString("size"), ::OpenAPI::toJsonValue(m_size));
    }
    if (m_updated_on_isSet) {
        obj.insert(QString("updated_on"), ::OpenAPI::toJsonValue(m_updated_on));
    }
    if (m_uuid_isSet) {
        obj.insert(QString("uuid"), ::OpenAPI::toJsonValue(m_uuid));
    }
    return obj;
}

QString OAIRepository::getType() const {
    return m_type;
}
void OAIRepository::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIRepository::is_type_Set() const{
    return m_type_isSet;
}

bool OAIRepository::is_type_Valid() const{
    return m_type_isValid;
}

QDateTime OAIRepository::getCreatedOn() const {
    return m_created_on;
}
void OAIRepository::setCreatedOn(const QDateTime &created_on) {
    m_created_on = created_on;
    m_created_on_isSet = true;
}

bool OAIRepository::is_created_on_Set() const{
    return m_created_on_isSet;
}

bool OAIRepository::is_created_on_Valid() const{
    return m_created_on_isValid;
}

QString OAIRepository::getDescription() const {
    return m_description;
}
void OAIRepository::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIRepository::is_description_Set() const{
    return m_description_isSet;
}

bool OAIRepository::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIRepository::getForkPolicy() const {
    return m_fork_policy;
}
void OAIRepository::setForkPolicy(const QString &fork_policy) {
    m_fork_policy = fork_policy;
    m_fork_policy_isSet = true;
}

bool OAIRepository::is_fork_policy_Set() const{
    return m_fork_policy_isSet;
}

bool OAIRepository::is_fork_policy_Valid() const{
    return m_fork_policy_isValid;
}

QString OAIRepository::getFullName() const {
    return m_full_name;
}
void OAIRepository::setFullName(const QString &full_name) {
    m_full_name = full_name;
    m_full_name_isSet = true;
}

bool OAIRepository::is_full_name_Set() const{
    return m_full_name_isSet;
}

bool OAIRepository::is_full_name_Valid() const{
    return m_full_name_isValid;
}

bool OAIRepository::isHasIssues() const {
    return m_has_issues;
}
void OAIRepository::setHasIssues(const bool &has_issues) {
    m_has_issues = has_issues;
    m_has_issues_isSet = true;
}

bool OAIRepository::is_has_issues_Set() const{
    return m_has_issues_isSet;
}

bool OAIRepository::is_has_issues_Valid() const{
    return m_has_issues_isValid;
}

bool OAIRepository::isHasWiki() const {
    return m_has_wiki;
}
void OAIRepository::setHasWiki(const bool &has_wiki) {
    m_has_wiki = has_wiki;
    m_has_wiki_isSet = true;
}

bool OAIRepository::is_has_wiki_Set() const{
    return m_has_wiki_isSet;
}

bool OAIRepository::is_has_wiki_Valid() const{
    return m_has_wiki_isValid;
}

bool OAIRepository::isIsPrivate() const {
    return m_is_private;
}
void OAIRepository::setIsPrivate(const bool &is_private) {
    m_is_private = is_private;
    m_is_private_isSet = true;
}

bool OAIRepository::is_is_private_Set() const{
    return m_is_private_isSet;
}

bool OAIRepository::is_is_private_Valid() const{
    return m_is_private_isValid;
}

QString OAIRepository::getLanguage() const {
    return m_language;
}
void OAIRepository::setLanguage(const QString &language) {
    m_language = language;
    m_language_isSet = true;
}

bool OAIRepository::is_language_Set() const{
    return m_language_isSet;
}

bool OAIRepository::is_language_Valid() const{
    return m_language_isValid;
}

OAIRepository_links OAIRepository::getLinks() const {
    return m_links;
}
void OAIRepository::setLinks(const OAIRepository_links &links) {
    m_links = links;
    m_links_isSet = true;
}

bool OAIRepository::is_links_Set() const{
    return m_links_isSet;
}

bool OAIRepository::is_links_Valid() const{
    return m_links_isValid;
}

OAIBranch OAIRepository::getMainbranch() const {
    return m_mainbranch;
}
void OAIRepository::setMainbranch(const OAIBranch &mainbranch) {
    m_mainbranch = mainbranch;
    m_mainbranch_isSet = true;
}

bool OAIRepository::is_mainbranch_Set() const{
    return m_mainbranch_isSet;
}

bool OAIRepository::is_mainbranch_Valid() const{
    return m_mainbranch_isValid;
}

QString OAIRepository::getName() const {
    return m_name;
}
void OAIRepository::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIRepository::is_name_Set() const{
    return m_name_isSet;
}

bool OAIRepository::is_name_Valid() const{
    return m_name_isValid;
}

OAIAccount OAIRepository::getOwner() const {
    return m_owner;
}
void OAIRepository::setOwner(const OAIAccount &owner) {
    m_owner = owner;
    m_owner_isSet = true;
}

bool OAIRepository::is_owner_Set() const{
    return m_owner_isSet;
}

bool OAIRepository::is_owner_Valid() const{
    return m_owner_isValid;
}

OAIRepository OAIRepository::getParent() const {
    return m_parent;
}
void OAIRepository::setParent(const OAIRepository &parent) {
    m_parent = parent;
    m_parent_isSet = true;
}

bool OAIRepository::is_parent_Set() const{
    return m_parent_isSet;
}

bool OAIRepository::is_parent_Valid() const{
    return m_parent_isValid;
}

OAIProject OAIRepository::getProject() const {
    return m_project;
}
void OAIRepository::setProject(const OAIProject &project) {
    m_project = project;
    m_project_isSet = true;
}

bool OAIRepository::is_project_Set() const{
    return m_project_isSet;
}

bool OAIRepository::is_project_Valid() const{
    return m_project_isValid;
}

QString OAIRepository::getScm() const {
    return m_scm;
}
void OAIRepository::setScm(const QString &scm) {
    m_scm = scm;
    m_scm_isSet = true;
}

bool OAIRepository::is_scm_Set() const{
    return m_scm_isSet;
}

bool OAIRepository::is_scm_Valid() const{
    return m_scm_isValid;
}

qint32 OAIRepository::getSize() const {
    return m_size;
}
void OAIRepository::setSize(const qint32 &size) {
    m_size = size;
    m_size_isSet = true;
}

bool OAIRepository::is_size_Set() const{
    return m_size_isSet;
}

bool OAIRepository::is_size_Valid() const{
    return m_size_isValid;
}

QDateTime OAIRepository::getUpdatedOn() const {
    return m_updated_on;
}
void OAIRepository::setUpdatedOn(const QDateTime &updated_on) {
    m_updated_on = updated_on;
    m_updated_on_isSet = true;
}

bool OAIRepository::is_updated_on_Set() const{
    return m_updated_on_isSet;
}

bool OAIRepository::is_updated_on_Valid() const{
    return m_updated_on_isValid;
}

QString OAIRepository::getUuid() const {
    return m_uuid;
}
void OAIRepository::setUuid(const QString &uuid) {
    m_uuid = uuid;
    m_uuid_isSet = true;
}

bool OAIRepository::is_uuid_Set() const{
    return m_uuid_isSet;
}

bool OAIRepository::is_uuid_Valid() const{
    return m_uuid_isValid;
}

bool OAIRepository::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_on_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fork_policy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_full_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_issues_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_wiki_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_private_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_links.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_mainbranch.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_project.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_scm_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_on_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uuid_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRepository::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_type_isValid && true;
}

} // namespace OpenAPI
