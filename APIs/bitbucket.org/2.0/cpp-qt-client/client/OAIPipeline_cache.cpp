/**
 * Bitbucket API
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@bitbucket.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPipeline_cache.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPipeline_cache::OAIPipeline_cache(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPipeline_cache::OAIPipeline_cache() {
    this->initializeModel();
}

OAIPipeline_cache::~OAIPipeline_cache() {}

void OAIPipeline_cache::initializeModel() {

    m_type_isSet = false;
    m_type_isValid = false;

    m_created_on_isSet = false;
    m_created_on_isValid = false;

    m_file_size_bytes_isSet = false;
    m_file_size_bytes_isValid = false;

    m_key_hash_isSet = false;
    m_key_hash_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_path_isSet = false;
    m_path_isValid = false;

    m_pipeline_uuid_isSet = false;
    m_pipeline_uuid_isValid = false;

    m_step_uuid_isSet = false;
    m_step_uuid_isValid = false;

    m_uuid_isSet = false;
    m_uuid_isValid = false;
}

void OAIPipeline_cache::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPipeline_cache::fromJsonObject(QJsonObject json) {

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_created_on_isValid = ::OpenAPI::fromJsonValue(m_created_on, json[QString("created_on")]);
    m_created_on_isSet = !json[QString("created_on")].isNull() && m_created_on_isValid;

    m_file_size_bytes_isValid = ::OpenAPI::fromJsonValue(m_file_size_bytes, json[QString("file_size_bytes")]);
    m_file_size_bytes_isSet = !json[QString("file_size_bytes")].isNull() && m_file_size_bytes_isValid;

    m_key_hash_isValid = ::OpenAPI::fromJsonValue(m_key_hash, json[QString("key_hash")]);
    m_key_hash_isSet = !json[QString("key_hash")].isNull() && m_key_hash_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_path_isValid = ::OpenAPI::fromJsonValue(m_path, json[QString("path")]);
    m_path_isSet = !json[QString("path")].isNull() && m_path_isValid;

    m_pipeline_uuid_isValid = ::OpenAPI::fromJsonValue(m_pipeline_uuid, json[QString("pipeline_uuid")]);
    m_pipeline_uuid_isSet = !json[QString("pipeline_uuid")].isNull() && m_pipeline_uuid_isValid;

    m_step_uuid_isValid = ::OpenAPI::fromJsonValue(m_step_uuid, json[QString("step_uuid")]);
    m_step_uuid_isSet = !json[QString("step_uuid")].isNull() && m_step_uuid_isValid;

    m_uuid_isValid = ::OpenAPI::fromJsonValue(m_uuid, json[QString("uuid")]);
    m_uuid_isSet = !json[QString("uuid")].isNull() && m_uuid_isValid;
}

QString OAIPipeline_cache::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPipeline_cache::asJsonObject() const {
    QJsonObject obj;
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_created_on_isSet) {
        obj.insert(QString("created_on"), ::OpenAPI::toJsonValue(m_created_on));
    }
    if (m_file_size_bytes_isSet) {
        obj.insert(QString("file_size_bytes"), ::OpenAPI::toJsonValue(m_file_size_bytes));
    }
    if (m_key_hash_isSet) {
        obj.insert(QString("key_hash"), ::OpenAPI::toJsonValue(m_key_hash));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_path_isSet) {
        obj.insert(QString("path"), ::OpenAPI::toJsonValue(m_path));
    }
    if (m_pipeline_uuid_isSet) {
        obj.insert(QString("pipeline_uuid"), ::OpenAPI::toJsonValue(m_pipeline_uuid));
    }
    if (m_step_uuid_isSet) {
        obj.insert(QString("step_uuid"), ::OpenAPI::toJsonValue(m_step_uuid));
    }
    if (m_uuid_isSet) {
        obj.insert(QString("uuid"), ::OpenAPI::toJsonValue(m_uuid));
    }
    return obj;
}

QString OAIPipeline_cache::getType() const {
    return m_type;
}
void OAIPipeline_cache::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIPipeline_cache::is_type_Set() const{
    return m_type_isSet;
}

bool OAIPipeline_cache::is_type_Valid() const{
    return m_type_isValid;
}

QDateTime OAIPipeline_cache::getCreatedOn() const {
    return m_created_on;
}
void OAIPipeline_cache::setCreatedOn(const QDateTime &created_on) {
    m_created_on = created_on;
    m_created_on_isSet = true;
}

bool OAIPipeline_cache::is_created_on_Set() const{
    return m_created_on_isSet;
}

bool OAIPipeline_cache::is_created_on_Valid() const{
    return m_created_on_isValid;
}

qint32 OAIPipeline_cache::getFileSizeBytes() const {
    return m_file_size_bytes;
}
void OAIPipeline_cache::setFileSizeBytes(const qint32 &file_size_bytes) {
    m_file_size_bytes = file_size_bytes;
    m_file_size_bytes_isSet = true;
}

bool OAIPipeline_cache::is_file_size_bytes_Set() const{
    return m_file_size_bytes_isSet;
}

bool OAIPipeline_cache::is_file_size_bytes_Valid() const{
    return m_file_size_bytes_isValid;
}

QString OAIPipeline_cache::getKeyHash() const {
    return m_key_hash;
}
void OAIPipeline_cache::setKeyHash(const QString &key_hash) {
    m_key_hash = key_hash;
    m_key_hash_isSet = true;
}

bool OAIPipeline_cache::is_key_hash_Set() const{
    return m_key_hash_isSet;
}

bool OAIPipeline_cache::is_key_hash_Valid() const{
    return m_key_hash_isValid;
}

QString OAIPipeline_cache::getName() const {
    return m_name;
}
void OAIPipeline_cache::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIPipeline_cache::is_name_Set() const{
    return m_name_isSet;
}

bool OAIPipeline_cache::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIPipeline_cache::getPath() const {
    return m_path;
}
void OAIPipeline_cache::setPath(const QString &path) {
    m_path = path;
    m_path_isSet = true;
}

bool OAIPipeline_cache::is_path_Set() const{
    return m_path_isSet;
}

bool OAIPipeline_cache::is_path_Valid() const{
    return m_path_isValid;
}

QString OAIPipeline_cache::getPipelineUuid() const {
    return m_pipeline_uuid;
}
void OAIPipeline_cache::setPipelineUuid(const QString &pipeline_uuid) {
    m_pipeline_uuid = pipeline_uuid;
    m_pipeline_uuid_isSet = true;
}

bool OAIPipeline_cache::is_pipeline_uuid_Set() const{
    return m_pipeline_uuid_isSet;
}

bool OAIPipeline_cache::is_pipeline_uuid_Valid() const{
    return m_pipeline_uuid_isValid;
}

QString OAIPipeline_cache::getStepUuid() const {
    return m_step_uuid;
}
void OAIPipeline_cache::setStepUuid(const QString &step_uuid) {
    m_step_uuid = step_uuid;
    m_step_uuid_isSet = true;
}

bool OAIPipeline_cache::is_step_uuid_Set() const{
    return m_step_uuid_isSet;
}

bool OAIPipeline_cache::is_step_uuid_Valid() const{
    return m_step_uuid_isValid;
}

QString OAIPipeline_cache::getUuid() const {
    return m_uuid;
}
void OAIPipeline_cache::setUuid(const QString &uuid) {
    m_uuid = uuid;
    m_uuid_isSet = true;
}

bool OAIPipeline_cache::is_uuid_Set() const{
    return m_uuid_isSet;
}

bool OAIPipeline_cache::is_uuid_Valid() const{
    return m_uuid_isValid;
}

bool OAIPipeline_cache::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_on_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_size_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pipeline_uuid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_step_uuid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uuid_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPipeline_cache::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_type_isValid && true;
}

} // namespace OpenAPI
