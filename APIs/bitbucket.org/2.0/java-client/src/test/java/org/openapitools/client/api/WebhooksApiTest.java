/*
 * Bitbucket API
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@bitbucket.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.PaginatedHookEvents;
import org.openapitools.client.model.PaginatedWebhookSubscriptions;
import org.openapitools.client.model.SubjectTypes;
import org.openapitools.client.model.WebhookSubscription;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for WebhooksApi
 */
@Disabled
public class WebhooksApiTest {

    private final WebhooksApi api = new WebhooksApi();

    /**
     * Get a webhook resource
     *
     * Returns the webhook resource or subject types on which webhooks can be registered.  Each resource/subject type contains an &#x60;events&#x60; link that returns the paginated list of specific events each individual subject type can emit.  This endpoint is publicly accessible and does not require authentication or scopes.  Example:  &#x60;&#x60;&#x60; $ curl https://api.bitbucket.org/2.0/hook_events  {     \&quot;repository\&quot;: {         \&quot;links\&quot;: {             \&quot;events\&quot;: {                 \&quot;href\&quot;: \&quot;https://api.bitbucket.org/2.0/hook_events/repository\&quot;             }         }     },     \&quot;workspace\&quot;: {         \&quot;links\&quot;: {             \&quot;events\&quot;: {                 \&quot;href\&quot;: \&quot;https://api.bitbucket.org/2.0/hook_events/workspace\&quot;             }         }     } } &#x60;&#x60;&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void hookEventsGetTest() throws ApiException {
        SubjectTypes response = api.hookEventsGet();
        // TODO: test validations
    }

    /**
     * List subscribable webhook types
     *
     * Returns a paginated list of all valid webhook events for the specified entity. **The team and user webhooks are deprecated, and you should use workspace instead. For more information, see [the announcement](https://developer.atlassian.com/cloud/bitbucket/bitbucket-api-teams-deprecation/).**  This is public data that does not require any scopes or authentication.  Example:  NOTE: The following example is a truncated response object for the &#x60;workspace&#x60; &#x60;subject_type&#x60;. We return the same structure for the other &#x60;subject_type&#x60; objects.  &#x60;&#x60;&#x60; $ curl https://api.bitbucket.org/2.0/hook_events/workspace {     \&quot;page\&quot;: 1,     \&quot;pagelen\&quot;: 30,     \&quot;size\&quot;: 21,     \&quot;values\&quot;: [         {             \&quot;category\&quot;: \&quot;Repository\&quot;,             \&quot;description\&quot;: \&quot;Whenever a repository push occurs\&quot;,             \&quot;event\&quot;: \&quot;repo:push\&quot;,             \&quot;label\&quot;: \&quot;Push\&quot;         },         {             \&quot;category\&quot;: \&quot;Repository\&quot;,             \&quot;description\&quot;: \&quot;Whenever a repository fork occurs\&quot;,             \&quot;event\&quot;: \&quot;repo:fork\&quot;,             \&quot;label\&quot;: \&quot;Fork\&quot;         },         {             \&quot;category\&quot;: \&quot;Repository\&quot;,             \&quot;description\&quot;: \&quot;Whenever a repository import occurs\&quot;,             \&quot;event\&quot;: \&quot;repo:imported\&quot;,             \&quot;label\&quot;: \&quot;Import\&quot;         },         ...         {             \&quot;category\&quot;:\&quot;Pull Request\&quot;,             \&quot;label\&quot;:\&quot;Approved\&quot;,             \&quot;description\&quot;:\&quot;When someone has approved a pull request\&quot;,             \&quot;event\&quot;:\&quot;pullrequest:approved\&quot;         },     ] } &#x60;&#x60;&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void hookEventsSubjectTypeGetTest() throws ApiException {
        String subjectType = null;
        PaginatedHookEvents response = api.hookEventsSubjectTypeGet(subjectType);
        // TODO: test validations
    }

    /**
     * List webhooks for a repository
     *
     * Returns a paginated list of webhooks installed on this repository.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void repositoriesWorkspaceRepoSlugHooksGet_0Test() throws ApiException {
        String repoSlug = null;
        String workspace = null;
        PaginatedWebhookSubscriptions response = api.repositoriesWorkspaceRepoSlugHooksGet_0(repoSlug, workspace);
        // TODO: test validations
    }

    /**
     * Create a webhook for a repository
     *
     * Creates a new webhook on the specified repository.  Example:  &#x60;&#x60;&#x60; $ curl -X POST -u credentials -H &#39;Content-Type: application/json&#39;   https://api.bitbucket.org/2.0/repositories/my-workspace/my-repo-slug/hooks   -d &#39;     {       \&quot;description\&quot;: \&quot;Webhook Description\&quot;,       \&quot;url\&quot;: \&quot;https://example.com/\&quot;,       \&quot;active\&quot;: true,       \&quot;events\&quot;: [         \&quot;repo:push\&quot;,         \&quot;issue:created\&quot;,         \&quot;issue:updated\&quot;       ]     }&#39; &#x60;&#x60;&#x60;  Note that this call requires the webhook scope, as well as any scope that applies to the events that the webhook subscribes to. In the example above that means: &#x60;webhook&#x60;, &#x60;repository&#x60; and &#x60;issue&#x60;.  Also note that the &#x60;url&#x60; must properly resolve and cannot be an internal, non-routed address.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void repositoriesWorkspaceRepoSlugHooksPost_0Test() throws ApiException {
        String repoSlug = null;
        String workspace = null;
        WebhookSubscription response = api.repositoriesWorkspaceRepoSlugHooksPost_0(repoSlug, workspace);
        // TODO: test validations
    }

    /**
     * Delete a webhook for a repository
     *
     * Deletes the specified webhook subscription from the given repository.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void repositoriesWorkspaceRepoSlugHooksUidDelete_0Test() throws ApiException {
        String repoSlug = null;
        String uid = null;
        String workspace = null;
        api.repositoriesWorkspaceRepoSlugHooksUidDelete_0(repoSlug, uid, workspace);
        // TODO: test validations
    }

    /**
     * Get a webhook for a repository
     *
     * Returns the webhook with the specified id installed on the specified repository.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void repositoriesWorkspaceRepoSlugHooksUidGet_0Test() throws ApiException {
        String repoSlug = null;
        String uid = null;
        String workspace = null;
        WebhookSubscription response = api.repositoriesWorkspaceRepoSlugHooksUidGet_0(repoSlug, uid, workspace);
        // TODO: test validations
    }

    /**
     * Update a webhook for a repository
     *
     * Updates the specified webhook subscription.  The following properties can be mutated:  * &#x60;description&#x60; * &#x60;url&#x60; * &#x60;active&#x60; * &#x60;events&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void repositoriesWorkspaceRepoSlugHooksUidPut_0Test() throws ApiException {
        String repoSlug = null;
        String uid = null;
        String workspace = null;
        WebhookSubscription response = api.repositoriesWorkspaceRepoSlugHooksUidPut_0(repoSlug, uid, workspace);
        // TODO: test validations
    }

    /**
     * List webhooks for a workspace
     *
     * Returns a paginated list of webhooks installed on this workspace.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void workspacesWorkspaceHooksGet_0Test() throws ApiException {
        String workspace = null;
        PaginatedWebhookSubscriptions response = api.workspacesWorkspaceHooksGet_0(workspace);
        // TODO: test validations
    }

    /**
     * Create a webhook for a workspace
     *
     * Creates a new webhook on the specified workspace.  Workspace webhooks are fired for events from all repositories contained by that workspace.  Example:  &#x60;&#x60;&#x60; $ curl -X POST -u credentials -H &#39;Content-Type: application/json&#39;   https://api.bitbucket.org/2.0/workspaces/my-workspace/hooks   -d &#39;     {       \&quot;description\&quot;: \&quot;Webhook Description\&quot;,       \&quot;url\&quot;: \&quot;https://example.com/\&quot;,       \&quot;active\&quot;: true,       \&quot;events\&quot;: [         \&quot;repo:push\&quot;,         \&quot;issue:created\&quot;,         \&quot;issue:updated\&quot;       ]     }&#39; &#x60;&#x60;&#x60;  This call requires the webhook scope, as well as any scope that applies to the events that the webhook subscribes to. In the example above that means: &#x60;webhook&#x60;, &#x60;repository&#x60; and &#x60;issue&#x60;.  The &#x60;url&#x60; must properly resolve and cannot be an internal, non-routed address.  Only workspace owners can install webhooks on workspaces.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void workspacesWorkspaceHooksPost_0Test() throws ApiException {
        String workspace = null;
        WebhookSubscription response = api.workspacesWorkspaceHooksPost_0(workspace);
        // TODO: test validations
    }

    /**
     * Delete a webhook for a workspace
     *
     * Deletes the specified webhook subscription from the given workspace.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void workspacesWorkspaceHooksUidDelete_0Test() throws ApiException {
        String uid = null;
        String workspace = null;
        api.workspacesWorkspaceHooksUidDelete_0(uid, workspace);
        // TODO: test validations
    }

    /**
     * Get a webhook for a workspace
     *
     * Returns the webhook with the specified id installed on the given workspace.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void workspacesWorkspaceHooksUidGet_0Test() throws ApiException {
        String uid = null;
        String workspace = null;
        WebhookSubscription response = api.workspacesWorkspaceHooksUidGet_0(uid, workspace);
        // TODO: test validations
    }

    /**
     * Update a webhook for a workspace
     *
     * Updates the specified webhook subscription.  The following properties can be mutated:  * &#x60;description&#x60; * &#x60;url&#x60; * &#x60;active&#x60; * &#x60;events&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void workspacesWorkspaceHooksUidPut_0Test() throws ApiException {
        String uid = null;
        String workspace = null;
        WebhookSubscription response = api.workspacesWorkspaceHooksUidPut_0(uid, workspace);
        // TODO: test validations
    }

}
