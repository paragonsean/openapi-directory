/*
 * Bitbucket API
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@bitbucket.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.DeploymentVariable;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.PaginatedDeploymentVariable;
import org.openapitools.client.model.PaginatedPipelineCaches;
import org.openapitools.client.model.PaginatedPipelineKnownHosts;
import org.openapitools.client.model.PaginatedPipelineScheduleExecutions;
import org.openapitools.client.model.PaginatedPipelineSchedules;
import org.openapitools.client.model.PaginatedPipelineSteps;
import org.openapitools.client.model.PaginatedPipelineVariables;
import org.openapitools.client.model.PaginatedPipelines;
import org.openapitools.client.model.Pipeline;
import org.openapitools.client.model.PipelineBuildNumber;
import org.openapitools.client.model.PipelineCacheContentUri;
import org.openapitools.client.model.PipelineKnownHost;
import org.openapitools.client.model.PipelineSchedule;
import org.openapitools.client.model.PipelineSchedulePostRequestBody;
import org.openapitools.client.model.PipelineSchedulePutRequestBody;
import org.openapitools.client.model.PipelineSshKeyPair;
import org.openapitools.client.model.PipelineStep;
import org.openapitools.client.model.PipelineVariable;
import org.openapitools.client.model.PipelinesConfig;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PipelinesApi
 */
@Disabled
public class PipelinesApiTest {

    private final PipelinesApi api = new PipelinesApi();

    /**
     * Create a variable for an environment
     *
     * Create a deployment environment level variable.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createDeploymentVariableTest() throws ApiException {
        String workspace = null;
        String repoSlug = null;
        String environmentUuid = null;
        DeploymentVariable deploymentVariable = null;
        DeploymentVariable response = api.createDeploymentVariable(workspace, repoSlug, environmentUuid, deploymentVariable);
        // TODO: test validations
    }

    /**
     * Run a pipeline
     *
     * Endpoint to create and initiate a pipeline. There are a couple of different options to initiate a pipeline, where the payload of the request will determine which type of pipeline will be instantiated. # Trigger a Pipeline for a branch One way to trigger pipelines is by specifying the branch for which you want to trigger a pipeline. The specified branch will be used to determine which pipeline definition from the &#x60;bitbucket-pipelines.yml&#x60; file will be applied to initiate the pipeline. The pipeline will then do a clone of the repository and checkout the latest revision of the specified branch.  ### Example  &#x60;&#x60;&#x60; $ curl -X POST -is -u username:password \\   -H &#39;Content-Type: application/json&#39; \\  https://api.bitbucket.org/2.0/repositories/jeroendr/meat-demo2/pipelines/ \\   -d &#39;   {     \&quot;target\&quot;: {       \&quot;ref_type\&quot;: \&quot;branch\&quot;,       \&quot;type\&quot;: \&quot;pipeline_ref_target\&quot;,       \&quot;ref_name\&quot;: \&quot;master\&quot;     }   }&#39; &#x60;&#x60;&#x60; # Trigger a Pipeline for a commit on a branch or tag You can initiate a pipeline for a specific commit and in the context of a specified reference (e.g. a branch, tag or bookmark). The specified reference will be used to determine which pipeline definition from the bitbucket-pipelines.yml file will be applied to initiate the pipeline. The pipeline will clone the repository and then do a checkout the specified reference.  The following reference types are supported:  * &#x60;branch&#x60; * &#x60;named_branch&#x60; * &#x60;bookmark&#x60;  * &#x60;tag&#x60;  ### Example  &#x60;&#x60;&#x60; $ curl -X POST -is -u username:password \\   -H &#39;Content-Type: application/json&#39; \\   https://api.bitbucket.org/2.0/repositories/jeroendr/meat-demo2/pipelines/ \\   -d &#39;   {     \&quot;target\&quot;: {       \&quot;commit\&quot;: {         \&quot;type\&quot;: \&quot;commit\&quot;,         \&quot;hash\&quot;: \&quot;ce5b7431602f7cbba007062eeb55225c6e18e956\&quot;       },       \&quot;ref_type\&quot;: \&quot;branch\&quot;,       \&quot;type\&quot;: \&quot;pipeline_ref_target\&quot;,       \&quot;ref_name\&quot;: \&quot;master\&quot;     }   }&#39; &#x60;&#x60;&#x60; # Trigger a specific pipeline definition for a commit You can trigger a specific pipeline that is defined in your &#x60;bitbucket-pipelines.yml&#x60; file for a specific commit. In addition to the commit revision, you specify the type and pattern of the selector that identifies the pipeline definition. The resulting pipeline will then clone the repository and checkout the specified revision.  ### Example  &#x60;&#x60;&#x60; $ curl -X POST -is -u username:password \\   -H &#39;Content-Type: application/json&#39; \\  https://api.bitbucket.org/2.0/repositories/jeroendr/meat-demo2/pipelines/ \\  -d &#39;   {      \&quot;target\&quot;: {       \&quot;commit\&quot;: {          \&quot;hash\&quot;:\&quot;a3c4e02c9a3755eccdc3764e6ea13facdf30f923\&quot;,          \&quot;type\&quot;:\&quot;commit\&quot;        },         \&quot;selector\&quot;: {            \&quot;type\&quot;:\&quot;custom\&quot;,               \&quot;pattern\&quot;:\&quot;Deploy to production\&quot;           },         \&quot;type\&quot;:\&quot;pipeline_commit_target\&quot;    }   }&#39; &#x60;&#x60;&#x60; # Trigger a specific pipeline definition for a commit on a branch or tag You can trigger a specific pipeline that is defined in your &#x60;bitbucket-pipelines.yml&#x60; file for a specific commit in the context of a specified reference. In addition to the commit revision, you specify the type and pattern of the selector that identifies the pipeline definition, as well as the reference information. The resulting pipeline will then clone the repository a checkout the specified reference.  ### Example  &#x60;&#x60;&#x60; $ curl -X POST -is -u username:password \\   -H &#39;Content-Type: application/json&#39; \\  https://api.bitbucket.org/2.0/repositories/jeroendr/meat-demo2/pipelines/ \\  -d &#39;   {      \&quot;target\&quot;: {       \&quot;commit\&quot;: {          \&quot;hash\&quot;:\&quot;a3c4e02c9a3755eccdc3764e6ea13facdf30f923\&quot;,          \&quot;type\&quot;:\&quot;commit\&quot;        },        \&quot;selector\&quot;: {           \&quot;type\&quot;: \&quot;custom\&quot;,           \&quot;pattern\&quot;: \&quot;Deploy to production\&quot;        },        \&quot;type\&quot;: \&quot;pipeline_ref_target\&quot;,        \&quot;ref_name\&quot;: \&quot;master\&quot;,        \&quot;ref_type\&quot;: \&quot;branch\&quot;      }   }&#39; &#x60;&#x60;&#x60;   # Trigger a custom pipeline with variables In addition to triggering a custom pipeline that is defined in your &#x60;bitbucket-pipelines.yml&#x60; file as shown in the examples above, you can specify variables that will be available for your build. In the request, provide a list of variables, specifying the following for each variable: key, value, and whether it should be secured or not (this field is optional and defaults to not secured).  ### Example  &#x60;&#x60;&#x60; $ curl -X POST -is -u username:password \\   -H &#39;Content-Type: application/json&#39; \\  https://api.bitbucket.org/2.0/repositories/{workspace}/{repo_slug}/pipelines/ \\  -d &#39;   {     \&quot;target\&quot;: {       \&quot;type\&quot;: \&quot;pipeline_ref_target\&quot;,       \&quot;ref_type\&quot;: \&quot;branch\&quot;,       \&quot;ref_name\&quot;: \&quot;master\&quot;,       \&quot;selector\&quot;: {         \&quot;type\&quot;: \&quot;custom\&quot;,         \&quot;pattern\&quot;: \&quot;Deploy to production\&quot;       }     },     \&quot;variables\&quot;: [       {         \&quot;key\&quot;: \&quot;var1key\&quot;,         \&quot;value\&quot;: \&quot;var1value\&quot;,         \&quot;secured\&quot;: true       },       {         \&quot;key\&quot;: \&quot;var2key\&quot;,         \&quot;value\&quot;: \&quot;var2value\&quot;       }     ]   }&#39; &#x60;&#x60;&#x60;  # Trigger a pull request pipeline  You can also initiate a pipeline for a specific pull request.  ### Example  &#x60;&#x60;&#x60; $ curl -X POST -is -u username:password \\   -H &#39;Content-Type: application/json&#39; \\  https://api.bitbucket.org/2.0/repositories/{workspace}/{repo_slug}/pipelines/ \\  -d &#39;   {  \&quot;target\&quot;: {       \&quot;type\&quot;: \&quot;pipeline_pullrequest_target\&quot;,    \&quot;source\&quot;: \&quot;pull-request-branch\&quot;,       \&quot;destination\&quot;: \&quot;master\&quot;,       \&quot;destination_commit\&quot;: {         \&quot;hash\&quot; : \&quot;9f848b7\&quot;       },       \&quot;commit\&quot;: {        \&quot;hash\&quot; : \&quot;1a372fc\&quot;       },       \&quot;pullrequest\&quot; : {        \&quot;id\&quot; : \&quot;3\&quot;       },    \&quot;selector\&quot;: {         \&quot;type\&quot;: \&quot;pull-requests\&quot;,         \&quot;pattern\&quot;: \&quot;**\&quot;       }     }   }&#39; &#x60;&#x60;&#x60; 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createPipelineForRepositoryTest() throws ApiException {
        String workspace = null;
        String repoSlug = null;
        Pipeline pipeline = null;
        Pipeline response = api.createPipelineForRepository(workspace, repoSlug, pipeline);
        // TODO: test validations
    }

    /**
     * Create a variable for a user
     *
     * Create an account level variable. This endpoint has been deprecated, and you should use the new workspaces endpoint. For more information, see [the announcement](https://developer.atlassian.com/cloud/bitbucket/bitbucket-api-teams-deprecation/).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createPipelineVariableForTeamTest() throws ApiException {
        String username = null;
        PipelineVariable pipelineVariable = null;
        PipelineVariable response = api.createPipelineVariableForTeam(username, pipelineVariable);
        // TODO: test validations
    }

    /**
     * Create a variable for a user
     *
     * Create a user level variable. This endpoint has been deprecated, and you should use the new workspaces endpoint. For more information, see [the announcement](https://developer.atlassian.com/cloud/bitbucket/bitbucket-api-teams-deprecation/).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createPipelineVariableForUserTest() throws ApiException {
        String selectedUser = null;
        PipelineVariable pipelineVariable = null;
        PipelineVariable response = api.createPipelineVariableForUser(selectedUser, pipelineVariable);
        // TODO: test validations
    }

    /**
     * Create a variable for a workspace
     *
     * Create a workspace level variable.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createPipelineVariableForWorkspaceTest() throws ApiException {
        String workspace = null;
        PipelineVariable pipelineVariable = null;
        PipelineVariable response = api.createPipelineVariableForWorkspace(workspace, pipelineVariable);
        // TODO: test validations
    }

    /**
     * Create a known host
     *
     * Create a repository level known host.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createRepositoryPipelineKnownHostTest() throws ApiException {
        String workspace = null;
        String repoSlug = null;
        PipelineKnownHost pipelineKnownHost = null;
        PipelineKnownHost response = api.createRepositoryPipelineKnownHost(workspace, repoSlug, pipelineKnownHost);
        // TODO: test validations
    }

    /**
     * Create a schedule
     *
     * Create a schedule for the given repository.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createRepositoryPipelineScheduleTest() throws ApiException {
        String workspace = null;
        String repoSlug = null;
        PipelineSchedulePostRequestBody pipelineSchedulePostRequestBody = null;
        PipelineSchedule response = api.createRepositoryPipelineSchedule(workspace, repoSlug, pipelineSchedulePostRequestBody);
        // TODO: test validations
    }

    /**
     * Create a variable for a repository
     *
     * Create a repository level variable.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createRepositoryPipelineVariableTest() throws ApiException {
        String workspace = null;
        String repoSlug = null;
        PipelineVariable pipelineVariable = null;
        PipelineVariable response = api.createRepositoryPipelineVariable(workspace, repoSlug, pipelineVariable);
        // TODO: test validations
    }

    /**
     * Delete a variable for an environment
     *
     * Delete a deployment environment level variable.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteDeploymentVariableTest() throws ApiException {
        String workspace = null;
        String repoSlug = null;
        String environmentUuid = null;
        String variableUuid = null;
        api.deleteDeploymentVariable(workspace, repoSlug, environmentUuid, variableUuid);
        // TODO: test validations
    }

    /**
     * Delete a variable for a team
     *
     * Delete a team level variable. This endpoint has been deprecated, and you should use the new workspaces endpoint. For more information, see [the announcement](https://developer.atlassian.com/cloud/bitbucket/bitbucket-api-teams-deprecation/).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deletePipelineVariableForTeamTest() throws ApiException {
        String username = null;
        String variableUuid = null;
        api.deletePipelineVariableForTeam(username, variableUuid);
        // TODO: test validations
    }

    /**
     * Delete a variable for a user
     *
     * Delete an account level variable. This endpoint has been deprecated, and you should use the new workspaces endpoint. For more information, see [the announcement](https://developer.atlassian.com/cloud/bitbucket/bitbucket-api-teams-deprecation/).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deletePipelineVariableForUserTest() throws ApiException {
        String selectedUser = null;
        String variableUuid = null;
        api.deletePipelineVariableForUser(selectedUser, variableUuid);
        // TODO: test validations
    }

    /**
     * Delete a variable for a workspace
     *
     * Delete a workspace level variable.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deletePipelineVariableForWorkspaceTest() throws ApiException {
        String workspace = null;
        String variableUuid = null;
        api.deletePipelineVariableForWorkspace(workspace, variableUuid);
        // TODO: test validations
    }

    /**
     * Delete a cache
     *
     * Delete a repository cache.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteRepositoryPipelineCacheTest() throws ApiException {
        String workspace = null;
        String repoSlug = null;
        String cacheUuid = null;
        api.deleteRepositoryPipelineCache(workspace, repoSlug, cacheUuid);
        // TODO: test validations
    }

    /**
     * Delete caches
     *
     * Delete repository cache versions by name.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteRepositoryPipelineCachesTest() throws ApiException {
        String workspace = null;
        String repoSlug = null;
        String name = null;
        api.deleteRepositoryPipelineCaches(workspace, repoSlug, name);
        // TODO: test validations
    }

    /**
     * Delete SSH key pair
     *
     * Delete the repository SSH key pair.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteRepositoryPipelineKeyPairTest() throws ApiException {
        String workspace = null;
        String repoSlug = null;
        api.deleteRepositoryPipelineKeyPair(workspace, repoSlug);
        // TODO: test validations
    }

    /**
     * Delete a known host
     *
     * Delete a repository level known host.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteRepositoryPipelineKnownHostTest() throws ApiException {
        String workspace = null;
        String repoSlug = null;
        String knownHostUuid = null;
        api.deleteRepositoryPipelineKnownHost(workspace, repoSlug, knownHostUuid);
        // TODO: test validations
    }

    /**
     * Delete a schedule
     *
     * Delete a schedule.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteRepositoryPipelineScheduleTest() throws ApiException {
        String workspace = null;
        String repoSlug = null;
        String scheduleUuid = null;
        api.deleteRepositoryPipelineSchedule(workspace, repoSlug, scheduleUuid);
        // TODO: test validations
    }

    /**
     * Delete a variable for a repository
     *
     * Delete a repository level variable.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteRepositoryPipelineVariableTest() throws ApiException {
        String workspace = null;
        String repoSlug = null;
        String variableUuid = null;
        api.deleteRepositoryPipelineVariable(workspace, repoSlug, variableUuid);
        // TODO: test validations
    }

    /**
     * List variables for an environment
     *
     * Find deployment environment level variables.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDeploymentVariablesTest() throws ApiException {
        String workspace = null;
        String repoSlug = null;
        String environmentUuid = null;
        PaginatedDeploymentVariable response = api.getDeploymentVariables(workspace, repoSlug, environmentUuid);
        // TODO: test validations
    }

    /**
     * Get OpenID configuration for OIDC in Pipelines
     *
     * This is part of OpenID Connect for Pipelines, see https://support.atlassian.com/bitbucket-cloud/docs/integrate-pipelines-with-resource-servers-using-oidc/
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOIDCConfigurationTest() throws ApiException {
        String workspace = null;
        api.getOIDCConfiguration(workspace);
        // TODO: test validations
    }

    /**
     * Get keys for OIDC in Pipelines
     *
     * This is part of OpenID Connect for Pipelines, see https://support.atlassian.com/bitbucket-cloud/docs/integrate-pipelines-with-resource-servers-using-oidc/
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOIDCKeysTest() throws ApiException {
        String workspace = null;
        api.getOIDCKeys(workspace);
        // TODO: test validations
    }

    /**
     * Get the logs for the build container or a service container for a given step of a pipeline.
     *
     * Retrieve the log file for a build container or service container.  This endpoint supports (and encourages!) the use of [HTTP Range requests](https://tools.ietf.org/html/rfc7233) to deal with potentially very large log files.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPipelineContainerLogTest() throws ApiException {
        String workspace = null;
        String repoSlug = null;
        String pipelineUuid = null;
        String stepUuid = null;
        String logUuid = null;
        api.getPipelineContainerLog(workspace, repoSlug, pipelineUuid, stepUuid, logUuid);
        // TODO: test validations
    }

    /**
     * Get a pipeline
     *
     * Retrieve a specified pipeline
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPipelineForRepositoryTest() throws ApiException {
        String workspace = null;
        String repoSlug = null;
        String pipelineUuid = null;
        Pipeline response = api.getPipelineForRepository(workspace, repoSlug, pipelineUuid);
        // TODO: test validations
    }

    /**
     * Get a step of a pipeline
     *
     * Retrieve a given step of a pipeline.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPipelineStepForRepositoryTest() throws ApiException {
        String workspace = null;
        String repoSlug = null;
        String pipelineUuid = null;
        String stepUuid = null;
        PipelineStep response = api.getPipelineStepForRepository(workspace, repoSlug, pipelineUuid, stepUuid);
        // TODO: test validations
    }

    /**
     * Get log file for a step
     *
     * Retrieve the log file for a given step of a pipeline.  This endpoint supports (and encourages!) the use of [HTTP Range requests](https://tools.ietf.org/html/rfc7233) to deal with potentially very large log files.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPipelineStepLogForRepositoryTest() throws ApiException {
        String workspace = null;
        String repoSlug = null;
        String pipelineUuid = null;
        String stepUuid = null;
        api.getPipelineStepLogForRepository(workspace, repoSlug, pipelineUuid, stepUuid);
        // TODO: test validations
    }

    /**
     * List steps for a pipeline
     *
     * Find steps for the given pipeline.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPipelineStepsForRepositoryTest() throws ApiException {
        String workspace = null;
        String repoSlug = null;
        String pipelineUuid = null;
        PaginatedPipelineSteps response = api.getPipelineStepsForRepository(workspace, repoSlug, pipelineUuid);
        // TODO: test validations
    }

    /**
     * Get test case reasons (output) for a given test case in a step of a pipeline.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPipelineTestReportTestCaseReasonsTest() throws ApiException {
        String workspace = null;
        String repoSlug = null;
        String pipelineUuid = null;
        String stepUuid = null;
        String testCaseUuid = null;
        api.getPipelineTestReportTestCaseReasons(workspace, repoSlug, pipelineUuid, stepUuid, testCaseUuid);
        // TODO: test validations
    }

    /**
     * Get test cases for a given step of a pipeline.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPipelineTestReportTestCasesTest() throws ApiException {
        String workspace = null;
        String repoSlug = null;
        String pipelineUuid = null;
        String stepUuid = null;
        api.getPipelineTestReportTestCases(workspace, repoSlug, pipelineUuid, stepUuid);
        // TODO: test validations
    }

    /**
     * Get a summary of test reports for a given step of a pipeline.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPipelineTestReportsTest() throws ApiException {
        String workspace = null;
        String repoSlug = null;
        String pipelineUuid = null;
        String stepUuid = null;
        api.getPipelineTestReports(workspace, repoSlug, pipelineUuid, stepUuid);
        // TODO: test validations
    }

    /**
     * Get a variable for a team
     *
     * Retrieve a team level variable. This endpoint has been deprecated, and you should use the new workspaces endpoint. For more information, see [the announcement](https://developer.atlassian.com/cloud/bitbucket/bitbucket-api-teams-deprecation/).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPipelineVariableForTeamTest() throws ApiException {
        String username = null;
        String variableUuid = null;
        PipelineVariable response = api.getPipelineVariableForTeam(username, variableUuid);
        // TODO: test validations
    }

    /**
     * Get a variable for a user
     *
     * Retrieve a user level variable. This endpoint has been deprecated, and you should use the new workspaces endpoint. For more information, see [the announcement](https://developer.atlassian.com/cloud/bitbucket/bitbucket-api-teams-deprecation/).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPipelineVariableForUserTest() throws ApiException {
        String selectedUser = null;
        String variableUuid = null;
        PipelineVariable response = api.getPipelineVariableForUser(selectedUser, variableUuid);
        // TODO: test validations
    }

    /**
     * Get variable for a workspace
     *
     * Retrieve a workspace level variable.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPipelineVariableForWorkspaceTest() throws ApiException {
        String workspace = null;
        String variableUuid = null;
        PipelineVariable response = api.getPipelineVariableForWorkspace(workspace, variableUuid);
        // TODO: test validations
    }

    /**
     * List variables for an account
     *
     * Find account level variables. This endpoint has been deprecated, and you should use the new workspaces endpoint. For more information, see [the announcement](https://developer.atlassian.com/cloud/bitbucket/bitbucket-api-teams-deprecation/).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPipelineVariablesForTeamTest() throws ApiException {
        String username = null;
        PaginatedPipelineVariables response = api.getPipelineVariablesForTeam(username);
        // TODO: test validations
    }

    /**
     * List variables for a user
     *
     * Find user level variables. This endpoint has been deprecated, and you should use the new workspaces endpoint. For more information, see [the announcement](https://developer.atlassian.com/cloud/bitbucket/bitbucket-api-teams-deprecation/).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPipelineVariablesForUserTest() throws ApiException {
        String selectedUser = null;
        PaginatedPipelineVariables response = api.getPipelineVariablesForUser(selectedUser);
        // TODO: test validations
    }

    /**
     * List variables for a workspace
     *
     * Find workspace level variables.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPipelineVariablesForWorkspaceTest() throws ApiException {
        String workspace = null;
        PaginatedPipelineVariables response = api.getPipelineVariablesForWorkspace(workspace);
        // TODO: test validations
    }

    /**
     * List pipelines
     *
     * Find pipelines
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPipelinesForRepositoryTest() throws ApiException {
        String workspace = null;
        String repoSlug = null;
        PaginatedPipelines response = api.getPipelinesForRepository(workspace, repoSlug);
        // TODO: test validations
    }

    /**
     * Get cache content URI
     *
     * Retrieve the URI of the content of the specified cache.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRepositoryPipelineCacheContentURITest() throws ApiException {
        String workspace = null;
        String repoSlug = null;
        String cacheUuid = null;
        PipelineCacheContentUri response = api.getRepositoryPipelineCacheContentURI(workspace, repoSlug, cacheUuid);
        // TODO: test validations
    }

    /**
     * List caches
     *
     * Retrieve the repository pipelines caches.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRepositoryPipelineCachesTest() throws ApiException {
        String workspace = null;
        String repoSlug = null;
        PaginatedPipelineCaches response = api.getRepositoryPipelineCaches(workspace, repoSlug);
        // TODO: test validations
    }

    /**
     * Get configuration
     *
     * Retrieve the repository pipelines configuration.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRepositoryPipelineConfigTest() throws ApiException {
        String workspace = null;
        String repoSlug = null;
        PipelinesConfig response = api.getRepositoryPipelineConfig(workspace, repoSlug);
        // TODO: test validations
    }

    /**
     * Get a known host
     *
     * Retrieve a repository level known host.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRepositoryPipelineKnownHostTest() throws ApiException {
        String workspace = null;
        String repoSlug = null;
        String knownHostUuid = null;
        PipelineKnownHost response = api.getRepositoryPipelineKnownHost(workspace, repoSlug, knownHostUuid);
        // TODO: test validations
    }

    /**
     * List known hosts
     *
     * Find repository level known hosts.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRepositoryPipelineKnownHostsTest() throws ApiException {
        String workspace = null;
        String repoSlug = null;
        PaginatedPipelineKnownHosts response = api.getRepositoryPipelineKnownHosts(workspace, repoSlug);
        // TODO: test validations
    }

    /**
     * Get a schedule
     *
     * Retrieve a schedule by its UUID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRepositoryPipelineScheduleTest() throws ApiException {
        String workspace = null;
        String repoSlug = null;
        String scheduleUuid = null;
        PipelineSchedule response = api.getRepositoryPipelineSchedule(workspace, repoSlug, scheduleUuid);
        // TODO: test validations
    }

    /**
     * List executions of a schedule
     *
     * Retrieve the executions of a given schedule.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRepositoryPipelineScheduleExecutionsTest() throws ApiException {
        String workspace = null;
        String repoSlug = null;
        String scheduleUuid = null;
        PaginatedPipelineScheduleExecutions response = api.getRepositoryPipelineScheduleExecutions(workspace, repoSlug, scheduleUuid);
        // TODO: test validations
    }

    /**
     * List schedules
     *
     * Retrieve the configured schedules for the given repository.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRepositoryPipelineSchedulesTest() throws ApiException {
        String workspace = null;
        String repoSlug = null;
        PaginatedPipelineSchedules response = api.getRepositoryPipelineSchedules(workspace, repoSlug);
        // TODO: test validations
    }

    /**
     * Get SSH key pair
     *
     * Retrieve the repository SSH key pair excluding the SSH private key. The private key is a write only field and will never be exposed in the logs or the REST API.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRepositoryPipelineSshKeyPairTest() throws ApiException {
        String workspace = null;
        String repoSlug = null;
        PipelineSshKeyPair response = api.getRepositoryPipelineSshKeyPair(workspace, repoSlug);
        // TODO: test validations
    }

    /**
     * Get a variable for a repository
     *
     * Retrieve a repository level variable.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRepositoryPipelineVariableTest() throws ApiException {
        String workspace = null;
        String repoSlug = null;
        String variableUuid = null;
        PipelineVariable response = api.getRepositoryPipelineVariable(workspace, repoSlug, variableUuid);
        // TODO: test validations
    }

    /**
     * List variables for a repository
     *
     * Find repository level variables.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRepositoryPipelineVariablesTest() throws ApiException {
        String workspace = null;
        String repoSlug = null;
        PaginatedPipelineVariables response = api.getRepositoryPipelineVariables(workspace, repoSlug);
        // TODO: test validations
    }

    /**
     * Stop a pipeline
     *
     * Signal the stop of a pipeline and all of its steps that not have completed yet.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stopPipelineTest() throws ApiException {
        String workspace = null;
        String repoSlug = null;
        String pipelineUuid = null;
        api.stopPipeline(workspace, repoSlug, pipelineUuid);
        // TODO: test validations
    }

    /**
     * Update a variable for an environment
     *
     * Update a deployment environment level variable.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateDeploymentVariableTest() throws ApiException {
        String workspace = null;
        String repoSlug = null;
        String environmentUuid = null;
        String variableUuid = null;
        DeploymentVariable deploymentVariable = null;
        DeploymentVariable response = api.updateDeploymentVariable(workspace, repoSlug, environmentUuid, variableUuid, deploymentVariable);
        // TODO: test validations
    }

    /**
     * Update a variable for a team
     *
     * Update a team level variable. This endpoint has been deprecated, and you should use the new workspaces endpoint. For more information, see [the announcement](https://developer.atlassian.com/cloud/bitbucket/bitbucket-api-teams-deprecation/).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updatePipelineVariableForTeamTest() throws ApiException {
        String username = null;
        String variableUuid = null;
        PipelineVariable pipelineVariable = null;
        PipelineVariable response = api.updatePipelineVariableForTeam(username, variableUuid, pipelineVariable);
        // TODO: test validations
    }

    /**
     * Update a variable for a user
     *
     * Update a user level variable. This endpoint has been deprecated, and you should use the new workspaces endpoint. For more information, see [the announcement](https://developer.atlassian.com/cloud/bitbucket/bitbucket-api-teams-deprecation/).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updatePipelineVariableForUserTest() throws ApiException {
        String selectedUser = null;
        String variableUuid = null;
        PipelineVariable pipelineVariable = null;
        PipelineVariable response = api.updatePipelineVariableForUser(selectedUser, variableUuid, pipelineVariable);
        // TODO: test validations
    }

    /**
     * Update variable for a workspace
     *
     * Update a workspace level variable.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updatePipelineVariableForWorkspaceTest() throws ApiException {
        String workspace = null;
        String variableUuid = null;
        PipelineVariable pipelineVariable = null;
        PipelineVariable response = api.updatePipelineVariableForWorkspace(workspace, variableUuid, pipelineVariable);
        // TODO: test validations
    }

    /**
     * Update the next build number
     *
     * Update the next build number that should be assigned to a pipeline. The next build number that will be configured has to be strictly higher than the current latest build number for this repository.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateRepositoryBuildNumberTest() throws ApiException {
        String workspace = null;
        String repoSlug = null;
        PipelineBuildNumber pipelineBuildNumber = null;
        PipelineBuildNumber response = api.updateRepositoryBuildNumber(workspace, repoSlug, pipelineBuildNumber);
        // TODO: test validations
    }

    /**
     * Update configuration
     *
     * Update the pipelines configuration for a repository.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateRepositoryPipelineConfigTest() throws ApiException {
        String workspace = null;
        String repoSlug = null;
        PipelinesConfig pipelinesConfig = null;
        PipelinesConfig response = api.updateRepositoryPipelineConfig(workspace, repoSlug, pipelinesConfig);
        // TODO: test validations
    }

    /**
     * Update SSH key pair
     *
     * Create or update the repository SSH key pair. The private key will be set as a default SSH identity in your build container.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateRepositoryPipelineKeyPairTest() throws ApiException {
        String workspace = null;
        String repoSlug = null;
        PipelineSshKeyPair pipelineSshKeyPair = null;
        PipelineSshKeyPair response = api.updateRepositoryPipelineKeyPair(workspace, repoSlug, pipelineSshKeyPair);
        // TODO: test validations
    }

    /**
     * Update a known host
     *
     * Update a repository level known host.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateRepositoryPipelineKnownHostTest() throws ApiException {
        String workspace = null;
        String repoSlug = null;
        String knownHostUuid = null;
        PipelineKnownHost pipelineKnownHost = null;
        PipelineKnownHost response = api.updateRepositoryPipelineKnownHost(workspace, repoSlug, knownHostUuid, pipelineKnownHost);
        // TODO: test validations
    }

    /**
     * Update a schedule
     *
     * Update a schedule.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateRepositoryPipelineScheduleTest() throws ApiException {
        String workspace = null;
        String repoSlug = null;
        String scheduleUuid = null;
        PipelineSchedulePutRequestBody pipelineSchedulePutRequestBody = null;
        PipelineSchedule response = api.updateRepositoryPipelineSchedule(workspace, repoSlug, scheduleUuid, pipelineSchedulePutRequestBody);
        // TODO: test validations
    }

    /**
     * Update a variable for a repository
     *
     * Update a repository level variable.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateRepositoryPipelineVariableTest() throws ApiException {
        String workspace = null;
        String repoSlug = null;
        String variableUuid = null;
        PipelineVariable pipelineVariable = null;
        PipelineVariable response = api.updateRepositoryPipelineVariable(workspace, repoSlug, variableUuid, pipelineVariable);
        // TODO: test validations
    }

}
