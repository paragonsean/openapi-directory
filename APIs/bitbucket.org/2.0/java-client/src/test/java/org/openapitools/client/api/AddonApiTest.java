/*
 * Bitbucket API
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@bitbucket.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Error;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AddonApi
 */
@Disabled
public class AddonApiTest {

    private final AddonApi api = new AddonApi();

    /**
     * Delete an app
     *
     * Deletes the application for the user.  This endpoint is intended to be used by Bitbucket Connect apps and only supports JWT authentication -- that is how Bitbucket identifies the particular installation of the app. Developers with applications registered in the \&quot;Develop Apps\&quot; section of Bitbucket Marketplace need not use this endpoint as updates for those applications can be sent out via the UI of that section.  &#x60;&#x60;&#x60; $ curl -X DELETE https://api.bitbucket.org/2.0/addon \\   -H \&quot;Authorization: JWT &lt;JWT Token&gt;\&quot; &#x60;&#x60;&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addonDeleteTest() throws ApiException {
        api.addonDelete();
        // TODO: test validations
    }

    /**
     * List linkers for an app
     *
     * Gets a list of all [linkers](/cloud/bitbucket/modules/linker/) for the authenticated application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addonLinkersGetTest() throws ApiException {
        api.addonLinkersGet();
        // TODO: test validations
    }

    /**
     * Get a linker for an app
     *
     * Gets a [linker](/cloud/bitbucket/modules/linker/) specified by &#x60;linker_key&#x60; for the authenticated application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addonLinkersLinkerKeyGetTest() throws ApiException {
        String linkerKey = null;
        api.addonLinkersLinkerKeyGet(linkerKey);
        // TODO: test validations
    }

    /**
     * Delete all linker values
     *
     * Delete all [linker](/cloud/bitbucket/modules/linker/) values for the specified linker of the authenticated application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addonLinkersLinkerKeyValuesDeleteTest() throws ApiException {
        String linkerKey = null;
        api.addonLinkersLinkerKeyValuesDelete(linkerKey);
        // TODO: test validations
    }

    /**
     * List linker values for a linker
     *
     * Gets a list of all [linker](/cloud/bitbucket/modules/linker/) values for the specified linker of the authenticated application.  A linker value lets applications supply values to modify its regular expression.  The base regular expression must use a Bitbucket-specific match group &#x60;(?K)&#x60; which will be translated to &#x60;([\\w\\-]+)&#x60;. A value must match this pattern.  [Read more about linker values](/cloud/bitbucket/modules/linker/#usingthebitbucketapitosupplyvalues)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addonLinkersLinkerKeyValuesGetTest() throws ApiException {
        String linkerKey = null;
        api.addonLinkersLinkerKeyValuesGet(linkerKey);
        // TODO: test validations
    }

    /**
     * Create a linker value
     *
     * Creates a [linker](/cloud/bitbucket/modules/linker/) value for the specified linker of authenticated application.  A linker value lets applications supply values to modify its regular expression.  The base regular expression must use a Bitbucket-specific match group &#x60;(?K)&#x60; which will be translated to &#x60;([\\w\\-]+)&#x60;. A value must match this pattern.  [Read more about linker values](/cloud/bitbucket/modules/linker/#usingthebitbucketapitosupplyvalues)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addonLinkersLinkerKeyValuesPostTest() throws ApiException {
        String linkerKey = null;
        api.addonLinkersLinkerKeyValuesPost(linkerKey);
        // TODO: test validations
    }

    /**
     * Update a linker value
     *
     * Bulk update [linker](/cloud/bitbucket/modules/linker/) values for the specified linker of the authenticated application.  A linker value lets applications supply values to modify its regular expression.  The base regular expression must use a Bitbucket-specific match group &#x60;(?K)&#x60; which will be translated to &#x60;([\\w\\-]+)&#x60;. A value must match this pattern.  [Read more about linker values](/cloud/bitbucket/modules/linker/#usingthebitbucketapitosupplyvalues)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addonLinkersLinkerKeyValuesPutTest() throws ApiException {
        String linkerKey = null;
        api.addonLinkersLinkerKeyValuesPut(linkerKey);
        // TODO: test validations
    }

    /**
     * Delete a linker value
     *
     * Delete a single [linker](/cloud/bitbucket/modules/linker/) value of the authenticated application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addonLinkersLinkerKeyValuesValueIdDeleteTest() throws ApiException {
        String linkerKey = null;
        Integer valueId = null;
        api.addonLinkersLinkerKeyValuesValueIdDelete(linkerKey, valueId);
        // TODO: test validations
    }

    /**
     * Get a linker value
     *
     * Get a single [linker](/cloud/bitbucket/modules/linker/) value of the authenticated application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addonLinkersLinkerKeyValuesValueIdGetTest() throws ApiException {
        String linkerKey = null;
        Integer valueId = null;
        api.addonLinkersLinkerKeyValuesValueIdGet(linkerKey, valueId);
        // TODO: test validations
    }

    /**
     * Update an installed app
     *
     * Updates the application installation for the user.  This endpoint is intended to be used by Bitbucket Connect apps and only supports JWT authentication -- that is how Bitbucket identifies the particular installation of the app. Developers with applications registered in the \&quot;Develop Apps\&quot; section of Bitbucket need not use this endpoint as updates for those applications can be sent out via the UI of that section.  Passing an empty body will update the installation using the existing descriptor URL.  &#x60;&#x60;&#x60; $ curl -X PUT https://api.bitbucket.org/2.0/addon \\   -H \&quot;Authorization: JWT &lt;JWT Token&gt;\&quot; \\   --header \&quot;Content-Type: application/json\&quot; \\   --data &#39;{}&#39; &#x60;&#x60;&#x60;  The new &#x60;descriptor&#x60; for the installation can be also provided in the body directly.  &#x60;&#x60;&#x60; $ curl -X PUT https://api.bitbucket.org/2.0/addon \\   -H \&quot;Authorization: JWT &lt;JWT Token&gt;\&quot; \\   --header \&quot;Content-Type: application/json\&quot; \\   --data &#39;{\&quot;descriptor\&quot;: $NEW_DESCRIPTOR}&#39; &#x60;&#x60;&#x60;  In both these modes the URL of the descriptor cannot be changed. To change the descriptor location and upgrade an installation the request must be made exclusively with a &#x60;descriptor_url&#x60;.   &#x60;&#x60;&#x60; $ curl -X PUT https://api.bitbucket.org/2.0/addon \\   -H \&quot;Authorization: JWT &lt;JWT Token&gt;\&quot; \\   --header \&quot;Content-Type: application/json\&quot; \\   --data &#39;{\&quot;descriptor_url\&quot;: $NEW_URL}&#39; &#x60;&#x60;&#x60;  The &#x60;descriptor_url&#x60; must exactly match the marketplace registration that Atlassian has for the application. Contact your Atlassian developer advocate to update this registration. Once the registration has been updated you may call this resource for each installation.  Note that the scopes of the application cannot be increased in the new descriptor nor reduced to none.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addonPutTest() throws ApiException {
        api.addonPut();
        // TODO: test validations
    }

}
