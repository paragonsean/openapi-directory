/*
 * Bitbucket API
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@bitbucket.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ApplicationProperty;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PropertiesApi
 */
@Disabled
public class PropertiesApiTest {

    private final PropertiesApi api = new PropertiesApi();

    /**
     * Delete a commit application property
     *
     * Delete an [application property](/cloud/bitbucket/application-properties/) value stored against a commit.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteCommitHostedPropertyValueTest() throws ApiException {
        String workspace = null;
        String repoSlug = null;
        String commit = null;
        String appKey = null;
        String propertyName = null;
        api.deleteCommitHostedPropertyValue(workspace, repoSlug, commit, appKey, propertyName);
        // TODO: test validations
    }

    /**
     * Delete a pull request application property
     *
     * Delete an [application property](/cloud/bitbucket/application-properties/) value stored against a pull request.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deletePullRequestHostedPropertyValueTest() throws ApiException {
        String workspace = null;
        String repoSlug = null;
        String pullrequestId = null;
        String appKey = null;
        String propertyName = null;
        api.deletePullRequestHostedPropertyValue(workspace, repoSlug, pullrequestId, appKey, propertyName);
        // TODO: test validations
    }

    /**
     * Delete a repository application property
     *
     * Delete an [application property](/cloud/bitbucket/application-properties/) value stored against a repository.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteRepositoryHostedPropertyValueTest() throws ApiException {
        String workspace = null;
        String repoSlug = null;
        String appKey = null;
        String propertyName = null;
        api.deleteRepositoryHostedPropertyValue(workspace, repoSlug, appKey, propertyName);
        // TODO: test validations
    }

    /**
     * Delete a user application property
     *
     * Delete an [application property](/cloud/bitbucket/application-properties/) value stored against a user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteUserHostedPropertyValueTest() throws ApiException {
        String selectedUser = null;
        String appKey = null;
        String propertyName = null;
        api.deleteUserHostedPropertyValue(selectedUser, appKey, propertyName);
        // TODO: test validations
    }

    /**
     * Get a commit application property
     *
     * Retrieve an [application property](/cloud/bitbucket/application-properties/) value stored against a commit.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCommitHostedPropertyValueTest() throws ApiException {
        String workspace = null;
        String repoSlug = null;
        String commit = null;
        String appKey = null;
        String propertyName = null;
        ApplicationProperty response = api.getCommitHostedPropertyValue(workspace, repoSlug, commit, appKey, propertyName);
        // TODO: test validations
    }

    /**
     * Get a pull request application property
     *
     * Retrieve an [application property](/cloud/bitbucket/application-properties/) value stored against a pull request.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPullRequestHostedPropertyValueTest() throws ApiException {
        String workspace = null;
        String repoSlug = null;
        String pullrequestId = null;
        String appKey = null;
        String propertyName = null;
        ApplicationProperty response = api.getPullRequestHostedPropertyValue(workspace, repoSlug, pullrequestId, appKey, propertyName);
        // TODO: test validations
    }

    /**
     * Get a repository application property
     *
     * Retrieve an [application property](/cloud/bitbucket/application-properties/) value stored against a repository.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRepositoryHostedPropertyValueTest() throws ApiException {
        String workspace = null;
        String repoSlug = null;
        String appKey = null;
        String propertyName = null;
        ApplicationProperty response = api.getRepositoryHostedPropertyValue(workspace, repoSlug, appKey, propertyName);
        // TODO: test validations
    }

    /**
     * Get a user application property
     *
     * Retrieve an [application property](/cloud/bitbucket/application-properties/) value stored against a user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void retrieveUserHostedPropertyValueTest() throws ApiException {
        String selectedUser = null;
        String appKey = null;
        String propertyName = null;
        ApplicationProperty response = api.retrieveUserHostedPropertyValue(selectedUser, appKey, propertyName);
        // TODO: test validations
    }

    /**
     * Update a commit application property
     *
     * Update an [application property](/cloud/bitbucket/application-properties/) value stored against a commit.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateCommitHostedPropertyValueTest() throws ApiException {
        String workspace = null;
        String repoSlug = null;
        String commit = null;
        String appKey = null;
        String propertyName = null;
        ApplicationProperty applicationProperty = null;
        api.updateCommitHostedPropertyValue(workspace, repoSlug, commit, appKey, propertyName, applicationProperty);
        // TODO: test validations
    }

    /**
     * Update a pull request application property
     *
     * Update an [application property](/cloud/bitbucket/application-properties/) value stored against a pull request.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updatePullRequestHostedPropertyValueTest() throws ApiException {
        String workspace = null;
        String repoSlug = null;
        String pullrequestId = null;
        String appKey = null;
        String propertyName = null;
        ApplicationProperty applicationProperty = null;
        api.updatePullRequestHostedPropertyValue(workspace, repoSlug, pullrequestId, appKey, propertyName, applicationProperty);
        // TODO: test validations
    }

    /**
     * Update a repository application property
     *
     * Update an [application property](/cloud/bitbucket/application-properties/) value stored against a repository.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateRepositoryHostedPropertyValueTest() throws ApiException {
        String workspace = null;
        String repoSlug = null;
        String appKey = null;
        String propertyName = null;
        ApplicationProperty applicationProperty = null;
        api.updateRepositoryHostedPropertyValue(workspace, repoSlug, appKey, propertyName, applicationProperty);
        // TODO: test validations
    }

    /**
     * Update a user application property
     *
     * Update an [application property](/cloud/bitbucket/application-properties/) value stored against a user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateUserHostedPropertyValueTest() throws ApiException {
        String selectedUser = null;
        String appKey = null;
        String propertyName = null;
        ApplicationProperty applicationProperty = null;
        api.updateUserHostedPropertyValue(selectedUser, appKey, propertyName, applicationProperty);
        // TODO: test validations
    }

}
