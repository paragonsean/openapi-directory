/*
 * Bitbucket API
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@bitbucket.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.PaginatedAnnotations;
import org.openapitools.client.model.PaginatedReports;
import org.openapitools.client.model.Report;
import org.openapitools.client.model.ReportAnnotation;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ReportsApi
 */
@Disabled
public class ReportsApiTest {

    private final ReportsApi api = new ReportsApi();

    /**
     * Bulk create or update annotations
     *
     * Bulk upload of annotations. Annotations are individual findings that have been identified as part of a report, for example, a line of code that represents a vulnerability. These annotations can be attached to a specific file and even a specific line in that file, however, that is optional. Annotations are not mandatory and a report can contain up to 1000 annotations.  Add the annotations you want to upload as objects in a JSON array and make sure each annotation has the external_id field set to a unique value. If you want to use an existing id from your own system, we recommend prefixing it with your system&#39;s name to avoid collisions, for example, mySystem-annotation001. The external id can later be used to identify the report as an alternative to the generated [UUID](https://developer.atlassian.com/bitbucket/api/2/reference/meta/uri-uuid#uuid). You can upload up to 100 annotations per POST request.  ### Sample cURL request: &#x60;&#x60;&#x60; curl --location &#39;https://api.bitbucket.org/2.0/repositories/&lt;username&gt;/&lt;reposity-name&gt;/commit/&lt;commit-hash&gt;/reports/mysystem-001/annotations&#39; \\ --header &#39;Content-Type: application/json&#39; \\ --data-raw &#39;[   {         \&quot;external_id\&quot;: \&quot;mysystem-annotation001\&quot;,         \&quot;title\&quot;: \&quot;Security scan report\&quot;,         \&quot;annotation_type\&quot;: \&quot;VULNERABILITY\&quot;,         \&quot;summary\&quot;: \&quot;This line represents a security threat.\&quot;,         \&quot;severity\&quot;: \&quot;HIGH\&quot;,       \&quot;path\&quot;: \&quot;my-service/src/main/java/com/myCompany/mysystem/logic/Main.java\&quot;,         \&quot;line\&quot;: 42   },   {         \&quot;external_id\&quot;: \&quot;mySystem-annotation002\&quot;,         \&quot;title\&quot;: \&quot;Bug report\&quot;,         \&quot;annotation_type\&quot;: \&quot;BUG\&quot;,         \&quot;result\&quot;: \&quot;FAILED\&quot;,         \&quot;summary\&quot;: \&quot;This line might introduce a bug.\&quot;,         \&quot;severity\&quot;: \&quot;MEDIUM\&quot;,       \&quot;path\&quot;: \&quot;my-service/src/main/java/com/myCompany/mysystem/logic/Helper.java\&quot;,         \&quot;line\&quot;: 13   } ]&#39; &#x60;&#x60;&#x60;  ### Possible field values: annotation_type: VULNERABILITY, CODE_SMELL, BUG result: PASSED, FAILED, IGNORED, SKIPPED severity: HIGH, MEDIUM, LOW, CRITICAL  Please refer to the [Code Insights documentation](https://confluence.atlassian.com/bitbucket/code-insights-994316785.html) for more information. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void bulkCreateOrUpdateAnnotationsTest() throws ApiException {
        String workspace = null;
        String repoSlug = null;
        String commit = null;
        String reportId = null;
        List<ReportAnnotation> reportAnnotation = null;
        List<ReportAnnotation> response = api.bulkCreateOrUpdateAnnotations(workspace, repoSlug, commit, reportId, reportAnnotation);
        // TODO: test validations
    }

    /**
     * Create or update an annotation
     *
     * Creates or updates an individual annotation for the specified report. Annotations are individual findings that have been identified as part of a report, for example, a line of code that represents a vulnerability. These annotations can be attached to a specific file and even a specific line in that file, however, that is optional. Annotations are not mandatory and a report can contain up to 1000 annotations.  Just as reports, annotation needs to be uploaded with a unique ID that can later be used to identify the report as an alternative to the generated [UUID](https://developer.atlassian.com/bitbucket/api/2/reference/meta/uri-uuid#uuid). If you want to use an existing id from your own system, we recommend prefixing it with your system&#39;s name to avoid collisions, for example, mySystem-annotation001.  ### Sample cURL request: &#x60;&#x60;&#x60; curl --request PUT &#39;https://api.bitbucket.org/2.0/repositories/&lt;username&gt;/&lt;reposity-name&gt;/commit/&lt;commit-hash&gt;/reports/mySystem-001/annotations/mysystem-annotation001&#39; \\ --header &#39;Content-Type: application/json&#39; \\ --data-raw &#39;{     \&quot;title\&quot;: \&quot;Security scan report\&quot;,     \&quot;annotation_type\&quot;: \&quot;VULNERABILITY\&quot;,     \&quot;summary\&quot;: \&quot;This line represents a security thread.\&quot;,     \&quot;severity\&quot;: \&quot;HIGH\&quot;,     \&quot;path\&quot;: \&quot;my-service/src/main/java/com/myCompany/mysystem/logic/Main.java\&quot;,     \&quot;line\&quot;: 42 }&#39; &#x60;&#x60;&#x60;  ### Possible field values: annotation_type: VULNERABILITY, CODE_SMELL, BUG result: PASSED, FAILED, IGNORED, SKIPPED severity: HIGH, MEDIUM, LOW, CRITICAL  Please refer to the [Code Insights documentation](https://confluence.atlassian.com/bitbucket/code-insights-994316785.html) for more information. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createOrUpdateAnnotationTest() throws ApiException {
        String workspace = null;
        String repoSlug = null;
        String commit = null;
        String reportId = null;
        String annotationId = null;
        ReportAnnotation reportAnnotation = null;
        ReportAnnotation response = api.createOrUpdateAnnotation(workspace, repoSlug, commit, reportId, annotationId, reportAnnotation);
        // TODO: test validations
    }

    /**
     * Create or update a report
     *
     * Creates or updates a report for the specified commit. To upload a report, make sure to generate an ID that is unique across all reports for that commit. If you want to use an existing id from your own system, we recommend prefixing it with your system&#39;s name to avoid collisions, for example, mySystem-001.  ### Sample cURL request: &#x60;&#x60;&#x60; curl --request PUT &#39;https://api.bitbucket.org/2.0/repositories/&lt;username&gt;/&lt;reposity-name&gt;/commit/&lt;commit-hash&gt;/reports/mysystem-001&#39; \\ --header &#39;Content-Type: application/json&#39; \\ --data-raw &#39;{     \&quot;title\&quot;: \&quot;Security scan report\&quot;,     \&quot;details\&quot;: \&quot;This pull request introduces 10 new dependency vulnerabilities.\&quot;,     \&quot;report_type\&quot;: \&quot;SECURITY\&quot;,     \&quot;reporter\&quot;: \&quot;mySystem\&quot;,     \&quot;link\&quot;: \&quot;http://www.mysystem.com/reports/001\&quot;,     \&quot;result\&quot;: \&quot;FAILED\&quot;,     \&quot;data\&quot;: [         {             \&quot;title\&quot;: \&quot;Duration (seconds)\&quot;,             \&quot;type\&quot;: \&quot;DURATION\&quot;,             \&quot;value\&quot;: 14         },         {             \&quot;title\&quot;: \&quot;Safe to merge?\&quot;,             \&quot;type\&quot;: \&quot;BOOLEAN\&quot;,             \&quot;value\&quot;: false         }     ] }&#39; &#x60;&#x60;&#x60;  ### Possible field values: report_type: SECURITY, COVERAGE, TEST, BUG result: PASSED, FAILED, PENDING data.type: BOOLEAN, DATE, DURATION, LINK, NUMBER, PERCENTAGE, TEXT  #### Data field formats | Type  Field   | Value Field Type  | Value Field Display | |:--------------|:------------------|:--------------------| | None/ Omitted | Number, String or Boolean (not an array or object) | Plain text | | BOOLEAN | Boolean | The value will be read as a JSON boolean and displayed as &#39;Yes&#39; or &#39;No&#39;. | | DATE  | Number | The value will be read as a JSON number in the form of a Unix timestamp (milliseconds) and will be displayed as a relative date if the date is less than one week ago, otherwise  it will be displayed as an absolute date. | | DURATION | Number | The value will be read as a JSON number in milliseconds and will be displayed in a human readable duration format. | | LINK | Object: &#x60;{\&quot;text\&quot;: \&quot;Link text here\&quot;, \&quot;href\&quot;: \&quot;https://link.to.annotation/in/external/tool\&quot;}&#x60; | The value will be read as a JSON object containing the fields \&quot;text\&quot; and \&quot;href\&quot; and will be displayed as a clickable link on the report. | | NUMBER | Number | The value will be read as a JSON number and large numbers will be  displayed in a human readable format (e.g. 14.3k). | | PERCENTAGE | Number (between 0 and 100) | The value will be read as a JSON number between 0 and 100 and will be displayed with a percentage sign. | | TEXT | String | The value will be read as a JSON string and will be displayed as-is |  Please refer to the [Code Insights documentation](https://confluence.atlassian.com/bitbucket/code-insights-994316785.html) for more information. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createOrUpdateReportTest() throws ApiException {
        String workspace = null;
        String repoSlug = null;
        String commit = null;
        String reportId = null;
        Report report = null;
        Report response = api.createOrUpdateReport(workspace, repoSlug, commit, reportId, report);
        // TODO: test validations
    }

    /**
     * Delete an annotation
     *
     * Deletes a single Annotation matching the provided ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteAnnotationTest() throws ApiException {
        String workspace = null;
        String repoSlug = null;
        String commit = null;
        String reportId = null;
        String annotationId = null;
        api.deleteAnnotation(workspace, repoSlug, commit, reportId, annotationId);
        // TODO: test validations
    }

    /**
     * Delete a report
     *
     * Deletes a single Report matching the provided ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteReportTest() throws ApiException {
        String workspace = null;
        String repoSlug = null;
        String commit = null;
        String reportId = null;
        api.deleteReport(workspace, repoSlug, commit, reportId);
        // TODO: test validations
    }

    /**
     * Get an annotation
     *
     * Returns a single Annotation matching the provided ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAnnotationTest() throws ApiException {
        String workspace = null;
        String repoSlug = null;
        String commit = null;
        String reportId = null;
        String annotationId = null;
        ReportAnnotation response = api.getAnnotation(workspace, repoSlug, commit, reportId, annotationId);
        // TODO: test validations
    }

    /**
     * List annotations
     *
     * Returns a paginated list of Annotations for a specified report.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAnnotationsForReportTest() throws ApiException {
        String workspace = null;
        String repoSlug = null;
        String commit = null;
        String reportId = null;
        PaginatedAnnotations response = api.getAnnotationsForReport(workspace, repoSlug, commit, reportId);
        // TODO: test validations
    }

    /**
     * Get a report
     *
     * Returns a single Report matching the provided ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getReportTest() throws ApiException {
        String workspace = null;
        String repoSlug = null;
        String commit = null;
        String reportId = null;
        Report response = api.getReport(workspace, repoSlug, commit, reportId);
        // TODO: test validations
    }

    /**
     * List reports
     *
     * Returns a paginated list of Reports linked to this commit.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getReportsForCommitTest() throws ApiException {
        String workspace = null;
        String repoSlug = null;
        String commit = null;
        PaginatedReports response = api.getReportsForCommit(workspace, repoSlug, commit);
        // TODO: test validations
    }

}
