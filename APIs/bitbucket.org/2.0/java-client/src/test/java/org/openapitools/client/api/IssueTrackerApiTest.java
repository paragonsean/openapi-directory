/*
 * Bitbucket API
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@bitbucket.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Component;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.ExportOptions;
import org.openapitools.client.model.Issue;
import org.openapitools.client.model.IssueChange;
import org.openapitools.client.model.IssueComment;
import org.openapitools.client.model.IssueJobStatus;
import org.openapitools.client.model.Milestone;
import org.openapitools.client.model.PaginatedComponents;
import org.openapitools.client.model.PaginatedIssueAttachments;
import org.openapitools.client.model.PaginatedIssueComments;
import org.openapitools.client.model.PaginatedIssues;
import org.openapitools.client.model.PaginatedLogEntries;
import org.openapitools.client.model.PaginatedMilestones;
import org.openapitools.client.model.PaginatedVersions;
import org.openapitools.client.model.Version;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for IssueTrackerApi
 */
@Disabled
public class IssueTrackerApiTest {

    private final IssueTrackerApi api = new IssueTrackerApi();

    /**
     * Get a component for issues
     *
     * Returns the specified issue tracker component object.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void repositoriesWorkspaceRepoSlugComponentsComponentIdGetTest() throws ApiException {
        Integer componentId = null;
        String repoSlug = null;
        String workspace = null;
        Component response = api.repositoriesWorkspaceRepoSlugComponentsComponentIdGet(componentId, repoSlug, workspace);
        // TODO: test validations
    }

    /**
     * List components
     *
     * Returns the components that have been defined in the issue tracker.  This resource is only available on repositories that have the issue tracker enabled.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void repositoriesWorkspaceRepoSlugComponentsGetTest() throws ApiException {
        String repoSlug = null;
        String workspace = null;
        PaginatedComponents response = api.repositoriesWorkspaceRepoSlugComponentsGet(repoSlug, workspace);
        // TODO: test validations
    }

    /**
     * Export issues
     *
     * A POST request to this endpoint initiates a new background celery task that archives the repo&#39;s issues.  For example, you can run:  curl -u &lt;username&gt; -X POST http://api.bitbucket.org/2.0/repositories/&lt;owner_username&gt;/&lt;repo_slug&gt;/ issues/export  When the job has been accepted, it will return a 202 (Accepted) along with a unique url to this job in the &#39;Location&#39; response header. This url is the endpoint for where the user can obtain their zip files.\&quot;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void repositoriesWorkspaceRepoSlugIssuesExportPostTest() throws ApiException {
        String repoSlug = null;
        String workspace = null;
        ExportOptions exportOptions = null;
        api.repositoriesWorkspaceRepoSlugIssuesExportPost(repoSlug, workspace, exportOptions);
        // TODO: test validations
    }

    /**
     * Check issue export status
     *
     * This endpoint is used to poll for the progress of an issue export job and return the zip file after the job is complete. As long as the job is running, this will return a 200 response with in the response body a description of the current status.  After the job has been scheduled, but before it starts executing, this endpoint&#39;s response is:  {  \&quot;type\&quot;: \&quot;issue_job_status\&quot;,  \&quot;status\&quot;: \&quot;ACCEPTED\&quot;,  \&quot;phase\&quot;: \&quot;Initializing\&quot;,  \&quot;total\&quot;: 0,  \&quot;count\&quot;: 0,  \&quot;pct\&quot;: 0 }   Then once it starts running, it becomes:  {  \&quot;type\&quot;: \&quot;issue_job_status\&quot;,  \&quot;status\&quot;: \&quot;STARTED\&quot;,  \&quot;phase\&quot;: \&quot;Attachments\&quot;,  \&quot;total\&quot;: 15,  \&quot;count\&quot;: 11,  \&quot;pct\&quot;: 73 }  Once the job has successfully completed, it returns a stream of the zip file.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void repositoriesWorkspaceRepoSlugIssuesExportRepoNameIssuesTaskIdZipGetTest() throws ApiException {
        String repoName = null;
        String repoSlug = null;
        String taskId = null;
        String workspace = null;
        IssueJobStatus response = api.repositoriesWorkspaceRepoSlugIssuesExportRepoNameIssuesTaskIdZipGet(repoName, repoSlug, taskId, workspace);
        // TODO: test validations
    }

    /**
     * List issues
     *
     * Returns the issues in the issue tracker.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void repositoriesWorkspaceRepoSlugIssuesGetTest() throws ApiException {
        String repoSlug = null;
        String workspace = null;
        PaginatedIssues response = api.repositoriesWorkspaceRepoSlugIssuesGet(repoSlug, workspace);
        // TODO: test validations
    }

    /**
     * Check issue import status
     *
     * When using GET, this endpoint reports the status of the current import task. Request example:  &#x60;&#x60;&#x60; $ curl -u &lt;username&gt; -X GET https://api.bitbucket.org/2.0/repositories/&lt;owner_username&gt;/&lt;repo_slug&gt;/issues/import &#x60;&#x60;&#x60;  After the job has been scheduled, but before it starts executing, this endpoint&#39;s response is:  &#x60;&#x60;&#x60; &lt; HTTP/1.1 202 Accepted {     \&quot;type\&quot;: \&quot;issue_job_status\&quot;,     \&quot;status\&quot;: \&quot;PENDING\&quot;,     \&quot;phase\&quot;: \&quot;Attachments\&quot;,     \&quot;total\&quot;: 15,     \&quot;count\&quot;: 0,     \&quot;percent\&quot;: 0 } &#x60;&#x60;&#x60;  Once it starts running, it is a 202 response with status STARTED and progress filled.  After it is finished, it becomes a 200 response with status SUCCESS or FAILURE.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void repositoriesWorkspaceRepoSlugIssuesImportGetTest() throws ApiException {
        String repoSlug = null;
        String workspace = null;
        IssueJobStatus response = api.repositoriesWorkspaceRepoSlugIssuesImportGet(repoSlug, workspace);
        // TODO: test validations
    }

    /**
     * Import issues
     *
     * A POST request to this endpoint will import the zip file given by the archive parameter into the repository. All existing issues will be deleted and replaced by the contents of the imported zip file.  Imports are done through a multipart/form-data POST. There is one valid and required form field, with the name \&quot;archive,\&quot; which needs to be a file field:  &#x60;&#x60;&#x60; $ curl -u &lt;username&gt; -X POST -F archive&#x3D;@/path/to/file.zip https://api.bitbucket.org/2.0/repositories/&lt;owner_username&gt;/&lt;repo_slug&gt;/issues/import &#x60;&#x60;&#x60;  When the import job is accepted, here is example output:  &#x60;&#x60;&#x60; &lt; HTTP/1.1 202 Accepted  {     \&quot;type\&quot;: \&quot;issue_job_status\&quot;,     \&quot;status\&quot;: \&quot;ACCEPTED\&quot;,     \&quot;phase\&quot;: \&quot;Attachments\&quot;,     \&quot;total\&quot;: 15,     \&quot;count\&quot;: 0,     \&quot;percent\&quot;: 0 } &#x60;&#x60;&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void repositoriesWorkspaceRepoSlugIssuesImportPostTest() throws ApiException {
        String repoSlug = null;
        String workspace = null;
        IssueJobStatus response = api.repositoriesWorkspaceRepoSlugIssuesImportPost(repoSlug, workspace);
        // TODO: test validations
    }

    /**
     * List attachments for an issue
     *
     * Returns all attachments for this issue.  This returns the files&#39; meta data. This does not return the files&#39; actual contents.  The files are always ordered by their upload date.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void repositoriesWorkspaceRepoSlugIssuesIssueIdAttachmentsGetTest() throws ApiException {
        String issueId = null;
        String repoSlug = null;
        String workspace = null;
        PaginatedIssueAttachments response = api.repositoriesWorkspaceRepoSlugIssuesIssueIdAttachmentsGet(issueId, repoSlug, workspace);
        // TODO: test validations
    }

    /**
     * Delete an attachment for an issue
     *
     * Deletes an attachment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void repositoriesWorkspaceRepoSlugIssuesIssueIdAttachmentsPathDeleteTest() throws ApiException {
        String issueId = null;
        String path = null;
        String repoSlug = null;
        String workspace = null;
        api.repositoriesWorkspaceRepoSlugIssuesIssueIdAttachmentsPathDelete(issueId, path, repoSlug, workspace);
        // TODO: test validations
    }

    /**
     * Get attachment for an issue
     *
     * Returns the contents of the specified file attachment.  Note that this endpoint does not return a JSON response, but instead returns a redirect pointing to the actual file that in turn will return the raw contents.  The redirect URL contains a one-time token that has a limited lifetime. As a result, the link should not be persisted, stored, or shared.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void repositoriesWorkspaceRepoSlugIssuesIssueIdAttachmentsPathGetTest() throws ApiException {
        String issueId = null;
        String path = null;
        String repoSlug = null;
        String workspace = null;
        api.repositoriesWorkspaceRepoSlugIssuesIssueIdAttachmentsPathGet(issueId, path, repoSlug, workspace);
        // TODO: test validations
    }

    /**
     * Upload an attachment to an issue
     *
     * Upload new issue attachments.  To upload files, perform a &#x60;multipart/form-data&#x60; POST containing one or more file fields.  When a file is uploaded with the same name as an existing attachment, then the existing file will be replaced.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void repositoriesWorkspaceRepoSlugIssuesIssueIdAttachmentsPostTest() throws ApiException {
        String issueId = null;
        String repoSlug = null;
        String workspace = null;
        api.repositoriesWorkspaceRepoSlugIssuesIssueIdAttachmentsPost(issueId, repoSlug, workspace);
        // TODO: test validations
    }

    /**
     * Get issue change object
     *
     * Returns the specified issue change object.  This resource is only available on repositories that have the issue tracker enabled.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void repositoriesWorkspaceRepoSlugIssuesIssueIdChangesChangeIdGetTest() throws ApiException {
        String changeId = null;
        String issueId = null;
        String repoSlug = null;
        String workspace = null;
        IssueChange response = api.repositoriesWorkspaceRepoSlugIssuesIssueIdChangesChangeIdGet(changeId, issueId, repoSlug, workspace);
        // TODO: test validations
    }

    /**
     * List changes on an issue
     *
     * Returns the list of all changes that have been made to the specified issue. Changes are returned in chronological order with the oldest change first.  Each time an issue is edited in the UI or through the API, an immutable change record is created under the &#x60;/issues/123/changes&#x60; endpoint. It also has a comment associated with the change.  Note that this operation is changing significantly, due to privacy changes. See the [announcement](https://developer.atlassian.com/cloud/bitbucket/bitbucket-api-changes-gdpr/#changes-to-the-issue-changes-api) for details.  &#x60;&#x60;&#x60; $ curl -s https://api.bitbucket.org/2.0/repositories/evzijst/dogslow/issues/1/changes - | jq .  {   \&quot;pagelen\&quot;: 20,   \&quot;values\&quot;: [     {       \&quot;changes\&quot;: {         \&quot;priority\&quot;: {           \&quot;new\&quot;: \&quot;trivial\&quot;,           \&quot;old\&quot;: \&quot;major\&quot;         },         \&quot;assignee\&quot;: {           \&quot;new\&quot;: \&quot;\&quot;,           \&quot;old\&quot;: \&quot;evzijst\&quot;         },         \&quot;assignee_account_id\&quot;: {           \&quot;new\&quot;: \&quot;\&quot;,           \&quot;old\&quot;: \&quot;557058:c0b72ad0-1cb5-4018-9cdc-0cde8492c443\&quot;         },         \&quot;kind\&quot;: {           \&quot;new\&quot;: \&quot;enhancement\&quot;,           \&quot;old\&quot;: \&quot;bug\&quot;         }       },       \&quot;links\&quot;: {         \&quot;self\&quot;: {           \&quot;href\&quot;: \&quot;https://api.bitbucket.org/2.0/repositories/evzijst/dogslow/issues/1/changes/2\&quot;         },         \&quot;html\&quot;: {           \&quot;href\&quot;: \&quot;https://bitbucket.org/evzijst/dogslow/issues/1#comment-2\&quot;         }       },       \&quot;issue\&quot;: {         \&quot;links\&quot;: {           \&quot;self\&quot;: {             \&quot;href\&quot;: \&quot;https://api.bitbucket.org/2.0/repositories/evzijst/dogslow/issues/1\&quot;           }         },         \&quot;type\&quot;: \&quot;issue\&quot;,         \&quot;id\&quot;: 1,         \&quot;repository\&quot;: {           \&quot;links\&quot;: {             \&quot;self\&quot;: {               \&quot;href\&quot;: \&quot;https://api.bitbucket.org/2.0/repositories/evzijst/dogslow\&quot;             },             \&quot;html\&quot;: {               \&quot;href\&quot;: \&quot;https://bitbucket.org/evzijst/dogslow\&quot;             },             \&quot;avatar\&quot;: {               \&quot;href\&quot;: \&quot;https://bitbucket.org/evzijst/dogslow/avatar/32/\&quot;             }           },           \&quot;type\&quot;: \&quot;repository\&quot;,           \&quot;name\&quot;: \&quot;dogslow\&quot;,           \&quot;full_name\&quot;: \&quot;evzijst/dogslow\&quot;,           \&quot;uuid\&quot;: \&quot;{988b17c6-1a47-4e70-84ee-854d5f012bf6}\&quot;         },         \&quot;title\&quot;: \&quot;Updated title\&quot;       },       \&quot;created_on\&quot;: \&quot;2018-03-03T00:35:28.353630+00:00\&quot;,       \&quot;user\&quot;: {         \&quot;username\&quot;: \&quot;evzijst\&quot;,         \&quot;nickname\&quot;: \&quot;evzijst\&quot;,         \&quot;display_name\&quot;: \&quot;evzijst\&quot;,         \&quot;type\&quot;: \&quot;user\&quot;,         \&quot;uuid\&quot;: \&quot;{aaa7972b-38af-4fb1-802d-6e3854c95778}\&quot;,         \&quot;links\&quot;: {           \&quot;self\&quot;: {             \&quot;href\&quot;: \&quot;https://api.bitbucket.org/2.0/users/evzijst\&quot;           },           \&quot;html\&quot;: {             \&quot;href\&quot;: \&quot;https://bitbucket.org/evzijst/\&quot;           },           \&quot;avatar\&quot;: {             \&quot;href\&quot;: \&quot;https://bitbucket.org/account/evzijst/avatar/32/\&quot;           }         }       },       \&quot;message\&quot;: {         \&quot;raw\&quot;: \&quot;Removed assignee, changed kind and priority.\&quot;,         \&quot;markup\&quot;: \&quot;markdown\&quot;,         \&quot;html\&quot;: \&quot;&lt;p&gt;Removed assignee, changed kind and priority.&lt;/p&gt;\&quot;,         \&quot;type\&quot;: \&quot;rendered\&quot;       },       \&quot;type\&quot;: \&quot;issue_change\&quot;,       \&quot;id\&quot;: 2     }   ],   \&quot;page\&quot;: 1 } &#x60;&#x60;&#x60;  Changes support [filtering and sorting](/cloud/bitbucket/rest/intro/#filtering) that can be used to search for specific changes. For instance, to see when an issue transitioned to \&quot;resolved\&quot;:  &#x60;&#x60;&#x60; $ curl -s https://api.bitbucket.org/2.0/repositories/site/master/issues/1/changes \\    -G --data-urlencode&#x3D;&#39;q&#x3D;changes.state.new &#x3D; \&quot;resolved\&quot;&#39; &#x60;&#x60;&#x60;  This resource is only available on repositories that have the issue tracker enabled.  N.B.  The &#x60;changes.assignee&#x60; and &#x60;changes.assignee_account_id&#x60; fields are not a &#x60;user&#x60; object. Instead, they contain the raw &#x60;username&#x60; and &#x60;account_id&#x60; of the user. This is to protect the integrity of the audit log even after a user account gets deleted.  The &#x60;changes.assignee&#x60; field is deprecated will disappear in the future. Use &#x60;changes.assignee_account_id&#x60; instead.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void repositoriesWorkspaceRepoSlugIssuesIssueIdChangesGetTest() throws ApiException {
        String issueId = null;
        String repoSlug = null;
        String workspace = null;
        String q = null;
        String sort = null;
        PaginatedLogEntries response = api.repositoriesWorkspaceRepoSlugIssuesIssueIdChangesGet(issueId, repoSlug, workspace, q, sort);
        // TODO: test validations
    }

    /**
     * Modify the state of an issue
     *
     * Makes a change to the specified issue.  For example, to change an issue&#39;s state and assignee, create a new change object that modifies these fields:  &#x60;&#x60;&#x60; curl https://api.bitbucket.org/2.0/site/master/issues/1234/changes \\   -s -u evzijst -X POST -H \&quot;Content-Type: application/json\&quot; \\   -d &#39;{     \&quot;changes\&quot;: {       \&quot;assignee_account_id\&quot;: {         \&quot;new\&quot;: \&quot;557058:c0b72ad0-1cb5-4018-9cdc-0cde8492c443\&quot;       },       \&quot;state\&quot;: {         \&quot;new\&quot;: &#39;resolved\&quot;       }     }     \&quot;message\&quot;: {       \&quot;raw\&quot;: \&quot;This is now resolved.\&quot;     }   }&#39; &#x60;&#x60;&#x60;  The above example also includes a custom comment to go alongside the change. This comment will also be visible on the issue page in the UI.  The fields of the &#x60;changes&#x60; object are strings, not objects. This allows for immutable change log records, even after user accounts, milestones, or other objects recorded in a change entry, get renamed or deleted.  The &#x60;assignee_account_id&#x60; field stores the account id. When POSTing a new change and changing the assignee, the client should therefore use the user&#39;s account_id in the &#x60;changes.assignee_account_id.new&#x60; field.  This call requires authentication. Private repositories or private issue trackers require the caller to authenticate with an account that has appropriate authorization.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void repositoriesWorkspaceRepoSlugIssuesIssueIdChangesPostTest() throws ApiException {
        String issueId = null;
        String repoSlug = null;
        String workspace = null;
        IssueChange issueChange = null;
        IssueChange response = api.repositoriesWorkspaceRepoSlugIssuesIssueIdChangesPost(issueId, repoSlug, workspace, issueChange);
        // TODO: test validations
    }

    /**
     * Delete a comment on an issue
     *
     * Deletes the specified comment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void repositoriesWorkspaceRepoSlugIssuesIssueIdCommentsCommentIdDeleteTest() throws ApiException {
        Integer commentId = null;
        String issueId = null;
        String repoSlug = null;
        String workspace = null;
        api.repositoriesWorkspaceRepoSlugIssuesIssueIdCommentsCommentIdDelete(commentId, issueId, repoSlug, workspace);
        // TODO: test validations
    }

    /**
     * Get a comment on an issue
     *
     * Returns the specified issue comment object.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void repositoriesWorkspaceRepoSlugIssuesIssueIdCommentsCommentIdGetTest() throws ApiException {
        Integer commentId = null;
        String issueId = null;
        String repoSlug = null;
        String workspace = null;
        IssueComment response = api.repositoriesWorkspaceRepoSlugIssuesIssueIdCommentsCommentIdGet(commentId, issueId, repoSlug, workspace);
        // TODO: test validations
    }

    /**
     * Update a comment on an issue
     *
     * Updates the content of the specified issue comment. Note that only the &#x60;content.raw&#x60; field can be modified.  &#x60;&#x60;&#x60; $ curl https://api.bitbucket.org/2.0/repositories/atlassian/prlinks/issues/42/comments/5728901 \\   -X PUT -u evzijst \\   -H &#39;Content-Type: application/json&#39; \\   -d &#39;{\&quot;content\&quot;: {\&quot;raw\&quot;: \&quot;Lorem ipsum.\&quot;}&#39; &#x60;&#x60;&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void repositoriesWorkspaceRepoSlugIssuesIssueIdCommentsCommentIdPutTest() throws ApiException {
        Integer commentId = null;
        String issueId = null;
        String repoSlug = null;
        String workspace = null;
        IssueComment issueComment = null;
        IssueComment response = api.repositoriesWorkspaceRepoSlugIssuesIssueIdCommentsCommentIdPut(commentId, issueId, repoSlug, workspace, issueComment);
        // TODO: test validations
    }

    /**
     * List comments on an issue
     *
     * Returns a paginated list of all comments that were made on the specified issue.  The default sorting is oldest to newest and can be overridden with the &#x60;sort&#x60; query parameter.  This endpoint also supports filtering and sorting of the results. See [filtering and sorting](/cloud/bitbucket/rest/intro/#filtering) for more details.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void repositoriesWorkspaceRepoSlugIssuesIssueIdCommentsGetTest() throws ApiException {
        String issueId = null;
        String repoSlug = null;
        String workspace = null;
        String q = null;
        PaginatedIssueComments response = api.repositoriesWorkspaceRepoSlugIssuesIssueIdCommentsGet(issueId, repoSlug, workspace, q);
        // TODO: test validations
    }

    /**
     * Create a comment on an issue
     *
     * Creates a new issue comment.  &#x60;&#x60;&#x60; $ curl https://api.bitbucket.org/2.0/repositories/atlassian/prlinks/issues/42/comments/ \\   -X POST -u evzijst \\   -H &#39;Content-Type: application/json&#39; \\   -d &#39;{\&quot;content\&quot;: {\&quot;raw\&quot;: \&quot;Lorem ipsum.\&quot;}}&#39; &#x60;&#x60;&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void repositoriesWorkspaceRepoSlugIssuesIssueIdCommentsPostTest() throws ApiException {
        String issueId = null;
        String repoSlug = null;
        String workspace = null;
        IssueComment issueComment = null;
        api.repositoriesWorkspaceRepoSlugIssuesIssueIdCommentsPost(issueId, repoSlug, workspace, issueComment);
        // TODO: test validations
    }

    /**
     * Delete an issue
     *
     * Deletes the specified issue. This requires write access to the repository.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void repositoriesWorkspaceRepoSlugIssuesIssueIdDeleteTest() throws ApiException {
        String issueId = null;
        String repoSlug = null;
        String workspace = null;
        Issue response = api.repositoriesWorkspaceRepoSlugIssuesIssueIdDelete(issueId, repoSlug, workspace);
        // TODO: test validations
    }

    /**
     * Get an issue
     *
     * Returns the specified issue.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void repositoriesWorkspaceRepoSlugIssuesIssueIdGetTest() throws ApiException {
        String issueId = null;
        String repoSlug = null;
        String workspace = null;
        Issue response = api.repositoriesWorkspaceRepoSlugIssuesIssueIdGet(issueId, repoSlug, workspace);
        // TODO: test validations
    }

    /**
     * Update an issue
     *
     * Modifies the issue.  &#x60;&#x60;&#x60; $ curl https://api.bitbucket.org/2.0/repostories/evzijst/dogslow/issues/123 \\   -u evzijst -s -X PUT -H &#39;Content-Type: application/json&#39; \\   -d &#39;{   \&quot;title\&quot;: \&quot;Updated title\&quot;,   \&quot;assignee\&quot;: {     \&quot;account_id\&quot;: \&quot;5d5355e8c6b9320d9ea5b28d\&quot;   },   \&quot;priority\&quot;: \&quot;minor\&quot;,   \&quot;version\&quot;: {     \&quot;name\&quot;: \&quot;1.0\&quot;   },   \&quot;component\&quot;: null }&#39; &#x60;&#x60;&#x60;  This example changes the &#x60;title&#x60;, &#x60;assignee&#x60;, &#x60;priority&#x60; and the &#x60;version&#x60;. It also removes the value of the &#x60;component&#x60; from the issue by setting the field to &#x60;null&#x60;. Any field not present keeps its existing value.  Each time an issue is edited in the UI or through the API, an immutable change record is created under the &#x60;/issues/123/changes&#x60; endpoint. It also has a comment associated with the change.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void repositoriesWorkspaceRepoSlugIssuesIssueIdPutTest() throws ApiException {
        String issueId = null;
        String repoSlug = null;
        String workspace = null;
        Issue response = api.repositoriesWorkspaceRepoSlugIssuesIssueIdPut(issueId, repoSlug, workspace);
        // TODO: test validations
    }

    /**
     * Remove vote for an issue
     *
     * Retract your vote.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void repositoriesWorkspaceRepoSlugIssuesIssueIdVoteDeleteTest() throws ApiException {
        String issueId = null;
        String repoSlug = null;
        String workspace = null;
        Error response = api.repositoriesWorkspaceRepoSlugIssuesIssueIdVoteDelete(issueId, repoSlug, workspace);
        // TODO: test validations
    }

    /**
     * Check if current user voted for an issue
     *
     * Check whether the authenticated user has voted for this issue. A 204 status code indicates that the user has voted, while a 404 implies they haven&#39;t.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void repositoriesWorkspaceRepoSlugIssuesIssueIdVoteGetTest() throws ApiException {
        String issueId = null;
        String repoSlug = null;
        String workspace = null;
        Error response = api.repositoriesWorkspaceRepoSlugIssuesIssueIdVoteGet(issueId, repoSlug, workspace);
        // TODO: test validations
    }

    /**
     * Vote for an issue
     *
     * Vote for this issue.  To cast your vote, do an empty PUT. The 204 status code indicates that the operation was successful.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void repositoriesWorkspaceRepoSlugIssuesIssueIdVotePutTest() throws ApiException {
        String issueId = null;
        String repoSlug = null;
        String workspace = null;
        Error response = api.repositoriesWorkspaceRepoSlugIssuesIssueIdVotePut(issueId, repoSlug, workspace);
        // TODO: test validations
    }

    /**
     * Stop watching an issue
     *
     * Stop watching this issue.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void repositoriesWorkspaceRepoSlugIssuesIssueIdWatchDeleteTest() throws ApiException {
        String issueId = null;
        String repoSlug = null;
        String workspace = null;
        Error response = api.repositoriesWorkspaceRepoSlugIssuesIssueIdWatchDelete(issueId, repoSlug, workspace);
        // TODO: test validations
    }

    /**
     * Check if current user is watching a issue
     *
     * Indicated whether or not the authenticated user is watching this issue.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void repositoriesWorkspaceRepoSlugIssuesIssueIdWatchGetTest() throws ApiException {
        String issueId = null;
        String repoSlug = null;
        String workspace = null;
        Error response = api.repositoriesWorkspaceRepoSlugIssuesIssueIdWatchGet(issueId, repoSlug, workspace);
        // TODO: test validations
    }

    /**
     * Watch an issue
     *
     * Start watching this issue.  To start watching this issue, do an empty PUT. The 204 status code indicates that the operation was successful.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void repositoriesWorkspaceRepoSlugIssuesIssueIdWatchPutTest() throws ApiException {
        String issueId = null;
        String repoSlug = null;
        String workspace = null;
        Error response = api.repositoriesWorkspaceRepoSlugIssuesIssueIdWatchPut(issueId, repoSlug, workspace);
        // TODO: test validations
    }

    /**
     * Create an issue
     *
     * Creates a new issue.  This call requires authentication. Private repositories or private issue trackers require the caller to authenticate with an account that has appropriate authorization.  The authenticated user is used for the issue&#39;s &#x60;reporter&#x60; field.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void repositoriesWorkspaceRepoSlugIssuesPostTest() throws ApiException {
        String repoSlug = null;
        String workspace = null;
        Issue issue = null;
        Issue response = api.repositoriesWorkspaceRepoSlugIssuesPost(repoSlug, workspace, issue);
        // TODO: test validations
    }

    /**
     * List milestones
     *
     * Returns the milestones that have been defined in the issue tracker.  This resource is only available on repositories that have the issue tracker enabled.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void repositoriesWorkspaceRepoSlugMilestonesGetTest() throws ApiException {
        String repoSlug = null;
        String workspace = null;
        PaginatedMilestones response = api.repositoriesWorkspaceRepoSlugMilestonesGet(repoSlug, workspace);
        // TODO: test validations
    }

    /**
     * Get a milestone
     *
     * Returns the specified issue tracker milestone object.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void repositoriesWorkspaceRepoSlugMilestonesMilestoneIdGetTest() throws ApiException {
        Integer milestoneId = null;
        String repoSlug = null;
        String workspace = null;
        Milestone response = api.repositoriesWorkspaceRepoSlugMilestonesMilestoneIdGet(milestoneId, repoSlug, workspace);
        // TODO: test validations
    }

    /**
     * List defined versions for issues
     *
     * Returns the versions that have been defined in the issue tracker.  This resource is only available on repositories that have the issue tracker enabled.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void repositoriesWorkspaceRepoSlugVersionsGetTest() throws ApiException {
        String repoSlug = null;
        String workspace = null;
        PaginatedVersions response = api.repositoriesWorkspaceRepoSlugVersionsGet(repoSlug, workspace);
        // TODO: test validations
    }

    /**
     * Get a defined version for issues
     *
     * Returns the specified issue tracker version object.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void repositoriesWorkspaceRepoSlugVersionsVersionIdGetTest() throws ApiException {
        String repoSlug = null;
        Integer versionId = null;
        String workspace = null;
        Version response = api.repositoriesWorkspaceRepoSlugVersionsVersionIdGet(repoSlug, versionId, workspace);
        // TODO: test validations
    }

}
