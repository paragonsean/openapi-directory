/*
 * Bitbucket API
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@bitbucket.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Link;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * RepositoryLinks
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:00:39.758646-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RepositoryLinks {
  public static final String SERIALIZED_NAME_AVATAR = "avatar";
  @SerializedName(SERIALIZED_NAME_AVATAR)
  private Link avatar;

  public static final String SERIALIZED_NAME_CLONE = "clone";
  @SerializedName(SERIALIZED_NAME_CLONE)
  private List<Link> clone = new ArrayList<>();

  public static final String SERIALIZED_NAME_COMMITS = "commits";
  @SerializedName(SERIALIZED_NAME_COMMITS)
  private Link commits;

  public static final String SERIALIZED_NAME_DOWNLOADS = "downloads";
  @SerializedName(SERIALIZED_NAME_DOWNLOADS)
  private Link downloads;

  public static final String SERIALIZED_NAME_FORKS = "forks";
  @SerializedName(SERIALIZED_NAME_FORKS)
  private Link forks;

  public static final String SERIALIZED_NAME_HOOKS = "hooks";
  @SerializedName(SERIALIZED_NAME_HOOKS)
  private Link hooks;

  public static final String SERIALIZED_NAME_HTML = "html";
  @SerializedName(SERIALIZED_NAME_HTML)
  private Link html;

  public static final String SERIALIZED_NAME_PULLREQUESTS = "pullrequests";
  @SerializedName(SERIALIZED_NAME_PULLREQUESTS)
  private Link pullrequests;

  public static final String SERIALIZED_NAME_SELF = "self";
  @SerializedName(SERIALIZED_NAME_SELF)
  private Link self;

  public static final String SERIALIZED_NAME_WATCHERS = "watchers";
  @SerializedName(SERIALIZED_NAME_WATCHERS)
  private Link watchers;

  public RepositoryLinks() {
  }

  public RepositoryLinks avatar(Link avatar) {
    this.avatar = avatar;
    return this;
  }

  /**
   * Get avatar
   * @return avatar
   */
  @javax.annotation.Nullable
  public Link getAvatar() {
    return avatar;
  }

  public void setAvatar(Link avatar) {
    this.avatar = avatar;
  }


  public RepositoryLinks clone(List<Link> clone) {
    this.clone = clone;
    return this;
  }

  public RepositoryLinks addCloneItem(Link cloneItem) {
    if (this.clone == null) {
      this.clone = new ArrayList<>();
    }
    this.clone.add(cloneItem);
    return this;
  }

  /**
   * Get clone
   * @return clone
   */
  @javax.annotation.Nullable
  public List<Link> getClone() {
    return clone;
  }

  public void setClone(List<Link> clone) {
    this.clone = clone;
  }


  public RepositoryLinks commits(Link commits) {
    this.commits = commits;
    return this;
  }

  /**
   * Get commits
   * @return commits
   */
  @javax.annotation.Nullable
  public Link getCommits() {
    return commits;
  }

  public void setCommits(Link commits) {
    this.commits = commits;
  }


  public RepositoryLinks downloads(Link downloads) {
    this.downloads = downloads;
    return this;
  }

  /**
   * Get downloads
   * @return downloads
   */
  @javax.annotation.Nullable
  public Link getDownloads() {
    return downloads;
  }

  public void setDownloads(Link downloads) {
    this.downloads = downloads;
  }


  public RepositoryLinks forks(Link forks) {
    this.forks = forks;
    return this;
  }

  /**
   * Get forks
   * @return forks
   */
  @javax.annotation.Nullable
  public Link getForks() {
    return forks;
  }

  public void setForks(Link forks) {
    this.forks = forks;
  }


  public RepositoryLinks hooks(Link hooks) {
    this.hooks = hooks;
    return this;
  }

  /**
   * Get hooks
   * @return hooks
   */
  @javax.annotation.Nullable
  public Link getHooks() {
    return hooks;
  }

  public void setHooks(Link hooks) {
    this.hooks = hooks;
  }


  public RepositoryLinks html(Link html) {
    this.html = html;
    return this;
  }

  /**
   * Get html
   * @return html
   */
  @javax.annotation.Nullable
  public Link getHtml() {
    return html;
  }

  public void setHtml(Link html) {
    this.html = html;
  }


  public RepositoryLinks pullrequests(Link pullrequests) {
    this.pullrequests = pullrequests;
    return this;
  }

  /**
   * Get pullrequests
   * @return pullrequests
   */
  @javax.annotation.Nullable
  public Link getPullrequests() {
    return pullrequests;
  }

  public void setPullrequests(Link pullrequests) {
    this.pullrequests = pullrequests;
  }


  public RepositoryLinks self(Link self) {
    this.self = self;
    return this;
  }

  /**
   * Get self
   * @return self
   */
  @javax.annotation.Nullable
  public Link getSelf() {
    return self;
  }

  public void setSelf(Link self) {
    this.self = self;
  }


  public RepositoryLinks watchers(Link watchers) {
    this.watchers = watchers;
    return this;
  }

  /**
   * Get watchers
   * @return watchers
   */
  @javax.annotation.Nullable
  public Link getWatchers() {
    return watchers;
  }

  public void setWatchers(Link watchers) {
    this.watchers = watchers;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RepositoryLinks repositoryLinks = (RepositoryLinks) o;
    return Objects.equals(this.avatar, repositoryLinks.avatar) &&
        Objects.equals(this.clone, repositoryLinks.clone) &&
        Objects.equals(this.commits, repositoryLinks.commits) &&
        Objects.equals(this.downloads, repositoryLinks.downloads) &&
        Objects.equals(this.forks, repositoryLinks.forks) &&
        Objects.equals(this.hooks, repositoryLinks.hooks) &&
        Objects.equals(this.html, repositoryLinks.html) &&
        Objects.equals(this.pullrequests, repositoryLinks.pullrequests) &&
        Objects.equals(this.self, repositoryLinks.self) &&
        Objects.equals(this.watchers, repositoryLinks.watchers);
  }

  @Override
  public int hashCode() {
    return Objects.hash(avatar, clone, commits, downloads, forks, hooks, html, pullrequests, self, watchers);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RepositoryLinks {\n");
    sb.append("    avatar: ").append(toIndentedString(avatar)).append("\n");
    sb.append("    clone: ").append(toIndentedString(clone)).append("\n");
    sb.append("    commits: ").append(toIndentedString(commits)).append("\n");
    sb.append("    downloads: ").append(toIndentedString(downloads)).append("\n");
    sb.append("    forks: ").append(toIndentedString(forks)).append("\n");
    sb.append("    hooks: ").append(toIndentedString(hooks)).append("\n");
    sb.append("    html: ").append(toIndentedString(html)).append("\n");
    sb.append("    pullrequests: ").append(toIndentedString(pullrequests)).append("\n");
    sb.append("    self: ").append(toIndentedString(self)).append("\n");
    sb.append("    watchers: ").append(toIndentedString(watchers)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("avatar");
    openapiFields.add("clone");
    openapiFields.add("commits");
    openapiFields.add("downloads");
    openapiFields.add("forks");
    openapiFields.add("hooks");
    openapiFields.add("html");
    openapiFields.add("pullrequests");
    openapiFields.add("self");
    openapiFields.add("watchers");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RepositoryLinks
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RepositoryLinks.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RepositoryLinks is not found in the empty JSON string", RepositoryLinks.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RepositoryLinks.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RepositoryLinks` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `avatar`
      if (jsonObj.get("avatar") != null && !jsonObj.get("avatar").isJsonNull()) {
        Link.validateJsonElement(jsonObj.get("avatar"));
      }
      if (jsonObj.get("clone") != null && !jsonObj.get("clone").isJsonNull()) {
        JsonArray jsonArrayclone = jsonObj.getAsJsonArray("clone");
        if (jsonArrayclone != null) {
          // ensure the json data is an array
          if (!jsonObj.get("clone").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `clone` to be an array in the JSON string but got `%s`", jsonObj.get("clone").toString()));
          }

          // validate the optional field `clone` (array)
          for (int i = 0; i < jsonArrayclone.size(); i++) {
            Link.validateJsonElement(jsonArrayclone.get(i));
          };
        }
      }
      // validate the optional field `commits`
      if (jsonObj.get("commits") != null && !jsonObj.get("commits").isJsonNull()) {
        Link.validateJsonElement(jsonObj.get("commits"));
      }
      // validate the optional field `downloads`
      if (jsonObj.get("downloads") != null && !jsonObj.get("downloads").isJsonNull()) {
        Link.validateJsonElement(jsonObj.get("downloads"));
      }
      // validate the optional field `forks`
      if (jsonObj.get("forks") != null && !jsonObj.get("forks").isJsonNull()) {
        Link.validateJsonElement(jsonObj.get("forks"));
      }
      // validate the optional field `hooks`
      if (jsonObj.get("hooks") != null && !jsonObj.get("hooks").isJsonNull()) {
        Link.validateJsonElement(jsonObj.get("hooks"));
      }
      // validate the optional field `html`
      if (jsonObj.get("html") != null && !jsonObj.get("html").isJsonNull()) {
        Link.validateJsonElement(jsonObj.get("html"));
      }
      // validate the optional field `pullrequests`
      if (jsonObj.get("pullrequests") != null && !jsonObj.get("pullrequests").isJsonNull()) {
        Link.validateJsonElement(jsonObj.get("pullrequests"));
      }
      // validate the optional field `self`
      if (jsonObj.get("self") != null && !jsonObj.get("self").isJsonNull()) {
        Link.validateJsonElement(jsonObj.get("self"));
      }
      // validate the optional field `watchers`
      if (jsonObj.get("watchers") != null && !jsonObj.get("watchers").isJsonNull()) {
        Link.validateJsonElement(jsonObj.get("watchers"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RepositoryLinks.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RepositoryLinks' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RepositoryLinks> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RepositoryLinks.class));

       return (TypeAdapter<T>) new TypeAdapter<RepositoryLinks>() {
           @Override
           public void write(JsonWriter out, RepositoryLinks value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RepositoryLinks read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RepositoryLinks given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RepositoryLinks
   * @throws IOException if the JSON string is invalid with respect to RepositoryLinks
   */
  public static RepositoryLinks fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RepositoryLinks.class);
  }

  /**
   * Convert an instance of RepositoryLinks to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

