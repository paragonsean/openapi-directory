/*
 * Bitbucket API
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@bitbucket.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Link;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * IssueLinks
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:00:39.758646-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class IssueLinks {
  public static final String SERIALIZED_NAME_ATTACHMENTS = "attachments";
  @SerializedName(SERIALIZED_NAME_ATTACHMENTS)
  private Link attachments;

  public static final String SERIALIZED_NAME_COMMENTS = "comments";
  @SerializedName(SERIALIZED_NAME_COMMENTS)
  private Link comments;

  public static final String SERIALIZED_NAME_HTML = "html";
  @SerializedName(SERIALIZED_NAME_HTML)
  private Link html;

  public static final String SERIALIZED_NAME_SELF = "self";
  @SerializedName(SERIALIZED_NAME_SELF)
  private Link self;

  public static final String SERIALIZED_NAME_VOTE = "vote";
  @SerializedName(SERIALIZED_NAME_VOTE)
  private Link vote;

  public static final String SERIALIZED_NAME_WATCH = "watch";
  @SerializedName(SERIALIZED_NAME_WATCH)
  private Link watch;

  public IssueLinks() {
  }

  public IssueLinks attachments(Link attachments) {
    this.attachments = attachments;
    return this;
  }

  /**
   * Get attachments
   * @return attachments
   */
  @javax.annotation.Nullable
  public Link getAttachments() {
    return attachments;
  }

  public void setAttachments(Link attachments) {
    this.attachments = attachments;
  }


  public IssueLinks comments(Link comments) {
    this.comments = comments;
    return this;
  }

  /**
   * Get comments
   * @return comments
   */
  @javax.annotation.Nullable
  public Link getComments() {
    return comments;
  }

  public void setComments(Link comments) {
    this.comments = comments;
  }


  public IssueLinks html(Link html) {
    this.html = html;
    return this;
  }

  /**
   * Get html
   * @return html
   */
  @javax.annotation.Nullable
  public Link getHtml() {
    return html;
  }

  public void setHtml(Link html) {
    this.html = html;
  }


  public IssueLinks self(Link self) {
    this.self = self;
    return this;
  }

  /**
   * Get self
   * @return self
   */
  @javax.annotation.Nullable
  public Link getSelf() {
    return self;
  }

  public void setSelf(Link self) {
    this.self = self;
  }


  public IssueLinks vote(Link vote) {
    this.vote = vote;
    return this;
  }

  /**
   * Get vote
   * @return vote
   */
  @javax.annotation.Nullable
  public Link getVote() {
    return vote;
  }

  public void setVote(Link vote) {
    this.vote = vote;
  }


  public IssueLinks watch(Link watch) {
    this.watch = watch;
    return this;
  }

  /**
   * Get watch
   * @return watch
   */
  @javax.annotation.Nullable
  public Link getWatch() {
    return watch;
  }

  public void setWatch(Link watch) {
    this.watch = watch;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IssueLinks issueLinks = (IssueLinks) o;
    return Objects.equals(this.attachments, issueLinks.attachments) &&
        Objects.equals(this.comments, issueLinks.comments) &&
        Objects.equals(this.html, issueLinks.html) &&
        Objects.equals(this.self, issueLinks.self) &&
        Objects.equals(this.vote, issueLinks.vote) &&
        Objects.equals(this.watch, issueLinks.watch);
  }

  @Override
  public int hashCode() {
    return Objects.hash(attachments, comments, html, self, vote, watch);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IssueLinks {\n");
    sb.append("    attachments: ").append(toIndentedString(attachments)).append("\n");
    sb.append("    comments: ").append(toIndentedString(comments)).append("\n");
    sb.append("    html: ").append(toIndentedString(html)).append("\n");
    sb.append("    self: ").append(toIndentedString(self)).append("\n");
    sb.append("    vote: ").append(toIndentedString(vote)).append("\n");
    sb.append("    watch: ").append(toIndentedString(watch)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("attachments");
    openapiFields.add("comments");
    openapiFields.add("html");
    openapiFields.add("self");
    openapiFields.add("vote");
    openapiFields.add("watch");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IssueLinks
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IssueLinks.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IssueLinks is not found in the empty JSON string", IssueLinks.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IssueLinks.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IssueLinks` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `attachments`
      if (jsonObj.get("attachments") != null && !jsonObj.get("attachments").isJsonNull()) {
        Link.validateJsonElement(jsonObj.get("attachments"));
      }
      // validate the optional field `comments`
      if (jsonObj.get("comments") != null && !jsonObj.get("comments").isJsonNull()) {
        Link.validateJsonElement(jsonObj.get("comments"));
      }
      // validate the optional field `html`
      if (jsonObj.get("html") != null && !jsonObj.get("html").isJsonNull()) {
        Link.validateJsonElement(jsonObj.get("html"));
      }
      // validate the optional field `self`
      if (jsonObj.get("self") != null && !jsonObj.get("self").isJsonNull()) {
        Link.validateJsonElement(jsonObj.get("self"));
      }
      // validate the optional field `vote`
      if (jsonObj.get("vote") != null && !jsonObj.get("vote").isJsonNull()) {
        Link.validateJsonElement(jsonObj.get("vote"));
      }
      // validate the optional field `watch`
      if (jsonObj.get("watch") != null && !jsonObj.get("watch").isJsonNull()) {
        Link.validateJsonElement(jsonObj.get("watch"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IssueLinks.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IssueLinks' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IssueLinks> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IssueLinks.class));

       return (TypeAdapter<T>) new TypeAdapter<IssueLinks>() {
           @Override
           public void write(JsonWriter out, IssueLinks value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IssueLinks read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IssueLinks given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IssueLinks
   * @throws IOException if the JSON string is invalid with respect to IssueLinks
   */
  public static IssueLinks fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IssueLinks.class);
  }

  /**
   * Convert an instance of IssueLinks to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

