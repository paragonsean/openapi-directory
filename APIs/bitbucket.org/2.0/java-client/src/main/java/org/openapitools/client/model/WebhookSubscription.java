/*
 * Bitbucket API
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@bitbucket.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.net.URI;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.LinkedHashSet;
import java.util.Map;
import java.util.Set;
import org.openapitools.client.model.ModelObject;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * WebhookSubscription
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:00:39.758646-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class WebhookSubscription extends ModelObject {
  public static final String SERIALIZED_NAME_ACTIVE = "active";
  @SerializedName(SERIALIZED_NAME_ACTIVE)
  private Boolean active;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  /**
   * Gets or Sets events
   */
  @JsonAdapter(EventsEnum.Adapter.class)
  public enum EventsEnum {
    PULLREQUEST_CHANGES_REQUEST_REMOVED("pullrequest:changes_request_removed"),
    
    ISSUE_COMMENT_CREATED("issue:comment_created"),
    
    REPO_PUSH("repo:push"),
    
    REPO_COMMIT_STATUS_UPDATED("repo:commit_status_updated"),
    
    REPO_IMPORTED("repo:imported"),
    
    PULLREQUEST_UNAPPROVED("pullrequest:unapproved"),
    
    REPO_UPDATED("repo:updated"),
    
    PULLREQUEST_REJECTED("pullrequest:rejected"),
    
    PULLREQUEST_FULFILLED("pullrequest:fulfilled"),
    
    PULLREQUEST_CREATED("pullrequest:created"),
    
    PULLREQUEST_APPROVED("pullrequest:approved"),
    
    REPO_TRANSFER("repo:transfer"),
    
    REPO_COMMIT_STATUS_CREATED("repo:commit_status_created"),
    
    REPO_FORK("repo:fork"),
    
    ISSUE_UPDATED("issue:updated"),
    
    PROJECT_UPDATED("project:updated"),
    
    REPO_CREATED("repo:created"),
    
    ISSUE_CREATED("issue:created"),
    
    REPO_COMMIT_COMMENT_CREATED("repo:commit_comment_created"),
    
    PULLREQUEST_UPDATED("pullrequest:updated"),
    
    REPO_DELETED("repo:deleted"),
    
    PULLREQUEST_COMMENT_UPDATED("pullrequest:comment_updated"),
    
    PULLREQUEST_CHANGES_REQUEST_CREATED("pullrequest:changes_request_created"),
    
    PULLREQUEST_COMMENT_DELETED("pullrequest:comment_deleted"),
    
    PULLREQUEST_COMMENT_CREATED("pullrequest:comment_created");

    private String value;

    EventsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EventsEnum fromValue(String value) {
      for (EventsEnum b : EventsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EventsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EventsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EventsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EventsEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      EventsEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_EVENTS = "events";
  @SerializedName(SERIALIZED_NAME_EVENTS)
  private Set<EventsEnum> events = new LinkedHashSet<>();

  public static final String SERIALIZED_NAME_SUBJECT = "subject";
  @SerializedName(SERIALIZED_NAME_SUBJECT)
  private Object subject;

  /**
   * The type of entity. Set to either &#x60;repository&#x60; or &#x60;workspace&#x60; based on where the subscription is defined.
   */
  @JsonAdapter(SubjectTypeEnum.Adapter.class)
  public enum SubjectTypeEnum {
    REPOSITORY("repository"),
    
    WORKSPACE("workspace");

    private String value;

    SubjectTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SubjectTypeEnum fromValue(String value) {
      for (SubjectTypeEnum b : SubjectTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SubjectTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SubjectTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SubjectTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SubjectTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SubjectTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SUBJECT_TYPE = "subject_type";
  @SerializedName(SERIALIZED_NAME_SUBJECT_TYPE)
  private SubjectTypeEnum subjectType;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private URI url;

  public static final String SERIALIZED_NAME_UUID = "uuid";
  @SerializedName(SERIALIZED_NAME_UUID)
  private String uuid;

  public WebhookSubscription() {
    this.type = this.getClass().getSimpleName();
  }

  public WebhookSubscription active(Boolean active) {
    this.active = active;
    return this;
  }

  /**
   * Get active
   * @return active
   */
  @javax.annotation.Nullable
  public Boolean getActive() {
    return active;
  }

  public void setActive(Boolean active) {
    this.active = active;
  }


  public WebhookSubscription createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Get createdAt
   * @return createdAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public WebhookSubscription description(String description) {
    this.description = description;
    return this;
  }

  /**
   * A user-defined description of the webhook.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public WebhookSubscription events(Set<EventsEnum> events) {
    this.events = events;
    return this;
  }

  public WebhookSubscription addEventsItem(EventsEnum eventsItem) {
    if (this.events == null) {
      this.events = new LinkedHashSet<>();
    }
    this.events.add(eventsItem);
    return this;
  }

  /**
   * The events this webhook is subscribed to.
   * @return events
   */
  @javax.annotation.Nullable
  public Set<EventsEnum> getEvents() {
    return events;
  }

  public void setEvents(Set<EventsEnum> events) {
    this.events = events;
  }


  public WebhookSubscription subject(Object subject) {
    this.subject = subject;
    return this;
  }

  /**
   * Get subject
   * @return subject
   */
  @javax.annotation.Nullable
  public Object getSubject() {
    return subject;
  }

  public void setSubject(Object subject) {
    this.subject = subject;
  }


  public WebhookSubscription subjectType(SubjectTypeEnum subjectType) {
    this.subjectType = subjectType;
    return this;
  }

  /**
   * The type of entity. Set to either &#x60;repository&#x60; or &#x60;workspace&#x60; based on where the subscription is defined.
   * @return subjectType
   */
  @javax.annotation.Nullable
  public SubjectTypeEnum getSubjectType() {
    return subjectType;
  }

  public void setSubjectType(SubjectTypeEnum subjectType) {
    this.subjectType = subjectType;
  }


  public WebhookSubscription url(URI url) {
    this.url = url;
    return this;
  }

  /**
   * The URL events get delivered to.
   * @return url
   */
  @javax.annotation.Nullable
  public URI getUrl() {
    return url;
  }

  public void setUrl(URI url) {
    this.url = url;
  }


  public WebhookSubscription uuid(String uuid) {
    this.uuid = uuid;
    return this;
  }

  /**
   * The webhook&#39;s id
   * @return uuid
   */
  @javax.annotation.Nullable
  public String getUuid() {
    return uuid;
  }

  public void setUuid(String uuid) {
    this.uuid = uuid;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WebhookSubscription webhookSubscription = (WebhookSubscription) o;
    return Objects.equals(this.active, webhookSubscription.active) &&
        Objects.equals(this.createdAt, webhookSubscription.createdAt) &&
        Objects.equals(this.description, webhookSubscription.description) &&
        Objects.equals(this.events, webhookSubscription.events) &&
        Objects.equals(this.subject, webhookSubscription.subject) &&
        Objects.equals(this.subjectType, webhookSubscription.subjectType) &&
        Objects.equals(this.url, webhookSubscription.url) &&
        Objects.equals(this.uuid, webhookSubscription.uuid) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(active, createdAt, description, events, subject, subjectType, url, uuid, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WebhookSubscription {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    active: ").append(toIndentedString(active)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    events: ").append(toIndentedString(events)).append("\n");
    sb.append("    subject: ").append(toIndentedString(subject)).append("\n");
    sb.append("    subjectType: ").append(toIndentedString(subjectType)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    uuid: ").append(toIndentedString(uuid)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("type");
    openapiFields.add("active");
    openapiFields.add("created_at");
    openapiFields.add("description");
    openapiFields.add("events");
    openapiFields.add("subject");
    openapiFields.add("subject_type");
    openapiFields.add("url");
    openapiFields.add("uuid");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to WebhookSubscription
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!WebhookSubscription.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WebhookSubscription is not found in the empty JSON string", WebhookSubscription.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!WebhookSubscription.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WebhookSubscription` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : WebhookSubscription.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WebhookSubscription.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WebhookSubscription' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WebhookSubscription> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WebhookSubscription.class));

       return (TypeAdapter<T>) new TypeAdapter<WebhookSubscription>() {
           @Override
           public void write(JsonWriter out, WebhookSubscription value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WebhookSubscription read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of WebhookSubscription given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of WebhookSubscription
   * @throws IOException if the JSON string is invalid with respect to WebhookSubscription
   */
  public static WebhookSubscription fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WebhookSubscription.class);
  }

  /**
   * Convert an instance of WebhookSubscription to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

