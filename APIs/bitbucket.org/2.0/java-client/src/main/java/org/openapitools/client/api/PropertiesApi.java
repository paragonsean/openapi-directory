/*
 * Bitbucket API
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@bitbucket.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ApplicationProperty;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PropertiesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PropertiesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PropertiesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for deleteCommitHostedPropertyValue
     * @param workspace The repository container; either the workspace slug or the UUID in curly braces. (required)
     * @param repoSlug The repository. (required)
     * @param commit The commit. (required)
     * @param appKey The key of the Connect app. (required)
     * @param propertyName The name of the property. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> An empty response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCommitHostedPropertyValueCall(String workspace, String repoSlug, String commit, String appKey, String propertyName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repositories/{workspace}/{repo_slug}/commit/{commit}/properties/{app_key}/{property_name}"
            .replace("{" + "workspace" + "}", localVarApiClient.escapeString(workspace.toString()))
            .replace("{" + "repo_slug" + "}", localVarApiClient.escapeString(repoSlug.toString()))
            .replace("{" + "commit" + "}", localVarApiClient.escapeString(commit.toString()))
            .replace("{" + "app_key" + "}", localVarApiClient.escapeString(appKey.toString()))
            .replace("{" + "property_name" + "}", localVarApiClient.escapeString(propertyName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteCommitHostedPropertyValueValidateBeforeCall(String workspace, String repoSlug, String commit, String appKey, String propertyName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspace' is set
        if (workspace == null) {
            throw new ApiException("Missing the required parameter 'workspace' when calling deleteCommitHostedPropertyValue(Async)");
        }

        // verify the required parameter 'repoSlug' is set
        if (repoSlug == null) {
            throw new ApiException("Missing the required parameter 'repoSlug' when calling deleteCommitHostedPropertyValue(Async)");
        }

        // verify the required parameter 'commit' is set
        if (commit == null) {
            throw new ApiException("Missing the required parameter 'commit' when calling deleteCommitHostedPropertyValue(Async)");
        }

        // verify the required parameter 'appKey' is set
        if (appKey == null) {
            throw new ApiException("Missing the required parameter 'appKey' when calling deleteCommitHostedPropertyValue(Async)");
        }

        // verify the required parameter 'propertyName' is set
        if (propertyName == null) {
            throw new ApiException("Missing the required parameter 'propertyName' when calling deleteCommitHostedPropertyValue(Async)");
        }

        return deleteCommitHostedPropertyValueCall(workspace, repoSlug, commit, appKey, propertyName, _callback);

    }

    /**
     * Delete a commit application property
     * Delete an [application property](/cloud/bitbucket/application-properties/) value stored against a commit.
     * @param workspace The repository container; either the workspace slug or the UUID in curly braces. (required)
     * @param repoSlug The repository. (required)
     * @param commit The commit. (required)
     * @param appKey The key of the Connect app. (required)
     * @param propertyName The name of the property. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> An empty response. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteCommitHostedPropertyValue(String workspace, String repoSlug, String commit, String appKey, String propertyName) throws ApiException {
        deleteCommitHostedPropertyValueWithHttpInfo(workspace, repoSlug, commit, appKey, propertyName);
    }

    /**
     * Delete a commit application property
     * Delete an [application property](/cloud/bitbucket/application-properties/) value stored against a commit.
     * @param workspace The repository container; either the workspace slug or the UUID in curly braces. (required)
     * @param repoSlug The repository. (required)
     * @param commit The commit. (required)
     * @param appKey The key of the Connect app. (required)
     * @param propertyName The name of the property. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> An empty response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteCommitHostedPropertyValueWithHttpInfo(String workspace, String repoSlug, String commit, String appKey, String propertyName) throws ApiException {
        okhttp3.Call localVarCall = deleteCommitHostedPropertyValueValidateBeforeCall(workspace, repoSlug, commit, appKey, propertyName, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a commit application property (asynchronously)
     * Delete an [application property](/cloud/bitbucket/application-properties/) value stored against a commit.
     * @param workspace The repository container; either the workspace slug or the UUID in curly braces. (required)
     * @param repoSlug The repository. (required)
     * @param commit The commit. (required)
     * @param appKey The key of the Connect app. (required)
     * @param propertyName The name of the property. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> An empty response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCommitHostedPropertyValueAsync(String workspace, String repoSlug, String commit, String appKey, String propertyName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteCommitHostedPropertyValueValidateBeforeCall(workspace, repoSlug, commit, appKey, propertyName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deletePullRequestHostedPropertyValue
     * @param workspace The repository container; either the workspace slug or the UUID in curly braces. (required)
     * @param repoSlug The repository. (required)
     * @param pullrequestId The pull request ID. (required)
     * @param appKey The key of the Connect app. (required)
     * @param propertyName The name of the property. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> An empty response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletePullRequestHostedPropertyValueCall(String workspace, String repoSlug, String pullrequestId, String appKey, String propertyName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repositories/{workspace}/{repo_slug}/pullrequests/{pullrequest_id}/properties/{app_key}/{property_name}"
            .replace("{" + "workspace" + "}", localVarApiClient.escapeString(workspace.toString()))
            .replace("{" + "repo_slug" + "}", localVarApiClient.escapeString(repoSlug.toString()))
            .replace("{" + "pullrequest_id" + "}", localVarApiClient.escapeString(pullrequestId.toString()))
            .replace("{" + "app_key" + "}", localVarApiClient.escapeString(appKey.toString()))
            .replace("{" + "property_name" + "}", localVarApiClient.escapeString(propertyName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deletePullRequestHostedPropertyValueValidateBeforeCall(String workspace, String repoSlug, String pullrequestId, String appKey, String propertyName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspace' is set
        if (workspace == null) {
            throw new ApiException("Missing the required parameter 'workspace' when calling deletePullRequestHostedPropertyValue(Async)");
        }

        // verify the required parameter 'repoSlug' is set
        if (repoSlug == null) {
            throw new ApiException("Missing the required parameter 'repoSlug' when calling deletePullRequestHostedPropertyValue(Async)");
        }

        // verify the required parameter 'pullrequestId' is set
        if (pullrequestId == null) {
            throw new ApiException("Missing the required parameter 'pullrequestId' when calling deletePullRequestHostedPropertyValue(Async)");
        }

        // verify the required parameter 'appKey' is set
        if (appKey == null) {
            throw new ApiException("Missing the required parameter 'appKey' when calling deletePullRequestHostedPropertyValue(Async)");
        }

        // verify the required parameter 'propertyName' is set
        if (propertyName == null) {
            throw new ApiException("Missing the required parameter 'propertyName' when calling deletePullRequestHostedPropertyValue(Async)");
        }

        return deletePullRequestHostedPropertyValueCall(workspace, repoSlug, pullrequestId, appKey, propertyName, _callback);

    }

    /**
     * Delete a pull request application property
     * Delete an [application property](/cloud/bitbucket/application-properties/) value stored against a pull request.
     * @param workspace The repository container; either the workspace slug or the UUID in curly braces. (required)
     * @param repoSlug The repository. (required)
     * @param pullrequestId The pull request ID. (required)
     * @param appKey The key of the Connect app. (required)
     * @param propertyName The name of the property. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> An empty response. </td><td>  -  </td></tr>
     </table>
     */
    public void deletePullRequestHostedPropertyValue(String workspace, String repoSlug, String pullrequestId, String appKey, String propertyName) throws ApiException {
        deletePullRequestHostedPropertyValueWithHttpInfo(workspace, repoSlug, pullrequestId, appKey, propertyName);
    }

    /**
     * Delete a pull request application property
     * Delete an [application property](/cloud/bitbucket/application-properties/) value stored against a pull request.
     * @param workspace The repository container; either the workspace slug or the UUID in curly braces. (required)
     * @param repoSlug The repository. (required)
     * @param pullrequestId The pull request ID. (required)
     * @param appKey The key of the Connect app. (required)
     * @param propertyName The name of the property. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> An empty response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deletePullRequestHostedPropertyValueWithHttpInfo(String workspace, String repoSlug, String pullrequestId, String appKey, String propertyName) throws ApiException {
        okhttp3.Call localVarCall = deletePullRequestHostedPropertyValueValidateBeforeCall(workspace, repoSlug, pullrequestId, appKey, propertyName, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a pull request application property (asynchronously)
     * Delete an [application property](/cloud/bitbucket/application-properties/) value stored against a pull request.
     * @param workspace The repository container; either the workspace slug or the UUID in curly braces. (required)
     * @param repoSlug The repository. (required)
     * @param pullrequestId The pull request ID. (required)
     * @param appKey The key of the Connect app. (required)
     * @param propertyName The name of the property. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> An empty response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletePullRequestHostedPropertyValueAsync(String workspace, String repoSlug, String pullrequestId, String appKey, String propertyName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deletePullRequestHostedPropertyValueValidateBeforeCall(workspace, repoSlug, pullrequestId, appKey, propertyName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteRepositoryHostedPropertyValue
     * @param workspace The repository container; either the workspace slug or the UUID in curly braces. (required)
     * @param repoSlug The repository. (required)
     * @param appKey The key of the Connect app. (required)
     * @param propertyName The name of the property. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> An empty response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteRepositoryHostedPropertyValueCall(String workspace, String repoSlug, String appKey, String propertyName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repositories/{workspace}/{repo_slug}/properties/{app_key}/{property_name}"
            .replace("{" + "workspace" + "}", localVarApiClient.escapeString(workspace.toString()))
            .replace("{" + "repo_slug" + "}", localVarApiClient.escapeString(repoSlug.toString()))
            .replace("{" + "app_key" + "}", localVarApiClient.escapeString(appKey.toString()))
            .replace("{" + "property_name" + "}", localVarApiClient.escapeString(propertyName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteRepositoryHostedPropertyValueValidateBeforeCall(String workspace, String repoSlug, String appKey, String propertyName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspace' is set
        if (workspace == null) {
            throw new ApiException("Missing the required parameter 'workspace' when calling deleteRepositoryHostedPropertyValue(Async)");
        }

        // verify the required parameter 'repoSlug' is set
        if (repoSlug == null) {
            throw new ApiException("Missing the required parameter 'repoSlug' when calling deleteRepositoryHostedPropertyValue(Async)");
        }

        // verify the required parameter 'appKey' is set
        if (appKey == null) {
            throw new ApiException("Missing the required parameter 'appKey' when calling deleteRepositoryHostedPropertyValue(Async)");
        }

        // verify the required parameter 'propertyName' is set
        if (propertyName == null) {
            throw new ApiException("Missing the required parameter 'propertyName' when calling deleteRepositoryHostedPropertyValue(Async)");
        }

        return deleteRepositoryHostedPropertyValueCall(workspace, repoSlug, appKey, propertyName, _callback);

    }

    /**
     * Delete a repository application property
     * Delete an [application property](/cloud/bitbucket/application-properties/) value stored against a repository.
     * @param workspace The repository container; either the workspace slug or the UUID in curly braces. (required)
     * @param repoSlug The repository. (required)
     * @param appKey The key of the Connect app. (required)
     * @param propertyName The name of the property. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> An empty response. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteRepositoryHostedPropertyValue(String workspace, String repoSlug, String appKey, String propertyName) throws ApiException {
        deleteRepositoryHostedPropertyValueWithHttpInfo(workspace, repoSlug, appKey, propertyName);
    }

    /**
     * Delete a repository application property
     * Delete an [application property](/cloud/bitbucket/application-properties/) value stored against a repository.
     * @param workspace The repository container; either the workspace slug or the UUID in curly braces. (required)
     * @param repoSlug The repository. (required)
     * @param appKey The key of the Connect app. (required)
     * @param propertyName The name of the property. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> An empty response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteRepositoryHostedPropertyValueWithHttpInfo(String workspace, String repoSlug, String appKey, String propertyName) throws ApiException {
        okhttp3.Call localVarCall = deleteRepositoryHostedPropertyValueValidateBeforeCall(workspace, repoSlug, appKey, propertyName, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a repository application property (asynchronously)
     * Delete an [application property](/cloud/bitbucket/application-properties/) value stored against a repository.
     * @param workspace The repository container; either the workspace slug or the UUID in curly braces. (required)
     * @param repoSlug The repository. (required)
     * @param appKey The key of the Connect app. (required)
     * @param propertyName The name of the property. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> An empty response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteRepositoryHostedPropertyValueAsync(String workspace, String repoSlug, String appKey, String propertyName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteRepositoryHostedPropertyValueValidateBeforeCall(workspace, repoSlug, appKey, propertyName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteUserHostedPropertyValue
     * @param selectedUser Either the UUID of the account surrounded by curly-braces, for example &#x60;{account UUID}&#x60;, OR an Atlassian Account ID. (required)
     * @param appKey The key of the Connect app. (required)
     * @param propertyName The name of the property. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> An empty response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteUserHostedPropertyValueCall(String selectedUser, String appKey, String propertyName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{selected_user}/properties/{app_key}/{property_name}"
            .replace("{" + "selected_user" + "}", localVarApiClient.escapeString(selectedUser.toString()))
            .replace("{" + "app_key" + "}", localVarApiClient.escapeString(appKey.toString()))
            .replace("{" + "property_name" + "}", localVarApiClient.escapeString(propertyName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteUserHostedPropertyValueValidateBeforeCall(String selectedUser, String appKey, String propertyName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'selectedUser' is set
        if (selectedUser == null) {
            throw new ApiException("Missing the required parameter 'selectedUser' when calling deleteUserHostedPropertyValue(Async)");
        }

        // verify the required parameter 'appKey' is set
        if (appKey == null) {
            throw new ApiException("Missing the required parameter 'appKey' when calling deleteUserHostedPropertyValue(Async)");
        }

        // verify the required parameter 'propertyName' is set
        if (propertyName == null) {
            throw new ApiException("Missing the required parameter 'propertyName' when calling deleteUserHostedPropertyValue(Async)");
        }

        return deleteUserHostedPropertyValueCall(selectedUser, appKey, propertyName, _callback);

    }

    /**
     * Delete a user application property
     * Delete an [application property](/cloud/bitbucket/application-properties/) value stored against a user.
     * @param selectedUser Either the UUID of the account surrounded by curly-braces, for example &#x60;{account UUID}&#x60;, OR an Atlassian Account ID. (required)
     * @param appKey The key of the Connect app. (required)
     * @param propertyName The name of the property. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> An empty response. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteUserHostedPropertyValue(String selectedUser, String appKey, String propertyName) throws ApiException {
        deleteUserHostedPropertyValueWithHttpInfo(selectedUser, appKey, propertyName);
    }

    /**
     * Delete a user application property
     * Delete an [application property](/cloud/bitbucket/application-properties/) value stored against a user.
     * @param selectedUser Either the UUID of the account surrounded by curly-braces, for example &#x60;{account UUID}&#x60;, OR an Atlassian Account ID. (required)
     * @param appKey The key of the Connect app. (required)
     * @param propertyName The name of the property. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> An empty response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteUserHostedPropertyValueWithHttpInfo(String selectedUser, String appKey, String propertyName) throws ApiException {
        okhttp3.Call localVarCall = deleteUserHostedPropertyValueValidateBeforeCall(selectedUser, appKey, propertyName, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a user application property (asynchronously)
     * Delete an [application property](/cloud/bitbucket/application-properties/) value stored against a user.
     * @param selectedUser Either the UUID of the account surrounded by curly-braces, for example &#x60;{account UUID}&#x60;, OR an Atlassian Account ID. (required)
     * @param appKey The key of the Connect app. (required)
     * @param propertyName The name of the property. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> An empty response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteUserHostedPropertyValueAsync(String selectedUser, String appKey, String propertyName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteUserHostedPropertyValueValidateBeforeCall(selectedUser, appKey, propertyName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCommitHostedPropertyValue
     * @param workspace The repository container; either the workspace slug or the UUID in curly braces. (required)
     * @param repoSlug The repository. (required)
     * @param commit The commit. (required)
     * @param appKey The key of the Connect app. (required)
     * @param propertyName The name of the property. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The value of the property. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCommitHostedPropertyValueCall(String workspace, String repoSlug, String commit, String appKey, String propertyName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repositories/{workspace}/{repo_slug}/commit/{commit}/properties/{app_key}/{property_name}"
            .replace("{" + "workspace" + "}", localVarApiClient.escapeString(workspace.toString()))
            .replace("{" + "repo_slug" + "}", localVarApiClient.escapeString(repoSlug.toString()))
            .replace("{" + "commit" + "}", localVarApiClient.escapeString(commit.toString()))
            .replace("{" + "app_key" + "}", localVarApiClient.escapeString(appKey.toString()))
            .replace("{" + "property_name" + "}", localVarApiClient.escapeString(propertyName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCommitHostedPropertyValueValidateBeforeCall(String workspace, String repoSlug, String commit, String appKey, String propertyName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspace' is set
        if (workspace == null) {
            throw new ApiException("Missing the required parameter 'workspace' when calling getCommitHostedPropertyValue(Async)");
        }

        // verify the required parameter 'repoSlug' is set
        if (repoSlug == null) {
            throw new ApiException("Missing the required parameter 'repoSlug' when calling getCommitHostedPropertyValue(Async)");
        }

        // verify the required parameter 'commit' is set
        if (commit == null) {
            throw new ApiException("Missing the required parameter 'commit' when calling getCommitHostedPropertyValue(Async)");
        }

        // verify the required parameter 'appKey' is set
        if (appKey == null) {
            throw new ApiException("Missing the required parameter 'appKey' when calling getCommitHostedPropertyValue(Async)");
        }

        // verify the required parameter 'propertyName' is set
        if (propertyName == null) {
            throw new ApiException("Missing the required parameter 'propertyName' when calling getCommitHostedPropertyValue(Async)");
        }

        return getCommitHostedPropertyValueCall(workspace, repoSlug, commit, appKey, propertyName, _callback);

    }

    /**
     * Get a commit application property
     * Retrieve an [application property](/cloud/bitbucket/application-properties/) value stored against a commit.
     * @param workspace The repository container; either the workspace slug or the UUID in curly braces. (required)
     * @param repoSlug The repository. (required)
     * @param commit The commit. (required)
     * @param appKey The key of the Connect app. (required)
     * @param propertyName The name of the property. (required)
     * @return ApplicationProperty
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The value of the property. </td><td>  -  </td></tr>
     </table>
     */
    public ApplicationProperty getCommitHostedPropertyValue(String workspace, String repoSlug, String commit, String appKey, String propertyName) throws ApiException {
        ApiResponse<ApplicationProperty> localVarResp = getCommitHostedPropertyValueWithHttpInfo(workspace, repoSlug, commit, appKey, propertyName);
        return localVarResp.getData();
    }

    /**
     * Get a commit application property
     * Retrieve an [application property](/cloud/bitbucket/application-properties/) value stored against a commit.
     * @param workspace The repository container; either the workspace slug or the UUID in curly braces. (required)
     * @param repoSlug The repository. (required)
     * @param commit The commit. (required)
     * @param appKey The key of the Connect app. (required)
     * @param propertyName The name of the property. (required)
     * @return ApiResponse&lt;ApplicationProperty&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The value of the property. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApplicationProperty> getCommitHostedPropertyValueWithHttpInfo(String workspace, String repoSlug, String commit, String appKey, String propertyName) throws ApiException {
        okhttp3.Call localVarCall = getCommitHostedPropertyValueValidateBeforeCall(workspace, repoSlug, commit, appKey, propertyName, null);
        Type localVarReturnType = new TypeToken<ApplicationProperty>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a commit application property (asynchronously)
     * Retrieve an [application property](/cloud/bitbucket/application-properties/) value stored against a commit.
     * @param workspace The repository container; either the workspace slug or the UUID in curly braces. (required)
     * @param repoSlug The repository. (required)
     * @param commit The commit. (required)
     * @param appKey The key of the Connect app. (required)
     * @param propertyName The name of the property. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The value of the property. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCommitHostedPropertyValueAsync(String workspace, String repoSlug, String commit, String appKey, String propertyName, final ApiCallback<ApplicationProperty> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCommitHostedPropertyValueValidateBeforeCall(workspace, repoSlug, commit, appKey, propertyName, _callback);
        Type localVarReturnType = new TypeToken<ApplicationProperty>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPullRequestHostedPropertyValue
     * @param workspace The repository container; either the workspace slug or the UUID in curly braces. (required)
     * @param repoSlug The repository. (required)
     * @param pullrequestId The pull request ID. (required)
     * @param appKey The key of the Connect app. (required)
     * @param propertyName The name of the property. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The value of the property. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPullRequestHostedPropertyValueCall(String workspace, String repoSlug, String pullrequestId, String appKey, String propertyName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repositories/{workspace}/{repo_slug}/pullrequests/{pullrequest_id}/properties/{app_key}/{property_name}"
            .replace("{" + "workspace" + "}", localVarApiClient.escapeString(workspace.toString()))
            .replace("{" + "repo_slug" + "}", localVarApiClient.escapeString(repoSlug.toString()))
            .replace("{" + "pullrequest_id" + "}", localVarApiClient.escapeString(pullrequestId.toString()))
            .replace("{" + "app_key" + "}", localVarApiClient.escapeString(appKey.toString()))
            .replace("{" + "property_name" + "}", localVarApiClient.escapeString(propertyName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPullRequestHostedPropertyValueValidateBeforeCall(String workspace, String repoSlug, String pullrequestId, String appKey, String propertyName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspace' is set
        if (workspace == null) {
            throw new ApiException("Missing the required parameter 'workspace' when calling getPullRequestHostedPropertyValue(Async)");
        }

        // verify the required parameter 'repoSlug' is set
        if (repoSlug == null) {
            throw new ApiException("Missing the required parameter 'repoSlug' when calling getPullRequestHostedPropertyValue(Async)");
        }

        // verify the required parameter 'pullrequestId' is set
        if (pullrequestId == null) {
            throw new ApiException("Missing the required parameter 'pullrequestId' when calling getPullRequestHostedPropertyValue(Async)");
        }

        // verify the required parameter 'appKey' is set
        if (appKey == null) {
            throw new ApiException("Missing the required parameter 'appKey' when calling getPullRequestHostedPropertyValue(Async)");
        }

        // verify the required parameter 'propertyName' is set
        if (propertyName == null) {
            throw new ApiException("Missing the required parameter 'propertyName' when calling getPullRequestHostedPropertyValue(Async)");
        }

        return getPullRequestHostedPropertyValueCall(workspace, repoSlug, pullrequestId, appKey, propertyName, _callback);

    }

    /**
     * Get a pull request application property
     * Retrieve an [application property](/cloud/bitbucket/application-properties/) value stored against a pull request.
     * @param workspace The repository container; either the workspace slug or the UUID in curly braces. (required)
     * @param repoSlug The repository. (required)
     * @param pullrequestId The pull request ID. (required)
     * @param appKey The key of the Connect app. (required)
     * @param propertyName The name of the property. (required)
     * @return ApplicationProperty
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The value of the property. </td><td>  -  </td></tr>
     </table>
     */
    public ApplicationProperty getPullRequestHostedPropertyValue(String workspace, String repoSlug, String pullrequestId, String appKey, String propertyName) throws ApiException {
        ApiResponse<ApplicationProperty> localVarResp = getPullRequestHostedPropertyValueWithHttpInfo(workspace, repoSlug, pullrequestId, appKey, propertyName);
        return localVarResp.getData();
    }

    /**
     * Get a pull request application property
     * Retrieve an [application property](/cloud/bitbucket/application-properties/) value stored against a pull request.
     * @param workspace The repository container; either the workspace slug or the UUID in curly braces. (required)
     * @param repoSlug The repository. (required)
     * @param pullrequestId The pull request ID. (required)
     * @param appKey The key of the Connect app. (required)
     * @param propertyName The name of the property. (required)
     * @return ApiResponse&lt;ApplicationProperty&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The value of the property. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApplicationProperty> getPullRequestHostedPropertyValueWithHttpInfo(String workspace, String repoSlug, String pullrequestId, String appKey, String propertyName) throws ApiException {
        okhttp3.Call localVarCall = getPullRequestHostedPropertyValueValidateBeforeCall(workspace, repoSlug, pullrequestId, appKey, propertyName, null);
        Type localVarReturnType = new TypeToken<ApplicationProperty>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a pull request application property (asynchronously)
     * Retrieve an [application property](/cloud/bitbucket/application-properties/) value stored against a pull request.
     * @param workspace The repository container; either the workspace slug or the UUID in curly braces. (required)
     * @param repoSlug The repository. (required)
     * @param pullrequestId The pull request ID. (required)
     * @param appKey The key of the Connect app. (required)
     * @param propertyName The name of the property. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The value of the property. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPullRequestHostedPropertyValueAsync(String workspace, String repoSlug, String pullrequestId, String appKey, String propertyName, final ApiCallback<ApplicationProperty> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPullRequestHostedPropertyValueValidateBeforeCall(workspace, repoSlug, pullrequestId, appKey, propertyName, _callback);
        Type localVarReturnType = new TypeToken<ApplicationProperty>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRepositoryHostedPropertyValue
     * @param workspace The repository container; either the workspace slug or the UUID in curly braces. (required)
     * @param repoSlug The repository. (required)
     * @param appKey The key of the Connect app. (required)
     * @param propertyName The name of the property. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The value of the property. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRepositoryHostedPropertyValueCall(String workspace, String repoSlug, String appKey, String propertyName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repositories/{workspace}/{repo_slug}/properties/{app_key}/{property_name}"
            .replace("{" + "workspace" + "}", localVarApiClient.escapeString(workspace.toString()))
            .replace("{" + "repo_slug" + "}", localVarApiClient.escapeString(repoSlug.toString()))
            .replace("{" + "app_key" + "}", localVarApiClient.escapeString(appKey.toString()))
            .replace("{" + "property_name" + "}", localVarApiClient.escapeString(propertyName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRepositoryHostedPropertyValueValidateBeforeCall(String workspace, String repoSlug, String appKey, String propertyName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspace' is set
        if (workspace == null) {
            throw new ApiException("Missing the required parameter 'workspace' when calling getRepositoryHostedPropertyValue(Async)");
        }

        // verify the required parameter 'repoSlug' is set
        if (repoSlug == null) {
            throw new ApiException("Missing the required parameter 'repoSlug' when calling getRepositoryHostedPropertyValue(Async)");
        }

        // verify the required parameter 'appKey' is set
        if (appKey == null) {
            throw new ApiException("Missing the required parameter 'appKey' when calling getRepositoryHostedPropertyValue(Async)");
        }

        // verify the required parameter 'propertyName' is set
        if (propertyName == null) {
            throw new ApiException("Missing the required parameter 'propertyName' when calling getRepositoryHostedPropertyValue(Async)");
        }

        return getRepositoryHostedPropertyValueCall(workspace, repoSlug, appKey, propertyName, _callback);

    }

    /**
     * Get a repository application property
     * Retrieve an [application property](/cloud/bitbucket/application-properties/) value stored against a repository.
     * @param workspace The repository container; either the workspace slug or the UUID in curly braces. (required)
     * @param repoSlug The repository. (required)
     * @param appKey The key of the Connect app. (required)
     * @param propertyName The name of the property. (required)
     * @return ApplicationProperty
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The value of the property. </td><td>  -  </td></tr>
     </table>
     */
    public ApplicationProperty getRepositoryHostedPropertyValue(String workspace, String repoSlug, String appKey, String propertyName) throws ApiException {
        ApiResponse<ApplicationProperty> localVarResp = getRepositoryHostedPropertyValueWithHttpInfo(workspace, repoSlug, appKey, propertyName);
        return localVarResp.getData();
    }

    /**
     * Get a repository application property
     * Retrieve an [application property](/cloud/bitbucket/application-properties/) value stored against a repository.
     * @param workspace The repository container; either the workspace slug or the UUID in curly braces. (required)
     * @param repoSlug The repository. (required)
     * @param appKey The key of the Connect app. (required)
     * @param propertyName The name of the property. (required)
     * @return ApiResponse&lt;ApplicationProperty&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The value of the property. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApplicationProperty> getRepositoryHostedPropertyValueWithHttpInfo(String workspace, String repoSlug, String appKey, String propertyName) throws ApiException {
        okhttp3.Call localVarCall = getRepositoryHostedPropertyValueValidateBeforeCall(workspace, repoSlug, appKey, propertyName, null);
        Type localVarReturnType = new TypeToken<ApplicationProperty>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a repository application property (asynchronously)
     * Retrieve an [application property](/cloud/bitbucket/application-properties/) value stored against a repository.
     * @param workspace The repository container; either the workspace slug or the UUID in curly braces. (required)
     * @param repoSlug The repository. (required)
     * @param appKey The key of the Connect app. (required)
     * @param propertyName The name of the property. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The value of the property. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRepositoryHostedPropertyValueAsync(String workspace, String repoSlug, String appKey, String propertyName, final ApiCallback<ApplicationProperty> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRepositoryHostedPropertyValueValidateBeforeCall(workspace, repoSlug, appKey, propertyName, _callback);
        Type localVarReturnType = new TypeToken<ApplicationProperty>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for retrieveUserHostedPropertyValue
     * @param selectedUser Either the UUID of the account surrounded by curly-braces, for example &#x60;{account UUID}&#x60;, OR an Atlassian Account ID. (required)
     * @param appKey The key of the Connect app. (required)
     * @param propertyName The name of the property. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The value of the property. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveUserHostedPropertyValueCall(String selectedUser, String appKey, String propertyName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{selected_user}/properties/{app_key}/{property_name}"
            .replace("{" + "selected_user" + "}", localVarApiClient.escapeString(selectedUser.toString()))
            .replace("{" + "app_key" + "}", localVarApiClient.escapeString(appKey.toString()))
            .replace("{" + "property_name" + "}", localVarApiClient.escapeString(propertyName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call retrieveUserHostedPropertyValueValidateBeforeCall(String selectedUser, String appKey, String propertyName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'selectedUser' is set
        if (selectedUser == null) {
            throw new ApiException("Missing the required parameter 'selectedUser' when calling retrieveUserHostedPropertyValue(Async)");
        }

        // verify the required parameter 'appKey' is set
        if (appKey == null) {
            throw new ApiException("Missing the required parameter 'appKey' when calling retrieveUserHostedPropertyValue(Async)");
        }

        // verify the required parameter 'propertyName' is set
        if (propertyName == null) {
            throw new ApiException("Missing the required parameter 'propertyName' when calling retrieveUserHostedPropertyValue(Async)");
        }

        return retrieveUserHostedPropertyValueCall(selectedUser, appKey, propertyName, _callback);

    }

    /**
     * Get a user application property
     * Retrieve an [application property](/cloud/bitbucket/application-properties/) value stored against a user.
     * @param selectedUser Either the UUID of the account surrounded by curly-braces, for example &#x60;{account UUID}&#x60;, OR an Atlassian Account ID. (required)
     * @param appKey The key of the Connect app. (required)
     * @param propertyName The name of the property. (required)
     * @return ApplicationProperty
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The value of the property. </td><td>  -  </td></tr>
     </table>
     */
    public ApplicationProperty retrieveUserHostedPropertyValue(String selectedUser, String appKey, String propertyName) throws ApiException {
        ApiResponse<ApplicationProperty> localVarResp = retrieveUserHostedPropertyValueWithHttpInfo(selectedUser, appKey, propertyName);
        return localVarResp.getData();
    }

    /**
     * Get a user application property
     * Retrieve an [application property](/cloud/bitbucket/application-properties/) value stored against a user.
     * @param selectedUser Either the UUID of the account surrounded by curly-braces, for example &#x60;{account UUID}&#x60;, OR an Atlassian Account ID. (required)
     * @param appKey The key of the Connect app. (required)
     * @param propertyName The name of the property. (required)
     * @return ApiResponse&lt;ApplicationProperty&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The value of the property. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApplicationProperty> retrieveUserHostedPropertyValueWithHttpInfo(String selectedUser, String appKey, String propertyName) throws ApiException {
        okhttp3.Call localVarCall = retrieveUserHostedPropertyValueValidateBeforeCall(selectedUser, appKey, propertyName, null);
        Type localVarReturnType = new TypeToken<ApplicationProperty>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a user application property (asynchronously)
     * Retrieve an [application property](/cloud/bitbucket/application-properties/) value stored against a user.
     * @param selectedUser Either the UUID of the account surrounded by curly-braces, for example &#x60;{account UUID}&#x60;, OR an Atlassian Account ID. (required)
     * @param appKey The key of the Connect app. (required)
     * @param propertyName The name of the property. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The value of the property. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveUserHostedPropertyValueAsync(String selectedUser, String appKey, String propertyName, final ApiCallback<ApplicationProperty> _callback) throws ApiException {

        okhttp3.Call localVarCall = retrieveUserHostedPropertyValueValidateBeforeCall(selectedUser, appKey, propertyName, _callback);
        Type localVarReturnType = new TypeToken<ApplicationProperty>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateCommitHostedPropertyValue
     * @param workspace The repository container; either the workspace slug or the UUID in curly braces. (required)
     * @param repoSlug The repository. (required)
     * @param commit The commit. (required)
     * @param appKey The key of the Connect app. (required)
     * @param propertyName The name of the property. (required)
     * @param applicationProperty The application property to create or update. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> An empty response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCommitHostedPropertyValueCall(String workspace, String repoSlug, String commit, String appKey, String propertyName, ApplicationProperty applicationProperty, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = applicationProperty;

        // create path and map variables
        String localVarPath = "/repositories/{workspace}/{repo_slug}/commit/{commit}/properties/{app_key}/{property_name}"
            .replace("{" + "workspace" + "}", localVarApiClient.escapeString(workspace.toString()))
            .replace("{" + "repo_slug" + "}", localVarApiClient.escapeString(repoSlug.toString()))
            .replace("{" + "commit" + "}", localVarApiClient.escapeString(commit.toString()))
            .replace("{" + "app_key" + "}", localVarApiClient.escapeString(appKey.toString()))
            .replace("{" + "property_name" + "}", localVarApiClient.escapeString(propertyName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateCommitHostedPropertyValueValidateBeforeCall(String workspace, String repoSlug, String commit, String appKey, String propertyName, ApplicationProperty applicationProperty, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspace' is set
        if (workspace == null) {
            throw new ApiException("Missing the required parameter 'workspace' when calling updateCommitHostedPropertyValue(Async)");
        }

        // verify the required parameter 'repoSlug' is set
        if (repoSlug == null) {
            throw new ApiException("Missing the required parameter 'repoSlug' when calling updateCommitHostedPropertyValue(Async)");
        }

        // verify the required parameter 'commit' is set
        if (commit == null) {
            throw new ApiException("Missing the required parameter 'commit' when calling updateCommitHostedPropertyValue(Async)");
        }

        // verify the required parameter 'appKey' is set
        if (appKey == null) {
            throw new ApiException("Missing the required parameter 'appKey' when calling updateCommitHostedPropertyValue(Async)");
        }

        // verify the required parameter 'propertyName' is set
        if (propertyName == null) {
            throw new ApiException("Missing the required parameter 'propertyName' when calling updateCommitHostedPropertyValue(Async)");
        }

        // verify the required parameter 'applicationProperty' is set
        if (applicationProperty == null) {
            throw new ApiException("Missing the required parameter 'applicationProperty' when calling updateCommitHostedPropertyValue(Async)");
        }

        return updateCommitHostedPropertyValueCall(workspace, repoSlug, commit, appKey, propertyName, applicationProperty, _callback);

    }

    /**
     * Update a commit application property
     * Update an [application property](/cloud/bitbucket/application-properties/) value stored against a commit.
     * @param workspace The repository container; either the workspace slug or the UUID in curly braces. (required)
     * @param repoSlug The repository. (required)
     * @param commit The commit. (required)
     * @param appKey The key of the Connect app. (required)
     * @param propertyName The name of the property. (required)
     * @param applicationProperty The application property to create or update. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> An empty response. </td><td>  -  </td></tr>
     </table>
     */
    public void updateCommitHostedPropertyValue(String workspace, String repoSlug, String commit, String appKey, String propertyName, ApplicationProperty applicationProperty) throws ApiException {
        updateCommitHostedPropertyValueWithHttpInfo(workspace, repoSlug, commit, appKey, propertyName, applicationProperty);
    }

    /**
     * Update a commit application property
     * Update an [application property](/cloud/bitbucket/application-properties/) value stored against a commit.
     * @param workspace The repository container; either the workspace slug or the UUID in curly braces. (required)
     * @param repoSlug The repository. (required)
     * @param commit The commit. (required)
     * @param appKey The key of the Connect app. (required)
     * @param propertyName The name of the property. (required)
     * @param applicationProperty The application property to create or update. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> An empty response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateCommitHostedPropertyValueWithHttpInfo(String workspace, String repoSlug, String commit, String appKey, String propertyName, ApplicationProperty applicationProperty) throws ApiException {
        okhttp3.Call localVarCall = updateCommitHostedPropertyValueValidateBeforeCall(workspace, repoSlug, commit, appKey, propertyName, applicationProperty, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update a commit application property (asynchronously)
     * Update an [application property](/cloud/bitbucket/application-properties/) value stored against a commit.
     * @param workspace The repository container; either the workspace slug or the UUID in curly braces. (required)
     * @param repoSlug The repository. (required)
     * @param commit The commit. (required)
     * @param appKey The key of the Connect app. (required)
     * @param propertyName The name of the property. (required)
     * @param applicationProperty The application property to create or update. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> An empty response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCommitHostedPropertyValueAsync(String workspace, String repoSlug, String commit, String appKey, String propertyName, ApplicationProperty applicationProperty, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateCommitHostedPropertyValueValidateBeforeCall(workspace, repoSlug, commit, appKey, propertyName, applicationProperty, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updatePullRequestHostedPropertyValue
     * @param workspace The repository container; either the workspace slug or the UUID in curly braces. (required)
     * @param repoSlug The repository. (required)
     * @param pullrequestId The pull request ID. (required)
     * @param appKey The key of the Connect app. (required)
     * @param propertyName The name of the property. (required)
     * @param applicationProperty The application property to create or update. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> An empty response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updatePullRequestHostedPropertyValueCall(String workspace, String repoSlug, String pullrequestId, String appKey, String propertyName, ApplicationProperty applicationProperty, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = applicationProperty;

        // create path and map variables
        String localVarPath = "/repositories/{workspace}/{repo_slug}/pullrequests/{pullrequest_id}/properties/{app_key}/{property_name}"
            .replace("{" + "workspace" + "}", localVarApiClient.escapeString(workspace.toString()))
            .replace("{" + "repo_slug" + "}", localVarApiClient.escapeString(repoSlug.toString()))
            .replace("{" + "pullrequest_id" + "}", localVarApiClient.escapeString(pullrequestId.toString()))
            .replace("{" + "app_key" + "}", localVarApiClient.escapeString(appKey.toString()))
            .replace("{" + "property_name" + "}", localVarApiClient.escapeString(propertyName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updatePullRequestHostedPropertyValueValidateBeforeCall(String workspace, String repoSlug, String pullrequestId, String appKey, String propertyName, ApplicationProperty applicationProperty, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspace' is set
        if (workspace == null) {
            throw new ApiException("Missing the required parameter 'workspace' when calling updatePullRequestHostedPropertyValue(Async)");
        }

        // verify the required parameter 'repoSlug' is set
        if (repoSlug == null) {
            throw new ApiException("Missing the required parameter 'repoSlug' when calling updatePullRequestHostedPropertyValue(Async)");
        }

        // verify the required parameter 'pullrequestId' is set
        if (pullrequestId == null) {
            throw new ApiException("Missing the required parameter 'pullrequestId' when calling updatePullRequestHostedPropertyValue(Async)");
        }

        // verify the required parameter 'appKey' is set
        if (appKey == null) {
            throw new ApiException("Missing the required parameter 'appKey' when calling updatePullRequestHostedPropertyValue(Async)");
        }

        // verify the required parameter 'propertyName' is set
        if (propertyName == null) {
            throw new ApiException("Missing the required parameter 'propertyName' when calling updatePullRequestHostedPropertyValue(Async)");
        }

        // verify the required parameter 'applicationProperty' is set
        if (applicationProperty == null) {
            throw new ApiException("Missing the required parameter 'applicationProperty' when calling updatePullRequestHostedPropertyValue(Async)");
        }

        return updatePullRequestHostedPropertyValueCall(workspace, repoSlug, pullrequestId, appKey, propertyName, applicationProperty, _callback);

    }

    /**
     * Update a pull request application property
     * Update an [application property](/cloud/bitbucket/application-properties/) value stored against a pull request.
     * @param workspace The repository container; either the workspace slug or the UUID in curly braces. (required)
     * @param repoSlug The repository. (required)
     * @param pullrequestId The pull request ID. (required)
     * @param appKey The key of the Connect app. (required)
     * @param propertyName The name of the property. (required)
     * @param applicationProperty The application property to create or update. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> An empty response. </td><td>  -  </td></tr>
     </table>
     */
    public void updatePullRequestHostedPropertyValue(String workspace, String repoSlug, String pullrequestId, String appKey, String propertyName, ApplicationProperty applicationProperty) throws ApiException {
        updatePullRequestHostedPropertyValueWithHttpInfo(workspace, repoSlug, pullrequestId, appKey, propertyName, applicationProperty);
    }

    /**
     * Update a pull request application property
     * Update an [application property](/cloud/bitbucket/application-properties/) value stored against a pull request.
     * @param workspace The repository container; either the workspace slug or the UUID in curly braces. (required)
     * @param repoSlug The repository. (required)
     * @param pullrequestId The pull request ID. (required)
     * @param appKey The key of the Connect app. (required)
     * @param propertyName The name of the property. (required)
     * @param applicationProperty The application property to create or update. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> An empty response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updatePullRequestHostedPropertyValueWithHttpInfo(String workspace, String repoSlug, String pullrequestId, String appKey, String propertyName, ApplicationProperty applicationProperty) throws ApiException {
        okhttp3.Call localVarCall = updatePullRequestHostedPropertyValueValidateBeforeCall(workspace, repoSlug, pullrequestId, appKey, propertyName, applicationProperty, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update a pull request application property (asynchronously)
     * Update an [application property](/cloud/bitbucket/application-properties/) value stored against a pull request.
     * @param workspace The repository container; either the workspace slug or the UUID in curly braces. (required)
     * @param repoSlug The repository. (required)
     * @param pullrequestId The pull request ID. (required)
     * @param appKey The key of the Connect app. (required)
     * @param propertyName The name of the property. (required)
     * @param applicationProperty The application property to create or update. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> An empty response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updatePullRequestHostedPropertyValueAsync(String workspace, String repoSlug, String pullrequestId, String appKey, String propertyName, ApplicationProperty applicationProperty, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updatePullRequestHostedPropertyValueValidateBeforeCall(workspace, repoSlug, pullrequestId, appKey, propertyName, applicationProperty, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateRepositoryHostedPropertyValue
     * @param workspace The repository container; either the workspace slug or the UUID in curly braces. (required)
     * @param repoSlug The repository. (required)
     * @param appKey The key of the Connect app. (required)
     * @param propertyName The name of the property. (required)
     * @param applicationProperty The application property to create or update. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> An empty response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateRepositoryHostedPropertyValueCall(String workspace, String repoSlug, String appKey, String propertyName, ApplicationProperty applicationProperty, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = applicationProperty;

        // create path and map variables
        String localVarPath = "/repositories/{workspace}/{repo_slug}/properties/{app_key}/{property_name}"
            .replace("{" + "workspace" + "}", localVarApiClient.escapeString(workspace.toString()))
            .replace("{" + "repo_slug" + "}", localVarApiClient.escapeString(repoSlug.toString()))
            .replace("{" + "app_key" + "}", localVarApiClient.escapeString(appKey.toString()))
            .replace("{" + "property_name" + "}", localVarApiClient.escapeString(propertyName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateRepositoryHostedPropertyValueValidateBeforeCall(String workspace, String repoSlug, String appKey, String propertyName, ApplicationProperty applicationProperty, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workspace' is set
        if (workspace == null) {
            throw new ApiException("Missing the required parameter 'workspace' when calling updateRepositoryHostedPropertyValue(Async)");
        }

        // verify the required parameter 'repoSlug' is set
        if (repoSlug == null) {
            throw new ApiException("Missing the required parameter 'repoSlug' when calling updateRepositoryHostedPropertyValue(Async)");
        }

        // verify the required parameter 'appKey' is set
        if (appKey == null) {
            throw new ApiException("Missing the required parameter 'appKey' when calling updateRepositoryHostedPropertyValue(Async)");
        }

        // verify the required parameter 'propertyName' is set
        if (propertyName == null) {
            throw new ApiException("Missing the required parameter 'propertyName' when calling updateRepositoryHostedPropertyValue(Async)");
        }

        // verify the required parameter 'applicationProperty' is set
        if (applicationProperty == null) {
            throw new ApiException("Missing the required parameter 'applicationProperty' when calling updateRepositoryHostedPropertyValue(Async)");
        }

        return updateRepositoryHostedPropertyValueCall(workspace, repoSlug, appKey, propertyName, applicationProperty, _callback);

    }

    /**
     * Update a repository application property
     * Update an [application property](/cloud/bitbucket/application-properties/) value stored against a repository.
     * @param workspace The repository container; either the workspace slug or the UUID in curly braces. (required)
     * @param repoSlug The repository. (required)
     * @param appKey The key of the Connect app. (required)
     * @param propertyName The name of the property. (required)
     * @param applicationProperty The application property to create or update. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> An empty response. </td><td>  -  </td></tr>
     </table>
     */
    public void updateRepositoryHostedPropertyValue(String workspace, String repoSlug, String appKey, String propertyName, ApplicationProperty applicationProperty) throws ApiException {
        updateRepositoryHostedPropertyValueWithHttpInfo(workspace, repoSlug, appKey, propertyName, applicationProperty);
    }

    /**
     * Update a repository application property
     * Update an [application property](/cloud/bitbucket/application-properties/) value stored against a repository.
     * @param workspace The repository container; either the workspace slug or the UUID in curly braces. (required)
     * @param repoSlug The repository. (required)
     * @param appKey The key of the Connect app. (required)
     * @param propertyName The name of the property. (required)
     * @param applicationProperty The application property to create or update. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> An empty response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateRepositoryHostedPropertyValueWithHttpInfo(String workspace, String repoSlug, String appKey, String propertyName, ApplicationProperty applicationProperty) throws ApiException {
        okhttp3.Call localVarCall = updateRepositoryHostedPropertyValueValidateBeforeCall(workspace, repoSlug, appKey, propertyName, applicationProperty, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update a repository application property (asynchronously)
     * Update an [application property](/cloud/bitbucket/application-properties/) value stored against a repository.
     * @param workspace The repository container; either the workspace slug or the UUID in curly braces. (required)
     * @param repoSlug The repository. (required)
     * @param appKey The key of the Connect app. (required)
     * @param propertyName The name of the property. (required)
     * @param applicationProperty The application property to create or update. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> An empty response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateRepositoryHostedPropertyValueAsync(String workspace, String repoSlug, String appKey, String propertyName, ApplicationProperty applicationProperty, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateRepositoryHostedPropertyValueValidateBeforeCall(workspace, repoSlug, appKey, propertyName, applicationProperty, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateUserHostedPropertyValue
     * @param selectedUser Either the UUID of the account surrounded by curly-braces, for example &#x60;{account UUID}&#x60;, OR an Atlassian Account ID. (required)
     * @param appKey The key of the Connect app. (required)
     * @param propertyName The name of the property. (required)
     * @param applicationProperty The application property to create or update. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> An empty response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateUserHostedPropertyValueCall(String selectedUser, String appKey, String propertyName, ApplicationProperty applicationProperty, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = applicationProperty;

        // create path and map variables
        String localVarPath = "/users/{selected_user}/properties/{app_key}/{property_name}"
            .replace("{" + "selected_user" + "}", localVarApiClient.escapeString(selectedUser.toString()))
            .replace("{" + "app_key" + "}", localVarApiClient.escapeString(appKey.toString()))
            .replace("{" + "property_name" + "}", localVarApiClient.escapeString(propertyName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateUserHostedPropertyValueValidateBeforeCall(String selectedUser, String appKey, String propertyName, ApplicationProperty applicationProperty, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'selectedUser' is set
        if (selectedUser == null) {
            throw new ApiException("Missing the required parameter 'selectedUser' when calling updateUserHostedPropertyValue(Async)");
        }

        // verify the required parameter 'appKey' is set
        if (appKey == null) {
            throw new ApiException("Missing the required parameter 'appKey' when calling updateUserHostedPropertyValue(Async)");
        }

        // verify the required parameter 'propertyName' is set
        if (propertyName == null) {
            throw new ApiException("Missing the required parameter 'propertyName' when calling updateUserHostedPropertyValue(Async)");
        }

        // verify the required parameter 'applicationProperty' is set
        if (applicationProperty == null) {
            throw new ApiException("Missing the required parameter 'applicationProperty' when calling updateUserHostedPropertyValue(Async)");
        }

        return updateUserHostedPropertyValueCall(selectedUser, appKey, propertyName, applicationProperty, _callback);

    }

    /**
     * Update a user application property
     * Update an [application property](/cloud/bitbucket/application-properties/) value stored against a user.
     * @param selectedUser Either the UUID of the account surrounded by curly-braces, for example &#x60;{account UUID}&#x60;, OR an Atlassian Account ID. (required)
     * @param appKey The key of the Connect app. (required)
     * @param propertyName The name of the property. (required)
     * @param applicationProperty The application property to create or update. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> An empty response. </td><td>  -  </td></tr>
     </table>
     */
    public void updateUserHostedPropertyValue(String selectedUser, String appKey, String propertyName, ApplicationProperty applicationProperty) throws ApiException {
        updateUserHostedPropertyValueWithHttpInfo(selectedUser, appKey, propertyName, applicationProperty);
    }

    /**
     * Update a user application property
     * Update an [application property](/cloud/bitbucket/application-properties/) value stored against a user.
     * @param selectedUser Either the UUID of the account surrounded by curly-braces, for example &#x60;{account UUID}&#x60;, OR an Atlassian Account ID. (required)
     * @param appKey The key of the Connect app. (required)
     * @param propertyName The name of the property. (required)
     * @param applicationProperty The application property to create or update. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> An empty response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateUserHostedPropertyValueWithHttpInfo(String selectedUser, String appKey, String propertyName, ApplicationProperty applicationProperty) throws ApiException {
        okhttp3.Call localVarCall = updateUserHostedPropertyValueValidateBeforeCall(selectedUser, appKey, propertyName, applicationProperty, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update a user application property (asynchronously)
     * Update an [application property](/cloud/bitbucket/application-properties/) value stored against a user.
     * @param selectedUser Either the UUID of the account surrounded by curly-braces, for example &#x60;{account UUID}&#x60;, OR an Atlassian Account ID. (required)
     * @param appKey The key of the Connect app. (required)
     * @param propertyName The name of the property. (required)
     * @param applicationProperty The application property to create or update. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> An empty response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateUserHostedPropertyValueAsync(String selectedUser, String appKey, String propertyName, ApplicationProperty applicationProperty, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateUserHostedPropertyValueValidateBeforeCall(selectedUser, appKey, propertyName, applicationProperty, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
