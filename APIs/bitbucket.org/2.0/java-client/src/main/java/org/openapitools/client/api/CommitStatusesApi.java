/*
 * Bitbucket API
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@bitbucket.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Commitstatus;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.PaginatedCommitstatuses;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CommitStatusesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CommitStatusesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CommitStatusesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for repositoriesWorkspaceRepoSlugCommitCommitStatusesBuildKeyGet
     * @param commit The commit&#39;s SHA1. (required)
     * @param key The build status&#39; unique key (required)
     * @param repoSlug This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;.  (required)
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;.  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The build status object with the specified key. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> If the repository is private and the request was not authenticated. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If the repository, commit, or build status key does not exist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repositoriesWorkspaceRepoSlugCommitCommitStatusesBuildKeyGetCall(String commit, String key, String repoSlug, String workspace, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repositories/{workspace}/{repo_slug}/commit/{commit}/statuses/build/{key}"
            .replace("{" + "commit" + "}", localVarApiClient.escapeString(commit.toString()))
            .replace("{" + "key" + "}", localVarApiClient.escapeString(key.toString()))
            .replace("{" + "repo_slug" + "}", localVarApiClient.escapeString(repoSlug.toString()))
            .replace("{" + "workspace" + "}", localVarApiClient.escapeString(workspace.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "oauth2", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call repositoriesWorkspaceRepoSlugCommitCommitStatusesBuildKeyGetValidateBeforeCall(String commit, String key, String repoSlug, String workspace, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'commit' is set
        if (commit == null) {
            throw new ApiException("Missing the required parameter 'commit' when calling repositoriesWorkspaceRepoSlugCommitCommitStatusesBuildKeyGet(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling repositoriesWorkspaceRepoSlugCommitCommitStatusesBuildKeyGet(Async)");
        }

        // verify the required parameter 'repoSlug' is set
        if (repoSlug == null) {
            throw new ApiException("Missing the required parameter 'repoSlug' when calling repositoriesWorkspaceRepoSlugCommitCommitStatusesBuildKeyGet(Async)");
        }

        // verify the required parameter 'workspace' is set
        if (workspace == null) {
            throw new ApiException("Missing the required parameter 'workspace' when calling repositoriesWorkspaceRepoSlugCommitCommitStatusesBuildKeyGet(Async)");
        }

        return repositoriesWorkspaceRepoSlugCommitCommitStatusesBuildKeyGetCall(commit, key, repoSlug, workspace, _callback);

    }

    /**
     * Get a build status for a commit
     * Returns the specified build status for a commit.
     * @param commit The commit&#39;s SHA1. (required)
     * @param key The build status&#39; unique key (required)
     * @param repoSlug This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;.  (required)
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;.  (required)
     * @return Commitstatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The build status object with the specified key. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> If the repository is private and the request was not authenticated. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If the repository, commit, or build status key does not exist </td><td>  -  </td></tr>
     </table>
     */
    public Commitstatus repositoriesWorkspaceRepoSlugCommitCommitStatusesBuildKeyGet(String commit, String key, String repoSlug, String workspace) throws ApiException {
        ApiResponse<Commitstatus> localVarResp = repositoriesWorkspaceRepoSlugCommitCommitStatusesBuildKeyGetWithHttpInfo(commit, key, repoSlug, workspace);
        return localVarResp.getData();
    }

    /**
     * Get a build status for a commit
     * Returns the specified build status for a commit.
     * @param commit The commit&#39;s SHA1. (required)
     * @param key The build status&#39; unique key (required)
     * @param repoSlug This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;.  (required)
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;.  (required)
     * @return ApiResponse&lt;Commitstatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The build status object with the specified key. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> If the repository is private and the request was not authenticated. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If the repository, commit, or build status key does not exist </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Commitstatus> repositoriesWorkspaceRepoSlugCommitCommitStatusesBuildKeyGetWithHttpInfo(String commit, String key, String repoSlug, String workspace) throws ApiException {
        okhttp3.Call localVarCall = repositoriesWorkspaceRepoSlugCommitCommitStatusesBuildKeyGetValidateBeforeCall(commit, key, repoSlug, workspace, null);
        Type localVarReturnType = new TypeToken<Commitstatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a build status for a commit (asynchronously)
     * Returns the specified build status for a commit.
     * @param commit The commit&#39;s SHA1. (required)
     * @param key The build status&#39; unique key (required)
     * @param repoSlug This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;.  (required)
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;.  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The build status object with the specified key. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> If the repository is private and the request was not authenticated. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If the repository, commit, or build status key does not exist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repositoriesWorkspaceRepoSlugCommitCommitStatusesBuildKeyGetAsync(String commit, String key, String repoSlug, String workspace, final ApiCallback<Commitstatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = repositoriesWorkspaceRepoSlugCommitCommitStatusesBuildKeyGetValidateBeforeCall(commit, key, repoSlug, workspace, _callback);
        Type localVarReturnType = new TypeToken<Commitstatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for repositoriesWorkspaceRepoSlugCommitCommitStatusesBuildKeyPut
     * @param commit The commit&#39;s SHA1. (required)
     * @param key The build status&#39; unique key (required)
     * @param repoSlug This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;.  (required)
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;.  (required)
     * @param commitstatus The updated build status object (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated build status object. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> If the repository is private and the request was not authenticated. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If the repository or build does not exist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repositoriesWorkspaceRepoSlugCommitCommitStatusesBuildKeyPutCall(String commit, String key, String repoSlug, String workspace, Commitstatus commitstatus, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = commitstatus;

        // create path and map variables
        String localVarPath = "/repositories/{workspace}/{repo_slug}/commit/{commit}/statuses/build/{key}"
            .replace("{" + "commit" + "}", localVarApiClient.escapeString(commit.toString()))
            .replace("{" + "key" + "}", localVarApiClient.escapeString(key.toString()))
            .replace("{" + "repo_slug" + "}", localVarApiClient.escapeString(repoSlug.toString()))
            .replace("{" + "workspace" + "}", localVarApiClient.escapeString(workspace.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "oauth2", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call repositoriesWorkspaceRepoSlugCommitCommitStatusesBuildKeyPutValidateBeforeCall(String commit, String key, String repoSlug, String workspace, Commitstatus commitstatus, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'commit' is set
        if (commit == null) {
            throw new ApiException("Missing the required parameter 'commit' when calling repositoriesWorkspaceRepoSlugCommitCommitStatusesBuildKeyPut(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling repositoriesWorkspaceRepoSlugCommitCommitStatusesBuildKeyPut(Async)");
        }

        // verify the required parameter 'repoSlug' is set
        if (repoSlug == null) {
            throw new ApiException("Missing the required parameter 'repoSlug' when calling repositoriesWorkspaceRepoSlugCommitCommitStatusesBuildKeyPut(Async)");
        }

        // verify the required parameter 'workspace' is set
        if (workspace == null) {
            throw new ApiException("Missing the required parameter 'workspace' when calling repositoriesWorkspaceRepoSlugCommitCommitStatusesBuildKeyPut(Async)");
        }

        return repositoriesWorkspaceRepoSlugCommitCommitStatusesBuildKeyPutCall(commit, key, repoSlug, workspace, commitstatus, _callback);

    }

    /**
     * Update a build status for a commit
     * Used to update the current status of a build status object on the specific commit.  This operation can also be used to change other properties of the build status:  * &#x60;state&#x60; * &#x60;name&#x60; * &#x60;description&#x60; * &#x60;url&#x60; * &#x60;refname&#x60;  The &#x60;key&#x60; cannot be changed.
     * @param commit The commit&#39;s SHA1. (required)
     * @param key The build status&#39; unique key (required)
     * @param repoSlug This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;.  (required)
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;.  (required)
     * @param commitstatus The updated build status object (optional)
     * @return Commitstatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated build status object. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> If the repository is private and the request was not authenticated. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If the repository or build does not exist </td><td>  -  </td></tr>
     </table>
     */
    public Commitstatus repositoriesWorkspaceRepoSlugCommitCommitStatusesBuildKeyPut(String commit, String key, String repoSlug, String workspace, Commitstatus commitstatus) throws ApiException {
        ApiResponse<Commitstatus> localVarResp = repositoriesWorkspaceRepoSlugCommitCommitStatusesBuildKeyPutWithHttpInfo(commit, key, repoSlug, workspace, commitstatus);
        return localVarResp.getData();
    }

    /**
     * Update a build status for a commit
     * Used to update the current status of a build status object on the specific commit.  This operation can also be used to change other properties of the build status:  * &#x60;state&#x60; * &#x60;name&#x60; * &#x60;description&#x60; * &#x60;url&#x60; * &#x60;refname&#x60;  The &#x60;key&#x60; cannot be changed.
     * @param commit The commit&#39;s SHA1. (required)
     * @param key The build status&#39; unique key (required)
     * @param repoSlug This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;.  (required)
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;.  (required)
     * @param commitstatus The updated build status object (optional)
     * @return ApiResponse&lt;Commitstatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated build status object. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> If the repository is private and the request was not authenticated. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If the repository or build does not exist </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Commitstatus> repositoriesWorkspaceRepoSlugCommitCommitStatusesBuildKeyPutWithHttpInfo(String commit, String key, String repoSlug, String workspace, Commitstatus commitstatus) throws ApiException {
        okhttp3.Call localVarCall = repositoriesWorkspaceRepoSlugCommitCommitStatusesBuildKeyPutValidateBeforeCall(commit, key, repoSlug, workspace, commitstatus, null);
        Type localVarReturnType = new TypeToken<Commitstatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a build status for a commit (asynchronously)
     * Used to update the current status of a build status object on the specific commit.  This operation can also be used to change other properties of the build status:  * &#x60;state&#x60; * &#x60;name&#x60; * &#x60;description&#x60; * &#x60;url&#x60; * &#x60;refname&#x60;  The &#x60;key&#x60; cannot be changed.
     * @param commit The commit&#39;s SHA1. (required)
     * @param key The build status&#39; unique key (required)
     * @param repoSlug This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;.  (required)
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;.  (required)
     * @param commitstatus The updated build status object (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated build status object. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> If the repository is private and the request was not authenticated. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If the repository or build does not exist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repositoriesWorkspaceRepoSlugCommitCommitStatusesBuildKeyPutAsync(String commit, String key, String repoSlug, String workspace, Commitstatus commitstatus, final ApiCallback<Commitstatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = repositoriesWorkspaceRepoSlugCommitCommitStatusesBuildKeyPutValidateBeforeCall(commit, key, repoSlug, workspace, commitstatus, _callback);
        Type localVarReturnType = new TypeToken<Commitstatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for repositoriesWorkspaceRepoSlugCommitCommitStatusesBuildPost
     * @param commit The commit&#39;s SHA1. (required)
     * @param repoSlug This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;.  (required)
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;.  (required)
     * @param commitstatus The new commit status object. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The newly created build status object. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> If the repository is private and the request was not authenticated. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If the repository, commit, or build status key does not exist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repositoriesWorkspaceRepoSlugCommitCommitStatusesBuildPostCall(String commit, String repoSlug, String workspace, Commitstatus commitstatus, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = commitstatus;

        // create path and map variables
        String localVarPath = "/repositories/{workspace}/{repo_slug}/commit/{commit}/statuses/build"
            .replace("{" + "commit" + "}", localVarApiClient.escapeString(commit.toString()))
            .replace("{" + "repo_slug" + "}", localVarApiClient.escapeString(repoSlug.toString()))
            .replace("{" + "workspace" + "}", localVarApiClient.escapeString(workspace.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "oauth2", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call repositoriesWorkspaceRepoSlugCommitCommitStatusesBuildPostValidateBeforeCall(String commit, String repoSlug, String workspace, Commitstatus commitstatus, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'commit' is set
        if (commit == null) {
            throw new ApiException("Missing the required parameter 'commit' when calling repositoriesWorkspaceRepoSlugCommitCommitStatusesBuildPost(Async)");
        }

        // verify the required parameter 'repoSlug' is set
        if (repoSlug == null) {
            throw new ApiException("Missing the required parameter 'repoSlug' when calling repositoriesWorkspaceRepoSlugCommitCommitStatusesBuildPost(Async)");
        }

        // verify the required parameter 'workspace' is set
        if (workspace == null) {
            throw new ApiException("Missing the required parameter 'workspace' when calling repositoriesWorkspaceRepoSlugCommitCommitStatusesBuildPost(Async)");
        }

        return repositoriesWorkspaceRepoSlugCommitCommitStatusesBuildPostCall(commit, repoSlug, workspace, commitstatus, _callback);

    }

    /**
     * Create a build status for a commit
     * Creates a new build status against the specified commit.  If the specified key already exists, the existing status object will be overwritten.  Example:  &#x60;&#x60;&#x60; curl https://api.bitbucket.org/2.0/repositories/my-workspace/my-repo/commit/e10dae226959c2194f2b07b077c07762d93821cf/statuses/build/           -X POST -u jdoe -H &#39;Content-Type: application/json&#39;           -d &#39;{     \&quot;key\&quot;: \&quot;MY-BUILD\&quot;,     \&quot;state\&quot;: \&quot;SUCCESSFUL\&quot;,     \&quot;description\&quot;: \&quot;42 tests passed\&quot;,     \&quot;url\&quot;: \&quot;https://www.example.org/my-build-result\&quot;   }&#39; &#x60;&#x60;&#x60;  When creating a new commit status, you can use a URI template for the URL. Templates are URLs that contain variable names that Bitbucket will evaluate at runtime whenever the URL is displayed anywhere similar to parameter substitution in [Bitbucket Connect](https://developer.atlassian.com/bitbucket/concepts/context-parameters.html). For example, one could use &#x60;https://foo.com/builds/{repository.full_name}&#x60; which Bitbucket will turn into &#x60;https://foo.com/builds/foo/bar&#x60; at render time. The context variables available are &#x60;repository&#x60; and &#x60;commit&#x60;.
     * @param commit The commit&#39;s SHA1. (required)
     * @param repoSlug This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;.  (required)
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;.  (required)
     * @param commitstatus The new commit status object. (optional)
     * @return Commitstatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The newly created build status object. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> If the repository is private and the request was not authenticated. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If the repository, commit, or build status key does not exist </td><td>  -  </td></tr>
     </table>
     */
    public Commitstatus repositoriesWorkspaceRepoSlugCommitCommitStatusesBuildPost(String commit, String repoSlug, String workspace, Commitstatus commitstatus) throws ApiException {
        ApiResponse<Commitstatus> localVarResp = repositoriesWorkspaceRepoSlugCommitCommitStatusesBuildPostWithHttpInfo(commit, repoSlug, workspace, commitstatus);
        return localVarResp.getData();
    }

    /**
     * Create a build status for a commit
     * Creates a new build status against the specified commit.  If the specified key already exists, the existing status object will be overwritten.  Example:  &#x60;&#x60;&#x60; curl https://api.bitbucket.org/2.0/repositories/my-workspace/my-repo/commit/e10dae226959c2194f2b07b077c07762d93821cf/statuses/build/           -X POST -u jdoe -H &#39;Content-Type: application/json&#39;           -d &#39;{     \&quot;key\&quot;: \&quot;MY-BUILD\&quot;,     \&quot;state\&quot;: \&quot;SUCCESSFUL\&quot;,     \&quot;description\&quot;: \&quot;42 tests passed\&quot;,     \&quot;url\&quot;: \&quot;https://www.example.org/my-build-result\&quot;   }&#39; &#x60;&#x60;&#x60;  When creating a new commit status, you can use a URI template for the URL. Templates are URLs that contain variable names that Bitbucket will evaluate at runtime whenever the URL is displayed anywhere similar to parameter substitution in [Bitbucket Connect](https://developer.atlassian.com/bitbucket/concepts/context-parameters.html). For example, one could use &#x60;https://foo.com/builds/{repository.full_name}&#x60; which Bitbucket will turn into &#x60;https://foo.com/builds/foo/bar&#x60; at render time. The context variables available are &#x60;repository&#x60; and &#x60;commit&#x60;.
     * @param commit The commit&#39;s SHA1. (required)
     * @param repoSlug This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;.  (required)
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;.  (required)
     * @param commitstatus The new commit status object. (optional)
     * @return ApiResponse&lt;Commitstatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The newly created build status object. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> If the repository is private and the request was not authenticated. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If the repository, commit, or build status key does not exist </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Commitstatus> repositoriesWorkspaceRepoSlugCommitCommitStatusesBuildPostWithHttpInfo(String commit, String repoSlug, String workspace, Commitstatus commitstatus) throws ApiException {
        okhttp3.Call localVarCall = repositoriesWorkspaceRepoSlugCommitCommitStatusesBuildPostValidateBeforeCall(commit, repoSlug, workspace, commitstatus, null);
        Type localVarReturnType = new TypeToken<Commitstatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a build status for a commit (asynchronously)
     * Creates a new build status against the specified commit.  If the specified key already exists, the existing status object will be overwritten.  Example:  &#x60;&#x60;&#x60; curl https://api.bitbucket.org/2.0/repositories/my-workspace/my-repo/commit/e10dae226959c2194f2b07b077c07762d93821cf/statuses/build/           -X POST -u jdoe -H &#39;Content-Type: application/json&#39;           -d &#39;{     \&quot;key\&quot;: \&quot;MY-BUILD\&quot;,     \&quot;state\&quot;: \&quot;SUCCESSFUL\&quot;,     \&quot;description\&quot;: \&quot;42 tests passed\&quot;,     \&quot;url\&quot;: \&quot;https://www.example.org/my-build-result\&quot;   }&#39; &#x60;&#x60;&#x60;  When creating a new commit status, you can use a URI template for the URL. Templates are URLs that contain variable names that Bitbucket will evaluate at runtime whenever the URL is displayed anywhere similar to parameter substitution in [Bitbucket Connect](https://developer.atlassian.com/bitbucket/concepts/context-parameters.html). For example, one could use &#x60;https://foo.com/builds/{repository.full_name}&#x60; which Bitbucket will turn into &#x60;https://foo.com/builds/foo/bar&#x60; at render time. The context variables available are &#x60;repository&#x60; and &#x60;commit&#x60;.
     * @param commit The commit&#39;s SHA1. (required)
     * @param repoSlug This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;.  (required)
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;.  (required)
     * @param commitstatus The new commit status object. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The newly created build status object. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> If the repository is private and the request was not authenticated. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If the repository, commit, or build status key does not exist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repositoriesWorkspaceRepoSlugCommitCommitStatusesBuildPostAsync(String commit, String repoSlug, String workspace, Commitstatus commitstatus, final ApiCallback<Commitstatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = repositoriesWorkspaceRepoSlugCommitCommitStatusesBuildPostValidateBeforeCall(commit, repoSlug, workspace, commitstatus, _callback);
        Type localVarReturnType = new TypeToken<Commitstatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for repositoriesWorkspaceRepoSlugCommitCommitStatusesGet
     * @param commit The commit&#39;s SHA1. (required)
     * @param repoSlug This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;.  (required)
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;.  (required)
     * @param q Query string to narrow down the response as per [filtering and sorting](/cloud/bitbucket/rest/intro/#filtering).  (optional)
     * @param sort Field by which the results should be sorted as per [filtering and sorting](/cloud/bitbucket/rest/intro/#filtering). Defaults to &#x60;created_on&#x60;.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A paginated list of all commit statuses for this commit. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> If the repository is private and the request was not authenticated. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If the repository or commit does not exist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repositoriesWorkspaceRepoSlugCommitCommitStatusesGetCall(String commit, String repoSlug, String workspace, String q, String sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repositories/{workspace}/{repo_slug}/commit/{commit}/statuses"
            .replace("{" + "commit" + "}", localVarApiClient.escapeString(commit.toString()))
            .replace("{" + "repo_slug" + "}", localVarApiClient.escapeString(repoSlug.toString()))
            .replace("{" + "workspace" + "}", localVarApiClient.escapeString(workspace.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "oauth2", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call repositoriesWorkspaceRepoSlugCommitCommitStatusesGetValidateBeforeCall(String commit, String repoSlug, String workspace, String q, String sort, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'commit' is set
        if (commit == null) {
            throw new ApiException("Missing the required parameter 'commit' when calling repositoriesWorkspaceRepoSlugCommitCommitStatusesGet(Async)");
        }

        // verify the required parameter 'repoSlug' is set
        if (repoSlug == null) {
            throw new ApiException("Missing the required parameter 'repoSlug' when calling repositoriesWorkspaceRepoSlugCommitCommitStatusesGet(Async)");
        }

        // verify the required parameter 'workspace' is set
        if (workspace == null) {
            throw new ApiException("Missing the required parameter 'workspace' when calling repositoriesWorkspaceRepoSlugCommitCommitStatusesGet(Async)");
        }

        return repositoriesWorkspaceRepoSlugCommitCommitStatusesGetCall(commit, repoSlug, workspace, q, sort, _callback);

    }

    /**
     * List commit statuses for a commit
     * Returns all statuses (e.g. build results) for a specific commit.
     * @param commit The commit&#39;s SHA1. (required)
     * @param repoSlug This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;.  (required)
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;.  (required)
     * @param q Query string to narrow down the response as per [filtering and sorting](/cloud/bitbucket/rest/intro/#filtering).  (optional)
     * @param sort Field by which the results should be sorted as per [filtering and sorting](/cloud/bitbucket/rest/intro/#filtering). Defaults to &#x60;created_on&#x60;.  (optional)
     * @return PaginatedCommitstatuses
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A paginated list of all commit statuses for this commit. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> If the repository is private and the request was not authenticated. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If the repository or commit does not exist </td><td>  -  </td></tr>
     </table>
     */
    public PaginatedCommitstatuses repositoriesWorkspaceRepoSlugCommitCommitStatusesGet(String commit, String repoSlug, String workspace, String q, String sort) throws ApiException {
        ApiResponse<PaginatedCommitstatuses> localVarResp = repositoriesWorkspaceRepoSlugCommitCommitStatusesGetWithHttpInfo(commit, repoSlug, workspace, q, sort);
        return localVarResp.getData();
    }

    /**
     * List commit statuses for a commit
     * Returns all statuses (e.g. build results) for a specific commit.
     * @param commit The commit&#39;s SHA1. (required)
     * @param repoSlug This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;.  (required)
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;.  (required)
     * @param q Query string to narrow down the response as per [filtering and sorting](/cloud/bitbucket/rest/intro/#filtering).  (optional)
     * @param sort Field by which the results should be sorted as per [filtering and sorting](/cloud/bitbucket/rest/intro/#filtering). Defaults to &#x60;created_on&#x60;.  (optional)
     * @return ApiResponse&lt;PaginatedCommitstatuses&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A paginated list of all commit statuses for this commit. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> If the repository is private and the request was not authenticated. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If the repository or commit does not exist </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaginatedCommitstatuses> repositoriesWorkspaceRepoSlugCommitCommitStatusesGetWithHttpInfo(String commit, String repoSlug, String workspace, String q, String sort) throws ApiException {
        okhttp3.Call localVarCall = repositoriesWorkspaceRepoSlugCommitCommitStatusesGetValidateBeforeCall(commit, repoSlug, workspace, q, sort, null);
        Type localVarReturnType = new TypeToken<PaginatedCommitstatuses>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List commit statuses for a commit (asynchronously)
     * Returns all statuses (e.g. build results) for a specific commit.
     * @param commit The commit&#39;s SHA1. (required)
     * @param repoSlug This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;.  (required)
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;.  (required)
     * @param q Query string to narrow down the response as per [filtering and sorting](/cloud/bitbucket/rest/intro/#filtering).  (optional)
     * @param sort Field by which the results should be sorted as per [filtering and sorting](/cloud/bitbucket/rest/intro/#filtering). Defaults to &#x60;created_on&#x60;.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A paginated list of all commit statuses for this commit. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> If the repository is private and the request was not authenticated. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If the repository or commit does not exist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repositoriesWorkspaceRepoSlugCommitCommitStatusesGetAsync(String commit, String repoSlug, String workspace, String q, String sort, final ApiCallback<PaginatedCommitstatuses> _callback) throws ApiException {

        okhttp3.Call localVarCall = repositoriesWorkspaceRepoSlugCommitCommitStatusesGetValidateBeforeCall(commit, repoSlug, workspace, q, sort, _callback);
        Type localVarReturnType = new TypeToken<PaginatedCommitstatuses>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdStatusesGet_0
     * @param pullRequestId The id of the pull request. (required)
     * @param repoSlug This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;.  (required)
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;.  (required)
     * @param q Query string to narrow down the response as per [filtering and sorting](/cloud/bitbucket/rest/intro/#filtering).  (optional)
     * @param sort Field by which the results should be sorted as per [filtering and sorting](/cloud/bitbucket/rest/intro/#filtering). Defaults to &#x60;created_on&#x60;.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A paginated list of all commit statuses for this pull request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> If the repository is private and the request was not authenticated. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If the specified repository or pull request does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdStatusesGet_0Call(Integer pullRequestId, String repoSlug, String workspace, String q, String sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repositories/{workspace}/{repo_slug}/pullrequests/{pull_request_id}/statuses"
            .replace("{" + "pull_request_id" + "}", localVarApiClient.escapeString(pullRequestId.toString()))
            .replace("{" + "repo_slug" + "}", localVarApiClient.escapeString(repoSlug.toString()))
            .replace("{" + "workspace" + "}", localVarApiClient.escapeString(workspace.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "oauth2", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdStatusesGet_0ValidateBeforeCall(Integer pullRequestId, String repoSlug, String workspace, String q, String sort, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pullRequestId' is set
        if (pullRequestId == null) {
            throw new ApiException("Missing the required parameter 'pullRequestId' when calling repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdStatusesGet_0(Async)");
        }

        // verify the required parameter 'repoSlug' is set
        if (repoSlug == null) {
            throw new ApiException("Missing the required parameter 'repoSlug' when calling repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdStatusesGet_0(Async)");
        }

        // verify the required parameter 'workspace' is set
        if (workspace == null) {
            throw new ApiException("Missing the required parameter 'workspace' when calling repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdStatusesGet_0(Async)");
        }

        return repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdStatusesGet_0Call(pullRequestId, repoSlug, workspace, q, sort, _callback);

    }

    /**
     * List commit statuses for a pull request
     * Returns all statuses (e.g. build results) for the given pull request.
     * @param pullRequestId The id of the pull request. (required)
     * @param repoSlug This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;.  (required)
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;.  (required)
     * @param q Query string to narrow down the response as per [filtering and sorting](/cloud/bitbucket/rest/intro/#filtering).  (optional)
     * @param sort Field by which the results should be sorted as per [filtering and sorting](/cloud/bitbucket/rest/intro/#filtering). Defaults to &#x60;created_on&#x60;.  (optional)
     * @return PaginatedCommitstatuses
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A paginated list of all commit statuses for this pull request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> If the repository is private and the request was not authenticated. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If the specified repository or pull request does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public PaginatedCommitstatuses repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdStatusesGet_0(Integer pullRequestId, String repoSlug, String workspace, String q, String sort) throws ApiException {
        ApiResponse<PaginatedCommitstatuses> localVarResp = repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdStatusesGet_0WithHttpInfo(pullRequestId, repoSlug, workspace, q, sort);
        return localVarResp.getData();
    }

    /**
     * List commit statuses for a pull request
     * Returns all statuses (e.g. build results) for the given pull request.
     * @param pullRequestId The id of the pull request. (required)
     * @param repoSlug This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;.  (required)
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;.  (required)
     * @param q Query string to narrow down the response as per [filtering and sorting](/cloud/bitbucket/rest/intro/#filtering).  (optional)
     * @param sort Field by which the results should be sorted as per [filtering and sorting](/cloud/bitbucket/rest/intro/#filtering). Defaults to &#x60;created_on&#x60;.  (optional)
     * @return ApiResponse&lt;PaginatedCommitstatuses&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A paginated list of all commit statuses for this pull request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> If the repository is private and the request was not authenticated. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If the specified repository or pull request does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaginatedCommitstatuses> repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdStatusesGet_0WithHttpInfo(Integer pullRequestId, String repoSlug, String workspace, String q, String sort) throws ApiException {
        okhttp3.Call localVarCall = repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdStatusesGet_0ValidateBeforeCall(pullRequestId, repoSlug, workspace, q, sort, null);
        Type localVarReturnType = new TypeToken<PaginatedCommitstatuses>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List commit statuses for a pull request (asynchronously)
     * Returns all statuses (e.g. build results) for the given pull request.
     * @param pullRequestId The id of the pull request. (required)
     * @param repoSlug This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: &#x60;{repository UUID}&#x60;.  (required)
     * @param workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: &#x60;{workspace UUID}&#x60;.  (required)
     * @param q Query string to narrow down the response as per [filtering and sorting](/cloud/bitbucket/rest/intro/#filtering).  (optional)
     * @param sort Field by which the results should be sorted as per [filtering and sorting](/cloud/bitbucket/rest/intro/#filtering). Defaults to &#x60;created_on&#x60;.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A paginated list of all commit statuses for this pull request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> If the repository is private and the request was not authenticated. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If the specified repository or pull request does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdStatusesGet_0Async(Integer pullRequestId, String repoSlug, String workspace, String q, String sort, final ApiCallback<PaginatedCommitstatuses> _callback) throws ApiException {

        okhttp3.Call localVarCall = repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdStatusesGet_0ValidateBeforeCall(pullRequestId, repoSlug, workspace, q, sort, _callback);
        Type localVarReturnType = new TypeToken<PaginatedCommitstatuses>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
